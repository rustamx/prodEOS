#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет уведомление для отправки.
//
// Параметры:
//  Телефон - Строка - Номер телефона.
//  Текст - Строка - Текст SMS сообщения.
//  Пользователь - Пользователь - Кому предназначено сообщение.
//
Процедура Добавить(Телефон, Знач Текст, Пользователь) Экспорт
	
	ОграничениеКоличестваВДеньSMS = Константы.ОграничениеКоличестваВДеньSMS.Получить();
	ОграничениеКоличестваВМесяцSMS = Константы.ОграничениеКоличестваВМесяцSMS.Получить();
	ОграничениеКоличестваВсегоВДеньSMS = Константы.ОграничениеКоличестваВсегоВДеньSMS.Получить();
	ОграничениеКоличестваВсегоВМесяцSMS = Константы.ОграничениеКоличестваВсегоВМесяцSMS.Получить();
	
	Если ЗначениеЗаполнено(ОграничениеКоличестваВДеньSMS) 
		И КоличествоЗаДень(Пользователь) >= ОграничениеКоличестваВДеньSMS Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Достигнуто ограничение количества SMS в день для пользователя %1.'; en = 'Daily SMS limit has been reached for user %1.'"),
			Пользователь);
		ВызватьИсключение ТекстОшибки;
	ИначеЕсли ЗначениеЗаполнено(ОграничениеКоличестваВМесяцSMS) 
		И КоличествоЗаМесяц(Пользователь) >= ОграничениеКоличестваВМесяцSMS Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Достигнуто ограничение количества SMS в месяц для пользователя %1.'; en = 'Monthly SMS limit has been reached for user %1.'"),
			Пользователь);
		ВызватьИсключение ТекстОшибки;
	ИначеЕсли ЗначениеЗаполнено(ОграничениеКоличестваВсегоВДеньSMS) 
		И КоличествоЗаДень() >= ОграничениеКоличестваВсегоВДеньSMS Тогда
		ТекстОшибки = НСтр("ru = 'Достигнуто ограничение количества SMS в день.'; en = 'Daily SMS limit has been reached.'");
		ВызватьИсключение ТекстОшибки;
	ИначеЕсли ЗначениеЗаполнено(ОграничениеКоличестваВсегоВМесяцSMS) 
		И КоличествоЗаМесяц() >= ОграничениеКоличестваВсегоВМесяцSMS Тогда
		ТекстОшибки = НСтр("ru = 'Достигнуто ограничение количества SMS в месяц.'; en = 'Monthly SMS limit has been reached.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Константы.ИспользоватьТранслитерациюSMS.Получить() Тогда
		Текст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Текст);
	КонецЕсли;
	
	РазмерSMS = Константы.РазмерSMS.Получить();
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	ра_ОграничиватьТекстSmsУведомленийРазмеромSmsСообщения = Константы.ра_ОграничиватьТекстSmsУведомленийРазмеромSmsСообщения.Получить();
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
	
	ДлинаТекста = СтрДлина(Текст);
	Если ДлинаТекста > РазмерSMS
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
		И ра_ОграничиватьТекстSmsУведомленийРазмеромSmsСообщения
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
		Тогда
		Текст = Лев(Текст, РазмерSMS - 3) + "...";
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Телефон", Телефон);
	ДанныеЗаполнения.Вставить("Текст", Текст);
	ДанныеЗаполнения.Вставить("Пользователь", Пользователь);
	ДанныеЗаполнения.Вставить("Статус", Перечисления.СтатусыДоставкиSMS.Подготовлено);
	
	УведомлениеSMS = СоздатьДокумент();
	УведомлениеSMS.Заполнить(ДанныеЗаполнения);
	УведомлениеSMS.Записать();
	
КонецПроцедуры

// Выполняет рассылку SMS уведомлений.
//
Процедура ВыполнитьРассылку() Экспорт
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьSMS();
	ОбновитьСтатусыДоставки();
	
КонецПроцедуры

// Подсчитывает количество SMS за день.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  Число - Количество SMS за день.
//
Функция КоличествоЗаДень(Пользователь = Неопределено) Экспорт
	
	Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	КоличествоЗаДень = КоличествоЗаПериод(Период.ДатаНачала, Период.ДатаОкончания, Пользователь);
	
	Возврат КоличествоЗаДень;
	
КонецФункции

// Подсчитывает количество SMS за месяц.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  Чисо - Количество SMS за месяц.
//
Функция КоличествоЗаМесяц(Пользователь = Неопределено) Экспорт
	
	Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц);
	КоличествоЗаМесяц = КоличествоЗаПериод(Период.ДатаНачала, Период.ДатаОкончания, Пользователь);
	
	Возврат КоличествоЗаМесяц;
	
КонецФункции

// Запрашивает статусы доставки сообщений у поставщика услуг.
//
// Параметры:
//  УведомлениеSMS - ДокументСсылка.УведомлениеSMS - Уведомление SMS.
//
Процедура ОбновитьСтатусДоставки(УведомлениеSMS) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыТребующиеОбновления = Перечисления.СтатусыДоставкиSMS.СтатусыТребующиеОбновления();
	
	Попытка
		
		Объект = УведомлениеSMS.ПолучитьОбъект();
		Объект.Заблокировать();
		Если СтатусыТребующиеОбновления.Найти(Объект.Статус) <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Объект.Идентификатор) Тогда
				СтрокаСтатуса = ОтправкаSMS.СтатусДоставки(Объект.Идентификатор);
				Статус = Перечисления.СтатусыДоставкиSMS.ПолучитьИзСтроки(СтрокаСтатуса);
			Иначе
				Статус = Перечисления.СтатусыДоставкиSMS.НетИдентификатора;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Статус)  Тогда
				Объект.Статус = Статус;
				Объект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при обновления состояния уведомления SMS: %1'; en = 'Error updating SMS notification status: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.УведомлениеПоSMS,
			УведомлениеSMS,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
Процедура ОтправитьSMS()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПеревестиВТранслит = Константы.ИспользоватьТранслитерациюSMS.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеПоSMS.Ссылка,
		|	УведомлениеПоSMS.Телефон,
		|	УведомлениеПоSMS.Текст
		|ИЗ
		|	Документ.УведомлениеПоSMS КАК УведомлениеПоSMS
		|ГДЕ
		|	УведомлениеПоSMS.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоставкиSMS.Подготовлено)
		|	И УведомлениеПоSMS.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НомераПолучателей = Новый Массив;
			НомераПолучателей.Добавить(Выборка.Телефон);
			
			НачатьТранзакцию();
			Попытка
				
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Заблокировать();
				Объект.Дата = ТекущаяДатаСеанса();
				Объект.Проведен = Истина;
				Объект.Статус = Перечисления.СтатусыДоставкиSMS.Передано;
				Объект.Записать();
				
				РезультатОтправки = ОтправкаSMS.ОтправитьSMS(
					НомераПолучателей,
					Выборка.Текст,,
					ПеревестиВТранслит);
				Если ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки)  Тогда
					ВызватьИсключение РезультатОтправки.ОписаниеОшибки;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			Объект.Идентификатор = РезультатОтправки.ОтправленныеСообщения[0].ИдентификаторСообщения;
			Объект.Записать();
			
		Исключение
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при передаче уведомления провайдеру SMS: %1'; en = 'Error sending SMS notification to provider: %1'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.УведомлениеПоSMS,
				Выборка.Ссылка,
				ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Запрашивает статусы доставки сообщений у поставщика услуг.
//
Процедура ОбновитьСтатусыДоставки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеПоSMS.Ссылка
		|ИЗ
		|	Документ.УведомлениеПоSMS КАК УведомлениеПоSMS
		|ГДЕ
		|	УведомлениеПоSMS.Статус В(&Статусы)
		|	И УведомлениеПоSMS.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Статусы", Перечисления.СтатусыДоставкиSMS.СтатусыТребующиеОбновления());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьСтатусДоставки(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Подсчитывает количество SMS за период.
//
// Параметры:
//  НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Конец периода.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  Число - Количество SMS за период.
//
Функция КоличествоЗаПериод(НачалоПериода, КонецПериода, Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоЗаПериод = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УведомлениеПоSMS.Ссылка) КАК КоличествоSMS
		|ИЗ
		|	Документ.УведомлениеПоSMS КАК УведомлениеПоSMS
		|ГДЕ
		|	УведомлениеПоSMS.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И УведомлениеПоSMS.ПометкаУдаления = ЛОЖЬ
		|{ГДЕ
		|	(УведомлениеПоSMS.Пользователь = &Пользователь) КАК Поле2}");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоЗаПериод = Выборка.КоличествоSMS;
	КонецЕсли;
	
	Возврат КоличествоЗаПериод;
	
КонецФункции

#КонецОбласти

#КонецЕсли
