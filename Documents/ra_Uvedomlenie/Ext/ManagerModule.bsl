#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура АктуализироватьМассивОбязательныхРеквизитов(МассивРеквизитов, ДокументОбъект) Экспорт
	
	Если ДокументОбъект.VidOperacii = Перечисления.ra_VidyUvedomleniy.UvedomlenieVnutriOrganizacii Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивРеквизитов, "OtvetstvennyjZaKachestvoOtpravitel");
	КонецЕсли;
	
КонецПроцедуры

#Область МаршрутыСогласования

// ТСК Корнюшенков А.Ю. 28.06.2018 {

// Возвращает Имя предмета процесса по умолчанию
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Уведомление о несоответствии'; en = 'Notification'");
	
КонецФункции

Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
	//Возврат Истина;
	
КонецФункции

// ТСК Корнюшенков А.Ю. 28.06.2018 }

#КонецОбласти

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати, СтруктураПараметров = Неопределено) Экспорт
	
	ра_ОбщегоНазначения.ВыполнитьЗаполнениеКомандПечатиДокументаЕОС(КомандыПечати, СтруктураПараметров);
		
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // ТСК Ткаченко Иван 24.12.2018 ДоработкиМП {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УведомлениеОНесоответствии") Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "УведомлениеОНесоответствии", "Уведомление о несоответствии", ПечатьФормыДляПередачиВМобильноеПриложение(МассивОбъектов, ОбъектыПечати));
		
	// ТСК Ткаченко Иван 24.12.2018 ДоработкиМП }		
	КонецЕсли;
		
КонецПроцедуры

// ТСК Ткаченко Иван 24.12.2018 ДоработкиМП {
Функция ПечатьФормыДляПередачиВМобильноеПриложение(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Документы.ra_Uvedomlenie.ПолучитьМакет("МакетДляПередачиВМП");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции
// ТСК Ткаченко Иван 24.12.2018 ДоработкиМП }

#КонецОбласти

#Область УправлениеДоступом

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	Документы.ra_Nesootvetstvie.ЗаполнитьДескрипторыПроизводныхДокументов(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено);
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	Документы.ra_Nesootvetstvie.ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат Документы.ra_Nesootvetstvie.ПолучитьПоляДоступаПроизводногоДокумента();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияBitrix

Процедура СформироватьМассивДанныхGetList(Результат, ПолноеИмя, ПараметрыЗапросаHTTP) Экспорт
	
	ОбъектМетаданных = Метаданные.Документы.ra_Uvedomlenie;
	
	ТаблицаРеквизитов = ра_ОбменДанными.ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
	
	АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов);
	
	ТекстЗапросаВложенныеТаблицы = ПолучитьТекстЗапросаВложенныеТаблицы();
	ТекстЗапросаСоединений = ПолучитьТекстЗапросаСоединений();
	
	Запрос = ра_ОбменДанными.ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ПолноеИмя, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзЗапроса(Запрос);
	Результат.Вставить("value", МассивДанных);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		МассивКолонок = ПолучитьПолучитьМассивКолонокСписка();
		МассивКнопок = ПолучитьМассивКнопок(Запрос.Параметры);
		МассивФильтров = ПолучитьМассивФильтровСписка();
		Результат.Вставить("form_settings", МассивКолонок);
		Результат.Вставить("button_settings", МассивКнопок);
		Результат.Вставить("filter_settings", МассивФильтров);
	КонецЕсли;
		
КонецПроцедуры

Процедура АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов)
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "MainFile", "Справочник.Файлы", "ЕСТЬNULL(СправочникФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "DocStatus", "Перечисление.СостоянияДокументов", "ЕСТЬNULL(РС_ИсторияСостояний.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusIndex", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ИндексСтатуса, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusTotal", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ВсегоСтатусов, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВложенныеТаблицы() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстЗапросаСоединений() Экспорт
	
	Возврат "	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК СправочникФайлы
			|	ПО ОсновнаяТаблица.Ссылка = СправочникФайлы.ВладелецФайла
			|		И СправочникФайлы.ра_ОсновнойФайл
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК РС_ИсторияСостояний
			|	ПО ОсновнаяТаблица.Ссылка = РС_ИсторияСостояний.Документ
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ра_ИндексыСтатусовВидовОбъектов КАК РС_ИндексыСтатусовВидовОбъектов
			|	ПО ОсновнаяТаблица.ВидДокумента = РС_ИндексыСтатусовВидовОбъектов.ВидДокумента
			|	И РС_ИсторияСостояний.Состояние = РС_ИндексыСтатусовВидовОбъектов.СостояниеДокумента";
	
КонецФункции

Функция СформироватьМассивДанныхРолевойМодели(ДокументОбъект, ПараметрыФормирования = Неопределено) Экспорт
	
	Возврат Обработки.ра_ФормыБитрикс.Создать().ОписаниеФормы(ДокументОбъект.Метаданные(), ДокументОбъект);
	
КонецФункции

Функция ПолучитьМассивКнопок(ДокументОбъект) Экспорт
	
	ВидФормы = "ФормаОбъекта";
	Несоответствие = Документы.ra_Nesootvetstvie.ПустаяСсылка();
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ВидФормы = "ФормаСписка";
		Если ДокументОбъект.Свойство("Nesootvetstvie") Тогда
			Несоответствие = ДокументОбъект.Nesootvetstvie;
		КонецЕсли;
	Иначе
		Несоответствие = ДокументОбъект.Nesootvetstvie;
		СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(ДокументОбъект.Ссылка);
	КонецЕсли;
	
	МассивКнопок = Новый Массив;
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Несоответствие,
			Новый Структура("ra_Uvedomlenie"));
		
		ДопустившаяОрганизация = Документы.ra_Nesootvetstvie.ПоследняяДопустившаяОрганизация(Несоответствие);
		
		НесоответствиеПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Несоответствие, "Проведен");
		
		ИмяКнопки = "CreateNewNotificationOwnOrg";
		ОписаниеКнопки = НСтр("ru = 'Создать уведомление по своей организации'; en = 'Create new notification own organization'");
		КнопкаСоздатьУведомлениеСвояОрг = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		ИмяКнопки = "CreateNewNotificationThirdPartyOrg";
		ОписаниеКнопки = НСтр("ru = 'Создать уведомление по сторонней организации'; en = 'Create new third-party notification'");
		КнопкаСоздатьУведомлениеСторОрг = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		ИмяКнопки = "NotificationToCustomer";
		ОписаниеКнопки = НСтр("ru = 'Создать уведомление заказчику'; en = 'Create new notification to customer'");
		КнопкаСоздатьУведомлениеЗаказчику = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		Если ДопустившаяОрганизация = Неопределено Тогда
			ЭтоВыявившийНС = Документы.ra_Nesootvetstvie.ЭтоВыявившийНесоответствие(Несоответствие);
			ЕстьНезавершенноеУведомление = ЕстьНезавершенноеУведомление(Несоответствие);
			
			КнопкаСоздатьУведомлениеСвояОрг.Availability = ЭтоВыявившийНС И (Не РезультатыПроверки.Свойство("ra_Uvedomlenie") или Не ЕстьНезавершенноеУведомление) И НесоответствиеПроведен;
			КнопкаСоздатьУведомлениеСторОрг.Availability = ЭтоВыявившийНС И (Не РезультатыПроверки.Свойство("ra_Uvedomlenie") или Не ЕстьНезавершенноеУведомление) И НесоответствиеПроведен;
			КнопкаСоздатьУведомлениеЗаказчику.Availability = ЭтоВыявившийНС И Не ЕстьУведомлениеПоставщику(Несоответствие) И Не ЕстьНезавершенноеУведомление И НесоответствиеПроведен;
		Иначе
			Полномочия = РегистрыСведений.ra_KomandyNesootvetstvij.ПолномочияТекущегоПользователя(Несоответствие, ДопустившаяОрганизация);
			
			КнопкаСоздатьУведомлениеСвояОрг.Availability = Ложь;
			КнопкаСоздатьУведомлениеСторОрг.Availability = Полномочия.Лидер И НесоответствиеПроведен;
			КнопкаСоздатьУведомлениеЗаказчику.Availability = Полномочия.Лидер И Не ЕстьУведомлениеПоставщику(Несоответствие) И НесоответствиеПроведен;
		КонецЕсли;
		КнопкаСоздатьУведомлениеСвояОрг.Visibility = КнопкаСоздатьУведомлениеСвояОрг.Availability;
		КнопкаСоздатьУведомлениеСторОрг.Visibility = КнопкаСоздатьУведомлениеСторОрг.Availability;
		КнопкаСоздатьУведомлениеЗаказчику.Visibility = КнопкаСоздатьУведомлениеЗаказчику.Availability;
		
		МассивКнопок.Добавить(КнопкаСоздатьУведомлениеСвояОрг);
		МассивКнопок.Добавить(КнопкаСоздатьУведомлениеСторОрг);
		МассивКнопок.Добавить(КнопкаСоздатьУведомлениеЗаказчику);
		
	ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
		
		Полномочия = РегистрыСведений.ra_KomandyNesootvetstvij.ПолномочияТекущегоПользователя(Несоответствие, ДопустившаяОрганизация);
		
		ИмяКнопки = "AddApprovingPerson";
		ОписаниеКнопки = НСтр("ru = 'Добавить согласующего'; en = 'Add an approving person'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		Кнопка.Availability = Не СсылкаСуществует;
		Кнопка.Visibility = Кнопка.Availability;
		МассивКнопок.Добавить(Кнопка);
		
		ИмяКнопки = "CheckButton";
		ОписаниеКнопки = НСтр("ru = 'Проверить'; en = 'Check'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		Кнопка.Availability = Не СсылкаСуществует И Не Документы.ra_Nesootvetstvie.ЭтоАудитПроцессов(Несоответствие);
		Кнопка.Visibility = Кнопка.Availability;
		МассивКнопок.Добавить(Кнопка);
		
		ИмяКнопки = "SendButton";
		ОписаниеКнопки = НСтр("ru = 'Отправить'; en = 'Send'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		Кнопка.Availability = Не СсылкаСуществует;
		Кнопка.Visibility = Кнопка.Availability;
		МассивКнопок.Добавить(Кнопка);
		
		ИмяКнопки = "UploadUvedomlenie";
		ОписаниеКнопки = НСтр("ru = 'Загрузить Уведомление'; en = 'Upload Notification'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		Кнопка.Availability = Полномочия.ПервыйЛидер;
		Кнопка.Visibility = Кнопка.Availability;
		МассивКнопок.Добавить(Кнопка);
		
		ИмяКнопки = "Annul";
		ОписаниеКнопки = НСтр("ru = 'Аннулировать'; en = 'Annul'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		ЭтоОзК = Ложь;
		ДокументАннулирован = Ложь;
		АктУтвержден = Ложь;
		Если СсылкаСуществует Тогда
			СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Ссылка, "OtvetstvennyjZaKachestvoOtpravitel,OtvetstvennyjZaKachestvoPoluchatel");
			Если ЗначениеЗаполнено(СтруктураДанных.OtvetstvennyjZaKachestvoOtpravitel) Тогда
				ЭтоОзК = ПараметрыСеанса.ТекущийПользователь = СтруктураДанных.OtvetstvennyjZaKachestvoOtpravitel;
			Иначе
				ЭтоОзК = ПараметрыСеанса.ТекущийПользователь = СтруктураДанных.OtvetstvennyjZaKachestvoPoluchatel;
			КонецЕсли;
			СостояниеДокумента = РегистрыСведений.ИсторияСостоянийДокументов.ПолучитьСостояниеДокумента(ДокументОбъект.Ссылка);
			ДокументАннулирован = СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Аннулирован;
			
			ПараметрыПроверки = Новый Структура("ra_AktObUstraneniiNesootvetstviya",
				Перечисления.СостоянияДокументов.ra_Утвержден);
		
			РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Несоответствие,
				ПараметрыПроверки);
				
			АктУтвержден = РезультатыПроверки.Свойство("ra_AktObUstraneniiNesootvetstviya") И РезультатыПроверки.ra_AktObUstraneniiNesootvetstviya;
		КонецЕсли;
		Кнопка.Availability = ЭтоОзК И Не ДокументАннулирован И Не АктУтвержден;
		Кнопка.Visibility = Кнопка.Availability;
		МассивКнопок.Добавить(Кнопка);
		
	КонецЕсли;
	
	Возврат МассивКнопок;
	
КонецФункции

Функция ПолучитьПолучитьМассивКолонокСписка() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ra_Uvedomlenie;
	
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	РеквизитыОбъекта = МетаданныеДокумента.Реквизиты;
	СтандартныеРеквизитыОбъекта = МетаданныеДокумента.СтандартныеРеквизиты;
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Дата);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "FormStatus", НСтр("ru = 'Статус'; en = 'Status'")), "String(10)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.VidOperacii);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.OrganizaciyaOtpravitel);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.OrganizaciyaPoluchatel);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.Dogovor);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "NameMainFile", НСтр("ru = 'Посмотреть уведомление'; en = 'View notification'")), "String(10)");
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивФильтровСписка() Экспорт
	
	МассивДанных = Новый Массив;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивЗаголовков(МассивДанных = Неопределено) Экспорт
	
	МассивЗаголовков = Новый Массив;
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("Name");
	ТаблицаЗаголовков.Колонки.Добавить("Description");
	
	НоваяСтрока = ТаблицаЗаголовков.Добавить();
	НоваяСтрока.Name = "APPROVAL";
	НоваяСтрока.Description = НСтр("ru = 'СОГЛАСУЮЩИЕ УВЕДОМЛЕНИЕ О НЕСООТВЕТСТВИИ'; en = 'APPROVAL NOTIFICATION OF NONCONFORMITY'");
	
	Для Каждого ТекЭлемент Из МассивДанных Цикл
		
		Если ТекЭлемент.Name = "VidNesootvetstviya" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "NachaloPerioda" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "DataVyyavleniya" И ТекЭлемент.Visibility 
			ИЛИ ТекЭлемент.Name = "PeriodOcenkiPovtoryaemosti" И ТекЭлемент.Visibility Тогда 
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "ESTIMATION";
			НоваяСтрока.Description = НСтр("ru = 'ОЦЕНКА ПОВТОРЯЕМОСТИ'; en = 'ESTIMATION OF REPEATABILITY'");
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗаголовков.Свернуть("Name,Description");
	
	Для Каждого ТекСтрока Из ТаблицаЗаголовков Цикл
		МассивЗаголовков.Добавить(Новый Структура("Name,Description",ТекСтрока.Name,ТекСтрока.Description));
	КонецЦикла;
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ЕстьУведомлениеПоставщику(Несоответствие)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ra_Uvedomlenie.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК ra_Uvedomlenie
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних( , ВЫРАЗИТЬ(Документ КАК Документ.ra_Uvedomlenie).Nesootvetstvie = &Несоответствие) КАК ИсторияСостоянийДокументов
	|		ПО ra_Uvedomlenie.Ссылка = ИсторияСостоянийДокументов.Документ
	|			И НЕ ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован)
	|ГДЕ
	|	ra_Uvedomlenie.VidOperacii В (ЗНАЧЕНИЕ(Перечисление.ra_VidyUvedomleniy.UvedomleniePostavschiku), ЗНАЧЕНИЕ(Перечисление.ra_VidyUvedomleniy.UvedomlenieVnutriOrganizacii))
	|	И ra_Uvedomlenie.Nesootvetstvie = &Несоответствие";
	
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьНезавершенноеУведомление(Несоответствие)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК ra_Uvedomlenie
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(, ВЫРАЗИТЬ(Документ КАК Документ.ra_Uvedomlenie).Nesootvetstvie = &Несоответствие) КАК ИсторияСостоянийДокументов
	|		ПО ra_Uvedomlenie.Ссылка = ИсторияСостоянийДокументов.Документ
	|			И (ИсторияСостоянийДокументов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован))
	|			И (ИсторияСостоянийДокументов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Принято))
	|ГДЕ
	|	ra_Uvedomlenie.Nesootvetstvie = &Несоответствие
	|	И ИсторияСостоянийДокументов.Документ ЕСТЬ НЕ NULL";
	
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

//V2

Функция ЕстьМетодДополнитьОписаниеМетаданных() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьОписаниеМетаданных(ОбработкаОбъект, Данные, ПараметрыФормирования) Экспорт
	
	ОбработкаОбъект.ДобавитьИсключения("Ссылка,ПометкаУдаления,Проведен,ВидДокумента");
	
	Если Данные.VidOperacii = Перечисления.ra_VidyUvedomleniy.UvedomlenieZakazchiku Тогда
		
		ОбработкаОбъект.УстановитьВидимость(
			"Номер,
			|Дата,
			|Dogovor,
			|OrganizaciyaOtpravitel,
			|OrganizaciyaPoluchatel,
			|OtvetstvennyjZaKachestvoOtpravitel,
			|OtvetstvennyjZaKachestvoPoluchatel,
			|Soglasuyushchie,
			|Soglasuyushchie.Organizaciya,
			|Soglasuyushchie.Podrazdelenie,
			|Soglasuyushchie.Polzovatel", Истина);
		
		ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Данные.Ссылка);
		
		ОбработкаОбъект.УстановитьДоступность(
			"Dogovor,
			|OrganizaciyaOtpravitel,
			|OrganizaciyaPoluchatel,
			|OtvetstvennyjZaKachestvoOtpravitel,
			|OtvetstvennyjZaKachestvoPoluchatel,
			|Soglasuyushchie.Organizaciya,
			|Soglasuyushchie.Podrazdelenie,
			|Soglasuyushchie.Polzovatel", ЭтоНовый);
		
		СвязиПараметровВыбораДоговора = Новый Массив;
		СвязиПараметровВыбораДоговора.Добавить(Новый СвязьПараметраВыбора("Отбор.Postavschik", "OrganizaciyaOtpravitel"));
		СвязиПараметровВыбораДоговора.Добавить(Новый СвязьПараметраВыбора("Отбор.Pokupatel", "OrganizaciyaPoluchatel"));
		
		ОбработкаОбъект.УстановитьСвязиПараметровВыбора("Dogovor", СвязиПараметровВыбораДоговора);
		
		ОбработкаОбъект.УстановитьПараметрыВыбора("OtvetstvennyjZaKachestvoPoluchatel",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора("ра_ОтветственныйЗаКачествоВыявивший", Истина)));
				
	Иначе
		
		ЭтоАудитПроцессов = Документы.ra_Nesootvetstvie.ЭтоАудитПроцессов(Данные.Nesootvetstvie);
		
		Если Не ЭтоАудитПроцессов Тогда
		
			Nesootvetstvie = Данные.Nesootvetstvie.Метаданные();
			ОбработкаОбъект.ДобавитьПоле("PovtornyeNesootvetstviya", Nesootvetstvie.СтандартныеРеквизиты.Date);
			ОбработкаОбъект.ДобавитьПоле("PovtornyeNesootvetstviya", Nesootvetstvie.Реквизиты.PodrobnoeOpisanie);
			
			ОбработкаОбъект.ЗаместитьДанные("PovtornyeNesootvetstviya", ДополнитьПовторныеНесоответствия(Данные));
			
		КонецЕсли;
				
		ОбработкаОбъект.УстановитьВидимость(
			"Номер,
			|Дата,
			|DataVyzova,
			// ТСК Близнюк С.И.; 04.12.2018; task#1660{
			|KlassifikatorMTRiO,
			|UchityvatKlassifikatorMTRiO,
			// ТСК Близнюк С.И.; 04.12.2018; task#1660}
			|OrganizaciyaOtpravitel,
			|OtvetstvennyjZaKachestvoPoluchatel,
			|VyzvatPredstavitelya,
			|Soglasuyushchie,
			|Soglasuyushchie.Organizaciya,
			|Soglasuyushchie.Podrazdelenie,
			|Soglasuyushchie.Polzovatel", Истина);
		
		ОбработкаОбъект.УстановитьВидимость(
			"DataVyyavleniya,
			|NachaloPerioda,
			|PeriodOcenkiPovtoryaemosti,
			|VidNesootvetstviya,
			|PovtornyeNesootvetstviya,
			|PovtornyeNesootvetstviya.Date,
			|PovtornyeNesootvetstviya.Nesootvetstvie,
			|PovtornyeNesootvetstviya.PodrobnoeOpisanie,
			|PovtornyeNesootvetstviya.Povtornoe", Не ЭтоАудитПроцессов);
		
		ОбработкаОбъект.УстановитьВидимость(
			"Dogovor,
			|OrganizaciyaPoluchatel,
			|OtvetstvennyjZaKachestvoOtpravitel", Данные.VidOperacii <> Перечисления.ra_VidyUvedomleniy.UvedomlenieVnutriOrganizacii);
		
		ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Данные.Ссылка);
		
		ОбработкаОбъект.УстановитьДоступность(
			"Dogovor,
			|OrganizaciyaPoluchatel,
			|OtvetstvennyjZaKachestvoOtpravitel,
			|OtvetstvennyjZaKachestvoPoluchatel,
			|VyzvatPredstavitelya,
			|Soglasuyushchie.Organizaciya,
			|Soglasuyushchie.Podrazdelenie,
			|Soglasuyushchie.Polzovatel", ЭтоНовый);
		
		ОбработкаОбъект.УстановитьДоступность(
			"NachaloPerioda,
			// ТСК Близнюк С.И.; 04.12.2018; task#1660{
			|UchityvatKlassifikatorMTRiO,
			// ТСК Близнюк С.И.; 04.12.2018; task#1660}
			|PovtornyeNesootvetstviya.Povtornoe", ЭтоНовый И Не ЭтоАудитПроцессов);
		
		ОбработкаОбъект.УстановитьДоступность("DataVyzova", ЭтоНовый И Данные.VyzvatPredstavitelya);
		
		Если Данные.VidOperacii = Перечисления.ra_VidyUvedomleniy.UvedomlenieVnutriOrganizacii Тогда
			ОбработкаОбъект.УстановитьПараметрыВыбора("OtvetstvennyjZaKachestvoPoluchatel",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора("ра_ОтветственныйЗаКачествоВнутренний", Истина)));
		ИначеЕсли Данные.VidOperacii = Перечисления.ra_VidyUvedomleniy.UvedomleniePostavschiku Тогда
			СвязиПараметровВыбораДоговора = Новый Массив;
			СвязиПараметровВыбораДоговора.Добавить(Новый СвязьПараметраВыбора("Отбор.Pokupatel", "OrganizaciyaOtpravitel"));
			СвязиПараметровВыбораДоговора.Добавить(Новый СвязьПараметраВыбора("Отбор.Postavschik", "OrganizaciyaPoluchatel"));
			
			ОбработкаОбъект.УстановитьСвязиПараметровВыбора("Dogovor", СвязиПараметровВыбораДоговора);
			
			ОбработкаОбъект.УстановитьПараметрыВыбора("OtvetstvennyjZaKachestvoPoluchatel",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора("ра_ОтветственныйЗаКачествоДопустивший", Истина)));
		КонецЕсли;
		
	КонецЕсли;
	
	ОбязательныеРеквизиты = ОбработкаОбъект.ОбязательныеРеквизиты();
	АктуализироватьМассивОбязательныхРеквизитов(ОбязательныеРеквизиты, Данные);
	ОбработкаОбъект.УстановитьОбязательность(ОбязательныеРеквизиты, Истина);
	
КонецПроцедуры

Функция ДополнитьПовторныеНесоответствия(Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Данные.PovtornyeNesootvetstviya.Выгрузить();
	Результат.Колонки.Добавить("Date");
	Результат.Колонки.Добавить("PodrobnoeOpisanie");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Результат.ВыгрузитьКолонку("Nesootvetstvie"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ra_Nesootvetstvie.Ссылка КАК Ссылка,
	|	ra_Nesootvetstvie.Дата КАК Date,
	|	ra_Nesootvetstvie.PodrobnoeOpisanie КАК PodrobnoeOpisanie
	|ИЗ
	|	Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
	|ГДЕ
	|	ra_Nesootvetstvie.Ссылка В(&Ссылки)";
	ДанныеНесоответствий = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		ДанныеНесоответствия = ДанныеНесоответствий.Найти(СтрокаТаблицы.Nesootvetstvie, "Ссылка");
		Если ДанныеНесоответствия <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеНесоответствия);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли