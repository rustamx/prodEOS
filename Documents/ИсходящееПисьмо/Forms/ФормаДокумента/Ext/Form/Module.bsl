&НаКлиенте
Перем ТекущееПоложениеНачало; // позиция начала выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущееПоложениеКонец;  // позиция конца выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущийНомерУзла; // номер текущего узла в HTML письме

&НаКлиенте
Перем ГоризонтальнаяПрокруткаHTML; // положение гор прокрутки в HTML письме

&НаКлиенте
Перем ВертикальнаяПрокруткаHTML; // положение вертикальной прокрутки в HTML письме

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	Элементы.ПолучателиТипАдреса.СписокВыбора.Очистить();
	Элементы.ПолучателиТипАдреса.СписокВыбора.Добавить(
		НСтр("ru = 'Кому:'; en = 'To:'"), НСтр("ru = 'Кому:'; en = 'To:'"));
	Элементы.ПолучателиТипАдреса.СписокВыбора.Добавить(
		НСтр("ru = 'Копия:'; en = 'Cc:'"), НСтр("ru = 'Копия:'; en = 'Cc:'"));
	Элементы.ПолучателиТипАдреса.СписокВыбора.Добавить(
		НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'"), НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'"));
	
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	
	ИспользоватьВнутреннююМаршрутизацию = Константы.ИспользоватьВнутреннююМаршрутизацию.Получить();
	ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям 
		= ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям");
		
	КартинкаВнешнийАдресат = БиблиотекаКартинок.ВнешнийАдресат16;
	КартинкаВнутреннийАдресат = БиблиотекаКартинок.ВнутреннийАдресат16;	
	КартинкаВнутренняяМаршрутизация = БиблиотекаКартинок.ВнутренняяМаршрутизация16;
	КартинкаВнешняяМаршрутизация = БиблиотекаКартинок.ВнешняяМаршрутизация16;
		
	Если ЗначениеЗаполнено(Объект.ПисьмоОснование) И 
		ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) И
		(Объект.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Или 
		 Объект.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Или 
		 Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма) Тогда
		 
		АдресатыОснования = Новый Массив;
		Для Каждого Строка Из Объект.ПисьмоОснование.ПолучателиПисьма Цикл
			АдресатыОснования.Добавить(Строка.Адресат);
		КонецЦикла;	
		Для Каждого Строка Из Объект.ПисьмоОснование.ПолучателиКопий Цикл
			АдресатыОснования.Добавить(Строка.Адресат);
		КонецЦикла;
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Объект.ПисьмоОснование) Тогда 
			АдресатыОснования.Добавить(Объект.ПисьмоОснование.ОтправительАдресат);
		КонецЕсли;	
		
		ПересылкаВнутреннегоПисьма = Истина;
		Для Каждого АдресатОснования Из АдресатыОснования Цикл
			Если ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(АдресатОснования) Тогда 
				ПересылкаВнутреннегоПисьма = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = ВстроеннаяПочтаСервер.ПолучитьМаксимальныйРазмерВнешнегоИсходящегоПисьма();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ОтображатьУдаленныеФайлы =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			"ОтображатьУдаленныеФайлы",
			Ложь);
	
	Элементы.ОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
	
	Если Параметры.Свойство("СписокФайлов") Тогда
		
		ВложенияВПисьмо = Параметры.СписокФайлов;
		
		// помечаем те вложения, которые являются путями к файлам на клиенте
		Для Каждого ОписаниеВложение из ВложенияВПисьмо Цикл
			
			Если ТипЗнч(ОписаниеВложение) = Тип("Структура") Тогда
				Если ЭтоАдресВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище) Тогда
					
					СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеВложение.Представление);
					
					ВложенияСтрока = Вложения.Добавить();
					ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
					ВложенияСтрока.Ссылка = Неопределено;
					ВложенияСтрока.Представление = ОписаниеВложение.Представление;
					ВложенияСтрока.ИмяФайла = СтруктураИмениФайла.Имя;
					ВложенияСтрока.ИмяФайлаНаДиске = "";
					
					ВложенияСтрока.ИндексКартинки =
						ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураИмениФайла.Расширение);
						
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище);
					
					ВложенияСтрока.Размер = ДвоичныеДанные.Размер();
					ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ДвоичныеДанные.Размер());
					ВложенияСтрока.ПометкаУдаления = Ложь;
					ВложенияСтрока.Редактирует = Неопределено;
					ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
					
					ВложенияСтрока.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
					
					ВложенияСтрока.Расположение = "ВременноеХранилище";
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПериодАвтоматическогоСохраненияНеотправленныхПисем = 0;
	Иначе
		ПериодАвтоматическогоСохраненияНеотправленныхПисем =
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПериодАвтоматическогоСохраненияНеотправленныхПисем");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьНовоеПисьмо(Параметры);
		ВычислитьСпособРедактированияТекста();
		ОтобразитьСвязиПисьма();
	КонецЕсли;
	
	ОбновитьФайлыПисьма();
	ЗагрузитьПолучателей();
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Элементы.ПроектСтрокой.Видимость = Ложь;
	КонецЕсли;	
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
	
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая
		Или ПриложениеЯвляетсяВебКлиентом Тогда
		ПолучатьФотографии = Ложь;
		Элементы.ГруппаСтраницыФотографии.Видимость = Ложь;
	КонецЕсли;
	
	Если Получатели.Количество() <> 0 Тогда
		ТекущийПолучатель = Получатели[0].Контакт;
	КонецЕсли;
	
	ПодсказкаФото = "";
	ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
	Элементы.Фотография.Подсказка = ПодсказкаФото;
	
	// Установка заголовка формы
	Автозаголовок = Ложь;
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
	СписокВыбораКому = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеКому");
	СписокВыбораКопия = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеКопия");
	СписокВыбораСкрытаяКопия = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеСкрытаяКопия'");
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия,
		ЭтаФорма.Элементы.УказатьТрудозатраты_ВсеДействия);
	
	УчетнаяЗаписьПроверитьПараметрыПочты();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0 Тогда
		Элементы.Получатели.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Элементы.Тема.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.ТекстПисьма.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	ОткрыватьФайлыИсходящегоПисьмаНаРедактирование =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
			
	ДобавлятьАвтораИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ДобавлятьАвтораИсходногоПисьмаПриПересылке");
			
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	
	Если ПисьмоОтправлено Или Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
		
		ОткрыватьФайлыИсходящегоПисьмаНаРедактирование = Ложь;
		
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюИзменитьШрифт.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюПолужирный.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюНаклонный.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюПодчеркнутый.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВставитьКартинку.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюМаркированныйСписок.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюНумерованныйСписок.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюОтступВлево.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюОтступВправо.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВыравниваниеВлево.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВыравниваниеПоЦентру.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВыравниваниеВправо.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюЦветТекста.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюЦветФона.Видимость = Ложь;
		
		Элементы.ПолучателиКонтекстноеМенюДобавитьАдресата.Доступность = Ложь;
		Элементы.ПолучателиКонтекстноеМенюДобавитьПолучателейСписком.Доступность = Ложь;
		Элементы.ПолучателиКонтекстноеМенюУдалить.Доступность = Ложь;
		Элементы.ПолучателиПредставлениеКонтекстноеМенюДобавитьПолучателейСписком.Доступность = Ложь;

		Элементы.ФормаДобавитьКартинкуИзБуфераКакФайл.Доступность = Ложь;
		
		Элементы.ФормаДобавитьАдресатов.Доступность = Ложь;
		Элементы.ФормаДобавитьАдресатов_ВсеДействия.Доступность = Ложь;
		
		Элементы.ВставитьТекстИсходногоПисьма.Доступность = Ложь;
		Элементы.ВставитьТекстИсходногоПисьма_ВсеДействия.Доступность = Ложь;
		
		Элементы.ВставитьФайлыИсходногоПисьма.Доступность = Ложь;
		Элементы.ВставитьФайлыИсходногоПисьма_ВсеДействия.Доступность = Ложь;
		
		Элементы.ДобавитьАвтораИсходногоПисьма.Доступность = Ложь;
		Элементы.ДобавитьАвтораИсходногоПисьма_ВсеДействия.Доступность = Ложь;
		
		Элементы.ДобавитьПолучателейИсходногоПисьма.Доступность = Ложь;
		Элементы.ДобавитьПолучателейИсходногоПисьма_ВсеДействия.Доступность = Ложь;
		
		Элементы.ДобавитьПолучателейКопийИсходногоПисьма.Доступность = Ложь;
		Элементы.ДобавитьПолучателейКопийИсходногоПисьма_ВсеДействия.Доступность = Ложь;
		
		Элементы.ВложенияКонтекстноеМенюВставитьФайлыИсходногоПисьма.Доступность = Ложь;

		Если ПисьмоОтправлено Тогда 
			Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов");
		
	ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar");
		
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("АвтоматическиСохранятьВерсииНеотправленногоПисьма");
	
	Если Не ПисьмоОтправлено Тогда
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		
		Элементы.ПроверитьОрфографию.Видимость = Ложь;
		Элементы.ФормаПроверитьОрфографию.Видимость = Ложь;
		Элементы.ФормаПроверитьОрфографию_ВсеДействия.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюПроверитьОрфографию.Видимость = Ложь;
			
		Элементы.ФормаСохранитьПисьмо.Видимость = Ложь;
		
		Элементы.ФормаСохранитьПисьмо_ВсеДействия.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма_ВсеДействия.Видимость = Истина;
		
		Элементы.СохранитьТекстПисьма.Видимость = Истина;
		
		Элементы.ФормаВставитьБезФорматирования.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования_ВсеДействия.Видимость = Ложь;
		
		Элементы.ФормаАвтосохраненныеВерсии.Видимость = Ложь;
		
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
		
		Элементы.ИзменитьШрифтОтображения.Видимость = Ложь;
		
		Элементы.ФормаФорматHTML.Доступность = Ложь;
		
	Иначе
		Элементы.ФормаСохранитьПисьмо.Видимость = Истина;
		Элементы.ФормаСохранитьПисьмо_ВсеДействия.Видимость = Истина;
		Элементы.СохранитьТекстПисьма.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма_ВсеДействия.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтправкаОтменена") Тогда
		ОтправкаОтменена = Параметры.ОтправкаОтменена;
		ОповеститьОбИзмененииПриОткрытии = Истина;
	КонецЕсли;
	
	Если ЕстьОшибкиВПротоколеДоставки() Тогда
		Элементы.ГруппаОшибка.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтправкаОтменена.Видимость = Объект.ОтправкаОтменена;
	КонецЕсли;
	
	ОпределитьВидимостьДоступностьЭлементовФормы();
	
	ЗаполнитьСписокВыбора();
	
	ВывестиВидМаршрутизации(ЭтаФорма);
	ВывестиВидАдресатов(ЭтаФорма);	
	
	// перенаправление письма	
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма 
		И ЗначениеЗаполнено(Объект.ПисьмоОснование) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда 
		
		Элементы.ГруппаПеренаправляемоеПисьмо.Видимость = Истина;
		ПисьмоОснование = Объект.ПисьмоОснование;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОснование) Тогда 
			ОтправительОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОснование, "ОтправительАдресат");
			ПеренаправлениеОт = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ОтправительОснования).Представление;
		Иначе
			УчетнаяЗаписьОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОснование, "УчетнаяЗапись");
			ПеренаправлениеОт = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьПредставлениеАдреса(УчетнаяЗаписьОснования.Ссылка)
		КонецЕсли;	
		
		ПеренаправлениеКому = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоОснование.ПолучателиПисьма);
		Элементы.ПеренаправлениеКопии.Видимость = ПисьмоОснование.ПолучателиКопий.Количество() > 0;
		Если Элементы.ПеренаправлениеКопии.Видимость Тогда
			ПеренаправлениеКопии = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоОснование.ПолучателиКопий);
		КонецЕсли;
		
		Элементы.ПеренаправлениеОбратныеАдреса.Видимость = ПисьмоОснование.ПолучателиОтвета.Количество() > 0;
		Если Элементы.ПеренаправлениеОбратныеАдреса.Видимость Тогда
			ПеренаправлениеОбратныеАдреса = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоОснование.ПолучателиОтвета);
			Если ПисьмоОснование.ПолучателиОтвета.Количество() > 1 Тогда
				Элементы.ПеренаправлениеОбратныеАдреса.Заголовок = "Обратные адреса";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		Элементы.ГруппаСтраницаHTML.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСтраницаHTML.Видимость = Ложь;
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Ложь;
		
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
	КонецЕсли;
	
	Если ПисьмоОтправлено Или ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавитьКартинкуИзБуфераКакФайл.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования_ВсеДействия.Видимость = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавитьПисьмо.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Ложь;
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования_ВсеДействия.Видимость = Ложь;
	КонецЕсли;
	
	Если ПисьмоОтправлено Тогда
		
		ОткрыватьФайлыИсходящегоПисьмаНаРедактирование = Ложь;
		
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВставитьКартинку.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюВставитьТекстИзБуфера.Видимость = Ложь;
		
		Элементы.ФормаПроверитьОрфографию.Доступность = Ложь;
		Элементы.ФормаПроверитьОрфографию_ВсеДействия.Доступность = Ложь;
		
		Элементы.ФормаДобавитьАдресатов.Видимость = Ложь;
		Элементы.ФормаПроверитьОрфографию.Видимость = Ложь;
		Элементы.ФормаГруппаВставки.Видимость = Ложь;
		
		Элементы.ПроверитьОрфографию.Доступность = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюПроверитьОрфографию.Доступность = Ложь;
		Элементы.ФормаВставитьТекущуюДатуИВремя.Доступность = Ложь;
		Элементы.ФормаВставитьТекущуюДатуИВремя_ВсеДействия.Доступность = Ложь;
		
		Элементы.ФормаАвтопереносСтрок.Доступность = Ложь;
		Элементы.ФормаФорматHTML.Доступность = Ложь;		

		Если ПисьмоОтправлено Тогда 
			Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	// Определяем список выбора типа предмета
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВнутренниеДокументы.ПустаяСсылка"), НСтр("ru = 'Внутренний документ'; en = 'Internal document'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Входящий документ'; en = 'Incoming document'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"), НСтр("ru = 'Задача'; en = 'Task'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ИсходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Исходящий документ'; en = 'Outgoing document'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Мероприятия.ПустаяСсылка"), НСтр("ru = 'Мероприятие'; en = 'Event'"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"), НСтр("ru = 'Проект'; en = 'Project'"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ПроектныеЗадачи.ПустаяСсылка"), НСтр("ru = 'Проектная задача'; en = 'Project task'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.СообщенияОбсуждений.ПустаяСсылка"), НСтр("ru = 'Сообщение'; en = 'Message'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"), НСтр("ru = 'Файл'; en = 'File'"));
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтрольныеТочки.ПустаяСсылка"), НСтр("ru = 'Контрольная точка'; en = 'Milestone'"));
	
	// Контроль писем
	Контроль.УстановитьСвойстваКнопкиКонтроляПисьма(ЭтаФорма);
	
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ФормаПроверитьОрфографию.Видимость = Ложь;
		Элементы.ПроверитьОрфографию.Видимость = Ложь;
		Элементы.ТекстПисьмаHTMLКонтекстноеМенюПроверитьОрфографию.Видимость = Ложь;
	КонецЕсли;	
	
	ПодсказкаСтатуса = "";
	ВстроеннаяПочтаСервер.ПрочитатьСтатусПисьма(Объект.Ссылка, СтатусПисьма, ПодсказкаСтатуса);
	Элементы.СтатусПисьма.Подсказка = ПодсказкаСтатуса;
	Элементы.СтатусПисьма.Гиперссылка = Элементы.ПисемВПереписке.Гиперссылка;
	
	ЗакрытьБезОтправки = Ложь;
	
	// Отображение шрифта
	НастройкаШрифтОтображения = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	НастройкаОтображатьДругиеШрифтыВПисьмах = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтображатьДругиеШрифтыВПисьмах");
	ШрифтОтображения = НастройкаШрифтОтображения;
	Элементы.ИзменитьШрифтОтображения.Доступность =
		(Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"));
	Элементы.ТекстПисьма.Шрифт = ШрифтОтображения;
	
	ТипыПредметов = Метаданные.Документы.ВходящееПисьмо.Реквизиты.Предмет.Тип.Типы();
	Для Каждого ТипПредмета Из ТипыПредметов Цикл
		СписокТиповПредмета.Добавить(ТипПредмета);
	КонецЦикла;	
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// Заполнение на основании отсутствия
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Отсутствие") Тогда
		Основание = Параметры.Основание;
	КонецЕсли;
	
	Элементы.ГруппаОтправить.Видимость = ПисьмоОтправлено;
	
	ОтобразитьВажность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	
	Если Параметры.Свойство("ОтправкаОтменена") Тогда
		ОтправкаОтменена = Параметры.ОтправкаОтменена;
	КонецЕсли;
	
	// Удаление состояния "Отправлен ответ", "Письмо переслано", "Письмо перенаправлено" если отправка отменена
	Если ОтправкаОтменена Тогда
		
		ОповеститьОбИзмененииПриОткрытии = Истина;
		
		ИсходныеПисьма = СвязиДокументов.ПолучитьСвязанныеДокументы(
			ТекущийОбъект.Ссылка,
			Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
			
		Для каждого ИсходноеПисьмо Из ИсходныеПисьма Цикл
			
			СвязиДокументов.УдалитьСвязь(
				ТекущийОбъект.Ссылка,
				ИсходноеПисьмо,
				Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
			
		КонецЦикла;
		
		ПересланныеПисьма = СвязиДокументов.ПолучитьСвязанныеДокументы(
			ТекущийОбъект.Ссылка,
			Справочники.ТипыСвязей.ПересылкаПисьма);
		
		Для каждого ПересланноеПисьмо Из ПересланныеПисьма Цикл
			
			СвязиДокументов.УдалитьСвязь(
				ТекущийОбъект.Ссылка,
				ПересланноеПисьмо,
				Справочники.ТипыСвязей.ПересылкаПисьма);
			
		КонецЦикла;
		
		ПеренаправленныеПисьма = СвязиДокументов.ПолучитьСвязанныеДокументы(
			ТекущийОбъект.Ссылка,
			Справочники.ТипыСвязей.ПеренаправлениеПисьма);
		
		Для каждого ПеренаправленноеПисьмо Из ПеренаправленныеПисьма Цикл
			
			СвязиДокументов.УдалитьСвязь(
				ТекущийОбъект.Ссылка,
				ПеренаправленноеПисьмо,
				Справочники.ТипыСвязей.ПеренаправлениеПисьма);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтобразитьСвязиПисьма();
	РаботаСФлагамиОбъектовСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
	Вложения.Очистить();
	ОбновитьФайлыПисьма();
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = ТекущийОбъект.Предмет;
	НачальноеЗначениеПроект = ТекущийОбъект.Проект;
	
	ЗаполнитьПредметСтрокой(ТекущийОбъект.Предмет, ПредметСтрокой);
	ЗаполнитьПроектСтрокой(ТекущийОбъект.Проект, ПроектСтрокой);
	
	// Формирования текста письма
	СодержаниеПисьма = ТекущийОбъект.ПолучитьСодержаниеПисьма();
	ТекстПисьма = СодержаниеПисьма.Текст;
	
	// Формирования текста письма
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	СодержаниеПисьма = ПисьмоОбъект.ПолучитьСодержаниеПисьма();
	ТекстПисьма = СодержаниеПисьма.Текст;
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		ВключитьРежимРедактированияHTML();
		
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
			ТекстПисьма,
			Объект.Ссылка,
			УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
		
	КонецЕсли;
	
	Если ПисьмоОтправлено Тогда
		Элементы.КомандыHTML.Видимость = Ложь;
		Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Ложь;
	КонецЕсли;
	
	ВычислитьСпособРедактированияТекста();
	
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	
	Если Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		
		Если РаботаСПрочтениями.УстановитьСвойствоПрочтен(ТекущийОбъект.Ссылка) Тогда
			ОповеститьОбИзмененииПриОткрытии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Важность = Перечисления.ВажностьПисем.Высокая И ПисьмоОтправлено Тогда
		Элементы.ДекорацияВажностьИконка.Видимость = Истина;
	КонецЕсли;	
	
	ОтобразитьВажность();
	
	ПрочитатьДатуЗакрытияКарточки();
	
	Если ПисьмоОтправлено Тогда // сразу ставим в фокус в тело письма
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
			
			ТекущийЭлемент = Элементы.ТекстПисьма;
			
		Иначе	
			
			ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если у пользователя форма настроена таким образом, что поле HTML документа не отображается,
	// тогда формат письма устанавливаем в текст.
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
		И Элементы.ТекстПисьмаHTML.Документ = Неопределено Тогда
		Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
		ПолучитьHTMLИзПоляHTMLДокумента();
		ВыполнитьПереключениеВТекст();
		Элементы.ФормаФорматHTML.Доступность = Ложь;
	КонецЕсли;
	
	Если ОповеститьОбИзмененииПриОткрытии Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	ПерейтиКАдресатам = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		И (ДобавлятьАвтораИсходногоПисьмаПриПересылке Или ПересылкаСКопией)
		И ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ПерейтиКАдресатам = Истина;
	КонецЕсли;	
	
	ПолучателиКоличествоПриОткрытии = Получатели.Количество();
	
	Если Не ПисьмоОтправлено Тогда
		
		Если ПерейтиКАдресатам Или (Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0) Тогда
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТема", 0.2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТекст", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьКомандСохраненияКонтакта(Ложь);
	
	Если ПериодАвтоматическогоСохраненияНеотправленныхПисем > 0 Тогда
		ПодключитьОбработчикОжидания("Автосохранение", ПериодАвтоматическогоСохраненияНеотправленныхПисем * 60, Ложь);
	КонецЕсли;
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Элементы.ФормаФорматHTML.Пометка = Истина;
	Иначе
		Элементы.ФормаФорматHTML.Пометка = Ложь;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		Если АвтоматическиСохранятьВерсииНеотправленногоПисьма И Не ПисьмоОтправлено Тогда
			ПодключитьОбработчикОжидания("АвтоматическоеСохранениеВерсий", 60, Ложь); // 60 секунд
		КонецЕсли;	
		
		
		Если АвтоматическиСохранятьВерсииНеотправленногоПисьма И Не ПисьмоОтправлено Тогда
			ВыполнитьПоискАвтосохраненныхПисем();	
		КонецЕсли;	
		
	#КонецЕсли
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ВыполнитьЗаписьHTML();
	КонецЕсли;
	
	ВыполняетсяЗапись = Истина;
	
	Если Не ПараметрыЗаписи.Свойство("Автосохранение")
		Или ПараметрыЗаписи.Автосохранение <> Истина Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Если Не ПроверитьПредельныйРазмерФайлов() Или Не ПоместитьФайлыСДискаВоВременноеХранилище() Тогда
		ВыполняетсяЗапись = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
	СписокОшибокПриЗаписи.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если ВыполняетсяОтправка Тогда
		ТекущийОбъект.ПодготовленоКОтправке = ТекущаяДата();
		ТекущийОбъект.Дата = ТекущаяДата();
		ТекущийОбъект.ОтправкаОтменена = Ложь;
	КонецЕсли;
	
	ТекущийОбъект.ЕстьВложения = Ложь;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			ТекущийОбъект.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПолучателиПисьма.Очистить();
	ТекущийОбъект.ПолучателиКопий.Очистить();
	ТекущийОбъект.ПолучателиСкрытыхКопий.Очистить();
	
	СчетчикСообщенийПользователю = 0;
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		
		Строка = Получатели[Счетчик];
		
		Если Не ЗначениеЗаполнено(Строка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			// Пытаемся получить адрес электронной почты.
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
			
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				
				Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка.Представление);
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("Автосохранение")
				Или Не ПараметрыЗаписи.Автосохранение Тогда
				
				Если СчетчикСообщенийПользователю < 20 Тогда
					
					// Если адрес так и не получилось выделить из строки, выводим сообщение в соответствующей строке таблицы.
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректный адрес электронной почты ""%1""'; en = 'Incorrect email address ""%1""'"),
						Строка.Представление);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						"Получатели[" + Строка(Счетчик) + "].Представление",,
						Отказ);
					
					СчетчикСообщенийПользователю = СчетчикСообщенийПользователю + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиПисьма.Добавить();
		КонецЕсли;
		
		Если Строка.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиКопий.Добавить();
		КонецЕсли;
		
		Если Строка.ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Адресат = Строка.Адресат;
		НоваяСтрока.ПорядковыйНомер = Счетчик + 1;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(
			ТекущийОбъект.ПолучателиПисьма);
			
	ТекстПисьмаДляЗаписи = "";
	Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ТекстПисьмаДляЗаписи = ТекстПисьмаHTMLПриЗаписи;
	Иначе	
		ТекстПисьмаДляЗаписи = ТекстПисьма;
	КонецЕсли;
	
	Если ИдентификаторыКартинокПисьма.Количество() <> 0 Тогда
		
		Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
			
			ОписаниеИсточника = Строка.Значение;
			
			Если Найти(ТекстПисьмаДляЗаписи, ОписаниеИсточника.НавигационнаяСсылка) <> 0 Тогда
				
				// при записи возвращаем GUID - а не навигационную ссылку на временное хранилище
				ТекстПисьмаДляЗаписи = СтрЗаменить(ТекстПисьмаДляЗаписи, 
					ОписаниеИсточника.НавигационнаяСсылка,
					"cid:" + ОписаниеИсточника.ИсточникФайла);
				
			Иначе
				
				// картинку из HTML удалили - удалим и из ИдентификаторыПочтовыхВложений, и пометим файл на удаление 
				УдаляемыеКартинки.Добавить(ОписаниеИсточника.ИсточникФайла);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ТекстПисьмаДляЗаписи);
			
	Если ВыполняетсяОтправка Тогда
		
		Если Не ПроверитьПисьмоПередОтправкой(ТекущийОбъект) Тогда
			
			Отказ = Истина;
			
			Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
				ТекстПисьма = ТекстПисьмаHTMLДляОтменыОтправки;
				ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
					ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
				ВключитьРежимРедактированияHTML();
			КонецЕсли;	
			ВыполняетсяЗапись = Ложь;
			
			Возврат;
			
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяОтправка", Истина);

	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПереместитьВКорзину")
		И ПараметрыЗаписи.ПереместитьВКорзину = Истина Тогда
		
		ТекущийОбъект.ПометкаУдаления = Ложь;
		
		Корзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			ТекущийОбъект.УчетнаяЗапись, Перечисления.ВидыПапокПисем.Корзина);
		
		ТекущийОбъект.Папка = Корзина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Выполняем блокировку - чтобы фоновое задание не успело заблокировать в промежутке
	// между записью документа и его блокировкой платформой
	Если ВыполняетсяОтправка Тогда
		ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ЗаписатьВложения(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ВыполняетсяОтправка И ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		
		Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
			
			СвязиДокументов.УстановитьСвязь(
				ТекущийОбъект.Ссылка,
				Неопределено,
				Объект.ПисьмоОснование,
				Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
			
		ИначеЕсли Объект.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
			
			СвязиДокументов.УстановитьСвязь(
				ТекущийОбъект.Ссылка,
				Неопределено,
				Объект.ПисьмоОснование,
				Справочники.ТипыСвязей.ПересылкаПисьма);
				
		ИначеЕсли Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
				
			СвязиДокументов.УстановитьСвязь(
				ТекущийОбъект.Ссылка,
				Неопределено,
				Объект.ПисьмоОснование,
				Справочники.ТипыСвязей.ПеренаправлениеПисьма);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ПодготовленоКОтправке) Тогда
		РегистрыСведений.НеОтправленныеИсходящиеПисьма.УдалитьСведенияОПисьме(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗаменитьПредметПереписки")
		И ПараметрыЗаписи.ЗаменитьПредметПереписки = Истина
		И ЗначениеЗаполнено(ТекущийОбъект.Предмет) Тогда
		
		СообщенияОбОшибках = Новый Массив;
		Если Не ЗаменитьПредметПереписки(ТекущийОбъект, НачальноеЗначениеПредмет, СообщенияОбОшибках) Тогда
			СписокОшибокПриЗаписи.ЗагрузитьЗначения(СообщенияОбОшибках);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗаменитьПроектПереписки")
		И ПараметрыЗаписи.ЗаменитьПроектПереписки = Истина
		И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		
		СообщенияОбОшибках = Новый Массив;
		Если Не ЗаменитьПроектПереписки(ТекущийОбъект, НачальноеЗначениеПроект, СообщенияОбОшибках) Тогда
			СписокОшибокПриЗаписи.ЗагрузитьЗначения(СообщенияОбОшибках);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохранение истории использования адресатов
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоРассылка(Получатели.Количество()) Тогда
		Для Каждого Строка Из Получатели Цикл
			Если ЗначениеЗаполнено(Строка.Адресат) Тогда
				МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Адресат = Строка.Адресат;
				МенеджерЗаписи.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
				МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСписокВыбора();
	КонецЕсли;
	
	// файла картинок добавим
	Для Каждого Строка Из СписокДобавленныхФайлов Цикл
		
		ОписаниеФайла = Строка.Значение;
		
		ВложениеПисьмаСсылка = Неопределено;
		
		Если ЗначениеЗаполнено(ОписаниеФайла.Ссылка) Тогда
			
			ВложениеПисьмаСсылка = ОписаниеФайла.Ссылка;
			
		Иначе
			
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ОписаниеФайла.ИмяФайла);
			ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ОписаниеФайла.ВремяИзменения);
			АдресВременногоХранилищаТекста = "";
			
			// Создадим карточку Файла в БД
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеФайла.Адрес;
			СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
			СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
			СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
			СведенияОФайле.Размер = ОписаниеФайла.Размер;
			СведенияОФайле.ВремяИзменения = ОписаниеФайла.ВремяИзменения;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
			СведенияОФайле.ХранитьВерсии = Ложь;
			
			ВложениеПисьмаСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ТекущийОбъект.Ссылка, СведенияОФайле);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеФайла.УникальныйИдентификаторФайла) Тогда
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(ВложениеПисьмаСсылка, 
				ОписаниеФайла.УникальныйИдентификаторФайла);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ТекстПисьма = ТекстПисьмаHTMLПриЗаписи;
		ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	КонецЕсли;	
	
	ВыполняетсяЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВыполняетсяОтправка Тогда
		
		ИдентификаторСеанса = Новый УникальныйИдентификатор;
		ПорядковыйНомерСобытия = 0;
		
		ВстроеннаяПочтаСервер.ЗаписатьПротоколДоставкиПочты(
			Объект.Ссылка,
			"",
			Ложь,
			Перечисления.ТипыСобытийДоставкиПочты.ИнтерактивнаяОтправкаПисьма,
			Объект.УчетнаяЗапись,
			ПорядковыйНомерСобытия,
			ИдентификаторСеанса);
		
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовый);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
		СохранитьФлаг();
	КонецЕсли;
	
	Вложения.Очистить();
	
	РаботаСПрочтениями.УстановитьСвойствоПрочтен(ТекущийОбъект.Ссылка);
	
	// Установка заголовка формы
	Автозаголовок = Ложь;
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	ОпределитьВидимостьДоступностьЭлементовФормы();
	
	НавигационнаяСсылкаПисьма = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеПисьма = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	Если СписокДобавленныхФайлов.Количество() <> 0 Тогда
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(ТекстПисьма, Объект.Ссылка, УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
	КонецЕсли;	
	
	СписокДобавленныхФайлов.Очистить();
	
	Для Каждого Строка Из УдаляемыеКартинки Цикл
		
		Идентификатор = Строка.Значение;
		
		Файл = НайтиИдентификаторПочтовыхВложений(Идентификатор, ТекущийОбъект.Ссылка);
		Если ЗначениеЗаполнено(Файл) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Файл);
				ФайлОбъект = Файл.ПолучитьОбъект();
				ФайлОбъект.УстановитьПометкуУдаления(Истина);
				РазблокироватьДанныеДляРедактирования(Файл);
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УдаляемыеКартинки.Очистить();
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		РегистрыСведений.HTMLПредставленияСодержанияПисем.Удалить(Объект.Ссылка);
	КонецЕсли;	
	
	ОбновитьФайлыПисьма();
	ВключитьРежимРедактированияHTML();
	
	Если Не ПисьмоОтправлено Тогда
		ПланыОбмена.ПоискПисемРегистрацияВсехПисем.ЗарегистрироватьИзменениеПисьма(Объект.Ссылка);
	КонецЕсли;	
	
	Элементы.ГруппаСообщение.Видимость = Ложь;
	
	ВстроеннаяПочтаСервер.ПрименитьПравила(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтоАвтосохранение = ТипЗнч(ПараметрыЗаписи) = Тип("Структура")
		И ПараметрыЗаписи.Свойство("Автосохранение")
		И ПараметрыЗаписи.Автосохранение = Истина;
	
	ЭтоЗаписьНовогоПисьма = ТипЗнч(ПараметрыЗаписи) = Тип("Структура")
		И ПараметрыЗаписи.Свойство("ЭтоНовый")
		И ПараметрыЗаписи.ЭтоНовый = Истина;
	
	Если Не ЭтоАвтосохранение
		И Не (ЗаписьПисьмаПриВыбореФайла
		И ОткрыватьФайлыИсходящегоПисьмаНаРедактирование) Тогда
		
		ТекстОповещения = ?(ЭтоЗаписьНовогоПисьма, НСтр("ru = 'Создание:'; en = 'Added:'"), НСтр("ru = 'Изменение:'; en = 'Changed:'"));
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			НавигационнаяСсылкаПисьма,
			ПредставлениеПисьма,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда	
	Если ЭтоЗаписьНовогоПисьма И АвтоматическиСохранятьВерсииНеотправленногоПисьма Тогда
		ПереименоватьАвтоСохраненныеФайлы();
	КонецЕсли;	
	#КонецЕсли	
	
	Оповестить("ИзменилосьСодержаниеПисьма", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Оповестить("СозданиеНаОсновании_ИсходящееПисьмо", Основание);
		Основание = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр.ПараметрСобытия = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессИзменен"
		Или ИмяСобытия = "ЗадачаВыполнена")
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПередИзменениемФормыНаКлиенте();
		ОтобразитьСвязиПисьма();
		ПослеИзмененияФормыНаКлиенте();
		
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_ЛичныйАдресат" 
		ИЛИ ИмяСобытия = "Запись_Контрагент" 
		ИЛИ ИмяСобытия = "Запись_КонтактноеЛицо" 
		ИЛИ ИмяСобытия = "Запись_Пользователь"
		ИЛИ ИмяСобытия = "Запись_РолиИсполнителей" 
		ИЛИ ИмяСобытия = "ИзмененоФизическоеЛицо") Тогда
		
		ПередИзменениемФормыНаКлиенте();
		ОбработатьЗаписьКонтакта(Параметр);
		ПослеИзмененияФормыНаКлиенте();
				
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = Объект.Ссылка
		И Источник <> ЭтаФорма Тогда
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
			ТекстРедактирования = Элементы.ТекстПисьма.ТекстРедактирования;
			Если ТекстПисьма <> ТекстРедактирования Тогда
				ТекстПисьма = ТекстРедактирования;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Тема <> Элементы.Тема.ТекстРедактирования Тогда
			Объект.Тема = Элементы.Тема.ТекстРедактирования;
		КонецЕсли;
		
		ПередИзменениемФормыНаКлиенте();
		ОбновитьФайлыПисьма();
		ПослеИзмененияФормыНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = Объект.Ссылка Тогда
		
		ПередИзменениемФормыНаКлиенте();
		ОбновитьФайлыПисьма();
		ПослеИзмененияФормыНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "АвтообновлениеСпискаПисем" Тогда

		// Устранение проблемы с потерей каретки в поле вода
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.Тема Тогда
			ПоследнийТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Вложения;
			ЭтаФорма.ТекущийЭлемент = ПоследнийТекущийЭлемент;
		КонецЕсли;

	КонецЕсли;
	
	Если ИмяСобытия = "УчетнаяЗаписьЭлектроннойПочтыСохранена" Тогда
		ПередИзменениемФормыНаКлиенте();
		УчетнаяЗаписьПроверитьПараметрыПочты();
		ПослеИзмененияФормыНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "ПерсональныеНастройки_Закрытие" Тогда 
		ПолучитьHTMLИзПоляHTMLДокумента();
		ПерсональныеНастройкиВыполненоЗакрытие = Истина;
	КонецЕсли;

	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты" Тогда 
		Если Параметр.Свойство("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям") Тогда
			ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям = Параметр.ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям;
		КонецЕсли;
	КонецЕсли;	
	
	Если ИмяСобытия = "ВставкаПолучателейПисьма_Добавить" И Источник = УникальныйИдентификатор Тогда 
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда 
			
			Результат = Параметр.МассивРезультата;
			
			Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() <> 0 Тогда
				
				ТипАдреса = Результат[0].ТипПолучателя;
				
				ПередИзменениемФормыНаКлиенте();
				
				ПараметрыЗаполненияТекущейСтроки = Неопределено;
				
				Если Элементы.Получатели.ТекущаяСтрока <> Неопределено Тогда
					СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
					Если СтрокаДанных <> Неопределено Тогда
						СтрокаДанных.РедактированиеЗавершено = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Параметр.ЗаполнениеИзСтроки Тогда 
					ЗанестиВПолучателиВыбранныеСтроки(
						Результат, 
						Элементы.Получатели.ТекущаяСтрока , // идентификатор текущей строки
						ПараметрыЗаполненияТекущейСтроки,
						ТипАдреса);
				Иначе 
					ЗанестиВПолучателиВыбранныеСтроки(
						Результат, 
						-1 , // идентификатор текущей строки
						ПараметрыЗаполненияТекущейСтроки,
						ТипАдреса);
				КонецЕсли;
			
			КонецЕсли;	
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметр.ТекстОшибок) Тогда 
			ТекстОшибкиДобавленияПолучателя = Параметр.ТекстОшибок;
			ПодключитьОбработчикОжидания("ПоказатьФорматированноеСообщение", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ИмяСобытия = "ВыбранФайлДляВосстановленияТекста" И Источник = УникальныйИдентификатор Тогда 
		
		ПолныйПутьФайла = Параметр;
		Файл = Новый Файл(ПолныйПутьФайла);
		Если Файл.Существует() Тогда
			
			ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайла, КодировкаТекста.UTF8);
			ТекстПисьмаФайла = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			Расширение = Файл.Расширение;
			Если Найти(НРег(Расширение), "htm") <> 0 Тогда
				ВстроеннаяПочтаСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаФайла);			
			КонецЕсли;	
			
			ПолучитьHTMLИзПоляHTMLДокумента();
			ТекстПисьма = ТекстПисьмаФайла;
			ВключитьРежимРедактированияHTML();
			
			Модифицированность = Истина;
			Элементы.ГруппаСообщение.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Если ИмяСобытия = "ПришлиНовыеПисьма_ПроверкаВозможностиОбновленияСписка"
		И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") 
			И Не ПисьмоОтправлено Тогда
			
			Если ВводДоступен() Тогда 
				Параметр.МожноОбновитьСписокПисем = Ложь;
				Оповестить("ТребуетсяОбновлениеСпискаПисемПриАктивизацииФормы");
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг"
		И Источник <> ЭтаФорма
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		РаботаСФлагамиОбъектовКлиентСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавленыАдресаты" Тогда
		ОтменаРедактирования = Ложь;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	КонецЕсли;	
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			УстановитьСвойстваКнопкиКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранПроектИлиПроектнаяЗадача" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда	
			Объект.Предмет = Параметр.ПроектнаяЗадача;	
			ЗаполнитьПредметСтрокой(Объект.Предмет, ПредметСтрокой);
		Иначе
			Объект.Предмет = Параметр;
			ЗаполнитьПредметСтрокой(Объект.Предмет, ПредметСтрокой);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
		И Не ПисьмоБылоОтправлено Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		Если HTMLДокумент <> Неопределено Тогда
			ТекстПисьмаПередЗакрытием = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
			
			Если ТекстПисьмаПередЗакрытием <> ТекстПисьмаПриОткрытии Тогда
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Объект.ОтправкаОтменена Тогда
		
		Если ЗакрытьБезОтправки Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПередЗакрытием", ЭтотОбъект);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриЗакрытииНеотправленногоПисьма",
			,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
		
КонецПроцедуры		

&НаКлиенте
Процедура ЗавершениеПередЗакрытием(Результат, Параметры) Экспорт

	Если Результат = "ЗакрытьБезОтправки" Тогда 
		ЗакрытьБезОтправки = Истина;
		Закрыть();
	ИначеЕсли Результат = "Отправить" Тогда 
		ОтправитьКлиент(); // отправка письма
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПисьмоОтправлено И Не ПисьмоБылоОтправлено Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗаписатьДатуЗакрытияКарточкиПисьма(Объект.Ссылка, ТекущаяДата());
		Иначе
			// стираем автосохраненные версии - т.к. не сохраняя отменили письмо
			
			Для Каждого Строка Из СписокСохраненныхТекстовПисьма Цикл
				
				ПутьФайла = Строка.ПолныйПутьФайла;
				Попытка
					УдалитьФайлы(ПутьФайла);
				Исключение
				КонецПопытки;	
				
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВычислитьСпособРедактированияТекста()
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаHTML.Видимость = Истина;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
		Элементы.ФормаАвтопереносСтрок.Пометка = Ложь; 
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Истина;
	Иначе	
		Элементы.ГруппаСтраницаHTML.Видимость = Ложь;
		Элементы.ФормаФорматHTML.Пометка = Ложь;
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Ложь;
		
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмо(Параметры)
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		
		Команда = Параметры.ЗначенияЗаполнения.Команда;
		Если Не Параметры.ЗначенияЗаполнения.Свойство("Письмо") Тогда
			ВызватьИсключение НСтр("ru = 'Некорректное значение заполнения'; en = 'Incorrect fill value'");
		КонецЕсли;
		
		Письмо = Параметры.ЗначенияЗаполнения.Письмо;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
			ContentType = ВстроеннаяПочтаСервер.ПолучитьЗначениеПоляИзЗаголовкаПисьма(Письмо.ВнутреннийЗаголовок, "Content-Type");
			Если Найти(НРег(ContentType), "text/calendar") > 0 Тогда 
				СодержаниеПисьма = Письмо.ПолучитьОбъект().ПолучитьСодержаниеПисьма();
				ТекстHTML = СодержаниеПисьма.Текст;
				Если Найти(ТекстHTML, "BEGIN:VCALENDAR") <> 0 Тогда
					ОригинальноеПисьмоВФорматеICalendar = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	ФорматОтветныхИПересылаемыхПисем = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ФорматОтветныхИПересылаемыхПисем");
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		
		Письмо = Параметры.ЗначенияЗаполнения.Письмо;
		
		Если ФорматОтветныхИПересылаемыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ПростойТекст") Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
		Иначе
			
			Если ФорматОтветныхИПересылаемыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ФорматИсходногоПисьма") Тогда
				ТипТекста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ТипТекста");
				Объект.ТипТекста = ТипТекста; // копируется тип текста из письма основания
			Иначе
				Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
			КонецЕсли;
			
			Если ОригинальноеПисьмоВФорматеICalendar Тогда
				Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML; // на iCalendar ответ всегда в HTML
			КонецЕсли;				
		
		КонецЕсли;
		
	Иначе // новое письмо
		
		ФорматНовыхПисем = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ФорматНовыхПисем");

		Если ФорматНовыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыНовыхПисем.HTML") Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
		Иначе
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	КонецЕсли;
	
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма 
		И ЗначениеЗаполнено(Объект.ПисьмоОснование) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда 
		Объект.ТипТекста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПисьмоОснование, "ТипТекста");
	КонецЕсли;	
	
	Если Параметры.Свойство("Вложения") Тогда
		Для каждого Вложение Из Параметры.Вложения Цикл
			ДобавитьВложение(Вложение);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Тема") Тогда
		Объект.Тема = Параметры.Тема;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		
		Команда = Параметры.ЗначенияЗаполнения.Команда;
		Если Не Параметры.ЗначенияЗаполнения.Свойство("Письмо") Тогда
			ВызватьИсключение НСтр("ru = 'Некорректное значение заполнения'; en = 'Incorrect fill value'");
		КонецЕсли;
		Письмо = Параметры.ЗначенияЗаполнения.Письмо;
		
		Если Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
			РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письмо);
		КонецЕсли;
		
		ОснованиеПисьма = Письмо;
		
		СкопироватьВложения = Истина;
		Если Команда = "Ответить"
			Или Команда = "ОтветитьВсем" Тогда
			
			ОтвечатьСФайлами =
				ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтвечатьСФайлами");
			
			Если Не ОтвечатьСФайлами Тогда
				СкопироватьВложения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		КопироватьТолькоФайлыСИдентификаторомВложений = Ложь;
		КопироватьТолькоБезИдентификаторовВложений = Ложь;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML И Не СкопироватьВложения Тогда
			СкопироватьВложения = Истина;
			КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
		КонецЕсли;
		
		Если Команда = "ПереслатьКакВложение" Тогда
			СкопироватьВложения = Ложь;
		КонецЕсли;	
		
		ТипТекстаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ТипТекста");
		Если Не СкопироватьВложения
			И ТипТекстаОснования = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
			
			СкопироватьВложения = Истина;
			КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
			
		КонецЕсли;
		
		Если СкопироватьВложения Тогда
			ВставитьФайлыИсходногоПисьмаСервер(Письмо, КопироватьТолькоФайлыСИдентификаторомВложений,
				КопироватьТолькоБезИдентификаторовВложений);
		КонецЕсли;
		
		Если Команда = "Переслать" Тогда
			ПересылкаПисьма = Письмо;
		ИначеЕсли  Команда = "ПереслатьСКопией" Тогда	
			ПересылкаПисьма = Письмо;
			ПересылкаСКопией = Истина;		
		ИначеЕсли Команда = "ОтветитьВсем" Или Команда = "Ответить" Тогда
			ПисьмоОтправленоВОтветНа = Письмо;
		ИначеЕсли Команда = "Перенаправить" Тогда
			ПеренаправлениеПисьма = Письмо;
		ИначеЕсли Команда = "ПереслатьКакВложение" Тогда				
			
			МассивПисем = Новый Массив;
			МассивПисем.Добавить(Письмо);

			ДобавитьВложениеПисьма(МассивПисем);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректная команда работы с письмом'; en = 'Incorrect command for email'");
		КонецЕсли;
		
		Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда 
			
			ПисьмоОбъект = Письмо.ПолучитьОбъект();
			СодержаниеПисьмаОснования = ПисьмоОбъект.ПолучитьСодержаниеПисьма();
			ТекстПисьма = СодержаниеПисьмаОснования.Текст;
			
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				ВстроеннаяПочтаСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
			КонецЕсли;	
			
		Иначе	
			
			ИспользованныйШаблон = Неопределено;
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.ЗначенияЗаполнения.Письмо,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета,
				ИспользованныйШаблон);
				
				Если ЗначениеЗаполнено(ИспользованныйШаблон) 
					И ИспользованныйШаблон.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
					
					КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
					КопироватьТолькоБезИдентификаторовВложений = Ложь;
					ВставитьФайлыИсходногоПисьмаСервер(ИспользованныйШаблон, КопироватьТолькоФайлыСИдентификаторомВложений,
						КопироватьТолькоБезИдентификаторовВложений);
					
					СкопироватьКартинкиПисьмаОснования(ИспользованныйШаблон);
					
				КонецЕсли;	
				
		КонецЕсли;		
			
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И Команда <> "ПереслатьКакВложение" Тогда
			
			СкопироватьКартинкиПисьмаОснования(Параметры.ЗначенияЗаполнения.Письмо);
			
		КонецЕсли;
			
	ИначеЕсли Параметры.Свойство("Основание")
		И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		Если ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ШаблоныПисем") Тогда 
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание,
				"ТипТекста, Кодировка");
				
			Объект.ТипТекста = РеквизитыОснования.ТипТекста;
			Объект.Кодировка = РеквизитыОснования.Кодировка;
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.Основание,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
				
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда 
				ВставитьФайлыИсходногоПисьмаСервер(Параметры.Основание,, Истина);
			Иначе 
				ВставитьФайлыИсходногоПисьмаСервер(Параметры.Основание);
			КонецЕсли;
			
			ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
				ТекстПисьма,
				Параметры.Основание,
				УникальныйИдентификатор);
				
			СозданПоШаблону = Истина;
			
		Иначе 
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.Основание,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
			
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Параметры.Основание)
			Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Параметры.Основание) Тогда
			
			МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.Основание, Ложь);
			
			Если ДелопроизводствоКлиентСервер.ЭтоКомплект(Параметры.Основание) Тогда
				
				КомплектующиеИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(
					Параметры.Основание, Ложь);
				Для каждого Элемент Из КомплектующиеИнфо.Элементы Цикл
					МассивФайловДочерний = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Элемент, Ложь);
					Для Каждого Файл Из МассивФайловДочерний Цикл
						МассивФайлов.Добавить(Файл);
					КонецЦикла;		
				КонецЦикла;
				
			КонецЕсли;	
			
			ДобавитьВложениеФайлы(МассивФайлов, Истина); // ИгнорироватьЗанятость=Истина
			
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(Параметры.Основание) Тогда
			
			ФайлИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Параметры.Основание,
				"Наименование, ИндексКартинки, ТекущаяВерсияРазмер");
			
			ВложенияСтрока = Вложения.Добавить();
			ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
			
			ВложенияСтрока.Ссылка = Параметры.Основание;
			ВложенияСтрока.ИмяФайла = ФайлИнфо.Наименование;
			ВложенияСтрока.Представление = ФайлИнфо.Наименование;
			ВложенияСтрока.ИндексКартинки = ФайлИнфо.ИндексКартинки;
			ВложенияСтрока.Размер = ФайлИнфо.ТекущаяВерсияРазмер;
			ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
			ВложенияСтрока.Расположение = "СсылкаНаФайл";
			
			ОтобразитьКоличествоФайловСервер();
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Параметры.Основание) Тогда
			
			ПисьмоОтправленоВОтветНа = Параметры.Основание;
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ПредметПереписки);
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				Объект.Предмет = ПредметПереписки;
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Параметры.Основание) Тогда
			
			ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ОтправленВОтветНа);
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ПредметПереписки);
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				Объект.Предмет = ПредметПереписки;
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоБронь(Параметры.Основание) Тогда
			
			Объект.Тема = БронированиеПомещений.ПолучитьОписаниеБрони(Параметры.Основание, Ложь);
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Параметры.ЗначениеКопирования) Тогда 
		
		ПисьмоОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		
		СодержаниеПисьмаОснования = ПисьмоОбъект.ПолучитьСодержаниеПисьма();
		ТекстПисьма = СодержаниеПисьмаОснования.Текст;
		
		ВставитьФайлыИсходногоПисьмаСервер(Параметры.ЗначениеКопирования);
		
		Объект.ТипТекста = ПисьмоОбъект.ТипТекста;
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			
			СкопироватьКартинкиПисьмаОснования(Параметры.ЗначениеКопирования);
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Файлы") Тогда
		
		Если ТипЗнч(Параметры.Файлы) = Тип("Массив") И Параметры.Файлы.Количество() > 0 Тогда
			
			Для каждого Файл Из Параметры.Файлы Цикл
				
				Если Не ДелопроизводствоКлиентСервер.ЭтоФайл(Файл) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл,
					"Наименование, ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияРасширение");
				
				ВложенияСтрока = Вложения.Добавить();
				ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
				
				ВложенияСтрока.Ссылка = Файл;
				ВложенияСтрока.ИмяФайла = ДанныеФайла.Наименование;
				ВложенияСтрока.Представление = 
					ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.Наименование, 
						ДанныеФайла.ТекущаяВерсияРасширение);
				ВложенияСтрока.ИндексКартинки = ДанныеФайла.ИндексКартинки;
				ВложенияСтрока.Размер = ДанныеФайла.ТекущаяВерсияРазмер;
				ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
				ВложенияСтрока.Расположение = "СсылкаНаФайл";
				
			КонецЦикла;
			
			Если Параметры.Файлы.Количество() = 1 Тогда
				Файл = Параметры.Файлы[0];
				ПредставлениеФайла = Строка(Файл) + " (" + Файл.Метаданные().ПредставлениеОбъекта + ")";
				Объект.Тема = ПредставлениеФайла;
			КонецЕсли;
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.Файлы,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
			
			ОтобразитьКоличествоФайловСервер();
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("СсылкаMailto") Тогда
		
		СтруктураMailto = ВстроеннаяПочтаСервер.РазобратьСсылкуMailto(Параметры.СсылкаMailto);
		
		Если СтруктураMailto.Свойство("АдресатыКому") Тогда
			
			АдресатыКому = СтруктураMailto.АдресатыКому;
			ТипАдреса = АдресатыКому[0].ТипПолучателя;
			ПараметрыЗаполненияТекущейСтроки = Неопределено;
			ЗанестиВПолучателиВыбранныеСтроки(АдресатыКому, -1, ПараметрыЗаполненияТекущейСтроки, ТипАдреса);
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("АдресатыКопия") Тогда
			
			АдресатыКопия = СтруктураMailto.АдресатыКопия;
			ТипАдреса = АдресатыКопия[0].ТипПолучателя;
			ПараметрыЗаполненияТекущейСтроки = Неопределено;
			ЗанестиВПолучателиВыбранныеСтроки(АдресатыКопия, -1, ПараметрыЗаполненияТекущейСтроки, ТипАдреса);
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("АдресатыСкрытаяКопия") Тогда
			
			АдресатыСкрытаяКопия = СтруктураMailto.АдресатыСкрытаяКопия;
			ТипАдреса = АдресатыСкрытаяКопия[0].ТипПолучателя;
			ПараметрыЗаполненияТекущейСтроки = Неопределено;
			ЗанестиВПолучателиВыбранныеСтроки(АдресатыСкрытаяКопия, -1, ПараметрыЗаполненияТекущейСтроки, ТипАдреса);
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("ТемаПисьма") Тогда
			
			Объект.Тема = СтруктураMailto.ТемаПисьма;
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("ТекстПисьма") Тогда
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				СтруктураMailto.ТекстПисьма,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
			
		Иначе
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Неопределено,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
				
		КонецЕсли
		
	Иначе
		
		ИспользованныйШаблон = Неопределено;
		ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
			Неопределено,
			Объект.ТипТекста,
			Объект.Кодировка,
			Объект.ТипОтвета,
			ИспользованныйШаблон);
			
			Если ЗначениеЗаполнено(ИспользованныйШаблон) 
				И ИспользованныйШаблон.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
				И Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				
				КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
				КопироватьТолькоБезИдентификаторовВложений = Ложь;
				ВставитьФайлыИсходногоПисьмаСервер(ИспользованныйШаблон, КопироватьТолькоФайлыСИдентификаторомВложений,
					КопироватьТолькоБезИдентификаторовВложений);
				
				СкопироватьКартинкиПисьмаОснования(ИспользованныйШаблон);
				
			КонецЕсли;	
			
	КонецЕсли;
	
	Если Параметры.Свойство("СписокПочтовыхАдресов")
		И ТипЗнч(Параметры.СписокПочтовыхАдресов) = Тип("СписокЗначений") Тогда
		Объект.ПолучателиПисьма.Очистить();
		
		Для каждого Элемент Из Параметры.СписокПочтовыхАдресов Цикл
			НовыйПолучатель = Объект.ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Элемент.Значение.Адрес,
				Элемент.Значение.ОтображаемоеИмя);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВосстановлениеПисьма")
		И ТипЗнч(Параметры.ВосстановлениеПисьма) = Тип("Структура") Тогда
		
		Объект.Тема = Параметры.ВосстановлениеПисьма.Тема;
		
		Если Найти(Параметры.ВосстановлениеПисьма.Расширение, "txt") <> 0 Тогда
			
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				
				ВыполнитьПереключениеВТекст();
				ОбновитьКомандыФорматаТекста();
				
				Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
				
				Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
				Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
				
			КонецЕсли;		
			
		ИначеЕсли Найти(Параметры.ВосстановлениеПисьма.Расширение, "htm") <> 0 Тогда	
			
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
				ВыполнитьПереключениеВHTML();
			КонецЕсли;		
			
		КонецЕсли;	
		
		ТекстПисьма = Параметры.ВосстановлениеПисьма.Текст;
		
	КонецЕсли;
	
	ЗаполнитьПредметСтрокой(Объект.Предмет, ПредметСтрокой);
	ЗаполнитьПроектСтрокой(Объект.Проект, ПроектСтрокой);
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопкиКонтроля()
	
	Контроль.УстановитьСвойстваКнопкиКонтроляПисьма(ЭтаФорма);
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"КомплексныйПроцесс", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДоступность

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовФормы()
	
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	ЕстьВложения = (Вложения.Количество() > 0);
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если ПисьмоОтправлено Тогда
		Элементы.ПолучателиПредставление.РедактированиеТекста = Ложь;
		Элементы.ПолучателиТипАдреса.РедактированиеТекста = Ложь;
		Элементы.ПолучателиТипАдреса.ТолькоПросмотр = Истина;
		Элементы.Отправить.Видимость = Ложь;
		Элементы.Отправить.Доступность = Ложь;
		Элементы.Отправить_ВсеДействия.Видимость = Ложь;
		Элементы.Отправить_ВсеДействия.Доступность = Ложь;
		Элементы.ЗаполнитьПоШаблону.Видимость = Ложь;
		Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ГруппаВажность.Видимость = Ложь;
		
		Элементы.Тема.ТолькоПросмотр = Истина;
		Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		Элементы.ВложенияКонтекстноеМенюДобавить.Доступность = Ложь;
		Элементы.КнопкаДобавитьФайлы.Доступность = Ложь;
		
		Элементы.ФормаВставитьШаблонТекста.Доступность = Ложь;
		Элементы.ФормаВставитьШаблонТекста_ВсеДействия.Доступность = Ложь;
		Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Ложь;
		
		Элементы.ФормаФорматироватьТекстИсходящегоПисьма.Видимость = Ложь;
		Элементы.ФормаФорматироватьТекстИсходящегоПисьма.Доступность = Ложь;
		
	Иначе
		Элементы.ПолучателиПредставление.РедактированиеТекста = Истина;
		Элементы.Отправить.Видимость = Истина;
		Элементы.Отправить.Доступность = Истина;
		Элементы.Отправить_ВсеДействия.Видимость = Истина;
		Элементы.Отправить_ВсеДействия.Доступность = Истина;
		Элементы.ЗаполнитьПоШаблону.Видимость = Истина;
		Элементы.Отправить.КнопкаПоУмолчанию = Истина;
		Элементы.ЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ЗаписатьИЗакрыть.Доступность = Ложь;
		
		Элементы.ГруппаВажность.Видимость = Истина;
		
		Элементы.Тема.ТолькоПросмотр = Ложь;
		Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавить.Доступность = Истина;
		Элементы.КнопкаДобавитьФайлы.Доступность = Истина;
		
		Элементы.ФормаВставитьШаблонТекста.Доступность = Истина;
		Элементы.ФормаВставитьШаблонТекста_ВсеДействия.Доступность = Истина;
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
			Элементы.ФормаФорматироватьТекстИсходящегоПисьма.Видимость = Истина;
		Иначе	
			Элементы.ФормаФорматироватьТекстИсходящегоПисьма.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Переслать.Видимость = Не ЭтоНовый;
	Элементы.Переслать_ВсеДействия.Видимость = Не ЭтоНовый;
	Элементы.ПереслатьПредыдущему_ВсеДействия.Видимость = ПисьмоОтправлено;
	
	Элементы.СвязиОбъекта.Доступность = Не ЭтоНовый;
	Элементы.ЗадачиПоПредмету.Доступность = Не ЭтоНовый;
	Элементы.ПереместитьВКорзину.Доступность = Не ЭтоНовый;
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа)
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПисьмоОтправленоВОтветНа)
		Или ЗначениеЗаполнено(ПересылкаПисьма) 
		Или ЗначениеЗаполнено(Объект.ПисьмоОснование) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда
		Элементы.ВставитьТекстИсходногоПисьма.Видимость = Истина;
		Элементы.ВставитьФайлыИсходногоПисьма.Видимость = Истина;
		Элементы.ВложенияКонтекстноеМенюВставитьФайлыИсходногоПисьма.Видимость = Истина;
	Иначе
		Элементы.ВставитьТекстИсходногоПисьма.Видимость = Ложь;
		Элементы.ВставитьФайлыИсходногоПисьма.Видимость = Ложь;
		Элементы.ВставитьФайлыИсходногоПисьма_ВсеДействия.Видимость = Ложь;
		Элементы.ВложенияКонтекстноеМенюВставитьФайлыИсходногоПисьма.Видимость = Ложь;
	КонецЕсли;
	
	ИсходноеПисьмо = Неопределено;
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ИсходноеПисьмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ИсходноеПисьмо = ПересылкаПисьма;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		ИсходноеПисьмо = Объект.ПисьмоОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходноеПисьмо)
		И (ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ИсходноеПисьмо)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ИсходноеПисьмо)) Тогда
		
		Элементы.ДобавитьАвтораИсходногоПисьма.Видимость = Истина;
		Элементы.ДобавитьПолучателейИсходногоПисьма.Видимость = Истина;
		Элементы.ДобавитьПолучателейКопийИсходногоПисьма.Видимость = Истина;
		
	Иначе
		
		Элементы.ДобавитьАвтораИсходногоПисьма.Видимость = Ложь;
		Элементы.ДобавитьПолучателейИсходногоПисьма.Видимость = Ложь;
		Элементы.ДобавитьПолучателейКопийИсходногоПисьма.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Элементы.ПолучателиПредставление.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПротоколРаботыПользователей) Тогда
		Элементы.ПротоколРаботы.Видимость = Ложь;
	КонецЕсли;
	
	// перенаправление письма	
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма 
		И ЗначениеЗаполнено(Объект.ПисьмоОснование) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда 
		Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		Элементы.Тема.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.Тема.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Вложения.ТолькоПросмотр = Истина;
		Элементы.КомандыHTML.Видимость = Ложь;
		Элементы.ФормаВставитьШаблонТекста.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавитьКартинкуИзБуфераКакФайл.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюВставитьФайлыИсходногоПисьма.Доступность = Ложь;
		Элементы.ВставитьФайлыИсходногоПисьма_ВсеДействия.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.РедактироватьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = (ТекущиеДанные.Расположение = "Файл");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ПисемВПерепискеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ПисьмоОтправленоВОтветНа);
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ПересылкаПисьма);
	ИначеЕсли ЗначениеЗаполнено(ПеренаправлениеПисьма) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ПеренаправлениеПисьма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Письмо", Объект.Ссылка);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ПросмотрОшибокДоставки", 
		ПараметрыФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПредмета(ВведенныйПредмет, Параметры) Экспорт
	
	Если ВведенныйПредмет <> Неопределено Тогда
		ВыбранныйПредмет = ВведенныйПредмет;
		ПодключитьОбработчикОжидания("ОбработатьСменуПредмета", 0.2, Истина);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьСменуПредмета()
	
	Объект.Предмет = ВыбранныйПредмет;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		ПараметрыЗаписи = Новый Структура("ЗаменитьПредметПереписки", Истина);
		Если ЗаписатьКлиент(ПараметрыЗаписи) Тогда
			
			НачальноеЗначениеПредмет = Объект.Предмет;
			
		Иначе
			
			Объект.Предмет = НачальноеЗначениеПредмет;
			
			Если СписокОшибокПриЗаписи.Количество() > 0 Тогда
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Предмет не установлен'; en = 'Subject is not set'"));
				
				ПараметрыОткрытия.Вставить("ПояснениеОшибки", 
					НСтр("ru ='Не удалось установить предмет, т.к. некоторые письма в переписке заблокированы'; en = 'Field Related to could not be set because some emails in the thread are locked'"));
				
				ПараметрыОткрытия.Вставить("МассивОшибок", СписокОшибокПриЗаписи.ВыгрузитьЗначения());
				ОткрытьФорму("ОбщаяФорма.ПротоколОшибокОбработкиПисемПереписки", ПараметрыОткрытия, ЭтаФорма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранныйПредмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНачалаВыбораПредмета(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Если ТипЗнч(ВыбранноеЗначение.Значение) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыбиратьТолькоПроектнуюЗадачу", Истина);
		
		Если ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ПараметрыФормы.Вставить("ПроектнаяЗадача", НачальноеЗначениеПредмет);
		ИначеЕсли ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.Проекты") Тогда
			ПараметрыФормы.Вставить("Проект", НачальноеЗначениеПредмет);
		КонецЕсли;	

		ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы, Параметры.Элемент);		
		
	Иначе
		
		ТипВыбранногоЗначенияПредмета = ТипЗнч(ВыбранноеЗначение.Значение);
		ПодключитьОбработчикОжидания("ОбработатьВводПредмета", 0.1, Истина);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводПредмета()
	
	ВыбранныйПредмет = Неопределено;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВводаПредмета", ЭтотОбъект);
	ПоказатьВводЗначения(
		ОписаниеОповещения,
		ВыбранныйПредмет,
		НСтр("ru = 'Выбор предмета'; en = 'Select subject'"),
		ТипВыбранногоЗначенияПредмета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВводаПредмета(ВведенныйПредмет, Параметры) Экспорт

	Если ВведенныйПредмет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПредмет = ВведенныйПредмет;
	
	Если ВыбранныйПредмет = НачальноеЗначениеПредмет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Предмет = ВыбранныйПредмет;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		ПараметрыЗаписи = Новый Структура("ЗаменитьПредметПереписки", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			
			НачальноеЗначениеПредмет = Объект.Предмет;
			
		Иначе
			
			Объект.Предмет = НачальноеЗначениеПредмет;
			
			Если СписокОшибокПриЗаписи.Количество() > 0 Тогда
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Предмет не установлен'; en = 'Subject is not set'"));
				
				ПараметрыОткрытия.Вставить("ПояснениеОшибки", 
					НСтр("ru = 'Не удалось установить предмет, т.к. некоторые письма в переписке заблокированы'; en = 'Field Related to could not be set because some emails in the thread are locked'"));
				
				ПараметрыОткрытия.Вставить("МассивОшибок", СписокОшибокПриЗаписи.ВыгрузитьЗначения());
				ОткрытьФорму("ОбщаяФорма.ПротоколОшибокОбработкиПисемПереписки", ПараметрыОткрытия, ЭтаФорма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьПроверитьПараметрыПочты()
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.УчетнаяЗапись).Чтение
		И Объект.УчетнаяЗапись.ИспользоватьДляОтправки
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись.СерверИсходящейПочты) Тогда
		
		ЗаполненыПараметрыEmailУчетнойЗаписи = Истина;
		
	Иначе
		
		ЗаполненыПараметрыEmailУчетнойЗаписи = Ложь;
		
	КонецЕсли;
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировку(Команда)
	
	ПараметрыОткрытия = Новый Структура("ТекущаяКодировка", Объект.Кодировка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияКодировки", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.Файлы.Форма.ВыборКодировки", 
		ПараметрыОткрытия,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияКодировки(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыбраннаяКодировка = Результат.Значение;
		Если ВыбраннаяКодировка <> Неопределено Тогда
			ПередИзменениемФормыНаКлиенте();
			ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка);
			ПослеИзмененияФормыНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка)
	
	СтроковыеДанные = Новый Структура;
	СтроковыеДанные.Вставить("ТекстПисьма", ТекстПисьма);
	СтроковыеДанные.Вставить("Тема", Объект.Тема);
	Для каждого ПолучателиСтрока Из Получатели Цикл
		СтроковыеДанные.Вставить(
			"ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0"),
			ПолучателиСтрока.Представление);
	КонецЦикла;
	
	СтрокиВКодировке = РаботаСоСтроками.ПолучитьСтрокиВКодировке(СтроковыеДанные, ВыбраннаяКодировка);
	
	ТекстПисьма = СтрокиВКодировке.ТекстПисьма;
	Объект.Тема = СтрокиВКодировке.Тема;
	Для каждого ПолучателиСтрока Из Получатели Цикл
		ПолучателиСтрока.Представление = СтрокиВКодировке["ПолучателиПредставление"
			+ Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0")];
	КонецЦикла;
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	Объект.Кодировка = ВыбраннаяКодировка;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКлиент()
	
	ОчиститьСообщения();
	
	Если ОткрыватьФайлыИсходящегоПисьмаНаРедактирование Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеОтправки0", ЭтотОбъект);
		ЗакончитьРедактированиеФайлов(ОписаниеОповещения);
		Возврат;
		
	КонецЕсли;
	
	ПродолжениеОтправки0(Истина, Неопределено);
	
КонецПроцедуры		

&НаКлиенте
Процедура ПродолжениеОтправки0(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Письмо не было отправлено, 
			|так как некоторые из файлов письма заняты другим приложением.'; en = 'Email was not sent because some of this email files mails were locked by another application.'"));
		Возврат;
	КонецЕсли;	
	Оповестить("ОбновитьСписокПоследних");
	
	Если ВыполнялосьОсвобождениеФайлов Тогда
		
		КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
		
		СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
			"КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
			
	КонецЕсли;	
		
	ВыполнялосьОсвобождениеФайлов = Ложь;	
	
	Если ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов
		И ВстроеннаяПочтаКлиентСервер.ЭтоРассылка(Получатели.Количество()) Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание!
			|Письмо будет отправлено %1 адресатам.
			|Вы уверены?';
			|en = 'Attention! 
			|The  email will be sent to %1 addressees. 
			|Are you sure?'"),
			Строка(Получатели.Количество()));
			
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса);	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправки1", ЭтотОбъект);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
		
	КонецЕсли;	
	
	ПродолжениеОтправки1();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправки1(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
	
	Если БольшеНеЗадаватьЭтотВопрос Тогда
			
		ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов = Ложь;
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
			ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов);
			
	КонецЕсли;
		
	Если Результат.Отправить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжениеОтправки1();
	
КонецПроцедуры		

&НаКлиенте
Процедура ПродолжениеОтправки1()
	
	Если ПересылкаВнутреннегоПисьма И ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям Тогда  
		
		ВнешниеАдресаты = Новый СписокЗначений;
		Для Каждого Строка Из Получатели Цикл
			Если Строка.Внешний Тогда 
				ВнешниеАдресаты.Добавить(Строка.Адресат, Строка.Представление);
			КонецЕсли;	
		КонецЦикла;	
		
		Если ВнешниеАдресаты.Количество() > 0 Тогда 
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВнешниеАдресаты", ВнешниеАдресаты);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправки2", ЭтотОбъект);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.Форма.ВопросПриПересылкеВнешнимАдресатам", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ПродолжениеОтправки2();
		
КонецПроцедуры		
			
&НаКлиенте
Процедура ЗавершениеОтправки2(Результат, Параметры) Экспорт
			
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	ПродолжениеОтправки2();
	
КонецПроцедуры		

&НаКлиенте
Процедура ПродолжениеОтправки2()

	Если ОригинальноеПисьмоВФорматеICalendar И ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar Тогда
		
		ТекстВопроса = НСтр("ru = 'Внимание!
			|Письмо будет отправлено как обычное письмо (а не как принятие приглашения).
			|Продолжить?';
			|en = 'Attention! 
			|The email will be sent as a standard email (rather than as an accepted invitation). 
			|Do you want to continue?'");
			
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса);	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправки3", ЭтотОбъект);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Возврат;	
		
	КонецЕсли;
	
	ПродолжениеОтправки3();
		
КонецПроцедуры		
			
&НаКлиенте
Процедура ЗавершениеОтправки3(Результат, Параметры) Экспорт
		
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
		
	БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
	
	Если БольшеНеЗадаватьЭтотВопрос Тогда
			
		ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar = Ложь;
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar",
			ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar);
			
	КонецЕсли;
		
	Если Результат.Отправить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжениеОтправки3();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОтправки3()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправки4", ЭтотОбъект);
	Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПисьму(ЭтаФорма, ОписаниеОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Отправить", Истина);
	Результат.Вставить("УдалитьОтсутствующих", Ложь);
	Результат.Вставить("ДобавитьЗаместителей", Ложь);
	Результат.Вставить("Отсутствующие", Новый Массив);
	Результат.Вставить("Заместители", Новый Соответствие);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправки4(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено
		Или Не Результат.Отправить Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиДляДобавления = Новый Соответствие;
	ПользователиДляУдаления = Новый Массив;
	
	Если Результат.ДобавитьЗаместителей Тогда
		
		Для Каждого ЗаместителиКлючИЗначение Из Результат.Заместители Цикл
			
			Сотрудник = ЗаместителиКлючИЗначение.Ключ;
			Заместители = ЗаместителиКлючИЗначение.Значение;
			
			Если Заместители.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТипАдреса = Неопределено;
			Для Каждого Получатель Из Получатели Цикл
				
				Если Получатель.ТипАдреса = НСтр("ru = 'Обратный адрес:'; en = 'Return address:'") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Получатель.Контакт = Сотрудник Тогда
					
					ТекущийТипАдреса = Получатель.ТипАдреса;
					Если ТекущийТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'")
						Или ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
						ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'");
					ИначеЕсли ТекущийТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'")
						Или ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
						ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'");
					ИначеЕсли ТекущийТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'")
						Или ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
						ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'");
					КонецЕсли;
					
					Если Получатель.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
						Получатель.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Заместитель Из Заместители Цикл
				
				ТекущийТипАдреса = ПользователиДляДобавления.Получить(Заместитель);
				Если ТекущийТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'")
					Или ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
					ТекущийТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'");
				ИначеЕсли ТекущийТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'")
					Или ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
					ТекущийТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'");
				ИначеЕсли ТекущийТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'")
					Или ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
					ТекущийТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'");
				КонецЕсли;
				ПользователиДляДобавления.Вставить(Заместитель, ТекущийТипАдреса);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат.УдалитьОтсутствующих И Результат.ДобавитьЗаместителей Тогда
		
		Для Каждого Отсутствующий Из Результат.Отсутствующие Цикл
			
			ЕстьЗаместитель = Ложь;
			Для Каждого ЗаместителиКлючИЗначение Из Результат.Заместители Цикл
				
				Если Отсутствующий = ЗаместителиКлючИЗначение.Ключ И ЗаместителиКлючИЗначение.Значение.Количество() <> 0 Тогда
					ЕстьЗаместитель = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьЗаместитель Тогда
				ПользователиДляУдаления.Добавить(Отсутствующий);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Результат.УдалитьОтсутствующих И Не Результат.ДобавитьЗаместителей Тогда
		
		ПользователиДляУдаления = Результат.Отсутствующие;
		
	КонецЕсли;
	
	Для Каждого УдаляемыйПользователь Из ПользователиДляУдаления Цикл
		КоличествоЭлементов = Получатели.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			Строка = Получатели[КоличествоЭлементов - Индекс];
			Если Строка.Контакт = УдаляемыйПользователь Тогда
				Получатели.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПользователиДляДобавления.Количество() <> 0 Тогда
		ДобавитьПользователейВПолучатели(ПользователиДляДобавления);
	КонецЕсли;
	
	ПродолжениеОтправки4();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОтправки4()
	
	Объект.ПодготовленоКОтправке = ТекущаяДата();
	Объект.ОтправкаОтменена = Ложь;
	ПараметрыЗаписи = Новый Структура;
	ВыполняетсяОтправка = Истина;
	Если Не ЗаписатьКлиент(ПараметрыЗаписи) Тогда
		
		ВыполняетсяОтправка = Ложь;
		Объект.ПодготовленоКОтправке = Дата(1, 1, 1);
		Если ЕстьЗанятыеТекущимПользователемФайлы Тогда
			
			ТекстВопроса = НСтр("ru = 'Некоторые файлы заняты вами для редактирования.
				|Закончить редактирование файлов и отправить письмо?';
				|en = 'Some files are locked for edit.
				|Finish editing files and send email?'");
			
			Режим = Новый СписокЗначений;
			Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, отправить письмо'; en = 'Yes, send email'"));
			Режим.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет, не отправлять'; en = 'No, do not send'"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправки5", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ВыполняетсяОтправка = Ложь;
	ПисьмоБылоОтправлено = Истина;
	Оповестить("ПисьмоОтправлено", ПисьмоОтправленоВОтветНа);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправки5(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправки6", ЭтотОбъект);
	ЗакончитьРедактированиеВсехЗанятыхФайлов(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправки6(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
		"КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	ОтправитьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлов(Обработчик)
	
	ВыполнялосьОсвобождениеФайлов = Ложь;
	
	Если Вложения.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;
	КонецЕсли;
	
	// Вложения может быть не пусты, но занятых файлов нет 
	// (вообще нет файлов как элемент Справочник.Файлы -из Вложения еще не созданы файлы)
	ЗанятыеФайлы = РаботаСФайламиВызовСервера.ПолучитьПриложенныеФайлы(
		Объект.Ссылка,
		ТекущийПользователь);
	
	Если ЗанятыеФайлы.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнялосьОсвобождениеФайлов = Истина;
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
		Обработчик,
		ЗанятыеФайлы,
		УникальныйИдентификатор,
		Истина, // СоздатьНовуюВерсию
		"", // КомментарийКВерсии
		Ложь, // ПоказыватьОповещение
		Истина); //ОсвобождатьБезВопросаФайлыКоторыхНетВРабочемКаталоге
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВсехЗанятыхФайлов(Обработчик)
	
	ЗанятыеФайлы = РаботаСФайламиВызовСервера.ПолучитьПриложенныеФайлы(
		Объект.Ссылка,
		ТекущийПользователь);
		
	Если ЗанятыеФайлы.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;
	КонецЕсли;
		
	РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
		Обработчик,
		ЗанятыеФайлы,
		УникальныйИдентификатор,
		Истина, // СоздатьНовуюВерсию
		"", // КомментарийКВерсии
		Ложь, // ПоказыватьОповещение
		Истина); //ОсвобождатьБезВопросаФайлыКоторыхНетВРабочемКаталоге
		
КонецПроцедуры

&НаСервере
Функция ПроверитьПисьмоПередОтправкой(ТекущийОбъект)
	
	КодВозврата = Истина;
	
	МассивАдресатов = Новый Массив;
	Для каждого Получатель Из ТекущийОбъект.ПолучателиПисьма Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	Для каждого Получатель Из ТекущийОбъект.ПолучателиКопий Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	Для каждого Получатель Из ТекущийОбъект.ПолучателиСкрытыхКопий Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	
	СписокУникальныхАдресов = Новый Массив;
	Для каждого Адресат Из МассивАдресатов Цикл
		
		Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
		Если СписокУникальныхАдресов.Найти(Адрес) <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя отправить письмо. Почтовый адрес ""%1"" указан дважды.'; en = 'You cannot send email. Mailing address ""%1"" is listed twice.'"),
					Адрес),,
				"Получатели");
			
			КодВозврата = Ложь;
			
		КонецЕсли;
		
		Если Не РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Адрес) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя отправить письмо. Указан некорректный почтовый адрес получателя ""%1""'; en = 'You cannot send email. You specified an incorrect recipient''s mail address ""%1""'"),
					Адрес));
			
			КодВозврата = Ложь;
			
		КонецЕсли;
		
		СписокУникальныхАдресов.Добавить(Адрес);
		
	КонецЦикла;
	
	Если СписокУникальныхАдресов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя отправить письмо. Необходимо указать хотя бы одного получателя.'; en = 'You cannot send email. You must specify at least one recipient.'"),,
				"Получатели");
		
		КодВозврата = Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийОбъект.Тема) Тогда
		
		Если Объект.ТипОтвета <> Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда 
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Нельзя отправить письмо. Не заполнена тема.'; en = 'You cannot send email. The subject is empty.'"),,
				"Тема",
				"Объект");
			
			КодВозврата = Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма
		И Объект.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя Тогда 
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя перенаправлять письмо по внешней маршрутизации.'; en = 'You cannot forward email to external routing.'"),,
			"Получатели");
		
		КодВозврата = Ложь;
		
	КонецЕсли;	
	
	Если КодВозврата = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьЗанятыеТекущимПользователемФайлы = Ложь;
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка)
		И ПисьмоСодержитЗанятыеФайлы(ТекущийОбъект.Ссылка) Тогда
		
		Если ПисьмоСодержитЗанятыеФайлы(ТекущийОбъект.Ссылка, ТекущийПользователь) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Нельзя отправить письмо.
					|Некоторые файлы заняты другими пользователями для редактирования.';
					|en = 'You cannot send email. 
					|Some other users have files of this email locked for editing.'"),,
				"Вложения");
			
		Иначе
			
			ЕстьЗанятыеТекущимПользователемФайлы = Истина;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ПроверитьПредельныйРазмерПисьма() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьПредельныйРазмерПисьма()
	
	Если Объект.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя Тогда
		
		РазмерПисьмаБайт = 0;
		РазмерТекстаБайт = 0;
		
		Для каждого ВложенияСтрока Из Вложения Цикл
			Если Не ВложенияСтрока.ПометкаУдаления Тогда
				РазмерПисьмаБайт = РазмерПисьмаБайт + ВложенияСтрока.Размер;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			РазмерТекстаБайт = СтрДлина(ТекстПисьмаHTMLПриЗаписи);
		Иначе	
			РазмерТекстаБайт = СтрДлина(ТекстПисьма);
		КонецЕсли;	
		
		РазмерТекстаМБ = РазмерТекстаБайт / (1024*1024);
		МаксимальныйРазмерТелаВнешнегоИсходящегоПисьма = 3; // 3 МБ
		Если РазмерТекстаМБ > МаксимальныйРазмерТелаВнешнегоИсходящегоПисьма Тогда
			
			СтрокаРазмера = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(
				МаксимальныйРазмерТелаВнешнегоИсходящегоПисьма);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Размер содержимого письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
				|Удалите лишний текст письма.';
				|en = 'The size of the content of the email (%1 Mb) exceeds the maximum allowed size (%2 Mb). 
				|Remove the redundant email text.'"),
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерТекстаМБ), 
				СтрокаРазмера);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"ТекстПисьма");
			
			Возврат Ложь;
		КонецЕсли;	
		
		РазмерПисьмаБайт = РазмерПисьмаБайт + РазмерТекстаБайт;
		
		РазмерПисьмаМБ = РазмерПисьмаБайт / (1024*1024);
		Если МаксимальныйРазмерВнешнегоИсходящегоПисьма <> 0 
			И РазмерПисьмаМБ > МаксимальныйРазмерВнешнегоИсходящегоПисьма Тогда
			
			СтрокаРазмера = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(
				МаксимальныйРазмерВнешнегоИсходящегоПисьма);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Размер письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
				|Удалите слишком большие вложения.';
				|en = 'Email size (%1 MB) exceeds the maximum allowed size (%2 MB). 
				|Remove too large attachments.'"),
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерПисьмаМБ), 
				СтрокаРазмера);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Вложения");
			
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Модифицированность Тогда
		Если Не ЗаписатьКлиент() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ПереслатьПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьПредыдущему(Команда)
	
	Если Модифицированность Тогда
		Если Не ЗаписатьКлиент() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВстроеннаяПочтаКлиент.ПереслатьПредыдущему(Объект.Ссылка) Тогда 
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.2, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Модифицированность Тогда
		Если Не ЗаписатьКлиент() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ПеренаправитьПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", Объект.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеРедактированияКомментария", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ВводКомментария", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияКомментария(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Комментарий = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПоПредмету(Команда)
	
	ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", Объект.Ссылка);
	ПараметрыФормы.Вставить(
		"Заголовок",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процессы и задачи по предмету: ""%1""'; en = 'Processes and tasks for the subject ""%1""'"),
			Заголовок));
	ОткрытьФорму(
		"ОбщаяФорма.ПроцессыИЗадачи",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязиОбъекта(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму(
		"РегистрСведений.СвязиДокументов.Форма.ФормаСвязейОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколРаботы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектДанных", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ПротоколРаботыПользователей.Форма.ПротоколРаботы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПапка = Объект.Папка;
	ПараметрыЗаписи = Новый Структура("ПереместитьВКорзину", Истина);
	Если Не ЗаписатьКлиент(ПараметрыЗаписи) Тогда
		Объект.Папка = ПредыдущаяПапка;
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПисьмо(Команда)
	
	Если Модифицированность Тогда
		Если Не ЗаписатьКлиент() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтозватьПисьмо(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	ТекстИдентификаторы = Новый ТекстовыйДокумент;
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор сообщения:  " + Объект.ИдентификаторСообщения);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Дата", Объект.Дата);
	СтруктураПараметры.Вставить("Отправлено", Объект.ДатаОтправки);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстИдентификаторы);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПараметрыПисьма", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленныеФайлы(Команда)
	
	ПередИзменениемФормыНаКлиенте();
	ОтображатьУдаленныеФайлыСервер();
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеФайлыСервер()
	
	ОтображатьУдаленныеФайлы = Не ОтображатьУдаленныеФайлы;
	Элементы.ОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
	ОбновитьФайлыПисьма();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		ОтображатьУдаленныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлы(Команда)
	
	ДобавитьФайлыСДиска();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстПисьма(Команда)
	
	Если Модифицированность = Истина Или (Не ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		Если Не ЗаписатьКлиент() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СохранитьТекстПисьма(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПисьмо(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
		И Не ПисьмоБылоОтправлено Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ТекстПисьма = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
		
		Если ТекстПисьма <> ТекстПисьмаПриОткрытии Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Модифицированность = Истина Или (Не ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			ТекстПисьмаДляСохранения = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма);
		Иначе
			ТекстПисьмаДляСохранения = ТекстПисьма;
		КонецЕсли;
		
		ПоместитьФайлыСДискаВоВременноеХранилище();
		СтруктураПисьма = ВстроеннаяПочтаКлиент.СформироватьСтруктуруПисьма(
			Объект, ТекстПисьмаДляСохранения, Вложения, Получатели);
		ВстроеннаяПочтаКлиент.СохранитьПисьмо(СтруктураПисьма);
		
	Иначе
		
		ВстроеннаяПочтаКлиент.СохранитьПисьмо(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ЗаписатьКлиент() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресатов(Команда)
	
	ПолучателиТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если ПолучателиТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(
		ПолучателиТекущиеДанные.Представление) Тогда		
		
		ВыбратьИзАдреснойКниги();	                                          		
	Иначе
		Элементы.Получатели.ДобавитьСтроку();
		НоваяСтрока = Элементы.Получатели.ТекущиеДанные;
		
		Если ПолучателиТекущиеДанные <> Неопределено 
			И ЗначениеЗаполнено(ПолучателиТекущиеДанные.ТипАдреса) Тогда
			
			Если ПолучателиТекущиеДанные.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
				НоваяСтрока.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'");
			Иначе
				НоваяСтрока.ТипАдреса = ПолучателиТекущиеДанные.ТипАдреса;
			КонецЕсли;	                                                				
		КонецЕсли;		
		
		ВыбратьИзАдреснойКниги();
		ОтменаРедактирования = Ложь;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	КонецЕсли;                                                              
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзАдреснойКниги(ПараметрМножественныйВыбор = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указана учетная запись. 
			|Рекомендуется в настройках почты установить учетную запись по умолчанию.';
			|en = 'Account is not specified. 
			|It is recommended in your personal mail settings set one account as default account.'"));
		Возврат;
		
	КонецЕсли;
	
	МножественныйВыбор = Ложь;
	ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'");
	Контакт = Неопределено;
	ТекущаяСтрока = -1;
	
	Если Не ЗначениеЗаполнено(ПараметрМножественныйВыбор) Тогда
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		МножественныйВыбор = Не ЗначениеЗаполнено(СтрокаДанных.Представление);
		ТипАдреса = СтрокаДанных.ТипАдреса;
		Контакт = СтрокаДанных.Контакт;
		ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
		
	Иначе
		МножественныйВыбор = ПараметрМножественныйВыбор;
	КонецЕсли;
	
	Если ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
		ГруппаПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому");
	ИначеЕсли ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
		ГруппаПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия");
	ИначеЕсли ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
		ГруппаПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РежимРаботыФормы", ?(МножественныйВыбор, 2, 1));
	ПараметрыОткрытия.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьРоли", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьЭлектронныеАдреса", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьПочты", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("ПоказыватьТипАдресов", Истина);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", ГруппаПоУмолчанию);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МножественныйВыбор", МножественныйВыбор);
	ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ТипАдреса",ТипАдреса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораИзАдреснойКниги", ЭтотОбъект, ДополнительныеПараметры);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыОткрытия, ЭтаФорма, ОписаниеОповещения);

КонецПроцедуры	

&НаКлиенте
Процедура ЗавершениеВыбораИзАдреснойКниги(Результат, Параметры) Экспорт

	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	СтрокаДанных = Параметры.СтрокаДанных;
	ТекущаяСтрока = Параметры.ТекущаяСтрока;
	ТипАдреса = Параметры.ТипАдреса;
	
	Модифицированность = Истина;
	
	// Заполнение адресатов
	Если Не МножественныйВыбор Тогда
		
		Если Результат.Количество() > 0 Тогда
			
			Представление = Строка(Результат[0].Контакт);
			Если ТипЗнч(Результат[0].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				Представление = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					Результат[0].Контакт,
					"ПредставлениеВПерепискеСРангом");
			КонецЕсли;
			Представление = Представление + " <" + Результат[0].Адрес + ">";
			Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Результат[0].Адрес, Представление);
			СтрокаДанных.Адресат = Адресат;
			СведенияОбАдресате = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
			СтрокаДанных.Контакт = СведенияОбАдресате.Контакт;
			СтрокаДанных.Представление = СведенияОбАдресате.Представление;
			СтрокаДанных.Адрес = Результат[0].Адрес;	
			СтрокаДанных.Внешний = СведенияОбАдресате.Внешний;
			СтрокаДанных.ВидМаршрутизации = СведенияОбАдресате.ВидМаршрутизации;
			
			ТекущийПолучатель = СтрокаДанных.Контакт;
			
			Если ПолучатьФотографии Тогда
				ПодсказкаФото = "";
				ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
				Элементы.Фотография.Подсказка = ПодсказкаФото;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПередИзменениемФормыНаКлиенте();
		
		ПараметрыЗаполненияТекущейСтроки = Неопределено;
		ДобавленыАдресаты = ЗанестиВПолучателиВыбранныеСтроки(
			Результат, 
			ТекущаяСтрока, 
			ПараметрыЗаполненияТекущейСтроки,
			ТипАдреса);
		
		Если ПараметрыЗаполненияТекущейСтроки <> Неопределено Тогда
			
			Если СтрокаДанных <> Неопределено Тогда
				СтрокаДанных.Адресат = ПараметрыЗаполненияТекущейСтроки.Адресат;
				СтрокаДанных.Адрес =  ПараметрыЗаполненияТекущейСтроки.Адрес;
				СтрокаДанных.Контакт = ПараметрыЗаполненияТекущейСтроки.Контакт;
				СтрокаДанных.Представление = ПараметрыЗаполненияТекущейСтроки.Представление;
				СтрокаДанных.Внешний = ПараметрыЗаполненияТекущейСтроки.Внешний;
				СтрокаДанных.ВидМаршрутизации = ПараметрыЗаполненияТекущейСтроки.ВидМаршрутизации;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ВывестиВидМаршрутизацииИВидАдресатов();
	Оповестить("ДобавленыАдресаты");
	
КонецПроцедуры

&НаСервере
// На сервере заполняет получателей после выбора и адресной книги
// Параметры
//
// ВыбранныеАдресаты - массив структур с адресатами, который вернула адресная книга
// ИдТекущаяСтрока - идентификатор текущй строки
// ВозвращаемыйПараметрыЗаполненияТекущейСтроки - данные для заполнения текущей строки (на сервере нельзя это сделать)
// ТипАдреса - тип адреса для вновь создаваемых получателей
Функция ЗанестиВПолучателиВыбранныеСтроки(ВыбранныеАдресаты, ИдТекущаяСтрока, 
	ВозвращаемыйПараметрыЗаполненияТекущейСтроки, ТипАдреса)
	
	ДобавленыАдресаты = Ложь;
	
	Если ИдТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдТекущаяСтрока);
	КонецЕсли;	
	
	АдресаПолучателей = Новый Соответствие;
	КонтактыПолучателей = Новый Соответствие;
	
	Для Каждого Строка Из Получатели Цикл
		
		Если ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			АдресаПолучателей[НРег(Строка.Адресат.Адрес)] = Строка.Контакт;
			КонтактыПолучателей[Строка.Контакт] = НРег(Строка.Адресат.Адрес);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
	СоответствиеАдресатов = 
		ВстроеннаяПочтаСервер.ПолучитьСоответствиеАдресатовПоАдресуИКонтакту(ВыбранныеАдресаты);
	
	Индекс = 0;
	ИспользованаТекущаяСтрока = Ложь;
	Для Индекс = 0 По ВыбранныеАдресаты.Количество() - 1 Цикл
		
		Строка = ВыбранныеАдресаты[Индекс];
		
		КодВозврата = "";
		
		Если ЗначениеЗаполнено(Строка.Адрес) Тогда 
			Адрес = Строка.Адрес;
		ИначеЕсли Строка.Свойство("МассивАдресатов") И ЗначениеЗаполнено(Строка.МассивАдресатов) Тогда 
			Адрес = Строка.МассивАдресатов[0].Адрес;
		КонецЕсли;
		
		НайденАдресПоКонтакту = КонтактыПолучателей.Получить(Строка.Контакт);
		НайденКонтактПоАдресу = АдресаПолучателей.Получить(НРег(Адрес));
		Если НайденАдресПоКонтакту <> Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда
			КодВозврата = "ПолныйДубль";
		ИначеЕсли НайденАдресПоКонтакту = Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда	
			КодВозврата = "ТотЖеАдресДругойКонтакт";
		КонецЕсли;	
			
		Если КодВозврата = "ПолныйДубль" Тогда // эту строку не добавляем - она уже есть
			Продолжить;
		КонецЕсли;	
		
		ДобавленыАдресаты = Истина;
		
		Если КодВозврата = "ТотЖеАдресДругойКонтакт" Тогда // сообщим об ошибке, но строку все же добавим
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адрес ""%1"" встречается в адресатах письма дважды (""%2"" и ""%3"")'; en = 'The address ""%1"" is encountered in email addressees twice (""%2"" and ""%3"")'"),
					Строка.Адрес, Строка.Контакт, НайденКонтактПоАдресу);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"Получатели");
				
		КонецЕсли;	
		
		НоваяСтрока = Неопределено;
		ЭтоТекущаяСтрока = Ложь;
		Если Не ИспользованаТекущаяСтрока И СтрокаДанных <> Неопределено Тогда
			НоваяСтрока = СтрокаДанных;
			ИспользованаТекущаяСтрока = Истина;
			ЭтоТекущаяСтрока = Истина;
		Иначе
			НоваяСтрока = Получатели.Добавить();
		КонецЕсли;
		
		Если Строка.Свойство("ТипПолучателя") И ЗначениеЗаполнено(Строка.ТипПолучателя) Тогда
			НоваяСтрока.ТипАдреса = Строка.ТипПолучателя;
		Иначе
			НоваяСтрока.ТипАдреса = ТипАдреса;
		КонецЕсли;
		
		Представление = Строка(Строка.Контакт);
		Если ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Контакт, "ПредставлениеВПерепискеСРангом");
		КонецЕсли;
			
		Если Не ПустаяСтрока(Представление)	Тогда
			Представление = Представление + " <" + Адрес + ">";
		Иначе
			Представление = Адрес;
		КонецЕсли;	
		
		АдресатСтруктура = СоответствиеАдресатов[НРег(Адрес)];
		Адресат = Неопределено;
		Внешний = Ложь;
		ВидМаршрутизации = Неопределено;
		Если АдресатСтруктура <> Неопределено Тогда
			Адресат = АдресатСтруктура.Адресат;
			Внешний = АдресатСтруктура.Внешний;
			ВидМаршрутизации = АдресатСтруктура.ВидМаршрутизации;
		ИначеЕсли Строка.Свойство("Адресат") И ЗначениеЗаполнено(Строка.Адресат) Тогда 
			Адресат = Строка.Адресат;
			ВидМаршрутизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Адресат,
				"ВидМаршрутизации");
		Иначе
			Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(Адрес, Строка.Представление);
			Внешний = Истина;
			ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
		КонецЕсли;
		
		НоваяСтрока.Адресат = Адресат;
		НоваяСтрока.Контакт = Строка.Контакт;
		Если ПустаяСтрока(Строка.Представление) Тогда
			НоваяСтрока.Представление = Строка.Адрес;
		Иначе	
			НоваяСтрока.Представление = Строка.Представление;
		КонецЕсли;	
		НоваяСтрока.Адрес = Адрес;
		НоваяСтрока.Внешний = Внешний;
		НоваяСтрока.ВидМаршрутизации = ВидМаршрутизации;
		Если ЭтоТекущаяСтрока Тогда
			ВозвращаемыйПараметрыЗаполненияТекущейСтроки = 
				Новый Структура("Адресат, Контакт, Представление, Адрес, Внешний, ВидМаршрутизации",
				НоваяСтрока.Адресат, НоваяСтрока.Контакт, НоваяСтрока.Представление, 
				НоваяСтрока.Адрес, НоваяСтрока.Внешний, НоваяСтрока.ВидМаршрутизации);
		КонецЕсли;	
		
		НоваяСтрока.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(НоваяСтрока.ТипАдреса);
	КонецЦикла;
	
	ВключитьРежимРедактированияHTML();
	Возврат ДобавленыАдресаты;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЛичногоАдресата(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		Адрес = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Получатели.ТекущиеДанные.Адресат, "Адрес");
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Адрес,
			Представление);
			
		АдресДляЗамены = Адрес;	
		
		ОткрытьФорму(
			"Справочник.ЛичныеАдресаты.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		Адрес = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Получатели.ТекущиеДанные.Адресат, "Адрес");
			
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Адрес,
			Представление);
			
		АдресДляЗамены = Адрес;
		
		ОткрытьФорму(
			"Справочник.Контрагенты.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеСозданияКонтактногоЛица", ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.Контрагенты.ФормаВыбора",
			,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеСозданияКонтактногоЛица(Контрагент, Параметры) Экспорт

	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		Адрес = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Получатели.ТекущиеДанные.Адресат, "Адрес");
			
		ПараметрыФормы = Новый Структура("Адрес, Представление, Контрагент", 
			Адрес,
			Представление,
			Контрагент);
			
		АдресДляЗамены = Адрес;
			
		ОткрытьФорму(
			"Справочник.КонтактныеЛица.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстИсходногоПисьма(Команда)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Письмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Письмо = ПересылкаПисьма;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		Письмо = Объект.ПисьмоОснование;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	ВстроеннаяПочтаСервер.ДобавитьТекстИсходногоПисьма(ТекстПисьма, Письмо, Объект.ТипТекста, Объект.ТипОтвета);
	ПослеИзмененияФормыНаКлиенте();
	ВключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайлыИсходногоПисьма(Команда)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Письмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Письмо = ПересылкаПисьма;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		Письмо = Объект.ПисьмоОснование;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	ВставитьФайлыИсходногоПисьмаСервер(Письмо, Ложь, Истина);
	ПослеИзмененияФормыНаКлиенте();
	ВключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьФайлыИсходногоПисьмаСервер(Письмо, КопироватьТолькоФайлыСИдентификаторомВложений = Ложь,
	КопироватьТолькоБезИдентификаторовВложений = Ложь)
	
	ТаблицаВложений = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо,
		Истина, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		КопироватьТолькоФайлыСИдентификаторомВложений, // ТолькоСИдентификаторами
		КопироватьТолькоБезИдентификаторовВложений);
	
	Для каждого ТаблицаВложенийСтрока Из ТаблицаВложений Цикл
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И ЗначениеЗаполнено(ТаблицаВложенийСтрока.ИДФайлаЭлектронногоПисьма) Тогда
			ВложенияСтрока = ВложенияКартинки.Добавить();
		Иначе	
			ВложенияСтрока = Вложения.Добавить();
			ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(
			ВложенияСтрока,
			ТаблицаВложенийСтрока,
			"Ссылка, ИмяФайла, Представление, ИндексКартинки, Размер, РазмерПредставление, ИДФайлаЭлектронногоПисьма, ЭтоВложенноеПисьмо");
		
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАвтораИсходногоПисьма(Команда)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Письмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Письмо = ПересылкаПисьма;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		Письмо = Объект.ПисьмоОснование;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	ДобавитьВПолучателиКопийИзПисьмаСервер(Письмо, "Автор");
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателейИсходногоПисьма(Команда)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Письмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Письмо = ПересылкаПисьма;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		Письмо = Объект.ПисьмоОснование;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	ДобавитьВПолучателиКопийИзПисьмаСервер(Письмо, "Получатели");
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателейКопийИсходногоПисьма(Команда)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Письмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Письмо = ПересылкаПисьма;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		Письмо = Объект.ПисьмоОснование;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	ДобавитьВПолучателиКопийИзПисьмаСервер(Письмо, "ПолучателиКопий");
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПолучателиКопийИзПисьмаСервер(Письмо, КогоДобавить)
	
	Если КогоДобавить = "Автор" Тогда
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
			
			ДобавитьУникальногоПолучателя(НСтр("ru = 'Копия:'; en = 'Cc:'"), Письмо.ОтправительАдресат);
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
			
			УчетнаяЗаписьИнфо = Почта.ПолучитьДанныеУчетнойЗаписи(Письмо.УчетнаяЗапись);
			Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
				УчетнаяЗаписьИнфо.АдресЭлектроннойПочты, 
				УчетнаяЗаписьИнфо.ОтображаемоеИмя);
			ДобавитьУникальногоПолучателя(НСтр("ru = 'Копия:'; en = 'Cc:'"), Адресат);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли КогоДобавить = "Получатели" Тогда
		
		Для каждого Получатель Из Письмо.ПолучателиПисьма Цикл
			ДобавитьУникальногоПолучателя(НСтр("ru = 'Копия:'; en = 'Cc:'"), Получатель.Адресат);
		КонецЦикла;
		
	ИначеЕсли КогоДобавить = "ПолучателиКопий" Тогда
		
		Для каждого Получатель Из Письмо.ПолучателиКопий Цикл
			ДобавитьУникальногоПолучателя(НСтр("ru = 'Копия:'; en = 'Cc:'"), Получатель.Адресат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУникальногоПолучателя(Поле, Адресат)
	
	Отбор = Новый Структура("Адресат", Адресат);
	Строки = Получатели.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		ДобавитьПолучателя(Поле, Адресат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекущуюДатуИВремя(Команда)
	
	ТекущаяДата = ПолучитьТекущуюДатуСеанса();
	СтрокаВставки = Формат(ТекущаяДата, "ДЛФ=ДВ");
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.text = СтрокаВставки;

	Иначе

		Элементы.ТекстПисьма.ВыделенныйТекст = Элементы.ТекстПисьма.ВыделенныйТекст + СтрокаВставки;
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.ТекстПисьма Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьма;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДатуСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура КопироватьСсылку(Команда)
	
	ЭлементПолеHTMLДокумента = ТекущийЭлемент;
	Если ЭлементПолеHTMLДокумента <> Элементы.ТекстПисьмаHTML Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.КопироватьСсылку(ЭлементПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаВыбора",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) 
		И ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныПисем") Тогда 
		ЗаполнитьПоШаблонуНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Результат)
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат,
			"ТипТекста, Кодировка, Тема, Проект, Предмет, Важность");
			
	HTML = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
	ПростойТекст = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	
	Если Не ЗначениеЗаполнено(Объект.Тема) Тогда 
		Объект.Тема = РеквизитыОснования.Тема;
	КонецЕсли;
	
	Объект.Проект = РеквизитыОснования.Проект;
	Объект.Предмет = РеквизитыОснования.Предмет;
	Объект.Важность = РеквизитыОснования.Важность;
		
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Результат, Ложь, Истина);
	ДобавитьВложениеФайлы(МассивФайлов, Истина); // ИгнорироватьЗанятость=Истина
	
	ТаблицаПолучателиПисьма = Результат.ПолучателиПисьма.Выгрузить();
	ТаблицаПолучателиКопий = Результат.ПолучателиКопий.Выгрузить();
	ТаблицаПолучателиОтвета = Результат.ПолучателиОтвета.Выгрузить();
	ТаблицаПолучателиСкрытыхКопий = Результат.ПолучателиСкрытыхКопий.Выгрузить();
	
	Если Результат.ГруппыПолучателей.Количество() > 0 Тогда 
		Счетчик = 0;
		Для Каждого Шаблон Из Результат.ГруппыПолучателей Цикл 
			Если ТипЗнч(Шаблон.Группа) = Тип("СправочникСсылка.РабочиеГруппы") Тогда 
				ТаблицаПользователей = ПользователиСерверПовтИсп.ПолучитьПользователейВГруппе(Шаблон.Группа); 
			Иначе 
				ТаблицаПользователей = ПользователиСерверПовтИсп.ПолучитьПользователейВПодразделении(Шаблон.Группа); 
			КонецЕсли;
			
			Для Каждого Строка Из ТаблицаПользователей Цикл
				Адрес = ВстроеннаяПочтаСервер.ПолучитьОсновнойАдрес(Строка.ПользователиСсылка);
				Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(Адрес, Строка(Строка.ПользователиСсылка));
				
				Если Шаблон.ТипАдреса = Перечисления.ТипыАдресатов.Копия Тогда 
					НоваяСтрока = ТаблицаПолучателиКопий.Добавить();
				ИначеЕсли Шаблон.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия Тогда 
					НоваяСтрока = ТаблицаПолучателиСкрытыхКопий.Добавить();
				ИначеЕсли Шаблон.ТипАдреса = Перечисления.ТипыАдресатов.ОбратныйАдрес Тогда 
					НоваяСтрока = ТаблицаПолучателиОтвета.Добавить();
				Иначе 
					НоваяСтрока = ТаблицаПолучателиПисьма.Добавить();
				КонецЕсли;
				
				НоваяСтрока.Адресат = Адресат;
				НоваяСтрока.ПорядковыйНомер = Шаблон.ПорядковыйНомер + Счетчик;
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивАдресатов = Новый Массив;
	Для каждого Строка Из ТаблицаПолучателиПисьма Цикл
		МассивАдресатов.Добавить(Строка.Адресат);
	КонецЦикла;
	Для каждого Строка Из ТаблицаПолучателиКопий Цикл
		МассивАдресатов.Добавить(Строка.Адресат);
	КонецЦикла;
	Для каждого Строка Из ТаблицаПолучателиОтвета Цикл
		МассивАдресатов.Добавить(Строка.Адресат);
	КонецЦикла;
	Для каждого Строка Из ТаблицаПолучателиСкрытыхКопий Цикл
		МассивАдресатов.Добавить(Строка.Адресат);
	КонецЦикла;
	
	СоответствиеДанныхАдресатов = 
		ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
	
	Для каждого Строка Из ТаблицаПолучателиПисьма Цикл
		ДобавитьУникальногоПолучателя(НСтр("ru = 'Кому:'; en = 'To:'"), Строка.Адресат);
	КонецЦикла;
	Для каждого Строка Из ТаблицаПолучателиКопий Цикл
		ДобавитьУникальногоПолучателя(НСтр("ru = 'Копия:'; en = 'Cc:'"), Строка.Адресат);
	КонецЦикла;
	Для каждого Строка Из ТаблицаПолучателиСкрытыхКопий Цикл
		ДобавитьУникальногоПолучателя(НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'"), Строка.Адресат);
	КонецЦикла;
	Для каждого Строка Из ТаблицаПолучателиОтвета Цикл
		ДобавитьУникальногоПолучателя(НСтр("ru = 'Обратный адрес:'; en = 'Return address:'"), Строка.Адресат);
	КонецЦикла;
	
	ВстроеннаяПочтаСервер.ДобавитьТекстИсходногоПисьма(
		ТекстПисьма,
		Результат,
		Объект.ТипТекста,
		Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифт(Команда)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данная команда не поддерживается в веб-клиенте.'; en = 'This command is not supported in the web client.'"));
		Возврат;
	#КонецЕсли
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
		#Если Не ВебКлиент Тогда
			ДиалогВыбораШрифта.Шрифт = ШрифтОтображения;
		#КонецЕсли
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьОтображаемыйШрифтЗавершение", ЭтотОбъект);
		
		ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифтЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШрифтОтображенияУстановлен = Ложь;
		Если ШрифтОтображения <> НастройкаШрифтОтображения Тогда
			ШрифтОтображения = НастройкаШрифтОтображения;
			ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
				ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШрифтОтображения = Результат;
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	ШрифтОтображенияУстановлен = Истина;
	
	ПолучитьHTMLИзПоляHTMLДокумента();
	ВосстановитьПоложениеHTML();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовВложения

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Если Не ВебКлиент Тогда
		ТекущееВремя = ТекущаяДата();
		// Прошло 0 секунд с момента прекращения редактирования
		// - т.е. вероятно был сделан двойной щелчок в области файлов
		Если ТекущееВремя - ВремяОкончанияРедактированияПолучателей = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Откройте файл еще раз.'; en = 'Open the file again.'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Если Элемент.ТекущиеДанные.Расположение <> "Файл" Тогда
		
		ЗаписьПисьмаПриВыбореФайла = Истина;
		
		Если Не ЗаписатьКлиент() Тогда
			ЗаписьПисьмаПриВыбореФайла = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Элемент.ТекущиеДанные.ЭтоВложенноеПисьмо Тогда
			
			ПараметрыОткрытия = Новый Структура("ФайлПисьма", Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму(
				"ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрВложенногоПисьма", 
				ПараметрыОткрытия,
				ЭтаФорма,,,,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Письмо) Тогда
			ВстроеннаяПочтаКлиент.ОткрытьПисьмо(Элемент.ТекущиеДанные.Письмо);
		Иначе
			ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, ОткрыватьФайлыИсходящегоПисьмаНаРедактирование);
		КонецЕсли;		
		
	КонецЕсли;
	
	ЗаписьПисьмаПриВыбореФайла = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ПодключитьОбработчикОжидания("ДобавитьФайлыСДиска", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПолучитьРазрешениеИЗаписатьПисьмо("ЗавершениеВложенияПередНачаломИзменения");
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВложенияПередНачаломИзменения(Результат)
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныйВложений = Элементы.Вложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныйВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныйВложений = 1 Тогда
		
			ДанныеСтроки = Элементы.Вложения.ТекущиеДанные;
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) Тогда
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ИмяФайлаНаДиске) Тогда
				КаталогTEMP = КаталогВременныхФайлов();
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогTEMP);
				ИмяВременногоФайла = КаталогTEMP + ДанныеСтроки.ИмяФайла;
				КопироватьФайл(ДанныеСтроки.ИмяФайлаНаДиске, ИмяВременногоФайла);
				ПолноеИмяПеретаскиваемогоФайла = ИмяВременногоФайла;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;	
			
		Иначе
			
			МассивФайлов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ДанныеСтроки.Расположение <> "Файл" Тогда
					Продолжить;
				КонецЕсли;
				МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			КонецЦикла;
			Если МассивФайлов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивФайлов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;	
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("Массив")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("СправочникСсылка.Файлы")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("ДокументСсылка.ВходящееПисьмо")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("ДокументСсылка.ИсходящееПисьмо")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("Файл")
		И ПеретаскиваемоеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ОтключитьОбработчикОжидания("ДобавитьФайлыСДиска");
	
	Если ПисьмоОтправлено Тогда
		Возврат;
	КонецЕсли;	
	
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Массив") Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайловНаДиске = Новый Массив;
		МассивПисем = Новый Массив;
		
		Для каждого ПеретаскиваемыйЭлемент Из ПеретаскиваемоеЗначение Цикл
			Если ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("СправочникСсылка.Файлы") Тогда
				МассивФайлов.Добавить(ПеретаскиваемыйЭлемент);
			ИначеЕсли ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("Файл") Тогда
				МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(ПеретаскиваемыйЭлемент));
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПеретаскиваемыйЭлемент) Тогда
				МассивПисем.Добавить(ПеретаскиваемыйЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлы(МассивФайлов);
		КонецЕсли;
		
		Если МассивПисем.Количество() > 0 Тогда
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеПисьма(МассивПисем);
		КонецЕсли;
		
		Если МассивФайловНаДиске.Количество() > 0 Тогда
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
			Модифицированность = Истина;
			ПослеИзмененияФормыНаКлиенте();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПеретаскиваемоеЗначение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПередИзменениемФормыНаКлиенте();
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПеретаскиваемоеЗначение);
		ДобавитьВложениеФайлы(МассивФайлов);
		
	ИначеЕсли ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Файл") Тогда
		
		МассивФайловНаДиске = Новый Массив;
		МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(ПеретаскиваемоеЗначение));
		
		ПередИзменениемФормыНаКлиенте();
		ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
		Модифицированность = Истина;
		ПослеИзмененияФормыНаКлиенте();
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОтобразитьКоличествоФайловКлиент();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧислоВыделенных = Элементы.Вложения.ВыделенныеСтроки.Количество();
	
	ТекстВопроса = "";
	Если ЧислоВыделенных < 2 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить ""%1""?'; en = 'Delete ""%1""?'"),
			ТекущиеДанные.Представление);
	Иначе		
		ПодписьФайлов =	ПолучитьПодписьФайлов(ЧислоВыделенных);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить %1 %2?'; en = 'Delete the %1 %2?'"),
			Строка(ЧислоВыделенных), ПодписьФайлов);
	КонецЕсли;				
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдаленияВложений", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУдаленияВложений(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ТекущиеДанные.Расположение = "Файл" Тогда
		
		ПередИзменениемФормыНаКлиенте();
		ВложенияПометитьНаУдалениеСервер(Элементы.Вложения.ВыделенныеСтроки, 
			ТекущиеДанные.РедактируетТекущийПользователь,
			Не ТекущиеДанные.ПометкаУдаления);
		ПослеИзмененияФормыНаКлиенте();
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Владелец", Объект.Ссылка);
		ПараметрОповещения.Вставить("Файл", ТекущиеДанные.Ссылка);
		ПараметрОповещения.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", Ложь);
		ПараметрОповещения.Вставить("ИдентификаторРодительскойФормы", УникальныйИдентификатор);
		ПараметрОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
		
		Оповестить("Запись_Файл", ПараметрОповещения, ЭтаФорма);
		
	Иначе
		
		ПередИзменениемФормыНаКлиенте();
		
		Если ТекущиеДанные.Расположение = "ВременноеХранилище"
			И ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
		
		Для Каждого ИдСтроки Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ЭлементСписка = Вложения.НайтиПоИдентификатору(ИдСтроки);
			Если ЭлементСписка <> Неопределено Тогда
				Вложения.Удалить(ЭлементСписка);
			КонецЕсли;	
		КонецЦикла;	
		
		ОтобразитьКоличествоФайловКлиент();
		
		ПодключитьОбработчикОжидания("ВключитьРежимРедактированияHTMLКлиент", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Подпись к количеству файлов по склонениям
&НаКлиенте
Функция ПолучитьПодписьФайлов(ЧислоФайлов) 
	
	Если ЧислоФайлов > 10 И ЧислоФайлов < 20 Тогда
		Подпись = НСтр("ru = 'файлов'; en = 'files'");
	Иначе
		ПоследниеДвеЦифры = ЧислоФайлов - Цел(ЧислоФайлов / 100) * 100;
		ПоследняяЦифра = ЧислоФайлов - Цел(ЧислоФайлов / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'файлов'; en = 'files'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'файлов'; en = 'files'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'файл'; en = 'file'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'файла'; en = 'file'");
			Иначе
				Подпись = НСтр("ru = 'файлов'; en = 'files'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

&НаСервере
Процедура ВложенияПометитьНаУдалениеСервер(Знач ВыделенныеСтроки, РедактируетТекущийПользователь,
	ПометкаУдаления)
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Данные = Вложения.НайтиПоИдентификатору(Идентификатор);
		Если Данные <> Неопределено Тогда
			Если Данные.Расположение = "Файл" Тогда
				ВложениеПометитьНаУдалениеСервер(Данные.Ссылка, РедактируетТекущийПользователь, 
					ПометкаУдаления);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	Модифицированность = Истина;
	
	ОбновитьФайлыПисьма();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка, РедактируетТекущийПользователь, ПометкаУдаления)
	
	// упрощенный режим работы с файлами - освободим файлы	
	Если РедактируетТекущийПользователь И ОткрыватьФайлыИсходящегоПисьмаНаРедактирование Тогда
		РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;	
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОтобразитьКоличествоФайловКлиент();
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПолучитьРазрешениеИЗаписатьПисьмо("ЗавершениеРедактироватьВложение");
		Возврат;
	КонецЕсли;
	
	ПродолжитьРедактироватьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактироватьВложение(Результат)

	Если Не Результат Тогда 
		Возврат;
	КонецЕсли;	
	
	ПродолжитьРедактироватьВложение();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактироватьВложение()

	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыПисьма()
	
	ТекПозиция = Неопределено;
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				ТекПозиция = Новый Структура("Ссылка", ТекДанные.Ссылка);
			ИначеЕсли ТекДанные.Свойство("Представление")
				И ТекДанные.Свойство("Размер") Тогда
				ТекПозиция = Новый Структура("Представление, Размер", ТекДанные.Представление, ТекДанные.Размер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТолькоБезИдентификаторов = (Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			ТолькоБезИдентификаторов); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
		
		ВложенияВременнаяТаблица = Вложения.Выгрузить();
		Вложения.Очистить();
		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			Если ВложенияСтрока.ПометкаУдаления Тогда
				ВложенияСтрока.ИндексКартинки = ВложенияСтрока.ИндексКартинки + 1;
			КонецЕсли;
			ВложенияСтрока.Расположение = "Файл";
		КонецЦикла;
		
		Для каждого ВложенияВременнаяТаблицаСтрока Из ВложенияВременнаяТаблица Цикл
			Если ВложенияВременнаяТаблицаСтрока.Расположение <> "Файл" Тогда
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложенияВременнаяТаблицаСтрока);
			КонецЕсли;
		КонецЦикла;
		
		ВложенныеПисьма = РегистрыСведений.ВложенныеПисьма.ПолучитьВложенныеПисьма(Объект.Ссылка);
		Для Каждого ФайлыПисьмаСтрока Из ВложенныеПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			ВложенияСтрока.Расположение = "Файл";
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекПозиция) Тогда
		Если ТипЗнч(ТекПозиция) = Тип("Структура") Тогда
			Строки = Вложения.НайтиСтроки(ТекПозиция);
			Если Строки.Количество() > 0 Тогда
				Элементы.Вложения.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоФайловСервер()
	
	Если Вложения.Количество() > 0 Тогда
		
		РазмерФайлов = 0;
		Для Каждого Вложение Из Вложения Цикл
			РазмерФайлов = РазмерФайлов + Вложение.Размер;
		КонецЦикла;	
		
		РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(РазмерФайлов);
		
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1), %2'; en = 'Files (%1), %2'"),
			Вложения.Количество(), РазмерПредставление);
			
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоличествоФайловКлиент()
	
	Если Вложения.Количество() > 0 Тогда
		
		РазмерФайлов = 0;
		Для Каждого Вложение Из Вложения Цикл
			РазмерФайлов = РазмерФайлов + Вложение.Размер;
		КонецЦикла;	
		
		РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(РазмерФайлов);
		
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1), %2'; en = 'Files (%1), %2'"),
			Вложения.Количество(), РазмерПредставление);
			
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоместитьФайлыСДискаВоВременноеХранилище()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Для каждого ВложенияСтрока Из Вложения Цикл
		
		Если ВложенияСтрока.Расположение <> "НаДиске" Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Истина Цикл
			
			Попытка
				
				АдресВоВременномХранилище = "";
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВложенияСтрока.ИмяФайлаНаДиске, "");
				ПомещаемыеФайлы.Добавить(Описание);
				ПомещенныеФайлы = Новый Массив;
				Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
					ВызватьИсключение
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
							ВложенияСтрока.ИмяФайлаНаДиске);
				КонецЕсли;
				
				Если ПомещенныеФайлы.Количество() = 1 Тогда
					АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
				Иначе
					ВызватьИсключение
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
							ВложенияСтрока.ИмяФайлаНаДиске);
				КонецЕсли;
				
				ВложенияСтрока.Адрес = АдресВоВременномХранилище;
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами();
				Если Не НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
					
					ВложенияСтрока.АдресИзвлеченногоТекста =
						ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
							ВложенияСтрока.ИмяФайлаНаДиске,
							УникальныйИдентификатор,
							Ложь); // Отказ
					
				КонецЕсли;
				
				Прервать;
				
			Исключение
				
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить файл ""%1"" по причине:
						|""%2""
						|Попробуйте повторить.';
						|en = 'Unable to load file ""%1"" for a reason:""%2""
						|Try to repeat.'"),
					ВложенияСтрока.ИмяФайла,
					СообщениеОбОшибке);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Вложения");
					
				Возврат Ложь;	
	
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИнформациюОФайлеНаДиске(Файл)
	
	Расширение = Файл.Расширение;
	Если Найти(Расширение, ".") = 1 Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	
	ФайлИнфо = Новый Структура;
	ФайлИнфо.Вставить("Имя", Файл.Имя);
	ФайлИнфо.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ФайлИнфо.Вставить("Расширение", Расширение);
	ФайлИнфо.Вставить("ПолноеИмя", Файл.ПолноеИмя);
	ФайлИнфо.Вставить("Путь", Файл.Путь);
	ФайлИнфо.Вставить("Размер", Файл.Размер());
	
	Возврат ФайлИнфо;
	
КонецФункции

&НаСервере
Процедура ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске)
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Имя");
	ТаблицаФайлов.Колонки.Добавить("ИмяБезРасширения");
	ТаблицаФайлов.Колонки.Добавить("Расширение");
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмя");
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка из МассивФайловНаДиске Цикл
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("Имя");  
	
	Для каждого ФайлНаДиске Из ТаблицаФайлов Цикл
		
		ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ФайлНаДиске.Имя);
		
		ВложенияСтрока = Вложения.Добавить();
		ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
		ВложенияСтрока.Ссылка = Неопределено;
		ВложенияСтрока.Представление = ФайлНаДиске.ИмяБезРасширения;
		ВложенияСтрока.ИмяФайла = ФайлНаДиске.Имя;
		ВложенияСтрока.ИмяФайлаНаДиске = ФайлНаДиске.ПолноеИмя;
		
		ВложенияСтрока.ИндексКартинки =
			ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлНаДиске.Расширение);
		
		ВложенияСтрока.Размер = ФайлНаДиске.Размер;
		ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ФайлНаДиске.Размер);
		ВложенияСтрока.ПометкаУдаления = Ложь;
		ВложенияСтрока.Редактирует = Неопределено;
		ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		ВложенияСтрока.Расположение = "НаДиске";
		
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеФайлы(МассивФайлов, ИгнорироватьЗанятость = Ложь)
	
	ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
	Для каждого ФайлИнфо Из ФайлыИнфо Цикл
		ВложенияСтрока = Вложения.Добавить();
		ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		Если ИгнорироватьЗанятость = Истина Тогда
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеПисьма(МассивПисем, ИгнорироватьЗанятость = Ложь)
	
	ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОПисьмахВложениях(МассивПисем);
	
	Для Каждого ФайлИнфо Из ФайлыИнфо Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		Если ИгнорироватьЗанятость = Истина Тогда
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыСДиска()
	
	ВладелецФайла = Объект.Ссылка;
	
	ПараметрыОписания = Новый Структура("ВладелецФайла", ВладелецФайла);
	Обработчик = Новый ОписаниеОповещения("ДобавитьФайлыСДискаПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОписания);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыСДискаПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	ВладелецФайла = ПараметрыВыполнения.ВладелецФайла;
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		
		АдресВременногоХранилищаФайла = "";
		ПолноеИмяФайла = "";
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавитьФайлыСДиска", ЭтотОбъект);
		НачатьПомещениеФайла(
			ОписаниеОповещения,
			АдресВременногоХранилищаФайла,
			ПолноеИмяФайла,
			Истина,
			УникальныйИдентификатор);
			
		Возврат;	
			
	Иначе
		
		ПолноеИмяФайла = "";
		
		РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
		Если РасширениеПодключено Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ВыборФайла.МножественныйВыбор = Истина;
			ВыборФайла.Заголовок = НСтр("ru = 'Выбор файлов'; en = 'Selecting files'");
			ВыборФайла.Фильтр = РаботаСФайламиКлиент.ПолучитьФильтрДляДиалогаВыбораФайла();
			
			РабочийКаталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(ВладелецФайла);
			ВыборФайла.Каталог = РабочийКаталог;
			
			Результат = ВыборФайла.Выбрать();
			Если Не Результат Тогда
				Возврат;
			КонецЕсли;
			Если ВыборФайла.ВыбранныеФайлы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			МассивФайловНаДиске = Новый Массив;
			Для каждого ПолноеИмяФайла Из ВыборФайла.ВыбранныеФайлы Цикл
				Файл = Новый Файл(ПолноеИмяФайла);
				МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(Файл));
			КонецЦикла;
			
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
			Модифицированность = Истина;
			ПослеИзмененияФормыНаКлиенте();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьДобавитьФайлыСДиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьФайлыСДиска(
	ВыборВыполнен, 
	АдресИлиРезультатВыбора, 
	ВыбранноеИмяФайла, 
	ДополнительныеПараметры) Экспорт

	Если ВыборВыполнен <> Истина Тогда
		Возврат;
	КонецЕсли;	
		
	Размер = ПолучитьРазмерФайлаВоВременномХранилище(АдресИлиРезультатВыбора);
	
	ИмяФайлаИнфо = РаботаСоСтроками.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	
	ВложенияСтрока = Вложения.Добавить();
	ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
	ВложенияСтрока.Ссылка = Неопределено;
	ВложенияСтрока.Представление = ИмяФайлаИнфо.Имя;
	ВложенияСтрока.ИмяФайла = ИмяФайлаИнфо.ИмяФайла;
	ВложенияСтрока.ИмяФайлаНаДиске = ВыбранноеИмяФайла;
	
	ВложенияСтрока.ИндексКартинки =
		ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
	
	ВложенияСтрока.Размер = Размер;
	ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(Размер);
	ВложенияСтрока.ПометкаУдаления = Ложь;
	ВложенияСтрока.Редактирует = Неопределено;
	ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
	ВложенияСтрока.Адрес = АдресИлиРезультатВыбора;
	ВложенияСтрока.Расположение = "ВременноеХранилище";
	
	Модифицированность = Истина;
	
	ПродолжитьДобавитьФайлыСДиска();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьФайлыСДиска()

	ОбновитьФайлыПисьма();
	ПослеИзмененияФормыНаКлиенте();
	
	ОтобразитьКоличествоФайловКлиент();
	
КонецПроцедуры

// Добавляет строку в таблицу Вложения
// Параметр:
// ВложениеИнфо (Структура, Элемент списка значений)
// - Значение (Строка) полное имя файла
// - Представление (Строка) имя файла
//
&НаСервере
Процедура ДобавитьВложение(ВложениеИнфо)
	
	ИмяФайлаИнфо = РаботаСоСтроками.РазложитьПолноеИмяФайла(ВложениеИнфо.ИмяФайла);
	ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
	
	ВложенияСтрока = Вложения.Добавить();
	ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
	ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложениеИнфо);
	ВложенияСтрока.ИндексКартинки = ИндексКартинки;
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерФайлаВоВременномХранилище(АдресВременногоХранилищаФайла)
	
	Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
		Возврат 0;
	КонецЕсли;
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Если ТипЗнч(Данные) <>  Тип("ДвоичныеДанные") Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Данные.Размер();
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВложение(ФайлСсылка, УпрощенныйРежимРаботыСФайлами)
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ФайлСсылка, УникальныйИдентификатор, УпрощенныйРежимРаботыСФайлами);
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	РегистрыСведений.ВложенныеПисьма.СтеретьЗаписиПоВладельцу(ТекущийОбъект.Ссылка);
	
	Для каждого ВложениеСтрока Из ВложенияКартинки Цикл	
		Строка = Вложения.Добавить();
		Строка.ПорядковыйНомерВложения = Вложения.Количество() - 1;
		ЗаполнитьЗначенияСвойств(Строка, ВложениеСтрока);
	КонецЦикла;	
	ВложенияКартинки.Очистить();
	
	Если СозданПоШаблону Тогда 
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПорядковыйНомерВложения = 0;
	
	Для каждого ВложениеСтрока Из Вложения Цикл
		
		НовыйФайл = Неопределено;
		
		Если ЗначениеЗаполнено(ВложениеСтрока.Письмо) Тогда  //  ссылка на письмо
			
			РегистрыСведений.ВложенныеПисьма.ЗаписатьВложение(ТекущийОбъект.Ссылка, ВложениеСтрока.Письмо);
		
		ИначеЕсли ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			
			НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
			
			Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(
				ВложениеСтрока.Ссылка.ТекущаяВерсия);
			Если ЗначениеЗаполнено(Кодировка) Тогда
				РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(НовыйФайл.ТекущаяВерсия, Кодировка);
			КонецЕсли;
			
			// заменяем ссылки на новые файлы
			Для Каждого Строка Из СписокДобавленныхФайлов Цикл
				
				ОписаниеФайла = Строка.Значение;
				Если ОписаниеФайла.Ссылка = ВложениеСтрока.Ссылка Тогда
					ОписаниеФайла.Ссылка = НовыйФайл;
				КонецЕсли;	
					
			КонецЦикла;		
			
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			
			НовыйФайл = ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				ВложениеСтрока.АдресИзвлеченногоТекста, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			
			ВложениеСтрока.Расположение = "Файл";
			
		Иначе
			
			НовыйФайл =  ВложениеСтрока.Ссылка;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйФайл) Тогда
			
			РегистрыСведений.СведенияОФайлах.УстановитьПризнак(
				НовыйФайл, "ПорядковыйНомерВложения", ПорядковыйНомерВложения);
			
			Если ВложениеСтрока.ЭтоВложенноеПисьмо Тогда
				РегистрыСведений.СведенияОФайлах.УстановитьПризнак(
					НовыйФайл, "ЭтоВложенноеПисьмо", Истина);
			КонецЕсли;	
			
			ПорядковыйНомерВложения = ПорядковыйНомерВложения + 1;
			
			Если ЗначениеЗаполнено(ВложениеСтрока.ИДФайлаЭлектронногоПисьма) Тогда
				РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(НовыйФайл, 
					ВложениеСтрока.ИДФайлаЭлектронногоПисьма);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СозданПоШаблону Тогда 
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ВызватьИсключение НСтр("ru = 'Файл еще не записан'; en = 'The file is not saved yet'");
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыПисьма();
	ПослеИзмененияФормыНаКлиенте();
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение <> "Файл" Тогда
		ПолучитьРазрешениеИЗаписатьПисьмо("ЗавершениеПросмотретьВложение");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Письмо) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Письмо);
	Иначе
		ОткрытьВложение(ТекущиеДанные.Ссылка, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПросмотретьВложение(Результат)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если Результат Тогда
		ОткрытьВложение(ТекущиеДанные.Ссылка, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 pcs) copied to the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'; en = 'Files (%1 pcs) pasted from the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'; en = 'Paste from clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьВложения()
	
	ПорядковыйНомерВложения = 0;
	Для Каждого Строка Из Вложения Цикл
		Строка.ПорядковыйНомерВложения = ПорядковыйНомерВложения;
		ПорядковыйНомерВложения = ПорядковыйНомерВложения + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСортироватьПоИмени(Команда)
	
	Вложения.Сортировать("Представление");
	
	ПеренумероватьВложения();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПереместитьВверх(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		
		ТекИндекс = Вложения.Индекс(ТекДанные);
		
		Если ТекИндекс = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		Вложения.Сдвинуть(ТекИндекс, -1);
	КонецЕсли;	
	
	ПеренумероватьВложения();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПереместитьВниз(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		
		ТекИндекс = Вложения.Индекс(ТекДанные);
		
		Если ТекИндекс = Вложения.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;	
		
		Вложения.Сдвинуть(ТекИндекс, 1);
	КонецЕсли;	
	
	ПеренумероватьВложения();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПолучатели

&НаСервере
Процедура ДобавитьПолучателя(ТипАдреса, Адресат, СоответствиеДанныхАдресатов = Неопределено)
	
	НоваяСтрока = Получатели.Добавить();
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда
		ДанныеПолучателя = СоответствиеДанныхАдресатов.Получить(Адресат);
		Если ДанныеПолучателя = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		ДанныеПолучателя = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
	КонецЕсли;
	НоваяСтрока.Представление = ДанныеПолучателя.Представление;
	НоваяСтрока.Контакт = ДанныеПолучателя.Контакт;
	НоваяСтрока.ТипАдреса = ТипАдреса;
	НоваяСтрока.Адресат = Адресат;
	НоваяСтрока.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);
	
	Если ЗначениеЗаполнено(Адресат) Тогда
		Если СоответствиеДанныхАдресатов <> Неопределено Тогда
			НоваяСтрока.Адрес = ДанныеПолучателя.Адрес;
		Иначе	
			НоваяСтрока.Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.РедактированиеЗавершено = Истина;
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда 
		НоваяСтрока.Внешний = ДанныеПолучателя.Внешний;
	Иначе	
		НоваяСтрока.Внешний = ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(Адресат);
	КонецЕсли;	
	НоваяСтрока.ВидМаршрутизации = Адресат.ВидМаршрутизации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейКомуКопия()
		
	ТаблицаЗначений = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(
		Объект.Ссылка, Ложь);
	
	КС = Новый КвалификаторыСтроки(80);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаЗначений.Колонки.Добавить("Прочтено", ОписаниеТиповС);
	
	КЧ = Новый КвалификаторыЧисла(1);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КЧ);
	ТаблицаЗначений.Колонки.Добавить("НомерСпособаАдресации", ОписаниеТиповЧ);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Строка.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(Строка.ТипАдреса);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "Получатели");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПолучателей()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьПолучателейКомуКопия();
	Иначе	
		МассивАдресатов = Новый Массив;
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		
		СоответствиеДанныхАдресатов = 
			ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
		
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			ДобавитьПолучателя(НСтр("ru = 'Кому:'; en = 'To:'"), Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			ДобавитьПолучателя(НСтр("ru = 'Копия:'; en = 'Cc:'"), Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			ДобавитьПолучателя(НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'"), Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Если Получатели.Количество() = Элементы.Получатели.ВыделенныеСтроки.Количество() Тогда
			
			Отказ = Истина;
			
			ЧислоУдаляемыхПолучателей = Получатели.Количество() - 1;
			
			Для Индекс = 0 По ЧислоУдаляемыхПолучателей - 1 Цикл
				Получатели.Удалить(ЧислоУдаляемыхПолучателей - Индекс);
			КонецЦикла;
			
			Если Получатели.Количество() = 1 Тогда
				Строка = Получатели[0];
				Строка.Адресат = "";
				Строка.Контакт = "";
				Строка.Представление = "";
				Строка.Внешний = Ложь;
				Строка.ВидМаршрутизации = Неопределено;
			КонецЕсли;
			
			ТекущийПолучатель = Неопределено;
			Если ПолучатьФотографии Тогда
				ПередИзменениемФормыНаКлиенте();
				ПодсказкаФото = "";
				ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
				Элементы.Фотография.Подсказка = ПодсказкаФото;
				ПослеИзмененияФормыНаКлиенте();
			КонецЕсли;
			
		Иначе
			Если ПолучатьФотографии Тогда
				ПередИзменениемФормыНаКлиенте();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РежимДобавленияАдресата = Истина;
	
	Если ПисьмоОтправлено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();

	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.Контакт = Неопределено;
	СтрокаДанных.Адресат = Неопределено;
	СтрокаДанных.Адрес = "";
	СтрокаДанных.Внешний = Ложь;
	СтрокаДанных.ВидМаршрутизации = Неопределено;
	
	НовыйТекст = Текст;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ЭтоВебКлиент = Ложь;
		#Если ВебКлиент Тогда
			ЭтоВебКлиент = Истина;
		#КонецЕсли
		
		РезультатВыбора = Неопределено;
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, ЭтоВебКлиент);
		ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			
			РезультатВыбора = ДанныеВыбора[0];
			
		ИначеЕсли ДанныеВыбора.Количество() > 1 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("НовыйТекст", НовыйТекст);
			ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЗавершениеВыбораПолучателяИзСписка", 
				ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьВыборИзСписка(
				ОписаниеОповещения,
				ДанныеВыбора, 
				Элементы.Получатели);
				
			Возврат;	
			
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			
			СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
			СтрокаДанных.Адресат = РезультатВыбора.Значение.Адресат;
			НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
			СтрокаДанных.Представление = НовыйТекст;
			СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
			СтрокаДанных.Внешний = РезультатВыбора.Значение.Внешний;
			СтрокаДанных.ВидМаршрутизации = РезультатВыбора.Значение.ВидМаршрутизации;
			
			ТекущийПолучатель = СтрокаДанных.Контакт;
			ПодсказкаФото = "";
			ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
			Элементы.Фотография.Подсказка = ПодсказкаФото;
			
			ВывестиВидМаршрутизацииИВидАдресатов();
			ПослеИзмененияФормыНаКлиенте();
			ВключитьРежимРедактированияHTMLКлиент();
			
			Модифицированность = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст, СтрокаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПолучателяИзСписка(РезультатВыбора, Параметры) Экспорт

	Если РезультатВыбора <> Неопределено Тогда
		
		СтрокаДанных = Параметры.СтрокаДанных;
		СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
		СтрокаДанных.Адресат = РезультатВыбора.Значение.Адресат;
		НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
		СтрокаДанных.Представление = НовыйТекст;
		СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
		СтрокаДанных.Внешний = РезультатВыбора.Значение.Внешний;
		СтрокаДанных.ВидМаршрутизации = РезультатВыбора.Значение.ВидМаршрутизации;
		
		ТекущийПолучатель = СтрокаДанных.Контакт;
		ПодсказкаФото = "";
		ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
		Элементы.Фотография.Подсказка = ПодсказкаФото;
		
		ВывестиВидМаршрутизацииИВидАдресатов();
		ПослеИзмененияФормыНаКлиенте();
		ВключитьРежимРедактированияHTMLКлиент();
		
		Модифицированность = Истина;
		
		Возврат;
			
	КонецЕсли;
	
	ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(
		Параметры.НовыйТекст, 
		Параметры.СтрокаДанных);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст, СтрокаДанных)	
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(НовыйТекст);
	
	Если ЗначениеЗаполнено(АдресИнфо.Адрес) Тогда
		ИмяАдресата = ?(ЗначениеЗаполнено(АдресИнфо.ОтображаемоеИмя), АдресИнфо.ОтображаемоеИмя, АдресИнфо.Адрес);
		СтрокаДанных.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресИнфо.Адрес, ИмяАдресата);
		ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат);
		СтрокаДанных.Представление = ПредставлениеАдресата.Представление;
		СтрокаДанных.Контакт = ПредставлениеАдресата.Контакт;
		СтрокаДанных.Адрес = АдресИнфо.Адрес;
		СтрокаДанных.Внешний = ПредставлениеАдресата.Внешний;
		СтрокаДанных.ВидМаршрутизации = ПредставлениеАдресата.ВидМаршрутизации;
	Иначе
		СтрокаДанных.Представление = НовыйТекст;
		СтрокаДанных.Внешний = Истина;
		СтрокаДанных.ВидМаршрутизации = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя");
	КонецЕсли;
	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	ТекущийПолучатель = СтрокаДанных.Контакт;
	ПодсказкаФото = "";
	ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
	Элементы.Фотография.Подсказка = ПодсказкаФото;
	
	ВывестиВидМаршрутизацииИВидАдресатов();
	ПослеИзмененияФормыНаКлиенте();
	ВключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Адресат) 
			И ТипЗнч(ВыбранноеЗначение.Адресат) <> Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
			
			// выбрана группа
			
			АдресатыГруппы = Новый Массив;
			ИспользованныеАдреса = Новый Соответствие;
			ВстроеннаяПочтаСервер.РазвернутьГруппуВАдресаты(ВыбранноеЗначение.Адресат, АдресатыГруппы, ИспользованныеАдреса);
			
			ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
			СтрокаДанных = Получатели.НайтиПоИдентификатору(ТекущаяСтрока);
			ТипАдреса = СтрокаДанных.ТипАдреса;

			ПередИзменениемФормыНаКлиенте();
			
			ПараметрыЗаполненияТекущейСтроки = Неопределено;
			ДобавленыАдресаты = ЗанестиВПолучателиВыбранныеСтроки(
				АдресатыГруппы, 
				ТекущаяСтрока, 
				ПараметрыЗаполненияТекущейСтроки,
				ТипАдреса);
			
			Если ПараметрыЗаполненияТекущейСтроки <> Неопределено Тогда
				
				Если СтрокаДанных <> Неопределено Тогда
					СтрокаДанных.Адресат = ПараметрыЗаполненияТекущейСтроки.Адресат;
					СтрокаДанных.Адрес =  ПараметрыЗаполненияТекущейСтроки.Адрес;
					СтрокаДанных.Контакт = ПараметрыЗаполненияТекущейСтроки.Контакт;
					СтрокаДанных.Представление = ПараметрыЗаполненияТекущейСтроки.Представление;
					СтрокаДанных.Внешний = ПараметрыЗаполненияТекущейСтроки.Внешний;
					СтрокаДанных.ВидМаршрутизации = ПараметрыЗаполненияТекущейСтроки.ВидМаршрутизации;
				КонецЕсли;
				
			КонецЕсли;	

			ВыбранноеЗначение = СтрокаДанных.Представление;
			Модифицированность = Истина;
			СтандартнаяОбработка = Ложь;
			
			ОтменаРедактирования = Ложь;
			Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
			
			#Если Не ВебКлиент Тогда
				
				ТекущийКонтакт = СтрокаДанных.Контакт;
				Если ЗначениеЗаполнено(ТекущийКонтакт) Тогда
					Если ПолучатьФотографии Тогда
						ПодсказкаФото = "";
						ПоказатьФотоПользователя(ТекущийКонтакт, УникальныйИдентификатор, Фотография, ПодсказкаФото);	
						Элементы.Фотография.Подсказка = ПодсказкаФото;
					КонецЕсли;	
				Иначе
					Фотография = "";
					ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница
						= ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
				КонецЕсли;
				
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;	
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		СтрокаДанных.Адресат = ВыбранноеЗначение.Адресат;
		СтрокаДанных.Контакт = ВыбранноеЗначение.Контакт;
		Элементы.ПолучателиПредставление.КнопкаОткрытия = ЗначениеЗаполнено(СтрокаДанных.Контакт);
		СтрокаДанных.Представление = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Свойство("Адрес") Тогда
			СтрокаДанных.Адрес = ВыбранноеЗначение.Адрес;
		Иначе
			СтрокаДанных.Адрес = 
				ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаДанных.Адресат, "Адрес");
		КонецЕсли;
		СтрокаДанных.Внешний = ВыбранноеЗначение.Внешний;
		СтрокаДанных.ВидМаршрутизации = ВыбранноеЗначение.ВидМаршрутизации;
		СтрокаДанных.РедактированиеЗавершено = Истина;
		Модифицированность = Истина;
		
		ПередИзменениемФормыНаКлиенте();		
		
	#Если Не ВебКлиент Тогда
	
		ТекущийПолучатель = СтрокаДанных.Контакт;
		Если ЗначениеЗаполнено(ТекущийПолучатель) Тогда
			Если ПолучатьФотографии Тогда
				ПодсказкаФото = "";
				ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);	
				Элементы.Фотография.Подсказка = ПодсказкаФото;
			КонецЕсли;	
		Иначе
			Фотография = "";
			ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница
				= ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
		КонецЕсли;
		
	#КонецЕсли
	
		ВывестиВидМаршрутизацииИВидАдресатов();
		ПослеИзмененияФормыНаКлиенте();
		ВключитьРежимРедактированияHTMLКлиент();
		
		ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
		
		ОтменаРедактирования = Ложь;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
		
	КонецЕсли;
	
	ВыбранноеЗначение = СтрокаДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ТекущаяУниверсальнаяДатаВМиллисекундах() <= ВремяВыбораТипаАдресата + 100  Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПустаяСтрока(Текст) Тогда
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Для Каждого Строка Из ПолучателиПредставлениеСписокВыбора Цикл
			ДанныеВыбора.Добавить(
				Строка.Значение, Строка.Представление, Строка.Пометка, Строка.Картинка);
		КонецЦикла;	
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ИмяЭлемента = Элемент.Имя;
	ТекстДляПолученияДанныхВыбора = "";
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ";");
	
	ПодстрокиДанныхОбъекта =
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных.Представление, ";");
	
	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1)
			Или ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ИскатьПоГруппам = Истина;
	
	ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(
		Текст, ТекущийПользователь, ЭтоВебКлиент, ИскатьПоГруппам);
	ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	
	
	Если ДанныеВыбора.Количество() <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
		ПоказатьЗначение(,СтрокаДанных.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИзАдреснойКниги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеПриИзменении(Элемент)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);

	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено 
		И Элементы.Получатели.ТекущиеДанные.Представление = "" Тогда
		
		Элементы.Получатели.ТекущиеДанные.Контакт = Неопределено;
		Элементы.Получатели.ТекущиеДанные.Адресат = Неопределено;
		Элементы.Получатели.ТекущиеДанные.Адрес = "";
		Элементы.Получатели.ТекущиеДанные.Внешний = Ложь;
		Элементы.Получатели.ТекущиеДанные.ВидМаршрутизации = Неопределено;
		
		Фотография = "";
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница
			= ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
		
	КонецЕсли;	
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
	ВывестиВидМаршрутизацииИВидАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	АвтоматическиНачатоРедактированиеАдреса = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
		
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.РедактированиеЗавершено = Ложь;
	КоличествоАдресатовДоДобавления = Получатели.Количество();
	
	ПредыдущаяСтрокаТипАдреса = НСтр("ru='Кому:'; en = 'To:'");
	
	Если Получатели.Количество() >= 2 Тогда
		
		ПредыдущаяСтрокаТипАдреса = Получатели[Получатели.Количество() - 2].ТипАдреса;
		
		Если Получатели.Количество() = (ПолучателиКоличествоПриОткрытии + 1) 
			И ДобавлятьАвтораИсходногоПисьмаПриПересылке = Истина Тогда
			ПредыдущаяСтрокаТипАдреса = НСтр("ru='Кому:'; en = 'To:'");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ТипАдреса) Тогда
		Если КоличествоАдресатовДоДобавления = 1 
			Или (ПересылкаСКопией И Получатели.Количество() = (ПолучателиКоличествоПриОткрытии + 1)) Тогда
			СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'; en = 'To:'");
		Иначе
			СтрокаДанных.ТипАдреса = ПредыдущаяСтрокаТипАдреса;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанных.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(СтрокаДанных.ТипАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.Получатели.ТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		СтрокаДанных.РедактированиеЗавершено = Истина;
	КонецЕсли;
	
	ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
	ВключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		СохранениеДоступно = Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт)
			И ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Представление);
		УстановитьДоступностьКомандСохраненияКонтакта(СохранениеДоступно);
		
		Элементы.ПолучателиПредставление.КнопкаОткрытия = ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт);
		
	Иначе
		УстановитьДоступностьКомандСохраненияКонтакта(Ложь);
	КонецЕсли;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Контакт = Элементы.Получатели.ТекущиеДанные.Контакт;
		
		Если ТекущийПолучатель <> Контакт Тогда
			
			ТекущийПолучатель = Контакт;
			
			Если Не ЗначениеЗаполнено(Контакт) Тогда
				
				Фотография = "";
				ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница
					= ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
					
			Иначе
					
				ПодключитьОбработчикОжидания("ОбновитьФотоПользователя", 0.2, Истина);
					
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе
		
		Фотография = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСохраненияКонтакта(Доступность)
	
	Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьЛичногоАдресата.Доступность = Доступность;
	Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьКонтрагента.Доступность = Доступность;
	Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьКонтактноеЛицо.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора()
	
	// заполнение списка выбора адресатов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
		|	ИспользованиеАдресатовПользователями.Адресат,
		|	ИспользованиеАдресатовПользователями.Адресат.ВидМаршрутизации КАК ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияОбАдресатах.Контакт, НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ЕСТЬNULL(СведенияОбАдресатах.Представление, АдресатыПочтовыхСообщений.Наименование) КАК Представление,
		|	АдресатыПочтовыхСообщений.Адрес,
		|	ЛичныеАдресаты.Пользователь
		|ИЗ
		|	РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатовПользователями
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО ИспользованиеАдресатовПользователями.Адресат = АдресатыПочтовыхСообщений.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|			ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
		|				И (СведенияОбАдресатах.Активна)
		|		ПО ИспользованиеАдресатовПользователями.Адресат = СведенияОбАдресатах.АдресатСообщения
		|ГДЕ
		|	ИспользованиеАдресатовПользователями.Пользователь = &Пользователь
		|	И (ЛичныеАдресаты.Пользователь ЕСТЬ NULL 
		|			ИЛИ ЛичныеАдресаты.Пользователь = &Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеАдресатовПользователями.ДатаПоследнегоИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	ПолучателиПредставлениеСписокВыбора.Очистить();
	
	ИспользованныеАдреса = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИспользованныеАдреса.Получить(Выборка.Адрес) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Значение = Новый Структура;
		Значение.Вставить("Адресат", Выборка.Адресат);
		Значение.Вставить("Адрес", Выборка.Адрес);		
		Значение.Вставить("Контакт", Выборка.Контакт);
		Значение.Вставить("Представление",  Выборка.Представление);
		Значение.Вставить("Внешний", ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(Выборка.Адресат));
		Значение.Вставить("ВидМаршрутизации", Выборка.ВидМаршрутизации);
		
		Если Значение.Внешний Тогда 
			КартинкаВыбора = БиблиотекаКартинок.ВнешнийАдресат16;
		Иначе
			КартинкаВыбора = БиблиотекаКартинок.ВнутреннийАдресат16;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			Если ПриложениеЯвляетсяВебКлиентом Тогда 
				ПолучателиПредставлениеСписокВыбора.Добавить(Значение, Выборка.Представление);
			Иначе
				ПолучателиПредставлениеСписокВыбора.Добавить(Значение, Выборка.Представление,,КартинкаВыбора);
			КонецЕсли;	
		КонецЕсли;
		
		ИспользованныеАдреса.Вставить(Выборка.Адрес, 1);
		
	КонецЦикла;
	
	Если Не ПисьмоОтправлено Тогда
		Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка =
			(ПолучателиПредставлениеСписокВыбора.Количество() > 0);
	Иначе
		Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюПолучателиПисьмаСтрокой(Команда)
	
	ОчиститьИсториюВводаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоИмени(Команда)
	
	Получатели.Сортировать("Представление");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоТипуИИмени(Команда)

	Получатели.Сортировать("НомерСпособаАдресации,Представление");
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУчетВремени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия);
		
	ВключитьРежимРедактированияHTML();	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)  
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия);
		
	ВключитьРежимРедактированияHTML();	
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия);
		
	ВключитьРежимРедактированияHTML();		
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		ПередИзменениемФормыНаКлиенте();
		ПереключитьХронометражСервер(ПараметрыОповещения);
		ПослеИзмененияФормыНаКлиенте();
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Составление письма ""%1""'; en = 'Drafting the email ""%1""'"),
			Объект.Тема);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеДобавленияТрудозатрат", 
			ЭтотОбъект, 
			ПараметрыОповещения);
			
		ОткрытьФорму(
			"РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавленияТрудозатрат(ПараметрыОтчета, Параметры) Экспорт
	
	ПараметрыОповещения = Параметры;
	
	Если ПараметрыОтчета <> Неопределено Тогда
		ПередИзменениемФормыНаКлиенте();
		ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения);
		ПослеИзмененияФормыНаКлиенте();
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ПередИзменениемФормыНаКлиенте();
		ОтключитьХронометражСервер();
		ПослеИзмененияФормыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия,
		Ложь,
		ЭтаФорма); // Выполнена
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовСвязи

&НаСервере
Процедура ОтобразитьСвязиПисьма()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
		
		ПересылкаПисьма = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПересылкаПисьма);
			
		ПеренаправлениеПисьма = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПеренаправлениеПисьма);
			
		ПолученОтвет.ЗагрузитьЗначения(
			СвязиДокументов.ПолучитьСвязанныеДокументы(
				Объект.Ссылка, Справочники.ТипыСвязей.ПолученОтветныйДокумент));
		
		ДобавитьЭлементыМассиваВСписокЗначений(
			ПолученОтвет,
			СвязиДокументов.ПолучитьСвязанныеДокументы(
				Объект.Ссылка, Справочники.ТипыСвязей.ПолученоОтветноеПисьмо));
		
		ПересланоПисьмом.ЗагрузитьЗначения(
			СвязиДокументов.ПолучитьСвязанныеДокументы(
				Объект.Ссылка, Справочники.ТипыСвязей.ПересланоПисьмом));
				
		ПеренаправленоПисьмом.ЗагрузитьЗначения(
			СвязиДокументов.ПолучитьСвязанныеДокументы(
				Объект.Ссылка, Справочники.ТипыСвязей.ПеренаправленоПисьмом));
				
	КонецЕсли;
	
	// Обработка связи ПисьмоОтправленоВОтветНа
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		
		ОтправленоВОтветНаСтрока = "";
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОтправленоВОтветНа) Тогда
			
			ОтправленоВОтветНаСтрока =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОтправленоВОтветНа, "Тема");
				
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОтправленоВОтветНа) Тогда
			
			ОтправленоВОтветНаСтрока =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОтправленоВОтветНа, "Тема");
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ПисьмоОтправленоВОтветНа) Тогда
			
			ОтправленоВОтветНаСтрока = Строка(ПисьмоОтправленоВОтветНа);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ПисьмоОснование) 
		И Объект.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
		
		ОтправленоВОтветНаСтрока = "";
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Объект.ПисьмоОснование) Тогда
			
			ОтправленоВОтветНаСтрока =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПисьмоОснование, "Тема");
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Объект.ПисьмоОснование) Тогда
			
			ОтправленоВОтветНаСтрока = Строка(Объект.ПисьмоОснование);
			
		КонецЕсли;
		
	Иначе
		
		ОтправленоВОтветНаСтрока = НСтр("ru = 'Нет'; en = 'None'");
		
	КонецЕсли;
	
	// Обработка связи ПолученОтвет
	КоличествоОтветов = ПолученОтвет.Количество();
	Если КоличествоОтветов = 0 Тогда
		ПолученОтветСтрока = НСтр("ru = 'Нет'; en = 'None'");
	ИначеЕсли КоличествоОтветов = 1 Тогда
		Ответ = ПолученОтвет[0].Значение;
		ПолученОтветСтрока = "";
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Ответ) Тогда
			ПолученОтветСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Ответ,
				"Тема");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Ответ) Тогда
			ПолученОтветСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Ответ,
				"Заголовок");
		КонецЕсли;
	Иначе
		ПолученОтветСтрока = Формат(КоличествоОтветов, "ЧН=0") + " " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(КоличествоОтветов);
	КонецЕсли;
	
	// Обработка связи ПересланоПисьмом
	ПересланоПисьмомСтрока = НСтр("ru = 'Нет'; en = 'None'");
	Если ПересланоПисьмом.Количество() > 0 Тогда
		ПереславшееПисьмо = ПересланоПисьмом[0].Значение;
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПереславшееПисьмо, "Тема");
		ПересланоПисьмомСтрока = Реквизиты.Тема;
	КонецЕсли;
	
	// Обработка связи ПересылкаПисьма
	ПересылкаПисьмаСтрока = НСтр("ru = 'Нет'; en = 'None'");
	Если ПересылкаПисьма <> Неопределено Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПересылкаПисьма, "Тема");
		ПересылкаПисьмаСтрока = Реквизиты.Тема;
	КонецЕсли;
	
	ЧислоПисемВПереписке = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ПисьмоОтправленоВОтветНа);
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ПересылкаПисьма);
	ИначеЕсли ЗначениеЗаполнено(ПеренаправлениеПисьма) Тогда	
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ПеренаправлениеПисьма);
	КонецЕсли;
	
	Если ЧислоПисемВПереписке > 1 Тогда
		Элементы.ПисемВПереписке.Гиперссылка = Истина;
		ПисемВПереписке = Формат(ЧислоПисемВПереписке, "ЧН=0") + " " + ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(ЧислоПисемВПереписке);
	Иначе
		ПисемВПереписке = НСтр("ru = 'Писем нет'; en = 'No emails'");
		Элементы.ПисемВПереписке.Гиперссылка = Ложь;
		Элементы.ПисемВПереписке.Доступность = Ложь;
	КонецЕсли;
	
	АктивныеЗадачиПоПисьму.ЗагрузитьЗначения(ПолучитьАктивныеЗадачиПоПисьму(Объект.Ссылка));
	КоличествоАктивныхЗадач = АктивныеЗадачиПоПисьму.Количество();
	Если КоличествоАктивныхЗадач > 1 Тогда
		Задачи = Формат(КоличествоАктивныхЗадач, "ЧН=0") +
			" " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуЗадачСтрокой(КоличествоАктивныхЗадач);
		
	ИначеЕсли КоличествоАктивныхЗадач = 1 Тогда
		Задачи = АктивныеЗадачиПоПисьму[0];
		
	Иначе
		Задачи = НСтр("ru = 'Нет задач'; en = 'No tasks'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Элементы.ДатаОтправки.Доступность = Истина;
	Иначе
		Элементы.ДатаОтправки.Доступность = Ложь;
	КонецЕсли;
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктивныеЗадачиПоПисьму(Письмо)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Отменена
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
	Запрос.УстановитьПараметр("Предмет", Письмо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ДобавитьЭлементыМассиваВСписокЗначений(СписокЗначений, Массив)
	
	Для каждого Элемент Из Массив Цикл
		СписокЗначений.Добавить(Элемент);
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФлаги

&НаКлиенте
Процедура УстановитьФлаг(ЗначениеФлага, ЗначениеКартинки)
	
	Флаг = ЗначениеФлага;
	Элементы.ПодменюФлаги.Картинка = ЗначениеКартинки;
	
	ПередИзменениемФормыНаКлиенте();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СохранитьФлаг();
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Объект.Ссылка);
		Оповестить("ИзменилсяФлаг", МассивОбъектов, ЭтаФорма);
	Иначе
		ВключитьРежимРедактированияHTMLКлиент();
	КонецЕсли;
	
	ПослеИзмененияФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		БиблиотекаКартинок.КрасныйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		БиблиотекаКартинок.СинийФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		БиблиотекаКартинок.ЖелтыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		БиблиотекаКартинок.ЗеленыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		БиблиотекаКартинок.ОранжевыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		БиблиотекаКартинок.ЛиловыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаг(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка"),
		БиблиотекаКартинок.ПустойФлаг);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФлаг()
	
	РаботаСФлагамиОбъектовСервер.СохранитьФлагОбъектаИзФормы(ЭтаФорма);
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовАвтосохранение

&НаКлиенте
Процедура Автосохранение()
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("Автосохранение", Истина);
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ВыполнитьЗаписьHTML();
	КонецЕсли;
	ВыполняетсяЗапись = Истина;
	
	Если Не ЗаписатьКлиент(ПараметрыЗаписи) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'При автоматическом сохранении письма произошла ошибка. 
			|Обратитесь к администратору.';
			|en = 'Error occurred when automatically saving email. 
			|Please contact your administrator.'"));
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФорматированиеТекста

&НаКлиенте
Процедура ФорматироватьТекстИсходящегоПисьма(Команда)
	
	ФорматироватьТекстПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ФорматироватьТекстПисьма()
	
	ШиринаСтроки = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ШиринаСтрокиПриФорматировании");
	Если ШиринаСтроки = 0 Тогда
		Возврат;	
	КонецЕсли;
	СимволПереписки = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСимволЦитированияВПереписке();
	
	ТекстПисьма = РаботаСоСтроками.ПолучитьСтрокуВФормате(ТекстПисьма, ШиринаСтроки, СимволПереписки);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФото

&НаСервере
Процедура ПоказатьФотоПользователя(Контакт, УникальныйИдентификатор, Фотография, ПодсказкаФото)
	
	Если Не ПолучатьФотографии Тогда
		Возврат;
	КонецЕсли;
	
	// фото пользователя
	Если ЭтоАдресВременногоХранилища(Фотография) Тогда
		УдалитьИзВременногоХранилища(Фотография);
	КонецЕсли;
	
	Фотография = "";
	Если ЗначениеЗаполнено(Контакт) 
		И ТипЗнч(Контакт) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ЕстьКартинка = Ложь;
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Контакт, УникальныйИдентификатор, ЕстьКартинка);
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			ПодсказкаФото = РаботаСФотографиями.СформироватьПодсказку(Контакт);
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фотография) Тогда
		Фотография = "";
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница
			= ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
	Иначе
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФотография;
	КонецЕсли;
	
	// фото пользователя
	
	ВключитьРежимРедактированияHTML();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФотоПользователя()
	
	Если Не ПолучатьФотографии Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьHTMLИзПоляHTMLДокумента();
	ПодсказкаФото = "";
	ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография, ПодсказкаФото);
	Элементы.Фотография.Подсказка = ПодсказкаФото;
	
КонецПроцедуры

&НаКлиенте
Процедура ФотографияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Контакт = Элементы.Получатели.ТекущиеДанные.Контакт;
		Если ЗначениеЗаполнено(Контакт) Тогда
			ПоказатьЗначение(, Контакт);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПереписка

&НаСервере
Функция ЗаменитьПредметПереписки(ТекущийОбъект, ЗаменяемыйПредмет, СообщенияОбОшибках)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ПисьмоИзПереписки = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ПисьмоИзПереписки = ПересылкаПисьма;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ПисьмаПереписки = ВстроеннаяПочтаСервер.ПолучитьПисьмаПереписки(ПисьмоИзПереписки);
	ПисьмаДляЗаменыПредмета = Новый Массив;
	
	Для каждого Письмо Из ПисьмаПереписки Цикл
		
		Если Письмо <> ТекущийОбъект.Ссылка
			И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
			
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Предмет");
			
			Если Предмет = ЗаменяемыйПредмет Или Не ЗначениеЗаполнено(Предмет) Тогда
				ПисьмаДляЗаменыПредмета.Добавить(Письмо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПисьмаДляЗаменыПредмета.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВстроеннаяПочтаСервер.ЗаменитьПредметВПисьмах(
		ПисьмаДляЗаменыПредмета,
		ТекущийОбъект.Предмет,
		СообщенияОбОшибках);
	
КонецФункции

&НаСервере
Функция ЗаменитьПроектПереписки(ТекущийОбъект, ЗаменяемыйПроект, СообщенияОбОшибках)
	
	ПисьмаПереписки = ВстроеннаяПочтаСервер.ПолучитьПисьмаПереписки(ТекущийОбъект.Ссылка);
	ПисьмаДляЗаменыПроекта = Новый Массив;
	
	Для каждого Письмо Из ПисьмаПереписки Цикл
		
		Если Письмо <> ТекущийОбъект.Ссылка Тогда
			
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			
			Если Проект = ЗаменяемыйПроект Или Не ЗначениеЗаполнено(Проект) Тогда
				ПисьмаДляЗаменыПроекта.Добавить(Письмо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПисьмаДляЗаменыПроекта.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВстроеннаяПочтаСервер.ЗаменитьПроектВПисьмах(
		ПисьмаДляЗаменыПроекта,
		ТекущийОбъект.Проект,
		СообщенияОбОшибках);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодменюВставить

&НаКлиенте
Процедура ВставитьШаблонТекста(Команда)
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения", 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.Почта"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставкиШаблонаТекста", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныТекстов.Форма.ФормаВыбора",ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗавершениеВставкиШаблонаТекста(ШаблонСсылка, Параметры) Экспорт

	Если ШаблонСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыШаблона = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
		ШаблонСсылка, "Шаблон, ТипТекста");
		
	ШаблонТекста = ПараметрыШаблона.Шаблон;
		
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если ПараметрыШаблона.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
			
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(ШаблонТекста);
			ШаблонТекста = СтрЗаменить(ШаблонТекста, Символы.ПС, "<br>");
			
		Иначе	
			
			ТекстHTMLИнфо = РаботаС_HTML.РазложитьТекстHTML(ШаблонТекста);
			ШаблонТекста = ТекстHTMLИнфо.Тело;
			
			ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(ШаблонТекста, ШаблонСсылка, 
				УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
				
		КонецЕсли;	
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
		Если ПараметрыШаблона.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			
			ИспользованныйШаблон = ШаблонСсылка;
				
			КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
			КопироватьТолькоБезИдентификаторовВложений = Ложь;
			ВставитьФайлыИсходногоПисьмаСервер(ИспользованныйШаблон, КопироватьТолькоФайлыСИдентификаторомВложений,
				КопироватьТолькоБезИдентификаторовВложений);
			
			//СкопироватьКартинкиПисьмаОснования(ИспользованныйШаблон);
			
		КонецЕсли;	
		
	Иначе
		
		Если ПараметрыШаблона.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			
			ШаблонТекста = РаботаС_HTML.ПолучитьТекстИзHTML(ШаблонТекста);
			
		КонецЕсли;	
			
		
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.ТекстПисьма Тогда
			Элементы.ТекстПисьма.ВыделенныйТекст = Элементы.ТекстПисьма.ВыделенныйТекст + ШаблонТекста;
			ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьма;
		Иначе
			Элементы.ТекстПисьма.ВыделенныйТекст = ШаблонТекста;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРазрешениеИЗаписатьПисьмо(ИмяОтветнойПроцедуры)
	
	// Сохранение текущей позиции в списке файлов
	Позиция = Неопределено;
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		Позиция = Новый Структура;
		Позиция.Вставить("ИмяФайла", Элементы.Вложения.ТекущиеДанные.ИмяФайла);
		Позиция.Вставить("Размер", Элементы.Вложения.ТекущиеДанные.Размер);
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяОтветнойПроцедуры", ИмяОтветнойПроцедуры);
	ДополнительныеПараметры.Вставить("Позиция", Позиция);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеПолучитьРазрешениеИЗаписатьПисьмо", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	Текст = НСтр("ru = 'Для просмотра или редактирования файла необходимо записать письмо.
		|Записать?';
		|en = 'To view or edit a file, you need to save a email.
		|Save?'");		
		
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗавершениеПолучитьРазрешениеИЗаписатьПисьмо(Ответ, Параметры) Экспорт
	
	ИмяОтветнойПроцедуры = Параметры.ИмяОтветнойПроцедуры;
	Позиция = Параметры.Позиция;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Выполнить ИмяОтветнойПроцедуры + "(Ложь)";
		Возврат;
	КонецЕсли;
	
	Результат = Записать();
	
	Если Результат Тогда
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		// Восстановление текущей позиции в списке файлов
		Если ТипЗнч(Позиция) = Тип("Структура") Тогда
			Для каждого ВложенияСтрока Из Вложения Цикл
				Если ВложенияСтрока.ИмяФайла = Позиция.ИмяФайла
					И ВложенияСтрока.Размер = Позиция.Размер Тогда
					Элементы.Вложения.ТекущаяСтрока = ВложенияСтрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Выполнить ИмяОтветнойПроцедуры + "(Результат)";
	
КонецПроцедуры

&НаКлиенте
Процедура АвтопереносСтрок(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ТекстВопроса = НСтр("ru = 'Преобразование письма в текст удалит форматирование, вставленные изображения, таблицы, гиперссылки и другие элементы оформления.
			|Продолжить?';
			|en = 'Converting email to text will remove text formatting, inserted pictures, tables, hyperlinks, and other design elements.
			|Do you want to continue?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеАвтопереносаСтрок", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0);
		
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьАвтопереносСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеАвтопереносаСтрок(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// преобразуем HTML в текст
	ПолучитьHTMLИзПоляHTMLДокумента();
	ВыполнитьПереключениеВТекст();
	Модифицированность = Истина;
	
	ПродолжитьАвтопереносСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАвтопереносСтрок()
	
	ОбновитьКомандыФорматаТекста();
	
	Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
	
	Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
	Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
	
	Элементы.ИзменитьШрифтОтображения.Доступность =
		(Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовHTMLПисьма

&НаКлиенте
Процедура ВыполнитьHTMLКоманду(Команда)
	
	Если ПисьмоОтправлено Тогда	
		Возврат;
	КонецЕсли;	
		
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand(Команда);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Полужирный(Команда)
	
	ВыполнитьHTMLКоманду("Bold");
	
КонецПроцедуры

&НаКлиенте
Процедура Наклонный(Команда)
	
	ВыполнитьHTMLКоманду("italic");
	
КонецПроцедуры

&НаКлиенте
Процедура Подчеркнутый(Команда)
	
	ВыполнитьHTMLКоманду("underline");
	
КонецПроцедуры

&НаКлиенте
Процедура МаркированныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertUnorderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура НумерованныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertOrderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВлево(Команда)
	
	ВыполнитьHTMLКоманду("outdent");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВправо(Команда)
	ВыполнитьHTMLКоманду("indent");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВлево(Команда)
	ВыполнитьHTMLКоманду("justifyLeft");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоЦентру(Команда)
	ВыполнитьHTMLКоманду("justifyCenter");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВправо(Команда)
	ВыполнитьHTMLКоманду("justifyRight");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦветСтиля(Цвет)
	
	ИмяСтиля = Сред(Строка(Цвет), 8); // убираем "стиль: "
	Элемент = Метаданные.ЭлементыСтиля.Найти(ИмяСтиля);
	Если Элемент <> Неопределено Тогда
		Возврат Элемент.Значение;
	КонецЕсли;	
	
	Возврат Цвет;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьHexЗначение(Значение)
	
	Если Значение = 0 Тогда
		Возврат "0";
	ИначеЕсли Значение = 1 Тогда
		Возврат "1";	
	ИначеЕсли Значение = 2 Тогда
		Возврат "2";	
	ИначеЕсли Значение = 3 Тогда
		Возврат "3";	
	ИначеЕсли Значение = 4 Тогда
		Возврат "4";	
	ИначеЕсли Значение = 5 Тогда
		Возврат "5";	
	ИначеЕсли Значение = 6 Тогда
		Возврат "6";	
	ИначеЕсли Значение = 7 Тогда
		Возврат "7";	
	ИначеЕсли Значение = 8 Тогда
		Возврат "8";	
	ИначеЕсли Значение = 9 Тогда
		Возврат "9";	
	ИначеЕсли Значение = 10 Тогда
		Возврат "A";	
	ИначеЕсли Значение = 11 Тогда
		Возврат "B";	
	ИначеЕсли Значение = 12 Тогда
		Возврат "C";	
	ИначеЕсли Значение = 13 Тогда
		Возврат "D";	
	ИначеЕсли Значение = 14 Тогда
		Возврат "E";	
	ИначеЕсли Значение = 15 Тогда
		Возврат "F";	
	КонецЕсли;
	
	Возврат "0";
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗначенияЦвета(Значение)
	
	СтаршееЧисло = Цел(Значение / 16);
	МладшееЧисло = Значение - 16 * СтаршееЧисло;
	
	Возврат ПолучитьHexЗначение(СтаршееЧисло) + ПолучитьHexЗначение(МладшееЧисло);
	
КонецФункции	

&НаКлиенте
Процедура ЦветТекста(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветТекста", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораЦвета",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветТекста(Цвет, Параметры) Экспорт

	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("foreColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветФона", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораЦветаФона",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветФона(Цвет, Параметры) Экспорт
	
	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("backColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормат(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("removeFormat", Ложь, "");
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьШрифтПродолжение", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораШрифта",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
		
	ИначеЕсли Результат = "Шрифт по умолчанию" Тогда 
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, НастройкаШрифтОтображения.Имя);
		Модифицированность = Истина;
		
	ИначеЕсли Результат = "Другой.." Тогда 
		ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьШрифт", ЭтотОбъект);
		ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
		
	Иначе 
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьШрифт(Шрифт, Параметры) Экспорт

	Если Шрифт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Шрифт.Имя) Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Шрифт.Имя);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РазмерШрифта = 2;
	
	Если Шрифт.Размер <> -1 Тогда
		Если Шрифт.Размер < 8 Тогда
			РазмерШрифта = 1;
		ИначеЕсли Шрифт.Размер <= 10 Тогда
			РазмерШрифта = 2;	
		ИначеЕсли Шрифт.Размер <= 12 Тогда
			РазмерШрифта = 3;	
		ИначеЕсли Шрифт.Размер <= 14 Тогда
			РазмерШрифта = 4;	
		ИначеЕсли Шрифт.Размер <= 16 Тогда
			РазмерШрифта = 5;	
		ИначеЕсли Шрифт.Размер <= 18 Тогда
			РазмерШрифта = 6;	
		Иначе
			РазмерШрифта = 7;	
		КонецЕсли;	
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("fontSize", Ложь, РазмерШрифта);
	Модифицированность = Истина;
	
	Если Шрифт.Зачеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("strikeThrough");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Жирный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("Bold");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Наклонный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("italic");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Подчеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("underline");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 2;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер + 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 3;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер - 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
			HTMLДокумент.execCommand("InsertImage", Ложь, "file://" + ПутьКФайлу);
			Модифицированность = Истина;
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'The Clipboard does not contain picture'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинку(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ВставитьКартинкуПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;	
	КонецЕсли;
		
	Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'; en = 'All images (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'")
		+ НСтр("ru = '|Все файлы(*.*)|*.*'; en = '|All files (*.*)|*.*'")
		+ НСтр("ru = '|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'; en = '|BMP format (*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'")
		+ НСтр("ru = '|Формат GIF(*.gif*)|*.gif'; en = '|GIF format (*.gif*)|*.gif'")
		+ НСтр("ru = '|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg'; en = '|JPEG format (*.jpeg;*.jpg)|*.jpeg;*.jpg'")
		+ НСтр("ru = '|Формат PNG(*.png*)|*.png'; en = '|PNG format (*.png*)|*.png'")
		+ НСтр("ru = '|Формат TIFF(*.tif)|*.tif'; en = '|TIFF format (*.tif)|*.tif'")
		+ НСтр("ru = '|Формат icon(*.ico)|*.ico'; en = '|Icons (*.ico)|*.ico'")
		+ НСтр("ru = '|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'; en = '|Metafile format (*.wmf;*.emf)|*.wmf;*.emf'");
								
	АдресВременногоХранилищаФайла = "";
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор картинки'; en = 'Selecting picture'");
	ВыборФайла.Фильтр = Фильтр;
	
	Результат = ВыборФайла.Выбрать();
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПутьФайла = ВыборФайла.ПолноеИмяФайла;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("InsertImage", Ложь, "file://" + ПутьФайла);
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLДокументСформирован(Элемент)
	
	ВосстановитьПоложениеHTML();
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ТекстПисьмаПриОткрытии = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";

	КонецЕсли;
	
	Если ПерсональныеНастройкиВыполненоЗакрытие Тогда
		ПерсональныеНастройкиВыполненоЗакрытие = Ложь;
		ВключитьРежимРедактированияHTML();
	КонецЕсли;	
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередИзменениемФормыНаКлиенте()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ПолучитьHTMLИзПоляHTMLДокумента();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Функция НайтиУзелПоНомеру(ТекущийУзел, НомерУзла, Счетчик, НайденныйУзел)
	
	Если ТекущийУзел.childNodes.length = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого Узел Из ТекущийУзел.childNodes Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик = НомерУзла Тогда
			НайденныйУзел = Узел;
			Возврат Истина;
		КонецЕсли;	
		
		Результат = НайтиУзелПоНомеру(Узел, НомерУзла, Счетчик, НайденныйУзел);
		Если Результат = Истина Тогда
			Возврат Результат;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьПоложениеHTML()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли	
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
		 И Не ПисьмоОтправлено Тогда
	
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		
		Попытка
			ie9_body = HTMLДокумент.ie9_body;
		Исключение	
			Возврат; // IE8 не поддерживаем
		КонецПопытки;	
		
		Счетчик = 0; 
		НайденныйУзел = Неопределено;
		
		Если ТекущийНомерУзла = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Попытка
			
			Результат = НайтиУзелПоНомеру(HTMLДокумент, ТекущийНомерУзла, Счетчик, НайденныйУзел);
			Если Результат Тогда
				
				Диапазон = HTMLДокумент.createRange();
				Диапазон.setStart(НайденныйУзел, ТекущееПоложениеНачало);
				Диапазон.setEnd(НайденныйУзел, ТекущееПоложениеКонец);
				
				Выделение = HTMLДокумент.getSelection();
				Выделение.removeAllRanges();
				Выделение.addRange(Диапазон);
				
				HTMLДокумент.body.scrollLeft = ГоризонтальнаяПрокруткаHTML;
				HTMLДокумент.body.scrollTop = ВертикальнаяПрокруткаHTML;
					
			КонецЕсли;	
		
		Исключение
			// не бросаем исключение - иногда HTMLДокумент дает ошибку
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеИзмененияФормыНаКлиенте()
	
	ВосстановитьПоложениеHTML();

КонецПроцедуры				

&НаКлиенте
Процедура ФорматHTML(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Возврат;
	Иначе
		// преобразуем текст в HTML
		ВыполнитьПереключениеВHTML();
	КонецЕсли;	
	
	Элементы.ИзменитьШрифтОтображения.Доступность =
		(Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"));
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВHTML()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстHTMLДляИсходящегоПисьмаИзПростогоТекста(ТекстПисьма);
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	ВключитьРежимРедактированияHTML();
	ОбновитьКомандыФорматаТекста();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыФорматаТекста()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Элементы.ФормаФорматHTML.Пометка = Истина;
		Элементы.ФормаАвтопереносСтрок.Пометка = Ложь;
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Истина;
		Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Истина;
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Истина;
		Элементы.ФормаФорматироватьТекстИсходящегоПисьма.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования.Видимость = Истина;
		Элементы.ФормаВставитьБезФорматирования_ВсеДействия.Видимость = Истина;
	Иначе
		Элементы.ФормаФорматHTML.Пометка = Ложь;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина;
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ФормаУдалитьВнешниеКартинки.Видимость = Ложь;
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Ложь;
		Элементы.ФормаФорматироватьТекстИсходящегоПисьма.Видимость = Истина;
		Элементы.ФормаВставитьБезФорматирования.Видимость = Ложь;
		Элементы.ФормаВставитьБезФорматирования_ВсеДействия.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Элементы.ГруппаСтраницаHTML.Видимость = Истина;
		
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
		
	Иначе		
		Элементы.ГруппаСтраницаHTML.Видимость = Ложь;
			
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераКакФайл(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ДобавитьКартинкуИзБуфераКакФайлЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьКартинкуИзБуфераКакФайлЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераКакФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			МассивФайловНаДиске = Новый Массив;
			Файл = Новый Файл(ПутьКФайлу);
			МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(Файл));
			
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
			Модифицированность = Истина;
			ПослеИзмененияФормыНаКлиенте();
			
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'The Clipboard does not contain picture'"));
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция НайтиНомерУзла(ТекущийУзел, ВыделенныйУзел, Счетчик, НайденныйНомерУзла)
	
	Если ТекущийУзел.childNodes.length = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого Узел Из ТекущийУзел.childNodes Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Узел = ВыделенныйУзел Тогда
			НайденныйНомерУзла = Счетчик;
			Возврат Истина;
		КонецЕсли;	
		
		Результат = НайтиНомерУзла(Узел, ВыделенныйУзел, Счетчик, НайденныйНомерУзла);
		Если Результат = Истина Тогда
			Возврат Результат;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьHTMLИзПоляHTMLДокумента()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если Не ВыполняетсяЗапись И Не ЗаписьПисьмаПриВыбореФайла Тогда
			
			HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
			
			Если HTMLДокумент <> Неопределено Тогда
				ТекстВПоле = HTMLДокумент.body.innerHTML;
				ТекстПисьма = "<html><body>" + ТекстВПоле + "</body></html>";
				ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
					ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
				ЗапомнитьПозициюHTML();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗапомнитьПозициюHTML()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли	
	
	Если ВыполняетсяОтправка Тогда
		Возврат; // При нажатии Отправить - не надо запоминать позицию HTML - все равно ведь сейчас закроем форму
	КонецЕсли;	
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	
	Попытка
		ie9_body = HTMLДокумент.ie9_body;
	Исключение	
		Возврат; // IE8 не поддерживаем
	КонецПопытки;	
	
	Попытка
	
	    Выделение = HTMLДокумент.getSelection();
		
		Узел = Выделение.getRangeAt(0).startContainer;
		ТекущееПоложениеНачало = Выделение.getRangeAt(0).startOffset;
		ТекущееПоложениеКонец = Выделение.getRangeAt(0).endOffset;

		Счетчик = 0;
		НайденныйНомерУзла = -1;
		Результат = НайтиНомерУзла(HTMLДокумент, Узел, Счетчик, НайденныйНомерУзла);
		
		ТекущийНомерУзла = НайденныйНомерУзла;
		
		ГоризонтальнаяПрокруткаHTML = HTMLДокумент.body.scrollLeft;
		ВертикальнаяПрокруткаHTML = HTMLДокумент.body.scrollTop;
		
	Исключение	
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗаписьHTML()
	
	Если ВыполняетсяЗапись Тогда
		Возврат;
	КонецЕсли;	
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	
	ЗапомнитьПозициюHTML();
	
	ТекстПисьмаHTMLДляОтменыОтправки = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		
		// в веб клиенте  HTMLДокумент.images недоступен
		#Если Не ВебКлиент Тогда 
		
		ЧислоКартинок = HTMLДокумент.images.length;  
		Для Индекс = 0 По ЧислоКартинок - 1 Цикл  
			
			Изображение = HTMLДокумент.images.item(Индекс);		
			
			Попытка
				Если Найти(ВРег(Изображение.src), ВРег("file://")) = 1 Тогда
					
					ПутьФайла = Сред(Изображение.src, СтрДлина("file://") + 1);
					ПутьФайла = СтрЗаменить(ПутьФайла, "%20", " ");
					
					ПервыйСимвол = Лев(ПутьФайла, 1);
					Если ПервыйСимвол = "/" Или ПервыйСимвол = "\" Тогда
						ПутьФайла = Сред(ПутьФайла, 2);
					КонецЕсли;	
					
					АдресВоВременномХранилище = "";
					
					ПомещаемыеФайлы = Новый Массив;
					Описание = Новый ОписаниеПередаваемогоФайла(ПутьФайла, "");
					ПомещаемыеФайлы.Добавить(Описание);
					ПомещенныеФайлы = Новый Массив;
					Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
						ВызватьИсключение
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
								ПутьФайла);
					КонецЕсли;
					
					Если ПомещенныеФайлы.Количество() = 1 Тогда
						АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
					Иначе
						ВызватьИсключение
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
								ПутьФайла);
					КонецЕсли;
					
					УникальныйИдентификаторФайла = Новый УникальныйИдентификатор; 
					УникальныйИдентификаторФайла = Строка(УникальныйИдентификаторФайла);
					Изображение.src = "cid:" + УникальныйИдентификаторФайла;
					
					Файл = Новый Файл(ПутьФайла);
					
					ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
						АдресВоВременномХранилище, УникальныйИдентификаторФайла,
						Файл.ПолучитьВремяИзменения(), Файл.Имя, Файл.Размер(), 
						Неопределено);
						
					СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
					
				КонецЕсли;	
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			КонецПопытки;
			
		КонецЦикла;	
		
		#КонецЕсли
		
	КонецЕсли;
	
	ТекстВПоле = HTMLДокумент.body.innerHTML;
	ТекстПисьмаHTMLПриЗаписи = "<html><body>" + ТекстВПоле + "</body></html>";
	
КонецПроцедуры

&НаСервере
Функция НайтиИдентификаторПочтовыхВложений(Идентификатор, ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыПочтовыхВложений.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|ГДЕ
		|	ИдентификаторыПочтовыхВложений.Идентификатор = &Идентификатор
		|	И ИдентификаторыПочтовыхВложений.Файл.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);	
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	Если Таблица.Количество() <> 0 Тогда
		Возврат Таблица[0].Файл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

&НаСервере
Процедура СкопироватьКартинкиПисьмаОснования(ПисьмоОснование)
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ПисьмоОснование, // отдаем ссылку на другое письмо
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		Истина); // ТолькоСИдентификаторами
		
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	
	Для каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		ЭтоФайлКартинка = РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(ФайлПисьма.ТекущаяВерсияРасширение);		
		НужноПроверитьНаличиеКартинкиВHTML = Не ЭтоФайлКартинка;
		СсылкаЕстьВHTML = Истина;
		
		Если НужноПроверитьНаличиеКартинкиВHTML Тогда
			
			СсылкаЕстьВHTML = Ложь;
			
			Если Найти(ТекстПисьма, "http:cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли Найти(ТекстПисьма, "cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли (СтрДлина(ИсточникФайла) > 18) И Найти(ТекстПисьма, ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
		НавигационнаяСсылкаФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
			ФайлПисьма.ТекущаяВерсия, // ВерсияСсылка
			УникальныйИдентификатор); // ИдентификаторФормы
		АбсолютнаяСсылкаНаКартинку = НавигационнаяСсылкаИнформационнойБазы + "/" + НавигационнаяСсылкаФайла;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "http:cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку); // коррекция ошибочного html
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		Если СтрДлина(ИсточникФайла) > 18 Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
			НавигационнаяСсылкаФайла, ИсточникФайла,
			ФайлПисьма.ТекущаяВерсияДатаМодификацииФайла, 
			ФайлПисьма.ИмяФайла, 
			ФайлПисьма.Размер,
			ФайлПисьма.Ссылка);
		
		СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
		
		Если СсылкаЕстьВHTML Тогда
			ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка", 
				ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВТекст()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма);
	
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	
	ОбновитьКомандыФорматаТекста();
	
	// получаем только файлы картинки в теле HTML - в режиме HTML они не видны как вложения, но при смене формата в текст станут видны
	
	ИдентификаторыКартинокПисьма.Очистить();
	ВложенияКартинки.Очистить();
	СписокДобавленныхФайлов.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Истина,    // ТолькоСИдентификаторами
			Ложь); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать

		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			Если ВложенияСтрока.ПометкаУдаления Тогда
				ВложенияСтрока.ИндексКартинки = ВложенияСтрока.ИндексКартинки + 1;
			КонецЕсли;
			ВложенияСтрока.Расположение = "Файл";
			
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УдалитьИдентификаторПочтовогоВложения(ФайлыПисьмаСтрока.Ссылка);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ОснованиеПисьма) Тогда	
		
		КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
		ВставитьФайлыИсходногоПисьмаСервер(ОснованиеПисьма, КопироватьТолькоФайлыСИдентификаторомВложений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	#Если Не ВебКлиент Тогда
		ТекущееВремя = ТекущаяДата();
		// Прошло 0 или 1 секунда с момента прекращения редактирования
		// - т.е. вероятно был сделан клик в HTML
		Если ТекущееВремя - ВремяОкончанияРедактированияПолучателей <= 2 Тогда
			УстановитьТекущийЭлементТекст();
			Возврат;
		КонецЕсли;
	#КонецЕсли

	Если ПисьмоОтправлено Тогда
		СтандартнаяОбработка = Ложь;
		ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Объект.Ссылка, Элемент.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРедактированияHTMLКлиент()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если Не ПисьмоОтправлено 
			И Не Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтвета.ПеренаправлениеПисьма") Тогда
			
			Если Найти(ТекстПисьма, "<body contentEditable") = 0 И Найти(ТекстПисьма, "<BODY contentEditable") = 0 Тогда
			
				Если Найти(ТекстПисьма, "<body") <> 0 Или Найти(ТекстПисьма, "<BODY") <> 0 Тогда
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contentEditable=true");
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "<BODY", "<BODY contentEditable=true");
				Иначе	
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "<html>", "<html><body contentEditable=true>");
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "</html>", "</body></html>");
					
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "<HTML>", "<HTML><BODY contentEditable=true>");
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "</HTML>", "</BODY></HTML>");
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПредельныйРазмерФайлов()
	
	Если Объект.ВидМаршрутизации = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя") Тогда
		
		РазмерПисьмаБайт = 0;
		
		Для каждого ВложенияСтрока Из Вложения Цикл
			
			Если ВложенияСтрока.Расположение = "НаДиске" Тогда
				Если Не ВложенияСтрока.ПометкаУдаления Тогда
					РазмерПисьмаБайт = РазмерПисьмаБайт + ВложенияСтрока.Размер;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
		РазмерПисьмаМБ = РазмерПисьмаБайт / (1024*1024);
		Если МаксимальныйРазмерВнешнегоИсходящегоПисьма <> 0 
			И РазмерПисьмаМБ > МаксимальныйРазмерВнешнегоИсходящегоПисьма Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Размер письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
				|Удалите слишком большие вложения.';
				|en = 'Email size (%1 MB) exceeds the maximum allowed size (%2 MB). 
				|Remove too large attachments.'"),
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерПисьмаМБ), 
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(МаксимальныйРазмерВнешнегоИсходящегоПисьма));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Вложения");
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВставитьТекстИзБуфера(Команда)
	ВыполнитьHTMLКоманду("paste");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВнешниеКартинки(Команда)
	
	ТекстВопроса = НСтр("ru = 'Сейчас из текста письма будут удалены ссылки на все картинки, подгружаемые из Интернет.
		|Продолжить?';
		|en = 'Links to all images from the Internet will be removed now from email text.
		|Do you want to continue?'");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдалитьВнешниеКартинки", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУдалитьВнешниеКартинки(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
	
	МассивВнешнихСсылок = Новый	Массив;
	
	Для Каждого Изображение Из HTMLДокумент.images Цикл
		
		Если Найти(ВРег(Изображение.src), ВРег("http://")) = 1
			Или Найти(ВРег(Изображение.src), ВРег("https://")) = 1 Тогда
			
			ОписаниеКартинки = Новый Структура("outerHTML, alt, src",
				Изображение.outerHTML, Изображение.alt, Изображение.src);
			МассивВнешнихСсылок.Добавить(ОписаниеКартинки);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если МассивВнешнихСсылок.Количество() <> 0 Тогда
		
		ПолучитьHTMLИзПоляHTMLДокумента();
		
		Для Каждого ОписаниеКартинки Из МассивВнешнихСсылок Цикл
			НоваяСтрока = ОписаниеКартинки.alt;
			Если ПустаяСтрока(НоваяСтрока) Тогда
				НоваяСтрока = ОписаниеКартинки.src;
			КонецЕсли;	
			НоваяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изображение: %1'; en = 'Image: %1'"), НоваяСтрока);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, ОписаниеКартинки.outerHTML, НоваяСтрока);
		КонецЦикла;	
		
		ВключитьРежимРедактированияHTMLКлиент();
		Модифицированность = Истина;
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалено ссылок на картинки: %1. 
			|Вместо них вставлено текстовое представление картинки или ссылка (в виде текста)';
			|en = 'Removed references to pictures: %1. 
			|They are replaced with textual representation of a picture or a link (as text)'"),
			Строка(МассивВнешнихСсылок.Количество()));
			
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Ссылок на картинки, подгружаемые из Интернет, в тексте письма не обнаружено.'; en = 'There is no links to images from the Internet in the email text.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсходныйТекст(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ТекстHTML = "";
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстHTML = ПолучитьHTMLТекст(Объект.Ссылка);
	Иначе
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			
			HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
			ТекстВПоле = HTMLДокумент.body.innerHTML;
			ТекстHTML = "<html><body>" + ТекстВПоле + "</body></html>";
			
		Иначе
			
			ТекстHTML = ТекстПисьма;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.ТолькоПросмотр = Истина;
	ТекстовыйДокумент.Показать(НСтр("ru = 'HTML код письма'; en = 'Email html code'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьHTMLТекст(Письмо)
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, 
		"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстХранилище, Кодировка, ОтправительКонтакт, ДатаОтправки, Тема, ПолучателиПисьма, ПолучателиКопий, УчетнаяЗапись");
		
	ТекстHTML = Документы.ИсходящееПисьмо.ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма);
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовОрфография

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	#Если Не ВебКлиент Тогда	
	
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			ПроверитьОрфографиюHTML();
		Иначе	  
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекст", ЭтотОбъект);
			ВстроеннаяПочтаКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, ТекстПисьма);
		КонецЕсли;	
	
	#КонецЕсли	
	
КонецПроцедуры

Процедура ЗавершениеПроверитьОрфографиюТекст(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		ТекстПисьма = Результат.ТекстПисьма;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографиюHTML()
	
	ПолучитьHTMLИзПоляHTMLДокумента();
	ТекстДляПроверки = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма);
	ТекстHTMLОригинальный = ТекстПисьма;
	ТекстHTMLИзмененный = ТекстПисьма;
	
	СловЗаменено = 0;
	СловПропущено = 0;
	
	Попытка
		Word = Новый COMОбъект("Word.Application");
		
		Если Word.Documents.Count = 0 Тогда
			Word.Documents.Add();
		КонецЕсли;
		
	Исключение
		ВключитьРежимРедактированияHTMLКлиент();
		Word = Неопределено;
		Возврат;
	КонецПопытки;
		
	Исключения = Новый Соответствие;
	СловаЗамены = Новый Соответствие;
	ПорядокСлов = Новый Соответствие;
	
	Текст = ТекстДляПроверки;
	НомерСтрокиНачальный = 1;
	ПозицияВСтроке = -1;
	СловоЗамены = "";
	СловоОригинальное = "";
	НомерСлова = -1;
	НомерСтрокиТекущий = -1;
	
	ПараметрыПроверкиОрфографии = Новый Структура;
	ПараметрыПроверкиОрфографии.Вставить("Текст", Текст);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиНачальный", НомерСтрокиНачальный);
	ПараметрыПроверкиОрфографии.Вставить("ПозицияВСтроке", ПозицияВСтроке); 
	ПараметрыПроверкиОрфографии.Вставить("СловоОригинальное", СловоОригинальное);
	ПараметрыПроверкиОрфографии.Вставить("СловоЗамены", СловоЗамены);
	ПараметрыПроверкиОрфографии.Вставить("НомерСлова", НомерСлова);
	ПараметрыПроверкиОрфографии.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLОригинальный", ТекстHTMLОригинальный); 
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLИзмененный", ТекстHTMLИзмененный); 
	ПараметрыПроверкиОрфографии.Вставить("Word", Word);
	ПараметрыПроверкиОрфографии.Вставить("Исключения", Исключения); 
	ПараметрыПроверкиОрфографии.Вставить("СловаЗамены", СловаЗамены); 
	ПараметрыПроверкиОрфографии.Вставить("ПорядокСлов", ПорядокСлов);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиТекущий", НомерСтрокиТекущий);
	ПараметрыПроверкиОрфографии.Вставить("СловЗаменено", СловЗаменено);
	ПараметрыПроверкиОрфографии.Вставить("СловПропущено", СловПропущено);
	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСлово(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдущегоСлова)
	
	НовыйТекстHTML = "";
	
	Если НомерПредыдущегоСлова = -1 Или НомерПредыдущегоСлова = Неопределено Тогда
		НомерПредыдущегоСлова = 0;
	КонецЕсли;	
	
	Если НомерПредыдущегоСлова <> 0 Тогда
		
		ПозицияНачалаСлова = -1;
		ТекущийНомерСлова = 0;
		
		Пока Истина Цикл
			
			ПозицияНачалаСлова = РаботаСоСтроками.НайтиПосле(ТекстHTMLИзмененный, СловоОригинальное, ПозицияНачалаСлова + 1);
			Если ПозицияНачалаСлова = 0 Тогда
				Возврат ТекстHTMLИзмененный;
			КонецЕсли;
			
			ТекущийНомерСлова = ТекущийНомерСлова + 1;
			Если ТекущийНомерСлова = НомерПредыдущегоСлова + 1 Тогда
				
				НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
				Возврат НовыйТекстHTML;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	Иначе // просто первое вхождение слова	
		
		ПозицияНачалаСлова = Найти(ТекстHTMLИзмененный, СловоОригинальное);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат ТекстHTMLИзмененный;
		КонецЕсли;	
		
		НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
			+ СловоЗамены
			+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
		
	КонецЕсли;	
	
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Функция ЗаменитьВсеСловаПосле(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдущегоСлова, СловЗаменено)
	
	НовыйТекстHTML = ТекстHTMLИзмененный;
	
	Если НомерПредыдущегоСлова = -1 Или НомерПредыдущегоСлова = Неопределено Тогда
		НомерПредыдущегоСлова = 0;
	КонецЕсли;	
	
	ПозицияНачалаСлова = -1;
	ТекущийНомерСлова = 0;
	ЧислоЗамен = 0;
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Пока Истина Цикл
		
		ПозицияНачалаСлова = РаботаСоСтроками.НайтиПосле(НовыйТекстHTML, СловоОригинальное, ПозицияНачалаСлова + 1);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат НовыйТекстHTML;
		КонецЕсли;
		
		ТекущийНомерСлова = ТекущийНомерСлова + 1;
		Если ТекущийНомерСлова >= НомерПредыдущегоСлова + 1 Тогда
			
			ИспользоватьСлово = Истина;
			
			Если ПозицияНачалаСлова > 1 Тогда
				СимволДо = Сред(НовыйТекстHTML, ПозицияНачалаСлова - 1, 1);
				Если Найти(СимволыРазделители, СимволДо) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			ПозицияКонцаСлова = ПозицияНачалаСлова + СтрДлина(СловоОригинальное);
			Если ПозицияКонцаСлова < СтрДлина(НовыйТекстHTML) Тогда
				СимволПосле = Сред(НовыйТекстHTML, ПозицияКонцаСлова, 1);
				Если Найти(СимволыРазделители, СимволПосле) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			Если ИспользоватьСлово Тогда
				
				Если ЧислоЗамен <> 0 Тогда
					СловЗаменено = СловЗаменено + 1;
				КонецЕсли;	
				ЧислоЗамен = ЧислоЗамен + 1;
				
				НовыйТекстHTML = Лев(НовыйТекстHTML, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(НовыйТекстHTML, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
			Иначе
				ПозицияНачалаСлова = ПозицияНачалаСлова + 1;
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Процедура ПроверитьОрфографиюВБлокеТекста()
	
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("ТекстовыйДокумент") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("ТекстовыйДокумент", Новый ТекстовыйДокумент());	
	КонецЕсли;		
	ПараметрыПроверкиОрфографии.ТекстовыйДокумент.УстановитьТекст(ПараметрыПроверкиОрфографии.Текст);
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("КоличествоСтрокТекста") Тогда 
		ПараметрыПроверкиОрфографии.Вставить(
			"КоличествоСтрокТекста", 
			ПараметрыПроверкиОрфографии.ТекстовыйДокумент.КоличествоСтрок());
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерСтроки") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерСтроки", ПараметрыПроверкиОрфографии.НомерСтрокиНачальный);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерПервогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерПервогоСимвола", 1);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерАнализируемогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерАнализируемогоСимвола", 1);
	КонецЕсли;	
	
	// Перебор строк
	Для СчСтроки = ПараметрыПроверкиОрфографии.НомерСтроки 
		По ПараметрыПроверкиОрфографии.КоличествоСтрокТекста Цикл
		
		ПараметрыПроверкиОрфографии.НомерСтроки = СчСтроки;
		
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Всего в тексте %1 строк. Проверяется %2 строка.'; en = 'Text contains %1 rows. Checking row %2.'"),
			Строка(ПараметрыПроверкиОрфографии.КоличествоСтрокТекста), 
			Строка(ПараметрыПроверкиОрфографии.НомерСтроки));
		Состояние(СтрокаСостояние);
		
		// Получение строки, которую далее будем проверять
		СтрокаИзТекста = ПараметрыПроверкиОрфографии.ТекстовыйДокумент.ПолучитьСтроку(ПараметрыПроверкиОрфографии.НомерСтроки);
		
		Если ПараметрыПроверкиОрфографии.ПозицияВСтроке <> -1 
			И (ПараметрыПроверкиОрфографии.НомерСтроки = ПараметрыПроверкиОрфографии.НомерСтрокиНачальный) Тогда
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.ПозицияВСтроке;
		Иначе	
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = Найти(СтрокаИзТекста, """");
			Если ПараметрыПроверкиОрфографии.НомерПервогоСимвола <> 0 Тогда
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.НомерПервогоСимвола + 1;
			Иначе
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = 1;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПроверкиОрфографии.НомерСтрокиТекущий = ПараметрыПроверкиОрфографии.НомерСтроки;
		
		ДлинаСтроки = СтрДлина(СтрокаИзТекста);
		НоваяСтрока = Лев(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерПервогоСимвола - 1);
		Слово = "";
		СловоСобрано = Ложь;
		
		// Посимвольный обход строки для выделения и проверки слов
		Для СчСимволов = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола 
			По ДлинаСтроки Цикл
			
			ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = СчСимволов;
			
			ПозицияВСтроке = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола;
			Символ = Сред(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола, 1);
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда
				
				Если СтрДлина(Слово) = 0 Тогда
					НоваяСтрока = НоваяСтрока + Символ;
				Иначе
					ДобавочныйСимвол = Символ;
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе
				
				Слово = Слово + Символ;
				Если ДлинаСтроки = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола Тогда 
					СловоСобрано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПараметрыПроверкиОрфографии.Свойство("Слово") Тогда 
				ПараметрыПроверкиОрфографии.Вставить("Слово", "");
			КонецЕсли;	
			
			ПараметрыПроверкиОрфографии.Слово = Слово;
			
			Если СловоСобрано Тогда
				
				Результат = ОрфографияОбработатьСлово(Слово, СтрокаИзТекста);
				Слово = "";
				СловоСобрано = Ложь;
				ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 
					ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола + 1;
				
				Если Не Результат Тогда
					// Процедура проверки прервана модальным окном и будет продолжена при его закрытии
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 1;
		
	КонецЦикла;
	
	ЗавершитьПроверкуОрфографии();
	
КонецПроцедуры

&НаКлиенте
Функция ОрфографияОбработатьСлово(Слово, СтрокаИзТекста)
				
	СловоНужноПроверитьWord = Истина;
	НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь;
	
	ЧислоВТексте = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстДляПроверки, Слово);
	ЧислоВHTML = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный, Слово);
	Если ЧислоВHTML <> ЧислоВТексте Тогда
		НеСовпадаетЧислоВхожденийВТекстеИHtml = Истина;
	КонецЕсли;	
	
	НаличиеСлова = ПараметрыПроверкиОрфографии.Исключения.Получить(Слово);
	Если НаличиеСлова <> Неопределено Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;	
	
	ЗамененноеСлово = ПараметрыПроверкиОрфографии.СловаЗамены.Получить(Слово);
	Если ЗамененноеСлово <> Неопределено Тогда
		Слово = ЗамененноеСлово;
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
	КонецЕсли;	
	
	Если СловоНужноПроверитьWord Тогда
		
		Если Не ПараметрыПроверкиОрфографии.Word.CheckSpelling(Слово) Тогда
			
			СписокВариантов = Новый СписокЗначений;
			
			Если НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь Тогда
				
				ВариантыЗамены = ПараметрыПроверкиОрфографии.Word.getSpellingSuggestions(Слово);
				
				Если ВариантыЗамены.Count <> 0 Тогда
					Для НомерВарианта = 1 По ВариантыЗамены.Count Цикл
						СписокВариантов.Добавить(ВариантыЗамены.Item(НомерВарианта).Name);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("ИсходнаяСтрока,СловоЗамены,СписокВариантов,НеСовпадаетЧислоВхожденийВТекстеИHtml");
			ПараметрыФормы.ИсходнаяСтрока = СокрЛП(СтрокаИзТекста);
			ПараметрыФормы.СловоЗамены = Слово;
			ПараметрыФормы.СписокВариантов = СписокВариантов.Скопировать();
			ПараметрыФормы.НеСовпадаетЧислоВхожденийВТекстеИHtml = НеСовпадаетЧислоВхожденийВТекстеИHtml;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверкиОрфографииВБлокеТекста", ЭтотОбъект);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.Форма.ПроверкаОрфографии", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Возврат Ложь;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Слово = "";
	СловоСобрано = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПроверкуОрфографии()
	
	ПараметрыПроверкиОрфографии.Word.Quit();
	ПараметрыПроверкиОрфографии.Word = Неопределено;
	
	Если СокрЛП(ТекстПисьма) <> СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный) Тогда
		
		ТекстПисьма = ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	ВключитьРежимРедактированияHTMLКлиент();
	Состояние();
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка орфографии завершена. 
		|Заменено слов: %1, пропущено слов: %2.';
		|en = 'Spell check completed. 
		|Words replaced: %1, words skipped: %2.'"),
		ПараметрыПроверкиОрфографии.СловЗаменено, ПараметрыПроверкиОрфографии.СловПропущено);
		
	ПоказатьПредупреждение(,ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиОрфографииВБлокеТекста(КодВозврата, Параметр) Экспорт
						
	Если ТипЗнч(КодВозврата) <> Тип("Структура") Тогда
		ЗавершитьПроверкуОрфографии();
		Возврат;
	КонецЕсли;	
	
	СловоИсходное = ПараметрыПроверкиОрфографии.Слово;
	Кнопка = КодВозврата.Кнопка;
	
	Если Кнопка = "Завершить" Тогда
		ЗавершитьПроверкуОрфографии();
		Возврат;
	КонецЕсли;
	
	Если Кнопка = "ПропуститьВсе" Тогда
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Пропустить" Тогда
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Заменить" Тогда
		
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
			
		ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола	
		 + (СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) - СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное));
			
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		
		ПроверкаОрфографииЗаменить();
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ЗаменитьВсе" Тогда
		
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографии.СловаЗамены.Вставить(ПараметрыПроверкиОрфографии.Слово, ПараметрыПроверкиОрфографии.СловоЗамены);
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		
		ПроверкаОрфографииЗаменитьВсе();
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ДобавитьИсключение" Тогда
		
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ВстроеннаяПочтаКлиент.ДобавитьСловоВИсключенияWord(
			ПараметрыПроверкиОрфографии.Word, 
			ПараметрыПроверкиОрфографии.Слово);
		
	КонецЕсли;
	
	НомерСлова = ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
	Если ПараметрыПроверкиОрфографии.НомерСлова = Неопределено
		Или ПараметрыПроверкиОрфографии.НомерСлова = -1 Тогда
		ПараметрыПроверкиОрфографии.НомерСлова = 0;
	КонецЕсли;	
	ПараметрыПроверкиОрфографии.НомерСлова = ПараметрыПроверкиОрфографии.НомерСлова + 1;
	ПараметрыПроверкиОрфографии.ПорядокСлов.Вставить(СловоИсходное, ПараметрыПроверкиОрфографии.НомерСлова);
	
	ПроверитьОрфографиюВБлокеТекста(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОрфографииЗаменить()
	
	// Заменяем не все вхождения слова, а только одно
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьСлово(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова);
		
	ПараметрыПроверкиОрфографии.Текст = РаботаС_HTML.ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);
		
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаОрфографииЗаменитьВсе()
	
	// Заменяем все вхождения слова
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьВсеСловаПосле(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова, 
		ПараметрыПроверкиОрфографии.СловЗаменено);
		
	ПараметрыПроверкиОрфографии.Текст = РаботаС_HTML.ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);			
	
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста();	
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРежимРедактированияHTML()
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML И Не ПисьмоОтправлено 
		И Не Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
		
		Если Найти(ТекстПисьма, "<body contentEditable") = 0 И Найти(ТекстПисьма, "<BODY contentEditable") = 0 Тогда
		
			Если Найти(ТекстПисьма, "<body") <> 0 Или Найти(ТекстПисьма, "<BODY") <> 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contentEditable=true");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<BODY", "<BODY contentEditable=true");
			Иначе	
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<html>", "<html><body contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</html>", "</body></html>");
				
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<HTML>", "<HTML><BODY contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</HTML>", "</BODY></HTML>");
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДобавитьПолучателей

&НаКлиенте
Процедура ДобавитьПолучателейСписком(Команда)
	
	ПараметрыФормы = Новый Структура(
		"УникальныйИдентификаторРодительскойФормы",
		УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВставкаПолучателейПисьма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателейСпискомИзПоляВВода(Команда)
	
	ПараметрыФормы = Новый Структура(
		"УникальныйИдентификаторРодительскойФормы, ЗаполнениеИзСтроки", 
		УникальныйИдентификатор, Истина);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВставкаПолучателейПисьма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСписокАдресов

&НаКлиенте
Процедура ДобавитьВСписок(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавленияВСписок", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗавершениеДобавленияВСписок(ЭлементСправочникаСпискиАдресов, Параметры) Экспорт

	Если ЭлементСправочникаСпискиАдресов <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ПередИзменениемФормыНаКлиенте();
		ДобавитьВСписокСервер(
			ЭлементСправочникаСпискиАдресов, 
			Элементы.Получатели.ВыделенныеСтроки, 
			ЧислоДобавленных, 
			Причина);
		ПослеИзмененияФормыНаКлиенте();
		
		Если ЧислоДобавленных <> 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресаты (%1 шт) добавлены в список адресов ""%2""'; en = 'Addressees (%1 PCs) added to address list ""%2""'"), ЧислоДобавленных, ЭлементСправочникаСпискиАдресов);
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЭлементСправочникаСпискиАдресов);	
			ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в список адресов'; en = 'Adding to the list of addresses'"), НавигационнаяСсылка, Текст);
			
		ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(,Причина);
		ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() > 1 Тогда	
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все выбранные адресаты уже есть в списке ""%1"".'; en = 'All selected addressees are already in list ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
			ПоказатьПредупреждение(,Причина);	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдСтроки);
		Адрес = СтрокаДанных.Адрес;
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Адрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данный адресат уже есть в списке ""%1"".'; en = 'This addressee is already in the list ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписок(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавлениеДоменаВСписок", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавлениеДоменаВСписок(ЭлементСправочникаСпискиАдресов, Параметры) Экспорт

	Если ЭлементСправочникаСпискиАдресов <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ПередИзменениемФормыНаКлиенте();
		ДобавитьДоменВСписокСервер(ЭлементСправочникаСпискиАдресов, Элементы.Получатели.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		ПослеИзмененияФормыНаКлиенте();
		
		Если ЧислоДобавленных <> 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресаты (%1 шт) добавлены в список адресов ""%2""'; en = 'Addressees (%1 PCs) added to address list ""%2""'"), ЧислоДобавленных, ЭлементСправочникаСпискиАдресов);
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЭлементСправочникаСпискиАдресов);	
			ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в список адресов'; en = 'Adding to the list of addresses'"), НавигационнаяСсылка, Текст);
			
		ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(,Причина);
		ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() > 1 Тогда	
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все выбранные адресаты уже есть в списке ""%1"".'; en = 'All selected addressees are already in list ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
			ПоказатьПредупреждение(,Причина);	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдСтроки);
		Адрес = СтрокаДанных.Адрес;
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(Адрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данный адресат уже есть в списке ""%1"".'; en = 'This addressee is already in the list ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура СпискиАдресов(Команда)
	
	ПараметрыОткрытия = Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.Форма.ФормаСпискаПоУчетнымЗаписям", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьТекстВБуфер(Команда)
	ВыполнитьHTMLКоманду("copy");
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВесьТекст(Команда)
	ВыполнитьHTMLКоманду("selectAll");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовМоиКонтакты

&НаКлиенте
Процедура ДобавитьВМоиКонтакты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавленияВМоиКонтакты", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ГруппыКонтактовПользователей.Форма.ВыборГруппыДляДобавления", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавленияВМоиКонтакты(ГруппаИзбранного, Параметры) Экспорт

	Если ГруппаИзбранного <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		ПередИзменениемФормыНаКлиенте();
		ДобавитьВИзбранноеПользователяСервер(
			Элементы.Получатели.ВыделенныеСтроки, 
			ГруппаИзбранного, 
			ЧислоДобавленных, 
			Причина);
		ПослеИзмененияФормыНаКлиенте();
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресаты (%1 шт) добавлены в группу избранного ""%2""'; en = 'Addressees (%1 pcs) added to favorites group ""%2""'"), ЧислоДобавленных, ГруппаИзбранного);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в ""Избранное""'; en = 'Adding to ""Favorites""'"),,Текст);
		ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(,Причина);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВИзбранноеПользователяСервер(Знач ВыделенныеСтроки, ГруппаИзбранного, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдСтроки);
		Контакт = СтрокаДанных.Контакт;
		Адрес = СтрокаДанных.Адрес;
		
		Если ЗначениеЗаполнено(Контакт) Или ЗначениеЗаполнено(Адрес) Тогда 
		
			Если ДобавитьВМоиКонтактыСервер(Контакт, Адрес, ГруппаИзбранного) Тогда
				ЧислоДобавленных = ЧислоДобавленных + 1;
			Иначе	
				Причина = НСтр("ru = 'Данный адресат уже есть в группе избранного.'; en = 'This addressee is already exists in the favorites group.'")
			КонецЕсли;
			
		Иначе	
			Причина = НСтр("ru = 'Не заполнен адресат.'; en = 'Addressee is not filled.'")
		КонецЕсли;
			
	КонецЦикла;
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВМоиКонтактыСервер(Контакт, Адрес, ГруппаИзбранного = Неопределено)
	
	Если Не Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(Контакт, Адрес, ГруппаИзбранного) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВставитьБезФорматирования(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
	
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		ТекстИзБуфера = HTMLДокумент.parentWindow.ClipboardData.Getdata("Text");
		
		Если ЗначениеЗаполнено(ТекстИзБуфера) Тогда
			Выделение = HTMLДокумент.selection.createRange();
			Выделение.text = ТекстИзБуфера;
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьАдресата(Команда)
	
	Элементы.Получатели.ДобавитьСтроку();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДатуЗакрытияКарточкиПисьма(Ссылка, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ДатыЗакрытияКарточекПисем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Письмо = Ссылка;
	МенеджерЗаписи.ДатаЗакрытия = Дата;	
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовАвтосохранение

&НаКлиенте
Процедура АвтоматическоеСохранениеВерсий()
	
#Если Не ВебКлиент Тогда
		
	ТекстПисьмаТекущий = "";
	РасширениеФайла = "";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ТекстПисьмаТекущий = HTMLДокумент.body.innerHTML;
		РасширениеФайла = "htm";
	Иначе
		
		ТекстПисьмаТекущий = ТекстПисьма;
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
			
			ТекстРедактирования = Элементы.ТекстПисьма.ТекстРедактирования;
			Если ТекстПисьмаТекущий <> ТекстРедактирования Тогда
				ТекстПисьмаТекущий = ТекстРедактирования;
			КонецЕсли;
				
		КонецЕсли;
		
		РасширениеФайла = "txt";
	КонецЕсли;	
	
	Если ТекстПисьмаТекущий = ТекстПисьмаПоследнегоАвтосохранения Тогда
		Возврат; // текст не изменился
	КонецЕсли;	
	
	ДатаДляФайла = ТекущаяДата();
	ПутьДня = Формат(ДатаДляФайла, "ДФ=ггггММддччммсс");
	
	Каталог = КаталогВременныхФайлов();
	
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог, 
		ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
	ПолныйПутьФайла = "";
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПолныйПутьФайла = Каталог + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"v8cln_Автосохранение_Сохр_%1_%2.%3",
			Строка(Объект.Ссылка.УникальныйИдентификатор()), ПутьДня, РасширениеФайла);
	Иначе
		
		Тема = Объект.Тема;
		ТемаНормализованная = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Тема, "");	
		ТемаНормализованная = СтрЗаменить(ТемаНормализованная, "_", " ");
		ТемаНормализованная = Лев(ТемаНормализованная, 40);
			
		ПолныйПутьФайла = Каталог +
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"v8cln_Автосохранение_Новое_%1_%2.%3",
			ТемаНормализованная, ПутьДня, РасширениеФайла);
	КонецЕсли;	
	
	Попытка
		
		ЗаписьТекста = Новый ЗаписьТекста(ПолныйПутьФайла, КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстПисьмаТекущий);
		ЗаписьТекста.Закрыть();
		
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = СообщениеОбОшибке + " " + ПолныйПутьФайла;
		Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
	КонецПопытки;
	
	ТекстПисьмаПоследнегоАвтосохранения = ТекстПисьмаТекущий;	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НоваяСтрока = СписокСохраненныхТекстовПисьма.Добавить();
		НоваяСтрока.ПолныйПутьФайла = ПолныйПутьФайла;
	КонецЕсли;	
	
#КонецЕсли	

КонецПроцедуры	

&НаКлиенте
Процедура ПереименоватьАвтоСохраненныеФайлы()
	
#Если Не ВебКлиент Тогда				
	Если СписокСохраненныхТекстовПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Тема = Объект.Тема;
	ТемаНормализованная = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Тема, "");	
	ТемаНормализованная = СтрЗаменить(ТемаНормализованная, "_", " ");
	ТемаНормализованная = Лев(ТемаНормализованная, 40);
	
	СтрокаСтарая = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"v8cln_Автосохранение_Новое_%1", ТемаНормализованная);
	СтрокаНовая = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"v8cln_Автосохранение_Сохр_%1",
			Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
	Для Каждого Строка Из СписокСохраненныхТекстовПисьма Цикл
		
		ПутьФайла = Строка.ПолныйПутьФайла;
		Файл = Новый Файл(ПутьФайла);
		Если Файл.Существует() Тогда
			
			НовоеИмя = СтрЗаменить(Файл.Имя, СтрокаСтарая, СтрокаНовая);
			НовыйПолныйПуть = Файл.Путь + НовоеИмя;
			Попытка
				ПереместитьФайл(ПутьФайла, НовыйПолныйПуть);
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			КонецПопытки;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	СписокСохраненныхТекстовПисьма.Очистить();
#КонецЕсли	

КонецПроцедуры	

&НаКлиенте
Процедура АвтосохраненныеВерсии(Команда)
	
	АвтосохраненныеВерсииВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтосохраненныеВерсииВыполнить()
	
#Если Не ВебКлиент Тогда
	ПараметрыФормы = Новый Структура(
		"СписокСохраненныхТекстовПисьма, ЭтоНовоеПисьмо, СсылкаПисьма, УникальныйИдентификаторРодительскойФормы",
		СписокСохраненныхТекстовПисьма, Не ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка,
		УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.АвтосохраненныеВерсии", ПараметрыФормы);
#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискАвтосохраненныхПисем()
	
#Если Не ВебКлиент Тогда				
	Если Не АвтоматическиСохранятьВерсииНеотправленногоПисьма Или ПисьмоОтправлено Тогда
		Возврат;
	КонецЕсли;	
	
	Каталог = КаталогВременныхФайлов();
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог, 
		ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
	МаскаПоиска = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"v8cln_Автосохранение_Сохр_%1_*.*",
		Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
	МассивФайлов = НайтиФайлы(Каталог, МаскаПоиска);
	
	ЕстьБолееНовыеФайлы = Ложь;
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если Файл.Существует() Тогда
		
			ДатаСохранения = Файл.ПолучитьВремяИзменения();
			Если ДатаСохранения > ДатаУспешногоЗакрытияКарточки Тогда
				ЕстьБолееНовыеФайлы = Истина;
				Прервать;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЕстьБолееНовыеФайлы Тогда
		Элементы.ГруппаСообщение.Видимость = Истина;
	КонецЕсли;	
	
#КонецЕсли	

КонецПроцедуры	

&НаКлиенте
Процедура АвтосохранениеВыбратьВерсию(Команда)
	
	АвтосохраненныеВерсииВыполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПрочие

&НаСервере
Процедура ПрочитатьДатуЗакрытияКарточки()
	
	Если Не ПисьмоОтправлено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запись = РегистрыСведений.ДатыЗакрытияКарточекПисем.СоздатьМенеджерЗаписи();
		Запись.Письмо = Объект.Ссылка;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			ДатаУспешногоЗакрытияКарточки = Запись.ДатаЗакрытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вырезать(Команда)
	ВыполнитьHTMLКоманду("cut");
КонецПроцедуры

&НаКлиенте
Процедура ВсеРеквизиты(Команда)
	
	ВнешнееПисьмоТекстЗаголовка = "";
	ВнешнееПисьмоТекстСообщения = "";
	ДекорацияВнешнийЗаголовокИТекст(ВнешнееПисьмоТекстЗаголовка, ВнешнееПисьмоТекстСообщения);
	
	ВидМаршрутизацииТекстЗаголовка = "";
	ВидМаршрутизацииТекстСообщения = "";
	ДекорацияВидМаршрутизацииЗаголовокИТекст(ВидМаршрутизацииТекстЗаголовка, ВидМаршрутизацииТекстСообщения);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытияФормы.Вставить("Папка", Объект.Папка);
	ПараметрыОткрытияФормы.Вставить("Предмет", Объект.Предмет);
	ПараметрыОткрытияФормы.Вставить("Проект", Объект.Проект);
	ПараметрыОткрытияФормы.Вставить("Важность", Объект.Важность);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизации", ДекорацияВидМаршрутизацииПодсказка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмо", ДекорацияВнешнийПодсказка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмоТекстЗаголовка", ВнешнееПисьмоТекстЗаголовка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмоТекстСообщения", ВнешнееПисьмоТекстСообщения);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизацииТекстЗаголовка", ВидМаршрутизацииТекстЗаголовка);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизацииТекстСообщения", ВидМаршрутизацииТекстСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВсеРеквизитыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.РеквизитыПисьма", 
		ПараметрыОткрытияФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект.Предмет = Результат.Предмет;
		Объект.Проект = Результат.Проект;
		Объект.УчетнаяЗапись = Результат.УчетнаяЗапись;
		Объект.Папка = Результат.Папка;
		
		ЗаполнитьПредметСтрокой(Объект.Предмет, ПредметСтрокой);
		ЗаполнитьПроектСтрокой(Объект.Проект, ПроектСтрокой);
		
		Модифицированность = Истина;
		
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьВысокая(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая");
	Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьВысокая;
	Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Высокая важность'; en = 'High importance'");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНормальная(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Обычная");
	Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьНеЗадана;
	Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Обычная важность'; en = 'Normal importance'");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНизкая(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Низкая");
	Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьНизкая;
	Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Низкая важность'; en = 'Low importance'");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПисьмаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНастройкиОтображения(ТекстПисьма, ТипТекста, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если ШрифтОтображенияУстановлен Тогда
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, Ложь, Истина);
		Иначе
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПоказатьЗначение(, Объект.Предмет);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредметСтрокойНажатиеЗавершениеВыбораТипа", ЭтотОбъект);
		
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элементы.ПредметСтрокой);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолноеИмяПоТипу(ТипВыбранный)
	ПолноеИмя = Метаданные.НайтиПоТипу(ТипВыбранный).ПолноеИмя();
	Возврат ПолноеИмя;
КонецФункции	

&НаКлиенте
Процедура ПредметСтрокойНажатиеЗавершениеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТипВыбранный = ТипЗнч(Результат.Значение);
		
		Если ТипВыбранный = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВыбиратьТолькоПроектнуюЗадачу", Истина);
			
			Если ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
				ПараметрыФормы.Вставить("ПроектнаяЗадача", НачальноеЗначениеПредмет);
			ИначеЕсли ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.Проекты") Тогда
				ПараметрыФормы.Вставить("Проект", НачальноеЗначениеПредмет);
			КонецЕсли;
			
			ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы);
			
		Иначе
		
			ПолноеИмя = ПолноеИмяПоТипу(ТипВыбранный);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредметСтрокойНажатиеЗавершение", ЭтотОбъект);
			РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму(ПолноеИмя + ".ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Предмет = Результат;
		ПредметСтрокой = Строка(Объект.Предмет);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьЗначение(, Объект.Проект);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроектСтрокойНажатиеЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Проекты.ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Проект = Результат;
		ПроектСтрокой = Строка(Объект.Проект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТипАдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВремяВыбораТипаАдресата = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматированноеСообщение()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Некоторые получатели письма не добавлены'; en = 'Some recipients are not added'"));
	ПараметрыФормы.Вставить("ТекстСообщения", ТекстОшибкиДобавленияПолучателя);
	
	ОткрытьФорму("ОбщаяФорма.ФорматированноеСообщение", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ТекстОшибкиДобавленияПолучателя = "";
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПочты(Команда)
	
	ОткрытьЗакладкуПисьмо = Истина;
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек(ОткрытьЗакладкуПисьмо);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВажность()
	
	Если Объект.Важность = Перечисления.ВажностьПисем.Высокая Тогда
		Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьВысокая;
		Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Высокая важность'; en = 'High importance'");
	ИначеЕсли Объект.Важность = Перечисления.ВажностьПисем.Низкая Тогда
		Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьНизкая;
		Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Низкая важность'; en = 'Low importance'");
	Иначе
		Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьНеЗадана;
		Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Обычная важность'; en = 'Normal importance'");
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПроектСтрокой(Проект, ПроектСтрокой)
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ПроектСтрокой = Строка(Проект);
	Иначе
		ПроектСтрокой = НСтр("ru = 'Не указан'; en = 'Not specified'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредметСтрокой(Предмет, ПредметСтрокой)
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметСтрокой = Строка(Предмет);
	Иначе
		ПредметСтрокой = НСтр("ru = 'Не указан'; en = 'Not specified'");
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак наличия занятых вложений в письме.
// Если задан параметр Пользователь, то возвращает признак
// наличия занятых вложений НЕ этим пользователем.
//
&НаСервере
Функция ПисьмоСодержитЗанятыеФайлы(Письмо, Пользователь = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|		ПО Файлы.ВладелецФайла = ИсходящееПисьмо.Ссылка
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Письмо
		|	И НЕ Файлы.ПометкаУдаления
		|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И (&Пользователь = НЕОПРЕДЕЛЕНО
		|			ИЛИ Файлы.Редактирует <> &Пользователь)");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Функция ЗаписатьКлиент(ПараметрыЗаписи = Неопределено)
	
	// Сохранение текущей позиции в списке файлов
	ИнформацияОТекущемФайле = Неопределено;
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ИнформацияОТекущемФайле = Новый Структура;
		ИнформацияОТекущемФайле.Вставить("ИмяФайла", Элементы.Вложения.ТекущиеДанные.ИмяФайла);
		ИнформацияОТекущемФайле.Вставить("Размер", Элементы.Вложения.ТекущиеДанные.Размер);
	КонецЕсли;
	
	ТекстРедактирования = Элементы.ТекстПисьма.ТекстРедактирования;
	Если ТекстПисьма <> ТекстРедактирования Тогда
		ТекстПисьма = ТекстРедактирования;
	КонецЕсли;
	
	Если Объект.Тема <> Элементы.Тема.ТекстРедактирования Тогда
		Объект.Тема = Элементы.Тема.ТекстРедактирования;
	КонецЕсли;
	Если Объект.Комментарий <> Элементы.Комментарий.ТекстРедактирования Тогда
		Объект.Комментарий = Элементы.Комментарий.ТекстРедактирования;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		Результат = Записать(ПараметрыЗаписи);
	Иначе
		Результат = Записать();
	КонецЕсли;
	
	// Восстановление текущей позиции в списке файлов
	Если Результат Тогда
		Если ТипЗнч(ИнформацияОТекущемФайле) = Тип("Структура") Тогда
			Для каждого ВложенияСтрока Из Вложения Цикл
				Если ВложенияСтрока.ИмяФайла = ИнформацияОТекущемФайле.ИмяФайла
					И ВложенияСтрока.Размер = ИнформацияОТекущемФайле.Размер Тогда
					Элементы.Вложения.ТекущаяСтрока = ВложенияСтрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			ТекстПисьма = ТекстПисьмаHTMLДляОтменыОтправки;
			ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
				ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
			ВключитьРежимРедактированияHTMLКлиент();
		КонецЕсли;	
		ВыполняетсяЗапись = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
		
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТема()
	
	ТекущийЭлемент = Элементы.Тема;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТекст()
	
	ТекущийЭлемент = Элементы.Получатели;
	
	ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТекст1", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТекст1()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
		
		ТекущийЭлемент = Элементы.ТекстПисьма;
		
	Иначе	
		
		ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ЕстьОшибкиВПротоколеДоставки()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколДоставкиПочты.Письмо
		|ИЗ
		|	РегистрСведений.ПротоколДоставкиПочты КАК ПротоколДоставкиПочты
		|ГДЕ
		|	ПротоколДоставкиПочты.Письмо = &Письмо
		|	И ПротоколДоставкиПочты.ЭтоОшибка = ИСТИНА";
		
	Запрос.УстановитьПараметр("Письмо", Объект.Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ОбработатьЗаписьКонтакта(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.Представление,
		|	СведенияОбАдресатах.АдресатСообщения
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|ГДЕ
		|	СведенияОбАдресатах.Контакт = &Контакт
		|	И СведенияОбАдресатах.Активна = Истина";
	Запрос.УстановитьПараметр("Контакт", Источник);	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
	
		Строка = Получатели[Счетчик];
			
		Если Не ЗначениеЗаполнено(Строка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			// Пытаемся получить адрес электронной почты.
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
			
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка.Представление);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаРезультатаЗапроса Из РезультатЗапроса Цикл
			Если СтрокаРезультатаЗапроса.АдресатСообщения = Строка.Адресат 
				И (Строка.Представление <> СтрокаРезультатаЗапроса.Представление 
				ИЛИ Строка.Контакт <> Источник) Тогда
				
				Строка.Контакт = Источник;
				Строка.Представление = СтрокаРезультатаЗапроса.Представление;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИсториюВводаНаСервере()
	
	НаборЗаписей = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Значение = ПользователиКлиентСервер.ТекущийПользователь();
	НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	
	НаборЗаписей.Записать();
	
	ЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте 
Процедура ВывестиВидМаршрутизацииИВидАдресатов()
	
	ВывестиВидМаршрутизации(ЭтаФорма);
	
	ВывестиВидАдресатов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиВидМаршрутизации(Форма)
	
	ВидМаршрутизацииВнешняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя");
	ВидМаршрутизацииВнутренняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внутренняя");
	
	Объект = Форма.Объект;
	
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	Если Не ПисьмоОтправлено Тогда 
		
		Объект.ПричинаВидаМаршрутизации = ""; 
		
		Если Не Форма.ИспользоватьВнутреннююМаршрутизацию Тогда 
			
			Объект.ВидМаршрутизации = ВидМаршрутизацииВнешняя;
			Объект.ПричинаВидаМаршрутизации = НСтр("ru = 'Выключено использование внутренней маршрутизации'; en = 'Internal routing is disabled'");
			
		Иначе
			ВнешниеАдресаты = Новый Массив;
			Для Каждого Строка Из Форма.Получатели Цикл
				Если Строка.ВидМаршрутизации = ВидМаршрутизацииВнешняя Тогда 
					ВнешниеАдресаты.Добавить(Строка);
				КонецЕсли;	
			КонецЦикла;	
			
			Если ВнешниеАдресаты.Количество() = 0 Тогда 
				Объект.ВидМаршрутизации = ВидМаршрутизацииВнутренняя;
				Объект.ПричинаВидаМаршрутизации = 
					НСтр("ru = 'Это письмо будет отправлено напрямую, а не через почтовый сервер, так как все получатели этого письма работают с почтой в 1С:Документообороте.'; en = 'This email will be sent directly, rather than through the mail server, as all the recipients of the email use the built-in email of 1C:Document Management.'"); 
			Иначе	
				Объект.ВидМаршрутизации = ВидМаршрутизацииВнешняя;
				
				Объект.ПричинаВидаМаршрутизации = НСтр("ru = 'Это письмо будет отправлено через почтовый сервер, так как следующие получатели являются внешними или не работают с почтой в 1С:Документообороте:'; en = 'This email will be sent through the mail server because the following recipients are external or do not use the built-in email of 1C:Document Management:'");
				
				Объект.ПричинаВидаМаршрутизации = Объект.ПричинаВидаМаршрутизации
					+ Символы.ПС;
						
				Для Каждого Строка Из ВнешниеАдресаты Цикл
					Объект.ПричинаВидаМаршрутизации = 
						Объект.ПричинаВидаМаршрутизации
						+ Символы.ПС
						+ " - "
						+ Строка.Представление;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не Форма.ПриложениеЯвляетсяВебКлиентом Тогда
		
		Если Объект.ВидМаршрутизации = ВидМаршрутизацииВнутренняя Тогда 
			Форма.ДекорацияВидМаршрутизацииПодсказка = НСтр("ru = 'Доставка внутренняя'; en = 'Internal delivery'");
		Иначе
			Форма.ДекорацияВидМаршрутизацииПодсказка = НСтр("ru = 'Доставка через почтовый сервер'; en = 'Delivery through the mail server'");
		КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		Если Не Форма.ПриложениеЯвляетсяВебКлиентом Тогда
		
		Если Объект.ВидМаршрутизации = ВидМаршрутизацииВнутренняя Тогда 
			Форма.ДекорацияВидМаршрутизацииПодсказка = НСтр("ru = 'Доставка внутренняя'; en = 'Internal delivery'");
		Иначе
			Форма.ДекорацияВидМаршрутизацииПодсказка = НСтр("ru = 'Доставка через почтовый сервер'; en = 'Delivery through the mail server'");
		КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиВидАдресатов(Форма)
	
	ВнешниеАдресаты = Новый Массив;
	Для Каждого Строка Из Форма.Получатели Цикл
		Если Строка.Внешний Тогда 
			ВнешниеАдресаты.Добавить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не Форма.ПриложениеЯвляетсяВебКлиентом Тогда
	
		Если ВнешниеАдресаты.Количество() > 0 Тогда 
			Форма.ДекорацияВнешнийПодсказка = НСтр("ru = 'Это внешнее письмо'; en = 'This is external email'");
		Иначе
			Форма.ДекорацияВнешнийПодсказка = НСтр("ru = 'Это внутреннее письмо'; en = 'This is an internal email'");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	
	ВывестиВидМаршрутизацииИВидАдресатов();
	
	Если ПолучатьФотографии Тогда
		ПослеИзмененияФормыНаКлиенте();
		ВключитьРежимРедактированияHTMLКлиент();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВнешнийЗаголовокИТекст(ТекстЗаголовка, ТекстСообщения)
	
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	
	ВнешниеАдресаты = Новый Массив;
	Для Каждого Строка Из Получатели Цикл
		Если Строка.Внешний Тогда 
			ВнешниеАдресаты.Добавить(Строка);
		КонецЕсли;	
	КонецЦикла;	
		
	Если ВнешниеАдресаты.Количество() > 0 Тогда 
			
		ВнешниеАдресатыСтрокой = "";
		Для Каждого Строка Из ВнешниеАдресаты Цикл
			ВнешниеАдресатыСтрокой = ВнешниеАдресатыСтрокой + " - " + Строка(Строка.Представление) + Символы.ПС;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Это внешнее письмо, так как некоторые его получатели не являются пользователями 1С:Документооборота:'; en = 'This is external email because some recipients are not users of 1C:Document Management:'") +
			Символы.ПС +
			Символы.ПС +
			ВнешниеАдресатыСтрокой;
		
		ТекстЗаголовка = НСтр("ru = 'Внешнее письмо'; en = 'External email'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Это внутреннее письмо, так как все его получатели являются пользователями 1С:Документооборота.'; en = 'This is internal email, since all its recipients are users of 1С:Document Management.'");
		ТекстЗаголовка = НСтр("ru = 'Внутреннее письмо'; en = 'Internal email'");
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВидМаршрутизацииЗаголовокИТекст(ТекстЗаголовка, ТекстСообщения)
	
	Если ЗначениеЗаполнено(Объект.ПричинаВидаМаршрутизации) Тогда 
		
		ТекстСообщения = Объект.ПричинаВидаМаршрутизации;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Для данного письма невозможно сообщить, почему установлен такой вид маршрутизации, так как оно было отправлено до начала сохранения этих сведений.'; en = 'It is impossible to tell for this email why this type of routing is installed because it was sent before the start of the preservation of this information.'");
		
	КонецЕсли;
	
	ВидМаршрутизацииВнутренняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внутренняя");
	Если Объект.ВидМаршрутизации = ВидМаршрутизацииВнутренняя Тогда 
		ТекстЗаголовка = НСтр("ru = 'Внутренняя доставка'; en = 'Internal delivery'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Доставка через почтовый сервер'; en = 'Delivery through the mail server'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияЦитирования(ТекстПослеРедактирования, Параметры) Экспорт

	Если ТекстПослеРедактирования <> Неопределено Тогда
		
		ТекстПисьма = ТекстПослеРедактирования;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Вложения.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(Вложения, Элементы.Вложения.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(МассивФайлов, Объект.Ссылка);
	
	ОбновитьФайлыПисьма();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмо(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавленияПисьма", ЭтотОбъект);
	ОткрытьФорму(
		"ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаВыбора", 
		ПараметрыОткрытия,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавленияПисьма(Результат, Параметры) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Результат) Тогда
		
		МассивПисем = Новый Массив;
		МассивПисем.Добавить(Результат);

		ПередИзменениемФормыНаКлиенте();
		ДобавитьВложениеПисьма(МассивПисем);

		ОтобразитьКоличествоФайловКлиент();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТипАдресаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТипАдреса = ТекущиеДанные.ТипАдреса;
	ТекущиеДанные.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьНомерСпособаАдресации(ТипАдреса)
	
	Если ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
		Возврат 1;
	КонецЕсли;

	Если ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
		Возврат 2;
	КонецЕсли;
	
	Если ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
		Возврат 3;
	КонецЕсли;

	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ДобавитьПользователейВПолучатели(ПользователиДляДобавления)
	
	Для Каждого ПользовательДляДобавленияКлючИЗначение Из ПользователиДляДобавления Цикл
		
		Контакт = ПользовательДляДобавленияКлючИЗначение.Ключ;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контакт", Контакт);
		НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'")
				И ПользовательДляДобавленияКлючИЗначение.Значение = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
				НайденнаяСтрока.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'");
			КонецЕсли;
		КонецЦикла;
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Адресат = ВстроеннаяПочтаСервер.ПолучитьАдресатПоКонтакту(Контакт);
		Если Адресат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПолучателя(ПользовательДляДобавленияКлючИЗначение.Значение, Адресат);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
