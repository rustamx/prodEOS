#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления, Папка");
		ПредыдущаяПометкаУдаления = ЗначенияРеквизитов.ПометкаУдаления;
		ДополнительныеСвойства.Вставить("ПредыдущаяПапка", ЗначенияРеквизитов.Папка);
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ЗначенияРеквизитов.ПометкаУдаления);
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда 
			
			Если ПометкаУдаления Тогда
				
				ОткрыватьФайлыИсходящегоПисьмаНаРедактирование =
					ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
				
			// упрощенный режим работы с файлами - освободим файлы	
				Если ОткрыватьФайлыИсходящегоПисьмаНаРедактирование Тогда
					РаботаСФайламиВызовСервера.ОсвободитьФайлыВладельца(Ссылка);
				КонецЕсли;	
				
			КонецЕсли;		
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			
		КонецЕсли;
		
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	Если ДополнительныеСвойства.Свойство("ТекстПисьма") Тогда
		
		УстановитьСодержаниеПисьма(
			ДополнительныеСвойства.ТекстПисьма,
			ТипТекста,
			Кодировка);
		
	КонецЕсли;
	
	Если ПометкаУдаления И ЗначениеЗаполнено(ПодготовленоКОтправке) Тогда
		ПодготовленоКОтправке = Дата(1, 1, 1);
		Если Не Ссылка.Пустая() Тогда
			РегистрыСведений.НеОтправленныеИсходящиеПисьма.УдалитьСведенияОПисьме(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ПисьмоОтправлено = ЗначениеЗаполнено(ДатаОтправки);
	Если Не ПисьмоОтправлено И ВидМаршрутизации.Пустая() Тогда 
		Если Константы.ИспользоватьВнутреннююМаршрутизацию.Получить() Тогда 
			ВидМаршрутизации = ВстроеннаяПочтаСервер.ПолучитьВидМаршрутизацииПисьма(ЭтотОбъект);
		Иначе
			ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
		КонецЕсли;
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.ПрименитьПредопределенныеПравила(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Папка) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана папка письма'; en = 'Email folder is not specified'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтруктураРеквизитов = СформироватьСтруктуруРеквизитовПисьма(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ПолучателиПисьма") Тогда
		Для каждого СтруктураАдресата Из СтруктураРеквизитов.ПолучателиПисьма Цикл
			ЗаполнитьЗначенияСвойств(ПолучателиПисьма.Добавить(), СтруктураАдресата);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПолучателиКопий") Тогда
		Для каждого СтруктураАдресата Из СтруктураРеквизитов.ПолучателиКопий Цикл
			ЗаполнитьЗначенияСвойств(ПолучателиКопий.Добавить(), СтруктураАдресата);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указана учетная запись. Рекомендуется в настройках почты установить учетную запись по умолчанию.'; en = 'Account is not specified. It is recommended in your personal mail settings set one account as default account.'"),,
			"УчетнаяЗапись",
			"Объект",
			Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодготовленоКОтправке) Тогда
		
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			
			УчетнаяЗаписьИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				УчетнаяЗапись,
				"ИспользоватьДляОтправки, ВариантИспользования");
			
			Если УчетнаяЗаписьИнфо.ВариантИспользования <> Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'В учетной записи не установлен признак использования для встроенной почты'; en = 'The email account is not marked for use with built-in email'"),,
						"УчетнаяЗапись",
						"Объект",
						Отказ);
			КонецЕсли;
			
			Если Не УчетнаяЗаписьИнфо.ИспользоватьДляОтправки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'В учетной записи снят флаг использования для отправки'; en = 'The email account is not marked for sending'"),,
						"УчетнаяЗапись",
						"Объект",
						Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.ПустаяСсылка();
	ДатаОтправки = Дата(1, 1, 1);
	ИдентификаторСообщения = "";
	ОтправкаОтменена = Ложь;
	Папка = Справочники.ПапкиПисем.ПустаяСсылка();
	ПодготовленоКОтправке = Дата(1, 1, 1);
	ПисьмоОснование = Неопределено;
	ТипОтвета = Неопределено;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодготовленоКОтправке) И Не ПометкаУдаления Тогда 
		ВстроеннаяПочтаСервер.ДобавитьПисьмоВПодготовленныеКОтправке(Ссылка);
	Иначе
		ВстроеннаяПочтаСервер.УдалитьПисьмоИзПодготовленныхКОтправке(Ссылка);
	КонецЕсли;
	
	ПредыдущаяПапка = Неопределено;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПапка") Тогда
		ПредыдущаяПапка = ДополнительныеСвойства.ПредыдущаяПапка;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если Папка <> ПредыдущаяПапка Или ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(ПредыдущаяПапка) Тогда
			РегистрыСведений.КоличествоПисемВПапках.ОчиститьЗаписиПоПапке(ПредыдущаяПапка);
		КонецЕсли;
		
		РегистрыСведений.КоличествоПисемВПапках.ОчиститьЗаписиПоПапке(Папка);
		
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтправки) Тогда
		РегистрыСведений.ПисьмаВеток.ОпределитьВеткуДляЧерновика(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	ВстроеннаяПочтаСервер.ПередУдалениемПисьма(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНаОсновании

// Возвращает структуру реквизитов письма, заполненную по ДаннымЗаполнения.
//
Функция СформироватьСтруктуруРеквизитовПисьма(Знач ДанныеЗаполнения) Экспорт
	
	Результат = Новый Структура;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Результат.Вставить("Дата", ТекущаяДата());
	Результат.Вставить("Автор", ТекущийПользователь);
	Результат.Вставить("Важность", Перечисления.ВажностьПисем.Обычная);
	
	КодировкаИсходящихПисем =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("КодировкаИсходящихПисем");
	
	Если ПустаяСтрока(КодировкаИсходящихПисем) Тогда
		КодировкаИсходящихПисем = "utf-8";
	КонецЕсли;
	
	Результат.Вставить("Кодировка", КодировкаИсходящихПисем);
	
	УчетнаяЗаписьДляОтправки = ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки();
	Если ЗначениеЗаполнено(УчетнаяЗаписьДляОтправки) Тогда
		УчетнаяЗаписьИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			УчетнаяЗаписьДляОтправки,
			"ИмяПользователя, АдресЭлектроннойПочты");
		
		Результат.Вставить("УчетнаяЗапись", УчетнаяЗаписьДляОтправки);
		ПочтовыйАдресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
			УчетнаяЗаписьИнфо.АдресЭлектроннойПочты, 
			УчетнаяЗаписьИнфо.ИмяПользователя);
		ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ПочтовыйАдресат);
		
		Результат.Вставить("ОтправительКонтакт", ДанныеАдресата.Контакт);
			
	Иначе
		Результат.Вставить("УчетнаяЗапись", Неопределено);
		Результат.Вставить("ОтправительКонтакт", ПользователиКлиентСервер.ТекущийПользователь());

	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Команда")
		И ДанныеЗаполнения.Свойство("Письмо")
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения.Письмо) Тогда
		ЗаполнитьСтруктуруРеквизитовПоПисьму(Результат, ДанныеЗаполнения.Письмо, ДанныеЗаполнения.Команда);
		
		Если ДанныеЗаполнения.Свойство("ПолучателиПисьма") 
		   И ТипЗнч(ДанныеЗаполнения.ПолучателиПисьма) = Тип("Массив")
		   И Результат.Свойство("ПолучателиПисьма") Тогда 
			Результат.ПолучателиПисьма.Очистить();
			
			Для Каждого АдресатПолучатель Из ДанныеЗаполнения.ПолучателиПисьма Цикл
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", АдресатПолучатель);
				Результат.ПолучателиПисьма.Добавить(СтруктураАдресата);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныПисем") Тогда 
		ЗаполнитьСтруктуруРеквизитовПоШаблонуПисьма(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоВнутреннемуДокументу(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоВходящемуДокументу(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоИсходящемуДокументу(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоПроект(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоПроекту(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоПроектнойЗадаче(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоМероприятие(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоМероприятию(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоЗадачаИсполнителя(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоЗадачеИсполнителя(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоФайлу(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСообщение(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоСообщению(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоУведомлениеПрограммы(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоУведомлениюПрограммы(Результат, ДанныеЗаполнения);
	КонецЕсли;
		
	Если ДелопроизводствоКлиентСервер.ЭтоКонтрольОбъектов(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоКонтролюОбъектов(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоОтсутствие(ДанныеЗаполнения) Тогда
		ЗаполнитьСтруктуруРеквизитовПоОтсутствию(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.КонтрольныеТочки") Тогда 
		ЗаполнитьСтруктуруРеквизитовПоКонтрольнойТочке(Результат, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Результат.Свойство("ПолучателиПисьма") И Результат.ПолучателиПисьма.Количество() > 0 Тогда
		ПолучателиСтрокой = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(Результат.ПолучателиПисьма);
		Результат.Вставить("ПолучателиПисьмаСтрокой", ПолучателиСтрокой);
	Иначе
		Результат.Вставить("ПолучателиПисьмаСтрокой", "");
	КонецЕсли;
	
	Если Не Результат.Свойство("Проект") Или Не ЗначениеЗаполнено(Результат.Проект) Тогда 
		Результат.Вставить("Проект", РаботаСПроектами.ПолучитьПроектПоУмолчанию());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтруктуруРеквизитовПоПисьму(СтруктураРеквизитов, Знач Письмо, Знач Команда)
	
	ПеренестиОтправителяВПолучатели = Ложь;
	ПеренестиВсехПолучателейВПолучатели = Ложь;
	ПрефиксТемыПисьма = "";
	ДобавлятьАвтораИсходногоПисьмаПриПересылке = Ложь;
	ДобавлятьПолучателейИсходногоПисьмаПриПересылке = Ложь;
	ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке = Ложь;
	
	Если Команда = "ОтветитьВсем" Тогда
		
		ПеренестиОтправителяВПолучатели = Истина;
		ПеренестиВсехПолучателейВПолучатели = Истина;
		ПрефиксТемыПисьма = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляОтветныхПисем();
		СтруктураРеквизитов.Вставить("ТипОтвета", Перечисления.ТипыОтвета.ОтветНаПисьмо);
		
	ИначеЕсли Команда = "Ответить" Тогда
		
		ПеренестиОтправителяВПолучатели = Истина;
		ПрефиксТемыПисьма = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляОтветныхПисем();
		СтруктураРеквизитов.Вставить("ТипОтвета", Перечисления.ТипыОтвета.ОтветНаПисьмо);
		
	ИначеЕсли Команда = "Переслать" Тогда
		
		ПрефиксТемыПисьма = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляПересылаемыхПисем();
		
		ДобавлятьАвтораИсходногоПисьмаПриПересылке =
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ДобавлятьАвтораИсходногоПисьмаПриПересылке");
		
		ДобавлятьПолучателейИсходногоПисьмаПриПересылке =
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ДобавлятьПолучателейИсходногоПисьмаПриПересылке");
		
		ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке =
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке");
		
		СтруктураРеквизитов.Вставить("ТипОтвета", Перечисления.ТипыОтвета.ПересылкаПисьма);
		
	ИначеЕсли Команда = "ПереслатьСКопией" Тогда
		ПрефиксТемыПисьма = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляПересылаемыхПисем();		
		ДобавлятьАвтораИсходногоПисьмаПриПересылке = Истина;
		СтруктураРеквизитов.Вставить("ТипОтвета", Перечисления.ТипыОтвета.ПересылкаПисьма);
		
	ИначеЕсли Команда = "Перенаправить" Тогда	
		
		СтруктураРеквизитов.Вставить("ТипОтвета", Перечисления.ТипыОтвета.ПеренаправлениеПисьма);
		
	ИначеЕсли Команда = "ПереслатьКакВложение" Тогда	
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Некорректная команда работы с письмом'; en = 'Incorrect command for email'");
		
	КонецЕсли;
	
	ПисьмоИнфо = Неопределено;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		
		ПисьмоИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Письмо,
			"Ссылка,
			|Кодировка,
			|Предмет,
			|Проект,
			|Тема,
			|УчетнаяЗапись,
			|ОтправительАдресат,
			|ТипТекста,
			|ВнутреннийЗаголовок");
		Адресат = ПисьмоИнфо.ОтправительАдресат;
		ПисьмоИнфо.Вставить("ОтправительАдресат", Адресат);
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоИнфо.УчетнаяЗапись);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		
		ПисьмоИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Письмо,
			"Ссылка,
			|Кодировка,
			|Предмет,
			|Проект,
			|Тема,
			|УчетнаяЗапись,
			|ОтправительКонтакт,
			|ТипТекста");
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоИнфо.УчетнаяЗапись);
		Адрес = ДанныеУчетнойЗаписи.АдресЭлектроннойПочты;
		Представление = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
		Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Адрес, Представление);
		ПисьмоИнфо.Вставить("ОтправительАдресат", Адресат);
		
	КонецЕсли;
	
	Попытка
		ОтветственныеЗаОбработкуПисемВыборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоИнфо.УчетнаяЗапись, "ОтветственныеЗаОбработкуПисем");
		ОтветственныеЗаОбработкуПисем = ОтветственныеЗаОбработкуПисемВыборка.Выгрузить();
		Если ПисьмоИнфо.УчетнаяЗапись.ОтветственныеЗаОбработкуПисем.Найти(
			СтруктураРеквизитов.Автор,
			"Пользователь") <> Неопределено Тогда
			СтруктураРеквизитов.Вставить("УчетнаяЗапись", ПисьмоИнфо.УчетнаяЗапись);
		КонецЕсли;
	Исключение // нет прав на учетную запись - берем учетку по умолчанию
		УчетнаяЗаписьДляОтправки = ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки();
		СтруктураРеквизитов.Вставить("УчетнаяЗапись", УчетнаяЗаписьДляОтправки);
	КонецПопытки;
	
	СтруктураРеквизитов.Вставить("ТипТекста", ПисьмоИнфо.ТипТекста);
	ФорматОтветныхИПересылаемыхПисем = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ФорматОтветныхИПересылаемыхПисем");
	Если ФорматОтветныхИПересылаемыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ПростойТекст") Тогда
		СтруктураРеквизитов.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	Иначе
		Если ФорматОтветныхИПересылаемыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ФорматИсходногоПисьма") Тогда
			СтруктураРеквизитов.ТипТекста = ПисьмоИнфо.ТипТекста; // копируется тип текста из письма основания
		Иначе
			СтруктураРеквизитов.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
		КонецЕсли;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
			ContentType = ВстроеннаяПочтаСервер.ПолучитьЗначениеПоляИзЗаголовкаПисьма(ПисьмоИнфо.ВнутреннийЗаголовок, "Content-Type");
			Если Найти(НРег(ContentType), "text/calendar") > 0 Тогда 
				СтруктураРеквизитов.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML; // на iCalendar ответ всегда в HTML 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	АвтовыборКодировкиИсходящихПисем =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("АвтовыборКодировкиИсходящихПисем");
	
	Если АвтовыборКодировкиИсходящихПисем Тогда
		СтруктураРеквизитов.Вставить("Кодировка", ПисьмоИнфо.Кодировка);
	КонецЕсли;
	
	НоваяТема = ПисьмоИнфо.Тема;
	
	ПрефиксОтвета    = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляОтветныхПисем();
	ПрефиксПересылки = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляПересылаемыхПисем();
	
	ПрефиксОтветаКороткий = "";  // "Re"
	ПрефиксПересылкиКороткий = "";  // "Fw"
	ПрефиксТемыПисьмаКороткий = "";
	
	Если Прав(ПрефиксОтвета, 1) = ":" Тогда
		ПрефиксОтветаКороткий = Лев(ПрефиксОтвета, СтрДлина(ПрефиксОтвета) - 1);
	КонецЕсли;	
	
	Если Прав(ПрефиксПересылки, 1) = ":" Тогда
		ПрефиксПересылкиКороткий = Лев(ПрефиксПересылки, СтрДлина(ПрефиксПересылки) - 1);
	КонецЕсли;	
	
	Если Прав(ПрефиксТемыПисьма, 1) = ":" Тогда
		ПрефиксТемыПисьмаКороткий = Лев(ПрефиксТемыПисьма, СтрДлина(ПрефиксТемыПисьма) - 1);
	КонецЕсли;	
	
	Тема = СокрЛП(ПисьмоИнфо.Тема);
	ТемаНРег = НРег(Тема);
	
	СворачиватьПрефиксыВТемеПисьма 
		= ВстроеннаяПочтаСерверПовтИсп.ПолучитьСворачиватьПрефиксОтветаИПересылкиВТемеПисьма();
		
	// Префиксы корректны (в них есть ":") и начало письма начинается с префикса - тогда свернем префиксы.
	//- иначе просто добавим префикс.
	Если СворачиватьПрефиксыВТемеПисьма И 
		ЗначениеЗаполнено(ПрефиксОтветаКороткий) И ЗначениеЗаполнено(ПрефиксПересылкиКороткий)
		 И ЗначениеЗаполнено(ПрефиксТемыПисьмаКороткий) 
		 И (Найти(ТемаНРег, НРег(ПрефиксОтветаКороткий)) = 1 
		 Или Найти(ТемаНРег, НРег(ПрефиксПересылкиКороткий)) = 1) Тогда
		 
		Если Найти(Тема, ПрефиксОтветаКороткий + "[") = 1
			Или Найти(Тема, ПрефиксПересылкиКороткий + "[") = 1 Тогда // новое письмо - начинается на "Re["
			
			Если ПрефиксТемыПисьма = ПрефиксОтвета И Найти(Тема, ПрефиксОтветаКороткий + "[") = 1 Тогда
				
				НачалоСкобки = РаботаСоСтроками.НайтиПосле(Тема, "[", СтрДлина(ПрефиксОтветаКороткий));
				КонецСкобки = РаботаСоСтроками.НайтиПосле(Тема, "]", СтрДлина(ПрефиксОтветаКороткий));
				Если НачалоСкобки <> 0 И КонецСкобки <> 0 Тогда
					
					ТекстВСкобках = Сред(Тема, НачалоСкобки + 1, КонецСкобки - НачалоСкобки - 1);
					ЧислоВСкобках = 0;
					
					Попытка
						ЧислоВСкобках = Число(ТекстВСкобках);
						ЧислоВСкобках = ЧислоВСкобках + 1; 
						ОкончаниеТемы = Сред(Тема, КонецСкобки + 2);
						
						НоваяТема = 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1[%2]: %3", 
								ПрефиксОтветаКороткий, 
								Строка(ЧислоВСкобках), 
								СокрЛ(ОкончаниеТемы));
						
						
					Исключение   // внутри ТекстВСкобках могло быть и не число
						НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);			
					КонецПопытки;	
					
				Иначе // нет закрывающей скобки ]	
					НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);			
				КонецЕсли;				
				
			ИначеЕсли ПрефиксТемыПисьма = ПрефиксПересылки 
				И Найти(Тема, ПрефиксПересылкиКороткий + "[") = 1 Тогда
				
				НачалоСкобки = РаботаСоСтроками.НайтиПосле(Тема, "[", СтрДлина(ПрефиксПересылкиКороткий));
				КонецСкобки = РаботаСоСтроками.НайтиПосле(Тема, "]", СтрДлина(ПрефиксПересылкиКороткий));
				Если НачалоСкобки <> 0 И КонецСкобки <> 0 Тогда
					
					ТекстВСкобках = Сред(Тема, НачалоСкобки + 1, КонецСкобки - НачалоСкобки - 1);
					
					Попытка
						ЧислоВСкобках = Число(ТекстВСкобках);
						ЧислоВСкобках = ЧислоВСкобках + 1; 
						ОкончаниеТемы = Сред(Тема, КонецСкобки + 2);
						
						НоваяТема = 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1[%2]: %3", 
								ПрефиксПересылкиКороткий, 
								Строка(ЧислоВСкобках), 
								Сред(Тема, КонецСкобки + 2));
							
					Исключение   // внутри ТекстВСкобках могло быть и не число
						НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);			
					КонецПопытки;	
					
				Иначе // нет закрывающей скобки ]	
					НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);			
				КонецЕсли;				
				
			Иначе // не совпадает префикс и начало темы	 - просто добавим префикс в начало
				НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);
			КонецЕсли;	
			
		Иначе // старое письмо - без "Re[5]"
			
			НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);
			НоваяТема = СвернутьПрефиксыВТеме(
				НоваяТема, 
				ПрефиксТемыПисьма, ПрефиксТемыПисьмаКороткий, 
				ПрефиксОтвета, ПрефиксПересылки,
				ПрефиксОтветаКороткий, ПрефиксПересылкиКороткий);
			
		КонецЕсли;	 
		
	Иначе	
		
		НоваяТема = ПрефиксТемыПисьма + " " + СокрЛП(ПисьмоИнфо.Тема);
		
	КонецЕсли;	
	
	СтруктураРеквизитов.Вставить("ПисьмоОснование", Письмо);
	СтруктураРеквизитов.Вставить("Предмет", ПисьмоИнфо.Предмет);
	СтруктураРеквизитов.Вставить("Проект", ПисьмоИнфо.Проект);
	СтруктураРеквизитов.Вставить("Тема", НоваяТема);
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	СтруктураРеквизитов.Вставить("ПолучателиКопий", Новый Массив);
	
	УникальныеАдресаты = Новый Массив; // Массив для контроля уникальности получателей письма.
	Если ЗначениеЗаполнено(СтруктураРеквизитов.УчетнаяЗапись) Тогда
		
		УчетнаяЗаписьИнфо = Почта.ПолучитьДанныеУчетнойЗаписи(СтруктураРеквизитов.УчетнаяЗапись);
		Если ЗначениеЗаполнено(УчетнаяЗаписьИнфо.АдресЭлектроннойПочты) Тогда
			УчетнаяЗаписьАдресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
				УчетнаяЗаписьИнфо.АдресЭлектроннойПочты, 
				УчетнаяЗаписьИнфо.ОтображаемоеИмя);
			УникальныеАдресаты.Добавить(УчетнаяЗаписьАдресат);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПеренестиОтправителяВПолучатели Тогда
		
		СтруктураАдресата = Новый Структура;
		СтруктураАдресата.Вставить("Адресат", ПисьмоИнфо.ОтправительАдресат);
		СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
		
		УникальныеАдресаты.Добавить(ПисьмоИнфо.ОтправительАдресат);
		
	КонецЕсли;
	
	Если ДобавлятьАвтораИсходногоПисьмаПриПересылке Тогда
		
		Если УникальныеАдресаты.Найти(ПисьмоИнфо.ОтправительАдресат) = Неопределено Тогда
			
			СтруктураАдресата = Новый Структура;
			СтруктураАдресата.Вставить("Адресат", ПисьмоИнфо.ОтправительАдресат);
			СтруктураРеквизитов.ПолучателиКопий.Добавить(СтруктураАдресата);
			
			УникальныеАдресаты.Добавить(ПисьмоИнфо.ОтправительАдресат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПеренестиВсехПолучателейВПолучатели Тогда
		
		Для каждого Получатель Из Письмо.ПолучателиПисьма Цикл
			
			Если УникальныеАдресаты.Найти(Получатель.Адресат) = Неопределено Тогда
				
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Получатель.Адресат);
				СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
				
				УникальныеАдресаты.Добавить(Получатель.Адресат);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Получатель Из Письмо.ПолучателиКопий Цикл
			
			Если УникальныеАдресаты.Найти(Получатель.Адресат) = Неопределено Тогда
				
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Получатель.Адресат);
				СтруктураРеквизитов.ПолучателиКопий.Добавить(СтруктураАдресата);
				
				УникальныеАдресаты.Добавить(Получатель.Адресат);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДобавлятьПолучателейИсходногоПисьмаПриПересылке Тогда
		
		Для каждого Получатель Из Письмо.ПолучателиПисьма Цикл
			
			Если УникальныеАдресаты.Найти(Получатель.Адресат) = Неопределено Тогда
				
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Получатель.Адресат);
				СтруктураРеквизитов.ПолучателиКопий.Добавить(СтруктураАдресата);
				
				УникальныеАдресаты.Добавить(Получатель.Адресат);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке Тогда
		
		Для каждого Получатель Из Письмо.ПолучателиКопий Цикл
			
			Если УникальныеАдресаты.Найти(Получатель.Адресат) = Неопределено Тогда
				
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Получатель.Адресат);
				СтруктураРеквизитов.ПолучателиКопий.Добавить(СтруктураАдресата);
				
				УникальныеАдресаты.Добавить(Получатель.Адресат);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвернутьПрефиксыВТеме(Тема, ПрефиксТемыПисьма, ПрефиксТемыПисьмаКороткий, 
				ПрефиксОтвета, ПрефиксПересылки,
				ПрефиксОтветаКороткий, ПрефиксПересылкиКороткий)
				
	НоваяТема = "";
	Позиция = 0;
	
	ТемаНРег = НРег(Тема);
	ПрефиксОтветаНРег = НРег(ПрефиксОтвета);
	ПрефиксПересылкиНРег = НРег(ПрефиксПересылки);
	
	СчетчикОтветов = 0;
	СчетчикПересылок = 0;
	
	ПрефиксОтветаДлина = СтрДлина(ПрефиксОтвета);
	СчетчикЦикла = 0;
	
	Пока Истина Цикл
		
		СчетчикЦикла = СчетчикЦикла + 1;
		Если СчетчикЦикла > 100 Тогда // произошло зацикливание
			НоваяТема = Тема; 
			Возврат НоваяТема;
		КонецЕсли;	
		
		Если СчетчикОтветов = 0 И СчетчикПересылок = 0 Тогда // начало темы
			
			НайденоОтвет = РаботаСоСтроками.НайтиПосле(ТемаНРег, ПрефиксОтветаНРег, Позиция);
			НайденоПересылка = РаботаСоСтроками.НайтиПосле(ТемаНРег, ПрефиксПересылкиНРег, Позиция);
			
			НачатьСОтветов = Неопределено;
			Если НайденоОтвет <> 0 
				И (НайденоОтвет = Позиция Или НайденоОтвет = Позиция + 1 Или НайденоОтвет = Позиция + 2) И 
				НайденоПересылка <> 0 
				И (НайденоПересылка = Позиция Или НайденоПересылка = Позиция + 1 Или НайденоПересылка = Позиция + 2) Тогда
				
				Если НайденоОтвет < НайденоПересылка Тогда
					НачатьСОтветов = Истина;
				Иначе	
					НачатьСОтветов = Ложь;
				КонецЕсли;		
				
			КонецЕсли;	
			
			Если НайденоОтвет <> 0 
				И (НайденоОтвет = Позиция Или НайденоОтвет = Позиция + 1 Или НайденоОтвет = Позиция + 2) 
				И (НачатьСОтветов = Неопределено Или НачатьСОтветов = Истина) Тогда
				
				СчетчикОтветов = СчетчикОтветов + 1;
				Позиция = НайденоОтвет + СтрДлина(ПрефиксОтветаНРег)-1;
				
			ИначеЕсли НайденоПересылка <> 0 И (НайденоПересылка = Позиция 
				Или НайденоПересылка = Позиция + 1 Или НайденоПересылка = Позиция + 2)
				И (НачатьСОтветов = Неопределено Или НачатьСОтветов = Ложь) Тогда
				
				СчетчикПересылок = СчетчикПересылок + 1;
				Позиция = НайденоПересылка + СтрДлина(ПрефиксПересылкиНРег)-1;
				
			Иначе
				
				ОкончаниеТемы = Сред(Тема, Позиция);
				Если Лев(ОкончаниеТемы, 1) = ":" Тогда
					ОкончаниеТемы = Сред(ОкончаниеТемы, 2);
				КонецЕсли;
				
				НоваяТема = НоваяТема + СокрЛ(ОкончаниеТемы);
				Прервать;
				
			КонецЕсли;	
			
		КонецЕсли;		
		
		Если СчетчикОтветов <> 0 Тогда // ищем ответы  
			
			Найдено = РаботаСоСтроками.НайтиПосле(ТемаНРег, ПрефиксОтветаНРег, Позиция);
			
			// нашли - сразу за этим блоком идет такой же
			Если Найдено = Позиция Или Найдено = Позиция + 1 Или Найдено = Позиция + 2 Тогда
				СчетчикОтветов = СчетчикОтветов + 1;
				Позиция = Найдено + СтрДлина(ПрефиксОтветаНРег)-1;
			Иначе // прекратилась последовательность блоков ответа
				
				Если СчетчикОтветов > 1 Тогда
					НоваяТема = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1%2[%3]: ", 
							НоваяТема, 
							ПрефиксОтветаКороткий, 
							Строка(СчетчикОтветов));
				Иначе
					НоваяТема = НоваяТема + ПрефиксОтвета + " ";
				КонецЕсли;	
				
				СчетчикОтветов = 0;
				
			КонецЕсли;		
			
		ИначеЕсли СчетчикПересылок <> 0 Тогда // ищем пересылки
			
			Найдено = РаботаСоСтроками.НайтиПосле(ТемаНРег, ПрефиксПересылкиНРег, Позиция);
			
			// нашли - сразу за этим блоком идет такой же
			Если Найдено = Позиция Или Найдено = Позиция + 1 Или Найдено = Позиция + 2 Тогда
				
				СчетчикПересылок = СчетчикПересылок + 1;
				Позиция = Найдено + СтрДлина(ПрефиксПересылкиНРег)-1;
				
			Иначе // прекратилась последовательность блоков пересылки
				
				Если СчетчикПересылок > 1 Тогда
					НоваяТема = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1%2[%3]: ", 
							НоваяТема, 
							ПрефиксПересылкиКороткий, 
							Строка(СчетчикПересылок));
				Иначе
					НоваяТема = НоваяТема + ПрефиксПересылки + " ";
				КонецЕсли;	
				
				СчетчикПересылок = 0;
				
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат НоваяТема;
	
КонецФункции	

Процедура ЗаполнитьСтруктуруРеквизитовПоВнутреннемуДокументу(СтруктураРеквизитов, Знач Документ)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Заголовок, Проект, ВидДокумента.ВестиУчетПоКонтрагентам");
	СтруктураРеквизитов.Вставить("Тема", РеквизитыДокумента.Заголовок);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыДокумента.Проект);
	СтруктураРеквизитов.Вставить("Предмет", Документ);
	
	Если РеквизитыДокумента.ВидДокументаВестиУчетПоКонтрагентам = Истина Тогда 
		СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
		
		Для Каждого КонтрагентыСтрока Из Документ.Контрагенты Цикл 
			
			Если ЗначениеЗаполнено(КонтрагентыСтрока.КонтактноеЛицо) Тогда
				
				МассивАдресов = ПолучитьАдресаЭлектроннойПочты(КонтрагентыСтрока.КонтактноеЛицо);
				
				Если МассивАдресов.Количество() <> 0 Тогда
					
					Для Каждого АдресатАдрес Из МассивАдресов Цикл
						АдресатПредставление = Строка(КонтрагентыСтрока.КонтактноеЛицо);
						Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
							АдресатАдрес, АдресатПредставление);
						
						СтруктураАдресата = Новый Структура;
						СтруктураАдресата.Вставить("Адресат", Адресат);
						СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КонтрагентыСтрока.ПодписалОтКонтрагента) Тогда
				
				МассивАдресов = ПолучитьАдресаЭлектроннойПочты(КонтрагентыСтрока.ПодписалОтКонтрагента);
				
				Если МассивАдресов.Количество() <> 0 Тогда
					Для Каждого АдресатАдрес Из МассивАдресов Цикл
						АдресатПредставление = Строка(КонтрагентыСтрока.ПодписалОтКонтрагента);
						Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
							АдресатАдрес, АдресатПредставление);
						
						СтруктураАдресата = Новый Структура;
						СтруктураАдресата.Вставить("Адресат", Адресат);
						СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КонтрагентыСтрока.Контрагент) Тогда
				
				МассивАдресов = ПолучитьАдресаЭлектроннойПочты(КонтрагентыСтрока.Контрагент);
				
				Если МассивАдресов.Количество() <> 0 Тогда
					
					Для Каждого АдресатАдрес Из МассивАдресов Цикл
						АдресатПредставление = Строка(КонтрагентыСтрока.Контрагент);
						Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
							АдресатАдрес, АдресатПредставление);
						
						СтруктураАдресата = Новый Структура;
						СтруктураАдресата.Вставить("Адресат", Адресат);
						СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоВходящемуДокументу(СтруктураРеквизитов, Знач Документ)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Заголовок, Подписал, Отправитель, Проект");
	СтруктураРеквизитов.Вставить("Тема", РеквизитыДокумента.Заголовок);
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыДокумента.Проект);
	СтруктураРеквизитов.Вставить("Предмет", Неопределено);
	СтруктураРеквизитов.Вставить("ПисьмоОснование", Документ);
	СтруктураРеквизитов.Вставить("ТипОтвета", Перечисления.ТипыОтвета.ОтветНаПисьмо);
	
	АдресатАдрес = Неопределено;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подписал) Тогда
		
		МассивАдресов = ПолучитьАдресаЭлектроннойПочты(РеквизитыДокумента.Подписал);
		
		Если МассивАдресов.Количество() <> 0 Тогда
			
			Для Каждого АдресатАдрес Из МассивАдресов Цикл
			
				АдресатПредставление = Строка(РеквизитыДокумента.Подписал);
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
					АдресатАдрес, АдресатПредставление);
				
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Адресат);
				СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресатАдрес) И ЗначениеЗаполнено(РеквизитыДокумента.Отправитель) Тогда
		
		МассивАдресов = ПолучитьАдресаЭлектроннойПочты(РеквизитыДокумента.Отправитель);
		
		Если МассивАдресов.Количество() <> 0 Тогда
			
			Для Каждого АдресатАдрес Из МассивАдресов Цикл
				АдресатПредставление = Строка(РеквизитыДокумента.Отправитель);
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
					АдресатАдрес, АдресатПредставление);
				
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Адресат);
				СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоИсходящемуДокументу(СтруктураРеквизитов, Знач Документ)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Заголовок, Проект");
	СтруктураРеквизитов.Вставить("Тема", РеквизитыДокумента.Заголовок);
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыДокумента.Проект);
	СтруктураРеквизитов.Вставить("Предмет", Неопределено);
	
	Для каждого ПолучателиСтрока Из Документ.Получатели Цикл
		
		Контакт = Неопределено;
		Адрес = "";
		
		КонтактноеЛицо = ПолучателиСтрока.Адресат;
		МассивАдресов = ПолучитьАдресаЭлектроннойПочты(КонтактноеЛицо);
		Если МассивАдресов.Количество() <> 0 Тогда
			
			Контакт = КонтактноеЛицо;
			
			Если МассивАдресов.Количество() <> 0 Тогда
				
				Для Каждого АдресатАдрес Из МассивАдресов Цикл
					Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресатАдрес, Строка(Контакт));
					СтруктураАдресата = Новый Структура;
					СтруктураАдресата.Вставить("Адресат", Адресат);
					Если ЗначениеЗаполнено(СтруктураАдресата.Адресат) Тогда
						СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			
		Иначе
			
			Контрагент = ПолучателиСтрока.Получатель;
			МассивАдресов = ПолучитьАдресаЭлектроннойПочты(Контрагент);
			
			Если МассивАдресов.Количество() <> 0 Тогда
				
				Контакт = Контрагент;
				
				Для Каждого АдресатАдрес Из МассивАдресов Цикл
					Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресатАдрес, Строка(Контакт));
					СтруктураАдресата = Новый Структура;
					СтруктураАдресата.Вставить("Адресат", Адресат);
					Если ЗначениеЗаполнено(СтруктураАдресата.Адресат) Тогда
						СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоПроекту(СтруктураРеквизитов, Знач Проект)
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Проект, "Наименование, ЭтоГруппа, ПроектнаяКоманда");
	
	Если РеквизитыПроекта.ЭтоГруппа = Истина Тогда
		ВызватьИсключение Нстр("ru = 'Выберите проект, а не группу.'; en = 'Select a project, not a group.'");
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("Тема", РеквизитыПроекта.Наименование);
	СтруктураРеквизитов.Вставить("Проект", Проект);
	СтруктураРеквизитов.Вставить("Предмет", Проект);
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	
	ПроектнаяКоманда = РеквизитыПроекта.ПроектнаяКоманда.Выбрать();
	
	Пока ПроектнаяКоманда.Следующий() Цикл
		
		МассивАдресов = ПолучитьАдресаЭлектроннойПочты(ПроектнаяКоманда.Исполнитель);
		
		Если МассивАдресов.Количество() <> 0 Тогда
			
			Для Каждого Адрес Из МассивАдресов Цикл
				СтруктураАдресата = Новый Структура;			
				Представление = Строка(ПроектнаяКоманда.Исполнитель);			
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Адрес, Представление);
				
				СтруктураАдресата.Вставить("Адресат", Адресат);			
				СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
			КонецЦикла;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоФайлу(СтруктураРеквизитов, Знач Файл)
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Наименование, Проект");
	СтруктураРеквизитов.Вставить("Тема", РеквизитыФайла.Наименование);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыФайла.Проект);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоПроектнойЗадаче(СтруктураРеквизитов, Знач ПроектнаяЗадача)
	
	РеквизитыПроектнойЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроектнаяЗадача, "Наименование, Владелец");
	
	СтруктураРеквизитов.Вставить("Тема", РеквизитыПроектнойЗадачи.Наименование);
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыПроектнойЗадачи.Владелец);
	СтруктураРеквизитов.Вставить("Предмет", ПроектнаяЗадача);
	
	Для каждого ИсполнительСтрока Из ПроектнаяЗадача.Исполнители Цикл
		
		Исполнитель = ИсполнительСтрока.Исполнитель;
		
		Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			
			МассивАдресов = ПолучитьАдресаЭлектроннойПочты(Исполнитель);
			
			Если МассивАдресов.Количество() <> 0 Тогда
				
				Для Каждого Адрес Из МассивАдресов Цикл	
					СтруктураАдресата = Новый Структура;
					Представление = Строка(Исполнитель);
					
					Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
						Адрес,
						Представление);
					
					СтруктураАдресата.Вставить("Адресат", Адресат);
					СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоМероприятию(СтруктураРеквизитов, Знач Мероприятие)
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие, "Наименование, Проект, ЭтоГруппа");
	
	Если РеквизитыМероприятия.ЭтоГруппа = Истина Тогда
		ВызватьИсключение НСтр("ru = 'Выберите мероприятие, а не группу.'; en = 'Select an event, not a group.'");
	КонецЕсли;	
	
	СтруктураРеквизитов.Вставить("Тема", РеквизитыМероприятия.Наименование);
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыМероприятия.Проект);
	СтруктураРеквизитов.Вставить("Предмет", Мероприятие);
	
	УчастникиМероприятия = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
	
	Для каждого УчастникМероприятия Из УчастникиМероприятия Цикл
		
		Исполнитель = УчастникМероприятия.Исполнитель;
		
		Если ЗначениеЗаполнено(Исполнитель)
			И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			
			МассивАдресов = ПолучитьАдресаЭлектроннойПочты(Исполнитель);
			
			Для Каждого Адрес Из МассивАдресов Цикл
				
				СтруктураАдресата = Новый Структура;
				
				Представление = Строка(Исполнитель);
				
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
					Адрес,
					Представление);
				
				СтруктураАдресата.Вставить("Адресат", Адресат);
				
				СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоЗадачеИсполнителя(СтруктураРеквизитов, Знач ЗадачаИсполнителя)
	
	РеквизитыЗадачиИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаИсполнителя, "Наименование, Проект");
	
	СтруктураРеквизитов.Вставить("Тема", РеквизитыЗадачиИсполнителя.Наименование);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыЗадачиИсполнителя.Проект);
	СтруктураРеквизитов.Вставить("Предмет", ЗадачаИсполнителя);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоСообщению(СтруктураРеквизитов, Знач Сообщение)
	
	ВладелецСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ВладелецСообщения");
	СтруктураРеквизитов.Вставить("Тема", ВладелецСообщения);
	СтруктураРеквизитов.Вставить("Предмет", Сообщение);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоУведомлениюПрограммы(
	СтруктураРеквизитов,
	Знач УведомлениеПрограммы)
	
	КраткоеОписание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УведомлениеПрограммы, "КраткоеОписание");
	СтруктураРеквизитов.Вставить("Тема", СтрПолучитьСтроку(КраткоеОписание, 1));
	СтруктураРеквизитов.Вставить("Предмет", УведомлениеПрограммы);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоКонтролюОбъектов(СтруктураРеквизитов, Знач Контроль)
	
	ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
		Контроль,
		ТипТекста,
		Кодировка,
		ТипОтвета);
		
	ПредметКонтроля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контроль, "Предмет");	
	Если ЗначениеЗаполнено(ПредметКонтроля) Тогда 
		СтруктураРеквизитов.Вставить("Предмет", ПредметКонтроля);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПредметКонтроля)
			Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(ПредметКонтроля)
			Или ДелопроизводствоКлиентСервер.ЭтоФайл(ПредметКонтроля)
			Или ДелопроизводствоКлиентСервер.ЭтоЗадачаИсполнителя(ПредметКонтроля) 
			Или ОбщегоНазначения.ЭтоБизнесПроцесс(ПредметКонтроля.Метаданные()) Тогда 
			
			СтруктураРеквизитов.Вставить("Проект", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметКонтроля, "Проект"));
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(ПредметКонтроля) Тогда 
				
			СтруктураРеквизитов.Вставить("Проект", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметКонтроля, "Владелец"));
			
		ИначеЕсли ТипЗнч(ПредметКонтроля) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			
			КорневоеПисьмо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметКонтроля, "КорневоеПисьмо");
			РеквизитыКорневогоПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КорневоеПисьмо, "Проект, Предмет");
			
			СтруктураРеквизитов.Вставить("Проект", РеквизитыКорневогоПисьма.Проект);
			СтруктураРеквизитов.Вставить("Предмет", РеквизитыКорневогоПисьма.Предмет);
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроект(ПредметКонтроля)Тогда 
			
			СтруктураРеквизитов.Вставить("Проект", ПредметКонтроля);
			
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	Для Каждого Участник Из Контроль.Исполнители Цикл
		
		Исполнитель = Участник.Исполнитель;
		Если ЗначениеЗаполнено(Исполнитель) Тогда 
			Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
				СтруктураАдресата = Новый Структура;
				СтруктураАдресата.Вставить("Адресат", Исполнитель);
				СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
			Иначе 
				МассивАдресов = ПолучитьАдресаЭлектроннойПочты(Исполнитель);
				
				Для Каждого Адрес Из МассивАдресов Цикл
					
					СтруктураАдресата = Новый Структура;
					
					Представление = Строка(Исполнитель);
					
					Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
						Адрес,
						Представление);
					
					СтруктураАдресата.Вставить("Адресат", Адресат);
					СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоОтсутствию(СтруктураРеквизитов, Знач Отсутствие)
	
	СтруктураРеквизитов.Вставить("Предмет", Отсутствие);
	
	Тема = Отсутствия.ПолучитьПредставлениеОтсутствияДляТемыПисьма(Отсутствие);
	
	Если Не СтруктураРеквизитов.Свойство("ПолучателиПисьма") Тогда
		СтруктураРеквизитов.Вставить("ПолучателиПисьма", Новый Массив);
	КонецЕсли;
	
	ПолучателиПисьмаОбОтсутствии = Отсутствия.ПолучателиПисьмаОбОтсутствии(Отсутствие);
	Для Каждого Получатель Из ПолучателиПисьмаОбОтсутствии Цикл
		ВключитьПользователяВАдресаты(Получатель, СтруктураРеквизитов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоШаблонуПисьма(СтруктураРеквизитов, Знач ШаблонПисьма)
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонПисьма,
		"ТекстПисьмаHTMLХранилище, ТекстХранилище, Кодировка, УчетнаяЗапись, 
		|Важность, Тема, ТипТекста, Предмет, Проект, Автор, ОбщийШаблон");
	СтруктураРеквизитов.Вставить("Тема", РеквизитыШаблона.Тема);
	СтруктураРеквизитов.Вставить("Проект", РеквизитыШаблона.Проект);
	СтруктураРеквизитов.Вставить("Предмет", РеквизитыШаблона.Предмет);
	СтруктураРеквизитов.Вставить("Кодировка", РеквизитыШаблона.Кодировка);
	СтруктураРеквизитов.Вставить("Важность", РеквизитыШаблона.Важность);
	СтруктураРеквизитов.Вставить("ТипТекста", РеквизитыШаблона.ТипТекста);
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.УчетнаяЗапись) Тогда 
		МассивУчетныхЗаписей = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиТекущегоПользователя();
		
		Если МассивУчетныхЗаписей.Количество() > 0 
			И МассивУчетныхЗаписей.Найти(РеквизитыШаблона.УчетнаяЗапись) <> Неопределено Тогда 
			СтруктураРеквизитов.Вставить("УчетнаяЗапись", РеквизитыШаблона.УчетнаяЗапись);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПолучателиПисьма = ШаблонПисьма.ПолучателиПисьма.Выгрузить();
	ТаблицаПолучателиКопий = ШаблонПисьма.ПолучателиКопий.Выгрузить();
	ТаблицаПолучателиОтвета = ШаблонПисьма.ПолучателиОтвета.Выгрузить();
	ТаблицаПолучателиСкрытыхКопий = ШаблонПисьма.ПолучателиСкрытыхКопий.Выгрузить();
	
	Если ШаблонПисьма.ГруппыПолучателей.Количество() > 0 Тогда 
		Счетчик = 0;
		Для Каждого Шаблон Из ШаблонПисьма.ГруппыПолучателей Цикл 
			Если ТипЗнч(Шаблон.Группа) = Тип("СправочникСсылка.РабочиеГруппы") Тогда 
				ТаблицаПользователей = ПользователиСерверПовтИсп.ПолучитьПользователейВГруппе(Шаблон.Группа); 
			Иначе 
				ТаблицаПользователей = ПользователиСерверПовтИсп.ПолучитьПользователейВПодразделении(Шаблон.Группа); 
			КонецЕсли;
			
			Для Каждого Строка Из ТаблицаПользователей Цикл
				
				Адрес = ВстроеннаяПочтаСервер.ПолучитьОсновнойАдрес(Строка.ПользователиСсылка);
				Если ЗначениеЗаполнено(Адрес) Тогда
					Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(Адрес, Строка(Строка.ПользователиСсылка));
					
					Если Шаблон.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда 
						НоваяСтрока = ТаблицаПолучателиКопий.Добавить();
					ИначеЕсли Шаблон.ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда 
						НоваяСтрока = ТаблицаПолучателиСкрытыхКопий.Добавить();
					Иначе 
						НоваяСтрока = ТаблицаПолучателиПисьма.Добавить();
					КонецЕсли;
					
					НоваяСтрока.Адресат = Адресат;
					НоваяСтрока.ПорядковыйНомер = Шаблон.ПорядковыйНомер + Счетчик;
					Счетчик = Счетчик + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("ПолучателиПисьма", ТаблицаПолучателиПисьма);
	СтруктураРеквизитов.Вставить("ПолучателиКопий", ТаблицаПолучателиКопий);
	СтруктураРеквизитов.Вставить("ПолучателиОтвета", ТаблицаПолучателиОтвета);
	СтруктураРеквизитов.Вставить("ПолучателиСкрытыхКопий", ТаблицаПолучателиСкрытыхКопий);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРеквизитовПоКонтрольнойТочке(СтруктураРеквизитов, Знач КТ)
	
	СтруктураРеквизитов.Вставить("Предмет", КТ);
	
	РеквизитыКТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КТ, "Наименование, ОбъектКТ");
	
	СтруктураРеквизитов.Вставить("Тема", РеквизитыКТ.Наименование);
	Если ТипЗнч(РеквизитыКТ.ОбъектКТ) = Тип("СправочникСсылка.Проекты") Тогда 
		СтруктураРеквизитов.Вставить("Проект", РеквизитыКТ.ОбъектКТ);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

Функция ПолучитьАдресаЭлектроннойПочты(Контрагент)
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		Контрагент,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Возврат ТаблицаКонтактов.ВыгрузитьКолонку("Значение");	
	
КонецФункции

Процедура ВключитьПользователяВАдресаты(Пользователь, СтруктураРеквизитов)
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	МассивАдресов = ПолучитьАдресаЭлектроннойПочты(Пользователь);
	Если МассивАдресов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Адрес Из МассивАдресов Цикл
		СтруктураАдресата = Новый Структура;
		Представление = Строка(Пользователь);
		Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
			Адрес,
			Представление);
		СтруктураАдресата.Вставить("Адресат", Адресат);
		
		СтруктураРеквизитов.ПолучателиПисьма.Добавить(СтруктураАдресата);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТекстомПисьма

// Устанавливает содержание письма
//
Процедура УстановитьСодержаниеПисьма(
	Знач Текст,
	Знач ТипТекстаПисьма = Неопределено,
	Знач КодировкаПисьма = Неопределено) Экспорт
	
	Если Не ЭтоНовый() Тогда
		РегистрыСведений.HTMLПредставленияСодержанияПисем.Удалить(Ссылка);
	КонецЕсли;
	
	ТипТекста = ?(ЗначениеЗаполнено(ТипТекстаПисьма),
		ТипТекстаПисьма,
		Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст);
	
	Кодировка = ?(ЗначениеЗаполнено(КодировкаПисьма),
		КодировкаПисьма,
		"utf-8");
	
	Почта.ИсправитьПереводыСтрок(Текст);
	
	Если ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстПисьмаHTMLХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
		
		ПростойТекст = РаботаС_HTML.ПолучитьТекстИзHTML(Текст);
		ТекстХранилище = Новый ХранилищеЗначения(ПростойТекст, Новый СжатиеДанных);
		
	Иначе	
		
		ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
		ТекстПисьмаHTMLХранилище = Новый ХранилищеЗначения("");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру "ТипТекста, Кодировка, Текст"
//
Функция ПолучитьСодержаниеПисьма() Экспорт
	
	Результат = Новый Структура("ТипТекста, Кодировка, Текст");
	
	ТекстПисьма = "";
	
	Если ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		Результат.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
		
		ТекстПисьма = ТекстПисьмаHTMLХранилище.Получить();
		Если ТекстПисьма = Неопределено Тогда
			ТекстПисьма = ТекстХранилище.Получить();
			Если ТекстПисьма = Неопределено Тогда
				ТекстПисьма = "";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Результат.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
		
		ТекстПисьма = ТекстХранилище.Получить();
		Если ТекстПисьма = Неопределено Тогда
			ТекстПисьма = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстПисьма) Тогда
		ТекстПисьма = " "; // обход ошибки платформы
	КонецЕсли;	
	
	Результат.Кодировка = Кодировка;
	Результат.Текст = ТекстПисьма;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст письма в виде простого текста
Функция ПолучитьТекстовоеПредставлениеСодержанияПисьма() Экспорт
	
	Результат = "";
	
	Если ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Результат = ТекстПисьмаHTMLХранилище.Получить();
		
		Если Результат = Неопределено Тогда
			
			Результат = ТекстХранилище.Получить();
			Если Результат = Неопределено Тогда
				Результат = "";
			КонецЕсли;
			
		Иначе
			
			Результат = РаботаС_HTML.ПолучитьТекстИзHTML(Результат, Кодировка);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ТекстХранилище.Получить();
		
		Если Результат = Неопределено Тогда
			
			Результат = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
