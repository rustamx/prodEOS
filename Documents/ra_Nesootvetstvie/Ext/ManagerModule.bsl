#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает Имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат "ra_Nesootvetstvie";
	
КонецФункции

Процедура АктуализироватьМассивОбязательныхРеквизитов(МассивРеквизитов, ДокументОбъект) Экспорт
	
	МассивРеквизитов.Очистить();
	
	//Виды предметов НС
	PrD								= Перечисления.ra_VidyPredmetovNesootvetstviya.PrD;
	RD								= Перечисления.ra_VidyPredmetovNesootvetstviya.RD;
	StroitelnyeKonstrukciiEhlement	= Перечисления.ra_VidyPredmetovNesootvetstviya.StroitelnyeKonstrukciiEhlement;
	NaladochnyeDokumentyRaboty		= Перечисления.ra_VidyPredmetovNesootvetstviya.NaladochnyeDokumentyRaboty;
	TekhnologicheskayaSistema		= Перечисления.ra_VidyPredmetovNesootvetstviya.TekhnologicheskayaSistema;
	Oborudovanie					= Перечисления.ra_VidyPredmetovNesootvetstviya.Oborudovanie;
	Materialy						= Перечисления.ra_VidyPredmetovNesootvetstviya.Materialy;
	Processy						= Перечисления.ra_VidyPredmetovNesootvetstviya.Processy;
	
	//Этапы выявления
	СтроительноМонтажныеРаботы	= Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.СтроительноМонтажныеРаботы;
	ПускоНаладочныеРаботы		= Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.ПускоНаладочныеРаботы;
	Эксплуатация				= Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.Эксплуатация;
	Изготовление				= Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.Изготовление;
	
	//Общие реквизиты
	МассивРеквизитов.Добавить("DataVyyavleniya");
	МассивРеквизитов.Добавить("VidKontrolnoyOperacii");
	МассивРеквизитов.Добавить("Ploshchadka");
	Если НЕ ДокументОбъект.VidObektaNesootvetstviya = Processy Тогда
		МассивРеквизитов.Добавить("Proekt");
		МассивРеквизитов.Добавить("Obekt");
	КонецЕсли;
	
	//Выявивший
	МассивРеквизитов.Добавить("VyyavivshayaOrganizaciya");
	МассивРеквизитов.Добавить("VyyavivsheePodrazdelenie");
	МассивРеквизитов.Добавить("VyyavivsheeLico");
	
	//Место выявления
	Если ДокументОбъект.VidObektaNesootvetstviya = RD Тогда
		Если ДокументОбъект.EhtapVyyavleniya = СтроительноМонтажныеРаботы
				ИЛИ ДокументОбъект.EhtapVyyavleniya = ПускоНаладочныеРаботы
				ИЛИ ДокументОбъект.EhtapVyyavleniya = Эксплуатация Тогда
			МассивРеквизитов.Добавить("ZdanieSooruzhenie");
			МассивРеквизитов.Добавить("MestoVyyavleniyaNS");
		КонецЕсли;
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = StroitelnyeKonstrukciiEhlement
			ИЛИ ДокументОбъект.VidObektaNesootvetstviya = NaladochnyeDokumentyRaboty
			ИЛИ ДокументОбъект.VidObektaNesootvetstviya = TekhnologicheskayaSistema Тогда
		МассивРеквизитов.Добавить("ZdanieSooruzhenie");
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = Oborudovanie
			ИЛИ ДокументОбъект.VidObektaNesootvetstviya = Materialy Тогда
		Если ДокументОбъект.EhtapVyyavleniya = СтроительноМонтажныеРаботы
				ИЛИ ДокументОбъект.EhtapVyyavleniya = ПускоНаладочныеРаботы
				ИЛИ ДокументОбъект.EhtapVyyavleniya = Эксплуатация Тогда
			МассивРеквизитов.Добавить("ZdanieSooruzhenie");
		КонецЕсли;
	КонецЕсли;
	
	//Описание предмета
	Если ДокументОбъект.VidObektaNesootvetstviya = PrD Тогда
		МассивРеквизитов.Добавить("ProektnayaDokumentaciya");
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = RD Тогда
		МассивРеквизитов.Добавить("RabochayaDokumentaciya");
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = StroitelnyeKonstrukciiEhlement Тогда
		МассивРеквизитов.Добавить("OboznachenieINaimenovaniePredmeta");
		МассивРеквизитов.Добавить("RabochayaDokumentaciya");
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = NaladochnyeDokumentyRaboty Тогда
		МассивРеквизитов.Добавить("OboznachenieINaimenovaniePredmeta");
		МассивРеквизитов.Добавить("NaimenovanieTekhnologicheskojSistemy");
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = TekhnologicheskayaSistema Тогда
		МассивРеквизитов.Добавить("NaimenovanieTekhnologicheskojSistemy");
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = Oborudovanie Тогда
		Если ДокументОбъект.EhtapVyyavleniya = Изготовление Тогда
			МассивРеквизитов.Добавить("ChertezhnyjNomer");
		ИначеЕсли ДокументОбъект.EhtapVyyavleniya = СтроительноМонтажныеРаботы
				ИЛИ ДокументОбъект.EhtapVyyavleniya = ПускоНаладочныеРаботы
				ИЛИ ДокументОбъект.EhtapVyyavleniya = Эксплуатация Тогда
			МассивРеквизитов.Добавить("NaimenovanieOborudovaniya");
		КонецЕсли;
	ИначеЕсли ДокументОбъект.VidObektaNesootvetstviya = Materialy Тогда
		МассивРеквизитов.Добавить("NaimenovanieOborudovaniya");
		МассивРеквизитов.Добавить("ChertezhnyjNomer");
	КонецЕсли;
	
	//Описание несоответствия
	МассивРеквизитов.Добавить("VidNesootvetstviya");
	МассивРеквизитов.Добавить("PodrobnoeOpisanie");
	МассивРеквизитов.Добавить("NarushennyeTrebovaniya");
	Если ДокументОбъект.VidObektaNesootvetstviya = TekhnologicheskayaSistema
		Или ДокументОбъект.VidObektaNesootvetstviya = Oborudovanie Тогда
			
		МассивРеквизитов.Добавить("KlassBezopasnosti");
		МассивРеквизитов.Добавить("NomerPlanaKachestva");
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
		
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати, СтруктураПараметров) Экспорт
	
	ра_ОбщегоНазначения.ВыполнитьЗаполнениеКомандПечатиДокументаЕОС(КомандыПечати, СтруктураПараметров);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ra_Nesootvetstvie";
	КомандаПечати.Идентификатор = "НерезультативныеМероприятия";
	КомандаПечати.Представление = НСтр("ru = 'Нерезультативные мероприятия'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Функция ЛистСогласования(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	СогласованиеПредметы.Ссылка
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
		|ГДЕ
		|	СогласованиеПредметы.Предмет В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Исполнители.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Исполнители.ЗадачаИсполнителя = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА Исполнители.Исполнитель
		|		ИНАЧЕ Исполнители.ЗадачаИсполнителя.ТекущийИсполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА Исполнители.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|			ТОГДА Исполнители.Исполнитель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РольИсполнителя,
		|	Исполнители.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
		|	Исполнители.Ссылка.НомерИтерации КАК НомерИтерации
		|ПОМЕСТИТЬ Согласующие
		|ИЗ
		|	БизнесПроцесс.Согласование.Исполнители КАК Исполнители
		|ГДЕ
		|	Исполнители.Ссылка В(ВЫБРАТЬ Ссылка ИЗ ВТ_БизнесПроцессы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Согласующие.Ссылка КАК Ссылка,
		|	Согласующие.Исполнитель КАК Исполнитель,
		|	СведенияОПользователяхДокументооборот.Должность.Представление КАК Должность,
		|	Согласующие.РольИсполнителя,
		|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения
		|ИЗ
		|	Согласующие КАК Согласующие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО Согласующие.Исполнитель = СведенияОПользователяхДокументооборот.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|		ПО Согласующие.Ссылка = РезультатыСогласования.Ссылка
		|			И Согласующие.ЗадачаИсполнителя = РезультатыСогласования.ЗадачаИсполнителя
		|			И Согласующие.НомерИтерации = РезультатыСогласования.НомерИтерации
		|ИТОГИ ПО
		|	Ссылка";
		
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");

	ПервыйДокумент = Истина;
	
	Для Каждого СтрДерева Из Дерево.Строки Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Предметы = Мультипредметность.ПолучитьПредметыПроцесса(СтрДерева.Ссылка);
		СтрокаПредметов = "";
		Для Каждого Строка Из Предметы Цикл
			СтрокаПредметов = СтрокаПредметов + ?(ПустаяСтрока(СтрокаПредметов),"","," + Символы.ПС)
				+ Строка.Предмет.Метаданные().ПредставлениеОбъекта + " """ + Строка(Строка.Предмет) + """";
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтрокаПредметов) Тогда
			ОбластьШапка.Параметры.Предмет = СтрокаПредметов;
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;	
 		
		ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
		Для Каждого СтрИсполнитель Из СтрДерева.Строки Цикл
			ОбластьИсполнители.Параметры.Заполнить(СтрИсполнитель);
			
			Если ЗначениеЗаполнено(СтрИсполнитель.Исполнитель) Тогда
				ОбластьИсполнители.Параметры.Исполнитель = СтрИсполнитель.Исполнитель;
				
				Если ЗначениеЗаполнено(СтрИсполнитель.РольИсполнителя) Тогда 
					ОтборСтрок = Новый Структура("Исполнитель", СтрИсполнитель.Исполнитель);
					НайденныеСтроки = СтрДерева.Строки.НайтиСтроки(ОтборСтрок);
					Если НайденныеСтроки.Количество() > 1 Тогда // есть одинаковые исполнители
						ОбластьИсполнители.Параметры.Должность = СтрИсполнитель.РольИсполнителя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрИсполнитель.РезультатСогласования) Тогда 
				ОбластьИсполнители.Параметры.ДатаИсполнения = Неопределено;
				ОбластьИсполнители.Параметры.РезультатВыполнения = Неопределено;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьИсполнители);
		КонецЦикла;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрДерева.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция НерезультативныеМероприятия(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_НерезультативныеМероприятия";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ra_Nesootvetstvie.Ссылка КАК Ссылка,
	|	ra_Nesootvetstvie.Дата КАК Дата,
	|	ra_Nesootvetstvie.Номер КАК Номер,
	|	ra_Nesootvetstvie.NomerVnutrennij КАК NomerVnutrennij,
	|	ra_Nesootvetstvie.Ploshchadka КАК Ploshchadka,
	|	ra_Nesootvetstvie.Proekt КАК Proekt,
	|	ra_Nesootvetstvie.Obekt КАК Obekt,
	|	ra_Nesootvetstvie.PodrobnoeOpisanie КАК PodrobnoeOpisanie
	|ПОМЕСТИТЬ РазрешенныеНесоответствия
	|ИЗ
	|	Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
	|ГДЕ
	|	ra_Nesootvetstvie.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ra_Nesootvetstvie.Ссылка КАК Ссылка,
	|	ra_Nesootvetstvie.Дата КАК Дата,
	|	ra_Nesootvetstvie.Номер КАК Номер,
	|	ra_Nesootvetstvie.NomerVnutrennij КАК НомерВнутренний,
	|	ПРЕДСТАВЛЕНИЕ(ra_PrichinyNesootvetstvij.Opisanie) КАК КореннаяПричина,
	|	ПРЕДСТАВЛЕНИЕ(ra_Nesootvetstvie.Ploshchadka) КАК Площадка,
	|	ПРЕДСТАВЛЕНИЕ(ra_Nesootvetstvie.Proekt) КАК Проект,
	|	ПРЕДСТАВЛЕНИЕ(ra_Nesootvetstvie.Obekt) КАК Объект,
	|	ra_Nesootvetstvie.PodrobnoeOpisanie КАК Описание,
	|	ra_PrichinyNesootvetstvij.KodPrichiny КАК КодПричины
	|ИЗ
	|	РазрешенныеНесоответствия КАК ra_Nesootvetstvie
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_PrichinyNesootvetstvij КАК ra_PrichinyNesootvetstvij
	|		ПО (ra_PrichinyNesootvetstvij.Nesootvetstvie = ra_Nesootvetstvie.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ra_KorrektiruyushcheeDejstvie.KodPrichiny КАК КодПричины,
	|	ra_KorrektiruyushcheeDejstvie.Opisanie КАК ОписаниеДействия,
	|	ra_KorrektiruyushcheeDejstvie.Nesootvetstvie КАК Несоответствие,
	|	ra_KorrektiruyushcheeDejstvie.OpisaniePrichiny КАК КореннаяПричина,
	|	ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.Дата КАК Дата,
	|	ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.Номер КАК Номер,
	|	ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.NomerVnutrennij КАК НомерВнутренний,
	|	ПРЕДСТАВЛЕНИЕ(ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.Proekt) КАК Проект,
	|	ПРЕДСТАВЛЕНИЕ(ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.Ploshchadka) КАК Площадка,
	|	ПРЕДСТАВЛЕНИЕ(ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.Obekt) КАК Объект,
	|	ra_KorrektiruyushcheeDejstvie.Nesootvetstvie.PodrobnoeOpisanie КАК Описание,
	|	ra_KorrektiruyushcheeDejstvie.FakticheskijSrok КАК ДатаВыполнения
	|ИЗ
	|	РазрешенныеНесоответствия КАК РазрешенныеНесоответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ra_OcenkiZnachimostiNesootvetstvij.СрезПоследних(
	|				,
	|				Nesootvetstvie В
	|					(ВЫБРАТЬ
	|						РазрешенныеНесоответствия.Ссылка КАК Ссылка
	|					ИЗ
	|						РазрешенныеНесоответствия КАК РазрешенныеНесоответствия)) КАК ПоследниеОценки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_OcenkaZnachimosti.PovtornyeNesootvetstviya КАК ra_OcenkaZnachimostiPovtornyeNesootvetstviya
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_KorrektiruyushcheeDejstvie КАК ra_KorrektiruyushcheeDejstvie
	|				ПО ra_OcenkaZnachimostiPovtornyeNesootvetstviya.Nesootvetstvie = ra_KorrektiruyushcheeDejstvie.Nesootvetstvie
	|			ПО ПоследниеОценки.Регистратор = ra_OcenkaZnachimostiPovtornyeNesootvetstviya.Ссылка
	|		ПО РазрешенныеНесоответствия.Ссылка = ПоследниеОценки.Nesootvetstvie
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодПричины
	|ИТОГИ
	|	МАКСИМУМ(КореннаяПричина),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(НомерВнутренний),
	|	МАКСИМУМ(Проект),
	|	МАКСИМУМ(Площадка),
	|	МАКСИМУМ(Объект),
	|	МАКСИМУМ(Описание)
	|ПО
	|	Несоответствие,
	|	КодПричины";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ra_Nesootvetstvie.ПФ_MXL_НерезультативныеМероприятия");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьКореннаяПричина = Макет.ПолучитьОбласть("СтрокаКореннаяПричина");
		ОбластьМероприятие = Макет.ПолучитьОбласть("ПовторноеМероприятие");
		ОбластьПричина = Макет.ПолучитьОбласть("СтрокаПричина");
		ОбластьДействие = Макет.ПолучитьОбласть("СтрокаДействие");
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка.Параметры.Площадка = Выборка.Площадка;
		ОбластьШапка.Параметры.Описание = СтрЗаменить(Выборка.Описание, Символ(13) + Символ(10), "");
		ОбластьШапка.Параметры.Несоответствие = "" + Выборка.Номер + ?(Выборка.НомерВнутренний = "", "", " / " + Выборка.НомерВнутренний) + " от " + Формат(Выборка.Дата, "ДЛФ=Д");
		ОбластьШапка.Параметры.ПроектОбъект = Выборка.Проект + ?(Выборка.Проект > "" И Выборка.Объект > "", ", ", "") + Выборка.Объект;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ОбластьКореннаяПричина.Параметры.КореннаяПричина = СтрЗаменить(ВыборкаДетали.КореннаяПричина, Символ(13) + Символ(10), "");
			
			ТабличныйДокумент.Вывести(ОбластьКореннаяПричина);
		КонецЦикла;
		
		Выборка = Пакет[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			ОбластьМероприятие.Параметры.Площадка = Выборка.Площадка;
			ОбластьМероприятие.Параметры.Описание = СтрЗаменить(Выборка.Описание, Символ(13) + Символ(10), "");
			ОбластьМероприятие.Параметры.Несоответствие = "" + Выборка.Номер + ?(Выборка.НомерВнутренний = "", "", " / " + Выборка.НомерВнутренний) + " от " + Формат(Выборка.Дата, "ДЛФ=Д");
			ОбластьМероприятие.Параметры.ПроектОбъект = Выборка.Проект + ?(Выборка.Проект > "" И Выборка.Объект > "", ", ", "") + Выборка.Объект;
			
			ТабличныйДокумент.Вывести(ОбластьМероприятие);
			
			ВыборкаПричины = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПричины.Следующий() Цикл
				ОбластьПричина.Параметры.КореннаяПричина = СтрЗаменить(ВыборкаПричины.КореннаяПричина, Символ(13) + Символ(10), "");
				
				ТабличныйДокумент.Вывести(ОбластьПричина);
				
				ВыборкаДействия = ВыборкаПричины.Выбрать();
				Пока ВыборкаДействия.Следующий() Цикл
					ОбластьДействие.Параметры.ОписаниеДействия = "Корректирующее действие: " + СтрЗаменить(ВыборкаДействия.ОписаниеДействия, Символ(13) + Символ(10), "");
					ОбластьДействие.Параметры.ДатаВыполнения = ?(ЗначениеЗаполнено(ВыборкаДействия.ДатаВыполнения), Формат(ВыборкаДействия.ДатаВыполнения, "ДФ=дд.ММ.гггг"), "Не выполнено");
					
					ТабличныйДокумент.Вывести(ОбластьДействие);
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласования") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "ЛистСогласования", "Лист согласования", ЛистСогласования(МассивОбъектов, ОбъектыПечати),,
				"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	//++ТСК Ткаченко Иван 27.07.2018
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НерезультативныеМероприятия") Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "НерезультативныеМероприятия", "Нерезультативные мероприятия", НерезультативныеМероприятия(МассивОбъектов, ОбъектыПечати));
	//--ТСК Ткаченко Иван 27.07.2018		
	КонецЕсли;
		
КонецПроцедуры

Функция ОписаниеПредметаНесоответствия(Несоответствие) Экспорт
	
	Если Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.PrD Тогда
		
		Возврат Строка(Несоответствие.ProektnayaDokumentaciya);
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.RD Тогда
		
		Возврат Строка(Несоответствие.RabochayaDokumentaciya);
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.StroitelnyeKonstrukciiEhlement Тогда
		
		Возврат Строка(Несоответствие.ZdanieSooruzhenie) + ?(ПустаяСтрока(Несоответствие.MestoVyyavleniyaNS), "", ", " + Несоответствие.MestoVyyavleniyaNS);
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.NaladochnyeDokumentyRaboty Тогда
		
		Возврат Несоответствие.OboznachenieINaimenovaniePredmeta;
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.TekhnologicheskayaSistema Тогда
		
		Возврат Строка(Несоответствие.NaimenovanieTekhnologicheskojSistemy);
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Oborudovanie Тогда
		
		Возврат Строка(Несоответствие.NaimenovanieOborudovaniya);
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Materialy Тогда
		
		Возврат Строка(Несоответствие.NaimenovanieOborudovaniya);
		
	ИначеЕсли Несоответствие.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Processy Тогда
		
		Возврат Несоответствие.OboznachenieINaimenovaniePredmeta;
		
	Иначе
		
		Возврат НСтр("ru = 'Не указан'; en = 'Undefined'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Несоответствие", ОбъектДоступа.Ссылка);
	Запрос.УстановитьПараметр("ВидОбъекта", ОбъектДоступа.ВидДокумента);
	Запрос.УстановитьПараметр("Подразделение", ОбъектДоступа.VyyavivsheePodrazdelenie);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидОбъекта КАК ВидДокумента,
	|	&Подразделение КАК Подразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ВидОбъекта,
	|	ra_KomandyNesootvetstvij.Podrazdelenie
	|ИЗ
	|	РегистрСведений.ra_KomandyNesootvetstvij КАК ra_KomandyNesootvetstvij
	|ГДЕ
	|	ra_KomandyNesootvetstvij.Nesootvetstvie = &Несоответствие
	|	И ra_KomandyNesootvetstvij.Podrazdelenie <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Ссылка", ОбъектДоступа.Ссылка);
		ОписаниеОбъекта.Вставить("ВидДокумента", Выборка.ВидДокумента);
		ОписаниеОбъекта.Вставить("Подразделение", Выборка.Подразделение);
		
		ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОписаниеОбъекта, ТаблицаДескрипторов);
		
		// Дескриптор для локальных администраторов.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЛокальныхАдминистраторов") Тогда
			ТипыСсылокКОбработке = ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующиеРазрезыДоступа();
			Если ТипыСсылокКОбработке.Найти(ТипЗнч(ОбъектДоступа.Ссылка)) <> Неопределено Тогда
				ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаДляЛокальныхАдминистраторов(ОписаниеОбъекта, ТаблицаДескрипторов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаПоРабочейГруппе(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидДокумента;
	ДескрипторДоступа.Подразделение = ОбъектДоступа.Подразделение;
	
КонецПроцедуры

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка,
			|ВидДокумента,
			|VyyavivshayaOrganizaciya,
			|VyyavivsheePodrazdelenie";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора, Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("VyyavivsheeLico", Справочники.Пользователи.ПустаяСсылка());
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ra_Nesootvetstvie") Тогда
		Запрос.УстановитьПараметр("Nesootvetstvie", Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ra_Nesootvetstvie") Тогда
		Запрос.УстановитьПараметр("Nesootvetstvie", Объект.Ссылка);
		Запрос.УстановитьПараметр("VyyavivsheeLico", Объект.VyyavivsheeLico);
	Иначе // объекты производных документов
		Запрос.УстановитьПараметр("Nesootvetstvie", Объект.Nesootvetstvie);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомандаПоОбменуЛучшимиПрактиками.Polzovatel КАК Участник
	|ИЗ
	|	РегистрСведений.ra_KomandyPoObmenuLuchshimiPraktikami КАК КомандаПоОбменуЛучшимиПрактиками
	|ГДЕ
	|	КомандаПоОбменуЛучшимиПрактиками.Nesootvetstvie = &Nesootvetstvie";
	
	УчастникиПроцесса = Запрос.Выполнить().Выгрузить();
	
	Для каждого УчастникПроцесса Из УчастникиПроцесса Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			УчастникПроцесса.Участник,
			Ложь);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Несоответствие.VyyavivsheeLico КАК Участник
	|ИЗ
	|	Документ.ra_Nesootvetstvie КАК Несоответствие
	|ГДЕ
	|	Несоответствие.Ссылка = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&VyyavivsheeLico
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КомандаНесоответствия.Otvetstvennyj
	|ИЗ
	|	РегистрСведений.ra_KomandyNesootvetstvij КАК КомандаНесоответствия
	|ГДЕ
	|	КомандаНесоответствия.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Согласующие.Polzovatel
	|ИЗ
	|	Документ.ra_AktObUstraneniiNesootvetstviya.Soglasuyushchie КАК Согласующие
	|ГДЕ
	|	Согласующие.Ссылка.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Согласующие.Polzovatel
	|ИЗ
	|	Документ.ra_ItogovyjOtchetONesootvetstvii.Soglasuyushchie КАК Согласующие
	|ГДЕ
	|	Согласующие.Ссылка.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Согласующие.Polzovatel
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast1.Soglasuyushchie КАК Согласующие
	|ГДЕ
	|	Согласующие.Ссылка.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Согласующие.Polzovatel
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast2.Soglasuyushchie КАК Согласующие
	|ГДЕ
	|	Согласующие.Ссылка.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Согласующие.Polzovatel
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast3.Soglasuyushchie КАК Согласующие
	|ГДЕ
	|	Согласующие.Ссылка.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Согласующие.Polzovatel
	|ИЗ
	|	Документ.ra_Uvedomlenie.Soglasuyushchie КАК Согласующие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних( , ВЫРАЗИТЬ(Документ КАК Документ.ra_Uvedomlenie).Nesootvetstvie = &Nesootvetstvie) КАК ИсторияСостоянийДокументов
	|		ПО Согласующие.Ссылка = ИсторияСостоянийДокументов.Документ
	|			И НЕ ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован)
	|ГДЕ
	|	Согласующие.Ссылка.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КорректирующееДействие.Otvetstvennyj
	|ИЗ
	|	Документ.ra_KorrektiruyushcheeDejstvie КАК КорректирующееДействие
	|ГДЕ
	|	КорректирующееДействие.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПредупреждающееДействие.Otvetstvennyj
	|ИЗ
	|	Документ.ra_PreduprezhdayushcheeDejstvie КАК ПредупреждающееДействие
	|ГДЕ
	|	ПредупреждающееДействие.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВСД_Коррекция.Otvetstvennyj
	|ИЗ
	|	Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК ВСД_Коррекция
	|ГДЕ
	|	ВСД_Коррекция.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Уведомление.OtvetstvennyjZaKachestvoPoluchatel
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК Уведомление
	|ГДЕ
	|	Уведомление.Nesootvetstvie = &Nesootvetstvie
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Уведомление.OtvetstvennyjZaKachestvoOtpravitel
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК Уведомление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних( , ВЫРАЗИТЬ(Документ КАК Документ.ra_Uvedomlenie).Nesootvetstvie = &Nesootvetstvie) КАК ИсторияСостоянийДокументов
	|		ПО Уведомление.Ссылка = ИсторияСостоянийДокументов.Документ
	|			И НЕ ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован)
	|ГДЕ
	|	Уведомление.Nesootvetstvie = &Nesootvetstvie";
	
	УчастникиПроцесса = Запрос.Выполнить().Выгрузить();
	
	Для каждого УчастникПроцесса Из УчастникиПроцесса Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			УчастникПроцесса.Участник,
			Истина);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Предметы", ПроизводныеДокументы(Запрос.Параметры.Nesootvetstvie));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияСобытийЗадач.ра_СталИсполнитель КАК Участник
	|ИЗ
	|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|		ПО ИсторияСобытийЗадач.Задача = ЗадачаИсполнителяПредметы.Ссылка
	|ГДЕ
	|	ЗадачаИсполнителяПредметы.Предмет В(&Предметы)
	|	И ИсторияСобытийЗадач.ра_СталИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	УчастникиПроцесса = Запрос.Выполнить().Выгрузить();
	
	Для каждого УчастникПроцесса Из УчастникиПроцесса Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			УчастникПроцесса.Участник,
			Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДескрипторыПроизводныхДокументов(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Несоответствие", ОбъектДоступа.Nesootvetstvie);
	Запрос.УстановитьПараметр("ВидОбъекта", Справочники.ВидыВнутреннихДокументов.ra_Nesootvetstvie);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидОбъекта КАК ВидДокумента,
	|	ra_Nesootvetstvie.VyyavivsheePodrazdelenie КАК Подразделение
	|ИЗ
	|	Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
	|ГДЕ
	|	ra_Nesootvetstvie.Ссылка = &Несоответствие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ВидОбъекта,
	|	ra_KomandyNesootvetstvij.Podrazdelenie
	|ИЗ
	|	РегистрСведений.ra_KomandyNesootvetstvij КАК ra_KomandyNesootvetstvij
	|ГДЕ
	|	ra_KomandyNesootvetstvij.Nesootvetstvie = &Несоответствие
	|	И ra_KomandyNesootvetstvij.Podrazdelenie <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Ссылка", ОбъектДоступа.Ссылка);
		ОписаниеОбъекта.Вставить("ВидДокумента", Выборка.ВидДокумента);
		ОписаниеОбъекта.Вставить("Подразделение", Выборка.Подразделение);
		
		ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОписаниеОбъекта, ТаблицаДескрипторов);
		
		// Дескриптор для локальных администраторов.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЛокальныхАдминистраторов") Тогда
			ТипыСсылокКОбработке = ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующиеРазрезыДоступа();
			Если ТипыСсылокКОбработке.Найти(ТипЗнч(ОбъектДоступа.Ссылка)) <> Неопределено Тогда
				ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаДляЛокальныхАдминистраторов(ОписаниеОбъекта, ТаблицаДескрипторов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаПоРабочейГруппе(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

Функция ПолучитьПоляДоступаПроизводногоДокумента() Экспорт
	
	Возврат "Ссылка,
			|ВидДокумента,
			|Nesootvetstvie";
	
КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуОтветственныхПоНесоответствию(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Organizaciya КАК Организация,
	|	Otvetstvennyj КАК Пользователь,
	|	RolOrganizacii КАК РольОрганизации,
	|	OtvetstvennyjZaKachestvo КАК ОтветственныйЗаКачество,
	|	LiderNesootvetstviya КАК ЛидерНесоответствия,
	|	PervyjDopustivshij КАК ПервыйДопустивший
	|ИЗ
	|	РегистрСведений.ra_KomandyNesootvetstvij
	|ГДЕ
	|	Nesootvetstvie = &Несоответствие");
	
	Запрос.УстановитьПараметр("Несоответствие", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПоследняяДопустившаяОрганизация(Несоответствие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ra_Uvedomlenie.OrganizaciyaPoluchatel КАК Организация
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК ra_Uvedomlenie
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументов
	|		ПО ra_Uvedomlenie.Ссылка = ИсторияСостоянийДокументов.Документ
	|ГДЕ
	|	ra_Uvedomlenie.Nesootvetstvie = &Несоответствие
	|	И ra_Uvedomlenie.ПометкаУдаления = ЛОЖЬ
	|	И ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Принято)
	|	И ra_Uvedomlenie.VidOperacii <> ЗНАЧЕНИЕ(Перечисление.ra_VidyUvedomleniy.UvedomlenieZakazchiku)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияСостоянийДокументов.Период УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Организация, Неопределено);
	
КонецФункции

// Проверяет наличие производных документов заданных типов, а также для каждого
// типа документов факт того, что все они имеют статус, заданный для данного типа.
//
// Параметры:
//  Ссылка            - Ссылка на документ ra_Nesootvetstvie, производные документы которого необходимо проверить.
//
//  ПараметрыПроверки - Структура - в качестве ключа передается имя таблицы документа, а в качестве
//                      значения статус документа, который должны иметь все документы.
//
// Возвращаемое значение:
//  Структура         - содержит имена таблиц существующих документов(ключи) и результат проверки статусов (значения).
//
Функция ПроверитьНаличиеПроизводныхДокументов(Ссылка, ПараметрыПроверки) Экспорт
	
	Возврат ра_ОбщегоНазначенияПовтИсп.ПроверитьНаличиеПроизводныхДокументовНесоответствия(Ссылка, ПараметрыПроверки);
	
КонецФункции

Функция ПроизводныеДокументы(Ссылка, Подробно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ТСК Ткаченко И.Л.; 21.08.2018; task#1103{
	Если Подробно Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Несоответствие", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка КАК Ссылка,
		|	""Акт"" КАК ВидДокумента,
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден) КАК Утвержден
		|ИЗ
		|	Документ.ra_AktObUstraneniiNesootvetstviya КАК ТаблицаДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
		|		ПО ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""ИтоговыйОтчет"",
		|	Ложь
		|ИЗ
		|	Документ.ra_ItogovyjOtchetONesootvetstvii КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""КорректирующееДействие"",
		|	Ложь
		|ИЗ
		|	Документ.ra_KorrektiruyushcheeDejstvie КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""ОценкаЗначимости"",
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден) КАК Утвержден
		|ИЗ
		|	Документ.ra_OcenkaZnachimosti КАК ТаблицаДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
		|		ПО ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""Отчет1"",
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден) КАК Утвержден
		|ИЗ
		|	Документ.ra_OtchetONesootvetstviiCHast1 КАК ТаблицаДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
		|		ПО ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""Отчет2"",
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден) КАК Утвержден
		|ИЗ
		|	Документ.ra_OtchetONesootvetstviiCHast2 КАК ТаблицаДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
		|		ПО ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""Отчет3"",
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден) КАК Утвержден
		|ИЗ
		|	Документ.ra_OtchetONesootvetstviiCHast3 КАК ТаблицаДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
		|		ПО ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""ПредупреждающееДействие"",
		|	Ложь
		|ИЗ
		|	Документ.ra_PreduprezhdayushcheeDejstvie КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""Уведомление"",
		|	Ложь
		|ИЗ
		|	Документ.ra_Uvedomlenie КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка,
		|	""ВСД"",
		|	Ложь
		|ИЗ
		|	Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие";
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
	// ТСК Ткаченко И.Л.; 21.08.2018; task#1103}
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Несоответствие", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ra_AktObUstraneniiNesootvetstviya КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_ItogovyjOtchetONesootvetstvii КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_KorrektiruyushcheeDejstvie КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_OcenkaZnachimosti КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_OtchetONesootvetstviiCHast1 КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_OtchetONesootvetstviiCHast2 КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_OtchetONesootvetstviiCHast3 КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_PreduprezhdayushcheeDejstvie КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_Uvedomlenie КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка
		|ИЗ
		|	Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Nesootvetstvie = &Несоответствие";
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонецЕсли;
	
КонецФункции

Функция СведенияОСтатусеНесоответствия(ДокументСсылка, СостояниеДокумента = Неопределено) Экспорт
	
	Несоответствие = Документы.ra_Nesootvetstvie.ПустаяСсылка();
	Результат = Новый Структура("Несоответствие, ТребуетсяОбновить, Состояние", Несоответствие, Ложь, Перечисления.СостоянияДокументов.ПустаяСсылка());
	
	Если НЕ ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(ДокументСсылка, "УправлениеНесоответствиями") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументСсылка, "Nesootvetstvie") Тогда
		Несоответствие = ДокументСсылка.Nesootvetstvie;
		Результат.Вставить("Несоответствие", Несоответствие);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТИПЗНАЧЕНИЯ(ТаблицаДокумент.Ссылка) КАК ВидДокумента,
	                      |	ИсторияСостоянийДокументовСрезПоследних.Состояние КАК Состояние
	                      |ИЗ
	                      |	Документ.ra_AktObUstraneniiNesootvetstviya КАК ТаблицаДокумент
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
	                      |		ПО (ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка)
	                      |ГДЕ
	                      |	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТИПЗНАЧЕНИЯ(ТаблицаДокумент.Ссылка),
	                      |	ИсторияСостоянийДокументовСрезПоследних.Состояние
	                      |ИЗ
	                      |	Документ.ra_ItogovyjOtchetONesootvetstvii КАК ТаблицаДокумент
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
	                      |		ПО (ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка)
	                      |ГДЕ
	                      |	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТИПЗНАЧЕНИЯ(ТаблицаДокумент.Ссылка),
	                      |	ИсторияСостоянийДокументовСрезПоследних.Состояние
	                      |ИЗ
	                      |	Документ.ra_OtchetONesootvetstviiCHast1 КАК ТаблицаДокумент
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
	                      |		ПО (ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка)
	                      |ГДЕ
	                      |	ТаблицаДокумент.Nesootvetstvie = &Несоответствие
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТИПЗНАЧЕНИЯ(ТаблицаДокумент.Ссылка),
	                      |	ИсторияСостоянийДокументовСрезПоследних.Состояние
	                      |ИЗ
	                      |	Документ.ra_Uvedomlenie КАК ТаблицаДокумент
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
	                      |		ПО (ИсторияСостоянийДокументовСрезПоследних.Документ = ТаблицаДокумент.Ссылка)
	                      |ГДЕ
	                      |	ТаблицаДокумент.Nesootvetstvie = &Несоответствие");
	
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();;
	
	Если СостояниеДокумента <> Неопределено Тогда
		СтрокаТЗ = ТаблицаДокументов.Добавить();
		СтрокаТЗ.ВидДокумента = ТипЗнч(ДокументСсылка);
		СтрокаТЗ.Состояние = СостояниеДокумента;
	КонецЕсли;
	
	СостоянияДокументов = Перечисления.СостоянияДокументов;
	
	СтрокаТЗ = ТаблицаДокументов.Найти("Несоответствие", "ВидДокумента");
	Если СтрокаТЗ <> Неопределено Тогда
		ТекущийСтатус = СтрокаТЗ.Состояние;
	Иначе
		ТекущийСтатус = СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;
	
	НовыйСтатус = Результат.Состояние;
	
	//Состояние Зарегистрировано, Принято, Отклонено
	ВидДокумента = Тип("ДокументСсылка.ra_Uvedomlenie");
	СтруктураОтбор = Новый Структура("ВидДокумента", ВидДокумента);
	МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбор);
	
	ЕстьПринятое = Ложь;
	ТолькоАннулированные = Истина;
		
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если СтрокаМассива.Состояние = СостоянияДокументов.ra_Принято Тогда
			ЕстьПринятое = Истина;
		КонецЕсли;
		
		Если СтрокаМассива.Состояние <> СостоянияДокументов.ra_Аннулирован Тогда
			ТолькоАннулированные = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТолькоАннулированные = ТолькоАннулированные И МассивСтрок.Количество();
	
	Если ЕстьПринятое Тогда
		НовыйСтатус = СостоянияДокументов.ra_Принято;
	ИначеЕсли ТолькоАннулированные Тогда
		НовыйСтатус = СостоянияДокументов.Отклонен;
	Иначе
		НовыйСтатус = СостоянияДокументов.Зарегистрирован;
	КонецЕсли;
		
	//Состояние Принято допустившей стороной
	ВидДокумента = Тип("ДокументСсылка.ra_Uvedomlenie");
	СтруктураОтбор = Новый Структура("ВидДокумента, Состояние", ВидДокумента, СостоянияДокументов.ra_Принято);
	МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		НовыйСтатус = СостоянияДокументов.ra_Принято;
	КонецЕсли;
	
	//Состояние На устранении
	ВидДокумента = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast1");
	СтруктураОтбор = Новый Структура("ВидДокумента, Состояние", ВидДокумента, СостоянияДокументов.ra_Утвержден);
	МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		НовыйСтатус = СостоянияДокументов.ra_НаУстранении;
	КонецЕсли;
	
	//Состояние Устранено
	ВидДокумента = Тип("ДокументСсылка.ra_AktObUstraneniiNesootvetstviya");
	СтруктураОтбор = Новый Структура("ВидДокумента, Состояние", ВидДокумента, СостоянияДокументов.ra_Утвержден);
	МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		НовыйСтатус = СостоянияДокументов.ra_Устранено;
	КонецЕсли;
	
	//Состояние Завершено
	ВидДокумента = Тип("ДокументСсылка.ra_ItogovyjOtchetONesootvetstvii");
	СтруктураОтбор = Новый Структура("ВидДокумента, Состояние", ВидДокумента, СостоянияДокументов.ra_Утвержден);
	МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		НовыйСтатус = СостоянияДокументов.ra_Завершен;
	КонецЕсли;
	
	Результат.ТребуетсяОбновить = ТекущийСтатус <> НовыйСтатус;
	Результат.Состояние = НовыйСтатус;
	
	Возврат Результат;
	
КонецФункции

// Создает версию файла по основному шаблону документа
Процедура СоздатьФайлСВерсией(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // RLS
	
	РеквизитыОбъекта = ра_ОбщегоНазначения.СтруктураПараметровДляПечатныхФормЕОС(Объект);
	РеквизитыОбъекта.Вставить("ОсновнойФайл", Неопределено);
	
	ПечатныеФормы = ра_ОбщегоНазначения.СформироватьТаблицуФайловПечатныхФормЕОС(РеквизитыОбъекта);
	
	Если ПечатныеФормы.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.ра_ОсновнойФайл = ИСТИНА
		|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФайлСсылка = Выборка.Ссылка;
		Иначе
			ФайлСсылка = Справочники.Файлы.ПолучитьСсылку();
		КонецЕсли;
		
		Ответ = ра_ОбщегоНазначенияКлиентСервер.СформироватьФайлPDFПоШаблону(ПечатныеФормы[0].Ссылка, Объект.Ссылка,, ФайлСсылка);
		
		Если ПустаяСтрока(Ответ.ОписаниеОшибки) Тогда
			ФайлКлиента = Новый Файл(Ответ.ИмяФайлаПечатиPDF);
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ФайлКлиента);
			СведенияОФайле.АдресВременногоХранилищаФайла = Ответ.ИмяФайлаПечатиPDF;
			СведенияОФайле.АдресВременногоХранилищаТекста = "";
			СведенияОФайле.ЗаписатьВИсторию = Истина;
			СведенияОФайле.ИмяБезРасширения = ПечатныеФормы[0].Наименование;
			СведенияОФайле.ПараметрыРаспознавания = Неопределено;
			СведенияОФайле.СписокКатегорий = Неопределено;
			СведенияОФайле.ДополнительныеПараметры = РеквизитыОбъекта;
			СведенияОФайле.Вставить("ра_ОсновнойФайл");
			СведенияОФайле.Вставить("ра_ФайлСсылка", ФайлСсылка);
			
			Если Выборка.Количество() Тогда
				РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(ФайлСсылка, СведенияОФайле);
			Иначе
				РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Объект.Ссылка, СведенияОФайле);
			КонецЕсли;
		Иначе
			ВызватьИсключение Ответ.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоАудитПроцессов(Несоответствие) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Несоответствие, "VidObektaNesootvetstviya,VidKontrolnoyOperacii.OblastPrimeneniya");
	
	Возврат Реквизиты.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Processy
		И Реквизиты.VidKontrolnoyOperaciiOblastPrimeneniya = Справочники.ra_OblastiPrimeneniya.АудитСМК;
	
КонецФункции

Функция ЭтоВыявившийНесоответствие(Несоответствие, УчитыватьАннулирование = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Если УчитыватьАннулирование Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияСостоянийДокументов.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(, Документ = &Несоответствие) КАК ИсторияСостоянийДокументов
		|ГДЕ
		|	ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован)";
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	               
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ra_Uvedomlenie.OtvetstvennyjZaKachestvoPoluchatel КАК VyyavivsheeLico,
	|	ra_Uvedomlenie.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Uvedomlenie КАК ra_Uvedomlenie
	|		ПО ИсторияСостоянийДокументовСрезПоследних.Документ = ra_Uvedomlenie.Ссылка
	|ГДЕ
	|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Принято)
	|	И ra_Uvedomlenie.Nesootvetstvie = &Несоответствие
	|	И ra_Uvedomlenie.OtvetstvennyjZaKachestvoPoluchatel В
	|			(ВЫБРАТЬ
	|				СоставСубъектовПравДоступа.Пользователь КАК Пользователь
	|			ИЗ
	|				РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
	|			ГДЕ
	|				СоставСубъектовПравДоступа.ПользовательОснование = &Пользователь
	|				И СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.ДелегированиеПрав
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				&Пользователь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ra_Nesootvetstvie.VyyavivsheeLico,
	|	ra_Nesootvetstvie.Дата
	|ИЗ
	|	Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
	|ГДЕ
	|	ra_Nesootvetstvie.Ссылка = &Несоответствие
	|	И ra_Nesootvetstvie.VyyavivsheeLico В
	|			(ВЫБРАТЬ
	|				СоставСубъектовПравДоступа.Пользователь КАК Пользователь
	|			ИЗ
	|				РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
	|			ГДЕ
	|				СоставСубъектовПравДоступа.ПользовательОснование = &Пользователь
	|				И СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.ДелегированиеПрав
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				&Пользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область ИнтеграцияBitrix

#Область Файлы

Функция ЕстьМетодСписокВладельцевФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция СписокВладельцевФайлов(Ссылка) Экспорт
	
	ПроизводныеДокументы = ПроизводныеДокументы(Ссылка);
	ПроизводныеДокументы.Добавить(Ссылка);
	
	Возврат ПроизводныеДокументы;
	
КонецФункции

#КонецОбласти

Процедура СформироватьМассивДанныхGetList(Результат, ПолноеИмя, ПараметрыЗапросаHTTP) Экспорт
	
	ОбъектМетаданных = Метаданные.Документы.ra_Nesootvetstvie;
	
	ТаблицаРеквизитов = ра_ОбменДанными.ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
	
	АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов);
	
	ТекстЗапросаВложенныеТаблицы = ПолучитьТекстЗапросаВложенныеТаблицы(ТаблицаРеквизитов, ПараметрыЗапросаHTTP);
	ТекстЗапросаСоединений = ПолучитьТекстЗапросаСоединений();
	// ТСК Близнюк С.И.; 05.12.2018; task#2029{
	//ВыгрузкаВExcel = ПараметрыЗапросаHTTP.Получить("$ExportToExcel");
	//Если ВыгрузкаВExcel = "true" Тогда 
	// ТСК Близнюк С.И.; 05.12.2018; task#2029}
		// ТСК Ткаченко И.Л.; 30.08.2018; task#1123{
		Фильтр = ПараметрыЗапросаHTTP.Получить("$filter");
		// ТСК Близнюк С.И.; 05.12.2018; task#2029{
		//Если СтрНайти(Фильтр,"Organizaciya") <> 0 Тогда 
	    Если СтрНайти(Фильтр,"Organizaciya") <> 0 И СтрНайти(Фильтр,"VyyavivshayaOrganizaciya") = 0 Тогда 
	    // ТСК Близнюк С.И.; 05.12.2018; task#2029}
			СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "Organizaciya", "Справочник.Контрагенты", "Уведомления.OrganizaciyaPoluchatel");
			ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
			
			ДополнитьТекстЗапросаОграничений(ТекстЗапросаСоединений);
		КонецЕсли;
		// ТСК Ткаченко И.Л.; 30.08.2018; task#1123}
	//КонецЕсли;
	
	Запрос = ра_ОбменДанными.ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ПолноеИмя, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений, Истина);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ДополнитьТаблицуДаннымиИндикаторов(ТаблицаДанных);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзЗапроса(Запрос, ПараметрыЗапросаHTTP, ТаблицаДанных);
	Результат.Вставить("value", МассивДанных);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		МассивКолонок = ПолучитьПолучитьМассивКолонокСписка();
		МассивКнопок = ПолучитьМассивКнопок(Запрос.Параметры);
		МассивФильтров = ПолучитьМассивФильтровСписка();
		Результат.Вставить("form_settings", МассивКолонок);
		Результат.Вставить("button_settings", МассивКнопок);
		Результат.Вставить("filter_settings", МассивФильтров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДаннымиИндикаторов(ТаблицаДанных)
	
	КолонкаТЗ = ТаблицаДанных.Колонки.Найти("Ref_Key");
	
	Если КолонкаТЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокНесоответствий = ТаблицаДанных.ВыгрузитьКолонку("Ref_Key");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокНесоответствий", СписокНесоответствий);
	Запрос.УстановитьПараметр("ВидВСД", Справочники.ra_VidyPoruchenij.ВСД);
	Запрос.УстановитьПараметр("ВидКоррекция", Справочники.ra_VidyPoruchenij.Коррекция);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументНесоответствие.Ссылка КАК Несоответствие,
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Проект)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВСД_Проект,
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НаИсполнении)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВСД_НаИсполнении,
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВСД_Исполнен,
	|	0 КАК Коррекция_Проект,
	|	0 КАК Коррекция_НаИсполнении,
	|	0 КАК Коррекция_Исполнен,
	|	0 КАК КД_Проект,
	|	0 КАК КД_НаИсполнении,
	|	0 КАК КД_Исполнен,
	|	0 КАК ПД_Проект,
	|	0 КАК ПД_НаИсполнении,
	|	0 КАК ПД_Исполнен
	|ПОМЕСТИТЬ ВТ_ДанныеРасчетаИндикаторов
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(
	|			,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya)
	|				И ВЫРАЗИТЬ(Документ КАК Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya).Nesootvetstvie В (&СписокНесоответствий)
	|				И ВЫРАЗИТЬ(Документ КАК Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya).VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ (&ВидВСД)) КАК ИсторияСостоянийДокументовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ДокументНесоответствие
	|		ПО (ВЫРАЗИТЬ(ИсторияСостоянийДокументовСрезПоследних.Документ КАК Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya).Nesootvetstvie = ДокументНесоответствие.Ссылка)

	|СГРУППИРОВАТЬ ПО
	|	ДокументНесоответствие.Ссылка

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	ДокументНесоответствие.Ссылка,
	|	0,
	|	0,
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Проект)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НаИсполнении)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(
	|			,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya)
	|				И ВЫРАЗИТЬ(Документ КАК Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya).Nesootvetstvie В (&СписокНесоответствий)
	|				И ВЫРАЗИТЬ(Документ КАК Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya).VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ (&ВидКоррекция)) КАК ИсторияСостоянийДокументовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ДокументНесоответствие
	|		ПО (ВЫРАЗИТЬ(ИсторияСостоянийДокументовСрезПоследних.Документ КАК Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya).Nesootvetstvie = ДокументНесоответствие.Ссылка)

	|СГРУППИРОВАТЬ ПО
	|	ДокументНесоответствие.Ссылка

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	ДокументНесоответствие.Ссылка,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Проект)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НаИсполнении)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(
	|			,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ra_KorrektiruyushcheeDejstvie)
	|				И ВЫРАЗИТЬ(Документ КАК Документ.ra_KorrektiruyushcheeDejstvie).Nesootvetstvie В (&СписокНесоответствий)) КАК ИсторияСостоянийДокументовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ДокументНесоответствие
	|		ПО (ВЫРАЗИТЬ(ИсторияСостоянийДокументовСрезПоследних.Документ КАК Документ.ra_KorrektiruyushcheeDejstvie).Nesootvetstvie = ДокументНесоответствие.Ссылка)

	|СГРУППИРОВАТЬ ПО
	|	ДокументНесоответствие.Ссылка
	
	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	ДокументНесоответствие.Ссылка,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Проект)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НаИсполнении)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(
	|			,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ra_PreduprezhdayushcheeDejstvie)
	|				И ВЫРАЗИТЬ(Документ КАК Документ.ra_PreduprezhdayushcheeDejstvie).Nesootvetstvie В (&СписокНесоответствий)) КАК ИсторияСостоянийДокументовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ДокументНесоответствие
	|		ПО (ВЫРАЗИТЬ(ИсторияСостоянийДокументовСрезПоследних.Документ КАК Документ.ra_PreduprezhdayushcheeDejstvie).Nesootvetstvie = ДокументНесоответствие.Ссылка)

	|СГРУППИРОВАТЬ ПО
	|	ДокументНесоответствие.Ссылка
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДанныеРасчетаИндикаторов.Несоответствие КАК Несоответствие,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_Исполнен)
	|					ИНАЧЕ ""-""
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_Исполнен)
	|	КОНЕЦ КАК VSD1,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_Исполнен)
	|					ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_Проект)
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.ВСД_НаИсполнении)
	|	КОНЕЦ КАК VSD2,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_Исполнен)
	|					ИНАЧЕ ""-""
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_Исполнен)
	|	КОНЕЦ КАК Corr1,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_Исполнен)
	|					ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_Проект)
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.Коррекция_НаИсполнении)
	|	КОНЕЦ КАК Corr2,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_Исполнен)
	|					ИНАЧЕ ""-""
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_Исполнен)
	|	КОНЕЦ КАК KD1,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_Исполнен)
	|					ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_Проект)
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.КД_НаИсполнении)
	|	КОНЕЦ КАК KD2,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_Исполнен)
	|					ИНАЧЕ ""-""
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_Исполнен)
	|	КОНЕЦ КАК PD1,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_НаИсполнении) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_Исполнен) > 0
	|						ТОГДА СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_Исполнен)
	|					ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_Проект)
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(ВТ_ДанныеРасчетаИндикаторов.ПД_НаИсполнении)
	|	КОНЕЦ КАК PD2
	|ИЗ
	|	ВТ_ДанныеРасчетаИндикаторов КАК ВТ_ДанныеРасчетаИндикаторов
	
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеРасчетаИндикаторов.Несоответствие";
	
	ТаблицаИндикаторов = Запрос.Выполнить().Выгрузить();
	ТаблицаИндикаторов.Индексы.Добавить("Несоответствие");
	
	ТаблицаДанных.Колонки.Добавить("Indicator_VSD____Presentation");
	ТаблицаДанных.Колонки.Добавить("Indicator_Correction____Presentation");
	ТаблицаДанных.Колонки.Добавить("Indicator_KD____Presentation");
	ТаблицаДанных.Колонки.Добавить("Indicator_PD____Presentation");
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтрокаИндикатор = ТаблицаИндикаторов.Найти(СтрокаДанных["Ref_Key"], "Несоответствие");
		
		Если СтрокаИндикатор <> Неопределено Тогда
		
			СтрокаДанных["Indicator_VSD____Presentation"]			= СтрШаблон("%1/%2", СтрокаИндикатор["VSD1"],	СтрокаИндикатор["VSD2"]);
			СтрокаДанных["Indicator_Correction____Presentation"]	= СтрШаблон("%1/%2", СтрокаИндикатор["Corr1"],	СтрокаИндикатор["Corr2"]);
			СтрокаДанных["Indicator_KD____Presentation"]			= СтрШаблон("%1/%2", СтрокаИндикатор["KD1"],	СтрокаИндикатор["KD2"]);
			СтрокаДанных["Indicator_PD____Presentation"]			= СтрШаблон("%1/%2", СтрокаИндикатор["PD1"],	СтрокаИндикатор["PD2"]);
			
		Иначе
			
			СтрокаДанных["Indicator_VSD____Presentation"]			= "-/0";
			СтрокаДанных["Indicator_Correction____Presentation"]	= "-/0";
			СтрокаДанных["Indicator_KD____Presentation"]			= "-/0";
			СтрокаДанных["Indicator_PD____Presentation"]			= "-/0";
			
		КонецЕсли;
					
	КонецЦикла;
		
КонецПроцедуры

Процедура АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов)
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "Leader", "Справочник.Пользователи", "ЕСТЬNULL(РС_КомандаНС.Otvetstvennyj, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "ObemRabot", "Перечисление.ra_ObemyRabot", "ЕСТЬNULL(РС_ОценкиЗначимостиНС.ObemRabot, ЗНАЧЕНИЕ(Перечисление.ra_ObemyRabot.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "DocStatus", "Перечисление.СостоянияДокументов", "ЕСТЬNULL(РС_ИсторияСостояний.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusIndex", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ИндексСтатуса, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusTotal", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ВсегоСтатусов, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusType", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ТипСтатуса, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВложенныеТаблицы(ТаблицаРеквизитов, ПараметрыЗапросаHTTP) Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстЗапросаСоединений() Экспорт
	
	Возврат "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_KomandyNesootvetstvij КАК РС_КомандаНС
			|	ПО ОсновнаяТаблица.Ссылка = РС_КомандаНС.Nesootvetstvie
			|		И РС_КомандаНС.LiderNesootvetstviya
			|		И РС_КомандаНС.PervyjDopustivshij
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_OcenkiZnachimostiNesootvetstvij.СрезПоследних КАК РС_ОценкиЗначимостиНС
			|	ПО ОсновнаяТаблица.Ссылка = РС_ОценкиЗначимостиНС.Nesootvetstvie
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК РС_ИсторияСостояний
			|	ПО ОсновнаяТаблица.Ссылка = РС_ИсторияСостояний.Документ
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ра_ИндексыСтатусовВидовОбъектов КАК РС_ИндексыСтатусовВидовОбъектов
			|	ПО ОсновнаяТаблица.ВидДокумента = РС_ИндексыСтатусовВидовОбъектов.ВидДокумента
			|	И РС_ИсторияСостояний.Состояние = РС_ИндексыСтатусовВидовОбъектов.СостояниеДокумента";
	
КонецФункции

Функция СформироватьМассивДанныхРолевойМодели(ДокументОбъект, ПараметрыФормирования = Неопределено) Экспорт
	
	Возврат Обработки.ра_ФормыБитрикс.Создать().ОписаниеФормы(ДокументОбъект.Метаданные(), ДокументОбъект);
	
КонецФункции

Функция ПолучитьМассивКнопок(ДокументОбъект) Экспорт
	
	ВидФормы = "ФормаОбъекта";
	Несоответствие = Документы.ra_Nesootvetstvie.ПустаяСсылка();
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ВидФормы = "ФормаСписка";
		Если ДокументОбъект.Свойство("Nesootvetstvie") Тогда
			Несоответствие = ДокументОбъект.Nesootvetstvie;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ra_Nesootvetstvie") Тогда
		Несоответствие = ДокументОбъект.Ссылка;
	Иначе
		Несоответствие = ДокументОбъект;
	КонецЕсли;
	
	МассивКнопок = Новый Массив;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Полномочия = РегистрыСведений.ra_KomandyNesootvetstvij.ПолномочияТекущегоПользователя(Несоответствие);
		
		РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Несоответствие,
			Новый Структура("ra_Uvedomlenie,ra_AktObUstraneniiNesootvetstviya"));
		
		ИмяКнопки = "Save";
		ОписаниеКнопки = НСтр("ru = 'Зарегистрировать'; en = 'Register'");
		КнопкаСохранить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаСохранить.Вставить("ObjectTypeLink", "Document_ra_Nesootvetstvie");
		КнопкаСохранить.Вставить("ObjectGUID", XMLСтрока(Несоответствие));
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("DocumentWriteMode", "Posting");
		КнопкаСохранить.Вставить("Parameters", ПараметрыКнопки);
		
		ИмяКнопки = "SaveDraft";
		ОписаниеКнопки = НСтр("ru = 'Сохранить черновик'; en = 'Save draft'");
		КнопкаСохранитьЧерновик = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаСохранитьЧерновик.Вставить("ObjectTypeLink", "Document_ra_Nesootvetstvie");
		КнопкаСохранитьЧерновик.Вставить("ObjectGUID", XMLСтрока(Несоответствие));
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("DocumentWriteMode", "Write");
		КнопкаСохранитьЧерновик.Вставить("Parameters", ПараметрыКнопки);
		
		ИмяКнопки = "Annul";
		ОписаниеКнопки = НСтр("ru = 'Аннулировать'; en = 'Annul'");
		КнопкаАннулировать = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаАннулировать.Вставить("ObjectTypeLink", "Document_ra_Nesootvetstvie");
		КнопкаАннулировать.Вставить("ObjectGUID", XMLСтрока(Несоответствие));
		
		//Кнопка Аннулировать должна сохранять документ, если не проведен
		Если Не Несоответствие.Пустая() Тогда
			Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Несоответствие, "Проведен");
			Если Проведен = Истина Тогда
				ПараметрыКнопки.Вставить("DocumentWriteMode", "Posting");
			КонецЕсли;
		КонецЕсли;
		КнопкаАннулировать.Вставить("Parameters", ПараметрыКнопки);
		
		ИмяКнопки = "Duplicate";
		ОписаниеКнопки = НСтр("ru = 'Дублировать'; en = 'Duplicate'");
		КнопкаДублировать = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаДублировать.Availability = Не Несоответствие.Пустая();
		КнопкаДублировать.Visibility = КнопкаДублировать.Availability;
		
		Если Не Несоответствие.Пустая() Тогда
			ЭтоВыявившийНС = Документы.ra_Nesootvetstvie.ЭтоВыявившийНесоответствие(Несоответствие);
			
			КнопкаСохранить.Availability =
				ЭтоВыявившийНС И Не РезультатыПроверки.Свойство("ra_Uvedomlenie")
					Или Полномочия.ПервыйЛидер И Не РезультатыПроверки.Свойство("ra_AktObUstraneniiNesootvetstviya");
					
			КнопкаСохранитьЧерновик.Availability = 
				Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Несоответствие, "Проведен");
			КнопкаСохранитьЧерновик.Visibility = КнопкаСохранитьЧерновик.Availability;	
			
			КнопкаАннулировать.Availability =
				ЭтоВыявившийНС И Не РезультатыПроверки.Свойство("ra_Uvedomlenie")
					Или (Полномочия.ОтветственныйЗаКачествоВыявившей Или Полномочия.ПервыйЛидер
					Или Полномочия.ОтветственныйЗаКачествоДопустившей)
						И Не РезультатыПроверки.Свойство("ra_AktObUstraneniiNesootvetstviya");
		Иначе
			КнопкаАннулировать.Availability = Ложь;
		КонецЕсли;
		
		КнопкаАннулировать.Visibility = КнопкаАннулировать.Availability;
		
		Если Не Несоответствие.Пустая() Тогда
			ИмяКнопки = "Download";
			ОписаниеКнопки = НСтр("ru = 'Загрузить файл с компьютера;Перетащить с помощью Drag’n’Drop';
				|en = 'Load file from computer;Drag’n’Drop'");
			КнопкаЗагрузить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
			КнопкаЗагрузить.Availability = Полномочия.ПервыйЛидер Или ЭтоВыявившийНС;
			КнопкаЗагрузить.Visibility = КнопкаЗагрузить.Availability;
		Иначе
			ИмяКнопки = "Download";
			ОписаниеКнопки = НСтр("ru = 'После создания документа;вы сможете прикреплять к нему файлы';
				|en = 'After creating a document;you can attach files to it'");
			КнопкаЗагрузить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
			КнопкаЗагрузить.Availability = Ложь;
		КонецЕсли;
		
		МассивКнопок.Добавить(КнопкаЗагрузить);
		МассивКнопок.Добавить(КнопкаСохранить);
		МассивКнопок.Добавить(КнопкаСохранитьЧерновик);
		МассивКнопок.Добавить(КнопкаДублировать);
		МассивКнопок.Добавить(КнопкаАннулировать);
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		
		ИмяКнопки = "ShowMore";
		ОписаниеКнопки = НСтр("ru = 'Показать еще'; en = 'Show more'");
		КнопкаПоказатьЕще = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		ИмяКнопки = "ExportToExcel";
		ОписаниеКнопки = НСтр("ru = 'Экспорт в Excel'; en = 'Export to Excel'");
		КнопкаЭкспортВExcel = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		ИмяКнопки = "Find";
		ОписаниеКнопки = НСтр("ru = 'Найти'; en = 'Find'");
		КнопкаНайти = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		ИмяКнопки = "Reset";
		ОписаниеКнопки = НСтр("ru = 'Сброс'; en = 'Reset'");
		КнопкаСброс = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		
		МассивКнопок.Добавить(КнопкаПоказатьЕще);
		МассивКнопок.Добавить(КнопкаЭкспортВExcel);
		МассивКнопок.Добавить(КнопкаНайти);
		МассивКнопок.Добавить(КнопкаСброс);
		
	КонецЕсли;
	
	Возврат МассивКнопок;
	
КонецФункции

Функция ПолучитьПолучитьМассивКолонокСписка() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ra_Nesootvetstvie;
	
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	РеквизитыОбъекта = МетаданныеДокумента.Реквизиты;
	СтандартныеРеквизитыОбъекта = МетаданныеДокумента.СтандартныеРеквизиты;
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Дата);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Номер);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.VidNesootvetstviya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Метаданные.РегистрыСведений.ra_OcenkiZnachimostiNesootvetstvij.Ресурсы.ObemRabot);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.PodrobnoeOpisanie);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "DocStatus", НСтр("ru = 'Статус'; en = 'Status'")), "Enumeration_СостоянияДокументов");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "Indicator_VSD", НСтр("ru = 'ВСД'; en = 'TRA'")), "String(10)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "Indicator_Correction", НСтр("ru = 'Корр'; en = 'Corr'")), "String(10)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "Indicator_KD", НСтр("ru = 'КД'; en = 'CA'")), "String(10)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "Indicator_PD", НСтр("ru = 'ПД'; en = 'PA'")), "String(10)");
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивФильтровСписка() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ra_Nesootvetstvie;
	
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	РеквизитыОбъекта = МетаданныеДокумента.Реквизиты;
	СтандартныеРеквизитыОбъекта = МетаданныеДокумента.СтандартныеРеквизиты;
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.DataVyyavleniya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Номер);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Метаданные.РегистрыСведений.ra_OcenkiZnachimostiNesootvetstvij.Ресурсы.ObemRabot);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "DocStatus", НСтр("ru = 'Статус'; en = 'Status'")), Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументов"));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.Ploshchadka);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.Proekt);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.EhtapVyyavleniya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.VidObektaNesootvetstviya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.VyyavivshayaOrganizaciya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.VidNesootvetstviya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.PodrobnoeOpisanie);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.NarushennyeTrebovaniya);
	
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "VidObektaNesootvetstviya", , , , , "OutputAllElements");
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "ObemRabot", , , , , "OutputAllElements");
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "DocStatus", , , , , "OutputAllElements");
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивЗаголовков(МассивДанных = Неопределено) Экспорт
	
	МассивЗаголовков = Новый Массив;
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("Name");
	ТаблицаЗаголовков.Колонки.Добавить("Description");
	
	ВидОбъектаНесоответствия = Неопределено;
	Для Каждого ТекЭлемент Из МассивДанных Цикл
		Если ТекЭлемент.Name = "VidObektaNesootvetstviya" Тогда
			ВидОбъектаНесоответствия = ТекЭлемент.value;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивДанных Цикл
		
		Если ТекЭлемент.Name = "DataPervichnojRegistracii" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "NomerPervichnojRegistracii" И ТекЭлемент.Visibility Тогда 
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Document";
			НоваяСтрока.Description = НСтр("ru = 'ДОКУМЕНТ ПЕРВИЧНОЙ РЕГИСТРАЦИИ'; en = 'PRIMARY REGISTRATION DOCUMENT'");
		КонецЕсли;
		
		Если ТекЭлемент.Name = "VyyavivsheeLico" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "VyyavivsheePodrazdelenie" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "VyyavivshayaOrganizaciya" И ТекЭлемент.Visibility Тогда 
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Detected";
			НоваяСтрока.Description = НСтр("ru = 'ВЫЯВИВШИЙ'; en = 'DETECTED'");
		КонецЕсли;
		
		Если ТекЭлемент.Name = "MestoVyyavleniyaNS" И ТекЭлемент.Visibility ИЛИ
			 ТекЭлемент.Name = "ZdanieSooruzhenie" И ТекЭлемент.Visibility Тогда
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Place";
			НоваяСтрока.Description = НСтр("ru = 'МЕСТО ВЫЯВЛЕНИЯ'; en = 'PLACE OF IDENTIFICATION'");
		КонецЕсли;
		
		Если ТекЭлемент.Name = "NaimenovanieOborudovaniya" И ТекЭлемент.Visibility 
			ИЛИ ТекЭлемент.Name = "ZavodskojNomerOborudovaniya" И ТекЭлемент.Visibility 
			ИЛИ ТекЭлемент.Name = "ChertezhnyjNomer" И ТекЭлемент.Visibility 
			ИЛИ ТекЭлемент.Name = "Oborudovanie" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "Sertifikat" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "ProektnayaDokumentaciya" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "RabochayaDokumentaciya" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "NaimenovanieTekhnologicheskojSistemy" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "OboznachenieINaimenovaniePredmeta" И ТекЭлемент.Visibility Тогда
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Subject";
			НоваяСтрока.Description = ?(ЗначениеЗаполнено(ВидОбъектаНесоответствия), ВРег(ВидОбъектаНесоответствия), " ");
			
		КонецЕсли;
		
		Если ТекЭлемент.Name = "VidNesootvetstviya" И ТекЭлемент.Visibility 
			ИЛИ ТекЭлемент.Name = "KlassBezopasnosti" И ТекЭлемент.Visibility 
			ИЛИ ТекЭлемент.Name = "PodrobnoeOpisanie" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "NarushennyeTrebovaniya" И ТекЭлемент.Visibility Тогда
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Description";
			НоваяСтрока.Description = НСтр("ru = 'ОПИСАНИЕ НЕСООТВЕТСТВИЯ'; en = 'DESCRIPTION OF NONCONFORMITY'");
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗаголовков.Свернуть("Name,Description");
	
	Для Каждого ТекСтрока Из ТаблицаЗаголовков Цикл
		МассивЗаголовков.Добавить(Новый Структура("Name,Description",ТекСтрока.Name,ТекСтрока.Description));
	КонецЦикла;
	
	Возврат МассивЗаголовков;
	
КонецФункции

Процедура ЗаполнитьГлавноеМенюОбъекта(ОбъектБД, МассивПунктовМеню) Экспорт
	
	ДоступностьИтоговогоОтчета = Истина;
	ВидимостьКД = Истина;
	ВидимостьПД = Истина;
	ВидимостьОКП = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ra_OcenkiZnachimostiNesootvetstvijСрезПоследних.ObemRabot КАК ObemRabot
	|ИЗ
	|	РегистрСведений.ra_OcenkiZnachimostiNesootvetstvij.СрезПоследних(, Nesootvetstvie = &Ссылка) КАК ra_OcenkiZnachimostiNesootvetstvijСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", ОбъектБД.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументыПоНесоответствию = ПроизводныеДокументы(ОбъектБД.Ссылка, Истина);
		
		Если Выборка.ObemRabot = Перечисления.ra_ObemyRabot.D3 Тогда
			
			ВидимостьКД = Ложь;
			ВидимостьПД = Ложь;
			ВидимостьОКП = Ложь;
			
			Если ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Акт",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Отчет1",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","ОценкаЗначимости",Истина)).Количество() = 2  Тогда 
				ДоступностьИтоговогоОтчета = Истина;
			Иначе
				ДоступностьИтоговогоОтчета = Ложь;
			КонецЕсли;
			
		ИначеЕсли Выборка.ObemRabot = Перечисления.ra_ObemyRabot.D6 Тогда
			
			ВидимостьПД = Ложь;
			
			Если  ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Акт",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Отчет1",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","ОценкаЗначимости",Истина)).Количество() = 2
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","КорректирующееДействие",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Отчет2",Истина)).Количество() <> 0 Тогда 
				ДоступностьИтоговогоОтчета = Истина;
			Иначе
				ДоступностьИтоговогоОтчета = Ложь;
			КонецЕсли;
			
		ИначеЕсли Выборка.ObemRabot = Перечисления.ra_ObemyRabot.D8 Тогда
			Если  ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Акт",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Отчет1",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","ОценкаЗначимости",Истина)).Количество() = 2
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","КорректирующееДействие",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Отчет2",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","Отчет3",Истина)).Количество() <> 0
				И ДокументыПоНесоответствию.НайтиСтроки(Новый Структура("ВидДокумента,Утвержден","ПредупреждающееДействие",Истина)).Количество() <> 0 Тогда 
				ДоступностьИтоговогоОтчета = Истина;
			Иначе
				ДоступностьИтоговогоОтчета = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ДоступностьИтоговогоОтчета = Ложь;
		ВидимостьКД = Ложь;
		ВидимостьПД = Ложь;
		ВидимостьОКП = Ложь;
	КонецЕсли;
	
	РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(ОбъектБД.Ссылка,
		Новый Структура("ra_ItogovyjOtchetONesootvetstvii", Перечисления.СостоянияДокументов.ra_Утвержден));
	
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","Description",	НСтр("ru = 'ОПИСАНИЕ НЕСООТВЕТСТВИЯ'; en = 'DESCRIPTION OF NONCONFORMITY'"), Истина, Истина));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","Notification",	НСтр("ru = 'УВЕДОМЛЕНИЕ О НЕСООТВЕТСТВИИ'; en = 'NOTIFICATION OF NONCONFORMITY'"), Истина, Истина));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","FormingTheTeam",	НСтр("ru = 'ФОРМИРОВАНИЕ КОМАНДЫ'; en = 'FORMING THE TEAM'"), Истина, Истина));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","Correction",		НСтр("ru = 'ВСД И КОРРЕКЦИЯ'; en = 'TRA & CORRECTION'"), Истина, Истина));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","Definition",		НСтр("ru = 'ОПРЕДЕЛЕНИЕ КОРЕННОЙ ПРИЧИНЫ'; en = 'DEFINITION OF THE ROOT CAUSE'"), Истина, ВидимостьОКП));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","CorrectiveActions",НСтр("ru = 'КОРРЕКТИРУЮЩИЕ ДЕЙСТВИЯ'; en = 'CORRECTIVE ACTIONS'"), Истина, ВидимостьКД));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","WarningAction",	НСтр("ru = 'ПРЕДУПРЕЖДАЮЩИЕ ДЕЙСТВИЯ'; en = 'PREVENTIVE ACTIONS'"), Истина, ВидимостьПД));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","FinalReport",	НСтр("ru = 'ИТОГОВЫЙ ОТЧЕТ'; en = 'FINAL REPORT'"), ДоступностьИтоговогоОтчета, Истина));
	МассивПунктовМеню.Добавить(Новый Структура("Name,Description,Availability,Visibility","BestPractice",	НСтр("ru = 'ОБМЕН ЛУЧШИМИ ПРАКТИКАМИ'; en = 'BEST PRACTICE EXCHANGE'"), Истина, РезультатыПроверки.Свойство("ra_ItogovyjOtchetONesootvetstvii")));
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаОграничений(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + " 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Uvedomlenie КАК Уведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументов
	|		ПО Уведомления.Ссылка = ИсторияСостоянийДокументов.Документ
	|			И НЕ ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован)
	|	ПО ОсновнаяТаблица.Ссылка = Уведомления.Nesootvetstvie
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументовНС
	|	ПО ОсновнаяТаблица.Ссылка = ИсторияСостоянийДокументовНС.Документ
	|		И НЕ ИсторияСостоянийДокументовНС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ra_Аннулирован)";
	
КонецПроцедуры

//V2

Функция ЕстьМетодДополнитьОписаниеМетаданных() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьОписаниеМетаданных(ОбработкаОбъект, Данные, ПараметрыФормирования) Экспорт
	
	Полномочия = РегистрыСведений.ra_KomandyNesootvetstvij.ПолномочияТекущегоПользователя(Данные.Ссылка);
	
	РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Данные.Ссылка,
		Новый Структура("ra_Uvedomlenie,ra_OtchetONesootvetstviiCHast1"));
	
	Если Данные.Ссылка.Пустая() Тогда
		ДоступностьВыявивший = (Данные.VyyavivsheeLico = ПараметрыСеанса.ТекущийПользователь)
			И Не РезультатыПроверки.Свойство("ra_Uvedomlenie");
		
		Если ЗначениеЗаполнено(Данные.OpisaniePredmetaKontrolyaID) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	1
			|ИЗ
			|	РегистрСведений.ra_OpisaniePredmetaKontrolya КАК ra_OpisaniePredmetaKontrolya
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_ZayavkaNaKontrolnuyuOperaciyu КАК ra_ZayavkaNaKontrolnuyuOperaciyu
			|		ПО (ra_OpisaniePredmetaKontrolya.ZayavkaNaKontrolnuyuOperaciyu = ra_ZayavkaNaKontrolnuyuOperaciyu.Ссылка)
			|			И (ra_OpisaniePredmetaKontrolya.ID = &ID)
			|			И (ra_ZayavkaNaKontrolnuyuOperaciyu.VvodInformaciiOZavershivshemsyaMeropriyatii = ИСТИНА)";
			Запрос.УстановитьПараметр("ID", Данные.OpisaniePredmetaKontrolyaID);
			ДоступностьВыявивший = ДоступностьВыявивший Или Не Запрос.Выполнить().Пустой();
		КонецЕсли;
	Иначе
		ДоступностьВыявивший = Документы.ra_Nesootvetstvie.ЭтоВыявившийНесоответствие(Данные.Ссылка)
			И Не РезультатыПроверки.Свойство("ra_Uvedomlenie");
	КонецЕсли;
	
	ДоступностьПервыйЛидер = Полномочия.ПервыйЛидер И Не РезультатыПроверки.Свойство("ra_OtchetONesootvetstviiCHast1");
	
	СостояниеСТипом = РегистрыСведений.ИсторияСостоянийДокументов.ПолучитьСостояниеДокументаСТипомСтатуса(Данные.Ссылка);
	
	Изготовление = Данные.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.Изготовление;
	
	РазработкаРабочейДокументации_Изготовление = Данные.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.РазработкаРабочейДокументации
		Или Данные.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.Изготовление;
	
	СМР_ПНР_Эксплуатация = Данные.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.СтроительноМонтажныеРаботы
		Или Данные.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.ПускоНаладочныеРаботы
		Или Данные.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.Эксплуатация;
	
	ОбработкаОбъект.ДобавитьПоле("", Метаданные.РегистрыСведений.ra_OcenkiZnachimostiNesootvetstvij.Ресурсы.ObemRabot);
	
	ОбработкаОбъект.ЗаместитьДанные("ObemRabot", РегистрыСведений.ra_OcenkiZnachimostiNesootvetstvij.ПолучитьОценкуНесоответствия(Данные.Ссылка));
	
	ОбработкаОбъект.ДобавитьПоле("",
		Новый Структура("Имя,Синоним,Тип", "DocStatus", НСтр("ru = 'Статус'; en = 'Status'"), Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументов")));
	ОбработкаОбъект.ДобавитьПоле("",
		Новый Структура("Имя,Синоним,Тип", "StatusType", НСтр("ru = 'Тип статуса'; en = 'Status type'"), Новый ОписаниеТипов("Число")));
	ОбработкаОбъект.ЗаместитьДанные("DocStatus", СостояниеСТипом.Состояние);
	ОбработкаОбъект.ЗаместитьДанные("StatusType", СостояниеСТипом.ТипСтатуса);
	
	ОбработкаОбъект.ДобавитьИсключения("Ссылка,ПометкаУдаления,Проведен,ВидДокумента");
	
	ОбработкаОбъект.УстановитьВидимость(
		"Дата,
		|Номер,
		|DataPervichnojRegistracii,
		|DataVyyavleniya,
		|EhtapVyyavleniya,
		|NarushennyeTrebovaniya,
		|NomerPervichnojRegistracii,
		|NomerVnutrennij,
		|ObemRabot,
		|DocStatus,
		|OrganizatsiyaProvodivshayaOtsenkuSootvetstviya,
		|Ploshchadka,
		|PodrobnoeOpisanie,
		|Proekt,
		|VidKontrolnoyOperacii,
		|VidNesootvetstviya,
		|ZnachimostAZN,
		|VidObektaNesootvetstviya,
		|VyyavivsheeLico,
		|VyyavivsheePodrazdelenie,
		|VyyavivshayaOrganizaciya", Истина);
	
	ОбработкаОбъект.УстановитьДоступность(
		"DataPervichnojRegistracii,
		|DataVyyavleniya,
		|NomerPervichnojRegistracii,
		|NomerVnutrennij,
		|VidObektaNesootvetstviya,
		|Ploshchadka,
		|Proekt,
		|VidKontrolnoyOperacii", ДоступностьВыявивший);
	
	ОбработкаОбъект.УстановитьДоступность(
		"NarushennyeTrebovaniya,
		|PodrobnoeOpisanie,
		|VidNesootvetstviya,
		|ZnachimostAZN", ДоступностьВыявивший Или ДоступностьПервыйЛидер);
	
	ОбработкаОбъект.УстановитьДоступность(
		"OrganizatsiyaProvodivshayaOtsenkuSootvetstviya", (ДоступностьВыявивший Или ДоступностьПервыйЛидер) И ЗначениеЗаполнено(Данные.ZayavkaNaOcenkuSootvetstviya));
	
	Если Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.PrD Тогда
		
		ОбработкаОбъект.УстановитьВидимость("Obekt,ProektnayaDokumentaciya,ReviziyaProektnojDokumentacii", Истина);
		
		ОбработкаОбъект.УстановитьДоступность("Obekt,ProektnayaDokumentaciya", ДоступностьВыявивший);
		ОбработкаОбъект.УстановитьДоступность("ReviziyaProektnojDokumentacii", ДоступностьВыявивший);
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.RD Тогда
		
		ОбработкаОбъект.УстановитьВидимость("Obekt,RabochayaDokumentaciya,ReviziyaRabochejDokumentacii", Истина);
		ОбработкаОбъект.УстановитьВидимость("NaimenovanieOborudovaniya,NaimenovanieTekhnologicheskojSistemy,Oborudovanie", СМР_ПНР_Эксплуатация);
		ОбработкаОбъект.УстановитьВидимость("MestoVyyavleniyaNS,ZdanieSooruzhenie", Не РазработкаРабочейДокументации_Изготовление);
		
		ОбработкаОбъект.УстановитьДоступность("Obekt,RabochayaDokumentaciya", ДоступностьВыявивший);
		ОбработкаОбъект.УстановитьДоступность("ReviziyaRabochejDokumentacii", ДоступностьВыявивший);
		ОбработкаОбъект.УстановитьДоступность("NaimenovanieOborudovaniya,NaimenovanieTekhnologicheskojSistemy,Oborudovanie", ДоступностьВыявивший И СМР_ПНР_Эксплуатация);
		ОбработкаОбъект.УстановитьДоступность("MestoVyyavleniyaNS,ZdanieSooruzhenie", ДоступностьВыявивший И Не РазработкаРабочейДокументации_Изготовление);
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.StroitelnyeKonstrukciiEhlement Тогда
		
		ОбработкаОбъект.УстановитьВидимость(
			"KategoriyaObespecheniyaKachestva,
			|KlassBezopasnosti,
			|KlassifikatorMTRiO,
			|MestoVyyavleniyaNS,
			|Obekt,
			|OboznachenieINaimenovaniePredmeta,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|ZdanieSooruzhenie", Истина);
		
		ОбработкаОбъект.УстановитьВидимость("Oborudovanie", Не СМР_ПНР_Эксплуатация);
		
		ОбработкаОбъект.УстановитьДоступность(
			"MestoVyyavleniyaNS,
			|Obekt,
			|OboznachenieINaimenovaniePredmeta,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|ZdanieSooruzhenie", ДоступностьВыявивший);
		
		ОбработкаОбъект.УстановитьДоступность("KlassBezopasnosti,KategoriyaObespecheniyaKachestva", ДоступностьВыявивший Или ДоступностьПервыйЛидер);
		ОбработкаОбъект.УстановитьДоступность("Oborudovanie", ДоступностьВыявивший И Не СМР_ПНР_Эксплуатация);
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.NaladochnyeDokumentyRaboty Тогда
		
		ОбработкаОбъект.УстановитьВидимость(
			"MestoVyyavleniyaNS,
			|NaimenovanieTekhnologicheskojSistemy,
			|Obekt,
			|OboznachenieINaimenovaniePredmeta,
			|ZdanieSooruzhenie", Истина);
		
		ОбработкаОбъект.УстановитьДоступность(
			"MestoVyyavleniyaNS,
			|NaimenovanieTekhnologicheskojSistemy,
			|Obekt,
			|OboznachenieINaimenovaniePredmeta,
			|ZdanieSooruzhenie", ДоступностьВыявивший);
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.TekhnologicheskayaSistema Тогда
		
		ОбработкаОбъект.УстановитьВидимость(
			"ChertezhnyjNomer,
			|DataIzgotovleniyaProdukcii,
			|KategoriyaObespecheniyaKachestva,
			|KlassBezopasnosti,
			|KlassifikatorMTRiO,
			|MestoVyyavleniyaNS,
			|NaimenovanieOborudovaniya,
			|NaimenovanieTekhnologicheskojSistemy,
			|NomerPlanaKachestva,
			|Obekt,
			|Oborudovanie,
			|OrganizatsiyaVydavshayaSertifikat,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|Sertifikat,
			|ZavodskojNomerOborudovaniya,
			|ZdanieSooruzhenie", Истина);
		
		ОбработкаОбъект.УстановитьДоступность(
			"ChertezhnyjNomer,
			|DataIzgotovleniyaProdukcii,
			|MestoVyyavleniyaNS,
			|NaimenovanieOborudovaniya,
			|NaimenovanieTekhnologicheskojSistemy,
			|NomerPlanaKachestva,
			|Obekt,
			|Oborudovanie,
			|OrganizatsiyaVydavshayaSertifikat,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|Sertifikat,
			|ZavodskojNomerOborudovaniya,
			|ZdanieSooruzhenie", ДоступностьВыявивший);
		
		ОбработкаОбъект.УстановитьДоступность("KategoriyaObespecheniyaKachestva,KlassBezopasnosti", ДоступностьВыявивший Или ДоступностьПервыйЛидер);
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Oborudovanie Тогда
		
		ОбработкаОбъект.УстановитьВидимость(
			"ChertezhnyjNomer,
			|DataIzgotovleniyaProdukcii,
			|Izgotovitel,
			|KategoriyaObespecheniyaKachestva,
			|KlassBezopasnosti,
			|KlassifikatorMTRiO,
			|NaimenovanieOborudovaniya,
			|NomerPlanaKachestva,
			|Obekt,
			|Oborudovanie,
			|OrganizatsiyaVydavshayaSertifikat,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|Sertifikat,
			|ZavodskojNomerOborudovaniya", Истина);
		
		ОбработкаОбъект.УстановитьВидимость("NaimenovanieTekhnologicheskojSistemy,ZdanieSooruzhenie", Не Изготовление);
		ОбработкаОбъект.УстановитьВидимость("OboznachenieINaimenovaniePredmeta", Изготовление);
		
		ОбработкаОбъект.УстановитьДоступность(
			"ChertezhnyjNomer,
			|DataIzgotovleniyaProdukcii,
			|Izgotovitel,
			|NaimenovanieOborudovaniya,
			|NaimenovanieTekhnologicheskojSistemy,
			|NomerPlanaKachestva,
			|Obekt,
			|Oborudovanie,
			|OrganizatsiyaVydavshayaSertifikat,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|Sertifikat,
			|ZavodskojNomerOborudovaniya", ДоступностьВыявивший);
		
		ОбработкаОбъект.УстановитьДоступность("KategoriyaObespecheniyaKachestva,KlassBezopasnosti", ДоступностьВыявивший Или ДоступностьПервыйЛидер);
		ОбработкаОбъект.УстановитьДоступность("NaimenovanieTekhnologicheskojSistemy,ZdanieSooruzhenie", ДоступностьВыявивший И Не Изготовление);
		ОбработкаОбъект.УстановитьДоступность("OboznachenieINaimenovaniePredmeta", ДоступностьВыявивший И Изготовление);
		
		ОбработкаОбъект.УстановитьСиноним("NomerPlanaKachestva", НСтр("ru = 'Номер плана качества (1-3 класс безопасности)'; en = 'Quality plan number (1-3 safety class)'"));
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Materialy Тогда
		
		ОбработкаОбъект.УстановитьВидимость(
			"ChertezhnyjNomer,
			|DataIzgotovleniyaProdukcii,
			|Izgotovitel,
			|KategoriyaObespecheniyaKachestva,
			|KlassBezopasnosti,
			|KlassifikatorMTRiO,
			|NaimenovanieOborudovaniya,
			|NomerPartii,
			|Obekt,
			|OrganizatsiyaVydavshayaSertifikat,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|Sertifikat,
			|ZavodskojNomerOborudovaniya", Истина);
		
		ОбработкаОбъект.УстановитьВидимость("ZdanieSooruzhenie", Не Изготовление);
		
		ОбработкаОбъект.УстановитьДоступность(
			"ChertezhnyjNomer,
			|DataIzgotovleniyaProdukcii,
			|Izgotovitel,
			|NaimenovanieOborudovaniya,
			|NomerPartii,
			|Obekt,
			|OrganizatsiyaVydavshayaSertifikat,
			|RabochayaDokumentaciya,
			|ReviziyaRabochejDokumentacii,
			|Sertifikat,
			|ZavodskojNomerOborudovaniya", ДоступностьВыявивший);
		
		ОбработкаОбъект.УстановитьДоступность("KategoriyaObespecheniyaKachestva,KlassBezopasnosti", ДоступностьВыявивший Или ДоступностьПервыйЛидер);
		ОбработкаОбъект.УстановитьДоступность("ZdanieSooruzhenie", ДоступностьВыявивший И Не Изготовление);
		
		ОбработкаОбъект.УстановитьСиноним("NaimenovanieOborudovaniya", НСтр("ru = 'Обозначение и наименование материала'; en = 'Designation and name of material'"));
		
	ИначеЕсли Данные.VidObektaNesootvetstviya = Перечисления.ra_VidyPredmetovNesootvetstviya.Processy Тогда
		
		ОбработкаОбъект.УстановитьВидимость("OboznachenieINaimenovaniePredmeta", Истина);
		
		ОбработкаОбъект.УстановитьДоступность("OboznachenieINaimenovaniePredmeta", ДоступностьВыявивший);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.OpisaniePredmetaKontrolyaID) Тогда
		ОбработкаОбъект.УстановитьДоступность("VidKontrolnoyOperacii", Ложь);
		ОбработкаОбъект.УстановитьДоступность("VidObektaNesootvetstviya", Ложь);
	КонецЕсли;
	
	ОбязательныеРеквизиты = ОбработкаОбъект.ОбязательныеРеквизиты();
	АктуализироватьМассивОбязательныхРеквизитов(ОбязательныеРеквизиты, Данные);
	ОбработкаОбъект.УстановитьОбязательность(ОбязательныеРеквизиты, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли