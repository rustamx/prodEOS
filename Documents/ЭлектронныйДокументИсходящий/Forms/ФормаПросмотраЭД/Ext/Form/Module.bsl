
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
	
		Если ТипЗнч(Параметры.Ключ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
			ПрисоединенныйФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(Параметры.Ключ,,Истина);
			Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				ОбъектСправочника = ПрисоединенныйФайл.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			ОбъектСправочника = Параметры.Ключ.ПолучитьОбъект();
			ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.МассивОтпечатков) Тогда
		СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(Параметры.МассивОтпечатков, УникальныйИдентификатор);
	КонецЕсли;
	
	ЭлектронныйДокумент = Объект.ВладелецФайла;
	
	ОтключитьВыводДопДанных = Истина;
	ОтключитьВыводКопияВерна = Истина;
	ПриИзмененииНастроекОтображенияДополнительнойИнформации();
	
	ИнициализацияДанныхНаСервере(Отказ);
	
	ИнициализацияДереваНаСервере();
		
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ГруппаКомандЕще.Видимость = Ложь;
		Элементы.ОсновныеКоманды.Видимость = Ложь;
	КонецЕсли;
	
	Заголовок = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(ЭлектронныйДокумент);
	
	ТребуетсяПодпись = НеобходимоПодписать();
	ОбновитьСтатусЭД();
	ЗаполнитьТаблицуЭП();
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	ВывестиДокументыУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюСтрокуДерева(Объект.Ссылка);
	
	Если Не Отказ Тогда
		Описание = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Описание, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	ИначеЕсли ИмяСобытия = "ОповеститьОСозданииУведомления" И Параметр = Объект.Ссылка Тогда
		ПоместитьТекстУточненияВОбъект(ТекстУточнения);
		СтатусОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		Оповестить("ОбновитьСостояниеЭД");
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		Для Каждого ЭД Из Параметр Цикл
			Если ЭД = Объект.Ссылка Тогда
				ОбновитьОтображениеДанных();
				ТекущаяСтрока = Элементы.ТаблицаЭП.ТекущиеДанные;
				ЗаполнитьТаблицуЭП();
				Если ТекущаяСтрока <> Неопределено Тогда
					Элементы.ТаблицаЭП.ТекущаяСтрока = ТаблицаЭП[ТекущаяСтрока.НомерСтроки-1].ПолучитьИдентификатор();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Настройки.Получить("ОтключитьВыводДопДанных") = Неопределено Тогда
		ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
	КонецЕсли;
	
	Если Не Настройки.Получить("ОтключитьВыводКопияВерна") = Неопределено Тогда
		ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
	КонецЕсли;
	
	ПриИзмененииНастроекОтображенияДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИДПараметра = "ЭлектронноеВзаимодействие." + УникальныйИдентификатор;
	ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
	Если ПараметрыФормы <> Неопределено Тогда
		ПараметрыПриложения.Удалить(ИДПараметра);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыводДопДанныхПриИзменении(Элемент)
	
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ИзменитьТекстСопроводительнойЗаписки(Объект.ДополнительнаяИнформация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ТекстДокументИБНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ТекстДокументИБНажатие();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыЭП

&НаКлиенте
Процедура ЭППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ТаблицаЭП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(Объект.ВладелецФайла, ЭтотОбъект, , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьЭД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Модифицированность = Ложь;
	ТекстВопроса = НСтр("ru = 'Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'; en = 'It is advised not to choose an accounting document recording manually. Do you want to continue?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументПродолжить", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	ПрисоединенныйФайл = Объект.Ссылка;
	ДанныеФайла = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ТаблицаЭП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки, Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'; en = 'Select the certificate from the list of installed signatures.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	ВторойТитул = ВторойТитулДокумента(Объект.Ссылка);
	Если ЗначениеЗаполнено(ВторойТитул) Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ВторойТитул);
	КонецЕсли;
	ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.УтвердитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьЭД(Команда)
	
	ОчиститьСообщения();
	
	МассивДокументов = ДокументыОснования(ЭлектронныйДокумент);
	
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОбменСКонтрагентамиКлиент.ОтправитьПовторноЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ОчиститьСообщения();
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	Комментарий = "";
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформация) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании(Объект.ВладелецФайла, Новый Структура("Источник", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЭДОПродолжить", ЭтотОбъект);
	ВводСтрокиЗаголовок = НСтр("ru = 'Укажите причины завершения документооборота'; en = 'Specify the reasons for finishing interchange'");
	ПоказатьВводСтроки(Оповещение, , ВводСтрокиЗаголовок, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииНастроекОтображенияДополнительнойИнформации()
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
	ОбновитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБНажатие()
	
	МассивДокументов = МассивДокументовУчета(ЭлектронныйДокумент);
		
	КоличествоДокументов = МассивДокументов.Количество();
			
	Если КоличествоДокументов = 0 Тогда
		СписокТиповДокументов = СписокОперацийВидаЭД(ЭлектронныйДокумент);
		
		Если СписокТиповДокументов.Количество() > 1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ТекстДокументИБНажатиеЗавершить",ЭтотОбъект, ЭлектронныйДокумент);
			ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокТиповДокументов, Элементы.ТекстДокументИБ);
		Иначе
			ВвестиДокументУчета(ЭлектронныйДокумент, "");
		КонецЕсли;
		
	ИначеЕсли КоличествоДокументов = 1 Тогда
		ПоказатьЗначение(, МассивДокументов[0]);
	Иначе
		ОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументУчета(ЭД, СпособОбработки)
	
	СсылкаНаНовыйДокумент = ВвестиДокументУчетаНаСервере(ЭД, СпособОбработки);
	
	Если ЗначениеЗаполнено(СсылкаНаНовыйДокумент) Тогда
		Если ВидЭД(ЭД) = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров") Тогда
			ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(СсылкаНаНовыйДокумент, , , ЭД, СпособОбработки);
		Иначе
			ПоказатьЗначение(,СсылкаНаНовыйДокумент);
		КонецЕсли; 
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокОперацийВидаЭД(ЭД)
	Возврат ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"ВидЭД"));	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПодбора()
	
	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент",ЭлектронныйДокумент);
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ПодборДокументовУчета", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивДокументовУчета(ЭлектронныйДокумент)
	
	ТЗДокументовУчета = ЭлектронныйДокумент.ДокументыОснования.Выгрузить();
	Для Каждого СтрокаТЗ Из ТЗДокументовУчета Цикл
		Если ТипЗнч(СтрокаТЗ.ДокументОснование) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			СтрокаТЗ.ДокументОснование = СтрокаТЗ.ДокументОснование.Владелец.ВладелецФайла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗДокументовУчета.ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

&НаСервере
Процедура ВывестиДокументыУчета()
	
	МассивДокументов = МассивДокументовУчета(ЭлектронныйДокумент);
	КоличествоДокументов = МассивДокументов.Количество();
	
	Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документ учета'; en = 'Accounting document'");
	
	Если КоличествоДокументов = 0 Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ПредставлениеДокументов = НСтр("ru = 'Сопоставить номенклатуру'; en = 'Map elements of products and services catalog'");
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Настройка ЭДО'; en = 'EDI settings'");
		Иначе
			ПредставлениеДокументов = НСтр("ru = 'Отразить в учете'; en = 'Post'");
		КонецЕсли;
		
	ИначеЕсли КоличествоДокументов = 1  Тогда
		
		Если ТипЗнч(МассивДокументов[0]) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Настройка ЭДО'; en = 'EDI settings'");  
		КонецЕсли;
		
		ПредставлениеДокументов = Строка(МассивДокументов[0]);
	Иначе
		
		Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документы учета'; en = 'Accounting documents'");
		ШаблонТекста = НСтр("ru = 'Список документов (%1)'; en = 'Documents list (%1)'");  
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,КоличествоДокументов);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		ПредставлениеДокументов, , , , "ТекстДокументИБНажатие"));
	
	ТекстДокументИБ = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидЭД(ЭД)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"ВидЭД");
КонецФункции

&НаСервере
Функция ВвестиДокументУчетаНаСервере(ЭД, СпособОбработки)
	
	СсылкаНаНовыйДокумент = Неопределено;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ПерезаполнитьДокументыИБПоЭД(СсылкаНаНовыйДокумент, ЭД, , Ложь, СпособОбработки);
		
	Если ЗначениеЗаполнено(СсылкаНаНовыйДокумент) Тогда
		
		ДокументОбъект = ЭД.ПолучитьОбъект();
		
		СтрокаОснования = ДокументОбъект.ДокументыОснования.Найти(СсылкаНаНовыйДокумент,"ДокументОснование");
				
		Если СтрокаОснования = Неопределено Тогда
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = СсылкаНаНовыйДокумент;
			НоваяСтрока.СпособОбработки = СпособОбработки;
		КонецЕсли;	
		
		ДокументОбъект.Записать();
		
		ВывестиДокументыУчета();
		
	КонецЕсли;

	Возврат СсылкаНаНовыйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервере
Процедура ИнициализацияДанныхНаСервере(Отказ)
	
	ТабличныйДокументКопияВерна = ПолучитьОбщийМакет("ЭД_ИдентификаторДокумента").ПолучитьОбласть("КопияВерна");
	ТабличныйДокументКопияВерна.Параметры.ДатаПечати = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		ОтпечаткиСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Если ЗначениеЗаполнено(ОтпечаткиСервер) Тогда
			
			Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
				ОтпечаткиКлиент = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтпечаткиСервер,ОтпечаткиКлиент, Истина);
			КонецЕсли;	
			СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(ОтпечаткиСервер, УникальныйИдентификатор);		
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекстСопроводительнойЗаписки(ТекстЗаписки)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", ТекстЗаписки);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ЭлектронныйДокумент);
	ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5';
		|en = '%1, %2 (state - %3, responsible - %4):
		|%5'");
	ПредыдущийКомментарий = "";
	ПервыйКомментарий = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКомментарий = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКомментарий = ТекущийКомментарий Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКомментарий = ТекущийКомментарий;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКомментарий);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКомментарий = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКомментарий = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКомментарий, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКомментарий = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Объект.Ссылка, СтруктураПараметров, Ложь);
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступность()
	
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() > 0 Тогда
		Элементы.ДеревоПодчиненныеЭД.Развернуть(СтрокиДерева[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатков = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
	Иначе
		МассивОтпечатков = Новый Массив;
	КонецЕсли;
	
	ЭтоСлужебный	= ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка);
	
	ЕстьПравоОбработки = Ложь;
	
	ЕстьВозможностьПодписания = ЕстьПравоОбработки 
		И ЗначениеЗаполнено(МассивОтпечатков)
		И ДоступныДляПодписиСертификаты(МассивОтпечатков);
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработки И НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработки И НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	
	Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ЭДОЗакрыт		= ОбменСКонтрагентамиСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.ВладелецФайла);
	СтатусОтклонен	= ОбменСКонтрагентамиСлужебныйВызовСервера.ЭДОтклонен(Объект.СтатусЭД);
	
	ЭДТитулПродавца	= НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(Объект.ВладелецФайла);
					
	ЭДСчетФактура	= НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСчетФактура(Объект.Ссылка);
	ДОСФЗавершен	= ЭДСчетФактура И ОбменСКонтрагентамиСлужебныйВызовСервера.ДОСФЗавершен(Объект.Ссылка, Объект.НаправлениеЭД);
	
	ЭтоИзвещениеОПолучении		 = ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(Объект.ТипЭлементаВерсииЭД);
	ЭтоПодтверждение 			 = ОбменСКонтрагентамиСлужебный.ЭтоПодтверждение(Объект.ТипЭлементаВерсииЭД);
	ЭтоУведомлениеОбУточнении	 = ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(Объект.ТипЭлементаВерсииЭД);
	ЭтоОтветныйТитул			 = ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(Объект.ТипЭлементаВерсииЭД);
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВладелецФайла,"ВидЭД,ПрофильНастроекЭДО,НастройкаЭДО,ПричинаОтклонения");
	
	СостоянияЭДОЗавершен = Новый Массив;
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	
	ДОЗавершен = ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьСостояниеЭДО(Объект.ВладелецФайла, СостоянияЭДОЗавершен);
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
		И ОбменСКонтрагентамиСлужебныйВызовСервера.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Утвердить и отправить'; en = 'Confirm and send'");
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.НемедленнаяОтправкаЭД() Тогда
		КомандаПодписиОтправки = Элементы.КомандаПодписатьОтправить;
	Иначе
		КомандаПодписиОтправки = Элементы.КомандаПодписать;
	КонецЕсли;
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ЕстьВозможностьПодписания = ЕстьВозможностьПодписания И НЕ ЭтоСлужебный;
		
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандВходящие;
				
		ЭтоПолученныйКаталогТоваров = НЕ ЭтоСлужебный И СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		
		ОбменЧерезТакском = ОбменЧерезОператора(СвойстваЭД);
		ВерсияФорматаПакета = ОбменСКонтрагентамиСлужебный.ВерсияПакетаЭД(Объект.Ссылка);
		ЭтоСчетВерсии30 = НЕ ЭтоСлужебный И (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ОбменЧерезТакском ИЛИ (ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 И Не ОбменЧерезТакском));
			
		Элементы.КомандаУтвердить.Видимость =  Не ЕстьВозможностьПодписания ИЛИ ЭДСчетФактура ИЛИ ЭтоСчетВерсии30;
		Элементы.КомандаУтвердить.Доступность = Не ЭДОЗакрыт
			И ЕстьПравоОбработки
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			И НЕ(ЭтоИзвещениеОПолучении
				ИЛИ ЭтоПодтверждение
				ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
				ИЛИ ЭтоУведомлениеОбУточнении
				ИЛИ ЭтоОтветныйТитул));
			
		КомандаПодписиОтправки.Видимость   = (ЕстьВозможностьПодписания ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И ТребуетсяПодпись
			И НЕ ЭДСчетФактура
			И Не ЭтоСчетВерсии30;
			
		КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ЭДОЗакрыт И ОтраженВУчете
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И Не ОбменСКонтрагентамиСлужебный.ВторойТитулПодписан(Объект.Ссылка)
			И НЕ ЭтоПодтверждение;
			
		Элементы.ЗаголовокОтраженВУчете.Доступность = НЕ СтатусОтклонен;
		// Для входящей с/ф кнопка отклонение имеет свое название и картинку.
		Если НЕ ЭтоСлужебный И СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'; en = 'Request clarification on electronic document'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		
		КомандаПодписиОтправки.Видимость   = (ЕстьВозможностьПодписания ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан) И ТребуетсяПодпись;
		КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ЭДОЗакрыт
			И (ОтраженВУчете ИЛИ ЭтоСлужебный)
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
			
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СвойстваЭД.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
			Элементы.КомандаОтправитьПовторно.Видимость = Истина;
			Элементы.КомандаОтправитьПовторно.Доступность = НЕ СтатусОтклонен
				И ОтраженВУчете
				ИЛИ (ЭтоИзвещениеОПолучении
					ИЛИ ЭтоПодтверждение
					ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
					ИЛИ ЭтоУведомлениеОбУточнении);
		КонецЕсли;
		
		ЗапискаДоступна = (НЕ ЭтоСлужебный
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке));
		
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
		Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		Элементы.КомандаУтвердить.Видимость = НЕ (ЕстьВозможностьПодписания И ТребуетсяПодпись);
		Элементы.КомандаУтвердить.Доступность = НЕ ЭДОЗакрыт И ЕстьПравоОбработки
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		Элементы.КомандаПодписать.Видимость     = ЕстьВозможностьПодписания;
		Элементы.КомандаПодписать.Доступность   = (ЕстьВозможностьПодписания
			И НЕ СтатусОтклонен И Объект.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
		Элементы.КомандаУтвердить.Видимость   = НЕ ЕстьВозможностьПодписания;
		Элементы.КомандаУтвердить.Доступность = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
	КонецЕсли;
	
	Элементы.СтраницаСтатусов.Видимость = Ложь;
	Элементы.КомандаАннулировать.Доступность = МожноАннулироватьЭтотЭД;
	Элементы.КомандаОтклонить.Доступность = (НЕ (СтатусОтклонен ИЛИ ЭтоСлужебный ИЛИ ЭДОЗакрыт) И МожноОтклонитьЭтотЭД)
		И Не ОбменСКонтрагентамиСлужебный.ЕстьОтправленноеУведомление(Объект.Ссылка);
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	Элементы.КомандаЗавершить.Видимость = ЭДСчетФактура;
	Элементы.КомандаЗавершить.Доступность = Не ДОСФЗавершен
		И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			Или Объект.СтатусЭД = Перечисления.СтатусыЭД.Доставлен);
	
	Если СтатусОтклонен Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru = 'Ошибка обмена'; en = 'Exchange error'");
			НовСтрока.ПричинаОтклонения = Объект.Описание;
		КонецЕсли;
		
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина аннулирования:'; en = 'Cancellation reason:'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
			Элементы.КомандаАннулировать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СтраницаКомментарии.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(ВсеКомментарии);
	Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.ДополнительнаяИнформация);
	Элементы.КомандаЖурналСобытийЭДО.Доступность = Пользователи.ЭтоПолноправныйПользователь();
		
	Элементы.ОсновныеКоманды.Видимость = Ложь;
	Элементы.КомандаПеренаправить.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОбменЧерезОператора(СвойстваЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", СвойстваЭД.НастройкаЭДО);
	Запрос.УстановитьПараметр("ИсходящийДокумент", СвойстваЭД.ВидЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусЭД()
	
	Объект.СтатусЭД = Объект.Ссылка.СтатусЭД;
	ДатаИзмененияСтатусаЭД = Объект.Ссылка.ДатаИзмененияСтатусаЭД;
	
	ТекстСостояния = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла);
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("МассивОснований", Объект.ВладелецФайла.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	
	ЗапросПоОтражению.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В (&МассивОснований)";
	
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтраженВУчете = (Объект.ВладелецФайла = Выборка.ЭлектронныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	ТаблицаВременная = РеквизитФормыВЗначение("ТаблицаЭП");
	ТаблицаВременная.Очистить();
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВладелецФайла, "НастройкаЭДО,ВидЭД");
	СоглашениеЭД = СвойстваЭД.НастройкаЭДО;
	
	ПроверятьСертификатыПодписей = Ложь;
	Если ЗначениеЗаполнено(СоглашениеЭД) Тогда
		ПроверятьСертификатыПодписей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПроверятьСертификатыПодписей");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СоглашениеЭД) ИЛИ НЕ ПроверятьСертификатыПодписей Тогда
		ВидЭД = СвойстваЭД.ВидЭД;
		Если ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(Объект.ВладелецФайла) Тогда
			ЭлПодписи = ОбменСКонтрагентамиСлужебный.ЭлектронныеПодписиДвухТитулов(Объект.Ссылка);
		Иначе
			ЭлПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"ЭлектронныеПодписи").Выгрузить();
		КонецЕсли;
		Для Каждого ТекСтрока Из ЭлПодписи Цикл
			НоваяСтрока = ТаблицаВременная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
			НоваяСтрока.НомерСтроки = ТаблицаВременная.Количество();
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");
	Иначе
		МассивОтпечатковОжидаемыхСертификатов = ОбменСКонтрагентамиСлужебный.ОтпечаткиОжидаемыхСертификатов(Объект.ВладелецФайла);

		Если ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(Объект.ВладелецФайла) Тогда
			ЭлПодписи = ОбменСКонтрагентамиСлужебный.ЭлектронныеПодписиДвухТитулов(Объект.Ссылка);
		Иначе
			ЭлПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"ЭлектронныеПодписи").Выгрузить();
		КонецЕсли;

		Для Каждого ТекСтрока Из ЭлПодписи Цикл
			НоваяСтрока = ТаблицаВременная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
				НоваяСтрока.ОтсутствуетВСписке = Истина;
				НоваяСтрока.ВыводКартинки = 1;
			Иначе
				НоваяСтрока.ВыводКартинки = 0;
			КонецЕсли;
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");
	КонецЕсли;
	
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подписи %1'; en = 'Signatures %1'"), 
		?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
		
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'; en = 'Valid'"), НСтр("ru = 'Неверна'; en = 'Invalid'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'; en = 'Not validated'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ СтатусОтклонен Тогда
		
		Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВладелецФайла,"ПрофильНастроекЭДО.СпособОбменаЭД")) Тогда
			ФлагПодписи = Истина;
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ФлагПодписи = Объект.Ссылка.ПодписанЭП;
			ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				
				Если ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(Объект.ТипЭлементаВерсииЭД) Тогда
					
					ФлагПодписи = Объект.ЭлектронныйДокументВладелец.ПодписанЭП;
					
				Иначе
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Продавец)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
					|			ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
					|		КОНЕЦ
					|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
					|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
					|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка",        Объект.ВладелецФайла.НастройкаЭДО);
					Запрос.УстановитьПараметр("ВидЭД",         Объект.ВладелецФайла.ВидЭД);
					Запрос.УстановитьПараметр("НаправлениеЭД", Объект.Ссылка.НаправлениеЭД);
					
					Результат = Запрос.Выполнить().Выбрать();
					Результат.Следующий();
					
					ФлагПодписи = Результат.ИспользоватьЭП;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивОтпечатков)
	
	ЕстьДоступныеСертификаты = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивОтпечатков, Объект.ВладелецФайла);
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	ВозвращаемыйПараметр = ИспользуютсяЭП И ЕстьДоступныеСертификаты И ТребуетсяПодпись;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ИнициализацияДереваНаСервере();
	ОбновитьСтатусЭД();
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	
	СтруктураСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ТаблицаЭП[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецФайла.НастройкаЭДО) Тогда
		Возврат ;
	КонецЕсли;
	
	ОбъектЭД = РеквизитФормыВЗначение("Объект");
	НайденнаяСтрока = ОбъектЭД.ЭлектронныеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = Объект.ВладелецФайла.НастройкаЭДО.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда 
		ТекстВопроса = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'; en = 'Add certificate %1 to the list of expected counterparty certificates?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ДанныеПодписи.КомуВыданСертификат);
		ДопДанные = Новый Структура("ДанныеПодписи", ДанныеПодписи);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСертификатВДоверенныеЗавершить", ЭтотОбъект, ДопДанные);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТекстУточненияВОбъект(ТекстУточнения)
	
	ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ЭлектронныйДокументОбъект.ПричинаОтклонения = ТекстУточнения;
	ЭлектронныйДокументОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ИнициализацияДереваНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Отклонить = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьАннулироватьЭДПродолжить", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ПараметрыЭД = Новый Структура("Организация, Отклонить, ОписаниеОповещения",
		ПолучитьОрганизациюНаСервере(ЭлектронныйДокумент), Отклонить, ОписаниеОповещения);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	ВладелецЭД = Объект.ВладелецФайла;
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(ВладелецЭД);
	
	ПараметрыЭД = Новый Структура;
	
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
	
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Объект.Ссылка, ПараметрыЭД, Ложь);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ТекстДокументИБНажатиеЗавершить(Результат, ЭД) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ВвестиДокументУчета(ЭД, Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭДОПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЭДОСервере(Результат);
	
	Оповестить("ОбновитьСостояниеЭД");

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатков(Отпечатки, Параметры = Неопределено) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатковСервера = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
		Если ЗначениеЗаполнено(МассивОтпечатковСервера) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, МассивОтпечатковСервера, Истина);
		КонецЕсли;
	КонецЕсли;
	
	СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивОтпечатков, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДокументИБ = Объект.ВладелецФайла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументЗавершить", ЭтотОбъект);
		Подсказка = НСтр("ru = 'Укажите документ отражения в учете'; en = 'Specify the accounting document'");
		ПоказатьВводЗначения(ОписаниеОповещения, ДокументИБ, Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенныеЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДанныеПодписи = Неопределено;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки,Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДанныеПодписи", ДанныеПодписи)
		И ЗначениеЗаполнено(ДанныеПодписи) Тогда
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов.'; en = 'Error adding the signing certificate to the list of expected certificates.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭДПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ИзменитьВидимостьДоступность();
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ТаблицаЭП.Получить(Расшифровка - 1);
	
	ДобавитьСертификатВДоверенные(СтрокаЭП);
	
	Если СтрокаЭП <> Неопределено И НЕ СтрокаЭП.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НоваяАрхитектураЭДО

&НаСервереБезКонтекста
Функция ДокументыОснования(ЭлектронныйДокумент)
	
	Возврат ЭлектронныйДокумент.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

Функция ПолучитьОрганизациюНаСервере(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "Организация");
	
КонецФункции

&НаСервере
Процедура ИнициализацияДереваНаСервере()
	
	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	СоответствиеВладельцевИЭД.Вставить(Объект.ВладелецФайла,Объект.ВладелецФайла);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	
	ОбменСКонтрагентамиСлужебный.СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, Неопределено, Ложь);
	ОбменСКонтрагентамиСлужебный.СоздатьРеквизитыИЭлементыДляПечатныхФорм(ЭтаФорма, ДеревоОбъект);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоПодчиненныеЭДПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПодчиненныеЭДПослеАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтроки()
	
	ТекСтрока = Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда
		Если Элементы.СтраницыЭД.ТекущаяСтраница <> Элементы["Страница" + ТекСтрока.ИмяРеквизита] Тогда
			Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекСтрока.ИмяРеквизита];
			ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере(ТекСтрока.Ссылка);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере(ПрисоединенныйФайл)
	
	ОбъектСправочника = ПрисоединенныйФайл.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
			
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусОтклонен = (Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
			ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
			
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		ЗаполнитьТаблицуЭП();
		
	КонецЕсли;
	
	ПерезаполнитьКомментарии();
		
	ИзменитьВидимостьДоступностьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура  УстановитьТекущуюСтрокуДерева(ПрисоединенныйФайл)
	
	ИдентификаторСтроки = 0;
	
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Ссылка", ИдентификаторСтроки, ДеревоПодчиненныеЭД.ПолучитьЭлементы(), ПрисоединенныйФайл, Ложь);
		
	Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭПСтатус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭП.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтрокаДоступна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Отправлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ВидЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора4 = ГруппаОтбора3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.НаправлениеЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭД.Входящий;


	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭД.Утвержден;


	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.АктуальныйЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ДатаЭДБольшеАктуального");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

КонецПроцедуры

#КонецОбласти


