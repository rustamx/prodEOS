#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура АктуализироватьМассивОбязательныхРеквизитов(МассивРеквизитов, ДокументОбъект) Экспорт

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	Документы.ra_ZayavkaNaOcenkuSootvetstviya3.ЗаполнитьДескрипторыПроизводныхДокументов(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено);
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	Документы.ra_ZayavkaNaOcenkuSootvetstviya3.ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат Документы.ra_ZayavkaNaOcenkuSootvetstviya3.ПолучитьПоляДоступаПроизводногоДокумента();
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияBitrix

Процедура АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов)
КонецПроцедуры

Функция ПолучитьТекстЗапросаВложенныеТаблицы() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстЗапросаСоединений() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьМассивЗаголовков(МассивДанных = Неопределено) Экспорт
	
	МассивЗаголовков = Новый Массив;
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПолучитьМассивКолонокСписка() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ra_ZadanieDlyaEHksperta;
	
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	РеквизитыОбъекта = МетаданныеДокумента.Реквизиты;
	СтандартныеРеквизитыОбъекта = МетаданныеДокумента.СтандартныеРеквизиты;
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Дата);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Номер);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивКнопок(ДокументОбъект) Экспорт
	
	ВидФормы = "ФормаОбъекта";
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ВидФормы = "ФормаСписка";
	КонецЕсли;
	
	МассивКнопок = Новый Массив;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		ИмяКнопки = "Start";
		ОписаниеКнопки = НСтр("ru = 'Начать этап'; en = 'Start stage'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		МассивКнопок.Добавить(Кнопка);
		
		ИмяКнопки = "Save";
		ОписаниеКнопки = НСтр("ru = 'Сохранить'; en = 'Save'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		Кнопка.Вставить("Parameters", Новый Структура("DocumentWriteMode", "Write"));
		МассивКнопок.Добавить(Кнопка);
		
		ИмяКнопки = "Complete";
		ОписаниеКнопки = НСтр("ru = 'Завершить'; en = 'Завершить'");
		Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		Кнопка.Вставить("Parameters", Новый Структура("DocumentWriteMode", "Posting"));
		МассивКнопок.Добавить(Кнопка);
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		
	КонецЕсли;
	
	Возврат МассивКнопок;
	
КонецФункции

Функция ПолучитьМассивФильтровСписка() Экспорт
	
	МассивДанных = Новый Массив;
	
	Возврат МассивДанных;
	
КонецФункции

Процедура СформироватьМассивДанныхGetList(Результат, ПолноеИмя, ПараметрыЗапросаHTTP) Экспорт
	
	ОбъектМетаданных = Метаданные.Документы.ra_ZadanieDlyaEHksperta;
	
	ТаблицаРеквизитов = ра_ОбменДанными.ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
	
	АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов);
	
	ТекстЗапросаВложенныеТаблицы = ПолучитьТекстЗапросаВложенныеТаблицы();
	ТекстЗапросаСоединений = ПолучитьТекстЗапросаСоединений();
	
	Запрос = ра_ОбменДанными.ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ПолноеИмя, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзЗапроса(Запрос);
	Результат.Вставить("value", МассивДанных);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		МассивКолонок = ПолучитьМассивКолонокСписка();
		МассивКнопок = ПолучитьМассивКнопок(Запрос.Параметры);
		МассивФильтров = ПолучитьМассивФильтровСписка();
		Результат.Вставить("form_settings", МассивКолонок);
		Результат.Вставить("button_settings", МассивКнопок);
		Результат.Вставить("filter_settings", МассивФильтров);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьМассивДанныхРолевойМодели(ДокументОбъект, ПараметрыФормирования = Неопределено) Экспорт
	
	//Возврат Обработки.ра_ФормыБитрикс.Создать().ОписаниеФормы(ДокументОбъект.Метаданные(), ДокументОбъект);
	
	ТаблицаНастроек = ра_ОбменДанными.ПолучитьТаблицуНастроекПолейПоУмолчанию(Метаданные.Документы.ra_ZadanieDlyaEHksperta);
	
	//В данную переменную необходимо передавать удаляемые реквизиты. Разделитель - запятая.
	УдаляемыеРеквизиты = "Ссылка,ПометкаУдаления,Проведен";
	ра_ОбменДанными.УдалитьСтрокиИзТаблицыНастроек(ТаблицаНастроек, УдаляемыеРеквизиты);
	
	Страница = Неопределено;
	Если ПараметрыФормирования <> Неопределено Тогда
		ПараметрыФормирования.Свойство("Страница", Страница);
	Иначе
		Страница = "FormirovanieZadanij";
	КонецЕсли;
	
	АктуализироватьТаблицуНастроек(ТаблицаНастроек, ДокументОбъект, Страница);
	
	Если Страница <> Неопределено Тогда
		ТаблицаНастроек = ТаблицаНастроек.Скопировать(ТаблицаНастроек.НайтиСтроки(Новый Структура("Видимость", Истина)));
	КонецЕсли;
			
	ра_ОбменДанными.ЗаполнитьТаблицуНастроекЗначениямиИзОбъекта(ТаблицаНастроек, ДокументОбъект);
		
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;

	
КонецФункции

Процедура АктуализироватьТаблицуНастроек(ТаблицаНастроек, ДокументОбъект, Страница)
	
	Для каждого СтрокаНастроек Из ТаблицаНастроек Цикл
		СтрокаНастроек.Видимость = Ложь;
		СтрокаНастроек.Доступность = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Страница) Тогда
		Страница = "FormirovanieZadanij";
	КонецЕсли;
		
	ДоступностьСтраницыMain = ДокументОбъект.Status = Перечисления.ra_StatusyZayavokNaOcenkuSootvetstviya.Zayavka;
	
	ДоступноВсегода = 
	
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Number", , Истина);
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Date", , Истина, Истина);
		
	Если Страница = "FormirovanieZadanij" Тогда
		
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "DataZadaniya", , ДоступностьСтраницыMain, Истина);
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "EHkspert", , Ложь, Истина);
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "NomerZadaniya", , ДоступностьСтраницыMain, Истина, , "FullTextSearch");
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Rukovoditel", , ДоступностьСтраницыMain, Истина);
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Srok", , ДоступностьСтраницыMain, Истина, , "FullTextSearch");
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "ZadanieEHkspertu", , ДоступностьСтраницыMain);
					
	ИначеЕсли Страница = "VypolnenieZadanij" Тогда
		
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Materialy", , Истина, Истина);
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "OtchetOVypolneniiZadaniya", , Истина, Истина);
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "PrichinyOtklonenij", , Истина, Истина);
		ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "FakticheskijSrok", , Истина, Истина);
		
	КонецЕсли;
	
	//МассивОбязательныхРеквизитов = ра_ОбменДанными.МассивОбязательныхРеквизитов(Метаданные.Документы.ra_ZadanieDlyaEHksperta);
	//ра_ОбменДанными.УстановитьОбязателенДляЗаполнения(ТаблицаНастроек, МассивОбязательныхРеквизитов);
	
	//ПараметрыПроверки = Новый Структура;
	//АктуализироватьМассивОбязательныхРеквизитов(МассивОбязательныхРеквизитов, ПараметрыПроверки);
	
	Для каждого СтрокаНастроек Из ТаблицаНастроек Цикл
		Если Найти(СтрокаНастроек.Тип, "Enumeration_") Тогда
			СтрокаНастроек.ВидПоиска = "OutputAllElements";
			СтрокаНастроек.Опции = ра_ОбменДанными.ПолучитьЗначенияПеречисления(СтрокаНастроек.Тип);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//V2

Функция ЕстьМетодДополнитьОписаниеМетаданных() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьОписаниеМетаданных(ОбработкаОбъект, Данные, ПараметрыФормирования) Экспорт
	
	ОбработкаОбъект.ДобавитьИсключения("Ссылка,ПометкаУдаления,Проведен");
		
	РеквизитыОснования =
		"NomerZayavki,
		|DataZayavki";
	
	ЗначенияРеквизитовОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.ZayavkaNaOcenkuSootvetstviya, РеквизитыОснования);
	
	МетаданныеОснования = Данные.ZayavkaNaOcenkuSootvetstviya.Метаданные();
	
	Для каждого Реквизит Из СтрРазделить(РеквизитыОснования, ",") Цикл
		ОбработкаОбъект.ДобавитьПоле("", МетаданныеОснования.Реквизиты[Реквизит]);
		ОбработкаОбъект.ЗаместитьДанные(Реквизит, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРеквизитовОснования, Реквизит));
	КонецЦикла;
	
	ОбработкаОбъект.УстановитьВидимость(РеквизитыОснования, Истина);
	
	ОбработкаОбъект.УстановитьВидимость(
		"DataZadaniya,
		|NomerZadaniya,
		|Srok,
		|ZadanieEHkspertu,
		|FakticheskijSrok,
		|PrichinyOtklonenij,
		|Materialy", Истина);
	
	ОбработкаОбъект.УстановитьДоступность(
		"DataZadaniya,
		|NomerZadaniya,
		|Srok,
		|ZadanieEHkspertu,
		|FakticheskijSrok,
		|PrichinyOtklonenij,
		|Materialy", Истина);		
	
	ОбязательныеРеквизиты = ОбработкаОбъект.ОбязательныеРеквизиты();
	АктуализироватьМассивОбязательныхРеквизитов(ОбязательныеРеквизиты, Данные);
	ОбработкаОбъект.УстановитьОбязательность(ОбязательныеРеквизиты, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли