#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати, СтруктураПараметров = Неопределено) Экспорт
	
	ра_ОбщегоНазначения.ВыполнитьЗаполнениеКомандПечатиДокументаЕОС(КомандыПечати, СтруктураПараметров);
	
КонецПроцедуры

// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 07.07.2018 {
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции
// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 07.07.2018 } 

Процедура АктуализироватьМассивОбязательныхРеквизитов(МассивРеквизитов, ДокументОбъект) Экспорт
	
	Если ДокументОбъект.VidVremennyhSderzhivayushchihDejstvijIKorrekcij = 
		Справочники.ra_VidyPoruchenij.ПринятьКакЕсть Тогда
		
		МассивРеквизитов.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры

Функция ДокументыКоррекцияСоСтатусом(Несоответствие, ТолькоНеИсполненные = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументВСДКоррекция.Ссылка КАК Ссылка,
	|	ДокументВСДКоррекция.Ссылка.Представление КАК Представление,
	|	ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен) КАК Исполнен
	|ИЗ
	|	Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК ДокументВСДКоррекция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК ИсторияСостоянийДокументов
	|		ПО ДокументВСДКоррекция.Ссылка = ИсторияСостоянийДокументов.Документ
	|ГДЕ
	|	ДокументВСДКоррекция.Nesootvetstvie = &Несоответствие
	|	И ДокументВСДКоррекция.VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ra_VidyPoruchenij.Коррекция))
	|	И НЕ ДокументВСДКоррекция.ПометкаУдаления");
		
	Если ТолькоНеИсполненные Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ ИсторияСостоянийДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен) ";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	Документы.ra_Nesootvetstvie.ЗаполнитьДескрипторыПроизводныхДокументов(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено);
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	Документы.ra_Nesootvetstvie.ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат Документы.ra_Nesootvetstvie.ПолучитьПоляДоступаПроизводногоДокумента();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияBitrix

Процедура СформироватьМассивДанныхGetList(Результат, ПолноеИмя, ПараметрыЗапросаHTTP) Экспорт
	
	ОбъектМетаданных = Метаданные.Документы.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya;
	
	ТаблицаРеквизитов = ра_ОбменДанными.ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
	
	АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов);
	
	ТекстЗапросаВложенныеТаблицы = ПолучитьТекстЗапросаВложенныеТаблицы();
	ТекстЗапросаСоединений = ПолучитьТекстЗапросаСоединений();
	
	Запрос = ра_ОбменДанными.ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ПолноеИмя, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзЗапроса(Запрос);
	Результат.Вставить("value", МассивДанных);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		МассивКолонок = ПолучитьПолучитьМассивКолонокСписка();
		МассивКнопок = ПолучитьМассивКнопок(Запрос.Параметры);
		МассивФильтров = ПолучитьМассивФильтровСписка();
		Результат.Вставить("form_settings", МассивКолонок);
		Результат.Вставить("button_settings", МассивКнопок);
		Результат.Вставить("filter_settings", МассивФильтров);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов)
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "DocStatus", "Перечисление.СостоянияДокументов", "ЕСТЬNULL(РС_ИсторияСостояний.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusIndex", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ИндексСтатуса, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "StatusTotal", "Число", "ЕСТЬNULL(РС_ИндексыСтатусовВидовОбъектов.ВсегоСтатусов, 0)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВложенныеТаблицы() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстЗапросаСоединений() Экспорт
	
	Возврат "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних КАК РС_ИсторияСостояний
	|	ПО ОсновнаяТаблица.Ссылка = РС_ИсторияСостояний.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ра_ИндексыСтатусовВидовОбъектов КАК РС_ИндексыСтатусовВидовОбъектов
	|	ПО ОсновнаяТаблица.ВидДокумента = РС_ИндексыСтатусовВидовОбъектов.ВидДокумента
	|	И РС_ИсторияСостояний.Состояние = РС_ИндексыСтатусовВидовОбъектов.СостояниеДокумента";
	
КонецФункции

Функция СформироватьМассивДанныхРолевойМодели(ДокументОбъект, ПараметрыФормирования = Неопределено) Экспорт
	
	Возврат Обработки.ра_ФормыБитрикс.Создать().ОписаниеФормы(ДокументОбъект.Метаданные(), ДокументОбъект);
	
КонецФункции

Функция ПолучитьМассивКнопок(ДокументОбъект) Экспорт
	
	ВидФормы = "ФормаОбъекта";
	Несоответствие = Документы.ra_Nesootvetstvie.ПустаяСсылка();
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ВидФормы = "ФормаСписка";
		Если ДокументОбъект.Свойство("Nesootvetstvie") Тогда
			Несоответствие = ДокументОбъект.Nesootvetstvie;
		КонецЕсли;
	Иначе
		Несоответствие = ДокументОбъект.Nesootvetstvie;
	КонецЕсли;
	
	Полномочия = РегистрыСведений.ra_KomandyNesootvetstvij.ПолномочияТекущегоПользователя(Несоответствие);
	
	МассивКнопок = Новый Массив;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Несоответствие,
			Новый Структура("ra_OtchetONesootvetstviiCHast1"));
		
		ЗадачиИДействия = ра_ОбщегоНазначенияПовтИсп.ПолучитьМассивДействийПоПредмету(ДокументОбъект.Ссылка);
		
		Статус = РегистрыСведений.ИсторияСостоянийДокументов.ПолучитьСостояниеДокумента(ДокументОбъект.Ссылка);
		
		ИмяКнопки = "Confirm";
		ОписаниеКнопки = НСтр("ru = 'Принять'; en = 'Confirm'");
		КнопкаПринять = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаПринять.Availability = ЗадачиИДействия.Свойство("Confirm");
		ра_ОбщийМодульСервер.ЗаполнениеGUIDЗадачиВКнопках(ЗадачиИДействия.Задача, КнопкаПринять);
		
		ИмяКнопки = "ReturnForRevork";
		ОписаниеКнопки = НСтр("ru = 'На доработку'; en = 'Return for rework'");
		КнопкаНаДоработку = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаНаДоработку.Availability = ЗадачиИДействия.Свойство("ReturnForRevork");
		ра_ОбщийМодульСервер.ЗаполнениеGUIDЗадачиВКнопках(ЗадачиИДействия.Задача, КнопкаНаДоработку);
		
		ИмяКнопки = "Perfomed";
		ОписаниеКнопки = НСтр("ru = 'Выполнено'; en = 'Performed'");
		КнопкаВыполнено = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаВыполнено.Availability = ЗадачиИДействия.Свойство("Perfomed");
		ра_ОбщийМодульСервер.ЗаполнениеGUIDЗадачиВКнопках(ЗадачиИДействия.Задача, КнопкаВыполнено);
		
		ИмяКнопки = "RedirectTask";
		ОписаниеКнопки = НСтр("ru = 'Перенаправить'; en = 'Redirect'");
		КнопкаПеренаправить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаПеренаправить.Availability = ЗадачиИДействия.Свойство("RedirectTask");
		ра_ОбщийМодульСервер.ЗаполнениеGUIDЗадачиВКнопках(ЗадачиИДействия.Задача, КнопкаПеренаправить);
		
		КнопкаПринять.Visibility = КнопкаПринять.Availability;
		КнопкаНаДоработку.Visibility = КнопкаНаДоработку.Availability;
		КнопкаВыполнено.Visibility = КнопкаВыполнено.Availability;
		КнопкаПеренаправить.Visibility = КнопкаПеренаправить.Availability;
		
		ИмяКнопки = "Save";
		ОписаниеКнопки = НСтр("ru = 'Сохранить'; en = 'Save'");
		КнопкаСохранить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаСохранить.Availability = Полномочия.ПервыйЛидер И Не РезультатыПроверки.Свойство("ra_OtchetONesootvetstviiCHast1");
		КнопкаСохранить.Visibility = КнопкаСохранить.Availability;
		
		Если Не ДокументОбъект.Ссылка.Пустая() Тогда
			ИмяКнопки = "Download";
			ОписаниеКнопки = НСтр("ru = 'Загрузить файл с компьютера;Перетащить с помощью Drag’n’Drop';
				|en = 'Load file from computer;Drag’n’Drop'");
			КнопкаЗагрузить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
			КнопкаЗагрузить.Availability = Статус <> Перечисления.СостоянияДокументов.Исполнен;
			КнопкаЗагрузить.Visibility = КнопкаЗагрузить.Availability;
		Иначе
			ИмяКнопки = "Download";
			ОписаниеКнопки = НСтр("ru = 'После создания документа;вы сможете прикреплять к нему файлы';
				|en = 'After creating a document;you can attach files to it'");
			КнопкаЗагрузить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
			КнопкаЗагрузить.Availability = Ложь;
		КонецЕсли;
		
		МассивКнопок.Добавить(КнопкаЗагрузить);
		МассивКнопок.Добавить(КнопкаСохранить);
		МассивКнопок.Добавить(КнопкаПринять);
		МассивКнопок.Добавить(КнопкаНаДоработку);
		МассивКнопок.Добавить(КнопкаВыполнено);
		МассивКнопок.Добавить(КнопкаПеренаправить);
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Несоответствие,
			Новый Структура("ra_OtchetONesootvetstviiCHast1"));
		
		ИмяКнопки = "AddRow";
		ОписаниеКнопки = НСтр("ru = 'Добавить строку'; en = 'Add row'");
		КнопкаДобавитьСтроку = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаДобавитьСтроку.Availability = Полномочия.ПервыйЛидер И Не РезультатыПроверки.Свойство("ra_OtchetONesootvetstviiCHast1");
		КнопкаДобавитьСтроку.Visibility = КнопкаДобавитьСтроку.Availability;
		
		ИмяКнопки = "UploadAktObUstraneniiNesootvetstviya";
		ОписаниеКнопки = НСтр("ru = 'Загрузить Акт об устранении'; en = 'Upload elimination act'");
		КнопкаЗагрузитьАкт = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаЗагрузитьАкт.Availability = Полномочия.ПервыйЛидер;
		КнопкаЗагрузитьАкт.Visibility = КнопкаЗагрузитьАкт.Availability;
		
		ИмяКнопки = "UploadOtchetONesootvetstviiCHast1";
		ОписаниеКнопки = НСтр("ru = 'Загрузить Отчет (часть 1)'; en = 'Upload Report (part 1)'");
		КнопкаЗагрузитьОтчет1 = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаЗагрузитьОтчет1.Availability = Полномочия.ПервыйЛидер;
		КнопкаЗагрузитьОтчет1.Visibility = КнопкаЗагрузитьОтчет1.Availability;
		
		МассивКнопок.Добавить(КнопкаДобавитьСтроку);
		МассивКнопок.Добавить(КнопкаЗагрузитьАкт);
		МассивКнопок.Добавить(КнопкаЗагрузитьОтчет1);
		
	КонецЕсли;
	
	Возврат МассивКнопок;
	
КонецФункции

Функция ПолучитьПолучитьМассивКолонокСписка() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya;
	
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	РеквизитыОбъекта = МетаданныеДокумента.Реквизиты;
	СтандартныеРеквизитыОбъекта = МетаданныеДокумента.СтандартныеРеквизиты;
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.CelevojSrok);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.FakticheskijSrok);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "FormStatus", НСтр("ru = 'Статус'; en = 'Status'")), "String(10)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.VidVremennyhSderzhivayushchihDejstvijIKorrekcij);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.Opisanie);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.Organizaciya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РеквизитыОбъекта.Otvetstvennyj);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, СтандартныеРеквизитыОбъекта.Дата);
		
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивФильтровСписка() Экспорт
	
	МассивДанных = Новый Массив;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивЗаголовков(МассивДанных = Неопределено) Экспорт
	
	МассивЗаголовков = Новый Массив;
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("Name");
	ТаблицаЗаголовков.Колонки.Добавить("Description");
	
	Для Каждого ТекЭлемент Из МассивДанных Цикл
		
		Если ТекЭлемент.Name = "Organizaciya" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "Otvetstvennyj" И ТекЭлемент.Visibility Тогда
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Contractor";
			НоваяСтрока.Description = НСтр("ru = 'ИСПОЛНИТЕЛЬ'; en = 'CONTRACTOR'");
			
		КонецЕсли;
		
		Если ТекЭлемент.Name = "FakticheskijSrok" И ТекЭлемент.Visibility
			ИЛИ ТекЭлемент.Name = "OtchetOVypolnenii" И ТекЭлемент.Visibility Тогда
			
			НоваяСтрока = ТаблицаЗаголовков.Добавить();
			НоваяСтрока.Name = "Results";
			НоваяСтрока.Description = НСтр("ru = 'РЕЗУЛЬТАТЫ'; en = 'RESULTS'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗаголовков.Свернуть("Name,Description");
	
	Для Каждого ТекСтрока Из ТаблицаЗаголовков Цикл
		МассивЗаголовков.Добавить(Новый Структура("Name,Description", ТекСтрока.Name, ТекСтрока.Description));
	КонецЦикла;
	
	Возврат МассивЗаголовков;
	
КонецФункции

//V2

Функция ЕстьМетодДополнитьОписаниеМетаданных() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьОписаниеМетаданных(ОбработкаОбъект, Данные, ПараметрыФормирования) Экспорт
	
	ОбработкаОбъект.ДобавитьПоле("",
		Новый Структура("Имя,Синоним,Тип", "TaskComment", НСтр("ru = 'Комментарий'; en = 'Comment'"), Новый ОписаниеТипов("Строка")));
	
	Полномочия = РегистрыСведений.ra_KomandyNesootvetstvij.ПолномочияТекущегоПользователя(Данные.Nesootvetstvie);
	
	РезультатыПроверки = Документы.ra_Nesootvetstvie.ПроверитьНаличиеПроизводныхДокументов(Данные.Nesootvetstvie,
		Новый Структура("ra_OtchetONesootvetstviiCHast1"));
	
	ЗадачиИДействия = ра_ОбщегоНазначенияПовтИсп.ПолучитьМассивДействийПоПредмету(Данные.Ссылка);
	
	ОбработкаОбъект.УстановитьВидимость(
		"Дата,
		|Номер,
		|VidVremennyhSderzhivayushchihDejstvijIKorrekcij,
		|CelevojSrok,
		|Opisanie,
		|Organizaciya,
		|Otvetstvennyj,
		|FakticheskijSrok,
		|OtchetOVypolnenii", Истина);
	
	ОбработкаОбъект.УстановитьДоступность(
		"VidVremennyhSderzhivayushchihDejstvijIKorrekcij,
		|CelevojSrok,
		|Opisanie,
		|Organizaciya,
		|Otvetstvennyj", Полномочия.ПервыйЛидер И Не РезультатыПроверки.Свойство("ra_OtchetONesootvetstviiCHast1"));
	
	ОбработкаОбъект.УстановитьДоступность("OtchetOVypolnenii",
		ра_ОбщегоНазначения.ТекущийПользовательИсполнительИлиДелегат(Данные.Otvetstvennyj)
			И РегистрыСведений.ИсторияСостоянийДокументов.ПолучитьСостояниеДокумента(Данные.Ссылка) = Перечисления.СостоянияДокументов.НаИсполнении);
	
	ОбработкаОбъект.УстановитьВидимость("TaskComment", ЗадачиИДействия.Свойство("Confirm"));
	ОбработкаОбъект.УстановитьДоступность("TaskComment", Не РезультатыПроверки.Свойство("ra_OtchetONesootvetstviiCHast1"));
	ОбработкаОбъект.УстановитьОбязательность("TaskComment", Истина);
	
	ОбязательныеРеквизиты = ОбработкаОбъект.ОбязательныеРеквизиты();
	АктуализироватьМассивОбязательныхРеквизитов(ОбязательныеРеквизиты, Данные);
	ОбработкаОбъект.УстановитьОбязательность(ОбязательныеРеквизиты, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#КонецЕсли