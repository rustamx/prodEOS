
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.Дата) Тогда
			Объект.Дата = Параметры.Дата;
		Иначе
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда 
			Объект.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;	
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
		
		Если Не ЗначениеЗаполнено(Объект.СпособУказанияВремени) Тогда 
			Объект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		КонецЕсли;
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		
		УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
		
		Элементы.ФормаПоказатьВСписке.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		ЗаполнитьРаботыПриКопировании(Параметры.ЗначениеКопирования.Дата);
	Иначе	
		ЗаполнитьРаботыТекущегоДня();
	КонецЕсли;	
	
	ОсновнойВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
	ОсновнойПроект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	// установка видимости полей
	УстановитьВидимость();
	
	// формирование заголовка формы
	СформироватьЗаголовокФормы();
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаМиниАнкета");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		Если ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда 
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		КонецЕсли;
	КонецЕсли;	
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляЗаполнения(), ЭтаФорма.ИмяФормы);
	
	НачальнаяДата = НачалоДня(Объект.Дата);
	НачальныйПользователь = Объект.Пользователь;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	РассчитатьПродолжительностьДня(); 	// обновление реквизита продолжительность
	ОбновитьПодвал();					// вывод итогов в подвал
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если (ИсточникВыбора.ИмяФормы = "Документ.ЕжедневныйОтчет.Форма.ФормаПодбораРабот") 
	   И (ТипЗнч(РезультатВыбора) = Тип("Структура")) Тогда
		
		Строка = Работы.Добавить();
		ОбработкаВыбораРаботы(РезультатВыбора, Строка);
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПроектаЗадачи"
		И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда 
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = РезультатВыбора;
		
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоПодразделениеПользователя" И Параметр = Объект.Пользователь Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОчиститьСообщения();

	// заполнение длительности на основе строкового поля
	Если Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.Длительность") Тогда
		Для Каждого Строка Из Работы Цикл
			Строка.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
		КонецЦикла;
	КонецЕсли;
	ОбновитьПодвал();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Работы", Работы.Выгрузить());
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	СформироватьЗаголовокФормы();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	Элементы.ФормаПоказатьВСписке.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Дата", Объект.Дата);
		
	Оповестить("ИзмененЕжедневныйОтчет", ПараметрыОповещения, ЭтаФорма);	
	
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Работы Цикл
		ИндексСтроки = Работы.Индекс(Строка);
		
		Если Не ЗначениеЗаполнено(Строка.Работа) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Содержание работ"" в строке %1 списка ""Работы"".'; en = 'Column ""Work details"" is not filled in in row %1 of the list ""Works"".'"),
				ИндексСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Работа",,Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ВидРабот) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Вид работ"" в строке %1 списка ""Работы"".'; en = 'Column ""Work type"" is not filled in in row %1 of the list ""Works"".'"),
				ИндексСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ВидРабот",,Отказ);
		КонецЕсли;
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
			Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
			Если Не ЗначениеЗаполнено(Длительность) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Время"" в строке %1 списка ""Работы"".'; en = 'Column ""Time"" is not filled in in row %1 of the list ""Works"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ДлительностьСтр",,Отказ);
			КонецЕсли;	
		Иначе
			Если Не ЗначениеЗаполнено(Строка.Начало) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Начало работ"" в строке %1 списка ""Работы"".'; en = 'Column ""Work start"" is not filled in in row %1 of the list ""Works"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Начало",,Отказ);
			КонецЕсли;	
				
			Если Не ЗначениеЗаполнено(Строка.Окончание) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Окончание работ"" в строке %1 списка ""Работы"".'; en = 'Column ""Work end"" is not filled in in row %1 of the list ""Works"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Окончание",,Отказ);
			КонецЕсли;	
				
			Если Строка.Начало > Строка.Окончание Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Время начала работ больше, чем время окончания работ в строке %1 списка ""Работы"".'; en = 'Start time is later than the end time at row %1 of the list ""Work"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Начало",,Отказ);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		
		// Проверка пересекающихся интервалов
		Для Инд1 = 0 По Работы.Количество()-2 Цикл
			Строка1 = Работы[Инд1];
			
			Для Инд2 = Инд1+1 По Работы.Количество()-1 Цикл
				Строка2 = Работы[Инд2];
				
				Если (Строка2.Начало >= Строка1.Начало И Строка2.Начало < Строка1.Окончание)
					Или (Строка2.Окончание > Строка1.Начало И Строка2.Окончание <= Строка1.Окончание) Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Найдены пересекающиеся интервалы времени в строках %1 и %2 списка ""Работы"".'; en = 'Found overlapping intervals in rows %1 %2 of the list ""Works"".'"),
						Инд1+1,
						Инд2+1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
						"Работы",,Отказ);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Для каждого Строка Из Работы Цикл
			Если Не ЗначениеЗаполнено(Строка.ПроектЗадача) Тогда 
				Продолжить;
			КонецЕсли;
			
			ИндексСтроки = Работы.Индекс(Строка);
			ТекстСообщения = "";
			РезультатПроверки = РаботаСПроектами.ПроверитьЗаписьОФактическихТрудозатратах(
				Строка.Проект,
				Строка.ПроектнаяЗадача,
				Строка.Источник,
				Объект.Пользователь,
				ТекстСообщения);
			Если Не РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Работы[" + ИндексСтроки + "].ПроектЗадача",, 
					Отказ);	
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоДняПриИзменении(Элемент)
	
	Объект.НачалоДня = Объект.НачалоДня - Секунда(Объект.НачалоДня);
	РассчитатьПродолжительностьДня();
	ОбновитьПодвал();
	
	Если Объект.НачалоДня > Объект.ОкончаниеДня И ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Указанное время начала дня больше времени окончания!'; en = 'The specified start of the day is later the the ending time!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзменении(Элемент)

	Объект.ОкончаниеДня = Объект.ОкончаниеДня - Секунда(Объект.ОкончаниеДня);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОкончаниеДняПриИзмененииПродолжение",
		ЭтотОбъект);

	Если Объект.ОкончаниеДня < Объект.НачалоДня И ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'Указанное время окончания дня меньше времени начала'; en = 'The specified ending time is less than start time'"));	
	Иначе 
		ОкончаниеДняПриИзмененииПродолжение(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзмененииПродолжение(Параметры) Экспорт 

	Если (Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала"))
		И (Работы.Количество() > 0) И ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
    	Если Объект.ОкончаниеДня < Работы[Работы.Количество()-1].Начало Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Указанное время окончания дня меньше времени начала одной из работ!'; en = 'The specified ending time of the day is less than start time of one of the works!'"));
			Объект.ОкончаниеДня = '00010101';
		КонецЕсли;
	КонецЕсли;

    РассчитатьДлительностьСтрок();
	РассчитатьПродолжительностьДня();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) <> НачальнаяДата Тогда 
		ПриИзмененииДаты();
		НачальнаяДата = НачалоДня(Объект.Дата);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	
	Если Объект.Пользователь <> НачальныйПользователь Тогда
		
		ПользовательПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.Начало = ТекущиеДанные.Начало - Секунда(ТекущиеДанные.Начало);
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

	Если ТекущиеДанные.Начало > ТекущиеДанные.Окончание И ЗначениеЗаполнено(ТекущиеДанные.Окончание) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Время начала работы больше, чем время окончания'; en = 'Start time is later than the end time'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
    ТекущиеДанные.Окончание = ТекущиеДанные.Окончание - Секунда(ТекущиеДанные.Окончание);
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();
	
	Если ТекущиеДанные.Окончание < ТекущиеДанные.Начало И ЗначениеЗаполнено(ТекущиеДанные.Окончание) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Время окончания работы меньше, чем время начала'; en = 'End time is earlier than the start time'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если Не УчетВремениКлиентСервер.ПроверитьФормат(ТекущиеДанные.ДлительностьСтр) Тогда
		ТекущиеДанные.ДлительностьСтр = "";
	КонецЕсли;
	ТекущиеДанные.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(ТекущиеДанные.ДлительностьСтр);
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(ЭтаФорма, ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
			
		ТекущиеДанные.ПроектЗадача = ПроектЗадача;
		
		ВыбранноеЗначение = ПроектЗадача;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Проект = Неопределено;
	ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПроектЗадача) Тогда 
		ТекущиеДанные.Проект = Неопределено;
		ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
			ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ВыбранноеЗначение.Проект, 
				ВыбранноеЗначение.ПроектнаяЗадача,
				ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРаботы(РезультатВыбора, Строка)

	Строка.Работа 	= РезультатВыбора.Работа; 
	Строка.ВидРабот = РезультатВыбора.ВидРабот;
	Строка.Проект = РезультатВыбора.Проект;
	Строка.ПроектнаяЗадача = РезультатВыбора.ПроектнаяЗадача;
	Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		
	Если ТипЗнч(РезультатВыбора.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
		Строка.Источник = Неопределено;
	Иначе	
		Строка.Источник = РезультатВыбора.Источник;
	КонецЕсли;
		
	Если Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала")
		И Не ЗначениеЗаполнено(Строка.Начало) Тогда 
		// заполняем начало работы текущим временем
		ТекущаяДата   = ТекущаяДата();
		Строка.Начало = ТекущаяДата - Секунда(ТекущаяДата);
			
		РассчитатьДлительностьСтрок();
	КонецЕсли;
	ОбновитьПодвал();

	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботы

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 	
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;    	
		Если Не Копирование Тогда 
			ТекущиеДанные.ВидРабот = ОсновнойВидРабот;
			ТекущиеДанные.Проект = ОсновнойПроект;
			ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ТекущиеДанные.Проект, 
				ТекущиеДанные.ПроектнаяЗадача);
		КонецЕсли;
		
		
		Если Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала") Тогда 
			Строка = Работы.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
			Индекс = Работы.Индекс(Строка);
			Если Индекс > 0 Тогда 
				ТекущиеДанные.Начало = Работы[Индекс-1].Окончание;
			Иначе
				ТекущиеДанные.Начало = Объект.НачалоДня;
			КонецЕсли;	
				
			РассчитатьДлительностьСтрок();
		КонецЕсли;
		
		ОбновитьПодвал();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
    РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура РаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		Строка = Элементы.Работы.ТекущиеДанные;
		ОбработкаВыбораРаботы(ВыбранноеЗначение, Строка);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Работа;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Пользователь);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Пользователь);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	
	Если Модифицированность И Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Ссылка);
	
	Если ТекущийПользователь <> Объект.Пользователь Тогда 
		Форма = ПолучитьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаСписка",
			ПараметрыФормы);
	Иначе 
		Форма = ПолучитьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаСвоиОтчеты",
			ПараметрыФормы);
	КонецЕсли;
	
	Форма.Открыть();
	Форма.ВыполнитьПереход(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
		
		Элементы.Начало.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
		Элементы.ДлительностьСтр.Видимость = Истина;
		
	ИначеЕсли Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		
		Элементы.Начало.Видимость = Истина;
		Элементы.Окончание.Видимость = Истина;
		Элементы.ДлительностьСтр.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьПродолжительностьДня()
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПродолжительностьДня = "";
		
	ИначеЕсли Объект.НачалоДня > Объект.ОкончаниеДня Тогда 
		ПродолжительностьДня = "";
		
	Иначе	
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(Объект.ОкончаниеДня - Объект.НачалоДня);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПодвал()
	
	// вывод строки Всего за день
	ДлительностьРаботСек = 0;
	Для Каждого Строка Из Работы Цикл
		ДлительностьРаботСек = ДлительностьРаботСек + Строка.Длительность;
	КонецЦикла;
	ДлительностьРабот = НСтр("ru = 'Всего за день'; en = 'Total for day'") + " " + УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек, "0");
	
	// вывод строки Превышено \ Осталось
	ПродолжительностьДняСек = Объект.ОкончаниеДня - Объект.НачалоДня;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		СообщениеОшибки = "";
		
	ИначеЕсли ДлительностьРаботСек > ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(превышено на %1)'; en = '(exceeded by %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек - ПродолжительностьДняСек));
		
	ИначеЕсли ДлительностьРаботСек < ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(осталось %1)'; en = '(left %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ПродолжительностьДняСек - ДлительностьРаботСек));
		
	Иначе
		СообщениеОшибки = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
    Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Ежедневный отчет (создание)'; en = 'Daily work report (Create)'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Ежедневный отчет за'; en = 'Daily report for'") + " " + Формат(Объект.Дата, "ДЛФ=D");
	КонецЕсли;
	
	Элементы.НачалоДня.Заголовок = ТРег(Формат(Объект.Дата, "ДФ=дддд"));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительностьСтрок()
	
	// заполнение поля длительность
	Если (Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала"))
		И (Работы.Количество() > 0) Тогда
		Работы.Сортировать("Начало Возр");

		Для Каждого Строка Из Работы Цикл
			Если Строка.Окончание > Строка.Начало Тогда 
				Строка.Длительность = Строка.Окончание - Строка.Начало;
			Иначе
				Строка.Длительность = 0;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьРаботыВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Работы.Выгрузить(,"Работа"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	Для Каждого Строка Из Работы Цикл
		НоваяСтрока = СписокСохраняемыхПолей.Добавить();
		НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
		НоваяСтрока.ЗначениеРеквизита = Строка.ВидРабот;
	КонецЦикла;
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

&НаСервере
Функция ЭлементыДляЗаполнения()
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	НоваяСтрока = СписокСохраняемыхПолей.Добавить();
	НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = Объект.Дата Тогда 
		Объект.Дата = Объект.Дата + 1;
	КонецЕсли;
	СформироватьЗаголовокФормы();
	УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
	
	ЗаполнитьРаботыПриСменеДаты();
	
КонецПроцедуры	

// показывает в табличной части работы за текущий день
&НаСервере
Процедура ЗаполнитьРаботыТекущегоДня(ОчищатьРаботы = Истина)
	
	Если ОчищатьРаботы Тогда 
		Работы.Очистить();
	КонецЕсли;
	
	Результат = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(Объект.Дата, Объект.Пользователь);
	
	Для Каждого Строка Из Результат Цикл
		Если ЗначениеЗаполнено(Строка.ЕжедневныйОтчет) 
		   И Строка.ЕжедневныйОтчет <> Объект.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		НоваяСтрока.ДатаДобавления = Строка.ДатаДобавления;
		НоваяСтрока.Источник = Строка.Источник;
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = Строка.Окончание;
			НоваяСтрока.Длительность = Строка.Длительность;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;	
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры	

// заполняет работы при изменении даты
&НаСервере
Процедура ЗаполнитьРаботыПриСменеДаты()
	
	КоличествоСтрок = Работы.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = Работы[КоличествоСтрок - Инд];
		Если ЗначениеЗаполнено(Строка.Источник) И ТипЗнч(Строка.Источник) <> Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
			Работы.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаполнитьРаботыТекущегоДня(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРаботыПриКопировании(ДатаКопирования)
	
	Работы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеТрудозатраты.Подразделение,
	|	ФактическиеТрудозатраты.Пользователь,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления,
	|	ФактическиеТрудозатраты.Начало,
	|	ФактическиеТрудозатраты.Окончание,
	|	ФактическиеТрудозатраты.Длительность,
	|	ФактическиеТрудозатраты.ЕжедневныйОтчет,
	|	ФактическиеТрудозатраты.ОписаниеРаботы
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|	И ФактическиеТрудозатраты.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаКопирования);
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		НоваяСтрока.ДатаДобавления = '00010101';
		
		Если ТипЗнч(Строка.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
			НоваяСтрока.Источник = Неопределено;
		Иначе	
			НоваяСтрока.Источник = Строка.Источник;
		КонецЕсли;	
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = Строка.Окончание;
			НоваяСтрока.Длительность = Строка.Длительность;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;	
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПользовательПриИзмененииСервер()
	
	УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
	ЗаполнитьРаботыТекущегоДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	Если Записать() Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подобрать()
	
	АдресВременногоХранилища = ПоместитьРаботыВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Пользователь", Объект.Пользователь);
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);

	ОткрытьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаПодбораРабот", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 85, 115);
	
КонецПроцедуры

#КонецОбласти
