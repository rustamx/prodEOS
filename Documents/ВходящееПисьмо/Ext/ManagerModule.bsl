#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Папка";
	
КонецФункции

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	// Папка
	ДокументооборотПраваДоступа.ЗаполнитьПапкуДескриптораОбъекта(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИПисем";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ДобавлениеПапокИПисем";
	Стр.Добавление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокИПисем";
	Стр.Изменение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ПометкаУдаленияПапокИПисем";
	Стр.Удаление = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

// Конец УправлениеДоступом

// Возвращает текст письма в виде HTML.
Функция ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма, ДляКарточкиВходящегоПисьма = Ложь) Экспорт
	
	ТекстHTML = "";
	
	Если РеквизитыПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстHTML = РегистрыСведений.HTMLПредставленияСодержанияПисем.Прочитать(РеквизитыПисьма.Ссылка);
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить();
			
			Если ТекстHTML = Неопределено Тогда
				ТекстHTML = "";
			Иначе
				
				ОбрезатьСлишкомДлинныйТекст(ТекстHTML);
				
				РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
				
				РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстHTML = РегистрыСведений.HTMLПредставленияСодержанияПисем.Прочитать(РеквизитыПисьма.Ссылка);
		
		Если ТекстHTML = Неопределено Тогда
			
			ПростойТекст = РеквизитыПисьма.ТекстПисьмаПростойТекстХранилище.Получить();
			
			Если ПростойТекст = Неопределено Тогда
				
				ТекстHTML = "";
				
			Иначе
				
				ТекстHTML = РаботаС_HTML.ПолучитьHTMLИзТекста(ПростойТекст, РеквизитыПисьма.Кодировка);
				
				ОбрезатьСлишкомДлинныйТекст(ТекстHTML);
				
				РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
				
				РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Найти(НРег(РеквизитыПисьма.ВнутреннийЗаголовок), "text/calendar") > 0 Тогда 
		ContentType = ВстроеннаяПочтаСервер.ПолучитьЗначениеПоляИзЗаголовкаПисьма(РеквизитыПисьма.ВнутреннийЗаголовок, "Content-Type");
		Если Найти(НРег(ContentType), "text/calendar") > 0 И Найти(ТекстHTML, "BEGIN:VCALENDAR") <> 0 Тогда 
			// формат iCalendar
			ТекстHTML = СформироватьТекстПриглашения(ТекстHTML, РеквизитыПисьма.Тема);
		КонецЕсли;	
	КонецЕсли;
	
	РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(ТекстHTML,,,,ДляКарточкиВходящегоПисьма);
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Входящее письмо'; en = 'Incoming email'");
	
КонецФункции

Процедура ОбрезатьСлишкомДлинныйТекст(ТекстHTML)
	
	МаксимальнаяДлина = 1500000; // 1.5 Мб
	ДлинаТекста = СтрДлина(ТекстHTML);
	Если ДлинаТекста > МаксимальнаяДлина Тогда
		
		РазмерВМб = ДлинаТекста/(1024*1024);
		
		ТекстHTML = Лев(ТекстHTML, МаксимальнаяДлина);
		ТекстHTML = ТекстHTML + 
			+ Символы.ПС + "<hr>" + "<p>" + "<font color=""red"">"
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Т.к. содержание письма очень большое (%1 Мб), показана только часть письма. 
			|Для просмотра всего содержания письма используйте команду <b>""Сохранить письмо"" (Alt-S)</b> 
			|для сохранения и последующего просмотра содержания письма.';
			|en = 'Because the content of the email is very large (%1 Mb), only part of the emailis shown. 
			|To view the entire contents of the email, use the command <b>""Save email""(Alt-S)</b> to save and then view the contents of the email.'"),
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб))
			+ "</font>" + "</p>" + "</body>" + "</html>";
			
	КонецЕсли;	
	
КонецПроцедуры	

Функция СформироватьТекстПриглашения(ТекстHTML, Тема)
	
	ТолькоТекст = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстHTML);
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТолькоТекст, Символы.ВК + Символы.ПС);
	ПараметрыКалендаря = Новый Соответствие;
	
	ОписаниеУжеБыло = Ложь;
	УчастникиСтрокой = "";
	
	ТекстОписания = "";
	НачалосьОписание = Ложь;
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		СтрокаКалендаря = Строка;
		
		Если НачалосьОписание Тогда
			
			ЭтоНачалоПоля = Истина;
			БылиДопустимыеСимволы = Ложь;
			
			ПервыйСимволДопустимый = Ложь;
			Если СтрокаКалендаря <> "" Тогда
				Символ = Лев(СтрокаКалендаря, 1);
				ПервыйСимволДопустимый = ЭтоДопустимыйСимвол(Символ);
			КонецЕсли;	
			
			Для Поз = 0 По СтрДлина(СтрокаКалендаря) Цикл
				
				Символ = Сред(СтрокаКалендаря, Поз + 1 , 1);
				
				Если Не ЭтоДопустимыйСимвол(Символ) Тогда
					
					// корректное начало нового поля - сперва допустимый символ (не пробел),
					// потом все заглавные латинские, потом ";" или ":"
					// тут проверка на инверсию этого условия
					Если Не ПервыйСимволДопустимый Или Не БылиДопустимыеСимволы Или (Символ <> ":" И Символ <> ";") Тогда
					
						ЭтоНачалоПоля = Ложь;
						
					КонецЕсли;	
					
					Прервать;
					
				Иначе
					БылиДопустимыеСимволы = Истина;				
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если Не БылиДопустимыеСимволы Тогда
				ЭтоНачалоПоля = Ложь;
			КонецЕсли;	
			
			Если ЭтоНачалоПоля Тогда
				НачалосьОписание = Ложь;
			Иначе
				ТекстОписания = ТекстОписания + СтрокаКалендаря;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("ATTENDEE")) = 1 Тогда // ATTENDEE в начале
			
			МассивСтрокПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКалендаря, ";");
			Для Каждого СтрокаВПоле Из МассивСтрокПоля Цикл
				
				Если Найти(ВРег(СтрокаВПоле), ВРег("CN=")) = 1 Тогда
					
					ИмяУчастника = Сред(СтрокаВПоле, СтрДлина("CN=") + 1);
					Если Не ПустаяСтрока(УчастникиСтрокой) Тогда
						УчастникиСтрокой = УчастникиСтрокой + "; ";
					КонецЕсли;	
					УчастникиСтрокой = УчастникиСтрокой + ИмяУчастника;
					Прервать;
					
				ИначеЕсли Найти(ВРег(СтрокаВПоле), ВРег("RSVP=")) = 1 Тогда	
					
					ПозицияMailto = Найти(ВРег(СтрокаВПоле), ВРег("MAILTO:"));
					Если ПозицияMailto <> 0 Тогда	
						
						АдресУчастника = Сред(СтрокаВПоле, ПозицияMailto + СтрДлина("MAILTO:"));
						Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресУчастника, "");
						ИмяУчастника = Строка(Адресат);
						
						Если Не ПустаяСтрока(УчастникиСтрокой) Тогда
							УчастникиСтрокой = УчастникиСтрокой + "; ";
						КонецЕсли;	
						
						УчастникиСтрокой = УчастникиСтрокой + ИмяУчастника;
						Прервать;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		ПозицияДвоеточия = Найти(СтрокаКалендаря, ":");
		Если ПозицияДвоеточия <> 0 И Не НачалосьОписание Тогда
			ИмяПоля = Лев(СтрокаКалендаря, ПозицияДвоеточия - 1);
			ЗначениеПоля = Сред(СтрокаКалендаря, ПозицияДвоеточия + 1);
			
			Если Не ПустаяСтрока(ИмяПоля) Тогда
				
				Если ВРег(ИмяПоля) = ВРег("DESCRIPTION") Тогда
					Если ОписаниеУжеБыло Тогда
						Продолжить;
					Иначе
						ОписаниеУжеБыло = Истина;
						ТекстОписания = ЗначениеПоля;
						НачалосьОписание = Истина;
					КонецЕсли;	
				КонецЕсли;	
				
				Если Найти(ВРег(ИмяПоля), ВРег("DTSTART")) = 1 Тогда // DTSTART в начале
					
					СтрокаДаты = ЗначениеПоля;
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", "");
					
					ЭтоВремяВUTC = Ложь;
					Если Найти(СтрокаДаты, "Z") <> 0 Тогда
						ЭтоВремяВUTC = Истина;
					КонецЕсли;
					
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "Z", "");
					
					Попытка
						ДатаНачала = Дата(СтрокаДаты);
						Если ЭтоВремяВUTC Тогда
							ДатаНачала = МестноеВремя(ДатаНачала);
						КонецЕсли;	
						
						ЗначениеПоля = ДатаНачала;
						ИмяПоля = "DTSTART";
					Исключение
						Продолжить;
					КонецПопытки;
					
				КонецЕсли;	
				
				Если Найти(ВРег(ИмяПоля), ВРег("DTEND")) = 1 Тогда // DTEND в начале
					
					СтрокаДаты = ЗначениеПоля;
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", "");
					
					ЭтоВремяВUTC = Ложь;
					Если Найти(СтрокаДаты, "Z") <> 0 Тогда
						ЭтоВремяВUTC = Истина;
					КонецЕсли;
					
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "Z", "");
					
					Попытка
						ДатаКонца = Дата(СтрокаДаты);
						Если ЭтоВремяВUTC Тогда
							ДатаКонца = МестноеВремя(ДатаКонца);
						КонецЕсли;	
						
						ЗначениеПоля = ДатаКонца;
						ИмяПоля = "DTEND";
					Исключение
						Продолжить;
					КонецПопытки;
					
				КонецЕсли;	
				
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
					ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "\n", "<br>");
				КонецЕсли;	
				
				ПараметрыКалендаря[ИмяПоля] = ЗначениеПоля;
				
			КонецЕсли;	
			
		КонецЕсли;			
		
	КонецЦикла;				
	
	ТекстОписания = СтрЗаменить(ТекстОписания, "\n", "<br>");
	
	Название = Тема; 
	Место = ПараметрыКалендаря["LOCATION"];
	КогдаНачало = ПараметрыКалендаря["DTSTART"];
	КогдаКонец = ПараметрыКалендаря["DTEND"];
	Описание = ТекстОписания;
	Участники = УчастникиСтрокой;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Название'; en = 'Name'"), Название));
	Если Место <> Неопределено Тогда
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Место'; en = 'Location'"), Место));
	КонецЕсли;	
	
	Если КогдаКонец = Неопределено Тогда
		
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Время'; en = 'Time'"), 
			Формат(КогдаНачало, "ДФ='dd.MM.yyyy hh:mm'")));
		
	ИначеЕсли КогдаНачало <> Неопределено И КогдаКонец <> Неопределено Тогда
		
		СтрокаДаты = "";
		
		Если НачалоДня(КогдаНачало) = НачалоДня(КогдаКонец) Тогда
			СтрокаДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 - %2",
				Формат(КогдаНачало, "ДФ='dd.MM.yyyy hh:mm'"), 
				Формат(КогдаКонец, "ДФ='hh:mm'"));
		Иначе	
			СтрокаДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 - %2",
				Формат(КогдаНачало, "ДФ='dd.MM.yyyy hh:mm'"), 
				Формат(КогдаКонец, "ДФ='dd.MM.yyyy hh:mm'"));
		КонецЕсли;	
		
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Время'; en = 'Time'"), СтрокаДаты));
			
	КонецЕсли;	
	
	МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Участники'; en = 'Participants'"), Участники));
	Если Описание <> Неопределено Тогда
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Описание'; en = 'Details'"), Описание));
	КонецЕсли;	
	
	ТекстHTML = НСтр("ru='<h3>Приглашение</h3>'; en = '<h3>Invitation</h3>'");
	
	Для Каждого Поле Из МассивПолей Цикл
		СтрокаHTML = "<b>" + Поле.Имя + "</b>:&nbsp;" + Поле.Значение + "<br>";
		ТекстHTML = ТекстHTML + СтрокаHTML + Символы.ВК;
	КонецЦикла;
	
	ВстроеннаяПочтаСервер.ДобавитьНеобходимыеТэгиHTML(ТекстHTML);
	
	Возврат ТекстHTML;
	
КонецФункции	

Функция ЭтоДопустимыйСимвол(Символ)
	
	ДопустимыеСимволы = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	Если Найти(ДопустимыеСимволы, Символ) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Тема");
	Поля.Добавить("Дата");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 от %2'; en = '%1 of %2'"), Данные.Тема, Строка(Данные.Дата));
	
КонецПроцедуры

#КонецЕсли
