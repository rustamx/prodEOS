&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Запрет создания новых
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьВнутреннююМаршрутизацию = Константы.ИспользоватьВнутреннююМаршрутизацию.Получить();
	
	КартинкаВнешнийАдресат = БиблиотекаКартинок.ВнешнийАдресат16;
	КартинкаВнутреннийАдресат = БиблиотекаКартинок.ВнутреннийАдресат16;	
	КартинкаВнутренняяМаршрутизация = БиблиотекаКартинок.ВнутренняяМаршрутизация16;
	КартинкаВнешняяМаршрутизация = БиблиотекаКартинок.ВнешняяМаршрутизация16;
	
	ОтображатьУдаленныеФайлы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		Ложь);
	
	Элементы.ОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
	
	ОтобразитьСвязиПисьма();
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Установка заголовка формы
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
	// Установка надписи для важности письма
	ВажностьНадпись = Объект.Важность;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия,
		ЭтаФорма.Элементы.УказатьТрудозатраты_ВсеДействия);
		
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПротоколРаботыПользователей) Тогда
		Элементы.ПротоколРаботы.Видимость = Ложь;
	КонецЕсли;
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ФормаСохранитьПисьмо.Видимость = Ложь;
		Элементы.ФормаСохранитьПисьмо_ВсеДействия.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма.Видимость = Истина;
		Элементы.СохранитьТекстПисьма_ВсеДействия.Видимость = Истина;
		Элементы.ТекстПисьмаКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
	Иначе
		Элементы.ФормаСохранитьПисьмо.Видимость = Истина;
		Элементы.ФормаСохранитьПисьмо_ВсеДействия.Видимость = Истина;
		Элементы.СохранитьТекстПисьма.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма_ВсеДействия.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
	
	// Определяем список выбора типа предмета
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВнутренниеДокументы.ПустаяСсылка"), НСтр("ru = 'Внутренний документ'; en = 'Internal document'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Входящий документ'; en = 'Incoming document'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"), НСтр("ru = 'Задача'; en = 'Task'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ИсходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Исходящий документ'; en = 'Outgoing document'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Мероприятия.ПустаяСсылка"), НСтр("ru = 'Мероприятие'; en = 'Event'"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"), НСтр("ru = 'Проект'; en = 'Project'"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ПроектныеЗадачи.ПустаяСсылка"), НСтр("ru = 'Проектная задача'; en = 'Project task'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"), НСтр("ru = 'Файл'; en = 'File'"));
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтрольныеТочки.ПустаяСсылка"), НСтр("ru = 'Контрольная точка'; en = 'Milestone'"));
	
	ВывестиВидМаршрутизации();
	ВывестиВидАдресатов();
	
	РегистрыСведений.СведенияОПросмотреПисем.УстановитьПризнакПросмотрено(Объект.Ссылка);
	
	// Контроль писем
	Контроль.УстановитьСвойстваКнопкиКонтроляПисьма(ЭтаФорма);
	
	ПодсказкаСтатуса = "";
	ВстроеннаяПочтаСервер.ПрочитатьСтатусПисьма(Объект.Ссылка, СтатусПисьма, ПодсказкаСтатуса);
	Элементы.СтатусПисьма.Подсказка = ПодсказкаСтатуса;
	Элементы.СтатусПисьма.Гиперссылка = Элементы.ПисемВПереписке.Гиперссылка;
	
	ШрифтОтображения = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	ШрифтОтображенияПоУмолчанию = ШрифтОтображения;
	
	ТипыПредметов = Метаданные.Документы.ВходящееПисьмо.Реквизиты.Предмет.Тип.Типы();
	Для Каждого ТипПредмета Из ТипыПредметов Цикл
		СписокТиповПредмета.Добавить(ТипПредмета);
	КонецЦикла;	
	
	ЕстьОшибкиПриемкиОтправкиПочты = РегистрыСведений.КешИнформацииОбОбъектах.ПолучитьПризнак(
		Объект.Ссылка, "ЕстьОшибкиПриемкиОтправкиПочты");
	
	//Если ЕстьОшибкиПриемкиОтправкиПочты Тогда
	//	Элементы.ГруппаОшибка.Видимость = Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Получатели.Очистить();
	
	ЗаполнитьПолучателейКомуКопия();
	
	ВставитьПолучателя(
		НСтр("ru = 'От:'; en = 'From:'"),
		Объект.ОтправительАдресат);
		
	Если Объект.ТипТекста <> Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		Элементы.ФормаПоказатьИсходныйТекст.Видимость = Ложь;
	КонецЕсли;	
		
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ОтображатьФотографииПерсональнаяНастройка",
			Истина);
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(
		Объект.ОтправительАдресат);
	
	ТекущийПолучатель = ПредставлениеАдресата.Контакт;
	
	// Формирование представления для поля От
	ОтправительСтрокой = ПредставлениеАдресата.Представление;
	
	ЗаполнитьПредметСтрокой(ТекущийОбъект.Предмет);
	ЗаполнитьПроектСтрокой(ТекущийОбъект.Проект);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Элементы.ПроектСтрокой.Видимость = Ложь;
	КонецЕсли;	
	
	// Формирование HTML представления тела письма
	ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		Объект.Ссылка,
		УникальныйИдентификатор,
		Истина, // ВыводитьШапку
		,,,
		Истина); // ДляКарточкиВходящегоПисьма
		
	РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
		ТекстПисьма, ШрифтОтображения, ШрифтОтображенияУстановлен);
	
	// Вложения
	ОбновитьФайлыПисьма();
	
	РаботаСФлагамиОбъектовСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
	
	ДанныеОтправителя = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Объект.ОтправительАдресат);
	ОтправительКонтакт = ДанныеОтправителя.Контакт;
	ОтправительПредставление = ДанныеОтправителя.Представление;
	ОтправительАдрес = Объект.ОтправительАдресат.Адрес;
	Если ЗначениеЗаполнено(ДанныеОтправителя.Контакт) Тогда
		
		 Элементы.СоздатьКонтактноеЛицо.Доступность = Ложь;
		 Элементы.СоздатьКонтрагента.Доступность = Ложь;
		 Элементы.СоздатьЛичногоАдресата.Доступность = Ложь;
		
	КонецЕсли;	
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
		
	Если Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		
		Если РаботаСПрочтениями.УстановитьСвойствоПрочтен(Объект.Ссылка) Тогда
			ОповеститьОПрочтении = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОповеститьОПрочтении Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	СписокОшибокПриЗаписи.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ЕстьВложения = Ложь;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			ТекущийОбъект.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("ПереместитьВКорзину")
		И ПараметрыЗаписи.ПереместитьВКорзину = Истина Тогда
		
		ТекущийОбъект.ПометкаУдаления = Ложь;
		
		Корзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			ТекущийОбъект.УчетнаяЗапись, Перечисления.ВидыПапокПисем.Корзина);
		
		ТекущийОбъект.Папка = Корзина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьВложения(ТекущийОбъект);
	
	Если ПараметрыЗаписи.Свойство("ЗаменитьПредметПереписки")
		И ПараметрыЗаписи.ЗаменитьПредметПереписки = Истина
		И ЗначениеЗаполнено(ТекущийОбъект.Предмет) Тогда
		
		СообщенияОбОшибках = Новый Массив;
		Если Не ЗаменитьПредметПереписки(ТекущийОбъект, НачальноеЗначениеПредмет, СообщенияОбОшибках) Тогда
			СписокОшибокПриЗаписи.ЗагрузитьЗначения(СообщенияОбОшибках);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗаменитьПроектПереписки")
		И ПараметрыЗаписи.ЗаменитьПроектПереписки = Истина
		И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		
		СообщенияОбОшибках = Новый Массив;
		Если Не ЗаменитьПроектПереписки(ТекущийОбъект, НачальноеЗначениеПроект, СообщенияОбОшибках) Тогда
			СписокОшибокПриЗаписи.ЗагрузитьЗначения(СообщенияОбОшибках);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
		РаботаСФлагамиОбъектовСервер.СохранитьФлагОбъектаИзФормы(ЭтаФорма);
	КонецЕсли;
	
	// Заголовок формы
	Автозаголовок = Ложь;
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	ОбновитьФайлыПисьма();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр.ПараметрСобытия = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессИзменен"
		Или ИмяСобытия = "ЗадачаВыполнена")
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтобразитьСвязиПисьма();
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_ЛичныйАдресат" 
		ИЛИ ИмяСобытия = "Запись_Контрагент" 
		ИЛИ ИмяСобытия = "Запись_КонтактноеЛицо" 
		ИЛИ ИмяСобытия = "Запись_Пользователь"
		ИЛИ ИмяСобытия = "Запись_РолиИсполнителей" 
		ИЛИ ИмяСобытия = "ИзмененоФизическоеЛицо") Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = Объект.Ссылка Тогда
		ОбновитьФайлыПисьма();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг"
		И Источник <> ЭтаФорма
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		РаботаСФлагамиОбъектовКлиентСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			УстановитьСвойстваКнопкиКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранПроектИлиПроектнаяЗадача" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда	
			Объект.Предмет = Параметр.ПроектнаяЗадача;	
			ЗаполнитьПредметСтрокой(Объект.Предмет);
		Иначе
			Объект.Предмет = Параметр;
			ЗаполнитьПредметСтрокой(Объект.Предмет);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьИсходныйТекст(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ТекстHTML = ПолучитьHTMLТекст(Объект.Ссылка);
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.ТолькоПросмотр = Истина;
	ТекстовыйДокумент.Показать(НСтр("ru = 'HTML код письма'; en = 'Email HTML code'"));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьHTMLТекст(Ссылка)
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстПисьмаПростойТекстХранилище, Кодировка, ОтправительАдресат, ДатаОтправки, Тема, ПолучателиПисьма, ПолучателиКопий, ВнутреннийЗаголовок");
		
	ТекстHTML = Документы.ВходящееПисьмо.ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма);
	
	Возврат ТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПараметрыПисьма(Команда)
	
	ТекстЗаголовкиИнтернета = Новый ТекстовыйДокумент;
	ТекстЗаголовкиИнтернета.ДобавитьСтроку(Объект.ВнутреннийЗаголовок);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Дата", Объект.Дата);
	СтруктураПараметры.Вставить("Получено", Объект.ДатаПолучения);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстЗаголовкиИнтернета);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПараметрыПисьма", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировку(Команда)
	
	ПараметрыФормы = Новый Структура("ТекущаяКодировка", Объект.Кодировка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКодировкуЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Файлы.Форма.ВыборКодировки", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыбраннаяКодировка = Результат.Значение;
		Если ВыбраннаяКодировка <> Неопределено Тогда
			ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка)
	
	СтроковыеДанные = Новый Структура;
	СтроковыеДанные.Вставить("ТекстПисьма", ТекстПисьма);
	СтроковыеДанные.Вставить("Тема", Объект.Тема);
	Для каждого ПолучателиСтрока Из Получатели Цикл
		СтроковыеДанные.Вставить(
			"ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0"),
			ПолучателиСтрока.Представление);
	КонецЦикла;
	
	СтрокиВКодировке = РаботаСоСтроками.ПолучитьСтрокиВКодировке(СтроковыеДанные, ВыбраннаяКодировка);
	ТекстПисьма = СтрокиВКодировке.ТекстПисьма;
	Объект.Тема = СтрокиВКодировке.Тема;
	Для каждого ПолучателиСтрока Из Получатели Цикл
		ПолучателиСтрока.Представление = СтрокиВКодировке["ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0")];
	КонецЦикла;
	
	Объект.Кодировка = ВыбраннаяКодировка;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ПереслатьПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ПеренаправитьПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьСКопиейАвтору(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму();
	ВстроеннаяПочтаКлиент.ПереслатьПисьмоСКопией(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьПредыдущему(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВстроеннаяПочтаКлиент.ПереслатьПредыдущему(Объект.Ссылка) Тогда 
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.4, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", Объект.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьКомментарийЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Комментарий = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПоПредмету(Команда)
	
	ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", Объект.Ссылка);
	ПараметрыФормы.Вставить(
		"Заголовок",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процессы и задачи по предмету: ""%1""'; en = 'Processes and tasks for the subject ""%1""'"),
			Заголовок));
	ОткрытьФорму(
		"ОбщаяФорма.ПроцессыИЗадачи",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	ПредыдущаяПапка = Объект.Папка;
	ПараметрыЗаписи = Новый Структура("ПереместитьВКорзину", Истина);
	Если Не Записать(ПараметрыЗаписи) Тогда
		Объект.Папка = ПредыдущаяПапка;
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстПисьма(Команда)
	
	Если Модифицированность = Истина Или (Не ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
	
		Записать();
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СохранитьТекстПисьма(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПисьмо(Команда)
	
	Если Модифицированность = Истина Или (Не ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
	
		Записать();
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СохранитьПисьмо(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылку(Команда)
	
	ЭлементПолеHTMLДокумента = ТекущийЭлемент;
	Если ЭлементПолеHTMLДокумента <> Элементы.ТекстПисьма Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.КопироватьСсылку(ЭлементПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРеквизиты(Команда)
	
	ВнешнееПисьмоТекстЗаголовка = "";
	ВнешнееПисьмоТекстСообщения = "";
	ДекорацияВнешнийЗаголовокИТекст(ВнешнееПисьмоТекстЗаголовка, ВнешнееПисьмоТекстСообщения);
	
	ВидМаршрутизацииТекстЗаголовка = "";
	ВидМаршрутизацииТекстСообщения = "";
	ДекорацияВидМаршрутизацииЗаголовокИТекст(ВидМаршрутизацииТекстЗаголовка, ВидМаршрутизацииТекстСообщения);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизации", ДекорацияВидМаршрутизацииПодсказка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмо", ДекорацияВнешнийПодсказка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмоТекстЗаголовка", ВнешнееПисьмоТекстЗаголовка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмоТекстСообщения", ВнешнееПисьмоТекстСообщения);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизацииТекстЗаголовка", ВидМаршрутизацииТекстЗаголовка);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизацииТекстСообщения", ВидМаршрутизацииТекстСообщения);
	ПараметрыОткрытияФормы.Вставить("Папка", Объект.Папка);
	ПараметрыОткрытияФормы.Вставить("Предмет", Объект.Предмет);
	ПараметрыОткрытияФормы.Вставить("Проект", Объект.Проект);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВсеРеквизитыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.РеквизитыПисьма", 
		ПараметрыОткрытияФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект.Предмет = Результат.Предмет;
		Объект.Проект = Результат.Проект;
		Объект.УчетнаяЗапись = Результат.УчетнаяЗапись;
		Объект.Папка = Результат.Папка;
		
		Модифицированность = Истина;
		ЗаписатьИОбновитьПредметИПроект();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИОбновитьПредметИПроект()
	
	ЗаполнитьПредметСтрокой(Объект.Предмет);
	ЗаполнитьПроектСтрокой(Объект.Проект);
		
	Записать();	
	
КонецПроцедуры	

&НаКлиенте
Процедура Контроль(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПисьмаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифт(Команда)
	
	ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
	#Если Не ВебКлиент Тогда
		ДиалогВыбораШрифта.Шрифт = ШрифтОтображения;
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьОтображаемыйШрифтЗавершение", ЭтотОбъект);
	
	ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифтЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШрифтОтображенияУстановлен = Ложь;
		Если ШрифтОтображения <> ШрифтОтображенияПоУмолчанию Тогда
			ШрифтОтображения = ШрифтОтображенияПоУмолчанию;
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, Истина, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШрифтОтображения = Результат;
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	ШрифтОтображенияУстановлен = Истина;
	
	РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
		ТекстПисьма, ШрифтОтображения, ШрифтОтображенияУстановлен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПоказатьЗначение(, Объект.Предмет);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредметСтрокойНажатиеЗавершениеВыбораТипа", ЭтотОбъект);
		
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элементы.ПредметСтрокой);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатиеЗавершениеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТипВыбранный = ТипЗнч(Результат.Значение);
		
		Если ТипВыбранный = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВыбиратьТолькоПроектнуюЗадачу", Истина);
			
			Если ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
				ПараметрыФормы.Вставить("ПроектнаяЗадача", НачальноеЗначениеПредмет);
			ИначеЕсли ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.Проекты") Тогда
				ПараметрыФормы.Вставить("Проект", НачальноеЗначениеПредмет);
			КонецЕсли;
			
			ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы);
			
		Иначе
		
			ПолноеИмя = ПолноеИмяПоТипу(ТипВыбранный);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредметСтрокойНажатиеЗавершение", ЭтотОбъект);
			РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму(ПолноеИмя + ".ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Предмет = Результат;
		ПредметСтрокой = Строка(Объект.Предмет);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьЗначение(, Объект.Проект);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроектСтрокойНажатиеЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Проекты.ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Проект = Результат;
		ПроектСтрокой = Строка(Объект.Проект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПочты(Команда)
	
	ОткрытьЗакладкуПисьмо = Истина;
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек(ОткрытьЗакладкуПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПисемВПерепискеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПредмет = Результат;
	
	Если ВыбранныйПредмет = НачальноеЗначениеПредмет Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьСменуПредмета", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуПредмета()
	
	Объект.Предмет = ВыбранныйПредмет;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		ПараметрыЗаписи = Новый Структура("ЗаменитьПредметПереписки", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			
			НачальноеЗначениеПредмет = Объект.Предмет;
			Модифицированность = Ложь;
			
		Иначе
			
			Объект.Предмет = НачальноеЗначениеПредмет;
			
			Если СписокОшибокПриЗаписи.Количество() > 0 Тогда
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Предмет не установлен'; en = 'Subject is not set'"));
				
				ПараметрыОткрытия.Вставить("ПояснениеОшибки", 
					НСтр("ru = 'Не удалось установить предмет, т.к. некоторые письма в переписке заблокированы'; en = 'Field Related to could not be set because some emails in the thread are locked'"));
				
				ПараметрыОткрытия.Вставить("МассивОшибок", СписокОшибокПриЗаписи.ВыгрузитьЗначения());
				ОткрытьФорму("ОбщаяФорма.ПротоколОшибокОбработкиПисемПереписки", ПараметрыОткрытия, ЭтаФорма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранныйПредмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбораПослеВыбораТипаПредмета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыбиратьТолькоПроектнуюЗадачу", Истина);
		
		Если ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ПараметрыФормы.Вставить("ПроектнаяЗадача", НачальноеЗначениеПредмет);
		ИначеЕсли ТипЗнч(НачальноеЗначениеПредмет) = Тип("СправочникСсылка.Проекты") Тогда
			ПараметрыФормы.Вставить("Проект", НачальноеЗначениеПредмет);
		КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы, ДополнительныеПараметры.Элемент);
		
	Иначе
		
		ВыбранныйТипПредмета = ТипЗнч(Результат.Значение);
		ПодключитьОбработчикОжидания("ОбработатьВыборТипаПредмета", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаПредмета()
	
	ВыбранныйПредмет = Неопределено;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредметНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПоказатьВводЗначения(
		ОписаниеОповещения,
		ВыбранныйПредмет,
		НСтр("ru = 'Выбор предмета'; en = 'Select subject'"),
		ВыбранныйТипПредмета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПредмет = Результат;
	
	Если ВыбранныйПредмет = НачальноеЗначениеПредмет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Предмет = ВыбранныйПредмет;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		ПараметрыЗаписи = Новый Структура("ЗаменитьПредметПереписки", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			
			НачальноеЗначениеПредмет = Объект.Предмет;
			
		Иначе
			
			Объект.Предмет = НачальноеЗначениеПредмет;
			
			Если СписокОшибокПриЗаписи.Количество() > 0 Тогда
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Предмет не установлен'; en = 'Subject is not set'"));
				
				ПараметрыОткрытия.Вставить("ПояснениеОшибки", 
					НСтр("ru ='Не удалось установить предмет, т.к. некоторые письма в переписке заблокированы'; en = 'Field Related to could not be set because some emails in the thread are locked'"));
				
				ПараметрыОткрытия.Вставить("МассивОшибок", СписокОшибокПриЗаписи.ВыгрузитьЗначения());
				ОткрытьФорму("ОбщаяФорма.ПротоколОшибокОбработкиПисемПереписки", ПараметрыОткрытия, ЭтаФорма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"КомплексныйПроцесс", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУчетВремени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
		
	Иначе
		
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка письма ""%1""'; en = 'Processing email ""%1""'"),
			Объект.Тема);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
			ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж_ВсеДействия,
		Ложь,
		ЭтаФорма); // Выполнена
		
КонецПроцедуры

&НаКлиенте
Процедура ПротоколРаботы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектДанных", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ПротоколРаботыПользователей.Форма.ПротоколРаботы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязиОбъекта(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.СвязиДокументов.Форма.ФормаСвязейОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Объект.Ссылка, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСвязи

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПолучатели

&НаСервере
Процедура ВставитьПолучателя(ТипАдреса, ПочтовыйАдресат)
	
	НоваяСтрока = Получатели.Вставить(0);
	ДанныеПолучателя = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ПочтовыйАдресат);
	НоваяСтрока.Представление = ДанныеПолучателя.Представление;
	НоваяСтрока.Контакт = ДанныеПолучателя.Контакт;
	НоваяСтрока.ПочтовыйАдресат = ПочтовыйАдресат;
 	НоваяСтрока.ТипАдреса = ТипАдреса;
	НоваяСтрока.Адрес = ПочтовыйАдресат.Адрес;
	НоваяСтрока.Внешний = ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(ПочтовыйАдресат);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичногоАдресата(Команда)
	
	Если Не ЗначениеЗаполнено(ОтправительКонтакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(ОтправительПредставление);
		Адрес = ОтправительАдрес;
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Адрес,
			Представление);
		
		АдресДляЗамены = Адрес;
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта", ПараметрыФормы, , , , , , РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	Если Не ЗначениеЗаполнено(ОтправительКонтакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(ОтправительПредставление);
		Адрес = ОтправительАдрес;
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Адрес,
			Представление);
		
		АдресДляЗамены = Адрес;
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, , , , , , РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Не ЗначениеЗаполнено(ОтправительКонтакт) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКонтактноеЛицоЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(ОтправительПредставление);
	Адрес = ОтправительАдрес;
	
	ПараметрыФормы = Новый Структура("Адрес, Представление, Контрагент", 
		Адрес,
		Представление,
		Результат);
	
	АдресДляЗамены = Адрес;
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы, , , , , , РежимОткрытияОкна);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФлаги

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		БиблиотекаКартинок.КрасныйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		БиблиотекаКартинок.СинийФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		БиблиотекаКартинок.ЖелтыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		БиблиотекаКартинок.ЗеленыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		БиблиотекаКартинок.ОранжевыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		БиблиотекаКартинок.ЛиловыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка"),
		БиблиотекаКартинок.ПустойФлаг);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПереписка

&НаСервере
Функция ЗаменитьПредметПереписки(ТекущийОбъект, ЗаменяемыйПредмет, СообщенияОбОшибках)
	
	ПисьмаПереписки = ВстроеннаяПочтаСервер.ПолучитьПисьмаПереписки(ТекущийОбъект.Ссылка);
	ПисьмаДляЗаменыПредмета = Новый Массив;
	
	Для каждого Письмо Из ПисьмаПереписки Цикл
		
		Если Письмо <> ТекущийОбъект.Ссылка
			И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
			
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Предмет");
			
			Если Предмет = ЗаменяемыйПредмет Или Не ЗначениеЗаполнено(Предмет) Тогда
				ПисьмаДляЗаменыПредмета.Добавить(Письмо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПисьмаДляЗаменыПредмета.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВстроеннаяПочтаСервер.ЗаменитьПредметВПисьмах(
		ПисьмаДляЗаменыПредмета,
		ТекущийОбъект.Предмет,
		СообщенияОбОшибках);
	
КонецФункции

&НаСервере
Функция ЗаменитьПроектПереписки(ТекущийОбъект, ЗаменяемыйПроект, СообщенияОбОшибках)
	
	ПисьмаПереписки = ВстроеннаяПочтаСервер.ПолучитьПисьмаПереписки(ТекущийОбъект.Ссылка);
	ПисьмаДляЗаменыПроекта = Новый Массив;
	
	Для каждого Письмо Из ПисьмаПереписки Цикл
		
		Если Письмо <> ТекущийОбъект.Ссылка Тогда
			
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			
			Если Проект = ЗаменяемыйПроект Или Не ЗначениеЗаполнено(Проект) Тогда
				ПисьмаДляЗаменыПроекта.Добавить(Письмо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПисьмаДляЗаменыПроекта.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВстроеннаяПочтаСервер.ЗаменитьПроектВПисьмах(
		ПисьмаДляЗаменыПроекта,
		ТекущийОбъект.Проект,
		СообщенияОбОшибках);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовВнешниеАдресаты

&НаСервере
Процедура ВывестиВидМаршрутизации()
	
	ВидМаршрутизацииВнешняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя");
	ВидМаршрутизацииВнутренняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внутренняя");
	
	Если Не ПриложениеЯвляетсяВебКлиентом Тогда
		
		Если Объект.ВидМаршрутизации = ВидМаршрутизацииВнутренняя Тогда 
			ДекорацияВидМаршрутизацииПодсказка = НСтр("ru = 'Доставка внутренняя'; en = 'Internal delivery'");
		Иначе
			ДекорацияВидМаршрутизацииПодсказка = НСтр("ru = 'Доставка через почтовый сервер'; en = 'Delivery through the mail server'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВидАдресатов()
	
	ВнешниеАдресаты = Новый Массив;
	Для Каждого Строка Из Получатели Цикл
		Если Строка.Внешний Тогда 
			ВнешниеАдресаты.Добавить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ПриложениеЯвляетсяВебКлиентом Тогда
		
		Если ВнешниеАдресаты.Количество() > 0 Тогда 
			ДекорацияВнешнийПодсказка = НСтр("ru = 'Это внешнее письмо'; en = 'This is external email'");
		Иначе
			ДекорацияВнешнийПодсказка = НСтр("ru = 'Это внутреннее письмо'; en = 'This is an internal email'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВнешнийЗаголовокИТекст(ТекстЗаголовка, ТекстСообщения)
	
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	
	ВнешниеАдресаты = Новый Массив;
	Для Каждого Строка Из Получатели Цикл
		Если Строка.Внешний Тогда 
			ВнешниеАдресаты.Добавить(Строка);
		КонецЕсли;	
	КонецЦикла;	
		
	Если ВнешниеАдресаты.Количество() > 0 Тогда 
			
		ВнешниеАдресатыСтрокой = "";
		Для Каждого Строка Из ВнешниеАдресаты Цикл
			ВнешниеАдресатыСтрокой = ВнешниеАдресатыСтрокой + " - " + Строка(Строка.Представление) + Символы.ПС;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Это внешнее письмо, так как некоторые его получатели не являются пользователями 1С:Документооборота:'; en = 'This is external email because some recipients are not users of 1C:Document Management:'") +
			Символы.ПС +
			Символы.ПС +
			ВнешниеАдресатыСтрокой;
		
		ТекстЗаголовка = НСтр("ru = 'Внешнее письмо'; en = 'External email'");
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Это внутреннее письмо, так как все его получатели являются пользователями 1С:Документооборота.'; en = 'This is internal email, since all its recipients are users of 1С:Document Management.'");
		ТекстЗаголовка = НСтр("ru = 'Внутреннее письмо'; en = 'Internal email'");
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВидМаршрутизацииЗаголовокИТекст(ТекстЗаголовка, ТекстСообщения)

	ВидМаршрутизацииВнешняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя");
	ВидМаршрутизацииВнутренняя = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внутренняя");
	
	Если Объект.ВидМаршрутизации = ВидМаршрутизацииВнутренняя Тогда 
		ТекстСообщения = НСтр("ru = 'Это письмо было получено напрямую, а не через почтовый сервер, 
			|так как все получатели этого письма работают с почтой в 1С:Документообороте.'; en = 'This email was received directly, rather than through the mail server, as all the recipients of this email work use the built-in email of 1C:Document Management.'");
		ТекстЗаголовка = НСтр("ru = 'Внутренняя доставка'; en = 'Internal delivery'");	
	Иначе
		ТекстСообщения = НСтр("ru = 'Это письмо было получено через почтовый сервер.'; en = 'This email was received through the mail server.'");
		ТекстЗаголовка = НСтр("ru = 'Доставка через почтовый сервер'; en = 'Delivery through the mail server'");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискиАдресов

&НаКлиенте
Процедура ДобавитьВСписок(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВСписокЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДобавленных = 0;
	Причина = "";
	
	ДобавитьВСписокСервер(Результат, Элементы.Получатели.ВыделенныеСтроки, ЧислоДобавленных, Причина);
	
	Если ЧислоДобавленных <> 0 Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Адресаты (%1 шт) добавлены в список адресов ""%2""'; en = 'Addressees (%1 PCs) added to address list ""%2""'"), ЧислоДобавленных, Результат);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в список адресов'; en = 'Adding to the list of addresses'"), НавигационнаяСсылка, Текст);
		
	ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() = 1 Тогда
		ПоказатьПредупреждение(, Причина);
		
	ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все выбранные адресаты уже есть в списке ""%1"".'; en = 'All selected addressees are already in list ""%1"".'"),
			Результат);
		ПоказатьПредупреждение(, Причина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдСтроки);
		Адрес = СтрокаДанных.Адрес;
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Адрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данный адресат уже есть в списке ""%1"".'; en = 'This addressee is already in the list ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписок(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДоменВСписокЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДобавленных = 0;
	Причина = "";
	
	ДобавитьДоменВСписокСервер(Результат, Элементы.Получатели.ВыделенныеСтроки, ЧислоДобавленных, Причина);
	
	Если ЧислоДобавленных <> 0 Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Адресаты (%1 шт) добавлены в список адресов ""%2""'; en = 'Addressees (%1 PCs) added to address list ""%2""'"), ЧислоДобавленных, Результат);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в список адресов'; en = 'Adding to the list of addresses'"), НавигационнаяСсылка, Текст);
		
	ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() = 1 Тогда
		ПоказатьПредупреждение(, Причина);
		
	ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все выбранные адресаты уже есть в списке ""%1"".'; en = 'All selected addressees are already in list ""%1"".'"),
			Результат);
		ПоказатьПредупреждение(, Причина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдСтроки);
		Адрес = СтрокаДанных.Адрес;
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(Адрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данный адресат уже есть в списке ""%1"".'; en = 'This addressee is already in the list ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура СпискиАдресов(Команда)
	
	ПараметрыОткрытия = Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.Форма.ФормаСпискаПоУчетнымЗаписям", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовМоиКонтакты

&НаКлиенте
Процедура ДобавитьВМоиКонтакты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВМоиКонтактыЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ГруппыКонтактовПользователей.Форма.ВыборГруппыДляДобавления", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДобавленных = 0;
	Причина = "";
	ДобавитьВИзбранноеПользователяСервер(Элементы.Получатели.ВыделенныеСтроки, Результат, ЧислоДобавленных, Причина);
	
	Если ЧислоДобавленных <> 0 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Адресаты (%1 шт) добавлены в группу избранного ""%2""'; en = 'Addressees (%1 PCs) added to favorites group ""%2""'"), ЧислоДобавленных, Результат);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в ""Избранное""'; en = 'Adding to ""Favorites""'"),,Текст);
	ИначеЕсли Элементы.Получатели.ВыделенныеСтроки.Количество() = 1 Тогда
		ПоказатьПредупреждение(, Причина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВИзбранноеПользователяСервер(Знач ВыделенныеСтроки, ГруппаИзбранного, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдСтроки);
		Контакт = СтрокаДанных.Контакт;
		Адрес = СтрокаДанных.Адрес;
		Если ДобавитьВМоиКонтактыСервер(Контакт, Адрес, ГруппаИзбранного) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе	
			Причина = НСтр("ru = 'Данный адресат уже есть в группе избранного.'; en = 'This addressee is already exists in the favorites group.'")
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьВМоиКонтактыСервер(Контакт, Адрес, ГруппаИзбранного = Неопределено)
	
	Если Не Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(Контакт, Адрес, ГруппаИзбранного) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

&НаСервере
Процедура ОбновитьСписокВложений()
	
	МассивФайлов = Новый Массив;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если ВложенияСтрока.Расположение = "Файл" Тогда
			МассивФайлов.Добавить(ВложенияСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
		Для каждого ВложенияСтрока Из Вложения Цикл
			Для каждого ФайлИнфо Из ФайлыИнфо Цикл
				Если ВложенияСтрока.Расположение = "Файл" И ВложенияСтрока.Ссылка = ФайлИнфо.Ссылка Тогда
					ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	Для каждого ВложениеСтрока Из Вложения Цикл
		Если ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				Неопределено, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			ВложениеСтрока.Расположение = "Файл";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(ФайлСсылка)
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вложение еще не записано. Для редактирования вложения необходимо записать письмо.'; en = 'Attachment is not yet written. To edit the attachment, you must save the email.'"));
		Возврат;
	КонецЕсли;
	
	// Открытие карточки файла
	ПоказатьЗначение(, Элементы.Вложения.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вложение еще не записано. Для редактирования вложения необходимо записать письмо.'; en = 'Attachment is not yet written. To edit the attachment, you must save the email.'"));
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "Файл" Тогда
		Если Не ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
				ТекущиеДанные.Представление);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
				ТекущиеДанные.Представление);
		КонецЕсли;
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить ""%1""?'; en = 'Remove ""%1""?'"),
			ТекущиеДанные.Представление);
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущиеДанные.Расположение = "Файл" Тогда
		ВложениеПометитьНаУдалениеСервер(ДополнительныеПараметры.ТекущиеДанные.Ссылка);
	Иначе
		Если ДополнительныеПараметры.ТекущиеДанные.Расположение = "ВременноеХранилище"
			И ЭтоАдресВременногоХранилища(ДополнительныеПараметры.ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ДополнительныеПараметры.ТекущиеДанные.Адрес);
		КонецЕсли;
		ИндексЭлемента = Вложения.Индекс(ДополнительныеПараметры.ТекущиеДанные);
		Вложения.Удалить(ИндексЭлемента);
	КонецЕсли;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Владелец", Объект.Ссылка);
	ПараметрОповещения.Вставить("Файл", ДополнительныеПараметры.ТекущиеДанные.Ссылка);
	ПараметрОповещения.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", Ложь);
	ПараметрОповещения.Вставить("ИдентификаторРодительскойФормы", УникальныйИдентификатор);
	ПараметрОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
	
	Оповестить("Запись_Файл", ПараметрОповещения, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	ОбновитьФайлыПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыПисьма()
	
	ТекПозиция = Неопределено;
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				ТекПозиция = Новый Структура("Ссылка", ТекДанные.Ссылка);
			ИначеЕсли ТекДанные.Свойство("Представление")
				И ТекДанные.Свойство("Размер") Тогда
				ТекПозиция = Новый Структура("Представление, Размер", ТекДанные.Представление, ТекДанные.Размер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
		
		ВложенияВременнаяТаблица = Вложения.Выгрузить();
		Вложения.Очистить();
		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			Если ВложенияСтрока.ПометкаУдаления Тогда
				ВложенияСтрока.ИндексКартинки = ВложенияСтрока.ИндексКартинки + 1;
			КонецЕсли;
			ВложенияСтрока.Расположение = "Файл";
		КонецЦикла;
		
		Для каждого ВложенияВременнаяТаблицаСтрока Из ВложенияВременнаяТаблица Цикл
			Если ВложенияВременнаяТаблицаСтрока.Расположение <> "Файл" Тогда
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложенияВременнаяТаблицаСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекПозиция) Тогда
		Если ТипЗнч(ТекПозиция) = Тип("Структура") Тогда
			Строки = Вложения.НайтиСтроки(ТекПозиция);
			Если Строки.Количество() > 0 Тогда
				Элементы.Вложения.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоФайловСервер()
	
	Если Вложения.Количество() > 0 Тогда
		
		РазмерФайлов = 0;
		Для Каждого Вложение Из Вложения Цикл
			РазмерФайлов = РазмерФайлов + Вложение.Размер;
		КонецЦикла;	
		
		РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(РазмерФайлов);
		
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1), %2'; en = 'Files (%1), %2'"),
			Вложения.Количество(), РазмерПредставление);
			
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныйВложений = Элементы.Вложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныйВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныйВложений = 1 Тогда
			
			ФайлСсылка = Элементы.Вложения.ТекущиеДанные.Ссылка;
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе
			
			МассивФайлов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			КонецЦикла;
			Если МассивФайлов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивФайлов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вложение еще не записано. Для редактирования вложения необходимо записать письмо.'; en = 'Attachment is not yet written. To edit the attachment, you must save the email.'"));
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьСписокВложений();
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка)
		Тогда
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.РедактироватьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = (ТекущиеДанные.Расположение = "Файл");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленныеФайлы(Команда)
	
	ОтображатьУдаленныеФайлыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеФайлыСервер()
	
	ОтображатьУдаленныеФайлы = Не ОтображатьУдаленныеФайлы;
	Элементы.ОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
	ОбновитьФайлыПисьма();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		ОтображатьУдаленныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 pcs) copied to the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Вложения.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(Вложения, Элементы.Вложения.ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолноеИмяПоТипу(ТипВыбранный)
	ПолноеИмя = Метаданные.НайтиПоТипу(ТипВыбранный).ПолноеИмя();
	Возврат ПолноеИмя;
КонецФункции	

&НаСервере
Процедура УстановитьДоступность()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Если Не ПраваПоОбъекту.Изменение Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		Иначе
			ЭтаФорма.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязиПисьма()
	
	ПолучатьПомеченныеНаУдаление = Ложь; 
	ВсеСвязиДокумента = СвязиДокументов.ПолучитьВсеСвязиДокумента(Объект.Ссылка, ПолучатьПомеченныеНаУдаление);
	Если ВсеСвязиДокумента.Количество() > 0 Тогда
		
		// ПолученоВОтветНаДокумент
		НайденнаяСтрока = ВсеСвязиДокумента.Найти(
			Справочники.ТипыСвязей.ПолученоВОтветНаДокумент,
			"ТипСвязи");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПолученоВОтветНаДокумент = НайденнаяСтрока.СвязанныйДокумент;			
			ПолученоВОтветНа = ПолученоВОтветНаДокумент;
		Иначе
			// ПолученоВОтветНаПисьмо
			НайденнаяСтрока = ВсеСвязиДокумента.Найти(
				Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо,
				"ТипСвязи");
				
			Если НайденнаяСтрока <> Неопределено Тогда
				ПолученоВОтветНаПисьмо = НайденнаяСтрока.СвязанныйДокумент;
				ПолученоВОтветНа = ПолученоВОтветНаПисьмо;
			КонецЕсли;
			
		КонецЕсли;
		
		ОтправленОтвет.Очистить();
		СтруктураОтбора = Новый Структура("ТипСвязи", Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо);
		НайденныеСтроки = ВсеСвязиДокумента.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из НайденныеСтроки Цикл
			ОтправленОтвет.Добавить(Строка.СвязанныйДокумент);
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура("ТипСвязи", Справочники.ТипыСвязей.ОтправленОтветныйДокумент);
		НайденныеСтроки = ВсеСвязиДокумента.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из НайденныеСтроки Цикл
			ОтправленОтвет.Добавить(Строка.СвязанныйДокумент);
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура("ТипСвязи", Справочники.ТипыСвязей.ПересланоПисьмом);
		НайденныеСтроки = ВсеСвязиДокумента.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из НайденныеСтроки Цикл
			ПересланоПисьмом.Добавить(Строка.СвязанныйДокумент);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка связи письма ПолученоВОтветНа
	Если ЗначениеЗаполнено(ПолученоВОтветНа) Тогда
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПолученоВОтветНа) Тогда
			ПолученоВОтветНаСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученоВОтветНа, "Тема");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ПолученоВОтветНа) ТОгда
			ПолученоВОтветНаСтрока = Строка(ПолученоВОтветНа);
		Иначе
			ПолученоВОтветНаСтрока = НСтр("ru = 'Нет'; en = 'No'");
		КонецЕсли;
	Иначе
		ПолученоВОтветНаСтрока = НСтр("ru = 'Нет'; en = 'No'");
	КонецЕсли;
	
	// Обработка связи письма ОтправленОтвет
	Если ОтправленОтвет.Количество() = 0 Тогда
		ОтправленОтветСтрока = НСтр("ru = 'Нет'; en = 'No'");
	Иначе
		ОтправленОтветСтрока = "";
		Для каждого Ответ Из ОтправленОтвет Цикл
			Если ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Ответ.Значение) Тогда
				ОтправленОтветСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Ответ.Значение,
					"Заголовок");
				Если Не ЗначениеЗаполнено(ОтправленОтветСтрока) Тогда
					ОтправленОтветСтрока = НСтр("ru = 'Документ без заголовка'; en = 'Untitled document'");
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ОтправленОтветСтрока) Тогда
			Для каждого Ответ Из ОтправленОтвет Цикл
				Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Ответ.Значение) Тогда
					ОтправленОтветСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Ответ.Значение,
						"Тема");
					Если Не ЗначениеЗаполнено(ОтправленОтветСтрока) Тогда
						ОтправленОтветСтрока = НСтр("ru = 'Письмо без темы'; en = 'Email without subject'");
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Обработка связи письма ПересланоПисьмом
	Если ПересланоПисьмом.Количество() = 0 Тогда
		ПересланоПисьмомСтрока = НСтр("ru = 'Нет'; en = 'No'");
	Иначе
		ПересланоПисьмомТема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПересланоПисьмом[0].Значение,
			"Тема");
		ПересланоПисьмомСтрока = ПересланоПисьмомТема;
	КонецЕсли;
	
	ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(Объект.Ссылка);
	Если ЧислоПисемВПереписке > 1 Тогда
		Элементы.ПисемВПереписке.Гиперссылка = Истина;
		ПисемВПереписке = Формат(ЧислоПисемВПереписке, "ЧН=0") +
			" " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(ЧислоПисемВПереписке);
	Иначе
		ПисемВПереписке = НСтр("ru = 'Писем нет'; en = 'No emails'");
		Элементы.ПисемВПереписке.Гиперссылка = Ложь;
		Элементы.ПисемВПереписке.Доступность = Ложь;
	КонецЕсли;
	
	АктивныеЗадачиПоПисьму.ЗагрузитьЗначения(ПолучитьАктивныеЗадачиПоПисьму(Объект.Ссылка));
	КоличествоАктивныхЗадач = АктивныеЗадачиПоПисьму.Количество();
	Если КоличествоАктивныхЗадач > 1 Тогда
		Задачи = Формат(КоличествоАктивныхЗадач, "ЧН=0") +
			" " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуЗадачСтрокой(КоличествоАктивныхЗадач);
		
	ИначеЕсли КоличествоАктивныхЗадач = 1 Тогда
		Задачи = АктивныеЗадачиПоПисьму[0];
		
	Иначе
		Задачи = НСтр("ru = 'Нет задач'; en = 'No tasks'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктивныеЗадачиПоПисьму(Письмо)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Отменена
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
	Запрос.УстановитьПараметр("Предмет", Письмо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателейКомуКопия()
	
	ТаблицаЗначений = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(Объект.Ссылка);
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "Получатели");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроектСтрокой(Проект)
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ПроектСтрокой = Строка(Проект);
	Иначе
		ПроектСтрокой = НСтр("ru = 'Не указан'; en = 'Not specified'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредметСтрокой(Предмет)
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметСтрокой = Строка(Предмет);
	Иначе
		ПредметСтрокой = НСтр("ru = 'Не указан'; en = 'Not specified'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопкиКонтроля()
	
	Контроль.УстановитьСвойстваКнопкиКонтроляПисьма(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
