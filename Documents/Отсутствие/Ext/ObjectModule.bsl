#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьДанныеОбИзменении();
	Сотрудник = Автор;
	ВесьДень = Истина;
	БудуРазбиратьЗадачи = Отсутствия.ПолучитьПерсональнуюНастройку("БудуРазбиратьЗадачи");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДатаОтсутствия") Тогда
			
			Если ТипЗнч(ДанныеЗаполнения.ДатаОтсутствия) = Тип("Дата")
				И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОтсутствия) Тогда
				
				ДатаНачала = НачалоДня(ДанныеЗаполнения.ДатаОтсутствия);
				ДатаОкончания = КонецДня(ДанныеЗаполнения.ДатаОтсутствия);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДатаОтсутствия) = Тип("Структура")
				И ДанныеЗаполнения.ДатаОтсутствия.Свойство("ДатаНачала")
				И ДанныеЗаполнения.ДатаОтсутствия.ДатаНачала <> Неопределено
				И ДанныеЗаполнения.ДатаОтсутствия.Свойство("ДатаОкончания")
				И ДанныеЗаполнения.ДатаОтсутствия.ДатаОкончания <> Неопределено
				И ДанныеЗаполнения.ДатаОтсутствия.Свойство("ВесьДень")
				И ДанныеЗаполнения.ДатаОтсутствия.ВесьДень <> Неопределено Тогда
				
				ДатаНачала = ДанныеЗаполнения.ДатаОтсутствия.ДатаНачала;
				ДатаОкончания = ДанныеЗаполнения.ДатаОтсутствия.ДатаОкончания;
				ВесьДень = ДанныеЗаполнения.ДатаОтсутствия.ВесьДень;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПериодЗавтра = Новый СтандартныйПериод(ВариантСтандартногоПериода.Завтра);
		ДатаОтсутствия = ПериодЗавтра.ДатаНачала;
		ДатаНачала = НачалоДня(ДатаОтсутствия);
		ДатаОкончания = КонецДня(ДатаОтсутствия);
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(ДатаНачала, ДатаОкончания, ВесьДень);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДатаНачала >= ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания должна быть больше даты начала.'; en = 'End date must be greater than the start date.'"), ЭтотОбъект, "ДатаОкончания", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		
		Если Не ДополнительныеСвойства.Свойство("ЗагрузкаИзДО20") Тогда 
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	ПроверитьКорректностьДат();
	Если Не ПометкаУдаления Тогда
		ПроверитьПересечениеОтсутствий();
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	Иначе
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления И ПометкаУдаления Тогда 
		ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
	КонецЕсли;
	
	ЗаполнитьДанныеОбИзменении();
	
	// Заполнение периода строкой
	ПериодСтрокой = ОтсутствияКлиентСервер.СформироватьДатыОтсутствия(
		ДатаНачала, ДатаОкончания,
		ВесьДень, Истина, Ложь, Истина);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		
		Если Не ДополнительныеСвойства.Свойство("ЗагрузкаИзДО20") Тогда 
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеОтсутствия);
	Иначе
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьДанныеОбИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьКорректностьДат()
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстОшибки = НСтр("ru = 'Не указаны даты отсутствия.'; en = 'Absence dates are not specified.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончания Тогда
		ТекстОшибки = НСтр("ru = 'Дата начала не может быть меньше даты окончания.'; en = 'Start date cannot be less than the end date.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПересечениеОтсутствий()
	
	ПересекающиесяОтсутствия = Отсутствия.ПолучитьПересекающиесяОтсутствия(
		Ссылка, Сотрудник, ДатаНачала, ДатаОкончания);
	
	Если ПересекающиесяОтсутствия.Количество() <> 0 Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствие пересекается с другими отсутствиями пользователя.'; en = 'The absence overlaps with other absences of the user.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОбИзменении()
	
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Дата = ТекущаяДата();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
