#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Отбора по дате отсутствия.
	УстановитьОтборДатаОтсутствия();
	
	// Отображать удаленные - при первом открытии формы нужно не отображать удаленные.
	УстановитьОтборПоказыватьУдаленные();
	
	// Отбор по подразделению
	УстановитьОтборПодразделение();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Отбора по дате отсутствия.
	УстановитьОтборДатаОтсутствия();
	
	// Отображать удаленные
	УстановитьОтборПоказыватьУдаленные();
	
	// Отбор по подразделению
	УстановитьОтборПодразделение();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ВариантОтбора, ВариантОтбора, "ЗаДень");
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПодразделение, ОтборПодразделение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборДатаОтсутствияПриИзменении(Элемент)
	
	УстановитьОтборДатаОтсутствия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеОписаниеОтсутствияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, , Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораПриИзменении(Элемент)
	
	УстановитьОтборДатаОтсутствия();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ВариантОтбора, ВариантОтбора, "ЗаДень");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПодразделение();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПодразделение, ОтборПодразделение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ТекущееОтсутствие = Неопределено;
	ИначеЕсли Элемент.ТекущиеДанные.Ссылка <> ТекущееОтсутствие Тогда
		ТекущееОтсутствие = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьОтсутствие", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОтсутствияКлиент.СоздатьОтсутствие(ОтборДатаОтсутствия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	УстановитьОтборПоказыватьУдаленные();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборДатаОтсутствия()
	
	Если Не ЗначениеЗаполнено(ВариантОтбора) Тогда
		ВариантОтбора = "ЗаДень";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборДатаОтсутствия) Тогда
		ПериодСегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		ОтборДатаОтсутствия = ПериодСегодня.ДатаНачала;
	КонецЕсли;
	
	// Установка отбора в соответствии с вариантом отбора по датам
	Если ВариантОтбора = "Все" Тогда
		
		Заголовок = НСтр("ru = 'Все отсутствия сотрудников'; en = 'All employee absences'");
		ПараметрНачалоДняОтбора = Список.Параметры.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("НачалоДняОтбора"));
		ПараметрНачалоДняОтбора.Использование = Ложь;
		ПараметрКонецДняОтбора = Список.Параметры.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("КонецДняОтбора"));
		ПараметрКонецДняОтбора.Использование = Ложь;
		Элементы.Список.ТекущаяСтрока = Отсутствия.ПолучитьБлижайшееОтсутствие(
			ОтборДатаОтсутствия, ПоказыватьУдаленные);
			
	ИначеЕсли ВариантОтбора = "ЗаДень" Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия за %1 года'; en = 'Absences for years %1'"),
			Формат(ОтборДатаОтсутствия, "ДФ='dd MMMM yyyy'"));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоДня(ОтборДатаОтсутствия));
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецДня(ОтборДатаОтсутствия));
		
	ИначеЕсли ВариантОтбора = "ЗаНеделю" Тогда
		
		НачалоДняОтбора = НачалоНедели(ОтборДатаОтсутствия);
		КонецДняОтбора = КонецНедели(ОтборДатаОтсутствия);
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия с %1 по %2'; en = 'Absences from %1 to %2'"),
			Формат(НачалоДняОтбора, "ДФ='dd MMMM yyyy'"),
			Формат(КонецДняОтбора, "ДФ='dd MMMM yyyy'"));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоДняОтбора);
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецДняОтбора);
		
	ИначеЕсли ВариантОтбора = "ЗаМесяц" Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия за %1 года'; en = 'Absences for years %1'"),
			НРег(Формат(ОтборДатаОтсутствия, "ДФ='MMMM yyyy'")));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоМесяца(ОтборДатаОтсутствия));
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецМесяца(ОтборДатаОтсутствия));
		
	ИначеЕсли ВариантОтбора = "ЗаГод" Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия за %1 год'; en = 'Absences for year %1'"),
			НРег(Формат(ОтборДатаОтсутствия, "ДФ='yyyy'")));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоГода(ОтборДатаОтсутствия));
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецГода(ОтборДатаОтсутствия));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПодразделение()
	
	ПараметрПодразделение = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("Подразделение"));
	ПараметрПодразделение.Использование = Ложь;
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Подразделение", ОтборПодразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоказыватьУдаленные()
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ОтборПоказыватьУдаленные"));
	Параметр.Использование = Ложь;
	
	Элементы.ФормаПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
	Если Не ПоказыватьУдаленные Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОтборПоказыватьУдаленные", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтсутствие()
	
	Если Не ЗначениеЗаполнено(ТекущееОтсутствие) Тогда
		ПолноеОписаниеОтсутствия = ОтсутствияКлиентСервер.ПолучитьПустоеHTMLПредставление();
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеОтсутствия(ТекущееОтсутствие, ПолноеОписаниеОтсутствия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеОтсутствия(Отсутствие, ПолноеОписаниеОтсутствия)
	
	ПолноеОписаниеОтсутствия = Документы.Отсутствие.ПолучитьПредставлениеHTML(Отсутствие);
	
КонецПроцедуры

#КонецОбласти
