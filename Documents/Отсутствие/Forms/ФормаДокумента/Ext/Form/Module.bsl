#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Режим просмотра
	УстановитьТолькоПросмотр();
	
	// Виды отсутствия
	РежимВыбораВидаОтсутствия = Справочники.ВидыОтсутствий.ПолучитьРежимВыбораВидаОтсутствия();
	Элементы.ВидОтсутствия.БыстрыйВыбор = РежимВыбораВидаОтсутствия.БыстрыйВыбор;
	
	// Заголовок формы
	ОбновитьЗаголовокФормы();
	
	// Заместители
	ОбновитьЗамещает();
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	ПроверитьОтсутствие = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпциюФормы("ИспользованиеВстроеннойПочты");
		ИспользованиеЛегкойПочты = ПолучитьФункциональнуюОпциюФормы("ИспользованиеЛегкойПочты");
		
		ЗаписьНового = Истина;
		
		ВопросСоздатьПисьмоБольшеНеСпрашивать =
			Отсутствия.ПолучитьПерсональнуюНастройку("ВопросСоздатьПисьмоБольшеНеСпрашивать");
		ВопросСоздатьПисьмоВариантОтвета =
			Отсутствия.ПолучитьПерсональнуюНастройку("ВопросСоздатьПисьмоВариантОтвета");
		ПредложитьОтправитьПисьмо =
			(Не ВопросСоздатьПисьмоБольшеНеСпрашивать Или ВопросСоздатьПисьмоВариантОтвета)
				И (ИспользованиеВстроеннойПочты Или ИспользованиеЛегкойПочты);
		
		ВопросСоздатьПравилоБольшеНеСпрашивать =
			Отсутствия.ПолучитьПерсональнуюНастройку("ВопросСоздатьПравилоБольшеНеСпрашивать");
		ВопросСоздатьПравилоВариантОтвета =
			Отсутствия.ПолучитьПерсональнуюНастройку("ВопросСоздатьПравилоВариантОтвета");
		ПредложитьСоздатьПравилоОбработкиПисем = 
			(Не ВопросСоздатьПравилоБольшеНеСпрашивать Или ВопросСоздатьПравилоВариантОтвета)
				И ИспользованиеВстроеннойПочты;
		
	КонецЕсли;
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	// Видимость гиперссылки кто ввел запись.
	Элементы.АвторГиперссылка.Видимость = Объект.Сотрудник <> Объект.Автор;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Параметры.Свойство("ПользовательКалендаря", ПользовательКалендаря);
	ОбновитьДанныеСвязаннойЗаписиКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВывестиДлительностьСобытия();
	ЗаполнитьСпискиВыбора();
	УстановитьДоступностьВремени();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписьНового Тогда
		
		Если ОтсутствияКлиент.ОбработкаЗаписиНового(
				ЭтаФорма,
				Объект.Ссылка,
				ПредложитьОтправитьПисьмо,
				ВопросСоздатьПисьмоБольшеНеСпрашивать,
				ВопросСоздатьПисьмоВариантОтвета,
				ПредложитьСоздатьПравилоОбработкиПисем,
				ВопросСоздатьПравилоБольшеНеСпрашивать,
				ВопросСоздатьПравилоВариантОтвета) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ((УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание))
			Или (Не УстановитьНапоминание И УстановленоНапоминание)) Тогда
		ОбработатьИзменениеНапоминанияНаСервере();
		ОбработатьИзменениеНапоминанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеНаОсновании_ИсходящееПисьмо" И Параметр = Объект.Ссылка Тогда
		ПредложитьОтправитьПисьмо = Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "СозданиеНаОсновании_ПравилоОбработкиПисем" И Параметр = Объект.Ссылка Тогда
		ПредложитьСоздатьПравилоОбработкиПисем = Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидОтсутствия" И Параметр = Объект.ВидОтсутствия Тогда
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненаОбработкаЗаписиНового" И Параметр = Объект.Ссылка Тогда
		ПредложитьОтправитьПисьмо = Ложь;
		ПредложитьСоздатьПравилоОбработкиПисем = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НапоминанияПользователя_Документооборот"
		И Источник = СвязаннаяЗаписьКалендаря
		И ПараметрыНапоминанияДокументооборота(Параметр) 
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Параметр;
		УстановитьНадписьНапоминания(
			Параметр,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Удаление_НапоминанияПользователя_Документооборот"
		И Источник = СвязаннаяЗаписьКалендаря
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Неопределено;
		УстановитьНадписьНапоминания(
			Неопределено,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	КонецЕсли;
	
	УдалениеПустыхСтрок();
	
	Если Не ПроверитьЗаполнениеЗаместителей() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьОтсутствия(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьПересечениеОтсутствий(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаместителей(ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработатьИзменениеНапоминанияНаСервере();
	ОбновитьДанныеСвязаннойЗаписиКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповестить = Новый Структура("Ссылка, Сотрудник", Объект.Ссылка, Объект.Сотрудник);
	Оповестить("Запись_Отсутствие", ПараметрыОповестить);
	
	ТекстОповещения = ?(ПараметрыЗаписи.ЭтоНовыйОбъект, НСтр("ru = 'Создание:'; en = 'Added:'"), НСтр("ru = 'Изменение:'; en = 'Changed:'"));
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	ОбработатьИзменениеНапоминанияНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтработанаПриИзменении(Элемент)
	
	ПриИзмененииОтработана();
	УстановитьДоступностьЭлементовФормы();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтсутствияПриИзменении(Элемент)
	
	ВидОтсутствияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	СотрудникПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Замещает);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , ,Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(
			Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(
		Текст, ДанныеВыбора, Объект.ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , Ложь);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(
			Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(
		Текст, ДанныеВыбора, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПриИзменении(Элемент)
	
	ОтсутствияКлиент.ПриИзмененииВесьДень(Объект,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, ИспользоватьГрафикиРаботы);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьВремени();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНапоминаниеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойПриИзменении(Элемент)
	
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НСтр("ru = 'Другое...'; en = 'More...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("СпособУстановкиВремениНапоминания", СпособУстановкиВремениНапоминания);
		ПараметрыФормы.Вставить("ИнтервалВремениСтрокой", ИнтервалВремениСтрокой);
		ПараметрыФормы.Вставить("ВремяНапоминания",
			?(СпособУстановкиВремениНапоминания 
				= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя"),
				ВремяНапоминания,
				Объект.ДатаНачала));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнтервалВремениСтрокойОбработкаВыбораЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Результат = ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.НапоминаниеДокументооборот", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	ИначеЕсли ИнтервалВремениСтрокой <> ВыбранноеЗначение Тогда
		
		ИзмененоНапоминание = Истина;
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СпособУстановкиВремениНапоминания
		= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ИнтервалВремениСтрокой <> Результат.ИнтервалВремениСтрокой Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ИнтервалВремениСтрокой = Результат.ИнтервалВремениСтрокой;
		ВремяНапоминания = Дата(1,1,1);
		
	ИначеЕсли Результат.СпособУстановкиВремениНапоминания =
		ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ВремяНапоминания <> Результат.ВремяНапоминания Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ВремяНапоминания = Результат.ВремяНапоминания;
		ИнтервалВремениСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'в %2 %1'; en = 'in %2 %1'"),
				Формат(ВремяНапоминания, "ДЛФ=D"),
				Формат(ВремяНапоминания, "ДФ=ЧЧ:мм"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаместители

&НаКлиенте
Процедура ЗаместителиЗаместительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Заместители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор заместителя'; en = 'Deputy choice'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораЗаместителя", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЗаместителя(Команда)
	
	ДобавитьЗаместителяСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Истина);
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершениеВыбораЗаместителя(ВыбранныеЗаместители, ДопПараметры) Экспорт
	
	Если ВыбранныеЗаместители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДанные = Элементы.Заместители.ТекущиеДанные;
	ТекущийДанные.Заместитель = ВыбранныеЗаместители[0].Контакт;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииСервер()
	
	ПредложитьСоздатьПравилоОбработкиПисем = Не ЗначениеЗаполнено(Объект.Ссылка)
		И (Объект.Сотрудник = ПользователиКлиентСервер.ТекущийПользователь());
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Заголовок = "";
	
	Если ЗначениеЗаполнено(Объект.ВидОтсутствия) Тогда
		Заголовок = Объект.ВидОтсутствия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Заголовок, " – ", Объект.Сотрудник);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = 'Отсутствие'; en = 'Absence'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОтсутствияПриИзмененииСервер()
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗамещает(НовыйОдинЗаместитель = Неопределено)
	
	КоличествоЗаместителей = Объект.Заместители.Количество();
	Если НовыйОдинЗаместитель = Неопределено Тогда
		ОдинЗаместитель = (КоличествоЗаместителей <= 1);
	Иначе
		ОдинЗаместитель = НовыйОдинЗаместитель;
	КонецЕсли;
	Элементы.ГруппаОдинЗаместитель.Видимость = ОдинЗаместитель;
	Элементы.Заместители.Видимость = Не ОдинЗаместитель;
	Если КоличествоЗаместителей = 1 Тогда
		Замещает = Объект.Заместители[0].Заместитель;
		Элементы.Замещает.Подсказка = Объект.Заместители[0].Комментарий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	// Заполнение списка выбора даты начала
	Элементы.ДатаНачалаВремя.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		ТекДата = НачалоДня(Объект.ДатаНачала);
	Иначе
		ТекДата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если Объект.ДатаНачала > ТекДата И Объект.ДатаНачала < ТекДата + 1800 Тогда
			Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(
				Объект.ДатаНачала, Формат(Объект.ДатаНачала, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	// Заполнение списка выбора даты окончания
	Элементы.ДатаОкончанияВремя.СписокВыбора.Очистить();
	
	СобытиеВПределахОдногоДня = ЗначениеЗаполнено(Объект.ДатаНачала)
		И (НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания)
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончания))
		И Объект.ДатаНачала < Объект.ДатаОкончания;
	
	Если СобытиеВПределахОдногоДня Тогда
		
		ТекДата = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(Объект.ДатаНачала);
		Если Объект.ДатаОкончания > ТекДата - 1800 И Объект.ДатаОкончания < ТекДата Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(
				Объект.ДатаОкончания, Формат(Объект.ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекДата = НачалоДня(Объект.ДатаОкончания);
	Иначе
		ТекДата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Если СобытиеВПределахОдногоДня И ТекДата > КонецДня(Объект.ДатаНачала) Тогда
			Прервать;
		КонецЕсли;
		
		Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если Объект.ДатаОкончания > ТекДата И Объект.ДатаОкончания < ТекДата + 1800 Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(
				Объект.ДатаОкончания, Формат(Объект.ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, "00:00");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьСобытия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
	
	Если Объект.ВесьДень Тогда
		ДлительностьСек = ДлительностьСек + 1;
	КонецЕсли;
	
	Дней = Цел(ДлительностьСек / 86400); // 86400 - число секунд в сутках
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(Дней);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600); // 86400 - число секунд в сутках
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(Часов);
	
	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60); // 86400 - число секунд в сутках
	ПодписьМинут = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(Минут);
	
	Если Дней > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Дней) + " " + ПодписьДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 Или Часов > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + Строка(Минут) + " " + ПодписьМинут;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВремени()
	
	Элементы.ДатаНачалаВремя.Доступность = Не Объект.ВесьДень;
	Элементы.ДатаОкончанияВремя.Доступность = Не Объект.ВесьДень;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОВозможностиОтсутствия(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеПредупрежденияОПересечениеОтсутствий(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаместителей(ТекущийОбъект)
	
	Если ОдинЗаместитель Тогда
		
		ЗаполненЗаместитель = ЗначениеЗаполнено(Замещает);
		ТекущийОбъект.Заместители.Очистить();
		Если ЗаполненЗаместитель Тогда
			НовыйЗаместитель = ТекущийОбъект.Заместители.Добавить();
			НовыйЗаместитель.Заместитель = Замещает;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотр()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотр = Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не ТолькоПросмотр;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не ТолькоПросмотр;
	Элементы.ФормаЗакрыть.Видимость = ТолькоПросмотр;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = ТолькоПросмотр;
	
	Элементы.ФормаЗаписать.Видимость = Не ТолькоПросмотр;
	Элементы.ГруппаСоздатьНаОсновании.Видимость = Не ТолькоПросмотр;
	Элементы.ДобавитьЗаместителя.Видимость = Не ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаместителяСервер()
	
	ОбновитьЗаместителей(Объект);
	ОбновитьЗамещает(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеЗаместителей()
	
	ЕстьОшибки = Ложь;
	
	КоличествоЗаместителей = Объект.Заместители.Количество();
	Для Инд1 = 0 По КоличествоЗаместителей-2 Цикл
		
		Строка1 = Объект.Заместители[Инд1];
		
		Если Не ЗначениеЗаполнено(Строка1.Заместитель) И Не ЗначениеЗаполнено(Строка1.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка1.Заместитель) И ЗначениеЗаполнено(Строка1.Комментарий) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан заместитель.'; en = 'Deputy is not specified.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Заместители[" + Формат(Инд1, "ЧГ=0") + "].Заместитель",,
				ЕстьОшибки);
			
			Продолжить;
			
		КонецЕсли;
		
		Для Инд2 = Инд1+1 По КоличествоЗаместителей-1 Цикл
			
			Строка2 = Объект.Заместители[Инд2];
			
			Если Строка1.Заместитель = Строка2.Заместитель Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заместитель ""%1"" указан дважды.'; en = 'Deputy ""%1"" is specified twice.'"),
					Строка(Строка1.Заместитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Объект.Заместители[" + Формат(Инд1, "ЧГ=0") + "].Заместитель",, 
					ЕстьОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Функция УдалениеПустыхСтрок()
	
	КоличествоЗаместителей = Объект.Заместители.Количество();
	Для Инд = 1 По КоличествоЗаместителей Цикл
		Строка = Объект.Заместители[КоличествоЗаместителей - Инд];
		Если Не ЗначениеЗаполнено(Строка.Заместитель) И Не ЗначениеЗаполнено(Строка.Комментарий) Тогда 
			Объект.Заместители.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПересечениеОтсутствий(ПараметрыЗаписи)
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ПередЗаписьюПослеПредупрежденияОПересечениеОтсутствий",
			ЭтотОбъект, ПараметрыЗаписи);
	
	Возврат ОтсутствияКлиент.ПроверитьПересечениеОтсутствий(
		Объект.Ссылка, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Сотрудник,
		ОписаниеОповещения);
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьОтсутствия(ПараметрыЗаписи)
	
	Если Не ПроверитьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверитьОтсутствие = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПослеВопросаОВозможностиОтсутствия",
		ЭтотОбъект, ПараметрыЗаписи);
	
	Возврат ОтсутствияКлиент.ПроверитьВозможностьОтсутствия(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Сотрудник,
		ОписаниеОповещения, ПроверятьОтсутствие);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьКлиент(ПараметрыЗаписи)
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(НовыйЦвет)
	
	Если Цвет = НовыйЦвет Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = НовыйЦвет;
	ПриИзмененииЦвета();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦвета()
	
	УстановитьПометкуКомандЦвета();
	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(СвязаннаяЗаписьКалендаря, Цвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуКомандЦвета()
	
	Элементы.УстановитьЦветКрасный.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный);
	Элементы.УстановитьЦветСиний.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий);
	Элементы.УстановитьЦветЖелтый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый);
	Элементы.УстановитьЦветЗеленый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый);
	Элементы.УстановитьЦветОранжевый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый);
	Элементы.УстановитьЦветНет.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЦвет()
	
	Цвет = РаботаСРабочимКалендаремСервер.ПолучитьЦветСобытияКалендаря(СвязаннаяЗаписьКалендаря);
	УстановитьПометкуКомандЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСвязаннойЗаписиКалендаря()
	
	СвязаннаяЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.СвязаннаяЗаписьКалендаря(
		Объект.Ссылка,
		ПользовательКалендаря);
	Если Не ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		Элементы.ГруппаДанныеЗаписиКалендаря.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаДанныеЗаписиКалендаря.Видимость = Истина;
	ПрочитатьЦвет();
	ИспользоватьНапоминанияПользователя = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	
	Если ИспользоватьНапоминанияПользователя Тогда 
		СрокНапоминанияПоУмолчанию =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
		УстанавливатьНапоминаниеАвтоматически =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
		ПрочитатьНапоминание();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНапоминание()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененоНапоминание = Ложь;
	
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		
		Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(СвязаннаяЗаписьКалендаря);
		УстановитьНадписьНапоминания(
			Напоминание,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		
	Иначе
		
		УстановитьНапоминание = УстанавливатьНапоминаниеАвтоматически;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНапоминанияНаСервере()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание) Тогда
		
		// Отключение старого напоминания, если оно было установлено ранее
		Если УстановленоНапоминание И (ИзмененоНапоминание Или ИзмененоВремя) Тогда
			НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание, Ложь);
			НапоминаниеСтарое = Напоминание;
			Напоминание = Неопределено;
			ИзмененоНапоминание = Ложь;
			ИзмененоВремя = Ложь;
		КонецЕсли;
		
		Если СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
			// Подключение напоминания относительно времени предмета
			ИнтервалВремениНапоминания = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
			Напоминание = НапоминанияПользователяСлужебный.ПодключитьНапоминаниеДоВремениПредмета(
				Строка(СвязаннаяЗаписьКалендаря), ИнтервалВремениНапоминания, СвязаннаяЗаписьКалендаря, "ДатаНачала");
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		ИначеЕсли СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
			// Подключение напоминания в указанное время
			Напоминание = НапоминанияПользователяСлужебный.ПодключитьНапоминаниеВУказанноеВремя(
				Строка(СвязаннаяЗаписьКалендаря), ВремяНапоминания, СвязаннаяЗаписьКалендаря);
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Не УстановитьНапоминание И УстановленоНапоминание Тогда
		
		// Отключение старого напоминания
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание);
		НапоминаниеСтарое = Напоминание;
		Напоминание = Неопределено;
		УстановленоНапоминание = Ложь;
		
	КонецЕсли;
	
	УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
		СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
		СпособУстановкиВремениНапоминания, ВремяНапоминания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНапоминанияНаКлиенте()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьЗаписьВКешеНапоминаний Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот", Напоминание, Напоминание.Источник);
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
		ОбновитьЗаписьВКешеНапоминаний = Ложь;
	ИначеЕсли НапоминаниеСтарое <> Неопределено Тогда
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(НапоминаниеСтарое);
		Оповестить("Удаление_НапоминанияПользователя_Документооборот", , НапоминаниеСтарое.Источник);
		НапоминаниеСтарое = Неопределено;
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
	КонецЕсли;
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтервалыНапоминания()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Очистить();
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'при наступлении события'; en = 'at the time of the event'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 5 минут'; en = '5 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 10 минут'; en = '10 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 15 минут'; en = '15 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 30 минут'; en = '30 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 1 час'; en = '1 hour before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 2 часа'; en = '2 hours before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 3 часа'; en = '3 hours before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'Другое...'; en = 'More...'"));
		
		Если Элементы.ИнтервалВремениСтрокой.СписокВыбора.НайтиПоЗначению(ИнтервалВремениСтрокой) = Неопределено Тогда
			Элементы.ИнтервалВремениСтрокой.СписокВыбора.Вставить(0, ИнтервалВремениСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		Элементы.ИнтервалВремениСтрокой.Доступность = УстановитьНапоминание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНапоминанияПоИсточнику(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНапоминания(
	Напоминание,
	УстановитьНапоминание,
	УстановленоНапоминание,
	СрокНапоминанияПоУмолчанию,
	ИнтервалВремениСтрокой,
	СпособУстановкиВремениНапоминания,
	ВремяНапоминания)
	
	Если Напоминание <> Неопределено Тогда
		
		УстановитьНапоминание = Истина;
		УстановленоНапоминание = Истина;
		
		Если Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			
			ИнтервалВремениСтрокой =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в %2 %1'; en = 'in %2 %1'"),
					Формат(Напоминание.ВремяСобытия, "ДЛФ=D"),
					Формат(Напоминание.ВремяСобытия, "ДФ=ЧЧ:мм"));
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя");
			ВремяНапоминания = Напоминание.ВремяСобытия;
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
			
			Если Напоминание.ИнтервалВремениНапоминания >= 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаНачала" Тогда
				
				ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(Напоминание.ИнтервалВремениНапоминания);
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания <> 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за %1 до окончания'; en = 'at %1 before the end'"),
					НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Напоминание.ИнтервалВремениНапоминания));
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания = 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = НСтр("ru = 'при окончании события'; en = 'at the end of the event'");
				
			КонецЕсли;
			
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
			ВремяНапоминания = Дата(1,1,1);
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			
			ИнтервалВремениСтрокой = НСтр("ru = 'по заданному расписанию'; en = 'according to the specified schedule'");
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически");
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьНапоминание = Ложь;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыНапоминанияДокументооборота(ПараметрыНапоминания)
	
	Если ПараметрыНапоминания.Свойство("Пользователь")
		И ПараметрыНапоминания.Свойство("Источник")
		И ПараметрыНапоминания.Свойство("ВремяСобытия")
		И ПараметрыНапоминания.Свойство("СпособУстановкиВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИнтервалВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИмяРеквизитаИсточника") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтработана()
	
	Если Отработана Тогда
		УстановитьНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(СвязаннаяЗаписьКалендаря, Отработана);
	ПриИзмененииЦвета();
	
КонецПроцедуры

#КонецОбласти
