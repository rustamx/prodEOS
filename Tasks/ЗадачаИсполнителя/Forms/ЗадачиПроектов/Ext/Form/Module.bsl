#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Элементы.ПоказатьВыполненные.Пометка = Завершена;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьДатуИВремяВСрокахЗадач",
		ИспользоватьДатуИВремяВСрокахЗадач);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ТекущийИсполнитель", Неопределено, Ложь);
		
	// ставим отбор по Выполнена=Ложь. 
	// В ПриЗагрузкеДанныхИзНастроекНаСервере, если настройка была изменена, поставим новое значение параметра
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "Выполнена", Ложь, Истина);
		
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	Элементы.СрокИсполнения.Формат 	= ФорматДатыДляКолонок;
	Элементы.Дата.Формат = ФорматДатыДляКолонок;
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
		
	ОбновитьСписокНаСервере();
	
	// Быстрый отбор
	БыстрыйПоискВключен =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			"БыстрыйПоискВключен",
			Истина);
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма
		Или ИмяСобытия = "БизнесПроцессСтартован" Тогда
		
		ОбновитьСписок();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Завершена Тогда	 // ставим отбор по Выполнена=Ложь
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "Выполнена", Ложь, Истина);
	Иначе // снимаем отбор по Выполнена
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "Выполнена", Ложь, Ложь);
	КонецЕсли;			
	
	Элементы.ПоказатьВыполненные.Пометка = Завершена;
	
	ОбновитьСписокНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.НомерФлага Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Возврат;
		КонецЕсли;
		
		РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
		
		Возврат;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ПроектнаяЗадача Тогда	
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ПроектнаяЗадача) Тогда
			ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.ПроектнаяЗадача);
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(
		Элемент, 
		ВыбраннаяСтрока, 
		Поле, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.ЗадачаЗадачаИсполнителяЗадатьВопросАвтору.Доступность = Истина;
	ТипБизнесПроцесса = ТипЗнч(Элементы.Список.ТекущиеДанные.БизнесПроцесс);
	Если ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Элементы.ЗадачаЗадачаИсполнителяЗадатьВопросАвтору.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПользователей

&НаКлиенте
Процедура ДеревоПользователейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйИсполнитель = Неопределено;
	
	НовыйПроект = Элементы.ДеревоПользователей.ТекущиеДанные.Проект;
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь <> Неопределено Тогда
		НовыйИсполнитель = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
	ИначеЕсли Элементы.ДеревоПользователей.ТекущиеДанные.Проект <> Неопределено Тогда
		НовыйИсполнитель = Элементы.ДеревоПользователей.ТекущиеДанные.Проект;
	КонецЕсли;
	
	Если НовыйИсполнитель = Неопределено
		Или (ТекущийПроект = НовыйПроект
			И ТекущийИсполнитель = НовыйИсполнитель) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущийПроект = НовыйПроект;
	ТекущийИсполнитель = НовыйИсполнитель;
	
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДеревоПользователейОткрыть(СтандартнаяОбработка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейОткрыть(СтандартнаяОбработка)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь);
	ИначеЕсли Элементы.ДеревоПользователей.ТекущиеДанные.Проект <> Неопределено Тогда	
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элементы.ДеревоПользователей.ТекущиеДанные.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	СтандартнаяОбработка = Истина;
	ДеревоПользователейОткрыть(СтандартнаяОбработка);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьБизнесПроцесс(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено 
		И ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда		
		ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланПроекта(Команда)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоПользователей.ТекущиеДанные.Проект <> Неопределено Тогда	
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Проект", Элементы.ДеревоПользователей.ТекущиеДанные.Проект);
		ОткрытьФорму("Справочник.ПроектныеЗадачи.Форма.ФормаПланаПроекта", ПараметрыФормы);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Подзадачи

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Согласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Утверждение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРегистрация(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Регистрация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Рассмотрение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессПриглашение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Приглашение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("КомплексныйПроцесс");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Задача = Неопределено;
	Иначе
		Задача = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, Задача, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаДереваПользователей(
	ЭлементыДерева, Пользователь, Проект)
	
	Результат = Неопределено;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Проект = Проект
			И ЭлементДерева.Пользователь = Пользователь Тогда
			
			Результат = ЭлементДерева.ПолучитьИдентификатор();
			
			Прервать;
			
		КонецЕсли;
		
		Результат = ПолучитьИдентификаторЭлементаДереваПользователей(
			ЭлементДерева.ПолучитьЭлементы(), Пользователь, Проект);
			
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПроекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ПометкаУдаления = ЛОЖЬ
		|	И Проекты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроектов.Исполняется)
		|	И Проекты.Руководитель = &Руководитель";
		
	Запрос.УстановитьПараметр("Руководитель", ТекущийПользователь);
	ТаблицаПроекты = Запрос.Выполнить().Выгрузить();
	ТаблицаПроекты.Сортировать("Наименование");
	
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Дерево;
	
	ЕстьПроекты = Ложь;
	
	Для Каждого Строка Из ТаблицаПроекты Цикл
		
		Проект = Строка.Проект;
		ЕстьПроекты = Истина;
		
		Если Не УстановленПараметр Тогда
			Список.Параметры.УстановитьЗначениеПараметра("Проект", Проект);
			ТекущийПроект = Проект;
			ТекущийИсполнитель = Проект;
			УстановленПараметр = Истина;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.ТекущийИсполнитель,
			|	КОЛИЧЕСТВО(*) КАК ЧислоЗадач
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.Проект = &Проект
			|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
			|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
			|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачаИсполнителя.ТекущийИсполнитель
			|";
			
		// также тут отбор по Завершена=Ложь и Автору
		Если Не Завершена Тогда	 // ставим отбор по Выполнена=Ложь
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				"ГДЕ",
				"ГДЕ ЗадачаИсполнителя.Выполнена = ЛОЖЬ И ");
		КонецЕсли;			
		
		Запрос.УстановитьПараметр("Проект", Проект);
		
		ТаблицаИсполнители = Запрос.Выполнить().Выгрузить();
		ТаблицаИсполнители.Сортировать("ТекущийИсполнитель");
		
		Если ТаблицаИсполнители.Количество() <> 0 Тогда
		
			СтрокаДереваГруппы = КореньДерева.Добавить();
			СтрокаДереваГруппы.Проект = Строка.Проект;
			СтрокаДереваГруппы.Наименование = Строка.Наименование;
			СтрокаДереваГруппы.НомерКартинки = -1;
			
			СуммаЗадач = 0;
			
			Для Каждого СтрокаИсполнитель Из ТаблицаИсполнители Цикл
				
				ЗаполнитьЛистДереваПользователейВПроекте(
					Проект,
					СтрокаИсполнитель,
					СтрокаДереваГруппы);
					
				СуммаЗадач = СуммаЗадач + СтрокаИсполнитель.ЧислоЗадач;
					
			КонецЦикла;
				
			СтрокаДереваГруппы.Наименование = СтрокаДереваГруппы.Наименование	
				+ " (" + Формат(СуммаЗадач, "ЧГ=0") + ")";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДеревоПользователей.ПолучитьЭлементы().Количество() <> 0 Тогда
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаДеревоИСписок;
	Иначе
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаНетПроектов;
		
		Если ЕстьПроекты Тогда
			Элементы.ДекорацияНетЗадачи.Заголовок = НСтр("ru = 'В ваших проектах нет активных задач.'; en = 'Your projects have no active tasks.'");
		Иначе	
			Элементы.ДекорацияНетЗадачи.Заголовок = НСтр("ru = 'Нет активных проектов, у которых вы являетесь руководителем.'; en = 'No active projects with you as the manager.'");
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваПользователейВПроекте(Проект, Выборка, КореньДерева);
	
	СтрокаДереваПользователь = КореньДерева.ПолучитьЭлементы().Добавить();
	
	СтрокаДереваПользователь.Пользователь = Выборка.ТекущийИсполнитель;
	СтрокаДереваПользователь.Проект = Проект;
	
	СтрокаДереваПользователь.Наименование = Строка(Выборка.ТекущийИсполнитель);
	
	СтрокаДереваПользователь.НомерКартинки = 3;
	Если ТипЗнч(СтрокаДереваПользователь.Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СтрокаДереваПользователь.НомерКартинки = 1;
	КонецЕсли;	
	
	СтрокаДереваПользователь.Наименование = СтрокаДереваПользователь.Наименование
		+ " (" + Формат(Выборка.ЧислоЗадач, "ЧГ=0") + ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
	
	УстановитьПараметрыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	УстановитьПараметрыСпискаСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "Проект", ТекущийПроект, Истина);
		
	Если Не Завершена Тогда	 // ставим отбор по Выполнена=Ложь
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "Выполнена", Ложь, Истина);
	Иначе // снимаем отбор по Выполнена
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "Выполнена", Ложь, Ложь);
	КонецЕсли;			
	
	Если ТипЗнч(ТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Элементы.ГруппаИсполнитель.Видимость = Ложь;
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ТекущийИсполнитель", ТекущийИсполнитель, Истина);
			
	ИначеЕсли ТипЗнч(ТекущийИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			Элементы.ГруппаИсполнитель.Видимость = Ложь;
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ТекущийИсполнитель", ТекущийИсполнитель, Истина);
			
	Иначе
			
		Элементы.ГруппаИсполнитель.Видимость = Истина;
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ТекущийИсполнитель", Неопределено, Ложь);
			
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	
	Проект = Неопределено;
	Пользователь = Неопределено;
	ИдентификаторТекущейСтроки = Элементы.ДеревоПользователей.ТекущаяСтрока;
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		Проект = Элементы.ДеревоПользователей.ТекущиеДанные.Проект;
		Пользователь = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
	КонецЕсли;
	
	ОбновитьСписокНаСервере();
	
	ЭлементыДерева = ДеревоПользователей.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоПользователей.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		
		Элементы.ДеревоПользователей.ТекущаяСтрока = 
			ПолучитьИдентификаторЭлементаДереваПользователей(
				ДеревоПользователей.ПолучитьЭлементы(), Пользователь, Проект);
		
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ОбновитьПараметрыУсловногоОформленияПросроченныхЗадач(
		Список.УсловноеОформление);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	ЗаполнитьПроекты();
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|						И ЗадачаЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|{ГДЕ
		|	ЗадачаЗадачаИсполнителя.Выполнена,
		|	ЗадачаЗадачаИсполнителя.Проект,
		|	ЗадачаЗадачаИсполнителя.ТекущийИсполнитель
		|}";
			
	ОтборСписка = Новый Соответствие;
		
	// выполнена
	Если Не Завершена Тогда	 // ставим отбор по Выполнена=Ложь
		ОтборСписка.Вставить("Выполнена", Ложь);
	КонецЕсли;
	
	// проект
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("Проект"));
		
	Если Параметр <> Неопределено
		И Параметр.Использование
		И ЗначениеЗаполнено(Параметр.Значение) Тогда
		
		ОтборСписка.Вставить("Проект", Параметр.Значение);
	КонецЕсли;
	
	// исполнитель
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ТекущийИсполнитель"));
		
	Если Параметр <> Неопределено
		И Параметр.Использование
		И ЗначениеЗаполнено(Параметр.Значение) Тогда
		
		ОтборСписка.Вставить("ТекущийИсполнитель", Параметр.Значение);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОтборСписка Цикл
		ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
		ПостроительЗапроса.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
		
	ПостроительЗапроса.Параметры.Вставить(
		"ТекущаяДата",
		ТекущаяДатаСеанса());
		
	ПостроительЗапроса.Выполнить();
		
	// Заполнение статистики по задачам
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьВыполненные(Команда)
	
	Завершена = Не Завершена;
	Элементы.ПоказатьВыполненные.Пометка = Завершена;
	
	УстановитьПараметрыСписка();
	ОбновитьСписок();

КонецПроцедуры

#КонецОбласти
