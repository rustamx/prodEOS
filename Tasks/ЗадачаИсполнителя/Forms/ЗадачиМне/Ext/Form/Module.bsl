
#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатИзмененияПараметровПроцесса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьОграниченияПравДоступа = 
		ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа");
	
	ОсноваЗаголовка = НСтр("ru = 'Задачи мне'; en = 'Tasks to me'");
	
	Если Параметры.Свойство("ОткрытаИзФормыРабочийСтолРуководителя") Тогда
		ОткрытаИзФормыРабочийСтолРуководителя = Параметры.ОткрытаИзФормыРабочийСтолРуководителя;
	КонецЕсли;
	
	КлючСохраненияНастроек = ИмяФормы + "/ТекущиеДанные";
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда 
		
		КлючНазначенияИспользования = "ЗадачиМнеИзФормыРабочийСтолРуководителя";
		КлючСохраненияНастроек = ИмяФормы + "/" + КлючНазначенияИспользования + "/ТекущиеДанные";
		
		Элементы.ЗадачиМнеГруппаДляСтолаРуководителя.Видимость = Истина;
		
		Элементы.КоманднаяПанельОсновная.Видимость = Ложь;
		
		Элементы.ЗадачиМнеСостояниеКонтроля.Видимость = Ложь;
		Элементы.ЗадачиМнеГруппаВажностьИПризнакРолейДелегированнойЗадачи.Видимость = Ложь;
		Элементы.ЗадачиМнеГруппаАвторИСоздана.Видимость = Ложь;
		Элементы.ЗадачиМнеНаименование.Видимость = Ложь;
		Элементы.ЗадачиМнеСрок.Видимость = Ложь;
		
		Элементы.ЗадачиМне.Шапка = Ложь;
		
		ЗадачиМнеВидГруппировки = "";
		ПоказыватьОбластьГруппировки = Ложь;
		
	Иначе
		
		Элементы.ЗадачиМнеГруппаДляСтолаРуководителя.Видимость = Ложь;
		Элементы.КоманднаяПанельИзРабСтолаРуководителя.Видимость = Ложь;
		
	КонецЕсли;
	
	ФактическийИсполнительЗадач = Константы.ФактическийИсполнительЗадач.Получить();
	
	ИспользоватьФоновоеВыполнениеЗадач = ВыполнениеЗадачСервер.ИспользоватьФоновоеВыполнениеЗадач();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");

	Элементы.ЗадачиМнеСрок.Формат = ФорматДатыДляКолонок;
	Элементы.ЗадачиМнеСоздана.Формат = ФорматДатыДляКолонок;
	
	Элементы.СписокСрокИсполнения.Формат = ФорматДатыДляКолонок;
	Элементы.СписокДата.Формат = ФорматДатыДляКолонок;
	
	Элементы.НовыйСрокВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Элементы.СтарыйСрок.Формат = "ДФ='dd.MM.yyyy ЧЧ:мм'";
	КонецЕсли;

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(КлючСохраненияНастроек);
	Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
		ЗначенияПолейФормы = Новый Структура;
		Для Каждого КлючЗначение Из СохраненныеРеквизиты Цикл
			Если КлючЗначение.Ключ <> "ПоказыватьОбластьПросмотраЗадачи" Тогда
				ЗначенияПолейФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияПолейФормы);
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяБизнесПроцесса") Тогда
		
		ИмяБизнесПроцесса = Параметры.ИмяБизнесПроцесса;
		
		Если ИмяБизнесПроцесса = "Рассмотрение" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть;
			ОсноваЗаголовка = НСтр("ru = 'На рассмотрение'; en = 'For review'");
		ИначеЕсли ИмяБизнесПроцесса = "Согласование" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
			ОсноваЗаголовка = НСтр("ru = 'На согласование'; en = 'For approval'");
		ИначеЕсли ИмяБизнесПроцесса = "Утверждение" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить;
			ОсноваЗаголовка = НСтр("ru = 'На утверждение'; en = 'For confirmation'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказыватьОбластьГруппировки
		И ЗадачиМнеВидГруппировки = "" Тогда
		
		ЗадачиМнеВидГруппировки = "Автор";
	КонецЕсли;
	
	ИдентификаторОбъектовМетаданныхЗадачи = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задачи");
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		ЗадачиМнеВидГруппировки = "";
		ПоказыватьОбластьГруппировки = Ложь;
	КонецЕсли;	
	
	УстановитьВидимостьДанныхЗадачи(Элементы, Ложь);
	
	УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи);
	
	ОбновитьРезультатВыполнения = Истина;
	
	УстановитьОтборЗадачиМне(Элементы, ЗадачиМнеПоказыватьВыполненные);
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(ЗадачиМнеСписок.УсловноеОформление);
	
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ИмяГруппыБезПроекта", 
		НСтр("ru = 'Без проекта'; en = 'Without project'"));
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь",
		ТекущийПользователь);
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ТекущаяДата",
		НачалоДня(ТекущаяДатаСеанса()));
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.ЗадачиМнеАвтообновление.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.ЗадачиМнеАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Элементы.СписокСостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПометкуРежимуСортировки(ЭтаФорма);
	
	// По шаблону
	ЗаполнитьТаблицуРассмотренияПоШаблону();
	
	Если ШаблоныРассмотрения.Количество() > 0 Тогда 
		Элементы.СтраницыКомандРассмотрения.ТекущаяСтраница = Элементы.РассмотрениеПоШаблону;
	Иначе 
		Элементы.СтраницыКомандРассмотрения.ТекущаяСтраница = Элементы.СтандартноеРассмотрение;
	КонецЕсли;
	
	ДекорацияПроцессРассмотрения = НСтр("ru = 'Процесс'; en = 'Process'");
	
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	Элементы.ЗадачиМнеПоказатьВыполненные1.Пометка = ЗадачиМнеПоказыватьВыполненные;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Элементы.ЗадачиМнеСписок_СтрокаПоиска.Видимость = Истина;
		Элементы.ЗадачиМнеСписок_УправлениеПоиском.Видимость = Истина;
	Иначе
		Элементы.ЗадачиМнеСписок_СтрокаПоиска.Видимость = Ложь;
		Элементы.ЗадачиМнеСписок_УправлениеПоиском.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОбновитьСписокВыполненныхЗадачМнеСервер();
	Иначе
		ОбновитьДеревоЗадачМнеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		ЗадачиМнеВидГруппировки = "";
		ПоказыватьОбластьГруппировки = Ложь;
	КонецЕсли;	
	
	УстановитьТекущееЗначениеГруппировкиЗадачМне();
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если ТипЗнч(ЗадачиМнеТекущийБизнесПроцесс) = 
			Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
			
			Элементы.Файлы.Обновить();
			ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Элементы.Файлы.ТекущаяСтрока = Параметр.Файл;
			КонецЕсли;
		Иначе
			Если Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
				МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(
					ЗадачиМнеТекущаяЗадача, ЗадачиМнеТекущийБизнесПроцесс, Параметр.Файл, УникальныйИдентификатор);
					
				ОбновитьДеревоПриложений();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗадачаИзменена"
		ИЛИ ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" Тогда
		
		ОбновитьСписокЗадачМне();
		
		Если ЗадачиМнеПоказыватьВыполненные Тогда
			ЗадачиМнеТекущаяЗадача = Неопределено;
			ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БизнесПроцессСтартован" Тогда
		
		ОбновитьСписокЗадачМне();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы Тогда
			ОбновитьДеревоПриложений();
		Иначе
			ВладелецФайла = Неопределено;
			
			Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
				 И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
				ВладелецФайла = Параметр.Владелец;
			Иначе	
				ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			КонецЕсли;
			
			Если ВладелецФайла = ЗадачиМнеТекущийБизнесПроцесс Тогда
				Элементы.Файлы.Обновить();
				ОбновитьДоступностьКомандСпискаФайлов();
				ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ФайлЗанятДляРедактирования" Тогда
		
		Элементы.Файлы.Обновить();
		ОбновитьДоступностьКомандСпискаФайлов();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОбновитьСписокЗадачМне();
	
	ИначеЕсли ИмяСобытия = "ИзменилсяШаблонРезолюции" Тогда
		Для Каждого СтрокаШаблон Из ШаблоныРассмотрения Цикл 
			Если СтрокаШаблон.Ссылка = Параметр.Шаблон Тогда 
				СтрокаШаблон.Заголовок = СокрЛП(Параметр.Наименование);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "БылУдаленШаблонРезолюции"
		Или ИмяСобытия = "СозданНовыйШаблонРезолюции" Тогда
		ЗаполнитьТаблицуРассмотренияПоШаблону(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ОбновитьСписокЗадачМне();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Истина);

КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачаРассмотренияНажатие(Элемент)
	
	ПоказатьЗначение(, ПредметРассмотрения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроцессРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", БизнесПроцессПредметаРассмотрения);
	ПараметрыФормы.Вставить("ЗаявкаНаПеренос", ЗадачиМнеТекущийБизнесПроцесс);
	ОткрытьФорму(ИмяФормыДляОткрытияКарточкиПроцесса, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеОписаниеЗадачиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбзорЗадачКлиент.ЗадачиМнеПредставлениеHTMLПриНажатии(
		Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеАвторы

&НаКлиенте
Процедура АвторыПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Автор"
		И Элементы.ЗадачиМнеАвторы.ТекущиеДанные <> Неопределено
		И Элементы.ЗадачиМнеАвторы.ТекущиеДанные.Автор <> ЗадачиМнеТекущийАвтор Тогда
	
		ЗадачиМнеТекущийАвтор = Элементы.ЗадачиМнеАвторы.ТекущиеДанные.Автор;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеПроекты

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Проект" 
		И Элементы.ЗадачиМнеПроекты.ТекущиеДанные <> Неопределено 
		И Элементы.ЗадачиМнеПроекты.ТекущиеДанные.Проект <> ЗадачиМнеТекущийПроект Тогда
	
		ЗадачиМнеТекущийПроект = Элементы.ЗадачиМнеПроекты.ТекущиеДанные.Проект;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеТочкиМаршрута

&НаКлиенте
Процедура ТочкиМаршрутаПриАктивизацииСтроки(Элемент)
	
	ТочкиМаршрутаТекущиеДанные = Элементы.ЗадачиМнеТочкиМаршрута.ТекущиеДанные;
	
	Если ЗадачиМнеВидГруппировки = "ТочкаМаршрута" 
		И ТочкиМаршрутаТекущиеДанные <> Неопределено 
		И ТочкиМаршрутаТекущиеДанные.ТочкаМаршрута <> ЗадачиМнеТекущаяТочкаМаршрута Тогда
	
		ЗадачиМнеТекущаяТочкаМаршрута = ТочкиМаршрутаТекущиеДанные.ТочкаМаршрута;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеФлаги

&НаКлиенте
Процедура ЗадачиМнеФлагиПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Флаг"
		И Элементы.ЗадачиМнеФлаги.ТекущиеДанные <> Неопределено
		И Элементы.ЗадачиМнеФлаги.ТекущиеДанные.Флаг <> ЗадачиМнеТекущийФлаг Тогда
	
		ЗадачиМнеТекущийФлаг = Элементы.ЗадачиМнеФлаги.ТекущиеДанные.Флаг;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМне

&НаКлиенте
Процедура ЗадачиМнеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗадачиМнеНомерФлага Тогда
		СтрокаТаблицы = ЗадачиМне.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппаСпискиЗадач.ТекущаяСтраница <> Элементы.ГруппаЗадачиМне Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗадачиМне.ТекущиеДанные = Неопределено Тогда
		
		Если НеПоказыватьОбластьПросмотраЗадачи Тогда
			ПодключитьОбработчикОжидания("ОбновитьПараметрыУчетаВремениВФорме", 0.2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("УстановитьСтраницуНетЗадачи", 0.2, Истина);
		КонецЕсли;
		
		ЗадачиМнеТекущаяЗадача = Неопределено;
		ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
		ЗадачиМнеТекущийБизнесПроцесс = Неопределено;
		ЗадачиМнеТекущийИндекс = Неопределено;
		ЗадачиМнеТекущийИсполнитель = Неопределено;
		
		УстановитьДоступностьКомандПринятияКИсполнению();
		
	Иначе
		Если Элементы.ЗадачиМне.ТекущиеДанные.Ссылка <> ЗадачиМнеТекущаяЗадача Тогда
			
			ЗадачиМнеТекущаяЗадача = Элементы.ЗадачиМне.ТекущиеДанные.Ссылка;
			ЗадачиМнеТекущийИсполнитель = Элементы.ЗадачиМне.ТекущиеДанные.Исполнитель;
			ЗадачиМнеТекущийБизнесПроцесс = Элементы.ЗадачиМне.ТекущиеДанные.БизнесПроцесс;
			ЗадачиМнеСостояниеВыполнения = Элементы.ЗадачиМне.ТекущиеДанные.СостояниеВыполнения;
			
			Если Элементы.ЗадачиМне.ТекущиеДанные.Выполнена Тогда
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
			Иначе
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению =
					Элементы.ЗадачиМне.ТекущиеДанные.ПринятаКИсполнению;
			КонецЕсли;
			
			РодительТекущегоЭлемента = КорневойРодительЭлементаДерева(Элементы.ЗадачиМне.ТекущиеДанные);
			ЗадачиМнеТекущийИндекс = ЗадачиМне.ПолучитьЭлементы().Индекс(
				РодительТекущегоЭлемента);
				
			УстановитьДоступностьКомандПринятияКИсполнению();
			
			Если НеПоказыватьОбластьПросмотраЗадачи Тогда
				ПодключитьОбработчикОжидания("ОбновитьПараметрыУчетаВремениВФорме", 0.2, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.НомерФлага Тогда
		Если ТипЗнч(ВыбраннаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			СтандартнаяОбработка = Ложь;
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПродолжение",
			ЭтотОбъект,
			Новый Структура);

		ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка, СтандартнаяОбработка, ОписаниеОповещения);
			
	Иначе
	
		РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
			ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(ЭтаФорма, Элемент, 
		ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ДеревоПриложений.ТолькоПросмотр Или Объект.Выполнена Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Файлы

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		ВыбраннаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект, ПараметрыВыполнения);
	
	Если Результат = РезультатРедактировать Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьФайл(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = ЗадачиМнеТекущийБизнесПроцесс;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьБизнесПроцесс(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОткрытьПроцесс(Элементы.ЗадачиМнеСписок);
	Иначе
		ОткрытьПроцесс(Элементы.ЗадачиМне);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Автор");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("ТочкаМаршрута");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСгруппироватьПоФлагу(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьФайл(Команда)
	
	ТипПроцесса = ТипЗнч(ЗадачиМнеТекущийБизнесПроцесс);
	
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		ДобавитьФайл();
	Иначе
		ДеревоПриложенийДобавлениеНаКлиенте(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
		
		
	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.ЗадачиМнеСписок");

	ЗаголовокФормы = НСтр("ru = 'Отчеты по моим задачам'; en = 'Reports on my tasks'");
	
	РазделГипперссылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("УправлениеБизнесПроцессами");

	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперссылка", 
										Раздел, ЗаголовокФормы, Истина, РазделГипперссылка);
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма, 
		"ЗадачиМнеСписок");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Подзадачи

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Согласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Утверждение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРегистрация(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Регистрация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Рассмотрение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессПриглашение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Приглашение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("КомплексныйПроцесс");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	Если Элементы.ГруппаСпискиЗадач.ТекущаяСтраница = Элементы.ГруппаЗадачиМне Тогда
		ТекущиеДанные = Элементы.ЗадачиМне.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ЗадачиМнеСписок.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Задача = Неопределено;
	Иначе
		Задача = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, Задача, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ЗадачиМне

&НаКлиенте
Процедура ЗадачиМнеПоказатьВыполненные(Команда)
	
	ЗадачиМнеПоказыватьВыполненные = Не ЗадачиМнеПоказыватьВыполненные;
	
	Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	Элементы.ЗадачиМнеПоказатьВыполненные1.Пометка = ЗадачиМнеПоказыватьВыполненные;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Элементы.ЗадачиМнеСписок_СтрокаПоиска.Видимость = Истина;
		Элементы.ЗадачиМнеСписок_УправлениеПоиском.Видимость = Истина;
	Иначе
		Элементы.ЗадачиМнеСписок_СтрокаПоиска.Видимость = Ложь;
		Элементы.ЗадачиМнеСписок_УправлениеПоиском.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьОтборЗадачиМне(Элементы, ЗадачиМнеПоказыватьВыполненные);
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеАвтообновление(Команда)

	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
	Иначе
		МассивЗадач = Новый Массив;
		Для каждого Идентификатор Из Элементы.ЗадачиМне.ВыделенныеСтроки Цикл
			Строка = ЗадачиМне.НайтиПоИдентификатору(Идентификатор);
			МассивЗадач.Добавить(Строка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	ВыбраноЗадач = МассивЗадач.Количество();
	
	Если ВыбраноЗадач = 0 
		или ВыбраноЗадач = 1 И ТипЗнч(МассивЗадач[0]) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач, ЭтаФорма);
	
	ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Истина;
	УстановитьДоступностьКомандПринятияКИсполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
	Иначе
		МассивЗадач = Новый Массив;
		Для каждого Идентификатор Из Элементы.ЗадачиМне.ВыделенныеСтроки Цикл
			Строка = ЗадачиМне.НайтиПоИдентификатору(Идентификатор);
			МассивЗадач.Добавить(Строка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач, ЭтаФорма);
	
	ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Ложь;
	УстановитьДоступностьКомандПринятияКИсполнению();

КонецПроцедуры

// Сортировка списка Задачи мне

&НаКлиенте
Процедура ЗадачиМнеСортироватьСрокуИсполнения(Команда)
	
	СортироватьДеревоПоКолонке("ЗадачиМне", "СрокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьДатеСоздания(Команда)
	
	СортироватьДеревоПоКолонке("ЗадачиМне", "Дата");

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьПоФлагу(Команда)
	
	СортироватьДеревоПоКолонке("ЗадачиМне", "НомерФлага");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_МиниКарточкаЗадачи

&НаКлиенте
Процедура ЗадачаПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУказатьТрудозатраты(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
		ЗадачиМнеТекущаяЗадача, "Выполнена, ДатаИсполнения");
	
	ДатаОтчета = ТекущаяДата();
	Если РеквизитыЗадачи.Выполнена Тогда
		ДатаОтчета = РеквизитыЗадачи.ДатаИсполнения;
	КонецЕсли;	
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ЗадачиМнеТекущаяЗадача,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		РеквизитыЗадачи.Выполнена,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗаписать(Команда)

	Если НЕ ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗадачу(ЗадачиМнеТекущаяЗадача, РезультатВыполнения);
	
	ПоказатьОповещениеПользователя(
		"Изменение:", 
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПеренаправить(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	ЗадачаВыполнена = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ЗадачиМнеТекущаяЗадача, "Выполнена");
	
	Если ЗадачаВыполнена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Уже выполненную задачу нельзя перенаправить.'; en = 'Executed task cannot be forwarded'"));
		Возврат;
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачу(ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПоЗадаче(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", ЗадачиМнеТекущаяЗадача);
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ВопросыВыполненияЗадачи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопрос(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Задача", ЗадачиМнеТекущаяЗадача);
	ЗначенияЗаполнения.Вставить("ВидВопроса", ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.Иное"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКарточкуЗадачи(Команда)
	
	НеПоказыватьОбластьПросмотраЗадачи = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи);
	
	Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
		Если ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
			ОбновитьЗадачу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьКарточку(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОткрытьЗадачуИзСписка(Элементы.ЗадачиМнеСписок);
	Иначе
		ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма,
		ЗадачиМнеТекущаяЗадача, РезультатВыполнения, Истина);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Команды работы с деревом приложений

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	ДеревоПриложенийДобавлениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ВыделенныеСтрокиПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыделеннаяСтр);
		ВыделенныеСтрокиПредметов.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийУдалениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ВыделенныеСтрокиПредметов);
		
	МультипредметностьКлиент.ПолученоПодтверждениеОбУдаленииПредмета(Объект, ВыделенныеСтрокиПредметов, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьДляПросмотра(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.РедактироватьТекущийФайл(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеТекущегоФайла(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	РаботаСБизнесПроцессамиКлиент.СохранитьТекущийФайл(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Команды выполнения задач

// Процесс Исполнение

&НаКлиенте
Процедура ЗадачаИсполнено(Команда) 
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Исполнить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиИсполненоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиИсполненоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаИсполненоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнитель(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.ОтветственноеИсполнение") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиИсполненоОтвИсполнительПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиИсполненоОтвИсполнительПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьНевыполненныеЗадачиИсполнителей(ЗадачиМнеТекущаяЗадача) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Задача не может быть завершена, пока не выполнены все задачи исполнителей'; en = 'The task cannot be completed until all tasks of performers are completed.'"),,,
			"Исполнители");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаИсполненоОтвИсполнительПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролировано(Команда)

	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Контролировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПроконтролированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПроконтролированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьИсполнениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьИсполнениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗавершитьИсполнениеПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиВернутьНаДоработкуИсполнениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиВернутьНаДоработкуИсполнениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуИсполнениеПродолжение",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаИсполнить"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОтвИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОтветственноеИсполнение"));
	
КонецПроцедуры

// Комплексный процесс

&НаКлиенте
Процедура ЗадачаКомплексныйПроцессПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.Контролер") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиКППроконтролированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиКППроконтролированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаКомплексныйПроцессПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

// Процесс Ознакомление

&НаКлиенте
Процедура ЗадачаОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Ознакомление.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОзнакомлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОзнакомиться"));
	
КонецПроцедуры

// Процесс Поручение

&НаКлиенте
Процедура ЗадачаПоручениеВыполнено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Выполнить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПоручениеВыполненоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПоручениеВыполненоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПоручениеВыполненоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПоручениеПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Контролировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПоручениеПроконтролированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПоручениеПроконтролированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПоручениеПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьПоручение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьПоручениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьПоручениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РезультатВыполнения) Тогда
		ТекстСообщения = НСтр("ru = 'Комментарий может быть заполнен только для возвращаемой задачи'; en = 'Comment is filled in only when a task is being returned'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗавершитьПоручениеПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработку(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиВернутьНаДоработкуПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиВернутьНаДоработкуПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если ПустаяСтрока(РезультатВыполнения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен комментарий'; en = 'Comment is not filled in'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

// Процесс Приглашение

&НаКлиенте
Процедура ЗадачаПринято(Команда, ОбработанныеВопросы = Неопределено)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Команда", Команда);
	ДопПараметры.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПринятоПослеВыбораФактическогоИсполнителя", ЭтаФорма, ДопПараметры);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПринятоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Команда = ДопПараметры.Команда;
	ОбработанныеВопросы = ДопПараметры.ОбработанныеВопросы;
	
	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	
	Если Не ОбработанныеВопросы.Свойство("ЗанятостьИсполнителей") Тогда
		
		ИсключенияЗанятости = Новый Массив;
		Для Каждого Предмет Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")
				И ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда 
				ИсключенияЗанятости.Добавить(Предмет.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Команда", Команда);
		ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗадачаПринятоЗавершениеВопросаОЗанятостиПользователя",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если Не РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
				ЗадачиМнеТекущийИсполнитель, ДатаНачалаМероприятия, ДатаОкончанияМероприятия,
				ИспользоватьРабочийКалендарь, ИсключенияЗанятости, Истина, ОписаниеОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		ОбработанныеВопросы.Вставить("ЗанятостьИсполнителей", Истина);
		
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПринятоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринято(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеПринятоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеПринятоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'; en = 'Field ""Comment"" is not filled in'"),,
			"РезультатВыполнения");
		Возврат;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаНеПринятоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполненияПриглашениеПовторить(
		ЗадачиМнеТекущаяЗадача, РезультатПриглашенияЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПриглашениеПовторитьЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("БизнесПроцесс.Приглашение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеПодтвердитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеПодтвердитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПриглашениеПодтвердитьПослеВопросаОбИсключенииУчастников", ЭтотОбъект);
	Если РезультатПриглашенияЗадачи = ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда 
		ТекстВопроса =
			Нстр("ru = 'Есть не принявшие приглашения участники. При подтверждении они будут исключены из списка участников. Продолжить?'; en = 'Some attendees did not accept the invitation. They will be excluded from the list upon confirmation. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеОтложитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеОтложитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеОтложитьПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Оповестить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПригласить"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриглашениеОповеститьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОповеститьОРезультатахПриглашения"));
	
КонецПроцедуры

// Процесс Рассмотрение

&НаКлиенте
Процедура ЗадачаРассмотрено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРассмотреноПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотреноПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Отказ = Ложь;
	ЗаполнениеПоШаблонуРезолюции = Ложь;
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Резолюция"" не заполнено'; en = 'Field ""Resolution"" is not filled in'"),,
			"РезультатВыполнения",,Отказ);
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы",
		ЭтотОбъект);
		
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотреноНаИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОткрытьФормуРассмотренияЗадачи(
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение"));

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотреноНаОзнакомление(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОткрытьФормуРассмотренияЗадачи(
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеОбработано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРассмотрениеОбработаноПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотрениеОбработаноПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции",
		ПредопределенноеЗначение("Перечисление.ВариантыОбработкиРезолюции.НеНаправлять"));
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеНаправитьНаИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	Оповестить("ПерейтиКГруппеНаИсполнение", ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеНаправитьНаОзнакомление(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	Оповестить("ПерейтиКГруппеОзнакомление", ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("НаправитьНаИсполнение", "На исполнение");
	СписокЗначений.Добавить("НаправитьНаОзнакомление", "На ознакомление");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаОтправитьВыборЗначенияПродолжение",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокЗначений);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды с подменю в карточке - продолжение
Процедура КомандаОтправитьВыборЗначенияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "НаправитьНаИсполнение" Тогда
		ОткрытьФормуРассмотренияЗадачи(
			ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение"));
		Возврат;
	ИначеЕсли Результат.Значение = "НаправитьНаОзнакомление" Тогда
		ОткрытьФормуРассмотренияЗадачи(
			ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШаблону(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Каждого Шаблон Из ШаблоныРассмотрения Цикл
		СписокЗначений.Добавить(Шаблон.ИмяШаблона, Шаблон.Заголовок);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаПоШаблонуВыборЗначенияПродолжение",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокЗначений);
	
КонецПроцедуры

// Обработчик команды с подменю в карточке - продолжение
&НаКлиенте
Процедура КомандаПоШаблонуВыборЗначенияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРассмотренияПоШаблонуПослеВыбораФактическогоИсполнителя", ЭтаФорма, Результат);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотренияПоШаблонуПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, Результат) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Строки = ШаблоныРассмотрения.НайтиСтроки(Новый Структура("ИмяШаблона", Результат.Значение));
	Если Строки.Количество() > 0 Тогда
		ТекстШаблона = ПолучитьТекстШаблона(Строки[0].Ссылка);
		ЗаполнениеПоШаблонуРезолюции = Истина;
		
		Если ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ТекстРезолюции = РезультатВыполнения + Символы.ПС + ТекстШаблона;
		Иначе 
			ТекстРезолюции = ТекстШаблона;
		КонецЕсли;
		
		Отказ = Ложь;
		ОчиститьСообщения();
		
		Если Не ЗначениеЗаполнено(ТекстРезолюции) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Шаблон резолюции не заполнен'; en = 'Resolution template is not filled in'"),,
				"РезультатВыполнения",,Отказ);
		КонецЕсли;
				
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
			
		РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Процесс Регистрация

&НаКлиенте
Процедура ЗадачаЗарегистрировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗарегистрированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗарегистрированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗарегистрированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеЗарегистрированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеЗарегистрированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоПриложений.ПолучитьЭлементы().Количество() > 0 Тогда
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,,Истина);
		ОчиститьСообщения();
		Для каждого Предмет из ОсновныеПредметы Цикл
			Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ ""%1"" зарегистрирован!
							|Для завершения задачи нажмите кнопку ""Зарегистрировано"".';
							|en = 'Document ""%1"" is registered! 
							|Press the button ""Registered"" to complete the task.'"),
						Строка(Предмет)),,
				"ДеревоПриложений");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отказа в регистрации'; en = 'Specify the reason for rejection of registration'"),, 
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаНеЗарегистрированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРегистрацияОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРегистрацияОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРегистрацияОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРегистрацияПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРегистрацияПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРегистрацияПовторитьПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ОткрытьФорму("БизнесПроцесс.Регистрация.Форма.ФормаИзменениеПараметров", ПараметрыФормы,
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процесс РешениеВопросовВыполненияЗадач

&НаКлиенте
Процедура ЗадачаРешениеВопросовРассмотрено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовРассмотреноПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовРассмотреноПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		Текст = НСтр("ru = 'Поле ""Комментарий"" не заполнено'; en = 'Field ""Comment"" is not filled in'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"РезультатВыполнения",
			,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.ОзнакомлениеСРезультатомРассмотрения") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОтправитьНаУточнение = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовОзнакомилсяПослеВыбораФактическогоИсполнителя",
		ЭтаФорма, ОтправитьНаУточнение);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовОтправитьНаУточнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.ОзнакомлениеСРезультатомРассмотрения") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОтправитьНаУточнение = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовОзнакомилсяПослеВыбораФактическогоИсполнителя",
		ЭтаФорма, ОтправитьНаУточнение);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ОтправитьНаУточнение) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если ОтправитьНаУточнение
		И Не ЗначениеЗаполнено(РезультатВыполнения) Тогда
		
		Текст = НСтр("ru = 'При отправке на уточнение требуется указать комментарий.'; en = 'Comment is required when returning for clarification.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", ОтправитьНаУточнение);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовПеренести(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовПеренестиПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовПеренестиПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоПереносовПоЗадаче = 
		ПереносСроковВыполненияЗадачВызовСервера.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
			ПредметРассмотрения, ЗадачиМнеТекущийБизнесПроцесс);
	
	Если ТребуетсяРучноеИзменениеСрока И КоличествоПереносовПоЗадаче = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо вручную изменить срок на карточке процесса'; en = 'It is necessary to change the date manually in the process form'"),,
			"ДекорацияПроцессРассмотрения");
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйСрок) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан новый срок исполнения.'; en = 'New due date is not specified'"),,
			"НовыйСрок");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРешениеВопросовПеренестиПродолжение", ЭтотОбъект);
	
	Если КоличествоПереносовПоЗадаче = 0 Тогда
		
		СтарыйСрокПроцесса = Дата(1,1,1);
		НовыйСрокПроцесса = Дата(1,1,1);
		
		ПереносСроковВыполненияЗадачВызовСервера.ОпределитьСрокПроцессаПриИзмененииСрокаЗадачи(
			ПредметРассмотрения, НовыйСрок,
			БизнесПроцессПредметаРассмотрения, СтарыйСрокПроцесса, НовыйСрокПроцесса);
		
		Если СтарыйСрокПроцесса <> НовыйСрокПроцесса Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Процесс", БизнесПроцессПредметаРассмотрения);
			ПараметрыФормы.Вставить("НовыйСрокИсполнения", НовыйСрокПроцесса);
			ПараметрыФормы.Вставить("СформироватьДеревоВышестоящихПроцессовСНовымиСроками", Истина);
			
			ОткрытьФорму("ОбщаяФорма.ПодтверждениеПереносаСрока",
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовНеПереносить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовНеПереноситьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовНеПереноситьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполнение обязательного комментария при отказе перенести срок
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ОчиститьСообщения();
		Текст = НСтр("ru = 'Не заполнено поле ""Комментарий"".'; en = 'Field ""Comment"" is not filled in.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРешениеВопросовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовРассмотреть"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРешениеВопросовИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовОзнакомиться"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРешениеВопросовПереносСрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовПереносСрока"));
	
КонецПроцедуры

// Процесс Согласование

&НаКлиенте
Процедура ЗадачаСогласовано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиСогласованоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованоСЗамечаниями(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиСогласованоСЗамечаниямиПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованоСЗамечаниямиПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Комментарий"" не заполнено'; en = 'Field ""Comment"" is not filled in'"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеСогласовано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеСогласованоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеСогласованоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Комментарий"" не заполнено'; en = 'Field ""Comment"" is not filled in'"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованиеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиСогласованиеОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованиеОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСогласование(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьСогласованиеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьСогласованиеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПараметровСогласования", ЭтотОбъект, ПараметрыОбработчика);
	
	ОткрытьФорму(
		"БизнесПроцесс.Согласование.Форма.ФормаИзменениеПараметров", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСогласованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаСогласовать"));
	
КонецПроцедуры

// Процесс Утверждение

&НаКлиенте
Процедура ЗадачаУтверждено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиУтвержденоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтвержденоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеУтверждено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеУтвержденоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеУтвержденоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отклонения документа '; en = 'Specify the reason for rejection of the document '"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения", 
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.НеУтверждено"));
	ПараметрыЗаписи.Вставить("КлючеваяОперация", "УтверждениеВыполнениеКомандыНеУтверждено");
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтверждениеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиУтверждениеОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтверждениеОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУтверждение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьУтверждениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьУтверждениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтверждениеПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиУтверждениеПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтверждениеПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПараметровУтверждения", ЭтотОбъект, ПараметрыОбработчика);
	ОткрытьФорму(
		"БизнесПроцесс.Утверждение.Форма.ФормаИзменениеПараметров",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийУтверждениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаУтвердить"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_РаботаСФлагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Файлы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Обработчик,
		ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
		
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовок(ЗадачиМнеНовые, ЗадачиМнеПросроченные, ЗадачиМнеВсего)
	
	ТекстЗаголовка = НСтр("ru = 'Задачи мне (Новых: %1 / Просроченных: %2 / Всего: %3)'; en = 'Tasks to me (New: %1 / Overdue: %2 / Total: %3)'");
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		ЗадачиМнеНовые,
		ЗадачиМнеПросроченные,
		ЗадачиМнеВсего);
		
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНовогоСрока(ИзмененаДата)
	
	// Если в поле "Новый срок" вводится только время, то в дату проставляется текущая дата.
	// При вводе только времени дата автоматически принимает значение 01.01.0001 <Время>. Это значение исправляется.
	Если ЗначениеЗаполнено(НовыйСрок) и НовыйСрок < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		ЧасДаты = Час(НовыйСрок);
		МинутаДаты = Минута(НовыйСрок);
		СекундаДаты = Секунда(НовыйСрок);
		НовыйСрок = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);
	КонецЕсли;
	Если ИзмененаДата И НовыйСрок < КонецДня(НовыйСрок)
		ИЛИ НЕ ИспользоватьДатуИВремяВСрокахЗадач Тогда
		НовыйСрок = КонецДня(НовыйСрок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСрок) Тогда
		ДлительностьПереноса = 
			ПереносСроковВыполненияЗадачВызовСервера.ПолучитьПодписьДлительностьПереноса(
				ТекущийПользователь,
				СтарыйСрок,
				НовыйСрок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДлительностьПереноса = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцесс(Список)

	Если Список.ТекущиеДанные <> Неопределено 
		И ТипЗнч(Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда		
		ПоказатьЗначение(, Список.ТекущиеДанные.БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуИзСписка(Список)
	
	Если Список.Имя = "ЗадачиМне" Тогда
		Если Список.ТекущиеДанные <> Неопределено Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(
				Список.ТекущиеДанные.Ссылка);		
		КонецЕсли;	
	Иначе
		Если Список.ТекущаяСтрока = Неопределено 
			Или ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;	
	
		БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	МассивЗадач = Новый Массив;
	
	УстановитьФлагЗадачам = Ложь;
	
	Если Элементы.ГруппаСпискиЗадач.ТекущаяСтраница = Элементы.ГруппаЗадачиМне Тогда
		ВыделенныеСтроки = Элементы.ЗадачиМне.ВыделенныеСтроки;
		Для Каждого Стр Из ВыделенныеСтроки Цикл
			СтрокаДерева = ЗадачиМне.НайтиПоИдентификатору(Стр);
			Если СтрокаДерева <> Неопределено Тогда
				МассивЗадач.Добавить(СтрокаДерева.Ссылка);
			КонецЕсли;
		КонецЦикла;
		УстановитьФлагЗадачам = Истина;
	Иначе
		МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
		УстановитьФлагЗадачам = Истина;
	КонецЕсли;
	
	ИтоговыйМассивЗадач = Новый Массив;
	Для Каждого СтрокаМассива Из МассивЗадач Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ИтоговыйМассивЗадач.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если УстановитьФлагЗадачам Тогда
		Результат = РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ИтоговыйМассивЗадач, Флаг);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРассмотренияПоШаблону(Перезаполнить = Ложь)
	
	Если Перезаполнить Тогда 
		ШаблоныРассмотрения.Очистить();
	КонецЕсли;
	
	ТаблицаКоманд = 
		БизнесПроцессыИЗадачиСервер.ПолучитьТаблицуШаблоновРезолюций(ТекущийПользователь);
	
	Ит = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
		НаименованиеШаблона = "РассмотреноПоШаблону_" + Ит;
		НоваяСтрока = ШаблоныРассмотрения.Добавить();
		НоваяСтрока.ИмяШаблона = НаименованиеШаблона;
		НоваяСтрока.Ссылка = СтрокаТаблицы.Ссылка;
		НоваяСтрока.Заголовок = СокрЛП(СтрокаТаблицы.Наименование);
		Ит = Ит + 1;
	КонецЦикла;
	
	Элементы.ПоШаблону.Видимость = ШаблоныРассмотрения.Количество() > 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстШаблона(Шаблон)
	
	Возврат Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(Шаблон);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЗаполнитьПоШаблонуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьПоШаблонуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуНаКлиенте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставкиШаблонаТекста", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбластьПрименения", 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.Резолюции"));
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.Форма.ФормаВыбораШаблонаТекста",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВставкиШаблонаТекста(ШаблонТекста, Параметры) Экспорт
	
	Если ШаблонТекста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент <> Элементы.Резолюция Тогда
		Элементы.Резолюция.ВыделенныйТекст = Элементы.Резолюция.ВыделенныйТекст + ШаблонТекста;
		ЭтаФорма.ТекущийЭлемент = Элементы.Резолюция;
	Иначе
		Элементы.Резолюция.ВыделенныйТекст = ШаблонТекста;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКомментарийКЗадаче()
	
	Если ПараметрыСохраненияКомментарияЗадачи.КомментарияЗадачиИзменен Тогда
		ЗаписатьЗадачу(
			ПараметрыСохраненияКомментарияЗадачи.Задача,
			ПараметрыСохраненияКомментарияЗадачи.Комментарий);
	КонецЕсли;
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыСохраненияКомментарияЗадачи(
	Форма, Задача = Неопределено, Комментарий = "", КомментарияЗадачиИзменен = Ложь)
	
	Форма.ПараметрыСохраненияКомментарияЗадачи = Новый Структура;
	Форма.ПараметрыСохраненияКомментарияЗадачи.Вставить("Задача", Задача);
	Форма.ПараметрыСохраненияКомментарияЗадачи.Вставить("Комментарий", Комментарий);
	Форма.ПараметрыСохраненияКомментарияЗадачи.Вставить("КомментарияЗадачиИзменен", КомментарияЗадачиИзменен);
	
КонецПроцедуры

// Выполняет проверку заполнения доп. реквизитов.
// Если реквизит не заполнен, то выдается сообщению пользователю.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - проверяемая задача.
//
// Возвращаемые параметры:
//  Булево - возвращает Ложь, если есть незаполненные, обязательные доп. реквизиты.
//
&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеДопРеквизитов(ЗадачаСсылка)
	
	РезультатПроверки = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения")
		Или Не УправлениеСвойствами.ИспользоватьДопРеквизиты(ЗадачаСсылка) Тогда
		
		Возврат РезультатПроверки;
	КонецЕсли;
	
	КлючНазначения = Неопределено;
	НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
		ЗадачаСсылка, КлючНазначения);

	Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
		
	Для Каждого Строка Из НаборыСвойствОбъекта Цикл
		Если УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда
			
			Свойства_НаборыДополнительныхРеквизитовОбъекта.Добавить(
				Строка.Набор, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеРеквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗадачаСсылка, "ДополнительныеРеквизиты").Выгрузить();
	
	ОписаниеСвойств = УправлениеСвойствамиСлужебный.ПолучитьТаблицуЗначенийСвойств(
		ДополнительныеРеквизиты,
		Свойства_НаборыДополнительныхРеквизитовОбъекта,
		Ложь);
	
	Для каждого Строка Из ОписаниеСвойств Цикл
		Если Строка.ЗаполнятьОбязательно И НЕ Строка.Удалено Тогда
			Результат = Истина;
			
			Для Каждого ЗависимыйРеквизит Из Строка.ЗависимостиДополнительныхРеквизитов Цикл
				Если ЗависимыйРеквизит.ИмяРеквизитаЗначение = Строка.ИмяРеквизитаЗначение
					И ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
					ЗначенияПараметров = ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения.ЗначенияПараметров;
					КодУсловия         = ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения.КодУсловия;
					Выполнить("Результат = (" + КодУсловия + ")");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Результат Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено.'; en = 'Field""%1"" is not filled in.'"), Строка.Наименование), ЗадачаСсылка);
					
				РезультатПроверки = Ложь;
					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗадачиМне

&НаКлиенте
Процедура УстановитьДоступностьКомандПринятияКИсполнению() 
	
	Если ЗадачиМнеТекущаяЗадачаПринятаКИсполнению <> Неопределено Тогда

		ДоступностьКомандыПринятьКИсполнению = 
			НЕ ЗадачиМнеТекущаяЗадачаПринятаКИсполнению;
			
		ДоступностьКомандыОтменитьПринятиеКИсполнению = 
			ЗадачиМнеТекущаяЗадачаПринятаКИсполнению;
		
	Иначе
		
		ДоступностьКомандыПринятьКИсполнению = Ложь;
		ДоступностьКомандыОтменитьПринятиеКИсполнению = Ложь;
		
	КонецЕсли;
	
	Элементы.ПринятьКИсполнению.Доступность = ДоступностьКомандыПринятьКИсполнению;
	Элементы.ПринятьКИсполнению1.Доступность = ДоступностьКомандыПринятьКИсполнению;
		
	Элементы.ОтменитьПринятиеКИсполнению.Доступность = ДоступностьКомандыОтменитьПринятиеКИсполнению;
	
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		
		Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность =
			ДоступностьКомандыПринятьКИсполнению;
	
		Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность =
			ДоступностьКомандыОтменитьПринятиеКИсполнению;
		
	Иначе
		Элементы.ЗадачиМнеКонтекстноеМенюПринятьКИсполнению.Доступность =
			ДоступностьКомандыПринятьКИсполнению;
	
		Элементы.ЗадачиМнеКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность =
			ДоступностьКомандыОтменитьПринятиеКИсполнению;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок()
	
	Если Элементы.ГруппаСпискиЗадач.ТекущаяСтраница <> Элементы.ГруппаЗадачиМнеСписок Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ЗадачиМнеСписок.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено
		Или ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если НеПоказыватьОбластьПросмотраЗадачи Тогда
			ПодключитьОбработчикОжидания("ОбновитьПараметрыУчетаВремениВФорме", 0.2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("УстановитьСтраницуНетЗадачи", 0.2, Истина);
		КонецЕсли;
		
		ЗадачиМнеТекущаяЗадача = Неопределено;
		ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
		ЗадачиМнеТекущийБизнесПроцесс = Неопределено;
		ЗадачиМнеТекущийИндекс = Неопределено;
		ЗадачиМнеТекущийИсполнитель = Неопределено;
		
		УстановитьДоступностьКомандПринятияКИсполнению();
	Иначе
		Если ТекущаяСтрока <> ЗадачиМнеТекущаяЗадача Тогда
			
			ЗадачиМнеТекущаяЗадача = ТекущаяСтрока;
			ЗадачиМнеТекущийИсполнитель = Элементы.ЗадачиМнеСписок.ТекущиеДанные.Исполнитель;
			ЗадачиМнеТекущийБизнесПроцесс = Элементы.ЗадачиМнеСписок.ТекущиеДанные.БизнесПроцесс;
			ЗадачиМнеСостояниеВыполнения = Элементы.ЗадачиМнеСписок.ТекущиеДанные.СостояниеВыполнения;
			
			Если Элементы.ЗадачиМнеСписок.ТекущиеДанные.Выполнена Тогда
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
			Иначе
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = 
					Элементы.ЗадачиМнеСписок.ТекущиеДанные.ПринятаКИсполнению;
			КонецЕсли;
				
			УстановитьДоступностьКомандПринятияКИсполнению();
				
			Если НеПоказыватьОбластьПросмотраЗадачи Тогда
				ПодключитьОбработчикОжидания("ОбновитьПараметрыУчетаВремениВФорме", 0.2, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КорневойРодительЭлементаДерева(ЭлементДерева)
	
	РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		Возврат ЭлементДерева;
	Иначе
		Возврат КорневойРодительЭлементаДерева(РодительЭлемента);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиОбъектВДеревеПоСсылке(КоллекцияОбъектовОдногоУровня, ИскомыйОбъект, Индекс)
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОбъекта Из КоллекцияОбъектовОдногоУровня Цикл
		Если СтрокаОбъекта.Ссылка = ИскомыйОбъект Тогда
			Индекс = СтрокаОбъекта.ПолучитьИдентификатор();
		Иначе
			НайтиОбъектВДеревеПоСсылке(СтрокаОбъекта.ПолучитьЭлементы(), ИскомыйОбъект, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущийОбъектВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущийОбъект, ЗадачиМнеТекущийИндекс)
	
	Если ТекущийОбъект <> Неопределено И
		НЕ ТекущийОбъект.Пустая() Тогда
		Индекс = -1;
		НайтиОбъектВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущийОбъект, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		Иначе
			// Если задача не найдена в дереве (после выполнения), то
			// установить фокус на позицию выполненной задачи 
			КоличествоЭлементовВКорне = ДеревоРеквизит.ПолучитьЭлементы().Количество();
			
			Если ЗадачиМнеТекущийИндекс > 0 И КоличествоЭлементовВКорне > 1 Тогда
				Если ЗадачиМнеТекущийИндекс > КоличествоЭлементовВКорне - 1 Тогда
					НовыйИндекс = КоличествоЭлементовВКорне - 1;
				Иначе
					НовыйИндекс = ЗадачиМнеТекущийИндекс;
				КонецЕсли;

				ЭлементДерева = ДеревоРеквизит.ПолучитьЭлементы().Получить(НовыйИндекс);
				ДеревоЭлемент.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьДеревоПоКолонке(РеквизитДерево, ИмяКолонки)
		
	Если ЗадачиМнеСортироватьПо = ИмяКолонки Тогда
		Если ЗадачиМнеНаправлениеСортировки = "Возр" Тогда
			ЗадачиМнеНаправлениеСортировки = "Убыв";
		Иначе
			ЗадачиМнеНаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		ЗадачиМнеСортироватьПо = ИмяКолонки;
		ЗадачиМнеНаправлениеСортировки = "Возр";
	КонецЕсли;
		
	Дерево = РеквизитФормыВЗначение(РеквизитДерево);
		
	Дерево.Строки.Сортировать(
		ЗадачиМнеСортироватьПо + " " + ЗадачиМнеНаправлениеСортировки, 
		Ложь);
	
	ЗначениеВДанныеФормы(Дерево, ЭтаФорма[РеквизитДерево]);
	
	УстановитьПометкуРежимуСортировки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуРежимуСортировки(Форма)
	
	Форма.Элементы.ЗадачиМнеСортироватьСрокуИсполнения.Пометка = Ложь;
	Форма.Элементы.ЗадачиМнеСортироватьСрокуИсполнения.Заголовок = НСтр("ru = 'Срок'; en = 'Date'");
	
	Форма.Элементы.ЗадачиМнеСортироватьДатеСоздания.Пометка = Ложь;
	Форма.Элементы.ЗадачиМнеСортироватьДатеСоздания.Заголовок = НСтр("ru = 'Дата создания'; en = 'Creation date'");
	
	Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Пометка = Ложь;
	Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Заголовок = НСтр("ru = 'Флаг'; en = 'Flag'");
	
	Если Форма.ЗадачиМнеСортироватьПо = "СрокИсполнения" Тогда
		Форма.Элементы.ЗадачиМнеСортироватьСрокуИсполнения.Пометка = Истина;
		Форма.Элементы.ЗадачиМнеСортироватьСрокуИсполнения.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
				НСтр("ru = 'Срок'; en = 'Date'"),
				Форма.ЗадачиМнеНаправлениеСортировки);
	ИначеЕсли Форма.ЗадачиМнеСортироватьПо = "Дата" Тогда
		Форма.Элементы.ЗадачиМнеСортироватьДатеСоздания.Пометка = Истина;
		Форма.Элементы.ЗадачиМнеСортироватьДатеСоздания.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
				НСтр("ru = 'Дата создания'; en = 'Creation date'"),
				Форма.ЗадачиМнеНаправлениеСортировки);
	ИначеЕсли Форма.ЗадачиМнеСортироватьПо = "НомерФлага" Тогда
		Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Пометка = Истина;
		Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
				НСтр("ru = 'Флаг'; en = 'Flag'"),
				Форма.ЗадачиМнеНаправлениеСортировки);
	КонецЕсли;
	
	
	Форма.Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеСортироватьСрокуИсполнения.Пометка = 
		Форма.Элементы.ЗадачиМнеСортироватьСрокуИсполнения.Пометка;
	Форма.Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеСортироватьСрокуИсполнения.Заголовок = 
		Форма.Элементы.ЗадачиМнеСортироватьСрокуИсполнения.Заголовок;
	
	Форма.Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеСортироватьДатеСоздания.Пометка = 
		Форма.Элементы.ЗадачиМнеСортироватьДатеСоздания.Пометка;
	Форма.Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеСортироватьДатеСоздания.Заголовок = 
		Форма.Элементы.ЗадачиМнеСортироватьДатеСоздания.Заголовок;
	
	Форма.Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеСортироватьПоФлагу.Пометка = 
		Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Пометка;
	Форма.Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеСортироватьПоФлагу.Заголовок = 
		Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоЗадачамМне()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиМнеВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ Задачи.Выполнена
		|					ТОГДА 0
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|						И Задачи.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|						И КОНЕЦПЕРИОДА(Задачи.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|					ТОГДА 1
		|			КОНЕЦ), 0) КАК ЗадачиМнеПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ИдентификаторОбъектовМетаданныхЗадачи", ИдентификаторОбъектовМетаданныхЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УстановитьЗаголовок(
		Выборка.ЗадачиМнеНовые,
		Выборка.ЗадачиМнеПросроченные,
		Выборка.ЗадачиМнеВсего);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборЗадачиМне(Элементы, ЗадачиМнеПоказыватьВыполненные)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Элементы.ГруппаСпискиЗадач.ТекущаяСтраница = Элементы.ГруппаЗадачиМнеСписок;
	Иначе
		Элементы.ГруппаСпискиЗадач.ТекущаяСтраница = Элементы.ГруппаЗадачиМне;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗадачу(Задача, Комментарий)
	
	ЗаблокироватьДанныеДляРедактирования(Задача);
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.РезультатВыполнения = Комментарий;
	ЗадачаОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачу()
	
	ЗаписатьКомментарийКЗадаче();
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСобытиеПоЗадаче =
		ЗадачиМнеПоследняяЗадачаСЗаписаннойИсторийСобытий <> ЗадачиМнеТекущаяЗадача;
	
	РезультатОбработки = ОбновитьДанныеЗадачи(ЗадачиМнеТекущаяЗадача, ТекущийПользователь,
		ОтображатьУдаленныеПриложения, ЗаписатьСобытиеПоЗадаче);
	
	Если ЗаписатьСобытиеПоЗадаче Тогда
		ЗадачиМнеПоследняяЗадачаСЗаписаннойИсторийСобытий = ЗадачиМнеТекущаяЗадача;
	КонецЕсли;
	
	ПолноеОписаниеЗадачи = РезультатОбработки.ПолноеОписаниеЗадачи;
	
	ТочкаМаршрутаТекущейЗадачи = РезультатОбработки.ТочкаМаршрутаТекущейЗадачи;
	
	ВедущаяЗадачаТекущейЗадачи = РезультатОбработки.ВедущаяЗадачаТекущейЗадачи;
	ЭтоУзелВыполненияПроцесса = РезультатОбработки.ЭтоУзелВыполненияПроцесса;
	
	Если ОбновитьРезультатВыполнения Тогда
		РезультатВыполнения = РезультатОбработки.РезультатВыполнения;
	Иначе
		ОбновитьРезультатВыполнения = Истина;
	КонецЕсли;
	
	ПредметЗадачи = РезультатОбработки.ПредметЗадачи;
	Элементы.ГруппаВидыКнопокЗадачи.ТекущаяСтраница = Элементы[РезультатОбработки.СтраницаКнопокЗадачи];
	
	// Установить значения реквизитов
	Если ТипЗнч(РезультатОбработки.ДополнительныеРеквизиты) = Тип("Структура") Тогда
		Для каждого Реквизит Из РезультатОбработки.ДополнительныеРеквизиты Цикл
			ЭтаФорма[Реквизит.Ключ] = Реквизит.Значение;
		КонецЦикла;
	КонецЕсли;
	
	// Установить свойства элементов
	Если ТипЗнч(РезультатОбработки.СвойстваЭлементов) = Тип("Структура") Тогда
		Для каждого Элемент Из РезультатОбработки.СвойстваЭлементов Цикл
			НайденныйЭлемент = Элементы[Элемент.Ключ];
			Для каждого СвойствоЭлементаИЗначение Из Элемент.Значение Цикл
				ИмяСвойства = СвойствоЭлементаИЗначение.Ключ;
				ЗначениеСвойства = СвойствоЭлементаИЗначение.Значение;
				
				Если ИмяСвойства = "ТекущаяСтраница" Тогда
					НайденныйЭлемент[ИмяСвойства] = Элементы[ЗначениеСвойства];
					Продолжить;
				КонецЕсли;
				
				Если ИмяСвойства = "СписокВыбора" Тогда
					СписокВыбора = НайденныйЭлемент[ИмяСвойства];
					СписокВыбора.Очистить();
					
					Для Каждого ЭлементСписка Из ЗначениеСвойства Цикл
						СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
					КонецЦикла;
					
					Продолжить;
				КонецЕсли;
				
				НайденныйЭлемент[ИмяСвойства] = ЗначениеСвойства;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОбработки.СвойстваКоманд) = Тип("Структура") Тогда
		Если РезультатОбработки.СвойстваКоманд.Количество() > 0 Тогда
			ИзменитьСвойстваКоманд(РезультатОбработки.СвойстваКоманд);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если РезультатОбработки.ПоказыватьПредметыЗадачи Тогда
		Если РезультатОбработки.МассивПриложений.Количество() > 0 Тогда
			ЗаполнитьДеревоПриложений(ЭлементыДерева, РезультатОбработки.МассивПриложений);
			Элементы.ДеревоПриложений.Отображение = ОтображениеТаблицы.Дерево;
			Элементы.ДеревоПриложений.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			
			Для Каждого ЭлементДереваВерхнегоУровня ИЗ ЭлементыДерева Цикл
				Элементы.ДеревоПриложений.Развернуть(ЭлементДереваВерхнегоУровня.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Файлы,
			"ВладелецФайла",
			ЗадачиМнеТекущийБизнесПроцесс);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Файлы,
			"ТекущийПользователь",
			ТекущийПользователь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Файлы,
			"ОтображатьУдаленные",
			ОтображатьУдаленныеПриложения);
	КонецЕсли;
	
	Если РезультатОбработки.ПоказыватьПредметыЗадачи
		И РезультатОбработки.МассивПриложений.Количество() > 0 Тогда
		
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы;
	ИначеЕсли РезультатОбработки.КоличествоФайлов > 0 Тогда
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИФайлы;
	Иначе
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписание;
	КонецЕсли;
	
	Если РезультатОбработки.ПоказыватьПредметыЗадачи Тогда
		Элементы.ДобавитьПредмет.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьПредмет.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
	Иначе
		Элементы.ДобавитьПредмет.Доступность = Ложь;
		Элементы.ДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьПредмет.Доступность = Ложь;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
	КонецЕсли;
	
	УстановитьВидимостьДанныхЗадачи(Элементы, Истина);
	
	ФактическийИсполнительЗадачи = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДанныеЗадачи(
	Задача,
	ТекущийПользователь,
	ОтображатьУдаленныеПриложения,
	ЗаписатьСобытиеПоЗадаче)
	
	Результат = Новый Структура(
		"ПолноеОписаниеЗадачи, 
		|ПредметЗадачи, 
		|РезультатВыполнения, 
		|СтраницаКнопокЗадачи, 
		|Выполнена, 
		|ДополнительныеРеквизиты, 
		|СвойстваЭлементов,
		|МассивПриложений,
		|ДекорацияЗаголовокПриложений,
		|ПоказыватьПредметыЗадачи,
		|КоличествоФайлов,
		|ТочкаМаршрутаТекущейЗадачи,
		|СтраницаЗадатьВопрос,
		|ВедущаяЗадачаТекущейЗадачи,
		|ЭтоУзелВыполненияПроцесса,
		|СвойстваКоманд");
		
	ДополнительныеРеквизиты = Новый Структура;
	СвойстваЭлементов = Новый Структура;
	СвойстваКоманд = Новый Структура;
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Задача, 
		"БизнесПроцесс,
		|БизнесПроцесс.ВедущаяЗадача,
		|Описание,
		|Наименование,
		|ТочкаМаршрута,
		|Выполнена,
		|РезультатВыполнения,
		|Исполнитель,
		|РольИсполнителя,
		|БизнесПроцесс.УзелОбмена");
	
	Результат.РезультатВыполнения = РеквизитыЗадачи.РезультатВыполнения;
	Результат.Выполнена = РеквизитыЗадачи.Выполнена;
	
	Результат.ВедущаяЗадачаТекущейЗадачи = РеквизитыЗадачи.БизнесПроцессВедущаяЗадача;
	
	ТочкаМаршрутаСсылка = РеквизитыЗадачи.ТочкаМаршрута;
	Результат.ТочкаМаршрутаТекущейЗадачи = ТочкаМаршрутаСсылка;
	ТипБизнесПроцесса = ТипЗнч(РеквизитыЗадачи.БизнесПроцесс);
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) Тогда
		ТочкиМаршрутаПроцесса = 
			БизнесПроцессы[РеквизитыЗадачи.БизнесПроцесс.Метаданные().Имя].ТочкиМаршрута;
	Иначе
		ТочкиМаршрутаПроцесса = Неопределено;
	КонецЕсли;
	
	СтраницаКнопокЗадачи = "ГруппаКнопокПерейтиКФормеЗадачи";
	
	Результат.ПоказыватьПредметыЗадачи = Истина;
	
	// Видимость кнопок вопросов
	СвойстваЭлементов.Вставить("ЗадатьВопрос", Новый Соответствие);
	СвойстваЭлементов.ЗадатьВопрос.Вставить("Видимость", Истина);
	СвойстваЭлементов.Вставить("ВопросыПоЗадаче", Новый Соответствие);
	СвойстваЭлементов.ВопросыПоЗадаче.Вставить("Видимость", Истина);
	
	КоличествоВопросов = 
		БизнесПроцессыИЗадачиВызовСервера.КоличествоВопросовВыполненияЗадачи(Задача);
		
	Если КоличествоВопросов > 0 Тогда
		СвойстваЭлементов.ЗадатьВопрос.Вставить("Видимость", Ложь);
	Иначе
		СвойстваЭлементов.ВопросыПоЗадаче.Вставить("Видимость", Ложь);
	КонецЕсли;
	
	СвойстваЭлементов.Вставить("ЗадачаЗадачаИсполнителяСогласоватьПереносСрока", Новый Соответствие);
	СвойстваЭлементов.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Вставить("Видимость", Не РеквизитыЗадачи.Выполнена);
	
	Результат.КоличествоФайлов = 0;
	
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс)
		Или РеквизитыЗадачи.Выполнена Тогда

	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Рассмотреть Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРассмотрение";
			
			ПолучитьРеквизитыИСвойстваЗадачиРассмотрено(
					Задача,
					РеквизитыЗадачи, 
					ДополнительныеРеквизиты, 
					СвойстваЭлементов);
			
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРассмотрениеОбработано";
			
			ПолучитьРеквизитыИСвойстваЗадачиРассмотреноОбработано(
				Задача,
				РеквизитыЗадачи, 
				ДополнительныеРеквизиты, 
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
				
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.РассмотрениеИнициатором Тогда
			ВидВопроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыЗадачи.БизнесПроцесс, 
				"ВидВопроса");
				
			Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
				
				СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовПереносСрока";
				
				ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросовПереносСрока(
					Задача,
					РеквизитыЗадачи, 
					ДополнительныеРеквизиты, 
					СвойстваЭлементов);
					
			Иначе
					
				ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросов(
					Задача,
					РеквизитыЗадачи,
					ДополнительныеРеквизиты,
					СвойстваЭлементов);
					
				СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовАвтор";
			КонецЕсли;
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.ОзнакомлениеСРезультатомРассмотрения Тогда
			
			ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросов(
					Задача,
					РеквизитыЗадачи,
					ДополнительныеРеквизиты,
					СвойстваЭлементов);
			
			СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовИсполнитель";
		КонецЕсли;
		
		Результат.ПоказыватьПредметыЗадачи = Ложь;
		
		Результат.КоличествоФайлов = КоличествоФайлов(
			РеквизитыЗадачи.БизнесПроцесс, ОтображатьУдаленныеПриложения);
			
		// Видимость кнопок вопросов
		СвойстваЭлементов.ЗадатьВопрос.Вставить("Видимость", Ложь);
		СвойстваЭлементов.ВопросыПоЗадаче.Вставить("Видимость", Ложь);
		СвойстваЭлементов.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Вставить("Видимость", Ложь);
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Выполнить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручение";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролировать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручениеКонтролер";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Проверить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручениеПроверяющий";
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролер Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокКомплексныйПроцесс";
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Зарегистрировать Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокРегистрация";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРегистрацияОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиРегистрацияОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Пригласить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашение";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашение(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Оповестить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашениеОповестить";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОповестить(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашениеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Согласовать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокСогласование";
			
			ПолучитьРеквизитыИСвойстваЗадачиСогласованиеСогласовать(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда 
			
			СтраницаКнопокЗадачи = "ГруппаКнопокСогласованиеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиСогласованиеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Утвердить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокУтверждение";
			
			ПолучитьРеквизитыИСвойстваЗадачиУтверждение(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов,
				СвойстваКоманд);
		
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокУтверждениеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиУтверждениеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов,
				СвойстваКоманд);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Исполнить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнение";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролировать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеКонтролер";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.ОтветственноеИсполнение Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеОтвИсполнитель";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Проверить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеПроверяющий";
		КонецЕсли;
	
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда	
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокОзнакомление";
		КонецЕсли;
	
	КонецЕсли;
	
	Результат.СтраницаКнопокЗадачи = СтраницаКнопокЗадачи;
	
	РеквизитыЗадачи.Вставить("Ссылка", Задача);
	РеквизитыЗадачи.Вставить("НомерИтерацииЗадачи", 0);
	Если ДополнительныеРеквизиты.Свойство("НомерИтерацииЗадачи") Тогда
		РеквизитыЗадачи.НомерИтерацииЗадачи = ДополнительныеРеквизиты.НомерИтерацииЗадачи;
	КонецЕсли;
	
	ПредметыВыборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Предметы");
	Предметы = ПредметыВыборка.Выгрузить();
	
	ПредметДокумент = ОбзорЗадачВызовСервера.ПолучитьОсновнойПредметДокумент(Предметы);
	Если ЗначениеЗаполнено(ПредметДокумент) Тогда
	
		РеквизитыЗадачи.Вставить("ПредметДокумент", ПредметДокумент);
			
	КонецЕсли;		
	
	Результат.ПолноеОписаниеЗадачи = 
		ОбзорЗадачВызовСервера.ПолучитьОбзорЗадачиДляСпискаЗадачиМне(РеквизитыЗадачи);
	
	// Хронометраж
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(Задача);
	
	СвойстваЭлементов.Вставить("ПереключитьХронометраж", ПараметрыУчетаВремени.ПереключитьХронометраж);
	СвойстваЭлементов.Вставить("УказатьТрудозатраты", ПараметрыУчетаВремени.УказатьТрудозатраты);
	
	ДополнительныеРеквизиты.Вставить("ДатаНачалаХронометража", ПараметрыУчетаВремени.ДатаНачалаХронометража);
	ДополнительныеРеквизиты.Вставить("ДатаКонцаХронометража", ПараметрыУчетаВремени.ДатаКонцаХронометража);
	ДополнительныеРеквизиты.Вставить("ВключенХронометраж", ПараметрыУчетаВремени.ВключенХронометраж);
	ДополнительныеРеквизиты.Вставить("ОпцияИспользоватьУчетВремени", ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени);
	ДополнительныеРеквизиты.Вставить("ВидыРабот", ПараметрыУчетаВремени.ВидыРабот);
	ДополнительныеРеквизиты.Вставить("СпособУказанияВремени", ПараметрыУчетаВремени.СпособУказанияВремени);
	
	Результат.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
	Результат.СвойстваЭлементов = СвойстваЭлементов;
	Результат.СвойстваКоманд = СвойстваКоманд;
	
	// список приложений
	Если Результат.ПоказыватьПредметыЗадачи Тогда
		СформироватьМассивПриложенийПоПредметам(Задача, ОтображатьУдаленныеПриложения, 
			Результат.МассивПриложений);
	КонецЕсли;
	
	Если ЗаписатьСобытиеПоЗадаче Тогда
		ИсторияСобытийЗадач.ЗаписатьСобытиеОткрытаКарточка(Задача);
	КонецЕсли;
	
	ЭтотУзелОбмена = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	Результат.ЭтоУзелВыполненияПроцесса = (РеквизитыЗадачи.БизнесПроцессУзелОбмена = ЭтотУзелОбмена);
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьМассивПриложенийПоПредметам(Задача, ОтображатьУдаленныеПриложения, 
	МассивПриложений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = Задача.Предметы;
	МассивПриложений = Новый Массив;
	
	Если НЕ ОтображатьУдаленныеПриложения Тогда
		
		КоличествоПредметов = 0;
		
		Для Каждого СтрПредмет ИЗ Предметы Цикл
			Если НЕ ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			ИначеЕсли НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПредмет.Предмет, "ПометкаУдаления") Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоПредметов = Предметы.Количество();
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
	
		Если СтрокаПредмета.Предмет <> Неопределено И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Если Не ОтображатьУдаленныеПриложения И СтрокаПредмета.Предмет.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП");
			
		Строка.ДочерниеЭлементы = Новый Массив;	
		
		Строка.Наименование = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		Строка.Ссылка = СтрокаПредмета.Предмет;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, 
					"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, ПодписанЭП");
					
				Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
					Строка.ТипФайла = Строка.ТипФайла + 1;
				КонецЕсли;	
				Строка.ТипФайла = РеквизитыФайла.ИндексКартинки;
				
				Строка.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
				Строка.Редактирует = РеквизитыФайла.Редактирует;
				Если Не Строка.Редактирует.Пустая() Тогда
					Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						Строка.РедактируетТекущийПользователь = Истина;
					Иначе	
						Строка.РедактируетДругойПользователь = Истина;
					КонецЕсли;
				КонецЕсли;
				Строка.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
			Иначе
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строка.ИмяПредмета) Тогда
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			Иначе
				Если СтрокаПредмета.Предмет <> Неопределено Тогда
					Строка.ТипФайла = ?(СтрокаПредмета.Предмет.ПометкаУдаления, 11, 10); // Простое изображение листа
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		ДобавитьФайлыВДеревоПриложений(Строка, СтрокаПредмета.Предмет, ОтображатьУдаленныеПриложения);
		МассивПриложений.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайлыВДеревоПриложений(СтрокаПредмета, Предмет, ОтображатьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Описание,
		|	Файлы.ИндексКартинки,
		|	Файлы.ХранитьВерсии,
		|	Файлы.Редактирует,
		|	Файлы.ПометкаУдаления,
		|	Файлы.ПодписанЭП
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВладелецФайла", Предмет);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП");
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Описание) Тогда
			Строка.Наименование = Строка.Наименование + ", " + ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		Строка.ТипФайла = ВыборкаДетальныеЗаписи.ИндексКартинки;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Строка.ТипФайла = Строка.ТипФайла + 1;
		КонецЕсли;	
		
		Строка.ХранитьВерсии = ВыборкаДетальныеЗаписи.ХранитьВерсии;
		Строка.Редактирует = ВыборкаДетальныеЗаписи.Редактирует;
		Если Не Строка.Редактирует.Пустая() Тогда
			Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
				Строка.РедактируетТекущийПользователь = Истина;
			Иначе	
				Строка.РедактируетДругойПользователь = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Строка.ПодписанЭП = ВыборкаДетальныеЗаписи.ПодписанЭП;
		
		СтрокаПредмета.ДочерниеЭлементы.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросовПереносСрока(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"ПредметРассмотрения, НовыйСрок, УзелОбмена");
		
	РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыБизнесПроцесса.ПредметРассмотрения,
		"БизнесПроцесс, СрокИсполнения");
	
	// Инициализация реквизитов карточки
	ДополнительныеРеквизиты.Вставить(
		"ПредметРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотрения);
	ДополнительныеРеквизиты.Вставить(
		"БизнесПроцессПредметаРассмотрения",
		РеквизитыПредмета.БизнесПроцесс);
	ДополнительныеРеквизиты.Вставить(
		"ИмяФормыДляОткрытияКарточкиПроцесса",
		"БизнесПроцесс." + 
		РеквизитыПредмета.БизнесПроцесс.Метаданные().Имя + ".ФормаОбъекта");

	ДополнительныеРеквизиты.Вставить("СтарыйСрок", РеквизитыПредмета.СрокИсполнения);
	ДополнительныеРеквизиты.Вставить("НовыйСрок", РеквизитыБизнесПроцесса.НовыйСрок);
	ДополнительныеРеквизиты.Вставить(
		"ДлительностьПереноса",
		ПереносСроковВыполненияЗадачВызовСервера.ПолучитьПодписьДлительностьПереноса(
			ДополнительныеРеквизиты.БизнесПроцессПредметаРассмотрения.Автор,
			ДополнительныеРеквизиты.СтарыйСрок,
			ДополнительныеРеквизиты.НовыйСрок));
	
	УзелОбменаПредметаРассмотрения = 
		ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			РеквизитыПредмета.БизнесПроцесс, "УзелОбмена");
		
	УзелОбменаЗаявки = РеквизитыБизнесПроцесса.УзелОбмена;
		
	// Если заявка на перенос срока создана в другом узле, то
	// перенос срока процесса (предмета рассмотрения) возможен только в карточке процесса
	ТребуетсяРучноеИзменениеСрока = УзелОбменаПредметаРассмотрения <> УзелОбменаЗаявки;
	
	ДополнительныеРеквизиты.Вставить(
		"ТребуетсяРучноеИзменениеСрока",
		ТребуетсяРучноеИзменениеСрока);
		
	СвойстваЭлементов.Вставить("ДекорацияЗнакВниманиеРучной", Новый Соответствие);
	СвойстваЭлементов.ДекорацияЗнакВниманиеРучной.Вставить("Видимость", ТребуетсяРучноеИзменениеСрока);
	
	СвойстваЭлементов.Вставить("НовыйСрокДата", Новый Соответствие);
	СвойстваЭлементов.НовыйСрокДата.Вставить("ТолькоПросмотр", ТребуетсяРучноеИзменениеСрока);
	
	СвойстваЭлементов.Вставить("НовыйСрокВремя", Новый Соответствие);
	СвойстваЭлементов.НовыйСрокВремя.Вставить("ТолькоПросмотр", ТребуетсяРучноеИзменениеСрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросов(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		РеквизитыЗадачи.БизнесПроцесс, "ПредметРассмотрения, ПредметРассмотрения.БизнесПроцесс");
	
	ДополнительныеРеквизиты.Вставить(
		"ПредметРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотрения);
		
	ДополнительныеРеквизиты.Вставить(
		"БизнесПроцессПредметаРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотренияБизнесПроцесс);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашение(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"ДатаНачалаМероприятия, ДатаОкончанияМероприятия, МестоПроведения");
	
	ДополнительныеРеквизиты.Вставить(
		"ДатаНачалаМероприятия",
		РеквизитыБизнесПроцесса.ДатаНачалаМероприятия);
	ДополнительныеРеквизиты.Вставить(
		"МестоПроведения",
		РеквизитыБизнесПроцесса.МестоПроведения);
	ДополнительныеРеквизиты.Вставить(
		"ДатаОкончанияМероприятия",
		РеквизитыБизнесПроцесса.ДатаОкончанияМероприятия);
		
	ДополнительныеРеквизиты.Вставить(
		"ИспользоватьРабочийКалендарь",
		ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь"));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОповестить(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс,
		"РезультатПриглашения");
	
	// результат приглашения
	СвойстваЭлементов.Вставить("РезультатПриглашенияОповестить", Новый Соответствие);
	ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияЗадачи",
			РеквизитыБизнесПроцесса.РезультатПриглашения);
	
	Если РеквизитыБизнесПроцесса.РезультатПриглашения = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		Или РеквизитыБизнесПроцесса.РезультатПриглашения = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияОповестить",
			НСтр("ru = 'Приглашение подтверждено с указанным местом и временем'; en = 'Invitation is confirmed with the location and time specified'"));
		СвойстваЭлементов.РезультатПриглашенияОповестить.Вставить(
			"ЦветТекста",
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	Иначе
		ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияОповестить",
			НСтр("ru = 'Приглашение отменено с указанным местом и временем'; en = 'Invitation is cancelled with the location and time specified'"));
		СвойстваЭлементов.РезультатПриглашенияОповестить.Вставить(
			"ЦветТекста",
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыПриглашения");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыПриглашения = РеквизитыБизнесПроцесса.РезультатыПриглашения.Выгрузить();

	// номер итерации
	СвойстваЭлементов.Вставить("РезультатПриглашения", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаПриглашениеОзнакомитьсяКнопки", Новый Соответствие);
		
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат приглашения
	РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
	СтрокиИтерации = РезультатыПриглашения.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
	
	ЕстьПринятые = Ложь;
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
			ЕстьПринятые = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПринятые Тогда 
		РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
	Иначе	
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
				Если Строка.ЯвкаОбязательна Тогда 
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
					Прервать;
				Иначе
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// цвет результата
	Если РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		Или РезультатПриглашенияЗадачи = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		СвойстваЭлементов.РезультатПриглашения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
		
	Иначе
		
		СвойстваЭлементов.РезультатПриглашения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
		
	КонецЕсли;
	
	// страница кнопок
	Если РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда 
		
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаПринято");
			
	ИначеЕсли РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаПринятоОбязательными");
			
	ИначеЕсли РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками
		Или РезультатПриглашенияЗадачи = 
			Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
			
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаНеПринято");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатПриглашенияЗадачи", РезультатПриглашенияЗадачи);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиСогласованиеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыСогласования");
	
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыСогласования = РеквизитыБизнесПроцесса.РезультатыСогласования.Выгрузить();
	
	// номер итерации	
	СвойстваЭлементов.Вставить("РезультатСогласования", Новый Соответствие);	
	СвойстваЭлементов.Вставить("ГруппаСогласованиеОзнакомитьсяКнопки", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат согласования
	РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.Согласовано;
	СтрокиИтерации = РезультатыСогласования.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
		
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано;
			Прервать;
		КонецЕсли;
		
		Если Строка.РезультатСогласования = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
			
			РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			
		КонецЕсли;
	КонецЦикла;
	
	// цвет результата
	Если РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.Согласовано 
		Или РезультатСогласованияЗадачи = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			
		СвойстваЭлементов.РезультатСогласования.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
		
	ИначеЕсли РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		
		СвойстваЭлементов.РезультатСогласования.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
		
	КонецЕсли;
	
	// страница кнопок
	Если РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		СвойстваЭлементов.ГруппаСогласованиеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаНеСогласовано");
	Иначе
		СвойстваЭлементов.ГруппаСогласованиеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаСогласовано");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатСогласованияЗадачи", РезультатСогласованияЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиСогласованиеСогласовать(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыСогласования");
	
	РезультатыСогласования = РеквизитыБизнесПроцесса.РезультатыСогласования.Выгрузить();
	
	// номер цикла
	НомерИтерацииЗадачи = 0;	
	НайденнаяСтрока = РезультатыСогласования.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	
	ПодписыватьЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП");
	ДополнительныеРеквизиты.Вставить("ПодписыватьРезультатВыполненияЭП", ПодписыватьЭП);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиУтверждение(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов, СвойстваКоманд)
	
	Если НЕ (ТипЗнч(РеквизитыЗадачи) = Тип("Структура")
		И РеквизитыЗадачи.Свойство("БизнесПроцесс")) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП, ВидПроцесса");
		
	ПодписыватьЭП = РеквизитыБизнесПроцесса.ПодписыватьЭП;	
		
	Если НЕ ЗначениеЗаполнено(ПодписыватьЭП) Тогда
		ПодписыватьЭП = Ложь;
	КонецЕсли;
	
	ПодписыватьЭП = ПодписыватьЭП И ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
		
	ДополнительныеРеквизиты.Вставить("ПодписыватьРезультатВыполненияЭП", ПодписыватьЭП);
	
	ВидПроцесса = РеквизитыБизнесПроцесса.ВидПроцесса;
	Если Не ЗначениеЗаполнено(РеквизитыБизнесПроцесса.ВидПроцесса) Тогда
		ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Утверждение;
	КонецЕсли;
	
	// заголовки команд
	СвойстваКоманд.Вставить("ЗадачаУтверждено", Новый Соответствие);
	СвойстваКоманд.Вставить("ЗадачаНеУтверждено", Новый Соответствие);
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		ЗаголовокУтверждено = НСтр("ru = 'Подписать'; en = 'Sign'");
		ПодсказкаУтверждено = ЗаголовокУтверждено;
		ЗаголовокНеУтверждено = НСтр("ru = 'Отклонить'; en = 'Reject'");
		ПодсказкаНеУтверждено = ЗаголовокНеУтверждено;
	Иначе
		ЗаголовокУтверждено = НСтр("ru = 'Утверждено'; en = 'Confirmed'");
		ПодсказкаУтверждено = ЗаголовокУтверждено;
		ЗаголовокНеУтверждено = НСтр("ru = 'Не утверждено'; en = 'Not confirmed'");
		ПодсказкаНеУтверждено = ЗаголовокНеУтверждено;
	КонецЕсли;	
	
	СвойстваКоманд.ЗадачаУтверждено.Вставить("Заголовок", ЗаголовокУтверждено);
	СвойстваКоманд.ЗадачаУтверждено.Вставить("Подсказка", ПодсказкаУтверждено);
		
	СвойстваКоманд.ЗадачаНеУтверждено.Вставить("Заголовок", ЗаголовокНеУтверждено);
	СвойстваКоманд.ЗадачаНеУтверждено.Вставить("Подсказка", ПодсказкаНеУтверждено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиУтверждениеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов, СвойстваКоманд)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыУтверждения, ВидПроцесса");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыУтверждения = РеквизитыБизнесПроцесса.РезультатыУтверждения.Выгрузить();
	
	// номер итерации
	СвойстваЭлементов.Вставить("РезультатУтверждения", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаУтверждениеОзнакомитьсяКнопки", Новый Соответствие);
	
	// заголовки кнопок
	СвойстваКоманд.Вставить("ЗадачаУтверждениеЗавершитьУтверждение", Новый Соответствие);
	СвойстваКоманд.Вставить("ЗадачаУтверждениеПовторить", Новый Соответствие);
	
	ВидПроцесса = РеквизитыБизнесПроцесса.ВидПроцесса;
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		ЗаголовокЗавершитьУтверждение = НСтр("ru = 'Завершить подписание'; en = 'Finish singing'");
		ЗаголовокУтверждениеПовторить = НСтр("ru = 'Повторить подписание...'; en = 'Repeat signing ...'");
	Иначе
		ЗаголовокЗавершитьУтверждение = НСтр("ru = 'Завершить утверждение'; en = 'Finish confirmation'");
		ЗаголовокУтверждениеПовторить = НСтр("ru = 'Повторить утверждение...'; en = 'Repeat confirmation...'");
	КонецЕсли;
	
	ПодсказкаЗавершитьУтверждение = ЗаголовокЗавершитьУтверждение;
	ПодсказкаУтверждениеПовторить = ЗаголовокУтверждениеПовторить;

	СвойстваКоманд.ЗадачаУтверждениеЗавершитьУтверждение.Вставить("Заголовок", ЗаголовокЗавершитьУтверждение);
	СвойстваКоманд.ЗадачаУтверждениеЗавершитьУтверждение.Вставить("Подсказка", ПодсказкаЗавершитьУтверждение);	
		
	СвойстваКоманд.ЗадачаУтверждениеПовторить.Вставить("Заголовок", ЗаголовокУтверждениеПовторить);
	СвойстваКоманд.ЗадачаУтверждениеПовторить.Вставить("Подсказка", ПодсказкаУтверждениеПовторить);		
		
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат утверждения
	РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.Утверждено;
	СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(
		Новый Структура("НомерИтерации",
		НомерИтерацииЗадачи));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
			РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// цвет надписи
	Если РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.Утверждено Тогда
		СвойстваЭлементов.РезультатУтверждения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	ИначеЕсли РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		СвойстваЭлементов.РезультатУтверждения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;
		
	// представление результата
	СвойстваЭлементов.РезультатУтверждения.Вставить("РежимВыбораИзСписка", Истина);
	СписокВыбораРезультатУтверждения = СформироватьСписокВыбораРезультатУтверждения(ВидПроцесса);
	СвойстваЭлементов.РезультатУтверждения.Вставить("СписокВыбора", СписокВыбораРезультатУтверждения);

	// страница кнопок
	Если РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		СвойстваЭлементов.ГруппаУтверждениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаУтверждениеОзнакомитьсяКнопкиСтраницаНеУтверждено");
	Иначе
		СвойстваЭлементов.ГруппаУтверждениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаУтверждениеОзнакомитьсяКнопкиСтраницаУтверждено");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатУтвержденияЗадачи", РезультатУтвержденияЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРегистрацияОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыРегистрации");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыРегистрации = РеквизитыБизнесПроцесса.РезультатыРегистрации.Выгрузить();
	
	// номер итерации
	СвойстваЭлементов.Вставить("РезультатРегистрации", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаРегистрацияОзнакомитьсяКнопки", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат регистрации
	РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.Зарегистрировано;
	СтрокиИтерации = РезультатыРегистрации.НайтиСтроки(
		Новый Структура("НомерИтерации",
		НомерИтерацииЗадачи));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда 
			РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// цвет надписи
	Если РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
		СвойстваЭлементов.РезультатРегистрации.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	ИначеЕсли РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
			СвойстваЭлементов.РезультатРегистрации.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;
	
	// страница кнопок
	Если РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
		СвойстваЭлементов.ГруппаРегистрацияОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаРегистрацияОзнакомитьсяКнопкиСтраницаНеЗарегистрировано");
	Иначе
		СвойстваЭлементов.ГруппаРегистрацияОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаРегистрацияОзнакомитьсяКнопкиСтраницаЗарегистрировано");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатРегистрацииЗадачи", РезультатРегистрацииЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРассмотрено(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет.ВидДокумента.ПодписыватьРезолюцииЭП = ИСТИНА
		|	И ЗадачаИсполнителяПредметы.Ссылка = &Задача";
		
	Запрос.УстановитьПараметр("Задача", Задача);
	ПодписыватьРезультатВыполненияЭП = НЕ Запрос.Выполнить().Пустой();
	
	ДополнительныеРеквизиты.Вставить(
		"ПодписыватьРезультатВыполненияЭП", ПодписыватьРезультатВыполненияЭП);
		
	РасширеннаяФорма = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя",
		"РасширеннаяФорма",
		Ложь);
		
	СвойстваЭлементов.Вставить("СтандартноеРассмотрение", Новый Соответствие);
	СвойстваЭлементов.Вставить("Отправить", Новый Соответствие);
	СвойстваЭлементов.СтандартноеРассмотрение.Вставить(
		"Видимость",
		РасширеннаяФорма);
	СвойстваЭлементов.Отправить.Вставить(
		"Видимость",
		РасширеннаяФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРассмотреноОбработано(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	СвойстваЭлементов.Вставить("Обработано", Новый Соответствие);
	
	ДоступностьКнопкиОбработано = Ложь;
	
	ВедущийБизнесПроцесс = Задача.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс;
	Если НЕ ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		И НЕ ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") Тогда
		
		ДоступностьКнопкиОбработано = Истина;
		
	КонецЕсли;
	
	СвойстваЭлементов.Обработано.Вставить("Доступность", ДоступностьКнопкиОбработано);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи)
	
	Элементы.СтраницыПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДанныхЗадачи(Элементы, ПоказыватьДанныеЗадачи)
	
	Если ПоказыватьДанныеЗадачи Тогда
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаПросмотрЗадачи;
	Иначе
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуНетЗадачи()
	
	ТекущийЭлемент = Элементы.ГруппаПодзадачи;
	
	Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГруппировкуЗадачМне(ЭтаФорма)
	
	ЭтаФорма.Элементы.СтраницыГруппировки.Видимость = ЭтаФорма.ПоказыватьОбластьГруппировки;
	
	ЭтаФорма.Элементы.СписокСгруппироватьПоАвтору.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоФлагу.Пометка = Ложь;
	
	ВидимостьКолонкиАвтор = Истина;
	
	Если ЭтаФорма.ПоказыватьОбластьГруппировки Тогда
		Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаАвторы;
			ВидимостьКолонкиАвтор = Ложь;
			ЭтаФорма.Элементы.СписокСгруппироватьПоАвтору.Пометка = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаПроекты;
			ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаТочкиМаршрута;
			ЭтаФорма.Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФлаги;
			ЭтаФорма.Элементы.СписокСгруппироватьПоФлагу.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Элементы.ЗадачиМнеАвтор.Видимость = ВидимостьКолонкиАвтор;
	ЭтаФорма.Элементы.СписокАвтор.Видимость = ВидимостьКолонкиАвтор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачМне()
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		БизнесПроцессыИЗадачиКлиент.ОбновитьПараметрыУсловногоОформленияПросроченныхЗадач(
			ЗадачиМнеСписок.УсловноеОформление);
		ОбновитьСписокВыполненныхЗадачМнеСервер();
	Иначе
		ОбновитьДеревоЗадачМнеСервер();
	КонецЕсли;
	
	УстановитьТекущееЗначениеГруппировкиЗадачМне();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыполненныхЗадачМнеСервер()
	
	СформироватьГруппировкиЗадачМне();
	Элементы.ЗадачиМнеСписок.Обновить();
	ОбновитьИтогиПоЗадачамМне();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееЗначениеГруппировкиЗадачМне()
	
	УстановитьПараметрыГруппировокПриАктивизации = Ложь;
	
	Если ЗадачиМнеВидГруппировки = "Автор" И ЗадачиМнеАвторы.Количество() > 0 Тогда
		Если ЗадачиМнеТекущийАвтор <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Автор", ЗадачиМнеТекущийАвтор);
			НайденныеСтроки = ЗадачиМнеАвторы.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущийАвтор = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеАвторы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" И ЗадачиМнеПроекты.Количество() > 0 Тогда
		Если ЗадачиМнеТекущийПроект <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Проект", ЗадачиМнеТекущийПроект);
			НайденныеСтроки = ЗадачиМнеПроекты.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущийПроект = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеПроекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" И ЗадачиМнеТочкиМаршрута.Количество() > 0 Тогда
		Если ЗадачиМнеТекущаяТочкаМаршрута <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ТочкаМаршрута", ЗадачиМнеТекущаяТочкаМаршрута);
			НайденныеСтроки = ЗадачиМнеТочкиМаршрута.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущаяТочкаМаршрута = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеТочкиМаршрута.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" И ЗадачиМнеФлаги.Количество() > 0 Тогда
		Если ЗадачиМнеТекущийФлаг <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Флаг", ЗадачиМнеТекущийФлаг);
			НайденныеСтроки = ЗадачиМнеФлаги.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущийФлаг = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеФлаги.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	КонецЕсли;
	
	Если НЕ УстановитьПараметрыГруппировокПриАктивизации Тогда
		УстановитьПараметрыГруппировокВЗадачахМне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГруппировокВЗадачахМне()
	
	УстановитьПараметрыГруппировокВЗадачахМнеСервер(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыГруппировокВЗадачахМнеСервер(ЭтаФорма)
	
	Если ЭтаФорма.ЗадачиМнеПоказыватьВыполненные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"Автор",
			Неопределено,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"Проект",
			Неопределено,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"ТочкаМаршрута",
			Неопределено,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"Флаг",
			Неопределено,
			Ложь);
			
		Если ЭтаФорма.ПоказыватьОбластьГруппировки Тогда
			Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
				
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
						ЭтаФорма.ЗадачиМнеСписок,
						"Автор",
						ЭтаФорма.ЗадачиМнеТекущийАвтор);
			ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
						ЭтаФорма.ЗадачиМнеСписок,
						"Проект",
						ЭтаФорма.ЗадачиМнеТекущийПроект);
			ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
						
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ЭтаФорма.ЗадачиМнеСписок,
					"ТочкаМаршрута",
					ЭтаФорма.ЗадачиМнеТекущаяТочкаМаршрута);
			ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
						
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ЭтаФорма.ЗадачиМнеСписок,
					"Флаг",
					ЭтаФорма.ЗадачиМнеТекущийФлаг);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗадачиЭлементы = ЭтаФорма.ЗадачиМнеПолный.ПолучитьЭлементы();
		
		ЭтаФорма.ЗадачиМне.ПолучитьЭлементы().Очистить();
		
		Для Каждого Задача Из ЗадачиЭлементы Цикл
			
			ПоказыватьЗадачу = Истина;
			Если ЭтаФорма.ПоказыватьОбластьГруппировки Тогда
				Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
					ПоказыватьЗадачу = Задача.Автор = ЭтаФорма.ЗадачиМнеТекущийАвтор;
				ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
					ПоказыватьЗадачу = Задача.Проект = ЭтаФорма.ЗадачиМнеТекущийПроект;
				ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
					ПоказыватьЗадачу = Задача.ТочкаМаршрута = ЭтаФорма.ЗадачиМнеТекущаяТочкаМаршрута;
				ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
					ПоказыватьЗадачу = Задача.Флаг = ЭтаФорма.ЗадачиМнеТекущийФлаг;
				КонецЕсли;
			КонецЕсли;
			
			Если ПоказыватьЗадачу Тогда
				СкопироватьУзелДерева(Задача, ЭтаФорма.ЗадачиМне);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма.ЗадачиМне.ПолучитьЭлементы().Количество() = 0 Тогда
			ЭтаФорма.Элементы.ЗадачиМне.ТекущаяСтрока = -1;
		ИначеЕсли ЭтаФорма.ЗадачиМнеТекущаяЗадача <> Неопределено 
			И НЕ ЭтаФорма.ЗадачиМнеТекущаяЗадача.Пустая() Тогда
			Задача = ЭтаФорма.ЗадачиМнеТекущаяЗадача;
			ЭтаФорма.ЗадачиМнеТекущаяЗадача = Неопределено;
			
			УстановитьТекущийОбъектВДеревеПоСсылке(
				ЭтаФорма.Элементы.ЗадачиМне, ЭтаФорма.ЗадачиМне, Задача, ЭтаФорма.ЗадачиМнеТекущийИндекс);
		Иначе
			// Выделить первую задачу в списке
			КоллекцияЗадач = ЭтаФорма.ЗадачиМне.ПолучитьЭлементы();
			Если КоллекцияЗадач.Количество() > 0 Тогда
				ЭтаФорма.Элементы.ЗадачиМне.ТекущаяСтрока = 
					КоллекцияЗадач[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьУзелДерева(УзелИсточник, УзелПриемник)

	НоваяСтрока = УзелПриемник.ПолучитьЭлементы().Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрока, УзелИсточник);

	Для Каждого ПодчиненнаяСтрока Из УзелИсточник.ПолучитьЭлементы() Цикл
		СкопироватьУзелДерева(ПодчиненнаяСтрока, НоваяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗадачМнеСервер()
	
	ДеревоЗадач = РеквизитФормыВЗначение("ЗадачиМне");
	ДеревоЗадач.Строки.Очистить();
	
	СформироватьДеревоЗадачМне(ДеревоЗадач);
	
	СформироватьГруппировкиЗадачМне(ДеревоЗадач);
	
	Если ПустаяСтрока(ЗадачиМнеСортироватьПо) Тогда
		ЗадачиМнеСортироватьПо = "СрокИсполнения";
		ЗадачиМнеНаправлениеСортировки = "Возр";
	КонецЕсли;
	
	ДеревоЗадач.Строки.Сортировать(
		ЗадачиМнеСортироватьПо + " " + ЗадачиМнеНаправлениеСортировки,
		Ложь);
	
	ЗначениеВДанныеФормы(ДеревоЗадач, ЗадачиМнеПолный);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьЗадачиМнеПоВиду(НовыйВидГруппировки)
	
	Если ЗадачиМнеВидГруппировки = НовыйВидГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеВидГруппировки = НовыйВидГруппировки;
	
	ПоказыватьОбластьГруппировки = ЗадачиМнеВидГруппировки <> "";
	
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьГруппировкиЗадачМне(ДеревоЗадач = Неопределено)
	
	Если ЗадачиМнеВидГруппировки = "Автор" Тогда
		СформироватьСписокАвторов(ДеревоЗадач);
	ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" Тогда
		СформироватьСписокПроектов(ДеревоЗадач);
	ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
		СформироватьСписокТочекМаршрута(ДеревоЗадач);
	ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" Тогда
		СформироватьСписокФлагов(ДеревоЗадач);
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево задач в списке задачи мне
&НаСервере
Процедура СформироватьДеревоЗадачМне(Дерево)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель,
		|	МИНИМУМ(ИсполнителиРолейИДелегаты.НастройкаДелегирования) КАК НастройкаДелегирования
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнителиРолейИДелегаты.РольПользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.ПредметСтрокой,
		|	ЗадачаИсполнителя.Проект,
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.ТекущийИсполнитель,
		|	ИсполнителиЗадач.НастройкаДелегирования КАК НастройкаДелегирования,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачиДляВыполнения.СостояниеВыполнения КАК СостояниеВыполнения
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|   %ОтборПоТочкеМаршрута%
		|;
		|
		|%2
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиСRLS.Ссылка,
		|	ЗадачиСRLS.Дата,
		|	ЗадачиСRLS.Наименование,
		|	ЗадачиСRLS.СрокИсполнения,
		|	ЗадачиСRLS.ПринятаКИсполнению,
		|	ЗадачиСRLS.Выполнена,
		|	ЗадачиСRLS.Автор,
		|	ЗадачиСRLS.БизнесПроцесс,
		|	ЗадачиСRLS.ТочкаМаршрута,
		|	ЗадачиСRLS.ПредметСтрокой,
		|	ЗадачиСRLS.Проект,
		|	ЗадачиСRLS.ТекущийИсполнитель,
		|	ВЫБОР
		|		КОГДА ЗадачиСRLS.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|			ТОГДА &ИмяГруппыБезПроекта
		|		ИНАЧЕ ЗадачиСRLS.Проект.Представление
		|	КОНЕЦ КАК ПредставлениеПроекта,
		|	ЗадачиСRLS.Исполнитель КАК Исполнитель,
		|	ИСТИНА КАК Показывать,
		|	ВЫБОР
		|		КОГДА ЗадачиСRLS.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|			ТОГДА ЗадачиСRLS.СрокИсполнения < &ТекущаяДата
		|		КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|			ТОГДА КОНЕЦПЕРИОДА(ЗадачиСRLS.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|	КОНЕЦ КАК Просрочена,
		|	ВЫБОР
		|		КОГДА ЗадачиСRLS.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиСRLS.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1 КАК Поле1
		|				ИЗ
		|					РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|						ПО
		|							ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|				ГДЕ
		|					ДочерниеБизнесПроцессы.СвязующаяЗадача = ЗадачиСRLS.Ссылка
		|					И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьАктивныеПроцессы,
		|	ВЫБОР
		|		КОГДА ЗадачиСRLS.ТекущийИсполнитель = &ТекущийПользователь
		|			ТОГДА -1
		|		КОГДА ЗадачиСRLS.ТекущийИсполнитель ССЫЛКА Справочник.ПолныеРоли
		|			И ЗадачиСRLS.НастройкаДелегирования = ЗНАЧЕНИЕ(Справочник.ДелегированиеПрав.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Картинка,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача,
		|	ЗадачиСRLS.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено) КАК ОшибкаПриВыполненииЗадачи,
		|	ЗадачиСRLS.СостояниеВыполнения КАК СостояниеВыполнения
		|ИЗ
		|	ЗадачиСRLS КАК ЗадачиСRLS
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиСRLS.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачиСRLS.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ЗадачиСRLS.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиМнеВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачиСRLS.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачиСRLS.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА 0
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|						И ЗадачиСRLS.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|						И КОНЕЦПЕРИОДА(ЗадачиСRLS.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|					ТОГДА 1
		|			КОНЕЦ), 0) КАК ЗадачиМнеПросроченные
		|ИЗ
		|	ЗадачиСRLS КАК ЗадачиСRLS";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
	Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'; en = 'Without project'"));
	Запрос.УстановитьПараметр("ИдентификаторОбъектовМетаданныхЗадачи", ИдентификаторОбъектовМетаданныхЗадачи);
	
	Если ИспользоватьОграниченияПравДоступа Тогда
		ИндексРезультата = 2;
		ИмяВТЗадачи = "Задачи";
		ОграничениеRLS = 
			"////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Задачи.Ссылка,
			|	Задачи.Дата,
			|	Задачи.Наименование,
			|	Задачи.СрокИсполнения,
			|	Задачи.ПринятаКИсполнению,
			|	Задачи.Выполнена,
			|	Задачи.Автор,
			|	Задачи.БизнесПроцесс,
			|	Задачи.ТочкаМаршрута,
			|	Задачи.ПредметСтрокой,
			|	Задачи.Проект,
			|	Задачи.Исполнитель,
			|	Задачи.ТекущийИсполнитель,
			|	Задачи.Важность,
			|	Задачи.СостояниеВыполнения,
			|	Задачи.НастройкаДелегирования
			|ПОМЕСТИТЬ ЗадачиСRLS
			|ИЗ
			|	Задачи КАК Задачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|			ПО УчастникиПроцессов.Участник = СоставСубъектовПравДоступа.Субъект
			|		ПО Задачи.БизнесПроцесс = УчастникиПроцессов.Процесс
			|ГДЕ
			|	СоставСубъектовПравДоступа.Пользователь = &ТекущийПользователь
			|	И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;";
	Иначе
		ИндексРезультата = 1;
		ИмяВТЗадачи = "ЗадачиСRLS";
		ОграничениеRLS = "";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяВТЗадачи,
		ОграничениеRLS);
		
	Если ЗначениеЗаполнено(ТочкаМаршрутаИзРабочегоСтолаРуководителя) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТочкеМаршрута%", "И ЗадачаИсполнителя.ТочкаМаршрута=&ТочкаМаршрута");
		Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаИзРабочегоСтолаРуководителя);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТочкеМаршрута%", "");
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗадач = Результат[ИндексРезультата + 1].Выгрузить();
	
	ЗадачиВДереве = Новый Соответствие;
	ВложенныеЗадачи = Новый Массив;
	
	// Заполнение корневых задач
	Для Каждого Строка Из ТаблицаЗадач Цикл
		Если ЗначениеЗаполнено(Строка.ГлавнаяЗадача) Тогда
			ВложенныеЗадачи.Добавить(Строка);
		Иначе
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);
			ЭтоКорневаяЗадача = Истина;
			ЗадачиВДереве.Вставить(Строка.Ссылка, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение вложенных задач
	Для Каждого СтрокаВложеннойЗадачи Из ВложенныеЗадачи Цикл
		СтрокаКорневойЗадачи = ЗадачиВДереве.Получить(СтрокаВложеннойЗадачи.ГлавнаяЗадача);
		Если СтрокаКорневойЗадачи = Неопределено Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокаКорневойЗадачи.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаВложеннойЗадачи);
		ЗадачиВДереве.Вставить(СтрокаВложеннойЗадачи.Ссылка, СтрокаДерева);
	КонецЦикла;
	
	// Заполнение статистики по задачам
	Выборка = Результат[ИндексРезультата + 2].Выбрать();
	Выборка.Следующий();
	
	УстановитьЗаголовок(
		Выборка.ЗадачиМнеНовые,
		Выборка.ЗадачиМнеПросроченные,
		Выборка.ЗадачиМнеВсего);
	
КонецПроцедуры

// Формирует список авторов при группировки по авторам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокАвторов(ДеревоЗадач)
	
	ТаблицаАвторы = РеквизитФормыВЗначение("ЗадачиМнеАвторы");
	
	ТаблицаАвторы.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Задачи.Автор,
			|	Пользователи.Представление КАК Представление,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО Задачи.Автор = Пользователи.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
			|ГДЕ
			|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
			|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	Задачи.Автор,
			|	Пользователи.Представление";
			
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаАвтора = ТаблицаАвторы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАвтора, Выборка);
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + СтрокаАвтора.Количество;
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаАвтора = ТаблицаАвторы.Найти(Задача.Автор, "Автор");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаАвтора = Неопределено Тогда
				СтрокаАвтора = ТаблицаАвторы.Добавить();
				СтрокаАвтора.Автор = Задача.Автор;
				СтрокаАвтора.Представление = Строка(Задача.Автор);
				СтрокаАвтора.Количество = КоличествоЭлементов;
			Иначе
				СтрокаАвтора.Количество = СтрокаАвтора.Количество 
				+ КоличествоЭлементов;
			КонецЕсли;
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + КоличествоЭлементов;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаАвторы.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаАвторы, "ЗадачиМнеАвторы");
	
КонецПроцедуры

// Формирует список проектов при группировки по проектам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокПроектов(ДеревоЗадач)
	
	ТаблицаПроекты = РеквизитФормыВЗначение("ЗадачиМнеПроекты");
	
	ТаблицаПроекты.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Задачи.Проект,
			|	ЕСТЬNULL(Проекты.Представление, &ИмяГруппыБезПроекта) КАК Представление,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
			|		ПО Задачи.Проект = Проекты.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
			|ГДЕ
			|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
			|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	Задачи.Проект,
			|	ЕСТЬNULL(Проекты.Представление, &ИмяГруппыБезПроекта)";
			
		Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'; en = 'Without project'"));
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаПроекта = ТаблицаПроекты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПроекта, Выборка);
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + СтрокаПроекта.Количество;
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаПроекта = ТаблицаПроекты.Найти(Задача.Проект, "Проект");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаПроекта = Неопределено Тогда
				СтрокаПроекта = ТаблицаПроекты.Добавить();
				СтрокаПроекта.Проект = Задача.Проект;
				СтрокаПроекта.Представление = Задача.ПредставлениеПроекта;
				СтрокаПроекта.Количество = КоличествоЭлементов;
			Иначе
				СтрокаПроекта.Количество = СтрокаПроекта.Количество 
					+ КоличествоЭлементов;
			КонецЕсли;		
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + КоличествоЭлементов;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПроекты.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаПроекты, "ЗадачиМнеПроекты");
	
КонецПроцедуры

// Формирует список точек маршрута при группировки по точке маршрута в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокТочекМаршрута(ДеревоЗадач)

	ТаблицаТочкиМаршрута = РеквизитФормыВЗначение("ЗадачиМнеТочкиМаршрута");
	
	ТаблицаТочкиМаршрута.Очистить();
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Задачи.ТочкаМаршрута,
			|	Задачи.ТочкаМаршрута.Представление КАК Представление,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
			|ГДЕ
			|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
			|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	Задачи.ТочкаМаршрута,
			|	Задачи.ТочкаМаршрута.Представление";
			
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТочкиМаршрута, Выборка);
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Найти(Задача.ТочкаМаршрута, "ТочкаМаршрута");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаТочкиМаршрута = Неопределено Тогда
				СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Добавить();
				СтрокаТочкиМаршрута.ТочкаМаршрута = Задача.ТочкаМаршрута;
				СтрокаТочкиМаршрута.Представление = ПредставлениеТочкиМаршрута(Задача);
				СтрокаТочкиМаршрута.Количество = КоличествоЭлементов;
			Иначе
				СтрокаТочкиМаршрута.Количество = СтрокаТочкиМаршрута.Количество 
					+ КоличествоЭлементов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаТочкиМаршрута.Сортировать("Представление Возр");

	ЗначениеВРеквизитФормы(ТаблицаТочкиМаршрута, "ЗадачиМнеТочкиМаршрута");
	
КонецПроцедуры

// Формирует список флагов при группировки по флагу в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокФлагов(ДеревоЗадач)
	
	ТаблицаФлагов = РеквизитФормыВЗначение("ЗадачиМнеФлаги");
	
	ТаблицаФлагов.Очистить();
	
	ПредставленияФлагов = Новый Соответствие();
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.ПустаяСсылка(), НСтр("ru = 'Без флага'; en = 'Without flag'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Красный, НСтр("ru = 'Красный'; en = 'Red'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Синий, НСтр("ru = 'Синий'; en = 'Blue'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Желтый, НСтр("ru = 'Желтый'; en = 'Yellow'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Зеленый, НСтр("ru = 'Зеленый'; en = 'Green'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Оранжевый, НСтр("ru = 'Оранжевый'; en = 'Orange'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Лиловый, НСтр("ru = 'Лиловый'; en = 'Purple'"));
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПоИсполнителю.Ссылка КАК Задача,
			|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
			|	ВЫБОР
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
			|			ТОГДА 1
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
			|			ТОГДА 2
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
			|			ТОГДА 3
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
			|			ТОГДА 4
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
			|			ТОГДА 5
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
			|			ТОГДА 6
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НомерФлага
			|ПОМЕСТИТЬ Задачи
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачиПоИсполнителю
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ЗадачиПоИсполнителю.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
			|		ПО ЗадачиПоИсполнителю.Ссылка = ФлагиОбъектов.Объект
			|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО ЗадачиПоИсполнителю.Ссылка = ЗадачиДляВыполнения.Задача
			|ГДЕ
			|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
			|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
			|	И ЗадачиПоИсполнителю.ПометкаУдаления = ЛОЖЬ
			|	И ЗадачиПоИсполнителю.ИсключенаИзПроцесса = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задачи.Задача) КАК Количество,
			|	Задачи.Флаг КАК Флаг,
			|	Задачи.НомерФлага
			|ИЗ
			|	Задачи КАК Задачи
			|
			|СГРУППИРОВАТЬ ПО
			|	Задачи.Флаг,
			|	Задачи.НомерФлага";
			
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицыФлагов = ТаблицаФлагов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФлагов, Выборка);
			СтрокаТаблицыФлагов.Представление = ПредставленияФлагов.Получить(Выборка.Флаг);
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаТаблицыФлагов = ТаблицаФлагов.Найти(Задача.Флаг, "Флаг");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаТаблицыФлагов = Неопределено Тогда
				СтрокаТаблицыФлагов = ТаблицаФлагов.Добавить();
				СтрокаТаблицыФлагов.Флаг = Задача.Флаг;
				
				СтрокаТаблицыФлагов.Представление = ПредставленияФлагов.Получить(Задача.Флаг);
				
				СтрокаТаблицыФлагов.Количество = КоличествоЭлементов;
				СтрокаТаблицыФлагов.НомерФлага = РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(Задача.Флаг);
			Иначе
				СтрокаТаблицыФлагов.Количество = СтрокаТаблицыФлагов.Количество 
					+ КоличествоЭлементов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаФлагов.Сортировать("НомерФлага Возр");

	ЗначениеВРеквизитФормы(ТаблицаФлагов, "ЗадачиМнеФлаги");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭлементовВУзлеДерева(Узел);
	
	Количество = 1;
	
	Для каждого Элемент Из Узел.Строки Цикл
		Количество = Количество + ПолучитьКоличествоЭлементовВУзлеДерева(Элемент);
	КонецЦикла; 
	
	Возврат Количество;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Задача)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Задача,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ЗадачиМнеТекущаяЗадача);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвойстваКоманд(СвойстваКоманд) Экспорт

	Для каждого Элемент Из СвойстваКоманд Цикл
		НайденнаяКоманда = Команды[Элемент.Ключ];
		Для каждого СвойствоКомандыИЗначение Из Элемент.Значение Цикл
			ИмяСвойства = СвойствоКомандыИЗначение.Ключ;
			ЗначениеСвойства = СвойствоКомандыИЗначение.Значение;
			
			НайденнаяКоманда[ИмяСвойства] = ЗначениеСвойства;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораРезультатУтверждения(ВидПроцесса)

	СписокВыбораРезультат = Новый СписокЗначений;
	ПредставлениеУтверждено = "";
	ПредставлениеНеУтверждено = "";
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		ПредставлениеУтверждено = НСтр("ru = 'Подписано'; en = 'Signed'");
		ПредставлениеНеУтверждено = НСтр("ru = 'Не подписано'; en = 'Not signed'");
	Иначе
		ПредставлениеУтверждено = НСтр("ru = 'Утверждено'; en = 'Confirmed'");
		ПредставлениеНеУтверждено = НСтр("ru = 'Не утверждено'; en = 'Not confirmed'");
	КонецЕсли;
		
	СписокВыбораРезультат.Добавить(Перечисления.РезультатыУтверждения.Утверждено, ПредставлениеУтверждено);
	СписокВыбораРезультат.Добавить(Перечисления.РезультатыУтверждения.НеУтверждено, ПредставлениеНеУтверждено);
	
	Возврат СписокВыбораРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТочкиМаршрута(Задача)

	Если Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Возврат НСтр("ru = 'Утвердить / Подписать'; en = 'Confirm / Sign'");
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат НСтр("ru = 'Ознакомиться с результатом утверждения / подписи'; en = 'Examine the confirmation / signing result'");
	Иначе
		Возврат Строка(Задача.ТочкаМаршрута);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Автообновление

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"Автообновление", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьРезультатВыполнения =
			Элементы.ЗадачиМне.ТекущиеДанные = Неопределено;
		ОбновитьСписокЗадачМне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЗадачиМнеТекущаяЗадача,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
	    ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЗадачиМнеТекущаяЗадача,
	ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПроцедурыИФункцииВыполненияЗадач

&НаСервере
Процедура ВыполнитьЗадачу(ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ДатаИсполнения") Тогда
		ПараметрыЗаписи.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	
	Если ЗначениеЗаполнено(ФактическийИсполнительЗадачи) Тогда
		ПараметрыЗаписи.Вставить("ФактическийИсполнительЗадачи", ФактическийИсполнительЗадачи);
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеДопРеквизитов(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьФоновоеВыполнениеЗадач
		И (Не ЭтоУзелВыполненияПроцесса
			Или ЗадачиМнеСостояниеВыполнения = ПредопределенноеЗначение(
				"Перечисление.СостоянияЗадачДляВыполнения.ПустаяСсылка")) Тогда
		
		НачатьТранзакцию();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ЗадачиМнеТекущаяЗадача);
			ЗадачаОбъект = ЗадачиМнеТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.РезультатВыполнения = РезультатВыполнения;
			
			РегистрыСведений.ЗадачиДляВыполнения.ДобавитьЗадачуДляФоновогоВыполнения(
				ЗадачаОбъект, ПараметрыЗаписи);
				
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект, "ПростаяЗапись");
			РазблокироватьДанныеДляРедактирования(ЗадачиМнеТекущаяЗадача);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами(ЗадачиМнеТекущаяЗадача, ПараметрыЗаписи);
	КонецЕсли;
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи = Неопределено)
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиентеПродолжение(
	Результат, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи <> Неопределено
		И ПараметрыЗаписи.Свойство("КлючеваяОперация") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			ПараметрыЗаписи.КлючеваяОперация);
		
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов(Элемент, Доступность)
	
	Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		
		Если Элемент = Элементы.Обработано
			И ЗначениеЗаполнено(ВедущаяЗадачаТекущейЗадачи) Тогда
			
			Элемент.Доступность = Ложь;
		Иначе
			Элемент.Доступность = Доступность;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		
		Для Каждого ДочернийЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьДоступностьЭлементов(ДочернийЭлемент, Доступность);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОповеститьПослеВыполненияЗадачи()
	
	БлокировкаКнопокВключена = Истина;
	УстановитьДоступностьЭлементов(Элементы.ГруппаВидыКнопокЗадачи, Ложь);
	ПодключитьОбработчикОжидания("СнятьБлокировкуСКнопокВыполненияЗадач", 2, Истина); // 2 сек
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
		ЗадачиМнеТекущаяЗадача, "ДатаИсполнения");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеВводаВремени",
		ЭтотОбъект);

	УчетВремениКлиент.ДобавитьВОтчетПослеВыполненияЗадачи(ОпцияИспользоватьУчетВремени,
		РеквизитыЗадачи.ДатаИсполнения, ЗадачиМнеТекущаяЗадача, ВключенХронометраж, 
		ДатаНачалаХронометража, ДатаКонцаХронометража,
		ВидыРабот, СпособУказанияВремени, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьБлокировкуСКнопокВыполненияЗадач()
	
	БлокировкаКнопокВключена = Ложь;
	УстановитьДоступностьЭлементов(Элементы.ГруппаВидыКнопокЗадачи, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеВводаВремени(Результат, Параметры) Экспорт 

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'; en = 'Execution:'"),
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена", ЗадачиМнеТекущаяЗадача);
	Оповестить("ЗадачаИзменена", ЗадачиМнеТекущаяЗадача, ЭтаФорма);

КонецПроцедуры

// Процесс Исполнение

&НаСервереБезКонтекста
Функция ЕстьНевыполненныеЗадачиИсполнителей(ЗадачиМнеТекущаяЗадача)
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", РеквизитыЗадачи.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ЗадачаИсполненоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ИсполнениеВыполнениеКомандыИсполнено");
		
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнительПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ИсполнениеВыполнениеКомандыИсполнено");
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнениеПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров",
		ЭтотОбъект);

	ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры	

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров(Результат, Параметры) Экспорт

	Если Результат = Неопределено
		Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
	КонецЕсли;
	
	Результат.Удалить("КодВозврата");
	РезультатИзмененияПараметровПроцесса = Результат;
	
	ПодключитьОбработчикОжидания(
		"ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров_ВыполнитьЗадачуОтложено", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров_ВыполнитьЗадачуОтложено()
	
	Если ТипЗнч(РезультатИзмененияПараметровПроцесса) = Тип("Структура") Тогда
		ПараметрыЗаписи = РезультатИзмененияПараметровПроцесса;
	Иначе
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Комплексный процесс

&НаКлиенте
Процедура ЗадачаКомплексныйПроцессПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Ознакомления

&НаКлиенте
Процедура ЗадачаОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОзнакомлениеВыполнениеКомандыОзнакомился");
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Поручение

&НаКлиенте
Процедура ЗадачаПоручениеПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьПоручениеПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ОтправленоНаДоработку", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправленоНаДоработку", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Приглашение

&НаКлиенте
Процедура ЗадачаПринятоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ПриглашениеВыполнениеКомандыПринято");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатПриглашения", 
		ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.Принято"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашениеПринято", Предмет);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПринятоЗавершениеВопросаОЗанятостиПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("ЗанятостьИсполнителей", Истина);
	ЗадачаПринято(ДополнительныеПараметры.Команда, ДополнительныеПараметры.ОбработанныеВопросы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринятоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ПриглашениеВыполнениеКомандыНеПринято");
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить(
		"РезультатПриглашения", 
		ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.НеПринято"));

	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашениеОтклонено", Предмет);
	КонецЦикла;
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПовторитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	Результат.Вставить("ПовторитьПриглашение", Истина);
	Результат.Вставить("УникальныйИдентификаторФормыИзмененияПараметров",
		ДополнительныеПараметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(Результат);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашенияОтправлены", Предмет);
	КонецЦикла;
		
	ОповеститьОбИзменении(ЗадачиМнеТекущаяЗадача);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПослеВопросаОбИсключенииУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеПодтвердитьПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ПодтвердитьПриглашение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Если РезультатПриглашенияЗадачи = ПредопределенноеЗначение(
		"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда 
		Оповестить("ИсключеныУчастники", ЗадачиМнеТекущаяЗадача);
	КонецЕсли;		
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложитьПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтложитьПриглашение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПоручениеВыполненоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ПоручениеВыполнениеКомандыВыполнено");
	
	ВыполнитьЗадачу();	
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПоручениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПоручениеВыполнить"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПоручениеПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПроверитьПоручение"));
	
КонецПроцедуры

// Процесс Рассмотрение

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		МассивРезолюций = Новый Массив;
		МассивРезолюцийДляПодписания = Новый Массив;
		МассивАдресов = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		
		ПредметыЗадачи = ДеревоПриложений.ПолучитьЭлементы();
		
		Для Каждого Предмет Из ПредметыЗадачи Цикл
			Если ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				
				СтруктураРезолюцииДляПодписания = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				СтруктураРезолюцииДляПодписания.Документ = Предмет.Ссылка;
				СтруктураРезолюцииДляПодписания.ДатаРезолюции = ДатаФормированияРезолюций;
				СтруктураРезолюцииДляПодписания.АвторРезолюции = ЗадачиМнеТекущийИсполнитель;
				СтруктураРезолюцииДляПодписания.ВнесРезолюцию = ЗадачиМнеТекущийИсполнитель;
				
				Если ЗаполнениеПоШаблонуРезолюции Тогда 
					СтруктураРезолюцииДляПодписания.ТекстРезолюции = ТекстРезолюции;
				Иначе 
					СтруктураРезолюцииДляПодписания.ТекстРезолюции = РезультатВыполнения;
				КонецЕсли;
				
				МассивРезолюцийДляПодписания.Добавить(СтруктураРезолюцииДляПодписания);
				
				СтруктураРезолюции = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				ЗаполнитьЗначенияСвойств(СтруктураРезолюции, СтруктураРезолюцииДляПодписания);
				СтруктураРезолюции.Вставить(
					"Наименование",
					РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Предмет.Ссылка));
				
				МассивРезолюций.Добавить(СтруктураРезолюции);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРезолюцийДляПодписания.Количество() > 0 Тогда
			
			Заголовки = Новый Структура("Операция");
			Заголовки.Операция = НСтр("ru = 'Подписать резолюции предметов'; en = 'Sign subject resolutions'");
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП",
					ЭтотОбъект,
					ДатаФормированияРезолюций);
				
			РаботаСЭПКлиент.Подписать(МассивРезолюцийДляПодписания, УникальныйИдентификатор, ОписаниеОповещения, Заголовки);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ЗаполнениеПоШаблонуРезолюции Тогда 
		//Текст шаблона резолюции вставляем только после прохождения всех проверок.
		РезультатВыполнения = ТекстРезолюции;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РассмотрениеВыполнениеКомандыВыполнено");
	
	ПараметрыЗаписи = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП(
	Результат, ДатаФормированияРезолюций) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	//Текст шаблона резолюции вставляем только после прохождения всех проверок.
	Если ЗаполнениеПоШаблонуРезолюции Тогда 
		РезультатВыполнения = ТекстРезолюции;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РассмотрениеВыполнениеКомандыВыполнено");
	
	ПодписиКРезолюциямПредметов = Новый Структура;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из Результат.НаборДанных Цикл
		
		Если Не ДанныеДляЗанесенияВРегистр.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		Резолюция = ДанныеДляЗанесенияВРегистр.Представление;
		
		Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Предмет_%1_%2",
			СтрЗаменить(Строка(Резолюция.Документ.УникальныйИдентификатор()), "-", ""),
			Формат(Резолюция.ДатаРезолюции, "ДФ=yyyyMMddHHmmss"));
		
		СвойстваПодписи = ДанныеДляЗанесенияВРегистр.СвойстваПодписи;	
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли; 
			
		ПодписиКРезолюциямПредметов.Вставить(Ключ, СвойстваПодписи);
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПараметрыЗаписи.Вставить("ДатаИсполнения", ДатаФормированияРезолюций);
	ПараметрыЗаписи.Вставить("ПодписиКРезолюциямПредметов", ПодписиКРезолюциямПредметов);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРассмотренияЗадачи(ВариантРассмотрения)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ЗадачиМнеТекущаяЗадача);
	ОткрытаяФорма = ОткрытьФорму(
		"БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя", ПараметрыОткрытия);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ПараметрыОповещения.Вставить(
		"ВариантРассмотрения", 
		ВариантРассмотрения);
	Оповестить("ПерейтиКРезультатуРассмотренияЗадачи", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

// Процесс Регистрация

&НаКлиенте
Процедура ЗадачаЗарегистрированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"РегистрацияВыполнениеКомандыЗарегистрировано");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РезультатРегистрации",
		ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.Зарегистрировано"));
		
	ЗарегистрироватьПредметыНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПредметыНаКлиенте(ПараметрыЗаписи);
	
	ОчиститьСообщения();
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача, ТипыДокументов, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(Предмет);
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Нумератор) Тогда // ручная нумерация
			
			НайденПредмет = Ложь;
			Для Каждого Строка Из РучныеНомераДокументов Цикл
				Если Строка.Предмет = Предмет Тогда 
					НайденПредмет = Истина;
					Прервать;;
				КонецЕсли;	
			КонецЦикла;	
			Если НайденПредмет Тогда 
				Продолжить;
			КонецЕсли;	
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Предмет", Предмет);
			ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЗарегистрироватьПредметыПослеУказанияРегистрационногоНомера",
				ЭтотОбъект,
				ПараметрыОповещения);
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Укажите регистрационный номер для документа ""%1""'; en = 'Specify the registration number for document ""%1""'"),
				Строка(Предмет));
				
			РегистрационныйНомер = "";	
			ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(
				РегистрационныйНомер, 
				ТекстСообщения, 
				"", 
				30,
				ОписаниеОповещения);
				
			Возврат;
			
		Иначе
			
			Если СоздатьСвязьДляНумерации Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для регистрации документа необходимо создать связь ""%1""'; en = 'Relation ""%1"" must be established when registering the document'"),
					ТипСвязиНумератора);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДеревоПриложений");
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Отказ = Ложь; СообщениеОбОшибке = "";
	ЗарегистрироватьПредметыНаСервере(Отказ, ПараметрыЗаписи);
	
	Если Отказ = Ложь Тогда 
		Для Каждого Предмет из ОсновныеПредметы Цикл
			ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
		КонецЦикла;
		
		ВыполнитьЗадачу(ПараметрыЗаписи);
		ОповеститьПослеВыполненияЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПредметыПослеУказанияРегистрационногоНомера(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат);
	Если Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
		Возврат;
	КонецЕсли;	
	
	НоваяСтрока = РучныеНомераДокументов.Добавить();
	НоваяСтрока.Предмет = ПараметрыОповещения.Предмет;
	НоваяСтрока.РегистрационныйНомер = РегистрационныйНомер;
	
	ЗарегистрироватьПредметыНаКлиенте(ПараметрыОповещения.ПараметрыЗаписи); 
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПредметыНаСервере(Отказ, ПараметрыЗаписи)
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача, ТипыДокументов, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
			Продолжить;
		КонецЕсли;
		
		РегистрационныйНомер = "";
		Для Каждого Строка Из РучныеНомераДокументов Цикл
			Если Строка.Предмет = Предмет Тогда 
				РегистрационныйНомер = Строка.РегистрационныйНомер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗапомнимРегистрационныйНомер = РегистрационныйНомер;
		
		Если Не Делопроизводство.ПредметМожетБытьЗарегистрирован(Предмет, РегистрационныйНомер) Тогда 
			Отказ = Истина;
			
			// Очистим запомненнное занчение, т.к. этот номер не уникален
			Если ЗначениеЗаполнено(ЗапомнимРегистрационныйНомер) 
				И Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
				Для Каждого Строка Из РучныеНомераДокументов Цикл
					Если Строка.Предмет = Предмет Тогда 
						РучныеНомераДокументов.Удалить(Строка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		Если Не Делопроизводство.ЗарегистрироватьПредмет(Предмет, СообщениеОбОшибке, РегистрационныйНомер) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,, "ДеревоПриложений");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			ПользователиКлиентСервер.ТекущийПользователь(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
			
		Делопроизводство.ЗаписатьСостояниеДокумента(Предмет, 
			СтруктураСостояния.Период, 
			СтруктураСостояния.Состояние, 
			СтруктураСостояния.Установил);
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"РегистрацияВыполнениеКомандыНеЗарегистрировано");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РезультатРегистрации",
		ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.НеЗарегистрировано"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторитьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	РезультатИзмененияПараметровПроцесса = Результат;
	
	ПодключитьОбработчикОжидания("ЗадачаРегистрацияПовторить_ВыполнитьЗадачуОтложено", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторить_ВыполнитьЗадачуОтложено()
	
	Если ТипЗнч(РезультатИзмененияПараметровПроцесса) = Тип("Структура") Тогда
		РезультатИзмененияПараметровПроцесса.Вставить("ПовторитьРегистрацию", Истина);
		ПараметрыЗаписи = РезультатИзмененияПараметровПроцесса;
	Иначе
		ПараметрыЗаписи = Новый Структура;	
		ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Истина);
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРегистрацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаЗарегистрировать"));
	
КонецПроцедуры

// Процесс РешениеВопросовВыполненияЗадач

&НаКлиенте
Процедура ЗадачаРешениеВопросовПеренестиПродолжение(Результат, ДопПараметры) Экспорт 

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПереносСрока", Истина);
	ПараметрыЗаписи.Вставить("НовыйСрок", НовыйСрок);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Оповестить("ПереносСрокаИсполненияПроцесса", БизнесПроцессПредметаРассмотрения, ЭтаФорма);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Согласование

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы(
	Результат, РезультатСогласования) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи",
			ЭтотОбъект,
			РезультатСогласования);
			
	РаботаСВизамиСогласованияКлиент.ПроверитьВизуИсполнителяЗадачи(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи(
	Результат, РезультатСогласования) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		РезультатСогласованияДляПодписи = 
			?(РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"),
				ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"),
				РезультатСогласования);
		
		МассивВизДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
				
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				
				СтруктураВизыДляПодписания = РаботаСВизамиСогласованияКлиент.ПолучитьСтруктуруВизДляПодписания();
				СтруктураВизыДляПодписания.Документ = Предмет;
				СтруктураВизыДляПодписания.ДатаИсполнения = ДатаФормированияРезолюций;
				СтруктураВизыДляПодписания.РезультатСогласования = РезультатСогласованияДляПодписи;
				СтруктураВизыДляПодписания.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
				
				МассивВизДляПодписания.Добавить(СтруктураВизыДляПодписания);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВизДляПодписания.Количество() > 0 Тогда
			
			Заголовки = Новый Структура("Операция");
			
			Если МассивВизДляПодписания.Количество() = 1 Тогда
				Заголовки.Операция = НСтр("ru = 'Подпись визы согласования'; en = 'Singature of endorsement'");
			Иначе
				Заголовки.Операция = НСтр("ru = 'Подпись виз согласования'; en = 'Singature of endorsements'");
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ДатаФормированияРезолюций", ДатаФормированияРезолюций);
			ПараметрыОповещения.Вставить("ОсновныеПредметы", ОсновныеПредметы);
			ПараметрыОповещения.Вставить("РезультатСогласования", РезультатСогласования);
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП",
					ЭтотОбъект,
					ПараметрыОповещения);
			
			РаботаСЭПКлиент.Подписать(МассивВизДляПодписания, УникальныйИдентификатор, ОписаниеОповещения, Заголовки);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласовано");
			
	ИначеЕсли РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласованоСЗамечаниями");
			
	ИначеЕсли РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыНеСогласовано");
			
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", 
		РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП(
	Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласовано");
			
	ИначеЕсли Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласованоСЗамечаниями");
			
	ИначеЕсли Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыНеСогласовано");
			
	КонецЕсли;
	
	ПодписиКВизамСогласования = Новый СписокЗначений;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из Результат.НаборДанных Цикл
		
		Если Не ДанныеДляЗанесенияВРегистр.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДляЗанесенияВРегистр.СвойстваПодписи) = Тип("Структура") Тогда
			
			ДанныеДляЗанесенияВРегистр.СвойстваПодписи.Вставить("ОбъектСсылка", ДанныеДляЗанесенияВРегистр.Представление);
			ПодписиКВизамСогласования.Добавить(ДанныеДляЗанесенияВРегистр.СвойстваПодписи);
			
		ИначеЕсли ТипЗнч(ДанныеДляЗанесенияВРегистр.СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(ДанныеДляЗанесенияВРегистр.СвойстваПодписи) Тогда	
			
			СвойстваПодписиСтруктура = ПолучитьИзВременногоХранилища(ДанныеДляЗанесенияВРегистр.СвойстваПодписи);
			Если ТипЗнч(СвойстваПодписиСтруктура) = Тип("Структура") Тогда
				СвойстваПодписиСтруктура.Вставить("ОбъектСсылка", ДанныеДляЗанесенияВРегистр.Представление);
				ПодписиКВизамСогласования.Добавить(СвойстваПодписиСтруктура);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ПодписиКВизамСогласования", ПодписиКВизамСогласования);
			
	ПараметрыЗаписи.Вставить(
		"ДатаИсполнения", Параметры.ДатаФормированияРезолюций);
		
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", Параметры.РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из Параметры.ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровСогласования(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	Результат.Вставить("ПовторитьСогласование", Истина);
	Результат.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(Результат);
		
	ОповеститьОбИзменении(ЗадачиМнеТекущаяЗадача);
	
	ИнформацияОЗадаче = Новый Структура;
	ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
	ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
	Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Утверждение

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ОсновныеПредметы = МультипредметностьКлиентСервер.
			ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
		
		МассивПредметовДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
		
		Для Каждого Предмет из ОсновныеПредметы Цикл
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				
				МассивПредметовДляПодписания.Добавить(Предмет);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПредметовДляПодписания.Количество() > 0 Тогда
			
			Заголовки = Новый Структура("Операция");
			
			Если МассивПредметовДляПодписания.Количество() = 1 Тогда
				Заголовки.Операция = НСтр("ru = 'Подпись предмета'; en = 'Singature of subject'");
			Иначе
				Заголовки.Операция = НСтр("ru = 'Подпись предметов'; en = 'Singature of subjects'");
			КонецЕсли;
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП",
					ЭтотОбъект);
			
			РаботаСЭПКлиент.Подписать(МассивПредметовДляПодписания, УникальныйИдентификатор, ОписаниеОповещения, Заголовки);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"УтверждениеВыполнениеКомандыУтверждено");

	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП(
	Результат, Параметры) Экспорт
	
	Если НЕ Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"УтверждениеВыполнениеКомандыУтверждено");
	
	ПараметрыЗаписи = Новый Структура;
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Для Каждого Данные Из Результат.НаборДанных Цикл
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		ПодписанныеДанные = Новый Структура;
		ПодписанныеДанные.Вставить("ПодписанныйОбъект", Данные.Представление);
		
		СвойстваПодписи = Данные.СвойстваПодписи;
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли; 
		ПодписанныеДанные.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		МассивДанныхДляЗанесенияВРегистр.Добавить(ПодписанныеДанные);
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить(
		"МассивДанныхДляЗанесенияВРегистр",
		МассивДанныхДляЗанесенияВРегистр);
	ПараметрыЗаписи.Вставить(
		"МассивАдресов",
		МассивАдресов);
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровУтверждения(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	Результат.Вставить("ПовторитьУтверждение", Истина);
	Результат.Вставить("УникальныйИдентификаторФормыИзмененияПараметров",
		Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(Результат);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПриложений

&НаКлиенте
Процедура ЗаполнитьДеревоПриложений(ЭлементыДерева, МассивПриложений)
	
	Для Каждого ЭлементПриложение Из МассивПриложений Цикл
		
		СтрокаПредмета = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредмета, ЭлементПриложение);	
		
		Для Каждого ДочернееПриложение Из ЭлементПриложение.ДочерниеЭлементы Цикл
			Строка = СтрокаПредмета.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ДочернееПриложение);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПриложений()
	
	ТекущаяСтрокаВДереве = Неопределено;
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
	КонецЕсли;	
		
	ОбновитьДеревоПриложенийСервер();
	
	Если ТекущаяСтрокаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСтрокаВДереве);
	КонецЕсли;	
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений,
		ДеревоПриложений.ПолучитьЭлементы().Количество());
	
	Если ДеревоПриложений.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы;
	Иначе
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПриложенийСервер()
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьДеревоПриложенийПоПредметам(ЭтаФорма, ЗадачиМнеТекущаяЗадача.Предметы);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоПриложенийДобавлениеНаКлиенте(Предмет = Неопределено)

	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	НовыйИмяПредмета = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьПредметПродолжение",
		ЭтотОбъект,
		Новый Структура);

	ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
		НовыйИмяПредмета, Предмет,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
// Возвращает Истина - предмет успешно добавлен, или Ложь - не удалось установить предмет.
// СообщениеОбОшибке - сообщение об ошибке, если предмет установить не удалось.
//
Процедура ДобавитьПредметЗадачи(
	Форма,
	Задача,
	СообщениеОбОшибке = Неопределено,
	ИмяПредмета = Неопределено,
	Предмет = Неопределено,
	СтандартнаяОбработка = Истина,
	ОписаниеОповещения)
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Задача, 
		"БизнесПроцесс, БизнесПроцесс.ВедущаяЗадача");
	
	СообщениеОбОшибке = "";
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("БизнесПроцесс", РеквизитыЗадачи.БизнесПроцесс);
	ПараметрыОткрытия.Вставить("ПроверкаЗаполнения", Истина);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	
	Если ЗначениеЗаполнено(ИмяПредмета) Тогда
		РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый");
	Иначе
		РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный");
	КонецЕсли;
	ПараметрыОткрытия.Вставить("РольПредмета", РольПредмета);
	
	Если ИмяПредмета <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИмяПредмета", ИмяПредмета);
	КонецЕсли;
	СписокИменПредметов = Новый СписокЗначений;
	МассивВидов = Новый Массив;
	ПолучитьМассивИменПредметовОбъекта(ДеревоПриложений.ПолучитьЭлементы(), МассивВидов);
	СписокИменПредметов.ЗагрузитьЗначения(МассивВидов);
	ПараметрыОткрытия.Вставить("ИменаПредметов", СписокИменПредметов);
	
	Если Предмет = Неопределено Тогда
		ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
		
		Если Не ЗначениеЗаполнено(ИмяПредмета) Тогда
			ПараметрыОткрытия.Вставить("НеОтображатьФайлы", Истина);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(РеквизитыЗадачи.БизнесПроцесс)
			Или МультипредметностьКлиентСервер.ЭтоПроцессОбработкиДокументов(РеквизитыЗадачи.БизнесПроцесс)
			Или МультипредметностьКлиентСервер.ЭтоПроцессРассмотрения(РеквизитыЗадачи.БизнесПроцесс)
			Или (РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
				И ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцессВедущаяЗадача)) Тогда
			
			ИмяФормыВыбораПредмета = "Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках";
		Иначе
			Если РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать() Тогда
				ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайлаСоСканера";
			Иначе
				ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайла";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаБыстрый";
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ПараметрыОбработчика.Вставить("ИмяПредмета", ИмяПредмета);
	ПараметрыОбработчика.Вставить("Предмет", Предмет);
	ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОбработчика.Вставить("СписокИменПредметов", СписокИменПредметов);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ДобавитьПредметЗадачиПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	РезультатОткрытия = ОткрытьФорму(
		ИмяФормыВыбораПредмета,
		ПараметрыОткрытия,,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметЗадачиПродолжение(РезультатОткрытия, Параметры) Экспорт 
	
	ТипРезультатаОткрытия = ТипЗнч(РезультатОткрытия);
	
	Если ТипРезультатаОткрытия <> Тип("СправочникСсылка.Файлы")
		И ТипРезультатаОткрытия <> Тип("Структура")
		И ТипРезультатаОткрытия <> Тип("Массив") Тогда
		
		// Предмет не выбран
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	ИмяПредмета = Параметры.ИмяПредмета;
	СписокИменПредметов = Параметры.СписокИменПредметов;
	
	Если ТипЗнч(РезультатОткрытия) = Тип("Структура") Тогда
		
		Если ИмяПредмета = Неопределено Тогда
			ИмяПредмета = РезультатОткрытия.ИмяПредмета;
		КонецЕсли;
		
		Попытка
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ЗадачиМнеТекущаяЗадача,
				УникальныйИдентификатор,
				РезультатОткрытия.ИмяПредмета,
				РезультатОткрытия.Предмет, 
				Ложь);
			
		Исключение
			Если ИмяПредмета = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось добавить предмет в задачу:
				|%1';
				|en = 'Could not add subject to task:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Иначе
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить предмет в задаче:
				|%1';
				|en = 'Could not set subject to task:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		
		Для Каждого Результат Из РезультатОткрытия Цикл
			Попытка
				МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
					ЗадачиМнеТекущаяЗадача,
					УникальныйИдентификатор,
					Результат.ИмяПредмета,
					Результат.Предмет, 
					Ложь);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить предмет в задаче:
					|%1';
					|en = 'Could not set subject to task:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
	ИначеЕсли ТипРезультатаОткрытия = Тип("СправочникСсылка.Файлы") Тогда
		
		Попытка
			
			Если Параметры.ИмяПредмета = Неопределено Тогда
				ИмяПредмета = МультипредметностьВызовСервера.
					ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(РезультатОткрытия, СписокИменПредметов);
			Иначе
				ИмяПредмета = Параметры.ИмяПредмета;
			КонецЕсли;
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ЗадачиМнеТекущаяЗадача,
				УникальныйИдентификатор,
				ИмяПредмета,
				РезультатОткрытия,
				Ложь);
			
		Исключение
			
			СообщениеОбОшибке = "";
			
			Если Параметры.ИмяПредмета = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось добавить предмет в задачу:
					|%1';
					|en = 'Could not add subject to task:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			Если Параметры.ОписаниеОповещения <> Неопределено Тогда
				Параметры.ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
				ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
			КонецЕсли;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметПродолжение(Результат, Параметры) Экспорт 

	Если Результат Тогда 
		ОбновитьДеревоПриложений();
	Иначе
		Если Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Параметры.СообщениеОбОшибке,,
				"ДеревоПриложений");
		Иначе
			ПоказатьПредупреждение(, Параметры.СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен предметов объекта (процесса, шаблона или задачи)
//
&НаКлиенте
Процедура ПолучитьМассивИменПредметовОбъекта(Элементы, МассивВидов)
	
	Для Каждого СтрокаПредмета Из Элементы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
			МассивВидов.Добавить(СтрокаПредмета.ИмяПредмета);
		КонецЕсли;
		
		ПолучитьМассивИменПредметовОбъекта(СтрокаПредмета.ПолучитьЭлементы(), МассивВидов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиентеПродолжение(Результат, ВыделенныеСтрокиПредметов) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	
	ИменаУдаляемыхПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из ВыделенныеСтрокиПредметов Цикл
		Если ВыделеннаяСтр.ДоступноУдаление Тогда
			ИменаУдаляемыхПредметов.Добавить(ВыделеннаяСтр.ИмяПредмета);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаУдаляемыхПредметов.Количество() = 0 Тогда
		
		КоличествоВыделенныхСтрок = ВыделенныеСтрокиПредметов.Количество();
		Если КоличествоВыделенныхСтрок = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Удалить текущий предмет можно только в карточке процесса.'; en = 'The current subject can be deleted in the process form only.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Удалить выделенные предметы можно только в карточке процесса.'; en = 'Selected subjects can be deleted in the process form only.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	Если Не УдалитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке, ИменаУдаляемыхПредметов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПриложений();
	
КонецПроцедуры

// Возвращает Истина - предмет успешно удален, или Ложь - не удалось удалить предмет.
//
&НаКлиенте
Функция УдалитьПредметЗадачи(Форма, Задача, СообщениеОбОшибке = Неопределено, ИменаПредметов)
	
	СообщениеОбОшибке = "";

	
	ПометкаУдаления = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Задача, "ПометкаУдаления");
	
	Если ПометкаУдаления Тогда
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя удалять предметы из помеченной на удаление задачи.'; en = 'It is not possible to delete subjects from tasks marked for deletion.'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Нельзя очищать предметы в помеченной на удаление задаче.'; en = 'It is not possible to clear subjects of tasks marked for deletion.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ПредметыЗадачи = Новый Массив;
		
		Для Каждого ИмяПредмета Из ИменаПредметов Цикл
			Предмет = Новый Структура();
			Предмет.Вставить("ИмяПредмета", ИмяПредмета);
			Предмет.Вставить("Предмет", Неопределено);
			
			ПредметыЗадачи.Добавить(Предмет);
		КонецЦикла;
		
		МультипредметностьВызовСервера.ИзменитьПредметыКорневогоБизнесПроцесса(
			Задача,
			Форма.УникальныйИдентификатор,
			ПредметыЗадачи,

			Истина);
			
	Исключение
		
		Если ИменаПредметов.Количество() = 1 Тогда
			ПредставлениеПредметов = НСтр("ru='предмет'; en = 'subject'");
		Иначе
			ПредставлениеПредметов = НСтр("ru='предметы'; en = 'subjects'");
		КонецЕсли;
		
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить %1 из задачи:
					|%2';
					|en = 'Could not delete %1 from task:
					|%2'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Иначе
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить %1 в задаче:
					|%1';
					|en = 'Could not clear %1 in task:
					|%1'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
				
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуПредмета()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Ссылка);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
			И ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) Тогда
			
			ОчиститьСообщения();
			СообщениеОбОшибке = "";
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДобавитьПредметПродолжение",
				ЭтотОбъект,
				Новый Структура);
			
			ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка,, ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Файлы

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);	
	Иначе	
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Копирование = Ложь)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = ЗадачиМнеТекущийБизнесПроцесс;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
				КраткоеПредставлениеОшибки(Инфо)));
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьТаблицыФайлов(Форма)
	
	КоличествоФайлов = КоличествоФайлов(
		Форма.ЗадачиМнеТекущийБизнесПроцесс, Форма.ОтображатьУдаленныеПриложения);
		
	Если КоличествоФайлов > 0 Тогда
		Форма.Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Форма.Элементы.ГруппаОписаниеИФайлы;
	Иначе
		Форма.Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Форма.Элементы.ГруппаОписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоФайлов(ВладелецФайла, ОтображатьУдаленные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТестЦентр

&НаКлиенте
Функция ТЦСписокПриАктивизацииСтроки() Экспорт
	
	СписокПриАктивизацииСтроки(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦПринятьКИсполнению() Экспорт
	
	ПринятьКИсполнению(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦСгруппироватьПоТочкеМаршрута() Экспорт
	
	СгруппироватьЗадачиМнеПоВиду("ТочкаМаршрута");
	Возврат Истина;
	
КонецФункции

#Область КомандыЗадачиИсполнение

#Область ТочкаМаршрутаИсполнить

&НаКлиенте
Функция ТЦЗадачаИсполнено() Экспорт
	
	ЗадачаИсполнено(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаКонтролировать

&НаКлиенте
Функция ТЦЗадачаПроконтролировано() Экспорт
	
	ЗадачаПроконтролировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОтветственноеИсполнение

&НаКлиенте
Функция ТЦЗадачаИсполненоОтвИсполнитель() Экспорт
	
	ЗадачаИсполненоОтвИсполнитель(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаПроверить

&НаКлиенте
Функция ТЦЗадачаЗавершитьИсполнение() Экспорт
	
	ЗадачаЗавершитьИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаВернутьНаДоработкуИсполнение() Экспорт
	
	ЗадачаВернутьНаДоработкуИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиСогласование

#Область ТочкаМаршрутаСогласовать

&НаКлиенте
Функция ТЦЗадачаСогласовано() Экспорт
	
	ЗадачаСогласовано(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаСогласованоСЗамечаниями() Экспорт
	
	ЗадачаСогласованоСЗамечаниями(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеСогласовано() Экспорт
	
	ЗадачаНеСогласовано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаСогласованиеОзнакомился() Экспорт
	
	ЗадачаСогласованиеОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗавершитьСогласование() Экспорт
	
	ЗавершитьСогласование(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаПовторить() Экспорт
	
	ЗадачаПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиОзнакомление

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаОзнакомился() Экспорт
	
	ЗадачаОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиУтверждение

#Область ТочкаМаршрутаУтвердить

&НаКлиенте
Функция ТЦЗадачаУтверждено() Экспорт
	
	ЗадачаУтверждено(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеУтверждено() Экспорт
	
	ЗадачаНеУтверждено(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаУтверждениеОзнакомился() Экспорт
	
	ЗадачаУтверждениеОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗавершитьУтверждение() Экспорт
	
	ЗавершитьУтверждение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаУтверждениеПовторить() Экспорт
	
	ЗадачаУтверждениеПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиРассмотрение

#Область ТочкаМаршрутаРассмотреть

&НаКлиенте
Функция ТЦЗадачаРассмотрено() Экспорт
	
	ЗадачаРассмотрено(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРассмотреноНаИсполнение() Экспорт
	
	ЗадачаРассмотреноНаИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРассмотреноНаОзнакомление() Экспорт
	
	ЗадачаРассмотреноНаОзнакомление(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаОбработано() Экспорт
	
	ЗадачаРассмотрениеОбработано(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНаправитьНаИсполнение() Экспорт
	
	ЗадачаРассмотрениеНаправитьНаИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРассмотрениеНаправитьНаОзнакомление() Экспорт
	
	ЗадачаРассмотрениеНаправитьНаОзнакомление(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиПриглашение

#Область ТочкаМаршрутаПригласить

&НаКлиенте
Функция ТЦЗадачаПринято() Экспорт
	
	ЗадачаПринято(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеПринято() Экспорт
	
	ЗадачаНеПринято(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаПриглашениеПодтвердить() Экспорт
	
	ЗадачаПриглашениеПодтвердить(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаПриглашениеПовторить() Экспорт
	
	ЗадачаПриглашениеПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаПриглашениеОтложить() Экспорт
	
	ЗадачаПриглашениеОтложить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОповестить

&НаКлиенте
Функция ТЦЗадачаПриглашениеОзнакомился() Экспорт
	
	ЗадачаПриглашениеОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиРегистрация

#Область ТочкаМаршрутаЗарегистрировать

&НаКлиенте
Функция ТЦЗадачаЗарегистрировано() Экспорт
	
	ЗадачаЗарегистрировано(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеЗарегистрировано() Экспорт
	
	ЗадачаНеЗарегистрировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаРегистрацияОзнакомился() Экспорт
	
	ЗадачаРегистрацияОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРегистрацияПовторить() Экспорт
	
	ЗадачаРегистрацияПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиКомплексныйПроцесс

#Область ТочкаМаршрутаКонтролер

&НаКлиенте
Функция ТЦЗадачаКомплексныйПроцессПроконтролировано() Экспорт
	
	ЗадачаКомплексныйПроцессПроконтролировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиПоручение

#Область ТочкаМаршрутаВыполнить

&НаКлиенте
Функция ТЦЗадачаПоручениеВыполнено() Экспорт
	
	ЗадачаПоручениеВыполнено(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаКонтролировать

&НаКлиенте
Функция ТЦЗадачаПоручениеПроконтролировано() Экспорт
	
	ЗадачаПоручениеПроконтролировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаПроверить

&НаКлиенте
Функция ТЦЗадачаЗавершитьПоручение() Экспорт
	
	ЗадачаЗавершитьПоручение(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаВернутьНаДоработку() Экспорт
	
	ЗадачаВернутьНаДоработку(Неопределено);
	Возврат Истина
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиРешениеВопросов

#Область ТочкаМаршрутаРассмотрениеИнициатором

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовПеренести() Экспорт
	
	ЗадачаРешениеВопросовПеренести(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовНеПереносить() Экспорт
	
	ЗадачаРешениеВопросовНеПереносить(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовОзнакомился() Экспорт
	
	ЗадачаРешениеВопросовОзнакомился(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовОтправитьНаУточнение() Экспорт
	
	ЗадачаРешениеВопросовОтправитьНаУточнение(Неопределено);
	Возврат Истина
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомлениеСРезультатомРассмотрения

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовРассмотрено() Экспорт
	
	ЗадачаРешениеВопросовРассмотрено(Неопределено);
	Возврат Истина
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
