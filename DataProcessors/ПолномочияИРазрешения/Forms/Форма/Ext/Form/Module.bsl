
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект = Параметры.Пользователь;
	
	УсловноеОформление.Элементы.Очистить();
	НастройкиДоступа.УстановитьУсловноеОформлениеПолномочий(УсловноеОформление);
	
	ЗаполнитьПолномочия();
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		// Показываем разрешения
		НастройкиДоступа.УстановитьУсловноеОформлениеРазрешений(УсловноеОформление);
		ЗаполнитьРазрешения();
	Иначе
		// Скрываем разрешения
		Заголовок = НСтр("ru = 'Полномочия'; en = 'Privileges'");
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПолномочия;
		Элементы.ОтчетПоНастройкамДоступа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеКоличестваРазрешений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКоличестваРазрешений()
	
	// Обновление количества элементов в заголовке и строках дерева разрешений.
	
	РазрешенийВсего = 0;
	РазрешенийУнаследовано = 0;
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого Строка Из РазрешенияДоступа.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(Строка);
		РазрешенийВсего = РазрешенийВсего + Строка.РазрешенийВсего;
		РазрешенийУнаследовано = РазрешенийУнаследовано + Строка.РазрешенийУнаследовано;
	КонецЦикла;
	
	Если РазрешенийУнаследовано = 0 Тогда
		Элементы.РазрешенияДоступа.Заголовок = СтрШаблон(
			НСтр("ru = 'Разрешения (%1)'; en = 'Permissions (%1)'"), РазрешенийВсего);
	Иначе
		Элементы.РазрешенияДоступа.Заголовок = СтрШаблон(
			НСтр("ru = 'Разрешения (%1, из них унаследовано %2)'; en = 'Permissions (%1, of these inherited %2)'"),
			РазрешенийВсего, РазрешенийУнаследовано);
	КонецЕсли;
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		
		ТекущаяСтрока = СтрокиКОбработке[0];
		РодительскаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		СтрокиКОбработке.Удалить(0);
		
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			
			Если ТекущаяСтрока.РазрешенийВсего > 0 Тогда
				ТекущаяСтрока.ПредставлениеСКоличеством = 
					ТекущаяСтрока.Представление + " (" + ТекущаяСтрока.РазрешенийВсего + ")";
			Иначе
				ТекущаяСтрока.ПредставлениеСКоличеством = ТекущаяСтрока.Представление;
			КонецЕсли;
			
			Для Каждого Строка Из ПодчиненныеСтроки Цикл
				СтрокиКОбработке.Добавить(Строка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолномочия

&НаКлиенте
Процедура ПолномочияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПолномочияСсылка Тогда
		ПоказатьЗначение(, Элементы.Полномочия.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Полномочия.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка = 0 Тогда
		// Нельзя сбрасывать унаследованные.
		ТекущиеДанные.Пометка = 2;
		//ПоказатьПредупреждение(, НСтр("ru = 'Эти полномочия унаследованы от группы пользователей'"));
	ИначеЕсли ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазрешенияДоступа

&НаКлиенте
Процедура РазрешенияДоступаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РазрешенияДоступа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьСписокВыбораУровняДоступа(ТекущиеДанные);
		УровеньДоступаМаксимальныйДоИзменения = ТекущиеДанные.УровеньДоступаМаксимальный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДоступаУровеньДоступаСсылкаПриИзменении(Элемент)
	
	СтрокаДерева = РазрешенияДоступа.НайтиПоИдентификатору(Элементы.РазрешенияДоступа.ТекущаяСтрока);
	
	СтрокаДерева.УровеньДоступаСобственный =
		НастройкиДоступаКлиентСерверПовтИсп.ПриоритетУровняДоступа(СтрокаДерева.УровеньДоступаСсылка);
	
	СтрокаДерева.УровеньДоступаМаксимальный = Макс(
		СтрокаДерева.УровеньДоступаСобственный,
		СтрокаДерева.УровеньДоступаРодителя,
		СтрокаДерева.УровеньДоступаУнаследованный);
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.УровеньДоступаСсылка)
		И СтрокаДерева.УровеньДоступаМаксимальный > 0 Тогда
		
		СтрокаДерева.УровеньДоступаСсылка =
			НастройкиДоступаКлиентСерверПовтИсп.УровеньДоступаПоПриоритету(
				СтрокаДерева.УровеньДоступаМаксимальный);
	КонецЕсли;
	
	Если СтрокаДерева.УровеньДоступаМаксимальный = УровеньДоступаМаксимальныйДоИзменения Тогда
		// Больше никаких действий не требуется.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораУровняДоступа(Элементы.РазрешенияДоступа.ТекущиеДанные);
	УровеньДоступаМаксимальныйДоИзменения = СтрокаДерева.УровеньДоступаМаксимальный;
	
	// Обнуление количества разрешений.
	РазрешенийВсегоБыло = СтрокаДерева.РазрешенийВсего;
	РазрешенийУнаследованоБыло = СтрокаДерева.РазрешенийУнаследовано;
	
	СтрокаДерева.РазрешенийВсего = 0;
	СтрокаДерева.РазрешенийУнаследовано = 0;
	
	ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
	Пока ТекущийРодитель <> Неопределено Цикл
		ТекущийРодитель.РазрешенийВсего = ТекущийРодитель.РазрешенийВсего - РазрешенийВсегоБыло;
		ТекущийРодитель.РазрешенийУнаследовано =
			ТекущийРодитель.РазрешенийУнаследовано - РазрешенийУнаследованоБыло;
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	// Обработка дочерних строк.
	СтрокиКОбработке = Новый Массив;
	СтрокиКОбработке.Добавить(СтрокаДерева);
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		
		Стр = СтрокиКОбработке[0];
		СтрокиКОбработке.Удалить(0);
		РодительСтр = Стр.ПолучитьРодителя();
		
		Если Стр.ПолучитьИдентификатор() <> СтрокаДерева.ПолучитьИдентификатор() Тогда
			
			Стр.УровеньДоступаРодителя = Макс(
				РодительСтр.УровеньДоступаСобственный, РодительСтр.УровеньДоступаРодителя);
			
			Стр.УровеньДоступаМаксимальный = Макс(
				Стр.УровеньДоступаСобственный,
				Стр.УровеньДоступаРодителя,
				Стр.УровеньДоступаУнаследованный);
			
			Стр.УровеньДоступаСсылка =
				НастройкиДоступаКлиентСерверПовтИсп.УровеньДоступаПоПриоритету(
					Стр.УровеньДоступаМаксимальный);
			
		КонецЕсли;
				
		// Корректировка количества разрешений.
		Если Стр.ЭтоГруппа Тогда
			
			Стр.РазрешенийВсего = 0;
			Стр.РазрешенийУнаследовано = 0;
			
			ПодчиненныеСтроки = Стр.ПолучитьЭлементы();
			Для Каждого Строка Из ПодчиненныеСтроки Цикл
				СтрокиКОбработке.Добавить(Строка);
			КонецЦикла;
			
		Иначе
			
			Стр.РазрешенийВсего = ?(Стр.УровеньДоступаМаксимальный > 0, 1, 0);
			Стр.РазрешенийУнаследовано = 
				?(Стр.УровеньДоступаМаксимальный = Стр.УровеньДоступаУнаследованный, 1, 0);
			
			Если Стр.УровеньДоступаМаксимальный > 0 Тогда
				
				// Увеличение счетчика разрешений для всех родительских строк.
				ТекущийРодитель = Стр.ПолучитьРодителя();
				Пока ТекущийРодитель <> Неопределено Цикл
					ТекущийРодитель.РазрешенийВсего = ТекущийРодитель.РазрешенийВсего + 1;
					ТекущийРодитель.РазрешенийУнаследовано =
						ТекущийРодитель.РазрешенийУнаследовано + Стр.РазрешенийУнаследовано;
					ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьОтображениеКоличестваРазрешений();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДоступаУровеньДоступаСсылкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если Модифицированность Тогда
		СохранитьНастройкиНаСервере();
		Оповестить("РазрешенияДоступаИзменены");
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	НачатьТранзакцию();
	
	Попытка
		
		// Полномочия.
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПолномочияПользователей.Полномочия,
			|	ЛОЖЬ КАК Добавить
			|ИЗ
			|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
			|ГДЕ
			|	ПолномочияПользователей.Владелец = &Группа
			|	И НЕ ПолномочияПользователей.Полномочия В (&ВыбранныеПолномочия)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПрофилиГруппДоступа.Ссылка,
			|	ИСТИНА
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
			|		ПО (ПолномочияПользователей.Полномочия = ПрофилиГруппДоступа.Ссылка)
			|			И (ПолномочияПользователей.Владелец = &Группа)
			|ГДЕ
			|	ПрофилиГруппДоступа.Ссылка В(&ВыбранныеПолномочия)
			|	И ПолномочияПользователей.Полномочия ЕСТЬ NULL ");
			
		ВыбранныеПолномочия = Новый Массив;
		Для Каждого Стр Из Полномочия Цикл
			Если Стр.Пометка = 1 Тогда
				ВыбранныеПолномочия.Добавить(Стр.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Группа", Объект);
		Запрос.УстановитьПараметр("ВыбранныеПолномочия", ВыбранныеПолномочия);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Добавить Тогда
				РегистрыСведений.ПолномочияПользователей.ДобавитьПолномочия(Объект, Выборка.Полномочия);
			Иначе
				РегистрыСведений.ПолномочияПользователей.УдалитьПолномочия(Объект, Выборка.Полномочия);
			КонецЕсли;
			
		КонецЦикла;
		
		// Разрешения.
		
		НаборРазрешений = РегистрыСведений.РазрешенияДоступаОбщие.СоздатьНаборЗаписей();
		НаборРазрешений.Отбор.Пользователь.Установить(Объект.Ссылка);
		
		СтрокиКОбработке = Новый Массив;
		Для Каждого Строка Из РазрешенияДоступа.ПолучитьЭлементы() Цикл
			СтрокиКОбработке.Добавить(Строка);
		КонецЦикла;
		
		Пока СтрокиКОбработке.Количество() > 0 Цикл
			
			Стр = СтрокиКОбработке[0];
			СтрокиКОбработке.Удалить(0);
			
			Если Стр.УровеньДоступаСобственный > Стр.УровеньДоступаУнаследованный
				И Стр.УровеньДоступаСобственный > Стр.УровеньДоступаРодителя Тогда
				
				Разрешение = НаборРазрешений.Добавить();
				Разрешение.Пользователь = Объект.Ссылка;
				Разрешение.ЗначениеДоступа = Стр.ЗначениеДоступа;
				Разрешение.УровеньДоступа = Стр.УровеньДоступаСсылка;
				
			КонецЕсли;
			
			Для Каждого Строка Из Стр.ПолучитьЭлементы() Цикл
				СтрокиКОбработке.Добавить(Строка);
			КонецЦикла;
			
		КонецЦикла;
		
		НаборРазрешений.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись полномочий и разрешений доступа группы пользователей'; en = 'Saving privileges and permissions for user group'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоНастройкамДоступа(Команда)
	
	ПараметрыФормы = Новый Структура("ВладелецНастроек", Объект);
	ОткрытьФорму("Отчет.НастройкиДоступаПользователей.Форма", ПараметрыФормы, ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПолномочия()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолномочияПользователей.Полномочия КАК Полномочия,
		|	МАКСИМУМ(НЕ ПолномочияПользователей.Владелец = &Группа) КАК Унаследована
		|ПОМЕСТИТЬ НазначенныеПолномочия
		|ИЗ
		|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
		|ГДЕ
		|	ПолномочияПользователей.Владелец В(&ВсеВладельцыПолномочий)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПолномочияПользователей.Полномочия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиГруппДоступа.Ссылка КАК Полномочия,
		|	ВЫБОР
		|		КОГДА НазначенныеПолномочия.Полномочия ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА НазначенныеПолномочия.Унаследована = ИСТИНА
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ НазначенныеПолномочия КАК НазначенныеПолномочия
		|		ПО ПрофилиГруппДоступа.Ссылка = НазначенныеПолномочия.Полномочия
		|ГДЕ
		|	НЕ ПрофилиГруппДоступа.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрофилиГруппДоступа.Наименование");
	
	ВсеВладельцыПолномочий = НастройкиДоступа.ВладельцыНаследуемыхРазрешенийДоступа(Объект);
	ВсеВладельцыПолномочий.Добавить(Объект);
	
	Запрос.УстановитьПараметр("Группа", Объект);
	Запрос.УстановитьПараметр("ВсеВладельцыПолномочий", ВсеВладельцыПолномочий);
	
	Полномочия.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
 		Стр = Полномочия.Добавить();
		Стр.Ссылка = Выборка.Полномочия;
		Стр.Пометка = Выборка.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазрешения(ТолькоУнаследованные = Ложь)
	
	ДеревоЗначенийДоступа = ДокументооборотПраваДоступаПовтИсп.ДеревоЗначенийДоступа().Скопировать();
	ДеревоЗначенийДоступа.Колонки.Добавить("ПредставлениеСКоличеством");
	ДеревоЗначенийДоступа.Колонки.Добавить("УровеньДоступаСобственный");
	ДеревоЗначенийДоступа.Колонки.Добавить("УровеньДоступаУнаследованный");
	ДеревоЗначенийДоступа.Колонки.Добавить("УровеньДоступаРодителя");
	ДеревоЗначенийДоступа.Колонки.Добавить("УровеньДоступаМаксимальный");
	ДеревоЗначенийДоступа.Колонки.Добавить("УровеньДоступаСсылка");
	
	ДеревоЗначенийДоступа.Колонки.Добавить("РазрешенийВсего");
	ДеревоЗначенийДоступа.Колонки.Добавить("РазрешенийУнаследовано");
	
	ЗначениеВРеквизитФормы(ДеревоЗначенийДоступа, "РазрешенияДоступа");
	
	// Получение максимального унаследованного уровня и максимального не унаследованного
	// для каждого значения доступа.
	
	Запрос = Новый Запрос(
	 	"ВЫБРАТЬ
	 	|	РазрешенияДоступаОбщие.ЗначениеДоступа КАК ЗначениеДоступа,
	 	|	МАКСИМУМ(УровниДоступа.Приоритет) КАК Приоритет,
	 	|	НЕ РазрешенияДоступаОбщие.Пользователь = &Группа КАК Унаследован
	 	|ПОМЕСТИТЬ МаксимальныеРазрешения
	 	|ИЗ
	 	|	РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияДоступаОбщие
	 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
	 	|		ПО РазрешенияДоступаОбщие.УровеньДоступа = УровниДоступа.Ссылка
	 	|ГДЕ
	 	|	РазрешенияДоступаОбщие.Пользователь В(&ВсеВладельцыРазрешений)
	 	|
	 	|СГРУППИРОВАТЬ ПО
	 	|	РазрешенияДоступаОбщие.ЗначениеДоступа,
	 	|	НЕ РазрешенияДоступаОбщие.Пользователь = &Группа
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////
	 	|ВЫБРАТЬ
	 	|	МаксимальныеРазрешения.ЗначениеДоступа КАК ЗначениеДоступа,
	 	|	МАКСИМУМ(ВЫБОР
	 	|			КОГДА МаксимальныеРазрешения.Унаследован
	 	|				ТОГДА 0
	 	|			ИНАЧЕ МаксимальныеРазрешения.Приоритет
	 	|		КОНЕЦ) КАК УровеньДоступаСобственный,
	 	|	МАКСИМУМ(ВЫБОР
	 	|			КОГДА МаксимальныеРазрешения.Унаследован
	 	|				ТОГДА МаксимальныеРазрешения.Приоритет
	 	|			ИНАЧЕ 0
	 	|		КОНЕЦ) КАК УровеньДоступаУнаследованный
	 	|ИЗ
	 	|	МаксимальныеРазрешения КАК МаксимальныеРазрешения
	 	|
	 	|СГРУППИРОВАТЬ ПО
	 	|	МаксимальныеРазрешения.ЗначениеДоступа");
	
	ВсеВладельцыРазрешений = НастройкиДоступа.ВладельцыНаследуемыхРазрешенийДоступа(Объект);
	ВсеВладельцыРазрешений.Добавить(Объект);
	
	Запрос.УстановитьПараметр("Группа", Объект);
	Запрос.УстановитьПараметр("ВсеВладельцыРазрешений", ВсеВладельцыРазрешений);
	
 	Выборка = Запрос.Выполнить().Выбрать();
	ДоступныеЗначенияДоступа = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ПараметрыДоступа = Новый Структура("УровеньДоступаСобственный, УровеньДоступаУнаследованный");
		ЗаполнитьЗначенияСвойств(ПараметрыДоступа, Выборка);
		ДоступныеЗначенияДоступа.Вставить(Выборка.ЗначениеДоступа, ПараметрыДоступа);
	КонецЦикла;
	
	// Обход строк дерева.
	СтрокиКОбработке = Новый Массив;
	Для Каждого Строка Из РазрешенияДоступа.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		
		ТекущаяСтрока = СтрокиКОбработке[0];
		РодительскаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		СтрокиКОбработке.Удалить(0);
		
		ТекущаяСтрока.ПредставлениеСКоличеством = ТекущаяСтрока.Представление;
		
		// Заполнение уровней доступа.
		ПараметрыДоступа = ДоступныеЗначенияДоступа.Получить(ТекущаяСтрока.ЗначениеДоступа);
		Если ПараметрыДоступа <> Неопределено Тогда
			ТекущаяСтрока.УровеньДоступаСобственный = ПараметрыДоступа.УровеньДоступаСобственный;
			ТекущаяСтрока.УровеньДоступаУнаследованный = ПараметрыДоступа.УровеньДоступаУнаследованный;
		КонецЕсли;
		
		Если РодительскаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.УровеньДоступаУнаследованный = Макс(
				ТекущаяСтрока.УровеньДоступаУнаследованный, РодительскаяСтрока.УровеньДоступаУнаследованный);
			ТекущаяСтрока.УровеньДоступаРодителя = Макс(
				РодительскаяСтрока.УровеньДоступаСобственный, РодительскаяСтрока.УровеньДоступаРодителя);
		КонецЕсли;
		
		ТекущаяСтрока.УровеньДоступаМаксимальный = Макс(
			ТекущаяСтрока.УровеньДоступаСобственный,
			ТекущаяСтрока.УровеньДоступаРодителя,
			ТекущаяСтрока.УровеньДоступаУнаследованный);
		
		ТекущаяСтрока.УровеньДоступаСсылка = 
			НастройкиДоступаКлиентСерверПовтИсп.УровеньДоступаПоПриоритету(
				ТекущаяСтрока.УровеньДоступаМаксимальный);
		
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			
			Для Каждого Строка Из ПодчиненныеСтроки Цикл
				СтрокиКОбработке.Добавить(Строка);
			КонецЦикла;
			
		ИначеЕсли ТекущаяСтрока.УровеньДоступаМаксимальный > 0 И Не ТекущаяСтрока.ЭтоГруппа Тогда
			
			ТекущаяСтрока.РазрешенийВсего = 1;
			ТекущаяСтрока.РазрешенийУнаследовано = 
				?(ТекущаяСтрока.УровеньДоступаМаксимальный = ТекущаяСтрока.УровеньДоступаУнаследованный, 1, 0);
			
			// Корректировка количества выбранных разрешений для родительских строк.
			ТекущийРодитель = РодительскаяСтрока;
			Пока ТекущийРодитель <> Неопределено Цикл
				
				ТекущийРодитель.РазрешенийВсего = ТекущийРодитель.РазрешенийВсего + 1;
				ТекущийРодитель.РазрешенийУнаследовано = 
					ТекущийРодитель.РазрешенийУнаследовано + ТекущаяСтрока.РазрешенийУнаследовано;
				ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораУровняДоступа(ДанныеСтроки) Экспорт
	
	СписокВыбора = Элементы.РазрешенияДоступаУровеньДоступаСсылка.СписокВыбора;
	СписокВыбора.Очистить();
	
	Сч = 0;
	ПриоритетыУровнейДоступа = НастройкиДоступаКлиентСерверПовтИсп.ПриоритетыУровнейДоступа();
	УровеньДоступа = ПриоритетыУровнейДоступа.Получить(Сч);
	
	Пока УровеньДоступа <> Неопределено Цикл
		
		Если Сч > 0 И Сч <= Макс(ДанныеСтроки.УровеньДоступаУнаследованный, 
				ДанныеСтроки.УровеньДоступаРодителя) Тогда
				
			Сч = Сч + 1;
			УровеньДоступа = ПриоритетыУровнейДоступа.Получить(Сч);
			Продолжить;
			
		КонецЕсли;
		
		// Регистрация доступна не для всех видов доступа.
		ДобавитьЭлемент = Истина;
		Если УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.Регистрация") Тогда
			ВидыДоступаИспользующиеРегистрацию = НастройкиДоступаКлиентСервер.ВидыДоступаИспользующиеРегистрацию();
			ДобавитьЭлемент = ВидыДоступаИспользующиеРегистрацию.Найти(ДанныеСтроки.ВидДоступа) <> Неопределено;
		КонецЕсли;
		
		Если ДобавитьЭлемент Тогда
			
			ПредставлениеЭлемента = "";
			
			Если Не ЗначениеЗаполнено(УровеньДоступа) Тогда
				Если ДанныеСтроки.УровеньДоступаУнаследованный > 0
					Или ДанныеСтроки.УровеньДоступаРодителя > 0 Тогда
					ПредставлениеЭлемента = НСтр("ru = '<Наследовать>'; en = '<Inherit>'");
				Иначе
					ПредставлениеЭлемента = НСтр("ru = '<Нет доступа>'; en = '<No access>'");
				КонецЕсли;
			КонецЕсли;
			
			СписокВыбора.Добавить(УровеньДоступа, ПредставлениеЭлемента);
			
		КонецЕсли;
		
		Сч = Сч + 1;
		УровеньДоступа = ПриоритетыУровнейДоступа.Получить(Сч);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
