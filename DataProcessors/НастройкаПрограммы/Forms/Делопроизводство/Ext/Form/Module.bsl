#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьВидыВходящихДокументов = НаборКонстант.ИспользоватьВидыВходящихДокументов;
	ИспользоватьВидыИсходящихДокументов = НаборКонстант.ИспользоватьВидыИсходящихДокументов;
	ИспользоватьВидыВнутреннихДокументов = НаборКонстант.ИспользоватьВидыВнутреннихДокументов;
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	
	ИспользоватьУчетПоОрганизациям = НаборКонстант.ИспользоватьУчетПоОрганизациям;
	ИспользоватьВопросыДеятельности = НаборКонстант.ИспользоватьВопросыДеятельности;
	ВестиУчетОбращенийГраждан = НаборКонстант.ВестиУчетОбращенийГраждан;
	ИспользоватьНоменклатуруДел = НаборКонстант.ИспользоватьНоменклатуруДел;
	
	Элементы.РазрешитьРучноеИзменениеСостоянияДокументов.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.ОграничиватьДоступностьПолейПоСостоянию.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	
	ИспользоватьГрифыДоступа = НаборКонстант.ИспользоватьГрифыДоступа;
	ИспользоватьГрифыДоступаНачальноеЗначение = НаборКонстант.ИспользоватьГрифыДоступа;
	Если Не ИспользоватьГрифыДоступа Тогда
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ИспользоватьВизыСогласования = НаборКонстант.ИспользоватьВизыСогласования;
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Элементы.СписокРасширенийСканКопийОригиналов.Доступность = НаборКонстант.ВестиУчетСканКопийОригиналовДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВопросаДеятельности(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВопросДеятельности = СоздатьВопросДеятельности(Результат);
	ПараметрыЗаписи.Вставить("СозданВопросДеятельности", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВопросДеятельности = ВыбранноеЗначение.Значение;
	ПараметрыЗаписи.Вставить("ВопросДеятельностиВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаВходящихДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СоздатьВидДокумента(Результат, "ВидыВходящихДокументов");
	ПараметрыЗаписи.Вставить("СозданВидВходящихДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаВходящихДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВидДокумента = ВыбранноеЗначение.Значение;
	ПараметрыЗаписи.Вставить("ВидВходящихДокументовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаИсходящихДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СоздатьВидДокумента(Результат, "ВидыИсходящихДокументов");
	ПараметрыЗаписи.Вставить("СозданВидИсходящихДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаИсходящихДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВидДокумента = ВыбранноеЗначение.Значение;	
	ПараметрыЗаписи.Вставить("ВидИсходящихДокументовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаВнутреннихДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СоздатьВидДокумента(Результат, "ВидыВнутреннихДокументов");
	ПараметрыЗаписи.Вставить("СозданВидВнутреннихДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаВнутреннихДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВидДокумента = ВыбранноеЗначение.Значение;
	ПараметрыЗаписи.Вставить("ВидВнутреннихДокументовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НаборКонстант.ИспользоватьВидыВходящихДокументов 
		Или НаборКонстант.ИспользоватьВидыИсходящихДокументов 
		Или НаборКонстант.ИспользоватьВидыВнутреннихДокументов Тогда
		ИспользоватьВидыДокументов = Истина;
	Иначе
		ИспользоватьВидыДокументов = Ложь;
	КонецЕсли;
	
	// включен учет по организациям
	Если Не ИспользоватьУчетПоОрганизациям И НаборКонстант.ИспользоватьУчетПоОрганизациям Тогда 
		
		ЗаполнитьВестиУчетПоОрганизациям();
				
	КонецЕсли;
	
	// включен учет вопросов деятельности
	Если Не ИспользоватьВопросыДеятельности И НаборКонстант.ИспользоватьВопросыДеятельности Тогда 
		Если НужноЗаполнитьВопросДеятельности() Тогда  
			
			ВопросыДеятельности = МассивВопросовДеятельности();
			Если ВопросыДеятельности.Количество() = 0 Тогда // создание вопроса деятельности
				Если Не ПараметрыЗаписи.Свойство("СозданВопросДеятельности") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВопросаДеятельности",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вопрос деятельности'; en = 'Specify the activity type'"), 
						НСтр("ru = 'Введите наименование вопроса деятельности, к которому будут отнесены существующие документы:'; en = 'Enter the name of the activity type that will be assigned to existing documents.'"), 
						150, 
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			ИначеЕсли ВопросыДеятельности.Количество() = 1 Тогда 
				ВопросДеятельности = ВопросыДеятельности[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВопросДеятельностиВыбран") Тогда
				СписокВопросов = Новый СписокЗначений;
				СписокВопросов.ЗагрузитьЗначения(ВопросыДеятельности);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				СписокВопросов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, НСтр("ru = 'Укажите вопрос деятельности, к которому отнести существующие документы'; en = 'Specify the activity type to be assigned to the existing documents'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется включение учета по вопросам деятельности. Пожалуйста, подождите...'; en = 'Accounting for activity types is being enabled. Please wait...'"));
			ЗаполнитьВопросДеятельности(ВопросДеятельности);
			Состояние(НСтр("ru = 'Использование учета по вопросам деятельности включено.'; en = 'Accounting for activity types is enabled.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	// включены виды входящих документов
	Если Не ИспользоватьВидыВходящихДокументов И НаборКонстант.ИспользоватьВидыВходящихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ВходящийДокумент") > 0 Тогда 
			
			ВидыДокументов = МассивВидовДокументов("ВидыВходящихДокументов");
			Если ВидыДокументов.Количество() = 0 Тогда
				
				Если Не ПараметрыЗаписи.Свойство("СозданВидВходящихДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаВходящихДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид документа'; en = 'Specify the document type'"), 
						НСтр("ru = 'Введите наименование вида документа, к которому будут отнесены существующие входящие документы:'; en = 'Enter the name of the document type that will be assigned to existing incoming documents.'"),
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ВидыДокументов.Количество() = 1 Тогда 
				ВидДокумента = ВидыДокументов[0];
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидВходящихДокументовВыбран") Тогда
				
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаВходящихДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид документа, к которому отнести существующие входящие документы'; en = 'Specify the document type to be assigned to the existing incoming documents'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида во входящих документах. Пожалуйста, подождите...'; en = 'Document type is being assigned to incoming documents. Please wait...'"));
			ЗаполнитьВидДокумента(ВидДокумента, "ВходящиеДокументы");
			Состояние(НСтр("ru = 'Использование видов входящих документов включено.'; en = 'Using incoming document types is enabled.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	// включены виды исходящих документов
	Если Не ИспользоватьВидыИсходящихДокументов И НаборКонстант.ИспользоватьВидыИсходящихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ИсходящийДокумент") > 0 Тогда 
			
			ВидыДокументов = МассивВидовДокументов("ВидыИсходящихДокументов");
			Если ВидыДокументов.Количество() = 0 Тогда 
				
				Если Не ПараметрыЗаписи.Свойство("СозданВидИсходящихДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаИсходящихДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид документа'; en = 'Specify the document type'"), 
						НСтр("ru = 'Введите наименование вида документа, к которому будут отнесены существующие исходящие документы:'; en = 'Enter the name of the document type that will be assigned to existing outgoing documents.'"),
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ВидыДокументов.Количество() = 1 Тогда 
				ВидДокумента = ВидыДокументов[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидИсходящихДокументовВыбран") Тогда
				
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаИсходящихДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид документа, к которому отнести существующие исходящие документы'; en = 'Specify the document type to be assigned to the existing outgoing documents'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида в исходящих документах. Пожалуйста, подождите...'; en = 'Document type is being assigned to outgoing documents. Please wait...'"));
			ЗаполнитьВидДокумента(ВидДокумента, "ИсходящиеДокументы");
			Состояние(НСтр("ru = 'Использование видов исходящих документов включено.'; en = 'Using outgoing document types is enabled.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	// включены виды внутренних документов
	Если Не ИспользоватьВидыВнутреннихДокументов И НаборКонстант.ИспользоватьВидыВнутреннихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ВнутреннийДокумент") > 0 Тогда 
			
			ВидыДокументов = МассивВидовДокументов("ВидыВнутреннихДокументов");
			Если ВидыДокументов.Количество() = 0 Тогда 
				
				Если Не ПараметрыЗаписи.Свойство("СозданВидВнутреннихДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаВнутреннихДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид документа'; en = 'Specify the document type'"), 
						НСтр("ru = 'Введите наименование вида документа, к которому будут отнесены существующие внутренние документы:'; en = 'Enter the name of the document type that will be assigned to existing documents.'"),
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ВидыДокументов.Количество() = 1 Тогда 
				ВидДокумента = ВидыДокументов[0];
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидВнутреннихДокументовВыбран") Тогда
				
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаВнутреннихДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид документа, к которому отнести существующие внутренние документы'; en = 'Specify the document type to be assigned to the existing internal documents'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида во внутренних документах. Пожалуйста, подождите...'; en = 'Document type is being assigned to internal documents. Please wait...'"));
			ЗаполнитьВидДокумента(ВидДокумента, "ВнутренниеДокументы");
			Состояние(НСтр("ru = 'Использование видов внутренних документов включено.'; en = 'Using internal document types is enabled.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	// Включено использование виз согласования
	Если Не ИспользоватьВизыСогласования И НаборКонстант.ИспользоватьВизыСогласования Тогда
		Состояние(НСтр("ru = 'Выполняется заполнение виз согласования в существующих документах. Пожалуйста, подождите...'; en = 'Endorsements of approval are being added to existing documents. Please wait...'"));
		ЗаполнитьВизы();
		Состояние(НСтр("ru = 'Визы согласования в существующих документах заполнены.'; en = 'Endorsements of approval in existing documents are filled in.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ИспользованиеГрифовДоступаБылоИзменено И ИспользоватьГрифыДоступа Тогда 
		ИспользованиеГрифовДоступаБылоИзменено = Ложь;
		Состояние(НСтр("ru = 'Идет обновление грифов доступа входящих и исходящих документов. 
			|Пожалуйста, подождите...';
			|en = 'Security levels for incoming and outgoing documents are being updated.
			|Please wait...'"));
		КорректировкаГрифовДоступа();
		Состояние(НСтр("ru = 'Обновление грифов доступа завершено.'; en = 'Security levels update completed.'"));
	КонецЕсли;
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	
	// изменен учет обращений граждан
	Если Не ВестиУчетОбращенийГраждан И НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		
		Состояние(НСтр("ru = 'Выполняется включение учета обращений граждан. Пожалуйста, подождите...'; en = 'Accounting for citizen appeals is being enabled. Please wait...'"));
		ПереключитьУчетОбращенийГраждан();
		Состояние(НСтр("ru = 'Использование учета обращений граждан включено.'; en = 'Accounting for citizen appeals is enabled.'"));
		
	ИначеЕсли ВестиУчетОбращенийГраждан И Не НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		
		Состояние(НСтр("ru = 'Выполняется выключение учета обращений граждан. Пожалуйста, подождите...'; en = 'Accounting for citizen appeals is being disabled. Please wait...'"));
		ПереключитьУчетОбращенийГраждан();
		Состояние(НСтр("ru = 'Использование учета обращений граждан выключено.'; en = 'Accounting for citizen appeals is disabled.'"));
		
	КонецЕсли;
	
	// изменено использование номенклатуры дел
	Если Не ИспользоватьНоменклатуруДел И НаборКонстант.ИспользоватьНоменклатуруДел Тогда 
		
		Состояние(НСтр("ru = 'Выполняется включение использования номенклатуры дел. Пожалуйста, подождите...'; en = 'Usage of case files is being enabled. Please wait...'"));
		ПереключитьИспользованиеНоменклатурыДел();
		Состояние(НСтр("ru = 'Использование номенклатуры дел включено.'; en = 'Using case files is enabled.'"));
		
	ИначеЕсли ИспользоватьНоменклатуруДел И Не НаборКонстант.ИспользоватьНоменклатуруДел Тогда 
		
		Состояние(НСтр("ru = 'Выполняется выключение использования номенклатуры дел. Пожалуйста, подождите...'; en = 'Usage of case files is being disabled. Please wait...'"));
		ПереключитьИспользованиеНоменклатурыДел();
		Состояние(НСтр("ru = 'Использование номенклатуры дел выключено.'; en = 'Using case files is disabled.'"));
		
	КонецЕсли;
	
	Если ХранениеВТомахНаДискеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение2") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение2",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьПредупреждение(
				ОписаниеОповещения,
				НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
					|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.';
					|en = 'Storing files on the disk volumes is enabled but volumes are not yet specified. 
					|The program will keep storing files in the infobase until at least one storage volume is specified.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьРаспознаваниеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопрос3") Тогда
			Текст = НСтр("ru = 'Включено распознавание. 
			|Для работы распознавания необходимо установить бесплатную программу CuneiForm (http://www.cuneiform.ru/downloads/index.html).
			|Поставить в очередь на распознавание все существующие файлы изображений?';
			|en = 'Recognition is enabled.
			|In order for recognition to work it is necessary to install the free application named CuneiForm
			|(http://www.cuneiform.ru/downloads/index.html).
			|Queue all the existing images for recognition?'");		
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение3",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение1(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение1", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение2(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение2", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение3(Результат, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказанВопрос3", Истина);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние(НСтр("ru = 'Формируется очередь распознавания изображений. Пожалуйста подождите...'; en = 'Image recognition queue is being generated. Please wait...'"));				
		ЧислоКартинок = ПоставитьВсеКартинкиВОчередьРаспознавания();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очередь распознавания изображений сформирована (файлов: %1).'; en = 'Image recognition queue has been generated (files: %1).'"), ЧислоКартинок);
		Состояние(ТекстСообщения);		
	КонецЕсли;
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Константы.ИспользоватьВидыДокументов.Установить(ИспользоватьВидыДокументов);
	Константы.ИспользоватьГрифыДоступа.Установить(ИспользоватьГрифыДоступа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьГрифыДоступаПриИзменении(Элемент)
	
	ИспользованиеГрифовДоступаБылоИзменено = Истина;
	Модифицированность = Истина;
	Если Не ИспользоватьГрифыДоступа Тогда
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Истина;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступа);
	ОбновитьИнтерфейс();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСостоянияДокументовПриИзменении(Элемент)
	
	Элементы.РазрешитьРучноеИзменениеСостоянияДокументов.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.ОграничиватьДоступностьПолейПоСостоянию.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПоОрганизациямПриИзмененииПродолжение(Результат, Параметры) Экспорт
	
	НаборКонстант.ИспользоватьУчетПоОрганизациям = Результат = КодВозвратаДиалога.Да;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКатегорииДанныхПриИзменении(Элемент)
		
	Если НаборКонстант.ИспользоватьКатегорииДанных = Ложь Тогда
		НаборКонстант.ИспользоватьАвтоматическуюКатегоризациюДанных = Ложь;
		НаборКонстант.ИспользоватьПроверкуКатегорий = Ложь;
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Ложь;
		Элементы.ПроверкаКатегорий.Доступность = Ложь;
	Иначе
		НаборКонстант.ИспользоватьАвтоматическуюКатегоризациюДанных = Истина;
		НаборКонстант.ИспользоватьПроверкуКатегорий = Истина;
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Истина;
		Элементы.ПроверкаКатегорий.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСканКопийОригиналовДокументовПриИзменении(Элемент)
	
	Элементы.СписокРасширенийСканКопийОригиналов.Доступность = НаборКонстант.ВестиУчетСканКопийОригиналовДокументов;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	НаборКонстант.СписокРасширенийСканКопийОригиналов = "bmp, gif, jpeg, jpg, png, tiff, tif, wmf, emf, pdf";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоставитьВсеКартинкиВОчередьРаспознавания()
	УстановитьПривилегированныйРежим(Истина);
	
	ЧислоКартинок = 0;
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Выборка.ТекущаяВерсияРасширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
			Объект.ЯзыкРаспознавания = "7"; // русско-английский
			Объект.Записать();
			ЧислоКартинок = ЧислоКартинок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Выборка.Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЧислоКартинок;
	
КонецФункции

&НаСервере
Процедура КорректировкаГрифовДоступа()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НаборКонстант.ИспользоватьГрифыДоступа Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Если НаборКонстант.ИспользоватьУправлениеМероприятиями Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Мероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МероприятиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			МероприятиеОбъект.Заблокировать();
			МероприятиеОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
			МероприятиеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступы)
	
	Константы.ИспользоватьГрифыДоступа.Установить(ИспользоватьГрифыДоступы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВестиУчетПоОрганизациям()
	
	НачатьТранзакцию();
	
	Попытка
		Запрос = Новый Запрос(
			"ВЫБРАТЬ 
			|	ВидыВнутреннихДокументов.Ссылка
			|ИЗ
			|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
			|ГДЕ
			|	НЕ ВидыВнутреннихДокументов.ВестиУчетПоОрганизациям");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ИзменяемыйОбъект.Заблокировать();
			ИзменяемыйОбъект.ВестиУчетПоОрганизациям = Истина;
			ИзменяемыйОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВопросДеятельности(ВопросДеятельности)
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВходящиеДокументы.Ссылка
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|ГДЕ
			|	ВходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИсходящиеДокументы.Ссылка
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|ГДЕ
			|	ИсходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВнутренниеДокументы.Ссылка
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|ГДЕ
			|	ВнутренниеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВыборкаОбъект.Заблокировать();
			ВыборкаОбъект.ВопросДеятельности = ВопросДеятельности;
			ВыборкаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НужноЗаполнитьВопросДеятельности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция МассивВопросовДеятельности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыДеятельности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВопросыДеятельности КАК ВопросыДеятельности
		|ГДЕ
		|	НЕ ВопросыДеятельности.ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция СоздатьВопросДеятельности(Наименование)
	
	ВопросДеятельностиОбъект = Справочники.ВопросыДеятельности.СоздатьЭлемент();
	ВопросДеятельностиОбъект.Наименование = Наименование;
	ВопросДеятельностиОбъект.Записать();
	Возврат ВопросДеятельностиОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция МассивВидовДокументов(ИмяСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + "
		|ГДЕ
		|	Не ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Функция СоздатьВидДокумента(Наименование, ИмяСправочника)
	
	ВидДокументаОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
	ВидДокументаОбъект.Наименование = Наименование;
	
	ВидДокументаОбъект.Записать();
	
	// Нумерация
	НастройкиНумерации = Новый ТаблицаЗначений;
	НастройкиНумерации.Колонки.Добавить("СпособНумерации");
	НастройкиНумерации.Колонки.Добавить("Нумератор");
	НастройкиНумерации.Колонки.Добавить("Нумеровать");
	
	Если ИмяСправочника = "ВидыВходящихДокументов" Тогда 
		Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
	ИначеЕсли ИмяСправочника = "ВидыИсходящихДокументов" Тогда 
		Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
	ИначеЕсли ИмяСправочника = "ВидыВнутреннихДокументов" Тогда 
		Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
	КонецЕсли;
	
	НоваяСтрока = НастройкиНумерации.Добавить();
	НоваяСтрока.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
	НоваяСтрока.Нумератор = Нумератор;
	НоваяСтрока.Нумеровать = Нумерация.СформироватьПолеНумеровать(НоваяСтрока.СпособНумерации, НоваяСтрока.Нумератор);
	
	Нумерация.ЗаписатьНастройкиНумерацииВидаДокумента(ВидДокументаОбъект.Ссылка, НастройкиНумерации);
	
	Возврат ВидДокументаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидДокумента(ВидДокумента, ИмяСправочника)
	
	НачатьТранзакцию();
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ссылка КАК Ссылка
			|ИЗ
			|	Справочник." + ИмяСправочника + "
			|ГДЕ
			|	ВидДокумента = &ПустойВидДокумента";
		
		Если ИмяСправочника = "ВходящиеДокументы" Тогда 
			ПустойВидДокумента = Справочники.ВидыВходящихДокументов.ПустаяСсылка();
		ИначеЕсли ИмяСправочника = "ИсходящиеДокументы" Тогда 
			ПустойВидДокумента = Справочники.ВидыИсходящихДокументов.ПустаяСсылка();
		ИначеЕсли ИмяСправочника = "ВнутренниеДокументы" Тогда 	
			ПустойВидДокумента = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
		КонецЕсли;
		Запрос.УстановитьПараметр("ПустойВидДокумента", ПустойВидДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ВидДокумента = ВидДокумента;
			ДокументОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьУчетОбращенийГраждан()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|ГДЕ
		|	ВидыВходящихДокументов.ЯвляетсяОбращениемОтГраждан";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Заблокировать();
		ВыборкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьИспользованиеНоменклатурыДел()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|ГДЕ
		|	ВидыВходящихДокументов.ВестиУчетПоНоменклатуреДел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыИсходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов
		|ГДЕ
		|	ВидыИсходящихДокументов.ВестиУчетПоНоменклатуреДел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	ВидыВнутреннихДокументов.ВестиУчетПоНоменклатуреДел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Заблокировать();
		ВыборкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	НачатьТранзакцию();
	Попытка
		
		// создание виз по задачам
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СогласованиеПредметы.Ссылка КАК БизнесПроцесс,
			|	СогласованиеПредметы.Предмет
			|ПОМЕСТИТЬ БизнесПроцессы
			|ИЗ
			|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
			|ГДЕ
			|	СогласованиеПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
			|	И (ТИПЗНАЧЕНИЯ(СогласованиеПредметы.Предмет) = ТИП(Справочник.ИсходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СогласованиеПредметы.Предмет) = ТИП(Справочник.ВнутренниеДокументы))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПредметыЗадач.Ссылка КАК ЗадачаИсполнителя,
			|	ПредметыЗадач.Ссылка.БизнесПроцесс КАК БизнесПроцесс,
			|	ПредметыЗадач.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
			|	ПредметыЗадач.Предмет КАК Предмет,
			|	ПредметыЗадач.Ссылка.Исполнитель КАК Исполнитель,
			|	ПредметыЗадач.Ссылка.РольИсполнителя КАК РольИсполнителя,
			|	ПредметыЗадач.Ссылка.ДатаИсполнения КАК ДатаИсполнения,
			|	ПредметыЗадач.Ссылка.Автор КАК Автор,
			|	ПредметыЗадач.Ссылка.Дата КАК ЗадачаИсполнителяДата,
			|	ПредметыЗадач.Ссылка.БизнесПроцесс.Дата КАК БизнесПроцессДата,
			|	ВизыСогласования.Документ,
			|	ВизыСогласования.Источник,
			|	ИсторияСобытийЗадач.Пользователь КАК ПользовательСобытиеВыполнена
			|ИЗ
			|	Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцессы КАК БизнесПроцессы
			|		ПО ПредметыЗадач.Ссылка.БизнесПроцесс = БизнесПроцессы.БизнесПроцесс
			|			И ПредметыЗадач.Предмет = БизнесПроцессы.Предмет
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВизыСогласования КАК ВизыСогласования
			|		ПО (ВизыСогласования.Документ = ПредметыЗадач.Предмет)
			|			И (ВизыСогласования.Источник = ПредметыЗадач.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
			|		ПО (ИсторияСобытийЗадач.Задача = ПредметыЗадач.Ссылка)
			|			И (ИсторияСобытийЗадач.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЗадач.Выполнена))
			|ГДЕ
			|	ПредметыЗадач.Ссылка.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Согласование.ТочкаМаршрута.Согласовать)
			|
			|УПОРЯДОЧИТЬ ПО
			|	БизнесПроцессДата,
			|	ЗадачаИсполнителяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Задача = Выборка.ЗадачаИсполнителя;
			БизнесПроцесс = Выборка.БизнесПроцесс;
			Предмет = Выборка.Предмет;
			
			Если Не ЗначениеЗаполнено(Предмет) Тогда // не задан предмет
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Документ <> NULL Тогда // виза есть
				Продолжить;
			КонецЕсли;
			
			// номер итерации задачи
			НомерИтерации = 0;
			НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			
			ДатаПомещенияВИсторию = '00010101';
			ПоместилВИсторию = Неопределено;
			
			Если НомерИтерации = БизнесПроцесс.НомерИтерации Тогда 
				ПомещенаВИсторию = Ложь;
			Иначе
				ПомещенаВИсторию = Истина;
				
				НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(НомерИтерации, "НомерИтерации");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ДатаПомещенияВИсторию = НайденнаяСтрока.ЗадачаИсполнителя.ДатаИсполнения;
					ПоместилВИсторию = НайденнаяСтрока.ЗадачаИсполнителя.Исполнитель;
				КонецЕсли;
			КонецЕсли;
			
			РезультатСогласования = Неопределено;
			ДатаИсполнения = '00010101';
			УстановилРезультат = Неопределено;
			
			Если Задача.Выполнена Тогда 
				НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					РезультатСогласования = НайденнаяСтрока.РезультатСогласования;
					
					УстановилРезультат = Выборка.Исполнитель;
					Если ЗначениеЗаполнено(Выборка.ПользовательСобытиеВыполнена) И Выборка.ПользовательСобытиеВыполнена <> УстановилРезультат Тогда 
						УстановилРезультат = Выборка.ПользовательСобытиеВыполнена;
					КонецЕсли;
					
					ДатаИсполнения = Выборка.ДатаИсполнения;
				КонецЕсли;
			КонецЕсли;
			
			Удалена = Выборка.ПометкаУдаления;
			Комментарий = Выборка.ЗадачаИсполнителя.РезультатВыполнения;
			
			// проверка активной визы
			Если Не ПомещенаВИсторию И Не Удалена Тогда 
				АктивнаяВиза = РаботаСВизамиСогласования.ПолучитьАктивнуюВизуПоИсполнителю(Предмет, Выборка);
				Если АктивнаяВиза <> Неопределено Тогда 
					
					АктивнаяВизаБизнесПроцесс = Неопределено;
					Если ТипЗнч(АктивнаяВиза.Источник) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
						АктивнаяВизаБизнесПроцесс = АктивнаяВиза.Источник;
					ИначеЕсли ТипЗнч(АктивнаяВиза.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
						АктивнаяВизаБизнесПроцесс = АктивнаяВиза.Источник.БизнесПроцесс;
					КонецЕсли;
					
					Если АктивнаяВизаБизнесПроцесс = Неопределено Или АктивнаяВизаБизнесПроцесс = БизнесПроцесс Тогда 
						Визы = Новый Массив;
						Визы.Добавить(АктивнаяВиза);
					Иначе
						Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессуИЗадачам(Предмет, АктивнаяВизаБизнесПроцесс);
					КонецЕсли;
					
					РаботаСВизамиСогласования.ПоместитьВизыВИсторию(Визы);
				КонецЕсли;
			КонецЕсли;
			
			// создание визы
			ОбъектВизы = Справочники.ВизыСогласования.СоздатьЭлемент();
			ОбъектВизы.Документ = Предмет;
			
			Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
				ОбъектВизы.Исполнитель = Выборка.Исполнитель;
			Иначе
				ОбъектВизы.Исполнитель = Выборка.РольИсполнителя;
			КонецЕсли;
			
			ОбъектВизы.ПомещенаВИсторию = ПомещенаВИсторию;
			ОбъектВизы.ДатаПомещенияВИсторию = ДатаПомещенияВИсторию;
			
			ОбъектВизы.Удалена = Удалена;
			ОбъектВизы.РезультатСогласования = РезультатСогласования;
			ОбъектВизы.Комментарий = Комментарий;
			ОбъектВизы.ДатаИсполнения = ДатаИсполнения;
			
			ОбъектВизы.Автор = Выборка.Автор;
			ОбъектВизы.ПоместилВИсторию = ПоместилВИсторию;
			ОбъектВизы.УстановилРезультат = УстановилРезультат;
			ОбъектВизы.Источник = Задача.Ссылка;
			
			ОбъектВизы.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти
