#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МаксимальныйРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла() / (1024*1024);
	
	Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
	
	Элементы.ОткрытьТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	ХранитьФайлыВТомахНаДискеНачальноеЗначение = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
	Элементы.НастройкиРаспознавания.Доступность = НаборКонстант.ИспользоватьРаспознавание;
	
	Если Не ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда 
		Элементы.ГруппаНастроекОчистки.Доступность = Ложь;
		Элементы.ОчиститьСейчас.Доступность = Ложь;
	КонецЕсли;
	
	// для установки в значение по умолчанию - 180 дней
	СрокХраненияНеактивныхВерсийЗначение = РаботаСФайламиВызовСервера.ПолучитьСрокХраненияНеактивныхВерсий();
	Если НаборКонстант.СрокХраненияНеактивныхВерсий = 0 Тогда
		НаборКонстант.СрокХраненияНеактивныхВерсий = СрокХраненияНеактивныхВерсийЗначение;
	КонецЕсли;
	
	Элементы.ПутьСохраненияУдаляемыхВерсий.АвтоОтметкаНезаполненного = НаборКонстант.УдалятьНеактивныеВерсии;
	
	// для установки в значение по умолчанию - Электронная почта
	ТипОповещения = РаботаСФайламиВызовСервера.ПолучитьТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий();
	Если НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий.Пустая() Тогда
		НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = ТипОповещения;
	КонецЕсли;
	
	ДоступноПоле = (НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = Перечисления.ТипыОповещения.Ознакомление);
	Элементы.ПапкаДляХраненияОтчетовОбУдалении.Доступность = ДоступноПоле;
	
	ПутьСохраненияУдаляемыхВерсий = СформироватьПутьWindowsLinux(НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	ХранениеВТомахНаДискеВключено = ТекущийОбъект.ХранитьФайлыВТомахНаДиске И Не ХранитьФайлыВТомахНаДиске;
	Если ХранениеВТомахНаДискеВключено Тогда
		
		Если ФайловыеФункции.ЕстьТомаХраненияФайлов() Тогда
			ХранениеВТомахНаДискеВключено = Ложь;
		КонецЕсли;
		
		// Создаем группу томов
		Группа = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию(НСтр("ru = 'Группа по умолчанию'; en = 'Default group'"), Истина);
		Если Не ЗначениеЗаполнено(Группа) Тогда
			Группа = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
			Группа.Наименование = НСтр("ru = 'Группа по умолчанию'; en = 'Default group'");
			Группа.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьРаспознавание = Константы.ИспользоватьРаспознавание.Получить();
	ИспользоватьРаспознаваниеВключено = ТекущийОбъект.ИспользоватьРаспознавание = Истина И ИспользоватьРаспознавание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ХранениеВТомахНаДискеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение2") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение2",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьПредупреждение(
				ОписаниеОповещения,
				НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
					|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.';
					|en = 'Storing files on the disk volumes is enabled but volumes are not yet specified. 
					|The program will keep storing files in the infobase until at least one storage volume is specified.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьРаспознаваниеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопрос3") Тогда
			Текст = НСтр("ru = 'Включено распознавание. 
			|Для работы распознавания необходимо установить бесплатную программу CuneiForm (http://www.cuneiform.ru/downloads/index.html).
			|Поставить в очередь на распознавание все существующие файлы изображений?';
			|en = 'Recognition is enabled.
			|In order for recognition to work it is necessary to install the free application named CuneiForm
			|(http://www.cuneiform.ru/downloads/index.html).
			|Queue all the existing images for recognition?'");		
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение3",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет); 
			Возврат;	  
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение2(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение2", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение3(Результат, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказанВопрос3", Истина);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние(НСтр("ru = 'Формируется очередь распознавания изображений. Пожалуйста подождите...'; en = 'Image recognition queue is being generated. Please wait...'"));				
		ЧислоКартинок = ПоставитьВсеКартинкиВОчередьРаспознавания();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очередь распознавания изображений сформирована (файлов: %1).'; en = 'Image recognition queue has been generated (files: %1).'"), ЧислоКартинок);
		Состояние(ТекстСообщения);		
	КонецЕсли;
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МаксимальныйРазмерФайлаМБ = МаксимальныйРазмерФайла * (1024*1024);
	Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайлаМБ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗапретЗагрузкиФайловПоРасширениюПриИзменении(Элемент)
	
	Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРаспознаваниеПриИзменении(Элемент)
	Элементы.НастройкиРаспознавания.Доступность = НаборКонстант.ИспользоватьРаспознавание;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не НаборКонстант.ХранитьФайлыВТомахНаДиске Тогда
		
		Если МаксимальныйРазмерФайла > 1024 Тогда
			
			ТекстОшибки = НСтр("ru = 'Максимальный размер файла превышает 1024 Мб'; en = 'Maximum file size exceeds 1024 MB'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "МаксимальныйРазмерФайла", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаборКонстант.УдалятьНеактивныеВерсии Тогда
		
		ПутьСохраненияВерсий = "";
		
		ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			ПутьСохраненияВерсий = НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows;
		Иначе
			ПутьСохраненияВерсий = НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux;
		КонецЕсли;
		
		Если ПустаяСтрока(ПутьСохраненияВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнен путь сохранения очищаемых версий'; en = 'Path to save purged versions is not specified'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьСохраненияУдаляемыхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			Если Не ПустаяСтрока(ПутьСохраненияВерсий) 
				И (Лев(ПутьСохраненияВерсий, 2) <> "\\" 
				ИЛИ Найти(ПутьСохраненияВерсий, ":") <> 0) Тогда
				
				ТекстОшибки = НСтр("ru = 'Путь сохранения очищаемых версий должен быть в формате UNC (\\servername\resource)'; en = 'The path to save purged versions must be in UNC format (\\servername\resource)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьСохраненияУдаляемыхВерсий", , Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ПолныйПутьТома = "";
			
			ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
			ИмяКаталогаТестовое = ПутьСохраненияВерсий;
			ИмяКаталогаТестовое = 
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаТестовое, ТипПлатформыСервера);
			ИмяКаталогаТестовое = ИмяКаталогаТестовое + "ПроверкаДоступа\";
			СоздатьКаталог(ИмяКаталогаТестовое);
			УдалитьФайлы(ИмяКаталогаТестовое);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Путь к каталогу сохранения очищаемых версий некорректен. Возможно учетная запись, от лица которой работает сервер 1С:Предприятия, не имеет прав доступа к каталогу:
				|
				|%1';
				|en = 'Path to save outdated versions is invalid. Perhaps the account used to run 1C:Enterprise server has no access to directory: 
				|
				|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				"ПутьСохраненияУдаляемыхВерсий",, Отказ);
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан ответственный за очистку неактивных версий'; en = 'User responsible for purging of inactive versions is not specified'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.СрокХраненияНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан срок хранения неактивных версий'; en = 'Retention term for inactive versions is not specified'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.СрокХраненияНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан тип оповещения ответственного за удаление неактивных версий'; en = 'Type of notification is not specified for the user responsible for purging of inactive versions'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = Перечисления.ТипыОповещения.Ознакомление Тогда
			Если Не ЗначениеЗаполнено(НаборКонстант.ПапкаДляХраненияОтчетовОбУдалении) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена папка для хранения отчетов об удалении'; en = 'Directory for reports on deletion is not specified'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					"НаборКонстант.ПапкаДляХраненияОтчетовОбУдалении",,
					Отказ);
			КонецЕсли;
			
		Иначе // email
			ПредставлениеПочтовогоАдреса = РаботаСФайламиВызовСервера.ПолучитьАдресДляОтправкиУведомленияПользователю(
				НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий);
			Если Не ЗначениеЗаполнено(ПредставлениеПочтовогоАдреса) Тогда
				ТекстОшибки = НСтр("ru = 'У ответственного за удаление неактивных версий не заполнен адрес электронной почты'; en = 'User responsible for purging of inactive versions has no email address specified'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсийПриИзменении(Элемент)
	
	ДоступноПоле = (НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = ПредопределенноеЗначение("Перечисление.ТипыОповещения.Ознакомление"));
	Элементы.ПапкаДляХраненияОтчетовОбУдалении.Доступность = ДоступноПоле;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстанты()
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьНеактивныеВерсииПриИзменении(Элемент)
	
	СохранитьКонстанты();
	ОбновитьИнтерфейс();
	
	Элементы.ГруппаНастроекОчистки.Доступность = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.ОчиститьСейчас.Доступность = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.ПутьСохраненияУдаляемыхВерсий.АвтоОтметкаНезаполненного = НаборКонстант.УдалятьНеактивныеВерсии;
	
КонецПроцедуры

&НаСервере
Функция СохранитьФормуИПолучитьЕстьТомаХраненияФайлов()
	
	Записать();
	Возврат ФайловыеФункции.ЕстьТомаХраненияФайлов();
	
КонецФункции

&НаКлиенте
Процедура ХранитьФайлыВТомахНаДискеПриИзменении(Элемент)
	
	Элементы.ОткрытьТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
	ЕстьТомаХраненияФайлов = СохранитьФормуИПолучитьЕстьТомаХраненияФайлов();
	ОбновитьИнтерфейс();
	
	
	Если ХранитьФайлыВТомахНаДискеНачальноеЗначение = Ложь И
		НаборКонстант.ХранитьФайлыВТомахНаДиске = Истина И
		Не ЕстьТомаХраненияФайлов Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
			|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.';
			|en = 'Storing files on the disk volumes is enabled but volumes are not yet specified. 
			|The program will keep storing files in the infobase until at least one storage volume is specified.'"));
		
	КонецЕсли;
	
	ХранитьФайлыВТомахНаДискеНачальноеЗначение = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаАвтоматическойЗагрузкиФайлов(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтоматическойЗагрузкиФайлов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаспознавания(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.ОбщиеНастройкиРаспознавания",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТомаХраненияФайлов(Команда)
	ОткрытьФорму("Справочник.ТомаХраненияФайлов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСейчас(Команда)
	ОткрытьФорму("Обработка.ОчисткаУстаревшихВерсийФайлов.Форма.Форма");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоставитьВсеКартинкиВОчередьРаспознавания()
	УстановитьПривилегированныйРежим(Истина);
	
	ЧислоКартинок = 0;
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Выборка.ТекущаяВерсияРасширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
			Объект.ЯзыкРаспознавания = "7"; // русско-английский
			Объект.Записать();
			ЧислоКартинок = ЧислоКартинок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Выборка.Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЧислоКартинок;
	
КонецФункции

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПолныйПутьWindows, ПолныйПутьLinux",
		НСтр("ru='Путь для перемещения устаревших версий'; en = 'Path to move outdated versions'"),
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПутьСохраненияУдаляемыхВерсийНачалоВыбораПродолжение",
		ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПутиWindowsLinux", ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийНачалоВыбораПродолжение(КодВозврата, Параметры) Экспорт 
	
	Если ТипЗнч(КодВозврата) = Тип("Структура") Тогда
		
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows = КодВозврата.ПолныйПутьWindows;
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux = КодВозврата.ПолныйПутьLinux;
		
		ПутьСохраненияУдаляемыхВерсий = СформироватьПутьWindowsLinux(НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
			НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	КонецЕсли;	

КонецПроцедуры	

Функция СформироватьПутьWindowsLinux(ПолныйПутьWindows, ПолныйПутьLinux)
	
	СтрокаПути = "";
	
	Если ЗначениеЗаполнено(ПолныйПутьWindows) Тогда
		СтрокаПути = СтрокаПути + ПолныйПутьWindows;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПолныйПутьLinux) Тогда
		
		Если ЗначениеЗаполнено(СтрокаПути) Тогда
			СтрокаПути = СтрокаПути + ";";
		КонецЕсли;	
		
		СтрокаПути = СтрокаПути + ПолныйПутьLinux;
	КонецЕсли;	
	
	Возврат СтрокаПути;
	
КонецФункции	

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти
