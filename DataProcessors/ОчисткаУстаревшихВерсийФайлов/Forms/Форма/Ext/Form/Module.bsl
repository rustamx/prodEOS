
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не включена опция ""Автоматически очищать устаревшие версии файлов"".'; en = 'Option is not enabled ""Automatically clean up old versions of files"".'"));
	КонецЕсли;
	
	СрокХраненияНеактивныхВерсий = РаботаСФайламиВызовСервера.ПолучитьСрокХраненияНеактивныхВерсий();  // в днях
	ЗаполнитьОписаниеСрока();
	
	ПутьСохраненияУдаляемыхВерсий = РаботаСФайламиВызовСервера.ПолучитьПутьСохраненияУдаляемыхВерсий();
	
	ЗаполнитьДиаграмму();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСамуюСтаруюДатуДоступа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания)) КАК ДатаПоследнегоОбращения
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияКВерсиямФайлов КАК ОбращенияКВерсиямФайлов
		|		ПО (ОбращенияКВерсиямФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ВерсииФайлов.Ссылка <> ВерсииФайлов.Владелец.ТекущаяВерсия
		|	И ВерсииФайлов.Владелец.НеУдалятьСтарыеВерсии = ЛОЖЬ
		|	И ВерсииФайлов.ФайлУдален = ЛОЖЬ";
				   
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МинимальнаяДата = ТаблицаРезультатаЗапроса[0].ДатаПоследнегоОбращения;
	Возврат МинимальнаяДата;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДиаграмму()
	
	ТекущаяДата = ТекущаяДата();
	МинимальнаяДата = ПолучитьСамуюСтаруюДатуДоступа();
	
	Если Не ЗначениеЗаполнено(МинимальнаяДата) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаНадпись;
		Возврат;
	КонецЕсли;	
	
	Диапазон = ТекущаяДата - МинимальнаяДата;
	ЧислоСтолбиков = 20;
	РазмерШага = Диапазон / ЧислоСтолбиков; // Время в секундах
	
	ТаблицаДат = Новый ТаблицаЗначений;
	
	ТаблицаДат.Колонки.Добавить("День", Новый ОписаниеТипов("Число"));
	ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Для Шаг = 0 По ЧислоСтолбиков Цикл
		
		День = Цел(Шаг * РазмерШага / (24 * 3600)); // Делим на 24 * 3600 - чтобы получить время в днях
		
		Если День <> 0 Тогда
			Строка = ТаблицаДат.Добавить();
			Строка.День = День;
			Строка.Дата = ТекущаяДата - Шаг * РазмерШага;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДат.Количество() = 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаНадпись;
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДат.День КАК День,
		|	ТаблицаДат.Дата КАК Дата
		|ПОМЕСТИТЬ ВременнаяТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	День,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДат.День,
		|	ЕСТЬNULL(СУММА(ВерсииФайлов.Размер), 0) КАК Размер
		|ИЗ
		|	ВременнаяТаблицаДат КАК ВременнаяТаблицаДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияКВерсиямФайлов КАК ОбращенияКВерсиямФайлов
		|			ПО (ОбращенияКВерсиямФайлов.Версия = ВерсииФайлов.Ссылка)
		|		ПО (ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания) <= ВременнаяТаблицаДат.Дата)
		|			И (ВерсииФайлов.ФайлУдален = ЛОЖЬ)
		|			И (ВерсииФайлов.Владелец.НеУдалятьСтарыеВерсии = ЛОЖЬ)
		|			И (ВерсииФайлов.Ссылка <> ВерсииФайлов.Владелец.ТекущаяВерсия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДат.День";
			
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Заполняем гистограмму
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= 1;
	Диаграмма.МинимальноеЗначение		= 0;
	Диаграмма.БазовоеЗначение			= 0;
	Диаграмма.ПропускатьБазовоеЗначение	= Истина;
	
	Диаграмма.Очистить();
	Элементы.Диаграмма.Заголовок = НСтр("ru= 'Размер версий(Мб) в зависимости от срока устаревания(дней)'; en = 'Versions size (MB), depending on the term of expiration (days)'");
	
	Серия = Диаграмма.Серии.Добавить(НСтр("ru= 'Очищается версий'; en = 'Versions cleaned'"));
	Серия.Текст = НСтр("ru= 'Очищается версий'; en = 'Versions cleaned'");
	Серия.Цвет = WebЦвета.Древесный;
	
	ЕстьДанные = Ложь;
	
	Для Каждого Строка Из ТаблицаРезультатаЗапроса Цикл
		
		Если Строка.Размер <> 0 Тогда
			
			ЕстьДанные = Истина;
		
			Точка = Диаграмма.Точки.Добавить(НСтр("ru= 'Очищается'; en = 'Cleared'"));
			ЗначениеТочки = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Строка.Размер / (1024 * 1024));
			Точка.Текст = Формат(Строка.День, "ЧГ=");
			Точка.Значение = Строка.День;
			Для Каждого Серия Из Диаграмма.Серии Цикл
				Диаграмма.УстановитьЗначение(Точка, Серия, ЗначениеТочки, , ЗначениеТочки + " Мб");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	Диаграмма.ПоложениеПодписей = ПоложениеПодписейКДиаграмме.КрайВнутри;
	Диаграмма.ОтображатьЛегенду = Ложь;
	
	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
	
	Диаграмма.Обновление = Истина;
	
	Если ЕстьДанные Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаДиаграмма;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаНадпись;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияНеактивныхВерсийПриИзменении(Элемент)
	
	ЗаполнитьОписаниеСрока();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеСрока()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВерсииФайлов.Размер), 0) КАК Размер,
		|	КОЛИЧЕСТВО(ВерсииФайлов.Ссылка) КАК ЧислоВерсий
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияКВерсиямФайлов КАК ОбращенияКВерсиямФайлов
		|		ПО (ОбращенияКВерсиямФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания) < &ДатаОтсечения
		|	И ВерсииФайлов.Ссылка <> ВерсииФайлов.Владелец.ТекущаяВерсия
		|	И ВерсииФайлов.Владелец.НеУдалятьСтарыеВерсии = ЛОЖЬ
		|	И ВерсииФайлов.ФайлУдален = ЛОЖЬ";
			
	Запрос.УстановитьПараметр("ДатаОтсечения", ТекущаяДата() - СрокХраненияНеактивныхВерсий * 86400);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Размер = РезультатЗапроса[0].Размер;
	ЧислоВерсий = РезультатЗапроса[0].ЧислоВерсий;
	ЧислоВерсийДляУдаления = ЧислоВерсий;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВерсииФайлов.Размер), 0) КАК Размер
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ФайлУдален = ЛОЖЬ";
				   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПроцентОтБазы = 0;
	РазмерВсегоВБазе = РезультатЗапроса[0].Размер;
	Если РазмерВсегоВБазе <> 0 Тогда
		ПроцентОтБазы = Размер / РазмерВсегоВБазе * 100;
	КонецЕсли;
	ПроцентОтБазыСтрока = Формат(ПроцентОтБазы, "ЧДЦ=0; ЧН=0");
	
	ОписаниеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Будет очищено файлов версий: %1 объемом: %2, что составляет %3'; en = 'Will be cleaned version files: %1 size: %2, that is %3'"),
		ЧислоВерсий,
		ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайлаДляКарточкиПапки(Размер), 
		ПроцентОтБазыСтрока);
		
	ОписаниеСрока = ОписаниеСрока +  НСтр("ru='% от общего объема всех файлов.'; en = '% of the total size of all files.'");
	
КонецПроцедуры

// Формирует отчет об удалении версий
Функция СформироватьОтчетОбУдалении(МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабМакет = Обработки.ОчисткаУстаревшихВерсийФайлов.ПолучитьМакет("МакетОтчета");
	
	ОбластьСтрока = ТабМакет.ПолучитьОбласть("Строка");
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего очищено: %1 версий из %2 файлов. Объем: %3 Мб. 
			|Версии сохранены в каталог ""%4"".';
			|en = 'Total cleaned: %1 versions from %2 files. Size: %3 MB. 
			|Version stored in the directory ""%4"".'"),
		ЧислоВерсий,
		ЧислоФайлов,
		ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВерсий / (1024 * 1024)),
		ИмяКаталогаСохранения);
	
	ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Описание = Описание;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ВладелецВерсии = Неопределено;
	Для Каждого ОписаниеВерсии Из МассивРезультатов Цикл
		
		Если ВладелецВерсии <> ОписаниеВерсии.ВладелецВерсии Тогда
			
			ВладелецВерсии = ОписаниеВерсии.ВладелецВерсии;
			
			ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
			ОбластьЗаголовок.Параметры.Описание = ОписаниеВерсии.ПредставлениеВладельца;
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ОбластьШапка = ТабМакет.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(ОбластьШапка);
			
		КонецЕсли;	
		
		ОбластьСтрока.Параметры.Автор = ОписаниеВерсии.Автор;
		ОбластьСтрока.Параметры.НомерВерсии = ОписаниеВерсии.НомерВерсии;
		ОбластьСтрока.Параметры.Комментарий = ОписаниеВерсии.Комментарий;
		ОбластьСтрока.Параметры.ДатаСоздания = ОписаниеВерсии.ДатаСоздания;
		ОбластьСтрока.Параметры.Размер = ОписаниеВерсии.Размер;
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;

	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(ТабДок);
	
	Возврат Отчет;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОчистку(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьСохраненияУдаляемыхВерсий) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан путь сохранения очищаемых версий'; en = 'You need to specify path to save cleaned versions'"), , "ПутьСохраненияУдаляемыхВерсий");
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СрокХраненияНеактивныхВерсий) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан срок хранения неактивных версий'; en = 'Retention term for inactive versions is not specified'"), , "СрокХраненияНеактивныхВерсий");
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОчисткуПродолжение", ЭтотОбъект);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Выполнить очистку устаревших версий?'; en = 'Clean up outdated versions?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОчисткуПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 100;
	ЧислоТактов = ЧислоВерсийДляУдаления / РазмерПорции + 1;
	
	ВладелецВерсии = Неопределено;
	ЧислоФайлов = 0;
	ЧислоВерсий = 0;
	РазмерВерсий = 0;
	
	МассивРезультатов = Новый Массив;
	
	Для НомерПорции = 0 По ЧислоТактов Цикл
		
		Процент = НомерПорции / ЧислоТактов * 100;
		Состояние(НСтр("ru='Выполняется очистка версий файлов с истекшим сроком хранения...'; en = 'Cleaning up expired file versions...'"), Процент);
		
		ВыполнитьУдалениеСервер(МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий);
		
	КонецЦикла;
	
	Состояние();
	
	// Вывод отчета в табличный документ
	Отчет = СформироватьОтчетОбУдалении(МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий);
	Отчет.Показать();
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУдалениеСервер(МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаОтсечения = ТекущаяДата() - СрокХраненияНеактивныхВерсий * 86400; // дней * 86400
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ВерсииФайлов.Ссылка,
		|	ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания) КАК ДатаПоследнегоОбращения,
		|	ВерсииФайлов.Владелец КАК ВладелецВерсии
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияКВерсиямФайлов КАК ОбращенияКВерсиямФайлов
		|		ПО (ОбращенияКВерсиямФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания) < &ДатаОтсечения
		|	И ВерсииФайлов.Ссылка <> ВерсииФайлов.Владелец.ТекущаяВерсия
		|	И ВерсииФайлов.Владелец.НеУдалятьСтарыеВерсии = ЛОЖЬ
		|	И ВерсииФайлов.ФайлУдален = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииФайлов.Владелец.Ссылка";
				   
	Запрос.УстановитьПараметр("ДатаОтсечения", ДатаОтсечения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяКаталогаСохранения = РаботаСФайламиВызовСервера.ПолучитьИмяКаталогаСохранения();
	
	Попытка
		
		СоздатьКаталог(ИмяКаталогаСохранения);
		
		ВерсияСсылка = Неопределено;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВерсияСсылка = Выборка.Ссылка;
			РаботаСФайламиВызовСервера.ВыполнитьУдалениеНеактивнойВерсииФайла(ВерсияСсылка, Выборка, ИмяКаталогаСохранения, 
				МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий);
			
		КонецЦикла;
		
	Исключение
		
		// Запись ошибки в журнал регистрации
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка очистки неактивных версий файлов'; en = 'Error purging inactive file versions'", Метаданные.ОсновнойЯзык.КодЯзыка), 
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СрокХраненияНеактивныхВерсий = Число(ЗначениеДиаграммы.Точка.Значение);
	ЗаполнитьОписаниеСрока();
	
КонецПроцедуры


