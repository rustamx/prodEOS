#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Обработки.РасчетПравДоступаПослеОбновления.ВыполненаСОшибками() Тогда
		ПереключитьСтраницуВыполненоСОшибками();
		
	ИначеЕсли Обработки.РасчетПравДоступаПослеОбновления.Выполнена() Тогда
		ПереключитьСтраницуВыполнено();
		
	Иначе
		
		Обработки.РасчетПравДоступаПослеОбновления.Инициализировать();
		Обработки.РасчетПравДоступаПослеОбновления.ОчиститьСообщенияФоновогоЗадание();
		
		// Инициализацция шаг 1.
		КоличествоБылоШаг1 = Обработки.РасчетПравДоступаПослеОбновления.КоличествоДескрипторовКУдалению();
		
		// Инициализация шаг 2.
		Для Каждого ТипОбъекта Из Обработки.РасчетПравДоступаПослеОбновления.ТипыШаг2() Цикл
			НоваяСтрока = ОбработанныеОбъектыШаг2.Добавить();
			НоваяСтрока.ТипОбъекта = ТипОбъекта;
			НоваяСтрока.КоличествоБыло = Обработки.РасчетПравДоступаПослеОбновления.КоличествоОбъектовКОбработке(ТипОбъекта);
		КонецЦикла;
		
		// Инициализация шаг 3.
		Для Каждого ТипОбъекта Из Обработки.РасчетПравДоступаПослеОбновления.ТипыШаг3() Цикл
			НоваяСтрока = ОбработанныеОбъектыШаг3.Добавить();
			НоваяСтрока.ТипОбъекта = ТипОбъекта;
			НоваяСтрока.КоличествоБыло = Обработки.РасчетПравДоступаПослеОбновления.КоличествоОбъектовКОбработке(ТипОбъекта);
		КонецЦикла;
		
		ПереключитьСтраницуШаг1();
		
		ТекущееСостояние = Обработки.РасчетПравДоступаПослеОбновления.ТекущееСостояние();
		Если Обработки.РасчетПравДоступаПослеОбновления.ТекущееСостояниеСоответсвует("ВыполненШаг1", ТекущееСостояние)
			Или Обработки.РасчетПравДоступаПослеОбновления.ТекущееСостояниеСоответсвует("ВыполняетсяШаг2", ТекущееСостояние) Тогда
			ПереключитьСтраницуШаг2();
			
		ИначеЕсли Обработки.РасчетПравДоступаПослеОбновления.ТекущееСостояниеСоответсвует("ВыполненШаг2", ТекущееСостояние)
			Или Обработки.РасчетПравДоступаПослеОбновления.ТекущееСостояниеСоответсвует("ВыполняетсяШаг3", ТекущееСостояние) Тогда
			ПереключитьСтраницуШаг3();
			
		КонецЕсли;
		
		ОбновитьПрогресс();
		
	КонецЕсли;
	
	СброситьРазмерыИПоложениеОкна();
	
	Если Обработки.РасчетПравДоступаПослеОбновления.ВходВПрограммуРазрешен() Тогда
		Элементы.РазрешитьВходВПрограмму.Видимость = Ложь;
		Элементы.ДекорацияВходВПрограммуРазерешен.Видимость = Истина;
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеФоновогоЗадания", 1, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НадписьВыполненоСОшибкамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(
		"СобытиеЖурналаРегистрации",
		НСтр("ru = 'Расчет прав доступа после обновления'; en = 'Recalculation of permissions after upgrade'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РазрешитьВходВПрограмму(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьВходВПрограммуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Пересчет прав ещё не завершен, но с программой уже можно работать.
		|Будет снят монопольный режим и блокировка сеансов.
		|
		|Продолжить?';
		|en = 'Recalculation of rights is not yet complete, but it is possible to work with application.
		|Exclusive mode and session lock will be turned off.
		|
		|Continue?'");
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВходВПрограммуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РазрешитьВходВПрограммуСервер();
	РезультатРаботы = "ВходВПрограммуРазрешен";
	ВыполнитьЗакрытие();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РазрешитьВходВПрограммуСервер()
	
	Обработки.РасчетПравДоступаПослеОбновления.УстановитьСостояние("ВыполняетсяШаг3ВходВПрограммуРазрешен");
	СоединенияИБ.РазрешитьРаботуПользователей();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВидимостьСтраниц()
	
	Элементы.СтраницаШаг1.Видимость = Ложь;
	Элементы.СтраницаШаг2.Видимость = Ложь;
	Элементы.СтраницаШаг3.Видимость = Ложь;
	Элементы.СтраницаОбновлениеВыполнено.Видимость = Ложь;
	Элементы.СтраницаОбновлениеВыполненоСОшибками.Видимость = Ложь;
	
	Элементы.ЗакрытьВыполнено.КнопкаПоУмолчанию = Ложь;
	Элементы.ЗакрытьВыполненоСОшибками.КнопкаПоУмолчанию = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницуШаг1()
	
	ОчиститьВидимостьСтраниц();
	
	Элементы.СтраницаШаг1.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг1;
	
	ФоновоеЗадание = Обработки.РасчетПравДоступаПослеОбновления.ЗапуститьФоновоеЗадание();
	ФоновоеЗаданиеУникальныйИдентификатор = ФоновоеЗадание.УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницуШаг2()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг2
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг3
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполнено
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполненоСОшибками Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВидимостьСтраниц();
	
	Элементы.СтраницаШаг2.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг2;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницуШаг3()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг3
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполнено
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполненоСОшибками Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВидимостьСтраниц();
	
	Элементы.СтраницаШаг3.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг3;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницуВыполнено()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполнено
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполненоСОшибками Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВидимостьСтраниц();
	
	Элементы.СтраницаОбновлениеВыполнено.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполнено;
	Элементы.ЗакрытьВыполнено.КнопкаПоУмолчанию = Истина;
	
	РезультатРаботы = "Завершено";
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницуВыполненоСОшибками()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполнено
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбновлениеВыполненоСОшибками Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВидимостьСтраниц();
	
	Элементы.СтраницаОбновлениеВыполненоСОшибками.Видимость = Истина;
	Элементы.ЗакрытьВыполненоСОшибками.КнопкаПоУмолчанию = Истина;
	
	РезультатРаботы = "Завершено";
	Обработки.РасчетПравДоступаПослеОбновления.УстановитьСостояние("Выполнено", Неопределено, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПрогресс()
	
	КоличествоОбработано = 0;
	КоличествоБыло = 0;
	ОставшеесяВремя = 0;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		КоличествоОбработано = КоличествоОбработаноШаг1;
		КоличествоБыло = КоличествоБылоШаг1;
		ОставшеесяВремя = ОставшеесяВремя(
			КоличествоОбработаноШаг1,
			КоличествоБылоШаг1,
			ВремяОбработкиШаг1);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Для Каждого Строка Из ОбработанныеОбъектыШаг2 Цикл
			
			Строка.ОставшеесяВремя = ОставшеесяВремя(
				Строка.КоличествоОбработано,
				Строка.КоличествоБыло,
				Строка.ВремяОбработки);
			
			Строка.НадписьОбработано = НадписьОбработано(Строка.КоличествоОбработано, Строка.КоличествоБыло);
			Строка.Прогресс = Прогресс(Строка.КоличествоОбработано, Строка.КоличествоБыло);
			Строка.НадписьОставшеесяВремя = НадписьОставшеесяВремя(Строка.ОставшеесяВремя);
			
			КоличествоБыло = КоличествоБыло + Строка.КоличествоБыло;
			КоличествоОбработано = КоличествоОбработано + Строка.КоличествоОбработано;
			Если ОставшеесяВремя = -1 Или Строка.ОставшеесяВремя = -1 Тогда
				ОставшеесяВремя = -1;
			Иначе
				ОставшеесяВремя = ОставшеесяВремя + Строка.ОставшеесяВремя;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Для Каждого Строка Из ОбработанныеОбъектыШаг3 Цикл
			
			Строка.ОставшеесяВремя = ОставшеесяВремя(
				Строка.КоличествоОбработано,
				Строка.КоличествоБыло,
				Строка.ВремяОбработки);
			
			Строка.НадписьОбработано = НадписьОбработано(Строка.КоличествоОбработано, Строка.КоличествоБыло);
			Строка.Прогресс = Прогресс(Строка.КоличествоОбработано, Строка.КоличествоБыло);
			Строка.НадписьОставшеесяВремя = НадписьОставшеесяВремя(Строка.ОставшеесяВремя);
			
			КоличествоБыло = КоличествоБыло + Строка.КоличествоБыло;
			КоличествоОбработано = КоличествоОбработано + Строка.КоличествоОбработано;
			Если ОставшеесяВремя = -1 Или Строка.ОставшеесяВремя = -1 Тогда
				ОставшеесяВремя = -1;
			Иначе
				ОставшеесяВремя = ОставшеесяВремя + Строка.ОставшеесяВремя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НадписьОбработано = НадписьОбработано(КоличествоОбработано, КоличествоБыло);
	Прогресс = Прогресс(КоличествоОбработано, КоличествоБыло);
	НадписьОставшеесяВремя = НадписьОставшеесяВремя(ОставшеесяВремя);
	
КонецПроцедуры

&НаСервере
Функция ОставшеесяВремяСтрокой(ОставшеесяВремя) Экспорт
	
	Возврат "5 часов";
	
	//Если ТипЗнч(Длительность) <> Тип("Число") Тогда
	//	Возврат "";
	//КонецЕсли;
	//
	//Если Длительность = 0 Тогда
	//	Возврат НСтр("ru = '0 часов'");
	//КонецЕсли;
	//
	//ЧислоДней = Цел(Длительность);
	//ЧислоЧасов = Окр((Длительность - ЧислоДней) * 24);
	//
	//ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ЧислоДней);
	//ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ЧислоЧасов);
	//
	//Если ЧислоДней > 0 И ЧислоЧасов > 0 Тогда
	//	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = '%1 %2 и %3 %4'"),
	//		Строка(ЧислоДней),
	//		ПодписьДней,
	//		Строка(ЧислоЧасов),
	//		ПодписьЧасов);
	//ИначеЕсли ЧислоДней > 0 Тогда
	//	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		"%1 %2",
	//		Строка(ЧислоДней),
	//		ПодписьДней);
	//ИначеЕсли ЧислоЧасов > 0 Тогда
	//	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		"%1 %2",
	//		Строка(ЧислоЧасов),
	//		ПодписьЧасов);
	//Иначе
	//	Возврат НСтр("ru = 'Менее 1 часа'");
	//КонецЕсли;
	
КонецФункции

&НаСервере
Функция НадписьОбработано(Знач ТекущееОбработано, ТекущееБыло)
	
	Если ТекущееОбработано > ТекущееБыло Тогда
		ТекущееОбработано = ТекущееБыло;
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = '%1 из %2'; en = '%1 of %2'"), ТекущееОбработано, ТекущееБыло);
	
КонецФункции

&НаСервере
Функция Прогресс(Знач ТекущееОбработано, ТекущееБыло)
	
	Если ТекущееОбработано > ТекущееБыло Тогда
		ТекущееОбработано = ТекущееБыло;
	КонецЕсли;
	
	Если ТекущееБыло = 0 Тогда
		Возврат 100;
	КонецЕсли;
	
	Возврат ТекущееОбработано * 100 / ТекущееБыло;
	
КонецФункции

&НаСервере
Функция ОставшеесяВремя(ТекущееОбработано, ТекущееБыло, ВремяОбработки)
	
	Если ТекущееОбработано >= ТекущееБыло Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТекущееОбработано = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	ОбъектовКОбработке = ТекущееБыло - ТекущееОбработано;
	ВремяОбработкиОдного = ВремяОбработки / ТекущееОбработано;
	ОставшеесяВремя = ОбъектовКОбработке * ВремяОбработкиОдного;
	
	Возврат ОставшеесяВремя;
	
КонецФункции

&НаСервере
Функция НадписьОставшеесяВремя(Знач ТекущееОставшеесяВремя)
	
	Если ТекущееОставшеесяВремя = 0 Тогда
		Возврат НСтр("ru = 'выполнено'; en = 'completed'");
	ИначеЕсли ТекущееОставшеесяВремя = -1 Тогда
		Возврат НСтр("ru = 'вычисляется...'; en = 'computing...'");
	КонецЕсли;
	
	// Преобразуем в секунды.
	ТекущееОставшеесяВремя = ТекущееОставшеесяВремя / 1000;
	
	// Считаем дни.
	ОсталосьДней = Цел(ТекущееОставшеесяВремя / 86400);
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ОсталосьДней);
	ТекущееОставшеесяВремя = ТекущееОставшеесяВремя - ОсталосьДней * 86400;
	
	// Считаем часы.
	ОсталосьЧасов = Цел(ТекущееОставшеесяВремя / 3600);
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ОсталосьЧасов);
	ТекущееОставшеесяВремя = ТекущееОставшеесяВремя - ОсталосьЧасов * 3600;
	
	// Считаем минуты.
	ОсталосьМинут = Цел(ТекущееОставшеесяВремя / 60);
	ПодписьМинут = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(ОсталосьМинут);
	ТекущееОставшеесяВремя = ТекущееОставшеесяВремя - ОсталосьМинут * 60;
	
	// Считаем секунды.
	ОсталосьСекунд = Цел(ТекущееОставшеесяВремя);
	ПодписьСекунд = ДелопроизводствоКлиентСервер.ПолучитьПодписьСекунд(ОсталосьСекунд);
	
	ПодписьСтрокой = Новый Массив;
	Если ОсталосьДней <> 0 Тогда
		ПодписьСтрокой.Добавить(ОсталосьДней);
		ПодписьСтрокой.Добавить(ПодписьДней);
		Если ОсталосьЧасов <> 0 Тогда
			ПодписьСтрокой.Добавить(ОсталосьЧасов);
			ПодписьСтрокой.Добавить(ПодписьЧасов);
		КонецЕсли;
	ИначеЕсли ОсталосьЧасов <> 0 Тогда
		ПодписьСтрокой.Добавить(ОсталосьЧасов);
		ПодписьСтрокой.Добавить(ПодписьЧасов);
		Если ОсталосьМинут <> 0 Тогда
			ПодписьСтрокой.Добавить(ОсталосьМинут);
			ПодписьСтрокой.Добавить(ПодписьМинут);
		КонецЕсли;
	ИначеЕсли ОсталосьМинут <> 0 Тогда
		ПодписьСтрокой.Добавить(ОсталосьМинут);
		ПодписьСтрокой.Добавить(ПодписьМинут);
		Если ОсталосьСекунд <> 0 Тогда
			ПодписьСтрокой.Добавить(ОсталосьСекунд);
			ПодписьСтрокой.Добавить(ПодписьСекунд);
		КонецЕсли;
	ИначеЕсли ОсталосьСекунд <> 0 Тогда
		ПодписьСтрокой.Добавить(ОсталосьСекунд);
		ПодписьСтрокой.Добавить(ПодписьСекунд);
	Иначе
		ПодписьСтрокой.Добавить(НСтр("ru = 'менее 1 секунды'; en = 'less than 1 second'"));
	КонецЕсли;
	
	ПодписьСтрокой = СтрСоединить(ПодписьСтрокой, " ");
	
	Возврат ПодписьСтрокой;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеФоновогоЗадания()
	
	Если ОбновитьДанныеФоновогоЗаданияНаСервере() Тогда
		ОтключитьОбработчикОжидания("ОбновитьДанныеФоновогоЗадания");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытие()
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть(РезультатРаботы);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеФоновогоЗаданияНаСервере()
	
	Результат = Ложь;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗаданиеУникальныйИдентификатор);
	Если ФоновоеЗадание <> Неопределено Тогда
		
		Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			
			Текст = Сообщение.Текст;
			Если СтрНачинаетсяС(Текст, "{РасчетПравДоступаПослеОбновленияШаг1}") Тогда
				
				Текст = СтрЗаменить(Текст, "{РасчетПравДоступаПослеОбновленияШаг1}", "");
				ВремяОбработки = Число(Текст);
				
				КоличествоОбработаноШаг1 = КоличествоОбработаноШаг1 + 1;
				ВремяОбработкиШаг1 = ВремяОбработки(ВремяОбработкиШаг1, ВремяОбработки);
				
			ИначеЕсли СтрНачинаетсяС(Текст, "{РасчетПравДоступаПослеОбновленияШаг2}") Тогда
				
				ПереключитьСтраницуШаг2();
				
				Текст = СтрЗаменить(Текст, "{РасчетПравДоступаПослеОбновленияШаг2}", "");
				МассивТекста = СтрРазделить(Текст, "/");
				ТипОбъекта = Тип(МассивТекста[0]);
				ВремяОбработки = Число(МассивТекста[1]);
				
				Для Каждого Строка Из ОбработанныеОбъектыШаг2 Цикл
					Если Строка.ТипОбъекта = ТипОбъекта Тогда
						Строка.КоличествоОбработано = Строка.КоличествоОбработано + 1;
						Строка.ВремяОбработки = ВремяОбработки(Строка.ВремяОбработки, ВремяОбработки);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли СтрНачинаетсяС(Текст, "{РасчетПравДоступаПослеОбновленияШаг3}") Тогда
				
				ПереключитьСтраницуШаг3();
				
				Текст = СтрЗаменить(Текст, "{РасчетПравДоступаПослеОбновленияШаг3}", "");
				МассивТекста = СтрРазделить(Текст, "/");
				ТипОбъекта = Тип(МассивТекста[0]);
				ВремяОбработки = Число(МассивТекста[1]);
				Дата = Неопределено;
				Если МассивТекста.Количество() > 2 Тогда
					Дата = Дата(МассивТекста[2]);
				КонецЕсли;
				
				Для Каждого Строка Из ОбработанныеОбъектыШаг3 Цикл
					Если Строка.ТипОбъекта = ТипОбъекта Тогда
						Строка.КоличествоОбработано = Строка.КоличествоОбработано + 1;
						Строка.ВремяОбработки = ВремяОбработки(Строка.ВремяОбработки, ВремяОбработки);
						Если ЗначениеЗаполнено(Дата) Тогда
							Строка.ДатаОбработано = Дата;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьПрогресс();
		
	Иначе
		
		ПереключитьСтраницуШаг1();
		
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Если Обработки.РасчетПравДоступаПослеОбновления.ВыполненаСОшибками() Тогда
			
			Результат = Истина;
			ПереключитьСтраницуВыполненоСОшибками();
			
		ИначеЕсли Обработки.РасчетПравДоступаПослеОбновления.Выполнена() Тогда
			
			Результат = Истина;
			ПереключитьСтраницуВыполнено();
			
		Иначе
			
			ПереключитьСтраницуШаг1();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьЗакрытие", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить(ИмяФормы, "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ВремяОбработки(ВремяОбработкиНакопленное, ВремяОбработкиОчередное)
	
	ВремяОбработки = ВремяОбработкиНакопленное + ВремяОбработкиОчередное;
	
	Возврат ВремяОбработки;
	
КонецФункции

#КонецОбласти
