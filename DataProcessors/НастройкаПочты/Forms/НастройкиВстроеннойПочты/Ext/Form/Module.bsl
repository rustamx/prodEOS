////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПоказатьУправлениеФО") Тогда
		ИспользоватьВстроеннуюПочту = РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеВстроеннойПочты();
		НачальноеЗначениеИспользоватьВстроеннуюПочту = ИспользоватьВстроеннуюПочту;
		Элементы.Страницы.Доступность = ИспользоватьВстроеннуюПочту;
	Иначе
		Элементы.ИспользоватьВстроеннуюПочту.Видимость = Ложь;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УчетныеЗаписи.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	ЗаполнитьНастройкиОповещений();
	
	ЗагрузитьПравило(Параметры);	
	
	ЗагрузитьНастройки();
	
	ОбновитьПараметрыУсловногоОформления();
	
	Для каждого КодировкаЭлемент Из РаботаСоСтроками.ПолучитьСписокКодировок() Цикл
		
		Элементы.КодировкаИсходящихПисем.СписокВыбора.Добавить(
			КодировкаЭлемент.Значение,
			КодировкаЭлемент.Представление);
			
		Элементы.КодировкаПриСохраненииПисем.СписокВыбора.Добавить(
			КодировкаЭлемент.Представление,
			КодировкаЭлемент.Представление);
			
	КонецЦикла;
	
	ОтобразитьФлаг();
	
	ОткрытьЗакладкуПисьмо = Ложь;
	Если Параметры.Свойство("ОткрытьЗакладкуПисьмо") Тогда
		ОткрытьЗакладкуПисьмо = Параметры.ОткрытьЗакладкуПисьмо;
	КонецЕсли;	
	
	ИмяТекущейСтраницы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиВстроеннойПочты", "ТекущаяЗакладка", 
		Элементы.СтраницаУчетныеЗаписи.Имя);
		
	Если ОткрытьЗакладкуПисьмо Тогда	
		ИмяТекущейСтраницы = "СтраницаПисьмо";
	КонецЕсли;	
		
	Если ИмяТекущейСтраницы	 = "СтраницаУчетныеЗаписи" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУчетныеЗаписи;
	ИначеЕсли ИмяТекущейСтраницы	 = "СтраницаПисьмо" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПисьмо;
	ИначеЕсли ИмяТекущейСтраницы	 = "СтраницаСписокПисем" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПисем;
	КонецЕсли;	
	
	СписокАвтоподбора.Параметры.УстановитьЗначениеПараметра("Владелец", ТекущийПользователь);
	
	Элементы.ВремяПроверкиНовых.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.НастройкаОповещений.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ГруппаДанные.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ТаблицаУсловия.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ТаблицаИсключения.Доступность = ПроверятьНаличиеНовыхПисем;
	
	Если ПоказыватьСписокОповещений И ПроверятьНаличиеНовыхПисем Тогда
		Элементы.ТаблицаУсловия.Доступность = Истина;
		Элементы.ТаблицаИсключения.Доступность = Истина;
	Иначе 
		Элементы.ТаблицаУсловия.Доступность = Ложь;
		Элементы.ТаблицаИсключения.Доступность = Ложь;
	КонецЕсли;
	
	НастройкаРежимМоиПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьСпискаАвтоподбора();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты"
		И Источник <> ЭтаФорма Тогда
		
		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки") Тогда
			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображениеОбластиЧтения") Тогда
			ОтображениеОбластиЧтения = Параметр.ОтображениеОбластиЧтения;
		КонецЕсли;
		
		Если Параметр.Свойство("РежимМоиПапки") Тогда
			РежимМоиПапки = Параметр.РежимМоиПапки;
		КонецЕсли;
		
		Если Параметр.Свойство("НастройкиАвтообновления") Тогда
			НастройкиАвтообновления = Параметр.НастройкиАвтообновления;
		КонецЕсли;
		
		Если Параметр.Свойство("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям") Тогда
			ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям = Параметр.ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьЗакрытие", 
		ЭтотОбъект);

	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'"),
		РежимДиалогаВопрос.ДаНетОтмена,,
		КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытие(Ответ, Параметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		Если ИспользоватьВстроеннуюПочту <> НачальноеЗначениеИспользоватьВстроеннуюПочту Тогда
			ОтменаСервер();
		КонецЕсли;
		Модифицированность = Ложь;
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОтображениеОбластиЧтенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриВыбореВходящегоПисьмаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиПриАктивизацииСтроки(Элемент)
	
	Если Не ЗначениеЗаполнено(Элементы.УчетныеЗаписи.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОсновнаяУчетнаяЗапись.Пометка =
		(Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка = ОсновнаяУчетнаяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтложеннуюОтправкуПисемПриИзменении(Элемент)
	
	Если ИспользоватьОтложеннуюОтправкуПисем Тогда
		Элементы.Задержка.Доступность = Истина;
		Элементы.НадписьСекунд.Доступность = Истина;
	Иначе
		Задержка = 0;
		Элементы.Задержка.Доступность = Ложь;
		Элементы.НадписьСекунд.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаСтрокиПриФорматированииПриИзменении(Элемент)
	
	Если ШиринаСтрокиПриФорматировании < 30 И ШиринаСтрокиПриФорматировании <> 0 Тогда
		ШиринаСтрокиПриФорматировании = 30;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаСтрокиПриСохраненииПриИзменении(Элемент)
	
	Если ШиринаСтрокиПриСохранении < 30 И ШиринаСтрокиПриСохранении <> 0 Тогда
		ШиринаСтрокиПриСохранении = 30;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручнуюПриИзменении(Элемент)
	
	Если ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Ложь;
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения = Ложь;
	Иначе
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьДляНовыхПисемПриИзменении(Элемент)
	
	ПодписьДляПисемПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(ПодписьДляНовыхПисем) И Не ЗначениеЗаполнено(ПодписьПриОтветеИПересылке) Тогда
		ПодписьПриОтветеИПересылке = ПодписьДляНовыхПисем;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПриОтветеИПересылкеПриИзменении(Элемент)
	
	ПодписьДляПисемПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(ПодписьПриОтветеИПересылке) И Не ЗначениеЗаполнено(ПодписьДляНовыхПисем) Тогда
		ПодписьДляНовыхПисем = ПодписьПриОтветеИПересылке;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтОтображенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШрифтОтображения = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтОтображенияПриИзменении(Элемент)
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	
	Если ПроверятьНаличиеНовыхПисем И ВремяПроверкиНовыхПисем = 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Укажите время проверки прихода новых писем.'; en = 'Specify time interval to check for new emails.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ВремяПроверкиНовыхПисем");
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	НастройкиВстроеннойПочты = Новый Структура;
	НастройкиВстроеннойПочты.Вставить("ДействиеПриВыбореВходящегоПисьма", ДействиеПриВыбореВходящегоПисьма);
	НастройкиВстроеннойПочты.Вставить("ОтображатьУдаленныеПисьмаИПапки", ОтображатьУдаленныеПисьмаИПапки);
	НастройкиВстроеннойПочты.Вставить("ОтображениеОбластиЧтения", ОтображениеОбластиЧтения);
	НастройкиВстроеннойПочты.Вставить("ВидСписка", ВидСписка);
	НастройкиВстроеннойПочты.Вставить("РежимМоиПапки", РежимМоиПапки);
	НастройкиВстроеннойПочты.Вставить("НеПредлагатьСоздатьПравилоПриПеретаскивании", НеПредлагатьСоздатьПравилоПриПеретаскивании);
	НастройкиВстроеннойПочты.Вставить("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения);
	
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.ОК);
	
	Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗапись(Команда)
	
	Если Элементы.УчетныеЗаписи.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана учетная запись'; en = 'The account is not selected'"));
		Возврат;
	КонецЕсли;
	
	Если ОсновнаяУчетнаяЗапись = Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка Тогда
		ОсновнаяУчетнаяЗапись = Неопределено;
	Иначе
		ОсновнаяУчетнаяЗапись = Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОсновнаяУчетнаяЗапись",
		ОсновнаяУчетнаяЗапись);
	
	Элементы.ОсновнаяУчетнаяЗапись.Пометка =
		(Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка = ОсновнаяУчетнаяЗапись);
	
	ОбновитьПараметрыУсловногоОформления();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Команда)
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.НастройкаПроверкиНовыхПисем", , , , , , ,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаСервере
Процедура ЗагрузитьНастройки()
	
	АвтовыборКодировкиИсходящихПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтовыборКодировкиИсходящихПисем");
	
	КодировкаИсходящихПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("КодировкаИсходящихПисем");
	
	Если ПустаяСтрока(КодировкаИсходящихПисем) Тогда
		КодировкаИсходящихПисем = "utf-8";
	КонецЕсли;
	
	ПериодАвтоматическогоСохраненияНеотправленныхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПериодАвтоматическогоСохраненияНеотправленныхПисем");
	
	ИспользоватьАвтосохранениеНеотправленныхПисем = (ПериодАвтоматическогоСохраненияНеотправленныхПисем > 0);
	Если ИспользоватьАвтосохранениеНеотправленныхПисем Тогда
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Истина;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Истина;
	Иначе
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Ложь;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Ложь;
	КонецЕсли;
	
	ШиринаСтрокиПриФорматировании =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШиринаСтрокиПриФорматировании");
		
	ЗначениеКодировкаПриСохраненииПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("КодировкаПриСохраненииПисем");
		
	КодировкаПриСохраненииПисем =
		РаботаСоСтроками.ПолучитьПредставлениеКодировки(ЗначениеКодировкаПриСохраненииПисем);
		
	ШиринаСтрокиПриСохранении =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШиринаСтрокиПриСохранении");

	ПодписьДляНовыхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьДляНовыхПисем");
	
	ПодписьПриОтветеИПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
	
	ОсновнаяУчетнаяЗапись =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОсновнаяУчетнаяЗапись");
	
	ВставлятьТекстИсходногоПисьмаПриОтвете =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ВставлятьТекстИсходногоПисьмаПриОтвете");
	
	ОтвечатьСФайлами =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтвечатьСФайлами");
	
	ОсновнойФлаг =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОсновнойФлаг");
		
	ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям = 	
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям");	
		
	ОткрыватьФайлыИсходящегоПисьмаНаРедактирование =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
		
	ДобавлятьАвтораИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДобавлятьАвтораИсходногоПисьмаПриПересылке");
	
	ДобавлятьПолучателейИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДобавлятьПолучателейИсходногоПисьмаПриПересылке");
	
	ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке");
	
	ДействиеПриВыбореВходящегоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДействиеПриВыбореВходящегоПисьма");
	
	ОтображатьУдаленныеПисьмаИПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
		
	ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов");
		
	СпособРедактированияТекстаПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("СпособРедактированияТекстаПисьма");
		
	ЧислоСимволовПисьмаДляСпособаРедактирования =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ЧислоСимволовПисьмаДляСпособаРедактирования");
		
	ОтображениеОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображениеОбластиЧтения");
	
	Если Не ЗначениеЗаполнено(ОтображениеОбластиЧтения) Тогда
		ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
	КонецЕсли;
	
	РежимМоиПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	НастройкиАвтообновления =
		Автообновление.ПолучитьНастройкиАвтообновленияФормы(
			"ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаСписка");
			
	НеПредлагатьСоздатьПравилоПриПеретаскивании =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("НеПредлагатьСоздатьПравилоПриПеретаскивании");
		
	ФорматНовыхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ФорматНовыхПисем");
		
	ФорматОтветныхИПересылаемыхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ФорматОтветныхИПересылаемыхПисем");
		
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения");
	Если ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Ложь;
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения = Ложь;
	Иначе
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Истина;
	КонецЕсли;
	
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтоматическиСохранятьВерсииНеотправленногоПисьма");
	
	Задержка = РегистрыСведений.НастройкиОтложеннойОтправкиПисем.ПолучитьНастройку(ТекущийПользователь);
	ИспользоватьОтложеннуюОтправкуПисем = (Задержка > 0);
	Если ИспользоватьОтложеннуюОтправкуПисем Тогда
		Элементы.Задержка.Доступность = Истина;
		Элементы.НадписьСекунд.Доступность = Истина;
	Иначе
		Элементы.Задержка.Доступность = Ложь;
		Элементы.НадписьСекунд.Доступность = Ложь;
	КонецЕсли;
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		Элементы.ИспользоватьАвтосохранениеНеотправленныхПисем.Доступность = Ложь;
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Ложь;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Ложь;
	КонецЕсли;
	
	ВидСписка = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ВидСписка");
	Если Не ЗначениеЗаполнено(ВидСписка) Тогда
		ВидСписка = "Обычный";
	КонецЕсли;
	ВидСпискаПредставление = ПолучитьПредставлениеВидаСписка(ВидСписка);
	
	ШрифтОтображения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	
	ОтображатьДругиеШрифтыВПисьмах =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьДругиеШрифтыВПисьмах");
		
	ИспользоватьСвойСписокДляАвтоподбора =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ИспользоватьСвойСписокДляАвтоподбора");
		
	ВремяПроверкиНовыхПисем = 
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ВремяПроверкиНовыхПисем");
		
	ПроверятьНаличиеНовыхПисем = 
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПроверятьНаличиеНовыхПисем");
		
	Элементы.ДекорацияМинут.Заголовок = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(
		ВремяПроверкиНовыхПисем);
    Элементы.НастройкаОповещений.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ГруппаДанные.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ТаблицаУсловия.Доступность = ПроверятьНаличиеНовыхПисем;
		
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	МассивСтруктур = Новый Массив;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"АвтовыборКодировкиИсходящихПисем",
		АвтовыборКодировкиИсходящихПисем);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"КодировкаИсходящихПисем",
		КодировкаИсходящихПисем);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная Тогда
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПериодАвтоматическогоСохраненияНеотправленныхПисем",
			ПериодАвтоматическогоСохраненияНеотправленныхПисем);
		
	КонецЕсли;
	
	ЗначениеКодировкаПриСохраненииПисем = РаботаСоСтроками.ПолучитьКодировкуПоПредставлению(КодировкаПриСохраненииПисем);
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"КодировкаПриСохраненииПисем",
		ЗначениеКодировкаПриСохраненииПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ШиринаСтрокиПриФорматировании",
		ШиринаСтрокиПриФорматировании);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ШиринаСтрокиПриСохранении",
		ШиринаСтрокиПриСохранении);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПодписьДляНовыхПисем",
		ПодписьДляНовыхПисем);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПодписьПриОтветеИПересылке",
		ПодписьПриОтветеИПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ВставлятьТекстИсходногоПисьмаПриОтвете",
		ВставлятьТекстИсходногоПисьмаПриОтвете);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтвечатьСФайлами",
		ОтвечатьСФайлами);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОсновнойФлаг",
		ОсновнойФлаг);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям",
		ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям);	
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование",
		ОткрыватьФайлыИсходящегоПисьмаНаРедактирование);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДобавлятьАвтораИсходногоПисьмаПриПересылке",
		ДобавлятьАвтораИсходногоПисьмаПриПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДобавлятьПолучателейИсходногоПисьмаПриПересылке",
		ДобавлятьПолучателейИсходногоПисьмаПриПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке",
		ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДействиеПриВыбореВходящегоПисьма",
		ДействиеПриВыбореВходящегоПисьма);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображатьУдаленныеПисьмаИПапки",
		ОтображатьУдаленныеПисьмаИПапки);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображениеОбластиЧтения",
		ОтображениеОбластиЧтения);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
		ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"РежимМоиПапки",
		РежимМоиПапки);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"НеПредлагатьСоздатьПравилоПриПеретаскивании",
		НеПредлагатьСоздатьПравилоПриПеретаскивании);
		
	Если Не ЗначениеЗаполнено(СпособРедактированияТекстаПисьма) Тогда
		СпособРедактированияТекстаПисьма = Перечисления.СпособРедактированияТекстаПисьма.ПолеВвода;
	КонецЕсли;	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"СпособРедактированияТекстаПисьма",
		СпособРедактированияТекстаПисьма);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ЧислоСимволовПисьмаДляСпособаРедактирования",
		ЧислоСимволовПисьмаДляСпособаРедактирования);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную",
		ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения);
	
	РегистрыСведений.НастройкиОтложеннойОтправкиПисем.СохранитьНастройку(ТекущийПользователь, Задержка);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ФорматНовыхПисем",
		ФорматНовыхПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ФорматОтветныхИПересылаемыхПисем",
		ФорматОтветныхИПересылаемыхПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"АвтоматическиСохранятьВерсииНеотправленногоПисьма",
		АвтоматическиСохранятьВерсииНеотправленногоПисьма);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ВидСписка",
		ВидСписка);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ШрифтОтображения",
		ШрифтОтображения);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображатьДругиеШрифтыВПисьмах",
		ОтображатьДругиеШрифтыВПисьмах);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ИспользоватьСвойСписокДляАвтоподбора",
		ИспользоватьСвойСписокДляАвтоподбора);
		
	// Новые письма		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ВремяПроверкиНовыхПисем",
		ВремяПроверкиНовыхПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПроверятьНаличиеНовыхПисем",
		ПроверятьНаличиеНовыхПисем);
		
	Для Каждого Строка Из НастройкаОповещений Цикл
			
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("УчетнаяЗапись", Строка.УчетнаяЗапись);
		ПараметрыОповещения.Вставить("Пользователь", ТекущийПользователь);
		
		Если НастройкаОповещений.Количество() = 1 Тогда 
			ПараметрыОповещения.Вставить("ПоказыватьВсплывающиеОповещения", ПоказыватьВсплывающиеОповещения);
			ПараметрыОповещения.Вставить("ПоказыватьСписокОповещений", ПоказыватьСписокОповещений);
		Иначе 	
			ПараметрыОповещения.Вставить("ПоказыватьВсплывающиеОповещения", 
				Строка.ПоказыватьВсплывающиеОповещения);
			ПараметрыОповещения.Вставить("ПоказыватьСписокОповещений", 
				Строка.ПоказыватьСписокОповещений);
		КонецЕсли;
			
		РегистрыСведений.НастройкиОповещенийОПисьмах.Записать(ПараметрыОповещения);
							
	КонецЦикла;	
			
	//Запись условий
	ЗапомнитьУсловияОповещения(ТаблицаУсловия);
	ЗапомнитьУсловияОповещения(ТаблицаИсключения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из УсловияОповещения Цикл
		Если ЗначениеЗаполнено(Строка.УчетнаяЗапись) Тогда 
			НаборЗаписей = РегистрыСведений.УсловияОповещенийОПисьмах.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
			НаборЗаписей.Отбор.УчетнаяЗапись.Установить(Строка.УчетнаяЗапись);
			НаборЗаписей.Отбор.ВидУсловия.Установить(Строка.ВидУсловия);
			НаборЗаписей.Отбор.ЭтоИсключение.Установить(Строка.ЭтоИсключение);
			НаборЗаписей.Записать();

			Если Строка.Используется Тогда
				Если Строка.ЗначенияУсловия.Количество() > 0 Тогда
					Для Каждого ЗначениеЭлемента Из Строка.ЗначенияУсловия Цикл
						МенеджерЗаписиРегистра = РегистрыСведений.УсловияОповещенийОПисьмах.СоздатьМенеджерЗаписи();
						МенеджерЗаписиРегистра.Пользователь = ТекущийПользователь;
						МенеджерЗаписиРегистра.УчетнаяЗапись = Строка.УчетнаяЗапись;
						МенеджерЗаписиРегистра.ВидУсловия = Строка.ВидУсловия;
						МенеджерЗаписиРегистра.ЭтоИсключение = Строка.ЭтоИсключение;
						МенеджерЗаписиРегистра.ЗначениеУсловия = ЗначениеЭлемента.Значение;
						МенеджерЗаписиРегистра.Записать();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
		
	ОбновитьПовторноИспользуемыеЗначения();	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыУсловногоОформления()
	
	ЭтаФорма.УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение = ОсновнаяУчетнаяЗапись;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодписьДляПисемПриИзмененииНаСервере()
	
	РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.СинийФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьФлаг()
	
	Если ОсновнойФлаг = Перечисления.ФлагиОбъектов.ПустаяСсылка() Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ПустойФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Красный Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Синий Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.СинийФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Желтый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Зеленый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Оранжевый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Лиловый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// АВТОСОХРАНЕНИЕ

&НаКлиенте
Процедура ИспользоватьАвтосохранениеНеотправленныхПисемПриИзменении(Элемент)
	
	Если ИспользоватьАвтосохранениеНеотправленныхПисем Тогда
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Истина;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Истина;
	Иначе
		ПериодАвтоматическогоСохраненияНеотправленныхПисем = 0;
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Ложь;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиВстроеннойПочты", "ТекущаяЗакладка", Элементы.Страницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСпискаПриИзменении(Элемент)
	
	Если ВидСписка = "Компактный"
		И ОтображениеОбластиЧтения = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Внизу") Тогда
		
		ОтображениеОбластиЧтения = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеВидаСписка(ВидСписка)
	
	Если НРег(ВидСписка) = НРег("Компактный") Тогда
		Возврат НСтр("ru = 'Компактный'; en = 'Compact'");
	ИначеЕсли НРег(ВидСписка) = НРег("Обычный") Тогда
		Возврат НСтр("ru = 'Обычный'; en = 'Normal'");
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ВидСпискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	ВидСписка = ВыбранноеЗначение;
	ВидСпискаПредставление = ПолучитьПредставлениеВидаСписка(ВидСписка);
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьВстроеннуюПочтуПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииИспользованияПочты();
	Элементы.Страницы.Доступность = ИспользоватьВстроеннуюПочту;
	ОбновитьИнтерфейсКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсКлиент()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Пользователи", ПользователиКлиентСервер.ТекущийПользователь());
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(УстанавливаемыеПараметры);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Если ИспользоватьВстроеннуюПочту <> НачальноеЗначениеИспользоватьВстроеннуюПочту Тогда
		ОтменаСервер();
	КонецЕсли;
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаСервере
Процедура ОтменаСервер()
	
	ИспользоватьВстроеннуюПочту = НачальноеЗначениеИспользоватьВстроеннуюПочту;
	УстановитьФункциональныеОпцииИспользованияПочты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииИспользованияПочты()
	
	ИспользоватьЛегкуюПочту = РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеЛегкойПочты();
	РегистрыСведений.ИспользованиеПочты.УстановитьИспользованиеПочты(ИспользоватьЛегкуюПочту, ИспользоватьВстроеннуюПочту);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокАвтоподбора

&НаКлиенте
Процедура ДобавитьВСписокАвтоподбораПодразделение(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, Элементы.СписокАвтоподбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАвтоподбораПользователя(Команда)
	
	АдресатыАвтоподбора = АдресатыАвтоподбора();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(
		"ЗаголовокФормы", НСтр("ru = 'Подбор пользователей в личный список автоподбора'; en = 'User selection in the personal autocomplete list'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи:'; en = 'Selected users:'"));
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", АдресатыАвтоподбора);
	ПараметрыФормы.Вставить("КонтекстОткрытия", ПредопределенноеЗначение("Документ.ИсходящееПисьмо.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьДобавлениеПользователяВСписокАвтоподбора", ЭтотОбъект, АдресатыАвтоподбора);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеПользователяВСписокАвтоподбора(
	НовыеПользователи, СтарыеПользователи) Экспорт
	
	Если НовыеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыКДобавлению = Новый Массив;
	ОбъектыКУдалению = Новый Массив;
	
	Для Каждого НовыйПользователь ИЗ НовыеПользователи Цикл
		ЕстьВСписке = Ложь;
		Для Каждого СтарыйПользователь ИЗ СтарыеПользователи Цикл
			Если НовыйПользователь.Контакт = СтарыйПользователь.Контакт Тогда
				ЕстьВСписке = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьВСписке Тогда
			ОбъектыКДобавлению.Добавить(НовыйПользователь.Контакт);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтарыйПользователь ИЗ СтарыеПользователи Цикл
		НетВСписке = Истина;
		Для Каждого НовыйПользователь ИЗ НовыеПользователи Цикл
			Если НовыйПользователь.Контакт = СтарыйПользователь.Контакт Тогда
				НетВСписке = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НетВСписке Тогда
			ОбъектыКУдалению.Добавить(СтарыйПользователь.Контакт);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьОбъектыВСписокАвтоподбора(ОбъектыКДобавлению);
	УдалитьИзСпискаАвтоподбораНаСервере(ОбъектыКУдалению);
	
	Элементы.СписокАвтоподбора.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАвтоподбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		ВыбранныеОбъекты = ВыбранноеЗначение;
		
	Иначе
		ВыбранныеОбъекты = Новый Массив;
		ВыбранныеОбъекты.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ДобавитьОбъектыВСписокАвтоподбора(ВыбранныеОбъекты);
	
	Элементы.СписокАвтоподбора.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАвтоподбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.СписокАвтоподбора.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.СписокАвтоподбора.ТекущиеДанные.ОбъектДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпискаАвтоподбора(Команда)
	
	СтрокиОбъектов = Элементы.СписокАвтоподбора.ВыделенныеСтроки;
	
	ОбъектыКУдалению = Новый Массив;
	
	Для Каждого СтрокаСписка Из СтрокиОбъектов Цикл
		
		ДанныеСтроки = Элементы.СписокАвтоподбора.ДанныеСтроки(СтрокаСписка);
		
		ОбъектыКУдалению.Добавить(ДанныеСтроки.ОбъектДанных);
		
	КонецЦикла;
	
	УдалитьИзСпискаАвтоподбораНаСервере(ОбъектыКУдалению);
	
	Элементы.СписокАвтоподбора.Обновить();
	
КонецПроцедуры

// Добавляет список адресатов в список автоподбора пользователя
// 
// Параметры:
//   Объекты - Массив
//           - Строка - в случае если адресаты находятся во временном
//                      хранилище в виде таблицы значений.
//
&НаСервереБезКонтекста
Процедура ДобавитьОбъектыВСписокАвтоподбора(Объекты)
	
	ОбъектыДляОбработки = Объекты;
	
	Для Каждого Объект Из ОбъектыДляОбработки Цикл
		РегистрыСведений.ОбъектыДляАвтоподбораАдресатов.ДобавитьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет из списка автоподбора пользователя переданных
// адресатов в качестве параметры.
//
// Параметры:
//   Объекты - Массив - массив адресатов, которых следует удалить из списка автоподбора
//             текущего пользователя.
&НаСервереБезКонтекста
Процедура УдалитьИзСпискаАвтоподбораНаСервере(Объекты)
	
	Для Каждого Объект Из Объекты Цикл
		РегистрыСведений.ОбъектыДляАвтоподбораАдресатов.УдалитьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает доступность таблицы СписокАвтоподбора
//
&НаКлиенте
Процедура УстановитьДоступностьСпискаАвтоподбора()
	
	Элементы.СписокАвтоподбора.Доступность = ИспользоватьСвойСписокДляАвтоподбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСвойСписокДляАвтоподбораПриИзменении(Элемент)
	
	УстановитьДоступностьСпискаАвтоподбора();
	
КонецПроцедуры

// Помещает адресатов для автоподбора текущего пользователя во временной хранилище
// в виде таблицы значений.
// 
// Параметры:
//   - УникальныйИдентификатор - Уникальный идентификатор формы - используется для того что бы
//                               адресы удалялись после закрытия формы из временного хранилища.
// Возвращаемое значение:
//   Строка - ссылка во временном хранилище на таблицу с адресатами.
//
&НаСервереБезКонтекста
Функция АдресатыАвтоподбора()
	
	АдресатыАвтоподбора = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыДляАвтоподбораАдресатов.ОбъектДанных КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ОбъектыДляАвтоподбораАдресатов КАК ОбъектыДляАвтоподбораАдресатов
		|ГДЕ
		|	ОбъектыДляАвтоподбораАдресатов.Владелец = &ТекущийПользователь
		|	И ОбъектыДляАвтоподбораАдресатов.ОбъектДанных ССЫЛКА Справочник.Пользователи";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеАдресата = Новый Структура("Контакт", Выборка.Исполнитель);
		АдресатыАвтоподбора.Добавить(ОписаниеАдресата);
	КонецЦикла;
	
	Возврат АдресатыАвтоподбора;
	
КонецФункции

//Новые письма
//

 &НаКлиенте
Процедура ПоказыватьСписокОВсехНовыхПисьмахПриИзменении(Элемент)
	
	Если Не ПоказыватьСписокОповещений Тогда
		Элементы.ТаблицаУсловия.Доступность = Ложь;
		Элементы.ТаблицаИсключения.Доступность = Ложь;
	Иначе 
		Элементы.ТаблицаУсловия.Доступность = Истина;
		Элементы.ТаблицаИсключения.Доступность = Истина;
	КонецЕсли;	  
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяПроверкиНовыхПриИзменении(Элемент)
	
	Элементы.ДекорацияМинут.Заголовок = 
		ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(ВремяПроверкиНовыхПисем);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьНаличиеНовыхПисемПриИзменении(Элемент)
	
	Элементы.ВремяПроверкиНовых.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.НастройкаОповещений.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ГруппаДанные.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ТаблицаУсловия.Доступность = ПроверятьНаличиеНовыхПисем;
	Элементы.ТаблицаИсключения.Доступность = ПроверятьНаличиеНовыхПисем;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьУсловияОповещения(ТаблицаУсловия)
	
	Для Каждого Строка Из ТаблицаУсловия Цикл
		Если ЗначениеЗаполнено(Строка.УчетнаяЗапись) Тогда 			
			Для Каждого СтрокаПоиска Из УсловияОповещения Цикл
				Если СтрокаПоиска.УчетнаяЗапись = Строка.УчетнаяЗапись
					И СтрокаПоиска.ВидУсловия = Строка.ВидУсловия 
					И СтрокаПоиска.ЭтоИсключение = Строка.ЭтоИсключение Тогда
					УсловияОповещения.Удалить(СтрокаПоиска);
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			НоваяСтрока = УсловияОповещения.Добавить();
			НоваяСтрока.УчетнаяЗапись = Строка.УчетнаяЗапись;
			НоваяСтрока.Используется = Строка.Используется;
			НоваяСтрока.ВидУсловия = Строка.ВидУсловия;
			НоваяСтрока.ЭтоИсключение = Строка.ЭтоИсключение;
			НоваяСтрока.ЗначенияУсловия.Очистить();
			
			Если ЗначениеЗаполнено(Строка.ЗначенияУсловия) Тогда 
				НоваяСтрока.ЗначенияУсловия = Строка.ЗначенияУсловия.Скопировать();
				НоваяСтрока.ПредставлениеЗначенияУсловия = Строка.ПредставлениеЗначенияУсловия;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыУсловий(УчетнаяЗапись)
	
	ЗапомнитьУсловияОповещения(ТаблицаУсловия);
	ЗапомнитьУсловияОповещения(ТаблицаИсключения);
		
	ПовторнаяЗагрузка = Ложь;
	
	Для Каждого Строка Из ТаблицаУсловия Цикл	
		Строка.УчетнаяЗапись = УчетнаяЗапись; 
		Строка.ЗначенияУсловия.Очистить();
		Строка.Используется = Ложь;

		Для Каждого СтрокаПоиска Из УсловияОповещения Цикл
			Если СтрокаПоиска.УчетнаяЗапись = УчетнаяЗапись				
				И СтрокаПоиска.ВидУсловия = Строка.ВидУсловия
				И Не СтрокаПоиска.ЭтоИсключение Тогда 
				ПовторнаяЗагрузка = Истина;				
				Строка.Используется = СтрокаПоиска.Используется;

				Если ЗначениеЗаполнено(СтрокаПоиска.ЗначенияУсловия) Тогда
					Строка.ЗначенияУсловия = СтрокаПоиска.ЗначенияУсловия.Скопировать();
					Строка.ПредставлениеЗначенияУсловия = СтрокаПоиска.ПредставлениеЗначенияУсловия;
				КонецЕсли;

				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаИсключения Цикл	
		Строка.УчетнаяЗапись = УчетнаяЗапись; 
		Строка.ЗначенияУсловия.Очистить();
		Строка.Используется = Ложь;

		Для Каждого СтрокаПоиска Из УсловияОповещения Цикл
			Если СтрокаПоиска.УчетнаяЗапись = УчетнаяЗапись		
				И СтрокаПоиска.ВидУсловия = Строка.ВидУсловия
				И СтрокаПоиска.ЭтоИсключение Тогда 
				ПовторнаяЗагрузка = Истина;				
				Строка.Используется = СтрокаПоиска.Используется;

				Если ЗначениеЗаполнено(СтрокаПоиска.ЗначенияУсловия) Тогда
					Строка.ЗначенияУсловия = СтрокаПоиска.ЗначенияУсловия.Скопировать();
					Строка.ПредставлениеЗначенияУсловия = СтрокаПоиска.ПредставлениеЗначенияУсловия;
				КонецЕсли;

				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;


	Если Не ПовторнаяЗагрузка Тогда 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УсловияОповещенийОПисьмах.ВидУсловия,
			|	УсловияОповещенийОПисьмах.ЗначениеУсловия,
			|	УсловияОповещенийОПисьмах.ЭтоИсключение
			|ИЗ
			|	РегистрСведений.УсловияОповещенийОПисьмах КАК УсловияОповещенийОПисьмах
			|ГДЕ
			|	УсловияОповещенийОПисьмах.Пользователь = &Пользователь
			|	И УсловияОповещенийОПисьмах.УчетнаяЗапись = &УчетнаяЗапись";
		
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);

		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
        УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			// Загрузка условий
			Для Каждого Строка Из ТаблицаУсловия Цикл						
				Строка.УчетнаяЗапись = УчетнаяЗапись; 
				Строка.ЗначенияУсловия.Очистить();
				Строка.Используется = Ложь;
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Строка.ВидУсловия = Выборка.ВидУсловия
						И Не Выборка.ЭтоИсключение Тогда
						Строка.Используется = Истина;					
						Строка.ЗначенияУсловия.Добавить(Выборка.ЗначениеУсловия);
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Загрузка исключений
			Для Каждого Строка Из ТаблицаИсключения Цикл						
				Строка.УчетнаяЗапись = УчетнаяЗапись; 
				Строка.ЗначенияУсловия.Очистить();
				Строка.Используется = Ложь;
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Строка.ВидУсловия = Выборка.ВидУсловия
						И Выборка.ЭтоИсключение Тогда
						Строка.Используется = Истина;					
						Строка.ЗначенияУсловия.Добавить(Выборка.ЗначениеУсловия);
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			Для каждого Строка Из ТаблицаУсловия Цикл
				Если Строка.ЗначенияУсловия.Количество() > 0 Тогда
					Строка.ПредставлениеЗначенияУсловия = 
					ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидУсловия, Строка.ЗначенияУсловия);
				КонецЕсли;
			КонецЦикла;

			Для каждого Строка Из ТаблицаИсключения Цикл
				Если Строка.ЗначенияУсловия.Количество() > 0 Тогда
					Строка.ПредставлениеЗначенияУсловия = 
					ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидУсловия, Строка.ЗначенияУсловия);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийДляУсловия(ВидУсловия, СписокЗначений)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВидУсловия);
	Возврат Менеджер.ВычислитьТекстовоеОписаниеСпискаЗначений(ВидУсловия, СписокЗначений);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ПРОВЕРЯТЬ ОПОВЕЩЕНИЯ ПИСЕМ ТАБЛИЦА

&НаКлиенте
Процедура НастройкаОповещенийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаОповещений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.УчетнаяЗапись = ТекущаяУчетнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяУчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
	ПодключитьОбработчикОжидания("ОбработкаОжиданияУчетнаяЗапись", 0.2, Истина);
	
	Если Не ТекущиеДанные.ПоказыватьСписокОповещений Тогда
		Элементы.ТаблицаУсловия.Доступность = Ложь;
		Элементы.ТаблицаИсключения.Доступность = Ложь;
	Иначе 	
		Элементы.ТаблицаУсловия.Доступность = Истина;
		Элементы.ТаблицаИсключения.Доступность = Истина;
	КонецЕсли;	
				
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОповещенийПоказыватьСписокОповещенийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаОповещений.ТекущиеДанные;

	Если Не ТекущиеДанные.ПоказыватьСписокОповещений Тогда
		Элементы.ТаблицаУсловия.Доступность = Ложь;
		Элементы.ТаблицаИсключения.Доступность = Ложь;
	Иначе 
		Элементы.ТаблицаУсловия.Доступность = Истина;
		Элементы.ТаблицаИсключения.Доступность = Истина;
	КонецЕсли;	  

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияУчетнаяЗапись()

	ОбновитьТаблицыУсловий(ТекущаяУчетнаяЗапись); 			    
	ОтключитьОбработчикОжидания("ОбработкаОжиданияУчетнаяЗапись");
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные, ЭлементЗначения = "ЗначенияУсловия")
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Элементы[ЭлементЗначения].Доступность = Истина;
	Элементы[ЭлементЗначения].РедактированиеТекста = Ложь;
	Элементы[ЭлементЗначения].КнопкаВыбора = Ложь;
	Элементы[ЭлементЗначения].КнопкаОчистки = Истина;
	Элементы[ЭлементЗначения].ТолькоПросмотр = Ложь;	
	Элементы[ЭлементЗначения].РежимРедактирования = РежимРедактированияКолонки.Вход;
	
	Если Не ТекущиеДанные.Используется Тогда
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		ТекущиеДанные.ЗначенияУсловия.Очистить();
	КонецЕсли;
	
	Если ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")	
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		Элементы[ЭлементЗначения].ТолькоПросмотр = Ложь;
		Элементы[ЭлементЗначения].РедактированиеТекста = Истина;
		Элементы[ЭлементЗначения].КнопкаВыбора = Истина;
		Элементы[ЭлементЗначения].РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	ИначеЕсли ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода") Тогда
		
		Элементы[ЭлементЗначения].ТолькоПросмотр = Ложь;
		Элементы[ЭлементЗначения].КнопкаВыбора = Истина;
		Элементы[ЭлементЗначения].РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		Элементы.ТаблицаУсловия.ЗакончитьРедактированиеСтроки(Истина);
		
	ИначеЕсли ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") Тогда
		
		Элементы[ЭлементЗначения].ТолькоПросмотр = Ложь;
		Элементы[ЭлементЗначения].КнопкаВыбора = Истина;
		Элементы[ЭлементЗначения].РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	Иначе
		
		Элементы[ЭлементЗначения].ТолькоПросмотр = ТекущиеДанные.Используется;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравило(Параметры = Неопределено)
	
	// Заполнение таблицы условий и исключений для отбора входящих писем
	ТаблицаУсловия.Очистить();
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл
		НоваяСтрока = ТаблицаУсловия.Добавить();
		НоваяСтрока.Используется = Ложь;
		НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
		НоваяСтрока.ЭтоИсключение = Ложь;
		НоваяСтрока.ПредставлениеЗначенияУсловия = "";
		НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений();
		
		НоваяСтрока = ТаблицаИсключения.Добавить();
		НоваяСтрока.Используется = Ложь;
		НоваяСтрока.ЭтоИсключение = Истина;
		НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
		НоваяСтрока.ПредставлениеЗначенияУсловия = "";
		НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений();

	КонецЦикла;
	
	Если НастройкаОповещений.Количество() = 1 Тогда 
		ОбновитьТаблицыУсловий(НастройкаОповещений.Получить(0).УчетнаяЗапись);		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОповещений()
	
	УстановитьПривилегированныйРежим(Истина);

	НастройкаОповещений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка КАК УчетнаяЗапись,
		|	НастройкиОповещенийОПисьмах.ПоказыватьВсплывающиеОповещения,
		|	НастройкиОповещенийОПисьмах.ПоказыватьСписокОповещений
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОповещенийОПисьмах КАК НастройкиОповещенийОПисьмах
		|		ПО УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка = НастройкиОповещенийОПисьмах.УчетнаяЗапись
		|			И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = НастройкиОповещенийОПисьмах.Пользователь
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	ТаблицаУчетныеЗаписи = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаУчетныеЗаписи Цикл
		
		НоваяСтрока = НастройкаОповещений.Добавить();
		НоваяСтрока.УчетнаяЗапись = Строка.УчетнаяЗапись;
		
		Если ЗначениеЗаполнено(Строка.ПоказыватьВсплывающиеОповещения) Тогда 
			НоваяСтрока.ПоказыватьВсплывающиеОповещения = Строка.ПоказыватьВсплывающиеОповещения;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Строка.ПоказыватьСписокОповещений) Тогда 
			НоваяСтрока.ПоказыватьСписокОповещений = Строка.ПоказыватьСписокОповещений;
		КонецЕсли;
				
	КонецЦикла;	

	Если НастройкаОповещений.Количество() = 0 Тогда 
		Элементы.НастройкаОповещений.Видимость = Ложь;
		Элементы.ПоказыватьВсплывающиеОповещения.Видимость = Ложь;
		Элементы.ПоказыватьСписокОповещений.Видимость = Ложь;
		Элементы.ТаблицаУсловия.Видимость = Ложь;
		Элементы.ТаблицаИсключения.Видимость = Ложь;
	ИначеЕсли НастройкаОповещений.Количество() > 1 Тогда 		
		Элементы.НастройкаОповещений.Видимость = Истина;
		Элементы.ПоказыватьВсплывающиеОповещения.Видимость = Ложь;
		Элементы.ПоказыватьСписокОповещений.Видимость = Ложь;
		Элементы.ТаблицаУсловия.Видимость = Истина;
		Элементы.ТаблицаИсключения.Видимость = Истина;
	ИначеЕсли НастройкаОповещений.Количество() = 1 Тогда 
		Элементы.ТаблицаУсловия.Видимость = Истина;
		Элементы.ТаблицаИсключения.Видимость = Истина;
		Элементы.ПоказыватьВсплывающиеОповещения.Видимость = Истина;
		Элементы.ПоказыватьСписокОповещений.Видимость = Истина;
		Элементы.НастройкаОповещений.Видимость = Ложь;
		Элементы.ТаблицаУсловия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Условия оповещения (%1)'; en = 'Alert conditions (%1)'"), 
			НастройкаОповещений.Получить(0).УчетнаяЗапись);
		
		ПоказыватьВсплывающиеОповещения = НастройкаОповещений.Получить(0).ПоказыватьВсплывающиеОповещения;
		ПоказыватьСписокОповещений = НастройкаОповещений.Получить(0).ПоказыватьСписокОповещений;
		ОбновитьТаблицыУсловий(НастройкаОповещений.Получить(0).УчетнаяЗапись);
		
		Если ПоказыватьСписокОповещений Тогда
			Элементы.ТаблицаУсловия.Доступность = Истина;
			Элементы.ТаблицаИсключения.Доступность = Истина;
		Иначе 
			Элементы.ТаблицаУсловия.Доступность = Ложь;
			Элементы.ТаблицаИсключения.Доступность = Ложь;
		КонецЕсли;	

    КонецЕсли;

КонецПроцедуры

//Работа с условиями оповещений
//
&НаКлиенте
Процедура ЗначенияУсловияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")	
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТекущиеДанные.ПредставлениеЗначенияУсловия, 
		";");
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого Подстрока Из МассивПодстрок Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(Подстрока);	
		КонецЦикла;
	КонецЕсли;
//	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораЗавершение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ТекущиеДанные.Используется = Истина;
		ТекущиеДанные.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийвидУсловия, Результат.Список);
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого ЗначениеСписка Из Результат.Список Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	
	ПараметрыОповещение = Новый Структура;
	ПараметрыОповещение.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗначенияУсловияНачалоВыбораЗавершение",
		ЭтотОбъект,
		ПараметрыОповещение);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПоискТекста", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ВводАдресов", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")Тогда
		
		Если ТекущиеДанные.ЗначенияУсловия.Количество() = 0 Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
		Конецесли;
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПоискДат", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипСправочника", "РабочиеГруппы");
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор рабочих групп'; en = 'Selection of working groups'"));
		
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПоискПоСправочнику", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораАдресаОтправителя",
			ЭтотОбъект,
			Новый Структура("ТекущиеДанные", ТекущиеДанные));

		ПараметрыФормы = Новый Структура;
		МассивУчетныхЗаписей = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиТекущегоПользователя();
		ПараметрыФормы.Вставить("УчетнаяЗапись", МассивУчетныхЗаписей[0]);
				
		ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытия);
				
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораНаходитсяВПапке",
			ЭтотОбъект,
			Новый Структура("ТекущиеДанные", ТекущиеДанные));

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
		ПараметрыОткрытия.Вставить("РежимПапокБыстрогоДоступа", НастройкаРежимМоиПапки);
		ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", ТекущиеДанные.ЗначенияУсловия.ВыгрузитьЗначения()); 
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПодборПапок", ПараметрыОткрытия, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораНаходитсяВПапке(ПапкиОбработки, Параметры) Экспорт 
	
	Если ПапкиОбработки <> Неопределено И ТипЗнч(ПапкиОбработки) = Тип("Массив") Тогда
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого Папка Из ПапкиОбработки Цикл	
			ТекущиеДанные.ЗначенияУсловия.Добавить(Папка);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = 
				ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, ТекущиеДанные.ЗначенияУсловия);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораАдресаОтправителя(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ТекущиеДанные.Используется = Истина;
		ТекущиеДанные.ПредставлениеЗначенияУсловия = 
			Строка(Результат);
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ЗначенияУсловия.Добавить(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
	ТекущиеДанные.Используется = Ложь;
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение.Представление);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущиеДанные.ВидУсловия, ТекущиеДанные.ЗначенияУсловия);
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиАдресовЭлектроннойПочты") Тогда	
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = Строка(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущиеДанные.Используется = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	Если ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, 
			ТекущийПользователь, 
			Истина, ЭтоВебКлиент);
			
		ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	

		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		
		МассивУчетныхЗаписей = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиТекущегоПользователя();		
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьСпискиАдресовДляАвтоподбора(Текст, МассивУчетныхЗаписей);
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")	
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийвидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТекущиеДанные.ПредставлениеЗначенияУсловия, 
		";");
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого Подстрока Из МассивПодстрок Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(Подстрока);	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ПараметрыОповещение = Новый Структура;
	ПараметрыОповещение.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗначенияУсловияНачалоВыбораЗавершение",
		ЭтотОбъект,
		ПараметрыОповещение);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	Если ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПоискТекста", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ВводАдресов", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийвидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")Тогда
		
		Если ТекущиеДанные.ЗначенияУсловия.Количество() = 0 Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
		Конецесли;
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПоискДат", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипСправочника", "РабочиеГруппы");
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор рабочих групп'; en = 'Selection of working groups'"));
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПоискПоСправочнику", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораАдресаОтправителя",
			ЭтотОбъект,
			Новый Структура("ТекущиеДанные", ТекущиеДанные));
			
		ПараметрыФормы = Новый Структура;
		МассивУчетныхЗаписей = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиТекущегоПользователя();
		ПараметрыФормы.Вставить("УчетнаяЗапись", МассивУчетныхЗаписей[0]);
		ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораНаходитсяВПапке",
			ЭтотОбъект,
			Новый Структура("ТекущиеДанные", ТекущиеДанные));

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
		ПараметрыОткрытия.Вставить("РежимПапокБыстрогоДоступа", НастройкаРежимМоиПапки);
		ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", ТекущиеДанные.ЗначенияУсловия.ВыгрузитьЗначения()); 
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ПодборПапок", ПараметрыОткрытия, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытия);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
	ТекущиеДанные.Используется = Ложь;
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение.Представление);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущиеДанные.ВидУсловия, ТекущиеДанные.ЗначенияУсловия);
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиАдресовЭлектроннойПочты") Тогда	
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = Строка(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущиеДанные.Используется = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	Если ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
			ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, 
			ТекущийПользователь, 
			Истина, ЭтоВебКлиент);
			
		ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора); 
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		
		МассивУчетныхЗаписей = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиТекущегоПользователя();		
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьСпискиАдресовДляАвтоподбора(Текст, МассивУчетныхЗаписей);
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТАБЛИЦА УСЛОВИЯ

&НаКлиенте
Процедура ТаблицаУсловияИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия; 
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения") Тогда
		
		Если ТекущиеДанные.Используется Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");
			ПоказыватьСписокОповещений = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если Поле.Имя <> "ЗначенияУсловия" ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылоПереслано") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияУсловия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияУсловия[0].Значение;
		КонецЕсли;
		Если Не ТекущиеДанные.Используется Тогда
			ТекущиеДанные.Используется = Истина;
		КонецЕсли;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		Если ТекущееЗначение = Истина Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Ложь);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Нет'; en = 'No'");
		Иначе
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Используется Тогда	
		ТекущиеДанные.Используется = Истина;
		УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТАБЛИЦА ИСКЛЮЧЕНИЯ

&НаКлиенте
Процедура ТаблицаИсключенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если Поле.Имя <> "ЗначенияИсключения" ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылоПереслано") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияУсловия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияУсловия[0].Значение;
		КонецЕсли;
		Если Не ТекущиеДанные.Используется Тогда
			ТекущиеДанные.Используется = Истина;
		КонецЕсли;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		Если ТекущееЗначение = Истина Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Ложь);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Нет'; en = 'No'");
		Иначе
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные, "ЗначенияИсключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Используется Тогда		
		ТекущиеДанные.Используется = Истина;
		УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные, "ЗначенияИсключения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия; 
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения") Тогда
		
		Если ТекущиеДанные.Используется Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");
			ПоказыватьСписокОповещений = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьРежимРедактированияЗначенияУсловия(ТекущиеДанные, "ЗначенияИсключения");
	Модифицированность = Истина;
	
КонецПроцедуры

