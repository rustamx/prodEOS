
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторТекущейСтрокиОбщ = -1;
	ИдентификаторТекущейСтрокиИнд = -1;
	ИдентификаторТекущейСтрокиЛА = -1;
	
	УстановитьУсловноеОФормление();
	ЗаполнитьРазрешения();
	
	ТипКонтейнеровПользователей = Метаданные.ОпределяемыеТипы.КонтейнерПользователей.Тип;
	
	ПоказыватьФормуПодсказки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкаОткрытияПолитикДоступа", "ПоказыватьФормуПодсказки", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если (ЕстьСпецРазрешения Или ЕстьЛокальныеАдминистраторы) И ПоказыватьФормуПодсказки Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуПодсказки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодсказки()
	
	ПараметрыФормы = Новый Структура("ЕстьСпецРазрешения, ЕстьЛокальныеАдминистраторы",
		ЕстьСпецРазрешения, ЕстьЛокальныеАдминистраторы);
	
	ОткрытьФорму("Обработка.ПолитикиДоступа.Форма.ФормаПодсказки", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазрешения()
	
	ВсеВидыДоступа.ПолучитьЭлементы().Очистить();
	ПредметыДоступа.Очистить();
	ПредметыДоступаДляЛА.Очистить();
	ЗначенияДоступаОбщие.ПолучитьЭлементы().Очистить();
	ЗначенияДоступаИсключительные.ПолучитьЭлементы().Очистить();
	ЗначенияДоступаДляЛА.ПолучитьЭлементы().Очистить();
	РазрешенияОбщие.Очистить();
	РазрешенияИсключительные.Очистить();
	РазрешенияИсключительныеРазвернутые.Очистить();
	РазрешенияДляЛА.Очистить();
	РазрешенияДляЛАРазвернутые.Очистить();
	
	ДеревоЗначенийДоступа = ДокументооборотПраваДоступаПовтИсп.ДеревоЗначенийДоступа().Скопировать();
	ЗначениеВРеквизитФормы(ДеревоЗначенийДоступа, "ВсеВидыДоступа");
	
	// Общие разрешения.
	
	Элементы.РазрешенияОбщие.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗначениеДоступа", 0);
	
	Для Каждого Стр Из ДеревоЗначенийДоступа.Строки Цикл
		Стр.Представление = Стр.Представление + " (" + НСтр("ru = 'все'; en = 'all'") + ")";
	КонецЦикла;
	
	ДеревоЗначенийДоступа.Колонки.Добавить("ЕстьРазрешения");
	ЗначениеВРеквизитФормы(ДеревоЗначенийДоступа, "ЗначенияДоступаОбщие");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РазрешенияДоступаОбщие.ЗначениеДоступа,
		|	РазрешенияДоступаОбщие.Пользователь,
		|	РазрешенияДоступаОбщие.УровеньДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияДоступаОбщие
		|
		|УПОРЯДОЧИТЬ ПО
		|	РазрешенияДоступаОбщие.Пользователь
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	РазрешенияОбщие.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрРазрешения Из РазрешенияОбщие Цикл
		
		СтрокаДерева = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
			ЗначенияДоступаОбщие, Новый Структура("ЗначениеДоступа", СтрРазрешения.ЗначениеДоступа));
		
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.ЕстьРазрешения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Специальные разрешения.
	
	ПредметыДоступаСРазрезами = ДокументооборотПраваДоступаПереопределяемый.ПредметыДоступаСРазрезами();
	Для Каждого СтрОбъекта Из ПредметыДоступаСРазрезами Цикл
		
		Если СтрОбъекта.НеЯвляетсяСамостоятельнымПредметомДоступа Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ПредметыДоступа.Добавить();
		Стр.Предмет = СтрОбъекта.ОбъектМетаданных;
		Стр.ВидыДоступа = СтрОбъекта.ВидыДоступа;
		Стр.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрОбъекта.ОбъектМетаданных, "Синоним");
		
	КонецЦикла;
	
	ПредметыДоступа.Сортировать("Представление");
	
	// Чтение разрешений из регистра.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РазрешенияДоступаИсключительные.Предмет КАК Предмет,
		|	РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
		|	РазрешенияДоступаИсключительные.Пользователь КАК Пользователь,
		|	РазрешенияДоступаИсключительные.УровеньДоступа КАК УровеньДоступа,
		|	ЗначенияДоступаКоллекций.Значение КАК ЗначениеДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа КАК Коллекции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК ЗначенияДоступаКоллекций
		|			ПО Коллекции.Ссылка = ЗначенияДоступаКоллекций.Ссылка
		|		ПО РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа = Коллекции.Ссылка
		|ГДЕ
		|	РазрешенияДоступаИсключительные.Предмет В(&ОбъектыМетаданных)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь
		|ИТОГИ
		|	МАКСИМУМ(УровеньДоступа)
		|ПО
		|	Предмет,
		|	КоллекцияЗначенийДоступа,
		|	Пользователь
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ОбъектыМетаданных", 
		ПредметыДоступаСРазрезами.ВыгрузитьКолонку("ОбъектМетаданных"));
	
	ВыборкаПредмет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РазрешенияИсключительныеТаблица =
		РеквизитФормыВЗначение("РазрешенияИсключительные", Тип("ТаблицаЗначений"));
	РазрешенияИсключительныеРазвернутыеТаблица =
		РеквизитФормыВЗначение("РазрешенияИсключительныеРазвернутые", Тип("ТаблицаЗначений"));
		
	ПредметыСРазрешениями = Новый Соответствие;
		
	Пока ВыборкаПредмет.Следующий() Цикл
		ВыборкаПользователь = ВыборкаПредмет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПользователь.Следующий() Цикл
			ВыборкаКоллекция = ВыборкаПользователь.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКоллекция.Следующий() Цикл
				
				СтрИтоговая = РазрешенияИсключительныеТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрИтоговая, ВыборкаКоллекция);
				СтрИтоговая.ИдентификаторКоллекции = Строка(Новый УникальныйИдентификатор());
				
				Выборка = ВыборкаКоллекция.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ЗначениеДоступа) Тогда
						Продолжить;
					КонецЕсли;
					
					Стр = РазрешенияИсключительныеРазвернутыеТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(Стр, Выборка);
					Стр.ИдентификаторКоллекции = СтрИтоговая.ИдентификаторКоллекции;
					
					Если ПредметыСРазрешениями.Получить(Выборка.Предмет) = Неопределено Тогда
						ПредметыСРазрешениями.Вставить(Выборка.Предмет, Истина);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(РазрешенияИсключительныеТаблица, "РазрешенияИсключительные");
	ЗначениеВРеквизитФормы(РазрешенияИсключительныеРазвернутыеТаблица, "РазрешенияИсключительныеРазвернутые");
	
	Для Каждого Эл Из ПредметыСРазрешениями Цикл
		СтрокиПредмета = ПредметыДоступа.НайтиСтроки(Новый Структура("Предмет", Эл.Ключ));
		Если СтрокиПредмета.Количество() > 0 Тогда
			СтрокиПредмета[0].ЕстьРазрешения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Локальные администраторы.
	
	ПредметыДоступаСРазрезами = ДокументооборотПраваДоступаПереопределяемый.ПредметыДоступаСРазрезами();
	Для Каждого СтрОбъекта Из ПредметыДоступаСРазрезами Цикл
		
		Если СтрОбъекта.НеЯвляетсяСамостоятельнымПредметомДоступа Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ПредметыДоступаДляЛА.Добавить();
		Стр.Предмет = СтрОбъекта.ОбъектМетаданных;
		Стр.ВидыДоступа = СтрОбъекта.ВидыДоступа;
		Стр.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрОбъекта.ОбъектМетаданных, "Синоним");
		
	КонецЦикла;
	
	ПредметыДоступаДляЛА.Сортировать("Представление");
	
	// Чтение разрешений из регистра.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РазрешенияДляЛокальныхАдминистраторов.Предмет КАК Предмет,
		|	РазрешенияДляЛокальныхАдминистраторов.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
		|	РазрешенияДляЛокальныхАдминистраторов.Пользователь КАК Пользователь,
		|	РазрешенияДляЛокальныхАдминистраторов.УровеньДоступа КАК УровеньДоступа,
		|	ЗначенияДоступаКоллекций.Значение КАК ЗначениеДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияДляЛокальныхАдминистраторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа КАК Коллекции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК ЗначенияДоступаКоллекций
		|			ПО Коллекции.Ссылка = ЗначенияДоступаКоллекций.Ссылка
		|		ПО РазрешенияДляЛокальныхАдминистраторов.КоллекцияЗначенийДоступа = Коллекции.Ссылка
		|ГДЕ
		|	РазрешенияДляЛокальныхАдминистраторов.Предмет В(&ОбъектыМетаданных)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь
		|ИТОГИ
		|	МАКСИМУМ(УровеньДоступа)
		|ПО
		|	Предмет,
		|	КоллекцияЗначенийДоступа,
		|	Пользователь
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ОбъектыМетаданных", 
		ПредметыДоступаСРазрезами.ВыгрузитьКолонку("ОбъектМетаданных"));
	
	ВыборкаПредмет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РазрешенияДляЛАТаблица =
		РеквизитФормыВЗначение("РазрешенияДляЛА", Тип("ТаблицаЗначений"));
	РазрешенияДляЛАРазвернутыеТаблица =
		РеквизитФормыВЗначение("РазрешенияДляЛАРазвернутые", Тип("ТаблицаЗначений"));
	
	ПредметыСРазрешениями = Новый Соответствие;
		
	Пока ВыборкаПредмет.Следующий() Цикл
		ВыборкаПользователь = ВыборкаПредмет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПользователь.Следующий() Цикл
			ВыборкаКоллекция = ВыборкаПользователь.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКоллекция.Следующий() Цикл
				
				СтрИтоговая = РазрешенияДляЛАТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрИтоговая, ВыборкаКоллекция);
				СтрИтоговая.ИдентификаторКоллекции = Строка(Новый УникальныйИдентификатор());
				
				Выборка = ВыборкаКоллекция.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ЗначениеДоступа) Тогда
						Продолжить;
					КонецЕсли;
					
					Стр = РазрешенияДляЛАРазвернутыеТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(Стр, Выборка);
					Стр.ИдентификаторКоллекции = СтрИтоговая.ИдентификаторКоллекции;
					
					Если ПредметыСРазрешениями.Получить(Выборка.Предмет) = Неопределено Тогда
						ПредметыСРазрешениями.Вставить(Выборка.Предмет, Истина);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(РазрешенияДляЛАТаблица, "РазрешенияДляЛА");
	ЗначениеВРеквизитФормы(РазрешенияДляЛАРазвернутыеТаблица, "РазрешенияДляЛАРазвернутые");
	
	Для Каждого Эл Из ПредметыСРазрешениями Цикл
		СтрокиПредмета = ПредметыДоступаДляЛА.НайтиСтроки(Новый Структура("Предмет", Эл.Ключ));
		Если СтрокиПредмета.Количество() > 0 Тогда
			СтрокиПредмета[0].ЕстьРазрешения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПредметыДоступаИспользующиеРегистрацию = НастройкиДоступа.ПредметыДоступаИспользующиеРегистрацию();
	
	// Видимость закладок.
	ЕстьСпецРазрешения = Константы.СпецРазрешенияВПолитикахДоступа.Получить();
	ЕстьЛокальныеАдминистраторы = Константы.ИспользоватьЛокальныхАдминистраторов.Получить();
	
	Если Не ЕстьСпецРазрешения И Не ЕстьЛокальныеАдминистраторы Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Элементы.СтраницаРазрешенияДоступаСпециальные.Видимость = ЕстьСпецРазрешения;
	Элементы.СтраницаЛокальныеАдминистраторы.Видимость = ЕстьЛокальныеАдминистраторы;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРазрешенияДоступаОбщие;
	
	// Строки не видны, пока не выбран предмет доступа.
	Элементы.РазрешенияИсключительные.ОтборСтрок = Новый ФиксированнаяСтруктура("Предмет", 0);
	Элементы.РазрешенияДляЛА.ОтборСтрок = Новый ФиксированнаяСтруктура("Предмет", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РазрешенияДоступаИзменены" И Источник <> ЭтотОбъект Тогда
		РазрешенияИзмененыВДругойФорме = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияДоступаОбщие

&НаКлиенте
Процедура ЗначенияДоступаОбщиеПриАктивизацииСтроки(Элемент)
	
	// Изменение состава унаследованных строк.
	ИдТекущейСтроки = Элемент.ТекущаяСтрока;
	Если ИдТекущейСтроки = Неопределено Тогда
		ИдТекущейСтроки = -1;
	КонецЕсли;
	
	Если ИдентификаторТекущейСтрокиОбщ <> ИдТекущейСтроки Тогда
		ИдентификаторТекущейСтрокиОбщ = ИдТекущейСтроки;
		ЗначенияДоступаОбщиеПриАктивизацииСтрокиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗначенияДоступаОбщиеПриАктивизацииСтрокиСервер()
	
	ТекущаяСтрока = Элементы.ЗначенияДоступаОбщие.ТекущаяСтрока;
	ТекущиеДанные = Неопределено;
	РазрезДоступа = 0;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ЗначенияДоступаОбщие.НайтиПоИдентификатору(ТекущаяСтрока);
		РазрезДоступа = ТекущиеДанные.ЗначениеДоступа;
		Если Не ЗначениеЗаполнено(РазрезДоступа) Тогда
			РазрезДоступа = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление унаследованных разрешений.
	КолСтрок = РазрешенияОбщие.Количество();
	Для Сч = 1 По КолСтрок Цикл
		Индекс = КолСтрок - Сч;
		Если РазрешенияОбщие[Индекс].Унаследован Тогда
			РазрешенияОбщие.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		
		СтрокиРазрешений = РазрешенияОбщие.НайтиСтроки(
			Новый Структура("ЗначениеДоступа", Родитель.ЗначениеДоступа));
		
		Для Каждого СтрокаРазрешенияРодителя Из СтрокиРазрешений Цикл
			НоваяСтрока = РазрешенияОбщие.Добавить();
			НоваяСтрока.Пользователь = СтрокаРазрешенияРодителя.Пользователь;
			НоваяСтрока.УровеньДоступа = СтрокаРазрешенияРодителя.УровеньДоступа;
			НоваяСтрока.ЗначениеДоступа = РазрезДоступа;
			НоваяСтрока.Унаследован = Истина;
		КонецЦикла;
		
		Родитель = Родитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	РазрешенияОбщие.Сортировать("Унаследован Убыв, Пользователь");
	
	// Установка отбора для таблицы разрешений.
	Элементы.РазрешенияОбщие.ОтборСтрок =
		Новый ФиксированнаяСтруктура("ЗначениеДоступа", РазрезДоступа);
	
	// Список выбора уровня доступа.
	СписокВыбора = Элементы.РазрешенияОбщиеУровеньДоступа.СписокВыбора;
	СписокВыбора.Очистить();
	
	Сч = 0;
	УровниДоступаВПорядкеПриоритетов = НастройкиДоступаКлиентСерверПовтИсп.УровниДоступаВПорядкеПриоритетов();
	КолЗаписей = УровниДоступаВПорядкеПриоритетов.Количество();
	
	Пока Сч < КолЗаписей Цикл
		
		УровеньДоступа = УровниДоступаВПорядкеПриоритетов[Сч];
		Сч = Сч + 1;
		
		// Пустая ссылка не добавляется.
		ДобавитьЭлемент = ЗначениеЗаполнено(УровеньДоступа);  
		
		// Регистрация доступна не для всех видов доступа.
		Если УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.Регистрация") Тогда
			ВидыДоступаИспользующиеРегистрацию = НастройкиДоступаКлиентСервер.ВидыДоступаИспользующиеРегистрацию();
			ДобавитьЭлемент = ВидыДоступаИспользующиеРегистрацию.Найти(ТекущиеДанные.ВидДоступа) <> Неопределено;
		КонецЕсли;
		
		Если ДобавитьЭлемент Тогда
			СписокВыбора.Добавить(УровеньДоступа);
		КонецЕсли;
		
	КонецЦикла;
	
	// Видимость команды заполнения резрешений по умолчанию.
	Если ТекущиеДанные.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Подразделения
		И ТекущиеДанные.ВидДоступа = ТекущиеДанные.ЗначениеДоступа Тогда
		
		Элементы.ЗначенияДоступаОбщиеЗаполнитьРазрешенияПоУмолчанию.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗначенияДоступаОбщиеЗаполнитьРазрешенияПоУмолчанию.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаОбщиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗначенияДоступаОбщие.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.ЗначениеДоступа) <> Тип("ПланВидовХарактеристикСсылка.ВидыДоступа") Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗначениеДоступа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазрешенияОбщие

&НаКлиенте
Процедура РазрешенияОбщиеПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.РазрешенияОбщиеУровеньДоступа.ТолькоПросмотр = Элемент.ТекущиеДанные.Унаследован;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОбщиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Элементы.ЗначенияДоступаОбщие.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран разрез доступа'; en = 'Access region is not selected'"));
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		ИдентификаторКопируемойСтроки = Элементы.РазрешенияОбщие.ТекущаяСтрока;
	Иначе
		ИдентификаторКопируемойСтроки = -1;
	КонецЕсли;
	
	РаботаСПользователямиКлиент.ВыбратьКонтейнерПользователей(Элемент, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОбщиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ТипКонтейнеровПользователей.СодержитТип(ТипЗнч(ВыбранноеЗначение)) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеДерева = Элементы.ЗначенияДоступаОбщие.ТекущиеДанные;
	ТекущиеДанныеДерева.ЕстьРазрешения = Истина;
	
	ЗначениеДоступа = ТекущиеДанныеДерева.ЗначениеДоступа;
	Пользователь = ВыбранноеЗначение;
	СтруктураОтбора = Новый Структура(
		"ЗначениеДоступа, Пользователь, Унаследован", ЗначениеДоступа, Пользователь, Ложь);
		
	НайденныеСтроки = РазрешенияОбщие.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Стр = РазрешенияОбщие.Добавить();
		Стр.ЗначениеДоступа = ЗначениеДоступа;
		Стр.Пользователь = Пользователь;
		
		Если ИдентификаторКопируемойСтроки >= 0 Тогда
			Стр.УровеньДоступа = 
				РазрешенияОбщие.НайтиПоИдентификатору(ИдентификаторКопируемойСтроки).УровеньДоступа;
		Иначе
			Стр.УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.Редактирование");
		КонецЕсли;
		
		ИдентификаторДобавленнойСтроки = Стр.ПолучитьИдентификатор();
		ПодключитьОбработчикОжидания("РазрешенияОбщиеУстановитьТекущуюСтроку", 0.1, Истина);
		
		Модифицированность = Истина;
		
	Иначе
		
		Элементы.РазрешенияОбщие.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОбщиеУстановитьТекущуюСтроку()
	
	Элементы.РазрешенияОбщие.ТекущаяСтрока = ИдентификаторДобавленнойСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОбщиеПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Унаследован Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОбщиеПослеУдаления(Элемент)
	
	ТекущиеДанныеДерева = Элементы.ЗначенияДоступаОбщие.ТекущиеДанные;
	Если Не ЕстьОбщиеРазрешенияДляРазреза(ТекущиеДанныеДерева.ЗначениеДоступа) Тогда
		ТекущиеДанныеДерева.ЕстьРазрешения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОбщиеРазрешенияДляРазреза(РазрезДоступа)
	
	НайденныеСтроки = РазрешенияОбщие.НайтиСтроки(Новый Структура("ЗначениеДоступа", РазрезДоступа));
	ЕстьЗаписи = НайденныеСтроки.Количество() > 0;
	
	Возврат ЕстьЗаписи;
	
КонецФункции

&НаКлиенте
Процедура РазрешенияОбщиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РазрешенияОбщиеПользователь Тогда
		ПоказатьЗначение(, Элементы.РазрешенияОбщие.ТекущиеДанные.Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОбщиеУровеньДоступаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметыДоступа

&НаКлиенте
Процедура ПредметыДоступаПриАктивизацииСтроки(Элемент)
	
	ИзмененаСтрокаСписка = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПредметыДоступаПриАктивизацииСтрокиОбработчик", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДоступаДляЛАПриАктивизацииСтроки(Элемент)
	
	ИзмененаСтрокаСписка = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПредметыДоступаДляЛАПриАктивизацииСтрокиОбработчик", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДоступаПриАктивизацииСтрокиОбработчик()
	
	ТекущиеДанные = Элементы.ПредметыДоступа.ТекущиеДанные;
	
	// Сохранение пометок для предыдущей строки разрешения.
	АктуализироватьРазвернутыеРазрешения();
	ИдентификаторТекущейСтрокиИнд = -1;
	
	// Отборы в подчиненных таблицах.
	Предмет = ТекущиеДанные.Предмет;
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Предмет = 0;
	КонецЕсли;
	
	ЭлементРазрешенияИсключительные = Элементы.РазрешенияИсключительные;
	ЭлементРазрешенияИсключительные.ОтборСтрок = Новый ФиксированнаяСтруктура("Предмет", Предмет);
	
	// Заполнение списка выбора уровня доступа.
	СписокВыбора = Элементы.РазрешенияИсключительныеУровеньДоступа.СписокВыбора;
	СписокВыбора.Очистить();
	
	Сч = 0;
	УровниДоступаВПорядкеПриоритетов =
		НастройкиДоступаКлиентСерверПовтИсп.УровниДоступаВПорядкеПриоритетов();
	КолЗаписей = УровниДоступаВПорядкеПриоритетов.Количество();
	
	Пока Сч < КолЗаписей Цикл
		
		УровеньДоступа = УровниДоступаВПорядкеПриоритетов[Сч];
		Сч = Сч + 1;
		
		// Пустая ссылка не добавляется.
		ДобавитьЭлемент = ЗначениеЗаполнено(УровеньДоступа);  
		
		// Регистрация доступна не для всех видов доступа.
		Если УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.Регистрация") Тогда
			ДобавитьЭлемент = 
				ПредметыДоступаИспользующиеРегистрацию.НайтиПоЗначению(ТекущиеДанные.Предмет) <> Неопределено;
		КонецЕсли;
		
		Если ДобавитьЭлемент Тогда
			СписокВыбора.Добавить(УровеньДоступа);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обход проблемы со сбивающейся текущей строкой подчиненной таблицы.
	Если ЗначениеЗаполнено(Предмет) И ЭлементРазрешенияИсключительные.ТекущаяСтрока = Неопределено Тогда
		Для Каждого Стр Из РазрешенияИсключительные Цикл
			Если Стр.Предмет = Предмет Тогда
				ЭлементРазрешенияИсключительные.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Очистка дерева значений разрезов доступа.
	ЗначенияДоступаИсключительные.ПолучитьЭлементы().Очистить();
	
	РазрешенияИсключительныеПриАктивизацииСтрокиОбработчик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДоступаДляЛАПриАктивизацииСтрокиОбработчик()
	
	ТекущиеДанные = Элементы.ПредметыДоступаДляЛА.ТекущиеДанные;
	
	// Сохранение пометок для предыдущей строки разрешения.
	АктуализироватьРазвернутыеРазрешенияДляЛА();
	ИдентификаторТекущейСтрокиЛА = -1;
	
	// Отборы в подчиненных таблицах.
	Предмет = ТекущиеДанные.Предмет;
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Предмет = 0;
	КонецЕсли;
	
	ЭлементРазрешенияДляЛА= Элементы.РазрешенияДляЛА;
	ЭлементРазрешенияДляЛА.ОтборСтрок = Новый ФиксированнаяСтруктура("Предмет", Предмет);
	
	// Заполнение списка выбора уровня доступа.
	СписокВыбора = Элементы.РазрешенияДляЛАУровеньДоступа.СписокВыбора;
	СписокВыбора.Очистить();
	
	Сч = 0;
	УровниДоступаВПорядкеПриоритетов =
		НастройкиДоступаКлиентСерверПовтИсп.УровниДоступаВПорядкеПриоритетов(Истина);
	КолЗаписей = УровниДоступаВПорядкеПриоритетов.Количество();
	
	Пока Сч < КолЗаписей Цикл
		
		УровеньДоступа = УровниДоступаВПорядкеПриоритетов[Сч];
		Сч = Сч + 1;
		
		// Пустая ссылка не добавляется.
		ДобавитьЭлемент = ЗначениеЗаполнено(УровеньДоступа);  
		
		// Регистрация доступна не для всех видов доступа.
		Если УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.Регистрация") Тогда
			ДобавитьЭлемент = 
				ПредметыДоступаИспользующиеРегистрацию.НайтиПоЗначению(ТекущиеДанные.Предмет) <> Неопределено;
		КонецЕсли;
		
		Если ДобавитьЭлемент Тогда
			СписокВыбора.Добавить(УровеньДоступа);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обход проблемы со сбивающейся текущей строкой подчиненной таблицы.
	Если ЗначениеЗаполнено(Предмет) И ЭлементРазрешенияДляЛА.ТекущаяСтрока = Неопределено Тогда
		Для Каждого Стр Из РазрешенияДляЛА Цикл
			Если Стр.Предмет = Предмет Тогда
				ЭлементРазрешенияДляЛА.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Очистка дерева значений разрезов доступа.
	ЗначенияДоступаДляЛА.ПолучитьЭлементы().Очистить();
	
	РазрешенияДляЛАПриАктивизацииСтрокиОбработчик();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазрешенияИсключительные

&НаКлиенте
Процедура РазрешенияИсключительныеПриАктивизацииСтроки(Элемент)
	
	Если ИзмененаСтрокаСписка Тогда
		ИзмененаСтрокаСписка = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("РазрешенияИсключительныеПриАктивизацииСтрокиОбработчик", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАПриАктивизацииСтроки(Элемент)
	
	Если ИзмененаСтрокаСписка Тогда
		ИзмененаСтрокаСписка = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("РазрешенияДляЛАПриАктивизацииСтрокиОбработчик", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеПриАктивизацииСтрокиОбработчик()
	
	// Сохранение пометок для предыдущей строки.
	АктуализироватьРазвернутыеРазрешения();
	
	// Заполнение значений разрезов доступа для текущей строки.
	
	ТекущиеДанные = Элементы.РазрешенияИсключительные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		// Очистка дерева значений разрезов доступа.
		ЗначенияДоступаИсключительные.ПолучитьЭлементы().Очистить();
		
		Для Каждого СтрВида Из ЗначенияДоступаИсключительные.ПолучитьЭлементы() Цикл
			СтрВида.Пометка = 0;
			Элементы.ЗначенияДоступаИсключительные.Свернуть(СтрВида.ПолучитьИдентификатор());
			Для Каждого Стр Из СтрВида.ПолучитьЭлементы() Цикл
				Стр.Пометка = 0;
			КонецЦикла;
 		КонецЦикла;
		
		ИдентификаторТекущейСтрокиИнд = -1;
		
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторТекущейСтрокиИнд = Элементы.РазрешенияИсключительные.ТекущаяСтрока;
	
	// Заполнение дерева.
	Если ЗначенияДоступаИсключительные.ПолучитьЭлементы().Количество() = 0  Тогда
		ЗаполнитьДеревоЗначенийРазрезовПоПредмету();
	КонецЕсли;
	
	// Заполнение пометок.
	ДоступныеЗначения = Новый Соответствие;
	СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	
	НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		ДоступныеЗначения.Вставить(Стр.ЗначениеДоступа, Истина);
	КонецЦикла;
	
	ВсеСтрокиДерева =
		ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(ЗначенияДоступаИсключительные);
	Для Каждого Стр Из ВсеСтрокиДерева Цикл
		Стр.Пометка = 0;
	КонецЦикла;
	
	Для Каждого Стр Из ВсеСтрокиДерева Цикл
		Если ДоступныеЗначения.Получить(Стр.ЗначениеДоступа) <> Неопределено Тогда
			Стр.Пометка = 1;
			ОбновитьПометкиДереваВидовДоступа(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАПриАктивизацииСтрокиОбработчик()
	
	// Сохранение пометок для предыдущей строки.
	АктуализироватьРазвернутыеРазрешенияДляЛА();
	
	// Заполнение значений разрезов доступа для текущей строки.
	
	ТекущиеДанные = Элементы.РазрешенияДляЛА.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		// Очистка дерева значений разрезов доступа.
		ЗначенияДоступаДляЛА.ПолучитьЭлементы().Очистить();
		
		Для Каждого СтрВида Из ЗначенияДоступаДляЛА.ПолучитьЭлементы() Цикл
			СтрВида.Пометка = 0;
			Элементы.ЗначенияДоступаДляЛА.Свернуть(СтрВида.ПолучитьИдентификатор());
			Для Каждого Стр Из СтрВида.ПолучитьЭлементы() Цикл
				Стр.Пометка = 0;
			КонецЦикла;
 		КонецЦикла;
		
		ИдентификаторТекущейСтрокиЛА = -1;
		
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторТекущейСтрокиЛА = Элементы.РазрешенияДляЛА.ТекущаяСтрока;
	
	// Заполнение дерева.
	Если ЗначенияДоступаДляЛА.ПолучитьЭлементы().Количество() = 0  Тогда
		ЗаполнитьДеревоЗначенийРазрезовПоПредметуДляЛА();
	КонецЕсли;
	
	// Заполнение пометок.
	ДоступныеЗначения = Новый Соответствие;
	СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	
	НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		ДоступныеЗначения.Вставить(Стр.ЗначениеДоступа, Истина);
	КонецЦикла;
	
	ВсеСтрокиДерева =
		ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(ЗначенияДоступаДляЛА);
	Для Каждого Стр Из ВсеСтрокиДерева Цикл
		Стр.Пометка = 0;
	КонецЦикла;
	
	Для Каждого Стр Из ВсеСтрокиДерева Цикл
		Если ДоступныеЗначения.Получить(Стр.ЗначениеДоступа) <> Неопределено Тогда
			Стр.Пометка = 1;
			ОбновитьПометкиДереваВидовДоступа(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеПередНачаломДобавления(
			Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		АктуализироватьРазвернутыеРазрешения();	// Запись разрешений для их копирования в новую строку.
		ИдентификаторКопируемойСтроки = Элементы.РазрешенияИсключительные.ТекущаяСтрока;
	Иначе
		ИдентификаторКопируемойСтроки = -1;
	КонецЕсли;
	
	РаботаСПользователямиКлиент.ВыбратьКонтейнерПользователей(Элемент, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАПередНачаломДобавления(
			Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		АктуализироватьРазвернутыеРазрешенияДляЛА(); // Запись разрешений для их копирования в новую строку.
		ИдентификаторКопируемойСтроки = Элементы.РазрешенияДляЛА.ТекущаяСтрока;
	Иначе
		ИдентификаторКопируемойСтроки = -1;
	КонецЕсли;
	
	РаботаСПользователямиКлиент.ВыбратьКонтейнерПользователей(Элемент, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ТипКонтейнеровПользователей.СодержитТип(ТипЗнч(ВыбранноеЗначение)) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Строка добавляется всегда, проверять на дубли не нужно, 
	// т.к. может быть несколько строк с одним пользователем.
	ТекущиеДанныеПредмета = Элементы.ПредметыДоступа.ТекущиеДанные;
	ТекущиеДанныеПредмета.ЕстьРазрешения = Истина;
	
	Стр = РазрешенияИсключительные.Добавить();
	Стр.Предмет = ТекущиеДанныеПредмета.Предмет;
	Стр.Пользователь = ВыбранноеЗначение;
	Стр.УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.Редактирование");
	Стр.ИдентификаторКоллекции = Строка(Новый УникальныйИдентификатор());
	
	ЗначенияДоступаДляНовойСтроки = Неопределено;
	
	Если ИдентификаторКопируемойСтроки >= 0 Тогда
		
		// Копирование разрешений из строки-источника.
		КопируемаяСтрока = РазрешенияИсключительные.НайтиПоИдентификатору(ИдентификаторКопируемойСтроки);
		Стр.УровеньДоступа = КопируемаяСтрока.УровеньДоступа;
		
		ЗначенияДоступаДляНовойСтроки = Новый Соответствие;
		СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, КопируемаяСтрока);
		
		НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяРазвернутаяСтрока = РазрешенияИсключительныеРазвернутые.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяРазвернутаяСтрока, НайденнаяСтрока);
			НоваяРазвернутаяСтрока.Пользователь = ВыбранноеЗначение;
			НоваяРазвернутаяСтрока.ИдентификаторКоллекции = Стр.ИдентификаторКоллекции;
		КонецЦикла;
		
	Иначе
		
		// Для новой строки по умолчанию заполняются разрешения из общих.
		
		// Дерево может быть еще не заполнено, если это первое разрешение по предмету.
		Если ЗначенияДоступаИсключительные.ПолучитьЭлементы().Количество() = 0  Тогда
			ЗаполнитьДеревоЗначенийРазрезовПоПредмету();
		КонецЕсли;
		
		ВладельцыРазрешений = ВладельцыНаследуемыхРазрешений(ВыбранноеЗначение);
		ВладельцыРазрешений.Добавить(ВыбранноеЗначение);
		
		ДоступныеРазрешения = Новый Соответствие;
		Для Каждого СтрОбщихРазрешений Из РазрешенияОбщие Цикл
			Если ВладельцыРазрешений.Найти(Стр.Пользователь) <> Неопределено Тогда
				ДоступныеРазрешения.Вставить(СтрОбщихРазрешений.ЗначениеДоступа, Истина);
			КонецЕсли;
		КонецЦикла;
		
		ВсеСтрокиДерева = ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(
			ЗначенияДоступаИсключительные);
		Для Каждого СтрокаДерева Из ВсеСтрокиДерева Цикл
			Если ДоступныеРазрешения.Получить(СтрокаДерева.ЗначениеДоступа) <> Неопределено Тогда
				НоваяРазвернутаяСтрока = РазрешенияИсключительныеРазвернутые.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяРазвернутаяСтрока, Стр);
				НоваяРазвернутаяСтрока.ЗначениеДоступа = СтрокаДерева.ЗначениеДоступа;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторДобавленнойСтроки = Стр.ПолучитьИдентификатор();
	ПодключитьОбработчикОжидания("РазрешенияИсключительныеУстановитьТекущуюСтроку", 0.1, Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ТипКонтейнеровПользователей.СодержитТип(ТипЗнч(ВыбранноеЗначение)) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Строка добавляется всегда, проверять на дубли не нужно, 
	// т.к. может быть несколько строк с одним пользователем.
	ТекущиеДанныеПредмета = Элементы.ПредметыДоступаДляЛА.ТекущиеДанные;
	ТекущиеДанныеПредмета.ЕстьРазрешения = Истина;
	
	Стр = РазрешенияДляЛА.Добавить();
	Стр.Предмет = ТекущиеДанныеПредмета.Предмет;
	Стр.Пользователь = ВыбранноеЗначение;
	Стр.УровеньДоступа = ПредопределенноеЗначение("Справочник.УровниДоступа.РедактированиеБезОграничения");
	Стр.ИдентификаторКоллекции = Строка(Новый УникальныйИдентификатор());
	
	ЗначенияДоступаДляНовойСтроки = Неопределено;
	
	Если ИдентификаторКопируемойСтроки >= 0 Тогда
		
		// Копирование разрешений из строки-источника.
		КопируемаяСтрока = РазрешенияДляЛА.НайтиПоИдентификатору(ИдентификаторКопируемойСтроки);
		Стр.УровеньДоступа = КопируемаяСтрока.УровеньДоступа;
		
		ЗначенияДоступаДляНовойСтроки = Новый Соответствие;
		СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, КопируемаяСтрока);
		
		НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяРазвернутаяСтрока = РазрешенияДляЛАРазвернутые.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяРазвернутаяСтрока, НайденнаяСтрока);
			НоваяРазвернутаяСтрока.Пользователь = ВыбранноеЗначение;
			НоваяРазвернутаяСтрока.ИдентификаторКоллекции = Стр.ИдентификаторКоллекции;
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторДобавленнойСтроки = Стр.ПолучитьИдентификатор();
	ПодключитьОбработчикОжидания("РазрешенияДляЛАУстановитьТекущуюСтроку", 0.1, Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеУстановитьТекущуюСтроку()
	
	Элементы.РазрешенияИсключительные.ТекущаяСтрока = ИдентификаторДобавленнойСтроки;
	Элементы.ЗначенияДоступаИсключительныеПометка.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАУстановитьТекущуюСтроку()
	
	Элементы.РазрешенияДляЛА.ТекущаяСтрока = ИдентификаторДобавленнойСтроки;
	Элементы.ЗначенияДоступаДляЛАПометка.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеПередУдалением(Элемент, Отказ)
	
	// Очистка разрешений.
	
	ИдентификаторТекущейСтрокиИнд = -1; // Актуализацию разрешений выполнять не нужно.
	СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Элемент.ТекущиеДанные);
	
	НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		РазрешенияИсключительныеРазвернутые.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАПередУдалением(Элемент, Отказ)
	
	// Очистка разрешений.
	
	ИдентификаторТекущейСтрокиЛА = -1; // Актуализацию разрешений выполнять не нужно.
	СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Элемент.ТекущиеДанные);
	
	НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		РазрешенияДляЛАРазвернутые.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеПослеУдаления(Элемент)
	
	ТекущиеДанныеПредмета = Элементы.ПредметыДоступа.ТекущиеДанные;
	НайденныеСтроки = РазрешенияИсключительные.НайтиСтроки(
		Новый Структура("Предмет", ТекущиеДанныеПредмета.Предмет));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущиеДанныеПредмета.ЕстьРазрешения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАПослеУдаления(Элемент)
	
	ТекущиеДанныеПредмета = Элементы.ПредметыДоступаДляЛА.ТекущиеДанные;
	НайденныеСтроки = РазрешенияДляЛА.НайтиСтроки(
		Новый Структура("Предмет", ТекущиеДанныеПредмета.Предмет));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущиеДанныеПредмета.ЕстьРазрешения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РазрешенияИсключительныеПользователь Тогда
		ПоказатьЗначение(, Элементы.РазрешенияИсключительные.ТекущиеДанные.Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РазрешенияДляЛАПользователь Тогда
		ПоказатьЗначение(, Элементы.РазрешенияДляЛА.ТекущиеДанные.Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияИсключительныеУровеньДоступаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияДляЛАУровеньДоступаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияДоступаИсключительные

&НаКлиенте
Процедура ЗначенияДоступаИсключительныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗначенияДоступаИсключительные.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.ЗначениеДоступа) <> Тип("ПланВидовХарактеристикСсылка.ВидыДоступа")
		И Поле = Элементы.ЗначенияДоступаИсключительныеПредставление Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗначениеДоступа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаДляЛАВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗначенияДоступаДляЛА.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.ЗначениеДоступа) <> Тип("ПланВидовХарактеристикСсылка.ВидыДоступа")
		И Поле = Элементы.ЗначенияДоступаДляЛАПредставление Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗначениеДоступа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаИсключительныеПометкаПриИзменении(Элемент)
	
	// При изменении значений доступа очищается ссылка на коллекцию.
	ДанныеРазрешения = Элементы.РазрешенияИсключительные.ТекущиеДанные;
	Если ДанныеРазрешения <> Неопределено 
		И ЗначениеЗаполнено(ДанныеРазрешения.КоллекцияЗначенийДоступа) Тогда
		
		ДанныеРазрешения.КоллекцияЗначенийДоступа = 
			ПредопределенноеЗначение("Справочник.КоллекцииЗначенийДоступа.ПустаяСсылка");
			
	КонецЕсли;
	
	СтрокаДерева = ЗначенияДоступаИсключительные.НайтиПоИдентификатору(
		Элементы.ЗначенияДоступаИсключительные.ТекущаяСтрока);
	ОбновитьПометкиДереваВидовДоступа(СтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаДляЛАПометкаПриИзменении(Элемент)
	
	// При изменении значений доступа очищается ссылка на коллекцию.
	ДанныеРазрешения = Элементы.РазрешенияДляЛА.ТекущиеДанные;
	Если ДанныеРазрешения <> Неопределено 
		И ЗначениеЗаполнено(ДанныеРазрешения.КоллекцияЗначенийДоступа) Тогда
		
		ДанныеРазрешения.КоллекцияЗначенийДоступа = 
			ПредопределенноеЗначение("Справочник.КоллекцииЗначенийДоступа.ПустаяСсылка");
			
	КонецЕсли;
	
	СтрокаДерева = ЗначенияДоступаДляЛА.НайтиПоИдентификатору(
		Элементы.ЗначенияДоступаДляЛА.ТекущаяСтрока);
	ОбновитьПометкиДереваВидовДоступа(СтрокаДерева);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОбновитьПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Внесенные изменения будут потеряны. Продолжить?'; en = 'Your changes will be lost. Do you want to continue?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбновитьПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРазрешения();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	СохранитьНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	СохранитьНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(ЗакрытьФорму)
	
	АктуализироватьРазвернутыеРазрешения();
	АктуализироватьРазвернутыеРазрешенияДляЛА();
	
	ПараметрыОповещения = Новый Структура("ЗакрытьФорму", ЗакрытьФорму);
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиПродолжение", ЭтотОбъект, ПараметрыОповещения);
	
	Если Модифицированность И РазрешенияИзмененыВДругойФорме Тогда
		ТекстВопроса = НСтр("ru = 'Разрешения доступа были изменены в другой форме.
							|Вы уверены, что хотите сохранить текущую настройку?';
							|en = 'Access permissions have been changed in another form.
							|Are you sure you want to save the current configuration?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"СохранитьНастройкиПродолжение2", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НайтиПустыеРазрезыНаСервере() Тогда
		ТекстВопроса = НСтр("ru = 'Обнаружены разрешения, где для одного или нескольких разрезов
								|не выбрано ни одного значения. См. разрезы, выделенные красным.
								|Такие разрешения не дают доступ к предметам.
								|Сохранить все равно?';
								|en = 'There are permissions with no values specified for one or several
								|access regions. Check the regions marked with red.
								|Such permissions would not allow access.
								|Save anyway?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПродолжение2(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНастройкиНаСервере();
		Оповестить("РазрешенияДоступаИзменены",, ЭтотОбъект);
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗакрытьФорму Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	НачатьТранзакцию();
	
	Попытка
	
		// Полная блокировка таблиц разрешений доступа.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РазрешенияДоступаОбщие");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РазрешенияДоступаИсключительные");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РазрешенияДляЛокальныхАдминистраторов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Общие разрешения.
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РазрешенияОбщие.ЗначениеДоступа,
			|	РазрешенияОбщие.Пользователь,
			|	РазрешенияОбщие.УровеньДоступа,
			|	РазрешенияОбщие.Унаследован
			|ПОМЕСТИТЬ РазрешенияОбщиеНовые
			|ИЗ
			|	&РазрешенияОбщие КАК РазрешенияОбщие
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.ЗначениеДоступа,
			|	ВложенныйЗапрос.Пользователь,
			|	ВложенныйЗапрос.УровеньДоступа,
			|	ВложенныйЗапрос.Добавить
			|ИЗ
			|	(ВЫБРАТЬ
			|		РазрешенияОбщиеНовые.ЗначениеДоступа КАК ЗначениеДоступа,
			|		РазрешенияОбщиеНовые.Пользователь КАК Пользователь,
			|		РазрешенияОбщиеНовые.УровеньДоступа КАК УровеньДоступа,
			|		ИСТИНА КАК Добавить
			|	ИЗ
			|		РазрешенияОбщиеНовые КАК РазрешенияОбщиеНовые
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияОбщие
			|			ПО РазрешенияОбщиеНовые.ЗначениеДоступа = РазрешенияОбщие.ЗначениеДоступа
			|				И РазрешенияОбщиеНовые.Пользователь = РазрешенияОбщие.Пользователь
			|				И РазрешенияОбщиеНовые.УровеньДоступа = РазрешенияОбщие.УровеньДоступа
			|	ГДЕ
			|		НЕ РазрешенияОбщиеНовые.Унаследован
			|		И РазрешенияОбщие.ЗначениеДоступа ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РазрешенияОбщие.ЗначениеДоступа,
			|		РазрешенияОбщие.Пользователь,
			|		РазрешенияОбщие.УровеньДоступа,
			|		ЛОЖЬ
			|	ИЗ
			|		РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияОбщие
			|			ЛЕВОЕ СОЕДИНЕНИЕ РазрешенияОбщиеНовые КАК РазрешенияОбщиеНовые
			|			ПО РазрешенияОбщие.ЗначениеДоступа = РазрешенияОбщиеНовые.ЗначениеДоступа
			|				И РазрешенияОбщие.Пользователь = РазрешенияОбщиеНовые.Пользователь
			|				И РазрешенияОбщие.УровеньДоступа = РазрешенияОбщиеНовые.УровеньДоступа
			|				И НЕ РазрешенияОбщиеНовые.Унаследован
			|	ГДЕ
			|		РазрешенияОбщиеНовые.ЗначениеДоступа ЕСТЬ NULL ) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВложенныйЗапрос.Добавить");
		
		Запрос.УстановитьПараметр("РазрешенияОбщие",
			РеквизитФормыВЗначение("РазрешенияОбщие", Тип("ТаблицаЗначений")));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РазрешенияДоступаОбщие.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Если Выборка.Добавить Тогда
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
			
		КонецЦикла;
		
		// Специальные разрешения.
		
		// Заполнение коллекций значений доступа.
		
		ВсеФактическиИспользуемыеРазрезы = Новый Соответствие;
		Для Каждого СтрокаДерева Из ВсеВидыДоступа.ПолучитьЭлементы() Цикл
			// В это соответствие не добавляются отключенные разрезы,
			// а также разрезы, которые не используются, т.к. по ним в базе нет ни одного значения.
			ВсеФактическиИспользуемыеРазрезы.Вставить(СтрокаДерева.ВидДоступа, Истина);
		КонецЦикла;
		
		Для Каждого Стр Из РазрешенияИсключительные Цикл
			Если Не ЗначениеЗаполнено(Стр.КоллекцияЗначенийДоступа) Тогда
				
				ЗначенияДоступаКоллекции = Новый Массив;
				
				СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Стр);
				НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаЗначения Из НайденныеСтроки Цикл
					ЗначенияДоступаКоллекции.Добавить(СтрокаЗначения.ЗначениеДоступа);
				КонецЦикла;
				
				РазрезыДоступаКоллекции =
					ДокументооборотПраваДоступа.РазрезыДоступаПоЗначениям(ЗначенияДоступаКоллекции);
				
				// Добавление разрешений по отключенным разрезам.
				СтрокиПредмета = ПредметыДоступа.НайтиСтроки(Новый Структура("Предмет", Стр.Предмет));
				СтрокаПредмета = СтрокиПредмета[0];
				АктуальныеРазрезыПредмета = СтрокаПредмета.ВидыДоступа;
				Для Каждого Эл Из АктуальныеРазрезыПредмета Цикл
					
					РазрезПредмета = Эл.Значение;
					Если ВсеФактическиИспользуемыеРазрезы.Получить(РазрезПредмета) = Неопределено Тогда
						
						// Разрез отключен или не используется. Если среди выбранных значений нет тех,
						// которые относятся к этому разрезу, добавляется ссылка на разрез.
						Если РазрезыДоступаКоллекции.Найти(РазрезПредмета) = Неопределено Тогда
							ЗначенияДоступаКоллекции.Добавить(РазрезПредмета);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Стр.КоллекцияЗначенийДоступа = 
					Справочники.КоллекцииЗначенийДоступа.ПолучитьКоллекцию(ЗначенияДоступаКоллекции);
				
			КонецЕсли;
		КонецЦикла;
		
		// Поиск отличий и запись.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РазрешенияИсключительные.Предмет КАК Предмет,
			|	РазрешенияИсключительные.КоллекцияЗначенийДоступа,
			|	РазрешенияИсключительные.Пользователь,
			|	РазрешенияИсключительные.УровеньДоступа
			|ПОМЕСТИТЬ РазрешенияИсключительныеБезГруппировки
			|ИЗ
			|	&РазрешенияИсключительные КАК РазрешенияИсключительные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Предмет,
			|	ВложенныйЗапрос.КоллекцияЗначенийДоступа,
			|	ВложенныйЗапрос.Пользователь,
			|	УровниДоступа.Ссылка КАК УровеньДоступа
			|ПОМЕСТИТЬ РазрешенияНовые
			|ИЗ
			|	(ВЫБРАТЬ
			|		РазрешенияИсключительныеБезГруппировки.Предмет КАК Предмет,
			|		РазрешенияИсключительныеБезГруппировки.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
			|		РазрешенияИсключительныеБезГруппировки.Пользователь КАК Пользователь,
			|		МАКСИМУМ(УровниДоступа.Приоритет) КАК ПриоритетУровняДоступа
			|	ИЗ
			|		РазрешенияИсключительныеБезГруппировки КАК РазрешенияИсключительныеБезГруппировки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
			|			ПО РазрешенияИсключительныеБезГруппировки.УровеньДоступа = УровниДоступа.Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		РазрешенияИсключительныеБезГруппировки.КоллекцияЗначенийДоступа,
			|		РазрешенияИсключительныеБезГруппировки.Пользователь,
			|		РазрешенияИсключительныеБезГруппировки.Предмет) КАК ВложенныйЗапрос
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
			|		ПО ВложенныйЗапрос.ПриоритетУровняДоступа = УровниДоступа.Приоритет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Предмет,
			|	ВложенныйЗапрос.КоллекцияЗначенийДоступа,
			|	ВложенныйЗапрос.Пользователь,
			|	ВложенныйЗапрос.УровеньДоступа,
			|	ВложенныйЗапрос.Добавить
			|ИЗ
			|	(ВЫБРАТЬ
			|		РазрешенияНовые.Предмет КАК Предмет,
			|		РазрешенияНовые.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
			|		РазрешенияНовые.Пользователь КАК Пользователь,
			|		РазрешенияНовые.УровеньДоступа КАК УровеньДоступа,
			|		ИСТИНА КАК Добавить
			|	ИЗ
			|		РазрешенияНовые КАК РазрешенияНовые
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияСтарые
			|			ПО РазрешенияНовые.Предмет = РазрешенияСтарые.Предмет
			|				И РазрешенияНовые.КоллекцияЗначенийДоступа = РазрешенияСтарые.КоллекцияЗначенийДоступа
			|				И РазрешенияНовые.Пользователь = РазрешенияСтарые.Пользователь
			|				И РазрешенияНовые.УровеньДоступа = РазрешенияСтарые.УровеньДоступа
			|	ГДЕ
			|		РазрешенияСтарые.Предмет ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РазрешенияСтарые.Предмет,
			|		РазрешенияСтарые.КоллекцияЗначенийДоступа,
			|		РазрешенияСтарые.Пользователь,
			|		РазрешенияСтарые.УровеньДоступа,
			|		ЛОЖЬ
			|	ИЗ
			|		РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияСтарые
			|			ЛЕВОЕ СОЕДИНЕНИЕ РазрешенияНовые КАК РазрешенияНовые
			|			ПО РазрешенияСтарые.Предмет = РазрешенияНовые.Предмет
			|				И РазрешенияСтарые.КоллекцияЗначенийДоступа = РазрешенияНовые.КоллекцияЗначенийДоступа
			|				И РазрешенияСтарые.Пользователь = РазрешенияНовые.Пользователь
			|				И РазрешенияСтарые.УровеньДоступа = РазрешенияНовые.УровеньДоступа
			|	ГДЕ
			|		РазрешенияНовые.Предмет ЕСТЬ NULL ) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВложенныйЗапрос.Добавить");
		
		Запрос.УстановитьПараметр("РазрешенияИсключительные",
			РеквизитФормыВЗначение("РазрешенияИсключительные", Тип("ТаблицаЗначений")));
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			// Запись изменений.
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Запись = РегистрыСведений.РазрешенияДоступаИсключительные.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				Если Выборка.Добавить Тогда
					Запись.Записать();
				Иначе
					Запись.Удалить();
				КонецЕсли;
				
			КонецЦикла;
			
			// Обновление прав разрезов доступа.
			// Права могли поменяться в результате изменения исключительных разрешений.
			ДокументооборотПраваДоступа.ОбновитьПраваВсехРазрезовДоступа();
			
		КонецЕсли;
		
		// Локальные администраторы.
		
		// Заполнение коллекций значений доступа.
		Для Каждого Стр Из РазрешенияДляЛА Цикл
			Если Не ЗначениеЗаполнено(Стр.КоллекцияЗначенийДоступа) Тогда
				
				ЗначенияДоступаКоллекции = Новый Массив;
				
				СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Стр);
				НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаЗначения Из НайденныеСтроки Цикл
					ЗначенияДоступаКоллекции.Добавить(СтрокаЗначения.ЗначениеДоступа);
				КонецЦикла;
				
				РазрезыДоступаКоллекции =
					ДокументооборотПраваДоступа.РазрезыДоступаПоЗначениям(ЗначенияДоступаКоллекции);
				
				// Добавление разрешений по отключенным разрезам.
				СтрокиПредмета = ПредметыДоступа.НайтиСтроки(Новый Структура("Предмет", Стр.Предмет));
				СтрокаПредмета = СтрокиПредмета[0];
				АктуальныеРазрезыПредмета = СтрокаПредмета.ВидыДоступа;
				Для Каждого Эл Из АктуальныеРазрезыПредмета Цикл
					
					РазрезПредмета = Эл.Значение;
					Если ВсеФактическиИспользуемыеРазрезы.Получить(РазрезПредмета) = Неопределено Тогда
						
						// Разрез отключен. Если среди выбранных значений нет тех,
						// которые относятся к этому разрезу, добавляется ссылка на разрез.
						Если РазрезыДоступаКоллекции.Найти(РазрезПредмета) = Неопределено Тогда
							ЗначенияДоступаКоллекции.Добавить(РазрезПредмета);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Поиск коллекции.
				Стр.КоллекцияЗначенийДоступа = 
					Справочники.КоллекцииЗначенийДоступа.ПолучитьКоллекцию(ЗначенияДоступаКоллекции);
				
			КонецЕсли;
		КонецЦикла;
		
		// Поиск отличий и запись.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РазрешенияДляЛА.Предмет КАК Предмет,
			|	РазрешенияДляЛА.КоллекцияЗначенийДоступа,
			|	РазрешенияДляЛА.Пользователь,
			|	РазрешенияДляЛА.УровеньДоступа
			|ПОМЕСТИТЬ РазрешенияДляЛАБезГруппировки
			|ИЗ
			|	&РазрешенияДляЛА КАК РазрешенияДляЛА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Предмет,
			|	ВложенныйЗапрос.КоллекцияЗначенийДоступа,
			|	ВложенныйЗапрос.Пользователь,
			|	УровниДоступа.Ссылка КАК УровеньДоступа
			|ПОМЕСТИТЬ РазрешенияНовые
			|ИЗ
			|	(ВЫБРАТЬ
			|		РазрешенияДляЛАБезГруппировки.Предмет КАК Предмет,
			|		РазрешенияДляЛАБезГруппировки.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
			|		РазрешенияДляЛАБезГруппировки.Пользователь КАК Пользователь,
			|		МАКСИМУМ(УровниДоступа.Приоритет) КАК ПриоритетУровняДоступа
			|	ИЗ
			|		РазрешенияДляЛАБезГруппировки КАК РазрешенияДляЛАБезГруппировки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
			|			ПО РазрешенияДляЛАБезГруппировки.УровеньДоступа = УровниДоступа.Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		РазрешенияДляЛАБезГруппировки.КоллекцияЗначенийДоступа,
			|		РазрешенияДляЛАБезГруппировки.Пользователь,
			|		РазрешенияДляЛАБезГруппировки.Предмет) КАК ВложенныйЗапрос
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
			|		ПО ВложенныйЗапрос.ПриоритетУровняДоступа = УровниДоступа.Приоритет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Предмет,
			|	ВложенныйЗапрос.КоллекцияЗначенийДоступа,
			|	ВложенныйЗапрос.Пользователь,
			|	ВложенныйЗапрос.УровеньДоступа,
			|	ВложенныйЗапрос.Добавить
			|ИЗ
			|	(ВЫБРАТЬ
			|		РазрешенияНовые.Предмет КАК Предмет,
			|		РазрешенияНовые.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
			|		РазрешенияНовые.Пользователь КАК Пользователь,
			|		РазрешенияНовые.УровеньДоступа КАК УровеньДоступа,
			|		ИСТИНА КАК Добавить
			|	ИЗ
			|		РазрешенияНовые КАК РазрешенияНовые
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияСтарые
			|			ПО РазрешенияНовые.Предмет = РазрешенияСтарые.Предмет
			|				И РазрешенияНовые.КоллекцияЗначенийДоступа = РазрешенияСтарые.КоллекцияЗначенийДоступа
			|				И РазрешенияНовые.Пользователь = РазрешенияСтарые.Пользователь
			|				И РазрешенияНовые.УровеньДоступа = РазрешенияСтарые.УровеньДоступа
			|	ГДЕ
			|		РазрешенияСтарые.Предмет ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РазрешенияСтарые.Предмет,
			|		РазрешенияСтарые.КоллекцияЗначенийДоступа,
			|		РазрешенияСтарые.Пользователь,
			|		РазрешенияСтарые.УровеньДоступа,
			|		ЛОЖЬ
			|	ИЗ
			|		РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияСтарые
			|			ЛЕВОЕ СОЕДИНЕНИЕ РазрешенияНовые КАК РазрешенияНовые
			|			ПО РазрешенияСтарые.Предмет = РазрешенияНовые.Предмет
			|				И РазрешенияСтарые.КоллекцияЗначенийДоступа = РазрешенияНовые.КоллекцияЗначенийДоступа
			|				И РазрешенияСтарые.Пользователь = РазрешенияНовые.Пользователь
			|				И РазрешенияСтарые.УровеньДоступа = РазрешенияНовые.УровеньДоступа
			|	ГДЕ
			|		РазрешенияНовые.Предмет ЕСТЬ NULL ) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВложенныйЗапрос.Добавить");
		
		Запрос.УстановитьПараметр("РазрешенияДляЛА",
			РеквизитФормыВЗначение("РазрешенияДляЛА", Тип("ТаблицаЗначений")));
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			// Запись изменений.
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Запись = РегистрыСведений.РазрешенияДляЛокальныхАдминистраторов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				Если Выборка.Добавить Тогда
					Запись.Записать();
				Иначе
					Запись.Удалить();
				КонецЕсли;
				
			КонецЦикла;
			
			// Обновление прав разрезов доступа.
			// Права могли поменяться в результате изменения исключительных разрешений.
			ДокументооборотПраваДоступа.ОбновитьПраваВсехРазрезовДоступа();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись разрешений доступа'; en = 'Saving permissions'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРазрешенияОбщие(Команда)
	
	ТекущиеДанные = Элементы.ЗначенияДоступаОбщие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьРазрешенияОбщиеПродолжение", ЭтотОбъект);
	
	ПараметрыФормыВыбораРазрезов = Новый Структура("ПредставлениеИсточника", ТекущиеДанные.Представление);
	ОткрытьФорму("Обработка.ПолитикиДоступа.Форма.ФормаВыбораРазрезовДоступа",
		ПараметрыФормыВыбораРазрезов, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРазрешенияОбщиеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена
		Или Результат.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется копирование...'; en = 'Copy to ...'"), 0);
	
	РазрезИсточник = Элементы.ЗначенияДоступаОбщие.ТекущиеДанные.ЗначениеДоступа;
	СтруктураОтбора = Новый Структура("ЗначениеДоступа", РазрезИсточник);
	НайденныеСтрокиИсточника = РазрешенияОбщие.НайтиСтроки(СтруктураОтбора);
	
	ВидыДоступаИспользующиеРегистрацию =
		НастройкиДоступаКлиентСервер.ВидыДоступаИспользующиеРегистрацию();
	
	Для Каждого СтрокаПриемника Из Результат Цикл
		
		РазрезПриемник = СтрокаПриемника.ЗначениеДоступа;
		
		// Очистка разрешений.
		СтруктураОтбора.ЗначениеДоступа = РазрезПриемник;
		НайденныеСтроки = РазрешенияОбщие.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаРазрешения Из НайденныеСтроки Цикл
			РазрешенияОбщие.Удалить(СтрокаРазрешения);
		КонецЦикла;
		
		ИспользоватьРегистрацию = 
			ВидыДоступаИспользующиеРегистрацию.Найти(СтрокаПриемника.ВидДоступа) <> Неопределено;
		
		// Добавление новых разрешений.
		Для Каждого СтрокаРазрешения Из НайденныеСтрокиИсточника Цикл
			НоваяСтрока = РазрешенияОбщие.Добавить();
			НоваяСтрока.ЗначениеДоступа = РазрезПриемник;
			НоваяСтрока.Пользователь = СтрокаРазрешения.Пользователь;
			НоваяСтрока.УровеньДоступа = СтрокаРазрешения.УровеньДоступа;
			
			Если Не ИспользоватьРегистрацию
				И НоваяСтрока.УровеньДоступа =
					ПредопределенноеЗначение("Справочник.УровниДоступа.Регистрация") Тогда
					
				НоваяСтрока.УровеньДоступа =
					ПредопределенноеЗначение("Справочник.УровниДоступа.Редактирование");
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДерева = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
			ЗначенияДоступаОбщие, СтруктураОтбора);
		СтрокаДерева.ЕстьРазрешения = НайденныеСтрокиИсточника.Количество() > 0;
		
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Копирование завершено успешно'; en = 'Copying successfully completed'"), 100);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРазрешенияОтПредмета(Команда)
	
	ТекущиеДанные = Элементы.ПредметыДоступа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьРазрешенияОтПредметаПродолжение", ЭтотОбъект);
	
	СписокДляВыбораПредмета = Новый СписокЗначений;
	Для Каждого СтрПредмета Из ПредметыДоступа Цикл
		Если СтрПредмета.ПолучитьИдентификатор() <> Элементы.ПредметыДоступа.ТекущаяСтрока Тогда
			СписокДляВыбораПредмета.Добавить(СтрПредмета.Предмет, СтрПредмета.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыВыбораПредметов = Новый Структура("ПредставлениеИсточника, ВсеПредметы",
		ТекущиеДанные.Представление, СписокДляВыбораПредмета);
	
	ОткрытьФорму("Обработка.ПолитикиДоступа.Форма.ФормаВыбораПредметовДоступа",
		ПараметрыФормыВыбораПредметов, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРазрешенияОтПредметаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена
		Или Результат.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется копирование...'; en = 'Copy to ...'"), 0);
	
	АктуализироватьРазвернутыеРазрешения();
	ПредметыСИзмененнымиНастройками = Новый Массив;
	ПредметИсточник = Элементы.ПредметыДоступа.ТекущиеДанные.Предмет;
	
	СтруктураОтбора = Новый Структура("Предмет", ПредметИсточник);
	НайденныеСтрокиИсточника = РазрешенияИсключительные.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ПредметПриемник Из Результат Цикл
		
		ПредметыСИзмененнымиНастройками.Добавить(ПредметПриемник);
		
		// Очистка разрешений.
		СтруктураОтбора.Предмет = ПредметПриемник;
		НайденныеСтроки = РазрешенияИсключительные.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаРазрешения Из НайденныеСтроки Цикл
			РазрешенияИсключительные.Удалить(СтрокаРазрешения);
		КонецЦикла;
		
		НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаРазрешения Из НайденныеСтроки Цикл
			РазрешенияИсключительныеРазвернутые.Удалить(СтрокаРазрешения);
		КонецЦикла;
		
		// Добавление новых разрешений.
		ЕстьРазрешения = Ложь;
		Для Каждого СтрокаРазрешения Из НайденныеСтрокиИсточника Цикл
			
			НоваяСтрока = РазрешенияИсключительные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРазрешения);
			НоваяСтрока.Предмет = ПредметПриемник;
			НоваяСтрока.КоллекцияЗначенийДоступа = Неопределено;
			НоваяСтрока.ИдентификаторКоллекции = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.Пользователь = СтрокаРазрешения.Пользователь;
			НоваяСтрока.УровеньДоступа = СтрокаРазрешения.УровеньДоступа;
			
			СтруктураОтбораРазвернутыхСтрок = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
			ЗаполнитьЗначенияСвойств(СтруктураОтбораРазвернутыхСтрок, СтрокаРазрешения);
			НайденныеДетальныеСтроки = 
				РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбораРазвернутыхСтрок);
			
			Для Каждого ДетальнаяСтрока Из НайденныеДетальныеСтроки Цикл
				НоваяСтрокаДетальная = РазрешенияИсключительныеРазвернутые.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДетальная, НоваяСтрока);
				НоваяСтрокаДетальная.ЗначениеДоступа = ДетальнаяСтрока.ЗначениеДоступа;
			КонецЦикла;
			
			ЕстьРазрешения = Истина;
			
		КонецЦикла;
		
		СтруктураОтбора.Предмет = ПредметПриемник;
		СтрокаПредмета = ПредметыДоступа.НайтиСтроки(СтруктураОтбора)[0];
		СтрокаПредмета.ЕстьРазрешения = ЕстьРазрешения;
		
	КонецЦикла;
	
	ОтфильтроватьНеактуальныеЗначенияДоступаДляИсключений(ПредметыСИзмененнымиНастройками);
	Состояние(НСтр("ru = 'Копирование завершено успешно'; en = 'Copying successfully completed'"), 100);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРазрешенияОтПредметаДляЛА(Команда)
	
	ТекущиеДанные = Элементы.ПредметыДоступаДляЛА.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьРазрешенияОтПредметаДляЛАПродолжение", ЭтотОбъект);
	
	СписокДляВыбораПредмета = Новый СписокЗначений;
	Для Каждого СтрПредмета Из ПредметыДоступаДляЛА Цикл
		Если СтрПредмета.ПолучитьИдентификатор() <> Элементы.ПредметыДоступаДляЛА.ТекущаяСтрока Тогда
			СписокДляВыбораПредмета.Добавить(СтрПредмета.Предмет, СтрПредмета.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыВыбораПредметов = Новый Структура("ПредставлениеИсточника, ВсеПредметы",
		ТекущиеДанные.Представление, СписокДляВыбораПредмета);
	
	ОткрытьФорму("Обработка.ПолитикиДоступа.Форма.ФормаВыбораПредметовДоступа",
		ПараметрыФормыВыбораПредметов, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРазрешенияОтПредметаДляЛАПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена
		Или Результат.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется копирование...'; en = 'Copying...'"), 0);
	
	АктуализироватьРазвернутыеРазрешенияДляЛА();
	ПредметыСИзмененнымиНастройками = Новый Массив;
	ПредметИсточник = Элементы.ПредметыДоступаДляЛА.ТекущиеДанные.Предмет;
	
	СтруктураОтбора = Новый Структура("Предмет", ПредметИсточник);
	НайденныеСтрокиИсточника = РазрешенияДляЛА.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ПредметПриемник Из Результат Цикл
		
		ПредметыСИзмененнымиНастройками.Добавить(ПредметПриемник);
		
		// Очистка разрешений.
		СтруктураОтбора.Предмет = ПредметПриемник;
		НайденныеСтроки = РазрешенияДляЛА.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаРазрешения Из НайденныеСтроки Цикл
			РазрешенияДляЛА.Удалить(СтрокаРазрешения);
		КонецЦикла;
		
		НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаРазрешения Из НайденныеСтроки Цикл
			РазрешенияДляЛАРазвернутые.Удалить(СтрокаРазрешения);
		КонецЦикла;
		
		// Добавление новых разрешений.
		ЕстьРазрешения = Ложь;
		Для Каждого СтрокаРазрешения Из НайденныеСтрокиИсточника Цикл
			
			НоваяСтрока = РазрешенияДляЛА.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРазрешения);
			НоваяСтрока.Предмет = ПредметПриемник;
			НоваяСтрока.КоллекцияЗначенийДоступа = Неопределено;
			НоваяСтрока.ИдентификаторКоллекции = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.Пользователь = СтрокаРазрешения.Пользователь;
			НоваяСтрока.УровеньДоступа = СтрокаРазрешения.УровеньДоступа;
			
			СтруктураОтбораРазвернутыхСтрок = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
			ЗаполнитьЗначенияСвойств(СтруктураОтбораРазвернутыхСтрок, СтрокаРазрешения);
			НайденныеДетальныеСтроки = 
				РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбораРазвернутыхСтрок);
			
			Для Каждого ДетальнаяСтрока Из НайденныеДетальныеСтроки Цикл
				НоваяСтрокаДетальная = РазрешенияДляЛАРазвернутые.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДетальная, НоваяСтрока);
				НоваяСтрокаДетальная.ЗначениеДоступа = ДетальнаяСтрока.ЗначениеДоступа;
			КонецЦикла;
			
			ЕстьРазрешения = Истина;
			
		КонецЦикла;
		
		СтруктураОтбора.Предмет = ПредметПриемник;
		СтрокаПредмета = ПредметыДоступаДляЛА.НайтиСтроки(СтруктураОтбора)[0];
		СтрокаПредмета.ЕстьРазрешения = ЕстьРазрешения;
		
	КонецЦикла;
	
	ОтфильтроватьНеактуальныеЗначенияДоступаДляЛА(ПредметыСИзмененнымиНастройками);
	Состояние(НСтр("ru = 'Копирование завершено успешно'; en = 'Copying successfully completed'"), 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПометкиУстановить(Команда)
	
	Если Не Элементы.ЗначенияДоступаИсключительныеПометка.ТолькоПросмотр Тогда
		ОбщегоНазначенияДокументооборотКлиентСервер.ЗаполнитьКолонкиДерева(
			ЗначенияДоступаИсключительные, Новый Структура("Пометка", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПометкиУстановитьДляЛА(Команда)
	
	Если Не Элементы.ЗначенияДоступаДляЛАПометка.ТолькоПросмотр Тогда
		ОбщегоНазначенияДокументооборотКлиентСервер.ЗаполнитьКолонкиДерева(
			ЗначенияДоступаДляЛА, Новый Структура("Пометка", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПометкиСнять(Команда)
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ЗаполнитьКолонкиДерева(
		ЗначенияДоступаИсключительные, Новый Структура("Пометка", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПометкиСнятьДляЛА(Команда)
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ЗаполнитьКолонкиДерева(
		ЗначенияДоступаДляЛА, Новый Структура("Пометка", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазрешенияПоУмолчанию(Команда)
	
	// Добавляет сотрудникам разрешения на соответствующие значения разреза "Подразделение".
	
	ТекущаяСтрока = Элементы.ЗначенияДоступаОбщие.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьРазрешенияПоУмолчаниюПродолжение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Разрешения для текущего разреза будут удалены и заполнены по умолчанию. Продолжить?'; en = 'Permissions for the region will be deleted and filled in by default. Proceed?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазрешенияПоУмолчаниюПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРазрешенияПоУмолчаниюНаСервере();
		// ТСК Талько Э.Г.; 09.06.2018; Управление доступом {
		Модифицированность = Ложь;
		// ТСК Талько Э.Г.; 09.06.2018; Управление доступом }
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазрешенияПоУмолчаниюНаСервере()
	
	ТекущиеДанные = Неопределено;
	ТекущаяСтрока = Элементы.ЗначенияДоступаОбщие.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ЗначенияДоступаОбщие.НайтиПоИдентификатору(ТекущаяСтрока);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидДоступа <> ПланыВидовХарактеристик.ВидыДоступа.Подразделения
		Или ТекущиеДанные.ВидДоступа <> ТекущиеДанные.ЗначениеДоступа Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление разрешений.
	СтруктураПоиска = Новый Структура("ЗначениеДоступа", ТекущиеДанные.ЗначениеДоступа);
	НайденныеСтроки = РазрешенияОбщие.НайтиСтроки(СтруктураПоиска);
	Для Каждого Стр Из НайденныеСтроки Цикл
		РазрешенияОбщие.Удалить(Стр);
	КонецЦикла;
	
	ЭлементыКОбработке = Новый Массив;
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Для Каждого Эл Из ДочерниеЭлементы Цикл
		ЭлементыКОбработке.Добавить(Эл);
	КонецЦикла;
	
	ТекущиеДанные.ЕстьРазрешения = Ложь;
	
	Пока ЭлементыКОбработке.Количество() > 0 Цикл
		
		ТекущийЭлементДерева = ЭлементыКОбработке[0];
		ЭлементыКОбработке.Удалить(0);
		
		// Удаление старых разрешений.
		ТекущийЭлементДерева.ЕстьРазрешения = Ложь;
		СтруктураПоиска.ЗначениеДоступа = ТекущийЭлементДерева.ЗначениеДоступа;
		НайденныеСтроки = РазрешенияОбщие.НайтиСтроки(СтруктураПоиска);
		Для Каждого Стр Из НайденныеСтроки Цикл
			РазрешенияОбщие.Удалить(Стр);
		КонецЦикла;
		
		// Включение подчиненных строк в обработку.
		ДочерниеЭлементы = ТекущийЭлементДерева.ПолучитьЭлементы();
		Для Каждого Эл Из ДочерниеЭлементы Цикл
			ЭлементыКОбработке.Добавить(Эл);
		КонецЦикла;
		
		// Добавление нового разрешения.
		Если ДочерниеЭлементы.Количество() = 0 Тогда
			НоваяСтрока = РазрешенияОбщие.Добавить();
			НоваяСтрока.ЗначениеДоступа = ТекущийЭлементДерева.ЗначениеДоступа;
			НоваяСтрока.Пользователь = ТекущийЭлементДерева.ЗначениеДоступа;
			НоваяСтрока.УровеньДоступа = Справочники.УровниДоступа.Редактирование;
			ТекущийЭлементДерева.ЕстьРазрешения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПеренестиСтрокиВДеревоВидовДоступа(Приемник, Источник)
	
	Для Каждого СтрИсточника Из Источник.ПолучитьЭлементы() Цикл
		СтрПриемника = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрПриемника, СтрИсточника);
		ПеренестиСтрокиВДеревоВидовДоступа(СтрПриемника, СтрИсточника);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРазвернутыеРазрешения()
	
	СтруктураОтбора = Неопределено;
	
	Если ИдентификаторТекущейСтрокиИнд >= 0 Тогда
		ПредыдущаяСтрока = РазрешенияИсключительные.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиИнд);
		Если ПредыдущаяСтрока <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ПредыдущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		РазрешенияИсключительныеРазвернутые.Удалить(Стр);
	КонецЦикла;
	
	// Поиск выбранных значений.
	ВыбранныеЗначенияДоступа = Новый Массив;
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого Строка Из ЗначенияДоступаИсключительные.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		
		ТекущаяСтрока = СтрокиКОбработке[0];
		СтрокиКОбработке.Удалить(0);
		
		Если ТекущаяСтрока.Пометка = 1 Тогда
			ВыбранныеЗначенияДоступа.Добавить(ТекущаяСтрока.ЗначениеДоступа);
		ИначеЕсли ТекущаяСтрока.Пометка = 2 Тогда
			Для Каждого Строка Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				СтрокиКОбработке.Добавить(Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись выбранных значений в развернутые разрешения.
	Для Каждого ВыбранноеЗначение Из ВыбранныеЗначенияДоступа Цикл
		Стр = РазрешенияИсключительныеРазвернутые.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, СтруктураОтбора);
		Стр.ЗначениеДоступа = ВыбранноеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРазвернутыеРазрешенияДляЛА()
	
	СтруктураОтбора = Неопределено;
	
	Если ИдентификаторТекущейСтрокиЛА >= 0 Тогда
		ПредыдущаяСтрока = РазрешенияДляЛА.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиЛА);
		Если ПредыдущаяСтрока <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("Предмет, Пользователь, ИдентификаторКоллекции");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ПредыдущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		РазрешенияДляЛАРазвернутые.Удалить(Стр);
	КонецЦикла;
	
	// Поиск выбранных значений.
	ВыбранныеЗначенияДоступа = Новый Массив;
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого Строка Из ЗначенияДоступаДляЛА.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		
		ТекущаяСтрока = СтрокиКОбработке[0];
		СтрокиКОбработке.Удалить(0);
		
		Если ТекущаяСтрока.Пометка = 1 Тогда
			ВыбранныеЗначенияДоступа.Добавить(ТекущаяСтрока.ЗначениеДоступа);
		ИначеЕсли ТекущаяСтрока.Пометка = 2 Тогда
			Для Каждого Строка Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				СтрокиКОбработке.Добавить(Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись выбранных значений в развернутые разрешения.
	Для Каждого ВыбранноеЗначение Из ВыбранныеЗначенияДоступа Цикл
		Стр = РазрешенияДляЛАРазвернутые.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, СтруктураОтбора);
		Стр.ЗначениеДоступа = ВыбранноеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоЗначенийРазрезовПоПредмету()
	
	АктуальныеРазрезыПредмета = Элементы.ПредметыДоступа.ТекущиеДанные.ВидыДоступа;
	Если АктуальныеРазрезыПредмета <> Неопределено Тогда
		
		Для Каждого СтрокаВида Из ВсеВидыДоступа.ПолучитьЭлементы() Цикл
			
			Если АктуальныеРазрезыПредмета.НайтиПоЗначению(СтрокаВида.ВидДоступа) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаВида = ЗначенияДоступаИсключительные.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВида, СтрокаВида);
			ПеренестиСтрокиВДеревоВидовДоступа(НоваяСтрокаВида, СтрокаВида);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоЗначенийРазрезовПоПредметуДляЛА()
	
	АктуальныеРазрезыПредмета = Элементы.ПредметыДоступаДляЛА.ТекущиеДанные.ВидыДоступа;
	Если АктуальныеРазрезыПредмета <> Неопределено Тогда
		
		Для Каждого СтрокаВида Из ВсеВидыДоступа.ПолучитьЭлементы() Цикл
			
			Если АктуальныеРазрезыПредмета.НайтиПоЗначению(СтрокаВида.ВидДоступа) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаВида = ЗначенияДоступаДляЛА.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВида, СтрокаВида);
			ПеренестиСтрокиВДеревоВидовДоступа(НоваяСтрокаВида, СтрокаВида);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПометкиДереваВидовДоступа(СтрокаДерева) Экспорт
	
	НовоеЗначениеПометки = СтрокаДерева.Пометка;
	
	Если НовоеЗначениеПометки = 1 Тогда
		
		// Родительсткие строки.
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Пока РодительскаяСтрока <> Неопределено Цикл
			
			Если РодительскаяСтрока.Пометка = 0 Тогда
				РодительскаяСтрока.Пометка = 2;
			Иначе
				Прервать;
			КонецЕсли;
			
			РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
			
		КонецЦикла;
		
		// Дочерние строки.
		ВсеДочерниеСтроки = ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(СтрокаДерева);
		Для Каждого ДочерняяСтрока Из ВсеДочерниеСтроки Цикл
			ДочерняяСтрока.Пометка = 1;
		КонецЦикла;
		
	ИначеЕсли НовоеЗначениеПометки = 2 Тогда
		
		СтрокаДерева.Пометка = 0;
		
		// Родительские строки.
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Пока РодительскаяСтрока <> Неопределено Цикл
			
			СтараяПометка = РодительскаяСтрока.Пометка;
			
			Если ЕстьВыбранныеДочерниеСтроки(РодительскаяСтрока) Тогда
				РодительскаяСтрока.Пометка = 2;
			Иначе
				РодительскаяСтрока.Пометка = 0;
			КонецЕсли;
			
			Если РодительскаяСтрока.Пометка = СтараяПометка Тогда
				Прервать;
			КонецЕсли;
			
			РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
			
		КонецЦикла;
		
		// Дочерние строки.
		ВсеДочерниеСтроки = ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(СтрокаДерева);
		Для Каждого ДочерняяСтрока Из ВсеДочерниеСтроки Цикл
			ДочерняяСтрока.Пометка = 0;
		КонецЦикла;
		
	ИначеЕсли НовоеЗначениеПометки = 0 Тогда
		
		// При изменении пометки с 0 и с 2 поведение одинаковое.
		СтрокаДерева.Пометка = 1;
		ОбновитьПометкиДереваВидовДоступа(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВыбранныеДочерниеСтроки(СтрокаДерева)
	
	Результат = Ложь;
	
	Для Каждого Стр Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Стр.Пометка <> 0 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОФормление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Общие разрешения.
	
	// Жирным шрифтом выделяются разрезы, для которых есть разрешения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаОбщие.ЕстьРазрешения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЗначенияДоступаОбщие");
	
	ЭлементОформления = ЭлементОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементОформления.Использование = Истина;
	
	// Синим шрифтом выделяются унаследованные общие разрешения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияОбщие.Унаследован");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РазрешенияОбщие");
	
	ЭлементОформления = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ИнформационнаяНадпись;
	ЭлементОформления.Использование = Истина;
	
	// Специальные разрешения.
	
	// Жирным шрифтом выделяются предметы, для которых есть разрешения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметыДоступа.ЕстьРазрешения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПредметыДоступа");
	
	ЭлементОформления = ЭлементОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементОформления.Использование = Истина;
	
	// В коллекциях красным шрифтом выделяются виды доступа, для которых не выбрано ни одного значения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ЭлементОтбора1 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаИсключительные.ВидДоступа");
	ЭлементОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора1.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаИсключительные.ЗначениеДоступа");
	
	ЭлементОтбора2 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаИсключительные.Пометка");
	ЭлементОтбора2.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора2.ПравоеЗначение = 0;
	
	ЭлементОтбора3 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора3.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияИсключительные.Пользователь");
	ЭлементОтбора3.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора3.ПравоеЗначение = Неопределено;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЗначенияДоступаИсключительные");
	
	ЭлементЦветаОформления = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Локальные администраторы.
	
	// Жирным шрифтом выделяются предметы, для которых есть разрешения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметыДоступаДляЛА.ЕстьРазрешения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПредметыДоступаДляЛА");
	
	ЭлементОформления = ЭлементОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементОформления.Использование = Истина;
	
	// В коллекциях красным шрифтом выделяются виды доступа, для которых не выбрано ни одного значения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ЭлементОтбора1 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаДляЛА.ВидДоступа");
	ЭлементОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора1.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаДляЛА.ЗначениеДоступа");
	
	ЭлементОтбора2 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначенияДоступаДляЛА.Пометка");
	ЭлементОтбора2.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора2.ПравоеЗначение = 0;
	
	ЭлементОтбора3 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора3.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияДляЛА.Пользователь");
	ЭлементОтбора3.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора3.ПравоеЗначение = Неопределено;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЗначенияДоступаДляЛА");
	
	ЭлементЦветаОформления = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьНеактуальныеЗначенияДоступаДляИсключений(Предметы)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		
		СтруктураОтбора = Новый Структура("Предмет", Предмет);
		СтрокаПредмета = ПредметыДоступа.НайтиСтроки(СтруктураОтбора)[0];
		АктуальныеРазрезыПредмета = СтрокаПредмета.ВидыДоступа;
		
		// Удаление неактуальных разрешений.
		СтрокиРазрешений = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураОтбора);
		Для Каждого ДетальнаяСтрока Из СтрокиРазрешений Цикл
			
			ТекущийВидДоступа = 
				ДокументооборотПраваДоступа.РазрезДоступаПоЗначению(ДетальнаяСтрока.ЗначениеДоступа);
				
			Если АктуальныеРазрезыПредмета.НайтиПоЗначению(ТекущийВидДоступа) = Неопределено Тогда
				СтрокиКУдалению.Добавить(ДетальнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		// Замена "регистрации" на "редактирование".
		ПредметыДоступаИспользующиеРегистрацию = НастройкиДоступа.ПредметыДоступаИспользующиеРегистрацию();
		Если ПредметыДоступаИспользующиеРегистрацию.НайтиПоЗначению(Предмет) = Неопределено Тогда
			
			СтруктураОтбора.Вставить("УровеньДоступа", Справочники.УровниДоступа.Регистрация);
			СтрокиРазрешений = РазрешенияИсключительные.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрРазрешения Из СтрокиРазрешений Цикл
				СтрРазрешения.УровеньДоступа = Справочники.УровниДоступа.Редактирование;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиКУдалению Цикл
		РазрешенияИсключительныеРазвернутые.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьНеактуальныеЗначенияДоступаДляЛА(Предметы)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		
		СтруктураОтбора = Новый Структура("Предмет", Предмет);
		СтрокаПредмета = ПредметыДоступаДляЛА.НайтиСтроки(СтруктураОтбора)[0];
		АктуальныеРазрезыПредмета = СтрокаПредмета.ВидыДоступа;
		
		// Удаление неактуальных разрешений.
		СтрокиРазрешений = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураОтбора);
		Для Каждого ДетальнаяСтрока Из СтрокиРазрешений Цикл
			
			ТекущийВидДоступа = 
				ДокументооборотПраваДоступа.РазрезДоступаПоЗначению(ДетальнаяСтрока.ЗначениеДоступа);
				
			Если АктуальныеРазрезыПредмета.НайтиПоЗначению(ТекущийВидДоступа) = Неопределено Тогда
				СтрокиКУдалению.Добавить(ДетальнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		// Замена "регистрации" на "редактирование".
		ПредметыДоступаИспользующиеРегистрацию = НастройкиДоступа.ПредметыДоступаИспользующиеРегистрацию();
		Если ПредметыДоступаИспользующиеРегистрацию.НайтиПоЗначению(Предмет) = Неопределено Тогда
			
			СтруктураОтбора.Вставить("УровеньДоступа", Справочники.УровниДоступа.Регистрация);
			СтрокиРазрешений = РазрешенияДляЛА.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрРазрешения Из СтрокиРазрешений Цикл
				СтрРазрешения.УровеньДоступа = Справочники.УровниДоступа.Редактирование;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиКУдалению Цикл
		РазрешенияДляЛАРазвернутые.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВладельцыНаследуемыхРазрешений(ПользовательИлиГруппа)
	
	Возврат НастройкиДоступа.ВладельцыНаследуемыхРазрешенийДоступа(ПользовательИлиГруппа);
	
КонецФункции

&НаСервере
Функция НайтиПустыеРазрезыНаСервере()
	
	ЕстьПустыеРазрезы = Ложь;
	
	// Вспомогательные коллекции.
	ВсеФактическиИспользуемыеРазрезы = Новый Соответствие;
	АктуальныеРазрезыПредметов = Новый Соответствие;
	ПредставленияПредметов = Новый Соответствие;
	РазрезыКоллекций = Новый Соответствие;
	
	СтрокиРазрезов = ВсеВидыДоступа.ПолучитьЭлементы();
	Для Каждого Стр Из СтрокиРазрезов Цикл
		ВсеФактическиИспользуемыеРазрезы.Вставить(Стр.ВидДоступа, Истина);
	КонецЦикла;
	
	Для Каждого Стр Из ПредметыДоступа Цикл
		
		РазрезыПредмета = Новый Массив;
		Для Каждого Эл Из Стр.ВидыДоступа Цикл
			Если ВсеФактическиИспользуемыеРазрезы.Получить(Эл.Значение) <> Неопределено Тогда
				РазрезыПредмета.Добавить(Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ПредставленияПредметов.Вставить(Стр.Предмет, """" + Стр.Представление + """");
		АктуальныеРазрезыПредметов.Вставить(Стр.Предмет, РазрезыПредмета);
		
	КонецЦикла;
	
	// Проверка спец. разрешений.
	Если Элементы.СтраницаРазрешенияДоступаСпециальные.Видимость Тогда
		
		Для Каждого Стр Из РазрешенияИсключительные Цикл
			
			АктуальныеРазрезыПредмета = АктуальныеРазрезыПредметов.Получить(Стр.Предмет);
			РазрезыКоллекции = РазрезыКоллекций.Получить(Стр.ИдентификаторКоллекции);
			
			Если РазрезыКоллекции = Неопределено Тогда
				
				ЗначенияРазрезовКоллекции = Новый Массив;
				СтруктураПоиска = Новый Структура("ИдентификаторКоллекции", Стр.ИдентификаторКоллекции);
				НайденныеСтроки = РазрешенияИсключительныеРазвернутые.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗначенияРазрезовКоллекции.Добавить(НайденнаяСтрока.ЗначениеДоступа);
				КонецЦикла;
				
				РазрезыКоллекции = ДокументооборотПраваДоступа.РазрезыДоступаПоЗначениям(ЗначенияРазрезовКоллекции);
				РазрезыКоллекций.Вставить(Стр.ИдентификаторКоллекции, РазрезыКоллекции);
				
			КонецЕсли;
			
			Для Каждого РазрезПредмета Из АктуальныеРазрезыПредмета Цикл
				Если РазрезыКоллекции.Найти(РазрезПредмета) = Неопределено Тогда
					
					ЕстьПустыеРазрезы = Истина;
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В разрешении на предмет %1 для %2 не выбраны значения разреза %3'; en = 'Permissions to %1 subject for %2 do not contain values of %3 access region'"),
						ПредставленияПредметов.Получить(Стр.Предмет),
						Стр.Пользователь,
						"""" + РазрезПредмета + """");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПредметыДоступа");
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Проверка разрешений для ЛА.
	Если Элементы.СтраницаЛокальныеАдминистраторы.Видимость Тогда
		
		Для Каждого Стр Из РазрешенияДляЛА Цикл
			
			АктуальныеРазрезыПредмета = АктуальныеРазрезыПредметов.Получить(Стр.Предмет);
			РазрезыКоллекции = РазрезыКоллекций.Получить(Стр.ИдентификаторКоллекции);
			
			Если РазрезыКоллекции = Неопределено Тогда
				
				ЗначенияРазрезовКоллекции = Новый Массив;
				СтруктураПоиска = Новый Структура("ИдентификаторКоллекции", Стр.ИдентификаторКоллекции);
				НайденныеСтроки = РазрешенияДляЛАРазвернутые.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗначенияРазрезовКоллекции.Добавить(НайденнаяСтрока.ЗначениеДоступа);
				КонецЦикла;
				
				РазрезыКоллекции = ДокументооборотПраваДоступа.РазрезыДоступаПоЗначениям(ЗначенияРазрезовКоллекции);
				РазрезыКоллекций.Вставить(Стр.ИдентификаторКоллекции, РазрезыКоллекции);
				
			КонецЕсли;
			
			Для Каждого РазрезПредмета Из АктуальныеРазрезыПредмета Цикл
				Если РазрезыКоллекции.Найти(РазрезПредмета) = Неопределено Тогда
					
					ЕстьПустыеРазрезы = Истина;
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В разрешении на предмет %1 для %2 не выбраны значения разреза %3'; en = 'Permissions to %1 subject for %2 do not contain values of %3 access region'"),
						ПредставленияПредметов.Получить(Стр.Предмет),
						Стр.Пользователь,
						"""" + РазрезПредмета + """");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПредметыДоступаДляЛА");
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьПустыеРазрезы;
	
КонецФункции

#КонецОбласти
