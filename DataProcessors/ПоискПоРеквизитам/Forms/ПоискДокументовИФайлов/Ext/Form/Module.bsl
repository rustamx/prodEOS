#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьСписокСохраненныхПараметровПоиска();
	
	СписокПоследнихИспользованныхЗначений.ТипЗначения = Новый ОписаниеТипов("Структура");
	СписокПоследнихИспользованныхЗначений.Очистить();
	Настройка = ХранилищеНастроекДанныхФорм.Загрузить("ПоискПоРеквизитам", "СписокЧастоИспользуемыхЗначений");
	Если Настройка <> Неопределено Тогда
		Для Каждого ЭлементНастройки Из Настройка Цикл
			СписокПоследнихИспользованныхЗначений.Добавить(ЭлементНастройки.Значение);		
		КонецЦикла;
	КонецЕсли;
			
	МассивСсылок = Новый Массив;
	
	СброситьРезультатыПоиска();
	
	Если Параметры.Свойство("ВидПоиска") И ЗначениеЗаполнено(Параметры.ВидПоиска) Тогда
		ВидПоискаПриОткрытии = Параметры.ВидПоиска;
		ВидПоискаСохраненный = ВидПоискаПриОткрытии;
	Иначе 
		ВидПоискаСохраненный = ХранилищеНастроекДанныхФорм.Загрузить("ПоискПоРеквизитам", "ВидПоиска");
	КонецЕсли;

	// Загрузка вкладки с типом поиска
	Если ЗначениеЗаполнено(ВидПоискаСохраненный)
		ИЛИ Параметры.Свойство("ВидПоиска", ВидПоискаСохраненный) Тогда
		ВидПоиска = ВидПоискаСохраненный;
		// форма загружается для поиска определенного типа документов
		ПереключитьВидПоиска(ВидПоиска, Истина);
	Иначе
		// форма загружается с вариантом поиска по умолчанию
		ВидПоиска = Перечисления.ВидыПоиска.ОбщийПоиск;
		Элементы.ТипОбъектаСохраняемый.Видимость = (ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск);
	КонецЕсли;
	
	ЕстьДоступКТекущейОбластиПоиска = Истина;
	ПроверитьДоступКТипуДокумента(ВидПоиска, ЕстьДоступКТекущейОбластиПоиска, Истина);
	
	// если за время, пока пользователь не работал с поиском, 
	// у него пропал доступ к последней использованной области поиска
	Если НЕ ЕстьДоступКТекущейОбластиПоиска Тогда
		ВидПоиска = Перечисления.ВидыПоиска.ОбщийПоиск;
		ПереключитьВидПоиска(ВидПоиска, Истина);
	КонецЕсли;
	
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(РезультатФайлы);
	
	Элементы.ФайлыСписокРазмер.Видимость = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	
	Элементы.ОписаниеПоисковогоЗапроса.Видимость = ОписаниеОтбораПоказывается;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.НастройкиПоиска;
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(РезультатВнутренниеДокументы);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(РезультатВходящиеДокументы);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(РезультатИсходящиеДокументы);
	
	Элементы.
		КомпоновщикНастроекРасширенногоПоискаНастройкиОтбор.
		КоманднаяПанель.
		ПодчиненныеЭлементы.
		КомпоновщикНастроекРасширенногоПоискаНастройкиОтборПрочее.
		ПодчиненныеЭлементы.
		КомпоновщикНастроекРасширенногоПоискаНастройкиОтборСвойстваЭлементаПользовательскойНастройки.Видимость = Ложь;
		
	РезультатВнутренниеДокументы.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	РезультатВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	РезультатИсходящиеДокументы.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленные") = Неопределено Тогда
		Элементы.ВнутренниеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
		Элементы.ВходящиеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
		Элементы.ИсходящиеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере(ВидПоиска, СписокПоследнихИспользованныхЗначений);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки = Неопределено Тогда
		ТипОбъекта = Неопределено;
		КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы.Очистить();
		ПереключитьВидПоиска(ВидПоиска, Истина);
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПоискаПриОткрытии) Тогда 
		Настройки["ВидПоиска"] = ВидПоискаПриОткрытии;
		ВидПоискаИзНастроек = ВидПоискаПриОткрытии;
		ПереключитьВидПоиска(ВидПоискаИзНастроек, Истина); 
	Иначе 
		ВидПоискаИзНастроек = Настройки.Получить("ВидПоиска");
		ПереключитьВидПоиска(ВидПоискаИзНастроек); 
	КонецЕсли;
	
	ТипОбъектаПриЗагрузке = Настройки.Получить("ТипОбъекта");
	Если ЗначениеЗаполнено(ТипОбъектаПриЗагрузке) Тогда
		ПроверитьДоступКТипуДокумента(ТипОбъектаПриЗагрузке, Истина);
	КонецЕсли;
	
	ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Для Каждого КлючЗначение Из Настройки Цикл
		Если Найти(КлючЗначение.Ключ, "Реквизиты") = 0
			И ИмяЗначенияПеречисления <> "РасширенныйПоиск" Тогда
			Попытка
				Выполнить("ЭтаФорма." + КлючЗначение.Ключ + "= КлючЗначение.Значение;");
			Исключение
			КонецПопытки;
		ИначеЕсли ИмяЗначенияПеречисления = "РасширенныйПоиск" И КлючЗначение.Ключ = "ОтборРасширенногоПоиска" Тогда
			НастройкиОтбора = Настройки.Получить("ОтборРасширенногоПоиска").Получить();
			ЗагрузитьКомпоновщикОтбораРасширенногоПоиска(НастройкиОтбора);
		ИначеЕсли КлючЗначение.Ключ <> "ОтборРасширенногоПоиска"
			И ИмяЗначенияПеречисления <> "РасширенныйПоиск" Тогда
			ЭтаФорма[КлючЗначение.Ключ].Очистить();
			Для Каждого СтрокаНастройки Из КлючЗначение.Значение Цикл
				НоваяСтрока = ЭтаФорма[КлючЗначение.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастройки);
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Если Настройки["ПоказыватьУдаленные"] <> Неопределено Тогда
		ПоказыватьУдаленные = Настройки["ПоказыватьУдаленные"];
		Элементы.ВнутренниеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
		Элементы.ВходящиеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
		Элементы.ИсходящиеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	КонецЕсли;
	
	Настройки.Очистить();
	Элементы.ГруппаПараметрыИРезультатыПоиска.ТекущаяСтраница = Элементы["ГруппаПараметрыПоиска"];
	Элементы.ВходящиеДокументыСписок.Видимость = Ложь;
	Элементы.ВнутренниеДокументыСписок.Видимость = Ложь;	
	Элементы.ИсходящиеДокументыСписок.Видимость = Ложь;
	Элементы.ФайлыСписок.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ВидПоиска Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВидПоискаОбработкаВыбораПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	Если НЕ ПроверитьНаличиеУсловия() Тогда
		ТекстВопроса = НСтр("ru = 'Изменение области поиска очистит все введенные условия поиска. Продолжить?'; en = 'Change the search scope will clear all entered search terms. Do you want to continue?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	СтандартнаяОбработка = ОписаниеОповещения.ДополнительныеПараметры.СтандартнаяОбработка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоискаОбработкаВыбораПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется настройка формы для выбранной области поиска. Пожалуйста, подождите...'; en = 'Configuring the form for the selected search scope. Please wait ...'"));
	ПроверитьДоступКТипуДокумента(Параметры.ВыбранноеЗначение, Параметры.СтандартнаяОбработка);
	Если НЕ Параметры.СтандартнаяОбработка Тогда
		Состояние();
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для поиска в указанной области.'; en = 'Insufficient privileges to search for in the specified scope.'");
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	Состояние();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоискаСохраняемыйОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнутренниеДокументыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ВнутренниеДокументыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ВнутренниеДокументыСписокФайлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВнутренниеДокументыСписокПодписанЭП Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуЭП", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВнутренниеДокументыСписокЗадачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ТекущиеДанные.Ссылка__),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВнутренниеДокументыСписокЕстьКатегорииДанных Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВнутренниеДокументыСписок);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВнутренниеДокументыСписокСостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Ссылка__, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка__);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнутренниеДокументыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВнутренниеДокументыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка__);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВнутренниеДокументыСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ВходящиеДокументыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ВходящиеДокументыСписокФайлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВходящиеДокументыСписокПодписанЭП Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуЭП", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВходящиеДокументыСписокЗадачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ТекущиеДанные.Ссылка__),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВходящиеДокументыСписокЕстьКатегорииДанных Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВходящиеДокументыСписок);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВходящиеДокументыСписокСостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Ссылка__, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка__);
	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВходящиеДокументыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка__);
	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВходящиеДокументыСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ИсходящиеДокументыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ИсходящиеДокументыСписокФайлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ИсходящиеДокументыСписокПодписанЭП Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуЭП", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ИсходящиеДокументыСписокЗадачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ТекущиеДанные.Ссылка__),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ИсходящиеДокументыСписокЕстьКатегорииДанных Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ТекущиеДанные.Ссылка__, Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ИсходящиеДокументыСписок);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ИсходящиеДокументыСписокСостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Ссылка__, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка__);
	ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ИсходящиеДокументыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка__);
	ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ИсходящиеДокументыСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаСохраняемыйОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщийПоискРеквизиты

&НаКлиенте
Процедура ОбщийПоискРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщийПоискРеквизитыПредставлениеРеквизита
		Или Поле = Элементы.ОбщийПоискРеквизитыПорядковыйНомер
		Или Поле = Элементы.ПоискВнутренниеДокументыРеквизитыПорядковыйНомер
		Или Поле = Элементы.ПоискВнутренниеДокументыРеквизитыПредставлениеРеквизита
		Или Поле = Элементы.ПоискВходящиеДокументыРеквизитыПорядковыйНомер
		Или Поле = Элементы.ПоискВходящиеДокументыРеквизитыПредставлениеРеквизита
		Или Поле = Элементы.ПоискИсходящиеДокументыРеквизитыПорядковыйНомер
		Или Поле = Элементы.ПоискИсходящиеДокументыРеквизитыПредставлениеРеквизита
		Или Поле = Элементы.ПоискФайлыРеквизитыПорядковыйНомер
		Или Поле = Элементы.ПоискФайлыРеквизитыПредставлениеРеквизита Тогда
		ПоказатьФормуВводаЗначенияРеквизита(Поле, СтандартнаяОбработка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПоискРеквизитыЗначениеРеквизитаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Ложь;
	Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПоискРеквизитыЗначениеРеквизитаСписокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоказатьФормуВводаЗначенияРеквизита(Элемент, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПоискРеквизитыПередНачаломИзменения(Элемент, Отказ)
		
	Элемент.ПодчиненныеЭлементы[2].РедактированиеТекста = Истина;
	Если Элемент.ТекущиеДанные.НеЗаполнено Тогда
		Элемент.ПодчиненныеЭлементы[2].РедактированиеТекста = Ложь;
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ТипЗначенияРеквизита = "Строка" Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗначениеРеквизита) Тогда
			Элемент.ТекущиеДанные.ЗначениеРеквизита = "";
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ТипЗначенияРеквизита = "Диапазон" Тогда
		Элемент.ПодчиненныеЭлементы[2].РедактированиеТекста = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПоискРеквизитыЗначениеРеквизитаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	СписокЗначений = ПолучитьСписокПоследнихЗначенийДляРеквизита(СписокПоследнихИспользованныхЗначений, Неопределено, Элемент.Родитель.ТекущиеДанные.ИмяРеквизита);
	
	Если Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита <> "Булево" Тогда
		Если СписокЗначений <> Неопределено Тогда
			Для Каждого ЭлементСписка Из СписокЗначений Цикл
				Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение);	
			КонецЦикла;
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Истина);
		Элемент.СписокВыбора.Добавить(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПоискРеквизитыЗначениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита = "Массив" Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Новый СписокЗначений;
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСохраненныхПоисков

&НаКлиенте
Процедура СписокСохраненныхПоисковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("ВыполнитьПоискКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСохраненныхПоисковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСохраненныхПоисковПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийКлючСохраненногоПоиска = Элемент.ТекущиеДанные.КлючНастроек Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущийКлючСохраненногоПоиска = Элемент.ТекущиеДанные.КлючНастроек;
	
	Элементы.СписокСохраненныхПоисковПереименоватьСохраненныйПоиск.Доступность = Истина;
	Элементы.СписокСохраненныхПоисковКонтекстноеМенюПереименоватьСохраненныйПоиск.Доступность = Истина;
	Элементы.СписокСохраненныхЗапросовМенюУдалитьСохраненныйПоиск.Доступность = Истина;
	Элементы.СписокСохраненныхЗапросовКонтекстноеМенюУдалитьСохраненныйПоиск.Доступность = Истина;
	
	Элементы.СписокСохраненныхПоисков.ПодчиненныеЭлементы.СписокСохраненныхПоисковНазваниеИКартинка.ПодчиненныеЭлементы.СписокСохраненныхПоисковИмяСохраненногоПоиска.ТолькоПросмотр = Ложь;
	
	Если Элемент.ТекущиеДанные.КартинкаПоиска = 2 Тогда
		КоличествоВыделенныхСтрок = Элемент.ВыделенныеСтроки.Количество();
		Элементы.СписокСохраненныхПоисковПереименоватьСохраненныйПоиск.Доступность = Ложь;
		Элементы.СписокСохраненныхПоисковКонтекстноеМенюПереименоватьСохраненныйПоиск.Доступность = Ложь;
		Элементы.СписокСохраненныхЗапросовМенюУдалитьСохраненныйПоиск.Доступность = КоличествоВыделенныхСтрок > 1;
		Элементы.СписокСохраненныхЗапросовКонтекстноеМенюУдалитьСохраненныйПоиск.Доступность = КоличествоВыделенныхСтрок > 1;
		Элементы.СписокСохраненныхПоисков.ПодчиненныеЭлементы.СписокСохраненныхПоисковНазваниеИКартинка.ПодчиненныеЭлементы.СписокСохраненныхПоисковИмяСохраненногоПоиска.ТолькоПросмотр = Истина
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОткрытьНастройку", 0.2, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокСохраненныхПоисковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьСохраненныйПоиск(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСохраненныхПоисковИмяСохраненногоПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокСохраненныхПоисков.ТекущиеДанные;
	
	Если ТекущиеДанные.ИмяСохраненногоПоиска = Текст Тогда
		Возврат;
	КонецЕсли;

	КлючНайденногоПоиска = НайтиСохраненныйПоискПоНаименованию(Текст);
	
	Если ЗначениеЗаполнено(КлючНайденногоПоиска) Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Наименование ""%1"" уже используется для другого сохраненного поиска.
				|Укажите другое наименование.';
				|en = 'The name ""%1"" is already used for another saved search.
				|Specify a different name.'"),
			Текст);
			
		ПоказатьПредупреждение(, ТекстВопроса);	
	  	ПереименоватьСохраненныйПоиск(Неопределено);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокСохраненныхПоисков.ТекущиеДанные;
	ПереименоватьСохраненныеПараметрыПоиска(ТекущиеДанные.КлючНастроек, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыСписок

&НаКлиенте
Процедура ФайлыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	Если ИмяКаталога = Неопределено ИЛИ ПустаяСтрока(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, УникальныйИдентификатор);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВернутьсяКПараметрам(Команда)
	
	Элементы.ГруппаПараметрыИРезультатыПоиска.ТекущаяСтраница = Элементы["ГруппаПараметрыПоиска"];	
	ИзменитьКоманднуюПанельПриВозвратеКУсловиям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(Команда = Неопределено)
	
	ТипПоиска = Элементы.НастройкиПоиска.ТекущаяСтраница.Имя;
	ОчиститьСообщения();
	
	Если ТипПоиска = "РасширенныйПоиск" И НЕ ЗначениеЗаполнено(ТипОбъекта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран тип объектов для поиска'; en = 'You have not selected an object type to search for'"),,,"ТипОбъекта");
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru ='Выполняется поиск. Пожалуйста, подождите...'; en = 'The search is performed. Please wait ...'"));
	Попытка
		ВыполнитьПоискСервер();
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Описание = "НетУсловийПоиска" Тогда
			Состояние();
			ТекстСообщения = НСтр("ru = 'Укажите хотя бы одно условие поиска!'; en = 'Specify at least one search condition!'");
			ПоказатьПредупреждение(, ТекстСообщения);
		ИначеЕсли Инфо.Описание = "НичегоНеНайдено" Тогда 
			Состояние();
			ТекстСообщения = НСтр("ru = 'Ничего не найдено. Уточните условия поиска.'; en = 'Nothing found. Refine your search.'");
			ПоказатьПредупреждение(, ТекстСообщения);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	Состояние();
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСкрытьОписаниеЗапроса(Команда)
	
	ПереключитьВидимостьОписанияЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПоиск(Команда)
	
	ДанныеДляСохранения = ПодготовитьИСоздатьСохраненныйПоиск("", Ложь, Ложь);                      	
	Если ДанныеДляСохранения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДанныеДляСохранения", ДанныеДляСохранения);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьПоискПродолжение",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПоРеквизитам.Форма.СохранениеПоиска",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	ИмяСписка = СтрЗаменить(Элементы.РезультатыПоиска.ТекущаяСтраница.Имя, "Результат", "");
	Если Элементы[ИмяСписка + "Список"].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Список = Элементы[ИмяСписка + "Список"];
	
	Если Список.ТекущаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран документ.'; en = 'Document is not selected.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", Список.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьДокументЗавершение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	РаботаСЭПКлиент.Подписать(Список.ТекущаяСтрока, УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловВыполнитьВнутренниеДокументы(Команда)
	
	#Если Не ВебКлиент Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'; en = 'All files (*. *) | *. *'");
		ДиалогОткрытияФайла.МножественныйВыбор = Истина;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'; en = 'Select files'");
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВладелецДокумента = Неопределено;
			СписокКатегорий = Новый Массив;			
			ПараметрыИмпорта = Новый Структура("Папка, Файлы, СписокКатегорий", ВладелецДокумента, ДиалогОткрытияФайла.ВыбранныеФайлы, СписокКатегорий);
			ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта, ЭтаФорма);
		КонецЕсли;
	#Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте импорт файлов не поддерживается.'; en = 'Importing files is not supported in web client.'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		ТекущийЭлемент, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(ТекущийЭлемент.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ДЛЯ РАБОТЫ С группировками списков

&НаКлиенте
Процедура СгруппироватьПоПолучателю(Команда)
	
	РежимГруппировки = "ПолучателиДляГруппировки";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
		
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоОтправителю(Команда)
	
	РежимГруппировки = "Отправитель";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоУтвердил(Команда)
	
	РежимГруппировки = "Утвердил";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПодготовил(Команда)
	
	РежимГруппировки = "Подготовил";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	РежимГруппировки = "";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВидуДокумента(Команда)
	
	РежимГруппировки = "ВидДокумента";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоДелу(Команда)
	
	РежимГруппировки = "Дело";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоЗарегистрировал(Команда)
	
	РежимГруппировки = "Зарегистрировал";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПодразделению(Команда)
	
	РежимГруппировки = "Подразделение";
	СгруппироватьСписок(ЭтаФорма["Результат" + СтрЗаменить(ТекущийЭлемент.Имя, "Список", "")], РежимГруппировки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКА КОМАНД ДЛЯ РАБОТЫ С ФАЙЛАМИ

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
		
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.ФайлыСписок.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.ФайлыСписок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;	
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.ФайлыСписок.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОбновленияФайла.АвторТекущейВерсии = ТекущиеДанные.Автор;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.ФайлыСписок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.ФайлыСписок.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.ФайлыСписок.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФайлыСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.ФайлыСписок.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыСписок.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка__);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли Элементы.ФайлыСписок.ВыделенныеСтроки.Количество() = 1 Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.ФайлыСписок.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.ФайлыСписок.ТекущаяСтрока,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.ФайлыСписок.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайлов", ЭтотОбъект);
	
	Если Элементы.ФайлыСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.ФайлыСписок.ВыделенныеСтроки);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.ФайлыСписок.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.ФайлыСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	МассивФайлов = Новый Массив;
	Для Каждого ФайлСсылка Из Элементы.Список.ВыделенныеСтроки Цикл
		Если Не ФайловыеКомандыДоступны(ФайлСсылка) Тогда 
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ФайлСсылка);
	КонецЦикла;
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(Элементы.Список.ТекущаяСтрока, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);

КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

// Комплекты документов

&НаКлиенте
Процедура ДобавитьВКомплект(Команда)
	
	Если Элементы.РезультатыПоиска.ТекущаяСтраница = Элементы.РезультатВнутренниеДокументы Тогда
		ТекущийСписок = Элементы.ВнутренниеДокументыСписок;
	ИначеЕсли Элементы.РезультатыПоиска.ТекущаяСтраница = Элементы.РезультатВходящиеДокументы Тогда
		ТекущийСписок = Элементы.ВходящиеДокументыСписок;
	ИначеЕсли Элементы.РезультатыПоиска.ТекущаяСтраница = Элементы.РезультатИсходящиеДокументы Тогда
		ТекущийСписок = Элементы.ИсходящиеДокументыСписок;
	ИначеЕсли Элементы.РезультатыПоиска.ТекущаяСтраница = Элементы.РезультатФайлы Тогда
		ТекущийСписок = Элементы.ФайлыСписок;
	Иначе
		Возврат;
	КонецЕсли;
			
	Если ТекущийСписок.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСКомплектамиДокументовКлиент.ДобавитьВКомплект(ТекущийСписок.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	Элементы.ВнутренниеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	Элементы.ВходящиеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	Элементы.ИсходящиеДокументыСписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	ВыполнитьПоиск(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСохраненныйПоиск(Команда)
	
	ТекущиеДанные = Элементы.СписокСохраненныхПоисков.ТекущиеДанные;
	Если Элементы.СписокСохраненныхПоисков.ВыделенныеСтроки.Количество() = 1 Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КлючНастроек) Тогда
			Возврат;
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить сохраненный поиск ""%1""?'; en = 'Delete saved search ""%1""?'"), 
			ТекущиеДанные.ИмяСохраненногоПоиска);
	Иначе
		КоличествоСохраненныхПоисков = 0;
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокСохраненныхПоисков.ВыделенныеСтроки Цикл
			ТекущиеДанные = СписокСохраненныхПоисков.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(ТекущиеДанные.КлючНастроек) Тогда
				КоличествоСохраненныхПоисков = КоличествоСохраненныхПоисков + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоСохраненныхПоисков = 0 Тогда 
			Возврат;
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить сохраненные поиски (%1)?'; en = 'Delete saved searches (%1)?'"), 
			Строка(КоличествоСохраненныхПоисков));	
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьСохраненныйПоискПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СгруппироватьСписок(Список, ГруппироватьПо)
	
	Список.Группировка.Элементы.Очистить();
	Если Не ПустаяСтрока(ГруппироватьПо) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ГруппироватьПо);
		ПолеГруппировки.Использование = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМакетДляПоиска(ИмяМакета)
	

	Возврат Обработки.ПоискПоРеквизитам.ПолучитьМакет(ИмяМакета);	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПоследнихЗначенийДляРеквизита(СписокНастроек, ВидПоиска, ИмяРеквизита)
	
	Найдено = Ложь;
	Для Каждого Значение Из СписокНастроек Цикл
		Если Значение.Значение.Свойство("СписокЧастыхЗначений")
			И Значение.Значение.ВидПоиска = ВидПоиска
			И Значение.Значение.ИмяРеквизита = ИмяРеквизита Тогда
			Найдено = Истина;
			Настройка = Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Найдено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Настройка.Значение.СписокЧастыхЗначений;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СброситьРезультатыПоиска(ПравоНаВнутренние = Ложь, ПравоНаВходящие = Ложь, ПравоНаИсходящие = Ложь, ПравоНаФайлы = Ложь)
	
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		
	ПравоНаВнутренние = ПравоДоступа("Чтение", Метаданные.Справочники.ВнутренниеДокументы);
	ПравоНаВходящие = ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы);
	ПравоНаИсходящие = ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы);
	ПравоНаФайлы = ПравоДоступа("Чтение", Метаданные.Справочники.Файлы);
	
	Элементы.РезультатВходящиеДокументы.Видимость = ПравоНаВходящие;
	Элементы.РезультатВнутренниеДокументы.Видимость = ПравоНаВнутренние;	
	Элементы.РезультатИсходящиеДокументы.Видимость = ПравоНаИсходящие;
	Элементы.РезультатФайлы.Видимость = ПравоНаФайлы;
	
	Если ПравоНаВнутренние Тогда
		РезультатВнутренниеДокументы.Параметры.УстановитьЗначениеПараметра(
			"ВестиУчетСканКопийОригиналовДокументов", 
			ВестиУчетСканКопийОригиналовДокументов);
		РезультатВнутренниеДокументы.Отбор.Элементы.Очистить();
		РезультатВнутренниеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 2);
	КонецЕсли;
	
	Если ПравоНаВходящие Тогда
		РезультатВходящиеДокументы.Параметры.УстановитьЗначениеПараметра(
			"ВестиУчетСканКопийОригиналовДокументов", 
			ВестиУчетСканКопийОригиналовДокументов);
			
		РезультатВходящиеДокументы.ТекстЗапроса = 
			СтрЗаменить(РезультатВходящиеДокументы.ТекстЗапроса, "//", "");
		
		РезультатВходящиеДокументы.Отбор.Элементы.Очистить();
		РезультатВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 2);
	КонецЕсли;
	
	Если ПравоНаИсходящие Тогда
		РезультатИсходящиеДокументы.Параметры.УстановитьЗначениеПараметра(
			"ВестиУчетСканКопийОригиналовДокументов", 
			ВестиУчетСканКопийОригиналовДокументов);
			
		РезультатИсходящиеДокументы.ТекстЗапроса = 
			СтрЗаменить(РезультатИсходящиеДокументы.ТекстЗапроса, "//", "");
			
		РезультатИсходящиеДокументы.ТекстЗапроса = 
			СтрЗаменить(РезультатИсходящиеДокументы.ТекстЗапроса, 
			"0 КАК НомерКартинкиВКоллекции", 
			"ИсходящиеДокументы.СостояниеСВД.НомерКартинкиВКоллекции КАК НомерКартинкиВКоллекции");
			
		РезультатИсходящиеДокументы.Отбор.Элементы.Очистить();
		РезультатИсходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 2);
	КонецЕсли;
	
	Если ПравоНаФайлы Тогда
		РезультатФайлы.Отбор.Элементы.Очистить();
		РезультатФайлы.Параметры.УстановитьЗначениеПараметра("Параметр", 2);
		РезультатФайлы.Параметры.УстановитьЗначениепараметра("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Элементы.ВходящиеДокументыСписок.Видимость = Ложь;
	Элементы.ВнутренниеДокументыСписок.Видимость = Ложь;	
	Элементы.ИсходящиеДокументыСписок.Видимость = Ложь;
	Элементы.ФайлыСписок.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКомпоновщикНастроек(ТипПоиска, Настройки = Неопределено)
	
	Если ТипПоиска = "РасширенныйПоиск" Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьМакетДляПоиска(ТипПоиска);
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;

	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроекПоиска.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекПоиска.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере 
Процедура СформироватьОтборПоиска(ЭлементыОтбора, ТипПоиска, СтрокаОтбора = "")
	
	СтрокаОтбора = "";
	ЭлементыОтбора.Очистить();
	Для Каждого ЭлементФормы Из Элементы.НастройкиПоиска.ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если СтрЧислоВхождений(ЭлементФормы.Имя, "Реквизиты") > 0
			И ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			Для Каждого ДопРеквизит Из ЭтаФорма[ЭлементФормы.Имя] Цикл
				Если Найти(ДопРеквизит.ИмяРеквизита, "Параметр") > 0 
					И Найти(ДопРеквизит.ИмяРеквизита, "_") > 0 Тогда
					Если ТипЗнч(ДопРеквизит.ЗначениеРеквизита) = Тип("СписокЗначений") Тогда
						ИмяПараметра = СтрЗаменить(ДопРеквизит.ИмяРеквизита, "Параметр", "");
						Для Каждого ЭлементПараметр Из КомпоновщикНастроекПоиска.Настройки.ПараметрыДанных.Элементы Цикл
							Если Строка(ЭлементПараметр.Параметр) = ИмяПараметра Тогда
								ЭлементПараметр.Значение = ДопРеквизит.ЗначениеРеквизита.ВыгрузитьЗначения();
								ЭлементПараметр.Использование = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ДопРеквизит.НеЗаполнено Тогда
						ИмяПараметра = СтрЗаменить(ДопРеквизит.ИмяРеквизита, "Параметр", "");
						Для Каждого ЭлементПараметр Из КомпоновщикНастроекПоиска.Настройки.ПараметрыДанных.Элементы Цикл
							Если Строка(ЭлементПараметр.Параметр) = ИмяПараметра Тогда
								ЭлементПараметр.Использование = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Продолжить;
				КонецЕсли;				
				ПолеОтбора = ДопРеквизит.Поле;
				Если ПустаяСтрока(Строка(ПолеОтбора)) Тогда
					Если ДопРеквизит.ДополнительныйРеквизитСвойство Тогда 
						ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка__." + ДопРеквизит.ИмяРеквизита);
					Иначе
						ПолеОтбора = Новый ПолеКомпоновкиДанных(ДопРеквизит.ИмяРеквизита);
					КонецЕсли;
				КонецЕсли;
				Если ДопРеквизит.НеЗаполнено Тогда
					НовыйЭлементОтбора =  ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ИначеЕсли ЗначениеЗаполнено(ДопРеквизит.ЗначениеРеквизита) Тогда
					Если ДопРеквизит.ТипЗначенияРеквизита = "Строка" Тогда
						Если Найти(ДопРеквизит.ЗначениеРеквизита, ";") = 0 Тогда
							НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
							НовыйЭлементОтбора.Использование = Истина;
							НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
							НовыйЭлементОтбора.ПравоеЗначение = ДопРеквизит.ЗначениеРеквизита;
						Иначе
							МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопРеквизит.ЗначениеРеквизита, ";");
							НоваяГруппаЭлементовОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
							НоваяГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
							Для Каждого Подстрока Из МассивПодстрок Цикл
								НовыйЭлементОтбора = НоваяГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
								НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
								НовыйЭлементОтбора.Использование = Истина;
								НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
								НовыйЭлементОтбора.ПравоеЗначение = Подстрока;
							КонецЦикла;
						КонецЕсли
					ИначеЕсли ДопРеквизит.ТипЗначенияРеквизита = "Период" Тогда
						НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						ЗначениеРеквизитаДляПоиска = ДопРеквизит.ЗначениеРеквизита;
						Если ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаОкончания)
							И ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаНачала) Тогда
							НовыйЭлементОтбора.Использование = Истина;
							НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
							НовыйЭлементОтбора.ПравоеЗначение =ЗначениеРеквизитаДляПоиска.ДатаНачала;
						ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаОкончания)
							И НЕ ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаНачала) Тогда
							НовыйЭлементОтбора.Использование = Истина;
							НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
							НовыйЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
						ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаОкончания) Тогда
							НовыйЭлементОтбора.Использование = ?(ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаНачала), Истина, Ложь);
							НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
							НовыйЭлементОтбора.ПравоеЗначение = ЗначениеРеквизитаДляПоиска.ДатаНачала;
						КонецЕсли;
						НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование =?(ЗначениеЗаполнено(ЗначениеРеквизитаДляПоиска.ДатаОкончания), Истина, Ложь);
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
						НовыйЭлементОтбора.ПравоеЗначение =ЗначениеРеквизитаДляПоиска.ДатаОкончания;
					ИначеЕсли ДопРеквизит.ТипЗначенияРеквизита = "Диапазон" Тогда
						ЗначениеРеквизитаДляПоиска = ДопРеквизит.ЗначениеРеквизита;
						МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеРеквизитаДляПоиска, " ");
						ДиапазонС = "";
						ДиапазонПо = "";
						Если Найти(ЗначениеРеквизитаДляПоиска, "от ") > 0 И Найти(ЗначениеРеквизитаДляПоиска, "до ") > 0 Тогда
							ДиапазонС = МассивПодстрок[1];
							ДиапазонПо =  МассивПодстрок[3];	
						ИначеЕсли Найти(ЗначениеРеквизитаДляПоиска, "от ") > 0 Тогда
							ДиапазонС = МассивПодстрок[1];
						ИначеЕсли Найти(ЗначениеРеквизитаДляПоиска, "до ") > 0 Тогда	
							ДиапазонПо =  МассивПодстрок[1];
						КонецЕсли;
						Если ЗначениеЗаполнено(ДиапазонС) Тогда
							НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
							НовыйЭлементОтбора.Использование = Истина;
							НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
							НовыйЭлементОтбора.ПравоеЗначение = Число(ДиапазонС);
						КонецЕсли;
						Если ЗначениеЗаполнено(ДиапазонПо) Тогда
							НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
							НовыйЭлементОтбора.Использование = Истина;
							НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
							НовыйЭлементОтбора.ПравоеЗначение = Число(ДиапазонПо);
						КонецЕсли;
					ИначеЕсли ДопРеквизит.ТипЗначенияРеквизита = "Булево" Тогда
						НовыйЭлементОтбора = КомпоновщикНастроекПоиска.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование = Истина;
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						НовыйЭлементОтбора.ПравоеЗначение = ДопРеквизит.ЗначениеРеквизита;
					Иначе
						НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование = Истина;
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						НовыйЭлементОтбора.ПравоеЗначение = ДопРеквизит.ЗначениеРеквизита;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПоказыватьУдаленные Тогда
		НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка__.ПометкаУдаления");
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискСервер()
	
	ВремяНачалаПоиска = ТекущаяДатаСеанса();
	
	ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	ТипПоиска = ИмяЗначенияПеречисления;
	
	Если ТипПоиска <> "РасширенныйПоиск" Тогда
		
		КомпоновщикНастроекПоиска = Новый КомпоновщикНастроекКомпоновкиДанных;
		ЗагрузитьКомпоновщикНастроек(ТипПоиска);
		СформироватьОтборПоиска(КомпоновщикНастроекПоиска.Настройки.Отбор.Элементы, ТипПоиска);
		ОтборЗапроса = ВыполнитьЗапрос(КомпоновщикНастроекПоиска, ТипПоиска);
		
		Если ТипПоиска <> "ОбщийПоиск" Тогда
			Элементы.РезультатыПоиска.ТекущаяСтраница = Элементы[СтрЗаменить(ТипПоиска, "Поиск", "Результат")];
		КонецЕсли;
		
		СтроковоеОписаниеПоисковогоЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Найти %1'; en = 'Find %1'"), 
			НРег(Строка(ВидПоиска)));
		УсловияОтбора = СформироватьТекстОписанияПоисковогоЗапроса(КомпоновщикНастроекПоиска.Настройки.Отбор.Элементы,, КомпоновщикНастроекПоиска.Настройки.ПараметрыДанных.Элементы);
		
	Иначе
		ИндексЗначенияПеречисления = Перечисления.ТипыОбъектов.Индекс(ТипОбъекта);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		ТипПоиска = "Поиск" + ИмяЗначенияПеречисления;
		СтроковоеОписаниеПоисковогоЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Найти %1'; en = 'Find %1'"),
			НРег(Строка(ТипОбъекта)));
		
		ВыполнитьЗапрос(КомпоновщикНастроекРасширенногоПоиска, ТипПоиска);
		Элементы.РезультатыПоиска.ТекущаяСтраница = Элементы[СтрЗаменить(ТипПоиска, "Поиск", "Результат")];
		УсловияОтбора = СформироватьТекстОписанияПоисковогоЗапроса(КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы,, КомпоновщикНастроекРасширенногоПоиска.Настройки.ПараметрыДанных.Элементы);
	КонецЕсли;
		
	ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Если Элементы.Найти(ИмяЗначенияПеречисления + "СодержимоеФайлов") <> Неопределено
		И ЗначениеЗаполнено(ЭтаФорма[ИмяЗначенияПеречисления + "СодержимоеФайлов"]) Тогда
		Если Найти(НРег(Строка(ВидПоиска)), "файл") Тогда
			ФайловоеДобавление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ', содержащие ""%1""'; en = ', containing ""%1""'"),
				ЭтаФорма[ИмяЗначенияПеречисления + "СодержимоеФайлов"]);
		Иначе
			ФайловоеДобавление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ', файлы которых содержат ""%1""'; en = ', files which contain ""%1""'"),
				ЭтаФорма[ИмяЗначенияПеречисления + "СодержимоеФайлов"]);
		КонецЕсли;
		СтроковоеОписаниеПоисковогоЗапроса = СтроковоеОписаниеПоисковогоЗапроса + ФайловоеДобавление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияОтбора) Тогда
		Если Найти(НРег(Строка(ВидПоиска)), "файл") Тогда
			СтроковоеОписаниеПоисковогоЗапроса = СтроковоеОписаниеПоисковогоЗапроса + НСтр("ru =', у которых '; en = ', which '") + УсловияОтбора;
		Иначе
			Если Элементы.Найти(ИмяЗначенияПеречисления + "СодержимоеФайлов") <> Неопределено
				И ЗначениеЗаполнено(ЭтаФорма[ИмяЗначенияПеречисления + "СодержимоеФайлов"]) Тогда 
				СтроковоеОписаниеПоисковогоЗапроса = СтроковоеОписаниеПоисковогоЗапроса + " и " + УсловияОтбора;
			Иначе
				СтроковоеОписаниеПоисковогоЗапроса = СтроковоеОписаниеПоисковогоЗапроса + НСтр("ru =', у которых '; en = ', which '") + УсловияОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаПараметрыИРезультатыПоиска.ТекущаяСтраница = Элементы["ГруппаРезультатыПоиска"];
	
	Для Каждого СтраницаРезультата Из Элементы.РезультатыПоиска.ПодчиненныеЭлементы Цикл
		Если СтраницаРезультата.Видимость
			И Найти(СтраницаРезультата.Заголовок, "(") > 0 Тогда
			Элементы.РезультатыПоиска.ТекущаяСтраница = СтраницаРезультата;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПодготовитьИСоздатьСохраненныйПоиск("", Истина);
	
	Элементы.ИзменитьУсловия.КнопкаПоУмолчанию = Истина;
	Если ОписаниеОтбораПоказывается Тогда
		ПереключитьВидимостьОписанияЗапроса();
	КонецЕсли;
	
	ЭтаФорма.Команды["ВыполнитьПоиск"].Подсказка = НСтр("ru = 'Повторить поиск'; en = 'Retry search'");
	
	Длительность = ТекущаяДатаСеанса() - ВремяНачалаПоиска;
	ОписаниеСобытия = СтроковоеОписаниеПоисковогоЗапроса;
	ДополнительныеСведения = ВидПоиска;
	ПротоколированиеРаботыПользователей.ЗаписатьПоискПоРеквизитам(Длительность, ОписаниеСобытия, ДополнительныеСведения);
		
КонецПроцедуры	

&НаСервере
Функция СформироватьТекстОписанияПоисковогоЗапроса(ЭлементыОтбораОдногоУровня, ЛогическаяСвязкаУсловий = "и", ПараметрыОтбора = Неопределено)
	
	ОписаниеПоисковогоЗапроса = "";
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Для Каждого Параметр Из ПараметрыОтбора Цикл
			Если Параметр.Использование Тогда
				
				ВидСравненияЗначений = "=";
				Если ТипЗнч(Параметр.Значение) = Тип("Массив")
					И Параметр.Значение.Количество() > 1 Тогда
					ВидСравненияЗначений = НСтр("ru = 'в списке'; en = 'In the list'");
				ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Массив")
					И Параметр.Значение.Количество() = 1 Тогда
					ВидСравненияЗначений = "=";
				КонецЕсли;
				
				ЛевоеЗначение = СтрЗаменить(Строка(Параметр.Параметр), "_Поиск", "");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_9", " (");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_0", ")");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_", " ");
				
				Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
					ПравоеЗначение = СтрСоединить(Параметр.Значение, ",");
				ИначеЕсли ЗначениеЗаполнено(Параметр.Значение) Тогда
					ПравоеЗначение = Параметр.Значение;
				Иначе
					ПравоеЗначение = НСтр("ru = '""не заполнено""'; en = '""not filled""'");
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ОписаниеПоисковогоЗапроса) Тогда
					ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " " + ЛогическаяСвязкаУсловий + " " + ЛевоеЗначение;
				Иначе
					ОписаниеПоисковогоЗапроса = ЛевоеЗначение;
				КонецЕсли;
				
				ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " " + ВидСравненияЗначений + " " + ПравоеЗначение;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	РаботаСПериодомИлиДиапазоном = Ложь;
	Для Каждого УсловиеОтбора Из ЭлементыОтбораОдногоУровня Цикл
		Если ТипЗнч(УсловиеОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И УсловиеОтбора.Использование Тогда
			
			Если НЕ РаботаСПериодомИлиДиапазоном Тогда
				ВидСравненияЗначений = "";
				Если УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
					ВидСравненияЗначений = ">";
				ИначеЕсли УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
					ВидСравненияЗначений = ">=";
				ИначеЕсли УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
					ВидСравненияЗначений = "<";
				ИначеЕсли УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					ВидСравненияЗначений = "<=";
				ИначеЕсли УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					ИЛИ УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
					И ТипЗнч(УсловиеОтбора.ПравоеЗначение) = Тип("СписокЗначений")
					И УсловиеОтбора.ПравоеЗначение.Количество() = 1 Тогда
					ВидСравненияЗначений = "=";
				ИначеЕсли УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
					И ТипЗнч(УсловиеОтбора.ПравоеЗначение) = Тип("СписокЗначений")
					И УсловиеОтбора.ПравоеЗначение.Количество() > 1 Тогда
                    ВидСравненияЗначений = "в списке";
				Иначе
					ВидСравненияЗначений = Строка(УсловиеОтбора.ВидСравнения);
				КонецЕсли;
			Иначе
				ВидСравненияЗначений = "по";
			КонецЕсли;	
			
			Если НЕ РаботаСПериодомИлиДиапазоном Тогда
				ЛевоеЗначение = СтрЗаменить(Строка(УсловиеОтбора.ЛевоеЗначение), "__","");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_Поиск","");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_9", " (");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_0", ")");
				ЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "_", " ");
				
				Если ВидПоиска <> Перечисления.ВидыПоиска.РасширенныйПоиск Тогда
					ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
					ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
					РеквизитТаблицаПоиска = ЭтаФорма[ИмяЗначенияПеречисления + "Реквизиты"];
					Для Каждого Строка Из РеквизитТаблицаПоиска Цикл
						Если Строка.ИмяРеквизита = Строка(УсловиеОтбора.ЛевоеЗначение) Тогда
							ЛевоеЗначение = Строка.ПредставлениеРеквизита;	
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеПоисковогоЗапроса) Тогда
					ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " " + ЛогическаяСвязкаУсловий + " " + ЛевоеЗначение;
				Иначе
					ОписаниеПоисковогоЗапроса = ЛевоеЗначение;
				КонецЕсли;
			Иначе
				РаботаСПериодомИлиДиапазоном = Ложь;
			КонецЕсли;
			
			// Получим следующий элемент - проверим, не выполняется ли работа с периодом или диапазоном значений.
			Индекс = ЭлементыОтбораОдногоУровня.Индекс(УсловиеОтбора);
			Индекс = Индекс + 1;
			Если Индекс <= ЭлементыОтбораОдногоУровня.Количество() - 1 Тогда
				СледующийЭлемент = ЭлементыОтбораОдногоУровня[Индекс];
				Если ТипЗнч(СледующийЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных")
					И СледующийЭлемент.ЛевоеЗначение = УсловиеОтбора.ЛевоеЗначение 
					И УсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
					И СледующийЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					РаботаСПериодомИлиДиапазоном = Истина;
					ВидСравненияЗначений = "с";
				КонецЕсли;
			КонецЕсли;
			
			ВидСравненияЗначений = НРег(ВидСравненияЗначений);
			ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " " + ВидСравненияЗначений + " ";
			
			Если Найти(ВидСравненияЗначений, "заполнено") = 0 Тогда
				ЗначениеСравнения = "";
				Если ТипЗнч(УсловиеОтбора.ПравоеЗначение) = Тип("Дата") Тогда
					ЗначениеСравнения = """" + Формат(УсловиеОтбора.ПравоеЗначение, "ДЛФ=D") + """";
				ИначеЕсли ТипЗнч(УсловиеОтбора.ПравоеЗначение) = Тип("Строка") Тогда
					ЗначениеСравнения = """" + УсловиеОтбора.ПравоеЗначение + """";
				Иначе
					ЗначениеСравнения = """" + Строка(УсловиеОтбора.ПравоеЗначение) + """";
				КонецЕсли;
				ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + ЗначениеСравнения;
			КонецЕсли;
			
			
			
		ИначеЕсли ТипЗнч(УсловиеОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СтрокаСоединения = "";
			Если УсловиеОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				СтрокаСоединения = "и";
				Если ЗначениеЗаполнено(ОписаниеПоисковогоЗапроса) Тогда
					ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " и (" + СформироватьТекстОписанияПоисковогоЗапроса(УсловиеОтбора.Элементы, СтрокаСоединения) + ")";
				Иначе
					ОписаниеПоисковогоЗапроса = СформироватьТекстОписанияПоисковогоЗапроса(УсловиеОтбора.Элементы, СтрокаСоединения);
				КонецЕсли;
			ИначеЕсли УсловиеОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				СтрокаСоединения = "или";
				Если ЗначениеЗаполнено(ОписаниеПоисковогоЗапроса) Тогда
					ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " и (" + СформироватьТекстОписанияПоисковогоЗапроса(УсловиеОтбора.Элементы, СтрокаСоединения) + ")";
				Иначе
					ОписаниеПоисковогоЗапроса = СформироватьТекстОписанияПоисковогоЗапроса(УсловиеОтбора.Элементы, СтрокаСоединения);
				КонецЕсли;
			ИначеЕсли УсловиеОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				Если ЗначениеЗаполнено(ОписаниеПоисковогоЗапроса) Тогда
					ОписаниеПоисковогоЗапроса = ОписаниеПоисковогоЗапроса + " и НЕ(" + СформироватьТекстОписанияПоисковогоЗапроса(УсловиеОтбора.Элементы, СтрокаСоединения) + ")";
				Иначе
					ОписаниеПоисковогоЗапроса = СформироватьТекстОписанияПоисковогоЗапроса(УсловиеОтбора.Элементы, СтрокаСоединения);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеПоисковогоЗапроса = СтрЗаменить(ОписаниеПоисковогоЗапроса, "[", "");
	ОписаниеПоисковогоЗапроса = СтрЗаменить(ОписаниеПоисковогоЗапроса, "]", "");
	ОписаниеПоисковогоЗапроса = СтрЗаменить(ОписаниеПоисковогоЗапроса, "Ссылка.", ""); 
	Возврат ОписаниеПоисковогоЗапроса;
	
КонецФункции

&НаСервере
Процедура СкопироватьОтбор(ЭлементыОдногоУровняИсточник, ЭлементыОдногоУровняПриемник)
		
	Для Каждого ЭлементИсточника Из ЭлементыОдногоУровняИсточник Цикл
		Если ТипЗнч(ЭлементИсточника) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			НовыйЭлементПриемника = ЭлементыОдногоУровняПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементПриемника.ВидСравнения = ЭлементИсточника.ВидСравнения;
			НовыйЭлементПриемника.Использование = ЭлементИсточника.Использование;
			НовыйЭлементПриемника.ЛевоеЗначение = ЭлементИсточника.ЛевоеЗначение;
			НовыйЭлементПриемника.ПравоеЗначение = ЭлементИсточника.ПравоеЗначение;
			НовыйЭлементПриемника.Применение = ЭлементИсточника.Применение;
		ИначеЕсли ТипЗнч(ЭлементИсточника) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементПриемника = ЭлементыОдногоУровняПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйЭлементПриемника.Использование = ЭлементИсточника.Использование;
			НовыйЭлементПриемника.Представление = ЭлементИсточника.Представление;
			НовыйЭлементПриемника.РежимОтображения = ЭлементИсточника.РежимОтображения;
			НовыйЭлементПриемника.ТипГруппы = ЭлементИсточника.ТипГруппы;
			НовыйЭлементПриемника.Применение = ЭлементИсточника.Применение;
			СкопироватьОтбор(ЭлементИсточника.Элементы, НовыйЭлементПриемника.Элементы)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПараметры(ЭлементыОдногоУровняИсточник, ЭлементыОдногоУровняПриемник)
		
	Для Каждого ЭлементИсточника Из ЭлементыОдногоУровняИсточник Цикл
		Для Каждого ЭлементПриемника Из ЭлементыОдногоУровняПриемник Цикл
			Если Строка(ЭлементИсточника.Параметр) = Строка(ЭлементПриемника.Параметр) Тогда
				ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапрос(КомпоновщикНастроек, ТипПоиска)
	
	ЕстьПараметрыДанных = Ложь;
	
	Для Каждого ЭлементПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если ЗначениеЗаполнено(ЭлементПараметр.Значение) Или ЭлементПараметр.Использование Тогда
			ЕстьПараметрыДанных = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0 
		И Не ЕстьПараметрыДанных Тогда
		ВызватьИсключение("НетУсловийПоиска");	
	КонецЕсли;
		
	ПравоНаВнутренние = Ложь;
	ПравоНаВходящие = Ложь;
	ПравоНаИсходящие = Ложь;
	ПравоНаФайлы = Ложь;
	СброситьРезультатыПоиска(ПравоНаВнутренние, ПравоНаВходящие, ПравоНаИсходящие, ПравоНаФайлы);
	
	Если ТипПоиска = "ОбщийПоиск" Тогда
		Элементы.ВнутренниеДокументыСписок.Видимость = ПравоНаВнутренние;
		Элементы.ВходящиеДокументыСписок.Видимость = ПравоНаВходящие;
		Элементы.ИсходящиеДокументыСписок.Видимость = ПравоНаИсходящие;
		Если ПравоНаВнутренние Тогда
			СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатВнутренниеДокументы.Отбор.Элементы);
			СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатВнутренниеДокументы.Параметры.Элементы);
			РезультатВнутренниеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
		КонецЕсли;
		Если ПравоНаВходящие Тогда
			СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатВходящиеДокументы.Отбор.Элементы);
			СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатВходящиеДокументы.Параметры.Элементы);
			РезультатВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
		КонецЕсли;
		Если ПравоНаИсходящие Тогда
			СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатИсходящиеДокументы.Отбор.Элементы);
			СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатИсходящиеДокументы.Параметры.Элементы);
			РезультатИсходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
		КонецЕсли;
	ИначеЕсли ТипПоиска = "ПоискВнутренниеДокументы" Тогда
		СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатВнутренниеДокументы.Отбор.Элементы);
		СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатВнутренниеДокументы.Параметры.Элементы);
		РезультатВнутренниеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
		Элементы.ВнутренниеДокументыСписок.Видимость = ПравоНаВнутренние;
	ИначеЕсли ТипПоиска = "ПоискВходящиеДокументы" Тогда
		СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатВходящиеДокументы.Отбор.Элементы);
		СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатВходящиеДокументы.Параметры.Элементы);
		РезультатВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);	
		Элементы.ВходящиеДокументыСписок.Видимость = ПравоНаВходящие;
	ИначеЕсли ТипПоиска = "ПоискИсходящиеДокументы" Тогда
		СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатИсходящиеДокументы.Отбор.Элементы);
		СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатИсходящиеДокументы.Параметры.Элементы);
		РезультатИсходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
		Элементы.ИсходящиеДокументыСписок.Видимость = ПравоНаИсходящие;
	ИначеЕсли ТипПоиска = "ПоискФайлы" Тогда
		СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, РезультатФайлы.Отбор.Элементы);
		СкопироватьПараметры(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, РезультатФайлы.Параметры.Элементы);
		РезультатФайлы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
		Элементы.ФайлыСписок.Видимость = ПравоНаФайлы;
	ИначеЕсли ТипПоиска = "РасширенныйПоиск" Тогда
		Если ТипОбъекта = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда
			СкопироватьОтбор(КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы, РезультатВнутренниеДокументы.Отбор.Элементы);			
			СкопироватьПараметры(КомпоновщикНастроекРасширенногоПоиска.Настройки.ПараметрыДанных.Элементы, РезультатВнутренниеДокументы.Параметры.Элементы);
			РезультатВнутренниеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
			Элементы.ВнутренниеДокументыСписок.Видимость = ПравоНаВнутренние;
		ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда
			СкопироватьОтбор(КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы, РезультатВходящиеДокументы.Отбор.Элементы);			
			СкопироватьПараметры(КомпоновщикНастроекРасширенногоПоиска.Настройки.ПараметрыДанных.Элементы, РезультатВходящиеДокументы.Параметры.Элементы);
			РезультатВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
			Элементы.ВходящиеДокументыСписок.Видимость = ПравоНаВходящие;
		ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда
			СкопироватьОтбор(КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы, РезультатИсходящиеДокументы.Отбор.Элементы);			
			СкопироватьПараметры(КомпоновщикНастроекРасширенногоПоиска.Настройки.ПараметрыДанных.Элементы, РезультатИсходящиеДокументы.Параметры.Элементы);
			РезультатИсходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
			Элементы.ИсходящиеДокументыСписок.Видимость = ПравоНаИсходящие;
		ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Файлы Тогда
			СкопироватьОтбор(КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы, РезультатФайлы.Отбор.Элементы);			
			СкопироватьПараметры(КомпоновщикНастроекРасширенногоПоиска.Настройки.ПараметрыДанных.Элементы, РезультатФайлы.Параметры.Элементы);
			РезультатФайлы.Параметры.УстановитьЗначениеПараметра("Параметр", 1);
			Элементы.ФайлыСписок.Видимость = ПравоНаФайлы;
		КонецЕсли;
	КонецЕсли;	
	
	КолвоВнутренниеДокументы = 0;
	КолвоВходящиеДокументы = 0;
	КолвоИсходящиеДокументы = 0;
	КолвоФайлы = 0;
		
	Если ТипПоиска = "ОбщийПоиск"
		И ПравоНаВнутренние
		И ПравоНаВходящие 
		И ПравоНаИсходящие 
		ИЛИ ТипПоиска <> "ОбщийПоиск" Тогда 
		ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		ТаблицаРезультата = ВыполнитьЗапросПоМакетуСКД(ТипПоиска, КомпоновщикНастроек); 
		
		Если ТаблицаРезультата.Колонки.Найти("КолвоВнутренние__") <> Неопределено Тогда
			КолвоВнутренниеДокументы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоВнутренние__")[0];
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("КолвоВходящие__") <> Неопределено Тогда
			КолвоВходящиеДокументы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоВходящие__")[0];
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("КолвоИсходящие__") <> Неопределено Тогда
			КолвоИсходящиеДокументы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоИсходящие__")[0];
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("КолвоФайлы__") <> Неопределено Тогда
			КолвоФайлы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоФайлы__")[0];
		КонецЕсли;
		
	ИначеЕсли ТипПоиска = "ОбщийПоиск"
		И (НЕ ПравоНаВнутренние
		ИЛИ НЕ ПравоНаВходящие
		ИЛИ НЕ ПравоНаИсходящие) Тогда
		Если ПравоНаВнутренние Тогда
			ТаблицаРезультата = ВыполнитьЗапросПоМакетуСКД("ОбщийПоискКоличествоВнутренние", КомпоновщикНастроек);
			КолвоВнутренниеДокументы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоВнутренние__")[0];
		КонецЕсли;
		Если ПравоНаВходящие Тогда
			ТаблицаРезультата = ВыполнитьЗапросПоМакетуСКД("ОбщийПоискКоличествоВходящие", КомпоновщикНастроек);
			КолвоВходящиеДокументы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоВходящие__")[0];
		КонецЕсли;
		Если ПравоНаИсходящие Тогда
			ТаблицаРезультата = ВыполнитьЗапросПоМакетуСКД("ОбщийПоискКоличествоИсходящие", КомпоновщикНастроек);
			КолвоИсходящиеДокументы = ТаблицаРезультата.ВыгрузитьКолонку("КолвоИсходящие__")[0];
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КолвоВнутренниеДокументы) Тогда
		КолвоВнутренниеДокументы = 0;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КолвоВходящиеДокументы) Тогда
		КолвоВходящиеДокументы = 0;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КолвоИсходящиеДокументы) Тогда
		КолвоИсходящиеДокументы = 0;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КолвоФайлы) Тогда
		КолвоФайлы = 0;
	КонецЕсли;
	
	СуммаВсего = КолвоВнутренниеДокументы + КолвоВходящиеДокументы + КолвоИсходящиеДокументы + КолвоФайлы;
	
	Если СуммаВсего = 0 Тогда
		ВызватьИсключение ("НичегоНеНайдено");
	КонецЕсли;
	
	Элементы.РезультатВнутренниеДокументы.Заголовок = НСтр("ru = 'Внутренние документы'; en = 'Internal documents'");
	Элементы.РезультатВходящиеДокументы.Заголовок = НСтр("ru = 'Входящие документы'; en = 'Incoming documents'");
	Элементы.РезультатИсходящиеДокументы.Заголовок = НСтр("ru = 'Исходящие документы'; en = 'Outgoing documents'");
	Элементы.РезультатФайлы.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	
	Если КолвоВнутренниеДокументы > 0 Тогда
		Элементы.РезультатВнутренниеДокументы.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Внутренние документы (%1)'; en = 'Internal documents (%1)'"),
				Строка(КолвоВнутренниеДокументы));
	КонецЕсли;
	Если КолвоВходящиеДокументы > 0 Тогда
		Элементы.РезультатВходящиеДокументы.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Входящие документы (%1)'; en = 'Incoming documents (%1)'"),
				Строка(КолвоВходящиеДокументы));
	КонецЕсли;
	Если КолвоИсходящиеДокументы > 0 Тогда
		Элементы.РезультатИсходящиеДокументы.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исходящие документы (%1)'; en = 'Outgoing documents (%1)'"),
				Строка(КолвоИсходящиеДокументы));
	КонецЕсли;
	Если КолвоФайлы > 0 Тогда
		Элементы.РезультатФайлы.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файлы (%1)'; en = 'Files (%1)'"),
				Строка(КолвоФайлы));
	КонецЕсли;
	
	Если СуммаВсего > 0 Тогда
		Если ТипПоиска = "ПоискФайлы"  Тогда 
			Элементы.ДекорацияКоличество.Заголовок = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Найдено файлов: %1.'; en = 'Files found: %1.'"),
					Строка(СуммаВсего));
		Иначе
			Элементы.ДекорацияКоличество.Заголовок = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Найдено документов: %1.'; en = 'Documents found: %1.'"),
					Строка(СуммаВсего));
		КонецЕсли;
	Иначе
		Элементы.ДекорацияКоличество.Заголовок = НСтр("ru = 'Документы и файлы не найдены.'; en = 'Documents and files are not found.'");
	КонецЕсли;
	
	// прячем ненужные вкладки на странице с результатами
	Элементы.РезультатВнутренниеДокументы.Видимость = Ложь;
	Элементы.РезультатВходящиеДокументы.Видимость = Ложь;
	Элементы.РезультатИсходящиеДокументы.Видимость = Ложь;
	Элементы.РезультатФайлы.Видимость = Ложь;
	Если ВидПоиска = Перечисления.ВидыПоиска.ОбщийПоиск Тогда
		Элементы.РезультатВнутренниеДокументы.Видимость = ПравоНаВнутренние;
		Элементы.РезультатВходящиеДокументы.Видимость = ПравоНаВходящие;
		Элементы.РезультатИсходящиеДокументы.Видимость = ПравоНаИсходящие;
	ИначеЕсли ВидПоиска = Перечисления.ВидыПоиска.ПоискВнутренниеДокументы
		ИЛИ ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск
		И ТипОбъекта = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда
		Элементы.РезультатВнутренниеДокументы.Видимость = ПравоНаВнутренние;
	ИначеЕсли ВидПоиска = Перечисления.ВидыПоиска.ПоискВходящиеДокументы
		ИЛИ ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск
		И ТипОбъекта = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда
		Элементы.РезультатВходящиеДокументы.Видимость = ПравоНаВходящие;
	ИначеЕсли ВидПоиска = Перечисления.ВидыПоиска.ПоискИсходящиеДокументы
		ИЛИ ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск
		И ТипОбъекта = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда
		Элементы.РезультатИсходящиеДокументы.Видимость = ПравоНаИсходящие;
	ИначеЕсли ВидПоиска = Перечисления.ВидыПоиска.ПоискФайлы
		ИЛИ ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск
		И ТипОбъекта = Перечисления.ТипыОбъектов.Файлы Тогда
		Элементы.РезультатФайлы.Видимость = ПравоНаФайлы;	
	КонецЕсли;

КонецФункции

&НаСервере
Функция ВыполнитьЗапросПоМакетуСКД(ТипПоиска, КомпоновщикНастроек)
	
	СхемаКомпоновкиДанных = ПолучитьМакетДляПоиска(ТипПоиска);
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
			КомпоновщикНастроек.ПолучитьНастройки()
			,
			,
			, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ТаблицаРезультата = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Возврат ТаблицаРезультата;
		
КонецФункции

&НаСервере
Процедура ПереключитьВидПоиска(ВыбранныйВидПоиска, ПринудительноеПереключение = Ложь)
	
	Если ВыбранныйВидПоиска <> ВидПоиска
		ИЛИ ПринудительноеПереключение Тогда
		ВидПоиска = ВыбранныйВидПоиска;
		ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;	
		Элементы.НастройкиПоиска.ТекущаяСтраница = Элементы[ИмяЗначенияПеречисления];
		Элементы.ТипОбъектаСохраняемый.Видимость = (ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск);
		ОбновитьСоставРеквизитовДляПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолеЕстьВСписке(Список, Поле)
	
	Для Каждого Элемент Из Список Цикл
		Если Элемент.Значение.Поле = Поле Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьСоставРеквизитовДляПоиска()
	
	ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Если ИмяЗначенияПеречисления = "РасширенныйПоиск" Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеВидаПоиска = ИмяЗначенияПеречисления;
	ТипПоиска = ИмяЗначенияПеречисления;
	УстановитьПривилегированныйРежим(Истина);
	ЗагрузитьКомпоновщикНастроек(ТипПоиска);
	УстановитьПривилегированныйРежим(Ложь);
	ОбъединенныйНаборСвойств = Новый СписокЗначений;
	
	Для Каждого ДоступноеПолеОтбора Из КомпоновщикНастроекПоиска.Настройки.ПараметрыДанных.Элементы Цикл
		Если Найти(Строка(ДоступноеПолеОтбора.Параметр), "_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Строка(ДоступноеПолеОтбора.Параметр), "_НеЗаполнено") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование", "Параметр" + ДоступноеПолеОтбора.Параметр);
		Представление = СтрЗаменить(Строка(ДоступноеПолеОтбора.Параметр), "_Поиск", "");
		Представление = СтрЗаменить(Представление, "_9", " (");
		Представление = СтрЗаменить(Представление, "_0", ")");
		Представление = СтрЗаменить(Представление, "_", " ");
		СтруктураДанных.Вставить("Представление", Представление);
			
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ДоступноеПолеОтбора.Значение));
				
				
		СтруктураДанных.Вставить("ТипЗначения", Новый ОписаниеТипов(МассивТипов));
		СтруктураДанных.Вставить("Поле", ДоступноеПолеОтбора.Параметр);
		Если Не ПолеЕстьВСписке(ОбъединенныйНаборСвойств, СтруктураДанных.Поле) Тогда
			ОбъединенныйНаборСвойств.Добавить(СтруктураДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДоступноеПолеОтбора Из КомпоновщикНастроекПоиска.Настройки.ДоступныеПоляОтбора.Элементы Цикл
		Если ДоступноеПолеОтбора.Поле = Новый ПолеКомпоновкиДанных("ПараметрыДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Строка(ДоступноеПолеОтбора.Поле), "__") > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ДоступноеПолеОтбора.Таблица Тогда
			Для Каждого РеквизитТаблицы Из ДоступноеПолеОтбора.Элементы Цикл
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Наименование", РеквизитТаблицы.Поле);
				СтруктураДанных.Вставить("Представление", ДоступноеПолеОтбора.Заголовок);
				СтруктураДанных.Вставить("ТипЗначения", РеквизитТаблицы.ТипЗначения);
				СтруктураДанных.Вставить("Поле", РеквизитТаблицы.Поле);
				ОбъединенныйНаборСвойств.Добавить(СтруктураДанных);
				Если Не ПолеЕстьВСписке(ОбъединенныйНаборСвойств, СтруктураДанных.Поле) Тогда
					ОбъединенныйНаборСвойств.Добавить(СтруктураДанных);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", ДоступноеПолеОтбора.Поле);
			СтруктураДанных.Вставить("Представление", ДоступноеПолеОтбора.Заголовок);
			СтруктураДанных.Вставить("ТипЗначения", ДоступноеПолеОтбора.ТипЗначения);
			СтруктураДанных.Вставить("Поле", ДоступноеПолеОтбора.Поле);
            Если Не ПолеЕстьВСписке(ОбъединенныйНаборСвойств, СтруктураДанных.Поле) Тогда
				ОбъединенныйНаборСвойств.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Найти(ИмяЗначенияПеречисления, "Документ") > 0 ИЛИ Найти(ИмяЗначенияПеречисления, "Файл") > 0 Тогда
		ИмяЗначенияПеречисления = СтрЗаменить(ИмяЗначенияПеречисления, "Поиск", "");
		Если ПравоДоступа("Чтение", Метаданные.Справочники[ИмяЗначенияПеречисления]) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Объект = Справочники[ИмяЗначенияПеречисления].СоздатьЭлемент();
			НаборСвойствОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Объект);
			Для Каждого ЗначениеСписка Из НаборСвойствОбъекта Цикл	
				Для Каждого ДоступноеПолеОтбора Из КомпоновщикНастроекПоиска.Настройки.ДоступныеПоляОтбора.Элементы Цикл
					Если Найти(Строка(ДоступноеПолеОтбора.Поле), "__") = 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого ЭлементОтбора Из ДоступноеПолеОтбора.Элементы Цикл
						Если Найти(Строка(ЭлементОтбора.Поле), ЗначениеСписка.Наименование) = 0 Тогда
							Продолжить;
						КонецЕсли;
						СтруктураДанных = Новый Структура;
						СтруктураДанных.Вставить("Наименование", ЗначениеСписка.Наименование);
						СтруктураДанных.Вставить("Представление", ЭлементОтбора.Заголовок);
						СтруктураДанных.Вставить("ТипЗначения", ЭлементОтбора.ТипЗначения);
						СтруктураДанных.Вставить("Поле", ЭлементОтбора.Поле);
						Если Не ПолеЕстьВСписке(ОбъединенныйНаборСвойств, СтруктураДанных.Поле) Тогда
							ОбъединенныйНаборСвойств.Добавить(СтруктураДанных);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
			// получение списка доп. реквизитов для видов документов
			Если Найти(ИмяЗначенияПеречисления, "Документ") > 0 Тогда
				ИмяСправочникаВидовДокументов = Объект.ВидДокумента.Метаданные().Имя;
				ЗапросВидовДокументов = Новый Запрос;
				ЗапросВидовДокументов.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Виды.Ссылка
					|ИЗ
					|	Справочник." + ИмяСправочникаВидовДокументов + " КАК Виды";
				Выборка = ЗапросВидовДокументов.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Объект.ВидДокумента = Выборка.Ссылка;
					НаборСвойствОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Объект);
					Для Каждого ЗначениеСписка Из НаборСвойствОбъекта Цикл	
						Для Каждого ДоступноеПолеОтбора Из КомпоновщикНастроекПоиска.Настройки.ДоступныеПоляОтбора.Элементы Цикл
							Если Найти(Строка(ДоступноеПолеОтбора.Поле), "__") = 0 Тогда
								Продолжить;
							КонецЕсли;
							Для Каждого ЭлементОтбора Из ДоступноеПолеОтбора.Элементы Цикл
								Если Найти(Строка(ЭлементОтбора.Поле), ЗначениеСписка.Наименование) > 0 Тогда
									СтруктураДанных = Новый Структура;
									СтруктураДанных.Вставить("Наименование", ЭлементОтбора.Заголовок);
									СтруктураДанных.Вставить("Представление", ЗначениеСписка.Наименование);
									СтруктураДанных.Вставить("ТипЗначения", ЭлементОтбора.ТипЗначения);
									СтруктураДанных.Вставить("Поле", ЭлементОтбора.Поле);
									Если Не ПолеЕстьВСписке(ОбъединенныйНаборСвойств, СтруктураДанных.Поле) Тогда
										ОбъединенныйНаборСвойств.Добавить(СтруктураДанных);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
		
		Если ИмяЗначенияПеречисления = "ПоискВнутренниеДокументы" Тогда
			ПолучитьДополнительныеСвойстваВидаДокумента(Объект, "ВидыВнутреннихДокументов", ОбъединенныйНаборСвойств);
		ИначеЕсли ИмяЗначенияПеречисления = "ПоискВходящиеДокументы" Тогда
			ПолучитьДополнительныеСвойстваВидаДокумента(Объект, "ВидыВходящихДокументов", ОбъединенныйНаборСвойств);
		ИначеЕсли ИмяЗначенияПеречисления = "ПоискИсходящиеДокументы" Тогда
			ПолучитьДополнительныеСвойстваВидаДокумента(Объект, "ВидыИсходящихДокументов", ОбъединенныйНаборСвойств);
		КонецЕсли;
	КонецЕсли;

	Элементы[НаименованиеВидаПоиска + "Реквизиты"].Видимость = ОбъединенныйНаборСвойств.Количество() > 0;

	ЭтаФорма[НаименованиеВидаПоиска + "Реквизиты"].Очистить();	
	Для Каждого ДополнительныйРеквизит Из ОбъединенныйНаборСвойств Цикл
		НоваяСтрока = ЭтаФорма[НаименованиеВидаПоиска + "Реквизиты"].Добавить();
		НоваяСтрока.ИмяРеквизита = ДополнительныйРеквизит.Значение.Наименование;
		Если ДополнительныйРеквизит.Значение.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			НоваяСтрока.ТипЗначенияРеквизита = "Период";
		ИначеЕсли ДополнительныйРеквизит.Значение.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			НоваяСтрока.ТипЗначенияРеквизита = "Диапазон";
		ИначеЕсли ДополнительныйРеквизит.Значение.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			НоваяСтрока.ТипЗначенияРеквизита = "Строка";
		ИначеЕсли ДополнительныйРеквизит.Значение.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			НоваяСтрока.ТипЗначенияРеквизита = "Булево";
		Иначе
			НоваяСтрока.ТипЗначенияРеквизита = "Массив";
			НоваяСтрока.ТипФактическогоЗначения = ДополнительныйРеквизит.Значение.ТипЗначения;
		КонецЕсли;
		НоваяСтрока.ПредставлениеРеквизита = ДополнительныйРеквизит.Значение.Представление;
		НоваяСтрока.ДополнительныйРеквизитСвойство = Истина;
		Если ТипЗнч(ДополнительныйРеквизит.Значение) = Тип("Структура")
			И ДополнительныйРеквизит.Значение.Свойство("Представление") Тогда
			НоваяСтрока.ПредставлениеРеквизита = ДополнительныйРеквизит.Значение.Представление;
			НоваяСтрока.ДополнительныйРеквизитСвойство = Ложь;
		КонецЕсли;
		НоваяСтрока.Поле = ДополнительныйРеквизит.Значение.Поле;
	КонецЦикла;
	ЭтаФорма[НаименованиеВидаПоиска + "Реквизиты"].Сортировать("ПредставлениеРеквизита Возр");
	
	СчетчикСтрок = 1;
	Для Каждого СтрокаТаблицы Из ЭтаФорма[НаименованиеВидаПоиска + "Реквизиты"] Цикл
		СтрокаТаблицы.ПорядковыйНомер = СчетчикСтрок;
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДополнительныеСвойстваВидаДокумента(Объект, Вид, ОбъединенныйНаборСвойств)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник." + Вид + " КАК ВидыДокументов";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.ВидДокумента = ВыборкаДетальныеЗаписи.Ссылка;
		
		НаборСвойствОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Объект);
		Для Каждого ЗначениеСписка Из НаборСвойствОбъекта Цикл
			Если ОбъединенныйНаборСвойств.НайтиПоЗначению(ЗначениеСписка) = Неопределено Тогда
				ОбъединенныйНаборСвойств.Добавить(ЗначениеСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКомпоновщикОтбораРасширенногоПоиска(Настройки = Неопределено, ТипОбъектов = Неопределено)
		
	Если ТипОбъектов <> Неопределено Тогда
		ТипОбъекта = ТипОбъектов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОбъекта) Тогда
		Элементы.КомпоновщикНастроекРасширенногоПоискаНастройкиОтбор.Доступность = Ложь;
		КомпоновщикНастроекРасширенногоПоиска.Настройки.Отбор.Элементы.Очистить();
	Иначе
		Элементы.КомпоновщикНастроекРасширенногоПоискаНастройкиОтбор.Доступность = Истина;
	КонецЕсли;
	
	ИндексЗначенияПеречисления = Перечисления.ТипыОбъектов.Индекс(ТипОбъекта);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	СхемаКомпоновкиДанных = ПолучитьМакетДляПоиска("Поиск" + ИмяЗначенияПеречисления);
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;

	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроекРасширенногоПоиска.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекРасширенногоПоиска.ЗагрузитьНастройки(Настройки);
	ТекущийТипОбъекта = ТипОбъекта;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступКТипуДокумента(ВыбранноеЗначение, СтандартнаяОбработка, ПринудительноеПереключение = Ложь)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВидыПоиска") Тогда
		ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВыбранноеЗначение);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		ИмяЗначенияПеречисления = СтрЗаменить(СтрЗаменить(СтрЗаменить(ИмяЗначенияПеречисления, "Поиск", ""), "Общий", ""), "Расширенный", "");
		Если НЕ ЗначениеЗаполнено(ИмяЗначенияПеречисления) Тогда
			ПереключитьВидПоиска(ВыбранноеЗначение, ПринудительноеПереключение);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ТипыОбъектов") Тогда
		ИндексЗначенияПеречисления = Перечисления.ТипыОбъектов.Индекс(ВыбранноеЗначение);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	КонецЕсли;

	СтандартнаяОбработка = ПравоДоступа("Чтение", Метаданные.Справочники[ИмяЗначенияПеречисления]); 
	Если СтандартнаяОбработка И ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВидыПоиска") Тогда
		ПереключитьВидПоиска(ВыбранноеЗначение, ПринудительноеПереключение);
		Возврат;
	КонецЕсли;
	
	Если СтандартнаяОбработка И ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ТипыОбъектов") Тогда
		ЗагрузитьКомпоновщикОтбораРасширенногоПоиска(Неопределено, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидимостьОписанияЗапроса()
	
	ОписаниеОтбораПоказывается = НЕ ОписаниеОтбораПоказывается;	
	Элементы.ОписаниеПоисковогоЗапроса.Видимость = ОписаниеОтбораПоказывается;
	Если ОписаниеОтбораПоказывается Тогда
		Элементы.РазвернутьСкрытьОписаниеЗапроса.Заголовок = НСтр("ru = 'Скрыть подробности'; en = 'Hide details'");
		ЭтаФорма.Команды.Найти("РазвернутьСкрытьОписаниеЗапроса").Подсказка = НСтр("ru = 'Скрыть условия поиска'; en = 'Hide search criteria'");
	Иначе
		Элементы.РазвернутьСкрытьОписаниеЗапроса.Заголовок = НСтр("ru = 'Подробнее...'; en = 'For details ...'");
		ЭтаФорма.Команды.Найти("РазвернутьСкрытьОписаниеЗапроса").Подсказка = НСтр("ru = 'Показать условия поиска'; en = 'Show search criteria'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоманднуюПанельПриВозвратеКУсловиям()
	
	Элементы.ФормаВыполнитьПоиск.КнопкаПоУмолчанию = Истина;
	ЭтаФорма.Команды["ВыполнитьПоиск"].Подсказка = НСтр("ru = 'Искать'; en = 'Search'");
	ЭтаФорма.ТекущийЭлемент = Элементы.НастройкиПоиска.ТекущаяСтраница;
	Элементы.ВходящиеДокументыСписок.Видимость = Ложь;
	Элементы.ВнутренниеДокументыСписок.Видимость = Ложь;	
	Элементы.ИсходящиеДокументыСписок.Видимость = Ложь;
	Элементы.ФайлыСписок.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ВидПоиска, Знач СписокЧастоИспользуемыхЗначений)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ПоискПоРеквизитам", "ВидПоиска", ВидПоиска);
	ХранилищеНастроекДанныхФорм.Сохранить("ПоискПоРеквизитам", "СписокЧастоИспользуемыхЗначений", СписокЧастоИспользуемыхЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВводаЗначенияРеквизита(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита = "Массив" Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипЗначения", Элемент.Родитель.ТекущиеДанные.ТипФактическогоЗначения);
		Если ТипЗнч(Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита) <> Тип("Строка") Тогда
			ПараметрыФормы.Вставить("СписокВыбранныхЗначений", Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита);
		Иначе
			ПараметрыФормы.Вставить("СписокВыбранныхЗначений", Новый СписокЗначений);
		КонецЕсли;
		ПараметрыФормы.Вставить("ПредставлениеРеквизита", Элемент.Родитель.ТекущиеДанные.ПредставлениеРеквизита);
		ПараметрыФормы.Вставить("НеЗаполнено", Элемент.Родитель.ТекущиеДанные.НеЗаполнено);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаЗначенияРеквизита",
			ЭтотОбъект,
			Новый Структура("Элемент", Элемент));
		ОткрытьФорму(
			"Обработка.ПоискПоРеквизитам.Форма.ВводЗначенияРеквизита",
			ПараметрыФормы,
			Элемент,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита = "Период" Тогда
		Если Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Неопределено Тогда
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Новый СтандартныйПериод;
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗначениеРеквизита", Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита);
		ПараметрыФормы.Вставить("ИмяРеквизита", Элемент.Родитель.ТекущиеДанные.ИмяРеквизита);
		ПараметрыФормы.Вставить("ПредставлениеРеквизита", Элемент.Родитель.ТекущиеДанные.ПредставлениеРеквизита);
		ПараметрыФормы.Вставить("НеЗаполнено", Элемент.Родитель.ТекущиеДанные.НеЗаполнено);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаПериода",
			ЭтотОбъект,
			Новый Структура("Элемент", Элемент));
		ОткрытьФорму(
			"Обработка.ПоискПоРеквизитам.Форма.ВводПериодаДат",
			ПараметрыФормы,
			Элемент,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита = "Строка" Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита) Тогда
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = "";
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗначениеРеквизита", Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита);
		ПараметрыФормы.Вставить("ИмяРеквизита", Элемент.Родитель.ТекущиеДанные.ИмяРеквизита);
		ПараметрыФормы.Вставить("ПредставлениеРеквизита", Элемент.Родитель.ТекущиеДанные.ПредставлениеРеквизита);
		ПараметрыФормы.Вставить("НеЗаполнено", Элемент.Родитель.ТекущиеДанные.НеЗаполнено);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаСтроки",
			ЭтотОбъект,
			Новый Структура("Элемент", Элемент));
		ОткрытьФорму(
			"Обработка.ПоискПоРеквизитам.Форма.ВводСтроки",
			ПараметрыФормы,
			Элемент,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита = "Булево" Тогда
		ЗначениеРеквизита = Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита;
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита = Истина;
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);
		ПараметрыФормы.Вставить("ИмяРеквизита", Элемент.Родитель.ТекущиеДанные.ИмяРеквизита);
		ПараметрыФормы.Вставить("ПредставлениеРеквизита", Элемент.Родитель.ТекущиеДанные.ПредставлениеРеквизита);
		ПараметрыФормы.Вставить("НеЗаполнено", Элемент.Родитель.ТекущиеДанные.НеЗаполнено);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаБулево",
			ЭтотОбъект,
			Новый Структура("Элемент", Элемент));
		ОткрытьФорму(
			"Обработка.ПоискПоРеквизитам.Форма.ВводБулево",
			ПараметрыФормы,
			Элемент,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипЗначенияРеквизита = "Диапазон" Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита) Тогда
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = "";
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗначениеРеквизита", Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита);
		ПараметрыФормы.Вставить("ПредставлениеРеквизита", Элемент.Родитель.ТекущиеДанные.ПредставлениеРеквизита);
		ПараметрыФормы.Вставить("НеЗаполнено", Элемент.Родитель.ТекущиеДанные.НеЗаполнено);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаДиапазона",
			ЭтотОбъект,
			Новый Структура("Элемент", Элемент));
		ОткрытьФорму(
			"Обработка.ПоискПоРеквизитам.Форма.ВводДиапазонаЧисел",
			ПараметрыФормы,
			Элемент,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаЗначенияРеквизита(ВыбранноеЗначение, Параметры) Экспорт
	
	Элемент = Параметры.Элемент;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.ТипЗначения = "Массив" Тогда
		Если Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита <> Неопределено
			И ТипЗнч(Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита) = Тип("СписокЗначений") Тогда
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита.Очистить();
		ИначеЕсли Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита <> Неопределено
			И ТипЗнч(Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита) = Тип("Строка") Тогда 
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Новый СписокЗначений;
		Иначе
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Новый СписокЗначений;
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита.ТипЗначения = ВыбранноеЗначение.ОписаниеТипов;
		КонецЕсли;
		Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение.СписокВыбранных Цикл
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита.Добавить(ВыбранныйЭлемент.Значение);
		КонецЦикла;
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Ложь;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Булево") Тогда
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = "Не заполнено";
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаПериода(Результат, Параметры) Экспорт
	
	Элемент = Параметры.Элемент;
	Если ТипЗнч(Результат) = Тип("СтандартныйПериод") Тогда
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Результат;
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Ложь;
	ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Результат;
		Если Результат Тогда
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = "Не заполнено";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаСтроки(Результат, Параметры) Экспорт
	
	Элемент = Параметры.Элемент;
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Результат;
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Ложь;
	ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Результат;
		Если Результат Тогда
			Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = "Не заполнено";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаБулево(Результат, Параметры) Экспорт
	
	Элемент = Параметры.Элемент;
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Результат;
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Ложь;
	Иначе
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВводаЗначенияРеквизитаПродолжениеПослеВводаДиапазона(Результат, Параметры) Экспорт
	
	Элемент = Параметры.Элемент;
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Ложь;
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
		Элемент.Родитель.ТекущиеДанные.ЗначениеРеквизита = "Не заполнено";
		Элемент.Родитель.ТекущиеДанные.НеЗаполнено = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеУсловия()
	
	Если ВидПоиска <> ПредопределенноеЗначение("Перечисление.ВидыПоиска.РасширенныйПоиск") Тогда
		
	ТаблицаРеквизитовПустая = Истина;
	Для Каждого СтрокаТаблицы Из ЭтаФорма[Элементы.НастройкиПоиска.ТекущаяСтраница.Имя + "Реквизиты"] Цикл
		Если СтрокаТаблицы.НеЗаполнено = Истина
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеРеквизита) Тогда
			ТаблицаРеквизитовПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяСохраненногоПоиска = "";
		
	Иначе
		ТаблицаРеквизитовПустая = НЕ ЗначениеЗаполнено(ТипОбъекта);
		ИмяСохраненногоПоиска = "Расширенный поиск, " + Строка(ТипОбъекта);
	КонецЕсли;

	Возврат ТаблицаРеквизитовПустая;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискКлиент()
	
	ВыполнитьПоиск(Неопределено);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СОХРАНЕННЫМИ ПОИСКАМИ

&НаСервереБезКонтекста
Функция СравнитьДваШаблонаПоиска(Настройки, НастройкиДляСравнения)
	
	Для Каждого Пара Из Настройки Цикл
		Если ТипЗнч(Пара.Значение) <> Тип("ТаблицаЗначений")
			И ТипЗнч(Пара.Значение) <> Тип("ХранилищеЗначения")
			И Пара.Значение <> НастройкиДляСравнения[Пара.Ключ] Тогда 
			БылНайденСовпадающий = Ложь;
		ИначеЕсли ТипЗнч(Пара.Значение) = Тип("ТаблицаЗначений") Тогда
			Если НастройкиДляСравнения[Пара.Ключ] = Неопределено Тогда
				Возврат Ложь;
			Иначе
				МассивНастройки = ОбщегоНазначения.ТаблицаЗначенийВМассив(Пара.Значение);
				МассивНастройкиДляСравнения = ОбщегоНазначения.ТаблицаЗначенийВМассив(НастройкиДляСравнения[Пара.Ключ]);
				Если МассивНастройки.Количество() <> МассивНастройкиДляСравнения.Количество() Тогда
					Возврат Ложь;
				Иначе
					Для Индекс = 0 По МассивНастройки.Количество() - 1 Цикл
						Если ТипЗнч(МассивНастройки[Индекс].ЗначениеРеквизита) <> Тип("СписокЗначений")
							И МассивНастройки[Индекс].ЗначениеРеквизита <> МассивНастройкиДляСравнения[Индекс].ЗначениеРеквизита Тогда
							Возврат Ложь;
						ИначеЕсли ТипЗнч(МассивНастройки[Индекс].ЗначениеРеквизита) = Тип("СписокЗначений") Тогда
							Если ТипЗнч(МассивНастройкиДляСравнения[Индекс].ЗначениеРеквизита) <> Тип("СписокЗначений")
								ИЛИ МассивНастройки[Индекс].ЗначениеРеквизита.Количество() <> МассивНастройкиДляСравнения[Индекс].ЗначениеРеквизита.Количество() Тогда
								Возврат Ложь;
							Иначе
								Для ИндексСписка = 0 По МассивНастройки[Индекс].ЗначениеРеквизита.Количество() - 1 Цикл
									Если МассивНастройки[Индекс].ЗначениеРеквизита[ИндексСписка].Значение <> МассивНастройкиДляСравнения[Индекс].ЗначениеРеквизита[ИндексСписка].Значение Тогда
										Возврат Ложь;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСохраненныйПоискПоРеквизитам(Настройки)
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	Для Каждого СохраненныйПоиск Из СписокНастроек Цикл
		БылНайденСовпадающий = Ложь;
		КлючПоиска = СохраненныйПоиск.Значение;
		НастройкиДляСравнения = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов",КлючПоиска);
		
		Если НастройкиДляСравнения <> Неопределено Тогда
			БылНайденСовпадающий = СравнитьДваШаблонаПоиска(Настройки, НастройкиДляСравнения); 
		КонецЕсли; 
		
		Если БылНайденСовпадающий Тогда
			Возврат КлючПоиска;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяВременногоСохраненногоПоиска(Настройки, ВидПоиска)
	
	ИмяВременногоСохраненногоПоиска = "";
	Для Каждого Пара Из Настройки Цикл
		Если Пара.Значение <> Неопределено
			И ЗначениеЗаполнено(Пара.Значение) 
			И ТипЗнч(Пара.Значение) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаТаблицы Из Пара.Значение Цикл
				Если СтрокаТаблицы.НеЗаполнено Тогда
					Если ЗначениеЗаполнено(ИмяВременногоСохраненногоПоиска) Тогда
						ИмяВременногоСохраненногоПоиска = ИмяВременногоСохраненногоПоиска + ", " + СтрокаТаблицы.ПредставлениеРеквизита + " не заполнено";
					Иначе
						ИмяВременногоСохраненногоПоиска = СтрокаТаблицы.ПредставлениеРеквизита + " не заполнено";
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеРеквизита) Тогда
					Если ЗначениеЗаполнено(ИмяВременногоСохраненногоПоиска) Тогда
						ИмяВременногоСохраненногоПоиска = ИмяВременногоСохраненногоПоиска + ", " + СтрокаТаблицы.ПредставлениеРеквизита + "=" + Строка(СтрокаТаблицы.ЗначениеРеквизита);
					Иначе
						ИмяВременногоСохраненногоПоиска = СтрокаТаблицы.ПредставлениеРеквизита + "=" + Строка(СтрокаТаблицы.ЗначениеРеквизита);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Пара.Ключ = "ОтборРасширенногоПоиска" Тогда
			НастройкаОтбора = Пара.Значение.Получить();
			Описание = СформироватьТекстОписанияПоисковогоЗапроса(НастройкаОтбора.Отбор.Элементы); 
			Если ЗначениеЗаполнено(ИмяВременногоСохраненногоПоиска) Тогда
				ИмяВременногоСохраненногоПоиска = ИмяВременногоСохраненногоПоиска + ", " + Описание;
			Иначе
				ИмяВременногоСохраненногоПоиска = Описание;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	Если Настройки.Получить("ВидПоиска") = Перечисления.ВидыПоиска.ОбщийПоиск Тогда
		ИмяОбласти = "Все документы";
	Иначе
		ИмяОбласти = Строка(Настройки.Получить("ВидПоиска"));
    КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВременногоСохраненногоПоиска) Тогда
		ИмяВременногоСохраненногоПоиска = ИмяВременногоСохраненногоПоиска + ", " + ИмяОбласти;
	Иначе
		ИмяВременногоСохраненногоПоиска = ИмяОбласти;
	КонецЕсли;

	Если ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск Тогда
		Если ЗначениеЗаполнено(ИмяВременногоСохраненногоПоиска) Тогда
			ИмяВременногоСохраненногоПоиска = ИмяВременногоСохраненногоПоиска + ", " + Строка(Настройки.Получить("ТипОбъекта"));
		Иначе
			ИмяВременногоСохраненногоПоиска = Строка(Настройки.Получить("ТипОбъекта"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяВременногоСохраненногоПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяШаблонаПоКлючу(КлючНастроек)
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	Для Каждого ЭлементСпискаНастроек Из СписокНастроек Цикл
		Если ЭлементСпискаНастроек.Значение = КлючНастроек Тогда
			Возврат ЭлементСпискаНастроек.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСписокСохраненныхПараметровПоиска(КлючНастроек = Неопределено)
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	СписокСохраненныхПоисков.Очистить();
	НоваяСтрока = СписокСохраненныхПоисков.Добавить();
	НоваяСтрока.ИмяСохраненногоПоиска = НСтр("ru = 'Новый поиск'; en = 'New search'");
	НоваяСтрока.КлючНастроек = Неопределено;
	НоваяСтрока.КартинкаПоиска = 2;
	Для Каждого СохраненныйПоиск Из СписокНастроек Цикл
		НоваяСтрока = СписокСохраненныхПоисков.Добавить();
		НоваяСтрока.ИмяСохраненногоПоиска = СохраненныйПоиск.Представление;
		НоваяСтрока.КлючНастроек = СохраненныйПоиск.Значение;
		Если Найти(СохраненныйПоиск.Значение, "_временный_") > 0 Тогда
			НоваяСтрока.КартинкаПоиска = 0;
		Иначе
			НоваяСтрока.КартинкаПоиска = 1;
		КонецЕсли;
	КонецЦикла;
	СписокСохраненныхПоисков.Сортировать("КартинкаПоиска Убыв, КлючНастроек Возр");
	
	Если КлючНастроек <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("КлючНастроек", КлючНастроек);
		СтрокиТаблицы = СписокСохраненныхПоисков.НайтиСтроки(ПараметрыОтбора);
		Элементы.СписокСохраненныхПоисков.ТекущаяСтрока = СтрокиТаблицы[0].ПолучитьИдентификатор();
	Иначе
		Элементы.СписокСохраненныхПоисков.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныйПоиск(КлючНастроек)
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов",КлючНастроек);
   	ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки);
	КлючТекущегоОткрытогоШаблона = КлючНастроек;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСохраненныеПараметрыПоиска(КлючНастроек)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		ХранилищеНастроекДанныхФорм.Удалить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючНастроек, ПользовательИБ.Имя);
		ЗагрузитьСписокСохраненныхПараметровПоиска();	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПереименоватьСохраненныеПараметрыПоиска(КлючНастроек, НовоеИмя)
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.Представление = НовоеИмя;
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючНастроек);
	КопияКлючНастроек = КлючНастроек; 
	КопияКлючНастроек = СтрЗаменить(КопияКлючНастроек, "_временный_", "");
	ОписаниеНастроек.Представление = Лев(ОписаниеНастроек.Представление, 255);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КопияКлючНастроек, Настройки, ОписаниеНастроек); 
	Если Найти(КлючНастроек, "_временный_") > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ);
		Если ПользовательИБ <> Неопределено Тогда
			ХранилищеНастроекДанныхФорм.Удалить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючНастроек, ПользовательИБ.Имя);
		КонецЕсли;
	КонецЕсли;
	КлючТекущегоОткрытогоШаблона = КопияКлючНастроек;
	ЗагрузитьСписокСохраненныхПараметровПоиска(КлючТекущегоОткрытогоШаблона);	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСохраненныйПоиск(СоответствиеДляСохранения, НаименованиеСохраненногоПоиска, ВременныйСохраненныйПоиск)
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	Если НЕ ВременныйСохраненныйПоиск Тогда
		Если ПустаяСтрока(НаименованиеСохраненногоПоиска) Тогда
			НаименованиеСохраненногоПоиска = ПолучитьИмяВременногоСохраненногоПоиска(СоответствиеДляСохранения, ВидПоиска);
		КонецЕсли;
        ОписаниеНастроек.Представление = НаименованиеСохраненногоПоиска;
	Иначе
		Если ВидПоиска = Перечисления.ВидыПоиска.РасширенныйПоиск Тогда
			НаименованиеСохраненногоПоиска = ПолучитьИмяВременногоСохраненногоПоиска(СоответствиеДляСохранения, ВидПоиска);;
			СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
			Для Каждого СохраненныйПоиск Из СписокНастроек Цикл
				Если СохраненныйПоиск.Представление = НаименованиеСохраненногоПоиска 
					И Найти(СохраненныйПоиск.Значение, "_временный_") > 0 Тогда
					КлючНастроек = СохраненныйПоиск.Значение;
				КонецЕсли;
			КонецЦикла;
			ОписаниеНастроек.Представление = НаименованиеСохраненногоПоиска;
		Иначе
			
		ОписаниеНастроек.Представление = ПолучитьИмяВременногоСохраненногоПоиска(СоответствиеДляСохранения, ВидПоиска);
		Если НайтиСохраненныйПоискПоРеквизитам(СоответствиеДляСохранения) <> Ложь Тогда
			Возврат;
		КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КлючНастроек) Тогда
		КлючНастроек = Строка(Новый УникальныйИдентификатор);
		Если ВременныйСохраненныйПоиск Тогда
			КлючНастроек = КлючНастроек + "_временный_";
		КонецЕсли;
	КонецЕсли;
	ОписаниеНастроек.Представление = Лев(ОписаниеНастроек.Представление, 255);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючНастроек, СоответствиеДляСохранения, ОписаниеНастроек); 
	КлючТекущегоОткрытогоШаблона = КлючНастроек;
	ЗагрузитьСписокСохраненныхПараметровПоиска(КлючТекущегоОткрытогоШаблона);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьИСоздатьСохраненныйПоиск(НаименованиеСохраненногоПоиска, ВременныйСохраненныйПоиск, СохранятьПоиск = Истина)
	
	СоответствиеДляСохранения = Новый Соответствие(); 
	СохранитьОтборПоиска(СоответствиеДляСохранения);

	Для Каждого ТекущийЭлементФормы Из Элементы Цикл
		Если Найти(ТекущийЭлементФормы.Имя, "Сохраняемый") > 0
			И ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			СоответствиеДляСохранения.Вставить(СтрЗаменить(ТекущийЭлементФормы.Имя, "Сохраняемый", ""), ЭтаФорма[СтрЗаменить(ТекущийЭлементФормы.Имя, "Сохраняемый", "")]);
		КонецЕсли;
	КонецЦикла;
	Если НЕ СохранятьПоиск Тогда
		ДанныеДляСохранения = Новый Структура;
		Для Каждого ПараЗначений Из СоответствиеДляСохранения Цикл
			ДанныеДляСохранения.Вставить(ПараЗначений.Ключ, ПараЗначений.Значение);
		КонецЦикла;
		Ключ = НайтиСохраненныйПоискПоРеквизитам(СоответствиеДляСохранения);
		ДанныеДляСохранения.Вставить("КлючНайденный", Ключ);
		
		Если СписокСохраненныхПоисков.НайтиПоИдентификатору(Элементы.СписокСохраненныхПоисков.ТекущаяСтрока).КартинкаПоиска < 2 Тогда 
			ДанныеДляСохранения.Вставить("ТекущееНаименование", СписокСохраненныхПоисков.НайтиПоИдентификатору(Элементы.СписокСохраненныхПоисков.ТекущаяСтрока).ИмяСохраненногоПоиска);
		Иначе
			ДанныеДляСохранения.Вставить("ТекущееНаименование", ПолучитьИмяВременногоСохраненногоПоиска(СоответствиеДляСохранения, ВидПоиска));
		КонецЕсли;
		
		ХранилищеНастроек = Новый ХранилищеЗначения(ДанныеДляСохранения);
		Возврат ХранилищеНастроек;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КлючТекущегоОткрытогоШаблона) И СохранятьПоиск Тогда 
		СоздатьСохраненныйПоиск(СоответствиеДляСохранения, НаименованиеСохраненногоПоиска, ВременныйСохраненныйПоиск);
		Возврат Неопределено;		
	Иначе
		ПерезаписатьСохраненныйПоиск();
		ЗагрузитьСписокСохраненныхПараметровПоиска(КлючТекущегоОткрытогоШаблона);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьОтборПоиска(Настройки)
	
	ИндексЗначенияПеречисления = Перечисления.ВидыПоиска.Индекс(ВидПоиска);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ВидыПоиска.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;	
		
	Если Элементы.Найти(ИмяЗначенияПеречисления + "Реквизиты") <> Неопределено Тогда
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
		ТаблицаРеквизитов.Колонки.Добавить("ЗначениеРеквизита", Новый ОписаниеТипов("СтандартныйПериод, СписокЗначений, Строка, Число, Булево"));
		ТаблицаРеквизитов.Колонки.Добавить("ПредставлениеРеквизита", Новый ОписаниеТипов("Строка"));
		ТаблицаРеквизитов.Колонки.Добавить("ОдиночноеЗначение", Новый ОписаниеТипов("Булево"));		
		ТаблицаРеквизитов.Колонки.Добавить("НеЗаполнено", Новый ОписаниеТипов("Булево"));
		ТаблицаРеквизитов.Колонки.Добавить("ДополнительныйРеквизитСвойство", Новый ОписаниеТипов("Булево"));
		ТаблицаРеквизитов.Колонки.Добавить("ТипЗначенияРеквизита", Новый ОписаниеТипов("Строка"));
		ТаблицаРеквизитов.Колонки.Добавить("ТипФактическогоЗначения", Новый ОписаниеТипов("ОписаниеТипов"));

		ТаблицаРеквизитов = РеквизитФормыВЗначение(ИмяЗначенияПеречисления + "Реквизиты", Тип("ТаблицаЗначений"));
		Настройки.Вставить(ИмяЗначенияПеречисления + "Реквизиты", ТаблицаРеквизитов);
	КонецЕсли;
	
	Если ИмяЗначенияПеречисления = "РасширенныйПоиск" Тогда 
		ОтборРасширенногоПоиска = Новый ХранилищеЗначения(КомпоновщикНастроекРасширенногоПоиска.Настройки);
		Настройки.Вставить("ОтборРасширенногоПоиска", ОтборРасширенногоПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСохраненныйПоискПоНаименованию(Имя)
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	Для Каждого СохраненныйПоиск Из СписокНастроек Цикл
		
		Если СохраненныйПоиск.Представление	= Имя Тогда
			Возврат СохраненныйПоиск.Значение; 
		КонецЕсли;		
	КонецЦикла;		
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция СравнитьТекущиеНастройкиИВыделенногоШаблонаПоиска()

	ТекущиеНастройки = Новый Соответствие(); 
	СохранитьОтборПоиска(ТекущиеНастройки);
	Для Каждого ТекущийЭлементФормы Из Элементы Цикл
		Если Найти(ТекущийЭлементФормы.Имя, "Сохраняемый") > 0
			И ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			ТекущиеНастройки.Вставить(СтрЗаменить(ТекущийЭлементФормы.Имя, "Сохраняемый", ""), ЭтаФорма[СтрЗаменить(ТекущийЭлементФормы.Имя, "Сохраняемый", "")]);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиДляСравнения = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов",КлючТекущегоОткрытогоШаблона);

	РезультатСравнения = СравнитьДваШаблонаПоиска(ТекущиеНастройки, НастройкиДляСравнения);

	Возврат РезультатСравнения;
	
КонецФункции

&НаСервере
Процедура ПерезаписатьСохраненныйПоиск()
	
	СоответствиеДляСохранения = Новый Соответствие(); 
	
	СохранитьОтборПоиска(СоответствиеДляСохранения);

	Для Каждого ТекущийЭлементФормы Из Элементы Цикл
		Если Найти(ТекущийЭлементФормы.Имя, "Сохраняемый") > 0
			И ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			СоответствиеДляСохранения.Вставить(СтрЗаменить(ТекущийЭлементФормы.Имя, "Сохраняемый", ""), ЭтаФорма[СтрЗаменить(ТекущийЭлементФормы.Имя, "Сохраняемый", "")]);
		КонецЕсли;
	КонецЦикла;
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	Для Каждого ЭлементСпискаНастроек Из СписокНастроек Цикл
		Если ЭлементСпискаНастроек.Значение = КлючТекущегоОткрытогоШаблона Тогда
			ОписаниеНастроек = Новый ОписаниеНастроек;
			Если Найти(КлючТекущегоОткрытогоШаблона, "_временный_") > 0 Тогда
				ОписаниеНастроек.Представление = ПолучитьИмяВременногоСохраненногоПоиска(СоответствиеДляСохранения, ВидПоиска);
			Иначе
				ОписаниеНастроек.Представление = ЭлементСпискаНастроек.Представление;
			КонецЕсли;
			ОписаниеНастроек.Представление = Лев(ОписаниеНастроек.Представление, 255);
            ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючТекущегоОткрытогоШаблона, СоответствиеДляСохранения, ОписаниеНастроек); 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСохраненныйПоискПродолжение(ОтветПользователя, Параметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	КлючиДляУдаления = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокСохраненныхПоисков.ВыделенныеСтроки Цикл
		ТекущиеДанные = СписокСохраненныхПоисков.НайтиПоИдентификатору(ВыделеннаяСтрока);
		КлючиДляУдаления.Добавить(ТекущиеДанные.КлючНастроек);	
	КонецЦикла;
	Для Каждого Ключ Из КлючиДляУдаления Цикл
		УдалитьСохраненныеПараметрыПоиска(Ключ);	
	КонецЦикла;
	КлючТекущегоОткрытогоШаблона = "";
	ПереключитьВидПоиска(ВидПоиска, Истина);
	ТекущаяСтрока = СписокСохраненныхПоисков[СписокСохраненныхПоисков.Количество()-1];
	ИдСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.СписокСохраненныхПоисков.ТекущаяСтрока = ИдСтроки;
	Элементы.СписокСохраненныхПоисковПереименоватьСохраненныйПоиск.Доступность = Истина;
	Элементы.СписокСохраненныхЗапросовМенюУдалитьСохраненныйПоиск.Доступность = Истина;
	Элементы.СписокСохраненныхПоисковКонтекстноеМенюПереименоватьСохраненныйПоиск.Доступность = Истина;
	Элементы.СписокСохраненныхЗапросовКонтекстноеМенюУдалитьСохраненныйПоиск.Доступность = Истина;
	Если СписокСохраненныхПоисков.Количество() = 1 Тогда
		Элементы.СписокСохраненныхПоисковПереименоватьСохраненныйПоиск.Доступность = Ложь;
		Элементы.СписокСохраненныхЗапросовМенюУдалитьСохраненныйПоиск.Доступность = Ложь;
		Элементы.СписокСохраненныхПоисковКонтекстноеМенюПереименоватьСохраненныйПоиск.Доступность = Ложь;
		Элементы.СписокСохраненныхЗапросовКонтекстноеМенюУдалитьСохраненныйПоиск.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСохраненныеРанееНастройкиПоиска()
	
	ТекущиеДанные = Элементы.СписокСохраненныхПоисков.ТекущиеДанные;
	ЗагрузитьСохраненныйПоиск(ТекущиеДанные.КлючНастроек);
	Состояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьСохраненныйПоиск(Команда)
	
	Если ЗначениеЗаполнено(Элементы.СписокСохраненныхПоисков.ТекущиеДанные.КлючНастроек) Тогда
	Элементы.СписокСохраненныхПоисков.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку()
		
	Если Элементы.ГруппаПараметрыИРезультатыПоиска.ТекущаяСтраница <> Элементы.ГруппаРезультатыПоиска
		И ТекущийЭлемент = Элементы.СписокСохраненныхПоисков 
		И Элементы.СписокСохраненныхПоисков.ТекущиеДанные.КлючНастроек <> КлючТекущегоОткрытогоШаблона Тогда
		
		Если ЗначениеЗаполнено(КлючТекущегоОткрытогоШаблона) Тогда
			Если ВидПоиска <> ПредопределенноеЗначение("Перечисление.ВидыПоиска.РасширенныйПоиск") Тогда
				ШаблоныСовпадают = СравнитьТекущиеНастройкиИВыделенногоШаблонаПоиска();
				Если НЕ ШаблоныСовпадают Тогда
					Режим = РежимДиалогаВопрос.ДаНетОтмена;
					НазваниеИзмененногоШаблона = ПолучитьИмяШаблонаПоКлючу(КлючТекущегоОткрытогоШаблона);
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Шаблон ""%1"" был изменен.
							|Сохранить изменения?';
							|en = 'Template ""%1"" was changed.
							|Save changes?'"),
						НазваниеИзмененногоШаблона);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ОткрытьНастройкуПродолжениеОбычныйПоиск",
						ЭтотОбъект);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, 0);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ВидПоиска <> ПредопределенноеЗначение("Перечисление.ВидыПоиска.РасширенныйПоиск") Тогда
				ИмяСохраненногоПоиска = "";
			Иначе
				ИмяСохраненногоПоиска = "Расширенный поиск, " + Строка(ТипОбъекта);
			КонецЕсли;
			Если НЕ ПроверитьНаличиеУсловия() Тогда
				Режим = РежимДиалогаВопрос.ДаНетОтмена;
				ТекстВопроса = НСтр("ru = 'Сохранить введенные условия поиска в качестве шаблона?'; en = 'Save your search criteria as a template?'");
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ОткрытьНастройкуПродолжениеРасширенныйПоиск",
					ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, 0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьСохраненныеРанееНастройкиПоиска();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуПродолжениеОбычныйПоиск(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПерезаписатьСохраненныйПоиск();
		ОткрытьСохраненныеРанееНастройкиПоиска();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		ЗагрузитьСписокСохраненныхПараметровПоиска(КлючТекущегоОткрытогоШаблона);
	КонецЕсли;	
	ОткрытьСохраненныеРанееНастройкиПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуПродолжениеРасширенныйПоиск(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьПоиск(Неопределено);
		ОткрытьСохраненныеРанееНастройкиПоиска();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		ЗагрузитьСписокСохраненныхПараметровПоиска();
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПоискПродолжение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Текущие условия поиска сохранены как ""%1"".'; en = 'Current search criteria are saved as ""%1"".'"), 
		Результат.НаименованиеСохраненногоПоиска);	
	Состояние(ТекстСообщения);
	КлючТекущегоОткрытогоШаблона = Результат.КлючСохраненногоПоиска;
	ЗагрузитьСписокСохраненныхПараметровПоиска(КлючТекущегоОткрытогоШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьДоступКТипуДокумента(ВыбранноеЗначение, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для поиска в указанной области.'; en = 'Insufficient privileges to search for in the specified scope.'");
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Функция ФайловыеКомандыДоступны(ФайлСсылка = Неопределено)
	
	
	Если ФайлСсылка = Неопределено Тогда 
		ФайлСсылка = Элементы.ФайлыСписок.ТекущаяСтрока;
	КонецЕсли;
	
	Если ФайлСсылка = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФайлСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Элементы.ФайлыСписок.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элементы.ФайлыСписок.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			УстановитьДоступностьКоманд(Элементы.ФайлыСписок.ТекущиеДанные.РедактируетТекущийПользователь,
				Элементы.ФайлыСписок.ТекущиеДанные.Редактирует,
				Элементы.ФайлыСписок.ТекущиеДанные.ПодписанЭП,
				Элементы.ФайлыСписок.ТекущиеДанные.Зашифрован);
					
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(РедактируетТекущийПользователь, Редактирует, ПодписанЭП, Зашифрован)
	
	Элементы.ФайлыСписокЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	Элементы.ФайлыСписокКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыСписокКонтекстноеМенюЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	
	Элементы.ФайлыСписокСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	Элементы.ФайлыСписокКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыСписокКонтекстноеМенюСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	
	Элементы.ФайлыСписокОсвободить.Доступность = Не Редактирует.Пустая();
	Элементы.ФайлыСписокКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыСписокКонтекстноеМенюОсвободить.Доступность = Не Редактирует.Пустая();
	
	Элементы.ФайлыСписокЗанять.Доступность = Редактирует.Пустая() И НЕ ПодписанЭП;
	Элементы.ФайлыСписокКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыСписокКонтекстноеМенюЗанять.Доступность = Редактирует.Пустая() И НЕ ПодписанЭП;
	
	Элементы.ФайлыСписокРедактировать.Доступность = НЕ ПодписанЭП;
	Элементы.ФайлыСписокКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыСписокКонтекстноеМенюРедактировать.Доступность = НЕ ПодписанЭП;
	
	Элементы.ФайлыСписокОбновитьИзФайлаНаДиске.Доступность = НЕ ПодписанЭП;
	Элементы.ФайлыСписокКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = НЕ ПодписанЭП;
	
	Элементы.ФайлыСписокПодписать.Доступность = Редактирует.Пустая();
	Элементы.ФайлыСписокКонтекстноеМенюПодписать.Доступность = Редактирует.Пустая();
	
	Элементы.ФайлыСписокДобавитьЭПИзФайла.Доступность = Редактирует.Пустая();
	Элементы.ФайлыСписокКонтекстноеМенюДобавитьЭПИзФайла.Доступность = Редактирует.Пустая();
	
	Элементы.ФайлыСписокСохранитьВместеСЭП.Доступность = ПодписанЭП;
	Элементы.ФайлыСписокКонтекстноеМенюСохранитьВместеСЭП.Доступность = ПодписанЭП;
	
	Элементы.ФайлыСписокЗашифровать.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	Элементы.ФайлыСписокКонтекстноеМенюЗашифровать.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	
	Элементы.ФайлыСписокРасшифровать.Доступность = Зашифрован;
	Элементы.ФайлыСписокКонтекстноеМенюРасшифровать.Доступность = Зашифрован;
	
	Элементы.ФайлыСписокОбновитьИзФайлаНаДиске.Доступность = Редактирует.Пустая() И НЕ Зашифрован И НЕ ПодписанЭП;
	Элементы.ФайлыСписокКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Редактирует.Пустая() И НЕ Зашифрован И НЕ ПодписанЭП;
	
	Расширение = Элементы.ФайлыСписок.ТекущиеДанные.Расширение;
	ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
	РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
	Элементы.ФайлыСписокРаспознать.Доступность = РасширениеПоддерживается И Редактирует.Пустая();
	Элементы.ФайлыСписокКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыСписокКонтекстноеМенюРаспознать.Доступность = РасширениеПоддерживается И Редактирует.Пустая();
	
КонецПроцедуры

#КонецОбласти
