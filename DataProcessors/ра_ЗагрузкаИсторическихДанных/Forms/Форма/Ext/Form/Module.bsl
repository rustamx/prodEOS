#Область СобытияИКомандыФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = "C:\";
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	Если ПутьКФайлу = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан файл для загрузки";
		Сообщение.Поле = "Объект.ИмяФайла";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПрочитатьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьЛог(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	ВывестиЛогОшибок(ТабДок);
	ТабДок.Показать();	

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверить(Команда)
	
	Если ПутьКФайлу = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан файл для загрузки";
		Сообщение.Поле = "Объект.ИмяФайла";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПрочитатьФайл(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВСДиК(Команда)
	КомандаУдалитьВСДиКНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункции

&НаКлиенте
Процедура ПрочитатьФайл(Проверка = Ложь)	
	
	Если Проверка Тогда
		Файл = Новый ДвоичныеДанные(ПутьКФайлу);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);	
		//ПодключитьОбработчикОжидания("ОбработкаОжидания", 1);
		ПроверитьНаСервере(Адрес);
	Иначе
		Если ЕстьОшибкиЗагрузки Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьЗагрузкуПослеВопроса", ЭтотОбъект), НСтр("ru = 'Найдены ошибки сопоставления данных из файла. Продолжить загрузку?';"
			+ " en = 'Found data mapping errors. Continue the download?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуПослеВопроса(РезультатВопроса, ДополнительныеПараметры)	Экспорт
	
	//ПодключитьОбработчикОжидания("ОбработкаОжидания", 1);
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбработатьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(ФайлВХранилище)
	
	ТабличныйДокумент.Очистить();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлВХранилище);
	тПуть = ПолучитьИмяВременногоФайла("xls"); 
	ДвоичныеДанные.Записать(тПуть); 
	
	СписокЛистов = ПолучитьСписокЛистов_EXCEL1C(тПуть);
	ТаблицаЗначений = ЗагрузитьМетодом_EXCEL1C(тПуть, СписокЛистов[0].Значение, , 2);
	ТаблицаЗначений.Индексы.Добавить("НомерСтроки");
	//проверка по каждому объекту метаданных на наличие дубликатов и ненайденных значений
	//
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("МакетПредупреждения");	
	Область = Макет.ПолучитьОбласть("ОбластьЗаголовок");		
	ТабличныйДокумент.Вывести(Область);	
	Область = Макет.ПолучитьОбласть("ОбластьДанные");	
	
	Если ТипДокумента = "0" Тогда
		ТаблицаМетаданных = ПолучитьТаблицуМетаданныхДляПроверкиНС();
	ИначеЕсли ТипДокумента = "1" Тогда
		ТаблицаМетаданных = ПолучитьТаблицуМетаданныхДляПроверкиВСДиК();
	КонецЕсли;
	
	КоличествоОбходов = ТаблицаМетаданных.Количество(); 
	Инд = 0;
	Для Каждого Строка Из ТаблицаМетаданных Цикл
		Инд = Инд + 1;
		АдресОбработчикаОжидания = ПоместитьВоВременноеХранилище(Новый Структура("Инд, КоличествоОбходов", Инд, КоличествоОбходов), ЭтаФорма.УникальныйИдентификатор);
		ПроверитьТаблицуЗначений(ТабличныйДокумент, Область, ТаблицаЗначений, Строка);	
	КонецЦикла;	
	
	//помещение ТЗ во временное хранилище для дальнейшей работы с ним в этом сеансе
	//
	АдресТЗ = ПоместитьВоВременноеХранилище(ТаблицаЗначений, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНаСервере()
	
	//обработка таблицы значений 
	//
	ЛогОшибок.Очистить();
	ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресТЗ);

	Если ТипДокумента = "0" Тогда
		ЗагрузкаНесоответствий(ТаблицаЗначений);
	ИначеЕсли ТипДокумента = "1" Тогда
		ЗагрузкаВСДК(ТаблицаЗначений)
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаНесоответствий(ТаблицаЗначений)
	
	КоличествоОбходов = ТаблицаЗначений.Количество(); 
	Инд = 0;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		АдресОбработчикаОжидания = ПоместитьВоВременноеХранилище(Новый Структура("Инд, КоличествоОбходов", Инд, КоличествоОбходов), ЭтаФорма.УникальныйИдентификатор);

		КоличествоОшибокДоЗагрузкиСтроки = ЛогОшибок.Количество();

		Если Строка.КоличествоID > 1 Тогда
			ДобавитьВЛогОшибок(Строка, "Найдено более одного документа Несоответствие!");
		КонецЕсли;
		Если Строка.КоличествоVyyavivshayaOrganizaciya > 1 Тогда
			ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Выявившая организация. Найдено более одного элемента справочника Контрагенты с кодом: " + Строка.Колонка10);				
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.VyyavivshayaOrganizaciya) Тогда
			ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Выявившая организация. Не найдено ни одного элемента справочника Контрагенты с кодом: " + Строка.Колонка10);				
		КонецЕсли;
		
		// если были ошибки, то грузить нельзя
		Если КоличествоОшибокДоЗагрузкиСтроки = ЛогОшибок.Количество() Тогда
			
			Если ЗначениеЗаполнено(Строка.ID) Тогда
				Документ = Строка.ID.ПолучитьОбъект();	
			Иначе
				Документ = Документы.ra_Nesootvetstvie.СоздатьДокумент();		
			КонецЕсли;
			
			//заполнение лога ошибок
			Если НЕ ЗначениеЗаполнено(Строка.EhtapVyyavleniya) И ЗначениеЗаполнено(Строка.Колонка9) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Этап выявления. Не найдено значение: " + Строка.Колонка9);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.KlassifikatorMTRiO) И ЗначениеЗаполнено(Строка.Колонка22) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Классификатор МТР. Не найдено значение: " + Строка.Колонка22);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Proekt) И ЗначениеЗаполнено(Строка.Колонка4) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Проект. Не найдено значение: " + Строка.Колонка4);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Ploshchadka) И ЗначениеЗаполнено(Строка.Колонка5) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Площадка. Не найдено значение: " + Строка.Колонка5);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.VidKontrolnoyOperacii) И ЗначениеЗаполнено(Строка.Колонка6) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Вид контрольной операции. Не найдено значение: " + Строка.Колонка6);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.ZdanieSooruzhenie) И ЗначениеЗаполнено(Строка.Колонка17) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Здание/сооружение. Не найдено значение: " + Строка.Колонка17);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.SpecializirovannayaOrganizaciya) И ЗначениеЗаполнено(Строка.Колонка32) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Специализированная организация. Не найдено значение: " + Строка.Колонка32);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.VidNesootvetstviya) И ЗначениеЗаполнено(Строка.Колонка36) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Вид НС. Не найдено значение: " + Строка.Колонка36);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.NaimenovanieTekhnologicheskojSistemy) И ЗначениеЗаполнено(Строка.Колонка44) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Обозначение и наименование технологической системы. Не найдено значение: " + Строка.Колонка44);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.VyyavivshayaOrganizaciya) И ЗначениеЗаполнено(Строка.Колонка10) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Выявившая организация. Не найдено значение: " + Строка.Колонка10);				
			КонецЕсли;
			//Если НЕ ЗначениеЗаполнено(Строка.VyyavivsheePodrazdelenie) Тогда
			//	ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Выявившее подразделение. Не найдено значение: " + Строка.Колонка12);				
			//КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.VyyavivsheeLico) И ЗначениеЗаполнено(Строка.Колонка13) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Выявившее лицо. Не найдено значение: " + Строка.Колонка13);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Oborudovanie) И ЗначениеЗаполнено(Строка.Колонка25) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Оборудование. Не найдено значение: " + Строка.Колонка25);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.RabochayaDokumentaciya) И ЗначениеЗаполнено(Строка.Колонка30) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Рабочая документация. Не найдено значение: " + Строка.Колонка30);				
			КонецЕсли;		
			Если ЗначениеЗаполнено(Строка.Колонка24) Тогда
				Попытка
					KlassBezopasnosti = Перечисления.ra_KlassyBezopasnosti.Получить(Число(Строка.Колонка24) - 1);
				Исключение
					ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Класс безопасности. Некорректно указано значение перечисления Классы безопасности: " + Строка.Колонка24);				
				КонецПопытки;
			Иначе
				KlassBezopasnosti = ПредопределенноеЗначение("Перечисление.ra_KlassyBezopasnosti.ПустаяСсылка");
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Колонка37) Тогда
				Попытка
					TipNesootvetstviya = Перечисления.ra_TipyNesootvetstvij.Получить(Число(Строка.Колонка37) - 1);
				Исключение
					ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Тип несоответствия. Некорректно указано значение перечисления Тип несоответствия: " + Строка.Колонка37);				
				КонецПопытки;  
			Иначе
				TipNesootvetstviya = ПредопределенноеЗначение("Перечисление.ra_TipyNesootvetstvij.ПустаяСсылка");
			КонецЕсли;
			
			//загрузка документа
			ЗаполнитьЗначенияСвойств(Документ, Строка);
			Документ.VyyavivsheePodrazdelenie = Строка.VyyavivshayaOrganizaciya.ра_ЦФО;
			Документ.ОбменДанными.Загрузка = Истина;
			//примитивные типы данных из файла
			Документ.ID = СтрЗаменить(Строка.Колонка1, Символы.НПП, "");
			Документ.NomerVnutrennij = Строка.Колонка2;
			Документ.Дата = ?(ЗначениеЗаполнено(Строка.Колонка3), Строка.Колонка3, Строка.Колонка8);
			Документ.NomerPervichnojRegistracii = Строка.Колонка7;
			Документ.DataVyyavleniya = Строка.Колонка8;
			Документ.MestoVyyavleniyaNS = Строка.Колонка16;
			Документ.PodrobnoeOpisanie = Строка.Колонка19;
			Документ.NarushennyeTrebovaniya = Строка.Колонка20;
			Документ.OboznachenieINaimenovaniePredmeta = Строка.Колонка23;
			Документ.ZavodskojNomerOborudovaniya = Строка.Колонка26;
			Документ.ChertezhnyjNomer = Строка.Колонка27;
			Документ.Sertifikat = Строка.Колонка28;
			Документ.DataIzgotovleniyaProdukcii = ?(ЗначениеЗаполнено(Строка.Колонка29), Дата(Строка(Строка.Колонка29) + "01" + "01"), "");
			Документ.NomerPlanaKachestva = Строка.Колонка34;
			Документ.Izgotovitel = Строка.Колонка43;
			//перечисления
			Документ.KlassBezopasnosti = KlassBezopasnosti;
			Документ.TipNesootvetstviya = TipNesootvetstviya;
			Документ.VidObektaNesootvetstviya = ВернутьЗначениеПеречисленияПоСинониму(СтрЗаменить(Строка.Колонка21, "*", ""));
			
			Попытка
				Документ.Записать();
			Исключение
				ДобавитьВЛогОшибок(Строка, "Документ не записан по причине: " + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(Строка.DopustivshayaOrganizaciya) И ЗначениеЗаполнено(Строка.Колонка14) Тогда
				ДобавитьВЛогОшибок(Строка, "Документ Уведомление не создан. Не найдена допустившая организация: " + Строка.Колонка14);
			Иначе
				ДокументУведомление = Документы.ra_Uvedomlenie.СоздатьДокумент();
				ДокументУведомление.ОбменДанными.Загрузка = Истина;
				ЗаполнитьЗначенияСвойств(ДокументУведомление, Документ);
				ДокументУведомление.DopustivshayaOrganizaciya = Строка.DopustivshayaOrganizaciya;
				ДокументУведомление.Nesootvetstvie = Документ.Ссылка;
				Попытка
					ДокументУведомление.Записать();
				Исключение
					ДобавитьВЛогОшибок(Строка, "Документ не записан по причине: " + ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;

				
			//////////////////////////////////////////////////////////////////////////////////
			//////////////////////////////////////////////////////////////////////////////////
			//////////////////////////////////////////////////////////////////////////////////УБРАТЬ
			//Прервать;

			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаВСДК(ТаблицаЗначений)
	
	КоличествоОбходов = ТаблицаЗначений.Количество(); 
	Инд = 0;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		АдресОбработчикаОжидания = ПоместитьВоВременноеХранилище(Новый Структура("Инд, КоличествоОбходов", Инд, КоличествоОбходов), ЭтаФорма.УникальныйИдентификатор);
		
		КоличествоОшибокДоЗагрузкиСтроки = ЛогОшибок.Количество();
		
		Если Строка.КоличествоID > 1 Тогда
			ДобавитьВЛогОшибок(Строка, "Найдено более одного документа ВСДиК!");
		КонецЕсли;
		Если Строка.КоличествоOrganizaciya > 1 Тогда
			ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Организация. Найдено более одного элемента справочника Контрагенты с кодом: " + Строка.Колонка5);				
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Organizaciya) И ЗначениеЗаполнено(Строка.Колонка5) Тогда
			ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Организация. Не найдено ни одного элемента справочника Контрагенты с кодом: " + Строка.Колонка5);				
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Organizaciya) Тогда
			ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Организация. Поле из файла не заполнено!");				
		КонецЕсли;
		
		// если были ошибки, то грузить нельзя
		Если КоличествоОшибокДоЗагрузкиСтроки = ЛогОшибок.Количество() Тогда
			
			Если ЗначениеЗаполнено(Строка.ID) Тогда
				Документ = Строка.ID.ПолучитьОбъект();	
			Иначе
				Документ = Документы.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya.СоздатьДокумент();		
			КонецЕсли;
			
			//заполнение лога ошибок
			Если НЕ ЗначениеЗаполнено(Строка.Nesootvetstvie) И ЗначениеЗаполнено(Строка.Колонка2) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Несоответствие. Не найдено значение: " + Строка.Колонка2);				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.VidVremennyhSderzhivayushchihDejstvijIKorrekcij) И ЗначениеЗаполнено(Строка.Колонка3) Тогда
				ДобавитьВЛогОшибок(Строка, "Загружаемое поле: Вид Временных сдерживающих действий и Коррекций. Не найдено значение: " + Строка.Колонка3);				
			КонецЕсли;

			//загрузка документа
			ЗаполнитьЗначенияСвойств(Документ, Строка);
			Документ.Podrazdelenie = Строка.Organizaciya.ра_ЦФО;
			//примитивные типы данных из файла
			Документ.ID = СтрЗаменить(Строка.Колонка1, Символы.НПП, "");
			Документ.Дата = ТекущаяДата();		
			Документ.FakticheskijSrok = Строка.Колонка7;
			Документ.Opisanie = Строка.Колонка4;
			Документ.OtchetOVypolnenii = Строка.Колонка8;
			Документ.ОбменДанными.Загрузка = Истина;
			Попытка
				Документ.Записать();
			Исключение
				ДобавитьВЛогОшибок(Строка, "Документ не записан по причине: " + ОписаниеОшибки());				
			КонецПопытки;
			//////////////////////////////////////////////////////////////////////////////////
			//////////////////////////////////////////////////////////////////////////////////
			//////////////////////////////////////////////////////////////////////////////////УБРАТЬ
			//Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	

КонецПроцедуры

&НаСервере
Функция ВернутьЗначениеПеречисленияПоСинониму(ЗначениеСинонимаТекст)
	
	ЭлементПеречисления = Неопределено;         
	Для Каждого ТекЭлемент Из Метаданные.Перечисления.ra_VidyPredmetovNesootvetstviya.ЗначенияПеречисления Цикл
		Если ТекЭлемент.Синоним = ЗначениеСинонимаТекст Тогда
			ЭлементПеречисления = Перечисления.ra_VidyPredmetovNesootvetstviya[ТекЭлемент.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ЭлементПеречисления; // возвращаем значение перечисления или Неопределено
	
КонецФункции 

&НаСервере
Функция ЗагрузитьМетодом_EXCEL1C(Знач ФайлEXCEL, Знач ИмяЛиста = "", Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0)
	Перем ТабДок, ОбластьФайла, КолВоКолонокФайла, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
	Перем ТаблицаРезультат;
	
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабДок.Прочитать(ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	ОбластьФайла = ТабДок.ПолучитьОбласть(ИмяЛиста);
	КолВоСтрокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоВертикали();
	КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		// Завершение работы.
		// Закрытие Объектов.
		ТабДок = Неопределено;
		Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
	КонецЕсли;
	
	// Создание результирующей таблицы, в которую будут записываться считанные из файла данные.
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	// Формирование колонок результирующей таблицы.
	
	// "НомерСтроки" - для наглядности и удобства.
	// В зависимости от разрабатываемой обработки.
	// "Сопоставлено" - может быть другим.
	// Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла.
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	//ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(500);
	КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 0);
	Для ит = 1 ПО КолВоКолонокФайла Цикл
		нКолонка = СтрЗаменить(ит, Символы.НПП, "");
		ИмяКолонки = "Колонка" + нКолонка;
		Если ИмяКолонки = "Колонка10" ИЛИ ИмяКолонки = "Колонка32" ИЛИ ИмяКолонки = "Колонка14" ИЛИ КолВоКолонокФайла <= 10 И ИмяКолонки = "Колонка5" Тогда
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", , , , КвалификаторыЧисла));
		ИначеЕсли ИмяКолонки = "Колонка4" И КолВоКолонокФайла <= 10 Тогда
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(2000)));
		Иначе	
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка", , , , КвалификаторыСтроки));
		КонецЕсли;
	КонецЦикла;
	
	// 1-я строка. Заголовки.
	//НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
	//НоваяСтрокаТФ.НомерСтроки = 1;
	//Для ит=1 ПО КолВоКолонокФайла Цикл
	//	нКолонка = СтрЗаменить(ит, Символы.НПП, "");
	//	ИмяКолонки = "Колонка" + нКолонка;
	//	НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
	//	
	//	// Используется при формировании таблицы на форме обработки.
	//	ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
	//	ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
	//	ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
	//КонецЦикла;
	
	НачСтрока = ?(НачСтрока = 0, 2, НачСтрока);
	КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
	Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ[0] = нСтрокаТФ;
		нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
		Для нКолонкаТФ = 1 ПО КолВоКолонокФайла Цикл
			нКолонка = СтрЗаменить(нКолонкаТФ, Символы.НПП, "");
			Область = ОбластьФайла.ПолучитьОбласть("R" + нСтрока + "C"+нКолонка);
			ТекущаяОбласть = Область.ТекущаяОбласть;
			
			Попытка
				ЗначениеЯчейки = СтрЗаменить(Строка(ТекущаяОбласть.Значение), Символы.НПП, ""); 
			Исключение
				ЗначениеЯчейки = СтрЗаменить(ТекущаяОбласть.Текст, Символы.НПП, "");
			КонецПопытки;
			
			ИмяКолонки = "Колонка" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
	КонецЦикла;
		
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЛистов_EXCEL1C(Знач ФайлEXCEL)
	Перем ТабличныйДокумент, ОбластьТД;
	Перем СписокЛистов;

	СписокЛистов = Новый СписокЗначений;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабличныйДокумент.Прочитать(ФайлEXCEL);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат Новый СписокЗначений;
	КонецПопытки;
	
	Для Каждого ОбластьТД ИЗ ТабличныйДокумент.Области Цикл
		СписокЛистов.Добавить(ОбластьТД.Имя);
	КонецЦикла;
	
	Возврат СписокЛистов;
	
КонецФункции

&НаСервере
Процедура ВывестиЛогОшибок(ТабДок)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Макет");	
	Область = Макет.ПолучитьОбласть("ОбластьЗаголовок");		
	ТабДок.Вывести(Область);	
	Область = Макет.ПолучитьОбласть("ОбластьДанные");	
	Для Каждого СтрСостава Из ЛогОшибок Цикл 		
		Область.Параметры.Заполнить(СтрСостава);
		ТабДок.Вывести(Область);		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьВЛогОшибок(СтрокаТЗ, ТекстОшибки)
	
	Строка = ЛогОшибок.Добавить();
	Строка.НомерСтроки = СтрокаТЗ.НомерСтроки;
	Строка.ID = СтрокаТЗ.Колонка1;
	Строка.Ошибка = ТекстОшибки;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьТаблицуЗначений(ТабличныйДокумент, Область, ТаблицаЗначений, Строка);	

	КолвоДубликатов = 0;
	КолвоНенайденныхЗначений = 0;
		
	Запрос = Новый Запрос;
	Если Строка.Тип = "Справочник" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаДляСправочника(Строка);
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаДляДокумента(Строка);
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаЗначений);
	ОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ТаблицаЗначений.Колонки.Добавить("Количество" + Строка.РеквизитДокумента, ОписаниеТипов);
	ОписаниеТипов = Новый ОписаниеТипов(Строка.Тип + "Ссылка." + Строка.ОбъектМетаданных);
	ТаблицаЗначений.Колонки.Добавить(Строка.РеквизитДокумента, ОписаниеТипов);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда	
		ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаИтоги.Следующий() Цикл
			
			СтрокаТЗ = ТаблицаЗначений.Найти(ВыборкаИтоги.НомерСтроки, "НомерСтроки");
			
			Если ВыборкаИтоги.Ссылка > 1 Тогда
				КолвоДубликатов = КолвоДубликатов + 1;
				СтрокаТЗ["Количество" + Строка.РеквизитДокумента] = ВыборкаИтоги.Ссылка;
			Иначе
				Выборка = ВыборкаИтоги.Выбрать();
				Выборка.Следующий();
				Если Выборка.Ссылка = 0 Тогда
					КолвоНенайденныхЗначений = КолвоНенайденныхЗначений + 1;
				КонецЕсли;
				СтрокаТЗ[Строка.РеквизитДокумента] = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Область.Параметры.ОбъектМетаданных = Строка.Представление;
	Область.Параметры.КолвоДубликатов = КолвоДубликатов;
	Область.Параметры.КолвоНенайденныхЗначений = КолвоНенайденныхЗначений;
	Область.Параметры.КолвоНезаполненныхВФайле = ТаблицаЗначений.НайтиСтроки(Новый Структура(Строка.Колонка, "")).Количество();
	Если НЕ ЕстьОшибкиЗагрузки Тогда
		ЕстьОшибкиЗагрузки = КолвоДубликатов > 0 ИЛИ КолвоНенайденныхЗначений > 0;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуМетаданныхДляПроверкиНС()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Колонка");
	ТаблицаЗначений.Колонки.Добавить("Поле");
	ТаблицаЗначений.Колонки.Добавить("Тип");
	ТаблицаЗначений.Колонки.Добавить("ОбъектМетаданных");
	ТаблицаЗначений.Колонки.Добавить("Представление");
	ТаблицаЗначений.Колонки.Добавить("Владелец");
	ТаблицаЗначений.Колонки.Добавить("РеквизитДокумента");

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка1";
	Строка.Поле = "ID";
	Строка.Тип = "Документ";
	Строка.ОбъектМетаданных = "ra_Nesootvetstvie";
	Строка.Представление = "Документ Несоответствие";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "ID";
	
	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка4";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "Проекты";
	Строка.Представление = "Справочник Проекты";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "Proekt";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка5";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_Ploshchadki";
	Строка.Представление = "Справочник Площадки";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "Ploshchadka";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка6";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_VidyKontrolnyhOperacij";
	Строка.Представление = "Справочник Виды контрольных операций";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "VidKontrolnoyOperacii";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка17";
	Строка.Поле = "KKS";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_ZdaniyaSooruzheniya";
	Строка.Представление = "Справочник Здания, сооружения";
	Строка.Владелец = Истина;	
	Строка.РеквизитДокумента = "ZdanieSooruzhenie";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка22";
	Строка.Поле = "Код";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_KlassifikatorMTR";
	Строка.Представление = "Справочник Классификатор МТР";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "KlassifikatorMTRiO";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка32";
	Строка.Поле = "ра_GID";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "Контрагенты";
	Строка.Представление = "Справочник Контрагенты (для поля НС ""Спец. организация""";
	Строка.Владелец = Ложь;	
	Строка.РеквизитДокумента = "SpecializirovannayaOrganizaciya";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка36";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_VidyNesootvetstvij";
	Строка.Представление = "Справочник Виды несоответствий";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "VidNesootvetstviya";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка44";
	Строка.Поле = "KKS";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_TekhnologicheskieSistemy";
	Строка.Представление = "Справочник Технологические системы";
	Строка.Владелец = Истина;
	Строка.РеквизитДокумента = "NaimenovanieTekhnologicheskojSistemy";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка9";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_EhtapyVyyavleniyaNesootvetstvij";
	Строка.Представление = "Справочник Этапы выявления несоответствий";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "EhtapVyyavleniya";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка10";
	Строка.Поле = "ра_GID";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "Контрагенты";
	Строка.Представление = "Справочник Контрагенты (для поля НС ""Выявившая организация""";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "VyyavivshayaOrganizaciya";

	//Строка = ТаблицаЗначений.Добавить();
	//Строка.Колонка = "Колонка12";
	//Строка.Поле = "Наименование";
	//Строка.Тип = "Справочник";
	//Строка.ОбъектМетаданных = "СтруктураПредприятия";
	//Строка.Представление = "Справочник Структура предприятия";
	//Строка.Владелец = Ложь;
	//Строка.РеквизитДокумента = "VyyavivsheePodrazdelenie";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка13";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "Пользователи";
	Строка.Представление = "Справочник Пользователи";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "VyyavivsheeLico";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка25";
	Строка.Поле = "KKS";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_Oborudovanie";
	Строка.Представление = "Справочник Оборудование";
	Строка.Владелец = Истина;
	Строка.РеквизитДокумента = "Oborudovanie";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка30";
	Строка.Поле = "Oboznachenie";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_Dokumentaciya";
	Строка.Представление = "Справочник Документация";
	Строка.Владелец = Ложь;	
	Строка.РеквизитДокумента = "RabochayaDokumentaciya";

	//Строка = ТаблицаЗначений.Добавить();
	//Строка.Колонка = "Колонка14";
	//Строка.Поле = "ра_GID";
	//Строка.Тип = "Справочник";
	//Строка.ОбъектМетаданных = "Контрагенты";
	//Строка.Представление = "Справочник Контрагенты (для поля НС ""Допустившая организация""";
	//Строка.Владелец = Ложь;
	//Строка.РеквизитДокумента = "VyyavivshayaOrganizaciya";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка14";
	Строка.Поле = "ра_GID";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "Контрагенты";
	Строка.Представление = "Справочник Контрагенты (для поля ""Допустившая организация""";
	Строка.Владелец = Ложь;	
	Строка.РеквизитДокумента = "DopustivshayaOrganizaciya";

	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуМетаданныхДляПроверкиВСДиК()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Колонка");
	ТаблицаЗначений.Колонки.Добавить("Поле");
	ТаблицаЗначений.Колонки.Добавить("Тип");
	ТаблицаЗначений.Колонки.Добавить("ОбъектМетаданных");
	ТаблицаЗначений.Колонки.Добавить("Представление");
	ТаблицаЗначений.Колонки.Добавить("Владелец");
	ТаблицаЗначений.Колонки.Добавить("РеквизитДокумента");

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка1";
	Строка.Поле = "ID";
	Строка.Тип = "Документ";
	Строка.ОбъектМетаданных = "ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya";
	Строка.Представление = "Документ Временные сдерживающие действия и коррекция";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "ID";
	
	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка2";
	Строка.Поле = "ID";
	Строка.Тип = "Документ";
	Строка.ОбъектМетаданных = "ra_Nesootvetstvie";
	Строка.Представление = "Документ Несоответствие";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "Nesootvetstvie";
	
	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка5";
	Строка.Поле = "ра_GID";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "Контрагенты";
	Строка.Представление = "Справочник Контрагенты";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "Organizaciya";

	Строка = ТаблицаЗначений.Добавить();
	Строка.Колонка = "Колонка3";
	Строка.Поле = "Наименование";
	Строка.Тип = "Справочник";
	Строка.ОбъектМетаданных = "ra_VidyPoruchenij";
	Строка.Представление = "Справочник Виды поручений";
	Строка.Владелец = Ложь;
	Строка.РеквизитДокумента = "VidVremennyhSderzhivayushchihDejstvijIKorrekcij";

	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляДокумента(Строка)
	
	Текст = 
	"ВЫБРАТЬ
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ." + Строка.Колонка + " КАК ID
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|ГДЕ
	|	ТЗ." + Строка.Колонка + " <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	ВТ.ID КАК ID,
	|	ЕСТЬNULL(" + Строка.ОбъектМетаданных + ".Ссылка, 0) КАК Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ." + Строка.ОбъектМетаданных + " КАК " + Строка.ОбъектМетаданных + "
	|		ПО ВТ.ID = " + Строка.ОбъектМетаданных + ".ID
	|ИТОГИ
	|	МАКСИМУМ(НомерСтроки),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ID";
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляСправочника(Строка)
	
	Если Строка.Владелец Тогда
		ПолеВладелец = ", ТЗ.Колонка4 КАК Владелец";
		ПолеСвязиВладелец = " И ВТ.Владелец = " + Строка.ОбъектМетаданных + ".Владелец.Наименование";
	Иначе
		ПолеВладелец = "";
		ПолеСвязиВладелец = "";
	КонецЕсли;	

	Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Колонка1 КАК ID,
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ." + Строка.Колонка + " КАК " + Строка.Поле + ПолеВладелец + "
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|ГДЕ
	|	ТЗ." + Строка.Колонка + " <> """"
	|	И ТЗ.Колонка1 <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ID КАК ID,
	|	ВТ.НомерСтроки КАК НомерСтроки,
	//|	ВТ." + Строка.Поле + " КАК " + Строка.Поле + ",
	|	ЕСТЬNULL(" + Строка.ОбъектМетаданных + ".Ссылка, 0) КАК Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + Строка.Тип + "." + Строка.ОбъектМетаданных + " КАК " + Строка.ОбъектМетаданных + "
	|		ПО ВТ." + Строка.Поле + " = " + Строка.ОбъектМетаданных + "." + Строка.Поле + ПолеСвязиВладелец + "
	|ГДЕ НЕ " + Строка.ОбъектМетаданных + ".ПометкаУдаления
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	МАКСИМУМ(НомерСтроки)
	|ПО
	|	ID";
	
	Если Строка.ОбъектМетаданных = "ra_KlassifikatorMTR" Тогда
		Текст = СтрЗаменить(Текст, "ВТ.Код = ra_KlassifikatorMTR.Код", "(ВТ.Код = ra_KlassifikatorMTR.Код ИЛИ ВТ.Код = ""0"" + ra_KlassifikatorMTR.Код)");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОжидания()
	
	ДанныеОВыполнении = ПолучитьИзВременногоХранилища(АдресОбработчикаОжидания); 
	Если ТипЗнч(ДанныеОВыполнении) = Тип("Структура") Тогда 
		Индикатор = ДанныеОВыполнении.Инд * 100 / ДанныеОВыполнении.КоличествоОбходов;	
		Если ДанныеОВыполнении.Инд <> ДанныеОВыполнении.КоличествоОбходов Тогда
			ПодключитьОбработчикОжидания("ОбработкаОжидания", 1, Истина); 
		Иначе
			ОтключитьОбработчикОжидания("ОбработчикОжидания");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

//удалить
&НаСервере
Функция СопоставлениеЗагружаемыхДанныхНС(Таб)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Колонка1 КАК ID,
	|	Таб.Колонка2 КАК NomerVnutrennij,
	|	Таб.Колонка3 КАК Дата,
	|	Таб.Колонка4 КАК Proekt,
	|	Таб.Колонка5 КАК Ploshchadka,
	|	Таб.Колонка6 КАК VidKontrolnoyOperacii,
	|	Таб.Колонка7 КАК NOMERPERVICHNOJREGISTRACII,
	|	Таб.Колонка8 КАК DATAVYYAVLENIYA,
	|	Таб.Колонка9 КАК EHTAPVYYAVLENIYA,
	|	Таб.Колонка10 КАК VYYAVIVSHAYAORGANIZACIYA,
	|	Таб.Колонка11 КАК VYYAVIVSHAYAORGANIZACIYA1,
	|	Таб.Колонка12 КАК VYYAVIVSHEEPODRAZDELENIE,
	|	Таб.Колонка13 КАК VYYAVIVSHEELICO,
	|	Таб.Колонка14 КАК DOPUSTIVSHAYAORGANIZACIYA,
	|	Таб.Колонка15 КАК DOPUSTIVSHAYAORGANIZACIYA1,
	|	Таб.Колонка16 КАК MESTOVYYAVLENIYANS,
	|	Таб.Колонка17 КАК ZDANIESOORUZHENIE,
	|	Таб.Колонка18 КАК ZDANIESOORUZHENIE1,
	|	Таб.Колонка19 КАК PODROBNOEOPISANIE,
	|	Таб.Колонка20 КАК NARUSHENNYETREBOVANIYA,
	|	Таб.Колонка21 КАК VIDOBEKTANESOOTVETSTVIYA,
	|	Таб.Колонка22 КАК KLASSIFIKATORMTRIO,
	|	Таб.Колонка23 КАК OBOZNINAIMENOVANIEPREDMETA,
	|	Таб.Колонка24 КАК KLASSBEZOPASNOSTI,
	|	Таб.Колонка25 КАК КодKKSоборуд,
	|	Таб.Колонка26 КАК ZAVODSKOJNOMEROBORUDOVANIYA,
	|	Таб.Колонка27 КАК CHERTEZHNYJNOMER,
	|	Таб.Колонка28 КАК SERTIFIKAT,
	|	Таб.Колонка29 КАК DATAIZGOTOVLENIYAPRODUKCII,
	|	Таб.Колонка30 КАК RABOCHAYADOKUMENTACIYA,
	|	Таб.Колонка31 КАК ORG_SPEC,
	|	Таб.Колонка33 КАК SPECORGANIZACIYA,
	|	Таб.Колонка33 КАК SPECORGANIZACIYA1,
	|	Таб.Колонка34 КАК NOMERPLANAKACHESTVA,
	|	Таб.Колонка35 КАК Договор,
	|	Таб.Колонка36 КАК VIDNESOOTVETSTVIYA,
	|	Таб.Колонка37 КАК TIPNESOOTVETSTVIYA,
	|	Таб.Колонка38 КАК VLIYANIENAEHKSPLUATACIYU,
	|	Таб.Колонка39 КАК VLIYANIENAGRAFIK,
	|	Таб.Колонка40 КАК STOIMOSTUSTRANENIYA,
	|	Таб.Колонка41 КАК VLIYANIENABYUDZHET,
	|	Таб.Колонка42 КАК POVTORYAEMOST,
	|	Таб.Колонка43 КАК IZGOTOVITEL,
	|	Таб.Колонка44 КАК KKSTEKHNOLOGICHESKOJSISTEMY,
	|	Таб.Колонка45 КАК NAMETEKHNOLOGICHESKOJSISTEMY,
	|	Таб.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ra_Nesootvetstvie.Ссылка, 0) КАК НС,
	|	ЕСТЬNULL(Проекты.Ссылка, 0) КАК Проект,
	|	ЕСТЬNULL(ra_Ploshchadki.Ссылка, 0) КАК Площадка,
	|	ЕСТЬNULL(ra_VidyKontrolnyhOperacij.Ссылка, 0) КАК ВидКО,
	|	ЕСТЬNULL(ra_EhtapyVyyavleniyaNesootvetstvij.Ссылка, 0) КАК ЭтапВыявления,
	|	ЕСТЬNULL(Контрагенты.Ссылка, 0) КАК ВыявившаяОрганизация,
	|	ЕСТЬNULL(Пользователи.Ссылка, 0) КАК ВыявившееЛицо,
	|	ЕСТЬNULL(СтруктураПредприятия.Ссылка, 0) КАК ВыявившееПодразделение,
	|	ЕСТЬNULL(ra_ZdaniyaSooruzheniya.Ссылка, 0) КАК Здание,
	|	ЕСТЬNULL(ra_KlassifikatorMTR.Ссылка, 0) КАК КлассификаторМТРиО,
	|	ЕСТЬNULL(СпецОрганизация.Ссылка, 0) КАК СпецОрганизация,
	|	ЕСТЬNULL(ra_VidyNesootvetstvij.Ссылка, 0) КАК ВидНС,
	|	ЕСТЬNULL(ra_TekhnologicheskieSistemy.Ссылка, 0) КАК ТехСистема,
	|	ЕСТЬNULL(ra_Oborudovanie.Ссылка, 0) КАК Оборудование,
	|	ЕСТЬNULL(ra_Dokumentaciya.Ссылка, 0) КАК РД,
	|	ВТ.ID КАК ID,
	|	ВТ.NomerVnutrennij КАК NomerVnutrennij,
	|	ВТ.Дата КАК Дата,
	|	ВТ.NOMERPERVICHNOJREGISTRACII КАК NomerPervichnojRegistracii,
	|	ВТ.DATAVYYAVLENIYA КАК DataVyyavleniya,
	|	ВТ.DOPUSTIVSHAYAORGANIZACIYA КАК DOPUSTIVSHAYAORGANIZACIYA,
	|	ВТ.MESTOVYYAVLENIYANS КАК MestoVyyavleniyaNS,
	|	ВТ.PODROBNOEOPISANIE КАК PodrobnoeOpisanie,
	|	ВТ.NARUSHENNYETREBOVANIYA КАК NarushennyeTrebovaniya,
	|	ВТ.VIDOBEKTANESOOTVETSTVIYA КАК VidObektaNesootvetstviya,
	|	ВТ.OBOZNINAIMENOVANIEPREDMETA КАК OboznachenieINaimenovaniePredmeta,
	|	ВТ.КодKKSоборуд КАК КодKKSоборуд,
	|	ВТ.ZAVODSKOJNOMEROBORUDOVANIYA КАК ZavodskojNomerOborudovaniya,
	|	ВТ.CHERTEZHNYJNOMER КАК ChertezhnyjNomer,
	|	ВТ.SERTIFIKAT КАК Sertifikat,
	|	ВТ.DATAIZGOTOVLENIYAPRODUKCII КАК DataIzgotovleniyaProdukcii,
	|	ВТ.ORG_SPEC КАК ORG_SPEC,
	|	ВТ.NOMERPLANAKACHESTVA КАК NomerPlanaKachestva,
	|	ВТ.Договор КАК Договор,
	|	ВТ.VLIYANIENAEHKSPLUATACIYU КАК VLIYANIENAEHKSPLUATACIYU,
	|	ВТ.VLIYANIENAGRAFIK КАК VLIYANIENAGRAFIK,
	|	ВТ.STOIMOSTUSTRANENIYA КАК STOIMOSTUSTRANENIYA,
	|	ВТ.VLIYANIENABYUDZHET КАК VLIYANIENABYUDZHET,
	|	ВТ.POVTORYAEMOST КАК POVTORYAEMOST,
	|	ВТ.IZGOTOVITEL КАК Izgotovitel,
	|	ВТ.NAMETEKHNOLOGICHESKOJSISTEMY КАК NAMETEKHNOLOGICHESKOJSISTEMY,
	|	ВТ.KLASSBEZOPASNOSTI КАК KLASSBEZOPASNOSTI,
	|	ВТ.TIPNESOOTVETSTVIYA КАК TIPNESOOTVETSTVIYA,
	|	ВТ.Proekt КАК Proekt,
	|	ВТ.Ploshchadka КАК Ploshchadka,
	|	ВТ.VidKontrolnoyOperacii КАК VidKontrolnoyOperacii,
	|	ВТ.EHTAPVYYAVLENIYA КАК EHTAPVYYAVLENIYA,
	|	ВТ.VYYAVIVSHAYAORGANIZACIYA КАК VYYAVIVSHAYAORGANIZACIYA,
	|	ВТ.VYYAVIVSHEEPODRAZDELENIE КАК VYYAVIVSHEEPODRAZDELENIE,
	|	ВТ.VYYAVIVSHEELICO КАК VYYAVIVSHEELICO,
	|	ВТ.ZDANIESOORUZHENIE КАК ZDANIESOORUZHENIE,
	|	ВТ.KLASSIFIKATORMTRIO КАК KLASSIFIKATORMTRIO,
	|	ВТ.OBOZNINAIMENOVANIEPREDMETA КАК OBOZNINAIMENOVANIEPREDMETA,
	|	ВТ.RABOCHAYADOKUMENTACIYA КАК RABOCHAYADOKUMENTACIYA,
	|	ВТ.SPECORGANIZACIYA КАК SPECORGANIZACIYA,
	|	ВТ.VIDNESOOTVETSTVIYA КАК VIDNESOOTVETSTVIYA,
	|	ВТ.KKSTEKHNOLOGICHESKOJSISTEMY КАК KKSTEKHNOLOGICHESKOJSISTEMY,
	|	ВТ.ZDANIESOORUZHENIE1 КАК ZDANIESOORUZHENIE1,
	|	ВТ.SPECORGANIZACIYA1 КАК SPECORGANIZACIYA1,
	|	ВТ.VYYAVIVSHAYAORGANIZACIYA1 КАК VYYAVIVSHAYAORGANIZACIYA1,
	|	ВТ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ВТ.Proekt = Проекты.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_Ploshchadki КАК ra_Ploshchadki
	|		ПО ВТ.Ploshchadka = ra_Ploshchadki.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_VidyKontrolnyhOperacij КАК ra_VidyKontrolnyhOperacij
	|		ПО ВТ.VidKontrolnoyOperacii = ra_VidyKontrolnyhOperacij.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_ZdaniyaSooruzheniya КАК ra_ZdaniyaSooruzheniya
	|		ПО ВТ.ZDANIESOORUZHENIE = ra_ZdaniyaSooruzheniya.ID
	|			И ВТ.Proekt = ra_ZdaniyaSooruzheniya.Владелец.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_KlassifikatorMTR КАК ra_KlassifikatorMTR
	|		ПО ВТ.KLASSIFIKATORMTRIO = ra_KlassifikatorMTR.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпецОрганизация
	|		ПО ВТ.SPECORGANIZACIYA = СпецОрганизация.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_VidyNesootvetstvij КАК ra_VidyNesootvetstvij
	|		ПО ВТ.VIDNESOOTVETSTVIYA = ra_VidyNesootvetstvij.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_TekhnologicheskieSistemy КАК ra_TekhnologicheskieSistemy
	|		ПО ВТ.KKSTEKHNOLOGICHESKOJSISTEMY = ra_TekhnologicheskieSistemy.ID
	|			И ВТ.Proekt = ra_TekhnologicheskieSistemy.Владелец.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_EhtapyVyyavleniyaNesootvetstvij КАК ra_EhtapyVyyavleniyaNesootvetstvij
	|		ПО ВТ.EHTAPVYYAVLENIYA = ra_EhtapyVyyavleniyaNesootvetstvij.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ.VYYAVIVSHAYAORGANIZACIYA = Контрагенты.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ВТ.VYYAVIVSHEEPODRAZDELENIE = СтруктураПредприятия.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ВТ.VYYAVIVSHEELICO = Пользователи.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
	|		ПО ВТ.ID = ra_Nesootvetstvie.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_Oborudovanie КАК ra_Oborudovanie
	|		ПО ВТ.КодKKSоборуд = ra_Oborudovanie.ID
	|			И ВТ.Proekt = ra_Oborudovanie.Владелец.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_Dokumentaciya КАК ra_Dokumentaciya
	|		ПО ВТ.RABOCHAYADOKUMENTACIYA = ra_Dokumentaciya.Наименование
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НС),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Проект),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Площадка),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидКО),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапВыявления),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыявившаяОрганизация),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыявившееЛицо),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыявившееПодразделение),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Здание),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КлассификаторМТРиО),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецОрганизация),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидНС),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТехСистема),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Оборудование),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РД),
	|	МАКСИМУМ(КодKKSоборуд),
	|	МАКСИМУМ(Proekt),
	|	МАКСИМУМ(Ploshchadka),
	|	МАКСИМУМ(VidKontrolnoyOperacii),
	|	МАКСИМУМ(EHTAPVYYAVLENIYA),
	|	МАКСИМУМ(VYYAVIVSHAYAORGANIZACIYA),
	|	МАКСИМУМ(VYYAVIVSHEEPODRAZDELENIE),
	|	МАКСИМУМ(VYYAVIVSHEELICO),
	|	МАКСИМУМ(ZDANIESOORUZHENIE),
	|	МАКСИМУМ(KLASSIFIKATORMTRIO),
	|	МАКСИМУМ(RABOCHAYADOKUMENTACIYA),
	|	МАКСИМУМ(SPECORGANIZACIYA),
	|	МАКСИМУМ(VIDNESOOTVETSTVIYA),
	|	МАКСИМУМ(KKSTEKHNOLOGICHESKOJSISTEMY),
	|	МАКСИМУМ(НомерСтроки)
	|ПО
	|	ID";
	
	
	Запрос.УстановитьПараметр("Таб", Таб);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Функция СопоставлениеЗагружаемыхДанныхВСДК(Таб)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Колонка1 КАК ID_VSDK,
	|	Таб.Колонка2 КАК ID_TN,
	|	Таб.Колонка3 КАК ВидВСДиК,
	|	Таб.Колонка4 КАК Описание,
	|	Таб.Колонка5 КАК GUID_ОргИсполн,
	|	Таб.Колонка6 КАК ОргИсполнитель,
	|	Таб.Колонка7 КАК ФактСрок,
	|	Таб.Колонка8 КАК Отчет,
	|	Таб.Колонка9 КАК Статус,
	|	Таб.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya.Ссылка КАК Док,
	|	ВТ.ID_VSDK КАК ID,
	|	ra_Nesootvetstvie.Ссылка КАК Nesootvetstvie,
	|	ra_VidyPoruchenij.Ссылка КАК VidVremennyhSderzhivayushchihDejstvijIKorrekcij,
	|	ВТ.Описание КАК Opisanie,
	|	Контрагенты.Ссылка КАК Organizaciya,
	|	ВТ.ФактСрок КАК FakticheskijSrok,
	|	ВТ.Отчет КАК OtchetOVypolnenii,
	|	ВТ.Статус КАК Статус,
	|	ВТ.ВидВСДиК КАК ВидВСДиК,
	|	ВТ.ID_TN КАК ID_TN,
	|	ВТ.ОргИсполнитель КАК ОргИсполнитель,
	|	ВТ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya
	|		ПО ВТ.ID_VSDK = ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
	|		ПО ВТ.ID_TN = ra_Nesootvetstvie.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_VidyPoruchenij КАК ra_VidyPoruchenij
	|		ПО ВТ.ВидВСДиК = ra_VidyPoruchenij.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ.ОргИсполнитель = Контрагенты.Наименование
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Док),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Nesootvetstvie),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ VidVremennyhSderzhivayushchihDejstvijIKorrekcij),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Organizaciya),
	|	МАКСИМУМ(ВидВСДиК),
	|	МАКСИМУМ(ID_TN),
	|	МАКСИМУМ(ОргИсполнитель),
	|	МАКСИМУМ(НомерСтроки)
	|ПО
	|	ID";
	
	Запрос.УстановитьПараметр("Таб", Таб);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Процедура КомандаУдалитьВСДиКНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Док.Удалить();	
	КонецЦикла;

КонецПроцедуры


#КонецОбласти


