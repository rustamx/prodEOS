
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
	
	// Заполнение виджетов при открытии формы
	ПрочитатьНастройкиВиджетов = Истина;
	ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов);
	
	ЦветНепринятаяВерсия = ЦветаСтиля.НепринятаяВерсия;
	
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшКартинокФормыТекущиеДела(ЭтаФорма);
	
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшЗначенийФормыТекущиеДела(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьАвтообновлениеФормы();
	
	ПодключитьОбработчикОжидания("ОбновитьВремяОбновленияФормы", 1);
	
	ПодключитьОбработчикОжидания("ОтобразитьИконкуНастройкиHTML", 0.1, Истина);
	СкрытьИконкуНастройкиHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекущиеДелаДокументооборотКлиент.ОбработкаОповещенияФормыТекущиеДела(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастроитьАвтообновлениеНажатие(Элемент)
	
	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОтобразитьИконкуНастройкиHTML();
	СкрытьИконкуНастройкиHTML();
	
	ТекущиеДелаДокументооборотКлиент.HTMLПриНажатии(
		Этаформа, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ТекущиеДелаДокументооборотКлиент.ДиаграммаОбработкаРасшифровки(
		ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	ИндексТекущегоВиджета = ИндексТекущегоВиджета();
	
	Если Не ЗначениеЗаполнено(ИндексТекущегоВиджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = ЭтаФорма["Виджет" + ИндексТекущегоВиджета];
	
	ТекущиеДелаДокументооборотКлиент.ОбработатьНажатиеНаОбластьМеню(
		ТекущийВиджет, ЭтаФорма, Элемент, ИндексТекущегоВиджета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ПодключитьОбработчикОжидания("ЗаполнитьВиджетыОтложено", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Запускает заполнение виджетов. Используется для запуска по обработчику ожидания.
//
&НаКлиенте
Процедура ЗаполнитьВиджетыОтложено()
	
	ЗаполнитьВиджеты();
	
КонецПроцедуры

// Заполняет виджеты по настройкам пользователя.
//
// Параметры:
//   ПрочитатьНастройкиВиджетов - Булево - признак необходимости чтения настроек, перед заполнением виджетов.
//   Виджеты - Массив - массив виджетов, которые следует заполнить, если ничего не передается, то заполняются
//                      все виджеты.
//
&НаСервере
Процедура ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов = Ложь, Виджеты = Неопределено) Экспорт
	
	Если ПрочитатьНастройкиВиджетов = Истина Тогда
		// Загрузка настроек формы Текущие дела.
		Настройки = РегистрыСведений.НастройкиТекущихДел.ПолучитьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	
	ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты);
	
	ВремяОбновленияФормы = ТекущаяДатаСеанса();
	ОтобразитьВремяОбновленияФормы(ЭтаФорма);
	
	ТекущийВиджетДиаграмма = "";
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета() Экспорт
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,3);
	
	Если Сред(ИндексТекущегоВиджета, 2, 1) <> "_" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

// Заполняет время последнего обновления формы.
// Процедура используется для запуска по обработчику ожидания.
//
&НаКлиенте
Процедура ОбновитьВремяОбновленияФормы()
	
	ОтобразитьВремяОбновленияФормы(ЭтаФорма);
	
КонецПроцедуры

// Заполняет время последнего обновления формы.
//
// Параметры:
//   Форма - УправляемаяФорма
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьВремяОбновленияФормы(Форма)
	
	#Если Сервер Тогда
		КоличествоСекунд = ТекущаяДатаСеанса() - Форма.ВремяОбновленияФормы;
	#Иначе
		КоличествоСекунд = ТекущаяДата() - Форма.ВремяОбновленияФормы;
	#КонецЕсли
	
	КоличествоЧасов  = Цел(КоличествоСекунд / 3600);
	КоличествоМинут  = Цел((КоличествоСекунд - КоличествоЧасов * 3600) / 60);
			
	Если КоличествоЧасов = 0 И КоличествоМинут = 0 Тогда
		ВремяПрописью = НСтр("ru = 'меньше минуты'; en = 'less than a minute'");
	Иначе	
		ПредставлениеМинут	= НСтр("ru = 'минуту'; en = 'minute'") 
			+ "," + НСтр("ru = 'минуты'; en = 'minutes'")  
			+ "," + НСтр("ru = 'минут'; en = 'minutes'");
			
		ПредставлениеЧасов	= НСтр("ru = 'час'; en = 'hour'")
			+ "," + НСтр("ru = 'часа'; en = 'hours'")
			+ "," + НСтр("ru = 'часов'; en = 'hours'");
			
		МинутыПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоМинут, 
			ПредставлениеМинут);
			
		ЧасыПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоЧасов, 
			ПредставлениеЧасов);
				
		Если КоличествоЧасов > 0 Тогда
			ВремяПрописью = ЧасыПрописью + " " + МинутыПрописью;
		Иначе
			ВремяПрописью = МинутыПрописью;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеВремениОбновленияФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновлено %1 назад'; en = 'Refreshed %1 ago'"),ВремяПрописью);
	
	Форма.ВремяОбновленияФормыСтрокой = ОписаниеВремениОбновленияФормы;
	
КонецПроцедуры

// Отображать иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура ОтобразитьИконкуНастройкиHTML()
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(НовыйТекущийВиджет) Тогда
		ИмяРеквизитаHTML = "HTML" + НовыйТекущийВиджет;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:hidden;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:hidden;}",
				".visibility_img{visibility:visible;}");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура СкрытьИконкуНастройкиHTML()
	
	ПодключитьОбработчикОжидания("СкрытьИконкуНастройкиHTML", 0.1, Истина);
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ТекущийВиджетHTML = НовыйТекущийВиджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВиджетHTML) Тогда
		ИмяРеквизитаHTML = "HTML" + ТекущийВиджетHTML;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:visible;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:visible;}",
				".visibility_img{visibility:hidden;}");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВиджетHTML = НовыйТекущийВиджет;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Автообновление

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли

	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или Не НастройкиАвтообновления.Автообновление Тогда
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ЗаполнитьВиджеты();
		ОтобразитьИконкуНастройкиHTML();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти




