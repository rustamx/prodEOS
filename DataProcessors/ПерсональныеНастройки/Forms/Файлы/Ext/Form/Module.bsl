#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторКлиента = "";
	Если Параметры.Свойство("ИдентификаторКлиента") Тогда 
		ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
	КонецЕсли;
	
	// Работа с файлами
	СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиОткрытияФайлов",
			"СпрашиватьРежимРедактированияПриОткрытииФайла");
	
	Если СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка = Истина;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиОткрытияФайлов",
			"СпрашиватьРежимРедактированияПриОткрытииФайла",
			СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка);
		
	КонецЕсли;
	СпрашиватьРежимРедактированияПриОткрытииФайла = СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка;
	
	ДействиеПоДвойномуЩелчкуМышиНастройка =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиОткрытияФайлов",
			"ДействиеПоДвойномуЩелчкуМыши");
	
	Если ДействиеПоДвойномуЩелчкуМышиНастройка = Неопределено Тогда
		ДействиеПоДвойномуЩелчкуМышиНастройка = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиОткрытияФайлов",
			"ДействиеПоДвойномуЩелчкуМыши",
			ДействиеПоДвойномуЩелчкуМышиНастройка);
		
	КонецЕсли;
	ДействиеПоДвойномуЩелчкуМыши = ДействиеПоДвойномуЩелчкуМышиНастройка;
	
	СпособСравненияВерсийФайлов =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиСравненияФайлов",
			"СпособСравненияВерсийФайлов");
	
	ПоказыватьПодсказкиПриРедактированииФайлов =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиПрограммы",
			"ПоказыватьПодсказкиПриРедактированииФайлов");
	
	ПутьКПрограммеКонвертацииPDF = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ПутьКПрограммеКонвертации", ИдентификаторКлиента);	
	
	Если ПустаяСтрока(ПутьКПрограммеКонвертацииPDF) Тогда
		ПутьКПрограммеКонвертацииPDF = "magick.exe"; // ImageMagick
	КонецЕсли;
	
	ИспользоватьImageMagickДляПреобразованияВPDF =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиСканирования/ИспользоватьImageMagickДляПреобразованияВPDF",
			ИдентификаторКлиента);
	
	Если ИспользоватьImageMagickДляПреобразованияВPDF = Неопределено Тогда
		ИспользоватьImageMagickДляПреобразованияВPDF = Ложь;
	КонецЕсли;
	
	ИспользоватьImageMagickДляРаспознаванияPDF =
		РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Элементы.ПутьКПрограммеКонвертацииPDF.Видимость =
		ИспользоватьImageMagickДляРаспознаванияPDF Или ИспользоватьImageMagickДляПреобразованияВPDF;
	
	ПоказыватьКолонкуРазмерНастройка =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиПрограммы",
			"ПоказыватьКолонкуРазмер");
	
	Если ПоказыватьКолонкуРазмерНастройка = Неопределено Тогда
		ПоказыватьКолонкуРазмерНастройка = Ложь;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиПрограммы",
			"ПоказыватьКолонкуРазмер",
			ПоказыватьКолонкуРазмерНастройка);
		
	КонецЕсли;
	ПоказыватьКолонкуРазмер = ПоказыватьКолонкуРазмерНастройка;
	
	Если Параметры.Свойство("ЭтоВебКлиент") Тогда 
		
		ЭтоВебКлиент = Параметры.ЭтоВебКлиент;
		
		Если Не Параметры.ЭтоВебКлиент Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
		Иначе
			
			Элементы.НастройкаСканирования.Видимость = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	// Настройки программы
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка = Истина;
	КонецЕсли;
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка;
	
	// Заполняем настройки открытия файлов
	СтрокаНастройки = НастройкиОткрытияФайлов.Добавить();
	СтрокаНастройки.ТипФайла = Перечисления.ТипыФайловДляВстроенногоРедактора.ТекстовыеФайлы;
	
	СтрокаНастройки.Расширение =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОткрытияФайлов\ТекстовыеФайлы",
			"Расширение",
			"TXT XML INI");
	
	СтрокаНастройки.СпособОткрытия =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОткрытияФайлов\ТекстовыеФайлы",
			"СпособОткрытия",
			Перечисления.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе);
	
	ПоказыватьИнформациюЧтоФайлНеБылИзменен =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы", 
			"ПоказыватьИнформациюЧтоФайлНеБылИзменен",
			Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоВебКлиент Тогда
		Если Не ФайловыеФункцииКлиентПовтИсп.КлиентПоддерживаетСинхронныеВызовы() Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьЗакрытие", 
		ЭтотОбъект);

	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'"),
		РежимДиалогаВопрос.ДаНетОтмена,,
		КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимостьОбновленияИнтерфейса Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновитьИнтерфейсКлиент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьНастройки();
	НеобходимостьОбновленияИнтерфейса = Истина;
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	
	ЭтоВебКлиент = Ложь;
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ПараметрыОткрытия = Новый Структура("ЭтоВебКлиент", ЭтоВебКлиент);
	ОткрытьФорму("ОбщаяФорма.НастройкаЛокальногоКэшаФайлов", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	
	НачатьУстановкуРасширенияРаботыСФайлами();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ТекстСообщения = НСтр("ru = 'Сканирование не поддерживается в клиенте под управлением ОС Linux.'; en = 'Scanning is not supported on the clients running the Linux OS.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура("КомпонентаУстановлена, ИдентификаторКлиента", 
		КомпонентаУстановлена, ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРаспознавания(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.ПерсональныеНастройкиРаспознавания",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьЗакрытие(Ответ, Параметры) Экспорт 

	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
		НеобходимостьОбновленияИнтерфейса = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	МассивСтруктур = Новый Массив;
	
	Если Параметры.Свойство("ЭтоВебКлиент") Тогда 
		Если Не Параметры.ЭтоВебКлиент Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
			Элементы.УстановитьРасширениеРаботыСКриптографиейНаКлиенте.Видимость = Ложь;
		Иначе
			Элементы.НастройкаСканирования.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// НастройкиПрограммы
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиСканирования/ПутьКПрограммеКонвертации", ИдентификаторКлиента, ПутьКПрограммеКонвертацииPDF);
	
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьИнформациюЧтоФайлНеБылИзменен", ПоказыватьИнформациюЧтоФайлНеБылИзменен);
	
	// НастройкиОткрытияФайлов
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	
	// НастройкиСравненияФайлов
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов);
	
	// Настройки открытия файлов
	Если НастройкиОткрытияФайлов.Количество() = 1 Тогда 
		ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов\ТекстовыеФайлы", "Расширение", 
			НастройкиОткрытияФайлов[0].Расширение);
		ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов\ТекстовыеФайлы", "СпособОткрытия", 
			НастройкиОткрытияФайлов[0].СпособОткрытия);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтруктуруНастройки(МассивСтруктур, Объект, Настройка = Неопределено, Значение)
	
	МассивСтруктур.Добавить(Новый Структура ("Объект, Настройка, Значение", Объект, Настройка, Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПрограммеКонвертацииPDFНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКПрограммеКонвертацииPDF;
	Фильтр = НСтр("ru = 'Исполняемые файлы(*.exe)|*.exe'; en = 'Executable files (*.exe) | *.exe'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите исполняемый файл для преобразования PDF'; en = 'Select the executable file for PDF conversion'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКПрограммеКонвертацииPDF = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсКлиент()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Пользователи", ПользователиКлиентСервер.ТекущийПользователь());
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(УстанавливаемыеПараметры);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти
