#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновитьПоля();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНовоеПоручение(Команда)
	
	ПараметрыФормы = Новый Структура("ТекущаяДата", ТекущаяДата());
	ОткрытьФорму("Обработка.РабочийСтолРуководителя.Форма.ФормаНовогоИсполнения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьПоля();
КонецПроцедуры

&НаКлиенте
Процедура КомандаРассмотрение(Команда)
	ОткрытьРассмотрение();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСогласование(Команда)
	ОткрытьСогласование();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУтверждение(Команда)
	ОткрытьУтверждение();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВсеЗадачи(Команда)
	ВсеЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗадачиОтМеня(Команда)
	ЗадачиОтМеня();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗадачиОтМеняПросроченные(Команда)
	ЗадачиОтМеняПросроченные();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПоля()
	
	ЧислоЗадачВсего = ПолучитьЧислоЗадачВсего();
	ЧислоЗадачРассмотрение = ПолучитьЧислоЗадачРассмотрения();
	ЧислоЗадачСогласование = ПолучитьЧислоЗадачСогласование();
	ЧислоЗадачУтверждение = ПолучитьЧислоЗадачУтверждение();

	ЧислоЗадачОтМеня = ПолучитьЧислоМоиПроцессы();
	ЧислоЗадачОтМеняПросроченные = ПолучитьЧислоМоиПроцессыПросроченные();
	
	Элементы.ДекорацияВсеЗадачи.Гиперссылка = (ЧислоЗадачВсего <> 0);
	Элементы.ДекорацияВсеЗадачи.Заголовок = НСтр("ru='Всего задач мне'; en = 'Total tasks to me'") + " (" + Формат(ЧислоЗадачВсего, "ЧН=0") + ")";
	
	Элементы.ДекорацияНаРассмотрение.Гиперссылка = (ЧислоЗадачРассмотрение <> 0);
	Элементы.ДекорацияНаРассмотрение.Заголовок = НСтр("ru='На рассмотрение'; en = 'For review'") + " (" + Формат(ЧислоЗадачРассмотрение, "ЧН=0") + ")";
	
	Элементы.ДекорацияСогласование.Гиперссылка = (ЧислоЗадачСогласование <> 0);
	Элементы.ДекорацияСогласование.Заголовок = НСтр("ru='На согласование'; en = 'For approval'") + " (" + Формат(ЧислоЗадачСогласование, "ЧН=0") + ")";
	
	Элементы.ДекорацияУтверждение.Гиперссылка = (ЧислоЗадачУтверждение <> 0);
	Элементы.ДекорацияУтверждение.Заголовок = НСтр("ru='На утверждение'; en = 'For confirmation'") + " (" + Формат(ЧислоЗадачУтверждение, "ЧН=0") + ")";

	Элементы.ДекорацияЗадачиОтМеня.Гиперссылка = (ЧислоЗадачОтМеня <> 0);
	Элементы.ДекорацияЗадачиОтМеня.Заголовок = НСтр("ru='Мои процессы'; en = 'My processes'") + " (" + Формат(ЧислоЗадачОтМеня, "ЧН=0") + ")";
	
	Элементы.ДекорацияЗадачиОтМеняПросроченные.Гиперссылка = (ЧислоЗадачОтМеняПросроченные <> 0);
	Элементы.ДекорацияЗадачиОтМеняПросроченные.Заголовок = НСтр("ru='Просроченные'; en = 'Overdue'") + " (" + Формат(ЧислоЗадачОтМеняПросроченные, "ЧН=0") + ")";
	
	УстановитьКартинкуКоманды("ЗадачВсего", ЧислоЗадачВсего);
	УстановитьКартинкуКоманды("ЗадачОтМеняВсего", ЧислоЗадачОтМеня);
	УстановитьКартинкуКоманды("ЗадачВсегоПросроченные", ЧислоЗадачОтМеняПросроченные);
	УстановитьКартинкуКоманды("Рассмотрение", ЧислоЗадачРассмотрение);
	УстановитьКартинкуКоманды("Согласование", ЧислоЗадачСогласование);
	УстановитьКартинкуКоманды("Утверждение", ЧислоЗадачУтверждение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКоманды(ТипКартинки, Число)
	
	Картинка = ПолучитьКартинкуКоманды(ТипКартинки, Число);
	
	Если ТипКартинки = "ЗадачВсего" Тогда
		Элементы.КомандаВсеЗадачи.Картинка = Картинка;
	ИначеЕсли ТипКартинки = "ЗадачОтМеняВсего" Тогда
		Элементы.КомандаЗадачиОтМеня.Картинка = Картинка;
	ИначеЕсли ТипКартинки = "ЗадачВсегоПросроченные" Тогда
		Элементы.КомандаЗадачиОтМеняПросроченные.Картинка = Картинка;		
	ИначеЕсли ТипКартинки = "Рассмотрение" Тогда
		Элементы.КомандаРассмотрение.Картинка = Картинка;
	ИначеЕсли ТипКартинки = "Согласование" Тогда	
		Элементы.КомандаСогласование.Картинка = Картинка;					
	ИначеЕсли ТипКартинки = "Утверждение" Тогда
		Элементы.КомандаУтверждение.Картинка = Картинка;
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТипКоличества(Число)
	
	Если Число = 0 Тогда 
		Возврат "Нет";
	ИначеЕсли Число <= 5 Тогда 
		Возврат "Мало";	
	Иначе
		Возврат "Много";	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКартинкуКоманды(ТипКартинки, Число)
	
	ТипКоличества = ПолучитьТипКоличества(Число);
	
	Если ТипКартинки = "ЗадачВсего" Тогда
		
		Если ТипКоличества = "Нет" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиНетЗадач;
		ИначеЕсли ТипКоличества = "Мало" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиМалоЗадач;
		ИначеЕсли ТипКоличества = "Много" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиМногоЗадач;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипКартинки = "ЗадачОтМеняВсего" Тогда
		
		Если ТипКоличества = "Нет" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиОтМеняНет;
		ИначеЕсли ТипКоличества = "Мало" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиОтМеняМало;
		ИначеЕсли ТипКоличества = "Много" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиОтМеняМного;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипКартинки = "ЗадачВсегоПросроченные" Тогда
		
		Если ТипКоличества = "Нет" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиПросроченныеНетЗадач;
		ИначеЕсли ТипКоличества = "Мало" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиПросроченныеМалоЗадач;
		ИначеЕсли ТипКоличества = "Много" Тогда
			Возврат БиблиотекаКартинок.ВсеЗадачиПросроченныеМногоЗадач;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипКартинки = "Рассмотрение" Тогда
		
		Если ТипКоличества = "Нет" Тогда
			Возврат БиблиотекаКартинок.РассмотрениеНетЗадач;
		ИначеЕсли ТипКоличества = "Мало" Тогда
			Возврат БиблиотекаКартинок.РассмотрениеМалоЗадач;
		ИначеЕсли ТипКоличества = "Много" Тогда
			Возврат БиблиотекаКартинок.РассмотрениеМногоЗадач;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипКартинки = "Согласование" Тогда
		
		Если ТипКоличества = "Нет" Тогда
			Возврат БиблиотекаКартинок.СогласованиеНетЗадач;
		ИначеЕсли ТипКоличества = "Мало" Тогда
			Возврат БиблиотекаКартинок.СогласованиеМалоЗадач;
		ИначеЕсли ТипКоличества = "Много" Тогда
			Возврат БиблиотекаКартинок.СогласованиеМногоЗадач;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипКартинки = "Утверждение" Тогда
		
		Если ТипКоличества = "Нет" Тогда
			Возврат БиблиотекаКартинок.УтверждениеНетЗадач;
		ИначеЕсли ТипКоличества = "Мало" Тогда
			Возврат БиблиотекаКартинок.УтверждениеМалоЗадач;
		ИначеЕсли ТипКоличества = "Много" Тогда
			Возврат БиблиотекаКартинок.УтверждениеМногоЗадач;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат БиблиотекаКартинок.РабочийСтолНетЗадач;
	
КонецФункции

&НаСервере
Функция ПолучитьЧислоЗадачБизнесПроцесса(БизнесПроцесс, ТочкаМаршрута)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК МоиЗадачи,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК МоиЗадачи_НеПринятые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|						И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК МоиЗадачи_Просроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ТИПЗНАЧЕНИЯ(ЗадачаИсполнителя.БизнесПроцесс) = ТИПЗНАЧЕНИЯ(&БизнесПроцесс)
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
		
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.МоиЗадачи;

КонецФункции 

&НаСервере
Функция ПолучитьЧислоЗадачСогласование()
	
	Возврат ПолучитьЧислоЗадачБизнесПроцесса(БизнесПроцессы.Согласование.ПустаяСсылка(), 
		БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);

КонецФункции 

&НаСервере
Функция ПолучитьЧислоЗадачРассмотрения()

	Возврат ПолучитьЧислоЗадачБизнесПроцесса(БизнесПроцессы.Рассмотрение.ПустаяСсылка(), 
		БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);

КонецФункции 

&НаСервере
Функция ПолучитьЧислоЗадачУтверждение()

	Возврат ПолучитьЧислоЗадачБизнесПроцесса(БизнесПроцессы.Утверждение.ПустаяСсылка(), 
		БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить);

КонецФункции 

&НаСервере
Функция ПолучитьЧислоЗадачВсего()

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК МоиЗадачи,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК МоиЗадачи_НеПринятые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|						И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК МоиЗадачи_Просроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	//Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	//Запрос.УстановитьПараметр("СостояниеБизнесПроцесса", Перечисления.СостоянияБизнесПроцессов.Активен);
	//Запрос.УстановитьПараметр("Выполнена", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.МоиЗадачи;

КонецФункции 

&НаСервере
Функция ПолучитьЧислоМоиПроцессы()

	Запрос = Новый Запрос;
	
	Запрос.Текст 
		= "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		  |	КОЛИЧЕСТВО(ДанныеБизнесПроцессов.БизнесПроцесс) КАК ЧислоПроцессов
		  |ИЗ
		  |	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		  |		ПО ДанныеБизнесПроцессов.БизнесПроцесс = КешИнформацииОбОбъектах.Объект
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		  |		ПО ДанныеБизнесПроцессов.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		  |		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ПроцессыДляЗапуска.БизнесПроцесс
		  |ГДЕ
		  |	ДанныеБизнесПроцессов.Автор = &Автор
		  |	И ДанныеБизнесПроцессов.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		  |	И НЕ ДанныеБизнесПроцессов.БизнесПроцесс ССЫЛКА БизнесПроцесс.РешениеВопросовВыполненияЗадач
		  |	И НЕ ДанныеБизнесПроцессов.БизнесПроцесс ССЫЛКА БизнесПроцесс.Ознакомление
		  |	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
		  |	И ДанныеБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		  |	И ДанныеБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		  |	И ЕСТЬNULL(ПроцессыДляЗапуска.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ПустаяССылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		  |	И ДанныеБизнесПроцессов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Автор", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЧислоПроцессов;

КонецФункции 

&НаСервере
Функция ПолучитьЧислоМоиПроцессыПросроченные()

	Запрос = Новый Запрос;
	
	Запрос.Текст 
		= "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		  |	КОЛИЧЕСТВО(ДанныеБизнесПроцессов.БизнесПроцесс) КАК ЧислоПроцессов
		  |ИЗ
		  |	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		  |		ПО ДанныеБизнесПроцессов.БизнесПроцесс = КешИнформацииОбОбъектах.Объект
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		  |		ПО ДанныеБизнесПроцессов.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		  |		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ПроцессыДляЗапуска.БизнесПроцесс
		  |ГДЕ
		  |	ДанныеБизнесПроцессов.Автор = &Автор
		  |	И ДанныеБизнесПроцессов.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		  |	И НЕ ДанныеБизнесПроцессов.БизнесПроцесс ССЫЛКА БизнесПроцесс.РешениеВопросовВыполненияЗадач
		  |	И НЕ ДанныеБизнесПроцессов.БизнесПроцесс ССЫЛКА БизнесПроцесс.Ознакомление
		  |	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
		  |	И ДанныеБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		  |	И ДанныеБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		  |	И ЕСТЬNULL(ПроцессыДляЗапуска.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ПустаяССылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		  |	И ДанныеБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
		  |	И ДанныеБизнесПроцессов.СрокИсполнения < &ТекущаяДата
		  |	И ДанныеБизнесПроцессов.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("Автор", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЧислоПроцессов;

КонецФункции 

&НаСервере
Функция ПолучитьСписокИсполнителейЗадачОтМеняПросроченные()

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ТОГДА ЗадачаИсполнителя.Исполнитель
	               |		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
	               |	КОНЕЦ КАК ИсполнительСтрока
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.ПометкаУдаления = &ПометкаУдаления
	               |	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = &СостояниеБизнесПроцесса
	               |	И ЗадачаИсполнителя.Автор = &Автор
	               |	И ЗадачаИсполнителя.СрокИсполнения <= &СрокИсполнения
	               |	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ЗадачаИсполнителя.Выполнена = &Выполнена";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("СостояниеБизнесПроцесса", Перечисления.СостоянияБизнесПроцессов.Активен);
	Запрос.УстановитьПараметр("Автор", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("СрокИсполнения", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Выполнена", Ложь);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Сортировать("ИсполнительСтрока");
	
	СписокИсполнителей = "";
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ПустаяСтрока(СписокИсполнителей) Тогда
			СписокИсполнителей = СписокИсполнителей + ", ";
		КонецЕсли;	
		
		СписокИсполнителей = СписокИсполнителей + Строка.ИсполнительСтрока;
		
	КонецЦикла;	
	
	Возврат СписокИсполнителей;

КонецФункции 

&НаКлиенте
Процедура ОткрытьРассмотрение()
	
	Если ЧислоЗадачРассмотрение = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ИмяБизнесПроцесса, ОткрытаИзФормыРабочийСтолРуководителя", "Рассмотрение", Истина);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне", ПараметрыФормы,,
		ПараметрыФормы.ИмяБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСогласование()
	
	Если ЧислоЗадачСогласование = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ИмяБизнесПроцесса, ОткрытаИзФормыРабочийСтолРуководителя", "Согласование", Истина);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне", ПараметрыФормы,,
		ПараметрыФормы.ИмяБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУтверждение()
	
	Если ЧислоЗадачУтверждение = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ИмяБизнесПроцесса, ОткрытаИзФормыРабочийСтолРуководителя", "Утверждение", Истина);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне", ПараметрыФормы,,
		ПараметрыФормы.ИмяБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗадачи()
	
	Если ЧислоЗадачВсего = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ИмяБизнесПроцесса, ОткрытаИзФормыРабочийСтолРуководителя", Неопределено, Истина);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеня()
	
	Если ЧислоЗадачОтМеня = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ТолькоПросроченные, ОткрытаИзФормыРабочийСтолРуководителя", 
		Ложь, Истина);
	ОткрытьФорму("ОбщаяФорма.МоиПроцессы", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняПросроченные()
	
	Если ЧислоЗадачОтМеняПросроченные = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ТолькоПросроченные, ОткрытаИзФормыРабочийСтолРуководителя", 
		Истина, Истина);
	ОткрытьФорму("ОбщаяФорма.МоиПроцессы", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФормаРаботыСЗаявкойЗакрыта" Тогда
		ОбновитьПоля();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеЗадачиНажатие(Элемент)
	ВсеЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаРассмотрениеНажатие(Элемент)
	ОткрытьРассмотрение();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСогласованиеНажатие(Элемент)
	ОткрытьСогласование();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУтверждениеНажатие(Элемент)
	ОткрытьУтверждение();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачиОтМеняНажатие(Элемент)
	ЗадачиОтМеня();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачиОтМеняПросроченныеНажатие(Элемент)
	ЗадачиОтМеняПросроченные();
КонецПроцедуры


#КонецОбласти
