
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает отсоединенную усиленную подпись.
//
// Параметры:
//    ВладелецДанных - СправочникСсылка.Контрагенты - для которого определяем наличие банковского счета
//    ДанныеДляПодписи - Строка - двоичные данные подписываемого файла в виде строки Base64
//    Файл - СправочникСсылка.Файл - подписываемый файл
//    Версия - СправочникСсылка.ВерсииФайлов - версия файла, который подписывеем
//    ДанныеПользователя - Структура - Структура, содержащая свойства Логин и Пароль пользователя КриптоПро DSS
//    ДвухфакторнаяАвторизация - Булево - признак использования двухфакторной авторизации через myDss
//
// Возвращаемое значение:
//    СтруктураРезультат - Структура, содержащая свойства Успешно (Истина, если подпись получена) и ТекстОшибки (Строка, содержащая описание ошибки)
//
Функция ПодписатьОсновнойФайл(ВладелецДанных, ДанныеДляПодписи, Файл, Версия, ДанныеПользователя, ДвухфакторнаяАвторизация = Ложь) Экспорт 
		
	СтруктураРезультат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	// 1. ПОЛУЧЕНИЕ НАСТРОЕК ПОДКЛЮЧЕНИЯ К КриптоПроDSS
	//
	username 	= ДанныеПользователя.Логин;
	password 	= ДанныеПользователя.Пароль;
	PinCode 	= ""; 
	
	НастройкиПодключенияКDSS = Константы.ра_ПараметрыПодключенияКСерверуDSS.Получить();
	СтруктураНастроек = НастройкиПодключенияКDSS.Получить();
	ДобавитьВидимуюПодпись = Истина;
			
	Если не ЗначениеЗаполнено(СтруктураНастроек.Хост)
		или не ЗначениеЗаполнено(СтруктураНастроек.ЗапросТокена)
		или не ЗначениеЗаполнено(СтруктураНастроек.ЗапросПодписиДокумента) Тогда 
		
		СтруктураРезультат.Успешно = Ложь;
		СтруктураРезультат.ТекстОшибки = "Не заполнены параметры подключения к КриптоПро DSS";		
		
		Возврат СтруктураРезультат;
		
	КонецЕсли;
	
	client_id 	= СтруктураНастроек.ИдентификаторСистемы; // client_id - это не логин и не идентификатор пользователя, это идентификатор Вашей системы, он назначается администратором DSS через PowerShell (https://support.cryptopro.ru/index.php?/Tickets/Ticket/View/17295)
	
	// 2. ПОЛУЧЕНИЕ ТОКЕНА
	//
	Тело = "grant_type=password&client_id=" + client_id + "&scope=dss&username=" + username + "&password=" + password + "&resource=urn:cryptopro:dss:signserver:tsconsultingss";
	
	HTTPОтвет = ОтправитьHTTPЗапросКDSS(СтруктураНастроек.Хост, СтруктураНастроек.ЗапросТокена, , Тело);
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
	ОтветСтруктурой = ПрочитатьJSON(ЧтениеJSON);
		
	Если HTTPОтвет.КодСостояния <> 200 Тогда 
		
		СтруктураРезультат.Успешно = Ложь;
		
		Если ОтветСтруктурой.Свойство("error_description") Тогда 
			СтруктураРезультат.ТекстОшибки = ОтветСтруктурой.error_description;
		Иначе
			СтруктураРезультат.ТекстОшибки = "При авторизации пользователя в системе КриптоПро DSS возникла ошибка.";
		КонецЕсли;
				
		Возврат СтруктураРезультат;
		
	КонецЕсли;
	
	Если ОтветСтруктурой.Свойство("access_token") Тогда 
		Токен = ОтветСтруктурой.access_token;
	Иначе
		СтруктураРезультат.Успешно = Ложь;
		СтруктураРезультат.ТекстОшибки = "Ошибка в структуре данных по авторизации пользователя в системе КриптоПро DSS.";
		Возврат СтруктураРезультат;
	КонецЕсли;
			
	// 3. ПОДПИСЬ ДОКУМЕНТА
	//
	Если ДвухфакторнаяАвторизация Тогда
		
		//3.1 СОЗДАНИЕ ТРАНЗАКЦИИ
		//
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Authorization", "Bearer " + Токен);
		Заголовки.Вставить("Content-Type", "application/json");

		Тело = "{
		|""OperationCode"":""SignDocument"",
		|""Parameters"":[
		|	{""Name"":""DocumentInfo"",	""Value"":""Тестовый документ""},
		|	{""Name"":""SignatureType"",""Value"":""CAdES""},
		|	{""Name"":""CADESType"",	""Value"":""XLT1""},
		|	{""Name"":""TSPAddress"",	""Value"":""http://sub-testca20/tsp/tsp.srf""},
		|	{""Name"":""IsDetached"",	""Value"":""True""},
		|	{""Name"":""PinCode"",		""Value"":""" + PinCode + """},
		|	{""Name"":""CertificateID"",""Value"":""1""}],
		|""Document"":""" + ДанныеДляПодписи + """}";

		HTTPОтвет = ОтправитьHTTPЗапросКDSS(СтруктураНастроек.Хост, СтруктураНастроек.ЗапросСозданиеТранзакции, Заголовки, Тело, Истина);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();

	    Если HTTPОтвет.КодСостояния <> 200 Тогда 
			СтруктураРезультат.Успешно = Ложь;
			СтруктураРезультат.ТекстОшибки = "При создании транзакции в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
			Возврат СтруктураРезультат;
		КонецЕсли;
		
		IDТранзакции = ОтветСтрокой;
		
		//3.2 ПОДТВЕРЖДЕНИЕ ТРАНЗАКЦИИ
		//
		Тело = "{
		|""Resource"":""urn:cryptopro:dss:signserver:tsconsultingss"",
		|""TransactionTokenId"":" + IDТранзакции + "}";

		HTTPОтвет = ОтправитьHTTPЗапросКDSS(СтруктураНастроек.Хост, СтруктураНастроек.ЗапросПодтверждениеТранзакции, Заголовки, Тело, Истина);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();

	    Если HTTPОтвет.КодСостояния <> 200 Тогда 
			СтруктураРезультат.Успешно = Ложь;
			СтруктураРезультат.ТекстОшибки = "При подтверждении транзакции в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
			Возврат СтруктураРезультат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
		ОтветСтруктурой = ПрочитатьJSON(ЧтениеJSON);
		
		RefID = 		ОтветСтруктурой.Challenge.ContextData.RefID;
		ОтветПолучен = 	ОтветСтруктурой.IsFinal;
		
		Тело = "{
		|""Resource"":""urn:cryptopro:dss:signserver:tsconsultingss"",
		|""ChallengeResponse"":
		|{
		|""TextChallengeResponse"":
		|    [{""RefId"":""" + RefID + """}]}
		|}";
		
		Пока НЕ ОтветПолучен Цикл
			
			HTTPОтвет = ОтправитьHTTPЗапросКDSS(СтруктураНастроек.Хост, СтруктураНастроек.ЗапросПодтверждениеТранзакции, Заголовки, Тело, Истина);
			ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();

			Если HTTPОтвет.КодСостояния <> 200 Тогда 
				СтруктураРезультат.Успешно = Ложь;
				СтруктураРезультат.ТекстОшибки = "При подтверждении транзакции в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
				Возврат СтруктураРезультат;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
			ОтветСтруктурой = ПрочитатьJSON(ЧтениеJSON);
			
			ОтветПолучен = 	ОтветСтруктурой.IsFinal;
		КонецЦикла;
		
		НовыйТокен = ОтветСтруктурой.AccessToken;
		
		//3.3 ПОЛУЧЕНИЕ ПОДПИСАННОГО ДОКУМЕНТА
		//
		Заголовки.Вставить("Authorization", "Bearer " + НовыйТокен);
		
		Тело = "{}";
		
		HTTPОтвет = ОтправитьHTTPЗапросКDSS(СтруктураНастроек.Хост, СтруктураНастроек.ЗапросПодписиДокумента, Заголовки, Тело);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда 
			СтруктураРезультат.Успешно = Ложь;
			СтруктураРезультат.ТекстОшибки = "При подписании документа в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
			Возврат СтруктураРезультат;
		КонецЕсли;
		
	Иначе
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Authorization", "Bearer " + Токен);
		Заголовки.Вставить("Content-Type", "application/json");

		Тело = "{
		|""Content"":""" + ДанныеДляПодписи + """,
		|""Name"":""Тестовый документ"",
		|""Signature"":{
		|	""Type"":""CAdES"",
		|	""Parameters"":{
		|		""CAdESType"":""XLT1"",
		|		""IsDetached"":""True"",
		|		""TSPAddress"":""http://sub-testca20/tsp/tsp.srf""},
		|	""CertificateId"":1,
		|	""PinCode"":""" + PinCode + """}
		|}";
		
		HTTPОтвет = ОтправитьHTTPЗапросКDSS(СтруктураНастроек.Хост, СтруктураНастроек.ЗапросПодписиДокумента, Заголовки, Тело);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда 
			СтруктураРезультат.Успешно = Ложь;
			СтруктураРезультат.ТекстОшибки = "При подписании документа в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
			Возврат СтруктураРезультат;
		КонецЕсли;
		
	КонецЕсли;
	
	// сохраняем файл
	ДвоичныеДанныеПодпись = Base64Значение(СтрЗаменить(ОтветСтрокой, """", ""));
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = ДвоичныеДанныеПодпись;
	СведенияОФайле.АдресВременногоХранилищаТекста = "";
	СведенияОФайле.ЗаписатьВИсторию = Истина;
	СведенияОФайле.ИмяБезРасширения = "Подпись (Signature)";
	СведенияОФайле.РасширениеБезТочки = "sig";
	СведенияОФайле.Размер = ДвоичныеДанныеПодпись.Размер();
	СведенияОФайле.ПараметрыРаспознавания = Неопределено;
	СведенияОФайле.СписокКатегорий = Неопределено;
	
	//ФайлПодписиСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ВладелецДанных, СведенияОФайле);
	
	ПроверитьПодписьИЗаписатьРезультат(Base64Значение(ДанныеДляПодписи), ДвоичныеДанныеПодпись, Файл, Версия);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ПроверитьПодписьИЗаписатьРезультат(ДанныеДляПодписи, ДвоичныеДанныеПодпись, Файл, Версия) Экспорт
	
	Сертификат = Неопределено;
	ПодписьВерна = ПроверитьСертификатыПодписи(ДанныеДляПодписи, ДвоичныеДанныеПодпись, Сертификат);
	
	НачатьТранзакцию();
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ДатаПодписи = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанныеПодпись);
	МенеджерЗаписи.Объект = Версия;  
	МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Версия = 3; // актуальная версия подписываемых данных на текущий момент
	МенеджерЗаписи.Комментарий = "Подпись через DSS Крипто Про";
	МенеджерЗаписи.КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
	МенеджерЗаписи.Отпечаток = Base64Строка(Сертификат.Отпечаток);
	МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(ДвоичныеДанныеПодпись);
	МенеджерЗаписи.Сертификат = Новый ХранилищеЗначения(Сертификат.Выгрузить()); 
	
	МенеджерЗаписи.ДатаПроверкиПодписи = МенеджерЗаписи.ДатаПодписи;
	МенеджерЗаписи.ПодписьВерна = ПодписьВерна;
	МенеджерЗаписи.СертификатДействителен = ПодписьВерна;
		
	МенеджерЗаписи.Записать();

	ФайлОбъект = Файл.ПолучитьОбъект();
	ФайлОбъект.ПодписанЭП = Истина;
	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ФайлОбъект.Записать();
	
	ВерсияОбъект = Версия.ПолучитьОбъект();
	ВерсияОбъект.ПодписанЭП = Истина;
	ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ВерсияОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет отсоединенную подпись на валидность.
//
// Параметры:
//    ДвоичныеДанныеЭД - двоичные данные подписанного файла
//    ДвоичныеДанныеФайлаЭП - двоичные данные подписи
//    Сертификат = Неопределено
//
// Возвращаемое значение:
//    Булево - признак успешного прохождения проверки
//
Функция ПроверитьСертификатыПодписи(ДвоичныеДанныеЭД, ДвоичныеДанныеФайлаЭП, Сертификат) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи");
		
	ТекстОшибки = "";
	Возврат ПроверитьПодпись(МенеджерКриптографии,
					ДвоичныеДанныеЭД,
					ДвоичныеДанныеФайлаЭП,
					Сертификат,
					ТекстОшибки);
					
КонецФункции

// Проверяет отсоединенную подпись на валидность.
//
// Параметры:
//    ДвоичныеДанныеЭД - двоичные данные подписанного файла
//    ДвоичныеДанныеФайлаЭП - двоичные данные подписи
//    Сертификат = Неопределено
//
// Возвращаемое значение:
//    СтруктураРезультат - Структура, содержащая свойства Успешно (Истина, если подпись валидна и является усиленной (CAdES XLT1), Ложь в противном случае) и ТекстОшибки (Строка, содержащая описание ошибки)
//
Функция ПроверитьПодписьЧерезDSS(ДвоичныеДанныеЭД, ДвоичныеДанныеФайлаЭП) Экспорт
	
	СтруктураРезультат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	// ПРОВЕРКА ПОДПИСИ
	//
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	//Заголовки.Вставить("Postman-Token", Токен);
	
	Тело = "{
	|""SignatureType"":""CAdES"",
	|""Source"":""" + Base64Строка(ДвоичныеДанныеЭД) + """,
	|""Content"":""" + Base64Строка(ДвоичныеДанныеФайлаЭП) + """
	|}";
		
	HTTPОтвет = ОтправитьHTTPЗапросКDSS("dss.cryptopro.ru", "/verify/rest/api/signatures", Заголовки, Тело);
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда 
		СтруктураРезультат.Успешно = Ложь;
		СтруктураРезультат.ТекстОшибки = "При проверке подписи в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
	ОтветМассивСтруктур = ПрочитатьJSON(ЧтениеJSON);
	
	Если ОтветМассивСтруктур. Количество()И ОтветМассивСтруктур[0].Свойство("Result") Тогда 
		СтруктураРезультат.Успешно = ОтветМассивСтруктур[0].Result;
		Если ОтветМассивСтруктур[0].Свойство("SignatureInfo") И ОтветМассивСтруктур[0].SignatureInfo.CAdESType <> "XLT1" Тогда
			СтруктураРезультат.Успешно = Ложь;
			СтруктураРезультат.ТекстОшибки = "Подпись не является усиленной. " + ОтветМассивСтруктур[0].SignatureInfo.CAdESType;
		ИначеЕсли НЕ СтруктураРезультат.Успешно Тогда
			СтруктураРезультат.ТекстОшибки = "Подпись не верна. " + ?(ОтветМассивСтруктур[0].Свойство("Message"), ОтветМассивСтруктур[0].Message, ОтветСтрокой);
		КонецЕсли;
	Иначе
		СтруктураРезультат.Успешно = Ложь;
		СтруктураРезультат.ТекстОшибки = "При проверке подписи в системе КриптоПро DSS возникла ошибка. " + ОтветСтрокой;
	КонецЕсли;
		
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеФункции

Функция ОтправитьHTTPЗапросКDSS(Хост, АдресРесурса, Заголовки = Неопределено, Тело = Неопределено, ЗащищенноеСоединение = Ложь)
	
	Если ЗащищенноеСоединение Тогда
		//ssl = Новый ЗащищенноеСоединениеOpenSSL(
		//		Новый СертификатКлиентаФайл("C:\Users\sbliznyuk\Documents\dss\rkhayrullin.pfx","1"),
		//		Новый СертификатыУдостоверяющихЦентровWindows());
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		
		Соединение = Новый HTTPСоединение(Хост,,,,,,ssl);
	Иначе
		Соединение = Новый HTTPСоединение(Хост);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Если Заголовки <> Неопределено Тогда 
		Запрос.Заголовки = Заголовки;
	КонецЕсли;	
	
	Если Тело <> Неопределено Тогда 
		Запрос.УстановитьТелоИзСтроки(Тело);
	КонецЕсли;	

	HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	
	Возврат HTTPОтвет; 
		
КонецФункции

Функция ПроверитьПодпись(МенеджерКриптографии, ИсходныеДанные, Подпись, Сертификат, ОписаниеОшибки = Null, НаДату = Неопределено) 
	
	МенеджерКриптографииДляПроверки = МенеджерКриптографии;
	Если МенеджерКриптографииДляПроверки = Неопределено Тогда
		МенеджерКриптографииДляПроверки = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи", ОписаниеОшибки = Null, ОписаниеОшибки);
		Если МенеджерКриптографииДляПроверки = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИсходныеДанныеДляПроверки = ИсходныеДанные;
	Если ТипЗнч(ИсходныеДанные) = Тип("Строка") И ЭтоАдресВременногоХранилища(ИсходныеДанные) Тогда
		ИсходныеДанныеДляПроверки = ПолучитьИзВременногоХранилища(ИсходныеДанные);
	КонецЕсли;
	
	ПодписьДляПроверки = Подпись;
	Если ТипЗнч(Подпись) = Тип("Строка") И ЭтоАдресВременногоХранилища(Подпись) Тогда
		ПодписьДляПроверки = ПолучитьИзВременногоХранилища(Подпись);
	КонецЕсли;
	
	Попытка
		МенеджерКриптографииДляПроверки.ПроверитьПодпись(ИсходныеДанныеДляПроверки, ПодписьДляПроверки, Сертификат);
	Исключение
		Если ОписаниеОшибки = Null Тогда
			ВызватьИсключение;
		КонецЕсли;
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ДатаПодписания = ЭлектроннаяПодпись.ДатаПодписания(ПодписьДляПроверки);
	Если Не ЗначениеЗаполнено(ДатаПодписания) Тогда
		ДатаПодписания = НаДату;
	КонецЕсли;
	
	Возврат ПроверитьСертификат(МенеджерКриптографииДляПроверки, Сертификат, ОписаниеОшибки, ДатаПодписания);
	
КонецФункции

// Проверяет действительность сертификата криптографии.
//
// Параметры:
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии автоматически.
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии.
//
//   Сертификат           - СертификатКриптографии - сертификат.
//                        - ДвоичныеДанные - двоичные данные сертификата.
//                        - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//
//   ОписаниеОшибки       - Null - вызвать исключение при ошибке проверки.
//                        - Строка - содержит описание ошибки, если произошла ошибка.
//
//   НаДату               - Дата - проверить сертификат на указанную дату.
//                          Если параметр не указан или указана пустая дата,
//                          тогда проверять на текущую дату сеанса.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка выполнена успешно,
//         - Ложь, если не удалось получить менеджер криптографии (когда не указан).
//
Функция ПроверитьСертификат(МенеджерКриптографии, Сертификат, ОписаниеОшибки = Null, НаДату = Неопределено) 
	
	МенеджерКриптографииДляПроверки = МенеджерКриптографии;
	
	Если МенеджерКриптографииДляПроверки = Неопределено Тогда
		МенеджерКриптографииДляПроверки = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаСертификата", ОписаниеОшибки = Null, ОписаниеОшибки);
		Если МенеджерКриптографииДляПроверки = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СертификатДляПроверки = Сертификат;
	
	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		СертификатДляПроверки = ПолучитьИзВременногоХранилища(Сертификат);
	КонецЕсли;
	
	Если ТипЗнч(СертификатДляПроверки) = Тип("ДвоичныеДанные") Тогда
		СертификатДляПроверки = Новый СертификатКриптографии(СертификатДляПроверки);
	КонецЕсли;
	
	РежимыПроверкиСертификата = ЭлектроннаяПодписьСлужебныйКлиентСервер.РежимыПроверкиСертификата(
		ЗначениеЗаполнено(НаДату));
	РежимыПроверкиСертификата.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов); 
	
	Попытка
		МенеджерКриптографииДляПроверки.ПроверитьСертификат(СертификатДляПроверки, РежимыПроверкиСертификата);
	Исключение
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ОшибкаПросрочки = ЭлектроннаяПодписьСлужебныйКлиентСервер.СертификатПросрочен(СертификатДляПроверки, НаДату);
	Если ЗначениеЗаполнено(ОшибкаПросрочки) Тогда
		ОписаниеОшибки = ОшибкаПросрочки;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли

