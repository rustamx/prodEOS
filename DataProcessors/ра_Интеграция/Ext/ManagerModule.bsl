
#Область ЛогированиеИнтеграции

Функция ОбменВсеОшибкиСтрокой(ПараметрыЗагрузки) Экспорт
	Если НЕ ПараметрыЗагрузки.Свойство("ТаблицаОшибок") Тогда
		Возврат "";
	КонецЕсли;
	Результат = "";
	Для Каждого Строка ИЗ ПараметрыЗагрузки.ТаблицаОшибок Цикл
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + Строка.РасширенноеОписаниеОшибки;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ДобавитьЗаписьВЖурналОбмена(Объект,Фабрика = Неопределено,ВидИнтеграции, Описание,URL=Неопределено, ЭтоОшибка, ЭтоОбъект1С, ЭтоЗагрузка=Истина, ИД = Неопределено, Request=Ложь, ОбъектXDTO=Неопределено) Экспорт	
	
	//Если ИД = Неопределено Тогда
		ИД = Новый УникальныйИдентификатор();	
	//КонецЕсли;
	НЗ = РегистрыСведений.ра_ЖурналОбмена.СоздатьНаборЗаписей();
	НЗ.Отбор.ИД.Установить(ИД);
	НЗ.Прочитать();
	НЗ.Очистить();
	
	Запись = НЗ.Добавить();
	Запись.ИД 				= ИД;
	Запись.ОК				= НЕ ЭтоОшибка;
	Запись.Загрузка         = ЭтоЗагрузка;

	Запись.Request          = Request;
	Запись.Информация       = Ложь;
	Запись.Дата             = ?(Описание = "Окончание загрузки", ТекущаяДата()+1, ?(Описание = "Начало загрузки", ТекущаяДата()-1, ТекущаяДата()));
	Запись.Объект           = ?(ЭтоОбъект1С, Объект.Ссылка, Неопределено);
	Запись.ВидИнтеграции    = ВидИнтеграции;//Перечисления.гаВидыИнтеграций.SRM_Purchases
	Запись.Описание         = Описание;
	Запись.URL         		= URL;
	
	Если ЭтоОбъект1С Тогда
		Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			//Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, СтрЗаменить(Строка(ВидИнтеграции), " ", "_"));
			Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
			ТекстXML = ЗаписьXML.Закрыть();
			Запись.XMLСообщение     = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
		Иначе
			Запись.XMLСообщение     = XMLПредставлениеОбъекта1С(Объект);
		КонецЕсли;
	Иначе
		// Запись объекта XDTO в текст XML
		Если ТипЗнч(Объект) = Тип("ОбъектXDTO") Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			//Фабрика.ЗаписатьXML(ЗаписьXML, Объект, СтрЗаменить(Строка(ВидИнтеграции), " ", "_"));
			Фабрика.ЗаписатьXML(ЗаписьXML, Объект);
			ТекстXML = ЗаписьXML.Закрыть();
			Запись.XMLСообщение     = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
		Иначе
			Попытка
				Запись.XMLСообщение     = Новый ХранилищеЗначения(Строка(Объект));
			Исключение
				Запись.XMLСообщение     = Новый ХранилищеЗначения(Неопределено);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
				
	НЗ.Записать();
КонецПроцедуры

Функция ОбменОшибка(ПараметрыЗагрузки, Пакет = Неопределено, ОписаниеОшибки) Экспорт
	
	//Создаем таблицу ошибок
	
	Если НЕ ПараметрыЗагрузки.Свойство("ТаблицаОшибок") Тогда
		ТЗ = Новый ТаблицаЗначений();
		
		ТЗ.Колонки.Добавить("Время", Новый ОписаниеТипов("Дата"));
		ТЗ.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("ОбъектОбмена", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("ТипОбъектаОбмена", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("РасширенноеОписаниеОшибки", Новый ОписаниеТипов("Строка"));
		
		ПараметрыЗагрузки.Вставить("ТаблицаОшибок", ТЗ);
	КонецЕсли;
	
	Строка = ПараметрыЗагрузки.ТаблицаОшибок.Добавить();
	Строка.Время = ТекущаяДата();
	Строка.ОписаниеОшибки = ОписаниеОшибки;
	Если Пакет <> Неопределено Тогда
		Если Пакет.Свойство("Объект") Тогда
			Строка.Объект = Пакет.Объект;
		КонецЕсли;
		Если Пакет.Свойство("ОбъектОбмена") Тогда
			Строка.ОбъектОбмена = Пакет.ОбъектОбмена;
			Если ТипЗнч(Пакет.ОбъектОбмена) = Тип("ОбъектXDTO") Тогда
				Строка.ТипОбъектаОбмена = ТипЗнч(Пакет.ОбъектОбмена.Тип());
			Иначе
				Строка.ТипОбъектаОбмена = ТипЗнч(Пакет.ОбъектОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Строка.РасширенноеОписаниеОшибки = ОписаниеОшибки;
	Если ЗначениеЗаполнено(Строка.ТипОбъектаОбмена) Тогда
		Строка.РасширенноеОписаниеОшибки = Строка.РасширенноеОписаниеОшибки + " при загрузке типа: " + Строка.ТипОбъектаОбмена;
	КонецЕсли;
	Сообщить(Строка.РасширенноеОписаниеОшибки);
	
КонецФункции

Функция XMLПредставлениеОбъекта1С(Объект)
	//+
	ФайлXML = Новый ЗаписьXML;
	
	//ФайлXML.ОткрытьФайл(ИмяФайлаИПуть);
	ФайлXML.УстановитьСтроку();
	ФайлXML.ЗаписатьОбъявлениеXML();
	
	//Запись корневого узла
	ФайлXML.ЗаписатьНачалоЭлемента("Объект");
		
	//Запись объекта
	ЗаписатьXML(ФайлXML, Объект);
	
	//Закрытие корневого узла
	ФайлXML.ЗаписатьКонецЭлемента();
	
	Результат = ФайлXML.Закрыть();
	
	Возврат Строка(Результат);
КонецФункции

#КонецОбласти

#Область СлужебныеОтправкаОтвета

Функция УстановитьАвторизацию(WSПрокси) Экспорт
	    
	ХранилищеЗначений = Константы.ра_ДанныеДляВходаВЕОС.Получить();
		
	Структура = ХранилищеЗначений.Получить();
	
	Если ТипЗнч(Структура) = Тип("Структура")
		и Структура.Свойство("ЛогинВЕОС")
		и Структура.Свойство("ПарольВЕОС") Тогда 
		WSПрокси.Пользователь = Структура.ЛогинВЕОС;
		WSПрокси.Пароль = Структура.ПарольВЕОС;	
	Иначе
		WSПрокси.Пользователь = "";
		WSПрокси.Пароль = "";
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьWSСсылку(URI, ИмяСервиса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ра_WSСсылки.WSDL КАК WSDL
	               |ИЗ
	               |	Справочник.ра_WSСсылки КАК ра_WSСсылки
	               |ГДЕ
	               |	ра_WSСсылки.URI = &URI
	               |	И НЕ ра_WSСсылки.ПометкаУдаления
	               |	И ра_WSСсылки.ИмяСервиса = &ИмяСервиса";
	
	Запрос.УстановитьПараметр("URI", URI);
	Запрос.УстановитьПараметр("ИмяСервиса", ИмяСервиса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.WSDL;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияКонтрагенты

Функция ВыполнитьСценарийЗагрузкиКонтрагентаВ1С(BusinessPartner, Error)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидИнтеграции = Перечисления.ра_ВидыИнтеграций.EOSNSI_BusinessPartners;
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("Загрузка", 	          Истина);
	ПараметрыЗагрузки.Вставить("РеквизитПоискаПоGID", "ра_GID");
	Пакет = Новый Структура("ОбъектОбмена, Объект", BusinessPartner, Неопределено);
	РезСсылка = ЗагрузитьОбновитьКонтрагента(ПараметрыЗагрузки, Пакет);
	
	ОписаниеОшибокСтрокой = ОбменВсеОшибкиСтрокой(ПараметрыЗагрузки);
	Если ОписаниеОшибокСтрокой <> "" Тогда
		СтатусЗагрузки = "IN_WARN";
		ДобавитьЗаписьВЖурналОбмена(, BusinessPartner, "Не все данные загружены корректно: " + Символы.ПС + ОписаниеОшибокСтрокой, , ложь,,Перечисления.ра_ВидыИнтеграций.EOSNSI_BusinessPartners);
	Иначе
		СтатусЗагрузки = "IN_OK";	
	КонецЕсли;	
	
	Результат = Новый Структура("ОК, ОписаниеОшибки, Ссылка", ложь, "", Неопределено);
	
	Если ЗНачениеЗаполнено(РезСсылка) Тогда
		Результат.Вставить("ОК", Истина);
		Результат.Вставить("GID", РезСсылка.ра_GID);	
		Результат.Вставить("LID", СтрЗаменить(Строка(РезСсылка.УникальныйИдентификатор()), "-", ""));		
		Результат.Вставить("Ссылка", РезСсылка);		
	КонецЕсли;
	
	Результат.Вставить("ИзвещениеОК", ложь);
	Результат.Вставить("ОписаниеОшибкиИзвещения", "");
	
	Если Результат.ОК Тогда
		ДобавитьЗаписьВЖурналОбмена(Результат.Ссылка, ФабрикаXDTO ,ВидИнтеграции,"Контрагент успешно загружен",, Ложь, Истина,Истина,,,BusinessPartner);
		
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("URI","urn:ibs.ru:MasterData:BusinessPartners");
		СтруктураНастроек.Вставить("Сервер","LIDSend_OutService");
		СтруктураНастроек.Вставить("Порт","HTTP_Port");
		
		WS_Ссылка_ХранилищеЗначений = ПолучитьWSСсылку(СтруктураНастроек.URI, СтруктураНастроек.Сервер);
	
		Если WS_Ссылка_ХранилищеЗначений = Неопределено Тогда 
			Результат.ОК = ложь;
			Результат.Вставить("ОписаниеОшибкиИзвещения", "Ошибка создания сервиса LIDSend_OutService: " + ОписаниеОшибки());
			
			ДобавитьЗаписьВЖурналОбмена(Неопределено,,ВидИнтеграции, "Ошибка создания сервиса LIDSend_OutService: " + ОписаниеОшибки(),, Истина, Ложь);
			
			Возврат Результат;
		КонецЕсли;	
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
		WS_Ссылка_ХранилищеЗначений.Получить().Записать(ИмяВременногоФайла);
		
		СтруктураНастроек.Вставить("Определение", Новый WSОпределения(ИмяВременногоФайла));
		
		Попытка
			ТекСервисSRM = Новый WSПрокси(СтруктураНастроек.Определение, СтруктураНастроек.URI, СтруктураНастроек.Сервер, СтруктураНастроек.Порт);
			УстановитьАвторизацию(ТекСервисSRM);
			ТекФабрикаXDTO = ТекСервисSRM.ФабрикаXDTO;
		Исключение
			Результат.ОК = ложь;
			Результат.Вставить("ОписаниеОшибкиИзвещения", "Ошибка создания сервиса LIDSend_OutService: " + ОписаниеОшибки());
			
			ДобавитьЗаписьВЖурналОбмена(Неопределено,,ВидИнтеграции, "Ошибка создания сервиса LIDSend_OutService: " + ОписаниеОшибки(),, Истина, Ложь);
			
			Возврат Результат;
		КонецПопытки;
		
		ЗапросТип = ТекФабрикаXDTO.Пакеты.Получить("urn:ibs.ru:MasterData:BusinessPartners").Получить("LID");
		ЗапросОбъект = ТекФабрикаXDTO.Создать(ЗапросТип);
		
		ЗапросОбъект.GID = Результат.GID;
		ЗапросОбъект.LID = Результат.LID;
		ЗапросОбъект.SystemCode = Константы.ра_КодСистемы1СДляЕОС.Получить(); 
		ЗапросОбъект.TableCode = "BP";
		ЗапросОбъект.RequestID = BusinessPartner.RequestInfo.RequestID;
		
		Попытка	
			ТекСервисSRM.LIDSendRequest_Asyn(ЗапросОбъект); 			
			Результат.Вставить("ИзвещениеОК", истина);			
		Исключение
			Результат.ОК = ложь;
			Результат.Вставить("ОписаниеОшибкиИзвещения", ОписаниеОшибки());		
		КонецПопытки;
		
		Если Результат.ИзвещениеОК Тогда
			Error = СтатусЗагрузки + ";LID_OK"; //английскими 
			ДобавитьЗаписьВЖурналОбмена(РезСсылка, ТекФабрикаXDTO, Перечисления.ра_ВидыИнтеграций.EOSNSI_BusinessPartners, "LID успешно отправлен",, Ложь, Истина,,,,BusinessPartner);
		Иначе
			Error = СтатусЗагрузки + ";LID_ERROR:" + Результат.ОписаниеОшибкиИзвещения; 
			ДобавитьЗаписьВЖурналОбмена(РезСсылка, ТекФабрикаXDTO, Перечисления.ра_ВидыИнтеграций.EOSNSI_BusinessPartners, "Ошибка при отправке LID: " + Результат.ОписаниеОшибкиИзвещения,, Истина, Истина,,,,BusinessPartner);
		КонецЕсли;		
	Иначе
		Error = "IN_ERROR:" + Результат.ОписаниеОшибки; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция	ЗагрузитьОбновитьКонтрагента(ПараметрыЗагрузки, Пакет) Экспорт                                                                            
	
	Пакет.Вставить("СтрокаТипа", "Справочник.Контрагенты");
	Пакет.Вставить("ТипXDTO", ФабрикаXDTO.Тип("urn:ibs.ru:MasterData:BusinessPartners", "BusinessPartner"));
		
	НайтиПолучитьКонтрагентаПоGIDИПодставитьВСтруктуру(ПараметрыЗагрузки, Пакет);
		
	Пакет.Объект.ра_GID				  = Пакет.ОбъектОбмена.GID;
	Пакет.Объект.ра_НаименованиеАнгл  = Пакет.ОбъектОбмена.FullNameInt;
	Пакет.Объект.Наименование 		  = Пакет.ОбъектОбмена.ShortName;
	Пакет.Объект.НаименованиеПолное   = Пакет.ОбъектОбмена.FullName;
	Пакет.Объект.ИНН			      = Пакет.ОбъектОбмена.INN;
	Пакет.Объект.КодПоОКПО			  = Пакет.ОбъектОбмена.OKPO;
	Пакет.Объект.РегистрационныйНомер = Пакет.ОбъектОбмена.OGRN;
	Пакет.Объект.Комментарий		  = Пакет.ОбъектОбмена.Comment;
	Пакет.Объект.ра_Блокирован 		  = не Пакет.ОбъектОбмена.Actuality;
	Пакет.Объект.ПометкаУдаления 	  = не Пакет.ОбъектОбмена.Actuality;
	
	КППКрупнейшего = Пакет.ОбъектОбмена.LargestKPP;
	Если Не ЗначениеЗаполнено(КППКрупнейшего) Тогда
		Пакет.Объект.КПП = Пакет.ОбъектОбмена.KPP;
	КонецЕсли;
		
	Попытка
		Если Число(Лев(Пакет.ОбъектОбмена.TermDate, 4)) > 3999 Тогда 
			Пакет.Объект.ра_ДатаБлокировки = Дата(1,1,1);
		Иначе	
			СтрокаДата = Пакет.ОбъектОбмена.TermDate;
			СтрокаДата = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаДата, "Z", ""), "T", ""), ":",""), "-", "");
			Пакет.Объект.ра_ДатаБлокировки = Дата(Лев(СтрокаДата, ?(Найти(СтрокаДата,".") = 0,СтрДлина(СтрокаДата), Найти(СтрокаДата,".") - 1)));
		КонецЕсли;	
	Исключение
	КонецПопытки;	
	
	Если Пакет.ОбъектОбмена.OrgForm.GID = "6" Тогда 
		Пакет.Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;	
	ИНаче
		Пакет.Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;	
	КонецЕсли;	
	
	КодСтраны = СокрЛП(Пакет.ОбъектОбмена.Country.OKSM.Kod);
	Если ЗначениеЗаполнено(КодСтраны) Тогда 
		
		СтранаКонтрагента = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		// если не нашли в справочнике, попробуем найти в классификаторе
		Если Не ЗначениеЗаполнено(СтранаКонтрагента) Тогда
		    тз_КлассификаторСтран = Справочники.СтраныМира.ТаблицаКлассификатора();
			НайденнаяСтрока = тз_КлассификаторСтран.Найти(КодСтраны, "Код");
			Если НайденнаяСтрока <> Неопределено Тогда 
				СтранаКонтрагента = ДобавитьСтрануИзКлассификатораСтран(НайденнаяСтрока);
			КонецЕсли;	
		КонецЕсли;	
		
		Пакет.Объект.ра_Страна = СтранаКонтрагента;
		
	КонецЕсли;	
	
	Если Пакет.ОбъектОбмена.CFO3 <> Неопределено Тогда 
		// контрагент соответствует ЦФО 3
		
		контейнерЦФО2 = Пакет.ОбъектОбмена.CFO3.CFO2;
		СсылкаНаЦФО2 = ПолучитьСсылкуНаЦФО(контейнерЦФО2,, Пакет, ПараметрыЗагрузки);
		
		контейнерЦФО3 = Пакет.ОбъектОбмена.CFO3;
		СсылкаНаЦФО3 = ПолучитьСсылкуНаЦФО(контейнерЦФО3, СсылкаНаЦФО2, Пакет, ПараметрыЗагрузки);
		
		Пакет.Объект.ра_ЦФО = СсылкаНаЦФО3;
		
	ИначеЕсли Пакет.ОбъектОбмена.CFO4 <> Неопределено Тогда 
		// контрагент соответствует ЦФО 4	
		
		контейнерЦФО2 = Пакет.ОбъектОбмена.CFO4.CFO3.CFO2;
		СсылкаНаЦФО2 = ПолучитьСсылкуНаЦФО(контейнерЦФО2,, Пакет, ПараметрыЗагрузки);
		
		контейнерЦФО3 = Пакет.ОбъектОбмена.CFO4.CFO3;
		СсылкаНаЦФО3 = ПолучитьСсылкуНаЦФО(контейнерЦФО3, СсылкаНаЦФО2, Пакет, ПараметрыЗагрузки);
		
		контейнерЦФО4 = Пакет.ОбъектОбмена.CFO4;
		СсылкаНаЦФО4 = ПолучитьСсылкуНаЦФО(контейнерЦФО4, СсылкаНаЦФО3, Пакет, ПараметрыЗагрузки);
		
		Пакет.Объект.ра_ЦФО = СсылкаНаЦФО4;
		
	КонецЕсли;	
			
	Пакет.Объект.КонтактнаяИнформация.Очистить();
	
	ЗагрузитьВидКонтактнойИнформации(ПараметрыЗагрузки, Пакет, "Email", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	ЗагрузитьВидКонтактнойИнформации(ПараметрыЗагрузки, Пакет, "Web",   Справочники.ВидыКонтактнойИнформации.СайтКонтрагента);
	ЗагрузитьВидКонтактнойИнформации(ПараметрыЗагрузки, Пакет, "Phone", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ЗагрузитьВидКонтактнойИнформации(ПараметрыЗагрузки, Пакет, "Fax",   Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
	ЗагрузитьВидКонтактнойИнформации(ПараметрыЗагрузки, Пакет, "LegalAddress", Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента);
	
	Попытка
	
		Пакет.Объект.Записать();
		Возврат Пакет.Объект.Ссылка;
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменОшибка(ПараметрыЗагрузки, Пакет, ТекстОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
		
КонецФункции

Функция ПолучитьСсылкуНаЦФО(Контейнер, Родитель = Неопределено, Пакет, ПараметрыЗагрузки)
	
	СсылкаЦФО = Справочники.СтруктураПредприятия.НайтиПоРеквизиту("ра_КодЦФО", Контейнер.Code);
	Если НЕ ЗначениеЗаполнено(СсылкаЦФО) Тогда
		
		НовыйЦФО = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		НовыйЦФО.Наименование = Контейнер.FullName;
		НовыйЦФО.ра_КодЦФО = Контейнер.Code;
		Если ЗначениеЗаполнено(Родитель) Тогда 
			НовыйЦФО.Родитель = Родитель;
		КонецЕсли;	
		
		Попытка     
			НовыйЦФО.ОбменДанными.Загрузка=Истина;
			НовыйЦФО.Записать();
			СсылкаЦФО = НовыйЦФО.Ссылка;
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменОшибка(ПараметрыЗагрузки, Пакет, ТекстОшибки); 
							
		КонецПопытки;
		
	Иначе 	
		// проверим соответствие наименования в 1С и в НСИ
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаЦФО, "Наименование, ра_НаименованиеПолное, Родитель"); 
		Если Контейнер.FullName <> Реквизиты.Наименование
			Или Контейнер.FullName <> Реквизиты.ра_НаименованиеПолное
			Или (Родитель <> Реквизиты.Родитель И ЗначениеЗаполнено(Родитель)) Тогда 
			// обновим реквизиты подразделения из НСИ
			ОбъектЦФО = СсылкаЦФО.ПолучитьОбъект();
			ОбъектЦФО.Наименование = Контейнер.FullName;
			ОбъектЦФО.ра_НаименованиеПолное = Контейнер.FullName;
			Если ЗначениеЗаполнено(Родитель) Тогда  
				ОбъектЦФО.Родитель = Родитель;
			КонецЕсли;	
			
			Попытка
				ОбъектЦФО.ОбменДанными.Загрузка = Истина;
				ОбъектЦФО.Записать();
				СсылкаЦФО = ОбъектЦФО.Ссылка;
			Исключение
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбменОшибка(ПараметрыЗагрузки, Пакет, ТекстОшибки); 
								
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаЦФО;
	
КонецФункции	

Процедура НайтиПолучитьКонтрагентаПоGIDИПодставитьВСтруктуру(ПараметрыЗагрузки, Пакет) Экспорт
	
	// если ранее нашли контрагента по Gid, то повторный поиск не нужен
	Если Пакет.Объект <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ра_GID = &GID
		|	И Контрагенты.ра_GID <> 0";
	
	Запрос.УстановитьПараметр("GID", Пакет.ОбъектОбмена.GID);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Пакет.Объект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
					
		Пакет.Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	КонецЕсли;	
	                                                                  		
КонецПроцедуры

Функция ДобавитьСтрануИзКлассификатораСтран(ДанныеСтраны)
	
	Ссылка = Справочники.СтраныМира.НайтиПоКоду(ДанныеСтраны.Код);
	ЭтоНовый = Не ЗначениеЗаполнено(Ссылка);
	Если ЭтоНовый Тогда
		Страна = Справочники.СтраныМира.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(Страна, ДанныеСтраны);
		Страна.Записать();
		Ссылка = Страна.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ЗагрузитьВидКонтактнойИнформации(ПараметрыЗагрузки, Пакет, ИмяСвойстваОбмена, ВидКонтактнойИнформации) Экспорт
	
	Если Пакет.Объект = Неопределено ИЛИ Пакет.ОбъектОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяСвойстваОбмена = "LegalAddress" Тогда 
		
		Если Пакет.ОбъектОбмена.Свойства().Получить("LegalAddress") <> Неопределено Тогда
		
			ЗаписьКИ = Пакет.Объект.КонтактнаяИнформация.Добавить();
			ЗаписьКИ.Вид 	= ВидКонтактнойИнформации;
			ЗаписьКИ.Тип 	= Перечисления.ТипыКонтактнойИнформации.Адрес;
			ЗаписьКИ.Страна = Пакет.Объект.ра_Страна;
			ЗаписьКИ.Регион	= СокрЛП(Пакет.ОбъектОбмена.LegalAddress.Region.FullName);
			ЗаписьКИ.Город	= СокрЛП(Пакет.ОбъектОбмена.LegalAddress.City.FullName);	
			ЗаписьКИ.Представление = СокрЛП(Пакет.ОбъектОбмена.LegalAddress.AddressText);
			
			Пакет.Объект.ра_ПредставлениеАдресаEn = Пакет.ОбъектОбмена.LegalAddressInt.AddressTextInt;
				
		КонецЕсли;
		
	Иначе	
		
		Значение = Пакет.ОбъектОбмена[ИмяСвойстваОбмена];
		Если ТипЗнч(Значение) = Тип("Строка") Тогда   //Бывает, передается пустой объект XDTO
			Если ЗначениеЗаполнено(ВидКонтактнойИнформации.Тип) Тогда
				ЗаписьКИ = Пакет.Объект.КонтактнаяИнформация.Добавить();
				ЗаписьКИ.Вид = ВидКонтактнойИнформации;
				ЗаписьКИ.Тип = ВидКонтактнойИнформации.Тип;
				ЗаписьКИ.Представление = Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
		
КонецФункции

#КонецОбласти

#Область ИнтеграцияМТР

Функция ВыполнитьСценарийЗагрузкиМТР(ПакетXDTO) Экспорт      
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контекст = ПакетXDTO.MTRRequestContent.MTR;	
	RequestID = ПакетXDTO.MTRRequestContent.RequestId;
	
	Если ТипЗнч(Контекст) = Тип("СписокXDTO") Тогда      
		Для Каждого Элемент Из Контекст Цикл  
			ЗагрузитьОбновитьНоменклатуру(ПакетXDTO);   
		КонецЦикла;	
	Иначе
		ЗагрузитьОбновитьНоменклатуру(ПакетXDTO);	
	КонецЕсли;
	
	Возврат "OK";
	
КонецФункции	

Процедура ЗагрузитьОбновитьНоменклатуру(ПакетXDTO)
	
	Элемент = ПакетXDTO.MTRRequestContent.MTR;	
	RequestID = ПакетXDTO.MTRRequestContent.RequestId;
	
	ЭлементНоменклатуры = НайтиНоменклатуруПоGID(Элемент.GID);
	
	ДатаПоследнегоИзмененияВНСИ = ТекущаяДата();
	
	Если Не ЗначениеЗаполнено(ЭлементНоменклатуры) Тогда
		НоменклатураОбъект = Справочники.ra_MTRiO.СоздатьЭлемент();
		НоменклатураОбъект.GID = Элемент.GID;
	Иначе
		НоменклатураОбъект = ЭлементНоменклатуры.ПолучитьОбъект();
		СтрокаДата = Элемент.LastModifyDate;	
		СтрокаДата = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаДата, "Z", ""), "T", ""), ":",""), "-", "");
		ДатаПоследнегоИзмененияВНСИ = Дата(Лев(СтрокаДата, ?(Найти(СтрокаДата,".") = 0,СтрДлина(СтрокаДата), Найти(СтрокаДата,".") - 1))); 
	КонецЕсли;
	
	НоменклатураОбъект.Наименование 			= Элемент.ShortName;
    НоменклатураОбъект.PolnoeNaimenovanie 		= Элемент.FullName;	
	
	НоменклатураОбъект.OKPD2 = ПолучитьОКПД2(Элемент.OKPD2);
	НоменклатураОбъект.BazovayaEI = ПолучитьБазовуюЕдиницуИзмерения(Элемент.BaseUnit);
		
	СтруктураВозврата = ЗагрузкаКлассификатораМТР(Элемент.MTRClass);
		
	НоменклатураОбъект.KlassifikatorMTR = СтруктураВозврата.КлассификаторМТР; 
	
	ТекСтатус = СокрЛП(Элемент.Status.GID);
	НоменклатураОбъект.Blokirovan = (ТекСтатус = "7");
	НоменклатураОбъект.ПометкаУдаления = НоменклатураОбъект.Blokirovan;
	НоменклатураОбъект.DataIzmeneniya = ДатаПоследнегоИзмененияВНСИ;      	
	
	Попытка
		НоменклатураОбъект.Записать();
		ДобавитьЗаписьВЖурналОбмена(НоменклатураОбъект.Ссылка, ФабрикаXDTO ,Перечисления.ра_ВидыИнтеграций.EOSNSI_MTR,"Номенклатура успешно загружена",, Ложь, Истина,Истина,,,ПакетXDTO);
	Исключение
		ТекстОшибки = "При загрузке номенклатуры возникла ошибка: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьЗаписьВЖурналОбмена(, ПакетXDTO, Перечисления.ра_ВидыИнтеграций.EOSNSI_MTR, ТекстОшибки,,Истина,,Истина,,,ПакетXDTO);
	КонецПопытки;	
	
	ВыгрузитьLID(НоменклатураОбъект, RequestID);
	
КонецПроцедуры

Функция НайтиНоменклатуруПоGID(GID)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ra_MTRiO.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ra_MTRiO КАК ra_MTRiO
	               |ГДЕ
	               |	ra_MTRiO.GID = &GID
	               |	И ra_MTRiO.GID <> 0";
	
	Запрос.УстановитьПараметр("GID", Число(GID));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьОКПД2(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("СписокXDTO") Тогда
		НаборДанных = Элемент[0];
	Иначе
		НаборДанных = Элемент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ra_OKPD2.Ссылка КАК Ссылка,
		|	ra_OKPD2.PolnoeNaimenovanie КАК PolnoeNaimenovanie,
		|	ra_OKPD2.Razdel КАК Razdel,
		|	ra_OKPD2.Aktualniy КАК Aktualniy,
		|	ra_OKPD2.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ra_OKPD2 КАК ra_OKPD2
		|ГДЕ
		|	ra_OKPD2.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", НаборДанных.PositionCode);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		
		новЭлем = Справочники.ra_OKPD2.СоздатьЭлемент();
		новЭлем.Код				   = НаборДанных.PositionCode;
		новЭлем.Aktualniy 		   = НаборДанных.Actuality;
		новЭлем.PolnoeNaimenovanie = НаборДанных.Name;
		новЭлем.Razdel			   = НаборДанных.Section;
		новЭлем.Наименование 	   = НаборДанных.Name;
		новЭлем.Записать();
		
		Возврат новЭлем.Ссылка;
		
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ВыборкаДетальныеЗаписи.PolnoeNaimenovanie <> НаборДанных.Name
		или ВыборкаДетальныеЗаписи.Наименование <> НаборДанных.Name
		или ВыборкаДетальныеЗаписи.Razdel <> НаборДанных.Section
		или ВыборкаДетальныеЗаписи.Aktualniy <> НаборДанных.Actuality Тогда 
		// обновим реквизиты из ЕОС НСИ
		Объект_ОКПД2 = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект_ОКПД2.Aktualniy 		   = НаборДанных.Actuality;
		Объект_ОКПД2.PolnoeNaimenovanie = НаборДанных.Name;
		Объект_ОКПД2.Razdel			   = НаборДанных.Section;
		Объект_ОКПД2.Наименование 	   = НаборДанных.Name;
		Объект_ОКПД2.Записать();
		
		Возврат Объект_ОКПД2.Ссылка;
		
	КонецЕсли;	
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции	

Функция ПолучитьБазовуюЕдиницуИзмерения(ОбъектXDTO)
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеИзЕОСНСИ = Новый Структура();
	ДанныеИзЕОСНСИ.Вставить("Код",   ОбъектXDTO.CodeOKEI.PositionCode);
	ДанныеИзЕОСНСИ.Вставить("ра_GID", СокрЛП(ОбъектXDTO.GID)); 
	ДанныеИзЕОСНСИ.Вставить("Наименование", СокрЛП(ОбъектXDTO.Code));
	ДанныеИзЕОСНСИ.Вставить("НаименованиеПолное", СокрЛП(ОбъектXDTO.Name));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	               |	КлассификаторЕдиницИзмерения.Код КАК Код,
	               |	КлассификаторЕдиницИзмерения.ра_GID КАК ра_GID,
	               |	КлассификаторЕдиницИзмерения.Наименование КАК Наименование,
	               |	КлассификаторЕдиницИзмерения.НаименованиеПолное КАК НаименованиеПолное
	               |ИЗ
	               |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	               |ГДЕ
	               |	КлассификаторЕдиницИзмерения.ра_GID = &GID
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КлассификаторЕдиницИзмерения.Ссылка,
	               |	КлассификаторЕдиницИзмерения.Код,
	               |	КлассификаторЕдиницИзмерения.ра_GID,
	               |	КлассификаторЕдиницИзмерения.Наименование,
	               |	КлассификаторЕдиницИзмерения.НаименованиеПолное
	               |ИЗ
	               |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	               |ГДЕ
	               |	КлассификаторЕдиницИзмерения.Код = &Код";
 	Запрос.УстановитьПараметр("GID", ДанныеИзЕОСНСИ.ра_GID);
	Запрос.УстановитьПараметр("Код", ДанныеИзЕОСНСИ.Код);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		НовЭлем = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовЭлем, ДанныеИзЕОСНСИ);
		
		Попытка
			НовЭлем.Записать();
			Возврат НовЭлем.Ссылка;
		Исключение
			Возврат Неопределено;
		КонецПопытки;	
			
	Иначе
		
		ВозвращаемоеЗначение = Неопределено; // вернем первое найденное
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
				
			Если Выборка.Код <> ДанныеИзЕОСНСИ.Код
				или Выборка.ра_GID <> ДанныеИзЕОСНСИ.ра_GID
				или Выборка.Наименование <> ДанныеИзЕОСНСИ.Наименование
				или Выборка.НаименованиеПолное <> ДанныеИзЕОСНСИ.НаименованиеПолное Тогда 
				
				// обновим реквизиты ЕИ из ЕОС НСИ
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Объект, ДанныеИзЕОСНСИ);
				
				Попытка
					Объект.Записать();
					ВозвращаемоеЗначение = Объект.Ссылка;
				Исключение
					Возврат Неопределено;
				КонецПопытки;
				
			Иначе
				ВозвращаемоеЗначение = Выборка.Ссылка;
			КонецЕсли;	
				
		КонецЦикла;	
		
		Возврат ВозвращаемоеЗначение
		
	КонецЕсли;	
		
КонецФункции

Процедура ВыгрузитьLID(Объект, RequestID)
	
	ВидИнтеграции = Перечисления.ра_ВидыИнтеграций.EOSNSI_MTR;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Сервер","LIDSend_OutService");	
	СтруктураНастроек.Вставить("URI","urn:greenatom.ru:MasterData:MTR");
	СтруктураНастроек.Вставить("Порт","HTTP_Port");
	СтруктураНастроек.Вставить("ВариантАвторизации","МТР");
	
	WS_Ссылка_ХранилищеЗначений = ПолучитьWSСсылку(СтруктураНастроек.URI, СтруктураНастроек.Сервер);
	
	Если WS_Ссылка_ХранилищеЗначений = Неопределено Тогда 
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,ВидИнтеграции, "Ошибка создания сервиса LIDSend_OutService: " + ОписаниеОшибки(),, Истина, Ложь);
		Возврат ;
	КонецЕсли;	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
	WS_Ссылка_ХранилищеЗначений.Получить().Записать(ИмяВременногоФайла);
	
	СтруктураНастроек.Вставить("Определение", Новый WSОпределения(ИмяВременногоФайла));
	
	Попытка
		ТекСервисМТР = Новый WSПрокси(СтруктураНастроек.Определение, СтруктураНастроек.URI, СтруктураНастроек.Сервер, СтруктураНастроек.Порт);
		УстановитьАвторизацию(ТекСервисМТР);
		ТекФабрикаXDTO = ТекСервисМТР.ФабрикаXDTO;
	Исключение
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,ВидИнтеграции, "Ошибка создания сервиса LIDSend_OutService: " + ОписаниеОшибки(),, Истина, Ложь);
		Возврат;
	КонецПопытки;
	
	LIDSendRequest = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("urn:greenatom.ru:MasterData:MTR", "LID"));
	
	LIDSendRequest.GID = Объект.GID;       
	LIDSendRequest.LID = СтрЗаменить(Строка(Объект.Ссылка.УникальныйИдентификатор()), "-", "");
	LIDSendRequest.RequestID = RequestID;
	LIDSendRequest.SystemCode = Константы.ра_КодСистемы1СДляЕОС.Получить();
	LIDSendRequest.TableCode = "MTR";
	
	Попытка
		ТекСервисМТР.LIDSend_Out(LIDSendRequest);	
		ДобавитьЗаписьВЖурналОбмена(Объект.Ссылка,ТекФабрикаXDTO,ВидИнтеграции, "LID по МТР успешно отправлен",ТекСервисМТР.ТочкаПодключения.Местоположение, Ложь, Истина,,,,LIDSendRequest); 
	Исключение
		ошибкаТекст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьЗаписьВЖурналОбмена(Объект.Ссылка,ТекФабрикаXDTO,ВидИнтеграции, "Ошибка при отправке LID: " + ошибкаТекст,ТекСервисМТР.ТочкаПодключения.Местоположение, Истина, Истина,,,,LIDSendRequest);
	КонецПопытки
		
КонецПроцедуры	

#КонецОбласти

#Область КлассификаторМТР
	
Функция ВыполнитьСценарийЗагрузкиКлассификатораMTR(ПакетXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылки", Новый СписокЗначений);
	Результат.Вставить("СтрокоеПредставлениеСсылок", "");
	Результат.Вставить("Результат", "");
	
	
	Если ТипЗнч(ПакетXDTO.MTRClassifierContent) = Тип("СписокXDTO") Тогда       
		Для Каждого Элемент Из ПакетXDTO.MTRClassifierContent Цикл  
			СтруктураВозврата = ЗагрузкаКлассификатораМТР(Элемент);
			Результат.Ссылки.Добавить(СтруктураВозврата.КлассификаторМТР);
			Результат.СтрокоеПредставлениеСсылок = Результат.СтрокоеПредставлениеСсылок + СтруктураВозврата.Наименование + Символы.ПС;
		КонецЦикла;	
		Результат.Результат = "OK";
	Иначе
		СтруктураВозврата = ЗагрузкаКлассификатораМТР(ПакетXDTO.MTRClassifierContent);
		Результат.Ссылки.Добавить(СтруктураВозврата.КлассификаторМТР);
		Результат.Результат = "OK";
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСсылкуКлассификаторМТР(Код, Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ra_KlassifikatorMTR.Ссылка КАК Ссылка,
		|	ra_KlassifikatorMTR.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ra_KlassifikatorMTR КАК ra_KlassifikatorMTR
		|ГДЕ
		|	ra_KlassifikatorMTR.GID_EOSNSI = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ВыборкаДетальныеЗаписи.Наименование <> Наименование
		и ЗначениеЗаполнено(Наименование) Тогда 
		// обновим реквизиты из ЕОС НСИ
		Объект_КлассМТР = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект_КлассМТР.Наименование = Наименование;
		Объект_КлассМТР.Записать();
		
		Возврат Объект_КлассМТР.Ссылка;
		
	КонецЕсли;	
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Функция ЗагрузкаКлассификатораМТР(Контейнер)
	
	Код = Контейнер.GID;
	Наименование = Контейнер.Name;
	
	тз_ИспользуемыеЭлементы = Новый ТаблицаЗначений;
	тз_ИспользуемыеЭлементы.Колонки.Добавить("Код");
	тз_ИспользуемыеЭлементы.Колонки.Добавить("Ссылка");
	
	КлассификаторМТР = ЗагрузитьКлассификаторМТР(Код, Наименование, тз_ИспользуемыеЭлементы);
	
	тз_ИспользуемыеЭлементы.Очистить();
	
	Возврат Новый Структура("КлассификаторМТР, Наименование", КлассификаторМТР, Наименование);
	
КонецФункции	

Функция ЗагрузитьКлассификаторМТР(Код, Наименование, тз_ИспользуемыеЭлементы)
	
	КлассификаторМТР = ПолучитьСсылкуКлассификаторМТР(Код, Наименование); 
	
	Если ЗначениеЗаполнено(КлассификаторМТР) Тогда
		ОбъектКлассификатора = КлассификаторМТР.ПолучитьОбъект();
	Иначе
		ОбъектКлассификатора = Справочники.ra_KlassifikatorMTR.СоздатьЭлемент();
		ОбъектКлассификатора.GID_EOSNSI = Код;
	КонецЕсли;
	
	// обновим название при необходимости
	Если ЗначениеЗаполнено(Наименование)
		и ОбъектКлассификатора.Наименование <> Наименование Тогда 
		ОбъектКлассификатора.Наименование = Наименование;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ОбъектКлассификатора.Родитель) Тогда
		Если СтрДлина(Код) > 2 Тогда
			ОбъектКлассификатора.Родитель = ЗагрузитьКлассификаторМТР(Сред(Код, 1, СтрДлина(Код)-2), "", тз_ИспользуемыеЭлементы);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектКлассификатора.Модифицированность() Тогда
		Попытка
			// запись классификатора
			ОбъектКлассификатора.Записать();
		Исключение
			Возврат Неопределено;
		КонецПопытки;	
		
	КонецЕсли;	
	
	СтрокаТЗ_Используемые = тз_ИспользуемыеЭлементы.Добавить();
	СтрокаТЗ_Используемые.Код = ОбъектКлассификатора.GID_EOSNSI;
	СтрокаТЗ_Используемые.Ссылка = ОбъектКлассификатора.Ссылка;
	
	Возврат ОбъектКлассификатора.Ссылка;
	            	
КонецФункции

#КонецОбласти 

#Область ИнтеграцияSRM

Функция ВыполнитьСценарийЗагрузкиЗапросаПредложения(ОбъектXDTO, Error) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Статус = "ОК";
		
	// Таблица статуса загрузки номенклатуры
	тзНоменклатура = Новый ТаблицаЗначений;
	тзНоменклатура.Колонки.Добавить("ID");
	тзНоменклатура.Колонки.Добавить("SeverityCode");
	тзНоменклатура.Колонки.Добавить("Note");
	тзНоменклатура.Колонки.Добавить("КодНоменклатуры");
	тзНоменклатура.Колонки.Добавить("ItemID");	
	
	Договор = Неопределено;
	
	ЭтоРамочныйДоговор 	= ОбъектXDTO.PurchasingContract.IsFrameContract;
	Если Не ЗначениеЗаполнено(ЭтоРамочныйДоговор) Тогда
		ЭтоРамочныйДоговор = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТаблицаНоменклатуры", тзНоменклатура);
	
	Договор = СоздатьОбновитьДоговор(ОбъектXDTO, Результат, ЭтоРамочныйДоговор);
		
	КодРезультата 	   = ?(НЕ Результат.Ошибка, "S", "E"); 
	ОписаниеРезультата = ?(НЕ Результат.Ошибка, "Успешно", "Ошибочно");  
	Объект = ?(НЕ Результат.Ошибка, Договор, Неопределено);  
	Если Результат.Ошибка Тогда 
		Статус = "IN_WARN"+Символы.ПС+Результат.ТекстОшибки;
	КонецЕсли;
		
	СформироватьИОтправитьПодтверждениеПоЗагрузкеДоговора(ОбъектXDTO, Объект, "", Результат.ТаблицаНоменклатуры, КодРезультата, ОписаниеРезультата);
		
	Возврат Статус;
	
КонецФункции	

Процедура СформироватьИОтправитьПодтверждениеПоЗагрузкеДоговора(ИсходныйОбъект, Договор, НомерДоговора, тзНоменклатура, СтатусЗагрузки, СтатусТекст) Экспорт
	
	Пакет = Новый Структура();
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("URI","urn:ibs.ru:integration:contracts");//urn:ibs.ru:integration:payments 
	СтруктураНастроек.Вставить("Сервер","PurchasingContractSRMReplicationConfirmation_1C8_OutService"); //PurchasesERP_OUT
	СтруктураНастроек.Вставить("Порт","HTTP_Port");
	                                       
	//<Если идет передача сведений о расторжении договора, то выставляем соответствующий вид интеграции>
	ТекстОшибкиНачало = "Ошибка при отправке подтверждения загрузки договора из SRM: ";	
	
	WS_Ссылка_ХранилищеЗначений = ПолучитьWSСсылку(СтруктураНастроек.URI, СтруктураНастроек.Сервер);
	
	Если WS_Ссылка_ХранилищеЗначений = Неопределено Тогда 
		ТекстСообщения  = "Ошибка создания сервиса PurchasingContractSRMReplicationConfirmation_OutService: " + ОписаниеОшибки();
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,Перечисления.ра_ВидыИнтеграций.SRM_Purchases, ТекстСообщения,, Истина, Ложь); 
		Возврат;
	КонецЕсли;	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
	WS_Ссылка_ХранилищеЗначений.Получить().Записать(ИмяВременногоФайла);
	
	СтруктураНастроек.Вставить("Определение", Новый WSОпределения(ИмяВременногоФайла));
	
	Попытка
		ТекСервисSRM = Новый WSПрокси(СтруктураНастроек.Определение, СтруктураНастроек.URI, СтруктураНастроек.Сервер, СтруктураНастроек.Порт);
		УстановитьАвторизацию(ТекСервисSRM);
		ТекФабрикаXDTO = ТекСервисSRM.ФабрикаXDTO;
	Исключение
		ТекСервисSRM = Неопределено;
		ТекФабрикаXDTO = ФабрикаXDTO; //Глобальная фабрика
		
		ТекстСообщения  = "Ошибка создания сервиса PurchasingContractSRMReplicationConfirmation_OutService: " + ОписаниеОшибки();
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,Перечисления.ра_ВидыИнтеграций.SRM_Purchases, ТекстСообщения,, Истина, Ложь); 
		
		Возврат;
	КонецПопытки;
	
	ОбъектXDTO = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "PurgContrSRMRplctnConfMsg"));
	ОбъектXDTO_BusinessDocumentMessageHeader 	= ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "BusinessDocumentMessageHeader"));
	ОбъектXDTO_NOSC_Log 						= ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "NOSC_Log"));
	ОбъектXDTO_PurgContrSRMRplctnConfPurgContr 	= ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "PurgContrSRMRplctnConfPurgContr"));

	ОбъектXDTO.MessageHeader 		= ОбъектXDTO_BusinessDocumentMessageHeader;
	ОбъектXDTO.PurchasingContract 	= ОбъектXDTO_PurgContrSRMRplctnConfPurgContr;
	ОбъектXDTO.Log					= ОбъектXDTO_NOSC_Log;
	
	// Для передачи даты-времени в SAP в формате UTC необходимо в конце приписывать символ Z.
	// Однако Z не записывается платформой 1С в исходящее сообщение xml и его приходится 
	// добавлять позже через xslt-преобразование в WPA
	ТипID = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "BusinessDocumentMessageID"));
	ТипID.__content = СокрЛП(Строка(НомерДоговора))+Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss");
	ОбъектXDTO.MessageHeader.ID						= ТипID;
	ОбъектXDTO.MessageHeader.CreationDateTime 		= ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "GLOBAL_DateTime"), Формат(ТекущаяУниверсальнаяДата(), "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
	ОбъектXDTO.MessageHeader.SenderBusinessSystemID = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "BusinessSystemID"), Константы.ра_КодСистемы1СДляЕОС.Получить());
	
	ОбъектXDTO.PurchasingContract.ID										= ИсходныйОбъект.PurchasingContract.ID;
	ОбъектXDTO.PurchasingContract.LegalContractID                           = ИсходныйОбъект.PurchasingContract.LegalContractID;
	ОбъектXDTO.PurchasingContract.ProcessingTypeCode                        = ИсходныйОбъект.PurchasingContract.ProcessingTypeCode;
	ОбъектXDTO.PurchasingContract.ValidityPeriod                            = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "UPPEROPEN_DatePeriod")); 
	ОбъектXDTO.PurchasingContract.CurrencyCode                              = ИсходныйОбъект.PurchasingContract.CurrencyCode;
	ОбъектXDTO.PurchasingContract.ExchangeRateThresholdExistsIndicator      = ИсходныйОбъект.PurchasingContract.ExchangeRateThresholdExistsIndicator;
	ОбъектXDTO.PurchasingContract.HierarchyExistsIndicator                  = ИсходныйОбъект.PurchasingContract.HierarchyExistsIndicator;
	ОбъектXDTO.PurchasingContract.ClosedIndicator                           = ИсходныйОбъект.PurchasingContract.ClosedIndicator;
	ОбъектXDTO.PurchasingContract.SellerParty                               = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "PurgContrSRMRplctnConfSlrPty"));
	ОбъектXDTO.PurchasingContract.SellerParty.InternalID					= ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "PartyInternalID"));
	ОбъектXDTO.PurchasingContract.SellerParty.InternalID.__content			= ИсходныйОбъект.PurchasingContract.SellerParty.InternalID.__content;
	ОбъектXDTO.PurchasingContract.ResponsiblePurchasingOrganisationParty    = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "PurgContrSRMRplctnConfRespPurgOrgPty"));
	ОбъектXDTO.PurchasingContract.ResponsiblePurchasingOrganisationParty.InternalID = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "NOSC_PartyInternalID"), ИсходныйОбъект.PurchasingContract.ResponsiblePurchasingOrganisationParty.InternalID);
	ОбъектXDTO.PurchasingContract.ResponsiblePurchasingGroupParty           = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "PurgContrSRMRplctnConfRespPurgGrpPty"));//ИсходныйОбъект.PurchasingContract.ResponsiblePurchasingGroupParty;
	ОбъектXDTO.PurchasingContract.ResponsiblePurchasingGroupParty.InternalID = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "NOSC_PartyInternalID"), ИсходныйОбъект.PurchasingContract.ResponsiblePurchasingGroupParty.InternalID);
	
	Если ЗначениеЗаполнено(СокрЛП(Строка(НомерДоговора))) Тогда 
		ОбъектXDTO.PurchasingContract.DMSCardNumber 							= СокрЛП(Строка(НомерДоговора))+"_"+Формат(ТекущаяДата(),"ДФ=yyyy");
	Иначе
		ОбъектXDTO.PurchasingContract.DMSCardNumber 							= "";
	КонецЕсли;
	ОбъектXDTO.PurchasingContract.StatusCode								= Лев(СтатусТекст, 20);
	
	ОбъектXDTO.Log.MaximumLogItemSeverityCode = Лев(СтатусЗагрузки, 1);
	Для каждого текСтрока Из тзНоменклатура Цикл
		LogItem = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("http://sap.com/xi/APPL/Global2", "NOSC_LogItem"));
		LogItem.TypeID 			= текСтрока.ItemID;
		LogItem.SeverityCode 	= Лев(текСтрока.SeverityCode, 1); // "S" - Success, "W" - Warning, "E" - Error
		LogItem.Note 			= Лев(текСтрока.Note, 200);
		ОбъектXDTO.Log.Item.Добавить(LogItem);
	КонецЦикла;
	
	Попытка          
		ТекСервисSRM.PurchasingContractSRMReplicationConfirmation_1C8_Out(ОбъектXDTO);
		ДобавитьЗаписьВЖурналОбмена(Договор,ТекФабрикаXDTO,Перечисления.ра_ВидыИнтеграций.SRM_Purchases, "Подтверждение о загрузке договора успешно отправлено",ТекСервисSRM.ТочкаПодключения.Местоположение, Ложь, Истина); 
	Исключение
		ТекстОшибки = ТекстОшибкиНачало + ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации("Интеграция.SRM.ОтправкаПодтверждения", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ra_Dogovory, Договор, ТекстОшибки);
		ДобавитьЗаписьВЖурналОбмена(Договор,ТекФабрикаXDTO,Перечисления.ра_ВидыИнтеграций.SRM_Purchases, ТекстОшибки,ТекСервисSRM.ТочкаПодключения.Местоположение, Истина, Ложь); 
	КонецПопытки;
КонецПроцедуры

Функция СоздатьОбновитьДоговор(ОбъектXDTO, Результат, Рамка = Ложь)
	
	ТипЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15));
	ТипЧисло15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ТипЧисло15_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	
	PurchasingContract = ОбъектXDTO.PurchasingContract;
	
	ВидИнтеграции = Перечисления.ра_ВидыИнтеграций.SRM_Purchases;
	
	КодSRM_Договора = PurchasingContract.ID;
	
	Попытка
		GID_Поставщик = Число(PurchasingContract.SellerParty.InternalID.__content);
	Исключение
		GID_Поставщик = 0;
	КонецПопытки;
	
	Попытка
		GID_Покупателя = Число(PurchasingContract.ResponsiblePurchasingOrganisationParty.InternalID);
	Исключение
		GID_Покупателя = 0;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Поставщик.Ссылка КАК Поставщик,
	               |	Покупатель.Ссылка КАК Покупатель,
	               |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	               |ИЗ
	               |	(ВЫБРАТЬ ПЕРВЫЕ 1
	               |		Контрагенты.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Справочник.Контрагенты КАК Контрагенты
	               |	ГДЕ
	               |		Контрагенты.ра_GID = &раGIDПоставщика
	               |		И Контрагенты.ра_GID <> 0) КАК Поставщик
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			Контрагенты.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.Контрагенты КАК Контрагенты
	               |		ГДЕ
	               |			Контрагенты.ра_GID = &раGIDПокупателя
	               |			И Контрагенты.ра_GID <> 0) КАК Покупатель
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_Dogovory КАК ДоговорыКонтрагентов
	               |		ПО Поставщик.Ссылка = ДоговорыКонтрагентов.Postavschik
	               |			И (ДоговорыКонтрагентов.ID_SRM = &КодSRM)
	               |			И (ДоговорыКонтрагентов.ID_SRM <> 0)";
	
	Запрос.УстановитьПараметр("раGIDПоставщика", GID_Поставщик);
	Запрос.УстановитьПараметр("раGIDПокупателя", GID_Покупателя);
	Запрос.УстановитьПараметр("КодSRM", КодSRM_Договора);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		// не нашли ни одного контрагента по GID (ни поставщика, ни покупателя)
		
		Результат.Вставить("Ошибка"		, Истина);
		Результат.Вставить("ТекстОшибки", "Загрузка спецификации рамочной заявки не произведена. Не найдены контрагенты по GID: " + Строка(GID_Поставщик) + ", " + Строка(GID_Поставщик));
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если не ЗначениеЗаполнено(Выборка.Поставщик) Тогда 
		Результат.Вставить("Ошибка"		, Истина);
		Результат.Вставить("ТекстОшибки", "Загрузка спецификации рамочной заявки не произведена. Не найден контрагент по GID: " + Строка(GID_Поставщик));
		
		Возврат Неопределено;
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(Выборка.Покупатель) Тогда 
		Результат.Вставить("Ошибка"		, Истина);
		Результат.Вставить("ТекстОшибки", "Загрузка спецификации рамочной заявки не произведена. Не найден контрагент по GID: " + Строка(GID_Покупателя));
		
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаДоговор = Выборка.ДоговорКонтрагента;
	
	Если не ЗначениеЗаполнено(СсылкаНаДоговор) Тогда
		Договор = Справочники.ra_Dogovory.СоздатьЭлемент();
		Договор.УстановитьНовыйКод();
		Договор.Postavschik = Выборка.Поставщик;
		Договор.Pokupatel   = Выборка.Покупатель;
		
		Договор.ID_SRM = КодSRM_Договора;
		Комментарий = "Загружено из SAP SRM " + ТекущаяДата() + ". ";
	Иначе
		Договор = СсылкаНаДоговор.ПолучитьОбъект();
	Конецесли;	

	Договор.Наименование    = "Договор № " + PurchasingContract.ExternalContractNumber + " от " + Формат(Дата(СтрЗаменить(PurchasingContract.ReleaseDate, "-","")), "ДФ=dd.MM.yyyy");
	Договор.DataPodpisaniya = Дата(СтрЗаменить(PurchasingContract.ReleaseDate, "-",""));
	Договор.Rastorgnut      = PurchasingContract.ClosedIndicator;
	
	ВалютаКУстановке = ОпределитьВалюту(PurchasingContract.CurrencyCode);
	Если ВалютаКУстановке <> Неопределено 
		и ВалютаКУстановке <> Договор.Valyuta Тогда 
		Договор.Valyuta = ВалютаКУстановке;
	ИначеЕсли ВалютаКУстановке = Неопределено Тогда 
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,Перечисления.ра_ВидыИнтеграций.SRM_Purchases, "Не удалось найти валюту (в справочнике и классификаторе) по коду " + строка(PurchasingContract.CurrencyCode),, Истина, Ложь); 
	КонецЕсли;	
		
	Договор.PredmetDogovora = PurchasingContract.LotTitle;
	Договор.Ramka	  = Рамка;
	Договор.SummaSNDS = ТипЧисло15_2.ПривестиЗначение(PurchasingContract.TargetAmount.__content); 
	Договор.SummaNDS  = ТипЧисло15_2.ПривестиЗначение(PurchasingContract.VATContractSum); 
	Договор.DeystvitelnoS      = PurchasingContract.ValidityPeriod.StartDate;
	Договор.DeystvitelnoPo     = ?(год(PurchasingContract.ValidityPeriod.EndDate) = 9999, Неопределено, PurchasingContract.ValidityPeriod.EndDate);
	Договор.VneshniyNomer 	   = PurchasingContract.ExternalContractNumber;
	Договор.NomerDogovoraEOSDO = PurchasingContract.EOSDOContractNumber;
	
	ЭтоДопСоглашение = PurchasingContract.OperationTypeCode = "ZCTD";
	
	// заполнение спецификации к договору
	
	Договор.Tovary.Очистить();
	
	ДанныеПоСпецификацииИзSRM = Новый ТаблицаЗначений;
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("GIDМТР",     ТипЧисло15);
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("GIDЕИ");
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("НаименованиеМТР");
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("Количество", ТипЧисло15_3);
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("ЦенаСНДС",   ТипЧисло15_2);
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("СуммаСНДС",  ТипЧисло15_2);
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("СуммаНДС",   ТипЧисло15_2);
	ДанныеПоСпецификацииИзSRM.Колонки.Добавить("СтавкаНДС");
	
	СписокGID_ЕИ = Новый СписокЗначений;
	СписокGID = Новый СписокЗначений;
	
	Если НЕ ЭтоДопСоглашение Тогда
		Если ТипЗнч(PurchasingContract.Item) = Тип("СписокXDTO") Тогда
			
			Для Каждого Элемент Из PurchasingContract.Item Цикл	         
				
				СтрокаСпецификацииИзSRM = ДанныеПоСпецификацииИзSRM.Добавить();
				
				Если Элемент.Product.InternalID.Свойства().Получить("__content") <> Неопределено
					И ЗначениеЗаполнено(Элемент.Product.InternalID.__content) Тогда
					
					GID = ТипЧисло15.ПривестиЗначение(Элемент.Product.InternalID.__content);
					
					Если СписокGID.НайтиПоЗначению(GID) = Неопределено Тогда 
						СписокGID.Добавить(GID);
					КонецЕсли;	
					
					СтрокаСпецификацииИзSRM.GIDМТР = GID; 
				КонецЕсли;	
				
				СтрокаСпецификацииИзSRM.НаименованиеМТР = Элемент.Description.__content;	
				СтрокаСпецификацииИзSRM.GIDЕИ = Элемент.TargetQuantity.unitCode;
				
				Если СписокGID_ЕИ.НайтиПоЗначению(Элемент.TargetQuantity.unitCode) = Неопределено Тогда 
					СписокGID_ЕИ.Добавить(Элемент.TargetQuantity.unitCode);
				КонецЕсли;
				
				// ставка НДС
				СтавкаНДС = ПолучитьСтавкуНДС(Элемент.VATRate);
				
				СтрокаСпецификацииИзSRM.Количество = ТипЧисло15_3.ПривестиЗначение(Элемент.TargetQuantity.__content);
				СтрокаСпецификацииИзSRM.ЦенаСНДС   = ТипЧисло15_2.ПривестиЗначение(Элемент.PriceIncludingVAT);
				СтрокаСпецификацииИзSRM.СуммаСНДС  = ТипЧисло15_2.ПривестиЗначение(Элемент.TargetAmount.__content);
				СтрокаСпецификацииИзSRM.СуммаНДС   = ТипЧисло15_2.ПривестиЗначение(Элемент.VATTotalCost);
				СтрокаСпецификацииИзSRM.СтавкаНДС  = СтавкаНДС;
				
			КонецЦикла;	
						
		Иначе
			Элемент = PurchasingContract.Item;
			СтрокаСпецификацииИзSRM = ДанныеПоСпецификацииИзSRM.Добавить();
			Если Элемент.Product.InternalID.Свойства().Получить("__content") <> Неопределено
				И ЗначениеЗаполнено(Элемент.Product.InternalID.__content) Тогда
				
				GID = ТипЧисло15.ПривестиЗначение(Элемент.Product.InternalID.__content);
								
				Если СписокGID.НайтиПоЗначению(GID) = Неопределено Тогда 
					СписокGID.Добавить(GID);
				КонецЕсли;
				
				СтрокаСпецификацииИзSRM.GIDМТР = GID;
				
				Если СписокGID_ЕИ.НайтиПоЗначению(Элемент.TargetQuantity.unitCode) = Неопределено Тогда 
					СписокGID_ЕИ.Добавить(Элемент.TargetQuantity.unitCode);
				КонецЕсли;
				
			КонецЕсли;
			СтрокаСпецификацииИзSRM.НаименованиеМТР = Элемент.Description.__content;
			СтрокаСпецификацииИзSRM.GIDЕИ = Элемент.TargetQuantity.unitCode;
			// ставка НДС
			СтавкаНДС = ПолучитьСтавкуНДС(Элемент.VATRate);
			
			СтрокаСпецификацииИзSRM.Количество = ТипЧисло15_3.ПривестиЗначение(Элемент.TargetQuantity.__content);
			СтрокаСпецификацииИзSRM.ЦенаСНДС   = ТипЧисло15_2.ПривестиЗначение(Элемент.PriceIncludingVAT);
			СтрокаСпецификацииИзSRM.СуммаСНДС  = ТипЧисло15_2.ПривестиЗначение(Элемент.TargetAmount.__content);
			СтрокаСпецификацииИзSRM.СуммаНДС   = ТипЧисло15_2.ПривестиЗначение(Элемент.VATTotalCost);
			СтрокаСпецификацииИзSRM.СтавкаНДС  = СтавкаНДС;
			
		КонецЕсли;
	Конецесли;
	
	ДанныеПоСпецификацииИзSRM.Свернуть("GIDМТР, GIDЕИ, НаименованиеМТР, ЦенаСНДС, СтавкаНДС", "Количество, СуммаСНДС, СуммаНДС");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
		|	КлассификаторЕдиницИзмерения.ра_GID КАК GID
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.ра_GID В(&GID)";
	
	Запрос.УстановитьПараметр("GID", СписокGID_ЕИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатЕИ = РезультатЗапроса.Выгрузить();	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ra_MTRiO.Ссылка КАК Ссылка,
		|	ra_MTRiO.GID КАК GID,
		|	ra_MTRiO.BazovayaEI КАК BazovayaEI
		|ИЗ
		|	Справочник.ra_MTRiO КАК ra_MTRiO
		|ГДЕ
		|	ra_MTRiO.GID В(&GID)";
	
	Запрос.УстановитьПараметр("GID", СписокGID);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	               	
	Для Каждого СтрокаСпецификации Из ДанныеПоСпецификацииИзSRM Цикл 
		
		Если СтрокаСпецификации.GIDМТР <> 0 Тогда 
			
			НайденнаяСтрока = ТаблицаРезультат.Найти(СтрокаСпецификации.GIDМТР, "GID");
			Если НайденнаяСтрока <> Неопределено Тогда 
				
				СтрокаТовары = Договор.Tovary.Добавить();
				СтрокаТовары.MTRiO = НайденнаяСтрока.Ссылка;
				ЕИ_Ссылка = ТаблицаРезультатЕИ.Найти(СтрокаСпецификации.GIDЕИ);
				СтрокаТовары.EI = ?(ЕИ_Ссылка = Неопределено, НайденнаяСтрока.BazovayaEI, ЕИ_Ссылка.Ссылка);
			    								
			Иначе	
				                              				
				СтрокаОшибок = Результат.ТаблицаНоменклатуры.Добавить();
				СтрокаОшибок.ID	 		  = СтрокаСпецификации.GIDМТР;
				СтрокаОшибок.ItemID 	  = СтрокаСпецификации.GIDМТР;
				СтрокаОшибок.SeverityCode = "E";
				СтрокаОшибок.Note 		  = "Не найдена номенклатура по GID: " + строка(СтрокаСпецификации.GIDМТР);
				
				СтрокаТовары = Договор.Tovary.Добавить();
				
			КонецЕсли;	
			
		Иначе		
			
			СтрокаТовары = Договор.Tovary.Добавить();
			
		КонецЕсли;	
		
		СтрокаТовары.NaimenovaniePozicii = СтрокаСпецификации.НаименованиеМТР;
		СтрокаТовары.Kolichestvo = СтрокаСпецификации.Количество;
		СтрокаТовары.Cena = СтрокаСпецификации.ЦенаСНДС;
		СтрокаТовары.SummaSNDS = СтрокаСпецификации.СуммаСНДС;
		СтрокаТовары.StavkaNDS = СтрокаСпецификации.СтавкаНДС;
		СтрокаТовары.SummaNDS = СтрокаСпецификации.СуммаНДС;
		   
	КонецЦикла;	
	
    Попытка
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать();
		Результат.Вставить("СсылкаНаДоговор", Договор.Ссылка);
		Результат.Вставить("ТаблицаНоменклатура", Результат.ТаблицаНоменклатуры);
		
		ДобавитьЗаписьВЖурналОбмена(Результат.СсылкаНаДоговор, ФабрикаXDTO, Перечисления.ра_ВидыИнтеграций.SRM_Purchases, "Договор загружен успешно",, Ложь, Истина,,,,ОбъектXDTO); 
		
	Исключение
		ТекстОшибки = "Ошибка при записи договора загруженного из SRM: " + ПодробноеПредставлениеОшибки(ОписаниеОшибки());
		Результат.Вставить("Ошибка"		, Истина);
		Результат.Вставить("ТекстОшибки", "Загрузка спецификации рамочной заявки не произведена. "+ ТекстОшибки);
		
		Если Результат.ТаблицаНоменклатуры.Количество() = 0 Тогда 
			НовНом = Результат.ТаблицаНоменклатуры.Добавить();
			НовНом.ItemID 			= "0";
			НовНом.SeverityCode 	= "E";
			НовНом.Note = Результат.ТекстОшибки;
		КонецЕсли;	
		
		ДобавитьЗаписьВЖурналОбмена(Неопределено, ФабрикаXDTO, Перечисления.ра_ВидыИнтеграций.SRM_Purchases, "Ошибка создания договора: " + Результат.ТекстОшибки,, Ложь, Истина,,,,ОбъектXDTO); 
				
		Возврат Неопределено;
		
	КонецПопытки;
			
	Возврат Результат.СсылкаНаДоговор;
	
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДССтрока) 
	
	Если СтавкаНДССтрока = "18" Тогда 
		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли СтавкаНДССтрока = "10" Тогда 	
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	Иначе	
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции	

Функция ОпределитьВалюту(КодЛатинский)
	//+
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Валюты.Ссылка
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |ГДЕ
	               |	Валюты.Наименование = &КодЧисловой";
	
	Запрос.УстановитьПараметр("КодЧисловой", КодЛатинский);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		
		// пытаемся создать элемент из классификатора
		КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
		
		КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
		ЗаписьОКВ = КлассификаторТаблица.Найти(КодЛатинский, "Code"); 
		Если ЗаписьОКВ = Неопределено Тогда
			Возврат Неопределено; // нет в классификаторе
		КонецЕсли;
		
		НоваяСтрока 						  = Справочники.Валюты.СоздатьЭлемент();
		НоваяСтрока.Код         			  = ЗаписьОКВ.Code;
		НоваяСтрока.Наименование        	  = ЗаписьОКВ.CodeSymbol;
		НоваяСтрока.НаименованиеПолное        = ЗаписьОКВ.Name;
		Если ЗаписьОКВ.RBCLoading Тогда
			НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
		Иначе
			НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
		КонецЕсли;
		НоваяСтрока.ПараметрыПрописиНаРусском = ЗаписьОКВ.NumerationItemOptions;
		НоваяСтрока.Записать();
		Возврат НоваяСтрока.Ссылка;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияSRM_ВыгрузкаНесоответствий

Процедура ВыполнитьСценарийПодготовитьДанныеОНесоответствияхДляВыгрузки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидИнтеграции = Перечисления.ра_ВидыИнтеграций.SRM_Nonconformities;
	СлужебныеУзлы = Новый СписокЗначений;
	СписокВсехУзлов   = Новый СписокЗначений;
	Error = "";
	
	УзлыПланаОбменаСЕОСЗакупки = ра_ОбщегоНазначенияПовтИсп.УзлыПланаОбменаДляЕОСЗакупки();
	
	Если УзлыПланаОбменаСЕОСЗакупки.Количество() = 0 Тогда 
		Error = "Не выполнены настройки обмена с ЕОС-Закупки";
		ДобавитьЗаписьВЖурналОбмена(,,ВидИнтеграции, Error,,Истина,Ложь,,,,);
		Возврат;
	КонецЕсли;	
	
	// поставим объектную блокироку и проверку на наличие блокировки, установленной в параллельной сессии. Она сигнализирует о том, что параллельно осуществляется обмен и текущий запрос выполнять не нужно. 
	Для Каждого Узел из УзлыПланаОбменаСЕОСЗакупки Цикл 
		ОбъектСлужебныйУзел = Узел.СлужебныйУзел.ПолучитьОбъект();
		Если ОбъектСлужебныйУзел.Заблокирован() Тогда 
			Error = "Объекты будут выгружены в следующей итерации, т.к. в данный момент " + строка(ТекущаяДата()) + " осуществляется выгрузка данных в параллельном сеансе.";
			ДобавитьЗаписьВЖурналОбмена(,,ВидИнтеграции, Error,,Истина,Ложь,,,,);
			Возврат;
		КонецЕсли;
		
		ОбъектСлужебныйУзел.Заблокировать();
		
	КонецЦикла;	
	
	// отдаем массив узлов, т.к. изменения могут быть в служебном и основном узле
	МассивРезультатовЗапроса = ПолучитьДанныеДляВыгрузкиЗапросом(УзлыПланаОбменаСЕОСЗакупки);
	
	ДанныеРаботыСПланомОбмена = МассивРезультатовЗапроса[МассивРезультатовЗапроса.Количество()-1];
	ДанныеДляВыгрузкиРезультатЗапроса = МассивРезультатовЗапроса[МассивРезультатовЗапроса.Количество()-2];
	
	Если ДанныеДляВыгрузкиРезультатЗапроса.Пустой() Тогда 
		Error = "Отсутствуют данные для выгрузки.";
		ДобавитьЗаписьВЖурналОбмена(,,ВидИнтеграции, Error,,Истина,Ложь,,,,);
		Возврат;
	КонецЕсли;	
	
	// перенос зарегистрированных изменений в служебный узел из основного
	ДокументыПоКоторымНеУдалосьВыполнитьПереносИзмененийМеждуУзлами = Новый Массив;
	ПеренестиИзмененияИзОсновногоУзлаВСлужебный(ДанныеРаботыСПланомОбмена, ДокументыПоКоторымНеУдалосьВыполнитьПереносИзмененийМеждуУзлами, УзлыПланаОбменаСЕОСЗакупки);
	
	ТекСервисSRM = СоздатьСервисЕОСЗакупки(Error);
	ТекФабрикаXDTO = ТекСервисSRM.ФабрикаXDTO;
	
	Если ТекСервисSRM = Неопределено Тогда 
		// ошибка в Error уже есть
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьИОтправитьПакетВЕОСЗакупки(ТекФабрикаXDTO, ДанныеДляВыгрузкиРезультатЗапроса, ВидИнтеграции, ТекСервисSRM, УзлыПланаОбменаСЕОСЗакупки);
	
КонецПроцедуры	

Процедура ПеренестиИзмененияИзОсновногоУзлаВСлужебный(РезультатЗапроса, ДокументыПоКоторымНеУдалосьВыполнитьПереносИзмененийМеждуУзлами, УзлыПланаОбменаСЕОСЗакупки)
	
	ВыборкаУровеньДокументНС_РаботаСПланомОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУровеньДокументНС_РаботаСПланомОбмена.Следующий() Цикл 
		
		МассивУзлов = Новый Массив;
		МассивНовыхУзлов = Новый Массив;
		
		ВыборкаДетЗаписи_РаботаСПланомОбмена = ВыборкаУровеньДокументНС_РаботаСПланомОбмена.Выбрать();
		Пока ВыборкаДетЗаписи_РаботаСПланомОбмена.Следующий() Цикл 
			
			Если МассивУзлов.Найти(ВыборкаДетЗаписи_РаботаСПланомОбмена.Узел) = Неопределено Тогда 
				МассивУзлов.Добавить(ВыборкаДетЗаписи_РаботаСПланомОбмена.Узел);
				
				СтрокаУзлов = УзлыПланаОбменаСЕОСЗакупки.Найти(ВыборкаДетЗаписи_РаботаСПланомОбмена.Узел, "ОбычныйУзел");
				Если СтрокаУзлов <> Неопределено Тогда 
					МассивНовыхУзлов.Добавить(СтрокаУзлов.СлужебныйУзел);	
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если МассивУзлов.Количество() = 0 Тогда 
			// по данному объекту зарегистрированные изменения уже находятся в служебном узле
			Продолжить;
		КонецЕсли;	
		
		Попытка 
			НачатьТранзакцию();
			
			ПланыОбмена.УдалитьРегистрациюИзменений(массивУзлов, ВыборкаУровеньДокументНС_РаботаСПланомОбмена.ДокументНС);
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивНовыхУзлов, ВыборкаУровеньДокументНС_РаботаСПланомОбмена.ДокументНС);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			// не удалось перезаписать изменения в служебный узел, выгрузку этого объекта не делаем 
			ДокументыПоКоторымНеУдалосьВыполнитьПереносИзмененийМеждуУзлами.Добавить(ВыборкаУровеньДокументНС_РаботаСПланомОбмена.ДокументНС);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьИОтправитьПакетВЕОСЗакупки(ТекФабрикаXDTO, ДанныеДляВыгрузкиРезультатЗапроса, ВидИнтеграции, ТекСервисSRM, УзлыПланаОбменаСЕОСЗакупки)
	
	АдресЕОСК = Константы.ра_ИнтернетАдресЕОСК.Получить();
	
	ВыборкаУровеньИмяСистемы = ДанныеДляВыгрузкиРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУровеньИмяСистемы.Следующий() Цикл 
	
		Mismatch      = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("urn:greenatom.ru:Procurement:EosQuality:Mismatch", "Mismatch_Out"));
		CorrelationId = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("urn:greenatom.ru:Procurement:EosQuality:Mismatch", "CorrelationId"));
		Mismatch_body = ТекФабрикаXDTO.Создать(ТекФабрикаXDTO.Тип("urn:greenatom.ru:Procurement:EosQuality:Mismatch", "Mismatch_body"));
		
		// данные об идентификаторах
		MessageId = Строка(Новый УникальныйИдентификатор);
		CorrelationId.MessageId = СтрЗаменить(MessageId, "-", "");
		CorrelationId.TargetSystem = ВыборкаУровеньИмяСистемы.ИмяСистемыПолучателя;
		Mismatch.CorrelationId = CorrelationId;
		
		ВыгруженныеДанныеДанныеСтрокой = "";
		ТекстОшибки = "";
		ВыгруженныеВПакетОбменаОбъекты = Новый Массив; // чтобы отработать случай, когда в пакет попали не все объекты, предназначенные для выгрузки
		
		ВыборкаУровеньДокументНС = ВыборкаУровеньИмяСистемы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУровеньДокументНС.Следующий() Цикл 
			
			Попытка // нужна, чтобы в случае возникновения ошибки в цикле 
				
				Mismatches = ТекФабрикаXDTO.Создать(Mismatch_body.свойства().Получить("Mismatch").Тип);
				
				НомерНС = СокрЛП(ВыборкаУровеньДокументНС.НомерНС);
				Если ЗначениеЗаполнено(ВыборкаУровеньДокументНС.ВнутреннийНомерНС) Тогда 
					НомерНС = НомерНС + ", №(внутр) " + СокрЛП(ВыборкаУровеньДокументНС.ВнутреннийНомерНС);	
				КонецЕсли;	
				
				Mismatches.DateMismatch = ВыборкаУровеньДокументНС.ДатаВыявленияНС;
				Mismatches.ID 			= НомерНС;
				Mismatches.GUID 		= СтрЗаменить(Строка(ВыборкаУровеньДокументНС.ДокументНС.УникальныйИдентификатор()), "-", "");
				
				Reasons = ТекФабрикаXDTO.Создать(Mismatches.Свойства().Получить("Reasons").Тип);
				
				Attachments = ТекФабрикаXDTO.Создать(Mismatches.Свойства().Получить("Attachments").Тип); 
				
				СписокКодовДоговора = Новый Массив;
				
				СписокВложенийКНС = Новый Массив;
				
				ВыгруженныеДанныеДанныеСтрокой = ВыгруженныеДанныеДанныеСтрокой + ВыборкаУровеньДокументНС.ПредставлениеДокументаНС + Символы.ПС;
				
				ВыборкаКодПричины = ВыборкаУровеньДокументНС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаКодПричины.Следующий() Цикл 
					
					Reason = ТекФабрикаXDTO.Создать(Reasons.Свойства().Получить("Reason").Тип);
					Если ВыборкаКодПричины.КодПричины <> 0 Тогда 
						Reason.IdReason	  = СокрЛП(ВыборкаКодПричины.КодПричины);
					КонецЕсли;	
						
					ЗаписалиШапкуПричины = Ложь;
					
					Events = ТекФабрикаXDTO.Создать(Reason.Свойства().Получить("Events").Тип);
					
					ВыборкаКоррДействие = ВыборкаКодПричины.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаКоррДействие.Следующий() Цикл 
						
						ЗаписалиКоррДействия = Ложь;
						
						Если ВыборкаКоррДействие.НомерКД <> "" Тогда 
							
							Event = ТекФабрикаXDTO.Создать(Events.Свойства().Получить("Event").Тип);
							Event.IDEvent   = СокрЛП(ВыборкаКоррДействие.НомерКД);
							Event.FactDate  = ВыборкаКоррДействие.ФактическийСрокКД;
							Event.PlanDate  = ВыборкаКоррДействие.ПлановыйСрокКД;
							
						КонецЕсли;	
							
						ВыборкаДетЗаписи = ВыборкаКоррДействие.Выбрать();
						Пока ВыборкаДетЗаписи.Следующий() Цикл 
							
							// детальные записи по договорам
							Если СписокКодовДоговора.Найти(ВыборкаДетЗаписи.DogovorID_SRM) = Неопределено Тогда 
								Contract = ТекФабрикаXDTO.Создать(Mismatches.Свойства().получить("Contracts").Тип);
								Contract.IDContract = СокрЛП(ВыборкаДетЗаписи.DogovorID_SRM);
								
								Mismatches.Contracts.Добавить(Contract);
								
								СписокКодовДоговора.Добавить(ВыборкаДетЗаписи.DogovorID_SRM);
								
							КонецЕсли;	
							
							// несоответствие (строка неогр длины)
							Mismatches.Name			= СокрЛП(ВыборкаДетЗаписи.ОписаниеНС);	
							
							// причины (строка неогр длины)
							Если Не ЗаписалиШапкуПричины
								и ЗначениеЗаполнено(ВыборкаДетЗаписи.Причина) Тогда 
								Reason.NameReason = СокрЛП(ВыборкаДетЗаписи.Причина);
								
								ЗаписалиШапкуПричины = Истина;
							КонецЕсли;	
							
							// корректирующие действия (строка неогр длины)
							Если Не ЗаписалиКоррДействия
								И ЗначениеЗаполнено(ВыборкаДетЗаписи.НомерКД) Тогда  
								
								Event.NameEvent = СокрЛП(ВыборкаДетЗаписи.ОписаниеКД);
								
								ЗаписалиКоррДействия = Истина;
								
								ВыгруженныеДанныеДанныеСтрокой = ВыгруженныеДанныеДанныеСтрокой + ВыборкаДетЗаписи.ПредставлениеКД + Символы.ПС;	
								
							КонецЕсли;	
							
							// вложения 
							Если ЗначениеЗаполнено(ВыборкаДетЗаписи.ФайлВложения)
								и СписокВложенийКНС.Найти(ВыборкаДетЗаписи.ФайлВложения) = Неопределено Тогда 
								
								Attachment = ТекФабрикаXDTO.Создать(Attachments.Свойства().Получить("Attachment").Тип);							
								Attachment.NameAttachment = ВыборкаДетЗаписи.НаименованиеФайлаВложения + "." + ВыборкаДетЗаписи.РасширениеФайлаВложения;
								Attachment.RefAttachment = АдресЕОСК + "?guid=" + строка(ВыборкаДетЗаписи.ФайлВложения.УникальныйИдентификатор()); // временно, нужно будет уточнить в соответствии с задачей - какой гуид отдавать
								Attachments.Attachment.Добавить(Attachment);
								
								СписокВложенийКНС.Добавить(ВыборкаДетЗаписи.ФайлВложения);
								
							КонецЕсли;	
							
						КонецЦикла;	
						
						Если ЗаписалиКоррДействия Тогда 
							Events.Event.Добавить(Event);
						КонецЕсли;	
						
					КонецЦикла;
					
					Если Events.Event.Количество()>0 Тогда 
						Reason.Events = Events;
					КонецЕсли;	
					
					Если ЗаписалиШапкуПричины Тогда 
						Reasons.Reason.Добавить(Reason);
					КонецЕсли;	
					
				КонецЦикла;	
				
				Mismatches.Reasons = Reasons;
				Mismatches.Attachments = Attachments;
				
				Mismatch_body.Mismatch.Добавить(Mismatches);
				
				ВыгруженныеВПакетОбменаОбъекты.Добавить(ВыборкаУровеньДокументНС.ДокументНС);
								
			Исключение
				
				// просто пропускаем объект, выгрузим в следующий раз
				ТекстОшибки = ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС;
				
			КонецПопытки;
			
		КонецЦикла;	
		
		Mismatch.Mismatchs = Mismatch_body;
		
		Если Mismatch_body.Mismatch.Количество() = 0 Тогда 
			
			ТекстОшибки = ТекстОшибки + "Отсутствут данные для выгрузки.";	
			
		КонецЕсли;	
		
		РезультатыЗаполненияОбъектаXDTO = Новый Структура("Mismatch, ВыгруженныеДанныеДанныеСтрокой, ВыгруженныеВПакетОбменаОбъекты, ТекстОшибки", Mismatch, ВыгруженныеДанныеДанныеСтрокой, ВыгруженныеВПакетОбменаОбъекты, ТекстОшибки);
		
		Если Не ПустаяСтрока(РезультатыЗаполненияОбъектаXDTO.ТекстОшибки) Тогда 
			Error = РезультатыЗаполненияОбъектаXDTO.ТекстОшибки;
			ДобавитьЗаписьВЖурналОбмена(,ТекФабрикаXDTO,ВидИнтеграции, "Ошибка при выгрузке несоответствий: " + Error,ТекСервисSRM.ТочкаПодключения.Местоположение, Истина,Ложь,,,,);
			Возврат;
		КонецЕсли;
		
		Попытка
			
			ТекСервисSRM.MismatchSend(РезультатыЗаполненияОбъектаXDTO.Mismatch);	
			ДобавитьЗаписьВЖурналОбмена(РезультатыЗаполненияОбъектаXDTO.Mismatch,ТекФабрикаXDTO,ВидИнтеграции, "Выгрузка данных по несоответствиям успешно завершена" + Символы.ПС + РезультатыЗаполненияОбъектаXDTO.ВыгруженныеДанныеДанныеСтрокой,ТекСервисSRM.ТочкаПодключения.Местоположение, Ложь,Ложь,,MessageId,,РезультатыЗаполненияОбъектаXDTO.Mismatch); 
			
			Попытка
				НачатьТранзакцию();
				
				МассивУзлов = Новый Массив;
				СтрокаУзлов = УзлыПланаОбменаСЕОСЗакупки.Найти(ВыборкаУровеньИмяСистемы.ИмяСистемыПолучателя, "ИмяСистемыПолучателя");
				Если СтрокаУзлов <> Неопределено Тогда 
					МассивУзлов.Добавить(СтрокаУзлов.СлужебныйУзел);	
				КонецЕсли;
				
				// успешно отправленные объекты очищаем из таблицы регистрации изменений по служебному узлу
				Для Каждого ВыгруженныйУспешноОбъект из РезультатыЗаполненияОбъектаXDTO.ВыгруженныеВПакетОбменаОбъекты Цикл 
					
					ПланыОбмена.УдалитьРегистрациюИзменений(массивУзлов, ВыгруженныйУспешноОбъект);
					
					// запишем статус выгрузки для документа несоответствия
					РегистрыСведений.ра_СтатусыВыгрузкиНесоответствийВЕОСЗакупки.ДобавитьЗапись(ВыгруженныйУспешноОбъект,
						ВыборкаУровеньИмяСистемы.ИмяСистемыПолучателя,
						Перечисления.ра_СтатусВыгрузкиНесоответствийВЕОСЗакупки.Отправлен,
						MessageId);
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				// не смогли очистить таблицу зарегистрированных изменений в служебном узле. Значит объекты будут выгружены повторно в следующий раз
			КонецПопытки;	
						
		Исключение
			
			// ошибку в журнал обмена запишем в регистр сведений
			ошибкаТекст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ДобавитьЗаписьВЖурналОбмена(РезультатыЗаполненияОбъектаXDTO.Mismatch,ТекФабрикаXDTO,ВидИнтеграции, "Ошибка при выгрузке данных по несоответствиям: " + ошибкаТекст,ТекСервисSRM.ТочкаПодключения.Местоположение, Истина,Ложь,,,,РезультатыЗаполненияОбъектаXDTO.Mismatch);
			
			Error = ошибкаТекст;
			
		КонецПопытки
		
	КонецЦикла;	
		
КонецПроцедуры

Функция СоздатьСервисЕОСЗакупки(Error) 
	
	ВидИнтеграции = Перечисления.ра_ВидыИнтеграций.SRM_Nonconformities;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Сервер","Mismatch_OutService");	
	СтруктураНастроек.Вставить("URI","urn:greenatom.ru:Procurement:EosQuality:Mismatch");
	СтруктураНастроек.Вставить("Порт","HTTP_Port");
	СтруктураНастроек.Вставить("ВариантАвторизации","NS");
	
	WS_Ссылка_ХранилищеЗначений = ПолучитьWSСсылку(СтруктураНастроек.URI, СтруктураНастроек.Сервер);
	
	Если WS_Ссылка_ХранилищеЗначений = Неопределено Тогда 
		
		Error = "Ошибка создания сервиса выгрузки данных по несоответствиям: " + ОписаниеОшибки();
		
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,ВидИнтеграции, Error,, Истина, Ложь);
		Возврат Неопределено;
	КонецЕсли;	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
	WS_Ссылка_ХранилищеЗначений.Получить().Записать(ИмяВременногоФайла);
	
	СтруктураНастроек.Вставить("Определение", Новый WSОпределения(ИмяВременногоФайла));
	
	Попытка
		ТекСервисSRM = Новый WSПрокси(СтруктураНастроек.Определение, СтруктураНастроек.URI, СтруктураНастроек.Сервер, СтруктураНастроек.Порт);
		УстановитьАвторизацию(ТекСервисSRM);
		Возврат ТекСервисSRM;
	Исключение
		Error = "Ошибка создания сервиса выгрузки данных по несоответствиям: " + ОписаниеОшибки(); 
		ДобавитьЗаписьВЖурналОбмена(Неопределено,,ВидИнтеграции, Error,, Истина, Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции	

Функция ПолучитьДанныеДляВыгрузкиЗапросом(УзлыПланаОбменаСЕОСЗакупки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмененияНС.Ссылка КАК ДокументНС,
	|	ПРЕДСТАВЛЕНИЕ(ИзмененияНС.Ссылка) КАК ПредставлениеДокументаНС,
	|	ИзмененияНС.ID_SRM КАК DogovorID_SRM,
	|	ИзмененияНС.Ссылка.Номер КАК НомерНС,
	|	ИзмененияНС.Ссылка.NomerVnutrennij КАК ВнутреннийНомерНС,
	|	ИзмененияНС.Ссылка.PodrobnoeOpisanie КАК ОписаниеНС,
	|	ИзмененияНС.Ссылка.DataVyyavleniya КАК ДатаВыявленияНС,
	|	ЕСТЬNULL(ra_PrichinyNesootvetstvij.KodPrichiny, 0) КАК КодПричины,
	|	ЕСТЬNULL(ra_PrichinyNesootvetstvij.Opisanie, """") КАК Причина,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ra_KorrektiruyushcheeDejstvie.Ссылка), """") КАК ПредставлениеКД,
	|	ЕСТЬNULL(ra_KorrektiruyushcheeDejstvie.Номер, """") КАК НомерКД,
	|	ЕСТЬNULL(ra_KorrektiruyushcheeDejstvie.Opisanie, """") КАК ОписаниеКД,
	|	ЕСТЬNULL(ra_KorrektiruyushcheeDejstvie.CelevojSrok, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлановыйСрокКД,
	|	ЕСТЬNULL(ra_KorrektiruyushcheeDejstvie.FakticheskijSrok, ДАТАВРЕМЯ(1, 1, 1)) КАК ФактическийСрокКД,
	|	ЕСТЬNULL(ra_KorrektiruyushcheeDejstvie.Ссылка, НЕОПРЕДЕЛЕНО) КАК СсылкаКД,
	|	ЕСТЬNULL(Файлы.Ссылка, НЕОПРЕДЕЛЕНО) КАК ФайлВложения,
	|	ЕСТЬNULL(Файлы.ПолноеНаименование, """") КАК НаименованиеФайлаВложения,
	|	ЕСТЬNULL(Файлы.ТекущаяВерсияРасширение, """") КАК РасширениеФайлаВложения,
	|	ИзмененияНС.ИмяСистемыПолучателя КАК ИмяСистемыПолучателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ra_NesootvetstvieИзменения.Ссылка КАК Ссылка,
	|		ra_Uvedomlenie.Dogovor.ID_SRM КАК ID_SRM,
	|		ra_NesootvetstvieИзменения.Узел.ИмяСистемыПолучателя КАК ИмяСистемыПолучателя
	|	ИЗ
	|		Документ.ra_Nesootvetstvie.Изменения КАК ra_NesootvetstvieИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Uvedomlenie КАК ra_Uvedomlenie
	|			ПО ra_NesootvetstvieИзменения.Ссылка = ra_Uvedomlenie.Nesootvetstvie
	|				И (НЕ ra_Uvedomlenie.ПометкаУдаления)
	|	ГДЕ
	|		НЕ ra_Uvedomlenie.Dogovor = &ПустойДоговор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ra_NesootvetstvieИзменения.Ссылка,
	|		ra_Uvedomlenie.Dogovor.ID_SRM,
	|		ra_NesootvetstvieИзменения.Узел.ИмяСистемыПолучателя) КАК ИзмененияНС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_PrichinyNesootvetstvij КАК ra_PrichinyNesootvetstvij
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ra_KorrektiruyushcheeDejstvie КАК ra_KorrektiruyushcheeDejstvie
	|			ПО ra_PrichinyNesootvetstvij.KodPrichiny = ra_KorrektiruyushcheeDejstvie.KodPrichiny
	|				И ra_PrichinyNesootvetstvij.Nesootvetstvie = ra_KorrektiruyushcheeDejstvie.Nesootvetstvie
	|				И (НЕ ra_KorrektiruyushcheeDejstvie.ПометкаУдаления)
	|		ПО ИзмененияНС.Ссылка = ra_PrichinyNesootvetstvij.Nesootvetstvie
	|			И (ra_PrichinyNesootvetstvij.KorennayaPrichina)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ИзмененияНС.Ссылка = Файлы.ВладелецФайла
	|			И (НЕ Файлы.ра_ОсновнойФайл)
	|ИТОГИ
	|	МАКСИМУМ(НомерНС),
	|	МАКСИМУМ(ВнутреннийНомерНС),
	|	МАКСИМУМ(ДатаВыявленияНС),
	|	МАКСИМУМ(НомерКД),
	|	МАКСИМУМ(ПлановыйСрокКД),
	|	МАКСИМУМ(ФактическийСрокКД)
	|ПО
	|	ИмяСистемыПолучателя,
	|	ДокументНС,
	|	КодПричины,
	|	СсылкаКД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ra_NesootvetstvieИзменения.Ссылка КАК ДокументНС,
	|	ra_NesootvetstvieИзменения.Узел КАК Узел
	|ИЗ
	|	Документ.ra_Nesootvetstvie.Изменения КАК ra_NesootvetstvieИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ra_Uvedomlenie КАК ra_Uvedomlenie
	|		ПО ra_NesootvetstvieИзменения.Ссылка = ra_Uvedomlenie.Nesootvetstvie
	|ГДЕ
	|	НЕ ra_Uvedomlenie.Dogovor = &ПустойДоговор
	|	И ra_NesootvetstvieИзменения.Узел В(&ОбычныеУзлы)
	|	И НЕ ra_Uvedomlenie.ПометкаУдаления
	|ИТОГИ ПО
	|	ДокументНС";
	
	// вторая таблица используется для переноса изменений из основного узла в служебный
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ra_Dogovory.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОбычныеУзлы",   УзлыПланаОбменаСЕОСЗакупки.ВыгрузитьКолонку("ОбычныйУзел"));
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции	

Процедура ВыполнитьСценарийЗагрузкиОбновлениеСтатусаВыгруженныхВSRMНесоответствий(ПакетXDTO) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Если ПакетXDTO.CorrelationID = Неопределено Тогда 
		ВызватьИсключение "В сообщении отсутствует контейнер CorrelationID";
	КонецЕсли;	
	
	ИмяСистемы = ПакетXDTO.CorrelationID.CallMode;
	MessageId = ПакетXDTO.CorrelationID.MessageId;
	Результат = ПакетXDTO.UploadResponse;	
	GUIDНС = ПакетXDTO.GUIDEOSQ;
	
	Если Не ЗначениеЗаполнено(GUIDНС) Тогда 
		ВызватьИсключение "В сообщении передан пустой GUIDEOSQ";	
	КонецЕсли;
	
	Если Не ра_ОбщегоНазначенияПовтИсп.ЕстьСистемаПоИмени(ИмяСистемы) Тогда 
		ТекстОшибки = "По имени системы " + ИмяСистемы + " не найдена настройка интеграции.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	Попытка
	
		MessageId = ПривестиGUIDКформату(MessageId);
		GUIDНС = ПривестиGUIDКформату(GUIDНС);
	
	Исключение
		ВызватьИсключение "Не удалось приобразовать GUID переданных объектов к формату ""XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX""";	
	КонецПопытки;
	
	Если Результат = "SUCCESS" Тогда 
		СтатусЗагрузки = Перечисления.ра_СтатусВыгрузкиНесоответствийВЕОСЗакупки.Загружен;
		Результат = "";
	Иначе
		СтатусЗагрузки = Перечисления.ра_СтатусВыгрузкиНесоответствийВЕОСЗакупки.ОшибкаЗагрузки;
	КонецЕсли;	
	
	ДокументСсылкаНС = Документы.ra_Nesootvetstvie.ПолучитьСсылку(GUIDНС);	
	Если Не ЗначениеЗаполнено(ДокументСсылкаНС.Дата) Тогда // значит, что ОбъектНеНайден 
		ТекстОшибки = "Не был найден документ несоответствия по GUID " + ПакетXDTO.GUIDEOSQ;
		ВызватьИсключение ТекстОшибки;	
	КонецЕсли;	
	
	РегистрыСведений.ра_СтатусыВыгрузкиНесоответствийВЕОСЗакупки.ДобавитьЗапись(ДокументСсылкаНС,
																					ИмяСистемы,
																					СтатусЗагрузки,
																					Строка(MessageId),
																					Результат);																				
	
КонецПроцедуры	

Функция ПривестиGUIDКформату(GUIDБезДефиса)
	
	GUID = GUIDБезДефиса;
	
	// приводим к формату XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX, т.к. от SRM GUID приходит без "-"
	
	GUID = Лев(GUIDБезДефиса, 8) + "-" 
			+ Сред(GUIDБезДефиса, 9, 4) + "-" 
			+ Сред(GUIDБезДефиса, 13, 4) + "-" 
			+ Сред(GUIDБезДефиса, 17, 4) + "-" 
			+ Прав(GUIDБезДефиса, 12); 	
			
	// проверим корректность
	GUID = Новый УникальныйИдентификатор(GUID);
			
	Возврат GUID;
	
КонецФункции

#КонецОбласти