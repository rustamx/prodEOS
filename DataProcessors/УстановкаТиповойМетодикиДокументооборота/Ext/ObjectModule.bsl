
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем КэшСсылокСозданныхОбъектов;

Перем ТекущийПользователь;

#Область ПрограммныйИнтерфейс

// Заполняет базу настройками и данными по типовой методике.
//
Функция ЗаполнитьБазу() Экспорт
	
	РезультатыЗаполненияБазы = Новый Структура;
	РезультатыЗаполненияБазы.Вставить("КоличествоСозданныхЗадач", 0);
	РезультатыЗаполненияБазы.Вставить("ЗаполненныеДанные", "");
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ИнициализироватьКеш();
	
	НачатьТранзакцию();
	
	ЗаполнитьНастройкиПрограммы();
	ЗагрузитьДанные();
	
	// Заполнение состава субъектов прав доступа после загрузки данных.
	РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные(Истина);
	
	КоличествоСозданныхЗадач = СоздатьЗадачиОтветственнымЛицам();
	
	ЗафиксироватьТранзакцию();
	
	РезультатыЗаполненияБазы.КоличествоСозданныхЗадач = КоличествоСозданныхЗадач;
	РезультатыЗаполненияБазы.ЗаполненныеДанные = ЗаполняемыеДанные();
	
	Возврат РезультатыЗаполненияБазы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет настройки программы для работы программы по типовой методике
//
Процедура ЗаполнитьНастройкиПрограммы()
	
	НаборКонстант = Константы.СоздатьНабор(
		"ВестиУчетОбращенийГраждан,
		|ИспользоватьВопросыДеятельности,
		|ИспользоватьУчетПоОрганизациям,
		|ИспользоватьДатуИВремяВСрокахЗадач,
		|ИспользоватьРаспознавание,
		|ИзвлекатьТекстыФайловНаСервере,
		|ИспользоватьImageMagickДляРаспознаванияPDF,
		|ИспользоватьХранилищеФайлов,
		|ДокументооборотИспользоватьОграничениеПравДоступа,
		|ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа,
		|ДобавлятьРуководителямДоступПодчиненных,
		|ИспользоватьВизыСогласования,
		|ИспользоватьБизнесСобытия,
		|ИспользоватьУведомления,
		|ИспользоватьВерсионированиеОбъектов,
		|ИспользоватьУчетДоступаКПерсональнымДанным,
		|ИспользоватьСинхронизациюДанных,
		|ИспользоватьМобильныеКлиенты,
		|ИспользоватьГрафикиРаботы,
		|ВестиУчетПереносовСроковЗадач,
		|ИспользоватьУправлениеМероприятиями,
		|ИспользоватьНапоминанияПользователя,
		|ИспользоватьРабочийКалендарь,
		|ВестиУчетПоПроектам,
		|ИспользоватьВидыПроектов,
		|ИспользоватьЕжедневныеОтчеты,
		|ПрефиксУзлаРаспределеннойИнформационнойБазы,
		|ВестиУчетПлановыхТрудозатратВБизнесПроцессах,
		|ВестиУчетФактическихТрудозатрат,
		|ИспользоватьОбсуждения,
		|ИспользоватьОбщиеДополнительныеЗначения,
		|ИспользоватьОбщиеДополнительныеРеквизитыИСведения,
		|ИспользоватьКонтрольОбъектов,
		|ИспользоватьПовторениеБизнесПроцессов");
		
	НаборКонстант.ИспользоватьБизнесСобытия = Истина;
	НаборКонстант.ИспользоватьУведомления = Истина;
	НаборКонстант.ВестиУчетОбращенийГраждан = ВестиУчетОбращенийГраждан;
	НаборКонстант.ИспользоватьУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
	НаборКонстант.ИспользоватьДатуИВремяВСрокахЗадач = Истина;
	НаборКонстант.ИспользоватьВопросыДеятельности = Истина;
	
	НаборКонстант.ИспользоватьРаспознавание = Истина;
	НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF = Истина;
	НаборКонстант.ИспользоватьХранилищеФайлов = Истина;
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	НаборКонстант.ИзвлекатьТекстыФайловНаСервере = Не ЭтоФайловаяБаза;
	
	НаборКонстант.ДокументооборотИспользоватьОграничениеПравДоступа = Истина;
	НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа = Истина;
	НаборКонстант.ДобавлятьРуководителямДоступПодчиненных = Истина;
	НаборКонстант.ИспользоватьВизыСогласования = Истина;
	НаборКонстант.ИспользоватьВерсионированиеОбъектов = Истина;
	НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным = Истина;
	НаборКонстант.ИспользоватьСинхронизациюДанных = Истина;
	НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = НСтр("ru = 'ГЛ'; en = 'ГЛ'");
	НаборКонстант.ИспользоватьМобильныеКлиенты = Истина;
	НаборКонстант.ИспользоватьГрафикиРаботы = Истина;
	НаборКонстант.ВестиУчетПереносовСроковЗадач = Истина;
	
	НаборКонстант.ИспользоватьУправлениеМероприятиями = Истина;
	НаборКонстант.ИспользоватьНапоминанияПользователя = Истина;
	НаборКонстант.ИспользоватьРабочийКалендарь = Истина;
		
	НаборКонстант.ВестиУчетПоПроектам = ВестиУчетПоПроектам;
	НаборКонстант.ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ВестиУчетПоПроектам;
	НаборКонстант.ВестиУчетФактическихТрудозатрат = ВестиУчетПоПроектам;
	НаборКонстант.ИспользоватьВидыПроектов = ВестиУчетПоПроектам;
	НаборКонстант.ИспользоватьЕжедневныеОтчеты = Истина;
	
	НаборКонстант.ИспользоватьОбсуждения = Истина;
	
	НаборКонстант.ИспользоватьОбщиеДополнительныеЗначения = Истина;
	НаборКонстант.ИспользоватьОбщиеДополнительныеРеквизитыИСведения = Истина;
	НаборКонстант.ИспользоватьКонтрольОбъектов = Истина;
	НаборКонстант.ИспользоватьПовторениеБизнесПроцессов = Истина;
	
	НаборКонстант.Записать();
	
КонецПроцедуры

// Загружает данные в базу из макетов для работы программы по типовой методике.
//
Процедура ЗагрузитьДанные()
	
	ЗагрузитьНастройкиУведомлений();
	
	ЗагрузитьРолиИсполнителей();
	ЗагрузитьПодразделения();
	ЗагрузитьРабочиеГруппы();
	ЗагрузитьДолжности();
	
	ЗагрузитьВидыРабот();
	ЗагрузитьПапкиФайлов();
	ЗагрузитьВопросыДеятельности();
	ЗагрузитьГрафикиРабот();
	
	СоздатьВидыМероприятий();
	ЗагрузитьПапкиМероприятий();
	
	ЗагрузитьПапкиФорума();
	ЗагрузитьТемыОбсуждений();
	
	Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		// Если организации  по умолчанию нет, то берем первую попавшуюся
		// организацию.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организации.Код";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Организация;
		Иначе
			ВызватьИсключение
				НСтр("ru = 'Не найдено ни одной организации в программе.
					|Добавьте организацию и повторите попытку.';
					|en = 'Not a single company exists in the program.
					|Add a company and try again.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьСсылкуВКэш("01", Организация);
	
	ЗагрузитьНумераторы();
	ЗагрузитьВидыВнутреннихДокументов();
	ЗагрузитьВидыВходящихДокументов();
	ЗагрузитьВидыИсходящихДокументов();
	ЗаполнитьНастройкиНумераторов();
	ЗагрузитьПапкиВнутреннихДокументов();
	
	ЗагрузитьРазделыНоменклатурыДел(Организация);
	ЗагрузитьНоменклатуруДел(Организация);
	
	ОбновитьИнструкции();
	
	ЗагрузитьНастройкиДопРеквизитов();
	
	ЗагрузитьВнутренниеДокументы();
	
	ЗагрузитьШаблоныВнутреннихДокументов();
	ЗагрузитьШаблоныИсходящихДокументов();
	ЗагрузитьШаблоныВходящихДокументов();
	
	ЗагрузитьФайлы();
	ЗагрузитьПравилаАвтозаполненияШаблоновФайлов();
	
	ЗагрузитьУсловияМаршрутизации();
	
	ЗагрузитьШаблоныПроцессов();
	
	ЗагрузитьТипыСвязей();
	ЗагрузитьНастройкиСвязей();
	ЗагрузитьСвязиДокументов();
	
КонецПроцедуры

// Создает новые виды мероприятий на основе макета ВидыМероприятий.
//
Процедура СоздатьВидыМероприятий()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВидыМероприятий", "C1:C5");
	Пока Выборка.Следующий() Цикл
		
		СтруктураВидаМероприятия = Справочники.ВидыМероприятий.ПолучитьСтруктуруВидаМероприятия();
		СтруктураВидаМероприятия.Наименование = Выборка.Наименование;
		СтруктураВидаМероприятия.ПротокольноеМероприятие = 
			ПреобразоватьЗначениеВБулево(Выборка.ПротокольноеМероприятие);
		СтруктураВидаМероприятия.АвтоматическиВестиСоставУчастниковРабочейГруппы = 
			ПреобразоватьЗначениеВБулево(Выборка.АвтоматическиВестиСоставУчастниковРабочейГруппы);
		СтруктураВидаМероприятия.ОбязательноеЗаполнениеРабочихГруппДокументов = 
			ПреобразоватьЗначениеВБулево(Выборка.ОбязательноеЗаполнениеРабочихГруппДокументов);
			
		НовыйВидМероприятия = Справочники.ВидыМероприятий.СоздатьВидМероприятия(СтруктураВидаМероприятия);
		ДобавитьСсылкуВКэш(Выборка.Имя, НовыйВидМероприятия);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые папки мероприятий на основе макета ПапкиМероприятий.
//
Процедура ЗагрузитьПапкиМероприятий()
	
	МенеджерОбъекта = Справочники.ПапкиМероприятий;
	Выборка = ПолучитьВыборкуСтрокМакета("ПапкиМероприятий", "C1:C12");
	ИмяТип_РабочиеГруппы = "СправочникСсылка.РабочиеГруппы";
	ИмяТип_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	ЗаполняемыеСвойства = "Наименование";
	ИмяТип_Родителя = "СправочникСсылка.ПапкиМероприятий";
	
	СсылкаНаПапку = Неопределено;
	ОписаниеПрав = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			
			Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
				НаследоватьПраваРодителей = Истина;
				РегистрыСведений.НастройкиПравОбъектов.Записать(
					СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
			КонецЕсли;	
			
			СтруктураСвойств = МенеджерОбъекта.ПолучитьСтруктуруПапки();
			ЗаполнитьЗначенияСвойств(СтруктураСвойств, Выборка, ЗаполняемыеСвойства);
			
			СтруктураСвойств.ДатаСоздания = ТекущаяДатаСеанса();
			СтруктураСвойств.Ответственный = ТекущийПользователь;
			
			Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
				СтруктураСвойств.Родитель = ПолучитьСсылкуИзКэша(
					Выборка.ИмяРодителя, ИмяТип_Родителя);
			КонецЕсли;
			
			СсылкаНаПапку = МенеджерОбъекта.СоздатьПапку(СтруктураСвойств);
			ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаПапку);
			
			ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
			ОписаниеПрав.Очистить();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРабочейГруппы) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			РабочаяГруппа = ПолучитьСсылкуИзКэша(
				Выборка.ИмяРабочейГруппы, ИмяТип_РабочиеГруппы);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеМероприятий); 
			Строка.ИзменениеПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеМероприятий);
			Строка.ИзменениеПапокМероприятий = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.УдалениеМероприятий);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = РабочаяГруппа;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяПодразделения) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			Подразделение = ПолучитьСсылкуИзКэша(
				Выборка.ИмяПодразделения, ИмяТип_СтруктураПредприятия);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеМероприятий); 
			Строка.ИзменениеПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеМероприятий);
			Строка.ИзменениеПапокМероприятий = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияПапокИМероприятий = ПреобразоватьЗначениеВБулево(Выборка.УдалениеМероприятий);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = Подразделение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
		НаследоватьПраваРодителей = Истина;
		РегистрыСведений.НастройкиПравОбъектов.Записать(
			СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
	КонецЕсли;
	
КонецПроцедуры

// Создает новые папки форума на основе макета ПапкиФорума.
//
Процедура ЗагрузитьПапкиФорума()
	
	МенеджерОбъекта = Справочники.ПапкиФорума;
	Выборка = ПолучитьВыборкуСтрокМакета("ПапкиФорума", "C1:C12");
	ИмяТип_РабочиеГруппы = "СправочникСсылка.РабочиеГруппы";
	ИмяТип_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	ЗаполняемыеСвойства = "Наименование";
	ИмяТип_Родителя = "СправочникСсылка.ПапкиФорума";
	
	СсылкаНаПапку = Неопределено;
	ОписаниеПрав = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			
			Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
				НаследоватьПраваРодителей = Истина;
				РегистрыСведений.НастройкиПравОбъектов.Записать(
					СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
			КонецЕсли;	
			
			СтруктураСвойств = МенеджерОбъекта.ПолучитьСтруктуруПапки();
			ЗаполнитьЗначенияСвойств(СтруктураСвойств, Выборка, ЗаполняемыеСвойства);
			
			СтруктураСвойств.ДатаСоздания = ТекущаяДатаСеанса();
			СтруктураСвойств.Ответственный = ТекущийПользователь;
			
			Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
				СтруктураСвойств.Родитель = ПолучитьСсылкуИзКэша(
					Выборка.ИмяРодителя, ИмяТип_Родителя);
			КонецЕсли;
			
			СсылкаНаПапку = МенеджерОбъекта.СоздатьПапку(СтруктураСвойств);
			ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаПапку);
			
			ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
			ОписаниеПрав.Очистить();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРабочейГруппы) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			РабочаяГруппа = ПолучитьСсылкуИзКэша(
				Выборка.ИмяРабочейГруппы, ИмяТип_РабочиеГруппы);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИТем = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеТемИСообщений = ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеТемИСообщений); 
			Строка.ИзменениеТемИСообщений = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеТемИСообщений);
			Строка.ИзменениеПапок = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияТемИСообщений = ПреобразоватьЗначениеВБулево(Выборка.УдалениеТемИСообщений);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = РабочаяГруппа;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяПодразделения) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			П = ПолучитьСсылкуИзКэша(
				Выборка.ИмяПодразделения, ИмяТип_СтруктураПредприятия);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИТем = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеТемИСообщений = ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеТемИСообщений); 
			Строка.ИзменениеТемИСообщений = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеТемИСообщений);
			Строка.ИзменениеПапок = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияТемИСообщений = ПреобразоватьЗначениеВБулево(Выборка.УдалениеТемИСообщений);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = П;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
		НаследоватьПраваРодителей = Истина;
		РегистрыСведений.НастройкиПравОбъектов.Записать(
			СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
	КонецЕсли;
	
КонецПроцедуры

// // Создает темы обсуждений в форуме на основе макета ТемыОбсуждений.
//
Процедура ЗагрузитьТемыОбсуждений()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ТемыОбсуждений", "C1:C5");
	ИмяТип_ПапкиФорума = "СправочникСсылка.ПапкиФорума";
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураТемыОбсуждения = Справочники.ТемыОбсуждений.ПолучитьСтруктуруТемыОбсуждений();
		ЗаполнитьЗначенияСвойств(СтруктураТемыОбсуждения, Выборка,, "Папка");
		
		Если ЗначениеЗаполнено(Выборка.Папка) Тогда
			СтруктураТемыОбсуждения.Папка = ПолучитьСсылкуИзКэша(Выборка.Папка, ИмяТип_ПапкиФорума);
		КонецЕсли;
		
		СтруктураТемыОбсуждения.Автор = ТекущийПользователь;
		СтруктураТемыОбсуждения.ДатаСоздания = ТекущаяДатаСеанса;
		Результат = Справочники.ТемыОбсуждений.СоздатьТемуОбсуждений(СтруктураТемыОбсуждения);
		ДобавитьСсылкуВКэш(Выборка.Имя, Результат.Тема);
		ДобавитьСсылкуВКэш(Выборка.Имя, Результат.ПервоеСообщениеТемы);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает задачи ответственным лицам по макету ЗадачиПоЗавершениюЗагрузки
//
// Возвращаемое значение:
//   Число - возвращает количество созданных задач.
//
Функция СоздатьЗадачиОтветственнымЛицам()
	
	КоличествоСозданныхЗадач = 0;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ИмяТип_РолиИсполнителей = "СправочникСсылка.РолиИсполнителей";
	Выборка = ПолучитьВыборкуСтрокМакета("ЗадачиПоЗавершениюЗагрузки", "C1:C9");
	
	Пока Выборка.Следующий() Цикл
		
		Процесс = Выборка.Процесс;
		
		МенеджерПроцесса = БизнесПроцессы[Процесс];
		
		СоздатьПроцесс = Истина;
		
		Если Выборка.Условие <> "" Тогда
			Результат = Неопределено;
			Выполнить(Выборка.Условие);
			СоздатьПроцесс = Результат;
		КонецЕсли;
		
		СтруктураПроцесса = МенеджерПроцесса.ПолучитьСтруктуруПроцесса();
		СтруктураПроцесса.Наименование = Выборка.Наименование;
		СтруктураПроцесса.Описание = Выборка.Описание;
		
		Если Процесс = "Поручение" Тогда
			СтруктураПроцесса.Исполнитель = 
				Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
					ПолучитьСсылкуИзКэша(Выборка.ИмяРолиИсполнителя, ИмяТип_РолиИсполнителей));
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.Важность) Тогда
			СтруктураПроцесса.Важность = Перечисления.ВариантыВажностиЗадачи[Выборка.Важность];
		КонецЕсли;
		СтруктураПроцесса.Автор = ТекущийПользователь;
		
		// Обходим строки табличных частей
		Пока Выборка.Следующий() Цикл
			
			ПустаяСтрока = Истина;
			
			Если ЗначениеЗаполнено(Выборка.ПредметыРольПредмета) Тогда
				
				СтрокаПредметов = СтруктураПроцесса.Предметы.Добавить();
				
				СтрокаПредметов.РольПредмета = ПолучитьСсылкуИзКэша(Выборка.ПредметыРольПредмета, "");
				СтрокаПредметов.Предмет = 
					ПолучитьСсылкуИзКэша(Выборка.ПредметыПредмет, Выборка.ПредметыТипПредмета);
				
				ПустаяСтрока = Ложь;
				
			КонецЕсли;
			
			Если Процесс = "Ознакомление"
				И ЗначениеЗаполнено(Выборка.ИмяРолиИсполнителя) Тогда
				
				НоваяСтрокаИсполнителя = СтруктураПроцесса.Исполнители.Добавить();
				НоваяСтрокаИсполнителя.Исполнитель = 
					Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
						ПолучитьСсылкуИзКэша(Выборка.ИмяРолиИсполнителя, ИмяТип_РолиИсполнителей));
			КонецЕсли;
			
			
			Если ПустаяСтрока Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СоздатьПроцесс Тогда
			МенеджерПроцесса.СоздатьПроцесс(СтруктураПроцесса, Истина);
		КонецЕсли;
		
		КоличествоСозданныхЗадач = КоличествоСозданныхЗадач + 1;
		
	КонецЦикла;
	
	Возврат КоличествоСозданныхЗадач;
	
КонецФункции

Процедура ЗагрузитьГрафикиРабот()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ГрафикиРабот", "C1:C9");
	ИмяТип_ГрафикиРабот = "СправочникСсылка.ГрафикиРабот";
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураГрафикаРаботы = 
			Справочники.ГрафикиРаботы.ПолучитьСтруктуруГрафикаРаботы();
			
		ЗаполнитьЗначенияСвойств(СтруктураГрафикаРаботы, Выборка);
		
		СтруктураГрафикаРаботы.Календарь =
			Справочники.Календари.НайтиПоНаименованию(Выборка.ИмяКалендаря);
		
		ОсновнойГрафикРаботы = (Выборка.Основной = "да");
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.РабочееВремя_ВремяНачала)
				И НЕ ЗначениеЗаполнено(Выборка.РабочееВремя_ВремяОкончания) Тогда
				
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.РабочееВремя_ВремяНачала)
				ИЛИ ЗначениеЗаполнено(Выборка.РабочееВремя_ВремяОкончания) Тогда
				
				НоваяСтрокаРабочегоВремени = СтруктураГрафикаРаботы.РабочееВремя.Добавить();
				НоваяСтрокаРабочегоВремени.ВремяНачала = Дата(Выборка.РабочееВремя_ВремяНачала);
				НоваяСтрокаРабочегоВремени.ВремяОкончания = Дата(Выборка.РабочееВремя_ВремяОкончания);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СсылкаНаСозданныйГрафик = Справочники.ГрафикиРаботы.СоздатьГрафикРаботы(СтруктураГрафикаРаботы);
		ДобавитьСсылкуВКэш(ИмяТип_ГрафикиРабот, СсылкаНаСозданныйГрафик);
		
		Если ОсновнойГрафикРаботы Тогда
			Константы.ОсновнойГрафикРаботы.Установить(СсылкаНаСозданныйГрафик);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет начальные настройки уведомлений на основе макета НастройкиУведомлений.
//
Процедура ЗагрузитьНастройкиУведомлений()
	
	Выборка = ПолучитьВыборкуСтрокМакета("НастройкиУведомлений", "C1:C5");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Настройка = "" Или Выборка.ТипСобытия = "" Или Выборка.Событие = ""
			Или Выборка.ТипЗначения = "" Или Выборка.Значение = "" Тогда
			
			ОписаниеОшибки = НСтр("ru = 'В макете имеются строки с пустыми полями.'; en = 'The template contains rows with empty fields.'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеОшибки, Выборка.Настройка);
				
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		Настройка = Перечисления.НастройкиУведомлений[Выборка.Настройка];
		
		Если Выборка.ТипСобытия = "ВидыБизнесСобытий" Тогда
			Событие = Справочники.ВидыБизнесСобытий[Выборка.Событие];
		ИначеЕсли  Выборка.ТипСобытия = "СобытияУведомлений" Тогда
			Событие = Перечисления.СобытияУведомлений[Выборка.Событие];
		КонецЕсли;
		
		Если Выборка.ТипЗначения = "Булево" Тогда
			Значение = Булево(Выборка.Значение);
		ИначеЕсли Выборка.ТипЗначения = "Число" Тогда
			Значение = Число(Выборка.Значение);
		КонецЕсли;
		
		Если Настройка = Перечисления.НастройкиУведомлений.Подписка Тогда
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Событие,
				Перечисления.СпособыУведомления.ПоПочте,
				Значение);
		ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
			РегистрыСведений.НастройкиУведомлений.УстановитьСрокПоУмолчанию(
				Событие,
				Значение);
		ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
			РегистрыСведений.НастройкиУведомлений.УстановитьЧастотуПоУмолчанию(
				Событие,
				Значение);
		Иначе
			РегистрыСведений.НастройкиУведомлений.УстановитьДополнительнуюНастройкуПоУмолчанию(
				Настройка,
				Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Выборка = ПолучитьВыборкуСтрокМакета("НастройкиУведомлений", "C6:C6");
	Выборка.Следующий();
	РазрешитьИзменятьНастройкиУведомлений = 
		Булево(Выборка.РазрешитьПользователямИзменятьНастройкиУведомлений);
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(РазрешитьИзменятьНастройкиУведомлений);
	
КонецПроцедуры

// Создает новые роли на основе макета РолиИсполнителей.
//
Процедура ЗагрузитьРолиИсполнителей()
	
	Выборка = ПолучитьВыборкуСтрокМакета("РолиИсполнителей", "C1:C4");
	
	ИмяТипа_РолиИсполнителей = "СправочникСсылка.РолиИсполнителей";
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураРоли = Справочники.РолиИсполнителей.ПолучитьСтруктуруРолиИсполнителей();
		СтруктураРоли.Наименование = Выборка.Наименование;
		СтруктураРоли.ИспользуетсяБезОбъектовАдресации = Истина;
		СтруктураРоли.ИспользуетсяСОбъектамиАдресации = 
			ПреобразоватьЗначениеВБулево(Выборка.ИспользуетсяСОбъектамиАдресации);
		Если ЗначениеЗаполнено(Выборка.ТипыОсновногоОбъектаАдресации) Тогда
			СтруктураРоли.ТипыОсновногоОбъектаАдресации = 
				ПолучитьСсылкуИзКэша(Выборка.ТипыОсновногоОбъектаАдресации);
		КонецЕсли;
		СсылкаНаНовуюРоль = Справочники.РолиИсполнителей.СоздатьРольИсполнителей(СтруктураРоли);
		ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаНовуюРоль);
		
	КонецЦикла;
	
	// Добавление исполнителей для роли Администратор
	Выборка = ПолучитьВыборкуСтрокМакета("РолиИсполнителей", "C5:C5");
	Выборка.Следующий();
	РольАдминистратор = ПолучитьСсылкуИзКэша(Выборка.ИмяАдминистратора, ИмяТипа_РолиИсполнителей);
	
	ВыборкаПользователей = Справочники.Пользователи.Выбрать();
	Пока ВыборкаПользователей.Следующий() Цикл
		
		Если Пользователи.ЭтоПолноправныйПользователь(ВыборкаПользователей.Ссылка) Тогда
			Запись = РегистрыСведений.ИсполнителиЗадач.СоздатьМенеджерЗаписи();
			Запись.РольИсполнителя = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(РольАдминистратор);
			Запись.Исполнитель = ВыборкаПользователей.Ссылка;
			Запись.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые подразделения на основе макета СтруктураПредприятия.
//
Процедура ЗагрузитьПодразделения()
	
	ИмяТипа_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	
	Выборка = ПолучитьВыборкуСтрокМакета("СтруктураПредприятия", "C1:C3");
	Пока Выборка.Следующий() Цикл
		
		СтруктураПодразделения = Справочники.СтруктураПредприятия.ПолучитьСтруктуруПодразделения();
		СтруктураПодразделения.Наименование = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
			СтруктураПодразделения.Родитель = ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, 
				ИмяТипа_СтруктураПредприятия);
		КонецЕсли;
		
		НовоеПодразделение = Справочники.СтруктураПредприятия.СоздатьПодразделение(
			СтруктураПодразделения);
			
		ДобавитьСсылкуВКэш(Выборка.Имя, НовоеПодразделение);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые рабочие группы на основе макета РабочиеГруппы.
//
Процедура ЗагрузитьРабочиеГруппы()
	
	МенеджерОбъекта = Справочники.РабочиеГруппы;
	Выборка = ПолучитьВыборкуСтрокМакета("РабочиеГруппы", "C1:C5");
	ИмяТекущегоТипа = "СправочникСсылка.РабочиеГруппы";
	
	Пока Выборка.Следующий() Цикл
		
		ДобавитьГруппуПользователей = Истина;
		Если ЗначениеЗаполнено(Выборка.Условие) Тогда
			Результат = Ложь;
			Выполнить(Выборка.Условие);
			ДобавитьГруппуПользователей = Результат;
		КонецЕсли;
		
		Если НЕ ДобавитьГруппуПользователей Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСвойств = МенеджерОбъекта.ПолучитьСтруктуруРабочихГрупп();
		
		СтруктураСвойств.Наименование = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
			СтруктураСвойств.Родитель = ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, ИмяТекущегоТипа);
		КонецЕсли;

		СсылкаНаСозданныйОбъект = МенеджерОбъекта.СоздатьРабочуюГруппу(СтруктураСвойств);
		ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаСозданныйОбъект);
		
		Если ЗначениеЗаполнено(Выборка.Полномочия) Тогда
			
			ДобавитьПользователяВГруппуДоступа(Выборка.Полномочия, СсылкаНаСозданныйОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПользователяВГруппуДоступа(Полномочия, Пользователь)
	
	ПолномочияСсылка = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(Полномочия);
	РегистрыСведений.ПолномочияПользователей.ДобавитьПолномочия(Пользователь, ПолномочияСсылка);
	
КонецПроцедуры

// Создает новые папки файлов на основе макета ПапкиФайлов.
//
Процедура ЗагрузитьПапкиФайлов()
	
	МенеджерОбъекта = Справочники.ПапкиФайлов;
	Выборка = ПолучитьВыборкуСтрокМакета("ПапкиФайлов", "C1:C12");
	ИмяТип_РабочиеГруппы = "СправочникСсылка.РабочиеГруппы";
	ИмяТип_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	ЗаполняемыеСвойства = "Наименование";
	ИмяТип_Родителя = "СправочникСсылка.ПапкиФайлов";
	
	СсылкаНаПапку = Неопределено;
	ОписаниеПрав = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			
			Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
				НаследоватьПраваРодителей = Ложь;
				РегистрыСведений.НастройкиПравОбъектов.Записать(
					СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
			КонецЕсли;	
			
			СтруктураСвойств = МенеджерОбъекта.ПолучитьСтруктуруПапки();
			ЗаполнитьЗначенияСвойств(СтруктураСвойств, Выборка, ЗаполняемыеСвойства);
			
			СтруктураСвойств.ДатаСоздания = ТекущаяДатаСеанса();
			СтруктураСвойств.Ответственный = ТекущийПользователь;
			
			Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
				СтруктураСвойств.Родитель = ПолучитьСсылкуИзКэша(
					Выборка.ИмяРодителя, ИмяТип_Родителя);
			КонецЕсли;
			
			СсылкаНаПапку = МенеджерОбъекта.СоздатьПапку(СтруктураСвойств);
			ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаПапку);
			
			ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
			ОписаниеПрав.Очистить();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРабочейГруппы) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			РабочаяГруппа = ПолучитьСсылкуИзКэша(
				Выборка.ИмяРабочейГруппы, ИмяТип_РабочиеГруппы);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеФайлов); 
			Строка.ИзменениеПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеФайлов);
			Строка.ИзменениеПапок = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.УдалениеФайлов);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = РабочаяГруппа;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяПодразделения) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			Подразделение = ПолучитьСсылкуИзКэша(
				Выборка.ИмяПодразделения, ИмяТип_СтруктураПредприятия);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеФайлов); 
			Строка.ИзменениеПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеФайлов);
			Строка.ИзменениеПапок = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияПапокИФайлов = ПреобразоватьЗначениеВБулево(Выборка.УдалениеФайлов);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = Подразделение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
		НаследоватьПраваРодителей = Ложь;
		РегистрыСведений.НастройкиПравОбъектов.Записать(
			СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
	КонецЕсли;
	
КонецПроцедуры	

// Создает должности
//
Процедура ЗагрузитьДолжности()
	
	Выборка = ПолучитьВыборкуСтрокМакета("Должности", "C1:C2");
	Пока Выборка.Следующий() Цикл
		
		СтруктураДолжности = Справочники.Должности.ПолучитьСтруктуруДолжности();
		СтруктураДолжности.Наименование = Выборка.Наименование;
		
		НоваяДолжность = Справочники.Должности.СоздатьДолжность(СтруктураДолжности);
		ДобавитьСсылкуВКэш(Выборка.Имя, НоваяДолжность);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые виды работ на основе макета ВидыРабот.
//
Процедура ЗагрузитьВидыРабот()
	
	ИмяТипа_ВидыРабот = "СправочникСсылка.ВидыРабот";
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВидыРабот", "C1:C4");
	Пока Выборка.Следующий() Цикл
		
		СтруктураВидаРабот = Справочники.ВидыРабот.ПолучитьСтруктуруВидовРабот();
		СтруктураВидаРабот.Наименование = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
			СтруктураВидаРабот.Родитель = ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, ИмяТипа_ВидыРабот);
		КонецЕсли;
		
		Если Выборка.ВидВремени <> "" И Выборка.ВидВремени = "Рабочее" Тогда
			СтруктураВидаРабот.ВидВремени = Перечисления.ВидыВремени.Рабочее;
		ИначеЕсли Выборка.ВидВремени <> "" И Выборка.ВидВремени = "Не рабочее" Тогда
			СтруктураВидаРабот.ВидВремени = Перечисления.ВидыВремени.НеРабочее;
		КонецЕсли;

		НовыйВидРабот = Справочники.ВидыРабот.СоздатьВидРаботы(СтруктураВидаРабот);
		ДобавитьСсылкуВКэш(Выборка.Имя, НовыйВидРабот);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые нумераторы на основе макета Нумераторы.
//
Процедура ЗагрузитьНумераторы()
	
	Выборка = ПолучитьВыборкуСтрокМакета("Нумераторы", "C1:C7");
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Предопределенный = "да" Тогда
			
			СсылкаНаНумератор = ПредопределенноеЗначение(Выборка.Имя);
			Нумератор = СсылкаНаНумератор.ПолучитьОбъект();
			
		Иначе
		
			Нумератор = Справочники.Нумераторы.ПолучитьСтруктуруНумераторов();
			
		КонецЕсли;
		
		Нумератор.Наименование = Выборка.Наименование;
		Нумератор.ФорматНомера = Выборка.ФорматНомера;
			
		Если Выборка.НезависимаяНумерацияПоОрганизациям = "да" Тогда
			Нумератор.НезависимаяНумерацияПоОрганизациям = Истина;
		Иначе 
			Нумератор.НезависимаяНумерацияПоОрганизациям = Ложь;
		КонецЕсли;
			
		Если Выборка.Периодичность <> "" И Выборка.Периодичность = "Год" Тогда
			Нумератор.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		ИначеЕсли Выборка.Периодичность <> "" Тогда
			Нумератор.Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ТипСвязи) Тогда
			Нумератор.ТипСвязи = ПолучитьСсылкуИзКэша(Выборка.ТипСвязи, "СправочникСсылка.ТипыСвязей");
		КонецЕсли;
		
		Если Выборка.Предопределенный = "да" Тогда
			Нумератор.Записать();
		Иначе
			СсылкаНаНумератор = Справочники.Нумераторы.СоздатьНумератор(Нумератор);
			ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаНумератор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет настройки нумерации для видов документов.
// Настройки заполняются из макета НастройкиНумерации
//
Процедура ЗаполнитьНастройкиНумераторов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("НастройкиНумерации", "C1:C4");
	
	ТаблицаНастроек = РегистрыСведений.НастройкиНумерации.ПолучитьСтруктуруНастроекНумерации();
	
	Пока Выборка.Следующий() Цикл
		СтрокаНастройки = ТаблицаНастроек.Добавить();
		СтрокаНастройки.ВидДокумента = ПолучитьСсылкуИзКэша(
			Выборка.ВидДокумента, Выборка.ТипВидаДокументов);
		СтрокаНастройки.Нумератор = ПолучитьСсылкуИзКэша(
			Выборка.Нумератор, "СправочникСсылка.Нумераторы");
		СтрокаНастройки.СпособНумерации = ПолучитьСсылкуИзКэша(Выборка.СпособНумерации);
	КонецЦикла;
	
	РегистрыСведений.НастройкиНумерации.ЗаписатьНастройкиНумерации(ТаблицаНастроек);
	
КонецПроцедуры

// Создает новые виды входящих документов на основе макета ВидыВнутреннихДокументов.
//
Процедура ЗагрузитьВидыВнутреннихДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВидыВнутреннихДокументов", "C1:C19");
	ИмяТип_Нумераторы = "СправочникСсылка.Нумераторы";
	ИмяТип_ВидыВнутреннихДокументов = "СправочникСсылка.ВидыВнутреннихДокументов";

	Пока Выборка.Следующий() Цикл
		
		ЭтоГруппа = (Выборка.ЭтоГруппа = "да");
		
		Если ЭтоГруппа Тогда
			
			СтруктураГруппыВидовВнутреннихДокументов = 
				Справочники.ВидыВнутреннихДокументов.ПолучитьСтруктуруГруппыВидовВнутреннихДокументов();
				
			СтруктураГруппыВидовВнутреннихДокументов.Наименование = Выборка.Наименование;
			
			Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
				СтруктураГруппыВидовВнутреннихДокументов.Родитель = 
					ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, ИмяТип_ВидыВнутреннихДокументов);
			КонецЕсли;
			
			ГруппаВидовВнутреннихДокументовСсылка = Справочники.ВидыВнутреннихДокументов.
				СоздатьГруппуВидовВнутреннихДокументов(СтруктураГруппыВидовВнутреннихДокументов);
			ДобавитьСсылкуВКэш(Выборка.Имя, ГруппаВидовВнутреннихДокументовСсылка);
			
		Иначе
			
			СтруктураВидаВнутреннихДокументов = 
				Справочники.ВидыВнутреннихДокументов.ПолучитьСтруктуруВидаВнутреннихДокументов();
				
			СтруктураВидаВнутреннихДокументов.Наименование = Выборка.Наименование;
			
			Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда
				СтруктураВидаВнутреннихДокументов.Родитель = 
					ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, ИмяТип_ВидыВнутреннихДокументов);
			КонецЕсли;
			
			СтруктураВидаВнутреннихДокументов.АвтоматическиВестиСоставУчастниковРабочейГруппы =
				ПреобразоватьЗначениеВБулево(Выборка.АвтоматическиВестиСоставУчастниковРабочейГруппы);
			СтруктураВидаВнутреннихДокументов.ВестиУчетПоКонтрагентам =
				ПреобразоватьЗначениеВБулево(Выборка.ВестиУчетПоКонтрагентам);
			СтруктураВидаВнутреннихДокументов.ВестиУчетПоОрганизациям =
				ПреобразоватьЗначениеВБулево(Выборка.ВестиУчетПоОрганизациям);
			СтруктураВидаВнутреннихДокументов.ВестиУчетПоНоменклатуреДел =
				ПреобразоватьЗначениеВБулево(Выборка.ВестиУчетПоНоменклатуреДел);
			СтруктураВидаВнутреннихДокументов.ИспользоватьСрокИсполнения =
				ПреобразоватьЗначениеВБулево(Выборка.ИспользоватьСрокИсполнения);
			СтруктураВидаВнутреннихДокументов.ОбязателенФайлОригинала =
				ПреобразоватьЗначениеВБулево(Выборка.ОбязателенФайлОригинала);
			СтруктураВидаВнутреннихДокументов.ОбязательноеЗаполнениеРабочихГруппДокументов =
				ПреобразоватьЗначениеВБулево(Выборка.ОбязательноеЗаполнениеРабочихГруппДокументов);
			СтруктураВидаВнутреннихДокументов.ЯвляетсяДоговором =
				ПреобразоватьЗначениеВБулево(Выборка.ЯвляетсяДоговором);
			СтруктураВидаВнутреннихДокументов.УчитыватьСуммуДокумента =
				ПреобразоватьЗначениеВБулево(Выборка.УчитыватьСуммуДокумента);
			СтруктураВидаВнутреннихДокументов.УчитыватьСрокДействия =
				ПреобразоватьЗначениеВБулево(Выборка.УчитыватьСрокДействия);
			СтруктураВидаВнутреннихДокументов.УчитыватьНедействующиеДокументы =
				ПреобразоватьЗначениеВБулево(Выборка.УчитыватьНедействующиеДокументы);	
			СтруктураВидаВнутреннихДокументов.ЯвляетсяКомплектомДокументов =
				ПреобразоватьЗначениеВБулево(Выборка.ЯвляетсяКомплектомДокументов);
			СтруктураВидаВнутреннихДокументов.ПодписыватьРезолюцииЭП =
				ПреобразоватьЗначениеВБулево(Выборка.ПодписыватьРезолюцииЭП);
			СтруктураВидаВнутреннихДокументов.ВестиУчетПоАдресатам =
				ПреобразоватьЗначениеВБулево(Выборка.ВестиУчетПоАдресатам);
				
			ВидДокументаСсылка = Справочники.ВидыВнутреннихДокументов.СоздатьВидВнутреннегоДокумента(
				СтруктураВидаВнутреннихДокументов);
			ДобавитьСсылкуВКэш(Выборка.Имя, ВидДокументаСсылка);
			
			Если ЗначениеЗаполнено(ВидДокументаСсылка)
				И ЗначениеЗаполнено(Выборка.Индекс) Тогда
				
				РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(ВидДокументаСсылка, Выборка.Индекс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые виды входящих документов на основе макета ВидыВходящихДокументов.
//
Процедура ЗагрузитьВидыВходящихДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВидыВходящихДокументов", "C1:C13");
	ИмяТип_Нумераторы = "СправочникСсылка.Нумераторы";

	Пока Выборка.Следующий() Цикл
		
		СтруктураВидаВходящихДокументов = 
			Справочники.ВидыВходящихДокументов.ПолучитьСтруктуруВидаВходящихДокументов();
		
		СтруктураВидаВходящихДокументов.Наименование = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.Нумератор) Тогда 
			Нумератор = ПолучитьСсылкуИзКэша(Выборка.Нумератор, ИмяТип_Нумераторы);
			СтруктураВидаВходящихДокументов.Нумератор = Нумератор;
		Иначе 
			СтруктураВидаВходящихДокументов.Нумератор = Неопределено;
		КонецЕсли;	

		Если Выборка.СпособНумерации = "Авто" Тогда 
			СтруктураВидаВходящихДокументов.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		Иначе 	
			СтруктураВидаВходящихДокументов.СпособНумерации = Перечисления.СпособыНумерации.Вручную; 
		КонецЕсли;
		
		СтруктураВидаВходящихДокументов.АвтоматическиВестиСоставУчастниковРабочейГруппы =
			ПреобразоватьЗначениеВБулево(Выборка.АвтоматическиВестиСоставУчастниковРабочейГруппы);
		СтруктураВидаВходящихДокументов.ВестиУчетПоНоменклатуреДел =
			ПреобразоватьЗначениеВБулево(Выборка.ВестиУчетПоНоменклатуреДел);
		СтруктураВидаВходящихДокументов.ИспользоватьСрокИсполнения =
			ПреобразоватьЗначениеВБулево(Выборка.ИспользоватьСрокИсполнения);
		СтруктураВидаВходящихДокументов.ОбязателенФайлОригинала =
			ПреобразоватьЗначениеВБулево(Выборка.ОбязателенФайлОригинала);
		СтруктураВидаВходящихДокументов.ОбязательноеЗаполнениеРабочихГруппДокументов =
			ПреобразоватьЗначениеВБулево(Выборка.ОбязательноеЗаполнениеРабочихГруппДокументов);
		СтруктураВидаВходящихДокументов.УчитыватьСуммуДокумента =
			ПреобразоватьЗначениеВБулево(Выборка.УчитыватьСуммуДокумента);
		СтруктураВидаВходящихДокументов.ЯвляетсяОбращениемОтГраждан =
			ПреобразоватьЗначениеВБулево(Выборка.ЯвляетсяОбращениемОтГраждан);
		СтруктураВидаВходящихДокументов.ПодписыватьРезолюцииЭП =
			ПреобразоватьЗначениеВБулево(Выборка.ПодписыватьРезолюцииЭП);	
			
		ВидДокументаСсылка = Справочники.ВидыВходящихДокументов.СоздатьВидВходящегоДокумента(
			СтруктураВидаВходящихДокументов);
		ДобавитьСсылкуВКэш(Выборка.Имя, ВидДокументаСсылка);
	
		Если ЗначениеЗаполнено(ВидДокументаСсылка) И ЗначениеЗаполнено(Выборка.Индекс) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(ВидДокументаСсылка, Выборка.Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает новые виды исходящих документов на основе макета ВидыИсходящихДокументов.
//
Процедура ЗагрузитьВидыИсходящихДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВидыИсходящихДокументов", "C1:C12");
	ИмяТип_Нумераторы = "СправочникСсылка.Нумераторы";

	Пока Выборка.Следующий() Цикл
		
		СтруктураВидаИсходящихДокументов = 
			Справочники.ВидыИсходящихДокументов.ПолучитьСтруктуруВидаИсходящихДокументов();
		
		СтруктураВидаИсходящихДокументов.Наименование = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.Нумератор) Тогда 
			Нумератор = ПолучитьСсылкуИзКэша(Выборка.Нумератор, ИмяТип_Нумераторы);
			СтруктураВидаИсходящихДокументов.Нумератор = Нумератор;
		Иначе 
			СтруктураВидаИсходящихДокументов.Нумератор = Неопределено;
		КонецЕсли;	
		
		Если Выборка.СпособНумерации = "Авто" Тогда 
			СтруктураВидаИсходящихДокументов.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		Иначе 	
			СтруктураВидаИсходящихДокументов.СпособНумерации = Перечисления.СпособыНумерации.Вручную; 
		КонецЕсли;
		
		СтруктураВидаИсходящихДокументов.АвтоматическиВестиСоставУчастниковРабочейГруппы =
			ПреобразоватьЗначениеВБулево(Выборка.АвтоматическиВестиСоставУчастниковРабочейГруппы);
		СтруктураВидаИсходящихДокументов.ВестиУчетПоНоменклатуреДел =
			ПреобразоватьЗначениеВБулево(Выборка.ВестиУчетПоНоменклатуреДел);
		СтруктураВидаИсходящихДокументов.ИспользоватьСрокИсполнения =
			ПреобразоватьЗначениеВБулево(Выборка.ИспользоватьСрокИсполнения);
		СтруктураВидаИсходящихДокументов.ОбязателенФайлОригинала =
			ПреобразоватьЗначениеВБулево(Выборка.ОбязателенФайлОригинала);
		СтруктураВидаИсходящихДокументов.ОбязательноеЗаполнениеРабочихГруппДокументов =
			ПреобразоватьЗначениеВБулево(Выборка.ОбязательноеЗаполнениеРабочихГруппДокументов);
		СтруктураВидаИсходящихДокументов.УчитыватьСуммуДокумента =
			ПреобразоватьЗначениеВБулево(Выборка.УчитыватьСуммуДокумента);
		СтруктураВидаИсходящихДокументов.УчитыватьВходящийНомерИДатуПолучателя =
			ПреобразоватьЗначениеВБулево(Выборка.УчитыватьВходящийНомерИДатуПолучателя);
			
		ВидДокументаСсылка = Справочники.ВидыИсходящихДокументов.СоздатьВидИсходящегоДокумента(
			СтруктураВидаИсходящихДокументов);
		ДобавитьСсылкуВКэш(Выборка.Имя, ВидДокументаСсылка);
	
		Если ЗначениеЗаполнено(ВидДокументаСсылка) И ЗначениеЗаполнено(Выборка.Индекс) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(ВидДокументаСсылка, Выборка.Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает новые шаблоны поручения
//
Процедура ЗагрузитьШаблоныПроцессов()
	
	// Формирование таблицы ПорядокВыполненияДействийКомплексныхПроцессов
	МакетДанных = ПолучитьМакет("ШаблоныКомплексныхПроцессов_ПорядокВыполненияДействий");
	ОбластьЗаголовков = МакетДанных.Область("C1:C6");
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЗаголовков);
	Построитель.Выполнить();
	ПорядокВыполненияДействийКомплексныхПроцессов = Построитель.Результат.Выгрузить();
	
	// Определение таблицы действий комплексных процессов
	ТаблицаДействийКомплексныхПроцессов = Новый ТаблицаЗначений;
	ТаблицаДействийКомплексныхПроцессов.Колонки.Добавить("ВидДействия");
	ТаблицаДействийКомплексныхПроцессов.Колонки.Добавить("ИмяДействияВ_КП");
	ТаблицаДействийКомплексныхПроцессов.Колонки.Добавить("СтруктураДействия");
	
	// Создание шаблонов процесса Исполнение
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаИсполнение", "C1:C18");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныИсполнения";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныИсполнения.ПолучитьСтруктуруШаблонаИсполнения();
		СтруктураШаблона.ВариантИсполнения = 
			Перечисления.ВариантыМаршрутизацииЗадач[Выборка.ВариантИсполнения];
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона, Истина);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = Справочники.ШаблоныИсполнения.СоздатьШаблонИсполнения(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Исполнение";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение структур шаблонов процессов Ознакомления из макета
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаОзнакомление", "C1:C14");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныОзнакомления";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныОзнакомления.ПолучитьСтруктуруШаблонаОзнакомление();
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона, Истина);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = 
				Справочники.ШаблоныОзнакомления.СоздатьШаблонОзнакомления(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Ознакомление";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Создание шаблонов процесса Поручение
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаПоручение", "C1:C15");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныПоручения";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныПоручения.ПолучитьСтруктуруШаблонаПоручения();
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = Справочники.ШаблоныПоручения.СоздатьШаблонПоручения(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Поручение";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Создание шаблонов процесса Рассмотрение
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаРассмотрение", "C1:C15");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныРассмотрения";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныРассмотрения.ПолучитьСтруктуруШаблонаРассмотрения();
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = Справочники.ШаблоныРассмотрения.СоздатьШаблонРассмотрения(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Рассмотрение";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение структур шаблонов процессов Регистрация из макета
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаРегистрация", "C1:C15");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныРегистрации";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныРегистрации.ПолучитьСтруктуруШаблонаРегистрации();
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = Справочники.ШаблоныРегистрации.СоздатьШаблонРегистрации(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Регистрация";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение структур шаблонов процессов Согласование из макета
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаСогласование", "C1:C18");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныСогласования";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныСогласования.ПолучитьСтруктуруШаблонаСогласования();
		СтруктураШаблона.ВариантСогласования = 
			Перечисления.ВариантыМаршрутизацииЗадач[Выборка.ВариантСогласования];
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона, Истина);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = Справочники.ШаблоныСогласования.
				СоздатьШаблонСогласования(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Согласование";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение структур шаблонов процессов Утверждение из макета
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныПроцессаУтверждение", "C1:C15");
	ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныУтверждения";
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		ИмяДействияВ_КП = Выборка.ИмяДействияВ_КП;
		
		СтруктураШаблона = Справочники.ШаблоныУтверждения.ПолучитьСтруктуруШаблонаУтверждения();
		ЗаполнитьСтруктуруШаблона(СтруктураШаблона, Выборка, ИмяТипа_Шаблона);
		
		Если ЗначениеЗаполнено(Имя) Тогда
			СсылкаНаНовыйШаблон = Справочники.ШаблоныУтверждения.СоздатьШаблонУтверждения(СтруктураШаблона);
			ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		Иначе
			НоваяСтрокаДействие = ТаблицаДействийКомплексныхПроцессов.Добавить();
			НоваяСтрокаДействие.ИмяДействияВ_КП = ИмяДействияВ_КП;
			НоваяСтрокаДействие.ВидДействия = "Утверждение";
			НоваяСтрокаДействие.СтруктураДействия = СтруктураШаблона;
		КонецЕсли;
		
	КонецЦикла;
	
	// Создание шаблонов комплексных процессов
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныКомплексныхПроцессов", "C1:C16");
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		
		СтруктураШаблона = Справочники.ШаблоныКомплексныхБизнесПроцессов.
			ПолучитьСтруктуруШаблонаКомплексногоПроцесса();
		
		ЗаполнитьСтруктуруШаблонаКомплексногоПроцесс(
			СтруктураШаблона,
			Выборка,
			ТаблицаДействийКомплексныхПроцессов,
			ПорядокВыполненияДействийКомплексныхПроцессов);
			
		СсылкаНаНовыйШаблон = Справочники.ШаблоныКомплексныхБизнесПроцессов.
			СоздатьШаблонКомплексногоПроцесса(СтруктураШаблона);
		ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру шаблона
//
// Параметры:
//   СтруктураШаблона - Структура
//   Выборка - выборка данных из макета
//   ИмяТипа_Шаблона - Имя типа шаблона.
//   НесколькоИсполнителей - признак использования нескольких исполнителей в шаблоне
//
Процедура ЗаполнитьСтруктуруШаблона(
	СтруктураШаблона, Выборка, ИмяТипа_Шаблона, НесколькоИсполнителей = Ложь)
	
	// Заполняем структуру шаблона
	ЗаполнитьЗначенияСвойств(СтруктураШаблона, Выборка, 
		"Наименование, НаименованиеБизнесПроцесса, Описание");
		
	СтруктураШаблона.Ответственный = ТекущийПользователь;
	СтруктураШаблона.ДобавлятьНаименованиеПредмета = Истина;
	СтруктураШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	
	Если СтруктураШаблона.Свойство("КоличествоИтераций") Тогда
		СтруктураШаблона.КоличествоИтераций = 1;
	КонецЕсли;
	
	// Проверяем создавался ли исполнитель помощником ранее. Только для процессов с одним исполнителем.
	Если Не НесколькоИсполнителей Тогда
		
		Если Выборка.Исполнитель <> "" Тогда
			
			Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				ПолучитьСсылкуИзКэша(Выборка.Исполнитель, "СправочникСсылка.РолиИсполнителей"));
			
		ИначеЕсли Выборка.ИсполнительАвтоподстановка <> "" Тогда
			
			ИменаПредметов = Новый Массив;
			Если ЗначениеЗаполнено(Выборка.ИмяПредметаДляАвтоподстановки) Тогда
				ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредмета(
					Выборка.ИмяПредметаДляАвтоподстановки);
				ИменаПредметов.Добавить(ИмяПредмета);
			КонецЕсли;
			
			СписокДоступныхФункций = ШаблоныБизнесПроцессов.ПолучитьСписокДоступныхФункций(ИменаПредметов);
			Исполнитель = СписокДоступныхФункций.НайтиПоЗначению(Выборка.ИсполнительАвтоподстановка);
			Исполнитель = Исполнитель.Представление;
			
		КонецЕсли;
		
		СтруктураШаблона.Исполнитель = Исполнитель;
		
		СтруктураШаблона.СрокИсполненияДни = Выборка.СрокИсполнения;
		
	КонецЕсли;
		
	// Обходим строки табличных частей
	Пока Выборка.Следующий() Цикл
		
		ПустаяСтрока = Истина;
		
		Исполнитель = Неопределено;
		
		// Заполняем рабочую группу
		ЗаполнитьРабочуюГруппуШаблона(СтруктураШаблона, Выборка, ПустаяСтрока);
		
		// Заполняем привязки шаблона к видам документов
		ЗаполнитьПривязкиШаблонаКВидамДокументов(СтруктураШаблона, Выборка, ПустаяСтрока);
		
		// Заполняем таблицу исполнителей, если в процессе их предусмотрено несколько.
		Если НесколькоИсполнителей Тогда
			
			Если Выборка.Исполнитель <> "" Тогда
				
				Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
					ПолучитьСсылкуИзКэша(Выборка.Исполнитель, "СправочникСсылка.РолиИсполнителей"));
				
				ПустаяСтрока = Ложь;
				
			ИначеЕсли Выборка.ИсполнительАвтоподстановка <> "" Тогда
				
				СписокДоступныхФункций = ШаблоныБизнесПроцессов.ПолучитьСписокДоступныхФункций();
				Исполнитель = СписокДоступныхФункций.НайтиПоЗначению(Выборка.ИсполнительАвтоподстановка);
				Исполнитель = Исполнитель.Представление;
				
				ПустаяСтрока = Ложь;
				
			КонецЕсли;
			
			Если Выборка.СрокИсполнения <> "" Тогда
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Исполнитель) Или ЗначениеЗаполнено(Выборка.СрокИсполнения) Тогда
			
				НоваяСтрокаИсполнитель = СтруктураШаблона.Исполнители.Добавить();
				НоваяСтрокаИсполнитель.Исполнитель = Исполнитель;
				
				НоваяСтрокаИсполнитель.СрокИсполненияДни = Выборка.СрокИсполнения;
				
				Если ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныИсполнения" Тогда
					
					Если ЗначениеЗаполнено(Выборка.ПорядокИсполнения) Тогда
						НоваяСтрокаИсполнитель.ПорядокИсполнения = 
							Перечисления.ПорядокВыполненияЗадач[Выборка.ПорядокИсполнения];
					КонецЕсли;
						
					НоваяСтрокаИсполнитель.НаименованиеЗадачи = Выборка.НаименованиеЗадачи;
					НоваяСтрокаИсполнитель.Описание = Выборка.Описание;
					
				ИначеЕсли ИмяТипа_Шаблона = "СправочникСсылка.ШаблоныСогласования" Тогда
					
					Если ЗначениеЗаполнено(Выборка.ПорядокСогласования) Тогда
						НоваяСтрокаИсполнитель.ПорядокСогласования = 
							Перечисления.ПорядокВыполненияЗадач[Выборка.ПорядокСогласования];
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру составного шаблона
//
// Параметры:
//   СтруктураШаблона - Структура
//   Выборка - выборка данных из макета
//   ДействийКомплексныхПроцессов - ТаблицаЗначений - таблица действий всех комплексных процессов.
//   ПорядокВыполненияДействийКомплексныхПроцессов - ТаблицаЗначений - таблица с настройками порядка выполнения
//                                                   действий комплексных процессов
//
Процедура ЗаполнитьСтруктуруШаблонаКомплексногоПроцесс(
	СтруктураШаблона,
	Выборка,
	ДействийКомплексныхПроцессов,
	ПорядокВыполненияДействийКомплексныхПроцессов)
	
	// Заполняем структуру шаблона
	ЗаполнитьЗначенияСвойств(СтруктураШаблона, Выборка, 
		"Наименование, НаименованиеБизнесПроцесса, Описание");
	СтруктураШаблона.Ответственный = ТекущийПользователь;
	СтруктураШаблона.ДобавлятьНаименованиеПредмета = Истина;
	СтруктураШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	СтруктураШаблона.ВариантМаршрутизации = 
		Перечисления.ВариантыМаршрутизацииЗадач[Выборка.ВариантМаршрутизации];
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПроцесса", Выборка.Имя);
	НастройкиПорядкаДействий = 
		ПорядокВыполненияДействийКомплексныхПроцессов.НайтиСтроки(Отбор);
	Для Каждого СтрНастройки Из НастройкиПорядкаДействий Цикл
		
		НоваяСтрокаНастройкиПорядкаДействия = 
			СтруктураШаблона.ПорядокВыполненияДействий.Добавить();
		
		НоваяСтрокаНастройкиПорядкаДействия.НомерДействия = Число(СтрНастройки.НомерДействия);
		Если ЗначениеЗаполнено(СтрНастройки.ПослеДействия) Тогда
			НоваяСтрокаНастройкиПорядкаДействия.ПослеДействия = Число(СтрНастройки.ПослеДействия);
			НоваяСтрокаНастройкиПорядкаДействия.РезультатПредыдущегоДействия = 
				Перечисления.УсловияРассмотренияПредшественниковЭтапа[
					СтрНастройки.РезультатПредыдущегоДействия];
			Если ЗначениеЗаполнено(СтрНастройки.Условие) Тогда
				НоваяСтрокаНастройкиПорядкаДействия.Условие = ПолучитьСсылкуИзКэша(
					СтрНастройки.Условие, "СправочникСсылка.УсловияМаршрутизации");
				НоваяСтрокаНастройкиПорядкаДействия.ИмяПредметаУсловия = СтрНастройки.ИмяПредметаУсловия;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обходим строки табличных частей
	Пока Выборка.Следующий() Цикл
		
		ПустаяСтрока = Истина;
		
		// Заполняем рабочую группу
		ЗаполнитьРабочуюГруппуШаблона(СтруктураШаблона, Выборка, ПустаяСтрока);
		
		// Заполняем привязки шаблона к видам документов
		ЗаполнитьПривязкиШаблонаКВидамДокументов(СтруктураШаблона, Выборка, ПустаяСтрока);
		
		// Заполняем таблицу предметов
		ЗаполнитьТаблицуПредметовШаблонаПроцесса(СтруктураШаблона, Выборка, ПустаяСтрока);
		
		Если ЗначениеЗаполнено(Выборка.ВидДействия) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДействия", Выборка.ВидДействия);
			Отбор.Вставить("ИмяДействияВ_КП", Выборка.ИмяДействия);
			
			Действия = ДействийКомплексныхПроцессов.НайтиСтроки(Отбор);
			
			НовоеДействие = СтруктураШаблона.Действия.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НовоеДействие,
				Действия[0]);
				
			Если ЗначениеЗаполнено(Выборка.НомерДействия) Тогда
				НовоеДействие.НомерДействия = Число(Выборка.НомерДействия);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПорядокВыполненияДействия) Тогда
				НовоеДействие.ПорядокВыполнения = Выборка.ПорядокВыполненияДействия;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПорядокВыполненияДействия) Тогда
				НовоеДействие.ПорядокВыполнения = Выборка.ПорядокВыполненияДействия;
			КонецЕсли;
			
			ПустаяСтрока = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет рабочую группу в структуре шаблона на основе данных текущей позиции выборки.
//
// Параметры:
//   - СтруктураШаблона - Структура
//   - Выборка - выборка запроса с данными для заполнения
//   - ПустаяСтрока - принимает значение Истина, если в выборке нет данных для заполнения.
//
Процедура ЗаполнитьРабочуюГруппуШаблона(СтруктураШаблона, Выборка, ПустаяСтрока)
	
	Если Выборка.РабочаяГруппаУчастник <> "" Тогда
		УчастникРГ = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			ПолучитьСсылкуИзКэша(Выборка.РабочаяГруппаУчастник, "СправочникСсылка.РолиИсполнителей"));
		УчастникСтр = СтруктураШаблона.РабочаяГруппа.Добавить();
		УчастникСтр.Участник = УчастникРГ;
		ПустаяСтрока = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет привязки шаблона к видам документов в структуре шаблона
// на основе данных текущей позиции выборки.
//
// Параметры:
//   - СтруктураШаблона - Структура
//   - Выборка - выборка запроса с данными для заполнения
//   - ПустаяСтрока - принимает значение Истина, если в выборке нет данных для заполнения.
//
Процедура ЗаполнитьПривязкиШаблонаКВидамДокументов(СтруктураШаблона, Выборка, ПустаяСтрока)
	
	Если Выборка.НастройкиШаблонаИмяТипаВидаДокумента <> "" Тогда
		
		НоваяНастройка = СтруктураШаблона.НастройкиШаблона.Добавить();
		ВидДокумента = ПолучитьСсылкуИзКэша(
		Выборка.НастройкиШаблонаВидДокумента, Выборка.НастройкиШаблонаИмяТипаВидаДокумента);
		НоваяНастройка.ВидДокумента = ВидДокумента;
		
		Если Выборка.НастройкиШаблонаВидИнтерактивногоСобытия <> "" Тогда
			НоваяНастройка.ИнтерактивныйЗапуск = Истина;
			НоваяНастройка.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий[
			Выборка.НастройкиШаблонаВидИнтерактивногоСобытия];
		КонецЕсли;
		
		Если ИспользоватьУчетПоОрганизациям Тогда
			ИмяТипа_Организации = "СправочникСсылка.Организации";
			НоваяНастройка.Организация = ПолучитьСсылкуИзКэша("01", ИмяТипа_Организации);
		КонецЕсли;
		
		Если Выборка.НастройкиШаблонаУсловие <> "" Тогда
			НоваяНастройка.Условие = ПолучитьСсылкуИзКэша(
				Выборка.НастройкиШаблонаУсловие,
				"СправочникСсылка.УсловияМаршрутизации");
		КонецЕсли;
		
		ПустаяСтрока = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет предметы шаблона на основе данных текущей позиции выборки.
//
// Параметры:
//   - СтруктураШаблона - Структура
//   - Выборка - выборка запроса с данными для заполнения
//   - ПустаяСтрока - принимает значение Истина, если в выборке нет данных для заполнения.
//
Процедура ЗаполнитьТаблицуПредметовШаблонаПроцесса(СтруктураШаблона, Выборка, ПустаяСтрока)
	
	Если ЗначениеЗаполнено(Выборка.ПредметыРольПредмета) Тогда
		
		СтрокаПредмет = СтруктураШаблона.Предметы.Добавить();
		СтрокаПредмет.РольПредмета = ПредопределенноеЗначение(Выборка.ПредметыРольПредмета);
		СтрокаПредмет.ИмяПредмета = Выборка.ПредметыИмяПредмета;
		
		ПустаяСтрока = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Создает новые вопросы деятельности.
Процедура ЗагрузитьВопросыДеятельности()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВопросыДеятельности", "C1:C2");
	Пока Выборка.Следующий() Цикл
		
		СтруктураВопросаДеятельности = Справочники.ВопросыДеятельности.ПолучитьСтруктуруВопросаДеятельности();
		СтруктураВопросаДеятельности.Наименование = Выборка.Наименование;
		
		НовыйВопрос = Справочники.ВопросыДеятельности.СоздатьВопросДеятельности(СтруктураВопросаДеятельности);
		ДобавитьСсылкуВКэш(Выборка.Имя, НовыйВопрос);
		
	КонецЦикла;
	
КонецПроцедуры	

// Создает новые папки внутренних документов.
//
Процедура ЗагрузитьПапкиВнутреннихДокументов()
	
	ИмяТипа_ПапкиВнутреннихДокументов = "СправочникСсылка.ПапкиВнутреннихДокументов";
	ИмяТипа_РабочиеГруппы = "СправочникСсылка.РабочиеГруппы";
	ИмяТипа_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	
	МенеджерОбъекта = Справочники.ПапкиВнутреннихДокументов;
	Выборка = ПолучитьВыборкуСтрокМакета("ПапкиВнутреннихДокументов", "C1:C12");
	
	СсылкаНаПапку = Неопределено;
	ОписаниеПрав = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			
			Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
				НаследоватьПраваРодителей = Истина;
				РегистрыСведений.НастройкиПравОбъектов.Записать(
					СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда 
				Родитель = ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, ИмяТипа_ПапкиВнутреннихДокументов);
			Иначе	
				Родитель = МенеджерОбъекта.ПустаяСсылка();
			КонецЕсли;
			
			СтруктураСвойств = МенеджерОбъекта.ПолучитьСтруктуруПапки();
			СтруктураСвойств.Наименование = Выборка.Наименование;
			СтруктураСвойств.ДатаСоздания = ТекущаяДатаСеанса();
			СтруктураСвойств.Ответственный = ТекущийПользователь;
			СтруктураСвойств.Родитель = Родитель;
			
			СсылкаНаПапку = МенеджерОбъекта.СоздатьПапку(СтруктураСвойств);
			ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаПапку);
			
			ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
			ОписаниеПрав.Очистить();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРабочейГруппы) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			РабочаяГруппа = ПолучитьСсылкуИзКэша(
				Выборка.ИмяРабочейГруппы, ИмяТипа_РабочиеГруппы);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИВнутреннихДокументов = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеПапокИВнутреннихДокументов = 
				ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеДокументов);
			Строка.ИзменениеПапокИВнутреннихДокументов = 
				ПреобразоватьЗначениеВБулево(Выборка.ИзменениеДокументов);
			Строка.ИзменениеПапокВнутреннихДокументов = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияПапокИВнутреннихДокументов = 
				ПреобразоватьЗначениеВБулево(Выборка.УдалениеДокументов);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = РабочаяГруппа;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяПодразделения) И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
			
			Подразделение = ПолучитьСсылкуИзКэша(
				Выборка.ИмяПодразделения, ИмяТипа_СтруктураПредприятия);
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаПапку;
			Строка.ЧтениеПапокИВнутреннихДокументов = ПреобразоватьЗначениеВБулево(Выборка.Чтение);
			Строка.ДобавлениеПапокИВнутреннихДокументов = 
				ПреобразоватьЗначениеВБулево(Выборка.ДобавлениеДокументов);
			Строка.ИзменениеПапокИВнутреннихДокументов = 
				ПреобразоватьЗначениеВБулево(Выборка.ИзменениеДокументов);
			Строка.ИзменениеПапокВнутреннихДокументов = ПреобразоватьЗначениеВБулево(Выборка.ИзменениеПапок);
			Строка.ПометкаУдаленияПапокИВнутреннихДокументов = 
				ПреобразоватьЗначениеВБулево(Выборка.УдалениеДокументов);
			Строка.УправлениеПравами = ПреобразоватьЗначениеВБулево(Выборка.УправлениеПравами);
			Строка.НаследованиеРазрешено = ПреобразоватьЗначениеВБулево(Выборка.ДляПодпапок);
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = Подразделение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеПрав <> Неопределено И ЗначениеЗаполнено(СсылкаНаПапку) Тогда
		НаследоватьПраваРодителей = Истина;
		РегистрыСведений.НастройкиПравОбъектов.Записать(
			СсылкаНаПапку, ОписаниеПрав, НаследоватьПраваРодителей);
	КонецЕсли;	
	
КонецПроцедуры	

// Создает новые разделы номенклатуры дел.
Процедура ЗагрузитьРазделыНоменклатурыДел(Организация)
	
	ИмяТипа_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	ИмяТипа_РазделыНоменклатурыДел = "СправочникСсылка.РазделыНоменклатурыДел";
	
	Год = Год(ТекущаяДата());
	
	Выборка = ПолучитьВыборкуСтрокМакета("РазделыНоменклатурыДел", "C1:C5");
	Пока Выборка.Следующий() Цикл
		
		СтруктураРазделаНоменклатурыДел = 
			Справочники.РазделыНоменклатурыДел.ПолучитьСтруктуруРазделаНоменклатурыДел();
		СтруктураРазделаНоменклатурыДел.Год = Год;
		СтруктураРазделаНоменклатурыДел.Индекс = Выборка.Индекс;
		СтруктураРазделаНоменклатурыДел.Наименование = Выборка.Наименование;
		СтруктураРазделаНоменклатурыДел.Организация = Организация;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРодителя) Тогда 
			СтруктураРазделаНоменклатурыДел.Родитель = 
				ПолучитьСсылкуИзКэша(Выборка.ИмяРодителя, ИмяТипа_РазделыНоменклатурыДел);
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(Выборка.ИмяПодразделения) Тогда 
			СтруктураРазделаНоменклатурыДел.Подразделение = 
				ПолучитьСсылкуИзКэша(Выборка.ИмяПодразделения, ИмяТипа_СтруктураПредприятия);
		КонецЕсли;	
		
		НовыйРазделНД = Справочники.РазделыНоменклатурыДел.СоздатьРазделНоменклатурыДел(
			СтруктураРазделаНоменклатурыДел);
		ДобавитьСсылкуВКэш(Выборка.Имя, НовыйРазделНД);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новые элементы номенклатуры дел.
//
Процедура ЗагрузитьНоменклатуруДел(Организация)
	
	ИмяТипа_РазделыНоменклатурыДел = "СправочникСсылка.РазделыНоменклатурыДел";
	
	Год = Год(ТекущаяДата());
	
	Выборка = ПолучитьВыборкуСтрокМакета("НоменклатураДел", "C1:C9");
	Пока Выборка.Следующий() Цикл
		
		СтруктураНоменклатурыДел = Справочники.НоменклатураДел.ПолучитьСтруктуруНоменклатурыДел();
		СтруктураНоменклатурыДел.Год = Год;
		СтруктураНоменклатурыДел.ПолноеНаименование = Выборка.ПолноеНаименование;
		СтруктураНоменклатурыДел.Индекс = Выборка.Индекс;
		СтруктураНоменклатурыДел.Организация = Организация;
		
		Если ЗначениеЗаполнено(Выборка.ИмяРаздела) Тогда 
			СтруктураНоменклатурыДел.Раздел = 
				ПолучитьСсылкуИзКэша(Выборка.ИмяРаздела, ИмяТипа_РазделыНоменклатурыДел);	
		КонецЕсли;		
			
		Попытка 
			СрокХранения = Число(Выборка.СрокХранения);
		Исключение
			СрокХранения = Строка(Выборка.СрокХранения);
		КонецПопытки;	
		СтруктураНоменклатурыДел.СрокХранения = СрокХранения;
		
		СтруктураНоменклатурыДел.КатегорияДела = Перечисления.КатегорииДел[Выборка.КатегорияДела];
		СтруктураНоменклатурыДел.НомераСтатей = Выборка.НомераСтатей;
		СтруктураНоменклатурыДел.ОтметкаЭПК = ЗначениеЗаполнено(Выборка.ОтметкаЭПК);
		СтруктураНоменклатурыДел.Примечание = Выборка.Примечание;

		НовыйЭлементНоменклатуры = 
			Справочники.НоменклатураДел.СоздатьНоменклатуруДел(СтруктураНоменклатурыДел);
		
		ДобавитьСсылкуВКэш(Выборка.Имя, НовыйЭлементНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет инструкции.
//
Процедура ОбновитьИнструкции()
	
	ПереченьТиповыхИнструкций = РаботаСИнструкциями.ПереченьИнструкций();
	ТиповыеИнструкции = Новый Соответствие;
	Пока ПереченьТиповыхИнструкций.Следующий() Цикл
		ТиповыеИнструкции.Вставить(
			ПереченьТиповыхИнструкций.GUIDИнструкции,
			Новый Структура(
				"Макет, Предмет",
				ПереченьТиповыхИнструкций.МакетИнструкции,
				ПереченьТиповыхИнструкций.ПредметИнструкции
			)
		);
	КонецЦикла;
	
	ПереченьНовыхИнструкций = ПолучитьПереченьНовыхИнструкций();
	Пока ПереченьНовыхИнструкций.Следующий() Цикл
		ТиповыеИнструкции.Вставить(
			ПереченьНовыхИнструкций.GUIDИнструкции,
			Новый Структура(
				"Макет, Предмет",
				ПереченьНовыхИнструкций.МакетИнструкции,
				ПереченьНовыхИнструкций.ПредметИнструкции
			)
		);
	КонецЦикла;
	
	ПутиКПапкамВнутреннихДокументов = ПутиКПапкамВнутреннихДокументов();
	
	Выборка = ПолучитьВыборкуСтрокМакета("ОбновлениеИнструкций", "C1:C10");
	ОбновляемыеИнструкции = Новый Соответствие;
	СсылкаНаПоследнююИнструкцию = Справочники.Инструкции.ПустаяСсылка();
	
	Пока Выборка.Следующий() Цикл
		
		// Определение обновляемой инструкции
		Если ЗначениеЗаполнено(Выборка.GUIDИнструкции) Тогда
			
			СсылкаНаПоследнююИнструкцию = Справочники.Инструкции.ПолучитьСсылку(
				Новый УникальныйИдентификатор(Выборка.GUIDИнструкции));
				
			СвойстваОбновляемойИнструкции = Новый Структура;
			
			// Определение значений реквизитов
			Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
				СвойстваОбновляемойИнструкции.Вставить("Наименование", Выборка.Наименование);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
				СвойстваОбновляемойИнструкции.Вставить("Комментарий", Выборка.Комментарий);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Активна) Тогда
				СвойстваОбновляемойИнструкции.Вставить("Активна", Выборка.Активна = "Да");
			КонецЕсли;
			
			// Определение текста инструкции
			Если ЗначениеЗаполнено(Выборка.Наименование) ИЛИ ЗначениеЗаполнено(Выборка.Папка) Тогда
				
				МакетТекстаТиповойИнструкции = ТиповыеИнструкции.Получить(Выборка.GUIDИнструкции).Макет;
				ТекстИнструкции = РаботаСИнструкциями.ТекстТиповойИнструкции(МакетТекстаТиповойИнструкции);
				Если ТекстИнструкции = Неопределено Тогда
					ТекстИнструкции = ПолучитьМакет(МакетТекстаТиповойИнструкции).ПолучитьТекст();
				КонецЕсли;
				
				Если ТекстИнструкции <> Неопределено Тогда
					
					ЧтениеHTML = Новый ЧтениеHTML;
					ЧтениеHTML.УстановитьСтроку(ТекстИнструкции);
					ПостроительDOM = Новый ПостроительDOM;
					ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
					
					// Установка нового заголовка инструкции
					Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
						Если ДокументDOM.ПолучитьЭлементыПоИмени("h1").Количество() > 0 Тогда
							ДокументDOM.ПолучитьЭлементыПоИмени("h1").Элемент(0).ТекстовоеСодержимое =
								Выборка.Наименование;
						КонецЕсли;
					КонецЕсли;
					
					// Установка папки хранения для инструкций по документам
					Если ЗначениеЗаполнено(Выборка.Папка) Тогда
						ПутьКПапкеДокумента = "";
						ПредметИнструкции = ТиповыеИнструкции.Получить(Выборка.GUIDИнструкции).Предмет;
						Если ПредметИнструкции = "ВнутренниеДокументы" Тогда
							ПутьКПапкеДокумента = 
								ПутьКПапкеДокумента(Выборка.Папка, ПутиКПапкамВнутреннихДокументов);
						КонецЕсли;
						ДокументDOM.ПолучитьЭлементыПоИмени("em").Элемент(0).ТекстовоеСодержимое =
							ПутьКПапкеДокумента;
						ДокументDOM.ПолучитьЭлементыПоИмени("em").Элемент(0).УстановитьАтрибут(
							"style", "color: black");
					КонецЕсли;
					
					ЗаписьDOM = Новый ЗаписьDOM; 
					ЗаписьHTML = Новый ЗаписьHTML; 
					ЗаписьHTML.УстановитьСтроку(); 
					ЗаписьDOM.Записать(ДокументDOM, ЗаписьHTML);
					НовыйТекстИнструкции = ЗаписьHTML.Закрыть();
					
					СвойстваОбновляемойИнструкции.Вставить(
						"ТекстИнструкции", Новый ХранилищеЗначения(НовыйТекстИнструкции));
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Определение условий отображения
			Если ЗначениеЗаполнено(Выборка.ВидДокумента)
				ИЛИ ЗначениеЗаполнено(Выборка.СостояниеДокумента)
				ИЛИ ЗначениеЗаполнено(Выборка.ГрифДоступа)
				ИЛИ ЗначениеЗаполнено(Выборка.ВопросДеятельности) Тогда
				
				УсловияОтображения = Новый Соответствие;
				
				УсловиеОтображения = ОпределитьУсловияОтображенияИнструкции(
					ТиповыеИнструкции.Получить(Выборка.GUIDИнструкции).Предмет,
					Выборка.ВидДокумента,
					Выборка.СостояниеДокумента,
					Выборка.ГрифДоступа,
					Выборка.ВопросДеятельности);
				
				Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1_%2_%3_%4'; en = '%1_%2_%3_%4'"),
					Выборка.ВидДокумента,
					Выборка.СостояниеДокумента,
					Выборка.ГрифДоступа,
					Выборка.ВопросДеятельности);
				УсловияОтображения.Вставить(Ключ, УсловиеОтображения);
				
				СвойстваОбновляемойИнструкции.Вставить("УсловияОтображения", УсловияОтображения);
				
			КонецЕсли;			
			
			// Определение доступа на чтение
			Если ЗначениеЗаполнено(Выборка.ДоступнаДляРоли) Тогда
				
				ДоступНаЧтение = Новый Соответствие;
				
				Роль = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
					ПолучитьСсылкуИзКэша(Выборка.ДоступнаДляРоли, "СправочникСсылка.РолиИсполнителей"));
				ДоступНаЧтение.Вставить(Роль, Роль);
				
				СвойстваОбновляемойИнструкции.Вставить("ДоступНаЧтение", ДоступНаЧтение);
				
			КонецЕсли;
			
			ОбновляемыеИнструкции.Вставить(СсылкаНаПоследнююИнструкцию, СвойстваОбновляемойИнструкции);
			
		// Определение дополнительных параметров последней обновляемой инструкции
		Иначе
			
			СвойстваОбновляемойИнструкции = ОбновляемыеИнструкции.Получить(СсылкаНаПоследнююИнструкцию);
			
			// Определение условий отображения
			Если ЗначениеЗаполнено(Выборка.ВидДокумента)
				ИЛИ ЗначениеЗаполнено(Выборка.СостояниеДокумента)
				ИЛИ ЗначениеЗаполнено(Выборка.ГрифДоступа)
				ИЛИ ЗначениеЗаполнено(Выборка.ВопросДеятельности) Тогда
				
				УсловиеОтображения = ОпределитьУсловияОтображенияИнструкции(
					ТиповыеИнструкции.Получить(
						Строка(СсылкаНаПоследнююИнструкцию.УникальныйИдентификатор())).Предмет,
					Выборка.ВидДокумента,
					Выборка.СостояниеДокумента,
					Выборка.ГрифДоступа,
					Выборка.ВопросДеятельности);
				
				Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1_%2_%3_%4'; en = '%1_%2_%3_%4'"),
					Выборка.ВидДокумента,
					Выборка.СостояниеДокумента,
					Выборка.ГрифДоступа,
					Выборка.ВопросДеятельности);
				СвойстваОбновляемойИнструкции.УсловияОтображения.Вставить(Ключ, УсловиеОтображения);
				
			КонецЕсли;			
			
			// Определение доступа на чтение
			Если ЗначениеЗаполнено(Выборка.ДоступнаДляРоли) Тогда
				
				Роль = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
					ПолучитьСсылкуИзКэша(Выборка.ДоступнаДляРоли, "СправочникСсылка.РолиИсполнителей"));
				СвойстваОбновляемойИнструкции.ДоступНаЧтение.Вставить(Роль, Роль);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновление инструкций
	Для Каждого Инструкция Из ОбновляемыеИнструкции Цикл
		
		ОбъектИнструкции = Инструкция.Ключ.ПолучитьОбъект();
		СвойстваИнструкции = Инструкция.Значение;
		
		ЗаполнитьЗначенияСвойств(ОбъектИнструкции, СвойстваИнструкции);
		
		Если СвойстваИнструкции.Свойство("УсловияОтображения")
			И СвойстваИнструкции.УсловияОтображения.Количество() > 0 Тогда
			
			ОбъектИнструкции.УсловияОтображения.Очистить();
			Для Каждого УсловиеОтображения Из СвойстваИнструкции.УсловияОтображения Цикл
				НоваяСтрока = ОбъектИнструкции.УсловияОтображения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, УсловиеОтображения.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если СвойстваИнструкции.Свойство("ДоступНаЧтение") Тогда
			Для Каждого Роль Из СвойстваИнструкции.ДоступНаЧтение Цикл
				НоваяСтрока = ОбъектИнструкции.ДоступНаЧтение.Добавить();
				НоваяСтрока.Пользователь = Роль.Значение;
			КонецЦикла;
		КонецЕсли;
			
		ОбъектИнструкции.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Получает перечень новых инструкций на основании макета ПереченьНовыхИнструкций.
// Если инструкция отсутствует в базе, то она создается.
//
// Возвращаемое значение:
//   - Выборка из макета ПереченьНовыхИнструкций
//
Функция ПолучитьПереченьНовыхИнструкций()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ПереченьНовыхИнструкций", "C1:C4");
	
	ДатаЗагрузки = ТекущаяДата();
	
	// Создание инструкций
	Пока Выборка.Следующий() Цикл
		
		GUIDИнструкции	= Выборка.GUIDИнструкции;
		ИмяМакета		= Выборка.МакетИнструкции;
		ИмяПредмета		= Выборка.ПредметИнструкции;
		Активность		= Выборка.Активна;
		
		HTMLКодИнструкции = ПолучитьМакет(ИмяМакета).ПолучитьТекст();
		Если HTMLКодИнструкции <> Неопределено Тогда
			
			ПредметСсылка = РаботаСИнструкциями.СсылкаНаПредметИнструкции(ИмяПредмета);
			Если ПредметСсылка <> Неопределено Тогда
				
				НаименованиеНовойИнструкции = 
					РаботаСИнструкциями.НаименованиеИнструкцииИзHTML(HTMLКодИнструкции);
				
				Данные = Новый Структура();
				Данные.Вставить("GUID", GUIDИнструкции);
				Данные.Вставить("Наименование", НаименованиеНовойИнструкции);
				Данные.Вставить("ПредметСсылка", ПредметСсылка);
				Данные.Вставить("HTMLКодИнструкции", HTMLКодИнструкции);
				Данные.Вставить("ДатаЗагрузки", ДатаЗагрузки);
				Данные.Вставить("Активность", Активность);
				Данные.Вставить("ИмяМакетаТиповой", "");
				
				РаботаСИнструкциями.СоздатьИнструкцию(Данные);
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Выборка.Сбросить();
	
	Возврат Выборка;
	
КонецФункции

// Формирует структуру с условиями отображения инструкции из КэшСсылокСозданныхОбъектов
// на основании переданных параметров.
//
// Параметры:
//   - ПредметИнструкции - Строка - предмет инструкции
//   - ВидДокумента - Строка - имя ВидДокумента по макетам 
//                    ВидыВнутреннихДокументов/ВидыВходящихДокументов/ВидыИсходящихДокументов
//   - СостояниеДокумента - Строка - имя СостояниеДокумента по макету ПереченьНовыхИнструкций
//   - ГрифДоступа - Строка - имя ГрифДоступа по макету ПереченьНовыхИнструкций
//   - ВопросДеятельности - Строка - имя ВопросДеятельности по макету ПереченьНовыхИнструкций
//
// Возвращаемое значение:
//   Структура
//
Функция ОпределитьУсловияОтображенияИнструкции(
	Знач ПредметИнструкции,
	Знач ВидДокумента,
	Знач СостояниеДокумента,
	Знач ГрифДоступа,
	Знач ВопросДеятельности)
	
	УсловиеОтображения = Новый Структура;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Если ПредметИнструкции = "ВнутренниеДокументы" Тогда
			Вид = ПолучитьСсылкуИзКэша(ВидДокумента, "СправочникСсылка.ВидыВнутреннихДокументов");
		ИначеЕсли ПредметИнструкции = "ВходящиеДокументы" Тогда
			Вид = ПолучитьСсылкуИзКэша(ВидДокумента, "СправочникСсылка.ВидыВходящихДокументов");
		ИначеЕсли ПредметИнструкции = "ИсходящиеДокументы" Тогда
			Вид = ПолучитьСсылкуИзКэша(ВидДокумента, "СправочникСсылка.ВидыИсходящихДокументов");
		КонецЕсли;
		УсловиеОтображения.Вставить("ВидДокумента", Вид);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеДокумента) Тогда
		УсловиеОтображения.Вставить(
			"СостояниеДокумента",
			ПредопределенноеЗначение("Перечисление.СостоянияДокументов." + СостояниеДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрифДоступа) Тогда
		УсловиеОтображения.Вставить(
			"ГрифДоступа",
			ПолучитьСсылкуИзКэша(ГрифДоступа, "СправочникСсылка.ГрифыДоступа"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВопросДеятельности) Тогда
		УсловиеОтображения.Вставить(
			"ВопросДеятельности",
			ПолучитьСсылкуИзКэша(ВопросДеятельности, "СправочникСсылка.ВопросыДеятельности"));
	КонецЕсли;
		
	Возврат УсловиеОтображения;
	
КонецФункции

// Определяет и возвращает путь к папке документов.
//
// Параметры:
//   Папка - имя папки в КэшСсылокСозданныхОбъектов
//   Папки - таблица значений с данными из макета ПапкиВнутреннихДокументов
//
// Возвращаемое значение
//   Строка - путь к папке документов.
//
Функция ПутьКПапкеДокумента(Знач Папка, Знач Папки)
	
	ТекущаяПапка = Папки.Найти(Папка, "Имя");
	Если ТекущаяПапка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяПапка.ИмяРодителя) Тогда
		Возврат ПутьКПапкеДокумента(ТекущаяПапка.ИмяРодителя, Папки) + " / " + ТекущаяПапка.Наименование;
	Иначе
		Возврат ТекущаяПапка.Наименование;
	КонецЕсли;
	
КонецФункции

// Возвращает пути к папкам внутренних документов на основании макета ПапкиВнутреннихДокументов
//
// Возвращаемое значение:
//   Таблица значение с такими же колонками, как и в макете ПапкиВнутреннихДокументов
//
Функция ПутиКПапкамВнутреннихДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ПапкиВнутреннихДокументов", "C1:C3");
	
	Папки = Выборка.Владелец().Выгрузить();
	
	// Удаляем пустые строки
	ПустыеСтроки = Папки.НайтиСтроки(Новый Структура("Имя", ""));
	Для Каждого Строка Из ПустыеСтроки Цикл
		Папки.Удалить(Строка);
	КонецЦикла;
	
	Возврат Папки;
	
КонецФункции

// Создает файлы на основе макета СписокФайлов
//
Процедура ЗагрузитьФайлы()
	
	Выборка = ПолучитьВыборкуСтрокМакета("СписокФайлов", "C1:C5");
	
	Пока Выборка.Следующий() Цикл
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла(Выборка.Расширение);
		
		Если Выборка.ТипВладельца = "СправочникСсылка.ШаблоныВнутреннихДокументов" Или 
			Выборка.ТипВладельца = "СправочникСсылка.ШаблоныИсходящихДокументов" Тогда 
			ИмяМакета = Лев(Выборка.Имя, СтрДлина(Выборка.Имя) - СтрДлина(Выборка.ВладелецФайла));
			МакетДанных = ПолучитьМакет(ИмяМакета);
		Иначе 
			МакетДанных = ПолучитьМакет(Выборка.Имя);
		КонецЕсли;
		
		МакетДанных.Записать(ПутьКФайлу);
		
		СтруктураФайла = Справочники.Файлы.ПолучитьСтруктуруФайла();
		СтруктураФайла.Владелец = ПолучитьСсылкуИзКэша(Выборка.ВладелецФайла, Выборка.ТипВладельца);
		СтруктураФайла.ПутьКФайлуНаДиске = ПутьКФайлу;
		СтруктураФайла.ИмяФайла = Выборка.НаименованиеФайла;
		
		ФайлСсылка = Справочники.Файлы.СоздатьФайл(СтруктураФайла);
		ДобавитьСсылкуВКэш(Выборка.Имя, ФайлСсылка);
		
		УдалитьФайлы(ПутьКФайлу);
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает правила автозаполнения шаблонов файлов из макета
Процедура ЗагрузитьПравилаАвтозаполненияШаблоновФайлов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ПравилаАвтозаполненияФайлов", "C1:C13");
	Пока Выборка.Следующий() Цикл
		
		ИмяПравила = Выборка.Имя;
		
		СтруктураПравила = 
			Справочники.ПравилаАвтозаполненияФайлов.ПолучитьСтруктуруПравилаАвтозаполнения();
			
		СтруктураПравила.Наименование = Выборка.Наименование;
		
		// Установка владельца правила - вида документов
		Владелец = ПолучитьСсылкуИзКэша(Выборка.ВладелецФайла, Выборка.ТипВладельцаФайла);
		СтруктураПравила.ВладелецФайла = Владелец;
		
		// установка шаблона файлов
		ФайлСсылка = ПолучитьСсылкуИзКэша(Выборка.ШаблонФайла, "СправочникСсылка.Файлы");
		СтруктураПравила.ШаблонФайла = ФайлСсылка;
		
		СтруктураПравила.Ответственный = ТекущийПользователь;
		СтруктураПравила.Комментарий = ""; 	
		
		// Обход строк табличных частей
		Пока Выборка.Следующий() Цикл
			
			ПустаяСтрока = Истина;
			
			Если Выборка.ТермДляЗамены <> "" 
				Или Выборка.ЗаменяемаяСтрока <> "" Тогда
				
				НоваяСтрока = СтруктураПравила.ДанныеДляАвтозаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СсылкаНаНовоеПравило = 
			Справочники.ПравилаАвтозаполненияФайлов.СоздатьПравилоАвтозаполнения(СтруктураПравила);
		ДобавитьСсылкуВКэш(ИмяПравила, СсылкаНаНовоеПравило);
		
	КонецЦикла;	
	
КонецПроцедуры

// Загружает шаблоны внутренних документов по макету ШаблоныВнутреннихДокументов
//
Процедура ЗагрузитьШаблоныВнутреннихДокументов()
	
	СписокДоступныхФункцийАвтоподстановки = ШаблоныДокументов.ПолучитьСписокДоступныхФункций();
	
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныВнутреннихДокументов", "C1:C10");
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		
		СтруктураШаблона = 
			Справочники.ШаблоныВнутреннихДокументов.ПолучитьСтруктуруШаблона();	
		СтруктураШаблона.Наименование = Выборка.Наименование;
		СтруктураШаблона.ВидДокумента = ПолучитьСсылкуИзКэша(
			Выборка.ВидДокумента, "СправочникСсылка.ВидыВнутреннихДокументов");
		СтруктураШаблона.ВопросДеятельности = ПолучитьСсылкуИзКэша(
			Выборка.ВопросДеятельности, "СправочникСсылка.ВопросыДеятельности");
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураДел) Тогда
			СтруктураШаблона.НоменклатураДел = ПолучитьСсылкуИзКэша(
				Выборка.НоменклатураДел, "СправочникСсылка.НоменклатураДел");
		КонецЕсли;
		
		СтруктураШаблона.Папка = ПолучитьСсылкуИзКэша(
			Выборка.Папка, "СправочникСсылка.ПапкиВнутреннихДокументов");
		Если Не ЗначениеЗаполнено(СтруктураШаблона.Папка) Тогда
			ТекстОшибки = НСтр("ru = 'Не найдена папка внутренних документов ""%1""'; en = 'Internal documents folder ""%1"" not found'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Выборка.Папка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		СтруктураШаблона.Автор = ТекущийПользователь;
		
		Если ИспользоватьУчетПоОрганизациям Тогда
			СтруктураШаблона.Организация = ПолучитьСсылкуИзКэша(
				Выборка.Организация, "СправочникСсылка.Организации");
		КонецЕсли;
		
		// Обход строк табличной части РабочаяГруппа
		Пока Выборка.Следующий() Цикл
			
			ПустаяСтрока = Истина;
			
			Если Выборка.РабочаяГруппаДокументаУчастникТип <> "" Тогда
				
				НоваяСтрока = СтруктураШаблона.РабочаяГруппаДокумента.Добавить();
				Если Выборка.РабочаяГруппаДокументаУчастникТип = "Строка" Тогда
					
					ПредставлениеАвтоподстановки = 
					СписокДоступныхФункцийАвтоподстановки.НайтиПоЗначению(
						Выборка.РабочаяГруппаДокументаУчастникАвтоПодстановка).Представление;
					
					НоваяСтрока.Участник = ПредставлениеАвтоподстановки;
				Иначе
					Участник = ПолучитьСсылкуИзКэша(
						Выборка.РабочаяГруппаДокументаУчастник, Выборка.РабочаяГруппаДокументаУчастникТип);
					НоваяСтрока.Участник = Участник;
				КонецЕсли;
				
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		СсылкаНаНовыйШаблон = Справочники.ШаблоныВнутреннихДокументов.СоздатьШаблон(СтруктураШаблона);
		ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		
	КонецЦикла;
		
КонецПроцедуры

// Загружает шаблоны исходящих документов по макету ШаблоныИсходящихДокументов
//
Процедура ЗагрузитьШаблоныИсходящихДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныИсходящихДокументов", "C1:C8");
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		
		СтруктураШаблона = 
			Справочники.ШаблоныИсходящихДокументов.ПолучитьСтруктуруШаблона();	
		СтруктураШаблона.Наименование = Выборка.Наименование;
		СтруктураШаблона.ВидДокумента = ПолучитьСсылкуИзКэша(
			Выборка.ВидДокумента, "СправочникСсылка.ВидыИсходящихДокументов");
		СтруктураШаблона.ВопросДеятельности = ПолучитьСсылкуИзКэша(
			Выборка.ВопросДеятельности, "СправочникСсылка.ВопросыДеятельности");
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураДел) Тогда
			СтруктураШаблона.НоменклатураДел = ПолучитьСсылкуИзКэша(
				Выборка.НоменклатураДел, "СправочникСсылка.НоменклатураДел");
		КонецЕсли;
		
		СтруктураШаблона.Автор = ТекущийПользователь;
		
		Если ИспользоватьУчетПоОрганизациям Тогда
				СтруктураШаблона.Организация = ПолучитьСсылкуИзКэша(
					Выборка.Организация, "СправочникСсылка.Организации");
			КонецЕсли;
		
		// Обход строк табличной части РабочаяГруппа
		Пока Выборка.Следующий() Цикл
			
			ПустаяСтрока = Истина;
			
			Если Выборка.РабочаяГруппаДокументаУчастникТип <> "" Тогда
				
				НоваяСтрока = СтруктураШаблона.РабочаяГруппаДокумента.Добавить();
				Если Выборка.РабочаяГруппаДокументаУчастникТип = "Строка" Тогда
					НоваяСтрока.Участник = Выборка.РабочаяГруппаДокументаУчастник;
				Иначе
					Участник = ПолучитьСсылкуИзКэша(
						Выборка.РабочаяГруппаДокументаУчастник, Выборка.РабочаяГруппаДокументаУчастникТип);
					НоваяСтрока.Участник = Участник;
				КонецЕсли;
				
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		СсылкаНаНовыйШаблон = Справочники.ШаблоныИсходящихДокументов.СоздатьШаблон(СтруктураШаблона);
		ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		
	КонецЦикла;
		
КонецПроцедуры

// Загружает шаблоны входящих документов по макету ШаблоныВходящихДокументов
//
Процедура ЗагрузитьШаблоныВходящихДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ШаблоныВходящихДокументов", "C1:C8");
	Пока Выборка.Следующий() Цикл
		
		Имя = Выборка.Имя;
		
		СтруктураШаблона = 
			Справочники.ШаблоныВходящихДокументов.ПолучитьСтруктуруШаблона();
		СтруктураШаблона.Наименование = Выборка.Наименование;
		СтруктураШаблона.ВидДокумента = ПолучитьСсылкуИзКэша(
			Выборка.ВидДокумента, "СправочникСсылка.ВидыВходящихДокументов");
		СтруктураШаблона.ВопросДеятельности = ПолучитьСсылкуИзКэша(
			Выборка.ВопросДеятельности, "СправочникСсылка.ВопросыДеятельности");
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураДел) Тогда
			СтруктураШаблона.НоменклатураДел = ПолучитьСсылкуИзКэша(
				Выборка.НоменклатураДел, "СправочникСсылка.НоменклатураДел");
		КонецЕсли;
		
		СтруктураШаблона.Автор = ТекущийПользователь;
		
		Если ИспользоватьУчетПоОрганизациям Тогда
				СтруктураШаблона.Организация = ПолучитьСсылкуИзКэша(
					Выборка.Организация, "СправочникСсылка.Организации");
			КонецЕсли;
		
		// Обход строк табличной части РабочаяГруппа
		Пока Выборка.Следующий() Цикл
			
			ПустаяСтрока = Истина;
			
			Если Выборка.РабочаяГруппаДокументаУчастникТип <> "" Тогда
				
				НоваяСтрока = СтруктураШаблона.РабочаяГруппаДокумента.Добавить();
				Если Выборка.РабочаяГруппаДокументаУчастникТип = "Строка" Тогда
					НоваяСтрока.Участник = Выборка.РабочаяГруппаДокументаУчастник;
				Иначе
					Участник = ПолучитьСсылкуИзКэша(
						Выборка.РабочаяГруппаДокументаУчастник, Выборка.РабочаяГруппаДокументаУчастникТип);
					НоваяСтрока.Участник = Участник;
				КонецЕсли;
				
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		СсылкаНаНовыйШаблон = Справочники.ШаблоныВходящихДокументов.СоздатьШаблон(СтруктураШаблона);
		ДобавитьСсылкуВКэш(Имя, СсылкаНаНовыйШаблон);
		
	КонецЦикла;
		
КонецПроцедуры

// Загружает настройки доп. реквизитов по макету ДополнительныеРеквизиты
//
Процедура ЗагрузитьНастройкиДопРеквизитов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ДополнительныеРеквизиты", "C1:C16");
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ВидДокумента) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураРеквизита = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСтруктуруРеквизита();

		СсылкаВидДокумента = ПолучитьСсылкуИзКэша(Выборка.ВидДокумента, Выборка.ТипВидаДокументов);
		ИмяНабора = СсылкаВидДокумента.Наименование;
		Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию(ИмяНабора);
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Строка = НСтр("ru = 'Не найдено набора доп.реквизитов для свойства ""%1""'; en = 'Not found set of additional attributes for property ""%1""'");
			Строка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Строка, ИмяНабора);
			ВызватьИсключение Строка;
		КонецЕсли;
		СтруктураРеквизита.НаборСвойств = Набор;
		СтруктураРеквизита.ТипЗначения = Новый ОписаниеТипов(Выборка.ТипыЗначений);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Выборка);
		Для Каждого КлючЗначение Из СтруктураРеквизита Цикл
			Если КлючЗначение.Ключ = "МногострочноеПолеВвода" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючЗначение.Значение = "1" Тогда
				СтруктураРеквизита.Вставить(КлючЗначение.Ключ, Истина);
			КонецЕсли;
			Если КлючЗначение.Значение = "0" Тогда
				СтруктураРеквизита.Вставить(КлючЗначение.Ключ, Ложь);
			КонецЕсли;
		КонецЦикла;
				
		СсылкаНаНовыйРеквизит = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьДопРеквизит(СтруктураРеквизита);
		ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаНовыйРеквизит);
		
		Если ЗначениеЗаполнено(СсылкаНаНовыйРеквизит.НаборСвойств) Тогда
			ДобавитьВНабор = СсылкаНаНовыйРеквизит.НаборСвойств;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДобавитьВНабор);
			Блокировка.Заблокировать();
			ЗаблокироватьДанныеДляРедактирования(ДобавитьВНабор);
			
			ОбъектНаборСвойств = ДобавитьВНабор.ПолучитьОбъект();
			Если СсылкаНаНовыйРеквизит.ЭтоДополнительноеСведение Тогда
				ТабличнаяЧасть = ОбъектНаборСвойств.ДополнительныеСведения;
			Иначе
				ТабличнаяЧасть = ОбъектНаборСвойств.ДополнительныеРеквизиты;
			КонецЕсли;
			НайденнаяСтрока = ТабличнаяЧасть.Найти(СсылкаНаНовыйРеквизит, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Свойство = СсылкаНаНовыйРеквизит;
				ОбъектНаборСвойств.Записать();
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Создает новые типы связей на основе макета ТипыСвязей.
//
Процедура ЗагрузитьТипыСвязей()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ТипыСвязей", "C1:C2");
	Пока Выборка.Следующий() Цикл
		СтруктураТиповСвязей = Справочники.ТипыСвязей.ПолучитьСтруктуруТиповСвязей();
		СтруктураТиповСвязей.Наименование = Выборка.Наименование;
		СсылкаНаТипСвязи = Справочники.ТипыСвязей.СоздатьТипСвязи(СтруктураТиповСвязей);
		ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаТипСвязи);
	КонецЦикла;
	
КонецПроцедуры

// Загружает настройки связей на основе макета НастройкиСвязей.
//
Процедура ЗагрузитьНастройкиСвязей()
	
	Выборка = ПолучитьВыборкуСтрокМакета("НастройкиСвязей", "C1:C6");
	ИмяТипа_ТипыСвязей = "СправочникСсылка.ТипыСвязей";
	ИмяТипа_ВидыВнутреннихДокументов = "СправочникСсылка.ВидыВнутреннихДокументов";

	Пока Выборка.Следующий() Цикл
		
		СсылкаИз = ПолучитьСсылкуИзКэша(Выборка.СсылкаИз, ИмяТипа_ВидыВнутреннихДокументов);
		
		СсылкаНа = ПолучитьСсылкуИзКэша(Выборка.СсылкаНа, ИмяТипа_ВидыВнутреннихДокументов);
		
		ТипСвязи = ПолучитьСсылкуИзКэша(Выборка.ТипСвязи, ИмяТипа_ТипыСвязей);
		
		ТипОбратнойСвязи = ПолучитьСсылкуИзКэша(Выборка.ТипОбратнойСвязи, ИмяТипа_ТипыСвязей);
		
		СтруктураНастроекСвязей = РегистрыСведений.НастройкаСвязей.ПолучитьСтруктуруНастроекСвязей();
		СтруктураНастроекСвязей.СсылкаИз = СсылкаИз;
		СтруктураНастроекСвязей.СсылкаНа = СсылкаНа;
		СтруктураНастроекСвязей.ТипСвязи = ТипСвязи;
		СтруктураНастроекСвязей.ТипОбратнойСвязи = ТипОбратнойСвязи;

		Если Выборка.ХарактерСвязи = "Множественная" Тогда 
			СтруктураНастроекСвязей.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
		Иначе 
			СтруктураНастроекСвязей.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
		КонецЕсли;	
		
		Если Выборка.ХарактерОбратнойСвязи = "Множественная" Тогда 
			СтруктураНастроекСвязей.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
		Иначе 
			СтруктураНастроекСвязей.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
		КонецЕсли;		

		РегистрыСведений.НастройкаСвязей.СоздатьНастройкуСвязи(СтруктураНастроекСвязей);
	КонецЦикла;
	
КонецПроцедуры

// Загружает внутренние документы по макету ВнутренниеДокументы
// 
Процедура ЗагрузитьВнутренниеДокументы()
	
	Выборка = ПолучитьВыборкуСтрокМакета("ВнутренниеДокументы", "C1:C11");
	
	ИмяТипа_ВидыВнутреннихДокументов = "СправочникСсылка.ВидыВнутреннихДокументов";
	ИмяТипа_ПапкиВнутреннихДокументов = "СправочникСсылка.ПапкиВнутреннихДокументов";
	ИмяТипа_Организации = "СправочникСсылка.Организации";
	ИмяТипа_ВопросыДеятельности = "СправочникСсылка.ВопросыДеятельности";
	ИмяТипа_НоменклатураДел = "СправочникСсылка.НоменклатураДел";
	ИмяТипа_СтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	
	Пока Выборка.Следующий() Цикл
		
		СтруктуруВнутреннегоДокумента = 
			Справочники.ВнутренниеДокументы.ПолучитьСтруктуруВнутреннегоДокумента();
			
		СтруктуруВнутреннегоДокумента.ВидДокумента = 
			ПолучитьСсылкуИзКэша(Выборка.ВидДокумента, ИмяТипа_ВидыВнутреннихДокументов);
		СтруктуруВнутреннегоДокумента.Заголовок = Выборка.Заголовок;
		СтруктуруВнутреннегоДокумента.Содержание = Выборка.Содержание;
		СтруктуруВнутреннегоДокумента.Папка = 
			ПолучитьСсылкуИзКэша(Выборка.Папка, ИмяТипа_ПапкиВнутреннихДокументов);
			
		Если ИспользоватьУчетПоОрганизациям Тогда
			СтруктуруВнутреннегоДокумента.Организация = 
				ПолучитьСсылкуИзКэша(Выборка.Организация, ИмяТипа_Организации);
		КонецЕсли;
		
		СтруктуруВнутреннегоДокумента.ВопросДеятельности = 
			ПолучитьСсылкуИзКэша(Выборка.ВопросДеятельности, ИмяТипа_ВопросыДеятельности);
			
		Если ЗначениеЗаполнено(Выборка.НоменклатураДел) Тогда
			СтруктуруВнутреннегоДокумента.НоменклатураДел = 
				ПолучитьСсылкуИзКэша(Выборка.НоменклатураДел, ИмяТипа_НоменклатураДел);
		КонецЕсли;
			
		СтруктуруВнутреннегоДокумента.КоличествоЭкземпляров = Число(Выборка.КоличествоЭкземпляров);
		СтруктуруВнутреннегоДокумента.КоличествоЛистов = Число(Выборка.КоличествоЛистов);
		СтруктуруВнутреннегоДокумента.Подразделение = 
			ПолучитьСсылкуИзКэша(Выборка.Подразделение, ИмяТипа_СтруктураПредприятия);
			
		СсылкаНаНовыйДокумент =
			Справочники.ВнутренниеДокументы.СоздатьВнутреннийДокумент(СтруктуруВнутреннегоДокумента);
		
		ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаНовыйДокумент);
			
	КонецЦикла;
	
КонецПроцедуры

// Загружает связи документов по макету СвязиДокументов
// 
Процедура ЗагрузитьСвязиДокументов()
	
	Выборка = ПолучитьВыборкуСтрокМакета("СвязиДокументов", "C1:C6");
	
	ИмяТипа_ТипыСвязей = "СправочникСсылка.ТипыСвязей";
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураСвязи = РегистрыСведений.СвязиДокументов.ПолучитьСтруктуруСвязи();
		СтруктураСвязи.Документ = ПолучитьСсылкуИзКэша(Выборка.Документ, Выборка.ИмяТипаДокумента);
		СтруктураСвязи.СвязанныйДокумент = 
			ПолучитьСсылкуИзКэша(Выборка.СвязанныйДокумент, Выборка.ИмяТипаСвязанногоДокумента);
		СтруктураСвязи.ТипСвязи = ПолучитьСсылкуИзКэша(Выборка.ТипСвязи, ИмяТипа_ТипыСвязей);
		
		РегистрыСведений.СвязиДокументов.СоздатьСвязь(СтруктураСвязи);
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает условия маршрутизации
// 
Процедура ЗагрузитьУсловияМаршрутизации()
	
	Выборка = ПолучитьВыборкуСтрокМакета("УсловияМаршрутизации", "C1:C6");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураУсловияМаршрутизации = 
			Справочники.УсловияМаршрутизации.ПолучитьСтруктуруУсловияМаршрутизации();
		ЗаполнитьЗначенияСвойств(СтруктураУсловияМаршрутизации, Выборка,, "ТипОбъекта, СпособЗаданияУсловия");
		СтруктураУсловияМаршрутизации.ТипОбъекта = 
			ПолучитьСсылкуИзКэша(Выборка.ТипОбъекта);
		СтруктураУсловияМаршрутизации.СпособЗаданияУсловия = 
			ПолучитьСсылкуИзКэша(Выборка.СпособЗаданияУсловия);
			
			Если СтруктураУсловияМаршрутизации.СпособЗаданияУсловия = 
				Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				
				Настройки = Неопределено;
				Выполнить(Выборка.КодВычисленияНастроекОтбора);
				СтруктураУсловияМаршрутизации.НастройкаУсловия = Новый ХранилищеЗначения(Настройки);
			КонецЕсли;
			
		СсылкаНаУсловиеМаршрутизации = 
			Справочники.УсловияМаршрутизации.СоздатьУсловиеМаршрутизации(СтруктураУсловияМаршрутизации);
		ДобавитьСсылкуВКэш(Выборка.Имя, СсылкаНаУсловиеМаршрутизации);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует Право - Строку - в булево
Функция ПреобразоватьЗначениеВБулево(Право)
	
	Если Право = "1" Или НРег(Право) = "да"  Тогда
		Возврат Истина; // разрешено
	КонецЕсли;	
		
	Возврат Неопределено; // не указано
	
КонецФункции

// Получает выборку строк из макета по области
//
// Параметры:
//   ИмяМакета - имя макета обработки
//   ИмяОбласти - область из которой формируется выборка
//
// Возвращаемые параметры:
//   Выборка
//
Функция ПолучитьВыборкуСтрокМакета(ИмяМакета, ИмяОбласти)
	
	МакетДанных = ПолучитьМакет(ИмяМакета);
	ОбластьЗаголовков = МакетДанных.Область(ИмяОбласти);
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЗаголовков);
	Построитель.Выполнить();
	
	Возврат Построитель.Результат.Выбрать();
	
КонецФункции

// Возвращает таблицу с количеством записей в ключевых справочниках, которые заполняются помощником
//
// Возвращаемое значение:
//   ТаблицаЗначений
//      - НаименованиеОбъекта - Строка - представление справочника.
//      - КоличествоЗаписей - Число - количество записей в справочнике.
//
Функция ЗаполненныеДанныеВ_ИБ() Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	
	Выборка = ПолучитьВыборкуСтрокМакета("ПроверяемыеДанныеПередЗагрузкой", "C1:C3");
	
	СвязкаЗапросов = "";
	ВиртуальнаяТаблица = "ПОМЕСТИТЬ ТаблицыСКоличествомЗаписей";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Псевдоним = "" Тогда
			ОписаниеОшибки = 
				НСтр("ru = 'В строке макета ПроверяемыеДанныеПередУстановкой не заполнено поле Псевдоним.'; en = 'Field Псевдоним is empty in the template row ПроверяемыеДанныеПередУстановкой'");
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запрос.УстановитьПараметр(Выборка.ИмяВДеревеОбъектовМетаданных, Выборка.Псевдоним);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&%1 КАК НаименованиеОбъекта,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %2.Ссылка) КАК КоличествоЗаписей
			|%3
			|ИЗ
			|	%4 КАК %5
			|ГДЕ
			|	%6.Предопределенный = ЛОЖЬ";
			
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗапроса,
			Выборка.ИмяВДеревеОбъектовМетаданных,
			Выборка.ИмяВДеревеОбъектовМетаданных,
			ВиртуальнаяТаблица,
			Выборка.ПутьКДаннымВЗапросе,
			Выборка.ИмяВДеревеОбъектовМетаданных,
			Выборка.ИмяВДеревеОбъектовМетаданных);
		
		Запрос.Текст = Запрос.Текст + СвязкаЗапросов + ТекстЗапроса;
		
		СвязкаЗапросов = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
			
		ВиртуальнаяТаблица = "";
		
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицыСКоличествомЗаписей.НаименованиеОбъекта,
			|	ТаблицыСКоличествомЗаписей.КоличествоЗаписей
			|ИЗ
			|	ТаблицыСКоличествомЗаписей КАК ТаблицыСКоличествомЗаписей
			|ГДЕ
			|	ТаблицыСКоличествомЗаписей.КоличествоЗаписей > 0";
			
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание данных, которые заполняются обработкой.
//
// Возвращаемое значение:
//   Строка
//
Функция ЗаполняемыеДанные()
	
	Описание = "";
	
	СимволBullet = Символ(8226);
	
	Выборка = ПолучитьВыборкуСтрокМакета("ЗагружаемыеДанные", "C1:C3");
	
	СимволПереносаСтроки = "";
	
	Пока Выборка.Следующий() Цикл
		
		Результат = Неопределено;
		Если ЗначениеЗаполнено(Выборка.Условие) Тогда
			Выполнить(Выборка.Условие);
			Если НЕ Результат Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Описание = Описание + СимволПереносаСтроки + Символы.Таб + СимволBullet + " " + Выборка.Описание;
		
		СимволПереносаСтроки = Символы.ПС;
		
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСКэшемСозданныхОбъектов

// Инициализирует кеш. Если кеш заполнен, то он очищается.
//
Процедура ИнициализироватьКеш()
	
	КэшСсылокСозданныхОбъектов = Новый Соответствие;
	
КонецПроцедуры

// Добавляет ссылку на объект в кэш.
//
// Параметры:
//  Имя - Строка - уникальное имя объекта в макете.
//  СсылкаНаОбъект - ссылка на объект
//
Процедура ДобавитьСсылкуВКэш(Имя, СсылкаНаОбъект)
	
	ИмяТипаСсылки = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(СсылкаНаОбъект));
	
	Ключ = ИмяТипаСсылки + "_" + Имя;
	
	КэшСсылокСозданныхОбъектов.Вставить(Ключ, СсылкаНаОбъект);
	
КонецПроцедуры

// Получает ссылку на объект из кэша
//
// Параметры:
//  Имя - Строка - уникальное имя объекта в макете.
//  ИмяТипаСсылки - Строка - имя типа получаемой ссылки.
//
// Возвращаемое значение:
//   Ссылка - ссылка на объект.
//   Неопределено - если ссылка по указанному имени и типу ссылки не найдена.
//
Функция ПолучитьСсылкуИзКэша(Имя, ИмяТипаСсылки = "")
	
	Попытка
	
		Ключ = ИмяТипаСсылки + "_" + Имя;
	
		Ссылка = КэшСсылокСозданныхОбъектов.Получить(Ключ);
	
		Если Ссылка = Неопределено Тогда
			
			Если Имя = "" Тогда
				ВызватьИсключение ("ru = 'Не задано Имя получаемого объекта из КЭШа.'");
			КонецЕсли;
			
			Ссылка = ПредопределенноеЗначение(Имя);
		КонецЕсли;
	
	Исключение
		
		ОписаниеОшибки = НСтр("ru = 'Не найдена ссылка в КЭШе.
			|Имя: %1
			|Имя типа ссылки: %2
			|Подробное описание ошибки: %3';
			|en = 'Reference not found in the cache.
			|Name: %1
			|Reference type name: %2
			|Detailed error description: %3'");
			
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки,
			Имя, ИмяТипаСсылки, ОписаниеОшибки());
		
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли
