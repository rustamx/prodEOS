#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправки = ПараметрыОтправкиПочтовогоСообщенияВызовСервера.Создать();
	
	ДоступныеПрофили = ПараметрыОтправкиПочтовогоСообщения.ПолучитьСписокДоступныхПрофилей(ПараметрыОтправки);
	Если ДоступныеПрофили.Количество() = 0 Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		ВызватьИсключение НСтр("ru = 'У вас не настроено ни одного профиля легкой почты для отправки.
		|Настроить профили можно в форме ""Персональные настройки - Легкая почта"".';
		|en = 'You have not configured any profile of simplified mail for send. 
		|Profiles can be configured in form ""Personal settings-simplified email"".'");
	КонецЕсли;	
	
	ЗаполнитьРеквизитыФормы(Параметры.Объекты);
	Если Параметры.Свойство("Кому") Тогда
		СтрокаДанных = Получатели.Добавить();
		СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'; en = 'To:'");	
		СтрокаДанных.Адрес = Параметры.Кому;
	КонецЕсли;	
	
	Если Параметры.Свойство("СписокФайлов") Тогда
		
		ВложенияВПисьмо = Параметры.СписокФайлов;
		
		// помечаем те вложения, которые являются путями к файлам на клиенте
		Для Каждого ОписаниеВложение из ВложенияВПисьмо Цикл
			
			Если ТипЗнч(ОписаниеВложение) = Тип("Структура") Тогда
				Если ЭтоАдресВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище) Тогда
					
					СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеВложение.Представление);
					
					ВложенияСтрока = Вложения.Добавить();
					
					ВложенияСтрока.ИмяФайла = СтруктураИмениФайла.Имя;
					ВложенияСтрока.ИндексКартинки = 
						ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураИмениФайла.Расширение);
						
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище);
					ВложенияСтрока.Размер = ДвоичныеДанные.Размер();
					
					ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
					ВложенияСтрока.ПометкаУдаления = Ложь;
					ВложенияСтрока.ИмяФайлаНаДиске = "";
					ВложенияСтрока.Редактирует = Неопределено;
					ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
					ВложенияСтрока.Представление = СтруктураИмениФайла.ИмяБезРасширения;
					ВложенияСтрока.Выбран = Истина;
					
					ВложенияСтрока.Расположение = "ВременноеХранилище";
					ВложенияСтрока.Ссылка = Неопределено;
					ВложенияСтрока.Адрес = ОписаниеВложение.АдресВоВременномХранилище;
					ВложенияСтрока.ИмяФайла = ОписаниеВложение.Представление;
					
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	СписокВыбораКому = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеКому");
	Для Каждого СтрокаСписка Из СписокВыбораКому Цикл
		Элементы.ПолучателиПредставление.СписокВыбора.Добавить(СтрокаСписка.Значение);
	КонецЦикла;	
	
	Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка = СписокВыбораКому.Количество() <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РасширениеРаботыСКриптографиейПодключено = ПодключитьРасширениеРаботыСКриптографией();
	
	Если Получатели.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ШифроватьПриОтправке Тогда
		Для каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			Если ПустаяСтрока(ТаблицаАдресовИСертификатовСтрока.Кому) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Кому"" не заполнено.'; en = '""To"" field is empty.'"),,
					"ТаблицаАдресовИСертификатов[" + ТаблицаАдресовИСертификатовСтрока.ПолучитьИдентификатор() + "].Кому");
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТаблицаАдресовИСертификатовСтрока.Сертификат) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Сертификат"" не заполнено.'; en = '""Certificates"" field is empty.'"),,
					"ТаблицаАдресовИСертификатов[" + ТаблицаАдресовИСертификатовСтрока.ПолучитьИдентификатор() + "].Сертификат");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
			ЕстьАдреса = Ложь;
			Для Каждого Строка Из Получатели Цикл
				Если Не ПустаяСтрока(Строка.Адрес) Тогда
					ЕстьАдреса = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не ЕстьАдреса Тогда
				
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не указано ни одного адреса получателя.'; en = 'No recipient addresse is specified.'"),,
					"Получатели");
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШифроватьПриОтправкеПриИзменении(Элемент)
	
	Если ШифроватьПриОтправке Тогда
		ПеренестиАдресаИзКомуВТаблицу();
		Кому = "";
		Элементы.СтраницыПолучатели.ТекущаяСтраница = Элементы.СтраницаТаблицаАдресов;
		Элементы.ТаблицаАдресовИСертификатов.Видимость = Истина;
		Элементы.ТаблицаАдресовИСертификатов.ВысотаВСтрокахТаблицы = Макс(2, ТаблицаАдресовИСертификатов.Количество());
	Иначе
		ПеренестиАдресаИзТаблицыВКому();
		ТаблицаАдресовИСертификатов.Очистить();
		Элементы.ТаблицаАдресовИСертификатов.Видимость = Ложь;
		Элементы.СтраницыПолучатели.ТекущаяСтраница = Элементы.СтраницаПолучатели;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	УстановитьЗаголовокКомандыОтправить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПолучатели

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	РежимДобавленияАдресата = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
		
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'; en = 'To:'");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура ТаблицаАдресовИСертификатовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Отбор = Новый Структура("Сертификат", Значение);
		Строки = ТаблицаАдресовИСертификатов.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаАдресовИСертификатов.Добавить().Сертификат = Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовВложения

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьСертификат(Команда)
	
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодборСертификатовДляШифрования",
		, Элементы.ТаблицаАдресовИСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Команда)
	
	ОткрытьВложениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОтправкиКлиент();
	Состояние(НСтр("ru = 'Идет отправка почтового сообщения. Пожалуйста, подождите...'; en = 'Sending a email message. Please wait ...'"));
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьПродолжение",
		ЭтотОбъект);
	ЛегкаяПочтаКлиент.Отправить(ОписаниеОповещения, ПараметрыОтправки);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПродолжение(Результат, Параметры) Экспорт
	
	Если Не Результат.КодВозврата Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось отправить сообщение!'; en = 'Message could not be sent!'");
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстПредупреждения, Символы.ПС, Результат.СообщениеОбОшибке);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Состояние(НСтр("ru = 'Почтовое сообщение отправлено.'; en = 'An email message is sent.'"));
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстПисьма()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Тема", "");
	Контекст.Вставить("СодержаниеДокументов", "");
	Контекст.Вставить("ТекстОснований", "");
	Контекст.Вставить("КоличествоОснований", 0);
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		ДобавитьОписаниеВложения(ЭлементДерева, Контекст);
	КонецЦикла;
	
	Содержание = "";
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Содержание,
		Символы.ПС + Символы.ПС,
		Контекст.СодержаниеДокументов);
		
	Если ЗначениеЗаполнено(ТекстЗаметки) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Содержание,
			Символы.ПС + Символы.ПС,
			ТекстЗаметки);
	КонецЕсли;	
		
	ОтправкаПодписьСообщения = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ОтправкаПодписьСообщения");
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Содержание,
		Символы.ПС + Символы.ПС,
		ОтправкаПодписьСообщения);
	
	Если Контекст.КоличествоОснований > 0 Тогда
		Если Контекст.КоличествоОснований = 1 Тогда
			Тема = Контекст.Тема;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, НСтр("ru = 'Основание:'; en = 'Base:'"));
		Иначе
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, НСтр("ru = 'Основания:'; en = 'Base:'"));
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, Контекст.ТекстОснований);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЗакрытииСервер()
	
	Для Каждого Строка Из Получатели Цикл
		Если Не ПустаяСтрока(Строка.Адрес) Тогда
			
			Если СписокВыбораКому.НайтиПоЗначению(Строка.Адрес) = Неопределено Тогда
				СписокВыбораКому.Добавить(Строка.Адрес);
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;	
			
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ПолучателиПредставлениеКому", СписокВыбораКому);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(Объекты)
	
	Если Объекты.Количество() = 1 Тогда
		СсылкаНаОбъект = Объекты[0];
	КонецЕсли;	
	
	// Установим профиль.
	Профиль = ПараметрыОтправкиПочтовогоСообщения.ПолучитьПрофиль(ПараметрыОтправки);
	Если Параметры.Свойство("ВебКлиент") И Параметры.ВебКлиент = Истина И ТипЗнч(Профиль) = Тип("Строка") Тогда
		Профиль = Неопределено;
	КонецЕсли;
	
	// Заполним список выбора профиля.
	Элементы.Профиль.СписокВыбора.ЗагрузитьЗначения(
		ПараметрыОтправкиПочтовогоСообщения.ПолучитьСписокДоступныхПрофилей(ПараметрыОтправки));
	
	УстановитьЗаголовокКомандыОтправить();
	
	ПрикладыватьФайлВзаимодействияСЭД = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ПрикладыватьФайлВзаимодействияСЭД");
	
	Если ПрикладыватьФайлВзаимодействияСЭД = Перечисления.ДаНетСпрашивать.Да
		И Объекты.Количество() = 1
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объекты[0]) Тогда
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Истина;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Ложь;
		ОбъектВзаимодействияСЭД = Объекты[0];
	ИначеЕсли ПрикладыватьФайлВзаимодействияСЭД = Перечисления.ДаНетСпрашивать.Спрашивать
		И Объекты.Количество() = 1
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объекты[0]) Тогда
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Истина;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Истина;
		ОбъектВзаимодействияСЭД = Объекты[0];
	Иначе
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Ложь;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Ложь;
		ОбъектВзаимодействияСЭД = Неопределено;
	КонецЕсли;
	
	Если Параметры.Объекты.Количество() <> 0 
		И ДелопроизводствоКлиентСервер.ЭтоЗаметка(Параметры.Объекты[0]) Тогда
		
		ТекстЗаметки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Объекты[0], "СодержаниеТекст");
		
	КонецЕсли;	
	
	// Формирование таблицы вложений
	ДобавитьФайлыОбъектов(Объекты);
	
	// Заполнение получателей из переданных объектов
	ЗаполнитьПолучателей();
	
	// Формирование текста письма
	СформироватьТекстПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыОбъектов(Объекты)
	
	Для каждого Объект Из Объекты Цикл
		ДобавитьОбъект(ТаблицаФайлов, Объект);
	КонецЦикла;
	ПересчитатьРазмерВложений();
	
	ДобавитьВложенияИзДерева(ТаблицаФайлов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияИзДерева(ДеревоЭлементы)
	
	Для каждого ДеревоСтрока Из ДеревоЭлементы Цикл
		Если Не ДеревоСтрока.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДеревоСтрока.ЭтоФайл Тогда
			ВложенияСтрока = Вложения.Добавить();
			
			ВложенияСтрока.ИмяФайла = "";
			ВложенияСтрока.ИндексКартинки = ДеревоСтрока.ИндексКартинки;
			ВложенияСтрока.Размер = ДеревоСтрока.Размер;
			ВложенияСтрока.Расположение = "Ссылка";
			ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ДеревоСтрока.Размер);
			ВложенияСтрока.ПометкаУдаления = Ложь;
			ВложенияСтрока.ИмяФайлаНаДиске = "";
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
			ВложенияСтрока.Представление = ДеревоСтрока.Наименование;
			ВложенияСтрока.Адрес = Неопределено;
			ВложенияСтрока.Выбран = Истина;
			Если ДеревоСтрока.ЭтоПодпись Тогда
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				ВложенияСтрока.Ссылка = Неопределено;
				ВложенияСтрока.Адрес = ДеревоСтрока.Подпись;
				ВложенияСтрока.ИмяФайла = ДеревоСтрока.ИмяФайла;
			Иначе
				ВложенияСтрока.Расположение = "Ссылка";
				ВложенияСтрока.Ссылка = ДеревоСтрока.Ссылка;
				ВложенияСтрока.Адрес = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВложенияИзДерева(ДеревоСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъект(Корень, Объект, ДобавлятьДокументыТолькоСФайлами = Ложь)
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(Объект) Тогда
		ФайлыИнфо = ПолучитьИнформациюОФайлах(Новый Структура("Ссылка", Объект));
		ДобавитьФайл(Корень, ФайлыИнфо[0]);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоКомплект(Объект) Тогда
			ДобавитьКомплект(Корень, Объект);
		Иначе
			ДобавитьДокумент(Корень, Объект, ДобавлятьДокументыТолькоСФайлами);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплект(Корень, Ссылка)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Строка(Ссылка));
	ПараметрыЗаполнения.Вставить("Ссылка", Ссылка);
	СтрокаКомплект = ТаблицаФайловДобавитьСтроку(Корень, "Комплект", ПараметрыЗаполнения);
	
	ФайлыДокументаИнфо = ПолучитьИнформациюОФайлах(Новый Структура("ВладелецФайла, ПометкаУдаления", Ссылка, Ложь));
	Для каждого ФайлИнфо Из ФайлыДокументаИнфо Цикл
		ДобавитьФайл(СтрокаКомплект, ФайлИнфо);
	КонецЦикла;
	
	КомплектующиеИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(Ссылка, Ложь);
	Для каждого Элемент Из КомплектующиеИнфо.Элементы Цикл
		ДобавитьОбъект(СтрокаКомплект, Элемент, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокумент(Корень, Ссылка, ДобавлятьДокументыТолькоСФайлами = Ложь)
	
	ФайлыДокументаИнфо = ПолучитьИнформациюОФайлах(Новый Структура("ВладелецФайла, ПометкаУдаления", Ссылка, Ложь));
	Если ДобавлятьДокументыТолькоСФайлами И ФайлыДокументаИнфо.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаДокумент = ТаблицаФайловДобавитьСтроку(Корень, "Документ", Ссылка);
	Для каждого ФайлИнфо Из ФайлыДокументаИнфо Цикл
		ДобавитьФайл(СтрокаДокумент, ФайлИнфо);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайл(Корень, ФайлИнфо)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", ФайлИнфо.Наименование);
	ПараметрыЗаполнения.Вставить("Ссылка", ФайлИнфо.Ссылка);
	ПараметрыЗаполнения.Вставить("Размер", ФайлИнфо.Размер);
	ПараметрыЗаполнения.Вставить("Расширение", ФайлИнфо.Расширение);
	СтрокаФайл = ТаблицаФайловДобавитьСтроку(Корень, "Файл", ПараметрыЗаполнения);
	
	ОтправлятьПодписиЭППоПочте = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ОтправлятьПодписиЭППоПочте");
	
	Если ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.Спрашивать Тогда
		ЭПФайлаИнфо = ПолучитьИнформациюОбЭПФайла(ФайлИнфо.Ссылка);
		Для каждого ЭПИнфо Из ЭПФайлаИнфо Цикл
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭП: %1 - %2'; en = 'DS: %1 - %2'"),
				ЭПИнфо.Ссылка.Владелец.Наименование,
				ЭПИнфо.Наименование);
			
			ДобавитьПодпись(
				СтрокаФайл,
				Наименование,
				ЭПИнфо.Подпись.Получить(),
				ЭПИнфо.Размер);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодпись(Корень, Наименование, Подпись, Размер)
	
	Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование, "");
	ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
		Наименование,
		ПараметрыОтправкиПочтовогоСообщения.Свойство(ПараметрыОтправки, "РасширениеДляФайловПодписи"));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("Подпись", ПоместитьВоВременноеХранилище(Подпись, УникальныйИдентификатор));
	ПараметрыЗаполнения.Вставить("Размер", Размер);
	ПараметрыЗаполнения.Вставить("ИмяФайла", ИмяФайла);
	
	СтрокаЭП = ТаблицаФайловДобавитьСтроку(Корень, "Подпись", ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ТаблицаФайловДобавитьСтроку(Корень, ВидСтроки, ПараметрыЗаполнения)
	
	ТаблицаФайловСтрока = Корень.ПолучитьЭлементы().Добавить();
	ТаблицаФайловСтрока.Выбран = Истина;
	ТаблицаФайловСтрока.ЭтоДокумент = Ложь;
	ТаблицаФайловСтрока.ЭтоФайл = Ложь;
	ТаблицаФайловСтрока.ЭтоПодпись = Ложь;
	
	Если ВидСтроки = "Комплект" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 2;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоДокумент = Истина;
	ИначеЕсли ВидСтроки = "Документ" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоДокумент = Истина;
	ИначеЕсли ВидСтроки = "Файл" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ПараметрыЗаполнения.Расширение);
		ТаблицаФайловСтрока.Размер = ПараметрыЗаполнения.Размер;
		ТаблицаФайловСтрока.ЭтоФайл = Истина;
	ИначеЕсли ВидСтроки = "Подпись" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.ИмяФайла = ПараметрыЗаполнения.ИмяФайла;
		ТаблицаФайловСтрока.Ссылка = Неопределено;
		ТаблицаФайловСтрока.ИндексКартинки = 4; 
		ТаблицаФайловСтрока.Подпись = ПараметрыЗаполнения.Подпись;
		ТаблицаФайловСтрока.Размер = ПараметрыЗаполнения.Размер;
		ТаблицаФайловСтрока.ЭтоФайл = Истина;
		ТаблицаФайловСтрока.ЭтоПодпись = Истина;
	КонецЕсли;
	
	ПересчитатьРазмерКб(ТаблицаФайловСтрока);
	
	Возврат ТаблицаФайловСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателей()
	
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		ДобавитьПолучателейИзВложения(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПолучателейИзВложения(ЭлементДерева)
	
	Если Не ЭлементДерева.Выбран Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭлементДерева.ЭтоДокумент Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ЭлементДерева.Ссылка) Тогда
			
			ДокументИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДерева.Ссылка, "Отправитель, Подписал");
			Если ЗначениеЗаполнено(ДокументИнфо.Отправитель)
				И ТипЗнч(ДокументИнфо.Отправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДобавитьПолучателя(ДокументИнфо.Отправитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументИнфо.Подписал) Тогда
				ДобавитьПолучателя(ДокументИнфо.Подписал);
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ЭлементДерева.Ссылка) Тогда
			
			ПолучателиИнфо = ПолучитьИнформациюОПолучателяхИсходящегоДокумента(ЭлементДерева.Ссылка);
			Для каждого ПолучательИнфо Из ПолучателиИнфо Цикл
				Если ЗначениеЗаполнено(ПолучательИнфо.Адресат) Тогда
					ДобавитьПолучателя(ПолучательИнфо.Адресат);
				ИначеЕсли ЗначениеЗаполнено(ПолучательИнфо.Получатель) Тогда
					ДобавитьПолучателя(ПолучательИнфо.Получатель);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ЭлементДерева.Ссылка) Тогда
			
			АдресДобавлен = Ложь;
			КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДерева.Ссылка, "КонтактноеЛицо");
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				АдресДобавлен = ДобавитьПолучателя(КонтактноеЛицо);
			КонецЕсли;
			
			Если Не АдресДобавлен Тогда 
				Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДерева.Ссылка, "Контрагент");
				Если ЗначениеЗаполнено(Контрагент) Тогда
					ДобавитьПолучателя(Контрагент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОПолучателяхИсходящегоДокумента(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсходящиеДокументыПолучатели.Адресат,
		|	ИсходящиеДокументыПолучатели.Получатель
		|ИЗ
		|	Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
		|ГДЕ
		|	ИсходящиеДокументыПолучатели.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДобавитьПолучателя(Получатель) Экспорт
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивАдресов = ПолучитьАдресаДляОтправкиЛегкойПочтой(Получатель);
	
	Для Каждого ПредставлениеПочтовогоАдреса Из МассивАдресов Цикл
		СтрокаДанных = Получатели.Добавить();
		СтрокаДанных.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'");
		СтрокаДанных.Адрес = ПредставлениеПочтовогоАдреса;
	КонецЦикла;
	
	Возврат (МассивАдресов.Количество() <> 0);
	
КонецФункции

&НаСервере
Функция ПолучитьАдресаДляОтправкиЛегкойПочтой(Получатель)
	
	МассивАдресов = Новый Массив;
	
	ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		Получатель,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого СтрокаРезультата Из ТаблицаКонтактовEmail Цикл
		
		Результат = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
			Строка(Получатель),
			СокрЛП(СтрокаРезультата.Значение));
			
		МассивАдресов.Добавить(Результат);	
			
	КонецЦикла;	
		
	Возврат МассивАдресов;
	
КонецФункции

&НаСервере
Функция ДобавитьОписаниеВложения(ЭлементДерева, Контекст)
	
	Если Не ЭлементДерева.Выбран Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредставлениеОбъекта = ПолучитьПредставлениеОбъекта(ЭлементДерева.Ссылка);
	Если ЭлементДерева.ЭтоДокумент Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			СокрЛП(ЭлементДерева.Ссылка.Содержание));
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
	ИначеЕсли ЭлементДерева.ЭтоФайл Тогда
		Если Не ЭлементДерева.ЭтоПодпись Тогда
			Контекст.Тема = ПредставлениеОбъекта;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.ТекстОснований,
				Символы.ПС + Символы.ПС,
				ПредставлениеОбъекта);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.ТекстОснований,
				Символы.ПС,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
			
			Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Возврат Строка(Объект) + " (" + Объект.Метаданные().ПредставлениеОбъекта + ")"
	
КонецФункции

&НаСервере
Процедура ПересчитатьРазмерКб(ТаблицаФайловСтрока)
	
	Если ТаблицаФайловСтрока.Выбран Тогда
		Если ТаблицаФайловСтрока.Размер = 0 Тогда
			ТаблицаФайловСтрока.РазмерКб = 0;
		Иначе
			ТаблицаФайловСтрока.РазмерКб = Макс(1, Окр(ТаблицаФайловСтрока.Размер / 1024));
		КонецЕсли;
	Иначе
		ТаблицаФайловСтрока.РазмерКб = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРазмерВложений()
	
	Контекст = Новый Структура("ИтогоРазмерКб", 0);
	ОбойтиДерево(ТаблицаФайлов, Контекст, "ПересчетРазмераВложений");
	ИтогоРазмерКб = Контекст.ИтогоРазмерКб;
	
КонецПроцедуры

&НаСервере
Функция ПересчетРазмераВложений(ЭлементДерева, Контекст)
	
	ПересчитатьРазмерКб(ЭлементДерева);
	Контекст.ИтогоРазмерКб = Контекст.ИтогоРазмерКб + ЭлементДерева.РазмерКб;
	
КонецФункции

&НаСервере
Процедура ОбойтиДерево(Корень, Контекст, ИмяПроцедуры)
	
	Для каждого ЭлементДерева Из Корень.ПолучитьЭлементы() Цикл
		Результат = Вычислить(ИмяПроцедуры + "(ЭлементДерева, Контекст)");
		ОбойтиДерево(ЭлементДерева, Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДеревоНаКлиенте(Корень, Контекст, ИмяПроцедуры)
	
	Для каждого ЭлементДерева Из Корень.ПолучитьЭлементы() Цикл
		Результат = Вычислить(ИмяПроцедуры + "(ЭлементДерева, Контекст)");
		ОбойтиДеревоНаКлиенте(ЭлементДерева, Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОФайлах(Отбор)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|
		|{ГДЕ
		|	Файлы.ВладелецФайла.*,
		|	Файлы.Ссылка.*,
		|   Файлы.ПометкаУдаления.*}";
	Для каждого КлючЗначение Из Отбор Цикл
		ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
		ПостроительЗапроса.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
	ПостроительЗапроса.Выполнить();
	Результат = ПостроительЗапроса.Результат.Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОбЭПФайла(Файл)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.Объект КАК Ссылка,
		|	ЭП.Отпечаток КАК Отпечаток,
		|	ЭП.КомуВыданСертификат КАК Наименование,
		|	ЭП.Подпись КАК Подпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Файл);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Размер");
	Для каждого РезультатСтрока Из Результат Цикл
		РезультатСтрока.Размер = РезультатСтрока.Подпись.Получить().Размер();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКомандыОтправить()
	
	Если ЗначениеЗаполнено(Профиль) Тогда
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'; en = 'Send'");
		Иначе
			Элементы.Отправить.Заголовок = НСтр("ru = 'Создать письмо'; en = 'Create email'");
		КонецЕсли;
		Элементы.Отправить.Доступность = Истина;
	Иначе
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'; en = 'Send'");
		Элементы.Отправить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОтправкиКлиент()
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьПрофиль(ПараметрыОтправки, Профиль);
	
	КомуСтр = "";
	КопияСтр = "";
	
	Если ШифроватьПриОтправке Тогда
		// Соберем массив сертификатов для шифрования.
		Сертификаты = Новый Массив;
		Для Каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			Сертификаты.Добавить(ТаблицаАдресовИСертификатовСтрока.Сертификат);
		КонецЦикла;
		
		// Установим режим шифрования почтового сообщения.
		ПараметрыОтправкиПочтовогоСообщения.УстановитьРежимШифрования(
			ПараметрыОтправки,
			ШифроватьПриОтправке,
			Сертификаты);
		
		// Соберем строчку Кому.
		КомуСтр = "";
		Для Каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			ДобавитьЗначениеКСтрокеЧерезРазделитель(КомуСтр, "; ", ТаблицаАдресовИСертификатовСтрока.Кому);
		КонецЦикла;
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Кому", КомуСтр);
	Иначе
		ПараметрыОтправкиПочтовогоСообщения.УстановитьРежимШифрования(
			ПараметрыОтправки,
			ШифроватьПриОтправке);
			
		КомуСтр = "";
		КопияСтр = "";
		СкрытаяКопияСтр = "";
			
		Для Каждого Строка Из Получатели Цикл
			Если Не ПустаяСтрока(Строка.Адрес) Тогда
				
				Если Строка.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
					ДобавитьЗначениеКСтрокеЧерезРазделитель(КомуСтр, "; ", Строка.Адрес);
				КонецЕсли;		
				
				Если Строка.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
					ДобавитьЗначениеКСтрокеЧерезРазделитель(КопияСтр, "; ", Строка.Адрес);
				КонецЕсли;		
						
				Если Строка.ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда		
					ДобавитьЗначениеКСтрокеЧерезРазделитель(СкрытаяКопияСтр, "; ", Строка.Адрес);
				КонецЕсли;		
				
			КонецЕсли;	
		КонецЦикла;	
			
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Кому", КомуСтр);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Копия", КопияСтр);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "СкрытаяКопия", СкрытаяКопияСтр);
	КонецЕсли;
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьТему(ПараметрыОтправки, Тема);
	ПараметрыОтправкиПочтовогоСообщения.УстановитьТекст(ПараметрыОтправки, Содержание);
	
	ВажностьПисьма = ?(Важность,
		ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая"),
		ПредопределенноеЗначение("Перечисление.ВажностьПисем.Обычная"));
	ПараметрыОтправкиПочтовогоСообщения.УстановитьВажность(ПараметрыОтправки, ВажностьПисьма);
	
	ПараметрыОтправкиПочтовогоСообщения.ОчиститьВложения(ПараметрыОтправки);
	Для каждого ВложениеСтрока Из Вложения Цикл
		Если Не ВложениеСтрока.Выбран Тогда
			Продолжить;
		КонецЕсли;
		Если ВложениеСтрока.Расположение = "Ссылка" Тогда
			ПараметрыОтправкиПочтовогоСообщения.ДобавитьВложениеФайл(
				ПараметрыОтправки,
				ВложениеСтрока.Ссылка);
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			ПараметрыОтправкиПочтовогоСообщения.ДобавитьВложениеИзВременногоХранилища(
				ПараметрыОтправки,
				ВложениеСтрока.Адрес,
				ВложениеСтрока.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ПриложитьКПисьмуСообщениеВзаимодействияСЭД
		И ЗначениеЗаполнено(ОбъектВзаимодействияСЭД) Тогда
		ПараметрыОтправкиПочтовогоСообщения.ДобавитьДокумент(
			ПараметрыОтправки,
			ОбъектВзаимодействияСЭД);
	КонецЕсли;
	
	ОписаниеСобытия = СтрШаблон(НСтр("ru = 'Тема=%1  Кому=%2 Копия=%3'; en = 'Subject=%1 To=%2 Cc=%3'"), 
		Тема, КомуСтр, КопияСтр);
	ПротоколированиеРаботыПользователей.ЗаписатьОтправкуПоПочте(СсылкаНаОбъект, ОписаниеСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
	
	РежимДобавленияАдресата = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАдресаИзКомуВТаблицу()
	
	ТаблицаАдресовИСертификатов.Очистить();
	
	Для Каждого СтрокаПолучателей Из Получатели Цикл
		
		Если Не ПустаяСтрока(СтрокаПолучателей.Адрес) Тогда
	
			Строка = ТаблицаАдресовИСертификатов.Добавить();
			Строка.Кому = СокрЛП(СтрокаПолучателей.Адрес);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАдресаИзТаблицыВКому()
	
	Получатели.Очистить();
	
	Для Каждого Строка Из ТаблицаАдресовИСертификатов Цикл
		СтрокаДанных = Получатели.Добавить();
		СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'; en = 'To:'");	
		СтрокаДанных.Адрес = Строка.Кому;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеКлиент()
	
	ТекущаяСтрока = Элементы.Вложения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		КомандыРаботыСФайламиКлиент.Открыть(
			РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'; en = 'Extension for work with files not loaded!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции


