#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Автотест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ТипДокумента") Тогда
		ВызватьИсключение НСтр("ru = 'Не определен тип создаваемого документа.'; en = 'Type of created document is not defined.'");
		Возврат;
	КонецЕсли;
	ТипДокумента = Параметры.ТипДокумента;
	
	Если ТипДокумента = "ВнутреннийДокумент" Тогда
		
		Параметры.Свойство("ВидДокумента", ВидДокумента);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("Контрагент", Контрагент);
		Параметры.Свойство("Папка", Папка);
		Параметры.Свойство("ГрифДоступа", ГрифДоступа);
		Параметры.Свойство("ВопросДеятельности",ВопросДеятельности);
		
		Если Константы.ИспользоватьВидыВнутреннихДокументов.Получить() = Истина Тогда
			Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
				ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВнутреннегоДокумента");
			КонецЕсли;
			Если ВидДокумента = Неопределено Тогда
				ВидДокумента = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
			КонецЕсли;
			Элементы.ВнутреннийДокументВидДокумента.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВнутреннийДокументВидДокумента.Видимость = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ВестиУчетПоКонтрагентам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ВестиУчетПоКонтрагентам");
			ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ВестиУчетСторон");
			Элементы.ВнутреннийДокументКонтрагент.Видимость = (ВестиУчетПоКонтрагентам Или ВестиУчетСторон);
		КонецЕсли;	
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			Элементы.ВнутреннийДокументОрганизация.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВнутреннийДокументОрганизация.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ВнутреннийДокументПапка.АвтоОтметкаНезаполненного = Истина;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			Если Не ЗначениеЗаполнено(ГрифДоступа) Тогда
				ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
			КонецЕсли;
			Элементы.ВнутреннийДокументГрифДоступа.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВнутреннийДокументГрифДоступа.Видимость = Ложь;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
			Элементы.ВнутреннийДокументВопросДеятельности.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВнутреннийДокументВопросДеятельности.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("Вложения") И ЗначениеЗаполнено(Параметры.Вложения) Тогда
			ЗаполнитьСписокФайловИзВложений(Параметры.Вложения);
		КонецЕсли;
		
		Элементы.Реквизиты.ТекущаяСтраница = Элементы.РеквизитыВнутреннегоДокумента;
		Заголовок = НСтр("ru = 'Создание внутреннего документа'; en = 'Creation of internal document'");
		
	ИначеЕсли ТипДокумента = "ВходящийДокумент" Тогда
		
		Параметры.Свойство("ВидДокумента", ВидДокумента);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("ВидОбращения", ВидОбращения);
		Параметры.Свойство("ГрифДоступа", ГрифДоступа);
		Параметры.Свойство("ВопросДеятельности", ВопросДеятельности);
		
		Если Константы.ИспользоватьВидыВходящихДокументов.Получить() = Истина Тогда
			Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
				ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВходящегоДокумента");
			КонецЕсли;
			Если ВидДокумента = Неопределено Тогда
				ВидДокумента = Справочники.ВидыВходящихДокументов.ПустаяСсылка();
			КонецЕсли;
			Элементы.ВходящийДокументВидДокумента.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВходящийДокументВидДокумента.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("Отправитель") Тогда
			Если ТипЗнч(Параметры.Отправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
				Отправитель = Параметры.Отправитель;
			ИначеЕсли ТипЗнч(Параметры.Отправитель) = Тип("Строка") Тогда
				НайтиКонтрагентаПоСтрокеАдреса(Строка(Параметры.Отправитель));
			Иначе
				ВызватьИсключение НСтр("ru = 'Некорректный отправитель.'; en = 'Invalid sender.'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ВходящийДокументОтправитель.АвтоОтметкаНезаполненного = Истина;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			Элементы.ВходящийДокументОрганизация.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВходящийДокументОрганизация.Видимость = Ложь;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			Если Не ЗначениеЗаполнено(ГрифДоступа) Тогда
				ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
			КонецЕсли;
			Элементы.ВходящийДокументГрифДоступа.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВходящийДокументГрифДоступа.Видимость = Ложь;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
			Элементы.ВходящийДокументВопросДеятельности.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ВходящийДокументВопросДеятельности.Видимость = Ложь;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьФайлыУВходящихДокументов")
			И Параметры.Свойство("Вложения") И ЗначениеЗаполнено(Параметры.Вложения) Тогда
			
			ЗаполнитьСписокФайловИзВложений(Параметры.Вложения);
		КонецЕсли;
		
		Элементы.Реквизиты.ТекущаяСтраница = Элементы.РеквизитыВходящегоДокумента;
		Заголовок = НСтр("ru = 'Создание входящего документа'; en = 'Creation of incoming document'");
		
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда
		
		Параметры.Свойство("ВидДокумента", ВидДокумента);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("ГрифДоступа", ГрифДоступа);
		Параметры.Свойство("ВопросДеятельности", ВопросДеятельности);
		
		Если Константы.ИспользоватьВидыИсходящихДокументов.Получить() = Истина Тогда
			Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
				ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидИсходящегоДокумента");
			КонецЕсли;
			Если ВидДокумента = Неопределено Тогда
				ВидДокумента = Справочники.ВидыИсходящихДокументов.ПустаяСсылка();
			КонецЕсли;
			Элементы.ИсходящийДокументВидДокумента.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ИсходящийДокументВидДокумента.Видимость = Ложь;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			Элементы.ИсходящийДокументОрганизация.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ИсходящийДокументОрганизация.Видимость = Ложь;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			Если Не ЗначениеЗаполнено(ГрифДоступа) Тогда
				ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
			КонецЕсли;
			Элементы.ИсходящийДокументГрифДоступа.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ИсходящийДокументГрифДоступа.Видимость = Ложь;
		КонецЕсли;
			
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
			Элементы.ИсходящийДокументВопросДеятельности.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ИсходящийДокументВопросДеятельности.Видимость = Ложь;
		КонецЕсли;
		
		ПолучателиСтр = "";
		Если Параметры.Свойство("Кому") Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(ПолучателиСтр, "; ", Параметры.Кому);
		КонецЕсли;
		Если Параметры.Свойство("Копия") Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(ПолучателиСтр, "; ", Параметры.Копия);
		КонецЕсли;
		Если Параметры.Свойство("СкрытаяКопия") Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(ПолучателиСтр, "; ", Параметры.СкрытаяКопия);
		КонецЕсли;
		ЗаполнитьПолучателей(ПолучателиСтр);
		
		Если Параметры.Свойство("Получатели") Тогда
			Если ЗначениеЗаполнено(Параметры.Получатели) Тогда
				Для Каждого СтрокаПолучатели Из Параметры.Получатели Цикл
					ЗаполнитьЗначенияСвойств(Получатели.Добавить(), СтрокаПолучатели);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьФайлыУИсходящихДокументов")
			И Параметры.Свойство("Вложения") И ЗначениеЗаполнено(Параметры.Вложения) Тогда
			
			ЗаполнитьСписокФайловИзВложений(Параметры.Вложения);
		КонецЕсли;
		
		Элементы.Реквизиты.ТекущаяСтраница = Элементы.РеквизитыИсходящегоДокумента;
		Заголовок = НСтр("ru = 'Создание исходящего документа'; en = 'Creation of outgoing document'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСоответствиеФайловИЭП();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьВидВнДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов");
	Если ИспользоватьВидВнДокументов Тогда 
		ПроверяемыеРеквизиты.Добавить("ВидДокумента");
	КонецЕсли;
	
	ИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	Если ИспользоватьГрифыДоступа Тогда 
		ПроверяемыеРеквизиты.Добавить("ГрифДоступа");
	КонецЕсли;
	
	ИспользоватьОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Если ИспользоватьОрганизации Тогда 
		ПроверяемыеРеквизиты.Добавить("Организация");
	КонецЕсли;
	
	ИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	Если ИспользоватьВопросыДеятельности Тогда 
		ПроверяемыеРеквизиты.Добавить("ВопросДеятельности");
	КонецЕсли;
	
	Индекс = ПроверяемыеРеквизиты.Найти("Контрагент");
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
	
	Если ТипДокумента = "ВнутреннийДокумент" Тогда
		ИспользоватьРеквизитыУчетаПоКонтрагентам = ПолучитьФункциональнуюОпциюФормы("ИспользоватьРеквизитыУчетаПоКонтрагентам");
		Если ИспользоватьРеквизитыУчетаПоКонтрагентам Тогда 
			ПроверяемыеРеквизиты.Добавить("Контрагент");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура ВидДокументаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ВестиУчетПоКонтрагентам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ВестиУчетПоКонтрагентам");
		ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ВестиУчетСторон");
		Элементы.ВнутреннийДокументКонтрагент.Видимость = (ВестиУчетПоКонтрагентам Или ВестиУчетСторон);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	Если ТипДокумента = "ВнутреннийДокумент" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВнутреннегоДокумента", ВидДокумента));
		ВидДокументаПриИзмененииНаСервере();
	ИначеЕсли ТипДокумента = "ВходящийДокумент" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВходящегоДокумента", ВидДокумента));
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидИсходящегоДокумента", ВидДокумента));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипДокумента = "ВнутреннийДокумент" Тогда
		ТекущиеДанные = Элементы.ВнутреннийДокументФайлы.ТекущиеДанные;
	ИначеЕсли ТипДокумента = "ВходящийДокумент" Тогда
		ТекущиеДанные = Элементы.ВходящийДокументФайлы.ТекущиеДанные;
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда
		ТекущиеДанные = Элементы.ИсходящийДокументФайлы.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекущиеДанные.ПолноеИмяФайла) Тогда
		ДелопроизводствоКлиент.ОткрытьФайлНаДиске(ТекущиеДанные.ПолноеИмяФайла, ТекущиеДанные.Имя);
	ИначеЕсли ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
		ДелопроизводствоКлиент.ОткрытьФайлИзВременногоХранилища(
			ТекущиеДанные.Адрес,
			ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
				ТекущиеДанные.Имя,
				ТекущиеДанные.Расширение));
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	Источник = Файлы.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если Источник.ПолучитьРодителя() = Неопределено
		И Источник.ПолучитьЭлементы().Количество() = 0
		И Строка <> Неопределено Тогда
		
		Приемник = Файлы.НайтиПоИдентификатору(Строка);
		
		Если Приемник.ПолучитьРодителя() = Неопределено Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Источник", Источник);
			ПараметрыОповещения.Вставить("Приемник", Приемник);
			
			ОбработчикЗавершения = Новый ОписаниеОповещения(
				"ФайлыПеретаскиваниеПослеПроверкиПодписи",
				ЭтотОбъект,
				ПараметрыОповещения);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
			ПроверитьЭППослеПодготовкиДанных(Приемник.Адрес, Источник.Адрес, ДополнительныеПараметры);
			
		КонецЕсли;
		
	ИначеЕсли Источник.ПолучитьРодителя() <> Неопределено
		И Источник.ПолучитьЭлементы().Количество() = 0
		И Строка = Неопределено Тогда
		
		ПеренестиПодписьВФайл(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	Если ТипДокумента = "ВнутреннийДокумент" Тогда
		ТекущиеДанные = Элементы.ВнутреннийДокументФайлы.ТекущиеДанные;
	ИначеЕсли ТипДокумента = "ВходящийДокумент" Тогда
		ТекущиеДанные = Элементы.ВходящийДокументФайлы.ТекущиеДанные;
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда
		ТекущиеДанные = Элементы.ИсходящийДокументФайлы.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Расширение = ТекущиеДанные.Расширение;
	
	Если ТекущиеДанные.Оригинал Тогда
		Если Не ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение) Тогда 
			
			ТекстВопроса = НСтр(
				"ru = 'Выбранный файл, возможно, не является скан-копией.
                 |Вы действительно хотите отметить его как оригинал?';
                 |en = 'The selected file might not be a scanned copy.
                 |Are you sure you want to mark it as the original?'");
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения("ОригиналПриИзмененииЗавершение", ЭтотОбъект, ТекущиеДанные);
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, 
				НСтр("ru = 'Отметка оригинала'; en = 'The original stamp'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Создать(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если ТипДокумента = "ВнутреннийДокумент" Тогда
		
		СтруктураВозврата.Вставить("Тип", "ВнутреннийДокумент");
		СтруктураВозврата.Вставить("Папка", Папка);
		СтруктураВозврата.Вставить("ГрифДоступа", ГрифДоступа);
		СтруктураВозврата.Вставить("ВидДокумента", ВидДокумента);
		СтруктураВозврата.Вставить("Организация", Организация);
		СтруктураВозврата.Вставить("Контрагент", Контрагент);
		СтруктураВозврата.Вставить("ВопросДеятельности", ВопросДеятельности);
		СтруктураВозврата.Вставить("Файлы", ПолучитьМассивСтруктурФайлов());
		
	ИначеЕсли ТипДокумента = "ВходящийДокумент" Тогда
		
		СтруктураВозврата.Вставить("Тип", "ВходящийДокумент");
		СтруктураВозврата.Вставить("Отправитель", Отправитель);
		СтруктураВозврата.Вставить("ГрифДоступа", ГрифДоступа);
		СтруктураВозврата.Вставить("ВидДокумента", ВидДокумента);
		СтруктураВозврата.Вставить("ВидОбращения", ВидОбращения);
		СтруктураВозврата.Вставить("Организация", Организация);
		СтруктураВозврата.Вставить("ВопросДеятельности", ВопросДеятельности);
		СтруктураВозврата.Вставить("Файлы", ПолучитьМассивСтруктурФайлов());
		
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда
		
		Если Получатели.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не выбрано ни одного получателя.'; en = 'You have not selected any recipient.'"),,
				"Получатели");
			Возврат;
		КонецЕсли;
		
		Для каждого ПолучателиСтрока Из Получатели Цикл
			Если Не ЗначениеЗаполнено(ПолучателиСтрока.Получатель) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заполнен получатель.'; en = 'Recipient is not filled.'"),,
					"Получатели[" + ПолучателиСтрока.ПолучитьИдентификатор() + "].Получатель");
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураВозврата.Вставить("Тип", "ИсходящийДокумент");
		СтруктураВозврата.Вставить("Получатели", Получатели);
		СтруктураВозврата.Вставить("ГрифДоступа", ГрифДоступа);
		СтруктураВозврата.Вставить("ВидДокумента", ВидДокумента);
		СтруктураВозврата.Вставить("Организация", Организация);
		СтруктураВозврата.Вставить("ВопросДеятельности", ВопросДеятельности);
		СтруктураВозврата.Вставить("Получатели", Получатели);
		СтруктураВозврата.Вставить("Файлы", ПолучитьМассивСтруктурФайлов());
		
	КонецЕсли;
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокФайловИзВложений(Вложения)
	
	Для Каждого Вложение Из Параметры.Вложения Цикл
		ФайлыСтрока = Файлы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ФайлыСтрока, Вложение);
		ФайлыСтрока.Импортировать = Истина;
		Если ПустаяСтрока(Вложение.ПолноеИмяФайла) И ЭтоАдресВременногоХранилища(Вложение.Адрес) Тогда
			ФайлыДвоичныеДанные.Добавить(ПолучитьИзВременногоХранилища(Вложение.Адрес), Вложение.Адрес);
		КонецЕсли;
		Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ФайлыСтрока.Расширение) Тогда 
			ФайлыСтрока.Оригинал = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСоответствиеФайловИЭП()
	
	СписокФайлов = Файлы.ПолучитьЭлементы();
	
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексФайла = СписокФайлов.Количество() - 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокФайлов", СписокФайлов);
	ДополнительныеПараметры.Вставить("ИндексФайла", ИндексФайла);
	
	УстановитьСоответствиеФайловИЭПЦиклФайловНачало(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствиеФайловИЭПЦиклФайловНачало(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ИндексФайла < 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексЭП = ДополнительныеПараметры.СписокФайлов.Количество() - 1;
	ДополнительныеПараметры.Вставить("ИндексЭП", ИндексЭП);
	УстановитьСоответствиеФайловИЭПЦиклЭПНачало(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствиеФайловИЭПЦиклЭПНачало(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ИндексЭП < 0 Тогда
		ДополнительныеПараметры.ИндексФайла = ДополнительныеПараметры.ИндексФайла - 1;
		УстановитьСоответствиеФайловИЭПЦиклФайловНачало(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеПараметры.ИндексФайла <> ДополнительныеПараметры.ИндексЭП Тогда
		СтрокаФайла = ДополнительныеПараметры.СписокФайлов.Получить(ДополнительныеПараметры.ИндексФайла);
		СтрокаЭП = ДополнительныеПараметры.СписокФайлов.Получить(ДополнительныеПараметры.ИндексЭП);
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"УстановитьСоответствиеФайловИЭППослеПроверкиСтроки",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
		ПроверитьЭППослеПодготовкиДанных(СтрокаФайла.Адрес, СтрокаЭП.Адрес, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексЭП = ДополнительныеПараметры.ИндексЭП - 1;
	УстановитьСоответствиеФайловИЭПЦиклЭПНачало(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭППослеПодготовкиДанных(АдресФайла, АдресПодписи, ДополнительныеПараметры)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
	
	ПроверятьЭлектронныеПодписиНаСервере = МодульЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки(
		).ПроверятьЭлектронныеПодписиНаСервере;
	
	Если Не ПроверятьЭлектронныеПодписиНаСервере Тогда
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
		ДополнительныеПараметры.Вставить("АдресПодписи", АдресПодписи);
		ДополнительныеПараметры.Вставить("МодульЭлектроннаяПодписьКлиент", МодульЭлектроннаяПодписьКлиент);
		МодульЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(
			Новый ОписаниеОповещения("ПроверитьЭППослеСозданияМенеджераКриптографии",
				ЭтотОбъект, ДополнительныеПараметры),
			"ПроверкаПодписи");
		Возврат;
	КонецЕсли;
	
	ДанныеСтрок = Новый Массив;
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("АдресПодписи", АдресПодписи);
	ДанныеСтроки.Вставить("Статус", "");
	ДанныеСтроки.Вставить("Неверна", Истина);
	ДанныеСтрок.Добавить(ДанныеСтроки);
	
	ФайловыеФункцииСлужебныйВызовСервера.ПроверитьПодписи(АдресФайла, ДанныеСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭППослеСозданияМенеджераКриптографии(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ДополнительныеПараметры.ОбработчикЗавершения.ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		ДополнительныеПараметры.ОбработчикЗавершения,
		ДополнительныеПараметры.АдресФайла,
		ДополнительныеПараметры.АдресПодписи,
		ДополнительныеПараметры.МенеджерКриптографии);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствиеФайловИЭППослеПроверкиСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Булево") И Результат Тогда
		СтрокаФайла = ДополнительныеПараметры.СписокФайлов.Получить(ДополнительныеПараметры.ИндексФайла);
		СтрокаЭП = ДополнительныеПараметры.СписокФайлов.Получить(ДополнительныеПараметры.ИндексЭП);
		ДвоичныеДанныеЭП = ПолучитьДвоичныеДанныеФайла(СтрокаЭП);
		Сертификат = ПолучитьСертификатИзПодписи(ДвоичныеДанныеЭП, ДополнительныеПараметры.МенеджерКриптографии);
		ПеренестиФайлВПодпись(СтрокаФайла, СтрокаЭП, Сертификат, Истина);
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексЭП = ДополнительныеПараметры.ИндексЭП - 1;
	УстановитьСоответствиеФайловИЭПЦиклЭПНачало(ДополнительныеПараметры);
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьМассивСтруктурФайлов()
	
	Результат = Новый Массив;
	Для Каждого ФайлыСтрока Из Файлы.ПолучитьЭлементы() Цикл
		Если Не ФайлыСтрока.Импортировать Тогда
			Продолжить;
		КонецЕсли;
	 	ФайлИнфо = Новый Структура;
		ФайлИнфо.Вставить("Наименование", ФайлыСтрока.Наименование);
		ФайлИнфо.Вставить("Имя", ФайлыСтрока.Имя);
		ФайлИнфо.Вставить("Расширение", ФайлыСтрока.Расширение);
		ФайлИнфо.Вставить("ПолноеИмяФайла", ФайлыСтрока.ПолноеИмяФайла);
		ФайлИнфо.Вставить("Адрес", ФайлыСтрока.Адрес);
		ФайлИнфо.Вставить("Оригинал", ФайлыСтрока.Оригинал);
		МассивЭП = Новый Массив;
		Для Каждого ЭПСтрока Из ФайлыСтрока.ПолучитьЭлементы() Цикл
			Если Не ЭПСтрока.Импортировать Тогда
				Продолжить;
			КонецЕсли;
			ЭПИнфо = Новый Структура;
			ЭПИнфо.Вставить("Наименование", ЭПСтрока.Наименование);
			ЭПИнфо.Вставить("Имя", ЭПСтрока.Имя);
			ЭПИнфо.Вставить("Расширение", ЭПСтрока.Расширение);
			ЭПИнфо.Вставить("ПолноеИмяФайла", ЭПСтрока.ПолноеИмяФайла);
			ЭПИнфо.Вставить("Адрес", ЭПСтрока.Адрес);
			ЭПИнфо.Вставить("Отпечаток", ЭПСтрока.Отпечаток);
			ЭПИнфо.Вставить("КомуВыданСертификат", ЭПСтрока.КомуВыданСертификат);
			ЭПИнфо.Вставить("АдресСертификата", ЭПСтрока.АдресСертификата);
			МассивЭП.Добавить(ЭПИнфо);
		КонецЦикла;
		Если МассивЭП.Количество() > 0 Тогда
			ФайлИнфо.Вставить("ЭП", МассивЭП);
		КонецЕсли;
		Результат.Добавить(ФайлИнфо);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДвоичныеДанныеФайла(Строка)
	
	Если Не ПустаяСтрока(Строка.ПолноеИмяФайла) Тогда
		Возврат Новый ДвоичныеДанные(Строка.ПолноеИмяФайла);
	Иначе
		Для каждого Элемент Из ФайлыДвоичныеДанные Цикл
			Если Элемент.Представление = Строка.Адрес Тогда
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		ВызватьИсключение НСтр("ru = 'Не найдены двоичные данные файла.'; en = 'File binary data could not be found.'");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСертификатИзПодписи(ДвоичныеДанныеЭП, МенеджерКриптографии)
	
	Попытка
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеЭП);
	Исключение
		// Если произошло исключение, значит файл не является файлом подписи.
		Возврат Неопределено;
	КонецПопытки;
	
	Если Сертификаты.Количество() = 0 Тогда
		Возврат НСтр("ru = 'В подписи отсутствуют сертификаты.'; en = 'In the signature certificates are missing.'");
	КонецЕсли;
	
	Возврат Сертификаты[0];
	
КонецФункции

&НаКлиенте
Процедура ПеренестиФайлВПодпись(ФайлыСтрока, ЭПСтрока, Сертификат = Неопределено, ПодписьВерна = Ложь)
	
	ФайлыСтрокаЭП = ФайлыСтрока.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(ФайлыСтрокаЭП, ЭПСтрока);
	ФайлыСтрокаЭП.ЭтоПодпись = Истина;
	ФайлыСтрокаЭП.ПодписьВерна = ПодписьВерна;
	Если Сертификат <> Неопределено Тогда
		ФайлыСтрокаЭП.Отпечаток = Base64Строка(Сертификат.Отпечаток);
		ФайлыСтрокаЭП.КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСертификата(Сертификат);
		ФайлыСтрокаЭП.АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат.Выгрузить());
	КонецЕсли;
	Файлы.ПолучитьЭлементы().Удалить(ЭПСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодписьВФайл(ЭПСтрока)
	
	ФайлыСтрока = Файлы.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(ФайлыСтрока, ЭПСтрока,,
		"ЭтоПодпись, ПодписьВерна, Отпечаток, КомуВыданСертификат, АдресСертификата");
	Если ЭтоАдресВременногоХранилища(ЭПСтрока.АдресСертификата) Тогда
		УдалитьИзВременногоХранилища(ЭПСтрока.АдресСертификата);
	КонецЕсли;
	ЭПСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ЭПСтрока);
	
КонецПроцедуры


// Принимает строку адреса эл. почты. "ХХХХХХ <AA@BB.cc>" или "AA@BB.cc"
// Ищет контрагента по соответствию адреса электронной почты, в том числе и среди контактных лиц
// Если найден 1, то подставляет в форму, если найдено несколько то заполняем список выбора поля отправитель
//
&НаСервере
Процедура НайтиКонтрагентаПоСтрокеАдреса(СтрокаАдресаЭлектроннойПочты)
	
	АдресЭлектроннойПочты = ВыделитьАдресЭлектроннойПочты(СтрокаАдресаЭлектроннойПочты);
	Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		Возврат;
	КонецЕсли;
	
	СписокКонтрагентов = ПолучитьСписокКонтрагентовПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты);
	Если СписокКонтрагентов.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли СписокКонтрагентов.Количество() = 1 Тогда
		Отправитель = СписокКонтрагентов[0];
	Иначе
		Элементы.ВходящийДокументОтправитель.СписокВыбора.Очистить();
		Элементы.ВходящийДокументОтправитель.СписокВыбора.ЗагрузитьЗначения(СписокКонтрагентов);
		Элементы.ВходящийДокументОтправитель.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКонтрагентовПоАдресуЭлектроннойПочты(АдресЭП)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП";
	Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
КонецФункции

&НаСервере
Функция ВыделитьАдресЭлектроннойПочты(Знач СтрокаАдресаЭлектроннойПочты)
	
	СтрокаАдресаЭлектроннойПочты = СокрЛП(СтрокаАдресаЭлектроннойПочты);
	Поз = Найти(СтрокаАдресаЭлектроннойПочты, "<");
	Если Поз > 0 Тогда
		СтрокаАдресаЭлектроннойПочты = Сред(СтрокаАдресаЭлектроннойПочты, Поз + 1);
		Поз = Найти(СтрокаАдресаЭлектроннойПочты, ">");
		Если Поз = 0 Тогда
			Возврат "";
		КонецЕсли;
		СтрокаАдресаЭлектроннойПочты = Лев(СтрокаАдресаЭлектроннойПочты, Поз - 1);
	КонецЕсли;
	
	Если НЕ ЭтоАдресЭлектроннойПочты(СтрокаАдресаЭлектроннойПочты) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаАдресаЭлектроннойПочты;
	
КонецФункции

&НаСервере
Функция ЭтоАдресЭлектроннойПочты(СтрокаАдресаЭлектроннойПочты)
	
	Поз = Найти(СтрокаАдресаЭлектроннойПочты, "@");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Пользователь = Лев(СтрокаАдресаЭлектроннойПочты, Поз - 1);
	Сервер = Сред(СтрокаАдресаЭлектроннойПочты, Поз + 1);
	Поз = Найти(Сервер, ".");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// проверка не точная но основные элементы на месте
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДобавитьПолучателей(АдресЭлектроннойПочты)
	
	// Контактные лица
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец КАК Получатель,
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Адресат
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП");
	Запрос.УстановитьПараметр("АдресЭП", АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Получатели.НайтиСтроки(Новый Структура("Адресат", Выборка.Адресат)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		ПолучателиСтрока = Получатели.Добавить();
		ПолучателиСтрока.Получатель = Выборка.Получатель;
		ПолучателиСтрока.Адресат = Выборка.Адресат;
		ПолучателиСтрока.СпособОтправки = Справочники.СпособыДоставки.НайтиПоНаименованию("Email");
	КонецЦикла;
	
	// Контрагенты
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Получатель
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП");
	Запрос.УстановитьПараметр("АдресЭП", АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Получатели.НайтиСтроки(Новый Структура("Получатель", Выборка.Получатель)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		ПолучателиСтрока = Получатели.Добавить();
		ПолучателиСтрока.Получатель = Выборка.Получатель;
		ПолучателиСтрока.СпособОтправки = Справочники.СпособыДоставки.НайтиПоНаименованию("Email");
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателей(Знач ПолучателиСтр)
	
	ПолучателиСтр = СтрЗаменить(ПолучателиСтр, ";", Символы.ПС);
	ПолучателиСтр = СтрЗаменить(ПолучателиСтр, ",", Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(ПолучателиСтр) Цикл
		АдресСтр = СокрЛП(СтрПолучитьСтроку(ПолучателиСтр, Счетчик));
		Если ПустаяСтрока(АдресСтр) Тогда
			Продолжить;
		КонецЕсли;
		АдресЭлектроннойПочты = ВыделитьАдресЭлектроннойПочты(АдресСтр);
		Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьПолучателей(АдресЭлектроннойПочты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПослеПроверкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаФайла = ДополнительныеПараметры.Приемник;
	СтрокаЭП = ДополнительныеПараметры.Источник;
	ДвоичныеДанныеЭП = ПолучитьДвоичныеДанныеФайла(СтрокаЭП);
	Сертификат = ПолучитьСертификатИзПодписи(ДвоичныеДанныеЭП, ДополнительныеПараметры.МенеджерКриптографии);
	РезультатПроверки = ТипЗнч(Результат) = Тип("Булево") И Результат;
	ПеренестиФайлВПодпись(СтрокаФайла, СтрокаЭП, Сертификат, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти
