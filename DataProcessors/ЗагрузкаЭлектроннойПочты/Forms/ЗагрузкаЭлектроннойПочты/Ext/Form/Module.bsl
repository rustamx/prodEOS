#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Предпросмотр = "<HTML> <style type=""text/css""> body { overflow: auto;} </style> <BODY></BODY></HTML>";
	
	ЗаполнитьКэш();
	
	ПараметрыЗагрузкиПочтовыхСообщений = ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений();
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ПериодЗагрузкиНастройка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСПочтой", "ПериодЗагрузки");
	Если ТипЗнч(ПериодЗагрузкиНастройка) = Тип("Строка") И Не ПустаяСтрока(ПериодЗагрузкиНастройка) Тогда
		НастройкаПериодЗагрузки = ПериодЗагрузкиНастройка;
	Иначе
		НастройкаПериодЗагрузки = ЛегкаяПочтаКлиентСервер.ПолучитьПериодЗагрузкиПоУмолчанию();
	КонецЕсли;
	Элементы.НастройкаПериодЗагрузки.СписокВыбора.ЗагрузитьЗначения(ЛегкаяПочтаКлиентСервер.ПолучитьВариантыВыбораПериодаЗагрузки());
	
	Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль <> Неопределено Тогда
		Профиль = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Профиль;
		Если Параметры.Свойство("ВебКлиент") И Параметры.ВебКлиент = Истина И ТипЗнч(Профиль) = Тип("Строка") Тогда
			Профиль = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Элементы.Профиль.СписокВыбора.Очистить();
	Для каждого СтруктураПрофиля Из ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили Цикл
		Если Параметры.Свойство("ВебКлиент") И Параметры.ВебКлиент = Истина Тогда
			Если СтруктураПрофиля.ВидПочтовогоКлиента = Перечисления.ВидыПочтовыхКлиентов.ИнтернетПочта Тогда
				Элементы.Профиль.СписокВыбора.Добавить(СтруктураПрофиля.Профиль);
			КонецЕсли;
		Иначе
			Элементы.Профиль.СписокВыбора.Добавить(СтруктураПрофиля.Профиль);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьНастроекПрофиля();
	
	НастройкаПериодЗагрузки = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПериодЗагрузки");
	Если ПустаяСтрока(НастройкаПериодЗагрузки) Тогда
		НастройкаПериодЗагрузки = ЛегкаяПочтаКлиентСервер.ПолучитьПериодЗагрузкиПоУмолчанию();
	КонецЕсли;
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("ПериодЗагрузки", НастройкаПериодЗагрузки);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		КэшИзвлекатьТекстыФайловНаКлиенте = Ложь;
	#КонецЕсли
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль) Тогда
		ОбновитьСписокСообщений();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПрофильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
		"ПрофильПродолжениеВыбораИзСписка",
		ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещенияОВыборе, Элементы.Профиль.СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	ПрофильПриИзмененииВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзмененииВыполнить()
	
	Если ЗначениеЗаполнено(Профиль) Тогда
		Для каждого СтруктураПрофиля Из ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили Цикл
			Если СтруктураПрофиля.Профиль = Профиль Тогда
				ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = СтруктураПрофиля;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено;
	КонецЕсли;
	
	УдалитьВременныеФайлы();
	ВходящиеСообщенияОчиститьСервер();
	ПрофильПриИзмененииСервер();
	
	ОбновитьСписокСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("ПериодЗагрузки", НастройкаПериодЗагрузки);
	НастройкаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеСообщения

&НаКлиенте
Процедура ВходящиеСообщенияПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		КоличествоВложений = Элемент.ТекущиеДанные.Вложения.Количество();
	Иначе
		КоличествоВложений = 0;
	КонецЕсли;
	УстановитьДоступностьКоманд();
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Отправитель = ТекущиеДанные.Отправитель;
		Тема = ТекущиеДанные.Тема;
		ДатаОтправки = ТекущиеДанные.ДатаОтправки;
		Текст = ТекущиеДанные.Текст;
		ТекстHTML = ТекущиеДанные.ТекстHTML;
		
		Предпросмотр = СформироватьHTML(Отправитель,
			Тема,  ДатаОтправки, Текст, ТекстHTML, ТекущиеДанные.Картинки,
			УникальныйИдентификатор);
		
	Иначе
		Предпросмотр = "<HTML> <style type=""text/css""> body { overflow: auto;} </style> <BODY></BODY></HTML>";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьСообщения(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеСообщенияВложения

&НаКлиенте
Процедура ВходящиеСообщенияВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ВходящиеСообщенияВложения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Вложение = Элементы.ВходящиеСообщенияВложения.ТекущиеДанные;
	
	Если Вложение.ЗагрузкаЗапрещена Тогда
		Текст = НСтр("ru = 'Вложение имеет запрещенное расширение.
			|Просмотр файла запрещен.';
			|en = 'The attachment has a forbidden extension. 
			|Viewing a file is denied.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Вложение.ПолноеИмяФайла) Тогда
		ДелопроизводствоКлиент.ОткрытьФайлНаДиске(Вложение.ПолноеИмяФайла, Вложение.Имя);
	ИначеЕсли ЭтоАдресВременногоХранилища(Вложение.Адрес) Тогда
		#Если ВебКлиент Тогда
			ПолучитьФайл(Вложение.Адрес, Вложение.Имя + "." + Вложение.Расширение, Истина);
		#Иначе
			ДелопроизводствоКлиент.ОткрытьФайлИзВременногоХранилища(Вложение.Адрес, Вложение.Имя + "." + Вложение.Расширение);
		#КонецЕсли
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияВложенияПередУдалением(Элемент, Отказ)
	Если Элементы.ВходящиеСообщенияВложения.ТекущаяСтрока = Неопределено Тогда
		ВызватьИсключение "";
	КонецЕсли;
	ТекДанные = Элементы.ВходящиеСообщенияВложения.ТекущиеДанные;
	Если ЭтоАдресВременногоХранилища(ТекДанные.Адрес) Тогда
		УдалитьИзВременногоХранилища(ТекДанные.Адрес);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияВложенияПослеУдаления(Элемент)
	Если Элементы.ВходящиеСообщения.ТекущаяСтрока = Неопределено Тогда
		ВызватьИсключение "";
	КонецЕсли;
	Сообщение = Элементы.ВходящиеСообщения.ТекущиеДанные;
	Сообщение.Вложение = (Сообщение.Вложения.Количество() > 0);
	Сообщение.Размер = ПолучитьРазмерСообщения(Сообщение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Команда.Имя = "ВнутреннийДокумент" 
		Или Команда.Имя = "ВходящийДокумент"
		Или Команда.Имя = "ИсходящийДокумент" Тогда
		
		СоздатьДокументИзСообщения(Команда.Имя);
	Иначе
		ВызватьИсключение НСтр("ru = 'В функцию СоздатьДокумент переданы некорректные параметры'; en = 'Incorrect parameters passed to СоздатьДокумент function'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСообщений(Команда = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран почтовый профиль!'; en = 'Mail profile is not selected!'"));
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет загрузка электронной почты. Пожалуйста, подождите...'; en = 'Loading email. Please wait ...'"));
	
	ЭтаФорма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загрузка электронной почты (%1)'; en = 'Loading email (%1)'"),
		Профиль);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьСписокСообщенийПродолжение",
		ЭтотОбъект);
	ЛегкаяПочтаКлиент.Получить(ПараметрыЗагрузкиПочтовыхСообщений, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлИзВложения(Команда)
	
	Если Элементы.ВходящиеСообщения.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ВходящиеСообщенияВложения.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано вложение.'; en = 'You have not selected an attachment.'"));
		Возврат;
	КонецЕсли;
	
	Сообщение = Элементы.ВходящиеСообщения.ТекущиеДанные;
	Вложение = Элементы.ВходящиеСообщенияВложения.ТекущиеДанные;
	
	Если Вложение.ЗагрузкаЗапрещена Тогда
		Текст = НСтр(
			"ru = 'Вложение имеет запрещенное расширение.
             |Импорт файла запрещен.';
             |en = 'The attachment has a forbidden extension. 
             |File import is denied.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Вложение.ПолноеИмяФайла) Тогда
		ДелопроизводствоКлиент.СоздатьФайлИзВременногоФайлаНаДиске(ЭтаФорма, Вложение.ПолноеИмяФайла, Вложение.Имя + "." + Вложение.Расширение);
	ИначеЕсли ЭтоАдресВременногоХранилища(Вложение.Адрес) Тогда
		ДелопроизводствоКлиент.СоздатьФайлИзВременногоХранилища(ЭтаФорма, Вложение.Адрес, Вложение.Имя + "." + Вложение.Расширение);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не найден путь к файлу.'; en = 'File path was not found.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСообщения(Команда)
	
	КоличествоВыделенныхСтрок = Элементы.ВходящиеСообщения.ВыделенныеСтроки.Количество();
	Если КоличествоВыделенныхСтрок = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного письма!'; en = 'Not a single email selected!'"));
		Возврат;
	ИначеЕсли КоличествоВыделенныхСтрок = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Письмо будет удалено. Продолжить?'; en = 'The email will be deleted. Do you want to continue?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Письма будут удалены. Продолжить?'; en = 'Emails will be deleted. Do you want to continue?'");
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("УдалитьСообщенияЗавершение", ЭтотОбъект);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СоздатьДокументИзСообщения(ВидДокумента)
	
	ТекущаяСтрока = Элементы.ВходящиеСообщения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано сообщение.'; en = 'Message is not selected.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ВидДокумента", ВидДокумента);
	ПараметрыОповещения.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьДокументИзСообщенияПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	Если ЕстьЗапрещенныеВложения(ТекущаяСтрока) Тогда
		ТекстВопроса = НСтр(
			"ru = 'Внимание!
             |Письмо содержит запрещенные вложения.
             |При загрузке документа эти вложения будут пропущены.';
             |en = 'Attention!
             |The email contains forbidden attachments.
             |When a document is loaded, these attachments will be ignored.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить загрузку'; en = 'Continue loading'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'; en = 'Cancel'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИзСообщенияПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = Элементы.ВходящиеСообщения.ТекущиеДанные;
	
	Параметры.Вставить("Сообщение", Сообщение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьДокументИзСообщенияПослеПроверкиПовторногоИмпортаДокумента",
		ЭтотОбъект,
		Параметры);
	
	// Проверка повторного импорта документа
	Если Сообщение.Импортирован Тогда
		ИмпортированныеДокументы = ПолучитьДокументыПоВнешнемуИсточнику(Сообщение.Идентификатор);
		Если ИмпортированныеДокументы.Количество() > 0 Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Документы", ИмпортированныеДокументы.ВыгрузитьЗначения());
			ОткрытьФорму(
				"Обработка.ЗагрузкаЭлектроннойПочты.Форма.ПредупреждениеОСозданииДубля",
				ПараметрыОткрытия,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИзСообщенияПослеПроверкиПовторногоИмпортаДокумента(
	Ответ, Параметры) Экспорт
	
	Если Ответ <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = Параметры.ВидДокумента;
	ТекущаяСтрока = Параметры.ТекущаяСтрока;
	Сообщение = Параметры.Сообщение;
	
	ИмяФормыОбработки = "Обработка.ЗагрузкаЭлектроннойПочты.Форма.Документ";
	
	Вложения = Новый Массив;
	Для каждого Вложение Из Сообщение.Вложения Цикл
		Если Вложение.ЗагрузкаЗапрещена Тогда
			Продолжить;
		КонецЕсли;
		ВложениеИнфо = Новый Структура;
		ВложениеИнфо.Вставить("Имя", Вложение.Имя);
		ВложениеИнфо.Вставить("ПолноеИмяФайла", Вложение.ПолноеИмяФайла);
		ВложениеИнфо.Вставить("Расширение", Вложение.Расширение);
		ВложениеИнфо.Вставить("Размер", Вложение.Размер);
		ВложениеИнфо.Вставить("Адрес", Вложение.Адрес);
		ВложениеИнфо.Вставить("ИндексКартинки", Вложение.ИндексКартинки);
		Вложения.Добавить(ВложениеИнфо);
	КонецЦикла;
	
	// Открытие формы заполнения реквизитов документа
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипДокумента", ВидДокумента);
	ПараметрыОткрытия.Вставить("Отправитель", Сообщение.Отправитель);
	ПараметрыОткрытия.Вставить("Кому", Сообщение.Кому);
	ПараметрыОткрытия.Вставить("Копия", Сообщение.Копия);
	ПараметрыОткрытия.Вставить("СкрытаяКопия", Сообщение.СкрытаяКопия);
	ПараметрыОткрытия.Вставить("Вложения", Вложения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьДокументИзСообщенияПослеЗаполненияРеквизитовДокумента",
		ЭтотОбъект,
		Параметры);
	
	ОткрытьФорму(
		ИмяФормыОбработки,
		ПараметрыОткрытия,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИзСообщенияПослеЗаполненияРеквизитовДокумента(
	ПараметрыЗаполнения, Параметры) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = Параметры.ВидДокумента;
	ТекущаяСтрока = Параметры.ТекущаяСтрока;
	Сообщение = Параметры.Сообщение;
	
	// Если файлы хранятся на диске их надо поместить во временное хранилище.
	Для каждого ФайлИнфо Из ПараметрыЗаполнения.Файлы Цикл
		Если Не ЭтоАдресВременногоХранилища(ФайлИнфо.Адрес) Тогда
			Если Не ПустаяСтрока(ФайлИнфо.ПолноеИмяФайла) Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ФайлИнфо.ПолноеИмяФайла);
				ФайлИнфо.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка загрузки файла.'; en = 'Error loading file.'");
			КонецЕсли;
		КонецЕсли;
		Если ФайлИнфо.Свойство("ЭП") Тогда
			Для каждого ЭПИнфо Из ФайлИнфо.ЭП Цикл
				Если Не ЭтоАдресВременногоХранилища(ЭПИнфо.Адрес) Тогда
					Если Не ПустаяСтрока(ЭПИнфо.ПолноеИмяФайла) Тогда
						ДвоичныеДанные = Новый ДвоичныеДанные(ЭПИнфо.ПолноеИмяФайла);
						ЭПИнфо.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
					Иначе
						ВызватьИсключение НСтр("ru = 'Ошибка загрузки файла.'; en = 'Error loading file.'");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Идентификатор", ТекущаяСтрока);
	ПараметрыЗаполнения.Вставить("СообщениеИдентификатор", Сообщение.Идентификатор);
	
	Если ВидДокумента = "ВнутреннийДокумент" Тогда
		ИмяСправочника = "ВнутренниеДокументы";
	ИначеЕсли ВидДокумента = "ВходящийДокумент" Тогда
		ИмяСправочника = "ВходящиеДокументы";
	ИначеЕсли ВидДокумента = "ИсходящийДокумент" Тогда
		ИмяСправочника = "ИсходящиеДокументы";
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Создается документ. Пожалуйста, подождите...'; en = 'Creating document. Please wait ...'"));
	ДокументИнфо = СоздатьДокументИзСообщенияНаСервере(ИмяСправочника, ПараметрыЗаполнения);
	Если ТипЗнч(ДокументИнфо) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'; en = 'Added:'"),
		ДокументИнфо.Адрес,
		ДокументИнфо.Наименование,
		БиблиотекаКартинок.Информация32);
	
	// Извлечение текста файла на клиенте
	Если КэшИзвлекатьТекстыФайловНаКлиенте Тогда
		Для каждого ВерсияФайлаДанные Из ДокументИнфо.ВерсииФайлов Цикл
			ФайловыеФункцииКлиент.ИзвлечьТекстВерсии(
				ВерсияФайлаДанные.Версия,
				ВерсияФайлаДанные.АдресФайла,
				ВерсияФайлаДанные.Расширение,
				УникальныйИдентификатор);
			
			Если ВерсияФайлаДанные.УдалитьИзВременногоХранилища Тогда
				УдалитьИзВременногоХранилища(ВерсияФайлаДанные.АдресФайла);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьПисьмоПослеЗагрузки(Сообщение, ТекущаяСтрока);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ДокументИнфо.Ссылка);
	ПараметрыОткрытия.Вставить("ТолькоЧтоСозданныйДокумент", Истина);
	ОткрытьФорму("Справочник." + ИмяСправочника + ".ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументИзСообщенияНаСервере(ИмяСправочника, ПараметрыЗаполнения)
	
	НачатьТранзакцию();
	
	ТекДата = ТекущаяДата();
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	
	Попытка
		Документ = Справочники[ИмяСправочника].СоздатьЭлемент();
		Сообщение = ВходящиеСообщения.НайтиПоИдентификатору(ПараметрыЗаполнения.Идентификатор);
		Документ.Заголовок = Сообщение.Тема;
		Если ПустаяСтрока(Документ.Заголовок) Тогда
			Документ.Заголовок = НСтр("ru = 'Письмо без темы'; en = 'Email without subject'");
		КонецЕсли;
		Документ.Содержание = Сообщение.Текст;
		Документ.ДатаСоздания = Сообщение.ДатаПолучения;
		
		ЗаполнитьЗначенияСвойств(Документ, ПараметрыЗаполнения);
		
		Если (ИмяСправочника = "ВнутренниеДокументы") 
			И ЗначениеЗаполнено(Документ.ВидДокумента)
			И ЗначениеЗаполнено(ПараметрыЗаполнения.Контрагент) Тогда
			
			ВестиУчетПоКонтрагентам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента, "ВестиУчетПоКонтрагентам");
			ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента, "ВестиУчетСторон");
			
			Если ВестиУчетСторон И ЗначениеЗаполнено(ПараметрыЗаполнения.Организация) Тогда
				
				НовСтрока = Документ.Стороны.Добавить();
				НовСтрока.Сторона = ПараметрыЗаполнения.Организация;
				
				НовСтрока = Документ.Стороны.Добавить();
				НовСтрока.Сторона = ПараметрыЗаполнения.Контрагент;
				
			ИначеЕсли ВестиУчетПоКонтрагентам Тогда	
				
				НовСтрока = Документ.Контрагенты.Добавить();
				НовСтрока.Контрагент = ПараметрыЗаполнения.Контрагент;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если (ИмяСправочника = "ИсходящиеДокументы") Тогда
			Если ПараметрыЗаполнения.Свойство("Получатели") Тогда
				Если ПараметрыЗаполнения.Получатели.Количество() > 0 Тогда
					Документ.Получатели.Загрузить(ПараметрыЗаполнения.Получатели.Выгрузить());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Документ.Записать();
		
		ОписаниеСобытия = СтрШаблон(НСтр("ru = 'Тема=%1  Дата=%2'; en = 'Subject =%1 date =%2'"), 
			Сообщение.Тема, Сообщение.ДатаПолучения);
		ПротоколированиеРаботыПользователей.ЗаписатьПолучениеПочты(Документ.Ссылка, ОписаниеСобытия);
		
		// Сохранение файлов на диске
		Если ИмяСправочника = "ВходящиеДокументы"
			И КэшИспользоватьФайлыУВходящихДокументов
			Или ИмяСправочника = "ИсходящиеДокументы"
			И КэшИспользоватьФайлыУИсходящихДокументов
			Или ИмяСправочника = "ВнутренниеДокументы" Тогда
			
			Для Каждого ФайлИнфо Из ПараметрыЗаполнения.Файлы Цикл
				Если Не ЭтоАдресВременногоХранилища(ФайлИнфо.Адрес) Тогда
					ВызватьИсключение НСтр("ru = 'Файл не найден во временном хранилище.'; en = 'File not found in the temporary storage.'");
				КонецЕсли;
				
				ИмяФайла = ФайлИнфо.Имя;
				РасширениеФайла = ФайлИнфо.Расширение;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлИнфо.Адрес);
				Размер = ДвоичныеДанные.Размер();
				Комментарий = "";
				
				// Загрузка данных по ГОСТ Р 53898-2010
				Если ИмяФайла = "1C-53898-2010" И НРег(РасширениеФайла) = "xml" Тогда
					
					Если ИмяСправочника = "ВходящиеДокументы" Тогда
						
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
						
						Попытка
							
							ДвоичныеДанные.Записать(ИмяВременногоФайла);
							ВзаимодействиеСЭДСервер.ЗагрузитьВходящийДокумент(Документ, ИмяВременногоФайла);
							
							УдалитьФайлы(ИмяВременногоФайла);
							
						Исключение
							
							УдалитьФайлы(ИмяВременногоФайла);
							
							ВызватьИсключение;
							
						КонецПопытки;
						
						Документ.Записать();
						
					КонецЕсли;
					
					Комментарий = НСтр("ru = 'Сообщение взаимодействия СЭД по ГОСТ Р 53898-2010'; en = 'SED interaction message on GOST R 53898-2010'");
					
				КонецЕсли;
				
				// Создание файла с версией
				ПараметрыСозданияФайла = Новый Структура;
				ПараметрыСозданияФайла.Вставить("ВладелецФайла", Документ.Ссылка);
				ПараметрыСозданияФайла.Вставить("ИмяФайла", ИмяФайла);
				ПараметрыСозданияФайла.Вставить("РасширениеФайла", РасширениеФайла);
				ПараметрыСозданияФайла.Вставить("Дата", ТекДата);
				ПараметрыСозданияФайла.Вставить("Размер", Размер);
				ПараметрыСозданияФайла.Вставить("Адрес", ФайлИнфо.Адрес);
				ПараметрыСозданияФайла.Вставить("Комментарий", Комментарий);
				НовыйФайл = СоздатьФайлСВерсией(ПараметрыСозданияФайла);
				
				Если ВестиУчетСканКопийОригиналовДокументов И ФайлИнфо.Оригинал Тогда 
					Делопроизводство.СохранитьСведенияОбОригиналеФайла(НовыйФайл, Документ.Ссылка);
				КонецЕсли;
				
				// Занесение информации об ЭП
				Если ФайлИнфо.Свойство("ЭП") Тогда
					МассивДанныхОПодписях = Новый Массив;
					Для Каждого ЭПСтрока Из ФайлИнфо.ЭП Цикл
						Если ПустаяСтрока(ЭПСтрока.Адрес) Тогда
							Продолжить;
						КонецЕсли;
						ЭПДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭПСтрока.Адрес);
						ЭПИнфо = Новый Структура;
						ЭПИнфо.Вставить("ПодписанныйОбъект", НовыйФайл);
						ЭПИнфоСвойства = Новый Структура;
						ЭПИнфоСвойства.Вставить("ОбъектСсылка", НовыйФайл);
						ЭПИнфоСвойства.Вставить("Подпись", ЭПДвоичныеДанные);
						ЭПИнфоСвойства.Вставить("ДатаПодписи", "");
						ЭПИнфоСвойства.Вставить("Комментарий", "");
						ЭПИнфоСвойства.Вставить("ИмяФайлаПодписи", ЭПСтрока.Имя);
						Если Не ПустаяСтрока(ЭПСтрока.АдресСертификата) Тогда
							СертификатДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭПСтрока.АдресСертификата);
							ЭПИнфоСвойства.Вставить("Отпечаток", ЭПСтрока.Отпечаток);
							ЭПИнфоСвойства.Вставить("Сертификат", СертификатДвоичныеДанные);
							ЭПИнфоСвойства.Вставить("КомуВыданСертификат", ЭПСтрока.КомуВыданСертификат);
						Иначе
							ЭПИнфоСвойства.Вставить("Отпечаток", "");
							ЭПИнфоСвойства.Вставить("Сертификат", Неопределено);
							ЭПИнфоСвойства.Вставить("КомуВыданСертификат", "");
						КонецЕсли;
						ЭПИнфоСвойства.Вставить("АдресФайла", "");
						ЭПИнфо.Вставить("СвойстваПодписи", ЭПИнфоСвойства);
						МассивДанныхОПодписях.Добавить(ЭПИнфо);
					КонецЦикла;
					Если МассивДанныхОПодписях.Количество() > 0 Тогда
						РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхОПодписях, ЭтаФорма.УникальныйИдентификатор);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Состояние = Перечисления.СостоянияДокументов.Проект;
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Документ.Ссылка) Тогда
			Состояние = Перечисления.СостоянияДокументов.НаРегистрации;
		КонецЕсли;
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка,
			ТекДата,
			Состояние,
			ТекПользователь);
			
		// Регистрация внешнего источника для импортированного документа
		РегистрыСведений.ВнешниеИсточникиДокументов.ЗарегистрироватьВнешнийИсточникДокумента(
			Документ.Ссылка,
			ПараметрыЗаполнения.СообщениеИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = ПолучитьИнформациюОДокументе(Документ.Ссылка);
	
	ИсторияРаботыПользователя.Добавить(Результат.Адрес);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПисьмоПослеЗагрузки(Сообщение, ТекущаяСтрокаСообщения)
	
	Сообщение.Импортирован = (Сообщение.Документы.Количество() > 0);
	
	Если ВидПочтовогоКлиентаИнтернетПочта() Тогда
		// Удаляем письмо.
		УдалитьВременныеФайлыСообщения(Сообщение);
		ИдентификаторыСтрок = Новый Массив;
		ИдентификаторыСтрок.Добавить(ТекущаяСтрокаСообщения);
		УдалитьСообщенияСервер(ИдентификаторыСтрок);
		СерверныеИдентификаторыСообщений = Новый Массив;
		СерверныеИдентификаторыСообщений.Добавить(Сообщение.Идентификатор);
		Если Не ЛегкаяПочтаКлиент.УдалитьСообщения(
			ПараметрыЗагрузкиПочтовыхСообщений,
			СерверныеИдентификаторыСообщений) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось удалить письмо на сервере.'; en = 'Failed to delete email on server.'");
		КонецЕсли;
		
	ИначеЕсли ВидПочтовогоКлиентаMSOutlook() Или ВидПочтовогоКлиентаПочта() Тогда
		// Помечаем письмо как прочтенное.
		СерверныеИдентификаторыСообщений = Новый Массив;
		СерверныеИдентификаторыСообщений.Добавить(Сообщение.Идентификатор);
		Если Не ЛегкаяПочтаКлиент.ПометитьКакПрочтенные(
			ПараметрыЗагрузкиПочтовыхСообщений,
			СерверныеИдентификаторыСообщений) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось пометить письмо как прочтенное.'; en = 'Failed to mark the email as read.'");
		КонецЕсли;
		ИдентификаторыСтрок = Новый Массив();
		ИдентификаторыСтрок.Добавить(ТекущаяСтрокаСообщения);
		УдалитьСообщенияСервер(ИдентификаторыСтрок);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид почтового клиента'; en = 'Incorrect type of email client'");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСписокСообщенийПродолжение(Сообщения, Параметры) Экспорт
	
	Если ТипЗнч(Сообщения) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	УдалитьВременныеФайлы();
	ОбновитьСписокСообщенийСервер(Сообщения);
	
	Состояние(НСтр("ru = 'Загрузка электронной почты завершена.'; en = 'Loading email is completed.'"));	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСообщенийСервер(Сообщения)
	
	ВходящиеСообщенияОчиститьСервер();
	
	ЗагруженоСоотв = ПолучитьИнформациюОЗагруженныхСообщениях(Сообщения);
	Для каждого Сообщение Из Сообщения Цикл
		ВходящиеСообщенияСтрока = ВходящиеСообщения.Добавить();
		ВходящиеСообщенияСтрока.Идентификатор = Сообщение.Идентификатор;
		ВходящиеСообщенияСтрока.Отправитель = Сообщение.Отправитель;
		ВходящиеСообщенияСтрока.Кому = Сообщение.Кому;
		ВходящиеСообщенияСтрока.Копия = Сообщение.Копия;
		ВходящиеСообщенияСтрока.СкрытаяКопия = Сообщение.СкрытаяКопия;
		ВходящиеСообщенияСтрока.Тема = Сообщение.Тема;
		ВходящиеСообщенияСтрока.ТипТекста = Сообщение.ТипТекста;
		ВходящиеСообщенияСтрока.Текст = Сообщение.Текст;
		ВходящиеСообщенияСтрока.ТекстHTML = Сообщение.ТекстHTML;
		ВходящиеСообщенияСтрока.ДатаОтправки = Сообщение.ДатаОтправки;
		ВходящиеСообщенияСтрока.ДатаПолучения = Сообщение.ДатаПолучения;
		ВходящиеСообщенияСтрока.Импортирован = (ЗагруженоСоотв.Получить(Сообщение.Идентификатор) = Истина);
		Если Сообщение.Важность = Перечисления.ВажностьПисем.Высокая Тогда
			ВходящиеСообщенияСтрока.Важность = 2;
		ИначеЕсли Сообщение.Важность = Перечисления.ВажностьПисем.Низкая Тогда
			ВходящиеСообщенияСтрока.Важность = 0;
		Иначе
			ВходящиеСообщенияСтрока.Важность = 1;
		КонецЕсли;
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(Вложение.ИмяФайла);
			ИмяФайла = ИмяФайлаИнфо.Имя;
			РасширениеФайла = ИмяФайлаИнфо.Расширение;
			ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
			
			ВложенияСтрока = ВходящиеСообщенияСтрока.Вложения.Добавить();
			ВложенияСтрока.Имя = ИмяФайла;
			ВложенияСтрока.Расширение = РасширениеФайла;
			ВложенияСтрока.ПолноеИмяФайла = Вложение.ПолноеИмяФайла;
			ВложенияСтрока.Адрес = Вложение.Адрес;
			ВложенияСтрока.Размер = Вложение.Размер;
			ВложенияСтрока.РазмерСтр = РаботаСоСтроками.ПолучитьРазмерСтрокой(Вложение.Размер);
			ВложенияСтрока.ИндексКартинки = ИндексКартинки;
			ВложенияСтрока.ЗагрузкаЗапрещена =
				Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
					КэшЗапретЗагрузкиФайловПоРасширению,
					КэшСписокЗапрещенныхРасширений,
					РасширениеФайла);
		КонецЦикла;
		
		Для каждого Картинка Из Сообщение.Картинки Цикл
			КартинкаСтрока = ВходящиеСообщенияСтрока.Картинки.Добавить();
			ЗаполнитьЗначенияСвойств(КартинкаСтрока, Картинка);
		КонецЦикла;
		
		ВходящиеСообщенияСтрока.Размер = ПолучитьРазмерСообщения(ВходящиеСообщенияСтрока);
		ВходящиеСообщенияСтрока.РазмерСтр = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВходящиеСообщенияСтрока.Размер);
		ВходящиеСообщенияСтрока.Вложение = (Сообщение.Вложения.Количество() > 0);
		
	КонецЦикла;
	
	ВходящиеСообщения.Сортировать("ДатаОтправки Убыв");
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьСообщенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет удаление отмеченных писем. Пожалуйста, подождите...'; en = 'Deleting tagged emails. Please wait ...'"));
	
	ИдентификаторыСтрок = Новый Массив();
	СерверныеИдентификаторыСообщений = Новый Массив;
	Для каждого Строка Из Элементы.ВходящиеСообщения.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(Строка);
		Сообщение = ВходящиеСообщения.НайтиПоИдентификатору(Строка);
		Идентификатор = Сообщение.Идентификатор;
		Если Не ПустаяСтрока(Идентификатор) Тогда
			СерверныеИдентификаторыСообщений.Добавить(Идентификатор);
		КонецЕсли;
		УдалитьВременныеФайлыСообщения(Сообщение);
	КонецЦикла;
	
	УдалитьСообщенияСервер(ИдентификаторыСтрок);
	
	Если Не ЛегкаяПочтаКлиент.УдалитьСообщения(ПараметрыЗагрузкиПочтовыхСообщений, СерверныеИдентификаторыСообщений) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось удалить письма.'; en = 'Failed to delete emails.'"));
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Удаление отмеченных писем завершено.'; en = 'Delete marked emails completed.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеФайлыСообщения(Сообщение)
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		Если Не ПустаяСтрока(Вложение.ПолноеИмяФайла) Тогда
			Файл = Новый Файл(Вложение.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				УдалитьФайлы(Вложение.ПолноеИмяФайла);
			КонецЕсли;
			Вложение.ПолноеИмяФайла = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСообщенияСервер(ИдентификаторыСтрок)
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ВходящиеСообщенияСтрока = ВходящиеСообщения.НайтиПоИдентификатору(ИдентификаторСтроки);
		Для каждого ВложенияСтрока Из ВходящиеСообщенияСтрока.Вложения Цикл
			Если ТипЗнч(ВложенияСтрока.Адрес) = Тип("Строка") Тогда
				Если ЭтоАдресВременногоХранилища(ВложенияСтрока.Адрес) Тогда
					УдалитьИзВременногоХранилища(ВложенияСтрока.Адрес);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВходящиеСообщения.Удалить(ВходящиеСообщенияСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьHTML(Отправитель, Тема,  Дата, Текст, ТекстHTML, 
	Знач Картинки, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(ТекстHTML) Тогда
		ТекстHTML = РаботаС_HTML.ПолучитьHTMLИзТекста(Текст);
	Иначе
		
		РаботаС_HTML.ДобавитьНеобходимыеТэгиHTML(ТекстHTML);
		
		РаботаС_HTML.ВставитьКартинкиВТекстHTML(
			ТекстHTML,
			Картинки,
			УникальныйИдентификатор);
			
		Если Картинки.Количество() = 0 Тогда
			РаботаС_HTML.УдалитьВложенныеКартинки(ТекстHTML);
		КонецЕсли;	
		
	КонецЕсли;	
	
	ТекстШапки = "";
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	// Нахождение места для вставки текста шапки
	ВставитьПеред = 1;
	ПозицияHTML = Найти(НРегТекстHTML, "<html");
	ПозицияBody = 0;
	Если ПозицияHTML > 0 Тогда
		ПозицияBody = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "<body", ПозицияHTML);
		Если ПозицияBody > 0 Тогда
			ПозицияЗакрывающейсяСкобки = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияBody);
			Если ПозицияЗакрывающейсяСкобки > 0 Тогда
				ВставитьПеред = ПозицияЗакрывающейсяСкобки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование текста шапки письма
	ШапкаHTML =
		"<table><tr><td>
		|<div style='font-size=14px;font-family=Arial;line-height:150%'>
		|<b>[Тема]</b>
		|</div>
		|</td></tr>
		|<tr><td width=100%>
		|<div style='font-size=14px;font-family=Arial;line-height:150%'>
		|[От]
		|</div>
		|<div style='font-size=11px;font-family=Arial;top-margin:10px'>
		|<b>[НадписьДата]:</b> [Дата]<br>
		|</div>
		|</td>
		|</tr></table>
		|<hr>";
		
	Если ПустаяСтрока(Дата) Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "<b>[НадписьДата]:</b> [Дата]<br>", "");
	КонецЕсли;
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьДата]", НСтр("ru = 'Дата'; en = 'Date'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[От]", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Отправитель));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Дата]", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Дата));
	
	ТекстHTMLДляТемы = РаботаС_HTML.ЗаменитьСпецСимволыHTML(Тема);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Тема]", ТекстHTMLДляТемы);
	
	ТекстHTML = Лев(ТекстHTML, ВставитьПеред - 1) + ШапкаHTML + Сред(ТекстHTML, ВставитьПеред);
	
	// Нахождение места для вставки style (только если его нет)
	НРегТекстHTML = НРег(ТекстHTML);
	Если СтрНайти(НРегТекстHTML, "overflow: auto") = 0 И СтрНайти(НРегТекстHTML, "<style") = 0 Тогда
		
		ПозицияТэгаHTML = Найти(НРегТекстHTML, "<html");
		
		Если ПозицияТэгаHTML <> 0 Тогда
			
			ПозицияОкончанияТэгаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияТэгаHTML);
			Голова = Лев(ТекстHTML, ПозицияОкончанияТэгаHTML);
			Середина = Сред(ТекстHTML, ПозицияОкончанияТэгаHTML + 1);
			ТекстHTML = 
				Голова 
				+	"<style type=""text/css""> body { overflow: auto;} </style> "
				+ Середина;
				
		КонецЕсли;	
	
	КонецЕсли;
	
	Возврат ТекстHTML;

КонецФункции	

&НаСервере
Процедура ЗаполнитьКэш()
	КэшЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	КэшСписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	КэшВидПочтовогоКлиентаПочта = Перечисления.ВидыПочтовыхКлиентов.Почта;
	КэшВидПочтовогоКлиентаMSOutlook = Перечисления.ВидыПочтовыхКлиентов.MSOutlook;
	КэшВидПочтовогоКлиентаИнтернетПочта = Перечисления.ВидыПочтовыхКлиентов.ИнтернетПочта;
	КэшИзвлекатьТекстыФайловНаКлиенте = Не Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	КэшИспользоватьФайлыУИсходящихДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьФайлыУИсходящихДокументов");
	КэшИспользоватьФайлыУВходящихДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьФайлыУВходящихДокументов");	
	КэшИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	КэшИспользоватьВидыВходящихДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов");
	КэшИспользоватьВидыИсходящихДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов");
	КэшИспользоватьВидыВнутреннихДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов");
	КэшИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	КэшИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	КэшИспользоватьЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастроекПрофиля()
	
	Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено Тогда
		ВидПочтовогоКлиента = Неопределено;
	Иначе
		ВидПочтовогоКлиента = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.ВидПочтовогоКлиента;
	КонецЕсли;
	
	Элементы.НастройкаПериодЗагрузки.Видимость = (ВидПочтовогоКлиента = Перечисления.ВидыПочтовыхКлиентов.MSOutlook);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеФайлы()
	Если ВходящиеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Состояние(НСтр("ru = 'Удаление временных файлов...'; en = 'Deleting temporary files ...'"));
	Для каждого Сообщение Из ВходящиеСообщения Цикл
		УдалитьВременныеФайлыСообщения(Сообщение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОЗагруженныхСообщениях(Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Идентификаторы = Новый Массив;
	Для каждого Сообщение Из Сообщения Цикл
		Идентификаторы.Добавить(Сообщение.Идентификатор);
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВнешниеИсточникиДокументов.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ВнешниеИсточникиДокументов КАК ВнешниеИсточникиДокументов
			|ГДЕ
			|	ВнешниеИсточникиДокументов.Идентификатор В(&Идентификаторы)");
		Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Идентификатор, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВходящиеСообщенияОчиститьСервер()
	
	ИдентификаторыСтрок = Новый Массив();
	Для каждого ВходящиеСообщенияСтрока Из ВходящиеСообщения Цикл
		ИдентификаторыСтрок.Добавить(ВходящиеСообщенияСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	УдалитьСообщенияСервер(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРазмерСообщения(Сообщение)
	Результат = СтрДлина(Сообщение.Текст);
	Для каждого Вложение Из Сообщение.Вложения Цикл
		Результат = Результат + Вложение.Размер;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьДокументыПоВнешнемуИсточнику(Идентификатор)
	
	Возврат РегистрыСведений.ВнешниеИсточникиДокументов.ПолучитьДокументыПоВнешнемуИсточнику(Идентификатор);
	
КонецФункции

&НаКлиенте
Функция ВидПочтовогоКлиентаПочта()
	
	ПрофильДляЗагрузки = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль;
	
	Возврат ЗначениеЗаполнено(ПрофильДляЗагрузки)
		И ПрофильДляЗагрузки.ВидПочтовогоКлиента = КэшВидПочтовогоКлиентаПочта;
	
КонецФункции

&НаКлиенте
Функция ВидПочтовогоКлиентаMSOutlook()
	
	ПрофильДляЗагрузки = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль;
	
	Возврат ЗначениеЗаполнено(ПрофильДляЗагрузки)
		И ПрофильДляЗагрузки.ВидПочтовогоКлиента = КэшВидПочтовогоКлиентаMSOutlook;
	
КонецФункции

&НаКлиенте
Функция ВидПочтовогоКлиентаИнтернетПочта()
	
	ПрофильДляЗагрузки = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль;
	
	Возврат ЗначениеЗаполнено(ПрофильДляЗагрузки)
		И ПрофильДляЗагрузки.ВидПочтовогоКлиента = КэшВидПочтовогоКлиентаИнтернетПочта;
	
КонецФункции

// Создает элемент справочника Файлы. Помещает в него файл из временного хранилища.
// Если файл имеет запрещенное расширение, то вызывается исключение.
// Возвращает ссылку на документ если все успешно или Неопределено если произошла ошибка.
//
// Параметры:
// - Параметры (Структура)
//   - Дата (Дата)
//   - ВладелецФайла (Справочник.ПапкиФайлов, Справочник.ВнутренниеДокументы,
//     Справочник.ВходящиеДокументы, Справочник.ИсходящиеДокументы)
//   - ИмяФайла (Строка)
//   - РасширениеФайла (Строка) без точки
//   - Размер (Число) в килобайтах
//   - Адрес (Строка) адрес во временном хранилище
//   - Комментарий (Строка)
//
&НаСервере
Функция СоздатьФайлСВерсией(Параметры) 
	
	Если Не РасширениеФайлаРазрешеноДляЗагрузки(Параметры.РасширениеФайла) Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'; en = 'Loading files with the extension ""%1"" is not allowed. Contact your system administrator.'"),
			Параметры.РасширениеФайла);
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	УниверсальноеВремя = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(Параметры.Дата);
	
	ПараметрыРаспознавания = ПолучитьПараметрыРаспознавания();
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = Параметры.Адрес;
	СведенияОФайле.ИмяБезРасширения = Параметры.ИмяФайла;
	СведенияОФайле.РасширениеБезТочки = Параметры.РасширениеФайла;
	СведенияОФайле.Размер = Параметры.Размер;
	СведенияОФайле.ВремяИзменения = Параметры.Дата;
	СведенияОФайле.ВремяИзмененияУниверсальное = УниверсальноеВремя;
	СведенияОФайле.Комментарий = Параметры.Комментарий;
	СведенияОФайле.ПараметрыРаспознавания = ПараметрыРаспознавания;
	СведенияОФайле.ХранитьВерсии = Истина;
	СведенияОФайле.ЗаписатьВИсторию = Ложь;
	
	НовыйФайл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Параметры.ВладелецФайла, СведенияОФайле);
	
	Возврат НовыйФайл;
	
КонецФункции

// Проверяет вхождение расширения файла в список запрещенных
// Результат (Булево) Истина - загрузка файла разрешена, Ложь - загрузка файла запрещена
//
// Параметры:
// - РасширениеФайла (Строка)
//
&НаСервере
Функция РасширениеФайлаРазрешеноДляЗагрузки(РасширениеФайла)
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	Возврат ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
		ЗапретЗагрузкиФайловПоРасширению,
		СписокЗапрещенныхРасширений,
		РасширениеФайла);
	
КонецФункции

// Возвращает структуру
// - СтратегияРаспознавания (Перечисление.СтратегииРаспознаванияТекста)
// - ЯзыкРаспознавания (Строка)
// - РаспознатьПослеДобавления (Булево)
//
&НаСервере
Функция ПолучитьПараметрыРаспознавания()
	
	ЯзыкРаспознавания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Распознавание", 
		"ЯзыкРаспознавания");
	Если Не ЗначениеЗаполнено(ЯзыкРаспознавания) Тогда
		ЯзыкРаспознавания = РаботаСФайламиВызовСервера.ПолучитьЯзыкРаспознавания();
	КонецЕсли;
	
	РаспознатьПослеДобавления = Не (РаботаСФайламиВызовСервера.ПолучитьИспользоватьРаспознавание() = Ложь);
	
	ПараметрыРаспознавания = Новый Структура;
	ПараметрыРаспознавания.Вставить("СтратегияРаспознавания", Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз);
	ПараметрыРаспознавания.Вставить("ЯзыкРаспознавания", ЯзыкРаспознавания);
	ПараметрыРаспознавания.Вставить("РаспознатьПослеДобавления", РаспознатьПослеДобавления);
	
	Возврат ПараметрыРаспознавания;
	
КонецФункции

&НаКлиенте
Функция ЕстьЗапрещенныеВложения(ТекущаяСтрока)
	ТекущиеДанные = ВходящиеСообщения.НайтиПоИдентификатору(ТекущаяСтрока);
	Для Каждого Вложение Из ТекущиеДанные.Вложения Цикл
		Если Вложение.ЗагрузкаЗапрещена Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОДокументе(ДокументСсылка)
	
	Адрес = ПолучитьНавигационнуюСсылку(ДокументСсылка);
	
	ВерсииФайлов = Новый Массив;
	Если КэшИзвлекатьТекстыФайловНаКлиенте Тогда
		МассивВерсийФайлов = ПолучитьВерсииФайлов(ДокументСсылка);
		Для каждого Версия Из МассивВерсийФайлов Цикл
			ДанныеВерсииФайла = Новый Структура;
			
			// Сохранение файла во временное хранилище и получение данных файла
			Результат = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсии(
				,
				Версия,
				УникальныйИдентификатор);
			
			ДанныеФайла = Результат.ДанныеФайла;
			Расширение = ДанныеФайла.Расширение;
			АдресФайла = Результат.НавигационнаяСсылкаВерсии;
			
			УдалитьИзВременногоХранилища = Ложь;
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				УдалитьИзВременногоХранилища = Истина;
			КонецЕсли;
			
			ДанныеВерсииФайла.Вставить("Версия",Версия);
			ДанныеВерсииФайла.Вставить("АдресФайла",АдресФайла);
			ДанныеВерсииФайла.Вставить("Расширение",Расширение);
			ДанныеВерсииФайла.Вставить("УдалитьИзВременногоХранилища", УдалитьИзВременногоХранилища);
			ВерсииФайлов.Добавить(ДанныеВерсииФайла);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", ДокументСсылка);
	Результат.Вставить("Адрес", Адрес);
	Результат.Вставить("Наименование", Строка(ДокументСсылка));
	Результат.Вставить("ВерсииФайлов", ВерсииФайлов);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьВерсииФайлов(ВладелецФайла)
	
	МассивДанныхФВерсийФайлов = Новый Массив();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.ТекущаяВерсия
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка из Данные Цикл
		МассивДанныхФВерсийФайлов.Добавить(Строка.ТекущаяВерсия);
	КонецЦикла;
	
	Возврат МассивДанныхФВерсийФайлов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКоманд()
	
	ВидПочтовогоКлиентаПочта = ВидПочтовогоКлиентаПочта();
	Элементы.КонтекстноеМенюВходящиеСообщенияУдалитьСообщения.Доступность = Не ВидПочтовогоКлиентаПочта;
	Элементы.УдалитьСообщения.Доступность = Не ВидПочтовогоКлиентаПочта;
	
КонецПроцедуры

&НаСервере
Процедура ПрофильПриИзмененииСервер()
	
	УстановитьВидимостьНастроекПрофиля();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПриИзмененииНаСервере()
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("ПериодЗагрузки", НастройкаПериодЗагрузки);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ПериодЗагрузки", НастройкаПериодЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПродолжениеВыбораИзСписка(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Профиль = ВыбранноеЗначение.Значение; 
		ПрофильПриИзмененииВыполнить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
