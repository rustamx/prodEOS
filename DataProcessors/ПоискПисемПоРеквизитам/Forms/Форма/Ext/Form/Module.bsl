&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройки();
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("ИдентификаторПоиска", УникальныйИдентификатор);
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СохранитьПисьмо.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма.Видимость = Истина;
		Элементы.ПредпросмотрHTMLБезВложенийКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
		Элементы.ПредпросмотрHTMLСВложениямиКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
	Иначе
		Элементы.СохранитьПисьмо.Видимость = Истина;
		Элементы.СохранитьТекстПисьма.Видимость = Ложь;
	КонецЕсли;
		
	СвязьУсловий = Перечисления.ТипыЛогическойСвязи.И;	
		
	ЗаполнитьТаблицуУсловий();	
	
	Элементы.ГруппаПоискИРезультаты.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.СтраницаПоиск.Видимость = Истина;
	Элементы.СтраницаРезультаты.Видимость = Ложь;
	ТекущийЭлемент = Элементы.УсловияПоискаПисем;
	
	ШрифтОтображения = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	ШрифтОтображенияПоУмолчанию = ШрифтОтображения;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ВариантОтображенияОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображениеОбластиЧтения");
	
	Если ТипЗнч(ВариантОтображенияОбластиЧтения) <> Тип("ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения")
		Или Не ЗначениеЗаполнено(ВариантОтображенияОбластиЧтения) Тогда
		
		ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
		
	КонецЕсли;
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
	ОтображатьУдаленныеПисьмаИПапки = Истина;
	
	ОтображатьУдаленныеСервер();
	
	ДействиеПриВыбореВходящегоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДействиеПриВыбореВходящегоПисьма");
		
	ИспользоватьАвтоматическоеПрочтение =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрочтения",
			"ИспользоватьАвтоматическоеПрочтение",
			Ложь);
	
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
					
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилосьСодержаниеПисьма" Тогда
		ОбработатьОповещениеИзменилосьСодержаниеПисьма(Параметр);
	КонецЕсли;
				
	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты"
		И Источник <> ЭтаФорма Тогда
		
		Если Параметр.Свойство("ДействиеПриВыбореВходящегоПисьма") Тогда
			
			ДействиеПриВыбореВходящегоПисьма =Параметр.ДействиеПриВыбореВходящегоПисьма;
			Если Не ЗначениеЗаполнено(ДействиеПриВыбореВходящегоПисьма) Тогда
				ДействиеПриВыбореВходящегоПисьма =
					ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки")
			И ОтображатьУдаленныеПисьмаИПапки <> Параметр.ОтображатьУдаленныеПисьмаИПапки Тогда
			
			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
		
			ОтображатьУдаленныеСервер(Истина);

			Элементы.Список.Обновить();
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображениеОбластиЧтения")
			И ОтображениеОбластиЧтения <> Параметр.ОтображениеОбластиЧтения Тогда
			
			ИзменитьОтображениеОбластиЧтения(Параметр.ОтображениеОбластиЧтения, Ложь);
			
		КонецЕсли;
						
		Если Параметр.Свойство("ПриОтветеИскатьСредиЧерновиков") Тогда
			ПриОтветеИскатьСредиЧерновиков = Параметр.ПриОтветеИскатьСредиЧерновиков;
		КонецЕсли;
						
	ИначеЕсли ИмяСобытия = "Запись_ЛичныйАдресат"
		Или ИмяСобытия = "Запись_Контрагент"
		Или ИмяСобытия = "Запись_КонтактноеЛицо"
		Или ИмяСобытия = "Запись_Пользователь"
		Или ИмяСобытия = "Запись_РолиИсполнителей"
		Или ИмяСобытия = "ИзмененоФизическоеЛицо" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг" Тогда
		ТипОбъекта = ТипЗнч(Параметр[0]);
		Если ТипОбъекта = Тип("ДокументСсылка.ВходящееПисьмо")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены"
		И ЗначениеЗаполнено(ТекущееПисьмо)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = ТекущееПисьмо
		И Источник <> ЭтаФорма Тогда
		
		ОбновитьФайлыПисьма();
		УстановитьДоступностьКомандРаботыСВложением();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ФайлИзменен"
		И ЗначениеЗаполнено(ТекущееПисьмо)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = ТекущееПисьмо Тогда
		
		ОбновитьФайлыПисьма();
		УстановитьДоступностьКомандРаботыСВложением();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	УстановитьСтраницуПредпросмотра();
	
	ОбновитьПредставленияЗначений();			
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставленияЗначений()
	
	Для Каждого Строка Из УсловияПоискаПисем Цикл
		
		Строка.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(
				Строка.ВидУсловия, Строка.ЗначенияУсловия);
		
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура Ответить(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда 
		
		ПересылаемыеПисьма = Новый СписокЗначений;
		ПересылаемыеПисьма.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПересылаемыеПисьма", ПересылаемыеПисьма);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаПересылки", ПараметрыФормы, ЭтаФорма);
		
	Иначе
	
		ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
		Если ВыбранноеПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПочты(Команда)
	
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочтенныеПисьма = Новый Массив;
	НепрочтенныеПисьма = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Письмо);
			
			Если ДанныеСтроки <> Неопределено Тогда
				
				Если ДанныеСтроки.Прочтено Тогда
					ПрочтенныеПисьма.Добавить(Письмо);
				Иначе
					НепрочтенныеПисьма.Добавить(Письмо);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Если НепрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Письма помечаются как прочтенные. Пожалуйста подождите...'; en = 'Emails marked as read. Please wait ...'");
			Состояние(ТекстСостояния);
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(
			НепрочтенныеПисьма,
			Истина,
			Ложь,
			Ложь);
		
	Иначе
		
		Если ПрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'; en = 'Unmarking as read. Please wait...'");
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(
			ПрочтенныеПисьма,
			Ложь,
			Ложь,
			Ложь);
		
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Письма помечены как прочтенные (%1)'; en = 'Emails marked as read (%1)'"),
			НепрочтенныеПисьма.Количество()));
		
	ИначеЕсли ПрочтенныеПисьма.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сняты пометки прочтенности писем (%1)'; en = 'Emails unmarked as read (%1)'"),
			ПрочтенныеПисьма.Количество()));
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометитьКакПрочтенныеСервер(Письма, Пометка, ПолучитьСведенияОПапках, РежимМоиПапки)
	
	Результат = Новый Структура;
	
	УстановитьПрочтение(Письма, Пометка);
	
	СведенияОПапках = ПолучитьСведенияОПапках(
		ПолучитьСведенияОПапках,
		РежимМоиПапки);
	
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбластьЧтенияВнизу(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Внизу"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать"),
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер(ЗаполнятьДеревоПапок = Ложь)
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(НСтр("ru = 'Идет удаление писем в корзину. Пожалуйста подождите...'; en = 'Deleting emails in the trash. Please wait ...'"));
	КонецЕсли;
	
	РезультатОбработки = ПереместитьВКорзинуСервер(
		Письма,
		Ложь, 
		Ложь);
		
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(НеПеренесенныеПисьма[0], "Тема");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письмо ""%1"" не удалось удалить в корзину.
					|Возможно это письмо открыто вами или другим пользователем.';
					|en = 'The email ""%1"" could not be deleted to trash.
					|Perhaps this email opened by you or another user.'"),
				ТемаПисьма);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить несколько писем (%1) в корзину.
					|Возможно эти письма открыты вами или другим пользователем.';
					|en = 'Failed to delete multiple emails (%1) in the trash.
					|Perhaps these emails opened by you or another user.'"),
				НеПеренесеноПисем);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письма (%1) успешно удалены в корзину.'; en = 'Emails (%1) successfully deleted to the trash.'"),
				КоличествоПисем));
		Иначе
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письмо ""%1"" успешно удалено в корзину.'; en = 'The email ""%1"" was successfully removed in trash.'"),
				Элементы.Список.ТекущиеДанные.Тема));	
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьВКорзинуСервер(Письма, ПолучитьСведенияОПапках, РежимМоиПапки)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВКорзину(Письма);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	
	СведенияОПапках = ПолучитьСведенияОПапках(
		ПолучитьСведенияОПапках,
		РежимМоиПапки);
	
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	ВстроеннаяПочтаКлиент.СохранитьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстПисьма(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	ВстроеннаяПочтаКлиент.СохранитьТекстПисьма(ВыбранноеПисьмо, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПисьмо()
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ВыбранноеПисьмо) Тогда 
		Текст = НСтр("ru = 'Скопировано может быть только исходящее письмо.'; en = 'Only an outgoing email can be copied.'");
		ЗаголовокСообщения = НСтр("ru = 'Копирование письма'; en = 'Copy email'");
		ПоказатьПредупреждение(, Текст,, ЗаголовокСообщения);
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СкопироватьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифт(Команда)
	
	ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
	#Если Не ВебКлиент Тогда
		ДиалогВыбораШрифта.Шрифт = ШрифтОтображения;
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьОтображаемыйШрифтЗавершение", ЭтотОбъект);
	
	ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифтЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШрифтОтображенияУстановлен = Ложь;
		Если ШрифтОтображения <> ШрифтОтображенияПоУмолчанию Тогда
			ШрифтОтображения = ШрифтОтображенияПоУмолчанию;
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				Предпросмотр, ШрифтОтображения, Истина, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШрифтОтображения = Результат;
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	ШрифтОтображенияУстановлен = Истина;
	
	РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
		Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылку(Команда)
	
	ЭлементПолеHTMLДокумента = ТекущийЭлемент;
	Если ЭлементПолеHTMLДокумента <> Элементы.ПредпросмотрHTMLБезВложений
		И ЭлементПолеHTMLДокумента <> Элементы.ПредпросмотрHTMLСВложениями Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.КопироватьСсылку(ЭлементПолеHTMLДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ВыбранноеПисьмо = ТекущееПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	Письмо = Элементы.Список.ТекущаяСтрока;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Письмо = Неопределено;
	КонецЕсли;
	
	Если ТекущееПисьмо = Письмо Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = Письмо;
	
	Если ОбластьЧтенияВключена Тогда
		
		Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
			
			РезультатОбработки = ОбработатьАктивизациюСтроки(
				Письмо,
				УникальныйИдентификатор,
				ИспользоватьАвтоматическоеПрочтение,
				Ложь,
				Ложь,
				ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную);
			
			ОбновитьОбластьПредпросмотра(
				РезультатОбработки.HTMLПредставлениеПисьма,
				РезультатОбработки.Вложения);
			
		Иначе
			
			ОбновитьОбластьПредпросмотра("<html><body></body></html>");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьАктивизациюСтроки(
	Письмо,
	УникальныйИдентификаторФормы,
	ИспользоватьАвтоматическоеПрочтение,
	ПолучитьСведенияОПапках,
	РежимМоиПапки,
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную)
	
	Результат = Новый Структура;
	
	ДанныеДляОтображенияПредпросмотра = ПолучитьДанныеДляОтображенияПредпросмотра(
		Письмо,
		УникальныйИдентификаторФормы);
	
	Результат.Вставить("HTMLПредставлениеПисьма",
		ДанныеДляОтображенияПредпросмотра.HTMLПредставлениеПисьма);
	
	Результат.Вставить("Вложения", ДанныеДляОтображенияПредпросмотра.Вложения);
	
	Результат.Вставить("ОповеститьОПрочтении", Ложь);
	Если ИспользоватьАвтоматическоеПрочтение И Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		
		Результат.ОповеститьОПрочтении = УстановитьПрочтение(Письмо);
		
		Если Результат.ОповеститьОПрочтении Тогда
			
			СведенияОПапках = ПолучитьСведенияОПапках(
				ПолучитьСведенияОПапках,
				РежимМоиПапки);
			
			Результат.Вставить("СведенияОПапках", СведенияОПапках);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СкопироватьПисьмо();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если Не ЗначениеЗаполнено(ВыбранноеПисьмо) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.Флаг Тогда
		
		СтандартнаяОбработка = Ложь;
		ПереключитьФлаг(ВыбранноеПисьмо);
		Элементы.Список.Обновить();
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ВыбранноеПисьмо) Тогда
		
		Если ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма") Тогда
						
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.Ответить") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОтветитьВсем") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.Переслать") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПапках = УстановитьФлагиСервер(
		Письма,
		Флаг,
		Ложь,
		Ложь);
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
	Оповестить("ИзменилсяФлаг", Письма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьФлагиСервер(Письма, Флаг, ПолучитьСведенияОПапках, РежимМоиПапки)
	
	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектам(Письма, Флаг);
	
	СведенияОПапках = ПолучитьСведенияОПапках(
		ПолучитьСведенияОПапках,
		РежимМоиПапки);
	
	Возврат СведенияОПапках;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьФлаг(Письмо)
	
	СведенияОПапках = ПереключитьФлагСервер(
		Письмо,
		Ложь,
		Ложь);
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(Письмо);
	Оповестить("ИзменилсяФлаг", МассивПисем);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьФлагСервер(Письмо, ПолучитьСведенияОПапках, РежимМоиПапки)
	
	РаботаСФлагамиОбъектовСервер.ПереключитьФлагПисьма(Письмо);
	
	СведенияОПапках = ПолучитьСведенияОПапках(
		ПолучитьСведенияОПапках,
		РежимМоиПапки);
	
	Возврат СведенияОПапках;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ПАПОК

&НаСервереБезКонтекста
Функция ПолучитьСведенияОПапках(ПолучитьСведенияОПапках, РежимМоиПапки)
	
	Если ПолучитьСведенияОПапках Тогда
		
		Возврат ВстроеннаяПочтаСервер.ПолучитьСведенияОПапках(
			Пользователи.ТекущийПользователь(),
			РежимМоиПапки);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЧТЕННОСТЬЮ ПИСЕМ

&НаСервереБезКонтекста
Функция УстановитьПрочтение(Письмо, Прочтен = Истина)
	
	ПрочтениеУстановлено = РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письмо, Прочтен);
	
	Возврат ПрочтениеУстановлено; 
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛОЖЕНИЕМ ОБЛАСТИ ЧТЕНИЯ

&НаКлиенте
Процедура ИзменитьОтображениеОбластиЧтения(ВариантОтображенияОбластиЧтения, СохранитьНастройку)
	
	ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения, СохранитьНастройку);
	
	Если СохранитьНастройку Тогда
		НастройкиВстроеннойПочты = Новый Структура;
		НастройкиВстроеннойПочты.Вставить("ОтображениеОбластиЧтения", ОтображениеОбластиЧтения);
		Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения, СохранитьНастройку)
	
	Если СохранитьНастройку Тогда
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ОтображениеОбластиЧтения",
			ВариантОтображенияОбластиЧтения);
		
	КонецЕсли;
	
	Если ОтображениеОбластиЧтения <> ВариантОтображенияОбластиЧтения
		И (ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу
		Или ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа) Тогда
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ТекущееПисьмо) Тогда
			
			Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
				ТекущееПисьмо,
				УникальныйИдентификатор,
				Истина); // ВыводитьШапку
			
			РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
				Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
			
		Иначе
			
			Предпросмотр = "<html><body></body></html>";
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	ОтображениеОбластиЧтения = ВариантОтображенияОбластиЧтения;
	
	Если ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу Тогда
	
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.Вложения.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ОбластьЧтенияВнизу.Пометка = Истина;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.Вложения.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Истина;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Элементы.СтраницыПредпросмотр.Видимость = Ложь;
		Элементы.Вложения.Видимость = Ложь;
		Элементы.ОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Истина;
		ОбластьЧтенияВключена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СПИСОК ФАЙЛОВ В ОБЛАСТИ ПРЕДПРОСМОТРА

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ВстроеннаяПочтаКлиент.ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныйВложений = Элементы.Вложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныйВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныйВложений = 1 Тогда
			
			ФайлСсылка = Элементы.Вложения.ТекущиеДанные.Ссылка;
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе
			
			МассивФайлов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			КонецЦикла;
			Если МассивФайлов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивФайлов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПометкаУдаления Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
			ТекущиеДанные.Представление);
		
	Иначе
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
			ТекущиеДанные.Представление);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВложенияПередУдалениемПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	СведенияОФайлах = ИзменитьПометкуУдаленияФайлаПисьма(ТекущееПисьмо, ТекущиеДанные.Ссылка);
	
	ОбновитьФайлыВОбластиПредпросмотра(СведенияОФайлах);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Владелец", Неопределено);
	ПараметрОповещения.Вставить("Файл", ТекущиеДанные.Ссылка);
	ПараметрОповещения.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", Ложь);
	ПараметрОповещения.Вставить("ИдентификаторРодительскойФормы", УникальныйИдентификатор);
	ПараметрОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
	
	Оповестить("Запись_Файл", ПараметрОповещения, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаленияФайлаПисьма(Письмо, Файл)
	
	ФайлОбъект = Файл.ПолучитьОбъект();
	ФайлОбъект.Заблокировать();
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	
	СведенияОФайлах = ПолучитьСведенияОФайлахПисьма(Письмо);
	
	Возврат СведенияОФайлах;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьФайлыПисьма()
	
	Если Не ЗначениеЗаполнено(ТекущееПисьмо) Тогда
		ОбновитьФайлыВОбластиПредпросмотра();
		Возврат;
	КонецЕсли;
	
	// Сохранение текущей позиции в списке файлов
	ТекущийФайл = Неопределено;
	
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		
		Если ТекДанные <> Неопределено Тогда
			
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				
				ТекущийФайл = ТекДанные.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение списка файлов
	СведенияОФайлах = ПолучитьСведенияОФайлахПисьма(ТекущееПисьмо);
	ОбновитьФайлыВОбластиПредпросмотра(СведенияОФайлах);
	
	// Восстановление текущей позиции в списке файлов
	Если ЗначениеЗаполнено(ТекущийФайл) Тогда
		
		Для каждого Вложение Из Вложения Цикл
			
			Если Вложение.Ссылка = ТекущийФайл Тогда
				Элементы.Вложения.ТекущаяСтрока = Вложение.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено
		Или Элементы.Вложения.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
		
	Иначе
		
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = Истина;
		Элементы.РедактироватьВложение.Доступность = Истина;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ВстроеннаяПочтаКлиент.СохранитьВложенияКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(
		Обработчик,
		Элементы.Вложения.ТекущиеДанные.Ссылка, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыПисьма();
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
		
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПредпросмотра()
	
	Если Вложения.Количество() > 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаПредпросмотрСВложениями;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаПредпросмотрБезВложений;
	КонецЕсли;
	
	Если Элементы.СтраницыПредпросмотр.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

&НаКлиенте
Функция ПолучитьВыбранноеПисьмо(ВыводитьПредупреждение)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Элементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Письмо = Элементы.Список.ТекущиеДанные.Ссылка;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеПисьма(ВыводитьПредупреждение)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка) Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ЗначениеЗаполнено(ВыбранноеПисьмо)
		И Результат.Найти(ВыбранноеПисьмо) = Неопределено Тогда
		Результат.Добавить(ВыбранноеПисьмо);
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны письма.'; en = 'You have not selected any emails.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НастройкаПравилОбработки(Команда)
	
	ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.НастройкаПравилОбработки");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПравило(Команда)
	
	Если ТекущийЭлемент = Элементы.Список Тогда
		ДанныеДляСозданияПравила = ПолучитьДанныеДляСозданияПравила(ТекущееПисьмо);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ФормаЭлемента", ДанныеДляСозданияПравила);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСозданияПравила(Основание)
	
	Условия = Новый СписокЗначений;
	Действия = Новый СписокЗначений;
	ДляВходящих = ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание);
	ДляИсходящих = ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание);
	
	РаботаСПравиламиОбработкиПисем.СформироватьУсловияПоПисьму(
		Основание,
		Условия,
		ДляВходящих,
		ДляИсходящих);
	РаботаСПравиламиОбработкиПисем.СформироватьДействияПоПисьму(
		Основание,
		Действия,
		ДляВходящих,
		ДляИсходящих);
		
	Результат = Новый Структура;
	Результат.Вставить("Условия", Условия);
	Результат.Вставить("Действия", Действия);
	
	УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УчетнаяЗапись");
	
	Результат.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Результат.Вставить("ДляВходящихПисем", ДляВходящих);
	Результат.Вставить("ДляИсходящихПисем", ДляИсходящих);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОповещениеИзменилосьСодержаниеПисьма(Письмо = Неопределено)
	
	ПолучитьДанныеДляПредпросмотра = ЗначениеЗаполнено(Письмо)
		И ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо)
		И Письмо = ТекущееПисьмо;
	
	Если Не ПолучитьДанныеДляПредпросмотра Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработки = ОбработатьОповещениеИзменилосьСодержаниеПисьмаСервер(
		Ложь,
		Ложь,
		ПолучитьДанныеДляПредпросмотра,
		Письмо,
		УникальныйИдентификатор);
	
	Элементы.Список.Обновить();
	
	ОбновитьОбластьПредпросмотра(
		РезультатОбработки.HTMLПредставлениеПисьма,
		РезультатОбработки.Вложения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьОповещениеИзменилосьСодержаниеПисьмаСервер(
	ПолучитьСведенияОПапках,
	РежимМоиПапки,
	ПолучитьДанныеДляПредпросмотра,
	Письмо,
	УникальныйИдентификаторФормы)
	
	Результат = Новый Структура;
	
	СведенияОПапках = ПолучитьСведенияОПапках(
		ПолучитьСведенияОПапках,
		РежимМоиПапки);
	
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Если ПолучитьДанныеДляПредпросмотра Тогда
		
		ДанныеДляОтображенияПредпросмотра = ПолучитьДанныеДляОтображенияПредпросмотра(
			Письмо,
			УникальныйИдентификаторФормы);
		
		Результат.Вставить("HTMLПредставлениеПисьма",
			ДанныеДляОтображенияПредпросмотра.HTMLПредставлениеПисьма);
		
		Результат.Вставить("Вложения", ДанныеДляОтображенияПредпросмотра.Вложения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОбластьПредпросмотра(HTMLПредставлениеПисьма, ДанныеФайлов = Неопределено)
	
	Если Предпросмотр <> HTMLПредставлениеПисьма Тогда
		Предпросмотр = HTMLПредставлениеПисьма;
		РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
			Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
	КонецЕсли;
	
	ОбновитьФайлыВОбластиПредпросмотра(ДанныеФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлыВОбластиПредпросмотра(ДанныеФайлов = Неопределено)
	
	Вложения.Очистить();
	Если ТипЗнч(ДанныеФайлов) = Тип("Массив") Тогда
		Для каждого ДанныеФайла Из ДанныеФайлов Цикл
			ЗаполнитьЗначенияСвойств(Вложения.Добавить(), ДанныеФайла);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьСтраницуПредпросмотра();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОтображенияПредпросмотра(
	Письмо,
	УникальныйИдентификаторФормы)
	
	Результат = Новый Структура;
	
	HTMLПредставлениеПисьма = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		Письмо,
		УникальныйИдентификаторФормы,
		Истина); // ВыводитьШапку
	
	Результат.Вставить("HTMLПредставлениеПисьма", HTMLПредставлениеПисьма);
	
	Результат.Вставить("Вложения", ПолучитьСведенияОФайлахПисьма(Письмо));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияОФайлахПисьма(Письмо)
	
	СведенияОФайлах = Новый Массив;
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
	
	Для каждого Файл Из ФайлыПисьма Цикл
		
		СведенияОФайле = Новый Структура(
			"ИмяФайла,
			|ИндексКартинки,
			|ПометкаУдаления,
			|Представление,
			|Размер,
			|РазмерПредставление,
			|Редактирует,
			|РедактируетТекущийПользователь,
			|Ссылка");
		
		ЗаполнитьЗначенияСвойств(СведенияОФайле, Файл);
		СведенияОФайлах.Добавить(СведенияОФайле);
		
	КонецЦикла;
	
	Возврат СведенияОФайлах;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуУсловий(ПапкаПоиска = Неопределено)
	
	УсловияПоискаПисем.Очистить();
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийПоискаПисем Цикл
		
		Если ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ВыбратьПервые
			Или ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.СпособОбъединенияУсловий 
			Или ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ТипПисьма
			Или ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.Удалено
			Или ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи
			Или ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ХранитсяВПапке Тогда	
			
			Продолжить;
			
		КонецЕсли;	
		
		НоваяСтрока = УсловияПоискаПисем.Добавить();
		НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
		НоваяСтрока.ПредставлениеЗначенияУсловия = "";
		НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
		
	КонецЦикла;
	
	Если ПапкаПоиска <> Неопределено Тогда
		ПапкаПоискаОбъект = ПапкаПоиска.ПолучитьОбъект();
		НастройкиПапки = ПапкаПоискаОбъект.НастройкаОтбора.Получить();
		Для Каждого Строка Из УсловияПоискаПисем Цикл
			Для Каждого СтрокаТекущейПапки Из НастройкиПапки Цикл
				Если Строка.ВидУсловия = СтрокаТекущейПапки.ВидУсловия Тогда
					ЗаполнитьЗначенияСвойств(Строка, СтрокаТекущейПапки);
					Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ТипПисьма 
						И (Строка.ЗначенияУсловия.Количество() = 0
						Или ТипЗнч(Строка.ЗначенияУсловия[0].Значение) = Тип("Булево")) Тогда
						Строка.ЗначенияУсловия.Очистить();
						Строка.ЗначенияУсловия.Добавить(0);
					КонецЕсли;
				
					Строка.ПредставлениеЗначенияУсловия = 
						ПолучитьПредставлениеСпискаЗначенийДляУсловия(
							Строка.ВидУсловия, 
							Строка.ЗначенияУсловия);
					Прервать;		
				КонецЕсли;			
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеЗаполненоОтКогоКому = Ложь;
	ЗначениеЗаполненоПерепискаС = Ложь;
	Для Каждого Строка Из УсловияПоискаПисем Цикл
		Если ЗначениеЗаполнено(Строка.ПредставлениеЗначенияУсловия) Тогда
			Если Строка.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
				ЗначениеЗаполненоПерепискаС = Истина;
			КонецЕсли;
			Если Строка.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
				ИЛИ Строка.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") Тогда
				ЗначениеЗаполненоОтКогоКому = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьПервые = 100;
	СоединятьУсловия = Перечисления.ТипыЛогическойСвязи.И;
	ТипПисем = 0; // Входящие и исходящие
	Удалено = 0; // Нет
	УчетныеЗаписи.Добавить("МоиУчетныеЗаписи", "Мои учетные записи");
	
	ВсеМоиПапкиПользователя = ВстроеннаяПочтаСервер.ПолучитьВсеПапкиПисемПользователя(ПользователиКлиентСервер.ТекущийПользователь());
	Если ВсеМоиПапкиПользователя.Количество() > 0 Тогда
		Папки.Добавить("МоиПапки", "Мои папки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоискаПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ИмеетВложения")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Удалено")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Прочтено") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ЕстьОтвет")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Переслано") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияУсловия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияУсловия[0].Значение;
		КонецЕсли;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		Если ТекущееЗначение = Истина Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Ложь);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Нет'; en = 'No'");
		ИначеЕсли ТекущееЗначение = Ложь Тогда
		ИначеЕсли ТекущееЗначение = Неопределено Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");	
		КонецЕсли;
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТипПисьма") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияУсловия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияУсловия[0].Значение;
		КонецЕсли;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		Если ТекущееЗначение = 2 Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(0);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Входящие и исходящие'; en = 'Incoming and outgoing'");	
		ИначеЕсли ТекущееЗначение = 0 Тогда	
			ТекущиеДанные.ЗначенияУсловия.Добавить(1);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Только входящие'; en = 'Incoming only'");
		ИначеЕсли ТекущееЗначение = 1 Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(2);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Только исходящие'; en = 'Only outgoing'");
		КонецЕсли;
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.СпособОбъединенияУсловий") Тогда 	
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияУсловия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияУсловия[0].Значение;
		КонецЕсли;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		Если ТекущееЗначение = ПредопределенноеЗначение("Перечисление.ТипыЛогическойСвязи.И") Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЛогическойСвязи.Или"));
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'По ""Или""'; en = 'With ""OR""'");
		Иначе
			ТекущиеДанные.ЗначенияУсловия.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЛогическойСвязи.И"));
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'По ""И""'; en = 'With ""AND""'");	
		КонецЕсли;
		
	Иначе
		
		ЗначенияУсловияНачалоВыбора(Неопределено, Неопределено, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоискаПисемПриАктивизацииСтроки(Элемент)
	
	УстановитьРежимРедактированияЗначенияУсловия();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоискаПисемПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРежимРедактированияЗначенияУсловия();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРедактированияЗначенияУсловия()
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Элементы.ЗначенияУсловия.Доступность = Истина;
	Элементы.ЗначенияУсловия.РедактированиеТекста = Ложь;
	Элементы.ЗначенияУсловия.КнопкаВыбора = Ложь;
	Элементы.ЗначенияУсловия.КнопкаОчистки = Истина;
	Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;	
	Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Вход;
	Элементы.ЗначенияУсловия.Маска = "";
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.КомментарийСодержитСлова") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ВыбратьПервые")Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.РедактированиеТекста = Истина;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Истина;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ВыбратьПервые") Тогда
			Элементы.ЗначенияУсловия.Маска = "9;99;999;9999;99999;999999;9999999;99999999;999999999";	
		КонецЕсли;
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТекстСодержитУказанныеСлова") Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.РедактированиеТекста = Истина;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Ложь;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ЗаПериод") Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Истина;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		Элементы.УсловияПоискаПисем.ЗакончитьРедактированиеСтроки(Истина);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтмеченоФлагом")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ХранитсяВПапке")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКПроекту") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ИмеетВажность") Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Истина;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	Иначе
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияУсловия);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.КомментарийСодержитСлова") Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ТекущиеДанные.ПредставлениеЗначенияУсловия, 
			";");
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого Подстрока Из МассивПодстрок Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(Подстрока);	
		КонецЦикла;
		
		ЗначениеЗаполненоОтКогоКому = Ложь;
		ЗначениеЗаполненоПерепискаС = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияУсловия) Тогда
			Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
				ЗначениеЗаполненоПерепискаС = Истина;
			КонецЕсли;
			Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
				ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") Тогда
				ЗначениеЗаполненоОтКогоКому = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ВыбратьПервые") Тогда
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияУсловия) Тогда 
			ТекущиеДанные.ЗначенияУсловия.Добавить(Число(СтрЗаменить(ТекущиеДанные.ПредставлениеЗначенияУсловия, " ", "")));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаТекста(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаАдресов(РезультатФормы, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТипЗнч(РезультатФормы) = Тип("Структура") Тогда
		ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеЗаполненоОтКогоКому = Ложь;
	ЗначениеЗаполненоПерепискаС = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияУсловия) Тогда
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
			ЗначениеЗаполненоПерепискаС = Истина;
		КонецЕсли;
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
			ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") Тогда
			ЗначениеЗаполненоОтКогоКому = Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаДат(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПеречисления(РезультатФормы, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если РезультатФормы <> Неопределено Тогда
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ЗначенияУсловия.ЗагрузитьЗначения(РезультатФормы);
	КонецЕсли;
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, ТекущиеДанные.ЗначенияУсловия);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПапокИУчетныхЗаписей(РезультатФормы, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если РезультатФормы <> Неопределено Тогда
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ЗначенияУсловия.ЗагрузитьЗначения(РезультатФормы);
	КонецЕсли;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, ТекущиеДанные.ЗначенияУсловия);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПроектов(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.КомментарийСодержитСлова") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова") Тогда
			ПараметрыФормы.Вставить("Поле", НСтр("ru = 'Тема'; en = 'Subject'"));
		Иначе
			ПараметрыФормы.Вставить("Поле", НСтр("ru = 'Комментарий'; en = 'Comment'"));
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаТекста",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ПоискТекста",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
		
		ПараметрыФормы = Новый Структура;
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт") Тогда
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор отправителей письма'; en = 'Selection of email senders'"));
		ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") Тогда
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор получателей письма'; en = 'Selection of email recipients'"));			
		КонецЕсли;
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ПараметрыФормы.Вставить(
			"СписокПредставлений", 
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущиеДанные.ПредставлениеЗначенияУсловия, ";"));
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаАдресов",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ВводАдресов", 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ЗаПериод") Тогда
		
		Если ТекущиеДанные.ЗначенияУсловия.Количество() = 0 Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
		Конецесли;
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаДат",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ПоискДат", 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
				
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ИмеетВажность") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтмеченоФлагом") Тогда
		
		ПараметрыФормы = Новый Структура;
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ИмеетВажность") Тогда
			ПараметрыФормы.Вставить("ИмяПеречисления", "ВажностьПисем");
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор важности писем'; en = 'Selection of email importance'"));
		ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтмеченоФлагом") Тогда
			ПараметрыФормы.Вставить("ИмяПеречисления", "ФлагиОбъектов");
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор флагов писем'; en = 'Selection of email flags'"));
		КонецЕсли;
		ПараметрыФормы.Вставить("ОтмеченныеЗначения", ТекущиеДанные.ЗначенияУсловия.ВыгрузитьЗначения());
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПеречисления",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ПоискПоПеречислению",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ХранитсяВПапке") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтмеченныеЗначения", ТекущиеДанные.ЗначенияУсловия.ВыгрузитьЗначения());
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПапокИУчетныхЗаписей",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ПодборПапок",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтмеченныеЗначения", ТекущиеДанные.ЗначенияУсловия.ВыгрузитьЗначения());
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПапокИУчетныхЗаписей",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ПодборУчетныхЗаписей",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКПроекту") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ПараметрыФормы.Вставить("ТипСправочника", "Проекты");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор проектов'; en = 'Selection of projects'"));
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПроектов",
			ЭтотОбъект);
		ОткрытьФорму(
			"Обработка.ПоискПисемПоРеквизитам.Форма.ПоискПоСправочнику", 
			ПараметрыФормы, 
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийДляУсловия(ВидУсловия, СписокЗначений)
	
	Представление = "";
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат Представление;
	КонецЕсли;

	Если ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ИмеетВажность") 
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтмеченоФлагом")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ХранитсяВПапке")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКПроекту") 
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.КомментарийСодержитСлова") Тогда
		
		Для Каждого ЭлементСписка Из СписокЗначений Цикл
			СтрокаДляДобавления = Строка(ЭлементСписка.Значение);
			Если ЭлементСписка.Значение = "МоиПапки" Тогда
				СтрокаДляДобавления = НСтр("ru = 'Мои папки'; en = 'My folders'");
			ИначеЕсли ЭлементСписка.Значение = "МоиУчетныеЗаписи" Тогда
				СтрокаДляДобавления = НСтр("ru = 'Мои учетные записи'; en = 'My accounts'");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Представление) Тогда	
				Представление = СтрокаДляДобавления;
			Иначе
				Представление = Представление + ";" + СтрокаДляДобавления;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ЗаПериод") Тогда	
		
		Если СписокЗначений.Количество() = 2 Тогда
			ДатаПосле = СписокЗначений[0].Значение;
			ДатаДо = СписокЗначений[1].Значение;
			
			Если ЗначениеЗаполнено(ДатаПосле) Тогда
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'С %1'; en = 'From %1'"),
				Формат(ДатаПосле, "ДЛФ=D"));
			Конецесли;
			
			Если ЗначениеЗаполнено(ДатаДо) Тогда
				Если ЗначениеЗаполнено(Представление) Тогда
					Представление = Представление + 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = ' и по %1'; en = ' and to %1'"),
							Формат(ДатаДо, "ДЛФ=D"));
				Иначе
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По %1'; en = 'To %1'"),
						Формат(ДатаДо, "ДЛФ=D"));	
				КонецЕсли;
			Конецесли;
		КонецЕсли;
	ИначеЕсли ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.СпособОбъединенияУсловий") Тогда
		Представление = "";
		Если СписокЗначений.Количество() > 0 Тогда
			Если СписокЗначений[0].Значение = ПредопределенноеЗначение("Перечисление.ТипыЛогическойСвязи.И") Тогда
				Представление = НСтр("ru = 'По ""И""'; en = 'With ""AND""'");
			ИначеЕсли СписокЗначений[0].Значение = ПредопределенноеЗначение("Перечисление.ТипыЛогическойСвязи.Или") Тогда
				Представление = НСтр("ru = 'По ""Или""'; en = 'With ""OR""'");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТипПисьма") Тогда
		Представление = "";
		Если СписокЗначений.Количество() > 0 Тогда
			Если СписокЗначений[0].Значение = 0 Тогда
				Представление = НСтр("ru = 'Входящие и исходящие'; en = 'Incoming and outgoing'");
			ИначеЕсли СписокЗначений[0].Значение = 1 Тогда
				Представление = НСтр("ru = 'Только входящие'; en = 'Incoming only'");
			ИначеЕсли СписокЗначений[0].Значение = 2 Тогда	
				Представление = НСтр("ru = 'Только исходящие'; en = 'Only outgoing'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Представление = Строка(СписокЗначений[0].Значение);
	КонецЕсли;

	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьФиксированныеПоля(УсловияПоискаПисем, ФиксированныеПоля)
	
	НоваяСтрока = УсловияПоискаПисем.Добавить();
	НоваяСтрока.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ВыбратьПервые;
	НоваяСтрока.ПредставлениеЗначенияУсловия = "";
	НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
	НоваяСтрока.ЗначенияУсловия.Добавить(ФиксированныеПоля.ПоказатьПервые);
	
	НоваяСтрока = УсловияПоискаПисем.Добавить();
	НоваяСтрока.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.СпособОбъединенияУсловий;
	НоваяСтрока.ПредставлениеЗначенияУсловия = "";
	НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
	НоваяСтрока.ЗначенияУсловия.Добавить(ФиксированныеПоля.СоединятьУсловия);
	
	НоваяСтрока = УсловияПоискаПисем.Добавить();
	НоваяСтрока.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ТипПисьма;
	НоваяСтрока.ПредставлениеЗначенияУсловия = "";
	НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
	НоваяСтрока.ЗначенияУсловия.Добавить(ФиксированныеПоля.ТипПисем);
	
	НоваяСтрока = УсловияПоискаПисем.Добавить();
	НоваяСтрока.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.Удалено;
	НоваяСтрока.ПредставлениеЗначенияУсловия = "";
	НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
	Если ФиксированныеПоля.Удалено <> Неопределено Тогда
		НоваяСтрока.ЗначенияУсловия.Добавить(ФиксированныеПоля.Удалено);
	КонецЕсли;	
	
	НоваяСтрока = УсловияПоискаПисем.Добавить();
	НоваяСтрока.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ХранитсяВПапке;
	НоваяСтрока.ПредставлениеЗначенияУсловия = "";
	НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
	Для Каждого Папка Из ФиксированныеПоля.Папки Цикл
		НоваяСтрока.ЗначенияУсловия.Добавить(Папка.Значение);
	КонецЦикла;
	
	НоваяСтрока = УсловияПоискаПисем.Добавить();
	НоваяСтрока.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи;
	НоваяСтрока.ПредставлениеЗначенияУсловия = "";
	НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
	Для Каждого УчетнаяЗапись Из ФиксированныеПоля.УчетныеЗаписи Цикл
		НоваяСтрока.ЗначенияУсловия.Добавить(УчетнаяЗапись.Значение);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВыполнитьПоискСервер(УникальныйИдентификатор, Знач УсловияПоискаПисемРеквизит, 
	Знач ФиксированныеПоля, ИскатьВсе = Ложь)
	
	УсловияПоискаПисем = Новый ТаблицаЗначений;
	УсловияПоискаПисем.Колонки.Добавить("ВидУсловия",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУсловийПоискаПисем"));
	УсловияПоискаПисем.Колонки.Добавить("ПредставлениеЗначенияУсловия",    Новый ОписаниеТипов("Строка"));
	УсловияПоискаПисем.Колонки.Добавить("ЗначенияУсловия",           Новый ОписаниеТипов("СписокЗначений"));
	
	Для Каждого Строка Из УсловияПоискаПисемРеквизит Цикл
		НоваяСтрока = УсловияПоискаПисем.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	
	ЗаполнитьФиксированныеПоля(УсловияПоискаПисем, ФиксированныеПоля);
	
	// Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаПоиска = ТекущаяДатаСеанса();
	РезультатПоиска = ПоискПисемПоРеквизитам.ВыполнитьПоиск(УсловияПоискаПисем, ИскатьВсе);
	Массив = РезультатПоиска.МассивСсылок;
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Для Каждого ЭлементМассива Из Массив Цикл
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Ссылка = ЭлементМассива;
		НоваяЗапись.ИдентификаторПоиска = УникальныйИдентификатор;
		НоваяЗапись.ДатаПоиска = ДатаПоиска;
	КонецЦикла;	
	Набор.Записать(Истина);
	
	КоличествоНайденногоКВозврату = Массив.Количество();
	НеобходимоВывестиСсылкуНаПоискВсего = Ложь;
	Если РезультатПоиска.КоличествоНайденного > РезультатПоиска.НеобходимоБылоНайти Тогда
		КоличествоНайденногоКВозврату = РезультатПоиска.НеобходимоБылоНайти;
		НеобходимоВывестиСсылкуНаПоискВсего = Истина;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Количество", КоличествоНайденногоКВозврату);
	СтруктураВозврата.Вставить("ПоказатьСсылкуНайтиВсе", НеобходимоВывестиСсылкуНаПоискВсего);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗначенияУсловияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	ЗначениеЗаполненоОтКогоКому = Ложь;
	ЗначениеЗаполненоПерепискаС = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияУсловия) Тогда
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
			ЗначениеЗаполненоПерепискаС = Истина;
		КонецЕсли;
		Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
			ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") Тогда
			ЗначениеЗаполненоОтКогоКому = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт") 
		ИЛИ ТекущиеДанные.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому")
		ИЛИ ТекущиеДанные.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Контакт) Тогда
				ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение.Контакт);
			Иначе
				ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение.Адресат);
			КонецЕсли;
			ТекущиеДанные.ПредставлениеЗначенияУсловия = ВыбранноеЗначение.Представление;
				
		КонецЕсли;
		
		ЗначениеЗаполненоОтКогоКому = Ложь;
		ЗначениеЗаполненоПерепискаС = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияУсловия) Тогда
			Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда
				ЗначениеЗаполненоПерепискаС = Истина;
			КонецЕсли;
			Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
				ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому") Тогда
				ЗначениеЗаполненоОтКогоКому = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.УсловияПоискаПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	Если ТекущиеДанные.ВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому")
		ИЛИ ТекущиеДанные.ВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПерепискаС") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, 
			ПользователиКлиентСервер.ТекущийПользователь(), 
			ЭтоВебКлиент);
		ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);		
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьПапкуПоиска(ПапкаПоиска, ФиксированныеПоля)
	
	ТаблицаУсловий = РеквизитФормыВЗначение("УсловияПоискаПисем");
	ЗаполнитьФиксированныеПоля(ТаблицаУсловий, ФиксированныеПоля);
	
	ПапкаПоискаОбъект = ПапкаПоиска.ПолучитьОбъект();
	ЭтоНоваяПапкаПоиска = ПапкаПоискаОбъект.НастройкаОтбора.Получить() = Неопределено;
	ПапкаПоискаОбъект.НастройкаОтбора = Новый ХранилищеЗначения(ТаблицаУсловий);
	ПапкаПоискаОбъект.Записать();

	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Поиск писем. Папка поиска ""%1"".'; en = 'Email search. Search folder ""%1"".'"),
		Строка(ПапкаПоиска));
		
	Возврат ЭтоНоваяПапкаПоиска;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПапкуПоискаКоманда(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПапкуПоискаКомандаПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиПоиска.ФормаВыбора",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПапкуПоискаКомандаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда	
		ОткрытьПапкуПоиска(Результат);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьПапкуПоиска(ПапкаПоиска)
	
	ЗаполнитьТаблицуУсловий(ПапкаПоиска);	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Поиск писем. Папка поиска ""%1"".'; en = 'Email search. Search folder ""%1"".'"),
		Строка(ПапкаПоиска));
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьУсловияПоиска()
	
	Папки.Очистить();
	УчетныеЗаписи.Очистить();
	
	ЗаполнитьТаблицуУсловий();
	ТекущаяПапкаПоиска = ПредопределенноеЗначение("Справочник.ПапкиПоиска.ПустаяСсылка");	
	Заголовок = НСтр("ru = 'Поиск писем'; en = 'Email search'");
	
КонецПроцедуры

&НаКлиенте
Процедура Искать(Команда)
	
	ВыполнитьПоискКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискКлиент(ИскатьВсе = Ложь)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ИскатьВсе", ИскатьВсе);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьПоискКлиентПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	Если Не ПоискПисемПоРеквизитамКлиент.ПроверитьЗаполнениеОбязательныхУсловийДляПапкиПоиска_Новая(
			УчетныеЗаписи, Папки) Тогда
		Текст = НСтр("ru = 'Поиск может занять продолжительное время, так как не указаны папка и учетная запись.
			|Начать поиск по текущим условиям?';
			|en = 'The search can take a long time because the folder and user account are not specified .
			|Start your search on current conditions?'");
		Заголовок = НСтр("ru = 'Поиск писем'; en = 'Email search'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, Заголовок);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискКлиентПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 			
		Для Каждого Строка Из УсловияПоискаПисем Цикл
			Индекс = УсловияПоискаПисем.Индекс(Строка);
			Если Строка.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ХранитсяВПапке") Тогда
				Элементы.УсловияПоискаПисем.ТекущаяСтрока = Индекс;
				Элементы.УсловияПоискаПисем.ИзменитьСтроку();
				Возврат;
			КонецЕсли;	
		КонецЦикла;
		Возврат;
	КонецЕсли;	
	
	ФиксированныеПоля = Новый Структура();
	ФиксированныеПоля.Вставить("ПоказатьПервые", ПоказатьПервые);
	ФиксированныеПоля.Вставить("СоединятьУсловия", СоединятьУсловия);
	ФиксированныеПоля.Вставить("ТипПисем", ТипПисем);
	ФиксированныеПоля.Вставить("УчетныеЗаписи", УчетныеЗаписи);
	ФиксированныеПоля.Вставить("Папки", Папки);
	
	УдаленоЗначение = Неопределено;
	Если Удалено = 0 Тогда
		УдаленоЗначение = Ложь;  
	ИначеЕсли Удалено = 1 Тогда
		УдаленоЗначение = Истина;  
	КонецЕсли;	
	ФиксированныеПоля.Вставить("Удалено", УдаленоЗначение);
	
	ИскатьВсе = Параметры.ИскатьВсе;
	Состояние(НСтр("ru = 'Выполняется поиск писем. Пожалуйста, подождите...'; en = 'Searches for emails. Please wait ...'"));
	
	РезультатПоиска = ВыполнитьПоискСервер(УникальныйИдентификатор, УсловияПоискаПисем, ФиксированныеПоля, ИскатьВсе);
	КоличествоПисем = РезультатПоиска.Количество;
	Если КоличествоПисем = 0 Тогда
		Текст = НСтр("ru = 'Ничего не найдено. Уточните условия поиска и повторите поиск.'; en = 'Nothing found. Refine your search criteria and search again.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	Если РезультатПоиска.ПоказатьСсылкуНайтиВсе Тогда
		Элементы.ГруппаНайтиВсе.ТекущаяСтраница = Элементы.ГруппаСсылкаЕсть;
		ПодписьНайденоПисем = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(                                          
				НСтр("ru = 'Показано %1 %2.'; en = '%1 %2 is shown.'"),
				Формат(РезультатПоиска.Количество, "ЧН=0; ЧГ="),
				ДелопроизводствоКлиентСервер.ПолучитьПодписьПисем(РезультатПоиска.Количество));
	Иначе
		Элементы.ГруппаНайтиВсе.ТекущаяСтраница = Элементы.ГруппаСсылкиНет;
		ПодписьНайденоПисем = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(                                          
				НСтр("ru = 'Найдено %1 %2.'; en = 'Found %1 %2.'"),
				Формат(РезультатПоиска.Количество, "ЧН=0; ЧГ="),
				ДелопроизводствоКлиентСервер.ПолучитьПодписьПисем(РезультатПоиска.Количество));
	КонецЕсли;
	
	Элементы.СтраницаПоиск.Видимость = Ложь;
	Элементы.СтраницаРезультаты.Видимость = Истина;
	
	Элементы.КУсловиям.КнопкаПоУмолчанию = Истина;
	Элементы.ГруппаПоискИРезультаты.ТекущаяСтраница = Элементы.СтраницаРезультаты;
	ТекущийЭлемент = Элементы.Список;	
	Состояние();
	Элементы.Список.Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура КУсловиям(Команда)
	
	КУсловиямНаСервере();
	Элементы.ГруппаПоискИРезультаты.ТекущаяСтраница = Элементы.СтраницаПоиск;
	ТекущийЭлемент = Элементы.УсловияПоискаПисем;
	
КонецПроцедуры

&НаСервере
Процедура КУсловиямНаСервере()
	
	// Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);
	
	Элементы.Искать.КнопкаПоУмолчанию = Истина;
	
	Элементы.СтраницаПоиск.Видимость = Истина;
	Элементы.СтраницаРезультаты.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииСервер(УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(УникальныйИдентификатор)
	
	// Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНайтиВсеНажатие(Элемент)
	
	ВыполнитьПоискКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьУсловияПоиска(Команда)
	
	ОчиститьУсловияПоиска();
	Для Каждого Строка Из УсловияПоискаПисем Цикл
		Строка.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(
				Строка.ВидУсловия, Строка.ЗначенияУсловия);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакПапкуПоиска(Команда)
	
	Если Не ПоискПисемПоРеквизитамКлиент.ПроверитьЗаполнениеОбязательныхУсловийДляПапкиПоиска_Новая(
			УчетныеЗаписи, Папки) Тогда
			
		Текст = НСтр("ru = 'Для сохранения папки поиска необходимо заполнить условие ""Папка"" или ""Учетная запись"".'; en = 'In order to save the search folder, you must fill in the ""Folder"" or ""Account"" condition.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "УчетныеЗаписи");
		Возврат;	
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяПапкаПоиска", ТекущаяПапкаПоиска);
	ПараметрыФормы.Вставить("ВыборПапкиДляСохранения", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьКакПапкуПоискаПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиПоиска.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакПапкуПоискаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФиксированныеПоля = Новый Структура();
	ФиксированныеПоля.Вставить("ПоказатьПервые", ПоказатьПервые);
	ФиксированныеПоля.Вставить("СоединятьУсловия", СоединятьУсловия);
	ФиксированныеПоля.Вставить("ТипПисем", ТипПисем);
	ФиксированныеПоля.Вставить("УчетныеЗаписи", УчетныеЗаписи);
	ФиксированныеПоля.Вставить("Папки", Папки);
	
	УдаленоЗначение = Неопределено;
	Если Удалено = 0 Тогда
		УдаленоЗначение = Ложь;  
	ИначеЕсли Удалено = 1 Тогда
		УдаленоЗначение = Истина;  
	КонецЕсли;	
	ФиксированныеПоля.Вставить("Удалено", УдаленоЗначение);
	
	ЭтоНоваяПапкаПоиска = СохранитьПапкуПоиска(Результат, ФиксированныеПоля); 
	Если ЭтоНоваяПапкаПоиска Тогда
		Оповестить("СозданиеПапкиПоиска", Результат);
	Иначе
		Оповестить("ЗаписьПапкиПоиска", Результат);		
	КонецЕсли;
	Состояние(НСтр("ru = 'Папка поиска успешно записана.'; en = 'Search folder successfully saved.'"));
	ТекущаяПапкаПоиска = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	ИскатьВсе = Элементы.ГруппаНайтиВсе.ТекущаяСтраница = Элементы.ГруппаСсылкиНет;
	ВыполнитьПоискКлиент(ИскатьВсе);
	
КонецПроцедуры


&НаКлиенте
Процедура ПапкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтмеченныеЗначения", Папки.ВыгрузитьЗначения());
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПапок",
		ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.ПоискПисемПоРеквизитам.Форма.ПодборПапок",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаПапок(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы <> Неопределено Тогда
		
		Папки.Очистить();
		
		Для Каждого Значение Из РезультатФормы Цикл
			
			Представление = Строка(Значение);
			
			Если Значение = "МоиПапки" Тогда
				Представление = НСтр("ru = 'Мои папки'; en = 'My folders'");
			КонецЕсли;
			
			Папки.Добавить(Значение, Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтмеченныеЗначения", УчетныеЗаписи.ВыгрузитьЗначения());
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаУчетныхЗаписей",
		ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.ПоискПисемПоРеквизитам.Форма.ПодборУчетныхЗаписей",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаУчетныхЗаписей(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы <> Неопределено Тогда
		
		УчетныеЗаписи.Очистить();
		
		Для Каждого Значение Из РезультатФормы Цикл
			
			Представление = Строка(Значение);
			
			Если Значение = "МоиУчетныеЗаписи" Тогда
				Представление = НСтр("ru = 'Мои учетные записи'; en = 'My accounts'");
			КонецЕсли;
			
			УчетныеЗаписи.Добавить(Значение, Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоединятьУсловияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(СоединятьУсловия) Тогда
		СоединятьУсловия = ПредопределенноеЗначение("Перечисление.ТипыЛогическойСвязи.И");
	КонецЕсли;	
	
КонецПроцедуры


