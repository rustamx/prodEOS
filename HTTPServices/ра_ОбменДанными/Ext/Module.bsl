
#Область ОбработчикиМетодовHTTP

Функция ВызовМетодаGETЗапрос(Запрос)
	
	Возврат ПолучитьОтветHTTPЗапроса(Запрос, "GET");
	
КонецФункции

Функция ВызовМетодаPUTЗапрос(Запрос)
	
	Возврат ПолучитьОтветHTTPЗапроса(Запрос, "PUT");
	
КонецФункции

Функция ВызовМетодаPOSTЗапрос(Запрос)
	
	Возврат ПолучитьОтветHTTPЗапроса(Запрос, "POST");
	
КонецФункции

Функция ВызовМетодаDELETEЗапрос(Запрос)
	
	Возврат ПолучитьОтветHTTPЗапроса(Запрос, "DELETE");
	
КонецФункции

Функция ПолучитьОтветHTTPЗапроса(ЗапросHTTP, ТипЗапроса)
	
	Попытка
		СтруктураДанных = Новый Структура("code,value,exception,detailed_exception,messages", "200", "", "", "", Новый Массив);
		
		ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
		
		Если ТипЗапроса = "GET" Тогда
			
			Если ПереданоИмяМетодаДляПолученияДанныхБД(ИмяМетода) Тогда
				
				ПолучитьМассивДанныхБД(СтруктураДанных, ЗапросHTTP, ИмяМетода);
				
			ИначеЕсли ИмяМетода = "get_form" Тогда
				
				ПолучитьСтруктуруДанныхGetForm(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "get_files_list" Тогда
				
				ПолучитьМассивДанныхСписокФайлов(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "get_normative_documents" Тогда
				
				ПолучитьМассивДанныхНормативнаяДокументация(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "get_file" Тогда
				
				ПолучитьСтруктуруДанныхДляФайлаGET(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "copy_object" Тогда
				
				ПолучитьМассивДанныхCopyObject(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "GetPrintForm" Тогда
				
				ПолучитьСтруктуруДанныхДляФайлаPDF(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "GetReportOptions" Тогда
				
				ПолучитьВариантыОтчетов(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "GetUpdateLog" Тогда
				
				ПолучитьДанныеЛогФайла(СтруктураДанных, ЗапросHTTP);
				
			Иначе
				
				ВызватьИсключение "Unknown method";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗапроса = "PUT" Тогда
			
			Если ПереданоИмяМетодаДляПолученияДанныхБД(ИмяМетода) Тогда
				
				ИзменитьСуществующийОбъектБД(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли СтрНайти(ИмяМетода, "TaskExecute") > 0 Тогда
				
				ВыполнитьЗадачуИсполнителя(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли СтрНайти(ИмяМетода, "GenerateReport") > 0 Тогда
				
				СформироватьВариантОтчета(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли СтрНайти(ИмяМетода, "UpdateContactInformation") > 0 Тогда
				
				ОбновитьКонтактнуюИнформацию(СтруктураДанных, ЗапросHTTP);
				
			Иначе
				
				ВызватьИсключение "Unknown method";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗапроса = "POST" Тогда
			
			Если ПереданоИмяМетодаДляПолученияДанныхБД(ИмяМетода) Тогда
				
				СоздатьНовыйОбъектБД(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "FullTextSearch" Тогда
				
				ПолучитьМассивДанныхПолнотекстовогоПоиска(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "get_file" Тогда
				
				ПолучитьСтруктуруДанныхGetFile(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "add_file" Тогда
				
				ПрикрепитьФайлКОбъекту(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "mobile_change" Тогда
				
				ОбменДаннымиСМобильнымПриложением(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "send_email" Тогда
				
				СоздатьПочтовоеСообщение(СтруктураДанных, ЗапросHTTP);
				
			ИначеЕсли ИмяМетода = "UpdateDBCfg" Тогда
				
				ОбновитьКонфигурациюИБ(СтруктураДанных, ЗапросHTTP);
				
			Иначе
				
				ВызватьИсключение "Unknown method";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗапроса = "DELETE" Тогда
			
			Если ПереданоИмяМетодаДляПолученияДанныхБД(ИмяМетода) Тогда
				
				УдалитьСуществующийОбъектБД(СтруктураДанных, ЗапросHTTP);
				
			Иначе
				
				ВызватьИсключение "Unknown method";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СообщениеПользователю ИЗ ПолучитьСообщенияПользователю(Истина) Цикл
			СтруктураДанных.Messages.Добавить(Новый Структура("Field,Text", СообщениеПользователю.Поле, СообщениеПользователю.Текст));
		КонецЦикла;
		
		ОтветHTTP = ПолучитьHTTPОтветJSON(СтруктураДанных);
		
		ЗаписатьПротоколОбменаСБитрикс(ЗапросHTTP, ОтветHTTP, Ложь);
	Исключение
		СтруктураДанных = Новый Структура("code,value,exception,detailed_exception,messages", "200", "", "", "", Новый Массив);
		
		Для Каждого СообщениеПользователю ИЗ ПолучитьСообщенияПользователю(Истина) Цикл
			СтруктураДанных.Messages.Добавить(Новый Структура("Field,Text", СообщениеПользователю.Поле, СообщениеПользователю.Текст));
		КонецЦикла;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СтруктураДанных.Вставить("code", "404");
		СтруктураДанных.Вставить("exception", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		СтруктураДанных.Вставить("detailed_exception", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ОтветHTTP = ПолучитьHTTPОтветJSON(СтруктураДанных);
		
		ЗаписатьПротоколОбменаСБитрикс(ЗапросHTTP, ОтветHTTP, Истина);
	КонецПопытки;
	
	Возврат ОтветHTTP;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхБД

Функция ПолучитьМассивДанныхБД(Результат, ЗапросHTTP, ИмяМетода)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ИмяМетода);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	МенеджерОбъекта.СформироватьМассивДанныхGetList(Результат, ПолноеИмяОбъекта, ПараметрыЗапросаHTTP);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
		
		Если Не Результат.Свойство("FormCaption") Тогда
			Результат.Вставить("FormCaption", ?(ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеСписка), ОбъектМетаданных.ПредставлениеСписка, ОбъектМетаданных.Синоним));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПереданоИмяМетодаДляПолученияДанныхБД(ИмяМетода)
	
	Возврат СтрНайти(ИмяМетода, "Catalog_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "Document_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "DocumentJournal_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "Enumeration_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "Constant_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "ExchangePlan_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "ChartOfAccounts_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "ChartOfCalculationTypes_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "ChartOfCharacteristicTypes_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "InformationRegister_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "AccumulationRegister_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "CalculationRegister_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "AccountingRegister_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "BusinessProcess_") > 0 ИЛИ
		СтрНайти(ИмяМетода, "Task_") > 0;
	
КонецФункции

Функция ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ИмяМетода)
	
	ИмяТаблицы = ИмяМетода;
	
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Catalog_", "Справочник.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Document_", "Документ.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "DocumentJournal_", "ЖурналДокументов.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Enumeration_", "Перечисление.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Constant_", "Константа.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ExchangePlan_", "ПланОбмена.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ChartOfAccounts_", "ПланСчетов.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ChartOfCalculationTypes_", "ПланВидовРасчета.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ChartOfCharacteristicTypes_", "ПланВидовХарактеристик.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "InformationRegister_", "РегистрСведений.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "AccumulationRegister_", "РегистрНакопления.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "CalculationRegister_", "РегистрРасчета.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "AccountingRegister_", "РегистрБухгалтерии.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "BusinessProcess_", "БизнесПроцесс.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Task_TaskUser", "Задача.ЗадачаИсполнителя");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Task_", "Задача.");
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ПолучитьСпособыУведомленияПользователяИВсехПользователей_Локально(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	СпособыУведомленияПользователей.СпособУведомления КАК СпособУведомления,
	|	СпособыУведомленияПользователей.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	СпособыУведомленияПользователей.Использовать КАК Использовать
	|ПОМЕСТИТЬ СпособыУведомленияВсеПользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь
	|	И СпособыУведомленияПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи)
	|	И СпособыУведомленияПользователей.Использовать = ИСТИНА
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.Служебный = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыУведомленияВсеПользователи.Пользователь КАК Пользователь,
	|	СпособыУведомленияВсеПользователи.СпособУведомления КАК СпособУведомления,
	|	СпособыУведомленияВсеПользователи.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """") КАК ДанныеСпособа,
	|	СпособыУведомленияВсеПользователи.Использовать КАК Использовать
	|ПОМЕСТИТЬ КонтактнаяИнформацияПользователей
	|ИЗ
	|	СпособыУведомленияВсеПользователи КАК СпособыУведомленияВсеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО СпособыУведомленияВсеПользователи.Пользователь = ПользователиКонтактнаяИнформация.Ссылка
	|			И СпособыУведомленияВсеПользователи.ВидКонтактнойИнформации = ПользователиКонтактнаяИнформация.Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактнаяИнформацияПользователей.СпособУведомления КАК СпособУведомления,
	|	КонтактнаяИнформацияПользователей.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	КонтактнаяИнформацияПользователей.ДанныеСпособа КАК ДанныеСпособа,
	|	ЕСТЬNULL(СпособыУведомленияПользователей.Использовать, ИСТИНА) КАК Использовать,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформацияПользователей.ДанныеСпособа) КАК Представление
	|ИЗ
	|	КонтактнаяИнформацияПользователей КАК КонтактнаяИнформацияПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
	|		ПО КонтактнаяИнформацияПользователей.Пользователь = СпособыУведомленияПользователей.Пользователь
	|			И КонтактнаяИнформацияПользователей.СпособУведомления = СпособыУведомленияПользователей.СпособУведомления
	|			И КонтактнаяИнформацияПользователей.ДанныеСпособа = СпособыУведомленияПользователей.ДанныеСпособа
	|			И (СпособыУведомленияПользователей.Использовать = ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпособыУведомленияПользователей.СпособУведомления,
	|	СпособыУведомленияПользователей.ВидКонтактнойИнформации,
	|	СпособыУведомленияПользователей.ДанныеСпособа,
	|	СпособыУведомленияПользователей.Использовать,
	|	ПРЕДСТАВЛЕНИЕ(СпособыУведомленияПользователей.ДанныеСпособа)
	|ИЗ
	|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
	|ГДЕ
	|	СпособыУведомленияПользователей.Пользователь = &Пользователь
	|	И СпособыУведомленияПользователей.ВидКонтактнойИнформации = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
	|	И СпособыУведомленияПользователей.Использовать = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпособыУведомленияВсеПользователи.СпособУведомления,
	|	СпособыУведомленияВсеПользователи.ВидКонтактнойИнформации,
	|	"""",
	|	СпособыУведомленияВсеПользователи.Использовать,
	|	""""
	|ИЗ
	|	СпособыУведомленияВсеПользователи КАК СпособыУведомленияВсеПользователи";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	СпособыУведомления = Запрос.Выполнить().Выгрузить();
	
	Возврат СпособыУведомления;
	
КонецФункции

#КонецОбласти

#Область РолеваяМодель

Функция ПолучитьСтруктуруДанныхGetForm(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ПредставлениеОбъектаМетаданных = ПараметрыЗапросаHTTP.Получить("$metadata");
	СтрокаФильтр = ПараметрыЗапросаHTTP.Получить("$filter");
	ГУИДОбъекта = ПараметрыЗапросаHTTP.Получить("$guid");
	
	Если ПредставлениеОбъектаМетаданных = "Desktop" Тогда
		Результат.Вставить("value", ра_ОбменДанными.ПолучитьНастройкиГлавноеМеню());
		Возврат Результат;
	ИначеЕсли ПредставлениеОбъектаМетаданных = "CreateNonconformity" Тогда
		ПолучитьМассивДанныхGetNonconformity(Результат);
		Возврат Результат;
	ИначеЕсли ПредставлениеОбъектаМетаданных = "NonconformityCancellation" Тогда
		ПолучитьМассивДанныхNonconformityCancellation(Результат);
		Возврат Результат;
	ИначеЕсли ПредставлениеОбъектаМетаданных = "CreateConformityAssessment" Тогда
		ПолучитьМассивДанныхCreateConformityAssessment(Результат);
		Возврат Результат;
	// ТСК Близнюк С.И.; 27.11.2018; task#1834{
	ИначеЕсли ПредставлениеОбъектаМетаданных = "CreateConformityAssessment3" Тогда
		ПолучитьМассивДанныхCreateConformityAssessment3(Результат);
		Возврат Результат;
	// ТСК Близнюк С.И.; 27.11.2018; task#1834}
	ИначеЕсли ПредставлениеОбъектаМетаданных = "CreateControlOperationOrder" Тогда
		ПолучитьМассивДанныхCreateControlOperationOrder(Результат);
		Возврат Результат;
	ИначеЕсли ПредставлениеОбъектаМетаданных = "SystemSupport" Тогда
		ПолучитьМассивДанныхSystemSupport(Результат);
		Возврат Результат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданных);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
	
	Если ОбъектМетаданных = Неопределено Или Не ЗначениеЗаполнено(ИдентификаторОбъектаМетаданных) Тогда
		ВызватьИсключение "unknown metadata object";
	КонецЕсли;
	
	Если Не (ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Или ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Или ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Или ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных)) Тогда
		ВызватьИсключение "get_form is allowed only for Catalog or Document or InformationRegister";
	КонецЕсли;
	
	СтруктураОтбора = СформироватьСтруктуруОтбораДляПоиска(СтрокаФильтр, ОбъектМетаданных);
	
	Если ПредставлениеОбъектаМетаданных = "Document_ra_RezultatKontrolnoyOperacii"
		И СтруктураОтбора.Свойство("ZayavkaNaKontrolnuyuOperaciyu") Тогда
		
		СтруктураДанных = Документы.ra_RezultatKontrolnoyOperacii.ПоследнийРезультатКО(
			СтруктураОтбора.ZayavkaNaKontrolnuyuOperaciyu, Ложь);
		
		Если НЕ СтруктураДанных.Ссылка.Пустая() Тогда
			ГУИДОбъекта = Строка(СтруктураДанных.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ГУИДОбъекта) Тогда
		
		УникальныйИдентификатор = GUID(ГУИДОбъекта);
		
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
			ОбъектБД = МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификатор);
		Иначе
			ВызватьИсключение "guid is allowed only for reference data type";
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
			ОбъектБД = МенеджерОбъекта.СоздатьЭлемент();
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
			ОбъектБД = МенеджерОбъекта.СоздатьДокумент();
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ОбъектБД = МенеджерОбъекта.СоздатьМенеджерЗаписи();
		КонецЕсли;
		
		ОбъектБД.Заполнить(СтруктураОтбора);
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			Если Не (ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_PrichinyNesootvetstvij") И ОбъектБД.KodPrichiny = 0
					Или ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_KomandyPoObmenuLuchshimiPraktikami") И ОбъектБД.Polzovatel.Пустая()
					Или ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_KomandyNesootvetstvij") И ОбъектБД.Otvetstvennyj.Пустая()
					Или ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_UchastnikiKontrolnyhOperaciy") И ОбъектБД.Otvetstvennyj.Пустая()
					Или ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_OpisaniePredmetaKontrolya")
					Или ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_PolozhitelnyePraktikiAspekty"))Тогда // артефакт
				ОбъектБД.Прочитать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Страница = СтраницаФормы(СтрокаФильтр);
	
	ПараметрыФормирования = Новый Структура("Страница", Страница);
	
	Если СтруктураОтбора.Свойство("Curator") Тогда
		ПараметрыФормирования.Вставить("Куратор");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Responsible") Тогда
		ПараметрыФормирования.Вставить("ОтветственныйЗаКачество");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ImmediateCause") Тогда
		ПараметрыФормирования.Вставить("НепосредственнаяПричина");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("RootCause") Тогда
		ПараметрыФормирования.Вставить("КореннаяПричина");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("LeaderD8") Тогда
		ПараметрыФормирования.Вставить("Лидер");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Employee") Тогда
		ПараметрыФормирования.Вставить("Сотрудник");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("MatchingOrganization") Тогда
		ПараметрыФормирования.Вставить("СогласующаяОрганизация");
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 22.10.2018 {
	Если СтруктураОтбора.Свойство("RedirectTask") Тогда
		ПараметрыФормирования.Вставить("RedirectTask");
	КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 22.10.2018 } 
	
	ЕстьМетодЗаголовокФормы = ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
	ОбъектМетаданных.ПолноеИмя(), "ЗаголовокФормы");
	
	Если ЕстьМетодЗаголовокФормы Тогда
		Результат.Вставить("FormCaption", МенеджерОбъекта.ЗаголовокФормы(ОбъектБД));
	Иначе
		Результат.Вставить("FormCaption", ОбъектМетаданных.Синоним);
	КонецЕсли;	
	
	Результат.Вставить("button_settings", МенеджерОбъекта.ПолучитьМассивКнопок(ОбъектБД));
	Результат.Вставить("main_menu", ра_ОбменДанными.ПолучитьМассивПунктовМеню(ОбъектБД));
	
	МассивДанных = МенеджерОбъекта.СформироватьМассивДанныхРолевойМодели(ОбъектБД, ПараметрыФормирования);
	
	Результат.Вставить("header_settings", МенеджерОбъекта.ПолучитьМассивЗаголовков(МассивДанных));
	
	МассивДанных.Добавить(ПолучитьСтруктуруДанныхПрикрепленныхФайлов(ОбъектБД, ОбъектМетаданных));
	МассивДанных.Добавить(ПолучитьСтруктуруДанныхАктивныхЗадачПоПредмету(ОбъектБД, ОбъектМетаданных));
	МассивДанных.Добавить(ПолучитьСтруктуруДанныхПечатныеФормыОбъекта(ОбъектБД, ОбъектМетаданных));
	
	Результат.Вставить("value", МассивДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхПрикрепленныхФайлов(ОбъектСсылка, ОбъектМетаданных)
	
	МассивФайлов = Новый Массив;
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) И
		ОбъектСсылка <> Неопределено И ЗначениеЗаполнено(ОбъектСсылка.Ссылка) Тогда
		
		ТаблицаДанных = ПолучитьСписокФайловДляОбъектов(ОбъектСсылка);
		
		Для Каждого СтрокаТЗ ИЗ ТаблицаДанных Цикл
			
			ГУИДФайла = Строка(СтрокаТЗ.Ссылка.УникальныйИдентификатор());
			ИмяКнопкиСкачать = СтрШаблон("Download_%1", ГУИДФайла);
			ИмяКнопкиОбновить = СтрШаблон("Upload_%1", ГУИДФайла);
			ПредставлениеКнопкиСкачать = НСтр("ru = 'Скачать'; en = 'Download'");
			ПредставлениеКнопкиОбновить = НСтр("ru = 'Обновить'; en = 'Upload'");
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("name",      	СтрокаТЗ.Наименование);
			СтруктураДанных.Вставить("description",	СтрокаТЗ.Описание);
			СтруктураДанных.Вставить("extension", 	СтрокаТЗ.Расширение);
			СтруктураДанных.Вставить("guid",      	ГУИДФайла);
			СтруктураДанных.Вставить("size",      	СтрокаТЗ.Размер);
			
			СтруктураКнопкиСкачать = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопкиСкачать, ПредставлениеКнопкиСкачать, "Catalog_ВерсииФайлов", ГУИДФайла);
			СтруктураКнопкиОбновить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопкиОбновить, ПредставлениеКнопкиОбновить, "Catalog_ВерсииФайлов", ГУИДФайла);
			
			СтруктураДанных.Вставить("button_download", СтруктураКнопкиСкачать);
			СтруктураДанных.Вставить("button_upload", СтруктураКнопкиОбновить);
			
			МассивФайлов.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Name", "Files");
	СтруктураДанных.Вставить("Type", "Catalog_ВерсииФайлов");
	СтруктураДанных.Вставить("Description", НСтр("ru = 'Вложения'; en = 'Attachments'"));
	СтруктураДанных.Вставить("Presentation", НСтр("ru = 'Файлы'; en = 'Files'"));
	СтруктураДанных.Вставить("Availability", true);
	СтруктураДанных.Вставить("Visibility", true);
	СтруктураДанных.Вставить("Required", false);
	СтруктураДанных.Вставить("Value", МассивФайлов);
	СтруктураДанных.Вставить("Filters", Новый Массив);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхАктивныхЗадачПоПредмету(ОбъектСсылка, ОбъектМетаданных)
	
	МассивЗадач = Новый Массив;
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) И
		ОбъектСсылка <> Неопределено И ЗначениеЗаполнено(ОбъектСсылка.Ссылка) Тогда
		
		ТаблицаДанных = ра_РаботаСПроцессами.ПолучитьАктивныеЗадачиПоПредмету(ОбъектСсылка);
		
		Для Каждого СтрокаТЗ ИЗ ТаблицаДанных Цикл
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("guid", Строка(СтрокаТЗ.Ссылка.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("name", СтрокаТЗ.Ссылка.Наименование);
			СтруктураДанных.Вставить("deadline", СтрокаТЗ.Ссылка.СрокИсполнения);
			
			МассивЗадач.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Name", "Tasks");
	СтруктураДанных.Вставить("Type", "Task_ЗадачаИсполнителя");
	СтруктураДанных.Вставить("Presentation", НСтр("ru = 'Задачи'; en = 'Tasks'"));
	СтруктураДанных.Вставить("Availability", true);
	СтруктураДанных.Вставить("Visibility", true);
	СтруктураДанных.Вставить("Required", false);
	СтруктураДанных.Вставить("Value", МассивЗадач);
	СтруктураДанных.Вставить("Filters", Новый Массив);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхПечатныеФормыОбъекта(ОбъектСсылка, ОбъектМетаданных)
	
	МассивПечатныхФорм = Новый Массив;
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) И
		ОбъектСсылка <> Неопределено И ЗначениеЗаполнено(ОбъектСсылка.Ссылка) Тогда
		
		СтруктураПараметров = ра_ОбщегоНазначения.СтруктураПараметровДляПечатныхФормЕОС(ОбъектСсылка);
			
		ТаблицаДанных = ра_ОбщегоНазначения.СформироватьТаблицуФайловПечатныхФормЕОС(СтруктураПараметров);
			
		Для Каждого СтрокаТЗ ИЗ ТаблицаДанных Цикл
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("guid", Строка(СтрокаТЗ.Ссылка.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("name", СтрокаТЗ.Наименование);
			
			МассивПечатныхФорм.Добавить(СтруктураДанных);
		КонецЦикла;
		
		// ТСК Близнюк С.И.; 17.12.2018; task#2010{
		Если ТипЗнч(ОбъектСсылка.Ссылка) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("guid", "ApprovalSheet");
			СтруктураДанных.Вставить("name", НСтр("ru = 'Лист согласования'; en = 'Approval sheet'"));
			
			МассивПечатныхФорм.Добавить(СтруктураДанных);
		КонецЕсли;
		// ТСК Близнюк С.И.; 17.12.2018; task#2010}
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Name", "PrintForms");
	СтруктураДанных.Вставить("Type", "Catalog_Файлы");
	СтруктураДанных.Вставить("Presentation", НСтр("ru = 'Печатные формы'; en = 'Print forms'"));
	СтруктураДанных.Вставить("Availability", true);
	СтруктураДанных.Вставить("Visibility", true);
	СтруктураДанных.Вставить("Required", false);
	СтруктураДанных.Вставить("Value", МассивПечатныхФорм);
	СтруктураДанных.Вставить("Filters", Новый Массив);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьМассивДанныхCopyObject(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ПредставлениеОбъектаМетаданныхИсточник = ПараметрыЗапросаHTTP.Получить("$metadata_source"); //строка в формате Document_ra_Nesootvetstvie, Catalog_Контрагенты
	ПредставлениеОбъектаМетаданныхПриемник = ПараметрыЗапросаHTTP.Получить("$metadata_reciever"); //строка в формате Document_ra_Nesootvetstvie, Catalog_Контрагенты
	ГУИДИсточник = ПараметрыЗапросаHTTP.Получить("$guid_source");
	СтрокаФильтр = ПараметрыЗапросаHTTP.Получить("$filter");
	
	ПолноеИмяОбъектаПриемник = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданныхПриемник);
	ПолноеИмяОбъектаИсточник = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданныхИсточник);
	
	ИдентификаторОбъектаМетаданныхПриемник = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъектаПриемник);
	ОбъектМетаданныхПриемник = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданныхПриемник);
	
	Если ОбъектМетаданныхПриемник = Неопределено Или НЕ ЗначениеЗаполнено(ИдентификаторОбъектаМетаданныхПриемник) Тогда
		ВызватьИсключение "Unknown metadata object";
	КонецЕсли;
	
	МенеджерИсточник = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаИсточник);
	МенеджерПриемник = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаПриемник);
	
	ИсточникСсылка = МенеджерИсточник.ПолучитьСсылку(GUID(ГУИДИсточник));
	
	Если ПредставлениеОбъектаМетаданныхИсточник <> ПредставлениеОбъектаМетаданныхПриемник Тогда //ввод на основании
		// ТСК Близнюк С.И.; 06.12.2018; task#1993{
		Если МенеджерИсточник = Метаданные.Документы.ra_Signal И МенеджерПриемник = Метаданные.Документы.ra_Nesootvetstvie Тогда
			РеквизитыСигнала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникСсылка, "EhtapVyyavleniya,VidObektaNesootvetstviya");
			Если НЕ ЗначениеЗаполнено(РеквизитыСигнала.EhtapVyyavleniya) Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнен этап выявления несоответствия'; en = 'Missing Process stage mismatches'");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыСигнала.VidObektaNesootvetstviya) Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнен вид объекта несоответствия'; en = 'Missing Nonconformity object kind'");
			КонецЕсли;
		КонецЕсли;
		// ТСК Близнюк С.И.; 06.12.2018; task#1993}
		ОбъектПриемник = МенеджерПриемник.СоздатьДокумент();
		ОбъектПриемник.Заполнить(ИсточникСсылка);
	Иначе
		ОбъектПриемник = ИсточникСсылка.Скопировать();
	КонецЕсли;
	
	СтруктураОтбора = СформироватьСтруктуруОтбораДляПоиска(СтрокаФильтр, ОбъектМетаданныхПриемник);
	ОбъектПриемник.Заполнить(СтруктураОтбора);
	
	ЕстьМетодЗаголовокФормы = ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
	ОбъектМетаданныхПриемник.ПолноеИмя(), "ЗаголовокФормы");
	
	Если ЕстьМетодЗаголовокФормы Тогда
		Результат.Вставить("FormCaption", МенеджерПриемник.ЗаголовокФормы(ОбъектПриемник));
	Иначе
		Результат.Вставить("FormCaption", ОбъектМетаданныхПриемник.Синоним);
	КонецЕсли;
	
	Результат.Вставить("button_settings", МенеджерПриемник.ПолучитьМассивКнопок(ОбъектПриемник));
	Результат.Вставить("main_menu", ра_ОбменДанными.ПолучитьМассивПунктовМеню(ОбъектПриемник));
	
	МассивДанных = МенеджерПриемник.СформироватьМассивДанныхРолевойМодели(ОбъектПриемник);
	
	Результат.Вставить("header_settings", МенеджерПриемник.ПолучитьМассивЗаголовков(МассивДанных));
	
	МассивДанных.Добавить(ПолучитьСтруктуруДанныхПрикрепленныхФайлов(Неопределено, ОбъектМетаданныхПриемник));
	
	Результат.Вставить("value", МассивДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивДанныхGetNonconformity(Результат)
	
	ТаблицаНастроекТЧ = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", "FormCaption", НСтр("ru = 'Регистрация несоответствия'; en = 'Nonconformity registration'")), "String(30)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "EhtapVyyavleniya", НСтр("ru = 'Этап выявления'; en = 'Detection stage'"),Новый ОписаниеТипов("СправочникСсылка.ra_EhtapyVyyavleniyaNesootvetstvij")));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "VidObektaNesootvetstviya", НСтр("ru = 'Вид объекта несоответствия'; en = 'Nonconformity object kind'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_VidyPredmetovNesootvetstviya")),,,,,"FullTextSearch");
	// ТСК Близнюк С.И.; 22.10.2018; task#1533{
	//ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ,"EhtapVyyavleniya",,,,Новый Структура("VidObektaNesootvetstviya","EhtapVyyavleniyaNesootvetstvija"));
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ,"EhtapVyyavleniya",,,Истина,Новый Структура("VidObektaNesootvetstviya","EhtapVyyavleniyaNesootvetstvija"));
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ,"VidObektaNesootvetstviya",,,Истина);
	// ТСК Близнюк С.И.; 22.10.2018; task#1533}
		
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ);
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "CreateNonconfomity";
	ОписаниеКнопки = НСтр("ru = 'Зарегистрировать несоответствие'; en = 'Register a nonconformity'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	Результат.Вставить("button_settings", МассивКнопок);
	
	Результат.Вставить("value",МассивДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивДанныхNonconformityCancellation(Результат)
	
	ТаблицаНастроекТЧ = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", "FormCaption", НСтр("ru = 'Аннулирование документа'; en = 'Document cancellation'")), "String(30)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", "PrichinaAnnulirovaniya", НСтр("ru = 'Причина аннулирования'; en = 'Cancellation reason'")), "String(0)");
		
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ);
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "Annul";
	ОписаниеКнопки = НСтр("ru = 'Аннулировать'; en = 'Annul'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	Результат.Вставить("button_settings", МассивКнопок);
	
	Результат.Вставить("value",МассивДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивДанныхCreateConformityAssessment(Результат)
	
	ТаблицаНастроекТЧ = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", "FormCaption", НСтр("ru = 'Новая оценка соответствия'; en = 'New conformity assessment'")), "String(30)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "FormaOS", НСтр("ru = 'Форма оценки соответствия'; en = 'Form of conformity assessment'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_FormyOcenkiSootvetstviya")),,,,,"LocalSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "SkhemaSertifikacii", НСтр("ru = 'Схема сертификации'; en = 'Certification scheme'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_SkhemySertifikacii")),,,,,"FullTextSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "VidIspytanij", НСтр("ru = 'Вид испытаний'; en = 'Type of test'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_VidyIspytanij")),,,,,"FullTextSearch");
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ, "FormaOS", , , , Новый Структура("SkhemaSertifikacii,VidIspytanij", "FormaOS", "FormaOS"), "LocalSearch");
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ);
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "CreateConformityAssessment";
	ОписаниеКнопки = НСтр("ru = 'Создать'; en = 'Create'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	Результат.Вставить("button_settings", МассивКнопок);
	
	Результат.Вставить("value",МассивДанных);
	
	Возврат Результат;
	
КонецФункции

// ТСК Близнюк С.И.; 27.11.2018; task#1834{
Функция ПолучитьМассивДанныхCreateConformityAssessment3(Результат)
	
	ТаблицаНастроекТЧ = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", "FormCaption", НСтр("ru = 'Новая оценка соответствия'; en = 'New conformity assessment'")), "String(30)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "FormaOS", НСтр("ru = 'Форма оценки соответствия'; en = 'Form of conformity assessment'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_FormyOS")),,,,,"LocalSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "VidZayavkiNaExpertizuTD", НСтр("ru = 'Вид заявки на экспертизу ТД'; en = 'Type of application for examination TD'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_VidyZayavokNaExpertizuTD")),,,,,"FullTextSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "SkhemaSertifikaciiProdukcii", НСтр("ru = 'Схема сертификации'; en = 'Certification scheme'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_SkhemySertifikacii")),,,,,"FullTextSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "VidIspytanij", НСтр("ru = 'Вид испытаний'; en = 'Type of test'"),Новый ОписаниеТипов("ПеречислениеСсылка.ra_VidyIspytanij")),,,,,"FullTextSearch");
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ, "FormaOS", , , , Новый Структура("VidZayavkiNaExpertizuTD,SkhemaSertifikaciiProdukcii,VidIspytanij", "FormaOS", "FormaOS", "FormaOS"), "LocalSearch");
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ);
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "CreateConformityAssessment3";
	ОписаниеКнопки = НСтр("ru = 'Создать'; en = 'Create'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	Результат.Вставить("button_settings", МассивКнопок);
	
	Результат.Вставить("value",МассивДанных);
	
	Возврат Результат;
	
КонецФункции
// ТСК Близнюк С.И.; 27.11.2018; task#1834}

Функция ПолучитьМассивДанныхCreateControlOperationOrder(Результат)
	
	ТаблицаНастроекТЧ = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", "FormCaption", НСтр("ru = 'Новая контрольная операция'; en = 'New control operation order'")), "String(30)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "EhtapVyyavleniya", НСтр("ru = 'Этап жизненного цикла'; en = 'Process stage'"),Новый ОписаниеТипов("СправочникСсылка.ra_EhtapyVyyavleniyaNesootvetstvij")),,,,,"LocalSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "VidKontrolnoyOperacii", НСтр("ru = 'Вид контроля'; en = 'Control type'"),Новый ОписаниеТипов("СправочникСсылка.ra_KontrolnyeMeropriyatiya")),,,,,"FullTextSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "KontrolnoeMeropriyatie", НСтр("ru = 'Контрольное мероприятие'; en = 'Control event'"),Новый ОписаниеТипов("СправочникСсылка.ra_KontrolnyeMeropriyatiya")),,,,,"FullTextSearch");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним,Тип", "VvodInformaciiOZavershivshemsyaMeropriyatii", НСтр("ru = 'Ввод информации о завершившемся мероприятии'; en = 'Enter information about the completed control operation'"),Новый ОписаниеТипов("Булево")));
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ, "EhtapVyyavleniya", , , , Новый Структура("VidKontrolnoyOperacii", "EhtapVyyavleniya"));
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ, "VidKontrolnoyOperacii", , , , Новый Структура("KontrolnoeMeropriyatie", "Родитель"),,,, Новый Структура("ChoiceParameters", Новый Структура("ЭтоГруппа", Истина)));
			
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ);
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "CreateControlOperationOrder";
	ОписаниеКнопки = НСтр("ru = 'Создать'; en = 'Create'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	Результат.Вставить("button_settings", МассивКнопок);
	
	Результат.Вставить("value",МассивДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивДанныхSystemSupport(Результат)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним", "Name", НСтр("ru = 'ФИО'; en = 'Name'")), "String(100)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним,Тип", "Email", НСтр("ru = 'Email'; en = 'Email'")), "String(100)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним,Тип", "Organization", НСтр("ru = 'Организация'; en = 'Organization'"),Новый ОписаниеТипов("СправочникСсылка.Контрагенты")));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним,Тип", "Subject", НСтр("ru = 'Тема обращения'; en = 'Subject'")), "String(100)");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя,Синоним,Тип", "Text", НСтр("ru = 'Текст'; en = 'Text'")), "String(0)");
	
	//Заполним ФИО, Email, Организацию
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Name", , Ложь, , , , ТекущийПользователь.ПредставлениеВПереписке);
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Organization", , Ложь, , , , ТекущийПользователь.ра_Организация);
	Email = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекущийПользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, "Email", , Ложь, , , , Email);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "RegisterRequest";
	ОписаниеКнопки = НСтр("ru = 'Зарегистрировать обращение'; en = 'Register request'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	Результат.Вставить("button_settings", МассивКнопок);
	
	Результат.Вставить("value",МассивДанных);
	Результат.Вставить("FormCaption", НСтр("ru = 'Обращение в поддержку'; en = 'Contacting support'"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолнотекстовыйПоиск

Функция ПолучитьМассивДанныхПолнотекстовогоПоиска(Результат, ЗапросHTTP)
	
	СтруктураЗапроса = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	Если Не СтруктураЗапроса.Свойство("metadata") Тогда
		ВызватьИсключение НСтр("ru = 'Не задан тип объекта'; en = 'Object type not specified'");
	КонецЕсли;
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(СтруктураЗапроса.metadata);
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Отбор = СформироватьСтруктуруОтбораДляПоиска(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "filters", ""), ОбъектМетаданных);
	Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Параметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "parameters");
	Если Параметры <> Неопределено Тогда
		ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ChoiceParameters", "");
		Если ЗначениеЗаполнено(ПараметрыВыбора) Тогда
			Если ПараметрыВыбора.Свойство("ра_Организация") Тогда // артефакты
				ПараметрыВыбора.Вставить("ра_Организация", Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыВыбора.ра_Организация)))
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отбор, ПараметрыВыбора);
		КонецЕсли;
		ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ChoiceParameterLinks", "");
		Если ЗначениеЗаполнено(ПараметрыВыбора) Тогда
			Если ПараметрыВыбора.Свойство("Signal") Тогда // еще артефакты
				Отбор.Вставить("Signal", "")
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отбор", Отбор);
	ПараметрыПоиска.Вставить("СтрокаПоиска", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "SearchString", ""));
	
	Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда
		МассивДанных = ра_ОбменДанными.ПолучитьЗначенияПеречисления(Тип("ПеречислениеСсылка." + ОбъектМетаданных.Имя), ПараметрыПоиска);
	Иначе
		Если ПараметрыПоиска.Отбор.Свойство("ЭтоГруппа") И ПараметрыПоиска.Отбор.ЭтоГруппа = Истина Тогда
			ПараметрыПоиска.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Группы);
		Иначе
			ПараметрыПоиска.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		КонецЕсли;
		ПараметрыПоиска.Вставить("СпособПоискаСтроки", СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
		ПараметрыПоиска.Вставить("ПолнотекстовыйПоиск", ПолнотекстовыйПоискПриВводеПоСтроке.Использовать);
		ПараметрыПоиска.Вставить("ОтключитьОбработкуПолученияДанныхВыбора", Истина);
		
		МенеджерОбъекта   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
		СписокРезультатов = МенеджерОбъекта.ПолучитьДанныеВыбора(ПараметрыПоиска);
		МассивДанных      = ДобавитьПредставлениеДанныхВыбора(ПолноеИмяОбъекта, СписокРезультатов);
	КонецЕсли;
	
	Результат.Вставить("value", МассивДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьПредставлениеДанныхВыбора(ПолноеИмяОбъекта, СписокРезультатов)
	
	МассивСсылок = Новый Массив;
	Для каждого ЭлементСписка из СписокРезультатов Цикл
		МассивСсылок.Добавить(?(ТипЗнч(ЭлементСписка.Значение) = Тип("Структура"), ЭлементСписка.Значение.Значение, ЭлементСписка.Значение));
	КонецЦикла;
	
	Запрос = Новый Запрос(
	СтрШаблон("ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Представление КАК Представление
	|ИЗ
	|	%1 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&МассивСсылок)", ПолноеИмяОбъекта));
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоответствиеСсылок = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСсылок.Вставить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	МассивДанных = Новый Массив;
	Для каждого ЭлементСписка из СписокРезультатов Цикл
		
		ЗначениеСсылки = ?(ТипЗнч(ЭлементСписка.Значение) = Тип("Структура"), ЭлементСписка.Значение.Значение, ЭлементСписка.Значение);
		
		МассивДанных.Добавить(Новый Структура("Ref_Key, FormattedView, Presentation", 
			Строка(ЗначениеСсылки.УникальныйИдентификатор()), 
			HTMLИзФорматированнойСтроки(ЭлементСписка.Представление), 
			СоответствиеСсылок[ЗначениеСсылки]));
			
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Функция HTMLИзФорматированнойСтроки(ФорматированнаяСтрока)
	
	Если ТипЗнч(ФорматированнаяСтрока) <> Тип("ФорматированнаяСтрока") Тогда
		Возврат ФорматированнаяСтрока;	
	КонецЕсли;
	
	ТекстHTML = "";
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(ФорматированнаяСтрока);
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Новый Структура);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстHTML);
	
	Пока ЧтениеXML.Имя <> "p" и ЧтениеXML.Прочитать() Цикл 
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	Если ЧтениеXML.Имя = "p" Тогда
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "p" Тогда
				Прервать;
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				МассивСтрок.Добавить(СтрШаблон("<b style=""%1"">", ЧтениеXML.ПолучитьАтрибут("style"))); 
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				МассивСтрок.Добавить(XMLСтрока(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				МассивСтрок.Добавить("</b>");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат СтрСоединить(МассивСтрок, "");
	
КонецФункции

Функция СформироватьСтруктуруОтбораДляПоиска(СтрокаФильтр, ОбъектМетаданных)
	
	МассивУсловий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФильтр, " and ");
	
	СтруктураОтбор = Новый Структура;
	
	Для Каждого Условие ИЗ МассивУсловий Цикл
		
		Если Не ЗначениеЗаполнено(Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Условие, " eq ");
		
		ЗаголовокФильтра = МассивКлючЗначение[0];
		ЗначениеФильтра = МассивКлючЗначение[1];
		
		ЗаголовокФильтра = СтрЗаменить(ЗаголовокФильтра, "_Key", "");
		ЗначениеФильтра = ПолучитьЗначениеРеквизитаПоСтроковомуПредставлению(ОбъектМетаданных, ЗаголовокФильтра, ЗначениеФильтра);
		
		СтруктураОтбор.Вставить(ЗаголовокФильтра, ЗначениеФильтра);
		
	КонецЦикла;
	
	Возврат СтруктураОтбор;
	
КонецФункции

#КонецОбласти

#Область ЗадачиПользователя

Функция ВыполнитьЗадачуИсполнителя(Результат, ЗапросHTTP)
	
	ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
	
	УникальныйИдентификатор = GUID(Сред(ИмяМетода, СтрНайти(ИмяМетода, "(") + 6, 36));
	
	СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	Если Не СтруктураДанных.Свойство("result") Тогда
		ВызватьИсключение "Missing result in query";
	КонецЕсли;
	
	Если СтрНайти(",RejectInvitation,Rejected,RefusalOfSignature,", "," + СтруктураДанных.result + ",") Тогда
		Если Не (СтруктураДанных.Свойство("comment") И ЗначениеЗаполнено(СтруктураДанных.comment)) Тогда
			ВызватьИсключение "Comment is not specified";
		КонецЕсли;
	КонецЕсли;
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(УникальныйИдентификатор);
	Если Не ОбщегоНазначения.СсылкаСуществует(ЗадачаСсылка) Тогда
		ВызватьИсключение "Task by guid not found";
	КонецЕсли;
	
	Комментарий = "";
	Если СтруктураДанных.Свойство("comment") Тогда
		Комментарий = СтруктураДанных.comment;
	КонецЕсли;
	
	ВыполнитьЗадачуИсполнителя_Продолжение(ЗадачаСсылка, СтруктураДанных.result, Комментарий);
	
	Результат.Вставить("value", "Task was perfomed");
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗадачуИсполнителя_Продолжение(ЗадачаСсылка, Результат, Комментарий)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Результат = "Approved" Тогда
		РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
	ИначеЕсли Результат = "Rejected" Тогда
		РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
	ИначеЕсли Результат = "Sign" Тогда
		РезультатСогласования = Перечисления.РезультатыУтверждения.Утверждено;
	ИначеЕсли Результат = "RefusalOfSignature" Тогда
		РезультатСогласования = Перечисления.РезультатыУтверждения.НеУтверждено;
	ИначеЕсли Найти(",Perfomed,Confirm,Examined,ReturnForRevork,RepeatTheApproval,", "," + Результат + ",") Тогда
		РезультатСогласования = "";
	Иначе
		ВызватьИсключение "Task result is incorrect";
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "Задачи по оценке соответствия" 12.10.2018 {
	Если Найти(",Examined,", "," + Результат + ",")
		И ра_ОбменДанными.ЭтоЗаявкаНаОценкуСоответствияИОтсутствуютНесоответствияПоОценкеСоответствия(ЗадачаСсылка) Тогда 
		ВызватьИсключение НСтр("ru = 'По оценке соответствия в системе не заведено ни одного документа ""Несоответствия""'; en = 'According to the assessment of compliance in the system there is no document ""Nonconformity""'");
 	КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "Задачи по оценке соответствия" 12.10.2018 } 
	
	ЭтоИсполнение   = (ТипЗнч(ЗадачаСсылка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение"));
	ЭтоСогласование = (ТипЗнч(ЗадачаСсылка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование"));
	ЭтоУтверждение  = (ТипЗнч(ЗадачаСсылка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение"));
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
	Блокировка.Заблокировать();
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	Если ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс) Тогда
		Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			
			СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
			НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
			НайденнаяСтрока.РезультатСогласования = РезультатСогласования;
			СогласованиеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
			
		ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
			
			СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
			НайденнаяСтрока = СогласованиеОбъект.РезультатыУтверждения.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
			НайденнаяСтрока.РезультатУтверждения = РезультатСогласования;
			СогласованиеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
	// для выполнения задачи вызываем типовой метод
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДата());
	ПараметрыВыполнения.Вставить("ИсполнительЗадачи", ЗадачаОбъект.Исполнитель);
	ПараметрыВыполнения.Вставить("ПользовательИсполнитель", ПараметрыСеанса.АвторизованныйПользователь);
	Если ЭтоИсполнение Тогда
		ПараметрыВыполнения.Вставить("РезультатВыполнения", Комментарий);
	ИначеЕсли ТипЗнч(ЗадачаСсылка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		ПараметрыВыполнения.Вставить("РезультатВыполнения", РезультатСогласования);
	ИначеЕсли ЭтоСогласование Или ЭтоУтверждение Тогда
		ПараметрыВыполнения.Вставить("РезультатСогласования", РезультатСогласования);
		ПараметрыВыполнения.Вставить("РезультатВыполнения", Комментарий);
	КонецЕсли;
	
	// повторный запуск
	Если ЭтоИсполнение И Результат = "ReturnForRevork" Тогда
		ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", Истина);
	ИначеЕсли ЭтоСогласование И Результат = "RepeatTheApproval" Тогда
		ПараметрыВыполнения.Вставить("ПовторитьСогласование", Истина);
	ИначеЕсли ЭтоУтверждение И Результат = "RepeatTheApproval" Тогда
		ПараметрыВыполнения.Вставить("ПовторитьУтверждение", Истина);
	КонецЕсли;
	
	// ТСК Близнюк С.И.; 27.09.2018; task#652{
	//Если Константы.ра_ТестовыйРежимРаботыСКриптографией.Получить() Тогда
	Если ПолучитьФункциональнуюОпцию("ра_ПриУтвержденииПодписыватьЧерезСерверDSS") Тогда
	// ТСК Близнюк С.И.; 27.09.2018; task#652}
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка.БизнесПроцесс);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДанныеБизнесПроцессов.ОсновнойПредмет КАК Предмет
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// ТСК Близнюк С.И.; 27.09.2018; task#652{
			//ДвоичныеДанныеОсновногоФайла = ра_РаботаСПроцессами.ПолучитьОсновнойФайлДляДокумента(Выборка.Предмет);
			//ПодписываемыеДвоичныеДанныеBase64 = Base64Строка(ДвоичныеДанныеОсновногоФайла);
			//РезультатПодписи = ра_РаботаСКриптографией.ПодписатьОсновнойФайл(ПодписываемыеДвоичныеДанныеBase64, Новый Структура("Логин, Пароль, ПинКод", "t2", "Carbon1408", ""));
			ДанныеОсновногоФайла = ра_РаботаСПроцессами.ПолучитьОсновнойФайлДляДокумента(Выборка.Предмет);
			Если ДанныеОсновногоФайла <> Неопределено Тогда
				ОсновнойФайл = ДанныеОсновногоФайла.Файл;
				ВерсияОсновногоФайла = ДанныеОсновногоФайла.Версия;
				ДвоичныеДанныеОсновногоФайла = ДанныеОсновногоФайла.ДвоичныеДанные;
				ПодписываемыеДвоичныеДанныеBase64 = Base64Строка(ДвоичныеДанныеОсновногоФайла);
				РезультатПодписи = Обработки.ра_ПодписатьДокумент.ПодписатьОсновнойФайл(Выборка.Предмет, ПодписываемыеДвоичныеДанныеBase64, ОсновнойФайл, ВерсияОсновногоФайла);
			КонецЕсли;
			// ТСК Близнюк С.И.; 27.09.2018; task#652}
		КонецЕсли;
	КонецЕсли;
	
	ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами(ЗадачаОбъект, ПараметрыВыполнения);
	
	ЗафиксироватьТранзакцию();
	
КонецФункции

// Корнюшенков А.Ю. Искать в тексте "ПеренаправлениеЭскалацияЗадач" 19.10.2018 {
Функция ПеренаправитьЗадачу(Результат, ЗапросHTTP)
	
	ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
	
	УникальныйИдентификатор = GUID(Сред(ИмяМетода, СтрНайти(ИмяМетода, "(") + 6, 36));
	
	СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	Если Не СтруктураДанных.Свойство("Performer") Тогда
		ВызватьИсключение "Missing performer in query";
	КонецЕсли;
	
	НовыйИсполнитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Performer));
	
	Если Не (СтруктураДанных.Свойство("comment") И ЗначениеЗаполнено(СтруктураДанных.comment)) Тогда
		ВызватьИсключение "Comment is not specified";
	КонецЕсли;
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(УникальныйИдентификатор);
	Если Не ОбщегоНазначения.СсылкаСуществует(ЗадачаСсылка) Тогда
		ВызватьИсключение "Task by guid not found";
	КонецЕсли;
	
	Комментарий = "";
	Если СтруктураДанных.Свойство("comment") Тогда
		Комментарий = СтруктураДанных.comment;
	КонецЕсли;
	
	ИнфоОПеренаправлении = Новый Структура;
	ИнфоОПеренаправлении.Вставить("Исполнитель", НовыйИсполнитель);
	ИнфоОПеренаправлении.Вставить("РольИсполнителя", Неопределено);
	ИнфоОПеренаправлении.Вставить("Комментарий", Комментарий);
	
	ЗадачаПеренаправлена = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(ЗадачаСсылка, ИнфоОПеренаправлении);
	
	Результат.Вставить("value", "Task was forward");
	
	Возврат Результат;
	
КонецФункции
// Корнюшенков А.Ю. Искать в тексте "ПеренаправлениеЭскалацияЗадач" 19.10.2018 }

#КонецОбласти

#Область ПередачаПриемФайлов

Функция ПолучитьМассивДанныхСписокФайлов(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ПредставлениеОбъектаМетаданных = ПараметрыЗапросаHTTP.Получить("$metadata");
	ГУИДОбъекта = ПараметрыЗапросаHTTP.Получить("$guid");
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданных);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
	
	Если ОбъектМетаданных = Неопределено Или Не ЗначениеЗаполнено(ИдентификаторОбъектаМетаданных) Тогда
		ВызватьИсключение "Unknown metadata object";
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ВызватьИсключение "get_files_list is allowed only for Document";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГУИДОбъекта) Тогда
		ОбъектБД = МенеджерОбъекта.ПолучитьСсылку(GUID(ГУИДОбъекта));
	Иначе
		ВызватьИсключение "guid is not specified";
	КонецЕсли;
	
	ЕстьМетодЗаполнитьДескрипторыОбъекта = ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
	ОбъектМетаданных.ПолноеИмя(), "СписокВладельцевФайлов");
	
	Если ЕстьМетодЗаполнитьДескрипторыОбъекта Тогда
		СписокДокументов = МенеджерОбъекта.СписокВладельцевФайлов(ОбъектБД);
	Иначе
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(ОбъектБД);
	КонецЕсли;
	
	ТаблицаДанных = ПолучитьСписокФайловДляОбъектов(СписокДокументов);
	ТаблицаДанных.Индексы.Добавить("ВладелецФайла");
	
	СведенияОФайлах = Новый СписокЗначений;
	
	Для каждого Документ Из СписокДокументов Цикл
		МассивФайлов = Новый Массив;
		Для Каждого СтрокаДанных ИЗ ТаблицаДанных.НайтиСтроки(Новый Структура("ВладелецФайла", Документ)) Цикл
			
			ГУИДФайла = Строка(СтрокаДанных.Ссылка.УникальныйИдентификатор());
			ИмяКнопки = СтрШаблон("Download_%1", ГУИДФайла);
			ПредставлениеКнопки = НСтр("ru = 'Скачать'; en = 'Download'");
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("name",      СтрокаДанных.Наименование);
			СтруктураДанных.Вставить("extension", СтрокаДанных.Расширение);
			СтруктураДанных.Вставить("Type",      "Catalog_ВерсииФайлов");
			СтруктураДанных.Вставить("guid",      ГУИДФайла);
			СтруктураДанных.Вставить("size",      СтрокаДанных.Размер);
			
			СтруктураКнопки = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ПредставлениеКнопки, "Catalog_ВерсииФайлов", ГУИДФайла);
			СтруктураДанных.Вставить("button", СтруктураКнопки);
			
			МассивФайлов.Добавить(СтруктураДанных);
		КонецЦикла;
		
		Если МассивФайлов.Количество() Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Name", "Files");
			СтруктураДанных.Вставить("Presentation", Строка(Документ));
			СтруктураДанных.Вставить("Availability", true);
			СтруктураДанных.Вставить("Visibility", true);
			СтруктураДанных.Вставить("Required", false);
			СтруктураДанных.Вставить("Value", МассивФайлов);
			СтруктураДанных.Вставить("Filters", Новый Массив);
			
			СведенияОФайлах.Добавить(СтруктураДанных, СтруктураДанных.Presentation);
		КонецЕсли;
	КонецЦикла;
	
	СведенияОФайлах.СортироватьПоПредставлению();
	
	Результат.Вставить("FormCaption", НСтр("ru = 'СФОРМИРОВАННЫЕ ДОКУМЕНТЫ'; en = 'FORMED DOCUMENTS'"));
	Результат.Вставить("value", СведенияОФайлах.ВыгрузитьЗначения());
	
	Возврат Результат;
	
КонецФункции

Функция ОбменДаннымиСМобильнымПриложением(СтруктураДанных, ЗапросHTTP)
	
	СтруктураЗапроса = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	XRequest = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/DMX","XRequest"));
	XRequest.Установить("ClientCode", 				СтруктураЗапроса.ClientCode);
	XRequest.Установить("ExchangeData", 			Base64Значение(СтруктураЗапроса.ExchangeData));
	XRequest.Установить("LastResponseID", 			СтруктураЗапроса.LastResponseID);
	XRequest.Установить("LastResponsePartIndex", 	СтруктураЗапроса.LastResponsePartIndex);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Получение мобильного клиента по коду.
	// Если клиент подключается в первый раз, то выполняется его регистрация на сервере.
	МобильныйКлиент = ПланыОбмена.Мобильный.ПолучитьУзелОбмена(XRequest.ClientCode, ТекущийПользователь);
	
	Если СтруктураЗапроса.method = "PUT" Тогда
		// Помещение сообщения от клиента во входящую очередь для последующей обработки на сервере.
		ОбменСМобильнымиСервер.ЗаписатьВходящееСообщение(МобильныйКлиент, XRequest);
		
		// Запуск фоновой обработки сообщения от клиента.
		ОбменСМобильнымиСервер.ЗапуститьФоновоеЗаданиеОбработкиДанных(МобильныйКлиент,
		"ОбменСМобильнымиDMXСервер.ОбработатьСообщенияИСформироватьПакетОбмена");
		
		// Ответ собираем только после обработки последнего сообщения загруженного с клиента
		Если Не XRequest.LastResponseID = "0" Тогда
			Ответ = СобратьОтветКлиенту(МобильныйКлиент, XRequest.LastResponseID, XRequest.LastResponsePartIndex);
		Иначе
			Ответ = СоздатьСообщениеОК();
		КонецЕсли;
		
	ИначеЕсли СтруктураЗапроса.method = "GET" Тогда
		
		Если МобильныйКлиент.Пустая() Тогда
			ВызватьИсключение
				НСтр("ru='При синхронизациия произошла ошибка: выполнено подключение неизвестным устройством.'; en = 'An error occurred during synchronization: connection from an unknown device.'");
		КонецЕсли;
		
		Ответ = СобратьОтветКлиенту(МобильныйКлиент, XRequest.LastResponseID, XRequest.LastResponsePartIndex);
		
	Иначе
		Ответ = СоздатьСообщениеОК();
	КонецЕсли;
	
	СтруктураДанных.Вставить("Сообщение" , Ответ);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьМассивДанныхНормативнаяДокументация(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	ГУИДПапки = ПараметрыЗапросаHTTP.Получить("$document_type");
	Первые = ПараметрыЗапросаHTTP.Получить("$top");
	
	Если ЗначениеЗаполнено(ГУИДПапки) Тогда
		ПапкаФайлов = Справочники.ПапкиФайлов.ПолучитьСсылку(GUID(ГУИДПапки));
	Иначе
		ПапкаФайлов = ПолучитьСписокПапокНД();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Первые) Тогда
		Первые = "";
	Иначе
		Первые = " ПЕРВЫЕ " + Строка(Первые) + " ";
	КонецЕсли;
	
	ТаблицаДанных = ПолучитьСписокФайловДляОбъектов(ПапкаФайлов, Первые);
	ТаблицаДанных.Индексы.Добавить("ВладелецФайла");
	
	СведенияОФайлах = Новый СписокЗначений;
	
	МассивФайлов = Новый Массив;
	Для Каждого СтрокаДанных ИЗ ТаблицаДанных Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("name",      СтрокаДанных.Наименование);
		СтруктураДанных.Вставить("extension", СтрокаДанных.Расширение);
		СтруктураДанных.Вставить("Type",      "Catalog_ВерсииФайлов");
		СтруктураДанных.Вставить("guid",      Строка(СтрокаДанных.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("size",      СтрокаДанных.Размер);
		
		МассивФайлов.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Если МассивФайлов.Количество() Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Name", "Files");
		СтруктураДанных.Вставить("Presentation", "Catalog_ВерсииФайлов");
		СтруктураДанных.Вставить("Availability", true);
		СтруктураДанных.Вставить("Visibility", true);
		СтруктураДанных.Вставить("Required", false);
		СтруктураДанных.Вставить("Value", МассивФайлов);
		СтруктураДанных.Вставить("Filters", Новый Массив);
		СтруктураДанных.Вставить("button_name", "button_download");
		
		СведенияОФайлах.Добавить(СтруктураДанных, СтруктураДанных.Presentation);
	КонецЕсли;
	
	СведенияОФайлах.СортироватьПоПредставлению();
	
	МассивФильтров = Новый Массив;
	
	ИмяКнопки = "AllDocuments";
	ОписаниеКнопки = НСтр("ru = 'Все документы'; en = 'All documents'");
	МассивФильтров.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки, "Catalog_ПапкиФайлов"));
	
	СписокПапокНД = ПолучитьСписокПапокНД();
	
	Для Каждого Папка ИЗ СписокПапокНД Цикл
		
		ИмяКнопки = Папка.ра_НаименованиеEn;
		ОписаниеКнопки = НСтр("ru = '" + Папка.Наименование + "'; en = '" + Папка.ра_НаименованиеEn + "'");
		МассивФильтров.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки, "Catalog_ПапкиФайлов", Строка(Папка.УникальныйИдентификатор())));
		
	КонецЦикла;
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "button_download";
	ОписаниеКнопки = НСтр("ru = 'Скачать'; en = 'Download'");
	КнопкаСкачать = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(КнопкаСкачать);
	
	Результат.Вставить("value", СведенияОФайлах.ВыгрузитьЗначения());
	Результат.Вставить("filter_settings", МассивФильтров);
	Результат.Вставить("button_settings", МассивКнопок);
	Результат.Вставить("FormCaption", НСтр("ru = 'Нормативная документация'; en = 'Normative documents'"));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхДляФайлаGET(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ГУИДОбъекта = ПараметрыЗапросаHTTP.Получить("$guid"); // это гуид справочника "Файлы"
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Файл", Справочники.Файлы.ПолучитьСсылку(GUID(ГУИДОбъекта)));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
	|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
	|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка
	|ГДЕ
	|	Файлы.Ссылка = &Файл";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
			
			МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВерсияФайла = Выборка.ТекущаяВерсия;
			МенеджерЗаписи.Прочитать();
			ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", Выборка.ПолноеНаименование);
			СтруктураДанных.Вставить("Расширение", Выборка.ТекущаяВерсияРасширение);
			СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			
		Иначе
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Выборка.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", ДанныеФайла.ПолноеНаименованиеВерсии);
			СтруктураДанных.Вставить("Расширение", ДанныеФайла.Расширение);
			СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			
		КонецЕсли;
		
		Результат.Вставить("value", СтруктураДанных);
		
		Возврат Результат;
	Иначе
		ВызватьИсключение "No file object found";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхGetFile(Результат, ЗапросHTTP)
	
	СтруктураЗапроса = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	ИмяМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "method");
	Если ИмяМетода = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определено значение method'; en = 'Method is not specified'");
	КонецЕсли;
		
	Параметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "parameters");
	Если Параметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определено параметры метода'; en = 'Method parameters is not specified'");
	КонецЕсли;
	
	Если ИмяМетода = "FileByGuid" Тогда
		Возврат ПолучитьСтруктуруДанныхФайлПоГуид(Результат, Параметры);
	ИначеЕсли ИмяМетода = "NonconformityExcelData" Тогда
		Возврат ПолучитьСтруктуруДанныеНесоответствияExcel(Результат, Параметры);
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСтруктуруДанныхФайлПоГуид(Результат, Параметры)
	
	ГУИДОбъекта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "guid");
	Если ГУИДОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определено значение guid'; en = 'Guid is not specified'");
	КонецЕсли;
	
	УникальныйИдентификатор = GUID(ГУИДОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Файл", Справочники.Файлы.ПолучитьСсылку(УникальныйИдентификатор));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
	|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
	|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка
	|ГДЕ
	|	Файлы.Ссылка = &Файл";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
			
			МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВерсияФайла = Выборка.ТекущаяВерсия;
			МенеджерЗаписи.Прочитать();
			ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", Выборка.ПолноеНаименование);
			СтруктураДанных.Вставить("Расширение", Выборка.ТекущаяВерсияРасширение);
			СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			
		Иначе
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Выборка.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", ДанныеФайла.ПолноеНаименованиеВерсии);
			СтруктураДанных.Вставить("Расширение", ДанныеФайла.Расширение);
			СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			
		КонецЕсли;
		
		Результат.Вставить("value", СтруктураДанных);
		
		Возврат Результат;
	Иначе
		ВызватьИсключение "No file object found";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруДанныеНесоответствияExcel(Результат, Параметры)
	
	МассивГУИДов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "GuidsList");
	Если МассивГУИДов = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определено значение GuidsList'; en = 'GuidsList is not specified'");
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	
	Для Каждого ГУИДСтрока Из МассивГУИДов Цикл
		УникальныйИдентификатор = GUID(ГУИДСтрока);
		МассивОбъектов.Добавить(Документы.ra_Nesootvetstvie.ПолучитьСсылку(УникальныйИдентификатор));
	КонецЦикла;
	
	ТабличныеДокументы = ра_ОбщегоНазначения.КнигаExcelПоНесоответствиям(МассивОбъектов);
	
	Расширение = "xlsx";
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	
	ра_ОбщегоНазначенияКлиентСервер.СохранитьМногостраничныйФайл(ПолноеИмяФайла, ТабличныеДокументы);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование", "NonconformityData");
	СтруктураДанных.Вставить("Расширение", Расширение);
	СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		
	Результат.Вставить("value", СтруктураДанных);
	
	УдалитьФайлы(ПолноеИмяФайла);
		
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьСтруктуруДанныхДляФайлаPDF(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ПредставлениеОбъектаМетаданных = ПараметрыЗапросаHTTP.Получить("$metadata");
	ГУИДОбъекта = ПараметрыЗапросаHTTP.Получить("$guid");
	ИмяПечатнойФормы = ПараметрыЗапросаHTTP.Получить("$PrintFormName");
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданных);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	
	ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID(ГУИДОбъекта));
	Если Не ОбщегоНазначения.СсылкаСуществует(ОбъектСсылка) Тогда
		ВызватьИсключение "No document object found";
	КонецЕсли;
	
	Если ИмяПечатнойФормы = "ApprovalSheet" Тогда
		ДвоичныеДанные = ра_РаботаСПечатнымиФормами.ДвоичныеДанныеПечатнойФормы(ОбъектСсылка, ИмяПечатнойФормы);
	Иначе
		//В параметре PrintFormName ожидается guid шаблона (СправочникСсылка.Файлы)
		ФайлШаблон = Справочники.Файлы.ПолучитьСсылку(GUID(ИмяПечатнойФормы));
		Если Не ОбщегоНазначения.СсылкаСуществует(ФайлШаблон) Тогда
			ВызватьИсключение "No file object found";
		КонецЕсли;
		
		СтруктураОтвета = ра_ОбщегоНазначенияКлиентСервер.СформироватьФайлPDFПоШаблону(ФайлШаблон, ОбъектСсылка);
	
		Если Не ПустаяСтрока(СтруктураОтвета.ОписаниеОшибки) Тогда
			ВызватьИсключение СтруктураОтвета.ОписаниеОшибки;
		КонецЕсли;
		
		ДвоичныеДанные = Новый ДвоичныеДанные(СтруктураОтвета.ИмяФайлаПечатиPDF);
		ИмяПечатнойФормы = "PrintForm";
	КонецЕсли;
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование", ИмяПечатнойФормы);
	СтруктураДанных.Вставить("Расширение", "pdf");
	СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Результат.Вставить("value", СтруктураДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПрикрепитьФайлКОбъекту(Результат, ЗапросHTTP)
	
	СтруктураЗапроса = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	ДокументСсылка	= Неопределено;
	ФайлСсылка 		= Неопределено;
	ДвоичныеДанные 	= Неопределено;
	
	Если ТипЗнч(СтруктураЗапроса) = Тип("Структура") Тогда
		Если СтруктураЗапроса.Свойство("metadata") Тогда
			ТипОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(СтруктураЗапроса.metadata);
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъекта);
		Иначе
			ВызватьИсключение НСтр("ru = 'Не задан тип объекта'; en = 'Object type not specified'");
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("guid") И ЗначениеЗаполнено(СтруктураЗапроса.guid) Тогда
			ДокументСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID(СтруктураЗапроса.guid));
			Если Не ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
				ВызватьИсключение НСтр("ru = 'Объект документа не найден'; en = 'No document object found'");
			КонецЕсли;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не задан GUID объекта'; en = 'Object GUID not specified'");
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("guid_file") И ЗначениеЗаполнено(СтруктураЗапроса.guid_file) Тогда // редактируем ранее прикрепленный файл
			ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(GUID(СтруктураЗапроса.guid_file));
			Если Не ОбщегоНазначения.СсылкаСуществует(ФайлСсылка) Тогда
				ВызватьИсключение НСтр("ru = 'Объект файла не найден'; en = 'No file object found'");
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("file") Тогда
			ДвоичныеДанные = Base64Значение(СтруктураЗапроса.file); // прочитаем файл (передается строка Base64)
			Если Не ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка преобразования к типу ДвоичныеДанные'; en = 'Conversion error to Binary data type'");
			КонецЕсли;
		Иначе
			ВызватьИсключение НСтр("ru = 'В запросе отсутствуют данные файла'; en = 'There is no data in the request'");
		КонецЕсли;
		
		Если Не (СтруктураЗапроса.Свойство("extension_file") И ЗначениеЗаполнено(СтруктураЗапроса.extension_file)) Тогда
			ВызватьИсключение НСтр("ru = 'В запросе отсутствует расширение файла'; en = 'There is no file extension in the request'");
		КонецЕсли;
		
		Если Не (СтруктураЗапроса.Свойство("name_file") И ЗначениеЗаполнено(СтруктураЗапроса.name_file)) Тогда
			ВызватьИсключение НСтр("ru = 'В запросе отсутствует имя файла'; en = 'There is no file name in the request'");
		КонецЕсли;
		
		Если Не (СтруктураЗапроса.Свойство("size_file") И ЗначениеЗаполнено(СтруктураЗапроса.size_file)) Тогда
			ВызватьИсключение НСтр("ru = 'В запросе отсутствует размер файла'; en = 'There is no file size in the request'");
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось прочитать структуру запроса'; en = 'Сould not read request structure'");
	КонецЕсли;
	
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураЗапроса.extension_file);
	
	Если РасширениеБезТочки = "sig" Тогда
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		Если Не ТекущийПользователь.ра_ПодписаниеSigФайлом Тогда
			ВызватьИсключение НСтр("ru = 'Пользователь не может подписывать sig файлом'; en = 'User cannot signing by sig file'");
		КонецЕсли;
		
		ДанныеФайла = ра_РаботаСПроцессами.ПолучитьОсновнойФайлДляДокумента(ДокументСсылка);
		
		РезультатПроверки =  Обработки.ра_ПодписатьДокумент.ПроверитьПодписьЧерезDSS(ДанныеФайла.ДвоичныеДанные, ДвоичныеДанные);
		Если НЕ РезультатПроверки.Успешно Тогда 
			ВызватьИсключение НСтр("ru = 'Не пройдена проверка подписи'; en = 'Signature verification failed'");
		КонецЕсли;
		
		Обработки.ра_ПодписатьДокумент.ПроверитьПодписьИЗаписатьРезультат(ДанныеФайла.ДвоичныеДанные, ДвоичныеДанные, ДанныеФайла.Файл, ДанныеФайла.Версия);
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(Новый Структура("guid_file", Строка(ДанныеФайла.Файл.УникальныйИдентификатор())));
		
		Результат.Вставить("value", МассивДанных);
		
		Возврат Результат;
		
	КонецЕсли;
		
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = ДвоичныеДанные;
	СведенияОФайле.АдресВременногоХранилищаТекста = "";
	СведенияОФайле.ЗаписатьВИсторию = Истина;
	СведенияОФайле.ИмяБезРасширения = СтруктураЗапроса.name_file;
	СведенияОФайле.РасширениеБезТочки = РасширениеБезТочки;
	СведенияОФайле.Размер = СтруктураЗапроса.size_file;
	СведенияОФайле.ПараметрыРаспознавания = Неопределено;
	СведенияОФайле.СписокКатегорий = Неопределено;
	
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(ФайлСсылка, СведенияОФайле);
	Иначе
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ДокументСсылка, СведенияОФайле);
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Новый Структура("guid_file", Строка(ФайлСсылка.УникальныйИдентификатор())));
	
	Результат.Вставить("value", МассивДанных);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СозданиеИзменениеУдалениеДанныхБД

Функция СоздатьНовыйОбъектБД(Результат, ЗапросHTTP)
	
	ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ИмяМетода);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
	
	СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		ОбъектДанных = МенеджерОбъекта.СоздатьЭлемент();
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ОбъектДанных = МенеджерОбъекта.СоздатьДокумент();
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		ОбъектДанных = МенеджерОбъекта.СоздатьМенеджерЗаписи();
	КонецЕсли;
	
	ЗаполнитьИЗаписатьОбъект(ОбъектДанных, СтруктураДанных, ПолноеИмяОбъекта);
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		Результат.Вставить("value", Новый Структура("Ref_Key", ОбъектДанных.Ссылка));
	Иначе
		Результат.Вставить("value", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменитьСуществующийОбъектБД(Результат, ЗапросHTTP)
	
	ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
	
	ПозицияСимвола = СтрНайти(ИмяМетода, "(");
	ПредставлениеОбъектаМетаданных = Сред(ИмяМетода, 1, ПозицияСимвола - 1);
	ГУИДОбъекта = Сред(ИмяМетода, ПозицияСимвола + 6, 36);
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданных);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	
	ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID(ГУИДОбъекта));
	Если Не ОбщегоНазначения.СсылкаСуществует(ОбъектСсылка) Тогда
		ВызватьИсключение "Object by guid not found";
	КонецЕсли;
	
	СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	Если ПолноеИмяОбъекта = "Задача.ЗадачаИсполнителя" // перенести код в модуль задачи
		 И СтруктураДанных.Свойство("Performer")
		 И СтруктураДанных.Performer <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Исполнитель") Тогда
		ПеренаправитьЗадачу(Результат, ЗапросHTTP);
		Возврат Результат;
	КонецЕсли;
	
	ОбъектДанных = ОбъектСсылка.ПолучитьОбъект();
	
	ЗаполнитьИЗаписатьОбъект(ОбъектДанных, СтруктураДанных, ПолноеИмяОбъекта);
	
	Результат.Вставить("value", Новый Структура("Ref_Key", ОбъектДанных.Ссылка));
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьСуществующийОбъектБД(Результат, ЗапросHTTP)
	
	ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
	
	ПозицияСимвола = СтрНайти(ИмяМетода, "(");
	ПредставлениеОбъектаМетаданных = Сред(ИмяМетода, 1, ПозицияСимвола - 1);
	ГУИДОбъекта = Сред(ИмяМетода, ПозицияСимвола + 6, 36);
	
	ПолноеИмяОбъекта = ПолучитьИмяТаблицыОбъектаПоИмениМетодаOData(ПредставлениеОбъектаМетаданных);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
		ИЛИ ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		
		ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID(ГУИДОбъекта));
		Если Не ОбщегоНазначения.СсылкаСуществует(ОбъектСсылка) Тогда
			ВызватьИсключение "Object by guid not found";
		КонецЕсли;
			
		ОбъектДанных = ОбъектСсылка.ПолучитьОбъект();
		ОбъектДанных.Удалить();
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		
		МенеджерЗаписи = МенеджерОбъекта.СоздатьМенеджерЗаписи();
		
		СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
		ЗаполнитьОбъектДанных(МенеджерЗаписи, СтруктураДанных);
		
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("УдалениеЗаписей");
		Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			Если ЗначениеЗаполнено(МенеджерЗаписи[ЭлементОтбора.Имя]) Тогда
				ЭлементОтбора.Установить(МенеджерЗаписи[ЭлементОтбора.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьИЗаписатьОбъект(НаборЗаписей, Новый Структура, ПолноеИмяОбъекта);
		
	КонецЕсли;
		
	Результат.Вставить("value", "Object was deleted");
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьКонтактнуюИнформацию(Результат, ЗапросHTTP)
	
	СтруктураЗапроса = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	СпособыУведомления = Новый ТаблицаЗначений;
	СпособыУведомления.Колонки.Добавить("СпособУведомления",	   Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУведомления"));
	СпособыУведомления.Колонки.Добавить("ВидКонтактнойИнформации", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	СпособыУведомления.Колонки.Добавить("ДанныеСпособа", 		   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	СпособыУведомления.Колонки.Добавить("Использовать", 		   Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(СтруктураЗапроса) = Тип("Структура") Тогда
		НачатьТранзакцию();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбъектПользователь = ПользователиКлиентСервер.ТекущийПользователь().ПолучитьОбъект();
		
		Если СтруктураЗапроса.Свойство("LanguageCode") Тогда
			Если СтруктураЗапроса.LanguageCode = "ru" Тогда
				Язык = Метаданные.Языки.Русский;
			ИначеЕсли СтруктураЗапроса.LanguageCode = "en" Тогда
				Язык = Метаданные.Языки.Английский;
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось выполнить настройку языка интерфейса по переданному коду.'; en = 'Can not find language by code'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектПользователь.ИдентификаторПользователяИБ) Тогда
				УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбъектПользователь.ИдентификаторПользователяИБ);
				Если УчетнаяЗапись = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось найти пользователя ИБ по указанному логину.'; en = 'Can not find infobase user by login'");
				КонецЕсли;
				УчетнаяЗапись.Язык = Язык;
				УчетнаяЗапись.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектПользователь.ра_ИдентификаторПользователяИБ) Тогда
				УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбъектПользователь.ра_ИдентификаторПользователяИБ);
				Если УчетнаяЗапись = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось найти пользователя ИБ по указанному логину.'; en = 'Can not find infobase user by login'");
				КонецЕсли;
				УчетнаяЗапись.Язык = Язык;
				УчетнаяЗапись.Записать();
			КонецЕсли;
			
			ОбъектПользователь.КодЯзыка = СтруктураЗапроса.LanguageCode;
			
			// ТСК Близнюк С.И.; 19.11.2018; task#1654{
			//Если Не СтруктураЗапроса.Свойство("ContactInfo") Тогда
			Если Не СтруктураЗапроса.Свойство("ContactInfo") И НЕ СтруктураЗапроса.Свойство("Status") Тогда
			// ТСК Близнюк С.И.; 19.11.2018; task#1654}
			
				ОбъектПользователь.Записать();
				
				ЗафиксироватьТранзакцию();
				
				Результат.Вставить("value", НСтр("ru = 'Язык пользователя успешно обновлен'; en = 'Language of user updated successfully'"));
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		// ТСК Близнюк С.И.; 19.11.2018; task#1654{
		Если СтруктураЗапроса.Свойство("Status") Тогда
			
			ОбъектПользователь.ra_Status = СтруктураЗапроса.Status;
			
			Если Не СтруктураЗапроса.Свойство("ContactInfo") Тогда
				ОбъектПользователь.Записать();
				
				ЗафиксироватьТранзакцию();
				
				Результат.Вставить("value", НСтр("ru = 'Статус пользователя успешно обновлен'; en = 'Status of user updated successfully'"));
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		// ТСК Близнюк С.И.; 19.11.2018; task#1654}
		
		Если Не СтруктураЗапроса.Свойство("ContactInfo") Тогда
			ВызватьИсключение НСтр("ru = 'Не заданы параметры запроса'; en = 'No query parameters found'");
		КонецЕсли;
		
		Если Не ТипЗнч(СтруктураЗапроса.ContactInfo) = Тип("Массив") Тогда
			ВызватьИсключение НСтр("ru = 'Параметры запроса должны быть в массиве'; en = 'Invalid type of parametrs'");
		КонецЕсли;
		
		// очистим в табличной части "Контактная информация" для пользователя данные по e-mail и SMS
		Запрос_СтрокиКИКУдалению = Новый Запрос;
		Запрос_СтрокиКИКУдалению.УстановитьПараметр("Ссылка", ОбъектПользователь.Ссылка);
		Запрос_СтрокиКИКУдалению.Текст =
		"ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Ссылка
		|	И (ПользователиКонтактнаяИнформация.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон), ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			ИЛИ ПользователиКонтактнаяИнформация.ВидДляСписка.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон), ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки УБЫВ";
		ВыборкаДетальныеЗаписи = Запрос_СтрокиКИКУдалению.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектПользователь.КонтактнаяИнформация.Удалить(ВыборкаДетальныеЗаписи.НомерСтроки - 1);
		КонецЦикла;
		
		СпособыУведомления.Очистить();
		
		Для Каждого ЭлМассива из СтруктураЗапроса.ContactInfo Цикл
			
			ВидКонтактнойИнформации    = Неопределено;
			СпособПолученияУведомления = Неопределено;
			ТипКИ = Неопределено;
			
			ИндексВидаКИ = 1;
			
			Если ЭлМассива.Свойство("MethodOfNotification") Тогда
				Если ЭлМассива.MethodOfNotification = "ПоПочте" Тогда
					СпособПолученияУведомления = Перечисления.СпособыУведомления.ПоПочте;
					типКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ИначеЕсли ЭлМассива.MethodOfNotification = "ПоSMS" Тогда
					СпособПолученияУведомления = Перечисления.СпособыУведомления.ПоSMS;
					типКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
				Иначе
					ВызватьИсключение НСтр("ru = 'Не удалось найти способ уведомления по переданному значению'; en = 'No notification method found'");
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлМассива.Свойство("Guid_KindOfContactInformation") Тогда
				Если ЭлМассива.Guid_KindOfContactInformation = "00000000-0000-0000-0000-000000000000" Тогда
					ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
				ИначеЕсли Не ПустаяСтрока(ЭлМассива.Guid_KindOfContactInformation) Тогда
					ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(GUID(ЭлМассива.Guid_KindOfContactInformation));
					Если Не ОбщегоНазначения.СсылкаСуществует(ВидКонтактнойИнформации) Тогда
						ВызватьИсключение "No kind of contact information object found";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭлМассива.Свойство("Value") Тогда
				ВызватьИсключение НСтр("ru = 'Нет данных для записи контактной информации'; en = 'No contact information found'");
			КонецЕсли;
			
			Для Каждого ЭлМассива_ЗначенияКИ из ЭлМассива.Value Цикл
				
				МассивПолейКИ = ЭлМассива_ЗначенияКИ["Value" + Формат(индексВидаКИ, "ЧГ=0")];
				
				Использовать     = Ложь;
				Представление 	 = "";
				КодСтраны_ДляТел = "";
				КодГорода_ДляТел = "";
				ДобавочныйНомер_ДляТел = "";
				Номер_ДляТел     = "";
				
				Для Каждого ЭлМассива_ПолеКИ из МассивПолейКИ Цикл
					Если ЭлМассива_ПолеКИ.Name = "XDTO_Use" Тогда
						Использовать = ЭлМассива_ПолеКИ.Value;
					ИначеЕсли ЭлМассива_ПолеКИ.Name = "XDTO_Presentation" Тогда
						Представление = ЭлМассива_ПолеКИ.Value;
					ИначеЕсли ЭлМассива_ПолеКИ.Name = "XDTO_NumberTel_CodeCountry" Тогда
						КодСтраны_ДляТел = ЭлМассива_ПолеКИ.Value;
					ИначеЕсли ЭлМассива_ПолеКИ.Name = "XDTO_NumberTel_CodeCity" Тогда
						КодГорода_ДляТел = ЭлМассива_ПолеКИ.Value;
					ИначеЕсли ЭлМассива_ПолеКИ.Name = "XDTO_NumberTel_AddNumber" Тогда
						ДобавочныйНомер_ДляТел = ЭлМассива_ПолеКИ.Value;
					ИначеЕсли ЭлМассива_ПолеКИ.Name = "XDTO_NumberTel_Number" Тогда
						Номер_ДляТел = ЭлМассива_ПолеКИ.Value;
					КонецЕсли;
				КонецЦикла;
				
				// проверка формата данных
				Если СпособПолученияУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
					
					// ТСК Корнюшенков А.Ю. добавлено условие на заполненность представления 03.09.2018 {
					Если не ЗначениеЗаполнено(Представление) Тогда 
						Продолжить;
					КонецЕсли;
					// ТСК Корнюшенков А.Ю. добавлено условие на заполненность представления 03.09.2018 }
					
					Если Не РаботаСУведомлениямиКлиентСервер.ЭтоКорректныйСпособУведомленияПоПочте(Представление) Тогда
						ВызватьИсключение НСтр("ru = 'Недопустимый формат строки для e-mail'; en = 'Invalid e-mail format'");
					КонецЕсли;
					
					ЗначенияПолей_xml_КИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКонтактнойИнформации)
					
				ИначеЕсли СпособПолученияУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
					
					ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
					
					Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
					Данные.КодСтраны  = КодСтраны_ДляТел;
					Данные.КодГорода  = КодГорода_ДляТел;
					Данные.Номер      = Номер_ДляТел;
					Данные.Добавочный = ДобавочныйНомер_ДляТел;
					
					Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеТелефона(Данные);
					
					Если Использовать И Не РаботаСУведомлениямиКлиентСервер.ЭтоКорректныйСпособУведомленияПоSMS(Представление) Тогда
						ВызватьИсключение НСтр("ru = 'Недопустимый формат строки для номера телефона'; en = 'Invalid mobile number format'");
					КонецЕсли;
					
					Результат_XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
					Результат_XDTO.Представление = Представление;
					Результат_XDTO.Состав = Данные;
					
					ЗначенияПолей_xml_КИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Результат_XDTO);
					
				КонецЕсли;
				
				// осуществляется запись контактной информации без проверки на изменение. Т.е. данные, пришедшие в 1С и прошедшие проверку должны быть записаны 			
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектПользователь, ЗначенияПолей_xml_КИ, ВидКонтактнойИнформации, типКИ,, Дата(1, 1, 1));
				
				ПозицияУведомления = СпособыУведомления.Добавить();
				ПозицияУведомления.ДанныеСпособа		   = Представление;
				ПозицияУведомления.ВидКонтактнойИнформации = ВидКонтактнойИнформации;
				ПозицияУведомления.СпособУведомления       = СпособПолученияУведомления;
				ПозицияУведомления.Использовать 		   = Использовать;
				
				ИндексВидаКИ = ИндексВидаКИ + 1;
			КонецЦикла;
		КонецЦикла;
		
		// Существующая КИ (до записи)
		ИсходныеСпособыУведомления = ПолучитьСпособыУведомленияПользователяИВсехПользователей_Локально(ОбъектПользователь.Ссылка);
		
		ОбъектПользователь.Записать();
		
		// чистим РС "Способы уведомления пользователей" и пишем в него новые данные
		НаборЗаписей = РегистрыСведений.СпособыУведомленияПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ОбъектПользователь.Ссылка);
		НаборЗаписей.Очистить();
		
		Для Каждого НовоеУведомление из СпособыУведомления Цикл
			// ищем по пустым данным (они по умолчанию должны быть для всех пользователей).
			// если есть, то записи с установленным флажком "Использовать" не пишем
			СтруктураОтбора = Новый Структура("СпособУведомления, ВидКонтактнойИнформации, ДанныеСпособа",
				НовоеУведомление.СпособУведомления, НовоеУведомление.ВидКонтактнойИнформации, "");
			
			Если Не ИсходныеСпособыУведомления.НайтиСтроки(СтруктураОтбора).Количество() Или Не НовоеУведомление.Использовать Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, НовоеУведомление);
				НоваяЗапись.Пользователь = ОбъектПользователь.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Результат.Вставить("value", НСтр("ru = 'Контактая информация успешно обновлена'; en = 'Contact information updated successfully'"));
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВариантыОтчетов

Функция ПолучитьВариантыОтчетов(Результат, ЗапросHTTP)
	
	ра_ОбменДанными.СформироватьМассивДанныхВариантовОтчетов(Результат,ЗапросHTTP);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьВариантОтчета(Результат, ЗапросHTTP)
	
	ИмяМетода = ЗапросHTTP.ПараметрыURL["ИмяМетода"];
	
	ПозицияСимвола = СтрНайти(ИмяМетода, "(");
	ГУИДОбъекта = Сред(ИмяМетода, ПозицияСимвола + 6, 36);
	
	НастройкаВариантаОтчета = Справочники.НастройкиВариантовОтчетовДокументооборот.ПолучитьСсылку(GUID(ГУИДОбъекта));
	
	ВариантОтчета = ВариантыОтчетов.ПолучитьСсылку(НастройкаВариантаОтчета.Отчет, НастройкаВариантаОтчета.КлючВарианта);
	
	Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
		ВызватьИсключение "Не найден вариант отчета по указанной ссылке: " + ГУИДОбъекта;
	КонецЕсли;
	
	ТелоЗапроса = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	НастройкиВарианта = ВариантОтчета.Настройки.Получить();
	
	Если НастройкиВарианта <> Неопределено Тогда
		//+++Установка параметров отчета
		ПараметрыДанных = НастройкиВарианта.ПараметрыДанных.Элементы;
		Для Каждого Структура Из ТелоЗапроса.Parameters Цикл
			ЭлементПараметр = ПараметрыДанных.Найти(Структура.Name);
			Если ЭлементПараметр <> Неопределено Тогда
				ЗаполнитьОбъектДанных(ЭлементПараметр, Новый Структура("Значение,Использование", Структура.Value, Истина));
			КонецЕсли;
		КонецЦикла;
		
		Если ТелоЗапроса.Свойство("format") И ТелоЗапроса.format = "excel" Тогда	
			  ПараметрыДанных.Найти("LoadExcel").Значение = Истина;	
		КонецЕсли;
		//---Установка параметров отчета

		
		Отбор = НастройкиВарианта.Отбор.Элементы;
		Для Каждого Структура Из ТелоЗапроса.Filters Цикл
			Для Каждого ЭлементОтбора ИЗ Отбор Цикл
				Если Строка(ЭлементОтбора.ЛевоеЗначение) = Структура.Name Тогда
					ЗаполнитьОбъектДанных(ЭлементОтбора, Новый Структура("ПравоеЗначение,Использование", Структура.Value, Истина));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураКомпоновки = НастройкиВарианта.Структура[0].Строки;
		
		ПоляКолонок = Новый Соответствие;
		
		Для Каждого ТекКолонка Из НастройкиВарианта.Структура[0].Колонки Цикл
			Если ТекКолонка.ПоляГруппировки.Элементы.Количество() <> 0 Тогда 
				ПоляКолонок.Вставить(Строка(ТекКолонка.ПоляГруппировки.Элементы[0].Поле), ТекКолонка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураКомпоновки.Очистить();
		
		Для Каждого ИмяГруппировки Из ТелоЗапроса.Groupings Цикл
			НоваяГруппировка = СтруктураКомпоновки.Добавить();
			НоваяГруппировка.Использование = Истина;
			
			ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяГруппировки);
			
			ПолеВыбор = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			СтруктураКомпоновки = НоваяГруппировка.Структура;
		КонецЦикла;
		
		// ТСК Близнюк С.И.; 08.11.2018; task#1668{
		// Раскомментировать когда битрикс вернет Sorts
		//ЭлементыПорядка = НастройкиВарианта.Порядок.Элементы;
		//ЭлементыПорядка.Очистить();
		//Для Каждого Сортировка Из ТелоЗапроса.Sorts Цикл
		//	НовыйПорядок = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		//	НовыйПорядок.Использование = Истина;
		//	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(Сортировка.Name);
		//	НовыйПорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных .Авто;
		//	НовыйПорядок.НаправлениеСортировкиКомпоновкиДанных = ?(Сортировка.AscendingSort, НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв); 
		//КонецЦикла;
		// ТСК Близнюк С.И.; 08.11.2018; task#1668}

	КонецЕсли;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("СсылкаВарианта", ВариантОтчета);
	ПараметрыФормирования.Вставить("СсылкаОтчета", НастройкаВариантаОтчета.Отчет);
	ПараметрыФормирования.Вставить("КлючВарианта", НастройкаВариантаОтчета.КлючВарианта);
	ПараметрыФормирования.Вставить("СсылкаВарианта", Неопределено);
	ПараметрыФормирования.Вставить("НастройкиКД",НастройкиВарианта);
	ПараметрыФормирования.Вставить("ПользовательскиеНастройкиКД", Новый ПользовательскиеНастройкиКомпоновкиДанных);
	
	РезультатФормирования = ВариантыОтчетов.СформироватьОтчет(ПараметрыФормирования, Ложь, Ложь);
	
	Если ТелоЗапроса.Свойство("format") Тогда
		ФорматОтчета = ТелоЗапроса.format;
	Иначе
		ФорматОтчета = "html";
	КонецЕсли;
	
	Если ФорматОтчета = "html" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("html");
	    РезультатФормирования.ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML5);
	
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		
		Текст = ТекстовыйДокумент.ПолучитьТекст();
		//Текст = СтрЗаменить(Текст, "background: #ffffff; margin: 0; font-family: Arial; font-size: 8pt; font-style: normal;", "");
		Текст = СтрЗаменить(Текст, "position:absolute;", "");
		//+++Костыль
		Текст = СтрЗаменить(Текст, "&lt;", "<");
		Текст = СтрЗаменить(Текст, "&gt;", ">");
		
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(Текст);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
		Таблицы = ДокументHTML.ПолучитьЭлементыПоИмени("table");
		Для Каждого ЭлементТаблица из Таблицы Цикл 
			ЭлементыСпан = ЭлементТаблица.ПолучитьЭлементыПоИмени("span");
			УдалитьТаблицу = Истина;
			Для Каждого Спан из ЭлементыСпан Цикл 
				Если Спан.ТекстовоеСодержимое <> "" Тогда
					    УдалитьТаблицу = Ложь;
						Прервать;
				КонецЕсли;
			КонецЦикла;
			Если  УдалитьТаблицу Тогда
				ЭлементТаблица.РодительскийУзел.УдалитьДочерний(ЭлементТаблица);
			КонецЕсли;

		КонецЦикла;
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
		Текст = ЗаписьHTML.Закрыть();
		//---Костыль
		
		ТекстовыйДокумент.УстановитьТекст(Текст);
		
		Поток = Новый ПотокВПамяти;
		ТекстовыйДокумент.Записать(Поток);
		
		ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		Расширение = "html";
		
	ИначеЕсли ФорматОтчета = "excel" Тогда
		
		Расширение = "xlsx";
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
		РезультатФормирования.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				
	КонецЕсли;
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование", "Report");
	СтруктураДанных.Вставить("Расширение", Расширение);
	СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Результат.Вставить("value", СтруктураДанных);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПочтовыеСообщения

Функция СоздатьПочтовоеСообщение(Результат, ЗапросHTTP)
	
	СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НаименованиеСистемыМониторингаИКонтроля = "";
	Критичность   = "";
	Услуга  	  = "";
	РабочаяГруппа = "";
	Адресат = Неопределено;
	Отправитель = Неопределено;
	
	ПараметрыИнтеграцииССУИТ = Константы.ра_ПараметрыИнтеграцииССУИТ.Получить().Получить();
	Если ТипЗнч(ПараметрыИнтеграцииССУИТ) = Тип("Структура") Тогда 
		НаименованиеСистемыМониторингаИКонтроля = ПараметрыИнтеграцииССУИТ.НаименованиеСистемыМониторингаИКонтроля;
		Критичность   = ПараметрыИнтеграцииССУИТ.Критичность;
		Услуга  	  = ПараметрыИнтеграцииССУИТ.Услуга;
		РабочаяГруппа = ПараметрыИнтеграцииССУИТ.РабочаяГруппа;
		Адресат		  = ПараметрыИнтеграцииССУИТ.ПолучательПисьма;
		Отправитель   = ПараметрыИнтеграцииССУИТ.ОтправительПисьма;
	КонецЕсли;	
	
	Если Не (ЗначениеЗаполнено(НаименованиеСистемыМониторингаИКонтроля)
		И ЗначениеЗаполнено(Критичность)
		И ЗначениеЗаполнено(Услуга)
		И ЗначениеЗаполнено(РабочаяГруппа)
		И ЗначениеЗаполнено(Адресат)
		И ЗначениеЗаполнено(Отправитель)) Тогда 
		ВызватьИсключение НСтр("ru = 'Не заполнены настройки интеграции с СУИТ. Обратитесь к администратору системы'; en = 'The settings for integration with the HelpDesk are not filled. Contact your system administrator.'");
	КонецЕсли;	
	
	Если Не (СтруктураДанных.Свойство("Subject")
		и ЗначениеЗаполнено(СтруктураДанных.Subject)) Тогда 
		ВызватьИсключение НСтр("ru = 'Не заполнена тема сообщения'; en = 'Message subject is not filled'");	
	КонецЕсли;
	
	Если Не (СтруктураДанных.Свойство("Text")
		и ЗначениеЗаполнено(СтруктураДанных.Text)) Тогда 
		ВызватьИсключение НСтр("ru = 'Не заполнен текст обращения'; en = 'Not filled the text of the appeal'");	
	КонецЕсли;
	
	ТемаПисьмаПользователя = СокрЛП(СтруктураДанных.Subject);
	Если СтрДлина(ТемаПисьмаПользователя) > 255 Тогда 
		ТемаПисьмаПользователя = Лев(ТемаПисьмаПользователя, 255);
	КонецЕсли;	
	
	ДанныеОПользователе = Новый Структура("Логин, Email", "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.ra_UserInter КАК UserInter,
		|	Пользователи.ra_UserGK КАК UserGK,
		|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """") КАК Email
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО (ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка
		|				И ПользователиКонтактнаяИнформация.Представление <> """")
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Вид = &Вид
		|	И Пользователи.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		
		Логин = "";
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.UserInter) Тогда 
			Логин = СокрЛП(Лев(ВыборкаДетальныеЗаписи.UserInter, СтрНайти(ВыборкаДетальныеЗаписи.UserInter, "@")-1));
		Иначе
			Логин = СокрЛП(Лев(ВыборкаДетальныеЗаписи.UserGK, СтрНайти(ВыборкаДетальныеЗаписи.UserGK, "@")-1));
		КонецЕсли;       
		
		ДанныеОПользователе.Логин = Логин;
				
		ДанныеОПользователе.Email = СокрЛП(ВыборкаДетальныеЗаписи.Email);
		
	КонецЕсли;
	
	ПараметрыИсполнителя = "";
	Если ЗначениеЗаполнено(ДанныеОПользователе.Email) Тогда 
		ПараметрыИсполнителя = ПараметрыИсполнителя + "~2" + ДанныеОПользователе.Email;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеОПользователе.Логин) Тогда 
		ПараметрыИсполнителя = ПараметрыИсполнителя + "~4" + ДанныеОПользователе.Логин + "~5" + ДанныеОПользователе.Логин;
	КонецЕсли;
	
	ТемаПисьма = "<" + НаименованиеСистемыМониторингаИКонтроля + ":" + Критичность + ">" + ТемаПисьмаПользователя + "<" + Услуга + ":" + РабочаяГруппа + ПараметрыИсполнителя + ">";
	
	ДокументОбъект = Документы.ИсходящееПисьмо.СоздатьДокумент();
	
	ДокументОбъект.Дата     = ТекущаяДата();
	ДокументОбъект.Автор    = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Важность = Перечисления.ВажностьПисем.Обычная;
	ДокументОбъект.ВидМаршрутизации   = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	ДокументОбъект.ОтправительКонтакт = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	ДокументОбъект.Тема 	 = ТемаПисьма;
	ДокументОбъект.ТекстХранилище = Новый ХранилищеЗначения(СтруктураДанных.Text, Новый СжатиеДанных);
	ДокументОбъект.ПодготовленоКОтправке = ДокументОбъект.Дата;
	
	ДокументОбъект.УчетнаяЗапись = Отправитель;
	
	СтрокаТЧ = ДокументОбъект.ПолучателиПисьма.Добавить();
	СтрокаТЧ.Адресат = Адресат;
	
	ДокументОбъект.Записать();
	
	Результат.Вставить("value", НСтр("ru = 'Сообщение отправлено.'; en = 'Message has been sent.'"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеКонфигурацииИБ

Функция ОбновитьКонфигурациюИБ(Результат, ЗапросHTTP)
	
	СтруктураДанных = ПрочитатьТелоЗапроса(ЗапросHTTP);
	
	Если СтруктураДанных.Свойство("updatefile") Тогда
		ДвоичныеДанные = Base64Значение(СтруктураДанных.updatefile); // прочитаем файл (передается строка Base64)
		Если Не ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка преобразования к типу ДвоичныеДанные'; en = 'Conversion error to Binary data type'");
		Иначе
			ИмяФайлаОбновления = ПолучитьИмяВременногоФайла("cf");
			ДвоичныеДанные.Записать(ИмяФайлаОбновления);
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'В запросе отсутствуют данные файла'; en = 'There is no data in the request'");
	КонецЕсли;
		
	Если Не СтруктураДанных.Свойство("nameadministratordb") Тогда
		ВызватьИсключение "Parameter is not specified ""nameadministratordb""";
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("administratordbpassword") Тогда
		ВызватьИсключение "Parameter is not specified ""administratordbpassword""";
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("nameclusteradministrator") Тогда
		ВызватьИсключение "Parameter is not specified ""nameclusteradministrator""";
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("clusteradministratorpassword") Тогда
		ВызватьИсключение "Parameter is not specified ""clusteradministratorpassword""";
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура;
	
	ПараметрыВызова.Вставить("ИмяФайлаОбновления", 						ИмяФайлаОбновления);
	ПараметрыВызова.Вставить("ИмяАдминистратораИнформационнойБазы", 	СтруктураДанных.nameadministratordb);
	ПараметрыВызова.Вставить("ПарольНеразделенногоАдминистратораИБ", 	СтруктураДанных.administratordbpassword);
	ПараметрыВызова.Вставить("ИмяАдминистратораКластера", 				СтруктураДанных.nameclusteradministrator);
	ПараметрыВызова.Вставить("ПарольАдминистратораКластера", 			СтруктураДанных.clusteradministratorpassword);
	ПараметрыВызова.Вставить("Лог", 									"");
	
	ра_ОбновлениеКонфигурацииИБ.ОбновитьКонфигурациюНаСервере(ПараметрыВызова);
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Новый Структура("status",  	"Update started."));
	МассивДанных.Добавить(Новый Структура("log_file", 	ПараметрыВызова.Лог));
	
	Результат.Вставить("value", ПараметрыВызова.Лог);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЛогФайла(Результат, ЗапросHTTP)
	
	ПараметрыЗапросаHTTP = ЗапросHTTP.ПараметрыЗапроса;
	
	ПутьФайла = ПараметрыЗапросаHTTP.Получить("$filepath");
	
	//ФайлПоИмени = Новый Файл(ИмяФайла);
	//ФайлСуществует = ФайлПоИмени.Существует();
	//	
	//Если Не ФайлСуществует Тогда
	//	ВызватьИсключение "File not found";
	//КонецЕсли;
	//
	//Текст = Новый ЧтениеТекста(ИмяФайла);
	//Лог = Текст.Прочитать();

	НайденныеФайлы = НайтиФайлы(ПутьФайла, "*.txt");
	Если НЕ НайденныеФайлы.Количество() Тогда
		ВызватьИсключение "File not found";
	КонецЕсли;
	Для каждого Файл Из НайденныеФайлы Цикл
		Текст = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Лог = Текст.Прочитать();
	КонецЦикла;
		
	Результат.Вставить("value", Лог);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция GUID(Текст)
	
	Попытка
		Возврат Новый УникальныйИдентификатор(Текст);
	Исключение
		ВызватьИсключение "guid is incorrect";
	КонецПопытки;
	
КонецФункции

Функция ЗаполнитьИЗаписатьОбъект(ОбъектДанных, СтруктураСвойств, ИмяОбъектаМетаданных)
	
	Результат = Новый Структура("code,value", 200, "");
	
	ЗаполнитьОбъектДанных(ОбъектДанных, СтруктураСвойств);
	
	Если ТипЗнч(ОбъектДанных) = Тип("РегистрСведенийМенеджерЗаписи.ra_PrichinyNesootvetstvij") И СтруктураСвойств.KodPrichiny = 0 Тогда // артефакт
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Nesootvetstvie", ОбъектДанных.Nesootvetstvie);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ra_PrichinyNesootvetstvij.KodPrichiny), 0) КАК KodPrichiny
		|ИЗ
		|	РегистрСведений.ra_PrichinyNesootvetstvij КАК ra_PrichinyNesootvetstvij
		|ГДЕ
		|	ra_PrichinyNesootvetstvij.Nesootvetstvie = &Nesootvetstvie";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ОбъектДанных.KodPrichiny = Выборка.KodPrichiny + 1;
	КонецЕсли;
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОбъектаМетаданных);
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
	
	НачатьТранзакцию();
	
	ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных);
	ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных);
	
	Если (ЭтоДокумент Или ЭтоСправочник) И ЗначениеЗаполнено(ОбъектДанных.Ссылка) Тогда
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить(ИмяОбъектаМетаданных);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектДанных.Ссылка);
		БлокировкаДанных.Заблокировать();
		
		Если ОбъектДанных.ВерсияДанных <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.Ссылка, "ВерсияДанных") Тогда
			ВызватьИсключение НСтр("ru = 'Версия объекта отличается от версии записанного объекта'; en = 'The version of the object differs from the version of the recorded object'");
		КонецЕсли;
	КонецЕсли;
	
	БезПроверкиЗаполнения = Ложь;
	
	Если ЭтоДокумент Тогда
		Если ОбъектМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Если СтруктураСвойств.Свойство("Parameters") И ТипЗнч(СтруктураСвойств.Parameters) = Тип("Структура")
				И СтруктураСвойств.Parameters.Свойство("DocumentWriteMode") И СтруктураСвойств.Parameters.DocumentWriteMode = "Write" Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
				БезПроверкиЗаполнения = Истина;
			КонецЕсли;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	КонецЕсли;
	
	Если БезПроверкиЗаполнения Или ОбъектДанных.ПроверитьЗаполнение() Тогда
		
		Если ЭтоДокумент Тогда
			ОбъектДанных.Записать(РежимЗаписи);
		Иначе
			ОбъектДанных.Записать();
		КонецЕсли;
		
		Если СтруктураСвойств.Свойство("TaskAction") И СтруктураСвойств.Свойство("TaskGuid") И
			Не ПустаяСтрока(СтруктураСвойств.TaskAction) И Не ПустаяСтрока(СтруктураСвойств.TaskGuid) Тогда
			
			Если СтрНайти(",RejectInvitation,Rejected,RefusalOfSignature,", "," + СтруктураСвойств.TaskAction + ",") Тогда
				Если Не (СтруктураСвойств.Свойство("TaskComment") И ЗначениеЗаполнено(СтруктураСвойств.TaskComment)) Тогда
					ВызватьИсключение НСтр("ru = 'Не заполнен комментарий при отклонении задачи'; en = 'Missing comment when a task is rejected'");
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураСвойств.TaskAction = "ReturnForRevork" И
					Не (СтруктураСвойств.Свойство("TaskComment") И
						ЗначениеЗаполнено(СтруктураСвойств.TaskComment)) Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнен комментарий'; en = 'Comment is not specified'");
			КонецЕсли;				
			
			Комментарий = "";
			Если СтруктураСвойств.Свойство("TaskComment") Тогда
				Комментарий = СтруктураСвойств.TaskComment;
			КонецЕсли;
			
			ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(GUID(СтруктураСвойств.TaskGuid));
			
			ВыполнитьЗадачуИсполнителя_Продолжение(ЗадачаСсылка, СтруктураСвойств.TaskAction, Комментарий);
			
			Результат.Вставить("value", "Task was perfomed");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьОбъектДанных(ОбъектДанных, СтруктураСвойств)
	
	Для Каждого ЭлементСтруктуры ИЗ СтруктураСвойств Цикл
		
		ИмяРеквизита = ЭлементСтруктуры.Ключ;
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_Key", "");
		ЗначениеРеквизита = ЭлементСтруктуры.Значение;
		
		Если ИмяРеквизита = "Presentation" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "НомерСтроки" ИЛИ ИмяРеквизита = "Ref" ИЛИ
			ИмяРеквизита = "TaskAction" ИЛИ ИмяРеквизита = "TaskComment" ИЛИ
			ИмяРеквизита = "TaskGuid" Или ИмяРеквизита = "Parameters" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "AdditionalProperties" Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДанных, "ДополнительныеСвойства") Тогда
				Для Каждого ДопСвойство Из ЗначениеРеквизита Цикл
					ОбъектДанных.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИмяРеквизита = "Delegate" Тогда
			ИмяРеквизита = "Кому";
		КонецЕсли;
		Если ИмяРеквизита = "RunUntill" Тогда
			ИмяРеквизита = "ДатаОкончанияДействия";
		КонецЕсли;
		Если ИмяРеквизита = "EffectiveDate" Тогда
			ИмяРеквизита = "ДатаНачалаДействия";
		КонецЕсли;
		
		РеквизитОбъекта = ОбъектДанных[ИмяРеквизита];
		ТипРеквизита = ТипЗнч(РеквизитОбъекта);
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
			
			МетаданныеРеквизита = РеквизитОбъекта.Метаданные();
			
			Если ОбщегоНазначения.ЭтоПеречисление(МетаданныеРеквизита) Тогда
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ОбъектДанных[ИмяРеквизита] = Перечисления[МетаданныеРеквизита.Имя].ПустаяСсылка();
				Иначе
					ОбъектДанных[ИмяРеквизита] = Перечисления[МетаданныеРеквизита.Имя][ЗначениеРеквизита];
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеРеквизита) Тогда
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ОбъектДанных[ИмяРеквизита] = Справочники[МетаданныеРеквизита.Имя].ПустаяСсылка();
				Иначе
					Ссылка = Справочники[МетаданныеРеквизита.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизита));
					ОбъектДанных[ИмяРеквизита] = Ссылка;
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеРеквизита) Тогда
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ОбъектДанных[ИмяРеквизита] = Документы[МетаданныеРеквизита.Имя].ПустаяСсылка();
				Иначе
					Ссылка = Документы[МетаданныеРеквизита.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизита));
					ОбъектДанных[ИмяРеквизита] = Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрНайти(Строка(ТипРеквизита), "табличная часть") > 0 Тогда
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
				
				ОбъектДанных[ИмяРеквизита].Очистить();
				
				Для Каждого СтрокаМассива Из ЗначениеРеквизита Цикл
					СтрокаТЧ = ОбъектДанных[ИмяРеквизита].Добавить();
					
					ЗаполнитьОбъектДанных(СтрокаТЧ, СтрокаМассива);
					
				КонецЦикла;
			КонецЕсли;
			
		// ТСК Близнюк С.И.; 06.12.2018; task#1888{
		// пока для Criterion в отчете, в дальнейшем должен тип из Битрикс приходить
		ИначеЕсли ТипРеквизита = Тип("СписокЗначений") И ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
				
			ОбъектДанных[ИмяРеквизита].Очистить();
			
			Для Каждого СтрокаМассива Из ЗначениеРеквизита Цикл
				ЭлементСпискаЗначений = ОбъектДанных[ИмяРеквизита].Добавить();
				ЭлементСпискаЗначений.Значение = Справочники.ра_ПоказателиОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаМассива));
			КонецЦикла;			
			
		// ТСК Близнюк С.И.; 06.12.2018; task#1888}
		Иначе
			
			Если ТипРеквизита = Тип("Дата") Тогда
				ЗначениеРеквизита = ПреобразоватьСтрокуВДату(ЗначениеРеквизита);
			КонецЕсли;
			
			ОбъектДанных[ИмяРеквизита] = ЗначениеРеквизита;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьСтрокуВДату(СтроковоеПредставление)
	
	Если ПустаяСтрока(СтроковоеПредставление) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "-", "");
	СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, ":", "");
	СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "T", "");
	
	Возврат Дата(СтроковоеПредставление);
	
КонецФункции

Функция ПолучитьHTTPОтветJSON(СтруктураДанных)
	
	КодОтвета = Число(СтруктураДанных.code);
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	Если СтруктураДанных.Свойство("value") И
		 ТипЗнч(СтруктураДанных.value) = Тип("Структура") И
		 СтруктураДанных.value.Свойство("ДвоичныеДанные") Тогда
		
		ДвоичныеДанные = СтруктураДанных.value.ДвоичныеДанные;
		Наименование = СтруктураДанных.value.Наименование;
		Расширение = СтруктураДанных.value.Расширение;
		
		ПолноеИмяФайла = Наименование + "." + Расширение;
		
		Ответ.Заголовки.Вставить("Content-type", "application/octet-stream; charset=utf-8");
		КодированноеПолноеИмяФайла = КодироватьСтроку(ПолноеИмяФайла, СпособКодированияСтроки.КодировкаURL);
		Ответ.Заголовки.Вставить("Content-Disposition", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("attachment; filename*=UTF-8'ru-ru'%1", КодированноеПолноеИмяФайла));
		
		Ответ.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		
	Иначе
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("odata.metadata");
		ЗаписьJSON.ЗаписатьЗначение("");
		
		Если СтруктураДанных.Свойство("button_settings") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("button_settings");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.button_settings,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("form_settings") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("form_settings");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.form_settings,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("filter_settings") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("filter_settings");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.filter_settings,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("main_menu") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("main_menu");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.main_menu,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("header_settings") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("header_settings");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.header_settings,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("FormCaption") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("FormCaption");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.FormCaption,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("filter_caption") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("filter_caption");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.filter_caption,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("value") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("value");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.value,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("messages") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("messages");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.messages,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("exception") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("exception");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.exception,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("detailed_exception") Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("detailed_exception");
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.exception,, "ПреобразованиеJSON", ра_ОбменДанными);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("Сообщение") Тогда
			СтруктураСообщение = СтруктураДанных.Сообщение;
			Если ТипЗнч(СтруктураСообщение) = Тип("ОбъектXDTO") Тогда
				Если СтруктураСообщение.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/DMX","XResponse") Тогда
					
					Ответ.Заголовки.Вставить("Mobile1C", "1");
					
					ЗаписьJSON.ЗаписатьИмяСвойства("ResponseID");
					ЗаписатьJSON(ЗаписьJSON, Строка(СтруктураСообщение.ResponseID));
					ЗаписьJSON.ЗаписатьИмяСвойства("ExchangeData");
					ЗаписатьJSON(ЗаписьJSON, Base64Строка(СтруктураСообщение.ExchangeData));
					ЗаписьJSON.ЗаписатьИмяСвойства("PartIndex");
					ЗаписатьJSON(ЗаписьJSON, СтруктураСообщение.PartIndex);
					ЗаписьJSON.ЗаписатьИмяСвойства("PartCount");
					ЗаписатьJSON(ЗаписьJSON, СтруктураСообщение.PartCount);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаПоСтроковомуПредставлению(ОбъектМетаданных, ИмяРеквизита, СтроковоеПредставление)
	
	ТаблицаДанных = ОбщегоНазначения.ПолучитьТаблицуОписанияСвойствОбъекта(ОбъектМетаданных, "Имя,Тип");
	
	ЗначениеРеквизита = СтроковоеПредставление;
	
	СтрокаТЗ = ТаблицаДанных.Найти(ИмяРеквизита, "Имя");
	Если СтрокаТЗ <> Неопределено Тогда
		ТипРеквизита = СтрокаТЗ.Тип.Типы()[0];
		Если ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
			СтроковоеПредставлениеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипРеквизита);
			СтроковоеПредставлениеТипа = СтрЗаменить(СтроковоеПредставлениеТипа, "Ссылка", "");
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтроковоеПредставлениеТипа);
			Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				ЗначениеРеквизита = МенеджерОбъекта[СтроковоеПредставление];
			Иначе
				ЗначениеРеквизита = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтроковоеПредставление));
			КонецЕсли;
		ИначеЕсли ТипРеквизита = Тип("Число") Тогда
			ЗначениеРеквизита = Число(СтроковоеПредставление);
		ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
			ЗначениеРеквизита = ПреобразоватьСтрокуВДату(СтроковоеПредставление);
		Иначе
			ЗначениеРеквизита = СтроковоеПредставление;
		КонецЕсли;
	Иначе //здесь будут исключения для гуидов, которые не являются реквизитами объекта
		Если ИмяРеквизита = "FormaOS" Тогда
			ЗначениеРеквизита = Перечисления.ra_FormyOcenkiSootvetstviya[СтроковоеПредставление];
		ИначеЕсли ИмяРеквизита = "Nesootvetstvie" Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор(СтроковоеПредставление);
			ЗначениеРеквизита = Документы.ra_Nesootvetstvie.ПолучитьСсылку(УникальныйИдентификатор);
		ИначеЕсли ИмяРеквизита = "EhtapVyyavleniyaNesootvetstvija"
			ИЛИ ИмяРеквизита = "EhtapVyyavleniyaNesootvetstviya"
			ИЛИ ИмяРеквизита = "EhtapVyyavleniya" Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор(СтроковоеПредставление);
			ЗначениеРеквизита = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.ПолучитьСсылку(УникальныйИдентификатор);
		ИначеЕсли ИмяРеквизита = "VidPredmetaNesootvetstviya" Тогда
			Если ЗначениеЗаполнено(СтроковоеПредставление) Тогда
				ЗначениеРеквизита = Перечисления.ra_VidyPredmetovNesootvetstviya[СтроковоеПредставление];	
			Иначе
				ЗначениеРеквизита = Перечисления.ra_VidyPredmetovNesootvetstviya.ПустаяСсылка();
			КонецЕсли;
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 22.10.2018 {
		ИначеЕсли ИмяРеквизита = "ра_Организация" Тогда 
			УникальныйИдентификатор = Новый УникальныйИдентификатор(СтроковоеПредставление);
			ЗначениеРеквизита = Справочники.Контрагенты.ПолучитьСсылку(УникальныйИдентификатор);
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 22.10.2018 } 	
		ИначеЕсли ИмяРеквизита = "VidKontrolnoyOperacii" Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор(СтроковоеПредставление);
			ЗначениеРеквизита = Справочники.ra_VidyKontrolnyhOperacij.ПолучитьСсылку(УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Функция ПолучитьСписокФайловДляОбъектов(ВладельцыФайлов, Первые = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ %1
	|	ВерсииФайлов.Владелец.ВладелецФайла КАК ВладелецФайла,
	|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
	|	ВерсииФайлов.Владелец.Описание КАК Описание,
	|	ВерсииФайлов.Расширение КАК Расширение,
	|	ВерсииФайлов.Владелец КАК Ссылка,
	|	ВерсииФайлов.Размер КАК Размер
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец.ТекущаяВерсия = ВерсииФайлов.Ссылка
	|	И ВерсииФайлов.Владелец.ПометкаУдаления = ЛОЖЬ
	|	И ВерсииФайлов.Владелец.ВладелецФайла В (&ВладельцыФайлов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, Первые);
	
	Запрос.УстановитьПараметр("ВладельцыФайлов", ВладельцыФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСписокПапокНД()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов
	|ГДЕ
	|	НЕ ПометкаУдаления И ра_НормативнаяДокументация");
	
	МассивПапок = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПапок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивПапок;
	
КонецФункции

Функция ПрочитатьТелоЗапроса(ЗапросHTTP)
	
	ТелоЗапроса = ЗапросHTTP.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	  	
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

// Записать событие в регистр ра_ПротоколОбменаСБитрикс
Процедура ЗаписатьПротоколОбменаСБитрикс(HTTPЗапрос, HTTPОтвет, ЭтоОшибка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ра_ВестиПротоколОбменаСБитрикс.Получить() И Не ЭтоОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Дата = ТекущаяДатаСеанса();
	
	Описание = Новый Структура("HTTPМетод,БазовыйURL,Заголовки,ОтносительныйURL,ПараметрыURL,ПараметрыЗапроса");
	ЗаполнитьЗначенияСвойств(Описание, HTTPЗапрос);
	Попытка
		Описание.Вставить("Тело", HTTPЗапрос.ПолучитьТелоКакСтроку());
		ОписаниеЗапроса = ОбщегоНазначения.ЗначениеВСтрокуXML(Описание);
	Исключение
		Описание.Вставить("Тело", HTTPЗапрос.ПолучитьТелоКакДвоичныеДанные());
		ОписаниеЗапроса = ОбщегоНазначения.ЗначениеВСтрокуXML(Описание);
	КонецПопытки;
	
	Описание = Новый Структура("Заголовки,КодСостояния,Причина");
	ЗаполнитьЗначенияСвойств(Описание, HTTPОтвет);
	Попытка
		Описание.Вставить("Тело", HTTPОтвет.ПолучитьТелоКакСтроку());
		ОписаниеОтвета = ОбщегоНазначения.ЗначениеВСтрокуXML(Описание);
	Исключение
		Описание.Вставить("Тело", HTTPОтвет.ПолучитьТелоКакДвоичныеДанные());
		ОписаниеОтвета = ОбщегоНазначения.ЗначениеВСтрокуXML(Описание);
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.ра_ПротоколОбменаСБитрикс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Дата.Установить(Дата);
	НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Дата = Дата;
	НоваяЗапись.ИдентификаторСеанса = ИдентификаторСеанса;
	НоваяЗапись.Пользователь = Пользователь;
	НоваяЗапись.ИмяМетода = HTTPЗапрос.ПараметрыURL["ИмяМетода"];
	НоваяЗапись.HTTPЗапрос = ОписаниеЗапроса;
	НоваяЗапись.HTTPОтвет = ОписаниеОтвета;
	НоваяЗапись.ЭтоОшибка = ЭтоОшибка;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СтраницаФормы(СтрокаФильтр)
	
	МассивУсловий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФильтр, " and ");
	
	Для Каждого Условие ИЗ МассивУсловий Цикл
		МассивКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Условие, " eq ");
		Если НРег(МассивКлючЗначение[0]) = "page" Тогда
			СтрокаФильтр = СтрЗаменить(СтрокаФильтр, Условие, " ");
			
			Возврат МассивКлючЗначение[1];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТестПользователя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ра_Подсистема КАК Подсистема
	|ПОМЕСТИТЬ ВТ_Подсистемы
	|ИЗ
	|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|		ПО ПолномочияПользователей.Полномочия = ПрофилиГруппДоступа.Ссылка
	|			И (ПолномочияПользователей.Владелец = &Пользователь)
	|			И (ПрофилиГруппДоступа.ра_Подсистема <> ЗНАЧЕНИЕ(Перечисление.ra_PodsistemyEOSK.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиГруппДоступа.ра_Подсистема
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Подсистемы.Подсистема) КАК Количество
	|ПОМЕСТИТЬ ВТ_Количество
	|ИЗ
	|	ВТ_Подсистемы КАК ВТ_Подсистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ra_TestyPodsistemy.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Тесты
	|ИЗ
	|	Справочник.ra_Testy.Podsistemy КАК ra_TestyPodsistemy
	|
	|СГРУППИРОВАТЬ ПО
	|	ra_TestyPodsistemy.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ra_TestyPodsistemy.Podsistema) В
	|		(ВЫБРАТЬ
	|			вт_количество.Количество
	|		ИЗ
	|			вт_количество КАК вт_количество)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ra_TestyPodsistemy.Ссылка КАК Тест,
	|	ra_TestyPodsistemy.Podsistema КАК Podsistema,
	|	ВТ_Количество.Количество КАК Количество
	|ИЗ
	|	Справочник.ra_Testy.Podsistemy КАК ra_TestyPodsistemy,
	|	ВТ_Количество КАК ВТ_Количество
	|ГДЕ
	|	ra_TestyPodsistemy.Podsistema В
	|			(ВЫБРАТЬ
	|				ВТ_Подсистемы.Подсистема
	|			ИЗ
	|				ВТ_Подсистемы КАК ВТ_Подсистемы)
	|	И ra_TestyPodsistemy.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Тесты.Ссылка
	|			ИЗ
	|				ВТ_Тесты КАК ВТ_Тесты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ra_TestyPodsistemy.Ссылка,
	|	ra_TestyPodsistemy.Podsistema,
	|	ВТ_Количество.Количество
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Podsistema),
	|	МАКСИМУМ(Количество)
	|ПО
	|	Тест";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Podsistema = Выборка.Количество Тогда
				Возврат Выборка.Тест;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Справочники.ra_Testy.ПустаяСсылка();

КонецФункции

Функция РезультатПрохожденияТеста(РезультатТестирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вопросы.Vopros КАК Vopros,
	|	Вопросы.Otvet КАК Otvet
	|ПОМЕСТИТЬ ВТ_Вопросы
	|ИЗ
	|	&Вопросы КАК Вопросы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Вопросы.Vopros) КАК КоличествоПравильныхОтветов
	|ИЗ
	|	ВТ_Вопросы КАК ВТ_Вопросы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ra_VariantyOtvetov КАК ra_VariantyOtvetov
	|		ПО ВТ_Вопросы.Vopros = ra_VariantyOtvetov.Владелец
	|			И (ra_VariantyOtvetov.Pravilniy)
	|			И (ВТ_Вопросы.Otvet = ra_VariantyOtvetov.Ссылка)
	|ГДЕ
	|	НЕ ra_VariantyOtvetov.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Вопросы", РезультатТестирования.Voprosy.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КоличествоПравильныхОтветов = Выборка.КоличествоПравильныхОтветов;
		
	Возврат КоличествоПравильныхОтветов >= РезультатТестирования.KolichestvoOtvetovDlyaSdachiTesta;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииМобильногоОбмена

Функция СобратьОтветКлиенту(МобильныйКлиент, ИдентификаторПринятогоСообщения, НомерПринятойЧасти)

	УстановитьПривилегированныйРежим(Истина);

	КодКлиента = МобильныйКлиент.Код;

	// Если клиент передал информацию о ранее принятом сообщении, то проверим, полностью ли 
	// передано сообщение. Если сообщение передано полностью, то пометим его на удаление и 
	// укажем, что необходимо передавать первую часть очередного сообщения в очереди.
	Если Не ИдентификаторПринятогоСообщения = Неопределено 
	 И Не ИдентификаторПринятогоСообщения = "00000000-0000-0000-0000-000000000000" Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторПринятогоСообщения));
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СообщенияИнтегрированныхСистем.Ссылка,
			|	СообщенияИнтегрированныхСистем.ДанныеСообщения,
			|	СообщенияИнтегрированныхСистем.ДатаСоздания
			|ИЗ
			|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
			|ГДЕ
			|	СообщенияИнтегрированныхСистем.ИдентификаторСообщения = &ИдентификаторСообщения
			|	И НЕ СообщенияИнтегрированныхСистем.ПометкаУдаления
			|	И НЕ СообщенияИнтегрированныхСистем.Входящее";

		ВыборкаПринятыеСообщения = Запрос.Выполнить().Выбрать();

		Если ВыборкаПринятыеСообщения.Следующий() Тогда

			ПринятоеСообщение = ВыборкаПринятыеСообщения.Ссылка;
			ПринятоеСообщениеДатаСоздания = ВыборкаПринятыеСообщения.ДатаСоздания;
			Если НомерПринятойЧасти = ВыборкаПринятыеСообщения.ДанныеСообщения.Получить().Количество() Тогда

				ПринятоеСообщениеОбъект = ПринятоеСообщение.ПолучитьОбъект();
				ПринятоеСообщениеОбъект.УстановитьПометкуУдаления(Истина);

				РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьДатуПередачиКлиенту(
					ПринятоеСообщение,
					ТекущаяДатаСеанса());

				ИдентификаторПринятогоСообщения = Неопределено;

			КонецЕсли;

		Иначе
			ИдентификаторПринятогоСообщения = Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	// Выборка сообщений во входящей очереди сообщений, начиная с самого старого
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка,
		|	СообщенияИнтегрированныхСистем.ДатаСоздания,
		|	СообщенияИнтегрированныхСистем.ДанныеСообщения
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОчередиСообщенийИнтегрированныхСистем КАК ОчередиСообщенийИнтегрированныхСистем
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|			ПО ОчередиСообщенийИнтегрированныхСистем.Ссылка = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийИнтегрированныхСистем.Ссылка
		|ГДЕ
		|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
		|	И НЕ СообщенияИнтегрированныхСистем.ПометкаУдаления
		|	И НЕ СообщенияИнтегрированныхСистем.Входящее
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";

	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоСообщенийВОчереди = Выборка.Количество();
	СчетчикСообщений = 0;

	Пока Выборка.Следующий() Цикл
		СчетчикСообщений = СчетчикСообщений + 1;
		СообщениеСсылка = Выборка.Ссылка;

		// Получение процента готовности сообщения обмена
		ПроцентГотовности = 
			РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.ПолучитьПроцентГотовностиСообщения(
				СообщениеСсылка);

		СообщениеГотовоКПередаче = Ложь;

		Если ПроцентГотовности < 100 Тогда

			// Если сообщение еще готовится - проверим, выполняется ли соответствующее фоновое задание
			СтруктураОтбора = Новый Структура("Наименование", КодКлиента);

			МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			ЕстьАктивноеЗадание = Ложь;

			Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл

				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда

					ЕстьАктивноеЗадание = Истина;

					Попытка
						// Подождем, вдруг фоновое задание завершится.
						// Если так, то сервер сразу начнет возвращать части сообщения.
						ФоновоеЗадание.ОжидатьЗавершения(3);

						// если задание завершилось само пометим что оно больше не активно
						ЕстьАктивноеЗадание = Ложь;

					Исключение
					КонецПопытки;

					Прервать;

				КонецЕсли;

			КонецЦикла;

			// Если по еще не готовому сообщению выполняется фоновое задание, которое его готовит, 
			// то возвращается процент готовности этого сообщения обмена.

			Если ЕстьАктивноеЗадание Тогда

				Возврат СоздатьСообщениеЖдите();

			Иначе

				// Проверяем готовность еще раз - возможно ситуация, когда на момент проверки готовность была
				// меньше 100%, но на момент проверки активности задания - задание уже успело отработать, т.е.
				// задание готово и его нужно передавать.

				ПроцентГотовности = 
					РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.ПолучитьПроцентГотовностиСообщения(
						СообщениеСсылка);

				Если ПроцентГотовности = 100 Тогда
					// Задание успело подготовить сообщение до конца
					СообщениеГотовоКПередаче = Истина;

					Попытка
						//Пробуем получить объект монопольно.
						Объект = СообщениеСсылка.ПолучитьОбъект().Заблокировать();
					Исключение
						Возврат СоздатьСообщениеЖдите();
					КонецПопытки;

				Иначе

					// Процент готовности меньше 100 и активного задания нет, 
					// помечаем сообщение из очереди и переходим к передаче следующего сообщения.
					Попытка
						СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
						СообщениеОбъект.УстановитьПометкуУдаления(Истина);
					Исключение
						Возврат СоздатьСообщениеЖдите();
					КонецПопытки;

					Продолжить;

				КонецЕсли;

			КонецЕсли;

		Иначе
			СообщениеГотовоКПередаче = Истина;
		КонецЕсли;
		
		Если СообщениеГотовоКПередаче Тогда

			// Если сообщение готово, то оно передается на клиента по частям
			МассивЧастей = Выборка.ДанныеСообщения.Получить();

			Если МассивЧастей = Неопределено 
				Или ТипЗнч(МассивЧастей) <> Тип("Массив")
				Или МассивЧастей.Количество() = 0 Тогда

				// Пустое сообщение помечаем на удаление. 
				СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
				СообщениеОбъект.УстановитьПометкуУдаления(Истина);

				Продолжить;

			КонецЕсли;

			КоличествоЧастей = МассивЧастей.Количество();

			// Дошли до подготовленного сообщения обмена - необходимо передать очередную часть сообщения
			Если ИдентификаторПринятогоСообщения = Неопределено Или ПринятоеСообщение = Неопределено Тогда

				// Если информации о ранее загруженных частях нет, то передается первая часть первого сообщения
				Часть = МассивЧастей[0].Получить();
				Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");

				// Идентификатор части сообщения состоит из идентификатора сообщения и порядкового номера части
				Ответ.ResponseID   = Строка(СообщениеСсылка.ИдентификаторСообщения);
				Ответ.ExchangeData = Base64Строка(Часть);
				Ответ.PartIndex    = 1;
				Ответ.PartCount    = КоличествоЧастей + (КоличествоСообщенийВОчереди - СчетчикСообщений);

				Возврат Ответ;

			Иначе

				// Передается следующая за принятой часть сообщения
				Если Выборка.ДатаСоздания > ПринятоеСообщениеДатаСоздания
					Или НомерПринятойЧасти > КоличествоЧастей Тогда
					НомерПринятойЧасти = 0;
				КонецЕсли;

				Часть = МассивЧастей[НомерПринятойЧасти].Получить();

				// Идентификатор части сообщения состоит из идентификатора сообщения и порядкового номера части

				Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");
				Ответ.ExchangeData = Base64Строка(Часть);
				Ответ.ResponseID   = Строка(СообщениеСсылка.ИдентификаторСообщения);
				Ответ.PartIndex    = НомерПринятойЧасти + 1;
				Ответ.PartCount    = 
					(КоличествоЧастей - НомерПринятойЧасти) + (КоличествоСообщенийВОчереди - СчетчикСообщений);

				Возврат Ответ;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СоздатьСообщениеОК();

КонецФункции

Функция СоздатьСообщениеОК()
	
	Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");
	Ответ.ExchangeData = Base64Строка("");
	Ответ.ResponseID   = Строка(Новый УникальныйИдентификатор());
	Ответ.PartCount    = 0;
	Ответ.PartIndex    = 0;
	
	Возврат Ответ;
	
КонецФункции

Функция СоздатьСообщениеЖдите()
	
	Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");
	Ответ.ResponseID   = Строка(Новый УникальныйИдентификатор());
	Ответ.ExchangeData = Base64Строка("");
	Ответ.PartCount    = -1;
	Ответ.PartIndex    = -1;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти
