#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	КС = Новый КвалификаторыСтроки(500);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТаблицаПисем = Новый ТаблицаЗначений;
	ТаблицаПисем.Колонки.Добавить("Дата");
	ТаблицаПисем.Колонки.Добавить("Ссылка");
	ТаблицаПисем.Колонки.Добавить("Количество");
	ТаблицаПисем.Колонки.Добавить("ПометкаУдаления");
	ТаблицаПисем.Колонки.Добавить("Наименование");
	ТаблицаПисем.Колонки.Добавить("ВидОбъекта");
	ТаблицаПисем.Колонки.Добавить("Ответственный");
	ТаблицаПисем.Колонки.Добавить("Сумма");
	ТаблицаПисем.Колонки.Добавить("Валюта");
	ТаблицаПисем.Колонки.Добавить("Содержание", ОписаниеТиповС);
	ТаблицаПисем.Колонки.Добавить("ЕстьПросрочка");
	ТаблицаПисем.Колонки.Добавить("ДатаОтправки");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрКонтрагент = Настройки.ПараметрыДанных.Элементы.Найти("Контрагент").Значение;
	
	ДатаНачала = Дата(1,1,1); ДатаОкончания = Дата(1,1,1);
	Период = Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Если Период.Использование Тогда 
		ДатаНачала = Период.Значение.ДатаНачала;
		ДатаОкончания = Период.Значение.ДатаОкончания;
	КонецЕсли;
	
	ПараметрПометкаУдаления = Ложь;
	ПолеПометки = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл 
		Если Элемент.ЛевоеЗначение = ПолеПометки И Элемент.Использование Тогда 
			ПараметрПометкаУдаления = Элемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрПометкаУдаления = Ложь;
	ПолеПометки = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл 
		Если Элемент.ЛевоеЗначение = ПолеПометки И Элемент.Использование Тогда 
			ПараметрПометкаУдаления = Элемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Контрагент", ПараметрКонтрагент);
	ПараметрыОтчета.Вставить("ПометкаУдаления", ПараметрПометкаУдаления);
	ПараметрыОтчета.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаОкончания", ДатаОкончания);
	
	Делопроизводство.ПолучитьПисьмаКонтрагента(ТаблицаПисем, ПараметрыОтчета);
	
	// Добавляем здесь наборы для прочих объектов, т.к. иначе СКД может убирать поля на которые у пользователя нет прав.
	// Входящие документы
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы) Тогда
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Документы.Элементы.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.ИсточникДанных = "ИсточникДанных1";
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВходящиеДокументы.Ссылка,
			|	ТИПЗНАЧЕНИЯ(ВходящиеДокументы.Ссылка) КАК ВидОбъекта,
			|	ВЫБОР
			|		КОГДА ВходящиеДокументы.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ВходящиеДокументы.ДатаРегистрации
			|		ИНАЧЕ ВходящиеДокументы.ДатаСоздания
			|	КОНЕЦ КАК Дата,
			|	1 КАК Количество,
			|	ВходящиеДокументы.ПометкаУдаления,
			|	ВходящиеДокументы.Наименование,
			|	ВЫРАЗИТЬ(ВходящиеДокументы.Содержание КАК СТРОКА(500)) КАК Содержание,
			|	ВЫБОР
			|		КОГДА ВходящиеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ВходящиеДокументы.Ответственный
			|		ИНАЧЕ ВходящиеДокументы.Зарегистрировал
			|	КОНЕЦ КАК Ответственный,
			|	ВЫБОР
			|		КОГДА ВидыДокумента.УчитыватьСуммуДокумента
			|			ТОГДА ВходящиеДокументы.Сумма
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сумма,
			|	ВходящиеДокументы.Валюта,
			|	ВЫБОР
			|		КОГДА ВходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|				И ВходящиеДокументы.СрокИсполнения < &ТекущаяДата
			|				И ЕСТЬNULL(ТекущиеСостоянияДокументов.Состояние, ЛОЖЬ) = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьПросрочка,
			|	NULL КАК ДатаОтправки
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВходящихДокументов КАК ВидыДокумента
			|		ПО ВходящиеДокументы.ВидДокумента = ВидыДокумента.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
			|		ПО ВходящиеДокументы.Ссылка = ТекущиеСостоянияДокументов.Документ
			|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
			|ГДЕ
			|	ВходящиеДокументы.Отправитель = &Контрагент
			|{ГДЕ
			|	(ВЫБОР
			|			КОГДА ВходящиеДокументы.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА ВходящиеДокументы.ДатаРегистрации
			|			ИНАЧЕ ВходящиеДокументы.ДатаСоздания
			|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания)}";
			
		НаборДанных.Имя = "Входящие";
	КонецЕсли;
	
	// Исходящие документы
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы) Тогда
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Документы.Элементы.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.ИсточникДанных = "ИсточникДанных1";
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсходящиеДокументыПолучатели.Ссылка,
			|	ИсходящиеДокументыПолучатели.ДатаОтправки
			|ПОМЕСТИТЬ ИсходящиеДокументыПолучатели
			|ИЗ
			|	Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
			|ГДЕ
			|	ИсходящиеДокументыПолучатели.Получатель = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СвязиДокументов.Документ,
			|	СвязиДокументов.СвязанныйДокумент
			|ПОМЕСТИТЬ СвязиДокументов
			|ИЗ
			|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходящиеДокументыПолучатели КАК ИсходящиеДокументыПолучатели
			|		ПО (ИсходящиеДокументыПолучатели.Ссылка = СвязиДокументов.Документ)
			|ГДЕ
			|	СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
			|	И ТИПЗНАЧЕНИЯ(СвязиДокументов.СвязанныйДокумент) = ТИП(Справочник.ВходящиеДокументы)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсходящиеДокументы.Ссылка,
			|	ТИПЗНАЧЕНИЯ(ИсходящиеДокументы.Ссылка) КАК ВидОбъекта,
			|	ВЫБОР
			|		КОГДА ИсходящиеДокументы.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ИсходящиеДокументы.ДатаРегистрации
			|		ИНАЧЕ ИсходящиеДокументы.ДатаСоздания
			|	КОНЕЦ КАК Дата,
			|	1 КАК Количество,
			|	ИсходящиеДокументы.ПометкаУдаления,
			|	ИсходящиеДокументы.Наименование,
			|	ВЫРАЗИТЬ(ИсходящиеДокументы.Содержание КАК СТРОКА(500)) КАК Содержание,
			|	ВЫБОР
			|		КОГДА ИсходящиеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ИсходящиеДокументы.Ответственный
			|		ИНАЧЕ ИсходящиеДокументы.Подготовил
			|	КОНЕЦ КАК Ответственный,
			|	ВЫБОР
			|		КОГДА ВидыДокумента.УчитыватьСуммуДокумента
			|			ТОГДА ИсходящиеДокументы.Сумма
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сумма,
			|	ИсходящиеДокументы.Валюта,
			|	ВЫБОР
			|		КОГДА ИсходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|				И ИсходящиеДокументы.СрокИсполнения < &ТекущаяДата
			|				И СвязиДокументов.СвязанныйДокумент ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьПросрочка,
			|	ИсходящиеДокументыПолучатели.ДатаОтправки КАК ДатаОтправки
			|ИЗ
			|	ИсходящиеДокументыПолучатели КАК ИсходящиеДокументыПолучатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|		ПО (ИсходящиеДокументы.Ссылка = ИсходящиеДокументыПолучатели.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИсходящихДокументов КАК ВидыДокумента
			|		ПО (ИсходящиеДокументы.ВидДокумента = ВидыДокумента.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиДокументов КАК СвязиДокументов
			|		ПО (ИсходящиеДокументы.Ссылка = СвязиДокументов.Документ)
			|ГДЕ
			|	ИсходящиеДокументы.Получатели.Получатель = &Контрагент
			|{ГДЕ
			|	(ВЫБОР
			|			КОГДА ИсходящиеДокументы.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА ИсходящиеДокументы.ДатаРегистрации
			|			ИНАЧЕ ИсходящиеДокументы.ДатаСоздания
			|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания)}";
			
		НаборДанных.Имя = "Исходящие";
	КонецЕсли;
	
	// Мероприятия
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Мероприятия) Тогда 
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Документы.Элементы.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.ИсточникДанных = "ИсточникДанных1";
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникМероприятия.Ссылка,
			|	ТИПЗНАЧЕНИЯ(СправочникМероприятия.Ссылка) КАК ВидОбъекта,
			|	ВЫБОР
			|		КОГДА СправочникМероприятия.ДатаНачалаФакт <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА СправочникМероприятия.ДатаНачалаФакт
			|		ИНАЧЕ СправочникМероприятия.ДатаНачала
			|	КОНЕЦ КАК Дата,
			|	1 КАК Количество,
			|	СправочникМероприятия.ПометкаУдаления,
			|	СправочникМероприятия.Наименование,
			|	ВЫРАЗИТЬ(СправочникМероприятия.Описание КАК СТРОКА(500)) КАК Содержание,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СправочникМероприятия.Председатель) = ТИП(Справочник.Пользователи)
			|				И СправочникМероприятия.Председатель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА СправочникМероприятия.Председатель
			|		КОГДА ТИПЗНАЧЕНИЯ(СправочникМероприятия.Секретарь) = ТИП(Справочник.Пользователи)
			|				И СправочникМероприятия.Секретарь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА СправочникМероприятия.Секретарь
			|		КОГДА ТИПЗНАЧЕНИЯ(СправочникМероприятия.Организатор) = ТИП(Справочник.Пользователи)
			|				И СправочникМероприятия.Организатор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА СправочникМероприятия.Организатор
			|		КОГДА СправочникМероприятия.Куратор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА СправочникМероприятия.Куратор
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|	КОНЕЦ КАК Ответственный,
			|	0 КАК Сумма,
			|	NULL КАК Валюта,
			|	ВЫБОР
			|		КОГДА СправочникМероприятия.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
			|				И СправочникМероприятия.ДатаОкончания < &ТекущаяДата
			|				И 1 В
			|					(ВЫБРАТЬ
			|						1
			|					ИЗ
			|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
			|					ГДЕ
			|						СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
			|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьПросрочка,
			|	NULL КАК ДатаОтправки
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	(СправочникМероприятия.Предмет = &Контрагент
			|			ИЛИ СправочникМероприятия.Организатор = &Контрагент)
			|{ГДЕ
			|	(ВЫБОР
			|			КОГДА СправочникМероприятия.ДатаНачалаФакт <> ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА СправочникМероприятия.ДатаНачалаФакт
			|			ИНАЧЕ СправочникМероприятия.ДатаНачала
			|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания)}";
			
		НаборДанных.Имя = "Мероприятия";
		
	КонецЕсли;
	
	// Проекты
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Проекты) Тогда 
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Документы.Элементы.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.ИсточникДанных = "ИсточникДанных1";
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникПроекты.Ссылка,
			|	ТИПЗНАЧЕНИЯ(СправочникПроекты.Ссылка) КАК ВидОбъекта,
			|	СправочникПроекты.ТекущийПланНачало КАК Дата,
			|	1 КАК Количество,
			|	СправочникПроекты.ПометкаУдаления,
			|	СправочникПроекты.Наименование,
			|	ВЫРАЗИТЬ(СправочникПроекты.Описание КАК СТРОКА(500)) КАК Содержание,
			|	СправочникПроекты.Руководитель КАК Ответственный,
			|	0 КАК Сумма,
			|	NULL КАК Валюта,
			|	ВЫБОР
			|		КОГДА СправочникПроекты.ТекущийПланОкончание <> ДАТАВРЕМЯ(1, 1, 1)
			|				И СправочникПроекты.ТекущийПланОкончание < &ТекущаяДата
			|				И СправочникПроекты.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияПроектов.Завершен)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьПросрочка,
			|	NULL КАК ДатаОтправки
			|ИЗ
			|	Справочник.Проекты КАК СправочникПроекты
			|ГДЕ
			|	(СправочникПроекты.Заказчик = &Контрагент
			|			ИЛИ СправочникПроекты.ПроектнаяКоманда.Исполнитель = &Контрагент)
			|{ГДЕ
			|	(СправочникПроекты.ТекущийПланНачало МЕЖДУ &ДатаНачала И &ДатаОкончания)}";
			
		НаборДанных.Имя = "Проекты";
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПисем", ТаблицаПисем);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
