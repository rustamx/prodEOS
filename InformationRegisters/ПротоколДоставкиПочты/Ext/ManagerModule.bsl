
// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение - Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ВестиПротоколДоставкиПочты.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СрокХраненияПротоколаДоставкиПочты = Константы.СрокХраненияПротоколаДоставкиПочты.Получить(); // срок хранения в днях
	
	ДатаОтсечения = ТекущаяДата() - СрокХраненияПротоколаДоставкиПочты * 86400; // 86400 - секунд в сутках
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500000
		|	ПротоколДоставкиПочты.Дата КАК Дата,
		|	ПротоколДоставкиПочты.ИдентификаторСеанса,
		|	ПротоколДоставкиПочты.Письмо,
		|	ПротоколДоставкиПочты.ПорядковыйНомерСобытия
		|ИЗ
		|	РегистрСведений.ПротоколДоставкиПочты КАК ПротоколДоставкиПочты
		|ГДЕ
		|	ПротоколДоставкиПочты.Дата <= &ДатаОтсечения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаОтсечения", ДатаОтсечения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПротоколДоставкиПочты.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(Выборка.ИдентификаторСеанса);
		НаборЗаписей.Отбор.Письмо.Установить(Выборка.Письмо);
		НаборЗаписей.Отбор.ПорядковыйНомерСобытия.Установить(Выборка.ПорядковыйНомерСобытия);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление устаревших данных'; en = 'Purging outdated data'"), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегистрыСведений.ПротоколДоставкиПочты,, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура завершена успешно, обработано %1 записей'; en = 'Procedure completed successfully, processed %1 records'"), Выборка.Количество()));
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции


