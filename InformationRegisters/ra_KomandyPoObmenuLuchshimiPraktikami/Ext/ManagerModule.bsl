#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолномочияТекущегоПользователя(Несоответствие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ra_KomandyPoObmenuLuchshimiPraktikami.OtvetstvennyjZaKachestvo КАК ОтветственныйЗаКачество,
	|	ra_KomandyPoObmenuLuchshimiPraktikami.Kurator КАК Куратор
	|ИЗ
	|	РегистрСведений.ra_KomandyPoObmenuLuchshimiPraktikami КАК ra_KomandyPoObmenuLuchshimiPraktikami
	|ГДЕ
	|	ra_KomandyPoObmenuLuchshimiPraktikami.Nesootvetstvie = &Несоответствие
	|	И ra_KomandyPoObmenuLuchshimiPraktikami.Polzovatel = &Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ОтветственныйЗаКачество, Куратор",
			Выборка.ОтветственныйЗаКачество, Выборка.Куратор);
	Иначе
		Возврат Новый Структура("ОтветственныйЗаКачество, Куратор", Ложь, Ложь);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияBitrix

Процедура СформироватьМассивДанныхGetList(Результат, ПолноеИмя, ПараметрыЗапросаHTTP) Экспорт
	
	ОбъектМетаданных = Метаданные.РегистрыСведений.ra_KomandyPoObmenuLuchshimiPraktikami;
	
	ТаблицаРеквизитов = ра_ОбменДанными.ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
	
	АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов);
	
	ТекстЗапросаВложенныеТаблицы = ПолучитьТекстЗапросаВложенныеТаблицы();
	ТекстЗапросаСоединений = ПолучитьТекстЗапросаСоединений();
	
	Запрос = ра_ОбменДанными.ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ПолноеИмя, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		МассивКолонок = ПолучитьПолучитьМассивКолонокСписка();
		МассивКнопок = ПолучитьМассивКнопок(Запрос.Параметры);
		МассивФильтров = ПолучитьМассивФильтровСписка();
		Результат.Вставить("form_settings", МассивКолонок);
		Результат.Вставить("button_settings", МассивКнопок);
		Результат.Вставить("filter_settings", МассивФильтров);
		Результат.Вставить("header_settings", ПолучитьМассивЗаголовков());
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Kuratory", Новый Массив);
		СтруктураДанных.Вставить("OtvetstvennyeZaKachestvo", Новый Массив);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			СтруктураСтроки = ра_ОбщегоНазначения.ЭлементВыборкиВСтруктуру(Выборка, РезультатЗапроса);
			Если Выборка.Kurator Тогда
				СтруктураДанных.Kuratory.Добавить(СтруктураСтроки);
			КонецЕсли;
			
			Если Выборка.OtvetstvennyjZaKachestvo Тогда
				СтруктураДанных.OtvetstvennyeZaKachestvo.Добавить(СтруктураСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Вставить("value", СтруктураДанных);
	Иначе
		МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзЗапроса(Запрос);
		Результат.Вставить("value", МассивДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов)
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВложенныеТаблицы() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстЗапросаСоединений() Экспорт
	
	Возврат "";
	
КонецФункции

Функция СформироватьМассивДанныхРолевойМодели(ДокументОбъект, ПараметрыФормирования = Неопределено) Экспорт
	
	Возврат Обработки.ра_ФормыБитрикс.Создать().ОписаниеФормы(Метаданные.РегистрыСведений.ra_KomandyPoObmenuLuchshimiPraktikami, ДокументОбъект, ПараметрыФормирования);
	
КонецФункции

Функция ПолучитьМассивКнопок(МенеджерЗаписи) Экспорт
	
	ВидФормы = "ФормаОбъекта";
	Несоответствие = Документы.ra_Nesootvetstvie.ПустаяСсылка();
	Если ТипЗнч(МенеджерЗаписи) = Тип("Структура") Тогда
		ВидФормы = "ФормаСписка";
		Если МенеджерЗаписи.Свойство("Nesootvetstvie") Тогда
			Несоответствие = МенеджерЗаписи.Nesootvetstvie;
		КонецЕсли;
	Иначе
		Несоответствие = МенеджерЗаписи.Nesootvetstvie;
	КонецЕсли;
	
	Полномочия = РегистрыСведений.ra_KomandyPoObmenuLuchshimiPraktikami.ПолномочияТекущегоПользователя(Несоответствие);
	
	МассивКнопок = Новый Массив;
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		ИмяКнопки = "AddCurator";
		ОписаниеКнопки = НСтр("ru = 'Добавить куратора обмена лучшими практиками'; en = 'Add curator of best practice exchange team'");
		КнопкаДобавитьКуратора = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаДобавитьКуратора.Availability = Полномочия.Куратор;
		КнопкаДобавитьКуратора.Visibility = Полномочия.Куратор;
		
		ИмяКнопки = "AddResponsible";
		ОписаниеКнопки = НСтр("ru = 'Добавить ответственного за качество'; en = 'Add responsible for quality'");
		КнопкаДобавитьОтветственного = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаДобавитьОтветственного.Availability = Полномочия.Куратор;
		КнопкаДобавитьОтветственного.Visibility = Полномочия.Куратор;
		
		МассивКнопок.Добавить(КнопкаДобавитьКуратора);
		МассивКнопок.Добавить(КнопкаДобавитьОтветственного);
		
		////Кнопки для удаления ответственных
		//Запрос = Новый Запрос("
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ra_KomandyPoObmenuLuchshimiPraktikami.Organizaciya КАК Организация,
		//|	ra_KomandyPoObmenuLuchshimiPraktikami.Polzovatel КАК Пользователь
		//|ИЗ
		//|	РегистрСведений.ra_KomandyPoObmenuLuchshimiPraktikami КАК ra_KomandyPoObmenuLuchshimiPraktikami
		//|ГДЕ
		//|	ra_KomandyPoObmenuLuchshimiPraktikami.Nesootvetstvie = &Несоответствие
		//|	И НЕ Kurator");
		//
		//Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Счетчик = 1;
		//
		//Пока Выборка.Следующий() Цикл
		//	
		//	ИмяКнопки = "DeleteResponsible" + Формат(Счетчик, "ЧГ=");;
		//	
		//	ОписаниеКнопки = НСтр("ru = 'Удалить ответственного за качество'; en = 'Delete responsible for quality'");
		//	ГУИД = Строка(Выборка.Пользователь.УникальныйИдентификатор());
		//	
		//	КнопкаУдалитьОтветственного = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки, "Catalog_Пользователи", ГУИД);
		//	
		//	СтрокаТЗ = ТаблицаДоступа.Найти(Выборка.Организация, "Организация");
		//	Если СтрокаТЗ <> Неопределено Тогда
		//		КнопкаУдалитьОтветственного.Availability = СтрокаТЗ.ЕстьПравоДобавленияСотрудника;
		//	КонецЕсли;
		//	КнопкаУдалитьОтветственного.Visibility = КнопкаУдалитьОтветственного.Availability;
		//	
		//	КнопкаУдалитьОтветственного.Вставить("OrganizationGUID", Строка(Выборка.Организация.УникальныйИдентификатор()));
		//	
		//	МассивКнопок.Добавить(КнопкаУдалитьОтветственного);
		//	
		//	Счетчик = Счетчик + 1;
		//	
		//КонецЦикла;
		
	ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
		
		ИмяКнопки = "Save";
		ОписаниеКнопки = НСтр("ru = 'Сохранить'; en = 'Save'");
		КнопкаСохранить = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
		КнопкаСохранить.Availability = Полномочия.Куратор;
		КнопкаСохранить.Visibility = Полномочия.Куратор;
		
		МассивКнопок.Добавить(КнопкаСохранить);
		
	КонецЕсли;
	
	Возврат МассивКнопок;
	
КонецФункции

Функция ПолучитьПолучитьМассивКолонокСписка() Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ra_KomandyPoObmenuLuchshimiPraktikami;
	
	ТаблицаНастроек = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	ИзмеренияРегистра = МетаданныеРегистра.Измерения;
	РесурсыРегистра = МетаданныеРегистра.Ресурсы;
	
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, РесурсыРегистра.Organizaciya);
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, ИзмеренияРегистра.Polzovatel);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивФильтровСписка() Экспорт
	
	МассивДанных = Новый Массив;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМассивЗаголовков(МассивДанных = Неопределено) Экспорт
	
	МассивЗаголовков = Новый Массив;
	
	Возврат МассивЗаголовков;
	
КонецФункции

//V2

Функция ЕстьМетодДополнитьОписаниеМетаданных() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьОписаниеМетаданных(ОбработкаОбъект, Данные, ПараметрыФормирования) Экспорт
	
	Если ПараметрыФормирования <> Неопределено Тогда
		Если ПараметрыФормирования.Свойство("Куратор") Тогда
			
			Данные.Kurator = Истина; // артефакт - перенести в обработку заполнения
			
			ОбработкаОбъект.ДобавитьПоле("", Новый Структура("Имя,Синоним,Тип", "FormCaption", НСтр("ru = 'Добавить куратора обмена лучшими практиками'; en = 'Add best practice exchange curator'"), Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100))));
			
		ИначеЕсли ПараметрыФормирования.Свойство("ОтветственныйЗаКачество") Тогда
			
			Данные.OtvetstvennyjZaKachestvo = Истина; // артефакт - перенести в обработку заполнения
			
			ОбработкаОбъект.ДобавитьПоле("", Новый Структура("Имя,Синоним,Тип", "FormCaption", НСтр("ru = 'Добавить ответственного за качество'; en = 'Add responsible for quality'"), Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50))));
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаОбъект.УстановитьВидимость("Organizaciya,Polzovatel", Истина);
	
	ОбработкаОбъект.УстановитьДоступность("Organizaciya,Polzovatel", Истина);
	
	//ОбязательныеРеквизиты = ОбработкаОбъект.ОбязательныеРеквизиты();
	//АктуализироватьМассивОбязательныхРеквизитов(ОбязательныеРеквизиты, Данные);
	//ОбработкаОбъект.УстановитьОбязательность(ОбязательныеРеквизиты, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли