
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.КоманднаяПанельДляПроцесса.Видимость = Ложь;
	Элементы.БизнесПроцесс.Видимость = Ложь;
	Элементы.Задача.Видимость = Ложь;
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	Элементы.Предмет.Видимость = Истина;
	
	Если Параметры.Свойство("БизнесПроцесс") Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.БизнесПроцесс) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Элементы.КоманднаяПанельДляПроцесса.Видимость = Истина;
		Элементы.БизнесПроцесс.Видимость = Истина;
		
		БизнесПроцесс = Параметры.БизнесПроцесс;
		
		Список.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПереносыСроковВыполненияПроцессовИЗадач.ДатаПереносаСрока,
			|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет,
			|	ВЫБОР
			|		КОГДА ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса <> ЗНАЧЕНИЕ(БизнесПроцесс.РешениеВопросовВыполненияЗадач.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПереносПоЗаявке,
			|	ПереносыСроковВыполненияПроцессовИЗадач.КомментарийАвтора,
			|	ПереносыСроковВыполненияПроцессовИЗадач.НовыйСрок,
			|	ПереносыСроковВыполненияПроцессовИЗадач.Пользователь,
			|	ПереносыСроковВыполненияПроцессовИЗадач.СтарыйСрок,
			|	ТИПЗНАЧЕНИЯ(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК ТипПредмета
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
			|ГДЕ
			|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет В(&Предметы)";
		
		Предметы = Новый Массив();
		Предметы.Добавить(БизнесПроцесс);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Предметы.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("Предметы", Предметы);
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК Колво
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
			|ГДЕ
			|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет В (&Предметы)";
		
		Запрос.УстановитьПараметр("Предметы", Предметы);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КоличествоПереносовСроков = Выборка.Колво;
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'История переносов сроков процесса (%1)'; en = 'Postponement history of process (%1)'"),
				Строка(КоличествоПереносовСроков));
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Задача") Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.Задача) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Элементы.КоманднаяПанельДляПроцесса.Видимость = Истина;
		Элементы.Задача.Видимость = Истина;
		Элементы.Предмет.Видимость = Ложь;
		
		Задача = Параметры.Задача;
		
		Список.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПереносыСроковВыполненияПроцессовИЗадач.ДатаПереносаСрока,
			|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет,
			|	ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса,
			|	ПереносыСроковВыполненияПроцессовИЗадач.КомментарийАвтора,
			|	ПереносыСроковВыполненияПроцессовИЗадач.НовыйСрок,
			|	ПереносыСроковВыполненияПроцессовИЗадач.Пользователь,
			|	ПереносыСроковВыполненияПроцессовИЗадач.СтарыйСрок,
			|	ВЫБОР
			|		КОГДА ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса <> ЗНАЧЕНИЕ(БизнесПроцесс.РешениеВопросовВыполненияЗадач.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПереносПоЗаявке
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
			|ГДЕ
			|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет = &Задача";
		
		Список.Параметры.УстановитьЗначениеПараметра("Задача", Задача);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК Колво
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ПереносыСроковВыполненияПроцессовИЗадач.Предмет = ЗадачаИсполнителя.Ссылка
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Задача);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КоличествоПереносов = Выборка.Колво;
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'История переносов сроков задачи (%1)'; en = 'Postponement history of task (%1)'"),
				Строка(КоличествоПереносов));
		КонецЕсли;
		
	Иначе
		
		Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
		
		Список.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.ДатаПереносаСрока,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.Предмет,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.Итерация,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.КомментарийАвтора,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.НовыйСрок,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.Пользователь,
			|	РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач.СтарыйСрок
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК РегистрСведенийПереносыСроковВыполненияПроцессовИЗадач";
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		Элементы.СтарыйСрок.Формат = "ДФ='dd.MM.yyyy'";
		Элементы.НовыйСрок.Формат = "ДФ='dd.MM.yyyy'";
		Элементы.СтарыйСрок.Ширина = 5;
		Элементы.НовыйСрок.Ширина = 5;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



