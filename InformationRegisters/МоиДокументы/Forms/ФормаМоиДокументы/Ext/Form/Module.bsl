#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	
	ЗаголовокСодержаниеФайлы = НСтр("ru = 'Содержание, Файлы'; en = 'Content, Files'");
	ЗаголовокЗадачиСвязи = НСтр("ru = 'Задачи, связи'; en = 'Tasks, relations'");		
	ФорматДатыДляКолонокЗадач = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"), 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	
	Элементы.ЗадачиСрокИсполнения.Формат = ФорматДатыДляКолонокЗадач;
	СортироватьПо = "ДатаДокумента";
	НаправлениеСортировки = "Возр";
	
	ДоступныхТиповДокументов = 0;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВнутренниеДокументы) Тогда 
		ДоступныхТиповДокументов = ДоступныхТиповДокументов + 1;
		ВнутренниеДоступны = Истина;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы) Тогда
		ДоступныхТиповДокументов = ДоступныхТиповДокументов + 1;
		ВходящиеДоступны = Истина;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы) Тогда
		ДоступныхТиповДокументов = ДоступныхТиповДокументов + 1;
		ИсходящиеДоступны = Истина;
	КонецЕсли;
	
	Если ДоступныхТиповДокументов < 2 Тогда 
		Элементы.СписокСгруппироватьПоТипуДокумента.Видимость = Ложь;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент);
		ЗаполнитьСписок();
	ИначеЕсли КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ДобавленВручную);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента);
		ЗаполнитьСписок();
	Иначе
		НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
		Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ОтмеченныеПричины") = Неопределено Тогда
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ДобавленВручную);
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне);
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня);
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента);
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент);
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента);
			ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента);
			
			ЗаполнитьСписок();
		КонецЕсли;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ОтображениеИстекающихДокументов"
		Или КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
		
		Элементы.ФормаГруппаСоздать.Видимость = Ложь;
		Элементы.ФормаДобавитьВСписок.Видимость = Ложь;
		Элементы.КонтекстноеМенюГруппаСоздать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюДобавитьВСписок.Видимость = Ложь;
		Для Каждого ЭлементГруппы Из Элементы.СписокГруппаОтбор.ПодчиненныеЭлементы Цикл
			ЭлементГруппы.Доступность = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПометкуРежимуСортировки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущееЗначениеГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДобавитьВыбранныйДокумент(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокМоиДокументы" Тогда
		ЗаполнитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ДокументСоздан" Тогда
		Если МоиДокументы.ДокументВходитВМоиДокументы(Параметр) Тогда 
			ЗаполнитьСписок();
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "ДокументИзменен" И Параметр = ТекущийДокумент Тогда
		ОбновитьМиникарточку();
	КонецЕсли;	
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
				Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = ТекущийДокумент Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			УстановитьДоступностьКоманд(ТекущиеДанные);
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = ТекущийДокумент Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И Параметр.СсылкаНаПредметБизнесПроцесса = ТекущийДокумент Тогда
			ОбзорСпискаДокументовКлиент.ЗаполнитьСписокЗадач(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = ТекущийДокумент Тогда
			
			ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтаФорма);
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
				ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиДокумента" И Параметр.Документ = ТекущийДокумент Тогда
		ОбзорСпискаДокументовКлиент.ЗаполнитьСвязи(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = ТекущийДокумент Тогда
		ОбзорСпискаДокументовКлиент.ЗаполнитьСвязи(ЭтаФорма);
	КонецЕсли;
	
	Если (ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" И Параметр = ТекущийДокумент)
		Или (ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = ТекущийДокумент) Тогда
		ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьГруппировку(ЭтаФорма);
	ЗаполнитьСписок();
	
	Список.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	СписокПолный.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	УстановитьПометкуРежимуСортировки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обзор
&НаКлиенте
Процедура ОбзорHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	ПрефиксСсылки = "v8doc:";
	ДлинаПрефикса = СтрДлина(ПрефиксСсылки);
	
	Если Лев(ДанныеСобытия.Href, ДлинаПрефикса) <> ПрефиксСсылки Тогда 
		Возврат;
	КонецЕсли;	
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, ДлинаПрефикса + 1);
	
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныДобавленияПриАктивизацииСтроки(Элемент)
	
	Если ВидГруппировки = "ПричинаДобавления"
		И Элементы.ПричиныДобавления.ТекущиеДанные <> Неопределено
		И Элементы.ПричиныДобавления.ТекущиеДанные.Причина <> ТекущаяПричина Тогда
		ТекущаяПричина = Элементы.ПричиныДобавления.ТекущиеДанные.Причина;
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировок", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыДокументовПриАктивизацииСтроки(Элемент)
	
	Если ВидГруппировки = "ТипДокумента"
		И Элементы.ТипыДокументов.ТекущиеДанные <> Неопределено
		И Элементы.ТипыДокументов.ТекущиеДанные.Тип <> ТекущийТип Тогда
		ТекущийТип = Элементы.ТипыДокументов.ТекущиеДанные.Тип;
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировок", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ВидГруппировки = "Проект"
		И Элементы.Проекты.ТекущиеДанные <> Неопределено
		И Элементы.Проекты.ТекущиеДанные.Проект <> ТекущийПроект Тогда
		ТекущийПроект = Элементы.Проекты.ТекущиеДанные.Проект;
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировок", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеДокумент = Неопределено;
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда 	
		ТекущиеДанныеДокумент = Элементы.Список.ТекущиеДанные.Документ;
	КонецЕсли;
	
	Если ТекущийДокумент <> ТекущиеДанныеДокумент Тогда 
		ПодключитьОбработчикОжидания("ОбновитьМиникарточку", 0.2, Истина);
		ПодключитьОбработчикОжидания("УстановитьДоступностьКомандМенюОтправить", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если КлючНазначенияИспользования <> "" Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда 
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Документ);
		ИмяТаблицы = ИмяТаблицыПоСсылке(ТекущиеДанные.Документ);
		
		Открытьформу(ИмяТаблицы + ".ФормаОбъекта", ПараметрыФормы, Элементы.Список);
		
	Иначе	
		
		ДобавитьВСписок();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТаблицыПоСсылке(Документ)
	
	Возврат ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ);
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(,ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьИзСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(Строка.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = Ложь;
	Если ВестиУчетСканКопийОригиналовДокументов Тогда
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда 
			
			Если Не ПараметрыДобавления.Свойство("ДобавлениеОригинала") Тогда
				Текст = НСтр("ru = 'В текущем состоянии документа можно добавить только скан-копию оригинала. Продолжить?'; en = 'In the current document state, you can only add a scanned copy of the original document. Continue?'");
				
				СписокВариантовОтветов = Новый СписокЗначений;
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
				
				ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
				
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Элемент", Элемент);
				ПараметрыОбработчика.Вставить("Отказ", Отказ);
				ПараметрыОбработчика.Вставить("Копирование", Копирование);
				ПараметрыОбработчика.Вставить("Родитель", Родитель);
				ПараметрыОбработчика.Вставить("Группа", Группа);
				ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ФайлыПередНачаломДобавленияКлиентПродолжение",
					ЭтотОбъект,
					ПараметрыОбработчика);
				
				ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
					НСтр("ru = 'Добавление файла'; en = 'Adding file'"),
					Текст,
					"ДобавлениеОригинала",
					"ЗадаватьВопросПриДобавленииСканКопииОригинала",
					СписокВариантовОтветов,,
					ОписаниеОповещения);
				Возврат;
			Иначе
				ДобавлениеОригинала = ПараметрыДобавления.ДобавлениеОригинала;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайла = ТекущийДокумент;
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, ДобавлениеОригинала);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", ТекущийДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.Файлы;
	
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда 
			
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'; en = 'Adding files is not permitted in current state ""%1"".'"),
				СостояниеТекст);
			ПоказатьПредупреждение(, Текст);
			
			Возврат;
		
		ИначеЕсли ВестиУчетСканКопийОригиналовДокументов 
			И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
			И Не ПеретаскиваниеОригинала Тогда
			
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'; en = 'In current state ""%1"" one can only add a scanned copy of the original document. Continue?'"),
				СостояниеТекст);
			
			СписокВариантовОтветов = Новый СписокЗначений;
			СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
			СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Элемент", Элемент);
			ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
			ПараметрыОбработчика.Вставить("Строка", Строка);
			ПараметрыОбработчика.Вставить("Поле", Поле);
			ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ФайлыПеретаскиваниеПродолжение",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
				НСтр("ru = 'Перетаскивание файла'; en = 'Dropping the file'"),
				Текст,
				"ДобавлениеОригинала",
				"ЗадаватьВопросПриДобавленииСканКопииОригинала",
				СписокВариантовОтветов,,
				ОписаниеОповещения);
			Возврат;
		
		КонецЕсли;
		
		Если ПеретаскиваниеОригинала Тогда 
			ТекстПредупреждения = "";
			ПараметрыПеретаскивания.Значение = ДелопроизводствоКлиент.ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(
				ПараметрыПеретаскивания, СостояниеТекст, ТекстПредупреждения);
				
			Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВладелецФайлаСписка = ТекущийДокумент;
		НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
		РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания,
			ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
			
		ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтаФорма);
		
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		ПеретаскиваниеОригинала = Ложь;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Истина;
	
	ФайлыПеретаскивание(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.ПараметрыПеретаскивания, 
		ПараметрыОбработчика.СтандартнаяОбработка, 
		ПараметрыОбработчика.Строка, 
		ПараметрыОбработчика.Поле);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСвязей

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадачи

&НаКлиенте
Процедура ЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команды отбора

&НаКлиенте
Процедура ОтборДобавленВручную(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ДобавленВручную");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;	
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНазначенаЗадачаМне(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправленаЗадачаОтМеня(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьАвторомДокумента(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьОтветственнымЗаДокумент(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьПодписантомДокумента(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьАвторомУтверждения(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

// Команды работы с файлами

&НаКлиенте
Процедура СоздатьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элементы.Файлы, Ложь, Ложь, Неопределено, Ложь, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'; en = 'Printing files is not supported in web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'; en = 'Printing files is only possible in Windows.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ОбновитьМиникарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ОбновитьМиникарточку();
	
	Элементы.ПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Команды работы со списком документов

&НаКлиенте
Процедура ДобавитьВСписокВыполнить(Команда)
	
	ДобавитьВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпискаВыполнить(Команда)
	
	УдалитьИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСписок();
	УстановитьТекущееЗначениеГруппировки();
	
КонецПроцедуры

// Команды списка задач

&НаКлиенте
Процедура ОткрытьПроцесс(Команда)
	
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры


&НаКлиенте
Процедура СортироватьДатеДокумента(Команда)
	
	СортироватьПоКолонке("ДатаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	СортироватьПоКолонке("Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВидуДокумента(Команда)
	
	СортироватьПоКолонке("ВидДокумента");
	
КонецПроцедуры

// Команды группировки

&НаКлиенте
Процедура СгруппироватьПричинеДобавления(Команда)
	
	СгруппироватьПоКолонке("ПричинаДобавления");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьПоКолонке("");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТипуДокумента(Команда)
	
	СгруппироватьПоКолонке("ТипДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	
	СгруппироватьПоКолонке("Проект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Согласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Утверждение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРегистрация(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Регистрация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Рассмотрение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ТипДокумента = ТипЗнч(ТекущийДокумент);
	
	ТипыОпераций = Новый Массив;
	
	Если ТипДокумента = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ТипыОпераций.Добавить("ОбработкаВнутреннегоДокумента");
	ИначеЕсли ТипДокумента = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		ТипыОпераций.Добавить("ОбработкаИсходящегоДокумента");
	ИначеЕсли ТипДокумента = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		ТипыОпераций.Добавить("ОбработкаВходящегоДокумента");
	КонецЕсли;
	
	ТипыОпераций.Добавить("КомплексныйПроцесс");
	
	ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, ТекущийДокумент, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьТекущееЗначениеГруппировки()
	
	УстановитьПараметрыГруппировокПриАктивизации = Ложь;
	
	Если ВидГруппировки = "ПричинаДобавления" И ПричиныДобавления.Количество() > 0 Тогда
		Если ТекущаяПричина <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Причина", ТекущаяПричина);
			НайденныеСтроки = ПричиныДобавления.НайтиСтроки(ПараметрыПоиска);
			ТекущаяПричина = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ПричиныДобавления.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
		
	ИначеЕсли ВидГруппировки = "ТипДокумента" И ТипыДокументов.Количество() > 0 
		И ДоступныхТиповДокументов > 1 Тогда
		Если ТекущийТип <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Тип", ТекущийТип);
			НайденныеСтроки = ТипыДокументов.НайтиСтроки(ПараметрыПоиска);
			ТекущийТип = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ТипыДокументов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
		
	ИначеЕсли ВидГруппировки = "Проект" И Проекты.Количество() > 0 Тогда
		Если ТекущийПроект <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Проект", ТекущийПроект);
			НайденныеСтроки = Проекты.НайтиСтроки(ПараметрыПоиска);
			ТекущийПроект = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.Проекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
		
	КонецЕсли;
	
	Если НЕ УстановитьПараметрыГруппировокПриАктивизации Тогда
		УстановитьПараметрыГруппировок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьПоКолонке(ИмяКолонки)
		
	Если СортироватьПо = ИмяКолонки Тогда
		Если НаправлениеСортировки = "Возр" Тогда
			НаправлениеСортировки = "Убыв";
		Иначе
			НаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		СортироватьПо = ИмяКолонки;
		НаправлениеСортировки = "Возр";
	КонецЕсли;
	
	Список.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	СписокПолный.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	
	УстановитьПометкуРежимуСортировки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуРежимуСортировки(Форма)
	
	Форма.Элементы.СортироватьДатеДокумента.Пометка = Ложь;
	Форма.Элементы.СортироватьДатеДокумента.Заголовок = НСтр("ru = 'Дата документа'; en = 'Document date'");
	
	Форма.Элементы.СортироватьПоНаименованию.Пометка = Ложь;
	Форма.Элементы.СортироватьПоНаименованию.Заголовок = НСтр("ru = 'Наименование'; en = 'Description'");
	
	Форма.Элементы.СортироватьПоВидуДокумента.Пометка = Ложь;
	Форма.Элементы.СортироватьПоВидуДокумента.Заголовок = НСтр("ru = 'Вид документа'; en = 'Document type'");

	Если Форма.СортироватьПо = "ДатаДокумента" Тогда
		Форма.Элементы.СортироватьДатеДокумента.Пометка = Истина;
		Форма.Элементы.СортироватьДатеДокумента.Заголовок = 
			СтрШаблон(НСтр("ru = 'Дата документа (%1)'; en = 'Document date (%1)'"),
				Форма.НаправлениеСортировки);
	ИначеЕсли Форма.СортироватьПо = "Наименование" Тогда
		Форма.Элементы.СортироватьПоНаименованию.Пометка = Истина;
		Форма.Элементы.СортироватьПоНаименованию.Заголовок = 
			СтрШаблон(НСтр("ru = 'Наименование (%1)'; en = 'Description (%1)'"),
				Форма.НаправлениеСортировки);
	ИначеЕсли Форма.СортироватьПо = "ВидДокумента" Тогда
		Форма.Элементы.СортироватьПоВидуДокумента.Пометка = Истина;
		Форма.Элементы.СортироватьПоВидуДокумента.Заголовок = 
			СтрШаблон(НСтр("ru = 'Вид документа (%1)'; en = 'Document type (%1)'"),
				Форма.НаправлениеСортировки);
	КонецЕсли;
	
	Форма.Элементы.КонтекстноеМенюСортироватьДатеДокумента.Пометка = 
		Форма.Элементы.СортироватьДатеДокумента.Пометка;
	Форма.Элементы.КонтекстноеМенюСортироватьДатеДокумента.Заголовок = 
		Форма.Элементы.СортироватьДатеДокумента.Заголовок;
	
	Форма.Элементы.КонтекстноеМенюСортироватьПоНаименованию.Пометка = 
		Форма.Элементы.СортироватьПоНаименованию.Пометка;
	Форма.Элементы.КонтекстноеМенюСортироватьПоНаименованию.Заголовок = 
		Форма.Элементы.СортироватьПоНаименованию.Заголовок;
	
	Форма.Элементы.КонтекстноеМенюСортироватьПоВидуДокумента.Пометка = 
		Форма.Элементы.СортироватьПоВидуДокумента.Пометка;
	Форма.Элементы.КонтекстноеМенюСортироватьПоВидуДокумента.Заголовок = 
		Форма.Элементы.СортироватьПоВидуДокумента.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(НовыйВидГруппировки)
	
	Если ВидГруппировки = НовыйВидГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ВидГруппировки = НовыйВидГруппировки;
	
	ПоказыватьОбластьГруппировки = ВидГруппировки <> "";
	
	УстановитьГруппировку(ЭтаФорма);
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГруппировок()
	
	УстановитьПараметрыГруппировокСервер(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыГруппировокСервер(ЭтаФорма)
	
	СписокПолный = ЭтаФорма.СписокПолный;
	
	ЭтаФорма.Список.Очистить();
	
	Для Каждого СтрокаДокумент Из СписокПолный Цикл
		
		Показывать = Истина;
		Если ЭтаФорма.ПоказыватьОбластьГруппировки Тогда
			Если ЭтаФорма.ВидГруппировки = "ПричинаДобавления" Тогда
				Показывать = СтрНайти(СтрокаДокумент.Причина, ЭтаФорма.ТекущаяПричина);
			ИначеЕсли ЭтаФорма.ВидГруппировки = "ТипДокумента" Тогда
				Показывать = СтрокаДокумент.ТипДокумента = ЭтаФорма.ТекущийТип;
			ИначеЕсли ЭтаФорма.ВидГруппировки = "Проект" Тогда
				Показывать = СтрокаДокумент.Проект = ЭтаФорма.ТекущийПроект;
			КонецЕсли;
		КонецЕсли;
		
		Если Показывать Тогда
			НовСтрока = ЭтаФорма.Список.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтаФорма.Список.Количество() = 0 Или ЭтаФорма.ТекущийДокумент = Неопределено Тогда
		ЭтаФорма.Элементы.Список.ТекущаяСтрока = -1;
	Иначе
		Документ = ЭтаФорма.ТекущийДокумент;
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Документ", Документ);
		НайденныеСтроки = ЭтаФорма.Список.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭтаФорма.Элементы.Список.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГруппировку(ЭтаФорма)
	
	ЭтаФорма.Элементы.Группировки.Видимость = ЭтаФорма.ПоказыватьОбластьГруппировки;
	ЭтаФорма.Элементы.СписокСгруппироватьПричинеДобавления.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоТипуДокумента.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Ложь;
	
	ЭтаФорма.Элементы.ГруппаПричиныДобавления.Видимость = Ложь;
	ЭтаФорма.Элементы.ГруппаТипыДокументов.Видимость = Ложь;
	ЭтаФорма.Элементы.ГруппаПроекты.Видимость = Ложь;
	
	Если ЭтаФорма.ПоказыватьОбластьГруппировки Тогда
		Если ЭтаФорма.ВидГруппировки = "ПричинаДобавления" Тогда
			ЭтаФорма.Элементы.ГруппаПричиныДобавления.Видимость = Истина;
			ЭтаФорма.Элементы.СписокСгруппироватьПричинеДобавления.Пометка = Истина;
			
		ИначеЕсли ЭтаФорма.ВидГруппировки = "ТипДокумента" И ЭтаФорма.ДоступныхТиповДокументов > 1 Тогда
			ЭтаФорма.Элементы.ГруппаТипыДокументов.Видимость = Истина;
			ЭтаФорма.Элементы.СписокСгруппироватьПоТипуДокумента.Пометка = Истина;
			
		ИначеЕсли ЭтаФорма.ВидГруппировки = "Проект" Тогда
			ЭтаФорма.Элементы.ГруппаПроекты.Видимость = Истина;
			ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Работа со списком документов

&НаСервере
Процедура ЗаполнитьСписок()
	
	Список.Очистить(); СписокПолный.Очистить();
	ПричиныДобавления.Очистить();
	ТипыДокументов.Очистить();
	Проекты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МоиДокументы.Документ КАК Документ,
	|	МоиДокументы.Документ.СрокИсполнения КАК СрокИсполнения,
	|	МоиДокументы.Документ.ВидДокумента КАК ВидДокумента,
	|	МоиДокументы.Документ.Проект КАК Проект,
	|	ЕСТЬNULL(МоиДокументы.Документ.Проект.Представление, &ИмяГруппыБезПроекта) КАК Представление,
	|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков КАК Контрагент,
	|	ОбщиеРеквизитыДокументов.ДатаСортировки КАК ДатаДокумента,
	|	МоиДокументы.Причина,
	|	ТекущиеСостоянияДокументов.Состояние КАК СостояниеИсполнен,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(МоиДокументы.Документ) <> ТИП(Справочник.ИсходящиеДокументы)
	|				И МоиДокументы.Документ.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И МоиДокументы.Документ.СрокИсполнения < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|				И ТекущиеСостоянияДокументов.Состояние ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА ТИПЗНАЧЕНИЯ(МоиДокументы.Документ) = ТИП(Справочник.ВнутренниеДокументы)
	|				И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента)
	|				И МоиДокументы.Документ.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.Отклонен)
	|				И МоиДокументы.Документ.ДатаПодписания <> ДАТАВРЕМЯ(1, 1, 1)
	|				И МоиДокументы.Документ.ДатаПодписания < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		КОГДА МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне)
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|					ГДЕ
	|						ЗадачаИсполнителя.Исполнитель = &Пользователь
	|						И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|						И НЕ ЗадачаИсполнителя.Выполнена
	|						И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
	|						И ЗадачаИсполнителя.Предметы.Предмет = МоиДокументы.Документ
	|						И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата)
	|			ТОГДА ИСТИНА
	|		КОГДА МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня)
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|					ГДЕ
	|						ЗадачаИсполнителя.Автор = &Пользователь
	|						И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|						И НЕ ЗадачаИсполнителя.Выполнена
	|						И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
	|						И ЗадачаИсполнителя.Предметы.Предмет = МоиДокументы.Документ
	|						И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата)
	|			ТОГДА ИСТИНА
	|		КОГДА ТИПЗНАЧЕНИЯ(МоиДокументы.Документ) = ТИП(Справочник.ВнутренниеДокументы)
	|				И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента)
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ВнутренниеДокументы.Стороны КАК Стороны
	|					ГДЕ
	|						Стороны.Подписал = &Пользователь
	|						И НЕ Стороны.Подписан
	|						И Стороны.Ссылка = МоиДокументы.Документ
	|						И Стороны.ДатаПодписи <> ДАТАВРЕМЯ(1, 1, 1)
	|						И Стороны.ДатаПодписи < &ТекущаяДата)
	|			ТОГДА ИСТИНА
	|		КОГДА ТИПЗНАЧЕНИЯ(МоиДокументы.Документ) = ТИП(Справочник.ВнутренниеДокументы)
	|				И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента)
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ВнутренниеДокументы.ГрифыУтверждения КАК Грифы
	|					ГДЕ
	|						Грифы.АвторУтверждения = &Пользователь
	|						И Грифы.Ссылка = МоиДокументы.Документ
	|						И (Грифы.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.НеУтверждено)
	|							ИЛИ Грифы.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.ПустаяСсылка))
	|						И Грифы.ДатаУтверждения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И Грифы.ДатаУтверждения < &ТекущаяДата)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен
	|ПОМЕСТИТЬ МоиДокументы
	|ИЗ
	|	РегистрСведений.МоиДокументы КАК МоиДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|		ПО МоиДокументы.Документ = ОбщиеРеквизитыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
	|		ПО МоиДокументы.Документ = ТекущиеСостоянияДокументов.Документ
	|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
	|ГДЕ
	|	НЕ МоиДокументы.Документ.ПометкаУдаления
	|	И МоиДокументы.Пользователь = &Пользователь
	|	И МоиДокументы.Причина В(&Причины)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Причины", ОтмеченныеПричины.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'; en = 'Without project'"));
	
	Если КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МоиДокументы.Документ КАК Документ,
			|	МоиДокументы.СрокИсполнения КАК СрокИсполнения,
			|	МоиДокументы.Причина,
			|	МоиДокументы.Просрочен,
			|	МоиДокументы.ВидДокумента,
			|	МоиДокументы.Контрагент,
			|	МоиДокументы.ДатаДокумента,
			|	МоиДокументы.Проект,
			|	МоиДокументы.Представление
			|ИЗ
			|	МоиДокументы КАК МоиДокументы
			|ГДЕ
			|	МоиДокументы.Просрочен = &Просрочен
			|
			|ИТОГИ ПО
			|	Документ";
		Запрос.УстановитьПараметр("Просрочен", Истина);
	ИначеЕсли КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МоиДокументы.Документ КАК Документ,
			|	МоиДокументы.СрокИсполнения КАК СрокИсполнения,
			|	МоиДокументы.Причина,
			|	МоиДокументы.Просрочен,
			|	МоиДокументы.ВидДокумента,
			|	МоиДокументы.Контрагент,
			|	МоиДокументы.ДатаДокумента,
			|	МоиДокументы.Проект,
			|	МоиДокументы.Представление
			|ИЗ
			|	МоиДокументы КАК МоиДокументы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|		ПО МоиДокументы.Документ = ВнутренниеДокументы.Ссылка
			|ГДЕ
			|	ВнутренниеДокументы.НеДействует = ЛОЖЬ
			|	И (ВнутренниеДокументы.ДатаОкончанияДействия >= &ТекущаяДата
			|				И ВнутренниеДокументы.ДатаОкончанияДействия <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
			|			ИЛИ ВнутренниеДокументы.СрокИсполнения >= &ТекущаяДата
			|				И ВнутренниеДокументы.СрокИсполнения <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
			|				И МоиДокументы.СрокИсполнения ЕСТЬ NULL )
			|
			|ИТОГИ ПО
			|	Документ";
	Иначе
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МоиДокументы.Документ КАК Документ,
			|	МоиДокументы.СрокИсполнения КАК СрокИсполнения,
			|	МоиДокументы.Причина,
			|	МоиДокументы.Просрочен,
			|	МоиДокументы.ВидДокумента,
			|	МоиДокументы.Контрагент,
			|	МоиДокументы.ДатаДокумента,
			|	МоиДокументы.Проект,
			|	МоиДокументы.Представление
			|ИЗ
			|	МоиДокументы КАК МоиДокументы
			|
			|ИТОГИ ПО
			|	Документ";
	КонецЕсли;
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокумент.Следующий() Цикл
		Документ = ВыборкаДокумент.Документ;
		Причина = ""; ДатаДокумента = Дата(1, 1, 1);
		Просрочен = Ложь;
		ВидДокумента = Неопределено;
		Контрагент = Неопределено;
		Проект = Неопределено; ПроектУчтен = Ложь;
		Представление = "";
		
		ВыборкаДетали = ВыборкаДокумент.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			СтрокаПричина = Строка(ВыборкаДетали.Причина);
			Причина = Причина + СтрокаПричина + Символы.ПС;
			
			Если ВыборкаДетали.Просрочен Тогда 
				Просрочен = Истина;
			КонецЕсли;
			ВидДокумента = ВыборкаДетали.ВидДокумента;
			Контрагент = ВыборкаДетали.Контрагент;
			ДатаДокумента = ВыборкаДетали.ДатаДокумента;
			Проект = ВыборкаДетали.Проект;
			Представление = ВыборкаДетали.Представление;
			
			Если ВидГруппировки = "ПричинаДобавления" Тогда
				СтрПричина = ПричиныДобавления.НайтиСтроки(Новый Структура("Причина", СтрокаПричина));
				
				Если СтрПричина.Количество() = 0 Тогда 
					НовСтрока = ПричиныДобавления.Добавить();
					НовСтрока.Причина = СтрокаПричина;
					НовСтрока.Количество = 1;
				Иначе 
					СтрПричина[0].Количество = СтрПричина[0].Количество + 1;
				КонецЕсли;
				
			ИначеЕсли ВидГруппировки = "Проект" И Не ПроектУчтен Тогда
				СтрПроект = Проекты.НайтиСтроки(Новый Структура("Проект", Проект));
				ПроектУчтен = Истина; 
				
				Если СтрПроект.Количество() = 0 Тогда 
					НовСтрока = Проекты.Добавить();
					НовСтрока.Проект = Проект;
					НовСтрока.Количество = 1;
					НовСтрока.Представление = Представление;
				Иначе 
					СтрПроект[0].Количество = СтрПроект[0].Количество + 1;
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
		ТипДокумента = СокрЛП(ТипЗнч(ВыборкаДокумент.Документ));
		
		Если ВидГруппировки = "ТипДокумента" И ДоступныхТиповДокументов > 1 Тогда
			СтрТипы = ТипыДокументов.НайтиСтроки(Новый Структура("Тип", ТипДокумента));
			
			Если СтрТипы.Количество() = 0 Тогда 
				НовСтрока = ТипыДокументов.Добавить();
				НовСтрока.Тип = ТипДокумента;
				НовСтрока.Количество = 1;
			Иначе 
				СтрТипы[0].Количество = СтрТипы[0].Количество + 1;
			КонецЕсли;
		КонецЕсли;
		
		Причина = Лев(Причина, СтрДлина(Причина)-1);
		
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.Наименование = Строка(Документ);
		НоваяСтрока.Причина = Причина;
		НоваяСтрока.Просрочен = Просрочен;
		НоваяСтрока.ВидДокумента = ВидДокумента;
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.ТипДокумента = ТипДокумента;
		НоваяСтрока.Проект = Проект;
		
		СтрокаПолный = СписокПолный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолный, НоваяСтрока);
	КонецЦикла;
	
	Элементы.ФормаОтборДобавленВручную.Пометка = Ложь;
	Элементы.ФормаОтборНазначенаЗадачаМне.Пометка = Ложь;
	Элементы.ФормаОтборОтправленаЗадачаОтМеня.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьАвторомДокумента.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьОтветственнымЗаДокумент.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьПодписантомДокумента.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьАвторомУтверждения.Пометка = Ложь;
	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ДобавленВручную) <> Неопределено Тогда 
		Элементы.ФормаОтборДобавленВручную.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне) <> Неопределено Тогда 
		Элементы.ФормаОтборНазначенаЗадачаМне.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня) <> Неопределено Тогда 
		Элементы.ФормаОтборОтправленаЗадачаОтМеня.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьАвторомДокумента.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьОтветственнымЗаДокумент.Пометка = Истина;
	КонецЕсли;
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьПодписантомДокумента.Пометка = Истина;
	КонецЕсли;
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьАвторомУтверждения.Пометка = Истина;
	КонецЕсли;
	
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок > 0 Тогда
		
		Если КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
			Заголовок = НСтр("ru = 'Просроченные документы (%1)'; en = 'Documents with expiring terms of validity / performance (%1)'");
		ИначеЕсли КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
			Заголовок = НСтр("ru = 'Документы с истекающим сроком действия/исполнения (%1)'; en = 'Documents with expiring terms of validity / performance (%1)'");
		Иначе
			Заголовок = НСтр("ru = 'Мои документы (%1)'; en = 'My documents (%1)'");
		КонецЕсли;
		
		Заголовок = СтрШаблон(Заголовок, КоличествоСтрок);
	Иначе
		Если КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
			Заголовок = НСтр("ru = 'Просроченные документы'; en = 'Documents with expiring terms of validity / performance'");
		ИначеЕсли КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
			Заголовок = НСтр("ru = 'Документы с истекающим сроком действия/исполнения'; en = 'Documents with expiring terms of validity / performance'");
		Иначе
			Заголовок = НСтр("ru = 'Мои документы'; en = 'My documents'");
		КонецЕсли;
	КонецЕсли;
	
	ТипыДокументов.Сортировать("Тип");
	ПричиныДобавления.Сортировать("Причина");
	Проекты.Сортировать("Представление");
	Список.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	СписокПолный.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	УстановитьПараметрыГруппировокСервер(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСписка()
	
	НаименованиеДокумента = ""; МассивДокументов = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
		МассивДокументов.Добавить(ДанныеСтроки.Документ);
		НаименованиеДокумента = ДанныеСтроки.Наименование;
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли МассивДокументов.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Удалить выделенные документы из списка Мои документы?'; en = 'Remove the selected documents from the list ""My documents""?'");
		
	Иначе 
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить документ ""%1"" из списка Мои документы?'; en = 'Delete document ""%1"" from list ""My documents""?'"),
			Строка(НаименованиеДокумента));
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИзСпискаПродолжение", 
		ЭтотОбъект, Новый Структура("МассивДокументов", МассивДокументов));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпискаПродолжение(Результат, Параметр) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьВыбранныеДокументы(Параметр.МассивДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныеДокументы(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл 
		МоиДокументы.УдалитьДокументИзМоиДокументы(Документ);
	КонецЦикла;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныйДокумент(Документ)
	
	МоиДокументы.ДобавитьЗаписьВМоиДокументы(
		Документ, 
		ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ДобавленВручную"));
	
	ЗаполнитьСписок();
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьВСписок()
	
	СписокВыбора = Новый СписокЗначений;
	Если ВнутренниеДоступны Тогда 
		СписокВыбора.Добавить("ВнутренниеДокументы", НСтр("ru = 'Внутренний документ'; en = 'Internal document'"));
	КонецЕсли;
	
	Если ВходящиеДоступны Тогда 
		СписокВыбора.Добавить("ВходящиеДокументы", НСтр("ru = 'Входящий документ'; en = 'Incoming document'"));
	КонецЕсли;
	
	Если ИсходящиеДоступны Тогда 
		СписокВыбора.Добавить("ИсходящиеДокументы", НСтр("ru = 'Исходящий документ'; en = 'Outgoing document'"));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВСписокПродолжение", ЭтотОбъект);
	
	Если СписокВыбора.Количество() = 1 Тогда 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВыбора[0])
	Иначе 
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, 
			НСтр("ru = 'Добавление документа в список ""Мои документы""'; en = 'Add a document to the list of ""My documents""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник." + ВыбранныйЭлемент.Значение + ".ФормаВыбора", , ЭтаФорма);
	
КонецПроцедуры


// Заполнение миникарточки

&НаКлиенте
Процедура ОбновитьМиникарточку()
	
	ОбзорСпискаДокументовКлиент.ОбновитьМиникарточку(ЭтаФорма);
	Если Файлы.Количество() = 0 Тогда 
		УстановитьДоступностьКоманд(Неопределено);
	КонецЕсли;
	
КонецПроцедуры	

// Работа с файлами

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, 
		ЗначениеПометкиУдаления, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.
		ПолучитьПерсональныеНастройкиРаботыСФайлами().
		ДействиеПоДвойномуЩелчкуМыши;
		
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", 
		ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Если Не Доступность Тогда 
		Команда.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Префикс = "";
	
	Если ТекущиеДанные = Неопределено Тогда
				
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], РазрешеноУдаление);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", 
			ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
			ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ДоступноТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("ДобавлениеОригиналов") 
		И Не ДоступныеПоля.Свойство("ДобавлениеФайлов");
	
	Если ДоступноТолькоДобавлениеОригинала Или
		(ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(НайденнаяСтрока.Расширение) 
		И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл)) Тогда 
		НайденнаяСтрока.Оригинал = Истина;
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, ТекущийДокумент);
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Отправить

&НаКлиенте
Процедура УстановитьДоступностьКомандМенюОтправить()
	
	ТипДокумента = ТипЗнч(ТекущийДокумент);
	
	Если ТипДокумента = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Элементы.ПроцессСогласование.Доступность = Истина;
		Элементы.ПроцессУтверждение.Доступность = Истина;
		Элементы.ПроцессРегистрация.Доступность = Истина;
		Элементы.ПроцессРассмотрение.Доступность = Истина;
		Элементы.ПроцессИсполнение.Доступность = Истина;
		Элементы.ПроцессОзнакомление.Доступность = Истина;
	ИначеЕсли ТипДокумента = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Элементы.ПроцессСогласование.Доступность = Истина;
		Элементы.ПроцессУтверждение.Доступность = Истина;
		Элементы.ПроцессРегистрация.Доступность = Истина;
		Элементы.ПроцессРассмотрение.Доступность = Ложь;
		Элементы.ПроцессИсполнение.Доступность = Ложь;
		Элементы.ПроцессОзнакомление.Доступность = Ложь;
	ИначеЕсли ТипДокумента = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Элементы.ПроцессСогласование.Доступность = Ложь;
		Элементы.ПроцессУтверждение.Доступность = Ложь;
		Элементы.ПроцессРегистрация.Доступность = Истина;
		Элементы.ПроцессРассмотрение.Доступность = Истина;
		Элементы.ПроцессИсполнение.Доступность = Истина;
		Элементы.ПроцессОзнакомление.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
