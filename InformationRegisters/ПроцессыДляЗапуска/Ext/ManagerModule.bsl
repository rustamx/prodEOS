
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет процесс в очередь для отложенного старта
//
// Параметры:
//   Процесс - БизнесПроцессСсылка
//   ДатаСтарта - Дата - дата отложенного старта
//   ДобавлениеБезСтарта - Булево - Если Истина, тогда процесс будет добавлен в очередь отложенного старта,
//                                  но не будет стартован (его стояние будет равно 
//                                  Перечисления.СостоянияПроцессовДляЗапуска.ПустаяСсылка)
//
Процедура ДобавитьПроцессДляОтложенногоСтарта(Процесс, ДатаСтарта, ДобавлениеБезСтарта = Ложь) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	Запись = НаборЗаписей.Добавить();
	Запись.БизнесПроцесс = Процесс;
	Запись.ДатаОтложенногоСтарта = ДатаСтарта;
	
	Если Не ДобавлениеБезСтарта Тогда
		Запись.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту;
	КонецЕсли;
	
	Запись.АвтоДобавленияЗаписи = ПользователиКлиентСервер.ТекущийПользователь();
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Отключает отложенный старт процесс
//
// Параметры:
//   Процесс - БизнесПроцессСсылка
//
Процедура ОтключитьОтложенныйСтартПроцесса(Процесс) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ПустаяСсылка();
		НаборЗаписей[0].ПричинаОтменыСтарта = "";
		НаборЗаписей.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Добавляет сведенья об успешном старте процесса
//
// Параметры:
//   - БизнесПроцесс - БизнесПроцессСсылка
//
Процедура ЗарегистрироватьСтартПроцесса(Процесс) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].Состояние = Перечисления.СостоянияПроцессовДляЗапуска.Стартован;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Добавляет процесс для фонового старта
//
// Параметры:
//   Процесс - БизнесПроцессСсылка
//
Процедура ДобавитьПроцессДляФоновогоСтарта(Процесс) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	Запись = НаборЗаписей.Добавить();
	Запись.БизнесПроцесс = Процесс;
	Запись.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту;
	Запись.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Запись.АвтоДобавленияЗаписи = ПользователиКлиентСервер.ТекущийПользователь();
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Удаляет процесс из из очереди для фонового старта
//
// Параметры:
//   - БизнесПроцесс - БизнесПроцессСсылка
//
Процедура УдалитьПроцессИзОчередиДляЗапуска(Процесс) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Добавляет сведенья об отмене старта процесса
//
// Параметры:
//   - БизнесПроцесс - БизнесПроцессСсылка
//
Процедура ЗарегистрироватьОтменуСтарта(Процесс, ПричинаОтмены) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].Состояние = Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен;
		НаборЗаписей[0].ПричинаОтменыСтарта = ПричинаОтмены;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Увеличивает счетчик попыток старта процесса
//
// Параметры:
//   БизнесПроцесс - БизнесПроцессСсылка - ссылка на процесс
//
Процедура ЗарегистрироватьПопыткуСтартаПроцесса(Процесс) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроцессыДляЗапуска");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Процесс);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Запись.КоличествоПопытокОбработки = Запись.КоличествоПопытокОбработки + 1;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает сведения о запуске для процесса
//
// Параметры:
//   - БизнесПроцесс - БизнесПроцессСсылка
//
// Возвращаемое значение:
//   - Неопределено - Возвращается если сведений нет.
//   - Структура - если есть.
//       - БизнесПроцесс - БизнесПроцессСсылка
//       - ДатаОтложенногоСтарта - ДатаИВремя
//       - Состояние - ПеречислениеСсылка.СостоянияПроцессовДляЗапуска
//       - ПричинаОтменыСтарта - Причина отмены старта
//
Функция ПолучитьСведенияОЗапускеПроцесса(Процесс) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцессыДляЗапуска.БизнесПроцесс,
		|	ПроцессыДляЗапуска.ДатаОтложенногоСтарта,
		|	ПроцессыДляЗапуска.Состояние,
		|	ПроцессыДляЗапуска.ПричинаОтменыСтарта
		|ИЗ
		|	РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		|ГДЕ
		|	ПроцессыДляЗапуска.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", Процесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("БизнесПроцесс", Выборка.БизнесПроцесс);
		Результат.Вставить("ДатаОтложенногоСтарта", Выборка.ДатаОтложенногоСтарта);
		Результат.Вставить("Состояние", Выборка.Состояние);
		Результат.Вставить("ПричинаОтменыСтарта", Выборка.ПричинаОтменыСтарта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли






