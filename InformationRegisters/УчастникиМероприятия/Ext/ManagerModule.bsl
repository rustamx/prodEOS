#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает доступные текущему пользователю приглашения.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Доступные приглашения.
//
Функция ДоступныеПриглашения(Мероприятие) Экспорт
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ДоступныеПриглашения = Новый ТаблицаЗначений;
	ДоступныеПриглашения.Колонки.Добавить("Исполнитель");
	ДоступныеПриглашения.Колонки.Добавить("СостояниеПриглашения");
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат ДоступныеПриглашения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ Участники
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Мероприятия"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиМероприятия.Исполнитель,
		|	УчастникиМероприятия.СостояниеПриглашения
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Участники КАК Участники
		|		ПО УчастникиМероприятия.Исполнитель = Участники.Исполнитель
		|ГДЕ
		|	УчастникиМероприятия.Мероприятие = &Мероприятие");
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	ДоступныеПриглашения = Запрос.Выполнить().Выгрузить();
	
	Возврат ДоступныеПриглашения;
	
КонецФункции

// Изменяет состояние приглашения на мероприятие.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//  Исполнитель - СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - Исполнитель.
//  СостояниеПриглашения - ПеречислениеСсылка.СостоянияПриглашения - Состояние приглашения.
//
Процедура ИзменитьСостояниеПриглашения(
	Мероприятие,
	Исполнитель,
	СостояниеПриглашения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если Не ПривилегированныйРежим() Тогда
			ДоступныеПриглашения = ДоступныеПриглашения(Мероприятие);
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Исполнитель", Исполнитель);
			НайденныеСтроки = ДоступныеПриглашения.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ПредставлениеУчастника = Строка(Исполнитель);
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Недостаточно прав для изменения состояние приглашения участника %1 на мероприятие %2.'; en = 'Insufficient permissions to modify the status of %1 invitation to the event %2.'"),
					ПредставлениеУчастника,
					Мероприятие);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		УстановитьСостояниеПриглашения(
			Мероприятие,
			Исполнитель,
			СостояниеПриглашения);
		
		ЗавершитьЗадачиПриглашения(
			Мероприятие,
			Исполнитель,
			СостояниеПриглашения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, является ли переданный исполнитель участником мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятие - Мероприятие.
//  Исполнитель - СправочникСсылка.Контрагенты,
//                СправочникСсылка.ЛичныеАдресаты,
//                СправочникСсылка.ПолныеРоли,
//                СправочникСсылка.Пользователи,
//                СправочникСсылка.КонтактныеЛица - Исполнитель.
// 
// Возвращаемое значение:
//  Булево - Исполнитель является участником.
//
Функция ЯвляетсяУчастникомМероприятия(Мероприятие, Исполнитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиМероприятия.Исполнитель
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|ГДЕ
		|	УчастникиМероприятия.Мероприятие = &Мероприятие
		|	И УчастникиМероприятия.Исполнитель = &Исполнитель");
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ЯвляетсяУчастникомМероприятия = Не Запрос.Выполнить().Пустой();
	
	Возврат ЯвляетсяУчастникомМероприятия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает состояние приглашения на мероприятие.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//  Исполнитель - СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - Исполнитель.
//  СостояниеПриглашения - ПеречислениеСсылка.СостоянияПриглашения - Состояние приглашения.
//
Процедура УстановитьСостояниеПриглашения(
	Мероприятие,
	Исполнитель,
	СостояниеПриглашения)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Исполнитель", Исполнитель);
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
	НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда 
		ПредставлениеУчастника = Строка(Исполнитель);
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Участник %1 мероприятия %2 не найден.'; en = 'Attendee %1 of the event %2 not found.'"),
			ПредставлениеУчастника,
			Мероприятие);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	
	ЗначенияКлюча = Новый Структура;
	ЗначенияКлюча.Вставить("Мероприятие", Мероприятие);
	ЗначенияКлюча.Вставить("Исполнитель", НайденнаяСтрока.Исполнитель);
	Если ТипЗнч(НайденнаяСтрока.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НайденнаяСтрока.Исполнитель,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ЗначенияКлюча.Вставить("УдалитьИсполнитель", РеквизитыИсполнителя.Владелец);
		ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", РеквизитыИсполнителя.ОсновнойОбъектАдресации);
		ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", РеквизитыИсполнителя.ДополнительныйОбъектАдресации);
	Иначе
		ЗначенияКлюча.Вставить("УдалитьИсполнитель", НайденнаяСтрока.Исполнитель);
		ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
		ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
	КонецЕсли;
	
	КлючЗаписи = СоздатьКлючЗаписи(ЗначенияКлюча);
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.СостояниеПриглашения = СостояниеПриглашения;
	МенеджерЗаписи.Записать();
	
	КлючЗаписи = СоздатьКлючЗаписи(ЗначенияКлюча);
	РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	
КонецПроцедуры

// Завершает задачи приглашения по мероприятию с указанным результатом.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//  Исполнитель - СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - Исполнитель.
//  СостояниеПриглашения - ПеречислениеСсылка.СостоянияПриглашения - Состояние приглашения.
//
Процедура ЗавершитьЗадачиПриглашения(
	Мероприятие,
	Исполнитель,
	СостояниеПриглашения)
	
	РезультатПриглашения = Неопределено;
	Если СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято Тогда
		РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято Тогда
		РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято;
	КонецЕсли;
	
	Если РезультатПриглашения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.ТекущийИсполнитель = &Исполнитель
		|	И Задачи.Предметы.Предмет = &Мероприятие
		|	И Задачи.Предметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
		|	И Задачи.Выполнена = ЛОЖЬ
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Приглашение
		|	И Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И Задачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить)");
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда
			РезультатВыполнения = НСтр("ru = 'Да, я приму участие'; en = 'Yes, I will attend'") + ".";
		ИначеЕсли РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда
			РезультатВыполнения = НСтр("ru = 'Нет, я не приму участие'; en = 'No, I will not attend'") + ".";
		КонецЕсли;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("РезультатПриглашения", РезультатПриглашения);
		ПараметрыВыполнения.Вставить("РезультатВыполнения", РезультатВыполнения);
		ВыполнениеЗадачСервер.НаправитьЗадачуНаВыполнение(Выборка.Ссылка, ПараметрыВыполнения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
