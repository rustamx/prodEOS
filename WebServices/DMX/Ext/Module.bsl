
#Область ПрограммныйИнтерфейс

Функция Put(XRequest)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда
		ВызватьИсключение НСтр("ru='Работа с мобильными клиентами выключена.'; en = 'Mobile clients are disabled.'");
	КонецЕсли;

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПодключениеВозможно = 
		ОбменСМобильнымиСервер.ПроверитьВозможностьПодключенияМобильногоКлиента(ТекущийПользователь);

	Если Не ПодключениеВозможно Тогда

		ВызватьИсключение 
			НСтр("ru='Вам не разрешен доступ к программе с использованием мобильного клиента. 
				|Обратитесь к администратору.';
				|en = 'You are not allowed to access the program using a mobile client. 
				|Contact the administrator.'");

	КонецЕсли;

	// Получение мобильного клиента по коду.
	// Если клиент подключается в первый раз, то выполняется его регистрация на сервере.
	МобильныйКлиент = ПланыОбмена.Мобильный.ПолучитьУзелОбмена(
		XRequest.ClientCode, ТекущийПользователь);

	// Помещение сообщения от клиента во входящую очередь для последующей обработки на сервере.
	ОбменСМобильнымиСервер.ЗаписатьВходящееСообщение(МобильныйКлиент, XRequest);

	// Запуск фоновой обработки сообщения от клиента.
	ОбменСМобильнымиСервер.ЗапуститьФоновоеЗаданиеОбработкиДанных(МобильныйКлиент,
		"ОбменСМобильнымиDMXСервер.ОбработатьСообщенияИСформироватьПакетОбмена");

	// Ответ собираем только после обработки последнего сообщения загруженного с клиента
	Если Не XRequest.LastResponseID = "0" Тогда

		Ответ = СобратьОтветКлиенту(МобильныйКлиент, XRequest.LastResponseID, XRequest.LastResponsePartIndex);

	Иначе

		Ответ = СоздатьСообщениеОК();

	КонецЕсли;

	Возврат Ответ;

КонецФункции

Функция Get(XRequest)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда
		ВызватьИсключение НСтр("ru='Работа с мобильными клиентами выключена.'; en = 'Mobile clients are disabled.'");
	КонецЕсли;

	ПодключениеВозможно = 
		ОбменСМобильнымиСервер.ПроверитьВозможностьПодключенияМобильногоКлиента(
			ПользователиКлиентСервер.ТекущийПользователь());

	Если Не ПодключениеВозможно Тогда
		ВызватьИсключение 
			НСтр("ru='Вам не разрешен доступ к программе с использованием мобильного клиента. 
					|Обратитесь к администратору.';
					|en = 'You are not allowed to access the program using a mobile client. 
					|Contact the administrator.'");
	КонецЕсли;

	// Валидация мобильного клиента
	МобильныйКлиент = ПланыОбмена.Мобильный.НайтиПоКоду(XRequest.ClientCode);
	Если МобильныйКлиент.Пустая() Тогда

		ВызватьИсключение
			НСтр("ru='При синхронизациия произошла ошибка: выполнено подключение неизвестным устройством.'; en = 'An error occurred during synchronization: connection from an unknown device.'");

	КонецЕсли;

	Возврат СобратьОтветКлиенту(
		МобильныйКлиент, XRequest.LastResponseID, XRequest.LastResponsePartIndex);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СобратьОтветКлиенту(МобильныйКлиент, ИдентификаторПринятогоСообщения, НомерПринятойЧасти)

	УстановитьПривилегированныйРежим(Истина);

	КодКлиента = МобильныйКлиент.Код;

	// Если клиент передал информацию о ранее принятом сообщении, то проверим, полностью ли 
	// передано сообщение. Если сообщение передано полностью, то пометим его на удаление и 
	// укажем, что необходимо передавать первую часть очередного сообщения в очереди.
	Если Не ИдентификаторПринятогоСообщения = Неопределено 
	 И Не ИдентификаторПринятогоСообщения = "00000000-0000-0000-0000-000000000000" Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторПринятогоСообщения));
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СообщенияИнтегрированныхСистем.Ссылка,
			|	СообщенияИнтегрированныхСистем.ДанныеСообщения,
			|	СообщенияИнтегрированныхСистем.ДатаСоздания
			|ИЗ
			|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
			|ГДЕ
			|	СообщенияИнтегрированныхСистем.ИдентификаторСообщения = &ИдентификаторСообщения
			|	И НЕ СообщенияИнтегрированныхСистем.ПометкаУдаления
			|	И НЕ СообщенияИнтегрированныхСистем.Входящее";

		ВыборкаПринятыеСообщения = Запрос.Выполнить().Выбрать();

		Если ВыборкаПринятыеСообщения.Следующий() Тогда

			ПринятоеСообщение = ВыборкаПринятыеСообщения.Ссылка;
			ПринятоеСообщениеДатаСоздания = ВыборкаПринятыеСообщения.ДатаСоздания;
			Если НомерПринятойЧасти = ВыборкаПринятыеСообщения.ДанныеСообщения.Получить().Количество() Тогда

				ПринятоеСообщениеОбъект = ПринятоеСообщение.ПолучитьОбъект();
				ПринятоеСообщениеОбъект.УстановитьПометкуУдаления(Истина);

				РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьДатуПередачиКлиенту(
					ПринятоеСообщение,
					ТекущаяДатаСеанса());

				ИдентификаторПринятогоСообщения = Неопределено;

			КонецЕсли;

		Иначе
			ИдентификаторПринятогоСообщения = Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	// Выборка сообщений во входящей очереди сообщений, начиная с самого старого
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка,
		|	СообщенияИнтегрированныхСистем.ДатаСоздания,
		|	СообщенияИнтегрированныхСистем.ДанныеСообщения
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОчередиСообщенийИнтегрированныхСистем КАК ОчередиСообщенийИнтегрированныхСистем
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|			ПО ОчередиСообщенийИнтегрированныхСистем.Ссылка = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийИнтегрированныхСистем.Ссылка
		|ГДЕ
		|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
		|	И НЕ СообщенияИнтегрированныхСистем.ПометкаУдаления
		|	И НЕ СообщенияИнтегрированныхСистем.Входящее
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";

	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоСообщенийВОчереди = Выборка.Количество();
	СчетчикСообщений = 0;

	Пока Выборка.Следующий() Цикл
		СчетчикСообщений = СчетчикСообщений + 1;
		СообщениеСсылка = Выборка.Ссылка;

		// Получение процента готовности сообщения обмена
		ПроцентГотовности = 
			РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.ПолучитьПроцентГотовностиСообщения(
				СообщениеСсылка);

		СообщениеГотовоКПередаче = Ложь;

		Если ПроцентГотовности < 100 Тогда

			// Если сообщение еще готовится - проверим, выполняется ли соответствующее фоновое задание
			СтруктураОтбора = Новый Структура("Наименование", КодКлиента);

			МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			ЕстьАктивноеЗадание = Ложь;

			Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл

				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда

					ЕстьАктивноеЗадание = Истина;

					Попытка
						// Подождем, вдруг фоновое задание завершится.
						// Если так, то сервер сразу начнет возвращать части сообщения.
						ФоновоеЗадание.ОжидатьЗавершения(3);

						// если задание завершилось само пометим что оно больше не активно
						ЕстьАктивноеЗадание = Ложь;

					Исключение
					КонецПопытки;

					Прервать;

				КонецЕсли;

			КонецЦикла;

			// Если по еще не готовому сообщению выполняется фоновое задание, которое его готовит, 
			// то возвращается процент готовности этого сообщения обмена.

			Если ЕстьАктивноеЗадание Тогда

				Возврат СоздатьСообщениеЖдите();

			Иначе

				// Проверяем готовность еще раз - возможно ситуация, когда на момент проверки готовность была
				// меньше 100%, но на момент проверки активности задания - задание уже успело отработать, т.е.
				// задание готово и его нужно передавать.

				ПроцентГотовности = 
					РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.ПолучитьПроцентГотовностиСообщения(
						СообщениеСсылка);

				Если ПроцентГотовности = 100 Тогда
					// Задание успело подготовить сообщение до конца
					СообщениеГотовоКПередаче = Истина;

					Попытка
						//Пробуем получить объект монопольно.
						Объект = СообщениеСсылка.ПолучитьОбъект().Заблокировать();
					Исключение
						Возврат СоздатьСообщениеЖдите();
					КонецПопытки;

				Иначе

					// Процент готовности меньше 100 и активного задания нет, 
					// помечаем сообщение из очереди и переходим к передаче следующего сообщения.
					Попытка
						СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
						СообщениеОбъект.УстановитьПометкуУдаления(Истина);
					Исключение
						Возврат СоздатьСообщениеЖдите();
					КонецПопытки;

					Продолжить;

				КонецЕсли;

			КонецЕсли;

		Иначе
			СообщениеГотовоКПередаче = Истина;
		КонецЕсли;
		
		Если СообщениеГотовоКПередаче Тогда

			// Если сообщение готово, то оно передается на клиента по частям
			МассивЧастей = Выборка.ДанныеСообщения.Получить();

			Если МассивЧастей = Неопределено 
				Или ТипЗнч(МассивЧастей) <> Тип("Массив")
				Или МассивЧастей.Количество() = 0 Тогда

				// Пустое сообщение помечаем на удаление. 
				СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
				СообщениеОбъект.УстановитьПометкуУдаления(Истина);

				Продолжить;

			КонецЕсли;

			КоличествоЧастей = МассивЧастей.Количество();

			// Дошли до подготовленного сообщения обмена - необходимо передать очередную часть сообщения
			Если ИдентификаторПринятогоСообщения = Неопределено Или ПринятоеСообщение = Неопределено Тогда

				// Если информации о ранее загруженных частях нет, то передается первая часть первого сообщения
				Часть = МассивЧастей[0].Получить();
				Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");

				// Идентификатор части сообщения состоит из идентификатора сообщения и порядкового номера части
				Ответ.ResponseID   = Строка(СообщениеСсылка.ИдентификаторСообщения);
				Ответ.ExchangeData = Base64Строка(Часть);
				Ответ.PartIndex    = 1;
				Ответ.PartCount    = КоличествоЧастей + (КоличествоСообщенийВОчереди - СчетчикСообщений);

				Возврат Ответ;

			Иначе

				// Передается следующая за принятой часть сообщения
				Если Выборка.ДатаСоздания > ПринятоеСообщениеДатаСоздания
					Или НомерПринятойЧасти > КоличествоЧастей Тогда
					НомерПринятойЧасти = 0;
				КонецЕсли;

				Часть = МассивЧастей[НомерПринятойЧасти].Получить();

				// Идентификатор части сообщения состоит из идентификатора сообщения и порядкового номера части

				Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");
				Ответ.ExchangeData = Base64Строка(Часть);
				Ответ.ResponseID   = Строка(СообщениеСсылка.ИдентификаторСообщения);
				Ответ.PartIndex    = НомерПринятойЧасти + 1;
				Ответ.PartCount    = 
					(КоличествоЧастей - НомерПринятойЧасти) + (КоличествоСообщенийВОчереди - СчетчикСообщений);

				Возврат Ответ;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СоздатьСообщениеОК();

КонецФункции

Функция СоздатьСообщениеОК()

	Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");

	Ответ.ExchangeData = Base64Строка("");
	Ответ.ResponseID   = Строка(Новый УникальныйИдентификатор());
	Ответ.PartCount    = 0;
	Ответ.PartIndex    = 0;

	Возврат Ответ;

КонецФункции

Функция СоздатьСообщениеЖдите()

	Ответ = ОбменСМобильнымиDMXСервер.СоздатьОбъект("XResponse");

	Ответ.ResponseID   = Строка(Новый УникальныйИдентификатор());
	Ответ.ExchangeData = Base64Строка("");
	Ответ.PartCount    = -1;
	Ответ.PartIndex    = -1;

	Возврат Ответ;

КонецФункции

#КонецОбласти
