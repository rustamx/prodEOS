////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ  

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = Параметры.ТекущееПисьмо;
	ЗаполнитьДеревоПереписки();
	
	ПоложениеОбластиЧтения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоложениеОбластиЧтения",
		"Снизу");
	
	ОбновитьПоложениеОбластиЧтенияСервер();
	
	ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ТекущееПисьмо);
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='История переписки (писем: %1)'; en = 'Thread (emails: %1)'"),
		Формат(ЧислоПисемВПереписке, "ЧН=0"));
	
	ШрифтОтображения = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	ШрифтОтображенияПоУмолчанию = ШрифтОтображения;
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.ПредпросмотрHTMLБезВложенийКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
		Элементы.ПредпросмотрHTMLКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПисьмаИзменены" Тогда
		ОбновитьТекущийСписок();
	КонецЕсли;
	
	Если РаботаСПрочтениямиКлиент.ПроверитьНеобходимостьОбновления(ИмяСобытия, Параметр, "Почта") Тогда
		ОбновитьТекущийСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(ЭтаФорма.ИмяФормы, "ПоложениеОбластиЧтения", ПоложениеОбластиЧтения);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДеревоПереписки();
	РазвернутьДеревоПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПисем()
	
	// Развернем узлы верхнего уровня
	Для Каждого СтрокаДерева Из ДеревоПисем.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПисем.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылку(Команда)
	
	ЭлементПолеHTMLДокумента = ТекущийЭлемент;
	Если ЭлементПолеHTMLДокумента <> Элементы.ПредпросмотрHTMLБезВложений
		И ЭлементПолеHTMLДокумента <> Элементы.ПредпросмотрHTML Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.КопироватьСсылку(ЭлементПолеHTMLДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДеревоПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.ДеревоПисем.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(, Элементы.ДеревоПисем.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.5, Истина);
	
	ТекущиеДанные = Элементы.ДеревоПисем.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьДоступностьКоманд(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	Если ПоложениеОбластиЧтения <> "Отключена" Тогда
		
		Если Элементы.ДеревоПисем.ТекущаяСтрока = Неопределено
			Или Элементы.ДеревоПисем.ТекущиеДанные = Неопределено
			Или ТипЗнч(Элементы.ДеревоПисем.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Предпросмотр = ПолучитьПустойТекстHTML();
			Вложения.Очистить();
			Возврат;
		КонецЕсли;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Элементы.ДеревоПисем.ТекущиеДанные.Ссылка) Тогда
			
			Результат = СформироватьДанныеДляПредпросмотраПисьма(
				Элементы.ДеревоПисем.ТекущиеДанные.Ссылка,
				УникальныйИдентификатор);
			
			Предпросмотр = Результат.HTMLПредставлениеПисьма;
			РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
				Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
			
			Вложения.Очистить();
			Если Результат.Свойство("Вложения") Тогда
				Для Каждого Вложение Из Результат.Вложения Цикл
					СтрокаВложение = Вложения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВложение, Вложение);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Предпросмотр = ПолучитьПустойТекстHTML();
			Вложения.Очистить();
			
		КонецЕсли;
		
		Если Вложения.Количество() > 0 Тогда
			Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаПредпросмотрСВложениями;
		Иначе
			Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаПредпросмотрБезВложений;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПустойТекстHTML()
	
	Возврат "<html><body></body></html>";
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	ЭтоВходящееПисьмо = ТекущиеДанные.Свойство("Ссылка")
		И ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ТекущиеДанные.Ссылка);
	ЭтоИсходящееПисьмо = ТекущиеДанные.Свойство("Ссылка")
		И ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ТекущиеДанные.Ссылка);
	
	Элементы.Ответить.Доступность = ЭтоВходящееПисьмо;
	Элементы.ОтветитьВсем.Доступность = ЭтоВходящееПисьмо;
	Элементы.Переслать.Доступность = ЭтоВходящееПисьмо Или ЭтоИсходящееПисьмо;
	
	Элементы.ДеревоПисемКонтекстноеМенюОтветить.Доступность = ЭтоВходящееПисьмо;
	Элементы.ДеревоПисемКонтекстноеМенюПереслать.Доступность = ЭтоВходящееПисьмо Или ЭтоИсходящееПисьмо;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийСписок()
	
	Элементы.ДеревоПисем.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ТекущиеДанные = ПолучитьТекущиеДанные();
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ТекущиеДанные = ПолучитьТекущиеДанные();
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ТекущиеДанные = ПолучитьТекущиеДанные();
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущиеДанные()
	
	Возврат Элементы.ДеревоПисем.ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ПредпросмотрHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДЦУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьДеревоПереписки()
	
	ДеревоПисем.ПолучитьЭлементы().Очистить();
	КорневоеПисьмо = ВстроеннаяПочтаСервер.ПолучитьКорневоеПисьмо(ТекущееПисьмо);
	
	КорневойУровень = Истина;
	ЗаполнитьУзелДереваПереписки(ДеревоПисем.ПолучитьЭлементы(), КорневоеПисьмо, КорневойУровень);
	
	Индекс = -1;
	НайтиВДеревеПоСсылке(ДеревоПисем.ПолучитьЭлементы(), ТекущееПисьмо, Индекс);
	
	Если Индекс > -1 Тогда
		Элементы.ДеревоПисем.ТекущаяСтрока = Индекс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиВДеревеПоСсылке(КоллекцияЭлементовОдногоУровня, ИскомаяСсылка, Индекс)
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из КоллекцияЭлементовОдногоУровня Цикл
		
		Если СтрокаДерева.Ссылка = ИскомаяСсылка Тогда
			Индекс = СтрокаДерева.ПолучитьИдентификатор();
		Иначе
			НайтиВДеревеПоСсылке(СтрокаДерева.ПолучитьЭлементы(), ИскомаяСсылка, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзелДереваПереписки(ЭлементыДерева, ПисьмоРодитель, Знач КорневойУровень)
	
	СтрокаКорня = ЭлементыДерева.Добавить();
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоРодитель) Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПисьмоРодитель,
			"Дата, ОтправительАдресат, Тема, ЕстьВложения, Размер, Важность, ПометкаУдаления");
			
		РеквизитыПисьма.Вставить("ПолучателиПисьмаСтрокой",
			ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоРодитель.ПолучателиПисьма));
		ОтправительАдресат = РеквизитыПисьма.ОтправительАдресат;
		ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ОтправительАдресат);
		РеквизитыПисьма.Вставить("ОтправительАдрес", ОтправительАдресат.Адрес);
		РеквизитыПисьма.Вставить("ОтправительОтображаемоеИмя", ДанныеАдресата.Представление);
		РеквизитыПисьма.Вставить("ОтправительКонтакт", ДанныеАдресата.Контакт);
		
		СтрокаКорня.Ссылка = ПисьмоРодитель;
		СтрокаКорня.Дата = РеквизитыПисьма.Дата;
		СтрокаКорня.ПометкаУдаления = РеквизитыПисьма.ПометкаУдаления;
		
		СтрокаКорня.Кому = РеквизитыПисьма.ПолучателиПисьмаСтрокой;
		СтрокаКорня.ОтКого = РеквизитыПисьма.ОтправительОтображаемоеИмя;
		
		СтрокаКорня.Тема = РеквизитыПисьма.Тема;
		
		Если РеквизитыПисьма.Важность = Перечисления.ВажностьПисем.Высокая Тогда
			СтрокаКорня.ВажностьНомерКартинки = 2;
		ИначеЕсли РеквизитыПисьма.Важность = Перечисления.ВажностьПисем.Низкая ТОгда
			СтрокаКорня.ВажностьНомерКартинки = 0;
		Иначе
			СтрокаКорня.ВажностьНомерКартинки = 1;
		КонецЕсли;
		
		СтрокаКорня.Размер = РеквизитыПисьма.Размер / 1024;
		СтрокаКорня.ЕстьВложения = РеквизитыПисьма.ЕстьВложения;
		СтрокаКорня.НомерКартинки = 0;
		СтрокаКорня.ЭтоТекущаяЗадача = (ПисьмоРодитель = ТекущееПисьмо);
		СтрокаКорня.Вид = ?(ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоРодитель), 0, 1);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоРодитель) Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПисьмоРодитель,
			"Дата, Тема, ЕстьВложения, Размер, Важность, УчетнаяЗапись, ПометкаУдаления");
			
		РеквизитыПисьма.Вставить("ПолучателиПисьмаСтрокой",
			ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоРодитель.ПолучателиПисьма));
		СтрокаКорня.Ссылка = ПисьмоРодитель;
		СтрокаКорня.Дата = РеквизитыПисьма.Дата;
		
		СтрокаКорня.Кому = РеквизитыПисьма.ПолучателиПисьмаСтрокой;
		СтрокаКорня.ПометкаУдаления = РеквизитыПисьма.ПометкаУдаления;
		СтрокаКорня.ОтКого = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьПредставлениеАдреса(РеквизитыПисьма.УчетнаяЗапись);
		
		СтрокаКорня.Тема = РеквизитыПисьма.Тема;
		
		Если РеквизитыПисьма.Важность = Перечисления.ВажностьПисем.Высокая Тогда
			СтрокаКорня.ВажностьНомерКартинки = 2;
		ИначеЕсли РеквизитыПисьма.Важность = Перечисления.ВажностьПисем.Низкая ТОгда
			СтрокаКорня.ВажностьНомерКартинки = 0;
		Иначе
			СтрокаКорня.ВажностьНомерКартинки = 1;
		КонецЕсли;
		
		СтрокаКорня.Размер = РеквизитыПисьма.Размер / 1024;
		СтрокаКорня.ЕстьВложения = РеквизитыПисьма.ЕстьВложения;
		СтрокаКорня.НомерКартинки = 0;
		СтрокаКорня.ЭтоТекущаяЗадача = (ПисьмоРодитель = ТекущееПисьмо);
		СтрокаКорня.Вид = ?(ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоРодитель), 0, 1);
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ПисьмоРодитель) Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПисьмоРодитель,
			"ДатаРегистрации, Подписал, Отправитель, Заголовок, Адресат, ПометкаУдаления");
			
		СтрокаКорня.Ссылка = ПисьмоРодитель;
		СтрокаКорня.Дата = РеквизитыПисьма.ДатаРегистрации;
		СтрокаКорня.ПометкаУдаления = РеквизитыПисьма.ПометкаУдаления;
		
		Если ЗначениеЗаполнено(РеквизитыПисьма.Подписал) Тогда
			СтрокаКорня.ОтКого = РеквизитыПисьма.Подписал;
		Иначе
			СтрокаКорня.ОтКого = РеквизитыПисьма.Отправитель;
		КонецЕсли;
		
		СтрокаКорня.Кому = РеквизитыПисьма.Адресат;
		
		СтрокаКорня.Тема = РеквизитыПисьма.Заголовок;
		
		СтрокаКорня.ВажностьНомерКартинки = 1;
		
		СтрокаКорня.ЕстьВложения = РаботаСФайламиВызовСервера.ОбъектИмеетФайлы(ПисьмоРодитель);
		
		СтрокаКорня.НомерКартинки = 0;
		СтрокаКорня.ЭтоТекущаяЗадача = (ПисьмоРодитель = ТекущееПисьмо);
		СтрокаКорня.Вид = 0;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ПисьмоРодитель) Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПисьмоРодитель,
			"ДатаРегистрации, Подписал, Подготовил, Заголовок, ПометкаУдаления");
			
		СтрокаКорня.Ссылка = ПисьмоРодитель;
		СтрокаКорня.Дата = РеквизитыПисьма.ДатаРегистрации;
		СтрокаКорня.ПометкаУдаления = РеквизитыПисьма.ПометкаУдаления;
		
		Если ЗначениеЗаполнено(РеквизитыПисьма.Подписал) Тогда
			СтрокаКорня.ОтКого = РеквизитыПисьма.Подписал;
		Иначе
			СтрокаКорня.ОтКого = РеквизитыПисьма.Подготовил;
		КонецЕсли;
		
		Если ПисьмоРодитель.Получатели.Количество() > 1 Тогда
			СтрокаКорня.Кому = Строка(ПисьмоРодитель.Получатели.Количество()) + ": ";
		КонецЕсли;
		
		ПервыйПолучатель = Истина;
		Для Каждого Получатель Из ПисьмоРодитель.Получатели Цикл
			
			СтрокаПолучателя = "";
			Если ЗначениеЗаполнено(Получатель.Адресат) Тогда
				СтрокаПолучателя = Получатель.Адресат;
			Иначе
				СтрокаПолучателя = Получатель.Получатель;
			КонецЕсли;
			
			Если Не ПервыйПолучатель Тогда
				СтрокаКорня.Кому = СтрокаКорня.Кому + ", ";
			КонецЕсли;
			СтрокаКорня.Кому = СтрокаКорня.Кому + СтрокаПолучателя;
			ПервыйПолучатель = Ложь;
			
		КонецЦикла;
		
		СтрокаКорня.Тема = РеквизитыПисьма.Заголовок;
		
		СтрокаКорня.ВажностьНомерКартинки = 1;
		
		СтрокаКорня.ЕстьВложения = РаботаСФайламиВызовСервера.ОбъектИмеетФайлы(ПисьмоРодитель);
		
		СтрокаКорня.НомерКартинки = 0;
		СтрокаКорня.ЭтоТекущаяЗадача = (ПисьмоРодитель = ТекущееПисьмо);
		СтрокаКорня.Вид = 1;
		
	КонецЕсли;
	
	Таблица = Новый Массив;
	ВстроеннаяПочтаСервер.ПолучитьПодчиненныеПисьма(ПисьмоРодитель, Таблица);
	Для НомерПисьма = 0 По Таблица.Количество() - 1 Цикл
		
		Письмо = Таблица[НомерПисьма];
		
		Если НомерПисьма = 0 И КорневойУровень Тогда
			
			ЗаполнитьУзелДереваПереписки(ЭлементыДерева, Письмо.Ссылка, КорневойУровень);
			
		Иначе
			
			ЗаполнитьУзелДереваПереписки(СтрокаКорня.ПолучитьЭлементы(), Письмо.Ссылка, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеДляПредпросмотраПисьма(Письмо, УникальныйИдентификаторФормы)
	
	Результат = Новый Структура("HTMLПредставлениеПисьма");
	
	Результат.HTMLПредставлениеПисьма = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		Письмо,
		УникальныйИдентификаторФормы,
		Истина, // ВыводитьШапку
		,
		,
		Ложь); // ВыводитьИсториюПереписки
	
	Если ЗначениеЗаполнено(Письмо) Тогда
		
		Вложения = Новый Массив;
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Письмо, // Письмо
			Истина, // ФормироватьРазмерПредставление
			Ложь, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
		
		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			
			Вложение = Новый Структура(
				"ИмяФайла,
				|ИндексКартинки,
				|ПометкаУдаления,
				|Представление,
				|Размер,
				|РазмерПредставление,
				|Редактирует,
				|РедактируетТекущийПользователь,
				|Ссылка");
			
			ЗаполнитьЗначенияСвойств(Вложение, ФайлыПисьмаСтрока);
			Вложения.Добавить(Вложение);
			
		КонецЦикла;
		
		Результат.Вставить("Вложения", Вложения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ОБЛАСТЬ ЧТЕНИЯ

&НаКлиенте
Процедура ОбластьЧтенияСнизу(Команда)
	
	ПоложениеОбластиЧтения = "Снизу";
	ОбновитьПоложениеОбластиЧтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ПоложениеОбластиЧтения = "Справа";
	ОбновитьПоложениеОбластиЧтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ПоложениеОбластиЧтения = "Отключена";
	ОбновитьПоложениеОбластиЧтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоложениеОбластиЧтения()
	
	ОбновитьПоложениеОбластиЧтенияСервер();
	ОбработатьАктивизациюСтрокиСписка();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоложениеОбластиЧтенияСервер()
	
	Если ПоложениеОбластиЧтения = "Снизу" Тогда
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ОбластьЧтенияСнизу.Пометка = Истина;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		
	ИначеЕсли ПоложениеОбластиЧтения = "Справа" Тогда
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ОбластьЧтенияСнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Истина;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		
	ИначеЕсли ПоложениеОбластиЧтения = "Отключена" Тогда
		Элементы.СтраницыПредпросмотр.Видимость = Ложь;
		Элементы.ОбластьЧтенияСнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СПИСОК ФАЙЛОВ В ОБЛАСТИ ПРЕДПРОСМОТРА

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ВстроеннаяПочтаКлиент.ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныйВложений = Элементы.Вложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныйВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныйВложений = 1 Тогда
			
			ФайлСсылка = Элементы.Вложения.ТекущиеДанные.Ссылка;
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе
			
			МассивФайлов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			КонецЦикла;
			Если МассивФайлов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивФайлов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли

КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
			ТекущиеДанные.Представление);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
			ТекущиеДанные.Представление);
		КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВложениеПометитьНаУдалениеСервер(ДополнительныеПараметры.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	ОбновитьФайлыПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыПисьма()
	
	// Сохранение текущей строки
	ТекПозиция = Неопределено;
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				ТекПозиция = Новый Структура("Ссылка", ТекДанные.Ссылка);
			ИначеЕсли ТекДанные.Свойство("Представление")
				И ТекДанные.Свойство("Размер") Тогда
				ТекПозиция = Новый Структура("Представление, Размер", ТекДанные.Представление, ТекДанные.Размер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение списка файлов
	Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
		ЗаполнитьВложения(Вложения, ТекущееПисьмо);
	КонецЕсли;
	
	// Восстановление текущей строки
	Если ЗначениеЗаполнено(ТекПозиция) Тогда
		Если ТипЗнч(ТекПозиция) = Тип("Структура") Тогда
			Строки = Вложения.НайтиСтроки(ТекПозиция);
			Если Строки.Количество() > 0 Тогда
				Элементы.Вложения.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = Истина;
		Элементы.РедактироватьВложение.Доступность = Истина;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ВстроеннаяПочтаКлиент.СохранитьВложенияКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(
		Обработчик,
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыПисьма();
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаполнитьВложения(Вложения, Письмо)
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
	
	Вложения.Очистить();
	Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифт(Команда)
	
	ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
	#Если Не ВебКлиент Тогда
		ДиалогВыбораШрифта.Шрифт = ШрифтОтображения;
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьОтображаемыйШрифтЗавершение", ЭтотОбъект);
	
	ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифтЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШрифтОтображенияУстановлен = Ложь;
		Если ШрифтОтображения <> ШрифтОтображенияПоУмолчанию Тогда
			ШрифтОтображения = ШрифтОтображенияПоУмолчанию;
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				Предпросмотр, ШрифтОтображения, Истина, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШрифтОтображения = Результат;
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	ШрифтОтображенияУстановлен = Истина;
	
	РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
		Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
	
КонецПроцедуры


