&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭтойФормы = "ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаСписка";
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	ИсходныйТекстЗапроса = Список.ТекстЗапроса;
	
	МелкийШрифт =  ШрифтыСтиля.МелкийШрифтТекста;
	
	ВидСписка = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ВидСписка");
	ПоказыватьДеревоПапок = (ВидСписка = "Обычный");
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если Не ПоказыватьДеревоПапок Тогда  // компактный вид
		
		Элементы.ГруппаПапки.Видимость = Ложь;
		Элементы.ГруппаПолосаСлева.Видимость = Истина;
		Элементы.ГруппаОтбор.Видимость = Ложь;
		Элементы.ПодменюПапки.Видимость = Ложь;
		
		Элементы.НастроитьСписокПапок.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаОтбор.Видимость = Ложь;
		Элементы.ГруппаПапки.Видимость = Истина;
		Элементы.ГруппаПолосаСлева.Видимость = Ложь;
		Элементы.ПодменюПапки.Видимость = Истина;
		
		Элементы.НастроитьСписокПапок.Видимость = Ложь;
		
	КонецЕсли;	
	
	БыстрыйПоискВиден = Истина;
	
	ЗагрузитьНастройки();
	
	Элементы.ДекорацияБыстрыйПоиск.Заголовок = 
		Новый ФорматированнаяСтрока(НСтр("ru = 'Быстрый поиск'; en = 'Quick search'"),,,,"Ссылка"); 
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ЗаполнитьУсловноеОформлениеСпискаПисем(Список);
	
	ЗаполнитьДеревоПапок();
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	Если ЭтоФайловаяБаза Тогда
		Элементы.ОтправитьИПолучить.Видимость = Истина;
		Элементы.ОтправитьИПолучить_ВсеДействия.Видимость = Истина;
		Элементы.Обновить.Видимость = Ложь;
		Элементы.Обновить_ВсеДействия.Видимость = Ложь;
	Иначе
		Элементы.ОтправитьИПолучить.Видимость = Ложь;
		Элементы.ОтправитьИПолучить_ВсеДействия.Видимость = Ложь;
		Элементы.Обновить.Видимость = Истина;
		Элементы.Обновить_ВсеДействия.Видимость = Истина;
	КонецЕсли;
	
	СостояниеДереваПапок =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы,
			"СостояниеДерева",
			Неопределено);
	
	ВстроеннаяПочтаСервер.СформироватьТаблицуБыстрогоОтбора(ОтборВПапке, ИмяЭтойФормы);
	
	БыстрыйПоискВидимостьСерверВыполнить();
		
	ТекущаяПапкаПриСоздании = Неопределено;
	Если ЗначениеЗаполнено(СостояниеДереваПапок)
		И СостояниеДереваПапок.Свойство("ТекСсылка")
		И ЗначениеЗаполнено(СостояниеДереваПапок.ТекСсылка) Тогда
		
		ТекущаяПапкаПриСоздании = СостояниеДереваПапок.ТекСсылка;
		
		Если Не ПоказыватьДеревоПапок Тогда
			МассивПапок = Новый Массив;
			Для Каждого Строка Из ПапкиЧастые Цикл
				МассивПапок.Добавить(Строка.Ссылка);
			КонецЦикла;
			
			// если последней папки нет в частых папках - ставим первую из частых папок
			ИндексВЧастыхПапках = МассивПапок.Найти(ТекущаяПапкаПриСоздании);
			Если ИндексВЧастыхПапках = Неопределено
				И МассивПапок.Количество() <> 0 Тогда
				ТекущаяПапкаПриСоздании = МассивПапок[0];
			Иначе
				Элементы.ПапкиЧастые.ТекущаяСтрока = ИндексВЧастыхПапках;
			КонецЕсли;	
			
		КонецЕсли;	
		
		УстановитьОтборПоПапкеСервер(ТекущаяПапкаПриСоздании);
		
		ТекущаяПапка = ТекущаяПапкаПриСоздании;
		
		Если Не ПоказыватьДеревоПапок Тогда
			ТекущаяПапка = СостояниеДереваПапок.ТекСсылка;
			
			Если ТипЗнч(ТекущаяПапка) = Тип("СправочникСсылка.ПапкиПисем") Тогда
				ПредставлениеПапки = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПапки(ТекущаяПапка);
				ТекущаяПапкаОписание = СформироватьЗаголовок(ПредставлениеПапки.Описание, 
					ПредставлениеПапки.КоличествоПисем);
				ЭтаФорма.Заголовок = ТекущаяПапкаОписание;
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ТекущееПисьмо =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы,
			"ТекущееПисьмо",
			Неопределено);
			
	БыстрыйПоискВключен =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы,
			"БыстрыйПоискВключен",
			Истина);
			
	Если ЗначениеЗаполнено(ТекущееПисьмо)
		И ВстроеннаяПочтаСервер.ПисьмоДоступно(ТекущееПисьмо)
		И ОтображениеОбластиЧтения <> Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			ТекущееПисьмо,
			УникальныйИдентификатор,
			Истина); // ВыводитьШапку
		
		ЗаполнитьВложения(Вложения, ТекущееПисьмо);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СохранитьПисьмо_ВсеДействия.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма_ВсеДействия.Видимость = Истина;
		Элементы.ПредпросмотрHTMLБезВложенийКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
		Элементы.ПредпросмотрHTMLКонтекстноеМенюКопироватьСсылку.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.СохранитьПисьмо_ВсеДействия.Видимость = Истина;
		Элементы.СохранитьТекстПисьма_ВсеДействия.Видимость = Ложь;
	КонецЕсли;
			
	ДеревоПереносаИнициализировано =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ПереносПисем",
			"ДеревоПереносаИнициализировано",
			Ложь);
	ТекущаяСтрокаВОтбореВПапке = -1;		
	
	ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
	ВстроеннаяПочтаСервер.УстановитьОтборСписка(БыстрыйПоискВключен, ЭтаФорма);
	
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтоматическиСохранятьВерсииНеотправленногоПисьма");
	
	ШрифтОтображения = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	ШрифтОтображенияПоУмолчанию = ШрифтОтображения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеСпискаПисем(Список)
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Выделять непрочтенные письма жирным шрифтом и цветом фона
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять непрочтенные письма жирным шрифтом и цветом фона (стандартная настройка)'; en = 'Emphasize unread emails with bold font and background color (default setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("BackColor", 
		ЦветаСтиля.ЦветФонаПоля);
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, 
		ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	
	// Выделять прочтенные письма цветом фона и текста
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять прочтенные письма цветом фона и текста (стандартная настройка)'; en = 'Emphasize read emails with background color and text color (default setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("BackColor", 
		ЦветаСтиля.ЦветФонаПрочтенныхПисем);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("TextColor", 
		ЦветаСтиля.ЦветТекстаПрочтенныхПисем);
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, 
		ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	
	// Выделять адресатов писем с отсутствующими в контактах адресатами цветом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять адресатов писем с отсутствующими в контактах адресатами цветом (стандартная настройка)'; en = 'Emphasize email recipients with missing contact addressees with color (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденВКонтактах");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЦветНеизвестногоАдресата;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Адресаты");
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	
	// Выделять помеченные на удаления сообщения зачеркнутым шрифтом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять помеченные на удаления сообщения зачеркнутым шрифтом (стандартная настройка)'; en = 'Emphasize marked to deletion emails with strikethrough font (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	
	// Выделять письма, отправка которых была отменена, цветом неактуальных записей
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять письма, отправка которых была отменена, цветом неактуальных записей (стандартная настройка)'; en = 'Emphasize emails, whose sending was cancelled, with the color of the irrelevant entries (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправкаОтменена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЗакрытыеНеактуальныеЗаписи;
	ЭлементЦветаОформления.Использование = Истина;
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, 
		ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	
	// Выделять письма с ошибкой отправки почты цветом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять письма с ошибкой отправки почты цветом (стандартная настройка)'; en = 'Emphasize emails that has sending errors with color (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьОшибкиПриемкиОтправкиПочты");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПисьмаСОшибкамиДоставки;
	ЭлементЦветаОформления.Использование = Истина;
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	
	// Выделять непрочтенные и помеченные письма жирным перечеркнутым шрифтом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять непрочтенные и помеченные письма жирным перечеркнутым шрифтом (стандартная настройка)'; en = 'Emphasize unread and flagged emails with bold strikethrough font (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	
	// Отображать дату сегодняшних писем только в виде времени "09:46"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату сегодняшних писем только в виде времени ""09:46"" (стандартная настройка)'; en = 'Display today''s emails date only in the form of time ""9:46"" (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ=ЧЧ:мм");
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	// Отображать дату писем за эту неделю в виде "Вт 19:03"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за эту неделю в виде ""Вт 19:03"" (стандартная настройка)'; en = 'Display email date of this week in the form of ""We 19:03"" (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	//( Дата Меньше "Начало этого дня" И Дата Больше или равно "Начало этой недели" )
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='ddd ЧЧ:мм'");
	
	
	// Отображать дату писем за более ранний, чем эта неделя, период в виде "10.06.2012"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за более ранний, чем эта неделя, период в виде ""10.06.2012"" (стандартная настройка)'; en = 'Display email date for earlier than this week, period, in the form of ""10.06.2012"" (standard setting)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='dd.MM.yyyy'");
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ВариантОтображенияОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображениеОбластиЧтения");
	
	Если ТипЗнч(ВариантОтображенияОбластиЧтения) <> Тип("ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения")
		Или Не ЗначениеЗаполнено(ВариантОтображенияОбластиЧтения) Тогда
		
		ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
		
	КонецЕсли;
	
	ОбластьСправа = Перечисления.ВариантыОтображенияОбластиЧтения.Справа;
	
	ДвустрочныйРежим = (ВариантОтображенияОбластиЧтения = ОбластьСправа);
	
	// эта форма - не для 2 строчного режима
	Если ДвустрочныйРежим Тогда
		
		ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку("ОтображениеОбластиЧтения", ВариантОтображенияОбластиЧтения);
		
	КонецЕсли;
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
	ОтображатьУдаленныеПисьмаИПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
	
	ОтображатьУдаленныеСервер();
	
	ДействиеПриВыбореВходящегоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДействиеПриВыбореВходящегоПисьма");
		
	ОткрыватьФайлыИсходящегоПисьмаНаРедактирование =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
		
	РежимМоиПапки = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	Если РежимМоиПапки Тогда
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'; en = 'My folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'; en = 'All folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
	ИспользоватьАвтоматическоеПрочтение =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения");
		
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	
	НеПредлагатьСоздатьПравилоПриПеретаскивании =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("НеПредлагатьСоздатьПравилоПриПеретаскивании");
		
	БыстрыйПоискВиден =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы,
			"БыстрыйПоискВиден",
			Истина);		
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилосьСодержаниеПисьма" Тогда
		ОбработатьОповещениеИзменилосьСодержаниеПисьма(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ПисьмаИзменены" И Источник <> ЭтаФорма Тогда
		ОбновитьДанные();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			Элементы.Список.Обновить();
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг" Тогда
		ТипОбъекта = ТипЗнч(Параметр[0]);
		Если ТипОбъекта = Тип("ДокументСсылка.ВходящееПисьмо")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			
			ОбновитьДанные();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПапкаПисемСохранена" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ЗаполнитьДеревоПапок();
		СостояниеДерева.ТекСсылка = Параметр;
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "СозданиеПапкиПоиска" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ЗаполнитьДеревоПапок();
		СостояниеДерева.ТекСсылка = Параметр;
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты"
		И Источник <> ЭтаФорма Тогда
		
		Если Параметр.Свойство("ДействиеПриВыбореВходящегоПисьма") Тогда
			
			ДействиеПриВыбореВходящегоПисьма =Параметр.ДействиеПриВыбореВходящегоПисьма;
			Если Не ЗначениеЗаполнено(ДействиеПриВыбореВходящегоПисьма) Тогда
				ДействиеПриВыбореВходящегоПисьма =
					ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки")
			И ОтображатьУдаленныеПисьмаИПапки <> Параметр.ОтображатьУдаленныеПисьмаИПапки Тогда
			
			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
			СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
			ОтображатьУдаленныеСервер(Истина);
			ВосстановитьСостояниеДереваПапок(СостояниеДерева);
			Элементы.Список.Обновить();
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображениеОбластиЧтения")
			И ОтображениеОбластиЧтения <> Параметр.ОтображениеОбластиЧтения Тогда
			
			ОбластьСправа = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа");
			
			//Отображение области чтения
			РанееБылДвустрочныйРежим = Ложь; // мы в форме с 1 строчным режимом
			ДвустрочныйРежим = 
				(Параметр.ОтображениеОбластиЧтения = ОбластьСправа);
			
			Если РанееБылДвустрочныйРежим <> ДвустрочныйРежим Тогда
				
				// проверяем, что мы на рабочем столе
				ЭтаФормаНаРабочемСтоле = ЭтаФормаЕстьНаРабочемСтоле();
				
				Если ЭтаФормаНаРабочемСтоле = Ложь Тогда
					Закрыть();
					ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/desktop/ОбщаяКоманда.ЭлектроннаяПочта");
				Иначе
					
					ВстроеннаяПочтаСервер.ПоменятьНастройкуРабочегоСтола(
						"ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаСписка",
						"ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаСпискаДвустрочная");
					ОбновитьИнтерфейс();
					
				КонецЕсли;	
				
			Иначе
				ИзменитьОтображениеОбластиЧтения(Параметр.ОтображениеОбластиЧтения, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметр.Свойство("ВидСписка") И ВидСписка <> Параметр.ВидСписка Тогда
			
			ВидСписка = Параметр.ВидСписка;
			ПоказыватьДеревоПапок = (ВидСписка = "Обычный");
			ОтображениеПисемПереключитьНастройки();
			
		КонецЕсли;
		
		Если Параметр.Свойство("РежимМоиПапки")
			И РежимМоиПапки <> Параметр.РежимМоиПапки Тогда
			
			УстановитьРежимМоиПапки(Параметр.РежимМоиПапки);
			Элементы.Список.Обновить();
			
		КонецЕсли;
		
		Если Параметр.Свойство("НастройкиАвтообновления") Тогда
			
			#Если Не ВебКлиент Тогда
				НастройкиАвтообновления = Параметр.НастройкиАвтообновления;
				Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
					И НастройкиАвтообновления.Автообновление Тогда
					ПодключитьОбработчикОжидания("Автообновление", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
				Иначе
					ОтключитьОбработчикОжидания("Автообновление");
				КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;
		
		Если Параметр.Свойство("НеПредлагатьСоздатьПравилоПриПеретаскивании") Тогда
			НеПредлагатьСоздатьПравилоПриПеретаскивании =
				Параметр.НеПредлагатьСоздатьПравилоПриПеретаскивании;
		КонецЕсли;
		
		Если Параметр.Свойство("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения") Тогда
			ИспользоватьАвтоматическоеПрочтение = Параметр.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписьПапкиПоиска" Тогда
		
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
			Предпросмотр = "<html><body></body></html>";
			Вложения.Очистить();
			УстановитьОтборПоПапкеСервер(Неопределено);
			Возврат;
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
		Предпросмотр = "<html><body></body></html>";
		Вложения.Очистить();
		УстановитьОтборПоПапкеСервер(ТекущиеДанные.Ссылка, Элементы.Папки.ТекущаяСтрока);
		СписокПриАктивизацииСтроки(Неопределено);
		
	ИначеЕсли ИмяСобытия = "Запись_ЛичныйАдресат" 
		Или ИмяСобытия = "Запись_Контрагент" 
		Или ИмяСобытия = "Запись_КонтактноеЛицо" 
		Или ИмяСобытия = "Запись_Пользователь"
		Или ИмяСобытия = "Запись_РолиИсполнителей" 
		Или ИмяСобытия = "ИзмененоФизическоеЛицо" Тогда
		
		ОбновитьДанные();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПримененоПравило"
		Или ИмяСобытия = "ФоновоеВыполнениеЗавершено_РаботаСПрочтениями.ПометитьВсеПисьмаКакПрочтенные"
		Или ИмяСобытия = "ФоновоеВыполнениеЗавершено_ВстроеннаяПочтаСервер.ПометитьВсеПисьмаВПапкеНаУдаление" Тогда
		ОбновитьДанные();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены"
		И ЗначениеЗаполнено(ТекущееПисьмо)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = ТекущееПисьмо Тогда
		
		ОбновитьФайлыПисьма();
		УстановитьСтраницуПредпросмотра();
		УстановитьДоступностьКомандРаботыСВложением();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен"
		И ЗначениеЗаполнено(ТекущееПисьмо)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = ТекущееПисьмо Тогда
		
		ОбновитьФайлыПисьма();
		УстановитьДоступностьКомандРаботыСВложением();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПришлиНовыеПисьма" Тогда
		ЭтаФорма.Активизировать();
		ОбновитьДанные();
	КонецЕсли;	
	
	Если ИмяСобытия = "АктивизироватьФормуПочты" Тогда
		ЭтаФорма.Активизировать();
	КонецЕсли;	
	
	Если ИмяСобытия = "УстановитьВыделениеНаПапкуИПисьмо" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ПоследнееПисьмо = Параметр.ПоследнееПисьмо;
		Если ТекущееПисьмо <> ПоследнееПисьмо Тогда
			
			ПапкаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ПоследнееПисьмо, "Папка");
			
			Если ТекущаяПапка <> ПапкаПисьма Тогда
				
				Контекст = Новый Структура;
				Контекст.Вставить("Дерево", Папки);
				Контекст.Вставить("ФормаДерево", Элементы.Папки);
				Контекст.Вставить("Ссылка", ПапкаПисьма);
				Контекст.Вставить("ВозвращаемыйИдентификаторСтроки", Неопределено);
				ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "НайтиПапкуПоСсылке");
				
				Если ЗначениеЗаполнено(Контекст.ВозвращаемыйИдентификаторСтроки) Тогда
					Элементы.Папки.ТекущаяСтрока = Контекст.ВозвращаемыйИдентификаторСтроки;
				КонецЕсли;	
				
			КонецЕсли;	
			
			Элементы.Список.ТекущаяСтрока = ПоследнееПисьмо;
		
		КонецЕсли;	
		
		ЭтаФорма.Активизировать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ТребуетсяОбновлениеСпискаПисемПриАктивизацииФормы"
		И НужноОбновитьСписокПисем = Ложь Тогда
		
		#Если Не ВебКлиент Тогда
		НужноОбновитьСписокПисем = Истина;
		ПодключитьОбработчикОжидания("ПроверкаДоступностиВвода", 1);
		#КонецЕсли	
		
	КонецЕсли;	
	
	Если ИмяСобытия = "ПисьмоОтправлено"
		И ЗначениеЗаполнено(ТекущееПисьмо) И Параметр = ТекущееПисьмо Тогда
		Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			ТекущееПисьмо,
			УникальныйИдентификатор,
			Истина); // ВыводитьШапку
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненаНастройкаСпискаПапок" И Не ПоказыватьДеревоПапок Тогда
		ОбновитьЧастыеПапки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Письмо = ОбъектПерехода;
	
	ПапкаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Письмо, "Папка");
	
	Если ТекущаяПапка <> ПапкаПисьма Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("Дерево", Папки);
		Контекст.Вставить("ФормаДерево", Элементы.Папки);
		Контекст.Вставить("Ссылка", ПапкаПисьма);
		Контекст.Вставить("ВозвращаемыйИдентификаторСтроки", Неопределено);
		ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "НайтиПапкуПоСсылке");
		
		Если ЗначениеЗаполнено(Контекст.ВозвращаемыйИдентификаторСтроки) Тогда
			Элементы.Папки.ТекущаяСтрока = Контекст.ВозвращаемыйИдентификаторСтроки;
			ОбработчикПапкиПриАктивизацииСтроки();
		КонецЕсли;	
		
	КонецЕсли;	
	
	Элементы.Список.ТекущаяСтрока = Письмо;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтаФормаЕстьНаРабочемСтоле()
	
	// проверяем, что мы на рабочем столе
	ЭтаФормаНаРабочемСтоле = Ложь;
	Окна = ПолучитьОкна();
				
    Для каждого ОкноРабСтола из Окна Цикл
        Если ОкноРабСтола.НачальнаяСтраница Тогда
            Формы = ОкноРабСтола.Содержимое;
			Для каждого ТекФорма из Формы Цикл
				Если ТекФорма = ЭтаФорма Тогда
					ЭтаФормаНаРабочемСтоле = Истина;
	            	Прервать;
				КонецЕсли;	
			КонецЦикла;    
        КонецЕсли;
	КонецЦикла;    

	Возврат ЭтаФормаНаРабочемСтоле;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаДоступностиВвода()
	
	Если ВводДоступен() Тогда
		НужноОбновитьСписокПисем = Ложь;
		ОтключитьОбработчикОжидания("ПроверкаДоступностиВвода");
		ОбновитьДанные();
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Функция НайтиПапкуПоСсылке(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = ТекДанные.Ссылка;
	Если Ключ = Контекст.Ссылка Тогда
		Контекст.ВозвращаемыйИдентификаторСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СостояниеДереваПапок <> Неопределено Тогда
		ВосстановитьСостояниеДереваПапок(СостояниеДереваПапок);
	КонецЕсли;
	
	УстановитьСтраницуПредпросмотра();
	
#Если Не ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ПоискАвтосохраненныхПисем", 0.5, Истина);
#КонецЕсли	

	Если Не ПоказыватьДеревоПапок Тогда
		ОтборПоиска = ПолучитьПредставлениеОтбораПоиска(ОтборВПапке, МелкийШрифт);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПоискАвтосохраненныхПисем()
	
#Если Не ВебКлиент Тогда	
	Если ВыполненаПроверкаНаличияНесохраненныхПисем <> Истина Тогда
		Если АвтоматическиСохранятьВерсииНеотправленногоПисьма Тогда
			ВстроеннаяПочтаКлиент.ВыполнитьПоискАвтосохраненныхПисем();
		КонецЕсли;
		ВыполненаПроверкаНаличияНесохраненныхПисем = Истина;
	КонецЕсли;	
#КонецЕсли	

КонецПроцедуры	

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		
		ОтключитьОбработчикОжидания("Автообновление");
		
	Иначе
		
		ОбновитьДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	
	Настройки = Новый Структура;
	Настройки.Вставить("СостояниеДерева", СостояниеДерева);
	Настройки.Вставить("ТекущееПисьмо", ТекущееПисьмо);
	Настройки.Вставить("БыстрыйПоискВключен", БыстрыйПоискВключен);
	Настройки.Вставить("БыстрыйПоискВиден", БыстрыйПоискВиден);
	
	// Сохранение параметров отбора в папке
	МассивНастроек = Новый Массив;
	Для каждого Строка Из ОтборВПапке Цикл
		МассивНастроек.Добавить(Строка.Значение);
	КонецЦикла;
	Настройки.Вставить("ОтборВПапке", МассивНастроек);
	
	ПриЗакрытииСервер(ИмяЭтойФормы, Настройки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(ИмяЭтойФормы, Настройки, УникальныйИдентификатор)
	
	//Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);
	
	Для каждого Настройка Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяЭтойФормы, Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучитьПочту(Команда)
	
	ОчиститьСообщения();
	
	Текст = НСтр("ru ='Идет отправка и загрузка электронной почты. Пожалуйста подождите...'; en = 'Sending and receiving emails. Please wait ...'");
	Состояние(Текст,,, БиблиотекаКартинок.ПолучитьОтправитьПочту);
	
	РезультатОбработки = ОтправитьПолучитьПочтуСервер(РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	Если РезультатОбработки.Ошибки.Количество() > 0 Тогда
		
		Состояние();
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Ошибки приема и отправки почты'; en = 'Errors sending and receiving mail'"));
		ПараметрыОткрытия.Вставить("МассивОшибок", РезультатОбработки.Ошибки);
		ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаОтчетаОбОшибках", ПараметрыОткрытия);
		
	Иначе
		
		Состояние(НСтр("ru ='Отправка и загрузка электронной почты завершена успешно.'; en = 'Sending and loading email is completed successfully.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьПолучитьПочтуСервер(РежимМоиПапки, МассивЧастыхПапок)
	
	Результат = Новый Структура;
	
	Ошибки = ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма();
	ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьмаПоВнутреннейМаршрутизации(Ошибки);
	Результат.Вставить("Ошибки", Ошибки);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ВыбранноеПисьмо);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НаписатьПоШаблонуПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаВыбора",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПоШаблонуПродолжение(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВстроеннаяПочтаКлиент.СоздатьПисьмоНаОсновании(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда 
		
		ПересылаемыеПисьма = Новый СписокЗначений;
		ПересылаемыеПисьма.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПересылаемыеПисьма", ПересылаемыеПисьма);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаПересылки", ПараметрыФормы, ЭтаФорма);
		
	Иначе	
		
		ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
		Если ВыбранноеПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьСКопиейАвтору(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ПереслатьПисьмоСКопией(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьПредыдущему(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВстроеннаяПочтаКлиент.ПереслатьПредыдущему(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьКакВложение(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВстроеннаяПочтаКлиент.ПереслатьКакВложение(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ПеренаправитьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ВыбранноеПисьмо) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Можно отозвать только отправленное исходящее письмо.'; en = 'You can revoke only sent outgoing message.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтозватьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапку(Команда)
	
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуКлиент()
	
	ЗначенияЗаполнения = Новый Структура;
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(Элементы.Папки.ТекущиеДанные.Ссылка)
			И ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ТекущиеДанные.Ссылка) Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ПапкиПисем.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПисьмаИзMicrosoftOutlook(Команда)
	
	#Если ВебКлиент Тогда			
		ПоказатьПредупреждение(, НСтр("ru = 'В веб клиенте загрузка из Microsoft Outlook не поддерживается.'; en = 'Loading from Microsoft Outlook is not supported in web client.'"));
		Возврат;
	#КонецЕсли	
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаИмпортаИзMicrosoftOutlook",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПочты(Команда)
	
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочтенныеПисьма = Новый Массив;
	НепрочтенныеПисьма = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Письмо);
			
			Если ДанныеСтроки <> Неопределено Тогда
				
				Если ДанныеСтроки.Прочтено Тогда
					ПрочтенныеПисьма.Добавить(Письмо);
				Иначе
					НепрочтенныеПисьма.Добавить(Письмо);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Если НепрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Письма помечаются как прочтенные. Пожалуйста подождите...'; en = 'Emails marked as read. Please wait ...'");
			Состояние(ТекстСостояния);
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(НепрочтенныеПисьма, Истина, РежимМоиПапки,
			ПолучитьМассивЧастыхПапок());
		
	Иначе
		
		Если ПрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'; en = 'Unmarking as read. Please wait...'");
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(ПрочтенныеПисьма, Ложь, РежимМоиПапки,
			ПолучитьМассивЧастыхПапок());
		
	КонецЕсли;
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Письма помечены как прочтенные (%1)'; en = 'Emails marked as read (%1)'"),
			НепрочтенныеПисьма.Количество()));
		
	ИначеЕсли ПрочтенныеПисьма.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сняты пометки прочтенности писем (%1)'; en = 'Emails unmarked as read (%1)'"),
			ПрочтенныеПисьма.Количество()));
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометитьКакПрочтенныеСервер(Письма, Пометка, РежимМоиПапки, МассивЧастыхПапок)
	
	Результат = Новый Структура;
	
	УстановитьПрочтение(Письма, Пометка);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбластьЧтенияВнизу(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Внизу"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленныеПисьмаИПапки = Не ОтображатьУдаленныеПисьмаИПапки;
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ОтображатьУдаленныеСервер(Истина);
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	Элементы.Список.Обновить();
	
	НастройкиВстроеннойПочты = Новый Структура;
	НастройкиВстроеннойПочты.Вставить("ОтображатьУдаленныеПисьмаИПапки", ОтображатьУдаленныеПисьмаИПапки);
	Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер(ЗаполнятьДеревоПапок = Ложь)
	
	Элементы.ОтображатьУдаленные_ВсеДействия.Пометка = ОтображатьУдаленныеПисьмаИПапки;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	Если ЗаполнятьДеревоПапок Тогда
		ЗаполнитьДеревоПапок();
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображатьУдаленныеПисьмаИПапки",
		ОтображатьУдаленныеПисьмаИПапки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(НСтр("ru = 'Идет удаление писем в корзину. Пожалуйста подождите...'; en = 'Deleting emails in the trash. Please wait ...'"));
	КонецЕсли;
	
	РезультатОбработки = ПереместитьВКорзинуСервер(Письма, РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(НеПеренесенныеПисьма[0], "Тема");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письмо ""%1"" не удалось удалить в корзину.
					|Возможно это письмо открыто вами или другим пользователем.';
					|en = 'The email ""%1"" could not be deleted to trash. 
					|Perhaps this email opened by you or another user.'"),
				ТемаПисьма);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить несколько писем (%1) в корзину.
					|Возможно эти письма открыты вами или другим пользователем.';
					|en = 'Failed to delete multiple emails (%1) in the trash. 
					|Perhaps these emails opened by you or another user.'"),
				НеПеренесеноПисем);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письма (%1) успешно удалены в корзину'; en = 'Emails (%1) has been successfully deleted to trash.'"),
				КоличествоПисем));
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьВКорзинуСервер(Письма, РежимМоиПапки, МассивЧастыхПапок)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВКорзину(Письма);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Команда)
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.НастройкаПроверкиНовыхПисем", , , , , , , 
		РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПисьмаВПапку(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	ПараметрыФормы.Вставить("РежимМоиПапки", РежимМоиПапки);
	ПараметрыФормы.Вставить("КоличествоПисем", КоличествоПисем);
	Если Не ДеревоПереносаИнициализировано Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ПараметрыФормы.Вставить("СостояниеДереваПапок", СостояниеДерева);
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Письма", Письма);
	ПараметрыОбработчика.Вставить("СостояниеДерева", СостояниеДерева);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиПисьмаВПапкуЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПапкиПисем.Форма.ФормаПереносаПисем", ПараметрыФормы, ЭтаФорма, , , , 
		ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПисьмаВПапкуЗавершение(Папка, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьВПапкуКлиент(ДополнительныеПараметры.Письма, Папка);
	
	Если Не ДеревоПереносаИнициализировано Тогда
		ВосстановитьСостояниеДереваПапок(ДополнительныеПараметры.СостояниеДерева);
		ДеревоПереносаИнициализировано = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	ВстроеннаяПочтаКлиент.СохранитьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстПисьма(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	ВстроеннаяПочтаКлиент.СохранитьТекстПисьма(ВыбранноеПисьмо, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПисьмо()
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ВыбранноеПисьмо) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Скопировать можно только исходящее письмо.'; en = 'You can copy only outgoing email.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СкопироватьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуПоиска(Команда)
	
	ОткрытьФорму("Справочник.ПапкиПоиска.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылку(Команда)
	
	ЭлементПолеHTMLДокумента = ТекущийЭлемент;
	Если ЭлементПолеHTMLДокумента <> Элементы.ПредпросмотрHTMLБезВложений
		И ЭлементПолеHTMLДокумента <> Элементы.ПредпросмотрHTML Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.КопироватьСсылку(ЭлементПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифт(Команда)
	
	ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
	#Если Не ВебКлиент Тогда
		ДиалогВыбораШрифта.Шрифт = ШрифтОтображения;
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьОтображаемыйШрифтЗавершение", ЭтотОбъект);
	
	ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображаемыйШрифтЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШрифтОтображенияУстановлен = Ложь;
		Если ШрифтОтображения <> ШрифтОтображенияПоУмолчанию Тогда
			ШрифтОтображения = ШрифтОтображенияПоУмолчанию;
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				Предпросмотр, ШрифтОтображения, Истина, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШрифтОтображения = Результат;
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	ШрифтОтображенияУстановлен = Истина;
	
	РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
		Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("КомплексныйПроцесс");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого СтрСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(Элементы.Список.ДанныеСтроки(СтрСписка).Ссылка);
	КонецЦикла;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, ВыделенныеСтроки, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.ПапкиПисем.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Ссылка = ТекущаяПапка Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикПапкиПриАктивизацииСтроки", 0.2, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПапкиПриАктивизацииСтроки()
	
	ПапкаДляАктивации = Неопределено;
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПапкаДляАктивации = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяПапка) Тогда
		ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
	КонецЕсли;	
	
	Если ПапкаДляАктивации = ТекущаяПапка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПапка = ТекущаяПапка;
	ТекущаяПапка = ПапкаДляАктивации;
	Если Не ПоказыватьДеревоПапок И Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
		ТекущаяПапка = ПредыдущаяПапка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
		УстановитьОтборПоПапкеКлиент(Неопределено);
		ОбновитьОбластьПредпросмотра("<html><body></body></html>");
	Иначе
		УстановитьОтборПоПапкеКлиент(ТекущаяПапка, Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПапкеКлиент(Папка, ТекущаяСтрока = Неопределено)
	
	УстановитьОтборПоПапкеСервер(Папка, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПредпросмотра(HTMLПредставлениеПисьма, ДанныеФайлов = Неопределено)
	
	Если Предпросмотр <> HTMLПредставлениеПисьма Тогда
		Предпросмотр = HTMLПредставлениеПисьма;
		РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
			Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
	КонецЕсли;
	
	ОбновитьФайлыВОбластиПредпросмотра(ДанныеФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлыВОбластиПредпросмотра(ДанныеФайлов = Неопределено)
	
	Вложения.Очистить();
	Если ТипЗнч(ДанныеФайлов) = Тип("Массив") Тогда
		Для каждого ДанныеФайла Из ДанныеФайлов Цикл
			ЗаполнитьЗначенияСвойств(Вложения.Добавить(), ДанныеФайла);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьСтраницуПредпросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ВыбранноеПисьмо = ТекущееПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	Письмо = Элементы.Список.ТекущаяСтрока;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Письмо = Неопределено;
	КонецЕсли;
	
	Если ТекущееПисьмо = Письмо Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = Письмо;
	
	Если ОбластьЧтенияВключена Тогда
		
		Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
			
			// Вычисление, включен ли быстрый поиск по непрочтенным письмам
			ИспользуетсяБыстрыйПоискПоНепрочитанным = Ложь;			
			Для Каждого Строка Из ОтборВПапке Цикл
				Если Строка.Параметр = "Прочтено" Тогда
					ИспользуетсяБыстрыйПоискПоНепрочитанным = Строка.Значение = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			РезультатОбработки = ОбработатьАктивизациюСтроки(
				Письмо,
				УникальныйИдентификатор,
				ИспользоватьАвтоматическоеПрочтение,
				РежимМоиПапки,
				ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную 
					Или ИспользуетсяПоискПоНепрочитанным
					Или ИспользуетсяБыстрыйПоискПоНепрочитанным,
				ПолучитьМассивЧастыхПапок());
				
			ОбновитьОбластьПредпросмотра(
				РезультатОбработки.HTMLПредставлениеПисьма,
				РезультатОбработки.Вложения);
			
			Если РезультатОбработки.ОповеститьОПрочтении Тогда
				ОбновитьДанные(РезультатОбработки.СведенияОПапках);
			КонецЕсли;
			
		Иначе
			
			ОбновитьОбластьПредпросмотра("<html><body></body></html>");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьАктивизациюСтроки(
	Письмо,
	УникальныйИдентификаторФормы,
	ИспользоватьАвтоматическоеПрочтение,
	РежимМоиПапки,
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную,
	МассивЧастыхПапок)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Письмо);
	
	РегистрыСведений.СведенияОПросмотреПисем.УстановитьПризнакПросмотрено(Письмо);
	
	Результат = Новый Структура;
	
	HTMLПредставлениеПисьма = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		Письмо,
		УникальныйИдентификаторФормы,
		Истина); // ВыводитьШапку
	
	Результат.Вставить("HTMLПредставлениеПисьма", HTMLПредставлениеПисьма);
	
	Результат.Вставить("ОповеститьОПрочтении", Ложь);
	Если ИспользоватьАвтоматическоеПрочтение И Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		
		Результат.ОповеститьОПрочтении = УстановитьПрочтение(Письмо);
		
		Если Результат.ОповеститьОПрочтении Тогда
			СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
			Результат.Вставить("СведенияОПапках", СведенияОПапках);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("Вложения", ВстроеннаяПочтаСервер.ПолучитьСведенияОФайлахПисьма(Письмо));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПапкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Элемент.ТекущиеДанные.Ссылка <> Неопределено Тогда
			ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
		Иначе	
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя изменить предопределенную папку ""Папки поиска"".'; en = 'You cannot modify the predefined folder ""Search folders"".'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ТекущийЭлемент = Элементы.ПредпросмотрHTMLБезВложений
		Или ТекущийЭлемент = Элементы.ПредпросмотрHTML Тогда
		УстановитьПисьмамПометкуУдаления();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПапки()
	
	ЗаполнитьДеревоПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СкопироватьПисьмо();
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если Не ЗначениеЗаполнено(ВыбранноеПисьмо) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.Флаг Тогда
		
		СтандартнаяОбработка = Ложь;
		ПереключитьФлаг(ВыбранноеПисьмо);
		Элементы.Список.Обновить();
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.Состояние Тогда
		
		СтандартнаяОбработка = Ложь;
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ВыбранноеПисьмо);
		Если ЧислоПисемВПереписке > 1 Тогда
			ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ВыбранноеПисьмо);
		КонецЕсли;	
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.СостояниеКонтроля Тогда
		
		СтандартнаяОбработка = Ложь;
		КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбранноеПисьмо, ЭтаФорма);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ВыбранноеПисьмо) Тогда
		
		Если ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма") Тогда
			
			СтандартнаяОбработка = Истина;
			Возврат;
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.Ответить") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОтветитьВсем") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.Переслать") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	ОбновитьСвойстваПапок(СведенияОПапках);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПисьмамПометкуУдаления()
	
	ВыбранныеПисьма = ПолучитьВыбранныеПисьма(Ложь);
	Если ВыбранныеПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПисем = ВыбранныеПисьма.Количество();
	ТекущаяПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
	
	Если ВыбранныеПисьма.Количество() = 1 Тогда
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
				Строка(ТекущиеДанные.Ссылка));
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
				Строка(ТекущиеДанные.Ссылка));
		КонецЕсли;
	Иначе
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'; en = 'Remove deletion mark from selected emails?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'; en = 'Mark selected items for deletion?'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("КоличествоПисем", КоличествоПисем);
	ПараметрыОбработчика.Вставить("ВыбранныеПисьма", ВыбранныеПисьма);
	ПараметрыОбработчика.Вставить("ТекущаяПометкаУдаления", ТекущаяПометкаУдаления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПисьмамПометкуУдаленияЗавершение", 
		ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПисьмамПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
		Состояние(НСтр("ru = 'Идет снятие пометки на удаление. Пожалуйста подождите...'; en = 'Unmark for deletion in progress. Please wait ...'"));
	Иначе
		Состояние(НСтр("ru = 'Идет пометка на удаление. Пожалуйста подождите...'; en = 'Mark for deletion in progress. Please wait ...'"));
	КонецЕсли;
	
	РезультатОбработки = УстановитьПисьмамПометкуУдаленияСервер(
		ДополнительныеПараметры.ВыбранныеПисьма,
		Не ДополнительныеПараметры.ТекущаяПометкаУдаления,
		РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	НеОбработанныеПисьма = РезультатОбработки.НеОбработанныеПисьма;
	НеОбработаноПисем = НеОбработанныеПисьма.Количество();
	
	Если НеОбработаноПисем = 0 Тогда
		
		Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометка на удаление успешно снята (%1).'; en = 'Mark for deletion removed (%1).'"),
				ДополнительныеПараметры.КоличествоПисем));
			
		Иначе
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометка на удаление успешно установлена (%1).'; en = 'Mark to deletion is assigned successfully (%1).'"),
				ДополнительныеПараметры.КоличествоПисем));
			
		КонецЕсли;
		
	ИначеЕсли НеОбработаноПисем = 1 Тогда
		
		ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(НеОбработанныеПисьма[0], "Тема");
		
		Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось снять пометку удаления с письма ""%1"".
					|Возможно это письмо открыто вами или другим пользователем.';
					|en = 'Failed to unmark for deletion email ""%1"".
					|Perhaps this email opened by you or another user.'"),
				ТемаПисьма);
			
		Иначе
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось пометить на удаление письмо ""%1"".
					|Возможно это письмо открыто вами или другим пользователем.';
					|en = 'Failed to mark for deletion email ""%1"". 
					|Perhaps this email is opened by you or another user.'"),
				ТемаПисьма);
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		
		Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось снять пометку удаления с нескольких писем (%1).
					|Возможно эти письма открыты вами или другим пользователем.';
					|en = 'Failed to unmark for deletion multiple emails (%1).
					|Perhaps these emails opened by you or another user.'"),
				НеОбработаноПисем);
			
		Иначе
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось пометить на удаление нескольких писем (%1).
					|Возможно эти письма открыты вами или другим пользователем.';
					|en = 'Failed to mark on deleting multiple emails (%1).
					|Perhaps these emails opened by you or another user.'"),
				НеОбработаноПисем);
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПисьмамПометкуУдаленияСервер(Письма, Пометка, РежимМоиПапки, МассивЧастыхПапок)
	
	Результат = Новый Структура;
	
	НеОбработанныеПисьма = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		
		Если ПисьмоОбъект.ПометкаУдаления = Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПисьмоОбъект.Заблокировать();
		Исключение
			НеОбработанныеПисьма.Добавить(Письмо);
			Продолжить;
		КонецПопытки;
		
		ПисьмоОбъект.УстановитьПометкуУдаления(Пометка);
		ПисьмоОбъект.Разблокировать();
		
	КонецЦикла;
	
	Результат.Вставить("НеОбработанныеПисьма", НеОбработанныеПисьма);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредпросмотрHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПапках = УстановитьФлагиСервер(Письма, Флаг, РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	
	ОбновитьДанные(СведенияОПапках);
	
	Оповестить("ИзменилсяФлаг", Письма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьФлагиСервер(Письма, Флаг, РежимМоиПапки, МассивЧастыхПапок)
	
	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектам(Письма, Флаг);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	
	Возврат СведенияОПапках;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьФлаг(Письмо)
	
	СведенияОПапках = ПереключитьФлагСервер(Письмо, РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	
	ОбновитьДанные(СведенияОПапках);
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(Письмо);
	Оповестить("ИзменилсяФлаг", МассивПисем);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьФлагСервер(Письмо, РежимМоиПапки, МассивЧастыхПапок)
	
	РаботаСФлагамиОбъектовСервер.ПереключитьФлагПисьма(Письмо);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	
	Возврат СведенияОПапках;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕТАСКИВАНИЕ

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Строка = Неопределено) Или (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНазначение = Папки.НайтиПоИдентификатору(Строка);
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		Если ТипЗнч(СтрокаНазначение.Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПараметрыПеретаскивания.Значение[0]) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПараметрыПеретаскивания.Значение) Тогда
		Если Почта.ЭтоУчетнаяЗапись(СтрокаНазначение.Ссылка) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПараметрыПеретаскивания.Значение) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если Строка = Неопределено Тогда
		ПапкаНазначения = Неопределено;
	Иначе
		ПапкаНазначения = Папки.НайтиПоИдентификатору(Строка).Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Массив")
		И ПеретаскиваемоеЗначение.Количество() > 0
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПеретаскиваемоеЗначение[0]) Тогда
		
		Письма = Новый Массив;
		Для каждого Письмо Из ПеретаскиваемоеЗначение Цикл
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
				Письма.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		
		ПереместитьВПапкуКлиент(Письма, ПапкаНазначения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПеретаскиваемоеЗначение) Тогда
		
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		УстановитьРодителяПапки(ПеретаскиваемоеЗначение, ПапкаНазначения);
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПапкуКлиент(Письма, Папка)
	
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Состояние(НСтр("ru = 'Письма не выбраны'; en = 'Emails are not selected'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет перенос писем в папку ""%1"". Пожалуйста подождите...'; en = 'Moving emails into folder ""%1"". Please wait ...'"),
			Папка));
	КонецЕсли;
	
	РезультатОбработки = ОбработатьПеремещениеВПапку(Письма, Папка, РежимМоиПапки, 
		ПолучитьМассивЧастыхПапок());
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(НеПеренесенныеПисьма[0], "Тема");
			СообщениеОбОшибке = "";
			Если ТипЗнч(РезультатОбработки.Ошибки) = Тип("Массив") И РезультатОбработки.Ошибки.Количество() <> 0 Тогда
				СообщениеОбОшибке = РезультатОбработки.Ошибки[0];
			КонецЕсли;	
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письмо ""%1"" не удалось переместить в папку ""%2"".
					|Возможно это письмо открыто вами или другим пользователем.
					|
					|Подробное описание ошибки: ""%3""';
					|en = 'Email ""%1"" could not be moved to the folder ""%2"".
					|Perhaps this email is opened by you or another user.
					|
					|Detailed error description: ""%3""'"),
				ТемаПисьма,
				Папка,
				СообщениеОбОшибке);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось переместить несколько писем (%1) в папку ""%2"".
					|Возможно эти письма открыты вами или другим пользователем.';
					|en = 'Unable to move several emails (%1) in the folder ""%2"".
					|Perhaps these emails opened by you or another user.'"),
				НеПеренесеноПисем,
				Папка);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письма (%1) успешно перемещены в папку ""%2""'; en = 'Emails (%1) has been successfully moved to folder ""%2""'"),
				КоличествоПисем,
				Папка));
			
		КонецЕсли;
		
		ПисьмаДляПеретаскивания.ЗагрузитьЗначения(Письма);
		ПапкаДляПеретаскивания = Папка;
		ПодключитьОбработчикОжидания("ПредложитьСоздатьПравило", 0.2, Истина);
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьПеремещениеВПапку(Письма, Папка, РежимМоиПапки, МассивЧастыхПапок)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВПапку(Письма, Папка);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	Результат.Вставить("Ошибки", РезультатПереноса.Ошибки);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьРодителяПапки(Папка, ПапкаРодитель)
	
	Если ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПисем")
		И ТипЗнч(ПапкаРодитель) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		
		Справочники.ПапкиПисем.УстановитьРодителяПапки(Папка, ПапкаРодитель);
		ЗаполнитьДеревоПапок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	ПеретаскиваемоеЗначение = ТекущиеДанные.Ссылка;
	ВидПапки = ТекущиеДанные.ВидПапки;
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПеретаскиваемоеЗначение) Тогда
		ПараметрыПеретаскивания.Значение = ПеретаскиваемоеЗначение;
		Возврат;
	КонецЕсли;
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьСоздатьПравило()
	
	Если НеПредлагатьСоздатьПравилоПриПеретаскивании = Ложь Тогда
		
		ПараметрыФормы = Новый Структура;
		Письма = ПисьмаДляПеретаскивания.ВыгрузитьЗначения();
		ПараметрыФормы.Вставить("Письма", Письма);
		ПараметрыФормы.Вставить("Папка", ПапкаДляПеретаскивания);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьСоздатьПравилоЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ВопросСозданияПравилаПриПеретаскивании",
			ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьСоздатьПравилоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.ФормаОбъекта", Результат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ПАПОК

&НаСервере
Процедура ЗаполнитьДеревоЧастыхПапок()
	
	ПапкиЧастые.Очистить();
	ТаблицаПапок = РегистрыСведений.ПапкиПисемЧастоИспользуемые.ПолучитьПапкиДляТекущегоПользователя();
	МассивПапок = ТаблицаПапок.ВыгрузитьКолонку("Папка");
	
	СведенияОПапках = ВстроеннаяПочтаСервер.ПолучитьСведенияОПапках(
		Пользователи.ТекущийПользователь(),
		РежимМоиПапки,
		МассивПапок);
	
	Для Каждого Строка Из ТаблицаПапок Цикл
		
		НоваяСтрока = ПапкиЧастые.Добавить();
		НоваяСтрока.Ссылка = Строка.Папка;
		НоваяСтрока.Представление = Строка.Представление;
		
		СведенияОПапке = СведенияОПапках.Получить(Строка.Папка);
		
		Если СведенияОПапке <> Неопределено Тогда
			
			НоваяСтрока.Представление = СведенияОПапке.Представление;
			НоваяСтрока.Количество = СведенияОПапке.Количество;
			НоваяСтрока.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
		
		Если ПапкиЧастые.Количество() = 1 Тогда
			НоваяСтрока.Текущая = Истина;
		КонецЕсли;	
		
		Если ПапкиЧастые.Количество() >= 6 Тогда
			Прервать;
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДеревоПапок()
	
	ДеревоПапок = РеквизитФормыВЗначение("Папки");
	
	Если ПоказыватьДеревоПапок Тогда
		ВстроеннаяПочтаСервер.ЗаполнитьДеревоПапок(ДеревоПапок, РежимМоиПапки, ОтображатьУдаленныеПисьмаИПапки);
	Иначе
		ЗаполнитьДеревоЧастыхПапок();
	КонецЕсли;	
	
	ЗначениеВДанныеФормы(ДеревоПапок, Папки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для каждого Элемент Из ДеревоЭлементы Цикл
		// Рекурсивный вызов
		ПодчиненныеУзлы = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеУзлы.Количество() > 0 Тогда
			ОбойтиДерево(ПодчиненныеУзлы, Контекст, ИмяПроцедуры);
		КонецЕсли;
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьСостояниеДереваПапок()
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", ТекущаяПапка);
	
	Если Элементы.Папки.Видимость = Истина И Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			Состояние.ТекСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = ТекДанные.Ссылка;
	Если Ключ = Неопределено Тогда
		Ключ = ПредопределенноеЗначение("Справочник.ПапкиПоиска.ПустаяСсылка");
	КонецЕсли;
	Контекст.Состояние.Вставить(Ключ, Контекст.ФормаДерево.Развернут(ИдентификаторСтроки));

	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСостояниеДереваПапок(Состояние)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Состояние.Развернут);
	Контекст.Вставить("ТекСсылка", Состояние.ТекСсылка);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = ТекДанные.Ссылка;
	Если Ключ = Неопределено Тогда
		Ключ = ПредопределенноеЗначение("Справочник.ПапкиПоиска.ПустаяСсылка");
	КонецЕсли;	
	Если Контекст.Состояние.Получить(Ключ) = Истина Тогда
		Контекст.ФормаДерево.Развернуть(ИдентификаторСтроки);
	Иначе
		Контекст.ФормаДерево.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	Если ТекДанные.Ссылка = Контекст.ТекСсылка Тогда
		Контекст.ФормаДерево.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПапкиПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекСтрока = Папки.НайтиПоИдентификатору(Строка);
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СворачиваемыйЭлемент Из ТекСтрока.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СворачиваемыйЭлемент.ПолучитьИдентификатор();
		Если Элементы.Папки.Развернут(ИдентификаторСтроки) Тогда
			Элементы.Папки.Свернуть(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(СведенияОПапках = Неопределено)
	
	Если СведенияОПапках = Неопределено Тогда
		СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки, ПолучитьМассивЧастыхПапок());
	КонецЕсли;
	
	ОбновитьСвойстваПапок(СведенияОПапках);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияОПапках(РежимМоиПапки, МассивЧастыхПапок)
	
	Возврат ВстроеннаяПочтаСервер.ПолучитьСведенияОПапках(
		Пользователи.ТекущийПользователь(),
		РежимМоиПапки,
		МассивЧастыхПапок);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСвойстваПапок(СведенияОПапках)
	
	Если Не ПоказыватьДеревоПапок Тогда    
		
		ПредставлениеПапки = СведенияОПапках.Получить(ТекущаяПапка);
		
		Если ТипЗнч(ПредставлениеПапки) = Тип("Структура") 
			И ПредставлениеПапки.Свойство("Представление") 
			И ПредставлениеПапки.Свойство("Количество")
			И ПредставлениеПапки.Свойство("ПолныйПутьСРодителями") Тогда 
			
			ТекущаяПапкаОписание = ПредставлениеПапки.ПолныйПутьСРодителями;
			
			Если ПредставлениеПапки.Количество > 0 Тогда
				
				ТекущаяПапкаОписание = ТекущаяПапкаОписание
					+ " (" + Формат(ПредставлениеПапки.Количество, "ЧГ=0") + ")";
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Почта:'; en = 'Mail:'") + " " + ТекущаяПапкаОписание;
		
		Для Каждого Элемент Из ПапкиЧастые Цикл
			
			СведенияОПапке = СведенияОПапках.Получить(Элемент.Ссылка);
			
			Если СведенияОПапке <> Неопределено
				И Элемент.Количество <> СведенияОПапке.Количество Тогда
				
				Элемент.Количество = СведенияОПапке.Количество;
				Элемент.Представление = СведенияОПапке.Представление;
				Элемент.Выделена = СведенияОПапке.Выделена;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Возврат;
		
	КонецЕсли;	
	
	ОчередьПапок = Новый Массив;
	
	Для каждого Элемент Из Папки.ПолучитьЭлементы() Цикл
		ОчередьПапок.Добавить(Элемент);
	КонецЦикла;
	
	Пока ОчередьПапок.Количество() > 0 Цикл
		
		Элемент = ОчередьПапок[0];
		СведенияОПапке = СведенияОПапках.Получить(Элемент.Ссылка);
		
		Если СведенияОПапке <> Неопределено
			И Элемент.Количество <> СведенияОПапке.Количество Тогда
			
			Элемент.Количество = СведенияОПапке.Количество;
			Элемент.Представление = СведенияОПапке.Представление;
			Элемент.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
		
		Для каждого ПодчиненныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
			ОчередьПапок.Добавить(ПодчиненныйЭлемент);
		КонецЦикла;
		
		ОчередьПапок.Удалить(0);
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЧТЕННОСТЬЮ ПИСЕМ

&НаСервереБезКонтекста
Функция УстановитьПрочтение(Письмо, Прочтен = Истина)
	
	ПрочтениеУстановлено = РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письмо, Прочтен);
	
	Возврат ПрочтениеУстановлено; 
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛОЖЕНИЕМ ОБЛАСТИ ЧТЕНИЯ

&НаКлиенте
Процедура ИзменитьОтображениеОбластиЧтения(ВариантОтображенияОбластиЧтения, СохранитьНастройку)
	
	ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения, СохранитьНастройку);
	
	Если СохранитьНастройку Тогда
		НастройкиВстроеннойПочты = Новый Структура;
		НастройкиВстроеннойПочты.Вставить("ОтображениеОбластиЧтения", ОтображениеОбластиЧтения);
		Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения, СохранитьНастройку)
	
	Если СохранитьНастройку Тогда
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ОтображениеОбластиЧтения",
			ВариантОтображенияОбластиЧтения);
		
	КонецЕсли;
	
	Если ОтображениеОбластиЧтения <> ВариантОтображенияОбластиЧтения
		И (ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу
		Или ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа) Тогда
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ТекущееПисьмо) Тогда
			
			Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
				ТекущееПисьмо,
				УникальныйИдентификатор,
				Истина); // ВыводитьШапку
			
			РаботаС_HTML.ПрименитьИзменениеНастройкиОтображенияПисьма(
				Предпросмотр, ШрифтОтображения, ШрифтОтображенияУстановлен);
			
			ЗаполнитьВложения(Вложения, ТекущееПисьмо);
			
		Иначе
			
			Предпросмотр = "<html><body></body></html>";
			Вложения.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	ОтображениеОбластиЧтения = ВариантОтображенияОбластиЧтения;
	
	Если ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу Тогда
	
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.Вложения.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.Вложения.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Элементы.СтраницыПредпросмотр.Видимость = Ложь;
		Элементы.Вложения.Видимость = Ложь;
		ОбластьЧтенияВключена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимМоиПапки(Команда)
	
	УстановитьРежимМоиПапкиКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВсеПапки(Команда)
	
	УстановитьРежимМоиПапкиКлиент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимМоиПапкиКлиент(Режим)
	
	УстановитьРежимМоиПапки(Режим);
	
	НастройкиВстроеннойПочты = Новый Структура;
	НастройкиВстроеннойПочты.Вставить("РежимМоиПапки", РежимМоиПапки);
	Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимМоиПапки(Режим)
	
	Если РежимМоиПапки = Режим Тогда
		Возврат;
	КонецЕсли;
	
	РежимМоиПапки = Режим;
	
	ЗаполнитьДеревоПапок();
	Если РежимМоиПапки Тогда
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'; en = 'My folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'; en = 'All folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"РежимМоиПапки",
		РежимМоиПапки);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОТБОР В ПАПКЕ

&НаКлиенте
Процедура УстановитьОтборСпискаКлиент()
	
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	УстановитьОтборСпискаСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаСервер()
	
	ВстроеннаяПочтаСервер.УстановитьОтборСписка(БыстрыйПоискВключен, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеСтрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВПапке.ТекущиеДанные;
	
	Если ТекущиеДанные.Параметр = "Текст" Тогда
		
		СловаПисьма = ВстроеннаяПочтаКлиентСервер.СтрокуПочтовогоАдресаВСлова(ТекущиеДанные.Значение);
		Если СловаПисьма.Количество() > 1 Тогда
			Слово = СловаПисьма[0];
			ТекстСообщения = НСтр("ru ='В быстром поиске по тексту писем можно использовать только одно слово.'; en = 'Only one word can be used for quick search by email texts.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ОтборВПапке");
			ТекущиеДанные.Значение = Слово;
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	Если Не БыстрыйПоискВключен Тогда
		Если ЗначениеЗаполнено(Элементы.ОтборВПапке.ТекущиеДанные.Значение) Тогда
			БыстрыйПоискВключен = Истина;
			ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
		КонецЕсли;
	КонецЕсли;
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораУТекущегоПоляОтбора(ДанныеВыбора = Неопределено)
	
	//Обновление списка выбора у элемента
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
		
	Если Элементы.ОтборВПапке.ТекущаяСтрока <> Неопределено Тогда
		
		СписокПоследнихЗначений = СписокСписковВыбора[Элементы.ОтборВПапке.ТекущаяСтрока].Значение;
		Для Каждого ПоследнееЗначение Из СписокПоследнихЗначений Цикл			
			
			ДанныеВыбора.Добавить( 
				ПоследнееЗначение.Значение,
				ПоследнееЗначение.Представление,
				ПоследнееЗначение.Пометка,
				ПоследнееЗначение.Картинка);		
		КонецЦикла;
			
		Элементы.ОтборВПапкеЗначение.КнопкаВыбора = 
			СписокПоследнихЗначений.Количество() > 0
			Или Найти(ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока].Тип, "Перечисление") > 0 
			Или Найти(ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока].Тип, "Булево") > 0;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Для Каждого Строка Из ОтборВПапке Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	УстановитьОтборСпискаКлиент();
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаВОтбореВПапке <> Элементы.ОтборВПапке.ТекущаяСтрока Тогда
		ОбновитьСписокВыбораУТекущегоПоляОтбора();
		Элементы.ОтборВПапкеЗначение.РедактированиеТекста = Истина;
		Если Найти(НРег(Элементы.ОтборВПапке.ТекущиеДанные.Тип), "булево") > 0 
			Или Найти(НРег(Элементы.ОтборВПапке.ТекущиеДанные.Тип), "перечисление") > 0 Тогда
			Элементы.ОтборВПапкеЗначение.РедактированиеТекста = Ложь;
			Элементы.ОтборВПапкеЗначение.КнопкаВыпадающегоСписка = Ложь;
		КонецЕсли;
		ТекущаяСтрокаВОтбореВПапке = Элементы.ОтборВПапке.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюВвода(Команда)
	
	Строка = ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока];
	Если Строка.Тип <> "Строка" И Строка.Тип <> "Дата" И Строка.Тип <> "Булево" Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяЭтойФормы, Строка.Параметр, Новый СписокЗначений);
	СписокСписковВыбора[Элементы.ОтборВПапке.ТекущаяСтрока].Значение = Новый СписокЗначений;
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка из Элемент.СписокВыбора Цикл
		Если Найти(НРег(Строка(ЭлементСписка.Значение)), НРег(Текст)) = 1 Тогда
			ДанныеВыбора.Добавить(
				ЭлементСписка.Значение,
				ЭлементСписка.Представление,
				ЭлементСписка.Пометка,
				ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	
	Строка = ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока];
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1,1,1);
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "Булево" Тогда
		Строка.Значение = Неопределено;
	КонецЕсли;
	Элементы.ОтборВПапке.ЗакончитьРедактированиеСтроки(Ложь);
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Элементы.ОтборВПапке.ТекущиеДанные.Значение = ВыбранноеЗначение;
	Элементы.ОтборВПапке.ЗакончитьРедактированиеСтроки(Ложь);
	
	Если Не БыстрыйПоискВключен Тогда
		Если ЗначениеЗаполнено(Элементы.ОтборВПапке.ТекущиеДанные.Значение) Тогда
			БыстрыйПоискВключен = Истина;
			ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// СПИСОК ФАЙЛОВ В ОБЛАСТИ ПРЕДПРОСМОТРА

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Письмо) Тогда
			
			ВстроеннаяПочтаКлиент.ОткрытьПисьмо(Элемент.ТекущиеДанные.Письмо);
			
		ИначеЕсли Элемент.ТекущиеДанные.ЭтоВложенноеПисьмо Тогда
			
			ПараметрыОткрытия = Новый Структура("ФайлПисьма", Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму(
				"ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрВложенногоПисьма", 
				ПараметрыОткрытия,
				ЭтаФорма,,,,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			ВстроеннаяПочтаКлиент.ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, УникальныйИдентификатор, , ПредыдущийАдресФайла);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныйВложений = Элементы.Вложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныйВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныйВложений = 1 Тогда
			
			ФайлСсылка = Элементы.Вложения.ТекущиеДанные.Ссылка;
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
				ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
		
		Иначе
			
			МассивФайлов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			КонецЦикла;
			Если МассивФайлов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивФайлов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
			ТекущиеДанные.Представление);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
			ТекущиеДанные.Представление);
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВложениеПометитьНаУдалениеСервер(
		ДополнительныеПараметры.ТекущиеДанные.Ссылка,
		ДополнительныеПараметры.ТекущиеДанные.РедактируетТекущийПользователь);
	УстановитьСтраницуПредпросмотра();
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка, РедактируетТекущийПользователь)
	
	// упрощенный режим работы с файлами - освободим файлы	
	Если РедактируетТекущийПользователь И ОткрыватьФайлыИсходящегоПисьмаНаРедактирование Тогда
		РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;	
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	ОбновитьФайлыПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыПисьма()
	
	// Сохранение текущей строки
	ТекПозиция = Неопределено;
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				ТекПозиция = Новый Структура("Ссылка", ТекДанные.Ссылка);
			ИначеЕсли ТекДанные.Свойство("Представление")
				И ТекДанные.Свойство("Размер") Тогда
				ТекПозиция = Новый Структура("Представление, Размер", ТекДанные.Представление, ТекДанные.Размер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение списка файлов
	Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
		ЗаполнитьВложения(Вложения, ТекущееПисьмо);
	КонецЕсли;
	
	// Восстановление текущей строки
	Если ЗначениеЗаполнено(ТекПозиция) Тогда
		Если ТипЗнч(ТекПозиция) = Тип("Структура") Тогда
			Строки = Вложения.НайтиСтроки(ТекПозиция);
			Если Строки.Количество() > 0 Тогда
				Элементы.Вложения.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = Истина;
		Элементы.РедактироватьВложение.Доступность = Истина;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ВстроеннаяПочтаКлиент.СохранитьВложенияКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Письмо) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьПисьмо(ТекущиеДанные.Письмо);
	ИначеЕсли ТекущиеДанные.ЭтоВложенноеПисьмо Тогда
		
		ПараметрыОткрытия = Новый Структура("ФайлПисьма", ТекущиеДанные.Ссылка);
		ОткрытьФорму(
			"ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрВложенногоПисьма", 
			ПараметрыОткрытия,
			ЭтаФорма,,,,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ВстроеннаяПочтаКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор,,ПредыдущийАдресФайла);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(
		Обработчик,
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, 
	ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыПисьма();
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаполнитьВложения(Вложения, Письмо)
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
	
	Вложения.Очистить();
	Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
	КонецЦикла;
	
	ВложенныеПисьма = РегистрыСведений.ВложенныеПисьма.ПолучитьВложенныеПисьма(Письмо);
	Для Каждого ФайлыПисьмаСтрока Из ВложенныеПисьма Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПредпросмотра()
	
	Если Вложения.Количество() > 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаПредпросмотрСВложениями;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаПредпросмотрБезВложений;
	КонецЕсли;
	
	Если Элементы.СтраницыПредпросмотр.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

&НаСервере
Процедура УстановитьОтборПоПапкеСервер(Папка, ТекущаяСтрока = Неопределено)
	
	ТекущаяПапка = Папка;
	
	//Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);

	Список.Параметры.УстановитьЗначениеПараметра("Папка", Неопределено);
	Элементы.ГруппаОтборВПапке.Доступность = Истина;	
	Если Папка = Неопределено ИЛИ Папка.Пустая() Тогда
		Элементы.ГруппаОтборВПапке.Доступность = Ложь;
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	КонецЕсли;
	
	ИспользуетсяПоискПоНепрочитанным = Ложь;
	
	Если ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПоиска") Тогда
		
		Если Найти(Список.ТекстЗапроса, "ПромежуточныеРезультатыПоискаПисем") = 0 Тогда
			
			Если Найти(Список.ТекстЗапроса, "РегистрСведений.СловаПисем") <> 0 Тогда
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;		
				Список.ТекстЗапроса = СтрЗаменить(
					Список.ТекстЗапроса,
					"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
					ВстроеннаяПочтаСервер.ПолучитьТекстЗапросаПоПапкеПоискаИПоТексту());
				
			Иначе	
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;
				Список.ТекстЗапроса = СтрЗаменить(
					Список.ТекстЗапроса,
					"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
					ВстроеннаяПочтаСервер.ПолучитьТекстЗапросаПоПапкеПоиска());
					
			КонецЕсли;
				
			Список.Параметры.УстановитьЗначениеПараметра("ИдентификаторПоиска", УникальныйИдентификатор);
				
		КонецЕсли;
		
		КоличествоПисем = ВыполнитьПоискПоПапкеПоискаСервер(Папка);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеПапки = Папки.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если КоличествоПисем = 0 Тогда
			ДанныеПапки.Представление = Строка(ДанныеПапки.Ссылка);
		Иначе
			ДанныеПапки.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)",
				Строка(ДанныеПапки.Ссылка),
				Строка(КоличествоПисем));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		
		Если Не ПоказыватьДеревоПапок Тогда
			ПредставлениеПапки = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПапки(Папка);
			ТекущаяПапкаОписание = СформироватьЗаголовок(ПредставлениеПапки.Описание, ПредставлениеПапки.КоличествоПисем);
			ЭтаФорма.Заголовок = ТекущаяПапкаОписание;
		КонецЕсли;	
		
		Если Список.ТекстЗапроса <> ИсходныйТекстЗапроса Тогда
			
			Если Найти(Список.ТекстЗапроса, "РегистрСведений.СловаПисем") <> 0 Тогда
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;
				
				Список.ТекстЗапроса = СтрЗаменить(
					Список.ТекстЗапроса,
					"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
					ВстроеннаяПочтаСервер.ПолучитьТекстЗапросаПоискаПоТексту());
					
			Иначе
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;
				
			КонецЕсли;			
			
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Папка);
		
		Если ТекущаяСтрока = Неопределено Тогда
			
			Если ПредыдущаяПапка = Неопределено
				Или ТипЗнч(ПредыдущаяПапка) = Тип("СправочникСсылка.ПапкиПоиска") Тогда
				
				УстановитьОтборСпискаСервер();
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		СведенияОПапке = ВстроеннаяПочтаСервер.ПолучитьСведенияОПапке(Папка);
		ДанныеПапки = Папки.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ДанныеПапки.Представление <> СведенияОПапке.Представление
			Или ДанныеПапки.Выделена <> СведенияОПапке.Выделена Тогда
			
			ДанныеПапки.Представление = СведенияОПапке.Представление;
			ДанныеПапки.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
				
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьОтборСписка(БыстрыйПоискВключен, ЭтаФорма);
	ПредыдущаяПапка = Папка;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискПоПапкеПоискаСервер(ПапкаПоиска)
	
	ПапкаПоискаОбъект = ПапкаПоиска.ПолучитьОбъект();
	УсловияПоиска = ПапкаПоискаОбъект.НастройкаОтбора.Получить();
	
	Для Каждого Строка Из УсловияПоиска Цикл
		Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.Прочтено
			И Строка.ЗначенияУсловия.Количество() > 0 Тогда
			
			ИспользуетсяПоискПоНепрочитанным = Не Строка.ЗначенияУсловия[0].Значение;

		КонецЕсли;	
	КонецЦикла;
	
	РезультатПоиска = ПоискПисемПоРеквизитам.ВыполнитьПоиск(УсловияПоиска);
	МассивСсылок = РезультатПоиска.МассивСсылок;
	КоличествоНайденных = МассивСсылок.Количество();
	Если ПапкаПоискаОбъект.КоличествоОбъектов <> КоличествоНайденных Тогда
		ПапкаПоискаОбъект.КоличествоОбъектов = МассивСсылок.Количество();
		ПапкаПоискаОбъект.Записать();
		НеобходимоОбновитьДеревоПапок = Истина;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаПоиска = ТекущаяДатаСеанса();
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Для Каждого ЭлементМассива Из МассивСсылок Цикл
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Ссылка = ЭлементМассива;
		НоваяЗапись.ИдентификаторПоиска = УникальныйИдентификатор;
		НоваяЗапись.ДатаПоиска = ДатаПоиска;
	КонецЦикла;	
	Набор.Записать(Истина);
	
	Возврат КоличествоНайденных;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранноеПисьмо(ВыводитьПредупреждение)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Элементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Письмо = Элементы.Список.ТекущиеДанные.Ссылка;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'; en = 'Email is not selected.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеПисьма(ВыводитьПредупреждение)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка) Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ЗначениеЗаполнено(ВыбранноеПисьмо)
		И Результат.Найти(ВыбранноеПисьмо) = Неопределено Тогда
		Результат.Добавить(ВыбранноеПисьмо);
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны письма.'; en = 'Emails are not selected.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КомандаОшибкаПодключенияПодробно(Команда)
	
	ПараметрыФормы = Новый Структура("ОшибкаСоединенияСПочтовымСервером", ОшибкаСоединенияСПочтовымСервером);
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрОшибкиСоединения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПравилОбработки(Команда)
	
	ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.НастройкаПравилОбработки");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПравило(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ВходящееПисьмо")
		И ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСозданияПравила = ПолучитьДанныеДляСозданияПравила(ТекущиеДанные.Ссылка);	
	ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ФормаЭлемента", ДанныеДляСозданияПравила);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСозданияПравила(Основание)
	
	Условия = Новый СписокЗначений;
	Действия = Новый СписокЗначений;
	ДляВходящих = ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание);
	ДляИсходящих = ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание);
	
	РаботаСПравиламиОбработкиПисем.СформироватьУсловияПоПисьму(
		Основание,
		Условия,
		ДляВходящих,
		ДляИсходящих);
	РаботаСПравиламиОбработкиПисем.СформироватьДействияПоПисьму(
		Основание,
		Действия,
		ДляВходящих,
		ДляИсходящих);
		
	Результат = Новый Структура;
	Результат.Вставить("Условия", Условия);
	Результат.Вставить("Действия", Действия);
	
	УчетнаяЗапись = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Основание, "УчетнаяЗапись");
	
	Результат.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Результат.Вставить("ДляВходящихПисем", ДляВходящих);
	Результат.Вставить("ДляИсходящихПисем", ДляИсходящих);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВСписок(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Элементы.Список.ТекущиеДанные.УчетнаяЗапись);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВСписокЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = Элементы.Список.ТекущиеДанные.Отправитель;
	УчетнаяЗапись = Элементы.Список.ТекущиеДанные.УчетнаяЗапись;
	
	Если Не ДобавитьВСписокСервер(Результат, Отправитель, УчетнаяЗапись) Тогда
		
		Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправитель письма уже есть в списке адресов ""%1"".'; en = 'Email sender is already present in address list ""%1"".'"), 
			Результат);
		ПоказатьПредупреждение(, Причина);
		
	Иначе
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправитель письма добавлен в список адресов ""%1""'; en = 'Email sender is added to address list ""%1"".'"), Результат);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат);		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в список адресов'; en = 'Adding to the list of addresses'"), НавигационнаяСсылка, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВСписокСервер(Элемент, Адресат, УчетнаяЗапись)
	
	Адрес = ""; 
	
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Адрес = Адресат.Адрес;
	Иначе
		Адрес = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты");
	КонецЕсли;	
	
	Возврат Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(Элемент, Адрес);

КонецФункции

&НаКлиенте
Процедура ДобавитьДоменВСписок(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Элементы.Список.ТекущиеДанные.УчетнаяЗапись);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДоменВСписокЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = Элементы.Список.ТекущиеДанные.Отправитель;
	УчетнаяЗапись = Элементы.Список.ТекущиеДанные.УчетнаяЗапись;
	
	Если Не ДобавитьДоменВСписокСервер(Результат, Отправитель, УчетнаяЗапись) Тогда
		
		Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправитель письма уже есть в списке адресов ""%1"".'; en = 'Email sender is already present in address list ""%1"".'"), 
			Результат);
		ПоказатьПредупреждение(, Причина);
		
	Иначе
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправитель письма добавлен в список адресов ""%1""'; en = 'Email sender is added to address list ""%1"".'"), Результат);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление в список адресов'; en = 'Adding to the list of addresses'"), НавигационнаяСсылка, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьДоменВСписокСервер(Элемент, Адресат, УчетнаяЗапись)
	
	Адрес = ""; 
	
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Адрес = Адресат.Адрес;
	Иначе
		Адрес = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты");
	КонецЕсли;	
	
	Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(Адрес);
	Возврат Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(Элемент, Домен);

КонецФункции

&НаКлиенте
Процедура СпискиАдресов(Команда)
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.Форма.ФормаСпискаПоУчетнымЗаписям");
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьПисьма(Команда)
	
	ОткрытьФорму("Обработка.ПоискПисемПоРеквизитам.Форма.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеИзменилосьСодержаниеПисьма(Письмо = Неопределено)
	
	ПолучитьДанныеДляПредпросмотра = ЗначениеЗаполнено(Письмо)
		И ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо)
		И Письмо = ТекущееПисьмо;
	
	Если Не ПолучитьДанныеДляПредпросмотра Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисление, включен ли быстрый поиск по непрочтенным письмам
	ИспользуетсяБыстрыйПоискПоНепрочитанным = Ложь;			
	Для Каждого Строка Из ОтборВПапке Цикл
		Если Строка.Параметр = "Прочтено" Тогда
			ИспользуетсяБыстрыйПоискПоНепрочитанным = 
				Строка.Значение = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбработки = ОбработатьАктивизациюСтроки(
		Письмо,
		УникальныйИдентификатор,
		ИспользоватьАвтоматическоеПрочтение,
		РежимМоиПапки,
		ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную 
			Или ИспользуетсяПоискПоНепрочитанным
			Или ИспользуетсяБыстрыйПоискПоНепрочитанным,
		ПолучитьМассивЧастыхПапок());
	
	Вложения.Очистить();
	Для каждого Вложение Из РезультатОбработки.Вложения Цикл
		ЗаполнитьЗначенияСвойств(Вложения.Добавить(), Вложение);
	КонецЦикла;
	
	Если РезультатОбработки.ОповеститьОПрочтении Тогда
		ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	КонецЕсли;
	
	ОбновитьОбластьПредпросмотра(
		РезультатОбработки.HTMLПредставлениеПисьма,
		РезультатОбработки.Вложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПапкуНаУдаление(Команда)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка для удаления.'; en = 'Select a folder that you want to delete.'"));
		Возврат;
	КонецЕсли;
	
	Ссылка = Элементы.Папки.ТекущиеДанные.Ссылка;
	
	Если Ссылка = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя удалить предопределенную папку ""Папки поиска"".'; en = 'You cannot delete a predefined folder ""Search folders"".'"));
		Возврат;
	КонецЕсли;
	
	Пометка = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	Если Пометка Тогда 
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
			Строка(Ссылка));
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
			Строка(Ссылка));
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Ссылка", Ссылка);
	ПараметрыОбработчика.Вставить("Пометка", Пометка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьПапкуНаУдалениеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПапкуНаУдалениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Делопроизводство.УстановитьПометкуУдаления(
		ДополнительныеПараметры.Ссылка, Не ДополнительныеПараметры.Пометка);
	
	ОповеститьОбИзменении(ДополнительныеПараметры.Ссылка);
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ЗаполнитьПапки();
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьБыстрыйПоиск(Команда)
	
	ВключитьВыключитьБыстрыйПоискКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьБыстрыйПоискКлиент()
	
	ВключитьВыключитьБыстрыйПоискСервер(Не БыстрыйПоискВключен);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВыключитьБыстрыйПоискСервер(ВключитьПоиск)
	
	БыстрыйПоискВключен = ВключитьПоиск;
	
	Если БыстрыйПоискВключен Тогда
		Элементы.ВключитьВыключитьБыстрыйПоиск.Картинка = БиблиотекаКартинок.ЛампочкаВкл;
		ЭтаФорма.Команды["ВключитьВыключитьБыстрыйПоиск"].Подсказка = НСтр("ru = 'Выключить быстрый поиск'; en = 'Disable quick search'");
	Иначе
		Элементы.ВключитьВыключитьБыстрыйПоиск.Картинка = БиблиотекаКартинок.ЛампочкаВыкл;
		ЭтаФорма.Команды["ВключитьВыключитьБыстрыйПоиск"].Подсказка = НСтр("ru = 'Включить быстрый поиск'; en = 'Enable quick search'");
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьОтборСписка(БыстрыйПоискВключен, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьСписокВыбораУТекущегоПоляОтбора(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбранноеПисьмо, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  Режим по одной папке

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовок(ПолныйПутьПапки, КоличествоПисем)
	
	ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Почта: %1'; en = 'Mail: %1'"), ПолныйПутьПапки);
	
	Если КоличествоПисем > 0 Тогда
	
		ЗаголовокФормы = ЗаголовокФормы
			+ " (" + Формат(КоличествоПисем, "ЧГ=0") + ")";
	
	КонецЕсли;
		
	Возврат ЗаголовокФормы;
	
КонецФункции	

//Возвращает представление отбора
//
// Параметры
//  ОтборВПапке - список значений с отборами
//
//  Возвращаемое значение - Строка - представление отбора
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеОтбораПоискаСтрокой(Знач ОтборВПапке)
	
	ПредставлениеОтбора = "";
	
	ЕстьОтбор = Ложь;
	Для Каждого Строка Из ОтборВПапке Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			
			Если ЗначениеЗаполнено(ПредставлениеОтбора) Тогда
				ПредставлениеОтбора = ПредставлениеОтбора + " ";
			КонецЕсли;	
			
			ПредставлениеОтбора = ПредставлениеОтбора
				+ Строка.ПредставлениеПараметра + " " + Строка(Строка.Значение);
				
			ЕстьОтбор = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Не ЕстьОтбор Тогда
		ПредставлениеОтбора = НСтр("ru = 'Не установлен'; en = 'Not assigned'"); 
	КонецЕсли;	
	
	Возврат ПредставлениеОтбора;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
// Возвращает ФорматированнаяСтрока
Функция ПолучитьПредставлениеОтбораПоиска(Знач ОтборВПапке, Знач МелкийШрифт)
	
	ПредставлениеОтбора = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОтменаБыстрогоПоиска,,,,"Ссылка");
	ПредставлениеОтбора = Новый ФорматированнаяСтрока(ПредставлениеОтбора, " ");
	
	ЕстьОтбор = Ложь;
	Для Каждого Строка Из ОтборВПапке Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			
			Если ЕстьОтбор = Истина Тогда
				ПредставлениеОтбора = Новый ФорматированнаяСтрока(ПредставлениеОтбора, Символы.ПС);
			КонецЕсли;	
			
			ПредставлениеУсловия = Строка.ПредставлениеПараметра + " " + Строка(Строка.Значение);
			
			ПредставлениеОтбора = Новый ФорматированнаяСтрока(
				ПредставлениеОтбора, 
				Новый ФорматированнаяСтрока(ПредставлениеУсловия, 
					Новый Шрифт(МелкийШрифт), Новый Цвет(153, 153, 153))
				);
				
			ЕстьОтбор = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ЕстьОтбор = Ложь Тогда
		Возврат Новый ФорматированнаяСтрока(""); 
	КонецЕсли;	
	
	Возврат ПредставлениеОтбора;
	
КонецФункции	

&НаКлиенте
Процедура ОтображениеПисемПереключитьНастройки()
	
	Если Не ПоказыватьДеревоПапок Тогда
		
		Элементы.ГруппаОтбор.Видимость = Истина;
		Элементы.ГруппаОтбор.Видимость = Истина;
		Элементы.ГруппаПапки.Видимость = Ложь;
		Элементы.ГруппаПолосаСлева.Видимость = Истина;
		Элементы.ПодменюПапки.Видимость = Ложь;
		
		Элементы.НастроитьСписокПапок.Видимость = Истина;
		
		ОтборПоиска = ПолучитьПредставлениеОтбораПоиска(ОтборВПапке, МелкийШрифт);
		
		Если ТипЗнч(ТекущаяПапка) = Тип("СправочникСсылка.ПапкиПоиска") Тогда
			ТекущаяПапка = Неопределено;
			Если ПапкиЧастые.Количество() <> 0 Тогда 
				ТекущаяПапка = ПапкиЧастые[0].Ссылка;
			КонецЕсли;	
		КонецЕсли;	
		Если ЗначениеЗаполнено(ТекущаяПапка) Тогда
			ПредставлениеПапки = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПапки(ТекущаяПапка);
			ТекущаяПапкаОписание = СформироватьЗаголовок(ПредставлениеПапки.Описание, ПредставлениеПапки.КоличествоПисем);
			ЭтаФорма.Заголовок = ТекущаяПапкаОписание;
		КонецЕсли;
		
		Папки.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоЧастыхПапок();
		
	Иначе
		Элементы.ГруппаОтбор.Видимость = Ложь;
		Элементы.ГруппаОтбор.Видимость = Ложь;
		Элементы.ГруппаПапки.Видимость = Истина;
		Элементы.ГруппаПолосаСлева.Видимость = Ложь;
		Элементы.ПодменюПапки.Видимость = Истина;
		
		Элементы.НастроитьСписокПапок.Видимость = Ложь;
		
		Заголовок = НСтр("ru = 'Почта'; en = 'Email'");
		Элементы.ОтборВПапке.ТекущаяСтрока = 0;
		ТекущаяСтрокаВОтбореВПапке = 0;
		
		ЗаполнитьДеревоПапок();
		
		Контекст = Новый Структура;
		Контекст.Вставить("Дерево", Папки);
		Контекст.Вставить("ФормаДерево", Элементы.Папки);
		Контекст.Вставить("Ссылка", ТекущаяПапка);
		Контекст.Вставить("ВозвращаемыйИдентификаторСтроки", Неопределено);
		ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "НайтиПапкуПоСсылке");
		
		Если ЗначениеЗаполнено(Контекст.ВозвращаемыйИдентификаторСтроки) Тогда
			Элементы.Папки.ТекущаяСтрока = Контекст.ВозвращаемыйИдентификаторСтроки;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапку(Команда)
	
	ВыбратьПапкуВыполнить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапкуВыполнить()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекущаяПапка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПапкуВыполнитьЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.ПапкиПисем.ФормаВыбора", ПараметрыОткрытия,ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапкуВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		ТекущаяПапка = Результат;
		УстановитьОтборПоПапкеСервер(ТекущаяПапка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуБыстрогоПоиска()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборВПапке", ОтборВПапке);
	ПараметрыФормы.Вставить("СписокСписковВыбора", СписокСписковВыбора);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборПоискаНажатиеЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.НастройкаБыстрогоПоиска", 
		ПараметрыФормы,ЭтаФорма,,,,
		ОписаниеОповещения,РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоискаНажатиеЗавершение(РезультатФормы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) = Тип("Структура") Тогда
		
		Для Индекс = 0 ПО РезультатФормы.ОтборВПапке.Количество()-1 Цикл
			НоваяСтрока = ОтборВПапке[Индекс];
			Строка = РезультатФормы.ОтборВПапке[Индекс];
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;	
		
		СписокСписковВыбора = РезультатФормы.СписокСписковВыбора;
		
		ОтборПоиска = ПолучитьПредставлениеОтбораПоиска(ОтборВПапке, МелкийШрифт);
		УстановитьОтборСпискаСервер();
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЧастыхПапок()
	
	Если ПоказыватьДеревоПапок Тогда
		Возврат Неопределено;
	Иначе
		МассивПапок = Новый Массив;
		Для Каждого Строка Из ПапкиЧастые Цикл
			МассивПапок.Добавить(Строка.Ссылка);
		КонецЦикла;	
		Возврат МассивПапок;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура СброситьОтборВыполнить()
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;

	Для Каждого Строка Из ОтборВПапке Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	УстановитьОтборСпискаСервер();
	ТекущийЭлемент = Элементы.Список;
	
	Если Не ПоказыватьДеревоПапок Тогда
		ОтборПоиска = ПолучитьПредставлениеОтбораПоиска(ОтборВПапке, МелкийШрифт);
		Элементы.ГруппаОтбор.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

//  Режим по одной папке - конец

&НаКлиенте
Процедура ПраваНаПапку(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущаяПапка) 
		Или ТипЗнч(ТекущаяПапка) = Тип("СправочникСсылка.ПапкиПоиска") Тогда
		Возврат;
	КонецЕсли;	
	
	// Открытие формы настройки прав
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", ТекущаяПапка);
	ОткрытьФорму("ОбщаяФорма.НастройкиПравПапок", ПараметрыФормы, , Элементы.Папки.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискВидимость(Команда)
	
	БыстрыйПоискВидимостьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБыстрыйПоискНажатие(Элемент)
	БыстрыйПоискВидимостьСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБыстрыйПоискОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БыстрыйПоискВидимостьСервер();
КонецПроцедуры

&НаСервере
Процедура БыстрыйПоискВидимостьСервер()
	
	БыстрыйПоискВиден = Не БыстрыйПоискВиден;
	БыстрыйПоискВидимостьСерверВыполнить();
	
КонецПроцедуры

&НаСервере
Процедура БыстрыйПоискВидимостьСерверВыполнить()
	
	Элементы.ОтборВПапке.Видимость = БыстрыйПоискВиден;
	Элементы.КомандыОтбора.Видимость = БыстрыйПоискВиден;
	
	Если Не БыстрыйПоискВиден Тогда 
		
		ОтборПоискаСтрока = ПолучитьПредставлениеОтбораПоискаСтрокой(ОтборВПапке);
		
		Команды.БыстрыйПоискВидимость.Картинка = БиблиотекаКартинок.СверткаПраво;
		
		Элементы.ДекорацияБыстрыйПоиск.Заголовок = 
			Новый ФорматированнаяСтрока(НСтр("ru = 'Быстрый поиск'; en = 'Quick search'"),,,,"Ссылка"); 
			
		Элементы.ДекорацияБыстрыйПоиск.Подсказка = 
			Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Быстрый поиск'; en = 'Quick search'"),,,,"Ссылка"), 
			Новый ФорматированнаяСтрока(" (" + ОтборПоискаСтрока + ")", 
				Новый Шрифт(ШрифтыСтиля.МелкийШрифтТекста), Новый Цвет(153, 153, 153))
			);
			
	Иначе
		
		Команды.БыстрыйПоискВидимость.Картинка = БиблиотекаКартинок.СверткаНиз;
		
		Элементы.ДекорацияБыстрыйПоиск.Заголовок = 
			Новый ФорматированнаяСтрока(НСтр("ru = 'Быстрый поиск'; en = 'Quick search'"),,,,"Ссылка"); 
		
		Элементы.ДекорацияБыстрыйПоиск.Подсказка = Элементы.ДекорацияБыстрыйПоиск.Заголовок;	
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура БыстрыйПоискСлева(Команда)
	ОткрытьФормуБыстрогоПоиска();
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПапкиЧастые.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Ссылка = ТекущаяПапка Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикПапкиЧастыеПриАктивизацииСтроки", 0.2, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПапкиЧастыеПриАктивизацииСтроки()
	
	ПапкаДляАктивации = Неопределено;
	
	ТекущиеДанные = Элементы.ПапкиЧастые.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПапкаДляАктивации = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяПапка) Тогда
		ОтключитьОбработчикОжидания("ОбработчикПапкиЧастыеПриАктивизацииСтроки");
	КонецЕсли;	
	
	Если ПапкаДляАктивации = ТекущаяПапка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПапка = ТекущаяПапка;
	ТекущаяПапка = ПапкаДляАктивации;
	Если Не ПоказыватьДеревоПапок И Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
		ТекущаяПапка = ПредыдущаяПапка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
		УстановитьОтборПоПапкеКлиент(Неопределено);
		ОбновитьОбластьПредпросмотра("<html><body></body></html>");
	Иначе
		УстановитьОтборПоПапкеКлиент(ТекущаяПапка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПапкаНазначения = ПапкиЧастые.НайтиПоИдентификатору(Строка).Ссылка;
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Массив")
		И ПеретаскиваемоеЗначение.Количество() > 0
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПеретаскиваемоеЗначение[0]) Тогда
		
		Письма = Новый Массив;
		Для каждого Письмо Из ПеретаскиваемоеЗначение Цикл
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
				Письма.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		
		ПереместитьВПапкуКлиент(Письма, ПапкаНазначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧастыеПапки()
	
	ТекущаяЧастаяПапка = Неопределено;
	ТекущиеДанные = Элементы.ПапкиЧастые.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяЧастаяПапка = ТекущиеДанные.Ссылка;
	КонецЕсли;	
	
	ЗаполнитьДеревоЧастыхПапок();
	
	Для Каждого Элемент Из ПапкиЧастые Цикл
		Если Элемент.Ссылка = ТекущаяЧастаяПапка Тогда
			Элементы.ПапкиЧастые.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереключитьсяВРежимПоОднойПапке(Команда)
	
	ВидСписка = "Компактный";
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку("ВидСписка", ВидСписка);
	ПоказыватьДеревоПапок = (ВидСписка = "Обычный");
	ОтображениеПисемПереключитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьсяВРежимПоПапкам(Команда)
	
	ВидСписка = "Обычный";
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку("ВидСписка", ВидСписка);
	ПоказыватьДеревоПапок = (ВидСписка = "Обычный");
	ОтображениеПисемПереключитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписокПапок(Команда)
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.НастройкаСпискаПапок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПапки(Команда)
	
	ТекущиеДанные = Элементы.ПапкиЧастые.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоискаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СброситьОтборВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПапкиЧастые.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЧастыеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 pcs) copied to the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Вложения.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(Вложения, Элементы.Вложения.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправляемыеПисьма = Новый СписокЗначений;
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ОтправляемыеПисьма = ДоступныеДляОтправкиПисьма(Письма);
	Если ОтправляемыеПисьма.Количество() = 0 Тогда 
		ПоказатьПредупреждение(,НСтр("ru = 'Команда может быть выполнена только для неотправленных исходящих писем'; en = 'The command can be executed only for unsent outgoing emails'"));
		Возврат;
	КонецЕсли;	
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПродолжение", ЭтотОбъект, ОтправляемыеПисьма);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоПисем", ОтправляемыеПисьма.Количество());
		
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВопросПриОтправкеИзСписка", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеДляОтправкиПисьма(Письма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящееПисьмо.Ссылка
	|ИЗ
	|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
	|ГДЕ
	|	ИсходящееПисьмо.Ссылка В(&Письма)
	|	И ИсходящееПисьмо.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|	И ИсходящееПисьмо.ПодготовленоКОтправке = ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("Письма", Письма);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаКлиенте
Процедура ОтправитьПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Истина Тогда 
		Возврат;
	КонецЕсли;	
	
	ВстроеннаяПочтаКлиент.ОтправитьПисьмаИзСписка(ДополнительныеПараметры, ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПометитьВсеПисьмаВПапкеКакПрочтенные(Команда)
	
	Если ПоказыватьДеревоПапок Тогда 
		Если Элементы.Папки.ТекущиеДанные <> Неопределено Тогда
			ПапкаПрочтения = Элементы.Папки.ТекущиеДанные.Ссылка;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
			Возврат;
		КонецЕсли;
	Иначе 
		ПапкаПрочтения = ТекущаяПапка;
	КонецЕсли;
	
	Если ПапкаПрочтения = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
		Возврат;
		
	Иначе 
		Если Не ЭтоФайловаяБаза Тогда
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ПапкаПрочтения);
			МассивПараметров.Добавить(ТекущийПользователь);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ИмяФункции", "РаботаСПрочтениями.ПометитьВсеПисьмаКакПрочтенные");
			ПараметрыФормы.Вставить("ПараметрыФункции", МассивПараметров);
			ПараметрыФормы.Вставить("ЗаголовокФормы", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все письма папки ""%1"" помечаются как прочтенные'; en = 'All the emails of the folder ""%1"" are marked as read'"),
					ПапкаПрочтения));
			
			ОткрытьФорму("ОбщаяФорма.ВыполнениеДлительнойОперации", ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
			
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все письма папки ""%1"" помечаются как прочтенные. Пожалуйста, подождите...'; en = 'All the emails of the folder ""%1"" are marked as read. Please wait ...'"),
				ПапкаПрочтения);
			Состояние(Текст);
			
			РаботаСПрочтениями.ПометитьВсеПисьмаКакПрочтенные(ПапкаПрочтения, ТекущийПользователь);
			ОбновитьДанные();
			Состояние();
			ПоказатьПредупреждение(,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пометка о прочтении всех писем папки ""%1"" установлена.'; en = 'All emails in the folder ""%1"" are marked as read.'"), 
					Строка(ПапкаПрочтения)));
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеПисьмаВПапкеНаУдаление(Команда)
	
	Если ПоказыватьДеревоПапок Тогда 
		Если Элементы.Папки.ТекущиеДанные <> Неопределено Тогда
			ПапкаПрочтения = Элементы.Папки.ТекущиеДанные.Ссылка;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
			Возврат;
		КонецЕсли;
	Иначе 
		ПапкаПрочтения = ТекущаяПапка;
	КонецЕсли;
	
	Если ПапкаПрочтения = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
		Возврат;
		
	Иначе 
		Если Не ЭтоФайловаяБаза Тогда
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ПапкаПрочтения);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ИмяФункции", "ВстроеннаяПочтаСервер.ПометитьВсеПисьмаВПапкеНаУдаление");
			ПараметрыФормы.Вставить("ПараметрыФункции", МассивПараметров);
			ПараметрыФормы.Вставить("ЗаголовокФормы", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все письма папки ""%1"" помечаются на удаление'; en = 'All the emails of the folder ""%1"" are marked for deletion'"),
					ПапкаПрочтения));
			
			ОткрытьФорму("ОбщаяФорма.ВыполнениеДлительнойОперации", ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
			
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все письма папки ""%1"" помечаются на удаление. Пожалуйста, подождите...'; en = 'All the emails of the folder ""%1"" are marked for deletion. Please wait ...'"),
				ПапкаПрочтения);
			Состояние(Текст);
			
			ВстроеннаяПочтаСервер.ПометитьВсеПисьмаВПапкеНаУдаление(ПапкаПрочтения);
			ОбновитьДанные();
			Состояние();
			ПоказатьПредупреждение(,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все письма папки ""%1"" помечены на удаление.'; en = 'All the emails of the folder ""%1"" are marked for deletion.'"), 
					Строка(ПапкаПрочтения)));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВсеПисьмаВКорзину(Команда)
	
	Если ПоказыватьДеревоПапок Тогда 
		Если Элементы.Папки.ТекущиеДанные <> Неопределено Тогда
			ПапкаИсточник = Элементы.Папки.ТекущиеДанные.Ссылка;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
			Возврат;
		КонецЕсли;
	Иначе 
		ПапкаИсточник = ТекущаяПапка;
	КонецЕсли;
	
	Если ПапкаИсточник = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
		Возврат;
		
	Иначе 
		Если Не ЭтоФайловаяБаза Тогда
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ПапкаИсточник);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ИмяФункции", "ВстроеннаяПочтаСервер.ПеренестиВсеПисьмаВКорзину");
			ПараметрыФормы.Вставить("ПараметрыФункции", МассивПараметров);
			ПараметрыФормы.Вставить("ЗаголовокФормы", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все письма папки ""%1"" переносятся в корзину'; en = 'Moving to the Recycle Bin all the emails from ""%1"" folder'"),
					ПапкаИсточник));
			
			ОткрытьФорму("ОбщаяФорма.ВыполнениеДлительнойОперации", ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
			
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все письма папки ""%1"" переносятся в корзину. Пожалуйста, подождите...'; en = 'Moving to the Recycle Bin all the emails from ""%1"" folder. Please wait...'"),
				ПапкаИсточник);
			Состояние(Текст);
			
			ВстроеннаяПочтаСервер.ПеренестиВсеПисьмаВКорзину(ПапкаИсточник);
			ОбновитьДанные();
			Состояние();
			ПоказатьПредупреждение(, НСтр("ru = 'Все письма перенесены в корзину.'; en = 'All emails are moved to the Recycle Bin.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВсеПисьмаВПапку(Команда)
	
	Если ПоказыватьДеревоПапок Тогда 
		Если Элементы.Папки.ТекущиеДанные <> Неопределено Тогда
			ПапкаИсточник = Элементы.Папки.ТекущиеДанные.Ссылка;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
			Возврат;
		КонецЕсли;
	Иначе 
		ПапкаИсточник = ТекущаяПапка;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	ПараметрыФормы.Вставить("РежимМоиПапки", РежимМоиПапки);
	
	Если Не ДеревоПереносаИнициализировано Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ПараметрыФормы.Вставить("СостояниеДереваПапок", СостояниеДерева);
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПапкаИсточник", ПапкаИсточник);
	ПараметрыОбработчика.Вставить("СостояниеДерева", СостояниеДерева);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиВсеПисьмаВПапкуЗавершение",
		ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПапкиПисем.Форма.ФормаПереносаПисем", ПараметрыФормы,
		ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВсеПисьмаВПапкуЗавершение(ПапкаПриемник, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПапкаПриемник) Тогда
		Возврат;
	КонецЕсли;
	
	ПапкаИсточник = ДополнительныеПараметры.ПапкаИсточник;
	
	Если ПапкаИсточник = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
		Возврат;
		
	Иначе 
		Если Не ЭтоФайловаяБаза Тогда
			
			ТолькоПросмотр = Истина;
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ПапкаИсточник);
			МассивПараметров.Добавить(ПапкаПриемник);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ИмяФункции", "ВстроеннаяПочтаСервер.ПеренестиВсеПисьмаВПапку");
			ПараметрыФормы.Вставить("ПараметрыФункции", МассивПараметров);
			ПараметрыФормы.Вставить("ЗаголовокФормы", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все письма папки ""%1"" переносятся в папку ""%2""'; en = 'Moving to ""%2"" folder all the emails from ""%1"" folder'"),
					ПапкаИсточник, ПапкаПриемник));
			
			ОткрытьФорму("ОбщаяФорма.ВыполнениеДлительнойОперации", ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
			
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все письма папки ""%1"" переносятся в папку ""%2"". Пожалуйста, подождите...'; en = 'Moving to ""%2"" folder all the emails from ""%1"" folder. Please wait...'"),
				ПапкаИсточник, ПапкаПриемник);
			Состояние(Текст);
			
			ВстроеннаяПочтаСервер.ПеренестиВсеПисьмаВПапку(ПапкаИсточник, ПапкаПриемник);
			ОбновитьДанные();
			Состояние();
			ПоказатьПредупреждение(,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все письма перенесены в папку ""%1"".'; en = 'All emails are moved to ""%1"" folder.'"), 
					Строка(ПапкаПриемник)));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

