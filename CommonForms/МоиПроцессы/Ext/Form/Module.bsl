
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Восстановление настроек формы
	СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
		ПоказыватьТолькоАктивныеПроцессы = СохраненныеРеквизиты.Получить("ПоказыватьТолькоАктивныеПроцессы");
		ПоТипуПроцесса = СохраненныеРеквизиты.Получить("ПоТипуПроцесса");
		ПоИсполнителю = СохраненныеРеквизиты.Получить("ПоИсполнителю");
		ПоПредмету = СохраненныеРеквизиты.Получить("ПоПредмету");
	Иначе
		ПоказыватьТолькоАктивныеПроцессы = Истина;
		ПоИсполнителю = Неопределено;
		ПоПредмету = Неопределено;
	КонецЕсли;
	Элементы.СписокПроцессовПоказыватьТолькоАктивныеПроцессы.Пометка = ПоказыватьТолькоАктивныеПроцессы;
	
	ТолькоПросроченные = Ложь;
	Если Параметры.Свойство("ТолькоПросроченные") Тогда
		ТолькоПросроченные = Параметры.ТолькоПросроченные;
	КонецЕсли;	
	
	Если ТолькоПросроченные Тогда
		
		КлючНазначенияИспользования = "МоиПроцессыТолькоПросроченные";
		
		Элементы.СписокПроцессовПоказыватьТолькоАктивныеПроцессы.Видимость = Ложь;
		ПоказыватьТолькоАктивныеПроцессы = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			СписокПроцессов,
			"ТолькоПросроченные",
			ТолькоПросроченные,
			Истина);
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			СписокПроцессов,
			"ТекущаяДата1",
			ТекущаяДатаСеанса,
			Истина);
			
	Иначе		

		КлючНазначенияИспользования = "МоиПроцессы";
		
	КонецЕсли;	
	
	// Установка параметров списку процессов
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокПроцессов,
		"ТекущаяДата",
		ТекущаяДатаСеанса);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокПроцессов,
		"Автор",
		ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокПроцессов,
		"ПоказыватьТолькоАктивныеПроцессы",
		ПоказыватьТолькоАктивныеПроцессы,
		ПоказыватьТолькоАктивныеПроцессы);
	
	УстановитьУсловноеОформлениеСпискаПроцессов(ТекущаяДатаСеанса);
	
	ДатаОбновленияПараметраТекущаяДата = ТекущаяДатаСеанса;
	
	ПредставлениеHTML = ОбзорПроцессовВызовСервера.ПолучитьОбзорПроцесса(ТекущийПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БизнесПроцессИзменен"
		ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		
		Элементы.СписокПроцессов.Обновить();
		ТекущийПроцесс = Неопределено;
		ПодключитьОбработчикОжидания("ОбновитьHTMLПредставление", 0.2, Истина);
		СписокПроцессовПриАктивизацииСтроки(Элементы.СписокПроцессов);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет) И ЭтоПоддерживаемыйБизнесПроцесс(Параметр.Предмет) Тогда
			Элементы.СписокПроцессов.Обновить();
			ОповеститьОбИзменении(Параметр.Предмет);
			
			ТекущийПроцесс = Неопределено;
			ПодключитьОбработчикОжидания("ОбновитьHTMLПредставление", 0.2, Истина);
			СписокПроцессовПриАктивизацииСтроки(Элементы.СписокПроцессов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ТолькоПросроченные Тогда
		ПоказыватьТолькоАктивныеПроцессы = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбзорПроцессовКлиент.ПредставлениеПроцессаHTMLПриНажатии(
		Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПроцессов

&НаКлиенте
Процедура СписокПроцессовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьТекущуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроцессовПриАктивизацииСтроки(Элемент)
	
	НовыйТекущийПроцесс = Неопределено;
	
	Если Элементы.СписокПроцессов.ТекущиеДанные <> Неопределено Тогда
		НовыйТекущийПроцесс = Элементы.СписокПроцессов.ТекущиеДанные.Процесс;
	КонецЕсли;
	
	Если НовыйТекущийПроцесс = ТекущийПроцесс Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПроцесс = НовыйТекущийПроцесс;
	
	ПодключитьОбработчикОжидания("ОбновитьHTMLПредставление", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроцессовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокПроцессов.ТекущиеДанные;
	
	Если Копирование И ТекущиеДанные <> Неопределено Тогда
		
		ЗначениеКопирования = ТекущиеДанные.Процесс;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ЗначениеКопирования);
		
		ТипКопируемогоПроцесса = ТипЗнч(ЗначениеКопирования);
		
		// Получим имя формы без серверного вызова.
		Если ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
			ИмяТипа = "Исполнение";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента") Тогда
			ИмяТипа = "ОбработкаВнутреннегоДокумента";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") Тогда
			ИмяТипа = "ОбработкаВходящегоДокумента";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
			ИмяТипа = "ОбработкаИсходящегоДокумента";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
			ИмяТипа = "Ознакомление";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Поручение") Тогда
			ИмяТипа = "Поручение";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			ИмяТипа = "Рассмотрение";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
			ИмяТипа = "Регистрация";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
			ИмяТипа = "Согласование";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			ИмяТипа = "Утверждение";
		// КОРП.
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			ИмяТипа = "КомплексныйПроцесс";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.Приглашение") Тогда
			ИмяТипа = "Приглашение";
		ИначеЕсли ТипКопируемогоПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
			ИмяТипа = "РешениеВопросовВыполненияЗадач";
		Иначе
			Возврат;
		КонецЕсли;
		ОткрытьФорму("БизнесПроцесс." + ИмяТипа + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма, 
			ЗначениеКопирования.УникальныйИдентификатор());
		
	Иначе
		ПерейтиПоНавигационнойСсылке("e1cib/command/ОбщаяКоманда.СоздатьБизнесПроцессГлобальная");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроцессовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьТекущуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроцессовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = Элементы.СписокПроцессов.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессыДляПометкиНаУдаление = Новый Массив;
	ПроцессыДляСнятияПометкиУдаления = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеВыделеннойСтроки = Элементы.СписокПроцессов.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ДанныеВыделеннойСтроки.ПометкаУдаления Тогда
			ПроцессыДляСнятияПометкиУдаления.Добавить(ДанныеВыделеннойСтроки.Процесс);
		Иначе
			ПроцессыДляПометкиНаУдаление.Добавить(ДанныеВыделеннойСтроки.Процесс);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПроцессовДляСнятияПометкиУдаления = ПроцессыДляСнятияПометкиУдаления.Количество();
	КоличествоПроцессовДляПометкиНаУдаление = ПроцессыДляПометкиНаУдаление.Количество();
	
	ПроцессыДляОбработки = Неопределено;
	
	Если КоличествоПроцессовДляСнятияПометкиУдаления > 0 Тогда
		Если КоличествоПроцессовДляСнятияПометкиУдаления = 1 Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
				ПроцессыДляСнятияПометкиУдаления[0]);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с выделенных процессов (%1) пометку на удаление?'; en = 'Remove deletion mark from the selected processes (%1)?'"),
				КоличествоПроцессовДляСнятияПометкиУдаления);
		КонецЕсли;
		ПроцессыДляОбработки = ПроцессыДляСнятияПометкиУдаления;
	ИначеЕсли КоличествоПроцессовДляПометкиНаУдаление > 0 Тогда
		Если КоличествоПроцессовДляПометкиНаУдаление = 1 Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
				ПроцессыДляПометкиНаУдаление[0]);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить выделенные процессы (%1) на удаление?'; en = 'Mark selected processes (%1) for deletion?'"),
				КоличествоПроцессовДляПометкиНаУдаление);
		КонецЕсли;
		ПроцессыДляОбработки = ПроцессыДляПометкиНаУдаление;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПометитьНаУдаление_Продолжение", ЭтаФорма, ПроцессыДляОбработки);
	
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление_Продолжение(Ответ, ПроцессыДляОбработки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПометкиУдаления = ПометитьНаУдалениеПроцессы(ПроцессыДляОбработки);
	
	Если ЗначениеЗаполнено(РезультатПометкиУдаления) Тогда
		ПоказатьПредупреждение(, РезультатПометкиУдаления);
	КонецЕсли;
	
	Элементы.СписокПроцессов.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокПроцессов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.Остановить(ВыделенныеПроцессы(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СделатьАктивным(ВыделенныеПроцессы(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцесс(ТекущийПроцесс, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ТекущиеДанные = Элементы.СписокПроцессов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Процесс, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоАктивныеПроцессы(Команда)
	
	ПоказыватьТолькоАктивныеПроцессы = Не ПоказыватьТолькоАктивныеПроцессы;
	
	Элементы.СписокПроцессовПоказыватьТолькоАктивныеПроцессы.Пометка = ПоказыватьТолькоАктивныеПроцессы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокПроцессов,
		"ПоказыватьТолькоАктивныеПроцессы",
		ПоказыватьТолькоАктивныеПроцессы,
		ПоказыватьТолькоАктивныеПроцессы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФайлы

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьДляПросмотра(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.РедактироватьТекущийФайл(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеТекущегоФайла(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	РаботаСБизнесПроцессамиКлиент.СохранитьТекущийФайл(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
		ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Файлы

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект, ПараметрыВыполнения);
	
	Если Результат = РезультатРедактировать Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Ложь);
	Иначе	
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПометитьНаУдалениеПроцессы(Процессы)
	
	Результат = "";
	
	ОбщееКоличествоПроцессов = Процессы.Количество();
	КоличествоУдаленныхПроцессов = 0;
	
	ПропускатьИсключения = Процессы.Количество() > 1;
	
	Для Каждого Процесс Из Процессы Цикл
		
		Попытка
			РаботаСБизнесПроцессамиВызовСервера.ПометитьНаУдалениеБизнесПроцесс(Процесс);
			КоличествоУдаленныхПроцессов = КоличествоУдаленныхПроцессов + 1;
		Исключение
			// Если процессов более 1го, тогда маскируем исключение, чтобы не прерывать обработку очереди.
			Если Не ПропускатьИсключения Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПропускатьИсключения
		И КоличествоУдаленныхПроцессов <> ОбщееКоличествоПроцессов Тогда
		
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для %1 из %2 процессов установлена/снята пометка удаления.'; en = 'For %1 of %2 processes deletion mark is set/removed.'"),
			КоличествоУдаленныхПроцессов,
			ОбщееКоличествоПроцессов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеСпискаПроцессов(ТекущаяДатаСеанса)
	
	СписокПроцессов.УсловноеОформление.Элементы.Очистить();
	
	// нестартованные процессы
	ПредставлениеЭлемента = "Процесс не стартован (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		СписокПроцессов.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.НеСтартованныйБизнесПроцесс; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДатаНачала");
	
	// помеченные на удаление процессы
	ПредставлениеЭлемента = "Процесс помечен на удаление (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		СписокПроцессов.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// завершенные процессы
	ПредставлениеЭлемента = "Процесс завершен (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		СписокПроцессов.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЗавершенныйБизнесПроцесс;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// Просроченные процессы
	ПредставлениеЭлемента = "Процесс просрочен (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		СписокПроцессов.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Дней");
	
	// Процессы, до завершения срока которых остался один день
	ПредставлениеЭлемента = "До окончания срока остался один день (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		СписокПроцессов.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дней");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дней");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 1;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Дней");
	
	// Процессы, у которых количество циклов более 5
	ПредставлениеЭлемента = "Количество циклов выполнения процесса более 5 (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		СписокПроцессов.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Цикл");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = 5;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Цикл");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПроцессов()
	
	ТекущаяДата = ТекущаяДата();
	
	Если ТекущаяДата - ДатаОбновленияПараметраТекущаяДата > 43200 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			СписокПроцессов,
			"ТекущаяДата",
			ТекущаяДата);
		УстановитьУсловноеОформлениеСпискаПроцессов(ТекущаяДата);
		ДатаОбновленияПараметраТекущаяДата = ТекущаяДата;
	КонецЕсли;
	
	Элементы.СписокПроцессов.Обновить();
	
КонецПроцедуры

// Возвращает массив выделенных процессов в списке.
//
// Возвращаемое значение:
//   Массив
//
&НаКлиенте
Функция ВыделенныеПроцессы()
	
	Результат = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокПроцессов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокПроцессов.ДанныеСтроки(ВыделеннаяСтрока);
		Результат.Добавить(ДанныеСтроки.Процесс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоПоддерживаемыйБизнесПроцесс(Ссылка)
	
	ТипПроцесса = ТипЗнч(Ссылка);
	
	ТипыПоддерживаемыхПроцессов = Новый Массив;
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Ознакомление"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Поручение"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Приглашение"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Регистрация"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
	ТипыПоддерживаемыхПроцессов.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
	
	ЭтоПоддерживаемыйБизнесПроцесс = 
		ТипыПоддерживаемыхПроцессов.Найти(ТипПроцесса) <> Неопределено;
		
	Возврат ЭтоПоддерживаемыйБизнесПроцесс;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьHTMLПредставление()
	
	РезультатОбработки = ОбновитьДанныеПроцесса(ТекущийПроцесс);
	ПредставлениеHTML = РезультатОбработки.ПредставлениеHTML;

	ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если Не ЗначениеЗаполнено(ТекущийПроцесс) Тогда
		Возврат;
	КонецЕсли;	
	
	Если РезультатОбработки.МассивПриложений.Количество() > 0 Тогда
		
		ЗаполнитьДеревоПриложений(ЭлементыДерева, РезультатОбработки.МассивПриложений);
		Элементы.ДеревоПриложений.Отображение = ОтображениеТаблицы.Дерево;
		Элементы.ДеревоПриложений.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		
		Для Каждого ЭлементДереваВерхнегоУровня ИЗ ЭлементыДерева Цикл
			Элементы.ДеревоПриложений.Развернуть(ЭлементДереваВерхнегоУровня.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатОбработки.МассивПриложений.Количество() > 0 Тогда
		
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы;
		
	КонецЕсли;
	
	Если РезультатОбработки.МассивПриложений.Количество() = 0 Тогда
		Элементы.ГруппаПросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаПросмотрБезПредмета;
	Иначе
		Элементы.ГруппаПросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаПросмотрПолная;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДанныеПроцесса(Процесс)
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеHTML", "");
	Результат.Вставить("МассивПриложений", Новый Массив);
	
	Результат.ПредставлениеHTML = ОбзорПроцессовВызовСервера.ПолучитьОбзорПроцесса(Процесс);
	
	Если ЗначениеЗаполнено(Процесс) Тогда
		СформироватьМассивПриложенийПоПредметам(Процесс, Результат.МассивПриложений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьТекущуюСтроку()
	
	ТекущиеДанные = Элементы.СписокПроцессов.ТекущиеДанные;
	
	Если Элементы.СписокПроцессов.ТекущийЭлемент = Элементы.СписокПроцессовОсновнойПредмет Тогда
		Если ТипЗнч(ТекущиеДанные.ОсновнойПредмет) = Тип("Строка")
			Или ТекущиеДанные.ОсновнойПредмет = Неопределено Тогда
			
			ПоказатьЗначение(, ТекущиеДанные.Процесс)
		Иначе
			ПоказатьЗначение(, ТекущиеДанные.ОсновнойПредмет);
		КонецЕсли;
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Процесс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьМассивПриложенийПоПредметам(Процесс, МассивПриложений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = Процесс.Предметы;
	МассивПриложений = Новый Массив;
	
	КоличествоПредметов = 0;
	
	Для Каждого СтрПредмет ИЗ Предметы Цикл
		Если НЕ ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
			КоличествоПредметов = КоличествоПредметов + 1;
		ИначеЕсли НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПредмет.Предмет, "ПометкаУдаления") Тогда
			КоличествоПредметов = КоличествоПредметов + 1;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого СтрокаПредмета Из Предметы Цикл
	
		Если СтрокаПредмета.Предмет <> Неопределено И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "ПометкаУдаления") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП");
			
		Строка.ДочерниеЭлементы = Новый Массив;	
		
		Строка.Наименование = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		Строка.Ссылка = СтрокаПредмета.Предмет;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, 
					"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, ПодписанЭП");
					
				Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
					Строка.ТипФайла = Строка.ТипФайла + 1;
				КонецЕсли;	
				Строка.ТипФайла = РеквизитыФайла.ИндексКартинки;
				
				Строка.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
				Строка.Редактирует = РеквизитыФайла.Редактирует;
				Если Не Строка.Редактирует.Пустая() Тогда
					Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						Строка.РедактируетТекущийПользователь = Истина;
					Иначе	
						Строка.РедактируетДругойПользователь = Истина;
					КонецЕсли;
				КонецЕсли;
				Строка.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
			Иначе
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строка.ИмяПредмета) Тогда
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			Иначе
				Если СтрокаПредмета.Предмет <> Неопределено Тогда
					Строка.ТипФайла = ?(СтрокаПредмета.Предмет.ПометкаУдаления, 11, 10); // Простое изображение листа
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		ДобавитьФайлыВДеревоПриложений(Строка, СтрокаПредмета.Предмет);
		МассивПриложений.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайлыВДеревоПриложений(СтрокаПредмета, Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Описание,
		|	Файлы.ИндексКартинки,
		|	Файлы.ХранитьВерсии,
		|	Файлы.Редактирует,
		|	Файлы.ПометкаУдаления,
		|	Файлы.ПодписанЭП
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВладелецФайла", Предмет);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП");
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Описание) Тогда
			Строка.Наименование = Строка.Наименование + ", " + ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		Строка.ТипФайла = ВыборкаДетальныеЗаписи.ИндексКартинки;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Строка.ТипФайла = Строка.ТипФайла + 1;
		КонецЕсли;	
		
		Строка.ХранитьВерсии = ВыборкаДетальныеЗаписи.ХранитьВерсии;
		Строка.Редактирует = ВыборкаДетальныеЗаписи.Редактирует;
		Если Не Строка.Редактирует.Пустая() Тогда
			Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
				Строка.РедактируетТекущийПользователь = Истина;
			Иначе	
				Строка.РедактируетДругойПользователь = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Строка.ПодписанЭП = ВыборкаДетальныеЗаписи.ПодписанЭП;
		
		СтрокаПредмета.ДочерниеЭлементы.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоПриложений(ЭлементыДерева, МассивПриложений)
	
	Для Каждого ЭлементПриложение Из МассивПриложений Цикл
		
		СтрокаПредмета = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредмета, ЭлементПриложение);	
		
		Для Каждого ДочернееПриложение Из ЭлементПриложение.ДочерниеЭлементы Цикл
			Строка = СтрокаПредмета.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ДочернееПриложение);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПредмета()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			
			ПоказатьЗначение(, ТекущиеДанные.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
