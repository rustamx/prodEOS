
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповПредметов = ПолучитьОписаниеДоступныхТиповПредметов();
	ВладелецШаблона = Параметры.ВладелецШаблона;
	ИдентификаторЭтапа = Параметры.ИдентификаторЭтапа;
	
	ИспользоватьПриглашениеНаМероприятие = ПолучитьФункциональнуюОпцию("ИспользоватьПриглашениеНаМероприятие");
	
	ДляКомплексногоПроцесса = Ложь;
	Если ЗначениеЗаполнено(ВладелецШаблона)
		И (ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		ИЛИ ТипЗнч(ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")) Тогда
		
		ДляКомплексногоПроцесса = Истина;
		
		Если ЗначениеЗаполнено(Параметры.ТипЭлементаСхемыПроцесса) Тогда
			
			Команды.СоздатьПроцесс.Подсказка = НСтр("ru = 'Выбрать это действие'; en = 'Select the action'");
			
			Элементы.СоздатьПроцесс.Заголовок = НСтр("ru = 'Выбрать действие'; en = 'Select action'");
			Элементы.ДеревоШаблоновКонтекстноеМенюСоздатьПроцесс.Заголовок = НСтр("ru = 'Выбрать это действие'; en = 'Select the action'");
			
			ТипКомплексногоПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");
			
			Если Параметры.ТипЭлементаСхемыПроцесса = 
				Перечисления.ТипыЭлементовСхемыКомплексногоПроцесса.Действие Тогда
				
				ТипыДействийКомплексногоПроцесса.ЗагрузитьЗначения(
					Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип.Типы());
					
				ТипыДействийКомплексногоПроцесса.Удалить(
					ТипыДействийКомплексногоПроцесса.НайтиПоЗначению(ТипКомплексногоПроцесса));
				
			Иначе
				ТипыДействийКомплексногоПроцесса.Добавить(ТипКомплексногоПроцесса);
			КонецЕсли;
			
		Иначе
			Элементы.СоздатьПроцесс.Заголовок = НСтр("ru = 'Добавить действие'; en = 'Add action'");
			Элементы.ДеревоШаблоновКонтекстноеМенюСоздатьПроцесс.Заголовок = НСтр("ru = 'Добавить это действие'; en = 'Add this action'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ТипыПроцессов) = Тип("Массив") Тогда
		ТипыПроцессов.ЗагрузитьЗначения(Параметры.ТипыПроцессов);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ТипыПроцессов) Тогда
		ТипыПроцессов.Добавить(Параметры.ТипыПроцессов);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Предметы) = Тип("ТаблицаЗначений") Тогда
		Предметы.Загрузить(Параметры.Предметы);
	ИначеЕсли ТипЗнч(Параметры.Предметы) = Тип("ДанныеФормыКоллекция") Тогда
		Предметы.Загрузить(Параметры.Предметы.Выгрузить());
	ИначеЕсли ТипЗнч(Параметры.Предметы) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Задача = Параметры.Предметы;
		
		// получаем все предметы задачи, включая основные, вспомогательные и заполняемые
		ПредметыЗадачи = Мультипредметность.ПолучитьПредметыПроцессаПоЗадаче(Параметры.Предметы);
		
		ПроцессЗадачи = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Задача, "БизнесПроцесс");
		
		НеМенятьРольПредметов = Ложь;
		Если ТипЗнч(ПроцессЗадачи) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			НеМенятьРольПредметов = ТипыПроцессов.НайтиПоЗначению("Исполнение") <> Неопределено
				Или ТипыПроцессов.НайтиПоЗначению("Ознакомление") <> Неопределено;
		КонецЕсли;
		
		Для Каждого СтрПредмет Из ПредметыЗадачи Цикл
			// заменяем роли у основных предметов на вспомогательные, т.к. в подчиненные задачи
			// все предметы по умолчанию передаются как вспомогательные, за исключением случая создания
			// процесса Исполнения или Ознакомления на основании задач процесса Рассмотрения.
			Если Не НеМенятьРольПредметов Тогда
				Если СтрПредмет.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
					СтрПредмет.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Предметы.Добавить(), СтрПредмет);
		КонецЦикла;
		
	Иначе
		
		ОбработатьМассивПредметов = Ложь;
		ПараметрПредметы = Параметры.Предметы;
		
		Если ТипЗнч(ПараметрПредметы) = Тип("Массив") Тогда
			Если Параметры.Предметы.Количество() > 1 Тогда
				ОбработатьМассивПредметов = Истина;
			Иначе
				ПараметрПредметы = Параметры.Предметы[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработатьМассивПредметов Тогда
			ИсходныеИменаПредметов = Новый Массив;
			Для Каждого Предмет ИЗ ПараметрПредметы Цикл
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Пользователи")
					ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					
					Исполнители.Добавить(Предмет);
				Иначе
					СтрокаПредметов = Предметы.Добавить();
					Если ЗначениеЗаполнено(ТипыПроцессов) Тогда
						СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
					Иначе
						СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
					КонецЕсли;
					СтрокаПредметов.ИмяПредмета = МультипредметностьВызовСервера.
						ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет, ИсходныеИменаПредметов);
					ИсходныеИменаПредметов.Добавить(СтрокаПредметов.ИмяПредмета);
					СтрокаПредметов.Предмет = Предмет;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ПараметрПредметы <> Неопределено Тогда
			Если ТипЗнч(ПараметрПредметы) = Тип("СправочникСсылка.Пользователи")
					ИЛИ ТипЗнч(ПараметрПредметы) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					
				Исполнители.Добавить(ПараметрПредметы);
			Иначе
				СтрокаПредметов = Предметы.Добавить();
				Если ЗначениеЗаполнено(ТипыПроцессов) Тогда
					СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
				Иначе
					СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
				КонецЕсли;
				СтрокаПредметов.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(ПараметрПредметы);
				СтрокаПредметов.Предмет = ПараметрПредметы;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПредмета Из Предметы Цикл 
		Если Мультипредметность.ЭтоФайлБизнесПроцесса(СтрокаПредмета.Предмет) Тогда
			СтрокиКУдалению.Добавить(СтрокаПредмета);
		ИначеЕсли Мультипредметность.ЭтоГруппаКонтрагентов(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение НСтр("ru = 'Ввод процесса на основании группы контрагентов невозможен!
			 	|Выберите контрагента. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз';
			 	|en = 'In is impossible to create a process based on a group of counterparties. 
			 	|Select a counterparty. Use Ctrl and down arrow to expand groups.'");	
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Предметы.Удалить(Строка);
	КонецЦикла;
	
	Если НЕ ДляКомплексногоПроцесса Тогда
		СтрокиКУдалению = Предметы.НайтиСтроки(Новый Структура("Предмет", Неопределено));
		Для Каждого Строка Из СтрокиКУдалению Цикл
			Предметы.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		СтрокаПредмета.Описание = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		СтрокаПредмета.Картинка = МультипредметностьКлиентСервер.ИндексКартинкиРолиПредмета(
			СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
	КонецЦикла;
	
	Если Параметры.Свойство("Задача") Тогда
		Задача = Параметры.Задача;
	КонецЕсли;
	
	Если Параметры.Свойство("ПроектнаяЗадача") И ЗначениеЗаполнено(Параметры.ПроектнаяЗадача) Тогда
		ПроектнаяЗадача = Параметры.ПроектнаяЗадача;
		ПредметБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		Если ПредметБП <> Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
			СтрокаПредметов.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(ПредметБП);
			СтрокаПредметов.Предмет = ПредметБП;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Проект") И ЗначениеЗаполнено(Параметры.Проект) Тогда
		Если Параметры.Проект.ЭтоГруппа Тогда
			СообщениеПользователю = НСтр("ru = 'Создание основного процесса запрещено для групп проектов.'; en = 'Creating main processes for project groups is not allowed.'");
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
		Проект = Параметры.Проект;
	ИначеЕсли Параметры.Свойство("Предмет") И ЗначениеЗаполнено(Параметры.Предмет) Тогда
		Если ТипЗнч(Параметры.Предмет) = Тип("СправочникСсылка.Проекты") И Параметры.Предмет.ЭтоГруппа Тогда
			СообщениеПользователю = НСтр("ru = 'Создание вспомогательного процесса запрещено для групп проектов.'; en = 'Creating subprocesses for project groups is not allowed.'");
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидПроцесса") Тогда
		ВидПроцесса = Параметры.ВидПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	ИначеЕсли ЗначениеЗаполнено(ТипыПроцессов) Тогда
		АвтоЗаголовок = Ложь;
		
		Если ТипыПроцессов.НайтиПоЗначению("Исполнение") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'исполнения'; en = 'of performance'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("КомплексныйПроцесс")  <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'обработки'; en = 'of processing'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Ознакомление") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'ознакомления'; en = 'of examination'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Поручение") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'поручения'; en = 'of order'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Приглашение") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'приглашения'; en = 'of invitation'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Рассмотрение") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'рассмотрения'; en = 'of reviewal'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Регистрация") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'регистрации'; en = 'of registration'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Согласование") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'согласования'; en = 'of approval'");
		ИначеЕсли ТипыПроцессов.НайтиПоЗначению("Утверждение") <> Неопределено Тогда
			НаименованиеТиповВарианта = НСтр("ru = 'утверждения'; en = 'of confirmation'");
		КонецЕсли;
		
		Заголовок = СтрШаблон(
			НСтр("ru = 'Выберите вариант %1'; en = 'Select option %1'"),
			НаименованиеТиповВарианта);
		
	КонецЕсли;
	
	СозданиеБезПредмета = Предметы.Количество() = 0;
	
	Если ЗначениеЗаполнено(ТипыПроцессов) Тогда
		Элементы.ДеревоШаблонов.Отображение = ОтображениеТаблицы.Список;
		Команды.СоздатьПроцесс.Заголовок = НСтр("ru = 'Готово'; en = 'Done'");
		Команды.СоздатьПроцесс.Подсказка = Команды.СоздатьПроцесс.Заголовок;
		ПостроитьДеревоВариантовОсновныхПроцессов();
		
		Элементы.ДеревоШаблонов.Ширина = 30;
		Элементы.ДеревоШаблонов.Высота = 10;
		
		КлючСохраненияПоложенияОкна = "ВыборПроцессовУказанныхТипов";
		
	Иначе
		ПостроитьДеревоВариантов();
		
		КлючСохраненияПоложенияОкна = "ВсеПроцессы";
	КонецЕсли;
	
	УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТипыПроцессов) Тогда
		ЭлементыДереваШаблонов = ДеревоШаблонов.ПолучитьЭлементы();
		Если ЭлементыДереваШаблонов.Количество() = 1 Тогда
			Отказ = Истина;
			Элементы.ДеревоШаблонов.ТекущаяСтрока = ЭлементыДереваШаблонов[0].ПолучитьИдентификатор();
			СоздатьПроцессВыполнить();
		КонецЕсли;
	Иначе
		//Устанавливается развернутость ветвей по умолчанию
		ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Развернуть Тогда
				Элементы.ДеревоШаблонов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СводкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбзорПроцессовКлиент.ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоШаблонов

&НаКлиенте
Процедура ДеревоШаблоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьПроцессВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоШаблонов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СоздатьПроцесс.Доступность = НЕ ТекущиеДанные.ЭтоЗаголовок;
	Элементы.ФормаОткрытьКарточкуШаблонаКонтекст.Доступность = ЗначениеЗаполнено(ТекущиеДанные.ШаблонСсылка);
	
	Сводка = ТекущиеДанные.Подсказка;
	ИмяДляФормы = ТекущиеДанные.ИмяФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоШаблонов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ШаблонСсылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ШаблонСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	СоздатьПроцессВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуШаблона(Команда)
	
	ПоказатьЗначение(, Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьОписаниеДоступныхТиповПредметов()
	
	Результат = "";	
	Если ПравоДоступа("Чтение", Метаданные.Справочники["ВнутренниеДокументы"]) Тогда
		Результат = "СправочникСсылка.ВнутренниеДокументы";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["ВходящиеДокументы"]) Тогда
		Результат = Результат + ",СправочникСсылка.ВходящиеДокументы";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["ИсходящиеДокументы"]) Тогда
		Результат = Результат + ",СправочникСсылка.ИсходящиеДокументы";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["Контрагенты"]) Тогда
		Результат = Результат + ",СправочникСсылка.Контрагенты";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["Файлы"]) Тогда
		Результат = Результат + ",СправочникСсылка.Файлы";
	КонецЕсли;
	// ТСК Талько Э.Г.; 11.07.2018; Бизнес-процессы {
	Для каждого ДокументКачества Из ра_ОбщегоНазначенияКлиентСервер.ДокументыКачества() Цикл
		Если ПравоДоступа("Чтение", Метаданные.Документы[ДокументКачества]) Тогда
			Результат = Результат + ",ДокументСсылка." + ДокументКачества;
		КонецЕсли;
	КонецЦикла;
	// ТСК Талько Э.Г.; 11.07.2018; Бизнес-процессы }
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент()
	
	ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПерваяГруппа = ЭлементыДерева[0];
	Если ПерваяГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПервыйЭлементПервойГруппы = ПерваяГруппа.ПолучитьЭлементы()[0];
	Индекс = ПервыйЭлементПервойГруппы.ПолучитьИдентификатор();
	Элементы.ДеревоШаблонов.ТекущаяСтрока = Индекс;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцессВыполнить()
	
	ТекущиеДанные = Элементы.ДеревоШаблонов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ЭтоЗаголовок Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонБП = ТекущиеДанные.ШаблонСсылка;
	ТипБП = ТекущиеДанные.ТипПроцесса;
	Если ЗначениеЗаполнено(ИмяДляФормы) Тогда
		Если ДляКомплексногоПроцесса Тогда
			Если ЗначениеЗаполнено(ШаблонБП) Тогда
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
				ПараметрыОповещения.Вставить("ВладелецШаблона", ВладелецШаблона);
				ПараметрыОповещения.Вставить("ШаблонБП", ШаблонБП);
				ПараметрыОповещения.Вставить("Предметы", Предметы);
				Оповестить("ВыборШаблонаДействия", ПараметрыОповещения);
				ЭтаФорма.Закрыть();
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("КомплексныйПроцесс", Истина);
				ПараметрыФормы.Вставить("ВладелецШаблона", ВладелецШаблона);
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
				ПараметрыФормы.Вставить("Предметы", Предметы);
				ПараметрыФормы.Вставить("ТипШаблона", СтрЗаменить(ТипБП, "БизнесПроцесс.", ""));
				
				ПараметрыФормы.Вставить("НаименованиеДействия", Параметры.НаименованиеДействия);
				ПараметрыФормы.Вставить("ОписаниеДействия", Параметры.ОписаниеДействия);
				
				Если ЗначениеЗаполнено(Параметры.ДатаОтсчетаДляРасчетаСроков) Тогда
					ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", Параметры.ДатаОтсчетаДляРасчетаСроков);
				КонецЕсли;
				
				ОткрытьФорму(ИмяДляФормы, ПараметрыФормы, ЭтаФорма.ВладелецФормы);
				ЭтаФорма.Закрыть();
			КонецЕсли;
		Иначе
			
			Основание = Новый Структура;
			Если НЕ СозданиеБезПредмета Тогда
				Основание.Вставить("Предметы", Предметы);
			КонецЕсли;
			Если ЗначениеЗаполнено(ШаблонБП) Тогда
				Основание.Вставить("Шаблон", ШаблонБП);
			КонецЕсли;
			Если ЗначениеЗаполнено(Задача) Тогда
				Основание.Вставить("ЗадачаИсполнителя", Задача);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда
				Основание.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
			КонецЕсли;
			Если ЗначениеЗаполнено(Проект) Тогда
				Основание.Вставить("Проект", Проект);
			КонецЕсли;
			Если Исполнители.Количество() > 0 Тогда
				Основание.Вставить("Исполнители", Исполнители.ВыгрузитьЗначения());
			КонецЕсли;
			
			Попытка
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Основание", Основание);
					
				ОткрытьФорму(ИмяДляФормы, ПараметрыФормы);
				
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если Найти(Инфо.Описание, "не указан предмет процесса") > 0 Тогда
					Подсказка = НСтр("ru = 'Укажите предмет процесса'; en = 'Specify process subject'");
					Типы = Новый ОписаниеТипов(ОписаниеТиповПредметов);
					СтрокаПредметов = Предметы.Добавить();
					
					ОписаниеОповещения = 
						Новый ОписаниеОповещения("СоздатьПроцессВыполнитьЗавершение", ЭтаФорма, СтрокаПредметов);
						
					ПоказатьВводЗначения(ОписаниеОповещения, СтрокаПредметов.Предмет, Подсказка, Типы);
					
					Возврат;
				
				Иначе
					Инфо = ИнформацияОбОшибке();
					ВызватьИсключение(КраткоеПредставлениеОшибки(Инфо));
				КонецЕсли;
			КонецПопытки;
		Конецесли;
		Если Открыта() Тогда 
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцессВыполнитьЗавершение(ВыбранноеЗначение, СтрокаПредметов) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПредметов.ИмяПредмета = 
		МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
			ВыбранноеЗначение);
			
	СозданиеБезПредмета = Ложь;
	СоздатьПроцессВыполнить();
	
	Если Открыта() Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТипПроцессаПоИмени(ИмяПроцесса)
	
	Возврат Тип("БизнесПроцессСсылка." + ИмяПроцесса + "");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗаполнениеДереваШаблонов

&НаСервере
Процедура ПостроитьДеревоВариантовОсновныхПроцессов()
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	//Получение пустых БП, которые привязаны к БП в меню "Создать на основании"
	МассивНезаполненныхПроцессов = ПолучитьНезаполненныеПроцессы();
	
	// Добавляем пустые процессы в начало дерева.
	ПорядокСледованияПроцессов = ПорядокСледованияПроцессов();
	НесколькоСвоихВариантов = МассивНезаполненныхПроцессов.Количество() > 1;
	Для Каждого СтрПроцесс Из МассивНезаполненныхПроцессов Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.ТипПроцесса = "БизнесПроцесс." + СтрПроцесс.Имя; 
		Если НесколькоСвоихВариантов Тогда
			
			Если СтрПроцесс.Имя = "КомплексныйПроцесс" Тогда
				
				НоваяСтрока.Наименование = НСтр("ru = 'Новый комплексный процесс'; en = 'New composite process'");
				ОписаниеПроцесса = НСтр("ru = 'Создание нового комплексного процесса для заполнения вручную.
					|
					|Вы можете запланировать произвольное количество действий, настроить порядок и условия их выполнения.';
					|en = 'Creating a composite process and filling it manually.
					|You may schedule an arbitrary number of actions, set up their order and rules of execution.'");
					
			ИначеЕсли СтрПроцесс.Имя = "ОбработкаВнутреннегоДокумента" Тогда
				
				НоваяСтрока.Наименование = НСтр("ru = 'Новая обработка внутреннего документа'; en = 'New internal document processing'");
				ОписаниеПроцесса = НСтр("ru = 'Создание нового процесса обработки документа для заполнения вручную.
					|
					|Подготовьте цепочку действий, которые должен будет пройти документ. Например, согласование, утверждение, регистрация, рассмотрение, исполнение.';
					|en = 'Creating a process to handle certain document and filling it manually. 
					|Prepare a sequence of actions for the document to pass through. For example, approval, confirmation, registration, reviewal, and performance.'");
					
			ИначеЕсли СтрПроцесс.Имя = "ОбработкаВходящегоДокумента" Тогда
				
				НоваяСтрока.Наименование = НСтр("ru = 'Новая обработка входящего документа'; en = 'New incoming document processing'");
				ОписаниеПроцесса = НСтр("ru = 'Создание нового процесса обработки документа для заполнения вручную.
					|
					|Подготовьте цепочку действий, которые должен будет пройти документ. Например, рассмотрение и исполнение.';
					|en = 'Creating a process to handle certain document and filling it manually.
					|Prepare a sequence of actions for the document to pass through. For example, reviewal and performance.'");
					
			ИначеЕсли СтрПроцесс.Имя = "ОбработкаИсходящегоДокумента" Тогда
				
				НоваяСтрока.Наименование = НСтр("ru = 'Новая обработка исходящего документа'; en = 'New outgoing document processing'");
				ОписаниеПроцесса = НСтр("ru = 'Создание нового процесса обработки документа для заполнения вручную.
					|
					|Подготовьте цепочку действий, которые должен будет пройти документ. Например, согласование, утверждение и регистрация.';
					|en = 'Creating a process to handle certain document and filling it manually.
					|Prepare a sequence of actions for the document to pass through. For example, approval, confirmation, and performance.'");
					
			КонецЕсли;
			
		Иначе
			НоваяСтрока.Наименование = НСтр("ru = 'Новый'; en = 'New'");
			ОписаниеПроцесса = НСтр("ru = 'Создание нового процесса для заполнения вручную. 
				|
				|Вы можете указать исполнителей, установить сроки, добавить предмет или файл.';
				|en = 'Creating a process and filling it manually.
				|You may specify performers, set due dates, add subjects or files.'");
		КонецЕсли;
			
		НоваяСтрока.Подсказка = СформироватьСводкуПоПроцессуИПолучитьИмяФормы(
			НоваяСтрока.ТипПроцесса,
			НоваяСтрока.ИмяФормы,
			ДляКомплексногоПроцесса,
			ОписаниеПроцесса);
		
		ИндексПроцесса = ПорядокСледованияПроцессов.Найти(НоваяСтрока.ТипПроцесса);
		Если ИндексПроцесса = Неопределено Тогда
			ИндексПроцесса = 999;
		Конецесли;
		НоваяСтрока.Порядок = ИндексПроцесса;
	КонецЦикла;
	// Сортируем добавленные пустые процессы.
	Дерево.Строки.Сортировать("Порядок Возр, Наименование Возр");
	
	ДобавитьРекомендуемыеШаблоны = Ложь;
	ДобавитьОбщиеШаблоны = Ложь;
	
	// Определим, какие шаблоны нужно добавить в список.
	Если Исполнители.Количество() > 0 Тогда
		// не добавляем шаблоны, если процесс стартует на основании пользователей.
	ИначеЕсли ЗначениеЗаполнено(Задача) Или СозданиеБезПредмета Тогда
		ДобавитьОбщиеШаблоны = Истина;
	Иначе
		ЕстьДокументыСредиПредметов = Ложь;
		ТипВнДокумента = Тип("СправочникСсылка.ВнутренниеДокументы");
		ТипИсхДокумента = Тип("СправочникСсылка.ИсходящиеДокументы");
		ТипВхДокумента = Тип("СправочникСсылка.ВходящиеДокументы");
		Для Каждого СтрПредмет Из Предметы Цикл
			ТипПредмета = ТипЗнч(СтрПредмет.Предмет);
			Если ТипПредмета = ТипВнДокумента
				Или ТипПредмета = ТипИсхДокумента
				Или ТипПредмета = ТипВхДокумента Тогда
				
				ЕстьДокументыСредиПредметов = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДокументыСредиПредметов Тогда
			ДобавитьРекомендуемыеШаблоны = Истина;
		Иначе
			ДобавитьОбщиеШаблоны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавитьРекомендуемыеШаблоны Тогда //Добавляем рекомендуемые процессы
		МассивРекомендованныхШаблонов = ПолучитьРекомендованныеШаблоны();
		Для Каждого СтрШаблон Из МассивРекомендованныхШаблонов Цикл
			НоваяСтрока = Дерево.Строки.Добавить();
			ЗаполнитьСтрокуДереваПоШаблону(НоваяСтрока, СтрШаблон);
		КонецЦикла;
	ИначеЕсли ДобавитьОбщиеШаблоны Тогда //Добавляем общ. шаблоны, если создаем процесс без предметов.
		МассивОбщихШаблонов = ПолучитьНеПривязанныеШаблоны();
		Для Каждого СтрШаблон Из МассивОбщихШаблонов Цикл
			НоваяСтрока = Дерево.Строки.Добавить();
			ЗаполнитьСтрокуДереваПоШаблону(НоваяСтрока, СтрШаблон);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоВариантов()
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	//Получение шаблонов БП, привязанных к видам документов
	МассивРекомендованныхШаблонов = Новый Массив;
	Если Не СозданиеБезПредмета И Не ЗначениеЗаполнено(Задача) Тогда
		МассивРекомендованныхШаблонов = ПолучитьРекомендованныеШаблоны();
	КонецЕсли;
	
	//Получение шаблонов БП, не привязанных к видам документов
	МассивОбщихШаблонов = ПолучитьНеПривязанныеШаблоны();
	
	//Получение пустых БП, которые привязаны к БП в меню "Создать на основании"
	МассивНезаполненныхПроцессов = ПолучитьНезаполненныеПроцессы();
	КоличествоПустыхПроцессов = МассивНезаполненныхПроцессов.Количество();
	
	//Получение шаблонов БП, которые настроены для других видов документов
	МассивОстальныхШаблоны = ПолучитьОстальныеШаблоны(МассивОбщихШаблонов, МассивРекомендованныхШаблонов);
	
	Если Не СозданиеБезПредмета Тогда
		ДобавитьГруппуВДеревоШаблонов(Дерево, НСтр("ru = 'Рекомендованные шаблоны'; en = 'Recommended templates'"),
			МассивРекомендованныхШаблонов);
	КонецЕсли;
	
	ДобавитьГруппуВДеревоШаблонов(Дерево, НСтр("ru = 'Общие шаблоны'; en = 'General templates'"), МассивОбщихШаблонов);
	ДобавитьГруппуВДеревоШаблонов(Дерево, НСтр("ru = 'Новые процессы'; en = 'New processes'"), МассивНезаполненныхПроцессов);
	ДобавитьГруппуВДеревоШаблонов(Дерево, НСтр("ru = 'Другие шаблоны'; en = 'Other templates'"), МассивОстальныхШаблоны, Ложь);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуВДеревоШаблонов(Дерево, НаименованиеГруппы, Шаблоны, РазвернутьГруппу = Истина)
	
	КоличествоШаблонов = Шаблоны.Количество();
	
	ПорядокСледованияПроцессов = ПорядокСледованияПроцессов();
	
	Если КоличествоШаблонов > 0 Тогда
		СтрокаОбщие = Дерево.Строки.Добавить();
		СтрокаОбщие.Наименование = СтрШаблон("%1 (%2)", НаименованиеГруппы, КоличествоШаблонов);
		СтрокаОбщие.Подсказка = СформироватьСводкуПоГруппеЭлементов(СтрокаОбщие.Наименование);
		СтрокаОбщие.Развернуть = РазвернутьГруппу;
		СтрокаОбщие.ЭтоЗаголовок = Истина;
		СтрокаОбщие.ВыделитьСтроку = Истина;
		
		ТипОбъектМетаданных = Тип("ОбъектМетаданных");
		
		Для Каждого СтрШаблон Из Шаблоны Цикл
			
			НоваяСтрока = СтрокаОбщие.Строки.Добавить();
			
			Если ТипЗнч(СтрШаблон) = ТипОбъектМетаданных Тогда
				НоваяСтрока.Наименование = СтрШаблон.Синоним;
				НоваяСтрока.ТипПроцесса = "БизнесПроцесс." + СтрШаблон.Имя; 
				НоваяСтрока.Подсказка = СформироватьСводкуПоПроцессуИПолучитьИмяФормы(
					НоваяСтрока.ТипПроцесса, НоваяСтрока.ИмяФормы, ДляКомплексногоПроцесса);
				
				ИндексПроцесса = ПорядокСледованияПроцессов.Найти(НоваяСтрока.ТипПроцесса);
				Если ИндексПроцесса = Неопределено Тогда
					ИндексПроцесса = 999;
				Конецесли;
				НоваяСтрока.Порядок = ИндексПроцесса;
			Иначе
				ЗаполнитьСтрокуДереваПоШаблону(НоваяСтрока, СтрШаблон);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипЗнч(Шаблоны[0]) = ТипОбъектМетаданных Тогда
			СтрокаОбщие.Строки.Сортировать("Порядок Возр, Наименование Возр");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваПоШаблону(СтрДерева, Шаблон)
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Шаблон, "Наименование, Комментарий");
	СтрДерева.Наименование = ДанныеШаблона.Наименование;
	СтрДерева.Описание = ДанныеШаблона.Комментарий;
	СтрДерева.ШаблонСсылка = Шаблон;
	СтрДерева.Подсказка = СформироватьСводкуПоШаблонуИПолучитьИмяФормы(
		СтрДерева.ШаблонСсылка, СтрДерева.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Функция ПорядокСледованияПроцессов()
	
	ПорядокСледованияПроцессов = Новый Массив;
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Поручение");
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Согласование");
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Исполнение");
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Рассмотрение");
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Ознакомление");
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Регистрация");
	ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Утверждение");
	
	Если ИспользоватьПриглашениеНаМероприятие Тогда
		ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.Приглашение");
	КонецЕсли;
	
	Если Не Исполнители.Количество() > 0 Или Предметы.Количество() > 0 Тогда
		ПорядокСледованияПроцессов.Добавить("БизнесПроцесс.КомплексныйПроцесс");
	КонецЕсли;
	
	Возврат ПорядокСледованияПроцессов;
	
КонецФункции

&НаСервере
Функция ПолучитьНеПривязанныеШаблоны()
	
	СписокОбщихШаблонов = Новый СписокЗначений;
	
	ЕстьИсполнители = Исполнители.Количество() > 0;
	ЕстьПредметы = Предметы.Количество() > 0;
	
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		
		Если ЗначениеЗаполнено(ТипыДействийКомплексногоПроцесса) Тогда
			ТипПроцесса = ТипПроцессаПоИмени(БизнесПроцесс.Имя);
			Если ТипыДействийКомплексногоПроцесса.НайтиПоЗначению(ТипПроцесса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если БизнесПроцесс.Имя = "Приглашение" И Не ИспользоватьПриглашениеНаМероприятие
			Или ЗначениеЗаполнено(ТипыПроцессов)
				И ТипыПроцессов.НайтиПоЗначению(БизнесПроцесс.Имя) = Неопределено Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если (БизнесПроцесс.Имя = "ОбработкаВнутреннегоДокумента"
				ИЛИ БизнесПроцесс.Имя = "ОбработкаВходящегоДокумента"
				ИЛИ БизнесПроцесс.Имя = "ОбработкаИсходящегоДокумента")
			И (НЕ ЕстьПредметы Или ЕстьИсполнители) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если БизнесПроцесс.Имя = "Поручение" Тогда
			Продолжить;
		КонецЕсли;
		
		Если БизнесПроцесс.Имя = "КомплексныйПроцесс"
			И ЕстьИсполнители
			И НЕ ЕстьПредметы Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПродолжитьВыполнение = Ложь;
		Если НЕ СозданиеБезПредмета Тогда
			Для Каждого ОснованиеДляВвода Из БизнесПроцесс.ВводитсяНаОсновании Цикл
				Для каждого СтрокаПредмета Из Предметы Цикл 
					Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ПродолжитьВыполнение = Истина;
						Прервать;
					КонецЕсли;
					Если СтрокаПредмета.Предмет = Неопределено Или ОснованиеДляВвода = СтрокаПредмета.Предмет.Метаданные() Тогда
						ПродолжитьВыполнение = Истина; 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПродолжитьВыполнение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПродолжитьВыполнение = Истина;
		КонецЕсли;
		
		Если НЕ ПродолжитьВыполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипШаблона = БизнесПроцессы[БизнесПроцесс.Имя].ТипШаблона();
		Исключение
			Продолжить; //у процесса не определен метод ТипШаблона() в модуле менеджера
		КонецПопытки;
		Если ЗначениеЗаполнено(ТипШаблона) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	%1.Ссылка,
				|	%1.Наименование
				|ИЗ
				|	%1
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
				|		ПО %1.Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
				|		ПО %1.Ссылка = ДоступностьШаблоновПроцессов.Шаблон
				|ГДЕ
				|	%1.ПометкаУдаления = ЛОЖЬ
				|И	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса ЕСТЬ NULL
				|И	НЕ %1.ШаблонВКомплексномПроцессе
				|И	НЕ %1.ЭтоГруппа
				|И	ДоступностьШаблоновПроцессов.РучнойЗапуск";
			
			Если ТипШаблона = "Справочник.ШаблоныСоставныхБизнесПроцессов" Тогда
				Запрос.Текст = Запрос.Текст + " И %1.ТипШаблона = ""%2""";
			КонецЕсли;	
						
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Запрос.Текст,
				ТипШаблона,
				БизнесПроцесс.Имя);
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				
				Попытка
					Если ДляКомплексногоПроцесса
						И НЕ Справочники[Результат.Ссылка.Метаданные().Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить; // В модуле менеджера справочника шаблона бизнес-процесса
								// не определена функция МожетИспользоватьсяВКомплексномПроцессе() 
				КонецПопытки;
				
				Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов")
					И ЗначениеЗаполнено(ВидПроцесса) Тогда
					
					ТипСоставногоШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Результат.Ссылка,
						"ТипШаблона");
						
					Если ТипСоставногоШаблона <> ВидПроцесса Тогда
						Продолжить;
					КонецЕсли;
						
				КонецЕсли;
				
				Если СписокОбщихШаблонов.НайтиПоЗначению(Результат.Ссылка) = Неопределено Тогда
					СписокОбщихШаблонов.Добавить(Результат.Ссылка, Результат.Наименование);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	СписокОбщихШаблонов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МассивОбщихШаблонов = СписокОбщихШаблонов.ВыгрузитьЗначения();
	
	Возврат МассивОбщихШаблонов;
	
КонецФункции

&НаСервере
Функция ПолучитьНезаполненныеПроцессы()
	
	ЕстьИсполнители = Исполнители.Количество() > 0;
	ЕстьПредметы = Предметы.Количество() > 0;
	
	МассивНезаполненныхПроцессов = Новый Массив;
	
	МетаданныеПроцессы = Метаданные.БизнесПроцессы;
	
	МетаданныеПредметов = Новый Массив;
	Для Каждого СтрПредмет Из Предметы Цикл
		Если СтрПредмет.Предмет = Неопределено Тогда
			МетаданныеПредмета = Неопределено;
		Иначе
			МетаданныеПредмета = СтрПредмет.Предмет.Метаданные();
		КонецЕсли;
		Если МетаданныеПредметов.Найти(МетаданныеПредмета) = Неопределено Тогда
			МетаданныеПредметов.Добавить(МетаданныеПредмета);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого БПОбъект Из МетаданныеПроцессы Цикл
		
		Если ЗначениеЗаполнено(ТипыДействийКомплексногоПроцесса) Тогда
			ТипПроцесса = ТипПроцессаПоИмени(БПОбъект.Имя);
			Если ТипыДействийКомплексногоПроцесса.НайтиПоЗначению(ТипПроцесса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипыПроцессов)
				И ТипыПроцессов.НайтиПоЗначению(БПОбъект.Имя) = Неопределено Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если БПОбъект.Имя = "Приглашение" И Не ИспользоватьПриглашениеНаМероприятие
			Или ЗначениеЗаполнено(ТипыПроцессов)
				И ТипыПроцессов.НайтиПоЗначению(БПОбъект.Имя) = Неопределено Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если БПОбъект.Имя = "Поручение" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьИсполнители
			И (БПОбъект.Имя = "ОбработкаВнутреннегоДокумента"
				Или БПОбъект.Имя = "ОбработкаВходящегоДокумента"
				Или БПОбъект.Имя = "ОбработкаИсходящегоДокумента"
				Или БПОбъект.Имя = "КомплексныйПроцесс") Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьПредметы
			И (БПОбъект.Имя = "ОбработкаВнутреннегоДокумента"
				Или БПОбъект.Имя = "ОбработкаВходящегоДокумента"
				Или БПОбъект.Имя = "ОбработкаИсходящегоДокумента") Тогда
				
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ДляКомплексногоПроцесса
				И НЕ БизнесПроцессы[БПОбъект.Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера бизнес-процесса 
						// не определена функция МожетИспользоватьсяВКомплексномПроцессе()
		КонецПопытки;
		
		Попытка
			Если НЕ БизнесПроцессы[БПОбъект.Имя].МожетЗапускатьсяИнтерактивно() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера бизнес-процесса 
						// не определена функция МожетЗапускатьсяИнтерактивно()
		КонецПопытки;
		
		Если ЕстьПредметы Тогда
			Для Каждого ОснованиеДляВвода Из БПОбъект.ВводитсяНаОсновании Цикл
				Если МассивНезаполненныхПроцессов.Найти(БПОбъект) = Неопределено
					И (МетаданныеПредметов.Найти(Неопределено) <> Неопределено
						Или МетаданныеПредметов.Найти(ОснованиеДляВвода) <> Неопределено) Тогда
						
					МассивНезаполненныхПроцессов.Добавить(БПОбъект);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивНезаполненныхПроцессов.Добавить(БПОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивНезаполненныхПроцессов;
	
КонецФункции

&НаСервере
Функция ПолучитьОстальныеШаблоны(МассивОбщихШаблонов, МассивРекомендованныхШаблонов)
	
	ЕстьИсполнители = Исполнители.Количество() > 0;
	ЕстьПредметы = Предметы.Количество() > 0;
	
	СписокОстальныхШаблонов = Новый СписокЗначений;
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		
		Если ЗначениеЗаполнено(ТипыДействийКомплексногоПроцесса) Тогда
			ТипПроцесса = ТипПроцессаПоИмени(БизнесПроцесс.Имя);
			Если ТипыДействийКомплексногоПроцесса.НайтиПоЗначению(ТипПроцесса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если БизнесПроцесс.Имя = "Приглашение" И Не ИспользоватьПриглашениеНаМероприятие
			Или ЗначениеЗаполнено(ТипыПроцессов)
				И ТипыПроцессов.НайтиПоЗначению(БизнесПроцесс.Имя) = Неопределено Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если БизнесПроцесс.Имя = "Поручение" Тогда
			Продолжить;
		КонецЕсли;
		
		Если (БизнесПроцесс.Имя = "ОбработкаВнутреннегоДокумента"
				ИЛИ БизнесПроцесс.Имя = "ОбработкаВходящегоДокумента"
				ИЛИ БизнесПроцесс.Имя = "ОбработкаИсходящегоДокумента")
			И (НЕ ЕстьПредметы Или ЕстьИсполнители) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если БизнесПроцесс.Имя = "КомплексныйПроцесс"
			И ЕстьИсполнители
			И НЕ ЕстьПредметы Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПродолжитьВыполнение = Ложь;
		Если НЕ СозданиеБезПредмета Тогда
			Для Каждого ОснованиеДляВвода Из БизнесПроцесс.ВводитсяНаОсновании Цикл
				Для каждого СтрокаПредмета Из Предметы Цикл 
					Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ПродолжитьВыполнение = Истина;
						Прервать;
					КонецЕсли;
					Если СтрокаПредмета.Предмет = Неопределено
						Или ОснованиеДляВвода = СтрокаПредмета.Предмет.Метаданные() Тогда
						
						ПродолжитьВыполнение = Истина; 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПродолжитьВыполнение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПродолжитьВыполнение = Истина;
		КонецЕсли;
		
		Если НЕ ПродолжитьВыполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипШаблона = БизнесПроцессы[БизнесПроцесс.Имя].ТипШаблона();
		Исключение
			Продолжить; // в модуле менеджера бизнес-процесса не определен метод ТипШаблона()
		КонецПопытки;
		Если ЗначениеЗаполнено(ТипШаблона) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|" + ТипШаблона + ".Ссылка,
				|" + ТипШаблона + ".Наименование 
				|ИЗ
				|	" + ТипШаблона + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
				|		ПО " + ТипШаблона + ".Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
				|		ПО " + ТипШаблона + ".Ссылка = ДоступностьШаблоновПроцессов.Шаблон
				|ГДЕ
				|	" + ТипШаблона + ".ПометкаУдаления = ЛОЖЬ
				|И НЕ " + ТипШаблона + ".Ссылка В (&МассивРекомендованных)
				|И НЕ " + ТипШаблона + ".Ссылка В (&МассивОбщих)
				|И НЕ " + ТипШаблона + ".ШаблонВКомплексномПроцессе
				|И Не " + ТипШаблона + ".ЭтоГруппа
				|И ДоступностьШаблоновПроцессов.РучнойЗапуск";
			Запрос.УстановитьПараметр("МассивРекомендованных", МассивРекомендованныхШаблонов);
			Запрос.УстановитьПараметр("МассивОбщих", МассивОбщихШаблонов);
			
			Если БизнесПроцесс.Имя = "ОбработкаВнутреннегоДокумента"
				Или БизнесПроцесс.Имя = "ОбработкаВходящегоДокумента"
				Или БизнесПроцесс.Имя = "ОбработкаИсходящегоДокумента" Тогда
				Запрос.Текст = Запрос.Текст +
					" И " + ТипШаблона + ".ТипШаблона = &ИмяТипаШаблона";
				Запрос.УстановитьПараметр("ИмяТипаШаблона", БизнесПроцесс.Имя);
			КонецЕсли;
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				Попытка
					Если ДляКомплексногоПроцесса
						И НЕ Справочники[Результат.Ссылка.Метаданные().Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить; // В модуле менеджера справочника шаблона бизнес-процесса
								// не определена функция МожетИспользоватьсяВКомплексномПроцессе() 
				КонецПопытки;
				
				Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов")
					И ЗначениеЗаполнено(ВидПроцесса) Тогда
					
					ТипСоставногоШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Результат.Ссылка,
						"ТипШаблона");
						
					Если ТипСоставногоШаблона <> ВидПроцесса Тогда
						Продолжить;
					КонецЕсли;
						
				КонецЕсли;
				
				Если СписокОстальныхШаблонов.НайтиПоЗначению(Результат.Ссылка) = Неопределено Тогда		
					СписокОстальныхШаблонов.Добавить(Результат.Ссылка, Результат.Наименование);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	СписокОстальныхШаблонов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МассивОстальныхШаблонов = СписокОстальныхШаблонов.ВыгрузитьЗначения();
	
	Возврат МассивОстальныхШаблонов;
	
КонецФункции

&НаСервере
Функция ПолучитьРекомендованныеШаблоны()
	
	МассивРекомендованныхШаблонов = Новый Массив;
	
	СоответсвиеПроцессовИШаблонов = Новый Соответствие;
	СоответсвиеПроцессовИШаблонов.Вставить("Исполнение", "ШаблоныИсполнения");
	СоответсвиеПроцессовИШаблонов.Вставить("КомплексныйПроцесс", "ШаблоныКомплексныхБизнесПроцессов");
	СоответсвиеПроцессовИШаблонов.Вставить("ОбработкаВнутреннегоДокумента", "ОбработкаВнутреннегоДокумента");
	СоответсвиеПроцессовИШаблонов.Вставить("ОбработкаВходящегоДокумента", "ОбработкаВходящегоДокумента");
	СоответсвиеПроцессовИШаблонов.Вставить("ОбработкаИсходящегоДокумента", "ОбработкаИсходящегоДокумента");
	СоответсвиеПроцессовИШаблонов.Вставить("Ознакомление", "ШаблоныОзнакомления");
	СоответсвиеПроцессовИШаблонов.Вставить("Поручение", "ШаблоныПоручения");
	СоответсвиеПроцессовИШаблонов.Вставить("Приглашение", "ШаблоныПриглашения");
	СоответсвиеПроцессовИШаблонов.Вставить("Рассмотрение", "ШаблоныРассмотрения");
	СоответсвиеПроцессовИШаблонов.Вставить("Регистрация", "ШаблоныРегистрации");
	СоответсвиеПроцессовИШаблонов.Вставить("Согласование", "ШаблоныСогласования");
	СоответсвиеПроцессовИШаблонов.Вставить("Утверждение", "ШаблоныУтверждения");
	
	//Получение шаблонов БП по виду предмета
	ШаблоныПоПредмету = Новый СписокЗначений;
	Для Каждого СтрокаПредмета Из Предметы Цикл
		
		ПредметБП = СтрокаПредмета.Предмет;
		
		Если ЗначениеЗаполнено(ТипыПроцессов) Тогда
			Для Каждого СтрТипШаблона Из ТипыПроцессов Цикл
				
				Если ЗначениеЗаполнено(ТипыДействийКомплексногоПроцесса) Тогда
					ТипПроцесса = ТипПроцессаПоИмени(СтрТипШаблона.Значение);
					Если ТипыДействийКомплексногоПроцесса.НайтиПоЗначению(ТипПроцесса) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ИмяТипаШаблона = СоответсвиеПроцессовИШаблонов.Получить(СтрТипШаблона.Значение);
				
				Если ИмяТипаШаблона = "ШаблоныПриглашения"
					И Не ИспользоватьПриглашениеНаМероприятие Тогда
					
					Продолжить;
				КонецЕсли;
				
				ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, ИмяТипаШаблона);
			КонецЦикла;
		Иначе
			
			ТипПредметБП = ТипЗнч(ПредметБП);
			
			Для Каждого СтрСоответсвие Из СоответсвиеПроцессовИШаблонов Цикл
				
				Если ЗначениеЗаполнено(ТипыДействийКомплексногоПроцесса) Тогда
					ТипПроцесса = ТипПроцессаПоИмени(СтрСоответсвие.Ключ);
					Если ТипыДействийКомплексногоПроцесса.НайтиПоЗначению(ТипПроцесса) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если (СтрСоответсвие.Значение = "ШаблоныПриглашения"
						И Не ИспользоватьПриглашениеНаМероприятие)
					Или (СтрСоответсвие.Значение = "ОбработкаВнутреннегоДокумента"
						И Не ТипПредметБП = Тип("СправочникСсылка.ВнутренниеДокументы"))
					Или (СтрСоответсвие.Значение = "ОбработкаВходящегоДокумента"
						И Не ТипПредметБП = Тип("СправочникСсылка.ВходящиеДокументы"))
					Или (СтрСоответсвие.Значение = "ОбработкаИсходящегоДокумента"
						И Не ТипПредметБП = Тип("СправочникСсылка.ИсходящиеДокументы")) Тогда
						
					Продолжить;
				КонецЕсли;
				
				ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, СтрСоответсвие.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблоныПоПредмету.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МассивРекомендованныхШаблонов = ШаблоныПоПредмету.ВыгрузитьЗначения();
	
	Возврат МассивРекомендованныхШаблонов;
	
КонецФункции

&НаСервере
Процедура ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, Предмет, Тип)
	
	ШаблоныПоТипуПроцесса = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(Предмет, Тип);
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		
		Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШаблоныПоПредмету.НайтиПоЗначению(Шаблон) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ДляКомплексногоПроцесса
				И НЕ Справочники[Шаблон.Метаданные().Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера справочника шаблона бизнес-процесса
						// не определена функция МожетИспользоватьсяВКомплексномПроцессе()
		КонецПопытки;
		ШаблоныПоПредмету.Добавить(Шаблон, Строка(Шаблон));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСводкуПоГруппеЭлементов(ИмяГруппы)
	
	HTMLТекст = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body>";
	
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	Если Найти(ИмяГруппы, НСтр("ru = 'Рекомендованные шаблоны'; en = 'Recommended templates'")) <> 0 Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, привязанные к данному виду документа.'; en = 'Templates of processes assigned to the current document type.'");
	ИначеЕсли Найти(ИмяГруппы, НСтр("ru = 'Общие шаблоны'; en = 'General templates'")) <> 0 Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, не привязанные ни к одному из видов документов.'; en = 'Templates of processes not assigned to any document types.'");
	ИначеЕсли Найти(ИмяГруппы, НСтр("ru = 'Новые процессы'; en = 'New processes'")) <> 0 Тогда
		Текст = НСтр("ru = 'Ссылки на создание новых, незаполненных процессов.'; en = 'Links to create new, blank processes.'");
	ИначеЕсли Найти(ИмяГруппы, НСтр("ru = 'Другие шаблоны'; en = 'Other templates'")) <> 0 Тогда
		Если СозданиеБезПредмета Тогда
			Текст = НСтр("ru = 'Шаблоны процессов, привязанные к какому-либо виду документов.'; en = 'Templates of processes assigned to some document type.'");
		Иначе
			Если Предметы.Количество() > 1 Тогда
				Текст = НСтр("ru = 'Шаблоны процессов, привязанные к видам документов, отличных от данных.'; en = 'Templates of processes assigned to document types other than the current ones.'");
			Иначе
				Текст = НСтр("ru = 'Шаблоны процессов, привязанные к видам документов, отличных от данного.'; en = 'Templates of processes assigned to document types other than the current one.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Текст = НСтр("ru = 'Группа шаблонов процессов.'; en = 'Process template group.'");
	КонецЕсли;
	
	ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
		HTMLТекст, Текст, "");
		
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	Возврат HTMLТекст;
	
КонецФункции

&НаСервере
Функция СформироватьСводкуПоПроцессуИПолучитьИмяФормы(
	ТипПроцесса, ИмяДляФормы, ДляКомплексногоПроцесса, ОписаниеПроцесса = "")
	
	СтрокаТип = СтрЗаменить(ТипПроцесса, "БизнесПроцесс.", "");
	Если НЕ ДляКомплексногоПроцесса Тогда
		ИмяДляФормы = ТипПроцесса + ".Форма.ФормаБизнесПроцесса";
	Иначе
		Попытка 
			ИмяТипаПроцесса = СтрЗаменить(ТипПроцесса, "БизнесПроцесс.", "");
			ИмяДляФормы = БизнесПроцессы[ИмяТипаПроцесса].ТипШаблона() + ".ФормаОбъекта";	
		Исключение
			// в модуле менеджера бизнес-процесса не определена функция ТипШаблона()
			Текст = НСтр("ru = 'В модуле менеджера процесса " + ИмяТипаПроцесса + " не определена функция ТипШаблона(). Обратитесь к администратору.'; en = 'In manager module for process of type " + ИмяТипаПроцесса + " is not defined function ТипШаблона(). Contact the administrator.'");
			ВызватьИсключение(Текст);
		Конецпопытки;
	КонецЕсли;
	
	HTMLТекст = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body>";
		
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцессы[СтрокаТип].ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ОписаниеПроцесса) Тогда
		ОписаниеПроцесса = СтрЗаменить(ОписаниеПроцесса,
			Символы.ПС, "<br>");
		HTMLТекст = HTMLТекст + ОписаниеПроцесса;
	Иначе
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, МенеджерПроцесса.ПолучитьОписаниеПроцесса(), "");
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

&НаСервере
Функция СформироватьСводкуПоШаблонуИПолучитьИмяФормы(ШаблонСсылка, ИмяФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьИмяФормыПроцессаПоШаблону(ШаблонСсылка);
	
	Возврат ОбзорПроцессовВызовСервера.ПолучитьОбзорШаблонаПроцесса(ШаблонСсылка);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТестЦентр

&НаКлиенте
Функция ТЦСоздатьПроцесс() Экспорт
	
	СоздатьПроцесс(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти


