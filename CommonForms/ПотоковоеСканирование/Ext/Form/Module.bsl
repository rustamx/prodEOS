#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	
	ТипЗагрузки = Перечисления.ТипЗагрузкиПотоковогоСканирования.СоСканера;
	
	ВторойПроходСканирования = Ложь;
	
	ПрочитатьНастройки();
	
	ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
	ПрочитатьНастройкиСканирования();// читаем настройки сканирования
	
	Если НЕ ИспользоватьImageMagickДляПреобразованияВPDF Тогда
		ФорматХраненияМногостраничныйДляЗагрузкиКаталога = Перечисления.ФорматыХраненияМногостраничныхФайлов.TIF;
	КонецЕсли;	
	Элементы.ГруппаФорматХранения.Видимость = ИспользоватьImageMagickДляПреобразованияВPDF;

	ЗаполнитьДеревоИстории();
	
	ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
	Если ТехнологияРаспознаванияШтрихкодов = Перечисления.ТехнологииРаспознаванияШтрихкодов.Документооборот Тогда
		Элементы.ГруппаABBYY.Видимость = Ложь;
		Элементы.ГруппаВстроеннаяКомпонента.Видимость = Истина;
	Иначе
		Элементы.ГруппаABBYY.Видимость = Истина;
		Элементы.ГруппаВстроеннаяКомпонента.Видимость = Ложь;
		Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "TWAIN" И Событие = "ImageAcquired" Тогда
		
		ИмяФайлаКартинки = Данные;
		
		Если ВторойПроходСканирования = Ложь Тогда
			Строка = Изображения.Добавить();
			Строка.Путь = ИмяФайлаКартинки;
		Иначе
			Строка = ИзображенияВторогоПроходаСканирования.Добавить();
			Строка.Путь = ИмяФайлаКартинки;
		КонецЕсли;	
		
	ИначеЕсли Источник = "TWAIN" И Событие = "EndBatch" Тогда
		
		ПродолжитьСканирование = Ложь;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ПродолжитьСканирование", ПродолжитьСканирование);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВнешнееСобытиеПродолжение11",
			ЭтотОбъект,
			ПараметрыОбработчика);
		Если (ВторойПроходСканирования = Ложь) 
			И (ПорядокПодачиБумаги = ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.ОдностороннийПрямой") 
			ИЛИ ПорядокПодачиБумаги = ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.ОдностороннийОбратный")) Тогда
			
			// тут не задаем вопроса
			ВторойПроходСканирования = Истина;
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ПродолжитьСканирование", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВнешнееСобытиеПродолжение1",
				ЭтотОбъект,
				ПараметрыОбработчика);
			ПоказатьПредупреждение(
				ОписаниеОповещения, 
				НСтр("ru = 'Переверните и вставьте в сканер ту же пачку листов для сканирования оборотных сторон листов.'; en = 'Turn over and insert the same bundle of sheets into the scanner to scan reverse sited of the sheets.'"));
			Возврат;
		КонецЕсли;	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
				
	ИначеЕсли Источник = "TWAIN" И Событие = "DiskSpaceLow" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВнешнееСобытиеПродолжение3",
			ЭтотОбъект);
		ПоказатьПредупреждение(
			ОписаниеОповещения, 
			НСтр("ru = 'Недостаточно свободного места на диске. Потоковое сканирование прервано.'; en = 'Not enough free disk space. Batch scanning aborted.'"));
		Изображения.Очистить();
		Возврат;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте потоковое сканирование не поддерживается.'; en = 'In Web client batch scanning is not supported.'"));
		Возврат;
	#КонецЕсли
	
	Если Не РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту() Тогда
		
		Элементы.ГруппаУстановкиКомпоненты.Видимость = Истина;
		Элементы.ФормаНачатьСканирование.Доступность = Ложь;
		Элементы.ФормаЗагрузитьИзПапки.Доступность = Ложь;
		
	КонецЕсли;
	
	Если ТехнологияРаспознаванияШтрихкодов = ПредопределенноеЗначение("Перечисление.ТехнологииРаспознаванияШтрихкодов.Документооборот") Тогда
		Если Не ПроинициализироватьКомпонентуРаспознаванияШтрихкодов() Тогда
			Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Истина;
			Элементы.Сканировать.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если БылЗаданВопросПередЗакрытием <> Истина Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
		ОбработкаЗакрытия(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзКаталога(Команда)
	ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога");
	УстановитьВидимостьНастроек();
КонецПроцедуры

&НаКлиенте
Процедура КаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Каталог = КаталогЗагрузки;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь каталога для загрузки изображений'; en = 'Select the directory path for uploading images'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			КаталогЗагрузки = ДиалогОткрытияФайла.Каталог;
		КонецЕсли;
	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСоСканера(Команда)
	
	Если Не РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать() Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'К вашему компьютеру не подключен ни один сканер.'; en = 'Your computer is not connected to the scanner.'"));
		Возврат;
	КонецЕсли;
	
	ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера");
	УстановитьВидимостьНастроек();
	
	ВыбранноеУстройство = ИмяУстройстваСканирования;
	НужноОбновитьПараметры = Ложь;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("НужноОбновитьПараметры", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьСоСканераПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	Если ВыбранноеУстройство = "" Тогда
		ОписаниеОповещения.ДополнительныеПараметры.НужноОбновитьПараметры = Истина;
		ОткрытьФорму(
			"Справочник.Файлы.Форма.ВыборУстройстваСканирования",,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;	
	КонецЕсли;		
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВыбранноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	
	Если ТехнологияРаспознаванияШтрихкодов = ПредопределенноеЗначение("Перечисление.ТехнологииРаспознаванияШтрихкодов.Документооборот") Тогда
		Если Не ПроинициализироватьКомпонентуРаспознаванияШтрихкодов() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не установлена компонента распознавания штрихкодов!'; en = 'Barcode recognition component is not installed!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	ПоляНеЗаполнены = Ложь;
	
	Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") Тогда
		Если ПустаяСтрока(КаталогЗагрузки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Каталог загрузки не указан!'; en = 'Download directory is not specified!'"), , "КаталогЗагрузки");
			ПоляНеЗаполнены = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если ТехнологияРаспознаванияШтрихкодов <> ПредопределенноеЗначение("Перечисление.ТехнологииРаспознаванияШтрихкодов.Документооборот") Тогда
		Если ПустаяСтрока(ИмяКомпьютераABBYY) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Имя компьютера с ABBYY Recognition Server не указано!'; en = 'Computer name with ABBYY Recognition Server is not specified!'"), , "ИмяКомпьютераABBYY");
			ПоляНеЗаполнены = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяСценарияABBYYШтрихкоды) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сценарий распознавания штрихкодов не указан!'; en = 'Barcode recognition script is not specified!'"), , "ИмяСценарияABBYYШтрихкоды");
			ПоляНеЗаполнены = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяСценарияABBYYТекст) Тогда
			Если РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.РазделятьПустойСтраницей") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сценарий распознавания текста не указан!'; en = 'Script recognition not specified!'"), , "ИмяСценарияABBYYТекст");
				ПоляНеЗаполнены = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоляНеЗаполнены = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") Тогда
		ПереключитьсяНаЗагрузкуИзКаталога();
	Иначе	
		ПереключитьсяНаЗагрузкуСоСканера();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокУспешноРазмещенныхИзображений(Команда)
	
	ПараметрыФормы = Новый Структура("ДанныеОРазмещении, ДатаСканирования", 
		ДанныеОРазмещении, ДатаСеансаСканирования);
	ОткрытьФорму("ОбщаяФорма.УспешноРазмещенныеИзображения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНераспознанныхИзображений(Команда)
	
	МассивПутейНераспознанныхФайлов	= Новый Массив;
	
	Для Каждого Строка Из Изображения Цикл
		
		Если Строка.Владелец = Неопределено ИЛИ Строка.Владелец.Пустая() Тогда
			
			ДобавитьВСписокНераспознанных = Истина;
			
			Если РежимРазделенияПоДокументамПотоковогоСканирования = ПредопределенноеЗначение("Перечисление.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПустомЛисте") Тогда
				// Режим ШтрихКодНаПустомЛисте - лист со штрих кодом не попадает ни в успешные, ни в неуспешные
				Если Строка.ЭтоЛистСШтрихкодом = Истина Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			Если РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.РазделятьПустойСтраницей") Тогда
				// В режим "штрихкод на пустой странице" ЭтоЛистСШтрихкодом - и в успешные не попадает, и в неуспешные
				Если Строка.ЭтоЛистСШтрихкодом Тогда 
					ДобавитьВСписокНераспознанных = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьВСписокНераспознанных Тогда
				МассивПутейНераспознанныхФайлов.Добавить(Строка.Путь);
			КонецЕсли;
			          			
		КонецЕсли;	
		
	КонецЦикла;	
		
	ПараметрыФормы = Новый Структура("МассивПутейНераспознанныхФайлов, ТекстНастроек, ТипЗагрузки, ПутьКПрограммеКонвертации, ФорматХраненияОдностраничный, ФорматХраненияМногостраничный, УдалятьФайлыПослеЗагрузки, ФайлыДляУдаления", 
		МассивПутейНераспознанныхФайлов, ТекстНастроекКраткий, ТипЗагрузки, 
		ПутьКПрограммеКонвертации, ФорматХраненияОдностраничный, ФорматХраненияМногостраничный,
		УдалятьФайлыПослеЗагрузки,
		ФайлыДляУдаления);
		
	ОткрытьФорму("ОбщаяФорма.НераспознанныеИзображения", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Элементы.ГруппаНеуспешно.Видимость = Ложь;
	КоличествоНеразмещенных = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьОтсканированныеФайлы(Команда)
	ПросмотретьОтсканированныеФайлыВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовСканированияДляОтображенияПриИзменении(Элемент)
	
	ЗаполнитьДеревоИстории();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуСканирования(Команда)
	
	Обработчик = Новый ОписаниеОповещения("УстановитьКомпонентуСканированияЗавершение", ЭтотОбъект);
	РаботаСоСканеромКлиент.УстановитьКомпоненту(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиСканирования(Команда)
	
	КомпонентаУстановлена = РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура("КомпонентаУстановлена, ИдентификаторКлиента", 
		КомпонентаУстановлена, ИдентификаторКлиента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПерсональныеНастройкиСканированияПродолжение",
		ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.Файлы.Форма.НастройкаСканирования",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиСканированияПродолжение(КодВозврата, Параметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		ПрочитатьНастройкиСканирования();// читаем настройки сканирования
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСканированияВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Закончить(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьСканирование(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПовторитьСканированиеПродолжение",
		ЭтотОбъект);
	ОбработкаЗакрытия(ОписаниеОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуРаспознаванияШтрихкодов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьКомпонентуРаспознаванияШтрихкодовПродолжение",
		ЭтотОбъект);
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, "ОбщийМакет.КомпонентаРаспознаванияШтрихкодов");
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьКомпонентуРаспознаванияШтрихкодовПродолжение(Параметры) Экспорт
	
	ПроинициализироватьКомпонентуРаспознаванияШтрихкодов();
	
	Если КомпонентаРаспознаванияШтрихкодов <> Неопределено Тогда
		Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Ложь;
		Элементы.Сканировать.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТехнологияРаспознаванияШтрихкодовПриИзменении(Элемент)
	
	Если ТехнологияРаспознаванияШтрихкодов = ПредопределенноеЗначение("Перечисление.ТехнологииРаспознаванияШтрихкодов.Документооборот") Тогда
		
		Элементы.ГруппаABBYY.Видимость = Ложь;
		Элементы.ГруппаВстроеннаяКомпонента.Видимость = Истина;
		Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Истина;
		
		Если Не ПроинициализироватьКомпонентуРаспознаванияШтрихкодов() Тогда
			Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Истина;
			Элементы.Сканировать.Доступность = Ложь;
		Иначе	
			Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаABBYY.Видимость = Истина;
		Элементы.ГруппаВстроеннаяКомпонента.Видимость = Ложь;
		Элементы.ГруппаУстановкиВстроеннойКомпоненты.Видимость = Ложь;
		Элементы.Сканировать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьСканированиеПродолжение(Результат, Параметры) Экспорт
	
	ДанныеОРазмещении.Очистить();
	Изображения.Очистить();
	ИзображенияВторогоПроходаСканирования.Очистить();
	ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	УстановитьВидимостьНастроек();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьОтсканированныеФайлыВыполнить()
	
	Данные = Элементы.ИсторияСканирования.ТекущиеДанные;
	
	Если Данные <> Неопределено И Данные.ПолучитьРодителя() <> Неопределено Тогда // это лист дерева
		
		ПараметрыФормы = Новый Структура("ВладелецФайлов, ДатаСканирования", 
			Данные.Владелец, Данные.ДатаСеансаСканирования);
		ОткрытьФорму("ОбщаяФорма.ОтсканированныеИзображения", ПараметрыФормы);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуСканированияЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"] <> Неопределено Тогда
		
		Элементы.ГруппаУстановкиКомпоненты.Видимость = Ложь;
		Элементы.ФормаНачатьСканирование.Доступность = Истина;
		Элементы.ФормаЗагрузитьИзПапки.Доступность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеШтрихКодаПриИзменении(Элемент)
	Элементы.ГруппаКоординатШтрихкода.Видимость = (ПоложенияШтрихКода = ПредопределенноеЗначение("Перечисление.ПоложенияШтрихКода.ТочноеПоложение"));
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(Результат, Параметры) Экспорт
	
	БылЗаданВопросПередЗакрытием = Истина;
	ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытия(ОписаниеОповещения)
	
	Если КоличествоНеразмещенных = 0 Тогда
		БылЗаданВопросПередЗакрытием = Истина;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		Возврат;
	КонецЕсли;
		
	СтрокаПроУдаление = "";
	
	Если (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") И УдалятьФайлыПослеЗагрузки) 
		ИЛИ (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера")) Тогда
		
		СтрокаПроУдаление = НСтр("ru = 'При закрытии они будут удалены. '; en = 'At closing they will be removed. '");
		
	КонецЕсли;	
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Осталось незагруженными картинок: %1. %2Продолжить?'; en = 'Some pictures not loaded: %1. %2. Continue?'"),
		КоличествоНеразмещенных, СтрокаПроУдаление);
		
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияВопроса = Новый ОписаниеОповещения(
		"ОбработкаЗакрытияПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	ПоказатьВопрос(ОписаниеОповещенияВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияПродолжение(КодВозврата, Параметры) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") И УдалятьФайлыПослеЗагрузки) 
		ИЛИ (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера")) Тогда
		
		МассивПутейНераспознанныхФайлов	= Новый Массив;
		Для Каждого Строка Из Изображения Цикл
			Если Строка.Владелец = Неопределено ИЛИ Строка.Владелец.Пустая() Тогда
				МассивПутейНераспознанныхФайлов.Добавить(Строка.Путь);
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого Путь Из МассивПутейНераспознанныхФайлов Цикл
			УдалитьФайл(Путь);
		КонецЦикла;	
		
	КонецЕсли;
	
	Для Каждого Строка Из ФайлыДляУдаления Цикл
		Путь = Строка.Путь;
		УдалитьФайл(Путь);
	КонецЦикла;	
	ФайлыДляУдаления.Очистить();
	
	Изображения.Очистить();
	КоличествоНеразмещенных = 0;
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСканированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПросмотретьОтсканированныеФайлыВыполнить();
КонецПроцедуры


&НаСервере
Процедура ПрочитатьНастройкиСканирования()
	
	ФорматСканированногоИзображения = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ФорматСканированногоИзображения", ИдентификаторКлиента);
	Если ФорматСканированногоИзображения.Пустая() Тогда
		ФорматСканированногоИзображения = Перечисления.ФорматыСканированногоИзображения.PNG;
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ФорматСканированногоИзображения", ИдентификаторКлиента, ФорматСканированногоИзображения);
	КонецЕсли;
	
	ФорматХраненияОдностраничный = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ФорматХраненияОдностраничный", ИдентификаторКлиента);
	Если ФорматХраненияОдностраничный.Пустая() Тогда
		ФорматХраненияОдностраничный = Перечисления.ФорматыХраненияОдностраничныхФайлов.PNG;
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ФорматХраненияОдностраничный", ИдентификаторКлиента, ФорматХраненияОдностраничный);
	КонецЕсли;
	
	ФорматХраненияМногостраничный = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ФорматХраненияМногостраничный", ИдентификаторКлиента);
	Если ФорматХраненияМногостраничный.Пустая() Тогда
		ФорматХраненияМногостраничный = Перечисления.ФорматыХраненияМногостраничныхФайлов.TIF;
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ФорматХраненияМногостраничный", ИдентификаторКлиента, ФорматХраненияМногостраничный);
	КонецЕсли;
	
	Если ИспользоватьImageMagickДляПреобразованияВPDF Тогда
		Если ФорматХраненияОдностраничный = Перечисления.ФорматыХраненияОдностраничныхФайлов.PDF Тогда
			ФорматКартинки = Строка(ФорматСканированногоИзображения);
		Иначе	
			ФорматКартинки = Строка(ФорматХраненияОдностраничный);
		КонецЕсли;
	Иначе	
		ФорматКартинки = Строка(ФорматСканированногоИзображения);
	КонецЕсли;
	
	РазрешениеПеречисление = ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/Разрешение", ИдентификаторКлиента);
	ЦветностьПеречисление =  ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/Цветность", ИдентификаторКлиента);
	
	ПоворотПеречисление = ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/Поворот", ИдентификаторКлиента);
	РазмерБумагиПеречисление =  ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/РазмерБумаги", ИдентификаторКлиента);
	
	ДвустороннееСканирование = ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ДвустороннееСканирование", ИдентификаторКлиента);
	ИспользоватьImageMagickДляПреобразованияВPDF =  ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ИспользоватьImageMagickДляПреобразованияВPDF", ИдентификаторКлиента);
	
	КачествоJPG =  ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/КачествоJPG", ИдентификаторКлиента);
	Если КачествоJPG = 0 Тогда
		КачествоJPG = 100;
	КонецЕсли;	
	
	СжатиеTIFF =  ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/СжатиеTIFF", ИдентификаторКлиента);
	Если СжатиеTIFF.Пустая() Тогда
		СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.БезСжатия;
	КонецЕсли;	
	
	ПутьКПрограммеКонвертации =  ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ПутьКПрограммеКонвертации", ИдентификаторКлиента);
	Если ПустаяСтрока(ПутьКПрограммеКонвертации) Тогда
		ПутьКПрограммеКонвертации = "magick.exe"; // ImageMagick
	КонецЕсли;	
	
	ПоказыватьДиалогСканераЗагрузка = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ПоказыватьДиалогСканера", ИдентификаторКлиента);
	Если ПоказыватьДиалогСканераЗагрузка = Неопределено Тогда
		ПоказыватьДиалогСканераЗагрузка = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ПоказыватьДиалогСканера", ИдентификаторКлиента, ПоказыватьДиалогСканераЗагрузка);
	КонецЕсли;
	ПоказыватьДиалогСканера = ПоказыватьДиалогСканераЗагрузка;
	
	ИмяУстройства = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ИмяУстройства", ИдентификаторКлиента);
	Если ИмяУстройства = Неопределено Тогда
		ИмяУстройства = "";
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ИмяУстройства", ИдентификаторКлиента, ИмяУстройства);
	КонецЕсли;
	ИмяУстройстваСканирования = ИмяУстройства;
	
	ФорматJPG = Перечисления.ФорматыСканированногоИзображения.JPG;
	ФорматTIF = Перечисления.ФорматыСканированногоИзображения.TIF;
	
	ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление();
	
КонецПроцедуры	

&НаСервере
Процедура ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление()
	
	РаботаСФайламиВызовСервера.ПреобразоватьПеречисленияВПараметрыСканера(
		Разрешение, Цветность, Поворот, РазмерБумаги, СжатиеTIFFЧисло,
		РазрешениеПеречисление, ЦветностьПеречисление, ПоворотПеречисление, РазмерБумагиПеречисление, СжатиеTIFF);
	
	Если ИспользоватьImageMagickДляПреобразованияВPDF Тогда
		Если ФорматХраненияОдностраничный = Перечисления.ФорматыХраненияОдностраничныхФайлов.PDF Тогда
			ФорматКартинки = Строка(ФорматСканированногоИзображения);
		Иначе	
			ФорматКартинки = Строка(ФорматХраненияОдностраничный);
		КонецЕсли;
	Иначе	
		ФорматКартинки = Строка(ФорматСканированногоИзображения);
	КонецЕсли;
	
	Представление = "";
	// Информационная надпись вида:
	// "Формат хранения: PDF. Формат сканирования: JPG. Качество: 75. Формат хранения многостраничный: PDF. Разрешение: 200. Цветное";
	
	Представление = РаботаСФайламиВызовСервера.ПолучитьПредставлениеНастроекСканирования(
		ИспользоватьImageMagickДляПреобразованияВPDF, ФорматКартинки,
		ФорматХраненияОдностраничный, ФорматХраненияМногостраничный, ФорматСканированногоИзображения,
		КачествоJPG, СжатиеTIFF, Разрешение, ЦветностьПеречисление,
		ПоворотПеречисление, РазмерБумагиПеречисление, ДвустороннееСканирование);
	
	ТекстНастроек = Представление;
	
	ТекстНастроекКраткий = РаботаСФайламиВызовСервера.ПолучитьПредставлениеНастроекСканированияКраткое(
		ИспользоватьImageMagickДляПреобразованияВPDF,
		ФорматКартинки,
		ФорматХраненияОдностраничный, 
		ФорматХраненияМногостраничный);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИстории()
	
	ИсторияСканирования.ПолучитьЭлементы().Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Посчитаем число сеансов и возьмем дату самого раннего - затем будем отбирать все с датой больше или равно самой ранней

	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ [ЧислоСеансовСканированияДляОтображения]
		|	РезультатыПотоковогоСканирования.ДатаСеансаСканирования КАК ДатаСеансаСканирования
		|ИЗ
		|	РегистрСведений.РезультатыПотоковогоСканирования КАК РезультатыПотоковогоСканирования
		|ГДЕ
		|	РезультатыПотоковогоСканирования.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСеансаСканирования УБЫВ";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ЧислоСеансовСканированияДляОтображения]", Строка(ЧислоСеансовСканированияДляОтображения));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	Результат = Запрос.Выполнить();
	
	ДатаСамогоРаннегоСканирования = ТекущаяДатаСеанса();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаСамогоРаннегоСканирования = ВыборкаДетальныеЗаписи.ДатаСеансаСканирования;
	КонецЦикла;
	
	// делаем выборку истории
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РезультатыПотоковогоСканирования.Объект КАК Объект,
		|	РезультатыПотоковогоСканирования.Файл,
		|	РезультатыПотоковогоСканирования.ДатаСеансаСканирования КАК ДатаСеансаСканирования,
		|	РезультатыПотоковогоСканирования.ВремяРазмещенияВДокументе,
		|	РезультатыПотоковогоСканирования.Страниц КАК Страниц,
		|	РезультатыПотоковогоСканирования.ТипЗагрузки,
		|	РезультатыПотоковогоСканирования.КаталогЗагрузки
		|ИЗ
		|	РегистрСведений.РезультатыПотоковогоСканирования КАК РезультатыПотоковогоСканирования
		|ГДЕ
		|	РезультатыПотоковогоСканирования.Пользователь = &Пользователь
		|	И РезультатыПотоковогоСканирования.ДатаСеансаСканирования >= &ДатаСеансаСканирования
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСеансаСканирования,
		|	ВремяРазмещенияВДокументе,
		|	Объект";

	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	Запрос.УстановитьПараметр("ДатаСеансаСканирования", ДатаСамогоРаннегоСканирования);
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	ТекущаяДатаСеансаСканирования = Неопределено;
	ТекущийКорень = Неопределено;
	ТекущийВладелец = Неопределено;
	ТекущийЛист = Неопределено;

	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяДатаСеансаСканирования <> Выборка.ДатаСеансаСканирования Тогда
			ТекущаяДатаСеансаСканирования = Выборка.ДатаСеансаСканирования;
			ТекущийКорень = ИсторияСканирования.ПолучитьЭлементы().Добавить();
			
			ТекущийВладелец = Неопределено;
			ТекущийЛист = Неопределено;
			
			Представление = Строка(Выборка.ДатаСеансаСканирования); // тут дата + тип загрузки + каталога
			Если Выборка.ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера") Тогда
				Представление = Представление + НСтр("ru = ' со сканера'; en = ' from scanner'"); 
			Иначе
				Представление = Представление + НСтр("ru = ' из каталога ""'; en = ' from directory'"); 
				Представление = Представление + Выборка.КаталогЗагрузки; 
				Представление = Представление + """"; 
			КонецЕсли;
			
			ТекущийКорень.Представление = Представление;
		КонецЕсли;	
		
		Если ТекущийВладелец <> Выборка.Объект Тогда
			ТекущийВладелец = Выборка.Объект;
			
			// тут добавляем строку в ТекущийКорень и заполняем
			ТекущийЛист = ТекущийКорень.ПолучитьЭлементы().Добавить();
			ТекущийЛист.Представление = Формат(Выборка.ВремяРазмещенияВДокументе, "ДЛФ=T");
			ТекущийЛист.Время = Выборка.ВремяРазмещенияВДокументе;
			ТекущийЛист.ДатаСеансаСканирования = Выборка.ДатаСеансаСканирования;
			ТекущийЛист.Владелец = Выборка.Объект;
			ТекущийЛист.Файлов = 1;
			ТекущийЛист.Страниц = Выборка.Страниц;
		Иначе	
			ТекущийЛист.Файлов = ТекущийЛист.Файлов + 1;
			ТекущийЛист.Страниц = ТекущийЛист.Страниц + Выборка.Страниц;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСоСканераПродолжение(ВыбранноеУстройство, Параметры) Экспорт
	
	Если ВыбранноеУстройство = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеУстройство) = Тип("Структура") Тогда
		ВыбранноеУстройство = ВыбранноеУстройство.Значение;
	КонецЕсли;
	НужноОбновитьПараметры = Параметры.НужноОбновитьПараметры;
	ДвустороннееСканированиеЧисло = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "DUPLEX");
	ДоступностьДвустороннееСканирование = (ДвустороннееСканированиеЧисло <> -1);
	
	Если Разрешение = -1 ИЛИ Цветность = -1 ИЛИ Поворот = -1 ИЛИ РазмерБумаги = -1 Тогда
		
		Разрешение  = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "XRESOLUTION");
		Цветность   = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "PIXELTYPE");
		Поворот  	= РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "ROTATION");
		РазмерБумаги = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "SUPPORTEDSIZES");
		
		ДоступностьПоворот = (Поворот <> -1);
		ДоступностьРазмерБумаги = (РазмерБумаги <> -1);
		
		РаботаСФайламиВызовСервера.ПреобразоватьПараметрыСканераВПеречисления(Разрешение, Цветность, Поворот, РазмерБумаги, 
			РазрешениеПеречисление, ЦветностьПеречисление, ПоворотПеречисление, РазмерБумагиПеречисление);
		РаботаСоСканеромКлиент.СохранитьВНастройкахПараметрыСканера(РазрешениеПеречисление, ЦветностьПеречисление, 
			ПоворотПеречисление, РазмерБумагиПеречисление);
	Иначе
		
		ДоступностьПоворот = Не ПоворотПеречисление.Пустая();
		ДоступностьРазмерБумаги = Не РазмерБумагиПеречисление.Пустая();

	КонецЕсли;	
	
	Элементы.ПорядокПодачиБумаги.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.Односторонний"));
	Если ДоступностьДвустороннееСканирование Тогда
		Элементы.ПорядокПодачиБумаги.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.Двусторонний"));
	КонецЕсли;
	Элементы.ПорядокПодачиБумаги.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.ОдностороннийПрямой"));
	Элементы.ПорядокПодачиБумаги.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.ОдностороннийОбратный"));
	
	Если НужноОбновитьПараметры Тогда
		ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКоманды(Заголовок)
	Команды.Сканировать.Заголовок = Заголовок;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастроек()
	
	Элементы.Сканировать.КнопкаПоУмолчанию = Истина;
	
	Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") Тогда
		УстановитьЗаголовокКоманды(НСтр("ru = 'Загрузить'; en = 'Load'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
		Элементы.НастройкиСканирования.Видимость = Ложь;
		Элементы.НастройкиКаталога.Видимость = Истина;
	Иначе	
		УстановитьЗаголовокКоманды(НСтр("ru = 'Сканировать'; en = 'Scan'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
		Элементы.НастройкиСканирования.Видимость = Истина;
		Элементы.НастройкиКаталога.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СортироватьМассивФайлов(МассивОписаний)
	
	ТаблицаЗначенийФайлов = Новый ТаблицаЗначений;
	ТаблицаЗначенийФайлов.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка"));
	ПараметрыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ТаблицаЗначенийФайлов.Колонки.Добавить("ДатаМодификации", Новый ОписаниеТипов("Дата",,,,,ПараметрыДаты));

	Для Каждого Описание Из МассивОписаний Цикл
		Строка = ТаблицаЗначенийФайлов.Добавить();
		Строка.Путь = Описание.Путь;
		Строка.ДатаМодификации = Описание.ДатаМодификации;
	КонецЦикла;	
	
	// Сортировка по дате, потом по пути (если дата совпадает до секунды)
	ТаблицаЗначенийФайлов.Сортировать("ДатаМодификации Возр, Путь Возр");  
	
	СортированныйМассивПутей = Новый Массив;
	
	Для Каждого Строка Из ТаблицаЗначенийФайлов Цикл
		СортированныйМассивПутей.Добавить(Строка.Путь);
	КонецЦикла;	
	
	Возврат СортированныйМассивПутей;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	СохраненнаяСтрока = Элементы.КаталогЗагрузки.СписокВыбора.НайтиПоЗначению(КаталогЗагрузки);
	Если СохраненнаяСтрока <> Неопределено Тогда
		Элементы.КаталогЗагрузки.СписокВыбора.Удалить(СохраненнаяСтрока);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КаталогЗагрузки) Тогда
		Элементы.КаталогЗагрузки.СписокВыбора.Вставить(0, КаталогЗагрузки);
	КонецЕсли;
	КоличествоСтрок = Элементы.КаталогЗагрузки.СписокВыбора.Количество();
	Если КоличествоСтрок > 20 Тогда
		Элементы.КаталогЗагрузки.СписокВыбора.Удалить(КоличествоСтрок - 1);
	КонецЕсли;	
	МассивКаталоги = Элементы.КаталогЗагрузки.СписокВыбора.ВыгрузитьЗначения();
	
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "КаталогиЗагрузки", МассивКаталоги);	
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ЗадаватьВопросОПродолженииСканирования", ЗадаватьВопросОПродолженииСканирования);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ПорядокПодачиБумаги", ПорядокПодачиБумаги);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "Рекурсивно", Рекурсивно);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "УдалятьФайлыПослеЗагрузки", УдалятьФайлыПослеЗагрузки);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "РежимРазделенияПоДокументамПотоковогоСканирования", РежимРазделенияПоДокументамПотоковогоСканирования);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "РаспределениеИзображенийПоФайлам", РаспределениеИзображенийПоФайлам);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ПоложенияШтрихКода", ПоложенияШтрихКода);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ИмяКомпьютераABBYY", ИмяКомпьютераABBYY);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ИмяСценарияABBYYШтрихкоды", ИмяСценарияABBYYШтрихкоды);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ИмяСценарияABBYYТекст", ИмяСценарияABBYYТекст);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ОчищатьИсториюСканирования", ОчищатьИсториюСканирования);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ЧислоСеансовХраненияИсторииСканирования", ЧислоСеансовХраненияИсторииСканирования);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ЧислоСеансовСканированияДляОтображения", ЧислоСеансовСканированияДляОтображения);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ВысотаЗоныШтрихКода", ВысотаЗоныШтрихКода);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "СмещениеX", СмещениеX);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "СмещениеY", СмещениеY);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ШиринаЗоныШтрихКода", ШиринаЗоныШтрихКода);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ФорматХраненияМногостраничныйДляЗагрузкиКаталога", ФорматХраненияМногостраничныйДляЗагрузкиКаталога);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ТехнологияРаспознаванияШтрихкодов", ТехнологияРаспознаванияШтрихкодов);
	ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ШагСканирования", ШагСканирования);
	
	ХранилищеОбщихНастроек.Сохранить(
		"НастройкиСканирования/ИспользоватьImageMagickДляПреобразованияВPDF",
		ИдентификаторКлиента,
		ИспользоватьImageMagickДляПреобразованияВPDF);
	
	ПоложенияШтрихКодаЧисло = 0;
	Если ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ЛевыйВерхнийУгол Тогда
		ПоложенияШтрихКодаЧисло = 0; // левый верхний угол
	ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ЛевыйНижнийУгол Тогда
		ПоложенияШтрихКодаЧисло = 1; // левый нижний угол
	ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ПравыйВерхнийУгол Тогда
		ПоложенияШтрихКодаЧисло = 2; // правый верхний угол
	ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ПравыйНижнийУгол Тогда
		ПоложенияШтрихКодаЧисло = 3; // правый нижний угол
	ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ТочноеПоложение Тогда
		ПоложенияШтрихКодаЧисло = 4; // точное положение
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьНастройки()
	
	ТехнологияРаспознаванияШтрихкодов = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ТехнологияРаспознаванияШтрихкодов");
	Если ТехнологияРаспознаванияШтрихкодов.Пустая() Тогда
		ТехнологияРаспознаванияШтрихкодов = Перечисления.ТехнологииРаспознаванияШтрихкодов.Документооборот;
		ХранилищеОбщихНастроек.Сохранить("ПотоковоеСканирование", "ТехнологияРаспознаванияШтрихкодов", ТехнологияРаспознаванияШтрихкодов);
	КонецЕсли;	
	
	МассивКаталоги = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "КаталогиЗагрузки");
	Если МассивКаталоги <> Неопределено Тогда
		Элементы.КаталогЗагрузки.СписокВыбора.ЗагрузитьЗначения(МассивКаталоги);
	КонецЕсли;	
	
	ЗадаватьВопросОПродолженииСканированияНастройка = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ЗадаватьВопросОПродолженииСканирования");
	Если ЗадаватьВопросОПродолженииСканированияНастройка = Неопределено Тогда
		ЗадаватьВопросОПродолженииСканированияНастройка = Ложь;
	КонецЕсли;	
	ЗадаватьВопросОПродолженииСканирования = ЗадаватьВопросОПродолженииСканированияНастройка;
	
	ПорядокПодачиБумаги = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ПорядокПодачиБумаги");
	Если ПорядокПодачиБумаги.Пустая() Тогда
		ПорядокПодачиБумаги = Перечисления.ПорядокПодачиБумаги.Односторонний;
	КонецЕсли;	
	
	РекурсивноНастройка = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "Рекурсивно");
	Если РекурсивноНастройка = Неопределено Тогда
		РекурсивноНастройка = Ложь;
	КонецЕсли;	
	Рекурсивно = РекурсивноНастройка;
	
	УдалятьФайлыПослеЗагрузки = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "УдалятьФайлыПослеЗагрузки");
	
	РежимРазделенияПоДокументамПотоковогоСканирования = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "РежимРазделенияПоДокументамПотоковогоСканирования");
	Если РежимРазделенияПоДокументамПотоковогоСканирования.Пустая() Тогда
		РежимРазделенияПоДокументамПотоковогоСканирования = Перечисления.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаКаждомЛисте;
	КонецЕсли;	
	
	РаспределениеИзображенийПоФайлам = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "РаспределениеИзображенийПоФайлам");
	Если РаспределениеИзображенийПоФайлам.Пустая() Тогда
		РаспределениеИзображенийПоФайлам = Перечисления.ВариантыРаспределенияИзображенийПоФайлам.КаждоеИзображениеВОтдельныйФайл;
	КонецЕсли;	
	
	ПоложенияШтрихКода = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ПоложенияШтрихКода");
	Если ПоложенияШтрихКода.Пустая() Тогда
		ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.НеЗадано;
	КонецЕсли;	
	
	Элементы.ГруппаКоординатШтрихкода.Видимость = (ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ТочноеПоложение);
	
	ИмяКомпьютераABBYY = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ИмяКомпьютераABBYY");
	ИмяСценарияABBYYШтрихкоды = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ИмяСценарияABBYYШтрихкоды");
	ИмяСценарияABBYYТекст = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ИмяСценарияABBYYТекст");
	
	ОчищатьИсториюСканирования = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ОчищатьИсториюСканирования");
	ШагСканирования = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ШагСканирования");
	Если ШагСканирования = 0 Тогда
		ШагСканирования = 10;
	КонецЕсли;	
	
	ЧислоСеансовХраненияИсторииСканирования = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ЧислоСеансовХраненияИсторииСканирования");
	Если ЧислоСеансовХраненияИсторииСканирования = 0 Тогда
		ЧислоСеансовХраненияИсторииСканирования = 10;
	КонецЕсли;	
	
	ЧислоСеансовСканированияДляОтображения = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ЧислоСеансовСканированияДляОтображения");	
	Если ЧислоСеансовСканированияДляОтображения = 0 Тогда
		ЧислоСеансовСканированияДляОтображения = 10;
	КонецЕсли;	

	ВысотаЗоныШтрихКода = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ВысотаЗоныШтрихКода");
	СмещениеX = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "СмещениеX");
	СмещениеY = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "СмещениеY");
	ШиринаЗоныШтрихКода = ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ШиринаЗоныШтрихКода");

	ФорматХраненияМногостраничныйДляЗагрузкиКаталога = 
		ХранилищеОбщихНастроек.Загрузить("ПотоковоеСканирование", "ФорматХраненияМногостраничныйДляЗагрузкиКаталога");
	Если ФорматХраненияМногостраничныйДляЗагрузкиКаталога.Пустая() Тогда
		ФорматХраненияМногостраничныйДляЗагрузкиКаталога = Перечисления.ФорматыХраненияМногостраничныхФайлов.TIF;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзКаталога()
	
	Состояние(НСтр("ru = 'Подождите, идет сбор информации о каталоге...'; en = 'Please wait, there is a collection of information about directory'"));
	
	МассивФайлов = НайтиФайлы(КаталогЗагрузки, "*.*", Рекурсивно);
	МассивОписаний = Новый Массив;
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если Файл.ЭтоФайл() Тогда
			
			РасширениеБезТочки = НРег(ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Файл.Расширение));
			
			Если РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(РасширениеБезТочки, ИспользоватьImageMagickДляРаспознаванияPDF) Тогда
			
				Описание = Новый Структура("Путь, ДатаМодификации", Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
				МассивОписаний.Добавить(Описание);
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	СортированныйМассивПутей = СортироватьМассивФайлов(МассивОписаний);
	
	Изображения.Очистить();
	Для Каждого Путь Из СортированныйМассивПутей Цикл
		Строка = Изображения.Добавить();
		Строка.Путь = Путь;
	КонецЦикла;	
	
	РаспознаваниеШтрихКодов(); // тут надо переключать страницу, вешать обработчик ожидания чтобы прошла отрисовка, и уже потом начинать распознавание
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСоСканера()
	
	Если Не РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеУстройство = ИмяУстройстваСканирования;
	НужноОбновитьПараметры = Ложь;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("НужноОбновитьПараметры", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьЗагрузкуСоСканераПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	Если ВыбранноеУстройство = "" Тогда
		ОписаниеОповещения.ДополнительныеПараметры.НужноОбновитьПараметры = Истина;
		ОткрытьФорму(
			"Справочник.Файлы.Форма.ВыборУстройстваСканирования",,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВыбранноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСоСканераПродолжение(ВыбранноеУстройство, Параметры) Экспорт
	
	Если ВыбранноеУстройство = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеУстройство) = Тип("Структура") Тогда
		ВыбранноеУстройство = ВыбранноеУстройство.Значение;
	КонецЕсли;
	
	НужноОбновитьПараметры = Параметры.НужноОбновитьПараметры;
	ДвустороннееСканированиеЧисло = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "DUPLEX");
	ДоступностьДвустороннееСканирование = (ДвустороннееСканированиеЧисло <> -1);
	
	Если Разрешение = -1 ИЛИ Цветность = -1 ИЛИ Поворот = -1 ИЛИ РазмерБумаги = -1 Тогда
		
		Разрешение  = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "XRESOLUTION");
		Цветность   = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "PIXELTYPE");
		Поворот  	= РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "ROTATION");
		РазмерБумаги = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "SUPPORTEDSIZES");
		
		ДоступностьПоворот = (Поворот <> -1);
		ДоступностьРазмерБумаги = (РазмерБумаги <> -1);
		
		РаботаСФайламиВызовСервера.ПреобразоватьПараметрыСканераВПеречисления(Разрешение, Цветность, Поворот, РазмерБумаги, 
			РазрешениеПеречисление, ЦветностьПеречисление, ПоворотПеречисление, РазмерБумагиПеречисление);
		РаботаСоСканеромКлиент.СохранитьВНастройкахПараметрыСканера(РазрешениеПеречисление, ЦветностьПеречисление, 
			ПоворотПеречисление, РазмерБумагиПеречисление);
	Иначе
		
		ДоступностьПоворот = Не ПоворотПеречисление.Пустая();
		ДоступностьРазмерБумаги = Не РазмерБумагиПеречисление.Пустая();

	КонецЕсли;	
	
	Если НужноОбновитьПараметры Тогда
		ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление();
	КонецЕсли;	
	
	ПараметрСжатие = ?(ВРег(ФорматКартинки) = "JPG", КачествоJPG, СжатиеTIFFЧисло);
	ДвустороннееСканированиеПотоковое = Ложь;
	Если ПорядокПодачиБумаги = ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.Двусторонний") Тогда
		ДвустороннееСканированиеПотоковое = Истина;
	КонецЕсли;	
	
	ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].НачатьСканирование(ПоказыватьДиалогСканера, ВыбранноеУстройство, ФорматКартинки, 
		Разрешение, Цветность, Поворот, РазмерБумаги, 
		ПараметрСжатие,
		ДвустороннееСканированиеПотоковое);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьсяНаЗагрузкуСоСканера()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСканирование;
	Элементы.Сканировать.КнопкаПоУмолчанию = Ложь;
	ПодключитьОбработчикОжидания("ВыполнитьЗагрузкуСоСканера", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьсяНаЗагрузкуИзКаталога()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка;
	Элементы.Сканировать.КнопкаПоУмолчанию = Ложь;
	ПодключитьОбработчикОжидания("ВыполнитьЗагрузкуИзКаталога", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйДокументСДаннымШтрихКодом(ШтрихКод)
	
	Штрихкоды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ШтрихКод, " ");
	Для Каждого ШтрихКодТекущий Из Штрихкоды Цикл
		
		МассивНайденных = ШтрихкодированиеСервер.НайтиОбъектыПоШтрихкоду(ШтрихКодТекущий);
		
		Для Каждого НайденныйОбъект Из МассивНайденных Цикл
			
			СсылкаВладельца = НайденныйОбъект.Ключ;
			
			Если ТипЗнч(СсылкаВладельца) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(СсылкаВладельца) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(СсылкаВладельца) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				
				Возврат СсылкаВладельца;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

&НаСервере
Процедура НайтиВладельцаПоШтрихКоду(ВладельцыСНомерами)
	
	ТекущийВладелец = Неопределено;
	
	Для Каждого Строка Из Изображения Цикл
		
		Если НЕ ПустаяСтрока(Строка.ШтрихКод) Тогда
			
			Строка.ЭтоЛистСШтрихкодом = Истина;
			
			ВладелецДляПолученияНомера = Неопределено;
			
			НайденныйОбъект = ПолучитьПервыйДокументСДаннымШтрихКодом(Строка.ШтрихКод);
			Если НайденныйОбъект <> Неопределено Тогда
				
				Если РежимРазделенияПоДокументамПотоковогоСканирования = Перечисления.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаКаждомЛисте Тогда
					
					Строка.Владелец = НайденныйОбъект;
					ВладелецДляПолученияНомера = НайденныйОбъект;
					
				ИначеЕсли РежимРазделенияПоДокументамПотоковогоСканирования = Перечисления.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПервомЛисте Тогда
					
					Строка.Владелец = НайденныйОбъект; // саму страницу со штрихкодом также включаем
					ТекущийВладелец = НайденныйОбъект;
					ВладелецДляПолученияНомера = НайденныйОбъект;
					
				ИначеЕсли РежимРазделенияПоДокументамПотоковогоСканирования = Перечисления.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПустомЛисте Тогда
					
					ТекущийВладелец = НайденныйОбъект; // эту страницу не включаем
					ВладелецДляПолученияНомера = НайденныйОбъект;
					
				КонецЕсли;	
				
				Если ВладельцыСНомерами.Получить(ВладелецДляПолученияНомера) = Неопределено Тогда
					НомерФайла = РаботаСФайламиВызовСервера.ПолучитьНовыйНомерДляСканирования(ВладелецДляПолученияНомера);
					ВладельцыСНомерами.Вставить(ВладелецДляПолученияНомера, НомерФайла);
				КонецЕсли;	
				
			КонецЕсли;
			
		Иначе	
			Если РежимРазделенияПоДокументамПотоковогоСканирования = Перечисления.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПервомЛисте
				ИЛИ РежимРазделенияПоДокументамПотоковогоСканирования = Перечисления.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПустомЛисте Тогда
				
				Строка.Владелец = ТекущийВладелец; // ставим Владельца от ранее распознанного штрихкода - остальные страницы принадлежат ему же.
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
// Удаление файла со снятием атрибута readonly
Процедура УдалитьФайл(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеШтрихКодов()
	
	РаспознаваниеШтрихКодовРеализация();
	
	НуженВторойПроход = (ИзображенияPDF.Количество() <> 0);
	
	Для Каждого СтрокаPDF Из ИзображенияPDF Цикл
		
		ОтборСтроки = Новый Структура("Путь", СтрокаPDF.Путь);
		МассивСтрок = Изображения.НайтиСтроки(ОтборСтроки);
		Если МассивСтрок.Количество() = 1 Тогда
			
			Строка = МассивСтрок[0];
			ИндексСтрокиPDF = Изображения.Индекс(Строка);
		
			ЧислоПутей = СтрЧислоСтрок(СтрокаPDF.СтрокаПутей); 
			МассивПутей = Новый Массив;
			
			Для Индекс = 0 По ЧислоПутей - 1 Цикл
				
				ПутьФайла = СтрПолучитьСтроку(СтрокаPDF.СтрокаПутей, ЧислоПутей - Индекс);
				
				НовСтрока = Изображения.Вставить(ИндексСтрокиPDF);
				НовСтрока.Путь = ПутьФайла;
				
			КонецЦикла;	
			
			Изображения.Удалить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ИзображенияPDF.Очистить();
	
	Если НуженВторойПроход Тогда 
		РаспознаваниеШтрихКодовРеализация();
	КонецЕсли;	

	Состояние(НСтр("ru = 'Подождите, идет поиск документов по штрихкоду...'; en = 'Please wait, searching documents by barcode...'"));
	ВладельцыСНомерами = Новый Соответствие;
	НайтиВладельцаПоШтрихКоду(ВладельцыСНомерами);
	
	РазмещениеВБазе(ВладельцыСНомерами); // тут надо переключать страницу, вешать обработчик ожидания чтобы прошла отрисовка, и уже потом начинать распознавание
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеШтрихКодовРеализация()
	
	Счетчик = 0;
	ЧислоСтрок = Изображения.Количество();
	Для Каждого Строка Из Изображения Цикл
		
		Состояние(НСтр("ru = 'Подождите, идет распознавание штрихкодов...'; en = 'Please wait, recognizing barcodes...'"), Счетчик * 100 / ЧислоСтрок);
		
		Если Не Строка.ШтрихКодПроанализирован Тогда
		
			ПрерватьПроцессСканирования = Ложь;
			СтрокаШтрихкода = РаспознатьШтрихКодОдногоФайла(Строка.Путь, ПрерватьПроцессСканирования);
			
			Строка.ШтрихКодПроанализирован = Истина;
			
			Если ПрерватьПроцессСканирования Тогда
				Изображения.Очистить();
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
				Возврат;
			КонецЕсли;	
			
			Если СтрокаШтрихкода <> Неопределено Тогда
				Строка.ШтрихКод = СтрокаШтрихкода;
			Иначе 
				// тут распознаем пустой лист, если стоит такой режим разделения
			КонецЕсли;
			
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция РаспознатьПустойЛист(ИмяФайлаКартинки)
	
	ЭтоПустойЛист = Ложь;
	
	Если ТехнологияРаспознаванияШтрихкодов = ПредопределенноеЗначение("Перечисление.ТехнологииРаспознаванияШтрихкодов.Документооборот") Тогда
		
		ПроинициализироватьКомпонентуРаспознаванияШтрихкодов();
		КодВозврата = КомпонентаРаспознаванияШтрихкодов.ЭтоПустойЛист(ИмяФайлаКартинки);
		
		Если ТипЗнч(КодВозврата) = Тип("Булево") Тогда
			ЭтоПустойЛист = КодВозврата;
			Возврат ЭтоПустойЛист;
		КонецЕсли;
		
		Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
			СтрокаВозврата = КодВозврата;
			Если Найти(СтрокаВозврата, "Error.") = 1 Тогда // есть ошибка
				
				СтрокаОшибкиКомпоненты = Сред(СтрокаВозврата, СтрДлина("Error."));
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка распознавания пустого листа: %1'; en = 'Recognition error blank page: %1'"),
					СтрокаОшибкиКомпоненты);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;        
		КонецЕсли;        
		
		
	Иначе	 // АББИ
	
		ABBYY = Новый COMОбъект("ABBYYOCRServer3.Client.1");
		ABBYY.Connect(ИмяКомпьютераABBYY);
		
		Результат = ABBYY.ProcessFile(ИмяФайлаКартинки, ИмяСценарияABBYYТекст);
		
		Если Не Результат.IsFailed Тогда
			
			КаталогРезультатов = Результат.ExportParams.OutputFormats.Item(0).OutputLocation;
			
			Если Результат.Statistics.TotalCharacters = 0 Тогда
				
				ЭтоПустойЛист = Истина;
			
				МассивФайлов = НайтиФайлы(КаталогРезультатов, "*.*");
				Для Каждого Файл Из МассивФайлов Цикл
					Если РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(Файл.Расширение) Тогда
						ЭтоПустойЛист = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
			
			УдалитьФайлы(КаталогРезультатов, "*.*");
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ЭтоПустойЛист;
	
КонецФункции


&НаКлиенте
// Проинициализировать компоненту распознавания штрихкодов
Функция ПроинициализироватьКомпонентуРаспознаванияШтрихкодов()
	
	Если КомпонентаРаспознаванияШтрихкодов = Неопределено Тогда
		
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаРаспознаванияШтрихкодов", "BarcodeRecognitionAddIn", ТипВнешнейКомпоненты.Native);
		
		Если Не КодВозврата Тогда
			Возврат Ложь;
		КонецЕсли;

		КомпонентаРаспознаванияШтрихкодов = Новый("AddIn.BarcodeRecognitionAddIn.AddInNativeExtension");	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция РаспознатьШтрихКодОдногоФайла(ИмяФайлаКартинки, ПрерватьПроцессСканирования)
	
	Файл = Новый Файл(ИмяФайлаКартинки);
	
	Если НРег(Файл.Расширение) = НРег(".pdf") Тогда
		
		ВозвращаемаяСтрока = "";
		
		СтрокаПутей = ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].РазделитьМногоСтраничныйФайл(ИмяФайлаКартинки, ПутьКПрограммеКонвертации);
		Если ПустаяСтрока(СтрокаПутей) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось преобразовать в картинки pdf файл: ""%1""'; en = 'Unable to convert to images a pdf file: ""%1""'"),
				ИмяФайлаКартинки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		ЧислоПутей = СтрЧислоСтрок(СтрокаПутей); 
		МассивПутей = Новый Массив;
		
		ЧислоШтрихкодов = 0;
		
		Для Индекс = 0 По ЧислоПутей - 1 Цикл
			
			ПутьФайла = СтрПолучитьСтроку(СтрокаПутей, Индекс + 1);
			МассивПутей.Добавить(ПутьФайла);
			СтрокаШтрихкода = РаспознатьШтрихКодОднойКартинки(ПутьФайла, ПрерватьПроцессСканирования);	
			
			Если Не ПустаяСтрока(СтрокаШтрихкода) Тогда
				
				ЧислоШтрихкодов = ЧислоШтрихкодов + 1;
				
				Если Не ПустаяСтрока(ВозвращаемаяСтрока) Тогда
					ВозвращаемаяСтрока = ВозвращаемаяСтрока + " ";
				КонецЕсли;
				
				ВозвращаемаяСтрока = ВозвращаемаяСтрока + СтрокаШтрихкода;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЧислоШтрихкодов <= 1 Тогда
			
			Для Каждого Путь Из МассивПутей Цикл
				УдалитьФайлы(Путь);
			КонецЦикла;	
			
		Иначе
			
			СтрокаПутей = "";
				
			Для Каждого Путь Из МассивПутей Цикл
				
				УникИд = Новый УникальныйИдентификатор;
				Файл = Новый Файл(Путь);
				
				НовыйПуть = Файл.Путь;
				НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть);
				НовыйПуть = НовыйПуть + Строка(УникИд) + Файл.Расширение;
				
				ПереместитьФайл(Путь, НовыйПуть);
				
				НовСтр = ФайлыДляУдаления.Добавить();
				НовСтр.Путь = НовыйПуть;
				
				Если Не ПустаяСтрока(СтрокаПутей) Тогда
					СтрокаПутей = СтрокаПутей + Символы.ПС;
				КонецЕсли;	
				СтрокаПутей = СтрокаПутей + НовыйПуть;
				
			КонецЦикла;	
			
			НовСтрока = ИзображенияPDF.Добавить();
			НовСтрока.Путь = ИмяФайлаКартинки;
			НовСтрока.СтрокаПутей = СтрокаПутей;
			
		КонецЕсли;	
		
		Возврат ВозвращаемаяСтрока;
		
	Иначе	
		
		Возврат РаспознатьШтрихКодОднойКартинки(ИмяФайлаКартинки, ПрерватьПроцессСканирования);	
		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция РаспознатьШтрихКодОднойКартинки(ИмяФайлаКартинки, ПрерватьПроцессСканирования)
	
	ПрерватьПроцессСканирования = Ложь;
	ПутьФайлаКартинки = ИмяФайлаКартинки;
	
	ПутьВременногоФайла = "";
	
	Если ПоложенияШтрихКода <> ПредопределенноеЗначение("Перечисление.ПоложенияШтрихКода.НеЗадано") Тогда
		
		РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту();
		
		#Если НЕ ВебКлиент Тогда 	
			Файл = Новый Файл(ИмяФайлаКартинки);
			ПутьВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
			ПутьФайлаКартинки = ПутьВременногоФайла;
		#КонецЕсли	
		
		ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].ПолучитьФрагментИзображения(ИмяФайлаКартинки,
	        ПутьФайлаКартинки, ПоложенияШтрихКодаЧисло, 
			СмещениеX, СмещениеY, ШиринаЗоныШтрихКода, ВысотаЗоныШтрихКода);
		
	КонецЕсли;
	
	Если ТехнологияРаспознаванияШтрихкодов = ПредопределенноеЗначение("Перечисление.ТехнологииРаспознаванияШтрихкодов.Документооборот") Тогда
		
		ПроинициализироватьКомпонентуРаспознаванияШтрихкодов();
		СтрокаВозврата = КомпонентаРаспознаванияШтрихкодов.РаспознатьШтрихкоды(ПутьФайлаКартинки, ШагСканирования);
		
		Если НЕ ПустаяСтрока(ПутьВременногоФайла) Тогда
			УдалитьФайл(ПутьВременногоФайла);
		КонецЕсли;	
		
		Если Найти(СтрокаВозврата, "Error.") = 1 Тогда // есть ошибка
			
			СтрокаОшибкиКомпоненты = Сред(СтрокаВозврата, СтрДлина("Error.") + 1);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка распознавания штрихкода: %1'; en = 'Barcode recognition error: %1'"),
				СтрокаОшибкиКомпоненты);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;        
		
		Возврат СтрокаВозврата; // внутри может быть несколько штрихкодов через пробел
		
	Иначе	 // АББИ
		
		ABBYY = Неопределено;
		
		Попытка
			ABBYY = Новый COMОбъект("ABBYYOCRServer3.Client.1"); // ABBYY Recognition Server 3
		Исключение
			
			Попытка
				ABBYY = Новый COMОбъект("ABBYYOCRServer.Client"); // ABBYY Recognition Server 4
			Исключение
				
				ПрерватьПроцессСканирования = Истина;
				ПоказатьПредупреждение(, НСтр("ru = 'Не установлен ABBYY Recognition Server.'; en = 'Not installed ABBYY Recognition Server.'"));
				Возврат Неопределено;
				
			КонецПопытки;
			
		КонецПопытки;	
		
		Попытка
			ABBYY.Connect(ИмяКомпьютераABBYY);
		Исключение
			ПрерватьПроцессСканирования = Истина;
			ПоказатьПредупреждение(, НСтр("ru = 'Не удается установить соединение с ABBYY Recognition Server.'; en = 'Unable to establish connection with the ABBYY Recognition Server.'"));
			Возврат Неопределено;
		КонецПопытки;	
		
		Результат = ABBYY.ProcessFile(ПутьФайлаКартинки, ИмяСценарияABBYYШтрихкоды);
		
		Если НЕ ПустаяСтрока(ПутьВременногоФайла) Тогда
			УдалитьФайл(ПутьВременногоФайла);
		КонецЕсли;	

		Если Не Результат.IsFailed Тогда
			
			КаталогРезультатов = Результат.ExportParams.OutputFormats.Item(0).OutputLocation;
			МассивФайлов = НайтиФайлы(КаталогРезультатов, "*.txt");
			
			Если МассивФайлов.Количество() = 1 Тогда
				
				ПутьФайлаРезультата = МассивФайлов[0];
				ЧтениеТекста = Новый ЧтениеТекста(ПутьФайлаРезультата.ПолноеИмя);
				СтрокаШтрихкода = ЧтениеТекста.Прочитать();
				ЧтениеТекста.Закрыть();
				УдалитьФайлы(КаталогРезультатов, "*.*");
				
				Возврат СтрокаШтрихкода;
				
			КонецЕсли;
			
			УдалитьФайлы(КаталогРезультатов, "*.*");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

// Запишем данные в регистр
&НаСервере
Процедура ЗанестиИнформациюВРегистрРезультатовСканирования(МассивДляЗаписиВРегистр, ВладельцыСНомерами)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ЭлементЗаписиВРегистр Из МассивДляЗаписиВРегистр Цикл
			
			// Создать набор записей
			НаборЗаписей = РегистрыСведений.РезультатыПотоковогоСканирования.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Объект.Установить(ЭлементЗаписиВРегистр.Объект);
			НаборЗаписей.Отбор.Файл.Установить(ЭлементЗаписиВРегистр.Файл);
			НаборЗаписей.Отбор.Пользователь.Установить(ПользователиКлиентСервер.ТекущийПользователь());

			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			
			НоваяЗапись.Объект = ЭлементЗаписиВРегистр.Объект;
			НоваяЗапись.Файл = ЭлементЗаписиВРегистр.Файл;
			НоваяЗапись.ДатаСеансаСканирования = ЭлементЗаписиВРегистр.ДатаСеансаСканирования;
			НоваяЗапись.ВремяРазмещенияВДокументе = ЭлементЗаписиВРегистр.ВремяРазмещенияВДокументе;
			НоваяЗапись.Страниц = ЭлементЗаписиВРегистр.Страниц;
			НоваяЗапись.ТипЗагрузки = ЭлементЗаписиВРегистр.ТипЗагрузки;
			НоваяЗапись.КаталогЗагрузки = ЭлементЗаписиВРегистр.КаталогЗагрузки;

			НаборЗаписей.Записать();
			
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ОчищатьИсториюСканирования Тогда
		//ЧислоСеансовХраненияИсторииСканирования
		
		// посчитаем число сеансов и возьмем дату самого раннего - затем будем удалять все с датой меньше самой ранней

		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ [ЧислоСеансовСканированияДляОтображения]
			|	РезультатыПотоковогоСканирования.ДатаСеансаСканирования КАК ДатаСеансаСканирования
			|ИЗ
			|	РегистрСведений.РезультатыПотоковогоСканирования КАК РезультатыПотоковогоСканирования
			|ГДЕ
			|	РезультатыПотоковогоСканирования.Пользователь = &Пользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаСеансаСканирования Убыв";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ЧислоСеансовСканированияДляОтображения]", Строка(ЧислоСеансовХраненияИсторииСканирования));
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
		Результат = Запрос.Выполнить();
		
		ДатаСамогоРаннегоСканирования = ТекущаяДатаСеанса();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДатаСамогоРаннегоСканирования = ВыборкаДетальныеЗаписи.ДатаСеансаСканирования;
		КонецЦикла;
		
		// делаем выборку истории
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РезультатыПотоковогоСканирования.Объект КАК Объект,
			|	РезультатыПотоковогоСканирования.Файл КАК Файл,
			|	РезультатыПотоковогоСканирования.ДатаСеансаСканирования КАК ДатаСеансаСканирования,
			|	РезультатыПотоковогоСканирования.ВремяРазмещенияВДокументе,
			|	РезультатыПотоковогоСканирования.Страниц КАК Страниц,
			|	РезультатыПотоковогоСканирования.ТипЗагрузки,
			|	РезультатыПотоковогоСканирования.КаталогЗагрузки
			|ИЗ
			|	РегистрСведений.РезультатыПотоковогоСканирования КАК РезультатыПотоковогоСканирования
			|ГДЕ
			|	РезультатыПотоковогоСканирования.Пользователь = &Пользователь
			|	И РезультатыПотоковогоСканирования.ДатаСеансаСканирования < &ДатаСеансаСканирования";

		Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
		Запрос.УстановитьПараметр("ДатаСеансаСканирования", ДатаСамогоРаннегоСканирования);
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();
		
		МассивДляУдаления = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ЗаписьДляУдаления = Новый Структура("Объект, Файл", Выборка.Объект, Выборка.Файл);
			МассивДляУдаления.Добавить(ЗаписьДляУдаления);
		КонецЦикла;	
		
		Для Каждого ЗаписьДляУдаления Из МассивДляУдаления Цикл
			УдалитьИзРегистра(ЗаписьДляУдаления);
		КонецЦикла;	
		
	КонецЕсли;	
	
	Для Каждого ПараКлючЗначение Из ВладельцыСНомерами Цикл
		ВладелецФайла = ПараКлючЗначение.Ключ;
		НомерФайла = ПараКлючЗначение.Значение;
		РаботаСФайламиВызовСервера.ЗанестиМаксимальныйНомерДляСканирования(ВладелецФайла, НомерФайла - 1);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьИзРегистра(ЗаписьДляУдаления)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.РезультатыПотоковогоСканирования.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(ЗаписьДляУдаления.Объект);
	НаборЗаписей.Отбор.Файл.Установить(ЗаписьДляУдаления.Файл);
	НаборЗаписей.Отбор.Пользователь.Установить(ПользователиКлиентСервер.ТекущийПользователь());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеВБазе(ВладельцыСНомерами)
	
	ДанныеОРазмещении.Очистить();
	
	ВсеВладельцы = Новый Соответствие; // соответствие владельца и его файлов
	
	ДатаСеансаСканирования = ТекущаяДата(); //  одна на все записи в регистре
	МассивДляЗаписиВРегистр = Новый Массив;
	
	Страниц = 0;
	МассивПутейКартинок = Новый Массив;
	ТекущийВладелец = Неопределено;
	ИмяФайла = "";
	
	Для Каждого Строка Из Изображения Цикл
		
		Если Строка.Владелец = Неопределено ИЛИ Строка.Владелец.Пустая() Тогда
			
			Если РежимРазделенияПоДокументамПотоковогоСканирования = ПредопределенноеЗначение("Перечисление.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПустомЛисте") Тогда
				// режим ШтрихКодНаПустомЛисте - лист со штрих кодом надо отдельно удалять с диска
				Если Строка.ЭтоЛистСШтрихкодом = Истина Тогда 
					
					// Удаляем файлы после загрузки - если режим со сканера либо из каталога и режим "УдалятьФайлыПослеЗагрузки"
					Если (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") И УдалятьФайлыПослеЗагрузки) 
						ИЛИ (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера")) Тогда
						
						УдалитьФайл(Строка.Путь);

					КонецЕсли;	
						
				КонецЕсли;
			КонецЕсли;	
			
			Продолжить;
		КонецЕсли;	
		
		Если ПустаяСтрока(ИмяФайла) Тогда
			ИмяФайла = Строка.ИмяФайла;
		КонецЕсли;	
		
		ДанныеВладельца = ВсеВладельцы.Получить(Строка.Владелец); // ДанныеВладельца - массив структур "Файл, Страниц" + ВремяРазмещенияВДокументе
		
		Если ДанныеВладельца = Неопределено Тогда
			
			МассивОписанийФайлов = Новый Массив;
			ВремяРазмещенияВДокументе = ТекущаяДата();
			ДанныеВладельца = Новый Структура("МассивОписанийФайлов, ВремяРазмещенияВДокументе",
				МассивОписанийФайлов, ВремяРазмещенияВДокументе);
			ВсеВладельцы.Вставить(Строка.Владелец, ДанныеВладельца);
			
		КонецЕсли;			
		
		// Тут делаем разделение картинок по файлам - смотрим на ЭтоПустойЛист или просто все в один или все в отдельные
		Если РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.КаждоеИзображениеВОтдельныйФайл") Тогда
			
			Страниц = 1;
			МассивПутейКартинок = Новый Массив;
			МассивПутейКартинок.Добавить(Строка.Путь);
			ДанныеВладельца.МассивОписанийФайлов.Добавить(Новый Структура("Файл, МассивПутейКартинок, Страниц, ИмяФайла", 
				Неопределено, МассивПутейКартинок, Страниц, Строка.ИмяФайла));
				
		ИначеЕсли РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.ВсеИзображенияВОдинФайл") Тогда
			
			Если ТекущийВладелец = Строка.Владелец Тогда 
				// мы в том же владельце - добавляем путь
				Страниц = Страниц + 1;
				МассивПутейКартинок.Добавить(Строка.Путь);
			Иначе	
				
				// Владелец поменялся - ранее накопленные пути файлов добавляем в МассивОписанийФайлов и начинаем снова копить пути
				Если МассивПутейКартинок.Количество() <> 0 Тогда
					ДанныеВладельцаТекущий = ВсеВладельцы.Получить(ТекущийВладелец);
					ДанныеВладельцаТекущий.МассивОписанийФайлов.Добавить(Новый Структура("Файл, МассивПутейКартинок, Страниц, ИмяФайла", 
						Неопределено, МассивПутейКартинок, Страниц, Строка.ИмяФайла));
					Страниц = 0;
					МассивПутейКартинок = Новый Массив;
					ИмяФайла = Строка.ИмяФайла;
				КонецЕсли;		
				
				ТекущийВладелец = Строка.Владелец;
				Страниц = Страниц + 1;
				МассивПутейКартинок.Добавить(Строка.Путь);
					
			КонецЕсли;		
			
		ИначеЕсли РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.РазделятьПустойСтраницей") Тогда
			
			Если ПустаяСтрока(Строка.ШтрихКод) Тогда
				Строка.ЭтоПустойЛист = РаспознатьПустойЛист(Строка.Путь);
			КонецЕсли;	
			
			Если ТекущийВладелец = Строка.Владелец Тогда 
				
				Если Строка.ЭтоПустойЛист Тогда // Это изображение не берем, то что было до него - вставляем в МассивОписанийФайлов
					
					Если МассивПутейКартинок.Количество() <> 0 Тогда
						ДанныеВладельцаТекущий = ВсеВладельцы.Получить(ТекущийВладелец);
						ДанныеВладельцаТекущий.МассивОписанийФайлов.Добавить(Новый Структура("Файл, МассивПутейКартинок, Страниц, ИмяФайла", 
							Неопределено, МассивПутейКартинок, Страниц, Строка.ИмяФайла));
						Страниц = 0;
						МассивПутейКартинок = Новый Массив;
						ИмяФайла = Строка.ИмяФайла;
					КонецЕсли;		
					
				Иначе	
					// мы в том же владельце - добавляем путь
					Страниц = Страниц + 1;
					МассивПутейКартинок.Добавить(Строка.Путь);
				КонецЕсли;	
				
			Иначе	
				// Владелец поменялся - ранее накопленные пути файлов добавляем в МассивОписанийФайлов и начинаем снова копить пути
				
				Если МассивПутейКартинок.Количество() <> 0 Тогда
					ДанныеВладельцаТекущий = ВсеВладельцы.Получить(ТекущийВладелец);
					ДанныеВладельцаТекущий.МассивОписанийФайлов.Добавить(Новый Структура("Файл, МассивПутейКартинок, Страниц, ИмяФайла", 
						Неопределено, МассивПутейКартинок, Страниц, Строка.ИмяФайла));
					Страниц = 0;
					МассивПутейКартинок = Новый Массив;
					ИмяФайла = Строка.ИмяФайла;
				КонецЕсли;		
				
				ТекущийВладелец = Строка.Владелец;
				Страниц = Страниц + 1;
				МассивПутейКартинок.Добавить(Строка.Путь);
					
			КонецЕсли;		
			
		КонецЕсли;	

	КонецЦикла;	
	
	Если РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.ВсеИзображенияВОдинФайл") ИЛИ РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.РазделятьПустойСтраницей") Тогда
		Если МассивПутейКартинок.Количество() <> 0 Тогда
			
			ДанныеВладельцаТекущий = ВсеВладельцы.Получить(ТекущийВладелец);
			ДанныеВладельцаТекущий.МассивОписанийФайлов.Добавить(Новый Структура("Файл, МассивПутейКартинок, Страниц, ИмяФайла", 
				Неопределено, МассивПутейКартинок, Страниц, ИмяФайла));
			Страниц = 0;
			МассивПутейКартинок = Новый Массив;
			
		КонецЕсли;	
	КонецЕсли;	
	
	Состояние();
	
	РасширениеРезультата = Строка(ФорматХраненияОдностраничный);
	РасширениеРезультата = НРег(РасширениеРезультата); 
	
	Счетчик = 0;
	ЧислоСтрок = ВсеВладельцы.Количество();
	Для Каждого ПараКлючЗначение Из ВсеВладельцы Цикл
		
		ТекущийВладелец = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		
		Состояние(НСтр("ru = 'Идет размещение изображений в информационной базе...'; en = 'Images are being stored into the infobase...'"), Счетчик * 100 / ЧислоСтрок);
		
		Для Каждого ОписаниеФайла Из ДанныеВладельца.МассивОписанийФайлов Цикл
			
			МассивПутейКартинок = ОписаниеФайла.МассивПутейКартинок;
			Путь = "";
			ФайлРезультатаВременный = "";
			МассивВременныхФайлов = Новый Массив;
			
			// Если МассивПутейКартинок содержит несколько и настройка Все в один файл - вызываем ОбъединитьВМногостраничныйФайл
			
			Если МассивПутейКартинок.Количество() = 1 Тогда
				
				Путь = МассивПутейКартинок[0];
				
				// Если pdf - тут тоже делать конвертацию - только если со сканера
				Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера") Тогда
					Если РасширениеРезультата = "pdf" Тогда
						
						#Если НЕ ВебКлиент Тогда 	
							ФайлРезультатаВременный = ПолучитьИмяВременногоФайла("pdf");
						#КонецЕсли	
					
						СтрокаВсехПутей = Путь;
						ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].ОбъединитьВМногостраничныйФайл(СтрокаВсехПутей, ФайлРезультатаВременный, ПутьКПрограммеКонвертации);
						Путь = ФайлРезультатаВременный;
						
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли МассивПутейКартинок.Количество() > 1 Тогда
				
				// Здесь работаем со всеми картинками - объединяем их в один многостраничный файл
				СтрокаВсехПутей = "";
				
				Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") Тогда
					
					Для Каждого Строка Из МассивПутейКартинок Цикл
						
						Файл = Новый Файл(Строка);
						Расширение = Файл.Расширение;
						
						ФайлВременный = "";
					#Если НЕ ВебКлиент Тогда 	
						ФайлВременный = ПолучитьИмяВременногоФайла(Расширение);
					#КонецЕсли	
						
						МассивВременныхФайлов.Добавить(ФайлВременный);
						
						КопироватьФайл(Строка, ФайлВременный);
						
						СтрокаВсехПутей = СтрокаВсехПутей + "*";
						СтрокаВсехПутей = СтрокаВсехПутей + ФайлВременный;
					КонецЦикла;
					
				Иначе	
					
					Для Каждого Строка Из МассивПутейКартинок Цикл
						СтрокаВсехПутей = СтрокаВсехПутей + "*";
						СтрокаВсехПутей = СтрокаВсехПутей + Строка;
					КонецЦикла;
					
				КонецЕсли;	
				
			#Если НЕ ВебКлиент Тогда 	
				РасширениеРезультата = "";
				Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") Тогда
					РасширениеРезультата = Строка(ФорматХраненияМногостраничныйДляЗагрузкиКаталога);
				Иначе	
					РасширениеРезультата = Строка(ФорматХраненияМногостраничный);
				КонецЕсли;	
				РасширениеРезультата = НРег(РасширениеРезультата); 
				ФайлРезультатаВременный = ПолучитьИмяВременногоФайла(РасширениеРезультата);
			#КонецЕсли	
				ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].ОбъединитьВМногостраничныйФайл(СтрокаВсехПутей, ФайлРезультатаВременный, ПутьКПрограммеКонвертации);
				Путь = ФайлРезультатаВременный;
			
			КонецЕсли;	
			
			Страниц = МассивПутейКартинок.Количество();
			
			ИмяФайла = "";
			НомерФайла = ВладельцыСНомерами.Получить(ТекущийВладелец);
			Если НомерФайла <> Неопределено Тогда
				ИмяФайла = РаботаСФайламиКлиентСервер.ИмяСканированногоФайла(НомерФайла, ПрефиксИнформационнойБазы);
				НомерФайла = НомерФайла + 1;
				ВладельцыСНомерами.Вставить(ТекущийВладелец, НомерФайла);
			КонецЕсли;	
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			СозданныйФайл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(Путь, ТекущийВладелец, ЭтаФорма, 
				НеОткрыватьКарточкуПослеСозданияИзФайла, ИмяФайла);
				
			Если ВестиУчетСканКопийОригиналовДокументов Тогда 
				Делопроизводство.СохранитьСведенияОбОригиналеФайла(СозданныйФайл, ТекущийВладелец);	
			КонецЕсли;	
				
			Если НЕ ПустаяСтрока(ФайлРезультатаВременный) Тогда
				УдалитьФайл(ФайлРезультатаВременный);
			КонецЕсли;	
			
			Для Каждого ПутьФайла Из МассивВременныхФайлов Цикл
				УдалитьФайл(ПутьФайла);
			КонецЦикла;	
			
			// Удаляем файлы после загрузки - если режим со сканера либо из каталога и режим "УдалятьФайлыПослеЗагрузки"
			Если (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") И УдалятьФайлыПослеЗагрузки) 
				ИЛИ (ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.СоСканера")) Тогда
				
				УдалитьФайл(Путь);
				
				Для Каждого ПутьФайла Из МассивПутейКартинок Цикл
					УдалитьФайл(ПутьФайла);
				КонецЦикла;	
				
			КонецЕсли;	
			
			ОписаниеФайла.Файл = СозданныйФайл;
			ОписаниеФайла.Страниц = Страниц;
			
		КонецЦикла;		
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;	
	
	
	Для Каждого ПараКлючЗначение Из ВсеВладельцы Цикл
		
		ТекущийВладелец = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		
		Файлов = ДанныеВладельца.МассивОписанийФайлов.Количество();
		
		МассивТолькоФайлы = Новый Массив;
		Страниц = 0;
		Для Каждого ОписаниеФайла Из ДанныеВладельца.МассивОписанийФайлов Цикл
			
			Страниц = Страниц + ОписаниеФайла.Страниц;
			МассивТолькоФайлы.Добавить(ОписаниеФайла.Файл);
			
			ЭлементЗаписиВРегистр = Новый Структура("Объект, Файл, ДатаСеансаСканирования, Страниц, ВремяРазмещенияВДокументе, ТипЗагрузки, КаталогЗагрузки",
				ТекущийВладелец, ОписаниеФайла.Файл, ДатаСеансаСканирования, 
				ОписаниеФайла.Страниц, ДанныеВладельца.ВремяРазмещенияВДокументе, 
				ТипЗагрузки, КаталогЗагрузки);	
			МассивДляЗаписиВРегистр.Добавить(ЭлементЗаписиВРегистр); // для записи в регистр
			
		КонецЦикла;		
					  
		ЭлементРазмещения = Новый Структура("Владелец, Файлы, Страниц, Файлов, Время",
			ТекущийВладелец, МассивТолькоФайлы, Страниц, Файлов, ДанныеВладельца.ВремяРазмещенияВДокументе);	
		ДанныеОРазмещении.Добавить(ЭлементРазмещения); // для показа в диалоге просмотра результатов	
		
	КонецЦикла;	
	
	ЗанестиИнформациюВРегистрРезультатовСканирования(МассивДляЗаписиВРегистр, ВладельцыСНомерами);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	
	КоличествоНеразмещенных = 0;
	КоличествоУспешноРазмещенных = 0;
	УникальныеВладельцы = Новый Соответствие;
	Для Каждого Строка Из Изображения Цикл
		
		Если Строка.Владелец = Неопределено ИЛИ Строка.Владелец.Пустая() Тогда
			
			Если РежимРазделенияПоДокументамПотоковогоСканирования = ПредопределенноеЗначение("Перечисление.РежимРазделенияПоДокументамПотоковогоСканирования.ШтрихКодНаПустомЛисте") Тогда
				// Режим ШтрихКодНаПустомЛисте - лист со штрих кодом не попадает ни в успешные, ни в неуспешные
				Если Строка.ЭтоЛистСШтрихкодом = Истина Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			Если РаспределениеИзображенийПоФайлам = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияИзображенийПоФайлам.РазделятьПустойСтраницей") Тогда
				// В режим "штрихкод на пустой странице" ЭтоЛистСШтрихкодом - и в успешные не попадает, и в неуспешные
				Если Строка.ЭтоЛистСШтрихкодом = Ложь Тогда 
					КоличествоНеразмещенных = КоличествоНеразмещенных + 1;
				КонецЕсли;
			Иначе	
				КоличествоНеразмещенных = КоличествоНеразмещенных + 1;
			КонецЕсли;
			
		Иначе
			КоличествоУспешноРазмещенных = КоличествоУспешноРазмещенных + 1;
			УникальныеВладельцы.Вставить(Строка.Владелец);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Элементы.ОткрытьСписокУспешноРазмещенныхИзображений.Доступность = (КоличествоУспешноРазмещенных <> 0);
	
	КоличествоВладельцевУспешноРазмещенных = УникальныеВладельцы.Количество();
	СтрокаДокументов = ПолучитьПодписьДокументов(КоличествоВладельцевУспешноРазмещенных);
	
	// "Успешно размещено изображений: 4 (в 3 документах)"
	Элементы.ДекорацияТекстУспешно.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Потоковое сканирование закончено. 
				|Успешно размещено изображений: %1 (в %2 %3)';
				|en = 'Batch scanning finished. 
				|Successfully posted images: %1 (in %2 %3)'"),
		КоличествоУспешноРазмещенных, КоличествоВладельцевУспешноРазмещенных, СтрокаДокументов);

	Элементы.ДекорацияТекстНеудачно.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для некоторых изображений (%1) не удалось определить к каким документам они относятся. 
		|Обработайте эти изображения вручную или они будут удалены';
		|en = 'For some images (%1) the documents they belong to were not determined automatically.
		|Handle these images manually or they will be deleted'"),
		КоличествоНеразмещенных);
		
	Если КоличествоНеразмещенных = 0 Тогда
		Элементы.ГруппаНеуспешно.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаНеуспешно.Видимость = Истина;
	КонецЕсли;
	
	ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Верх;
	Элементы.ФормаЗакончить.КнопкаПоУмолчанию = Истина;
	
	Если ТипЗагрузки = ПредопределенноеЗначение("Перечисление.ТипЗагрузкиПотоковогоСканирования.ИзКаталога") Тогда
		Элементы.ФормаПовторитьСканирование.Заголовок = НСтр("ru ='Повторить загрузку'; en = 'Reload'");
	Иначе
		Элементы.ФормаПовторитьСканирование.Заголовок = НСтр("ru ='Повторить сканирование'; en = 'Rescan'");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПодписьДокументов(ЧислоДокументов)
	
	Если ЧислоДокументов > 10 И ЧислоДокументов < 20 Тогда
		Подпись = НСтр("ru = 'документов'; en = 'documents'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДокументов - Цел(ЧислоДокументов / 100) * 100;
		ПоследняяЦифра = ЧислоДокументов - Цел(ЧислоДокументов/ 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'документов'; en = 'documents'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'документов'; en = 'documents'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'документ'; en = 'document'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'документа'; en = 'documents'");
			Иначе
				Подпись = НСтр("ru = 'документов'; en = 'documents'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытиеПродолжение1(Параметры) Экспорт
	
	//  Тут выводим вопрос "Продолжить сканирование", если есть такая настройка, если нет - сразу РаспознаваниеШтрихКодов
	ПродолжитьСканирование = Параметры.ПродолжитьСканирование;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВнешнееСобытиеПродолжение2",
		ЭтотОбъект,
		Параметры);
	
	Если (ПродолжитьСканирование = Ложь) И ЗадаватьВопросОПродолженииСканирования И НЕ ВторойПроходСканирования Тогда	
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Продолжить сканирование?'; en = 'Continue scanning?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеПродолжение11(Результат, Параметры) Экспорт
	
	//  тут выводим вопрос "Продолжить сканирование", если есть такая настройка, если нет - сразу РаспознаваниеШтрихКодов
	ПродолжитьСканирование = Параметры.ПродолжитьСканирование;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВнешнееСобытиеПродолжение2",
		ЭтотОбъект,
		Параметры);
	
	Если (ПродолжитьСканирование = Ложь) И ЗадаватьВопросОПродолженииСканирования И НЕ ВторойПроходСканирования Тогда	
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Продолжить сканирование?'; en = 'Continue scanning?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеПродолжение2(КодВозврата, Параметры) Экспорт
	
	ПродолжитьСканирование = Параметры.ПродолжитьСканирование;
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПродолжитьСканирование = Истина;
	КонецЕсли;	
	
	Если ПродолжитьСканирование Тогда
			
		ВыбранноеУстройство = ИмяУстройстваСканирования;
		ПараметрСжатие = ?(ВРег(ФорматКартинки) = "JPG", КачествоJPG, СжатиеTIFFЧисло);
		
		ДвустороннееСканированиеПотоковое = Ложь;
		Если ПорядокПодачиБумаги = ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.Двусторонний") Тогда
			ДвустороннееСканированиеПотоковое = Истина;
		КонецЕсли;	
		
		ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].НачатьСканирование(ПоказыватьДиалогСканера, ВыбранноеУстройство, ФорматКартинки, 
			Разрешение, Цветность, Поворот, РазмерБумаги, 
			ПараметрСжатие,
			ДвустороннееСканированиеПотоковое);
		
		Возврат;
		
	КонецЕсли;		
	
	Если ВторойПроходСканирования Тогда
		// разместим изображения из ИзображенияВторогоПроходаСканирования в Изображения
		
		Если ИзображенияВторогоПроходаСканирования.Количество() <> Изображения.Количество() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВнешнееСобытиеПродолжение3",
				ЭтотОбъект);
			ПоказатьПредупреждение(
				ОписаниеОповещения, 
				НСтр("ru = 'Количество отсканированных листов в первом и втором проходе сканирования отличается. Повторите процесс потокового сканирования.'; en = 'Number of scanned sheets in the first and second pass scans different. Repeat the process of streaming scan.'"));
			Изображения.Очистить();
			Возврат;
		КонецЕсли;	
		
		Если ПорядокПодачиБумаги = ПредопределенноеЗначение("Перечисление.ПорядокПодачиБумаги.ОдностороннийПрямой") Тогда
			// Тут вставляем в обратном порядке
			// 1.3.5  - добавили 2 4 6 - стало 1.6.3.4.5.2
			
			Для Индекс = 0 По Изображения.Количество() - 1 Цикл
				
				СтрокаВторогоПрохода = ИзображенияВторогоПроходаСканирования[ИзображенияВторогоПроходаСканирования.Количество() - 1 - Индекс];
				
				ПозицияВставки = Индекс * 2 + 1;
				Строка = Неопределено;
				Если ПозицияВставки > Изображения.Количество() - 1 Тогда
					Строка = Изображения.Добавить();
				Иначе	
					Строка = Изображения.Вставить(ПозицияВставки);
				КонецЕсли;	
				Строка.Путь = СтрокаВторогоПрохода.Путь;
				
			КонецЦикла;	
			
		Иначе	
			// тут вставляем в прямом порядке
			
			// 1.3.5  - добавили 2 4 6 - стало 1.2.3.4.5.6
			
			Для Индекс = 0 По Изображения.Количество() - 1 Цикл
				
				СтрокаВторогоПрохода = ИзображенияВторогоПроходаСканирования[Индекс];
				
				ПозицияВставки = Индекс * 2 + 1;
				Строка = Неопределено;
				Если ПозицияВставки > Изображения.Количество() - 1 Тогда
					Строка = Изображения.Добавить();
				Иначе	
					Строка = Изображения.Вставить(ПозицияВставки);
				КонецЕсли;	
				Строка.Путь = СтрокаВторогоПрохода.Путь;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		ИзображенияВторогоПроходаСканирования.Очистить();
		
	КонецЕсли;		
	
	РаспознаваниеШтрихКодов(); // тут надо переключать страницу, вешать обработчик ожидания чтобы прошла отрисовка, и уже потом начинать распознавание
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеПродолжение3(Параметры) Экспорт
	
	Закрыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьImageMagickДляПреобразованияВPDFПриИзменении(Элемент)
	Элементы.ГруппаФорматХранения.Видимость = ИспользоватьImageMagickДляПреобразованияВPDF;
КонецПроцедуры


#КонецОбласти
