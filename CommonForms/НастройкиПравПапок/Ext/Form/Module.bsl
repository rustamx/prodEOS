
&НаСервере
Процедура ПриСозданииНаСервере() 
	
	СсылкаНаОбъект = Параметры.СсылкаНаОбъект;
	ИмяТаблицы = СсылкаНаОбъект.Метаданные().Имя;
	
	ТолькоПросмотр = Не ПроверитьРазрешениеНаУправлениеПравами(Истина);
	
	// Заголовки и подсказки колонок
	ТаблицаПредставленияКолонок = ПредставленияКолонок(ИмяТаблицы);
	Для Каждого Стр Из ТаблицаПредставленияКолонок Цикл
		
		Элемент = Элементы[Стр.ИмяЭлемента];
		Если ЗначениеЗаполнено(Стр.Заголовок) Тогда
			Элемент.Заголовок = Стр.Заголовок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.Подсказка) Тогда
			Элемент.Подсказка = Стр.Подсказка;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьИменаНастроек();
	
	Если СсылкаНаОбъект.Родитель.Пустая() Тогда
		Элементы.НаследоватьПраваРодителей.Видимость = Ложь;
	КонецЕсли;	
	
	Заголовок = Заголовок + " " + """" + Строка(СсылкаНаОбъект) + """";
	
	ПрочитатьПрава();
	
	// Вычисление признака ПредупредитьПриИзмененииНастроек.
	ИндивидуальныеСтроки = ТаблицаПрав.НайтиСтроки(Новый Структура("Унаследовано", Ложь));
	Если ИндивидуальныеСтроки.Количество() = 0 И ИмяТаблицы <> "ПапкиФайлов" Тогда
		
		Если Не ЗначениеЗаполнено(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Родитель")) Тогда
            // Корневая папка всегда имеет индивидуальные настройки.
            Возврат;
        КонецЕсли;
		
		Лимит = 1000;
		
		ВсеТипыПапокИСодержимого = ДокументооборотПраваДоступаПовтИсп.ТипыПапокИСодержимого();
		МетаданныеСодержимогоПапки = ВсеТипыПапокИСодержимого.Получить(ТипЗнч(СсылкаНаОбъект));
		
		Если МетаданныеСодержимогоПапки = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка при обновлении содержимого папки: тип не определен.'; en = 'Error updating the contents of the folder: type not defined.'");
		КонецЕсли;
		
		ШаблонТекстаЗапросаПоСодержимому = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ТаблицаСодержимогоПапки.Ссылка) КАК КолЗаписей
			|ИЗ
			|	%ТаблицаСодержимогоПапки% КАК ТаблицаСодержимогоПапки
			|ГДЕ
			|	ТаблицаСодержимогоПапки.Папка В ИЕРАРХИИ(&Папка)";
		
		КоличествоЭлементовВПапке = 0;
		Для Каждого ОбъектМетаданныхСодержимого Из МетаданныеСодержимогоПапки Цикл
			
			ЗапросПоСодержимому = Новый Запрос;
			ЗапросПоСодержимому.УстановитьПараметр("Папка", СсылкаНаОбъект);
			ЗапросПоСодержимому.Текст = СтрЗаменить(ШаблонТекстаЗапросаПоСодержимому, 
				"%ТаблицаСодержимогоПапки%", 
				ОбъектМетаданныхСодержимого.ПолноеИмя());
			
			Выборка = ЗапросПоСодержимому.Выполнить().Выбрать();
			Выборка.Следующий();
			
			КоличествоЭлементовВПапке = КоличествоЭлементовВПапке + Выборка.КолЗаписей;
			
		КонецЦикла;
		
		ПредупредитьПриИзмененииНастроек = КоличествоЭлементовВПапке > Лимит;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставленияКолонок(ИмяТаблицы) 
	
	Представления = Новый ТаблицаЗначений;
	Представления.Колонки.Добавить("ИмяЭлемента");
	Представления.Колонки.Добавить("Заголовок");
	Представления.Колонки.Добавить("Подсказка");
	
	Если ИмяТаблицы = "ПапкиВнутреннихДокументов" Тогда
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ПраваСодержимого";
		Стр.Заголовок = НСтр("ru = 'Документы'; en = 'Documents'");
		Стр.Подсказка = НСтр("ru = 'Права на документы'; en = 'Documents permissions'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоЧтенияСтрокой";
		Стр.Подсказка = НСтр("ru = 'Чтение папок и документов'; en = 'Read folders and documents'");
		
	ИначеЕсли ИмяТаблицы = "ПапкиФайлов" Тогда
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ПраваСодержимого";
		Стр.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
		Стр.Подсказка = НСтр("ru = 'Права на файлы'; en = 'Files permissions'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоЧтенияСтрокой";
		Стр.Подсказка = НСтр("ru = 'Чтение папок и файлов'; en = 'Read folders and files'");
		
	ИначеЕсли ИмяТаблицы = "ПапкиМероприятий" Тогда
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ПраваСодержимого";
		Стр.Заголовок = НСтр("ru = 'Мероприятия'; en = 'Events'");
		Стр.Подсказка = НСтр("ru = 'Права на мероприятия'; en = 'Events permissions'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоЧтенияСтрокой";
		Стр.Подсказка = НСтр("ru = 'Чтение папок и мероприятий'; en = 'Read folders and events'");
		
	ИначеЕсли ИмяТаблицы = "ПапкиПисем" Тогда
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ПраваСодержимого";
		Стр.Заголовок = НСтр("ru = 'Письма'; en = 'Emails'");
		Стр.Подсказка = НСтр("ru = 'Права на письма'; en = 'Email permissions'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоЧтенияСтрокой";
		Стр.Подсказка = НСтр("ru = 'Чтение папок и писем'; en = 'Read folders and emails'");
		
	ИначеЕсли ИмяТаблицы = "ПапкиПроектов" Тогда
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ПраваСодержимого";
		Стр.Заголовок = НСтр("ru = 'Проекты'; en = 'Projects'");
		Стр.Подсказка = НСтр("ru = 'Права на проекты'; en = 'Projects permissions'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоЧтенияСтрокой";
		Стр.Подсказка = НСтр("ru = 'Чтение папок и проектов'; en = 'Read folders and projects'");
		
	ИначеЕсли ИмяТаблицы = "ПапкиФорума" Тогда
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ПраваСодержимого";
		Стр.Заголовок = НСтр("ru = 'Темы и сообщения'; en = 'Topics and messages'");
		Стр.Подсказка = НСтр("ru = 'Права на темы и сообщения'; en = 'Topics and messages permissions'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоЧтенияСтрокой";
		Стр.Подсказка = НСтр("ru = 'Чтение папок, тем и сообщений'; en = 'Read folders, topics and posts'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПравоИзмененияПапокСтрокой";
		Стр.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Изм. %1 разделов'; en = 'Chg. %1 sub-forums'"), Символы.ПС);
		Стр.Подсказка = НСтр("ru = 'Изменение разделов'; en = 'Change sub-forums'");
		
		Стр = Представления.Добавить();
		Стр.ИмяЭлемента = "ТаблицаПравПередаватьДочернимСтрокой";
		Стр.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для %1 подразделов'; en = 'For %1 subsections'"), Символы.ПС);
		Стр.Подсказка = НСтр("ru = 'Передавать настройку дочерним разделам при наследовании'; en = 'Transmit to subfolders by inheritance'");
		
	КонецЕсли;
	
	Возврат Представления;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаНастроек()
	
	ИменаНастроек = Новый Структура("ПравоЧтения, ПравоИзмененияПапок, 
		|ПравоДобавленияДанных, ПравоИзмененияДанных, ПравоУдаленияДанных, 
		|ПередаватьДочерним, ПравоУправленияПравами");
	
	Если ИмяТаблицы = "ПапкиВнутреннихДокументов" Тогда
		ИменаНастроек.ПравоЧтения = "ЧтениеПапокИВнутреннихДокументов";
		ИменаНастроек.ПравоИзмененияПапок = "ИзменениеПапокВнутреннихДокументов";
		ИменаНастроек.ПравоДобавленияДанных = "ДобавлениеПапокИВнутреннихДокументов";
		ИменаНастроек.ПравоИзмененияДанных = "ИзменениеПапокИВнутреннихДокументов";
		ИменаНастроек.ПравоУдаленияДанных = "ПометкаУдаленияПапокИВнутреннихДокументов";
	ИначеЕсли ИмяТаблицы = "ПапкиФайлов" Тогда
		ИменаНастроек.ПравоЧтения = "ЧтениеПапокИФайлов";
		ИменаНастроек.ПравоИзмененияПапок = "ИзменениеПапок";
		ИменаНастроек.ПравоДобавленияДанных = "ДобавлениеПапокИФайлов";
		ИменаНастроек.ПравоИзмененияДанных = "ИзменениеПапокИФайлов";
		ИменаНастроек.ПравоУдаленияДанных = "ПометкаУдаленияПапокИФайлов";
	ИначеЕсли ИмяТаблицы = "ПапкиПисем" Тогда
		ИменаНастроек.ПравоЧтения = "ЧтениеПапокИПисем";
		ИменаНастроек.ПравоИзмененияПапок = "ИзменениеПапок";
		ИменаНастроек.ПравоДобавленияДанных = "ДобавлениеПапокИПисем";
		ИменаНастроек.ПравоИзмененияДанных = "ИзменениеПапокИПисем";
		ИменаНастроек.ПравоУдаленияДанных = "ПометкаУдаленияПапокИПисем";
	ИначеЕсли ИмяТаблицы = "ПапкиМероприятий" Тогда
		ИменаНастроек.ПравоЧтения = "ЧтениеПапокИМероприятий";
		ИменаНастроек.ПравоИзмененияПапок = "ИзменениеПапокМероприятий";
		ИменаНастроек.ПравоДобавленияДанных = "ДобавлениеПапокИМероприятий";
		ИменаНастроек.ПравоИзмененияДанных = "ИзменениеПапокИМероприятий";
		ИменаНастроек.ПравоУдаленияДанных = "ПометкаУдаленияПапокИМероприятий";
	ИначеЕсли ИмяТаблицы = "ПапкиПроектов" Тогда
		ИменаНастроек.ПравоЧтения = "ЧтениеПапокИПроектов";
		ИменаНастроек.ПравоИзмененияПапок = "ИзменениеПапокПроектов";
		ИменаНастроек.ПравоДобавленияДанных = "ДобавлениеПапокИПроектов";
		ИменаНастроек.ПравоИзмененияДанных = "ИзменениеПапокИПроектов";
		ИменаНастроек.ПравоУдаленияДанных = "ПометкаУдаленияПапокИПроектов";
	ИначеЕсли ИмяТаблицы = "ПапкиФорума" Тогда
		ИменаНастроек.ПравоЧтения = "ЧтениеПапокИТем";
		ИменаНастроек.ПравоИзмененияПапок = "ИзменениеПапок";
		ИменаНастроек.ПравоДобавленияДанных = "ДобавлениеТемИСообщений";
		ИменаНастроек.ПравоИзмененияДанных = "ИзменениеТемИСообщений";
		ИменаНастроек.ПравоУдаленияДанных = "ПометкаУдаленияТемИСообщений";
	КонецЕсли;
	
	ИменаНастроек.ПравоУправленияПравами = "УправлениеПравами";
	ИменаНастроек.ПередаватьДочерним = "НаследованиеРазрешено";
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПрава(СУчетомНаследования = Неопределено, ТолькоУнаследованные = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаОбъект);
	Если СУчетомНаследования = Неопределено Тогда
		НаследоватьПраваРодителей = НастройкиПрав.Наследовать;
	КонецЕсли;
	
	КолонкиНастроек = НастройкиПрав.Настройки.Колонки;
	Для каждого Настройка Из НастройкиПрав.Настройки Цикл
		
		Если Не НаследоватьПраваРодителей И Настройка.НастройкаРодителя Тогда
			// Права родителей не добавляются
			Продолжить;
		КонецЕсли;
		
		Если ТолькоУнаследованные И Не Настройка.НастройкаРодителя Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПравоВТаблицуПрав(Настройка, КолонкиНастроек);
		
	КонецЦикла;
	
	ТаблицаПрав.Сортировать("Унаследовано Убыв, Пользователь");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		СтруктураПоиска = Новый Структура("Пользователь");
		Для Каждого Эл Из ВыбранноеЗначение Цикл
			
			СтруктураПоиска.Пользователь = Эл;
			НайденныеСтроки = ТаблицаПрав.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДобавитьНовуюСтрокуВТаблицуПрав(Ложь, Эл);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип данных'; en = 'Unexpected data type'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБезЗакрытия(Команда)
	
	Записать(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРазрешениеНаУправлениеПравами(ПропуститьВызовИсключения = Ложь, ОписаниеПредупреждения = "")
	
	РазрешеноУправлениеПравами = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СсылкаНаОбъект).УправлениеПравами;
	
	Если Не РазрешеноУправлениеПравами Тогда
		ОписаниеПредупреждения = НСтр("ru = 'Вам более недоступно управление правами.'; en = 'Permissions management is no longer available for you.'");
		
		Если Не ПропуститьВызовИсключения Тогда
			ВызватьИсключение НСтр("ru = 'Вам недоступно управление правами.'; en = 'Permissions management is not available for you.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат РазрешеноУправлениеПравами;
	
КонецФункции

&НаСервере
Функция ПреобразоватьПравоВБулево(Право)
	
	Если Право = 2 Тогда
		Возврат Ложь;
	КонецЕсли;	
		
	Если Право = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура Записать(ЗакрытьПослеЗаписи, ПроверятьПраваРодителей = Истина)
	
	Если Не ПроверитьТаблицуПрав() Тогда
		Возврат;
	КонецЕсли;
	
	// Для папок писем не нужно проверять права родителей
	Если ПроверятьПраваРодителей И ИмяТаблицы = "ПапкиПисем" Тогда
		ПроверятьПраваРодителей = Ложь;
	КонецЕсли;
	
	ПараметрыПроцедурыПродолжения = Новый Структура(
		"ЗакрытьПослеЗаписи, ПроверятьПраваРодителей", ЗакрытьПослеЗаписи, ПроверятьПраваРодителей);
	
	НуженВопрос = Ложь;
	Если ПредупредитьПриИзмененииНастроек Тогда
		ИндивидуальныеСтроки = ТаблицаПрав.НайтиСтроки(Новый Структура("Унаследовано", Ложь));
		НуженВопрос = ИндивидуальныеСтроки.Количество() > 0;
	КонецЕсли;
		
	Если НуженВопрос Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗаписатьПродолжение", ЭтотОбъект, ПараметрыПроцедурыПродолжения);
		ТекстВопроса = НСтр("ru = 'В результате записи папка приобретет индивидуальные настройки прав.
			|Пересчет прав содержимого папки может занять длительное время.
			|Продолжить?';
			|en = 'After recording folder acquire individual permissions settings.
			|Recalculation of folder content permissions can take a long time.
			|Do you want to continue?'");
			
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		ЗаписатьПродолжение(КодВозвратаДиалога.Да, ПараметрыПроцедурыПродолжения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = ЗаписатьСервер(ДополнительныеПараметры.ПроверятьПраваРодителей);
	Если СтрокаОшибки = "ЕстьПользователиБезПравНаРодительскиеПапки" Тогда
		
		// Открытие формы с предупреждением о недостающих правах на родительские папки
		ПараметрыОповещения = Новый Структура("ЗакрытьПослеЗаписи", ДополнительныеПараметры.ЗакрытьПослеЗаписи);
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеПредупрежденияОПравахРодителей", ЭтотОбъект, ПараметрыОповещения);
		
		ПараметрыФормы = Новый Структура("АдресТаблицыБесправныхПользователей", АдресТаблицыБесправныхПользователей);
		ОткрытьФорму("ОбщаяФорма.НастройкиПравПапокПредупреждение", ПараметрыФормы,
			ЭтаФорма, СсылкаНаОбъект,,, Оповещение);
		
	ИначеЕсли Не ПустаяСтрока(СтрокаОшибки) Тогда
		ПоказатьПредупреждение(, СтрокаОшибки);
	ИначеЕсли ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеПредупрежденияОПравахРодителей(Результат, ПараметрыПовторения) Экспорт
	
	Если Результат = "Повторить" Тогда
		Записать(ПараметрыПовторения.ЗакрытьПослеЗаписи, Истина);
	ИначеЕсли Результат = "ЗаписатьБезПроверки" Тогда
		Записать(ПараметрыПовторения.ЗакрытьПослеЗаписи, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьТаблицуПрав()
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ТаблицаПрав, "Пользователь");
	
	ЕстьОшибки = Ложь;
	ИндексСтроки = -1;
	
	Для Каждого Эл Из ТаблицаПрав Цикл
		
		ИндексСтроки = ИндексСтроки + 1;
		
		Если Эл.Унаследовано Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Эл2 Из ТаблицаПрав Цикл
			
			Если Эл2 = Эл Тогда
				Прервать;
			ИначеЕсли Эл2.Унаследовано Тогда
				Продолжить;
			КонецЕсли;
			
			Если Эл2.Пользователь = Эл.Пользователь Тогда
				
				ЕстьОшибки = Истина;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Права для ""%1"" уже указаны выше.'; en = 'Permissions for ""%1"" were already specified above.'"), 
					Эл.Пользователь);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"ТаблицаПрав[" + Формат(ИндексСтроки, "ЧГ=0") + "].Пользователь");
					
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ЗаписатьСервер(ПроверятьПраваРодителей)
	
	ПроверитьРазрешениеНаУправлениеПравами();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверятьПраваРодителей И ЕстьОшибкиВПравахРодителей() Тогда
		Возврат "ЕстьПользователиБезПравНаРодительскиеПапки";
	КонецЕсли;
	
	// Запись прав
	Попытка
		
		// Запись новых прав исключая права, наследуемые от родителей по иерархии.
		ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаОбъект).Настройки;
		ОписаниеПрав.Очистить();
		
		Для Каждого Эл Из ТаблицаПрав Цикл
			
			Если Эл.Унаследовано Или Не ЗначениеЗаполнено(Эл.Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = ОписаниеПрав.Добавить();
			Строка.ВладелецНастройки = СсылкаНаОбъект;
			
			Для Каждого ИмяНастройки Из ИменаНастроек Цикл
				Строка[ИмяНастройки.Значение] = ПреобразоватьПравоВБулево(Эл[ИмяНастройки.Ключ]);
			КонецЦикла;
			
			Строка.НастройкаРодителя = Ложь;
			Строка.Пользователь = Эл.Пользователь;
				
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);	
		РегистрыСведений.НастройкиПравОбъектов.Записать(СсылкаНаОбъект, ОписаниеПрав, НаследоватьПраваРодителей);	
		УстановитьПривилегированныйРежим(Ложь);
		
		Модифицированность = Ложь;
		
		ПротоколированиеРаботыПользователей.ЗаписатьИзменениеПрав(СсылкаНаОбъект);
		
	Исключение
			
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат НСтр("ru = 'Ошибка при записи прав:'; en = 'Error occurred while writing permissions:'") + Символы.ПС + ПредставлениеОшибки;
		
	КонецПопытки;
	
	Если ПредупредитьПриИзмененииНастроек Тогда
		ИндивидуальныеСтроки = ТаблицаПрав.НайтиСтроки(Новый Структура("Унаследовано", Ложь));
		ПредупредитьПриИзмененииНастроек = ИндивидуальныеСтроки.Количество() = 0;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиВПравахРодителей()
	
	Результат = Ложь;
	
	ПапкиДляПроверки = Новый Массив;
	ЗапросПоПапкам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Наследование_ОтборПоПапке.Родитель КАК ПапкаРодитель
		|ИЗ
		|	РегистрСведений.НаследованиеНастроекПравОбъектов КАК Наследование_ОтборПоПапке
		|ГДЕ
		|	Наследование_ОтборПоПапке.Объект = &Папка
		|	И Наследование_ОтборПоПапке.Родитель <> &Папка");
	
	ЗапросПоПапкам.УстановитьПараметр("Папка", СсылкаНаОбъект);
	ПапкиДляПроверки = ЗапросПоПапкам.Выполнить().Выгрузить().ВыгрузитьКолонку("ПапкаРодитель");
	ПользователиДляПроверки = ПользователиСПравомЧтенияПапки(РеквизитФормыВЗначение("ТаблицаПрав"));
	
	ПользователиБезПрав = Новый ТаблицаЗначений;
	ПользователиБезПрав.Колонки.Добавить("Пользователь");
	ПользователиБезПрав.Колонки.Добавить("ПользовательПредставление");
	ПользователиБезПрав.Колонки.Добавить("Контейнер");
	ПользователиБезПрав.Колонки.Добавить("ПапкаРодитель");
	ПользователиБезПрав.Колонки.Добавить("Уровень");
	
	СвернутаяТаблицаПравПапки = Новый ТаблицаЗначений;
	СвернутаяТаблицаПравПапки.Колонки.Добавить("Пользователь", Метаданные.ОпределяемыеТипы.КонтейнерПользователей.Тип);
	СвернутаяТаблицаПравПапки.Колонки.Добавить("ПравоЧтения", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ПапкаРодитель Из ПапкиДляПроверки Цикл
		
		// Подготовка таблицы прав родительской папки, разворачивание до пользователя
		СвернутаяТаблицаПравПапкиИзРегистра = РегистрыСведений.НастройкиПравОбъектов.Прочитать(ПапкаРодитель).Настройки;
		СвернутаяТаблицаПравПапкиИзРегистра.Колонки[ИменаНастроек.ПравоЧтения].Имя = "ПравоЧтения";
		
		КолСтрок = СвернутаяТаблицаПравПапкиИзРегистра.Количество();
		СвернутаяТаблицаПравПапки.Очистить();
		Для Сч = 1 По КолСтрок Цикл
			СвернутаяТаблицаПравПапки.Добавить();
		КонецЦикла;
		
		СвернутаяТаблицаПравПапки.ЗагрузитьКолонку(
			СвернутаяТаблицаПравПапкиИзРегистра.ВыгрузитьКолонку("Пользователь"), "Пользователь");
		СвернутаяТаблицаПравПапки.ЗагрузитьКолонку(
			СвернутаяТаблицаПравПапкиИзРегистра.ВыгрузитьКолонку("ПравоЧтения"), "ПравоЧтения");
		
		ПраваПапки = ПользователиСПравомЧтенияПапки(СвернутаяТаблицаПравПапки);
		
		// Проверка прав родительской папки
		Для Каждого СтрПользователя Из ПользователиДляПроверки Цикл
			Если ПраваПапки.Найти(СтрПользователя.Пользователь, "Пользователь") = Неопределено Тогда
				
				Стр = ПользователиБезПрав.Добавить();
				Стр.ПапкаРодитель = ПапкаРодитель; 
				Стр.Пользователь = СтрПользователя.Пользователь;
				Стр.Контейнер = СтрПользователя.Контейнер;
				Стр.Уровень = ПапкаРодитель.Уровень();
				
				Если ЗначениеЗаполнено(Стр.Контейнер) Тогда
					Стр.ПользовательПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (через «%2»)'; en = '%1 (via «%2»)'"),
						СтрПользователя.НаименованиеПользователя,
						СтрПользователя.Контейнер);
				Иначе		
					Стр.ПользовательПредставление = СтрПользователя.НаименованиеПользователя;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПользователиБезПрав.Количество() > 0 Тогда
		ПользователиБезПрав.Сортировать("Уровень, ПользовательПредставление");
		АдресТаблицыБесправныхПользователей = ПоместитьВоВременноеХранилище(ПользователиБезПрав);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПользователиСПравомЧтенияПапки(СвернутаяТаблицаПравПапки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПрав.Пользователь,
		|	ТаблицаПрав.ПравоЧтения
		|ПОМЕСТИТЬ НастройкиПрав
		|ИЗ
		|	&ТаблицаПрав КАК ТаблицаПрав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Пользователь,
		|	ВЫБОР
		|		КОГДА НастройкиПрав.ПравоЧтения = 2 ИЛИ НастройкиПрав.ПравоЧтения = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЧтениеЗапрещено,
		|	НЕОПРЕДЕЛЕНО КАК Контейнер
		|ПОМЕСТИТЬ НастройкиПравРазвернутые
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиПрав КАК НастройкиПрав
		|		ПО Пользователи.Ссылка = НастройкиПрав.Пользователь
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиВКонтейнерах.Пользователь,
		|	ВЫБОР
		|		КОГДА НастройкиПрав.ПравоЧтения = 2 ИЛИ НастройкиПрав.ПравоЧтения = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ПользователиВКонтейнерах.Контейнер КАК Контейнер
		|ИЗ
		|	РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиПрав КАК НастройкиПрав
		|		ПО ПользователиВКонтейнерах.Контейнер = НастройкиПрав.Пользователь
		|ГДЕ
		|	НЕ ПользователиВКонтейнерах.Пользователь.ПометкаУдаления
		|	И ПользователиВКонтейнерах.Пользователь <> ПользователиВКонтейнерах.Контейнер
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиПравРазвернутыеРазрешенные.Пользователь,
		|	НастройкиПравРазвернутыеРазрешенные.Контейнер,
		|	Пользователи.Наименование КАК НаименованиеПользователя
		|ИЗ
		|	НастройкиПравРазвернутые КАК НастройкиПравРазвернутыеРазрешенные
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПравРазвернутые КАК НастройкиПравРазвернутыеЗапрещенные
		|		ПО НастройкиПравРазвернутыеРазрешенные.Пользователь = НастройкиПравРазвернутыеЗапрещенные.Пользователь
		|			И (НастройкиПравРазвернутыеЗапрещенные.ЧтениеЗапрещено)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО НастройкиПравРазвернутыеРазрешенные.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	НастройкиПравРазвернутыеРазрешенные.ЧтениеЗапрещено = ЛОЖЬ
		|	И НастройкиПравРазвернутыеЗапрещенные.Пользователь ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ТаблицаПрав", СвернутаяТаблицаПравПапки);
	ПользователиСПравамиНаПапку = Запрос.Выполнить().Выгрузить();
	
	Возврат ПользователиСПравамиНаПапку;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПравПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьНовуюСтрокуВТаблицуПрав(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСтрокуВТаблицуПрав(Копирование, Пользователь = Неопределено)
	
	Модифицированность = Истина;
	ЭлементТаблицаПрав = Элементы.ТаблицаПрав;
	
	НоваяСтрокаПрав = ТаблицаПрав.Добавить();
	
	Если Копирование Тогда
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПрав, ЭлементТаблицаПрав.ТекущиеДанные,, "Унаследовано");
		
	Иначе
		
		УстановитьПраво(НоваяСтрокаПрав, "ПравоЧтения", 1);
		УстановитьПраво(НоваяСтрокаПрав, "ПравоДобавленияДанных", 0);
		УстановитьПраво(НоваяСтрокаПрав, "ПравоИзмененияДанных", 0);
		УстановитьПраво(НоваяСтрокаПрав, "ПравоУдаленияДанных", 0);
		УстановитьПраво(НоваяСтрокаПрав, "ПравоИзмененияПапок", 0);
		УстановитьПраво(НоваяСтрокаПрав, "ПравоУправленияПравами", 0);
		УстановитьПраво(НоваяСтрокаПрав, "ПередаватьДочерним", 1);
		
		Если Пользователь = Неопределено Тогда
			НоваяСтрокаПрав.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			ЭлементТаблицаПрав.ТекущаяСтрока = НоваяСтрокаПрав.ПолучитьИдентификатор();
			ЭлементТаблицаПрав.ТекущийЭлемент = Элементы.ТаблицаПравПользователь;
			ЭлементТаблицаПрав.ИзменитьСтроку();
		Иначе
			НоваяСтрокаПрав.Пользователь = Пользователь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	
	Если Элементы.ТаблицаПрав.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", 
			Элементы.ТаблицаПрав.ТекущиеДанные.Пользователь);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор пользователя'; en = 'Select user'"));
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.ТаблицаПравПользователь, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.СтруктураПредприятия,
			|СправочникСсылка.РабочиеГруппы,
			|СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Унаследовано Тогда
		ТекстПредупреждения = НСтр("ru = 'Эти права нельзя изменить, т.к. они унаследованы от вышестоящей папки.'; en = 'These permissions cannot be changed because they are inherited from the parent folder.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Унаследовано Тогда
		ТекстПредупреждения = НСтр("ru = 'Эти права нельзя удалить, т.к. они унаследованы от вышестоящей папки.'; en = 'These permissions cannot be removed because they are inherited from the parent folder.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаследоватьПраваРодителейПриИзменении(Элемент)
	
	Если НаследоватьПраваРодителей Тогда
		// Добавление унаследованных строк
		ПрочитатьПрава(НаследоватьПраваРодителей, Истина);
	Иначе
		// Удаление унаследованных строк
		КолСтрок = ТаблицаПрав.Количество();
		Для Сч = 1 По КолСтрок Цикл
			Индекс = КолСтрок - Сч;
			Если ТаблицаПрав[Индекс].Унаследовано Тогда
				ТаблицаПрав.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Права были изменены. Сохранить изменения?'; en = 'Permissions has been changed. Save changes?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Неопределено);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Выбор в таблице прав
&НаКлиенте
Процедура ТаблицаПравВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаНастройки = Элемент.ТекущиеДанные;
	КлючНастройки = СтрЗаменить(СтрЗаменить(Поле.Имя, "Строкой", ""), "ТаблицаПрав", "");
	
	Если ТолькоПросмотр Или КлючНастройки = "Пользователь" Тогда
		Если (ТолькоПросмотр Или СтрокаНастройки.Унаследовано) И КлючНастройки = "Пользователь" Тогда
			ПоказатьЗначение(, СтрокаНастройки[КлючНастройки]);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если СтрокаНастройки.Унаследовано Тогда
		ТекстПредупреждения = НСтр("ru = 'Эти права нельзя изменить, т.к. они унаследованы от вышестоящей папки.'; en = 'These permissions cannot be changed because they are inherited from the parent folder.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ИмяНастройки = ИменаНастроек[КлючНастройки];
	
	Модифицированность = Истина;
	
	Если КлючНастройки = "ПередаватьДочерним" Тогда
		УстановитьПраво(СтрокаНастройки, КлючНастройки, ?(СтрокаНастройки[КлючНастройки] = 1, 2, 1));
	Иначе
		УстановитьПраво(СтрокаНастройки, КлючНастройки, (СтрокаНастройки[КлючНастройки]+1)%3);
	КонецЕсли;
	
	// Нельзя давать права без права на чтение
	Если КлючНастройки = "ПравоЧтения" И СтрокаНастройки[КлючНастройки] <> 1 Тогда
		
		СброситьПраво(СтрокаНастройки, "ПравоИзмененияПапок");
		СброситьПраво(СтрокаНастройки, "ПравоИзмененияДанных");
		СброситьПраво(СтрокаНастройки, "ПравоДобавленияДанных");
		СброситьПраво(СтрокаНастройки, "ПравоУдаленияДанных");
		
	ИначеЕсли КлючНастройки <> "ПравоЧтения" И СтрокаНастройки[КлючНастройки] = 1 Тогда
		
		УстановитьПраво(СтрокаНастройки, "ПравоЧтения", 1);
		
	КонецЕсли;
	
	// Нельзя давать права на добавление и удаление без права на изменение
	Если КлючНастройки = "ПравоИзмененияДанных" И СтрокаНастройки.ПравоИзмененияДанных <> 1 Тогда
		
		// Для тем форума можно дать право добавления без права изменения
		Если ИмяТаблицы <> "ПапкиФорума" Тогда
			СброситьПраво(СтрокаНастройки, "ПравоДобавленияДанных");
		КонецЕсли;
		
		СброситьПраво(СтрокаНастройки, "ПравоУдаленияДанных");
		
	ИначеЕсли (КлючНастройки = "ПравоДобавленияДанных" Или КлючНастройки = "ПравоУдаленияДанных")
		И СтрокаНастройки[КлючНастройки] = 1 Тогда
		
		// Для тем форума можно дать право добавления без права изменения
		Если КлючНастройки = "ПравоУдаленияДанных" Или ИмяТаблицы <> "ПапкиФорума" Тогда
			УстановитьПраво(СтрокаНастройки, "ПравоИзмененияДанных", 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПраво(Строка, ИмяПрава, Значение)
	
	Строка[ИмяПрава] = Значение;
	Строка[ИмяПрава + "Строкой"] = СтрокаПрава(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПраво(Строка, ИмяПрава)
	
	Если Строка[ИмяПрава] = 1 Тогда
		УстановитьПраво(Строка, ИмяПрава, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПравоВТаблицуПрав(ОписаниеПрава, КолонкиНастройки)
	
	НоваяСтрокаПрав = Неопределено;
	
	Если ОписаниеПрава.НастройкаРодителя Тогда
		// Добавляем в начало
		НоваяСтрокаПрав = ТаблицаПрав.Вставить(0);
	Иначе	
		// Добавляем в конец	
		НоваяСтрокаПрав = ТаблицаПрав.Добавить();
	КонецЕсли;
		
	Если ОписаниеПрава.НастройкаРодителя Тогда
		НоваяСтрокаПрав.Унаследовано = Истина;
	Иначе	
		НоваяСтрокаПрав.Унаследовано = Ложь;
	КонецЕсли;	
		
	НоваяСтрокаПрав.Пользователь = ОписаниеПрава.Пользователь;
	
	Если ТипЗнч(ОписаниеПрава.Пользователь) = Тип("СправочникСсылка.Пользователи")
		 И (ОписаниеПрава.Пользователь.Недействителен или ОписаниеПрава.Пользователь.ПометкаУдаления) Тогда
		НоваяСтрокаПрав.ПользовательНедействителен = Истина;
	КонецЕсли;
	
	Для Каждого Колонка Из КолонкиНастройки Цикл
		
		ИмяПраваВТаблице = Неопределено;
		ИмяПраваВРегистре = Колонка.Имя;
		ЗначениеПрава = ОписаниеПрава[ИмяПраваВРегистре];
		
		Для Каждого Эл Из ИменаНастроек Цикл
			Если Эл.Значение = ИмяПраваВРегистре Тогда
				ИмяПраваВТаблице = Эл.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИмяПраваВТаблице = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяПраваВТаблице = "ПередаватьДочерним" Тогда
			Если ЗначениеПрава = Истина Тогда
				УстановитьПраво(НоваяСтрокаПрав, ИмяПраваВТаблице, 1);
			Иначе
				УстановитьПраво(НоваяСтрокаПрав, ИмяПраваВТаблице, 2);
			КонецЕсли;
		Иначе
			Если ЗначениеПрава = Истина Тогда
				УстановитьПраво(НоваяСтрокаПрав, ИмяПраваВТаблице, 1);
			ИначеЕсли ЗначениеПрава = Ложь Тогда
				УстановитьПраво(НоваяСтрокаПрав, ИмяПраваВТаблице, 2);
			Иначе
				УстановитьПраво(НоваяСтрокаПрав, ИмяПраваВТаблице, 0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПрава(Право)
	
	Если Право = 0 Тогда    
		Возврат НСтр("ru = '●'; en = '●'");
	ИначеЕсли Право = 1 Тогда
		Возврат НСтр("ru = '✔'; en = '✔'");
	ИначеЕсли Право = 2 Тогда
		Возврат НСтр("ru = '✘'; en = '✘'");
	КонецЕсли;	
		
КонецФункции

&НаКлиенте
Процедура ПодборПользователей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	
	ВыбранныеАдресаты = Новый Массив;
	Для Каждого Строка Из ТаблицаПрав Цикл
		ВыбранныеАдресаты.Добавить(Строка.Пользователь);
	КонецЦикла;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор пользователей, подразделений, групп'; en = 'Selection of users, departments, groups'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все пользователи'; en = 'All users'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи'; en = 'Selected users'"));
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, Неопределено);
	
КонецПроцедуры


