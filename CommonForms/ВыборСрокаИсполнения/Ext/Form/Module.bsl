
#Область ПеременныеМодуля

&НаКлиенте
Перем ОтключитьОбновлениеВремениПриИзмененииВарианта;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Настройка отображения времени в форме
	Если Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Элементы.ГруппаВремя.Видимость = Ложь;
		Ширина = 46;
	КонецЕсли;
	
	// Заполенние даты отсчета
	ДатаОтсчета = Параметры.ДатаОтсчета;
	Если ДатаОтсчета = Дата(1,1,1) Тогда
		ДатаОтсчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Настройка начала отображаемых дат в поле календаря
	Элементы.СрокДата.НачалоПериодаОтображения = НачалоДня(ДатаОтсчета);
	
	// Получение графика работ исполнителя
	ГрафикРаботыИсполнителя = 
		СрокиИсполненияПроцессовКОРП.ГрафикРаботыУчастникаПроцесса(Параметры.Исполнитель);
		
	Элементы.ГрафикРаботыИсполнителя.Видимость = ЗначениеЗаполнено(ГрафикРаботыИсполнителя);
	
	// Определение быстрых сроков
	Если ЗначениеЗаполнено(ГрафикРаботыИсполнителя)
		И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		
		НачалоИОкончаниеРабочегоДня = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(
			ДатаОтсчета, ГрафикРаботыИсполнителя);
			
		СрокИсполнения_Сегодня = НачалоДня(ДатаОтсчета)
			+ Час(НачалоИОкончаниеРабочегоДня.ОкончаниеДня) * 3600
			+ Минута(НачалоИОкончаниеРабочегоДня.ОкончаниеДня) * 60;
		
	Иначе
		СрокИсполнения_Сегодня = КонецДня(ДатаОтсчета);
	КонецЕсли;
	
	ПараметрыДлительности = СрокиИсполненияПроцессов.
		ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
	ПараметрыДлительности.ДатаОтсчета = ДатаОтсчета;
	ПараметрыДлительности.ГрафикРаботы = ГрафикРаботыИсполнителя;
	
	ПараметрыДлительности.Дни = 1;
	СрокИсполнения_1День = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
	
	ПараметрыДлительности.Дни = 2;
	СрокИсполнения_2Дня = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
	
	ПараметрыДлительности.Дни = 3;
	СрокИсполнения_3Дня = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
	
	Если ЗначениеЗаполнено(ГрафикРаботыИсполнителя) Тогда
		
		РеквизитыГарафикаРабот = 
			ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				ГрафикРаботыИсполнителя,
				"КоличествоРабочихЧасовВДне,
				|КоличествоРабочихЧасовВНеделе,
				|КоличествоРабочихДнейВМесяце");
		
		Если РеквизитыГарафикаРабот.КоличествоРабочихЧасовВНеделе <> 0
			И РеквизитыГарафикаРабот.КоличествоРабочихЧасовВДне <> 0 Тогда
			
			КоличествоРабочихЧасовВНеделе = РеквизитыГарафикаРабот.КоличествоРабочихЧасовВНеделе;
			КоличествоРабочихЧасовВДне = РеквизитыГарафикаРабот.КоличествоРабочихЧасовВДне;
			
			ПараметрыДлительности.Дни = Цел(КоличествоРабочихЧасовВНеделе/КоличествоРабочихЧасовВДне);
			СрокИсполнения_Неделя = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
			
			ПредметИсчисленияПрописью = ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				ПараметрыДлительности.Дни, НСтр("ru = 'день, дня, дней'; en = 'day, days, days'"));
			
			Команды.БыстрыйСрокНеделя.Подсказка = 
				СтрШаблон("%1 %2", ПараметрыДлительности.Дни, ПредметИсчисленияПрописью);
			
		КонецЕсли;
		
		Если РеквизитыГарафикаРабот.КоличествоРабочихДнейВМесяце <> 0 Тогда
			ПараметрыДлительности.Дни = РеквизитыГарафикаРабот.КоличествоРабочихДнейВМесяце;
			СрокИсполнения_Месяц = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
			
			ПредметИсчисленияПрописью = ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				ПараметрыДлительности.Дни, НСтр("ru = 'день, дня, дней'; en = 'day, days, days'"));
			
			Команды.БыстрыйСрокМесяц.Подсказка = 
				СтрШаблон("%1 %2", ПараметрыДлительности.Дни, ПредметИсчисленияПрописью);
			
		КонецЕсли;
		
	Иначе
		ПараметрыДлительности.Дни = 7;
		СрокИсполнения_Неделя = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
		
		ПараметрыДлительности.Дни = 30;
		СрокИсполнения_Месяц = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
	КонецЕсли;
	
	// Настройка отображения команд быстрых сроков
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТекущаяДатаСеанса = ТекущаяДатаСеанса - Секунда(ТекущаяДатаСеанса);
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса);
	
	Если НачалоДня(СрокИсполнения_Сегодня) <> НачалоТекущегоДня
		Или СрокИсполнения_Сегодня = СрокИсполнения_1День Тогда
		
		Элементы.БыстрыйСрокСегодня.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.БыстрыйСрокСегодня.Видимость Тогда
		Элементы.БыстрыйСрок1День.Заголовок = НСтр("ru = 'Завтра'; en = 'Tomorrow'");
		
	ИначеЕсли НачалоДня(СрокИсполнения_1День) = НачалоТекущегоДня Тогда
		
		Элементы.БыстрыйСрок1День.Заголовок = НСтр("ru = 'Сегодня'; en = 'Today'");
		Элементы.БыстрыйСрок2Дня.Заголовок = НСтр("ru = 'Завтра'; en = 'Tomorrow'");
	КонецЕсли;
	
	// Заполнение срок исполнения в форме
	Если ЗначениеЗаполнено(Параметры.СрокИсполнения) Тогда
		СрокИсполнения = Параметры.СрокИсполнения;
	Иначе // если срок исполнение не передан в форму, то по умолчанию подставляем дату отсчета.
		СрокИсполнения = ДатаОтсчета;
	КонецЕсли;
	
	ЭтоРабочаяДатаВремя = ЭтоРабочаяДатаВремя(ГрафикРаботыИсполнителя, СрокИсполнения);
	
	СрокДата = СрокИсполнения;
	
	ПоследняяВыбраннаяДатаКалендаря = СрокИсполнения;
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		СрокВремя_Часы = Час(СрокИсполнения);
		СрокВремя_Минуты = Минута(СрокИсполнения);
	КонецЕсли;
	
	// Заполнение и выделение вариантов времени в соответствии
	// с текущим сроком.
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		РабочееВремя = РабочееВремя(
			СрокИсполнения,
			ДатаОтсчета,
			ГрафикРаботыИсполнителя);
		ЗаполнитьВаринатыРабочегоВремени(ЭтаФорма);
		ВыделитьВариантВремени(ЭтаФорма);
	КонецЕсли;
	
	// Заполнение рабочих дата.
	РабочиеДаты = РабочиеДаты(ГрафикРаботыИсполнителя, Год(СрокДата));
	
	// Заполнение ключа сохранения положения окна
	СтрокаКлючСохраненияПоложенияОкна = "";
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		СтрокаКлючСохраненияПоложенияОкна = "ПоказыватьВремя";
	Иначе
		СтрокаКлючСохраненияПоложенияОкна = "НеПоказыватьВремя";
	КонецЕсли;
	КлючСохраненияПоложенияОкна = СтрокаКлючСохраненияПоложенияОкна;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыделитьДатуИсполненияВПолеКалендаря();
	
	// Обновляем заголовок отложено, чтобы нормально отобразился заголовок окна.
	ПодключитьОбработчикОжидания("ОбновитьЗаголовок", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СрокВремя_ЧасыПриИзменении(Элемент)
	
	ОтключитьОбновлениеВремениПриИзмененииВарианта = Истина;
	
	ВыделитьВариантВремени(ЭтаФорма);
	ОбновитьЗаголовок();
	
	ЭтоРабочееВремя = ЭтоРабочееВремя();
	УстановитьПризнакЭтоРабочаяДатаВремя(ЭтоРабочееВремя);
	
	ОтключитьОбновлениеВремениПриИзмененииВарианта = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокВремя_МинутыПриИзменении(Элемент)
	
	ОтключитьОбновлениеВремениПриИзмененииВарианта = Истина;
	
	Если СрокВремя_Минуты = 60 Тогда
		Если СрокВремя_Часы < 23 Тогда
			СрокВремя_Часы = СрокВремя_Часы + 1;
			СрокВремя_Минуты = 0;
		Иначе
			СрокВремя_Минуты = 59;
		КонецЕсли;
	ИначеЕсли СрокВремя_Минуты = -1 Тогда
		Если СрокВремя_Часы > 0 Тогда
			СрокВремя_Часы = СрокВремя_Часы - 1;
			СрокВремя_Минуты = 59;
		Иначе
			СрокВремя_Минуты = 0;
		КонецЕсли;
	КонецЕсли;
	
	ВыделитьВариантВремени(ЭтаФорма);
	ОбновитьЗаголовок();
	
	ЭтоРабочееВремя = ЭтоРабочееВремя();
	УстановитьПризнакЭтоРабочаяДатаВремя(ЭтоРабочееВремя);
	
	ОтключитьОбновлениеВремениПриИзмененииВарианта = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СрокДата

&НаКлиенте
Процедура СрокДатаПриИзменении(Элемент)
	
	Если СрокДата = ПоследняяВыбраннаяДатаКалендаря Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СрокИсполнения = СрокДата;
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			СрокИсполнения = СрокИсполнения + СрокВремя_Часы * 3600 + СрокВремя_Минуты * 60;
		КонецЕсли;
			
		ПараметрыСрокаИсполнения = ПараметрыСрокаИсполнения(
			СрокИсполнения,
			ДатаОтсчета,
			ГрафикРаботыИсполнителя);
			
	Исключение
		
		СрокДата = ПоследняяВыбраннаяДатаКалендаря;
	
		ВыделитьДатуИсполненияВПолеКалендаря();
		ОбновитьЗаголовок();
		
		ТекстСообщения = НСтр("ru = 'Невозможно установить срок исполнения по следующей причине:
			|%1';
			|en = 'You can not set the due date for the following reason: 
			|%1'");
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		СообщениеОбОшибке = СтрШаблон(
			ТекстСообщения,
			ИнформацияОбОшибке.Описание);
		
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;
	
	ОтключитьОбновлениеВремениПриИзмененииВарианта = Истина;
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		РабочееВремя = ПараметрыСрокаИсполнения.РабочееВремя;
		ЗаполнитьВаринатыРабочегоВремени(ЭтаФорма);
		ВыделитьВариантВремени(ЭтаФорма);
	КонецЕсли;
	
	// Заполнение рабочих дата.
	РабочиеДаты = ПараметрыСрокаИсполнения.РабочиеДаты;
	
	ПоследняяВыбраннаяДатаКалендаря = СрокДата;
	
	УстановитьПризнакЭтоРабочаяДатаВремя(ПараметрыСрокаИсполнения.ЭтоРабочийДень);
	
	ОбновитьЗаголовок();
	
	Элементы.СрокДата.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДатаВыбор(Элемент, ВыбраннаяДата)
	
	ВыбратьСрокИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДатаПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		
		СтрокаОформленияПериода.ЦветТекста = WebЦвета.Черный;
		
		Если ЗначениеЗаполнено(ГрафикРаботыИсполнителя) Тогда
			Если РабочиеДаты.НайтиПоЗначению(СтрокаОформленияПериода.Дата) = Неопределено Тогда
				СтрокаОформленияПериода.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ВариантыВремени

&НаКлиенте
Процедура ВариантыВремениПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВариантыВремени.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьОбновлениеВремениПриИзмененииВарианта = Истина
		Или ОтключитьОбновлениеВремениПриИзмененииВарианта = Неопределено Тогда
		
		ОтключитьОбновлениеВремениПриИзмененииВарианта = Ложь;
		Возврат;
	КонецЕсли;
	
	СрокВремя_Часы = Час(ТекущиеДанные.Значение);
	СрокВремя_Минуты = Минута(ТекущиеДанные.Значение);
	УстановитьПризнакЭтоРабочаяДатаВремя(ТекущиеДанные.ЭтоРабочееВремя);
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыВремениВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьСрокИсполнения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура БыстрыйСрокСегодня(Команда)
	
	УстановитьСрокИсполненияВКалендаре(СрокИсполнения_Сегодня);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйСрок1День(Команда)
	
	УстановитьСрокИсполненияВКалендаре(СрокИсполнения_1День);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйСрок2Дня(Команда)
	
	УстановитьСрокИсполненияВКалендаре(СрокИсполнения_2Дня);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйСрок3Дня(Команда)
	
	УстановитьСрокИсполненияВКалендаре(СрокИсполнения_3Дня);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйСрокНеделя(Команда)
	
	УстановитьСрокИсполненияВКалендаре(СрокИсполнения_Неделя);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйСрокМесяц(Команда)
	
	УстановитьСрокИсполненияВКалендаре(СрокИсполнения_Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ВыбратьСрокИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициирует выбор срока и закрытие формы.
//
&НаКлиенте
Процедура ВыбратьСрокИсполнения()
	
	СрокИсполнения = СрокДата;
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		СрокИсполнения = СрокИсполнения + СрокВремя_Часы * 3600 + СрокВремя_Минуты * 60;
		
		// Корректировка срока на последнюю секунду дня.
		// Если в форме выбрана последняя минута 23го часа, то 
		// предполагается, что был выбран весь день.
		Если (КонецДня(СрокИсполнения) - СрокИсполнения) = 60 Тогда
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
		
	Иначе
		СрокИсполнения = КонецДня(СрокИсполнения);
	КонецЕсли;
	
	Закрыть(СрокИсполнения);
	
КонецПроцедуры

// Обновляет заголовок формы
//
&НаКлиенте
Процедура ОбновитьЗаголовок()
	
	ТекстШаблон = НСтр("ru = 'Срок исполнения %1'; en = 'Due date %1'");
	
	Если ЗначениеЗаполнено(СрокДата)
		Или ЗначениеЗаполнено(СрокВремя_Часы)
		Или ЗначениеЗаполнено(СрокВремя_Минуты) Тогда
		
		Если Год(СрокДата) <> Год(ТекущаяДата()) Тогда
			ФорматДаты = "ДФ=dd.MM.yy%1";
		Иначе
			ФорматДаты = "ДФ=""d MMM%1""";
		КонецЕсли;
		
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			СрокИсполнения = СрокДата + СрокВремя_Часы * 3600 + СрокВремя_Минуты * 60;
			ФорматДаты = СтрШаблон(ФорматДаты, " HH:mm");
		Иначе
			СрокИсполнения = СрокДата;
			ФорматДаты = СтрШаблон(ФорматДаты, "");
		КонецЕсли;
		
		ТекстЗаголовка = СтрШаблон(ТекстШаблон, "(" + Формат(СрокИсполнения, ФорматДаты) + ")");
		
	Иначе
		ТекстЗаголовка = СтрШаблон(ТекстШаблон, "");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Выделяет дату исполнения (реквизит СрокДата) в календаре
//
&НаКлиенте
Процедура ВыделитьДатуИсполненияВПолеКалендаря()
	
	Элементы.СрокДата.ВыделенныеДаты.Очистить();
	Элементы.СрокДата.ВыделенныеДаты.Добавить(СрокДата);
	Элементы.СрокДата.Обновить();
	
КонецПроцедуры

// Возвращает рабочее время в указанной дате по графику работ.
//
// Параметры:
//   Дата - ДатаИВремя - рабочая дата.
//   ДатаОтсчета - ДатаИВремя - дата от которой отсчитывается срок исполнения.
//   ГрафикРаботы - СправочникСсылка.ГрафикиРаботы - график работы.
//
// Возвращаемое значение:
//  СписокЗначений
//   * Структра
//      ** ДатаНачала
//      ** ДатаОкончания
//
&НаСервереБезКонтекста
Функция РабочееВремя(Дата, ДатаОтсчета, ГрафикРаботы)
	
	НачалоПериода = НачалоДня(Дата);
	Если НачалоПериода <= ДатаОтсчета Тогда
		НачалоПериода = ДатаОтсчета;
	КонецЕсли;
	
	ОкончаниеПериода = КонецДня(Дата);
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		ТаблицаРабочегоВремени = ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(
			ГрафикРаботы, НачалоПериода, ОкончаниеПериода);
		
		РабочееВремя = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРабочегоВремени);
	Иначе
		СтрРабочегоВремени = Новый Структура;
		СтрРабочегоВремени.Вставить("ДатаНачала", НачалоПериода);
		СтрРабочегоВремени.Вставить("ДатаОкончания", ОкончаниеПериода);
		
		РабочееВремя = Новый Массив;
		РабочееВремя.Добавить(СтрРабочегоВремени);
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(РабочееВремя);
	
	Возврат Результат;
	
КонецФункции

// Заполняет варианты времени (реквизит ВариантыВремени)
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВаринатыРабочегоВремени(Форма)
	
	Форма.ВариантыВремени.Очистить();
	
	ТекущееВремя = НачалоДня(Форма.СрокДата);
	ОкончаниеПериода = КонецДня(Форма.СрокДата);
	
	Если ТекущееВремя < Форма.ТекущаяДатаСеанса Тогда
		ТекущееВремя = Форма.ТекущаяДатаСеанса;
	КонецЕсли;
	
	ДобавитьВариантВремени = Истина;
	Пока ДобавитьВариантВремени Цикл
		
		Если ТекущееВремя >= ОкончаниеПериода Тогда
			ТекущееВремя = ОкончаниеПериода;
			ДобавитьВариантВремени = Ложь;
		КонецЕсли;
		
		ПредставлениеВремени = СтрШаблон(
			НСтр("ru = '%1 ч. %2 мин.'; en = '%1 h. %2 min.'"),
			Формат(Час(ТекущееВремя), "ЧЦ=2; ЧН=00; ЧВН="),
			Формат(Минута(ТекущееВремя), "ЧЦ=2; ЧН=00; ЧВН="));
		
		СтрВариантВремени = Форма.ВариантыВремени.Добавить();
		СтрВариантВремени.Значение = ТекущееВремя;
		СтрВариантВремени.Представление = ПредставлениеВремени;
		
		Для Каждого СтрРабочегоВремени Из Форма.РабочееВремя Цикл
			Если ТекущееВремя >= СтрРабочегоВремени.Значение.ДатаНачала
				И ТекущееВремя <= СтрРабочегоВремени.Значение.ДатаОкончания Тогда
				
				СтрВариантВремени.ЭтоРабочееВремя = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОстатокДоПолных30Мин = Минута(ТекущееВремя)%30;
		Если ОстатокДоПолных30Мин > 0 Тогда
			ТекущееВремя = ТекущееВремя + (30 - ОстатокДоПолных30Мин) * 60;
		Иначе
			ТекущееВремя = ТекущееВремя + 30 * 60;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет вариант времени в таблице ВариантыВремени соответсвующий
// текущим значениям часов (СрокВремя_Часы) и минут (СрокВремя_Минуты)
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьВариантВремени(Форма)
	
	Время = Дата(1,1,1) + Форма.СрокВремя_Часы * 3600 + Форма.СрокВремя_Минуты * 60;
	
	ВариантВремени = Неопределено;
	
	МинимальнаяРазницаВСекундах = 86400;
	
	Для Каждого СтрВариант Из Форма.ВариантыВремени Цикл
		
		Если СтрВариант.Значение = Время Тогда
			ВариантВремени = СтрВариант;
			Прервать;
		КонецЕсли;
		
		Если Время > СтрВариант.Значение Тогда
			Разница = Время - СтрВариант.Значение;
		Иначе
			Разница = СтрВариант.Значение - Время;
		КонецЕсли;
		
		Если МинимальнаяРазницаВСекундах >= Разница Тогда
			МинимальнаяРазницаВСекундах = Разница;
		Иначе
			Прервать;
		КонецЕсли;
		
		ВариантВремени = СтрВариант;
		
	КонецЦикла;
	
	Если ВариантВремени <> Неопределено Тогда
		Форма.Элементы.ВариантыВремени.ТекущаяСтрока = ВариантВремени.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры выбранного срока исполнения
// в календаре.
//
// Параметры:
//  СрокИсполнения - ДатаИВремя - выбранный срок исполнения
//  ДатаОтсчета - ДатаИВремя - дата от которой отсчитывается срок исполнения.
//  ГрафикРаботы - СправочникСсылка.ГрафикиРаботы - график работы
//  ИспользоватьДатуИВремяВСрокахЗадач - Булево - признак использования времени в сроках.
//
// Возвращаемое значение:
//  Структура
//   * РабочееВремя - СписокЗначений - см. функцию РабочееВремя.
//   * ЭтоРабочийДень - Булево - признак того, что текущий день является рабочим.
//
&НаСервереБезКонтекста
Функция ПараметрыСрокаИсполнения(
	СрокИсполнения, ДатаОтсчета, ГрафикРаботы)
	
	Результат = Новый Структура;
	Результат.Вставить("РабочееВремя", Новый Массив);
	Результат.Вставить("ЭтоРабочийДень", Ложь);
	Результат.Вставить("РабочиеДаты", Новый Массив);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		Результат.РабочееВремя = РабочееВремя(
			СрокИсполнения,
			ДатаОтсчета,
			ГрафикРаботы);
	КонецЕсли;
	
	Результат.ЭтоРабочийДень = ЭтоРабочаяДатаВремя(ГрафикРаботы, СрокИсполнения);
	
	Результат.РабочиеДаты = РабочиеДаты(ГрафикРаботы, Год(СрокИсполнения));
	
	Возврат Результат;
	
КонецФункции

// Устанавливает указанный срок в календаре.
//
// Параметры:
//   СрокИсполнения - ДатаИВремя - указанный срок исполнения.
//
&НаКлиенте
Процедура УстановитьСрокИсполненияВКалендаре(СрокИсполнения)
	
	ОтключитьОбновлениеВремениПриИзмененииВарианта = Истина;
	
	Попытка
		РабочееВремя = РабочееВремя(
			СрокИсполнения,
			ДатаОтсчета,
			ГрафикРаботыИсполнителя);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Невозможно установить срок исполнения по следующей причине:
			|%1';
			|en = 'You can not set the due date for the following reason: 
			|%1'");
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		СообщениеОбОшибке = СтрШаблон(
			ТекстСообщения,
			ИнформацияОбОшибке.Описание);
			
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;
	
	СрокДата = СрокИсполнения;
	ПоследняяВыбраннаяДатаКалендаря = СрокДата;
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		СрокВремя_Часы = Час(СрокИсполнения);
		СрокВремя_Минуты = Минута(СрокИсполнения);
	КонецЕсли;
	
	ЗаполнитьВаринатыРабочегоВремени(ЭтаФорма);
	ВыделитьДатуИсполненияВПолеКалендаря();
	ВыделитьВариантВремени(ЭтаФорма);
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

// Заполняет реквизит формы ЭтоРабочаяДатаВремя переданным значением в качестве параметры.
// Если новое значение равно Ложь, а предыдущее Истина, то выводится предупреждение пользователю
// о несоответствии выбранного срока графику работ исполнителя.
//
&НаКлиенте
Процедура УстановитьПризнакЭтоРабочаяДатаВремя(НовоеЗначениеЭтоРабочаяДатаВремя)
	
	Если НовоеЗначениеЭтоРабочаяДатаВремя = Ложь
		И ЭтоРабочаяДатаВремя = Истина Тогда
	
		ТекстПредупреждения = НСтр("ru = 'Выбранный срок не соответствует графику работы исполнителя.
			|Задача может быть просрочена.';
			|en = 'Selected due date is not corresponds a schedule work for performer.
			|The task may be overdue.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
	ЭтоРабочаяДатаВремя = НовоеЗначениеЭтоРабочаяДатаВремя;
	
КонецПроцедуры

// Возвращает для текущего времени признак рабочего.
//
// Возвращаемое значение:
//  Булево - возвращает Истина, если текущее время является рабочим.
//
&НаКлиенте
Функция ЭтоРабочееВремя()
	
	СрокИсполнения = СрокДата + СрокВремя_Часы * 3600 + СрокВремя_Минуты * 60;
	
	Для Каждого СтрРабочееВремя Из РабочееВремя Цикл
		Если СрокИсполнения >= СтрРабочееВремя.Значение.ДатаНачала
			И СрокИсполнения <= СтрРабочееВремя.Значение.ДатаОкончания Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает список значений с рабочими датами по графику работ за указанный год.
//
// Параметры:
//  ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//  Год - Число
//
// Возвращаемое значение:
//  Список значений
//
&НаСервереБезКонтекста
Функция РабочиеДаты(ГрафикРаботы, Год)
	
	Результат = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика
		|ИЗ
		|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ПО ГрафикиРаботы.Календарь = КалендарныеГрафики.Календарь
		|ГДЕ
		|	КалендарныеГрафики.Год = &Год
		|	И КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА
		|	И ГрафикиРаботы.Ссылка = &ГрафикРаботы";
		
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	Результат.ЗагрузитьЗначения(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаГрафика"));
		
	Возврат Результат;
	
КонецФункции

// Возвращает для даты и времени признак рабочего времени по графику работ.
//
// Параметры:
//  ГрафикРаботы - СправочникСсылка.ГрафикиРаботы - сслыка на график работы.
//  Дата - ДатаИВремя - дата, для которой определяется признак рабочего времени.
//
// Возвращаемое значение:
//  Булево - возвращает Истина, если дата и время являются рабочими.
//
&НаСервереБезКонтекста
Функция ЭтоРабочаяДатаВремя(ГрафикРаботы, Дата)
	
	ЭтоРабочаяДатаВремя = Истина;
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			ЭтоРабочаяДатаВремя = ГрафикиРаботы.ЭтоРабочаяДатаВремя(ГрафикРаботы, Дата);
		Иначе
			ЭтоРабочаяДатаВремя = ГрафикиРаботы.ЭтоРабочийДень(Дата, ГрафикРаботы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоРабочаяДатаВремя;
	
КонецФункции

#КонецОбласти
