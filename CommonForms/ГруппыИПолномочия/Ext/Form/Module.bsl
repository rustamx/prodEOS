
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Пользователь = Параметры.Пользователь;
	
	УсловноеОформление.Элементы.Очистить();
	НастройкиДоступа.УстановитьУсловноеОформлениеПолномочий(УсловноеОформление);
	
	ЗаполнитьГруппы();
	ЗаполнитьПолномочия();
	ЗаполнитьВсеПолномочияГруппИПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РабочиеГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.РабочиеГруппы.ФормаВыбора",
		ПараметрыОткрытия, Элементы.РабочиеГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеГруппыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.РабочиеГруппы") Тогда
		Возврат
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Группа", ВыбранноеЗначение);
	НайденнаяСтрока = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
		РабочиеГруппы, СтруктураОтбора);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		//Строка уже есть в дереве.
		НайденнаяСтрока.ВходитНепосредственно = Истина;
		Элемент.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		
	Иначе
		
		Модифицированность = Истина;
		
		ГруппаСРодителями = ГруппаСРодителями(ВыбранноеЗначение);
		КолСтрок = ГруппаСРодителями.Количество();
		
		КоллекцияСтрокРодителя = РабочиеГруппы.ПолучитьЭлементы();
		
		Для Сч = 0 По КолСтрок - 1 Цикл
			
			// Добавление строки со всеми родителями в дерево.
			ТекущаяГруппа = ГруппаСРодителями[Сч];
			ТекущаяСтрокаГруппы = Неопределено;
			
			Для Каждого Стр Из КоллекцияСтрокРодителя Цикл
				Если Стр.Группа = ТекущаяГруппа Тогда
					ТекущаяСтрокаГруппы = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяСтрокаГруппы = Неопределено Тогда
				ТекущаяСтрокаГруппы = КоллекцияСтрокРодителя.Добавить();
				ТекущаяСтрокаГруппы.Группа = ТекущаяГруппа;
			КонецЕсли;
			
			Если ТекущаяГруппа = ВыбранноеЗначение Тогда
				ТекущаяСтрокаГруппы.ВходитНепосредственно = Истина;
				Элемент.ТекущаяСтрока = ТекущаяСтрокаГруппы.ПолучитьИдентификатор();
			КонецЕсли;
			
			КоллекцияСтрокРодителя = ТекущаяСтрокаГруппы.ПолучитьЭлементы();
			
			// Установка полномочий, унаследованных от добавленных групп.
			Для Каждого СтрокаПолномочий Из Полномочия Цикл
				
				Если СтрокаПолномочий.Пометка = 2 Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураОтбора = Новый Структура("Полномочия", СтрокаПолномочий.Ссылка);
				НайденныеСтроки = ВсеПолномочияГруппИПользователя.НайтиСтроки(СтруктураОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если ГруппаСРодителями.Найти(НайденнаяСтрока.Владелец) <> Неопределено Тогда
						СтрокаПолномочий.Пометка = 2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеГруппыПередУдалением(Элемент, Отказ)
	
	Группа = Элемент.ТекущиеДанные.Группа;
	
	Если Группа = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи") Тогда
		
		ТекстПредупреждения = 
			НСтр("ru = 'Удаление пользователя из предопределенной группы ""Все пользователи"" невозможно.'; en = 'Removing a user from predefined group ""All users"" impossible.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Отказ = Истина;
	
		Возврат;
		
	КонецЕсли;
	
	// Удаление неактуальных строк верхнего уровня.
	ТекущаяСтрока = РабочиеГруппы.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	СтрокаРодителя = ТекущаяСтрока.ПолучитьРодителя();
	
	Пока СтрокаРодителя <> Неопределено Цикл
		
		Если СтрокаРодителя.ВходитНепосредственно Тогда
			Прервать;
		КонецЕсли;
		
		Подстроки = СтрокаРодителя.ПолучитьЭлементы();
		КоличествоПодстрок = Подстроки.Количество();
		
		Если КоличествоПодстрок = 0
			Или КоличествоПодстрок = 1
				И Подстроки[0].ПолучитьИдентификатор() = ТекущаяСтрока.ПолучитьИдентификатор() Тогда
				
			СтрокаКУдалению = СтрокаРодителя;
			СтрокаРодителя = СтрокаРодителя.ПолучитьРодителя();
			Если СтрокаРодителя = Неопределено Тогда
				РабочиеГруппы.ПолучитьЭлементы().Удалить(СтрокаКУдалению);
			Иначе
				СтрокаРодителя.ПолучитьЭлементы().Удалить(СтрокаКУдалению);
			КонецЕсли;
			
		Иначе
			
			СтрокаРодителя = СтрокаРодителя.ПолучитьРодителя();	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеГруппыПослеУдаления(Элемент)
	
	// Снятие пометки с полномочий, унаследованных от удаляемых групп.
	ВсеСтрокиГрупп = ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(РабочиеГруппы);
	
	ВсеАктуальныеВладельцыПолномочий = Новый Соответствие;
	ВсеАктуальныеВладельцыПолномочий.Вставить(Пользователь, Истина);
	Для Каждого Стр Из ВсеСтрокиГрупп Цикл
		ВсеАктуальныеВладельцыПолномочий.Вставить(Стр.Группа, Истина);
	КонецЦикла;
	
	Для Каждого СтрокаПолномочий Из Полномочия Цикл
		
		Если СтрокаПолномочий.Пометка <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПометка = 0;
		
		СтруктураОтбора = Новый Структура("Полномочия", СтрокаПолномочий.Ссылка);
		НайденныеСтроки = ВсеПолномочияГруппИПользователя.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ВсеАктуальныеВладельцыПолномочий.Получить(НайденнаяСтрока.Владелец) <> Неопределено Тогда
				Если НайденнаяСтрока.Владелец = Пользователь Тогда
					НоваяПометка = 1;
				Иначе
					НоваяПометка = 2;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаПолномочий.Пометка = НоваяПометка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолномочия

&НаКлиенте
Процедура ПолномочияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПолномочияСсылка Тогда
		ПоказатьЗначение(, Элементы.Полномочия.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Полномочия.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка = 0 Тогда
		
		// Нельзя сбрасывать унаследованные.
		ТекущиеДанные.Пометка = 2;
		
	ИначеЕсли ТекущиеДанные.Пометка = 2 Тогда
		
		ТекущиеДанные.Пометка = 0;
		
		СтруктураОтбора = Новый Структура("Владелец, Полномочия", Пользователь, ТекущиеДанные.Ссылка);
		НайденныеСтроки = ВсеПолномочияГруппИПользователя.НайтиСтроки(СтруктураОтбора);
		Для Каждого Стр Из НайденныеСтроки Цикл
			ВсеПолномочияГруппИПользователя.Удалить(Стр);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеПолномочия(Команда)
	
	Для Каждого Стр Из Полномочия Цикл
		Если Стр.Пометка = 0 Тогда
			Стр.Пометка = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПолномочия(Команда)
	
	Для Каждого Стр Из Полномочия Цикл
		Если Стр.Пометка = 1 Тогда
			Стр.Пометка = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если Модифицированность Тогда
		СохранитьНастройкиНаСервере(Ложь);
		Модифицированность = Ложь;
		Оповестить("РазрешенияДоступаИзменены");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиИЗакрыть(Команда)
	
	СохранитьНастройки(Неопределено);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере(ПослеСохраненияФормаБудетЗакрыта)
	
	НачатьТранзакцию();
	
	Попытка
		
		// Группы.
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеГруппыСостав.Ссылка
			|ПОМЕСТИТЬ ЗаписанныеГруппы
			|ИЗ
			|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
			|ГДЕ
			|	РабочиеГруппыСостав.Пользователь = &Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаписанныеГруппы.Ссылка КАК Группа,
			|	ЛОЖЬ КАК Добавить
			|ИЗ
			|	ЗаписанныеГруппы КАК ЗаписанныеГруппы
			|ГДЕ
			|	НЕ ЗаписанныеГруппы.Ссылка В (&ВыбранныеГруппы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РабочиеГруппы.Ссылка,
			|	ИСТИНА
			|ИЗ
			|	Справочник.РабочиеГруппы КАК РабочиеГруппы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписанныеГруппы КАК ЗаписанныеГруппы
			|		ПО (ЗаписанныеГруппы.Ссылка = РабочиеГруппы.Ссылка)
			|ГДЕ
			|	ЗаписанныеГруппы.Ссылка ЕСТЬ NULL 
			|	И РабочиеГруппы.Ссылка В(&ВыбранныеГруппы)");
		
		ВыбранныеГруппы = Новый Массив;
		ВсеСтрокиГрупп = ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(РабочиеГруппы);
		Для Каждого Стр Из ВсеСтрокиГрупп Цикл
			Если Стр.ВходитНепосредственно Тогда
				ВыбранныеГруппы.Добавить(Стр.Группа);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("ВыбранныеГруппы", ВыбранныеГруппы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИзменитьСоставРабочейГруппы(Выборка.Группа, Выборка.Добавить);
		КонецЦикла;
			
		// Полномочия.
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПолномочияПользователей.Полномочия,
			|	ЛОЖЬ КАК Добавить
			|ИЗ
			|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
			|ГДЕ
			|	ПолномочияПользователей.Владелец = &Пользователь
			|	И НЕ ПолномочияПользователей.Полномочия В (&ВыбранныеПолномочия)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПрофилиГруппДоступа.Ссылка,
			|	ИСТИНА
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
			|		ПО (ПолномочияПользователей.Полномочия = ПрофилиГруппДоступа.Ссылка)
			|			И (ПолномочияПользователей.Владелец = &Пользователь)
			|ГДЕ
			|	ПрофилиГруппДоступа.Ссылка В(&ВыбранныеПолномочия)
			|	И ПолномочияПользователей.Полномочия ЕСТЬ NULL ");
			
		ВыбранныеПолномочия = Новый Массив;
		Для Каждого Стр Из Полномочия Цикл
			Если Стр.Пометка = 1 Тогда
				ВыбранныеПолномочия.Добавить(Стр.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("ВыбранныеПолномочия", ВыбранныеПолномочия);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Добавить Тогда
				РегистрыСведений.ПолномочияПользователей.ДобавитьПолномочия(Пользователь, Выборка.Полномочия);
			Иначе
				РегистрыСведений.ПолномочияПользователей.УдалитьПолномочия(Пользователь, Выборка.Полномочия);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись групп и полномочий пользователя'; en = 'Saving groups and permissions for the user'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если Не ПослеСохраненияФормаБудетЗакрыта Тогда
		ЗаполнитьВсеПолномочияГруппИПользователя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоНастройкамДоступа(Команда)
	
	ПараметрыФормы = Новый Структура("ВладелецНастроек", Пользователь);
	ОткрытьФорму("Отчет.НастройкиДоступаПользователей.Форма", ПараметрыФормы, ЭтотОбъект, Пользователь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьГруппы()
	
	// Группы
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	РабочиеГруппыСостав.Ссылка КАК Группа,
		|	РабочиеГруппыСостав.Ссылка.Наименование КАК ГруппаНаименование,
		|	Истина КАК ВходитНепосредственно,
		|	РабочиеГруппыСостав.Ссылка.Родитель КАК Родитель,
		|	0 КАК Уровень
		|ИЗ
		|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
		|ГДЕ
		|	РабочиеГруппыСостав.Пользователь = &Пользователь");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	ТаблицаГруппПользователей = Запрос.Выполнить().Выгрузить();
	ДобавитьРодительскиеГруппы(ТаблицаГруппПользователей, ТаблицаГруппПользователей, 1);
	
	ДеревоРабочихГрупп = Новый ДеревоЗначений;
	ДеревоРабочихГрупп.Колонки.Добавить("Группа");
	ДеревоРабочихГрупп.Колонки.Добавить("ГруппаНаименование");
	ДеревоРабочихГрупп.Колонки.Добавить("Картинка");
	ДеревоРабочихГрупп.Колонки.Добавить("ВходитНепосредственно");
	
	ГруппаВсеПользователи = Справочники.РабочиеГруппы.ВсеПользователи;
	СтрокаВсеПользователи = ДеревоРабочихГрупп.Строки.Добавить();
	СтрокаВсеПользователи.Группа = ГруппаВсеПользователи;
	СтрокаВсеПользователи.ВходитНепосредственно = Истина;
	
	ТаблицаГруппПользователей.Сортировать("Уровень УБЫВ");
	
	Для Каждого СтрокаГруппы Из ТаблицаГруппПользователей Цикл
		
		Если ДеревоРабочихГрупп.Строки.Найти(СтрокаГруппы.Группа, "Группа", Истина) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРодитель = Неопределено;
		Если ЗначениеЗаполнено(СтрокаГруппы.Родитель) Тогда
			СтрокаРодитель = ДеревоРабочихГрупп.Строки.Найти(СтрокаГруппы.Родитель, "Группа", Истина);
		КонецЕсли;
		
		Если СтрокаРодитель = Неопределено Тогда
			НоваяСтрока = ДеревоРабочихГрупп.Строки.Добавить();
		Иначе
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппы);
		
	КонецЦикла;
	
	ДеревоРабочихГрупп.Строки.Сортировать("ГруппаНаименование", Истина);	
	ЗначениеВДанныеФормы(ДеревоРабочихГрупп, РабочиеГруппы);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьРодительскиеГруппы(ОбщаяТаблица, ТекущаяТаблица, Уровень);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка КАК Группа,
		|	РабочиеГруппы.Наименование КАК ГруппаНаименование,
		|	РабочиеГруппы.Родитель КАК Родитель,
		|	&Уровень КАК Уровень
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Ссылка В(&Группы)");
	
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.УстановитьПараметр("Группы", ТекущаяТаблица.ВыгрузитьКолонку("Родитель"));
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицаРодителей = Результат.Выгрузить();
		Для Каждого СтрокаРодителя из ТаблицаРодителей Цикл
			ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаРодителя);
		КонецЦикла;
		
		Уровень = Уровень + 1;
		ДобавитьРодительскиеГруппы(ОбщаяТаблица, ТаблицаРодителей, Уровень);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолномочия()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолномочияПользователей.Полномочия КАК Полномочия,
		|	МАКСИМУМ(ПользователиВКонтейнерах.Пользователь <> ПользователиВКонтейнерах.Контейнер) КАК Унаследована
		|ПОМЕСТИТЬ НазначенныеПолномочия
		|ИЗ
		|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
		|		ПО ПолномочияПользователей.Владелец = ПользователиВКонтейнерах.Контейнер
		|ГДЕ
		|	ПользователиВКонтейнерах.Пользователь = &Пользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	ПолномочияПользователей.Полномочия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиГруппДоступа.Ссылка КАК Полномочия,
		|	ВЫБОР
		|		КОГДА НазначенныеПолномочия.Полномочия ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА НазначенныеПолномочия.Унаследована = ИСТИНА
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ НазначенныеПолномочия КАК НазначенныеПолномочия
		|		ПО ПрофилиГруппДоступа.Ссылка = НазначенныеПолномочия.Полномочия
		|ГДЕ
		|	НЕ ПрофилиГруппДоступа.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрофилиГруппДоступа.Наименование");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Полномочия.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
 		Стр = Полномочия.Добавить();
		Стр.Ссылка = Выборка.Полномочия;
		Стр.Пометка = Выборка.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРабочейГруппы(Группа, Добавить)
	
	Если Группа = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		// Состав группы ВсеПользователи не меняется.
		Возврат;
	КонецЕсли;
	
	// Редактирование состава группы
	ЗаблокироватьДанныеДляРедактирования(Группа,, УникальныйИдентификатор);
	ГруппаОбъект = Группа.ПолучитьОбъект();
	
	Если Добавить Тогда
		НоваяСтрока = ГруппаОбъект.Состав.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
	Иначе
		УдаляемаяСтрока = ГруппаОбъект.Состав.Найти(Пользователь);
		Если УдаляемаяСтрока <> Неопределено Тогда
			ГруппаОбъект.Состав.Удалить(УдаляемаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Группа, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ГруппаСРодителями(Группа)
	
	Результат = Новый Массив;
	Результат.Добавить(Группа);
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Группа, "Родитель");
	Пока ЗначениеЗаполнено(Родитель) Цикл
		Результат.Вставить(0, Родитель);
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВсеПолномочияГруппИПользователя()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолномочияПользователей.Владелец КАК Владелец,
		|	ПолномочияПользователей.Полномочия
		|ИЗ
		|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
		|ГДЕ
		|	(ПолномочияПользователей.Владелец ССЫЛКА Справочник.РабочиеГруппы
		|			ИЛИ ПолномочияПользователей.Владелец = &Пользователь)");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ВсеПолномочияГруппИПользователя");
	
КонецПроцедуры

#КонецОбласти
