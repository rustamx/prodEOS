#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет реквизиты невыполненных задач
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт
	
	СтарыйКонтролер = СтарыеУчастникиПроцесса.Контролер;
	
	ИзмененКонтролер = СтарыйКонтролер <> Контролер;
		
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ДанныеБизнесПроцессов.ВедущаяЗадача = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ДанныеБизнесПроцессов.БизнесПроцесс ЕСТЬ NULL 
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
        ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер Тогда
			ЗадачаОбъект.Автор 	= Автор;
			ЗадачаОбъект.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Контролировать'; en = 'Monitor'") + ": ", Описание);
			ЗадачаОбъект.Важность = Важность;
			
			ЗадачаОбъект.БизнесПроцесс  = ЭтотОбъект.Ссылка;
			
			СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЗадачаОбъект);
			ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
			
			Если ИзмененКонтролер Тогда
				
				Если ЗадачаОбъект.ПринятаКИсполнению Тогда
					ЗадачаОбъект.ПринятаКИсполнению = Ложь;
					ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
					ЗадачаОбъект.Исполнитель = Контролер;
					ЗадачаОбъект.РольИсполнителя = Неопределено;
				Иначе
					ЗадачаОбъект.Исполнитель = Неопределено;
					ЗадачаОбъект.РольИсполнителя = Контролер;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
				И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
				
				ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контролировать ход процесса: %1'; en = 'Monitor advancement of process: %1'",
						ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
					ПредметыСтрокой);
			Иначе
				ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контролировать: %1'; en = 'Monitor: %1'",
						ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
				 	Наименование);
			КонецЕсли;
			
			РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ИзменениеРеквизитовНевыполненныхЗадач(
				ПараметрыЗаписи,
				ЭтотОбъект,
				ЗадачаОбъект);
				
			ЗадачаОбъект.СрокИсполнения = СрокИсполненияПроцесса;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса, ЗаполнятьЭтапы = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоПроцесса();
	
	ИспользоватьСхемуПроцесса = ЗначениеЗаполнено(ШаблонБизнесПроцесса.Схема);
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда 
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Контролер, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			Контролер = АвтоподстановкаКонтролер;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Структура") Тогда
			
			Контролер = АвтоподстановкаКонтролер.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'; en = 'Auto-substitution ""%1"" could not be used for field ""%2"" because containts an array of users'"),
				ШаблонБизнесПроцесса.Контролер,
				НСтр("ru = 'Контролер'; en = 'Monitor'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
	КонецЕсли;	
	
	Если Не ИспользоватьСхемуПроцесса Тогда
		Для Каждого ПредшественникЭтапаШаблона Из ШаблонБизнесПроцесса.ПредшественникиЭтапов Цикл
			ЗаполнитьЗначенияСвойств(ПредшественникиЭтапов.Добавить(), ПредшественникЭтапаШаблона);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Если Не ИспользоватьСхемуПроцесса
		И ВариантМаршрутизации <> ШаблонБизнесПроцесса.ВариантМаршрутизации Тогда
		
		ВариантМаршрутизации = ШаблонБизнесПроцесса.ВариантМаршрутизации;
	КонецЕсли;
	
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ЗаполнитьПоШаблону(ЭтотОбъект, ШаблонБизнесПроцесса);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьДействияПоШаблону(ШаблонБизнесПроцесса);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Создает шаблон по данному комплексному процессу. Если указана ссылка на шаблон,
// то выполняется обновление объекта по переданной ссылке, если нет - создается новый 
// шаблон комплексного процесса.
// Параметры:
//	ШаблонСсылка - ссылка на шаблон комплексного процесса.
Функция СоздатьШаблонПоПроцессу(ШаблонСсылка = Неопределено) Экспорт
	
	//перенос реквизитов в шаблон
	Если ШаблонСсылка = Неопределено ИЛИ ШаблонСсылка.Пустая() Тогда
		ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
		ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	Иначе
		ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();
	КонецЕсли;
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Контролер = Контролер;
	ШаблонОбъект.ВариантМаршрутизации = ВариантМаршрутизации;
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	
	ИспользоватьСхемуПроцесса = ЗначениеЗаполнено(Схема);
	
	// Перенос схемы процесса
	Если ИспользоватьСхемуПроцесса Тогда
		
		// Копирование схемы и ее подчиненных процессов.
		УстановитьПривилегированныйРежим(Истина);
		СхемаОбъект = Справочники.СхемыКомплексныхПроцессов.СоздатьЭлемент();
		СхемаОбъект.ВладелецСхемы = ШаблонОбъект.СсылкаНаШаблон();
		СхемаОбъект.ЗаполнитьНастройкиПоСхеме(Схема);
		СхемаОбъект.Записать();
		ШаблонОбъект.Схема = СхемаОбъект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
		
		// Замена шаблонов в таблице ПредметыЗадач
		КэшПараметровДействий = Новый Соответствие;
		Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
			КэшПараметровДействий.Вставить(ПараметрыДействия.Идентификатор, ПараметрыДействия);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ШаблонОбъект.ПредметыЗадач Цикл
			ПараметрыДействия = КэшПараметровДействий.Получить(СтрокаТаблицы.ИдентификаторЭтапа);
			Если ПараметрыДействия <> Неопределено Тогда
				СтрокаТаблицы.ШаблонБизнесПроцесса = ПараметрыДействия.ШаблонПроцесса;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		//перенос этапов в шаблон
		ШаблонОбъект.Этапы.Очистить();
		Для Каждого Этап Из Этапы Цикл
			НовыйЭтап = ШаблонОбъект.Этапы.Добавить();
			НовыйЭтап.ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
			
			НовыйШаблон = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().Скопировать();
			НовыйШаблон.Записать();
			
			НовыйЭтап.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
			
			СтрокиПредметовЗадач = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
				Этап.ИдентификаторЭтапа, Этап.ШаблонБизнесПроцесса));
			Для Каждого Строка Из СтрокиПредметовЗадач Цикл
				Строка.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
			КонецЦикла;
			
			НовыйЭтап.ИсполнителиЭтапаСтрокой = Этап.ИсполнителиЭтапаСтрокой;
			НовыйЭтап.ПредшественникиЭтапаСтрокой = Этап.ПредшественникиЭтапаСтрокой;
			НовыйЭтап.ПредшественникиВариантИспользования = Этап.ПредшественникиВариантИспользования;
		КонецЦикла;
		
		//перенос настройки порядка выполнения
		ШаблонОбъект.ПредшественникиЭтапов.Очистить();
		Для Каждого ЗаписьПорядка Из ПредшественникиЭтапов Цикл
			НоваяЗапись = ШаблонОбъект.ПредшественникиЭтапов.Добавить();
			НоваяЗапись.ИдентификаторПредшественника = ЗаписьПорядка.ИдентификаторПредшественника;
			НоваяЗапись.ИдентификаторПоследователя = ЗаписьПорядка.ИдентификаторПоследователя;
			НоваяЗапись.УсловиеПерехода = ЗаписьПорядка.УсловиеПерехода;
		КонецЦикла;
		
		//установка реквизита ВладелецШаблона у настроек действий на шагах
		Для Каждого Этап Из ШаблонОбъект.Этапы Цикл
			НовыйШаблон = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			НовыйШаблон.ВладелецШаблона = ШаблонОбъект.Ссылка;
			НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
			НовыйШаблон.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();
	
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Формирует описание процесса из общего описания вышестоящего комплексного процесса 
// и описания этого процесса.
// Параметры:
//	ОбщееОписание - строка. Описание вышестоящего комплексного процесса.
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Выполняет поиск доступных для запуска действий и стартует их
// Параметры:
//	ФормируемыеБизнесПроцессы - массив объектов созданных процессов
//	ТочкаМаршрутаБизнесПроцесса - точка маршрута комплексного процесса, на которой создаются новые процессы
//	СтартоватьСразуПослеСоздания - флаг, показывающий, что процессы необходимо стартовать сразу после создания
//
//	Флаг "СтартоватьСразуПослеСоздания" необходимо устанавливать в Истина, если процессы создаются вручную при 
//	завершении очередного действия комплексного процесса. Значение Ложь необходимо установить, 
//	если старт вложенных процессов выполняется стандартным механизмом бизнес-процессов.
Процедура СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания, ПослеПроцесса = Неопределено) Экспорт
		
	Попытка
		ВнешняяТранзакция = Истина;
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ВнешняяТранзакция = Ложь;
		КонецЕсли;
		
		МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(ПослеПроцесса);
		
		//для каждого этапа, который запускается, удалить признак перехода по нему
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				Если Предшественник.ИдентификаторПредшественника = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
					Предшественник.УсловныйПереходБылВыполнен = Ложь;
				КонецЕсли;
				Если Предшественник.ИдентификаторПоследователя = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
					Предшественник.УсловныйПереходБылВыполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			ЭтапДляЗапуска.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
		КонецЦикла;
				
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Попытка
				СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания);
			Исключение
				Инфо = ИнформацияОбОшибке();
				Пока Инфо.Причина <> Неопределено Цикл
					Инфо = Инфо.Причина;
				КонецЦикла;
				Описание = Инфо.Описание;
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Эта задача не может быть выполнена.%1%2'; en = 'The task cannot be executed.%1%2'"),
					Символы.ПС,
					Описание);
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		КонецЦикла;
		
		Если МассивЭтаповДляЗапуска.Количество() Тогда
			Записать();
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки	
	
КонецПроцедуры

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса - шаблон бизнес-процесса
//
Процедура ЗаполнитьДействияПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Этапы.Очистить();
	ПредшественникиЭтапов.Очистить();
	Схема = Справочники.СхемыКомплексныхПроцессов.ПустаяСсылка();
	
	СсылкаНаПроцесс = СсылкаНаПроцесс();
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонБизнесПроцесса, "Схема, Этапы");
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Схема) Тогда
		
		// Копирование схемы и ее подчиненных процессов.
		СхемаОбъект = Справочники.СхемыКомплексныхПроцессов.СоздатьЭлемент();
		СхемаОбъект.ВладелецСхемы = СсылкаНаПроцесс;
		СхемаОбъект.КомплексныйПроцесс = СсылкаНаПроцесс;
		СхемаОбъект.ЗаполнитьНастройкиПоСхеме(РеквизитыШаблона.Схема);
		СхемаОбъект.Записать();
		Схема = СхемаОбъект.Ссылка;
		
		// Замена шаблонов в таблице ПредметыЗадач
		КэшПараметровДействий = Новый Соответствие;
		Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
			КэшПараметровДействий.Вставить(ПараметрыДействия.Идентификатор, ПараметрыДействия);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ПредметыЗадач Цикл
			ПараметрыДействия = КэшПараметровДействий.Получить(СтрокаТаблицы.ИдентификаторЭтапа);
			Если ПараметрыДействия <> Неопределено Тогда
				СтрокаТаблицы.ШаблонБизнесПроцесса = ПараметрыДействия.ШаблонПроцесса;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ЭтапыШаблона = РеквизитыШаблона.Этапы.Выгрузить();
	
		Для Каждого ЭтапШаблона Из ЭтапыШаблона Цикл
			НовыйЭтап = Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапШаблона);
			
			ЭтапШаблонаОбъект = ЭтапШаблона.ШаблонБизнесПроцесса.ПолучитьОбъект();
			
			Если Не ЗначениеЗаполнено(ЭтапШаблонаОбъект.ВладелецШаблона) Тогда
				
				//копирование общего шаблона в настройку действия этапа комплексного процесса
				//разворачивание автоподстановок
				ИмяПроцесса = Справочники[ЭтапШаблона.ШаблонБизнесПроцесса.Метаданные().Имя].ИмяПроцесса(ЭтапШаблона.ШаблонБизнесПроцесса);
				
				БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
				БизнесПроцессОбъект.Автор = Автор;
				БизнесПроцессОбъект.Заполнить(Новый Структура());
				Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса, БизнесПроцессОбъект);
				Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
					БизнесПроцессОбъект.ЗаполнитьДействияПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса);
				КонецЕсли;
				Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ЭтотОбъект, Истина);
				БизнесПроцессОбъект.ЗаполнитьПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса);
				
				ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
				ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
				ШаблонДляВставкиОбъект.ВладелецШаблона = СсылкаНаПроцесс;
				ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонДляВставкиОбъект,
					"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
				СтрокиПредметовЗадач = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
					НовыйЭтап.ИдентификаторЭтапа, НовыйЭтап.ШаблонБизнесПроцесса));
				Для Каждого Строка Из СтрокиПредметовЗадач Цикл
					Строка.ШаблонБизнесПроцесса = ШаблонДляВставкиОбъект.Ссылка;
				КонецЦикла;
				
				НовыйЭтап.ШаблонБизнесПроцесса = ШаблонДляВставкиОбъект.Ссылка;
			Иначе
				
				ЗаполнитьИсходныйШаблон = Не ЗначениеЗаполнено(ЭтапШаблонаОбъект.КомплексныйПроцесс);
				
				ЭтапШаблонаОбъект.КомплексныйПроцесс = СсылкаНаПроцесс;
				ШаблонДействияОбъект = ЭтапШаблонаОбъект.Скопировать();
				
				Если ЗаполнитьИсходныйШаблон Тогда
					ШаблонДействияОбъект.ИсходныйШаблон = ЭтапШаблонаОбъект.Ссылка;
				КонецЕсли;
				
				ШаблонДействияОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
				ШаблонДействияОбъект.ВладелецШаблона = СсылкаНаПроцесс;
				ШаблонДействияОбъект.ШаблонВКомплексномПроцессе = Истина;
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонДействияОбъект,
					"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
				СтрокиПредметовЗадач = ПредметыЗадач.НайтиСтроки(
					Новый Структура("ШаблонБизнесПроцесса", НовыйЭтап.ШаблонБизнесПроцесса));
				
				Для Каждого Строка Из СтрокиПредметовЗадач Цикл
					Строка.ШаблонБизнесПроцесса = ШаблонДействияОбъект.Ссылка;
				КонецЦикла;
				
				НовыйЭтап.ШаблонБизнесПроцесса = ШаблонДействияОбъект.Ссылка;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапускЭтапаПроцессаВозможен(ЭтапПроцесса, ТолькоПроверка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) 
		И НЕ ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Завершен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УсловияПереходаВыполнены = УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка);
	Если СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапПроцесса) Тогда	
		Возврат НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) И УсловияПереходаВыполнены;
	Иначе
		Возврат УсловияПереходаВыполнены;
	КонецЕсли;
		
КонецФункции

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПолей = Новый Массив;
	
	Если ЗначениеЗаполнено(Схема) Тогда
		
		СхемаОбъект = Схема.ПолучитьОбъект();
		РезультатПроверкиСхемы = СхемаОбъект.СхемаКорректна();
		
		ОшибкиНастроекСхемы = 
			Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(Схема);
		
		Если Не РезультатПроверкиСхемы.НетОшибок Или ОшибкиНастроекСхемы.Количество() > 0 Тогда
			МассивПолей.Добавить("Схема");
		КонецЕсли;
		
	Иначе
	
		Для Каждого Этап Из Этапы Цикл
			
			Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса) Тогда
				
				ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
				
				МассивПолейШаблона = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
				Если МассивПолейШаблона.Количество() = 0 Тогда
					Для Каждого ИмяПоля Из МассивПолейШаблона Цикл
						МассивПолей.Добавить(ИмяПоля);
					КонецЦикла;	
					Возврат МассивПолей;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;		
		
	КонецЕсли;

	Возврат МассивПолей;
	
КонецФункции	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает ссылку на процесс.
//
Функция СсылкаНаПроцесс() Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаНаПроцесс = Ссылка;
	Иначе
		СсылкаНаПроцесс = ОпределитьСсылкуДляНовогоПроцесса();
	КонецЕсли;
	
	Возврат СсылкаНаПроцесс;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроцессОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроцессОбъект.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПроцесс = ПроцессОбъект.СсылкаНаПроцесс();
	
	Участники = БизнесПроцессы.КомплексныйПроцесс.УчастникиДляПроверкиПрав(ПроцессОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиКомплексногоПроцесса.Участник,
		|	УчастникиКомплексногоПроцесса.Изменение
		|ПОМЕСТИТЬ УчастникиКомплексногоПроцесса
		|ИЗ
		|	&УчастникиКомплексногоПроцесса КАК УчастникиКомплексногоПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыКомплексногоПроцесса.Предмет,
		|	ПредметыКомплексногоПроцесса.ИмяПредмета
		|ПОМЕСТИТЬ ПредметыКомплексногоПроцесса
		|ИЗ
		|	&ПредметыКомплексногоПроцесса КАК ПредметыКомплексногоПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыКомплексногоПроцесса.ИмяПредмета,
		|	УчастникиКомплексногоПроцесса.Участник,
		|	УчастникиКомплексногоПроцесса.Изменение
		|ПОМЕСТИТЬ УчастникиИПредметыКомплексногоПроцесса
		|ИЗ
		|	УчастникиКомплексногоПроцесса КАК УчастникиКомплексногоПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредметыКомплексногоПроцесса КАК ПредметыКомплексногоПроцесса
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.ИмяПредмета,
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.Участник,
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.Изменение
		|ИЗ
		|	РегистрСведений.ПредметыИУчастникиДействийКомплексныхПроцессов КАК ПредметыИУчастникиДействийКомплексныхПроцессов
		|ГДЕ
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.КомплексныйПроцесс = &КомплексныйПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыКомплексногоПроцесса.Предмет КАК Предмет,
		|	УчастникиИПредметыКомплексногоПроцесса.Участник,
		|	МАКСИМУМ(УчастникиИПредметыКомплексногоПроцесса.Изменение) КАК Изменение
		|ИЗ
		|	УчастникиИПредметыКомплексногоПроцесса КАК УчастникиИПредметыКомплексногоПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредметыКомплексногоПроцесса КАК ПредметыКомплексногоПроцесса
		|		ПО УчастникиИПредметыКомплексногоПроцесса.ИмяПредмета = ПредметыКомплексногоПроцесса.ИмяПредмета
		|
		|СГРУППИРОВАТЬ ПО
		|	УчастникиИПредметыКомплексногоПроцесса.Участник,
		|	ПредметыКомплексногоПроцесса.Предмет
		|ИТОГИ ПО
		|	Предмет";
	
	Запрос.УстановитьПараметр("КомплексныйПроцесс", СсылкаНаПроцесс);
	Запрос.УстановитьПараметр("УчастникиКомплексногоПроцесса", Участники);
	Запрос.УстановитьПараметр("ПредметыКомплексногоПроцесса", Предметы);
	
	ВыборкаПоПредметам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПредметыИУчастники = Новый Соответствие;
	
	Пока ВыборкаПоПредметам.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПоПредметам.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоУчастникам = ВыборкаПоПредметам.Выбрать();
		
		УчастникиКоторыеДолжныИметьПраваНаПредмет = Участники.СкопироватьКолонки();
		
		Пока ВыборкаПоУчастникам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(
				УчастникиКоторыеДолжныИметьПраваНаПредмет.Добавить(),
				ВыборкаПоУчастникам);
		КонецЦикла;
		
		ПредметыИУчастники.Вставить(ВыборкаПоПредметам.Предмет, УчастникиКоторыеДолжныИметьПраваНаПредмет);
		
	КонецЦикла;
	
	// Определим предметы для проверок
	ПредметыДляПроверкиПрав = Мультипредметность.ПредметыДляПроверкиПрав(
		ПроцессОбъект.Предметы.ВыгрузитьКолонку("Предмет"), ПроцессОбъект.Ссылка);
		
	ПредметыДляПроверкиНарушенияПолитикиДоступа =
		ПредметыДляПроверкиПрав.ДляПроверкиНарушенияПолитикиДоступа;
		
	ПредметыДляПроверкиПравДоступаУчастников =
		ПредметыДляПроверкиПрав.ДляПроверкиПравДоступаУчастников;
	
	// Проверка нарушения политики доступа при расширении рабочей группы предмета.
	Для Каждого Предмет Из ПредметыДляПроверкиНарушенияПолитикиДоступа Цикл
		
		УчастникиСДоступомКПредмету = ПредметыИУчастники.Получить(Предмет);
		
		Попытка
			Мультипредметность.ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
				Предмет, УчастникиСДоступомКПредмету);
		Исключение
			
			Отказ = Истина;
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
			ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
			
			ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ПроцессОбъект.Ссылка,
				ПолеПредмета);
			
		КонецПопытки;
	КонецЦикла;
	
	// Проверка прав на предметы без автоматического заполнения рабочей группы.
	
	ПраваУчастниковНаПредметы = ДокументооборотПраваДоступа.ПолучитьПраваПользователейПоОбъектам(
		ПредметыДляПроверкиПравДоступаУчастников, Истина);
	
	Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
		
		УчастникиНеИмеющиеПравДоступаНаТекущийПредмет = Новый Массив;
		
		УчастникиДляПроверки = ПредметыИУчастники.Получить(Предмет);
		
		ПользователиДляПроверкиПрав = Мультипредметность.ПользователиДляПроверкиПрав(УчастникиДляПроверки);
		
		Для Каждого СтрокаПользователь Из ПользователиДляПроверкиПрав Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ОбъектДоступа", Предмет);
			Отбор.Вставить("Пользователь", СтрокаПользователь.Участник);
			
			НайденныеПрава = ПраваУчастниковНаПредметы.НайтиСтроки(Отбор);
			Если НайденныеПрава.Количество() = 0 Тогда
				УчастникиНеИмеющиеПравДоступаНаТекущийПредмет.Добавить(СтрокаПользователь.Участник);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоПользователей = УчастникиНеИмеющиеПравДоступаНаТекущийПредмет.Количество();
		
		Если КоличествоПользователей <> 0 Тогда
			
			Отказ = Истина;
			
			Если КоличествоПользователей = 1 Тогда
				
				ТекстОшибки = НСтр("ru = 'Пользователь ""%1"" не имеет прав на предмет ""%2"".'; en = 'User ""%1"" does not have permission to ""%2"".'");
				
				ТекстОшибки = 
					СтрШаблон(ТекстОшибки, УчастникиНеИмеющиеПравДоступаНаТекущийПредмет[0], Предмет);
					
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Пользователи:
					|%1
					|не имеют прав на предмет ""%2"".';
					|en = 'Users: 
					|%1 
					|does not have permissions to subject ""%2"".'");
					
				ПользователиСтрокой = "";
				
				ПереносСтроки = "";
				
				Для Каждого Пользователь Из УчастникиНеИмеющиеПравДоступаНаТекущийПредмет Цикл
					ПользователиСтрокой = ПользователиСтрокой
						+ ПереносСтроки
						+ "  "
						+ Строка(Пользователь);
						
					ПереносСтроки = Символы.ПС;
				КонецЦикла;
				
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПользователиСтрокой, Предмет);
				
			КонецЕсли;
			
			СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
			ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
			
			ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ПроцессОбъект.Ссылка,
				ПолеПредмета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторСсылки = УникальныйИдентификаторПустой();
	
	СсылкаНаПроцесс = СсылкаНаПроцесс();
	
	// Очистим заполняемые предметы.
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
			СтрокаПредмета.Предмет = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Схема) Тогда
		
		// Скопируем схему процесса
		УстановитьПривилегированныйРежим(Истина);
		
		СхемаОбъект = Справочники.СхемыКомплексныхПроцессов.СоздатьЭлемент();
		СхемаОбъект.ВладелецСхемы = СсылкаНаПроцесс;
		СхемаОбъект.КомплексныйПроцесс = СсылкаНаПроцесс;
		СхемаОбъект.ЗаполнитьНастройкиПоСхеме(ОбъектКопирования.Схема);
		СхемаОбъект.Записать();
		Схема = СхемаОбъект.Ссылка;
		
		// Обновим ссылки шаблонов в таблице ПредметыЗадач
		КэшПараметровДействий = Новый Соответствие;
		Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
			КэшПараметровДействий.Вставить(ПараметрыДействия.Идентификатор, ПараметрыДействия);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ПредметыЗадач Цикл
			ПараметрыДействия = КэшПараметровДействий.Получить(СтрокаТаблицы.ИдентификаторЭтапа);
			Если ПараметрыДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.ШаблонБизнесПроцесса = ПараметрыДействия.ШаблонПроцесса;
			СтрокаТаблицы.ДоступноУдаление = Ложь;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		Для Каждого ЭтапОбъектаКопирования Из ОбъектКопирования.Этапы Цикл
			Для Каждого ЭтапПроцесса Из Этапы Цикл
				Если ЭтапПроцесса.ИдентификаторЭтапа = ЭтапОбъектаКопирования.ИдентификаторЭтапа Тогда
					Если ЗначениеЗаполнено(ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
						
						КопируемыйШаблонОбъект = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ПолучитьОбъект();
						КопируемыйШаблонОбъект.КомплексныйПроцесс = СсылкаНаПроцесс;
						
						НовыйШаблон = КопируемыйШаблонОбъект.Скопировать();
						
						НовыйШаблон.ВладелецШаблона = СсылкаНаПроцесс;
						НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
						НовыйШаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
						ШаблоныБизнесПроцессов.ЗаписатьШаблон(НовыйШаблон,
							"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
						СтрокиЭтаповШаблона = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ЭтапПроцесса.ИдентификаторЭтапа));
						Для Каждого СтрокаЭтапаШаблона Из СтрокиЭтаповШаблона Цикл
							СтрокаЭтапаШаблона.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
							СтрокаЭтапаШаблона.ДоступноУдаление = Ложь;
						КонецЦикла;
						ЭтапПроцесса.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
					КонецЕсли;
					ЭтапПроцесса.ЗапущенныйБизнесПроцесс = Неопределено;
					ЭтапПроцесса.ЗадачаВыполнена = Ложь;
				КонецЕсли;
				ЭтапПроцесса.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
			КонецЦикла;
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				Предшественник.УсловныйПереходБылВыполнен = Ложь;
			КонецЦикла;
		КонецЦикла;
		ПредшественникиЭтапов.Очистить();
		ВариантМаршрутизации = ОбъектКопирования.ВариантМаршрутизации;
		Для Каждого СтрокаПредшественник Из ОбъектКопирования.ПредшественникиЭтапов Цикл
			НоваяСтрока = ПредшественникиЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредшественник);
			НоваяСтрока.УсловныйПереходБылВыполнен = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоПроцесса();
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
			ЗаполнитьДействияПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);	
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Обработка'; en = 'Processing'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	ПроверитьЭтапыЗаполняемыхПредметов(Отказ);
	
	Если ЗначениеЗаполнено(Схема) Тогда
		
		// Отключим проверку заполнения таблицы этапов и вариант маршрутизации.
		Индекс = ПроверяемыеРеквизиты.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Если ПроверяемыеРеквизиты[Индекс] = "ВариантМаршрутизации"
				Или ПроверяемыеРеквизиты[Индекс] = "Этапы"
				Или ПроверяемыеРеквизиты[Индекс] = "Этапы.ШаблонБизнесПроцесса" Тогда
				
				ПроверяемыеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
		// Выполним проверку схемы.
		СхемаОбъект = Схема.ПолучитьОбъект();
		
		РезультатПроверкиСхемы = СхемаОбъект.СхемаКорректна();
		Если Не РезультатПроверкиСхемы.НетОшибок Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				РезультатПроверкиСхемы.ОписаниеОшибки,
				ЭтотОбъект,,
				"Схема",
				Отказ);
		КонецЕсли;
		
		ОшибкиНастроекСхемы = 
			Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(Схема);
		Для Каждого ОшибкаНастройкиСхемы Из ОшибкиНастроекСхемы Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОшибкаНастройкиСхемы,
				ЭтотОбъект,,
				"Схема",
				Отказ);
		КонецЦикла;
		
	Иначе
		
		Для Каждого Этап Из Этапы Цикл
			
			ОбъектШаблонаЭтапа = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			
			МассивПолей = ОбъектШаблонаЭтапа.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				Если МассивПолей.Найти("Схема") <> Неопределено Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Схема действия %1 ""%2"" настроена неверно. Проверьте схему'; en = 'Diagram action %1 ""%2"" is configured incorrectly. Validate the diagram'"),
						Этап.НомерСтроки,
						Строка(Этап.ШаблонБизнесПроцесса));
						
				Иначе
					СтрокаНезаполненныеПоля = МассивПолейВСтроку(МассивПолей);
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'При настройке этапа %1 ""%2"" не заполнены необходимые для запуска поля: %3'; en = 'When configuring stage %1 ""%2"" the necessary fields to start were not filled in: %3'"),
						Этап.НомерСтроки,
						Строка(Этап.ШаблонБизнесПроцесса),
						СтрокаНезаполненныеПоля);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					"Этапы",, 
					Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоПроцесса();
	
	ОбычнаяЗапись = Истина;
	ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов = Ложь;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов Тогда
		
		РеквизитыСсылки = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Ссылка, "ПометкаУдаления, Проект, ПроектнаяЗадача, Стартован, Предметы, ПометкаУдаления");
			
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", РеквизитыСсылки.ПометкаУдаления);
		ДополнительныеСвойства.Вставить("ПредыдущийПроект", РеквизитыСсылки.Проект);
		ДополнительныеСвойства.Вставить("ПредыдущаяПроектнаяЗадача", РеквизитыСсылки.ПроектнаяЗадача);
		ДополнительныеСвойства.Вставить("Стартован", РеквизитыСсылки.Стартован);
		
		// Проверка факта добавления новых предметов.
		ДобавленыНовыеПредметы = Ложь;
			
		Если РеквизитыСсылки.Стартован = Истина Тогда
			
			ПредметыПроцессаПоСсылке = РеквизитыСсылки.Предметы.Выгрузить();
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("РольПредмета", Неопределено);
			СтруктураПоиска.Вставить("ИмяПредмета", Неопределено);
			СтруктураПоиска.Вставить("ИмяПредметаОснование", Неопределено);
			СтруктураПоиска.Вставить("Предмет", Неопределено);
			СтруктураПоиска.Вставить("ШаблонОснование", Неопределено);
			
			КоличествоЭтапов = Предметы.Количество();
			
			i = 1;
			
			Пока i < КоличествоЭтапов И НЕ ДобавленыНовыеПредметы Цикл
				
				Предмет = Предметы[КоличествоЭтапов - i];
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Предмет);
				
				НайденныеСтроки = ПредметыПроцессаПоСсылке.НайтиСтроки(СтруктураПоиска);
				
				ДобавленыНовыеПредметы = НайденныеСтроки.Количество() = 0;
				
				i = i + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ДобавленыНовыеПредметы", ДобавленыНовыеПредметы);
		
		// Обновление рабочей группы предмета
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ПередЗаписью(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		Если Не ЗначениеЗаполнено(Схема) Тогда
			Если ПредшественникиЭтапов.Количество() = 0 И Этапы.Количество() > 0  Тогда
				НоваяСтрока = ПредшественникиЭтапов.Добавить();
				НоваяСтрока.ИдентификаторПоследователя = Этапы[0].ИдентификаторЭтапа;
				НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
				НоваяСтрока.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
				Этапы[0].ПредшественникиЭтапаСтрокой = НСтр("ru = 'При старте процесса'; en = 'Upon process start'");
				Этапы[0].ПредшественникиВариантИспользования = "ОдинИзПредшественников";
			КонецЕсли;
			
			РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьПорядокСортировкиЭтапов(ЭтотОбъект);
		КонецЕсли;
		
		БылСтартован = Ложь;
		СтарыйКонтролер = Неопределено;
		СтарыйСрокИсполненияПроцесса = Дата(1,1,1);
		ПредыдущееСостояние = Неопределено;
		Если Не Ссылка.Пустая() Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
				"Стартован, Контролер, СрокИсполненияПроцесса, Состояние");
				
			БылСтартован = ЗначенияРеквизитов.Стартован;
			СтарыйКонтролер = ЗначенияРеквизитов.Контролер;
			СтарыйСрокИсполненияПроцесса = ЗначенияРеквизитов.СрокИсполненияПроцесса;
			ПредыдущееСостояние = ЗначенияРеквизитов.Состояние;
		КонецЕсли;
		ДополнительныеСвойства.Вставить("БылСтартован", БылСтартован);
		ДополнительныеСвойства.Вставить("СтарыйКонтролер", СтарыйКонтролер);
		ДополнительныеСвойства.Вставить("СтарыйСрокИсполненияПроцесса", СтарыйСрокИсполненияПроцесса);
		
		ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановки(ПредыдущееСостояние);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	
	ПередатьПредметыИПроекВПодпроцессы = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ПередатьПредметыИПроекВПодпроцессы = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ПередатьПредметыИПроекВПодпроцессы Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
	
		Контроль.ПриЗаписиПроцессаСКонтролером(ЭтотОбъект);
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления")
			И ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> Неопределено Тогда
			
			ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ПередатьПредметыИПроекВПодпроцессы Тогда
		
		// Распростронение проекта и проектной задачи на подпроцессы
		Если ДополнительныеСвойства.Стартован = Истина
			И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") = Истина Тогда
			Если ДополнительныеСвойства.ПредыдущийПроект <> Проект
				Или ДополнительныеСвойства.ПредыдущаяПроектнаяЗадача <> ПроектнаяЗадача Тогда
				
				РаспространитьПроектИПроектнуюЗадачуНаПодпроцессы();
				
			КонецЕсли;
		КонецЕсли;
		
		// Добавление новых предметов в подчиненные действия.
		Если ДополнительныеСвойства.ДобавленыНовыеПредметы Тогда
			
			ШаблонТекстаОшибки = НСтр("ru = 'При обновлении предметов в подчиненном процессе %1 произошла ошибка.'; en = 'There was an error during update of subjects of subordinate process %1'");
			
			Если ЗначениеЗаполнено(Схема) Тогда
				УстановитьПривилегированныйРежим(Истина);
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СхемыКомплексныхПроцессовПараметрыДействий.Имя,
					|	СхемыКомплексныхПроцессовПараметрыДействий.Идентификатор,
					|	СхемыКомплексныхПроцессовПараметрыДействий.ШаблонПроцесса,
					|	СхемыКомплексныхПроцессовПараметрыДействий.Процесс,
					|	СхемыКомплексныхПроцессовЭлементыСхемы.Пройден
					|ИЗ
					|	Справочник.СхемыКомплексныхПроцессов.ЭлементыСхемы КАК СхемыКомплексныхПроцессовЭлементыСхемы
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
					|		ПО СхемыКомплексныхПроцессовЭлементыСхемы.Ссылка = СхемыКомплексныхПроцессовПараметрыДействий.Ссылка
					|			И СхемыКомплексныхПроцессовЭлементыСхемы.Имя = СхемыКомплексныхПроцессовПараметрыДействий.Имя
					|ГДЕ
					|	СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = &Схема";
				Запрос.УстановитьПараметр("Схема", Схема);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.Процесс)
						Или Выборка.Пройден Тогда
						
						Продолжить;
					КонецЕсли;
					
					Попытка
					
						ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
						
						ПредметыДействия = ПредметыДействия(Выборка.Идентификатор, Выборка.ШаблонПроцесса);
					
						ПроцессОбъектДействия = Выборка.Процесс.ПолучитьОбъект();
						Мультипредметность.ПередатьПредметыПроцессу(
							ПроцессОбъектДействия, ПредметыДействия, Истина);
							
						РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъектДействия,
							"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
						
					Исключение
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаОшибки,
							ПредметыДействия.Процесс);
							
						ВызватьИсключение ТекстОшибки;
						
					КонецПопытки;
					
					
				КонецЦикла;
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				
				Для Каждого Этап ИЗ Этапы Цикл
					Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс)
						И НЕ Этап.ЗадачаВыполнена Тогда
						
						Попытка
							
							ЗаблокироватьДанныеДляРедактирования(Этап.ЗапущенныйБизнесПроцесс);
							
							ПредметыДействия = ПредметыДействия(Этап.ИдентификаторЭтапа, Этап.ШаблонБизнесПроцесса);
							
							ПроцессОбъектПоЭтапу = Этап.ЗапущенныйБизнесПроцесс.ПолучитьОбъект();
							Мультипредметность.ПередатьПредметыПроцессу(
								ПроцессОбъектПоЭтапу, ПредметыДействия, Истина);
								
							РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъектПоЭтапу,
								"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
							
						Исключение
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонТекстаОшибки,
								Этап.ЗапущенныйБизнесПроцесс);
								
							ВызватьИсключение ТекстОшибки;
							
						КонецПопытки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не ЗначениеЗаполнено(Схема) Тогда
		
			Для Каждого Этап Из Этапы Цикл
				
				РеквизитыШаблонаЭтапа = ОбщегоНазначенияДокументооборот.
					ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
						Этап.ШаблонБизнесПроцесса, "ВладелецШаблона, КомплексныйПроцесс");
					
				ВладелецШаблона = РеквизитыШаблонаЭтапа.ВладелецШаблона;
				КомплексныйПроцесс = РеквизитыШаблонаЭтапа.КомплексныйПроцесс;
				
				Если ВладелецШаблона <> Ссылка
					Или КомплексныйПроцесс <> Ссылка Тогда
					
					ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
					ШаблонОбъект.ВладелецШаблона = Ссылка;
					ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
					
					ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
						"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			УстановитьПометкуУдаленияДействиямПроцесса(ПометкаУдаления);
		КонецЕсли;
		
		УдалитьНепривязанныеШаблоны();
		
		СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	Если Не ЗначениеЗаполнено(Схема) Тогда
	
		// Проверка настроек отложенного старта подпроцессов.
		// Для первого этапа должен быть хотя бы один подпроцесс без настройки отложенного старта.
		МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(Неопределено);
		Если МассивЭтаповДляЗапуска.Количество() > 0 Тогда
			СписокЭтапов = Новый СписокЗначений;
			
			Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
				СписокЭтапов.Добавить(ЭтапДляЗапуска.ШаблонБизнесПроцесса);
			КонецЦикла;
			
			СписокШаблонов = 
				СтартПроцессовСервер.СписокШаблоновСНастройкамиОтложенногоСтарта(СписокЭтапов);
			
			Если СписокШаблонов.Количество() = СписокЭтапов.Количество() Тогда
				ОписаниеОшибки = 
					НСтр("ru = 'На первом этапе комплексного процесса должен быть хотя бы один процесс без отложенного старта.'; en = 'There must be at least one process without a deferred start on the first stage of the composite process.'");
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ОписаниеОшибки;
				СообщениеПользователю.Поле = "Этапы";
				СообщениеПользователю.УстановитьДанные(ЭтотОбъект);
				СообщениеПользователю.Сообщить();
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Расчет сроков и фиксация их в действиях при старте.
	Если Не ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаНачала;
			
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцесса(
			ЭтотОбъект, ПараметрыДляРасчетаСроков);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользуетсяСхемаБезДействийПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Схема) Тогда
		Результат = Не Справочники.СхемыКомплексныхПроцессов.ВСхемеЕстьДействия(Схема);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроцессБезДействийОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	// Выполнение действий предусмотрено только комплексного процесса со схемой.
	
	СтартоватьПроцессПоСхеме(Новый Массив);
	
КонецПроцедуры

Процедура ВложенныйПроцессПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если текущая задача является задачей ожидания для фоновой маршрутизации
	// комплексного процесса, то пропускаем маршрутизацию процесса.
	// Задача является задаче ожидания, если она не является ведущей у других процессов.
	Если РаботаСКомплекснымиБизнесПроцессамиСервер.ИспользоватьФоновуюМаршрутизацию()
		И Не РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоВедущаяЗадача(Задача) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Схема) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПроцесс = Ложь;
	Для Каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс)
			И ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Этап.ЗапущенныйБизнесПроцесс, "Завершен") Тогда
			
			Этап.ЗадачаВыполнена = Истина;
			ЗаписатьПроцесс = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЗаписатьПроцесс Тогда
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВложенныйПроцессПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	Если ЗначениеЗаполнено(Схема) Тогда
		
		СтартоватьПроцессПоСхеме(ФормируемыеБизнесПроцессы);
		
		// Для корректного старта комплексного процесса
		// должен быть сформирован хотя бы один процесс.
		Если ФормируемыеБизнесПроцессы.Количество() = 0 Тогда
			ВызватьИсключение 
				НСтр("ru = 'При старте комплексного процесса с действиями,
					|должно стартовать сразу минимум одно действие. Проверьте схему.';
					|en = 'When starting a composite process with actions, 
					|at least one action must start rightaway. Check the diagram.'");
		КонецЕсли;
		
	Иначе
		СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтролерПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	//КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Контролировать'; en = 'Monitor'") + ": ", Описание);
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	Задача.Важность = Важность;
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.СрокИсполнения = СрокИсполненияПроцесса;
	
	СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Контролер;
	Иначе
		Задача.РольИсполнителя = Контролер;
	КонецЕсли;	
	
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать ход процесса: %1'; en = 'Monitor advancement of process: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			ПредметыСтрокой);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать: %1'; en = 'Monitor: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
		 	Наименование);
	КонецЕсли;	
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.КонтролерПередСозданиемЗадач(ЭтотОбъект, Задача);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура ЗавершитьКонтрольОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	ЗавершитьЗадачуКонтролера();
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = ТекущаяДатаСеанса();
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает ссылку для нового, незаписанного процесса.
//
Функция ОпределитьСсылкуДляНовогоПроцесса()
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНового = ПолучитьСсылкуНового();
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		СсылкаНаПроцесс = СсылкаНового;
	Иначе
		
		Если Не ЗначениеЗаполнено(ИдентификаторСсылки) Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СсылкаНового = БизнесПроцессы.КомплексныйПроцесс.ПолучитьСсылку(ИдентификаторСсылки);
		
		УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Возврат СсылкаНового;
	
КонецФункции

// Устанавливает пометку удаления действиям процесса.
//
// Параметры:
//  ПометкаУдаления - Булево
//
Процедура УстановитьПометкуУдаленияДействиямПроцесса(ПометкаУдаления)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Схема) Тогда
		Схема.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
	Иначе
		
		Для Каждого Этап Из Этапы Цикл
			
			Если Не ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
				Продолжить;
			КонецЕсли;
			
			Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО КомплексныйПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	КомплексныйПроцесс.Ссылка = &ПараметрСсылка";
	Запрос.УстановитьПараметр("ПараметрСсылка", Ссылка);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивБизнесПроцессов = ПолучитьБизнесПроцессыПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
		Для Каждого БизнесПроцесс Из МассивБизнесПроцессов Цикл
			БизнесПроцесс.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Помечает на удаление не привязанные служебные шаблоны действий текущего процесса.
//
Процедура УдалитьНепривязанныеШаблоны()
	
	Если ЗначениеЗаполнено(Схема) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка пометки удаления у шаблонов, которые были созданы, но не прикреплены к комплексному процессу.
	// Например, создали комплексный процесс, добавили действие, а затем не сохранили комплексный процесс.
	
	ТипыШаблонов = ЭтотОбъект.Метаданные().ТабличныеЧасти.Этапы.Реквизиты.ШаблонБизнесПроцесса.Тип.Типы();
	
	Запрос = Новый Запрос;
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.%1 КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК ЭтапыПроцесса
		|		ПО (ЭтапыПроцесса.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка)
		|ГДЕ
		|	ШаблоныПроцессов.ВладелецШаблона = &ВладелецШаблона
		|	И ЭтапыПроцесса.Ссылка ЕСТЬ NULL ";
		
	Для Каждого Тип Из ТипыШаблонов Цикл
		
		ШаблонОбъект = Новый(Тип);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗапроса,
			ШаблонОбъект.Метаданные().Имя);
			
		Запрос.УстановитьПараметр("ВладелецШаблона", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ШаблонДляУдаления = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонДляУдаления.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив подчиненных процессов задаче.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  Массив 
//   * БизнесПроцессСсылка
//
Функция ПолучитьБизнесПроцессыПоЗадаче(ЗадачаСсылка)
	
	МассивБП = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ВедущаяЗадача = &Задача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивБП.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивБП;
	
КонецФункции

// Определяет наличие активных действий процесса.
//
Функция ЕстьАктивныеДействияПроцесса()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.ВложенныйПроцесс)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Завершает задачу контролера.
//
// Параметры:
//  ВыполнятьЗадачу - Булево - определяет, будет ли выполняться задача,
//                    или она будет только отмечена как выполненная.
//
Процедура ЗавершитьЗадачуКонтролера(ВыполнятьЗадачу = Истина)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или Не ЗначениеЗаполнено(Контролер) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", 	ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		БизнесПроцессы.КомплексныйПроцесс.ОбработкаВыполненияПоУмолчанию(
			Выборка.Ссылка, Ссылка, ЗадачаОбъект.ТочкаМаршрута);
		
		Если ВыполнятьЗадачу Тогда
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.ВыполнитьЗадачу();
			ЭтотОбъект.Прочитать();
		Иначе
			ЗадачаОбъект.Выполнена = Истина;
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект, "ПростаяЗапись");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ЗаполнениеПроцессаПоЗадаче(
		ЭтотОбъект,
		ЗадачаСсылка);
	
КонецПроцедуры	

// Формирует строку из имен полей через запятую
Функция МассивПолейВСтроку(МассивПолей)
	
	СтрокаПолей = "";
	
	Для Индекс = 0 По МассивПолей.Количество() - 1 Цикл
		
		Если Индекс <>  0 Тогда
			СтрокаПолей = СтрокаПолей + ", ";
		КонецЕсли;	
		
		СтрокаПолей = СтрокаПолей + МассивПолей[Индекс];
		
	КонецЦикла;	
	
	Возврат СтрокаПолей;
	
КонецФункции

Функция ЭтапыДляЗапуска(ПослеПроцесса)
	
	МассивЭтаповДляЗапуска = Новый Массив();
	
	Если ПослеПроцесса = Неопределено Тогда
		
		Для Каждого ЭтапБизнесПроцесса Из Этапы Цикл
			
			Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
				МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭтапПроцесса Из Этапы Цикл
			
			Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> ПослеПроцесса Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				
				Если Предшественник.ИдентификаторПредшественника <> ЭтапПроцесса.ИдентификаторЭтапа Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтапБизнесПроцесса = ПолучитьЭтапПоИдентификатору(Предшественник.ИдентификаторПоследователя);
				
				Если ЭтапБизнесПроцесса = Неопределено Тогда 
					
					Если ВариантМаршрутизации <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
						Продолжить;
					КонецЕсли;
					
					Индекс = Этапы.Индекс(ЭтапПроцесса);
					
					Если НЕ (Индекс < Этапы.Количество() - 1
							И ЗапускЭтапаПроцессаВозможен(Этапы[Индекс+1], Ложь)) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					МассивЭтаповДляЗапуска.Добавить(Этапы[Индекс+1]);
					
				Иначе
					
					Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
						МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЭтаповДляЗапуска;
	
КонецФункции

// Возвращает предметы действия процесса.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - индентификатор действивия
//  Шаблон - СправочникСсылка.<ИмяШаблонаПроцесса> - сслыка на служебный шаблон действия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствует таблице Предметы текущего процесса.
//
Функция ПредметыДействия(Идентификатор, Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплексныйПроцессПредметы.*
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Предметы КАК КомплексныйПроцессПредметы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.ПредметыЗадач КАК КомплексныйПроцессПредметыЗадач
		|		ПО КомплексныйПроцессПредметы.Ссылка = КомплексныйПроцессПредметыЗадач.Ссылка
		|			И КомплексныйПроцессПредметы.ИмяПредмета = КомплексныйПроцессПредметыЗадач.ИмяПредмета
		|			И (КомплексныйПроцессПредметыЗадач.ИдентификаторЭтапа = &ИдентификаторЭтапа)
		|			И (КомплексныйПроцессПредметыЗадач.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса)
		|ГДЕ
		|	КомплексныйПроцессПредметы.Ссылка = &Процесс";
		
	Запрос.УстановитьПараметр("Процесс", Ссылка);
	Запрос.УстановитьПараметр("ИдентификаторЭтапа", Идентификатор);
	Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", Шаблон);
	
	ПредметыДействия = Запрос.Выполнить().Выгрузить();
	
	СтрокаСвертки = "";
	Разделитель = ",";
	Для Каждого Колонка Из ПредметыДействия.Колонки Цикл
		
		Если Колонка.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвертки = СтрокаСвертки + Разделитель + Колонка.Имя;
		
	КонецЦикла;
	
	ПредметыДействия.Свернуть(СтрокаСвертки);
	ПредметыДействия.Сортировать("НомерСтроки");
	
	Возврат ПредметыДействия;
	
КонецФункции

Процедура ПроверитьЭтапыЗаполняемыхПредметов(Отказ)
	
	ЗаполняемыеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Заполняемый));
	
	Для Каждого СтрокаПредмета Из ЗаполняемыеПредметы Цикл
		Отбор = Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",СтрокаПредмета.ИмяПредмета, Истина);
		ТочкиЗаполнения = ПредметыЗадач.НайтиСтроки(Отбор);
		Для Каждого СтрокаТочки Из ТочкиЗаполнения Цикл
			Если СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер
				И Не ЗначениеЗаполнено(Контролер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Контролер для заполнения предмета ""%1"" на этапе процесса ""%2""!'; en = 'Monitor is not specified to fill the subject ""%1"" at the process stage ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"Контролер",
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура для создания процессов в рамках комплексного процесса
// Параметры:
//	ЭтапДляЗапуска - строка табличной части Этапы
//	ФормируемыеБизнесПроцессы - массив созданных объектов бизнес-процессов
//	ТочкаМаршрутаБизнесПроцесса - точка маршрута комплексного процесса, на которой создаются новые процессы
//	СтартоватьСразу - флаг, показывающий, что созданный процесс необходимо немедленно стартовать
//
//	Флаг "СтартоватьСразу" необходимо устанавливать в Истина, если процессы создаются вручную при 
//	завершении очередного действия комплексного процесса. Значение Ложь необходимо установить, 
//	если старт вложенных процессов выполняется стандартным механизмом бизнес-процессов.
Процедура СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса) Тогда
		
		ОтложенныйСтарт = ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса.СрокОтложенногоСтарта);
		
		СтруктураПредметов = Мультипредметность.ПолучитьДанныеЗаполненияПредметовЭтапа(
			ЭтотОбъект, ЭтапДляЗапуска.ИдентификаторЭтапа, ЭтапДляЗапуска.ШаблонБизнесПроцесса);
		
		//создается бизнес-процесс по шаблону
		Если НЕ ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса.Автор) Тогда
			БизнесПроцесс = СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(
				ЭтапДляЗапуска.ШаблонБизнесПроцесса, 
				ЭтапДляЗапуска.ИдентификаторЭтапа, 
				СтруктураПредметов,
				Автор);
		Иначе
			БизнесПроцесс = СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(
				ЭтапДляЗапуска.ШаблонБизнесПроцесса, 
				ЭтапДляЗапуска.ИдентификаторЭтапа, 
				СтруктураПредметов);
		КонецЕсли;
				
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.ДополнитьОписание(Описание);
		БизнесПроцесс.Проект = Проект;
		БизнесПроцесс.ПроектнаяЗадача = ПроектнаяЗадача;
		
		ЭтапДляЗапуска.ЗадачаВыполнена = Ложь;
		
		// Если необходимо стартовать процесс сразу, то для него вручную создается ведущая задача
		Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
			ВедущаяЗадачаДействия = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ВедущаяЗадачаДействия.Дата = ТекущаяДатаСеанса();
			ВедущаяЗадачаДействия.БизнесПроцесс = Ссылка;
			ВедущаяЗадачаДействия.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
			
			РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоДействиюЗаполнениеВедущейЗадачи(
				ЭтотОбъект, ВедущаяЗадачаДействия);
			
			ВедущаяЗадачаДействия.Записать();
			БизнесПроцесс.ВедущаяЗадача = ВедущаяЗадачаДействия.Ссылка;
		КонецЕсли;
		
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоДействиюДоЗаписиПроцесса(
			ЭтотОбъект, БизнесПроцесс);
		
		БизнесПроцесс.Записать();
		
		МультипредметностьКОРП.УдалитьДействиеКомплексногоПроцессаИзКэшаПредметовИУчастников(
			ЭтапДляЗапуска.ШаблонБизнесПроцесса);
		
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоДействиюПослеЗаписиПроцесса(
			ЭтотОбъект, БизнесПроцесс);
			
		СписокПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если СписокПолей.Количество() > 0 Тогда
			
			Если (СписокПолей.Найти("Исполнитель") <> Неопределено 
				Или СписокПолей.Найти("Исполнители") <> Неопределено) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не определены исполнители следующего шага процесса (""%1"").
						|Обратитесь к автору процесса или к администратору.';
						|en = 'Unable to determine performers for the next step of the process (""%1"").
						|Contact the process author or the administrator.'"),
					БизнесПроцесс.Наименование);
				
			ИначеЕсли СписокПолей.Найти("Схема") <> Неопределено Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Схема действия (""%1"") настроена неверно.
						| Обратитесь к автору процесса или к администратору.';
						|en = 'Diagram action (""%1"") is configured incorrectly.
						|Contact the process author or the administrator.'"),
					БизнесПроцесс.Наименование);
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Имеются ошибки заполнения следующего шага процесса (""%1"").
						|Обратитесь к автору процесса или к администратору.';
						|en = 'There are errors in the next step of the process (""%1"").
						|Contact the process author or the administrator.'"),
					БизнесПроцесс.Наименование);
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Рассчитываем сроки исполнения действия в случае если оно стартует повторно (в цикле).
		Если ЭтапДляЗапуска.ЗапущенныйБизнесПроцесс <> Неопределено Тогда
			СрокиИсполненияПроцессовКОРП.РассчитатьСрокИсполненияДляНовогоПроцесса(БизнесПроцесс);
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(БизнесПроцесс, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		КонецЕсли;
		
		// Если необходимо стартовать процесс сразу, то выполняется его старт
		Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
			
			Настройка = РегистрыСведений.ПроцессыДляЗапуска.ПолучитьСведенияОЗапускеПроцесса(
				БизнесПроцесс.Ссылка);
			
			Если ЗначениеЗаполнено(Настройка) Тогда
				БизнесПроцесс.ОтложенныйСтарт();
			Иначе
				
				Попытка
					СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
				Исключение
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось стартовать следующее действие ""%1"" комплексного процесса.
							|Обратитесь к автору процесса или к администратору';
							|en = 'Unable to start ""%1"" action of the composite process. 
							|Contact the process author or the administrator'"),
						БизнесПроцесс.Наименование);
					
					ВызватьИсключение ТекстОшибки;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтапДляЗапуска.ЗапущенныйБизнесПроцесс = БизнесПроцесс.Ссылка;
		
		// Созданный процесс добавляется в массив - для предоставления возможности
		// запуска процесса платформенной механикой
		Если НЕ ОтложенныйСтарт Тогда
			ФормируемыеБизнесПроцессы.Добавить(БизнесПроцесс);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(Шаблон, Идентификатор, СтруктураПредметов, Автор = Неопределено)
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
	БизнесПроцесс = БизнесПроцессы[ИмяТипаПроцесса].СоздатьБизнесПроцесс();
	Если Автор <> Неопределено Тогда 
		БизнесПроцесс.Автор = Автор;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Шаблон", Шаблон);
	ПараметрыЗаполнения.Вставить("Предметы", СтруктураПредметов.Предметы);
	БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
	
	Возврат БизнесПроцесс;
	
КонецФункции

Функция УсловиеПереходаВыполнено(ПроверяемыйЭтап, УсловиеРассмотрения, УсловиеПерехода, ИмяПредметаУсловия)
	
	Если ЗначениеЗаполнено(ПроверяемыйЭтап) Тогда
		Если УсловиеРассмотренияВыполнено(ПроверяемыйЭтап.ЗапущенныйБизнесПроцесс, УсловиеРассмотрения) Тогда
			СтрокиПроверки = ПроверяемыйЭтап.ЗапущенныйБизнесПроцесс.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредметаУсловия));
			Если СтрокиПроверки.Количество() > 0 Тогда
				Предмет = СтрокиПроверки[0].Предмет;
			Иначе 
				Предмет = Неопределено;
			КонецЕсли;
			
			Возврат РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, УсловиеПерехода);
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		СтрокиПроверки = Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредметаУсловия));
		Если СтрокиПроверки.Количество() > 0 Тогда
			Предмет = СтрокиПроверки[0].Предмет;
		Иначе 
			Предмет = Неопределено;
		КонецЕсли;
		
		Возврат РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, УсловиеПерехода);
		
	КонецЕсли;
		
КонецФункции

Функция УсловиеРассмотренияВыполнено(БизнесПроцессСсылка, УсловиеРассмотрения)
	
	Результат = Ложь;
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцессСсылка);
	Если УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Завершен");
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Завершен")
			И НЕ МенеджерПроцесса.ПроцессЗавершилсяУдачно(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения Тогда
	    Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачно(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями
		И ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
		Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачноСЗамечаниями(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний
		И ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
		Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачноБезЗамечаний(БизнесПроцессСсылка);
	ИначеЕсли Не ЗначениеЗаполнено(УсловиеРассмотрения) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Завершен");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ЕстьЗапущенныеЭтапы()

	Для Каждого Этап Из Этапы Цикл
		Если ПоЭтапуЕстьЗапущенныеПроцессы(Этап) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПоЭтапуЕстьЗапущенныеПроцессы(ЭтапПроцесса)
	
	Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> Неопределено
		И ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Стартован = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// Проверяет, что для переданного этапа выполнены все условия для старта
// Параметры:
//	ЭтапПроцесса - строка табличной части Этапы
//	ТолькоПроверка - флаг, показывающий, что необходимо выполнить только проверку 
//	без установки отметок о проверке
Функция УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка)
	
	Результат = Ложь;   
	Если УЭтапаЕстьПредшественники(ЭтапПроцесса.ИдентификаторЭтапа) Тогда // у этапа есть предшественники
		// Формируем массив предшественников данного этапа
		ПредшественникиЭтапа = Новый Массив;
		Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ЭтапПроцесса.ИдентификаторЭтапа Тогда
				ДанныеПредшественника = Новый Структура;
				ДанныеПредшественника.Вставить("ИдентификаторПредшественника", Предшественник.ИдентификаторПредшественника);
				ДанныеПредшественника.Вставить("УсловиеПерехода", Предшественник.УсловиеПерехода);
				ДанныеПредшественника.Вставить("УсловныйПереходБылВыполнен", Предшественник.УсловныйПереходБылВыполнен);
				ДанныеПредшественника.Вставить("УсловиеРассмотрения", Предшественник.УсловиеРассмотрения);
				ДанныеПредшественника.Вставить("ИмяПредметаУсловия", Предшественник.ИмяПредметаУсловия);
				ПредшественникиЭтапа.Добавить(ДанныеПредшественника);
			КонецЕсли;
		КонецЦикла;
		
		// В зависимости от варианта завершения предшественников 
		// устанавливается начальное значение результата проверки.
		Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
			Результат = Истина;
		ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Проверяем результат завершения каждого из предшественников и 
		// формируем итоговое значение результата проверки.
		Для Каждого ПредшественникЭтапа Из ПредшественникиЭтапа Цикл
			ЭтапПредшественник = ПолучитьЭтапПоИдентификатору(ПредшественникЭтапа.ИдентификаторПредшественника);
			Если ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() И НЕ ЕстьЗапущенныеЭтапы() Тогда
				Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
					Результат = Результат И УсловиеПереходаВыполнено(
												ЭтапПредшественник, 
												ПредшественникЭтапа.УсловиеРассмотрения, 
												ПредшественникЭтапа.УсловиеПерехода,
												ПредшественникЭтапа.ИмяПредметаУсловия);
				ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
					Результат = Результат ИЛИ УсловиеПереходаВыполнено(
												ЭтапПредшественник, 
												ПредшественникЭтапа.УсловиеРассмотрения, 
												ПредшественникЭтапа.УсловиеПерехода,
												ПредшественникЭтапа.ИмяПредметаУсловия);
				КонецЕсли; 
			Иначе
				Если ЭтапПредшественник <> Неопределено Тогда
					ПереходОтПредшественникаВозможен = 
						// переход от предшественника еще не был выполнен
						НЕ ПредшественникЭтапа.УсловныйПереходБылВыполнен
						// по предшественнику запущен процесс
						И ЗначениеЗаполнено(ЭтапПредшественник.ЗапущенныйБизнесПроцесс)
						// действие-предшественник завершилось
						И ЭтапПредшественник.ЗапущенныйБизнесПроцесс.Завершен
						// выполнено условие перехода от предшественника к данному этапу
						И УсловиеПереходаВыполнено(
							ЭтапПредшественник, 
							ПредшественникЭтапа.УсловиеРассмотрения, 
							ПредшественникЭтапа.УсловиеПерехода, 
							ПредшественникЭтапа.ИмяПредметаУсловия);
					// Если текущее действие ожидает завершения всех предшественников 
					Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
						Результат = Результат И ПереходОтПредшественникаВозможен;
							
					// Если текущее действие ожидает завершения одного из предшественников 
					ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
						Результат = Результат ИЛИ ПереходОтПредшественникаВозможен;
						Если Результат Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Не ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
					Результат = Стартован;
					Если Результат Тогда
						Прервать;
					КонецЕсли;
				ИначеЕсли ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда 
					Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
						Результат = Результат И 
							НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс)
							И УсловиеПереходаВыполнено(
								ЭтапПредшественник, 
								ПредшественникЭтапа.УсловиеРассмотрения, 
								ПредшественникЭтапа.УсловиеПерехода, 
								ПредшественникЭтапа.ИмяПредметаУсловия);
					ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
						Результат = Результат ИЛИ
							НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс)
							И УсловиеПереходаВыполнено(
								ЭтапПредшественник, 
								ПредшественникЭтапа.УсловиеРассмотрения, 
								ПредшественникЭтапа.УсловиеПерехода, 
								ПредшественникЭтапа.ИмяПредметаУсловия);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если ТолькоПроверка = Ложь, то у предшественников устанавливается 
		// признак выполненного перехода к текущему этапу
		Если НЕ ТолькоПроверка И Результат Тогда
			Для Каждого ПредшественникЭтапа Из ПредшественникиЭтапа Цикл
				Для Каждого ЗаписьОПереходе Из ПредшественникиЭтапов Цикл
					Если ЗаписьОПереходе.ИдентификаторПредшественника = ПредшественникЭтапа.ИдентификаторПредшественника
						И ЗаписьОПереходе.ИдентификаторПоследователя = ЭтапПроцесса.ИдентификаторЭтапа Тогда
						ЗаписьОПереходе.УсловныйПереходБылВыполнен = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
			Иначе
				Записать();
			КонецЕсли;
			
		КонецЕсли;
	Иначе // у действия нет предшественников, оно выполняется в порядке очереди
		ИндексЭтапа = ЭтапПроцесса.НомерСтроки - 1;
		// Для каждого из действий, расположенных выше по таблице, 
		// выполняется проверка возможности переда к данному действию
		Для Индекс = 0 по ИндексЭтапа Цикл
			ИндексПроверяемогоПредшественника = ИндексЭтапа - Индекс;
			Если ИндексПроверяемогоПредшественника = ИндексЭтапа Тогда
				Продолжить;
			КонецЕсли;
			ПроверяемыйПредшественник = Этапы[ИндексПроверяемогоПредшественника];
			// Если от расположенного выше в таблице действия не был выполнен переход
			// к следующему по порядку действию и это действие завершилось успешно,
			// формируется положительный результат проверки
			Если НЕ ПроверяемыйПредшественник.БезусловныйПереходКСледующемуБылВыполнен
				И ЗначениеЗаполнено(ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс)
				И ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс.Завершен
				И УсловиеРассмотренияВыполнено(
					ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс, 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения) Тогда
				
				Результат = Истина;
				
				// Если ТолькоПроверка = Ложь, у действия устанавливается признак перехода 
				// к следующему по порядку действию
				Если НЕ ТолькоПроверка Тогда
					Для Инд = 0 по ПроверяемыйПредшественник.НомерСтроки - 1 Цикл
						Этапы[Инд].БезусловныйПереходКСледующемуБылВыполнен = Истина;	
					КонецЦикла;
					
					Если ЗначениеЗаполнено(Ссылка) Тогда
						РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
					Иначе
						Записать();
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭтапПоИдентификатору(ИдентификаторЭтапа)
	
	Для Каждого Этап Из Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			Возврат Этап;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УЭтапаЕстьПредшественники(ИдентификаторЭтапа)
	
	Для каждого Предшественник Из ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапБизнесПроцесса)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторПоследователя", ЭтапБизнесПроцесса.ИдентификаторЭтапа);
	НайденныеСтроки = ПредшественникиЭтапов.НайтиСтроки(ПараметрыОтбора);
	КоличествоНайденного = НайденныеСтроки.Количество();
	Если КоличествоНайденного = 1 Тогда
		Если НайденныеСтроки[0].ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Процедура РаспространитьПроектИПроектнуюЗадачуНаПодпроцессы()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.ВедущаяЗадача.ТочкаМаршрута = &ТочкаМаршрута
		|	И ДанныеБизнесПроцессов.ВедущаяЗадача.БизнесПроцесс = &ПроцессСсылка
		|	И ДанныеБизнесПроцессов.ДатаЗавершения = &ДатаЗавершения";
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс);
	Запрос.УстановитьПараметр("ДатаЗавершения", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПроцессСсылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.БизнесПроцесс.ПолучитьОбъект();
		ПроцессОбъект.Проект = Проект;
		ПроцессОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
		ПроцессОбъект.Записать();
		
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.
			ТекущиеУчастникиПроцесса(ПроцессОбъект);
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Обработка '; en = 'Processing '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СхемаПроцесса

// Выполняет запуск процесса по схеме.
//
// Параметры:
//  ФормируемыеБизнесПроцессы
//   * БазнесПроцесОбъект - Массив - массив созданных бизнеспроцессов в ходе обработки.
//
Процедура СтартоватьПроцессПоСхеме(ФормируемыеБизнесПроцессы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаОбъект = Схема.ПолучитьОбъект();
	СхемаОбъект.СтартоватьПроцессПоСхеме(ФормируемыеБизнесПроцессы, ЭтотОбъект);
	
КонецПроцедуры

// Продолжает выполнение процесса по схеме, после завершенного действия.
//
// Параметры:
//  ЗавершенноеДействие - БизнесПроцессСсылка - ссылка на действие комплексного процесса.
//
Процедура ПродолжитьВыполнениеПроцессаПоСхеме(ЗавершенноеДействие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаОбъект = Схема.ПолучитьОбъект();
	СхемаОбъект.ПродолжитьВыполнениеПроцессаПоСхеме(ЭтотОбъект, ЗавершенноеДействие);
	
КонецПроцедуры

// Продолжает выполнение процесса по схеме, после продолжения процесса (смены реквизита Состояние).
//
// Параметры:
//  ПредыдущееСостояние - ПеречислениеСсылка.СостоянияБизнесПроцессов - предыдущее состояние процесса.
//
Процедура ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановки(ПредыдущееСостояние)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Выполнение инициируется только при смене значения состояния с Остановлен на Активен
	// для не выполненных и не удаленных процессов со схемой.
	Если Не ЗначениеЗаполнено(Ссылка)
		Или ПредыдущееСостояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен
		Или Завершен
		Или ПометкаУдаления
		Или Не ЗначениеЗаполнено(Схема) Тогда
		
		Возврат;
	КонецЕсли;
	
	СхемаОбъект = Схема.ПолучитьОбъект();
	
	// Выполним проверку схемы перед продолжением.
	СхемаОбъект = Схема.ПолучитьОбъект();
	РезультатПроверкиСхемы = СхемаОбъект.СхемаКорректна();
	
	ОшибкиНастроекСхемы = 
		Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(Схема);
	
	Если Не РезультатПроверкиСхемы.НетОшибок Или ОшибкиНастроекСхемы.Количество() > 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нельзя продолжить процесс ""%1"", т.к. его схема некорректна.
			|Проверьте схему в карточке процесса.';
			|en = 'Unable to continue process ""%1"", because its diagram is invalid.
			|Validate it in the process form.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Наименование);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиСервер.ИспользоватьФоновуюМаршрутизацию() Тогда
		РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.ДобавитьПроцесс(ЭтотОбъект.Ссылка);
	Иначе
		
		// Выполним маршрутизацию процесса.
		СхемаОбъект.ПродолжитьВыполнениеПроцессаПоСхеме(ЭтотОбъект);
		
		// Проверим наличие активных действий процесса.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.ВложенныйПроцесс)
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
			
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		НетАктивныхДействий = Запрос.Выполнить().Пустой();
		
		// Если нет активных задач, то выполняем код точек маршрута СнятьСКонтроля, Завершение и
		// отмечаем процесс завершенным.
		Если НетАктивныхДействий Тогда
			
			ЗавершитьЗадачуКонтролера(Ложь);
			ДатаЗавершения = ТекущаяДатаСеанса();
			РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
			Завершен = Истина;
			
			// Отключаем контроль возможности изменения состояния процесса,
			// т.к. нельзя менять состояния завершенных процессов.
			РаботаСБизнесПроцессамиВызовСервера.ОтключитьПроверкуВозможностиИзмененияСостоянияПроцесса(
				ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
