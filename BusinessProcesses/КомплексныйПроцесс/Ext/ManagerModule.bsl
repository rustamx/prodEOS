#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|Контролер,
		|СрокИсполненияПроцесса";
	
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
		
	Возврат Участники;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс, "ТрудозатратыПланКонтролера");
		
	Трудозатраты = 0;
		
	Если ТочкаМаршрута = ТочкиМаршрута.Контролер Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	Возврат Трудозатраты;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Контролер Тогда
		Представление = НСтр("ru = 'Снять с контроля'; en = 'Stop monitoring'");
		Если ЗадачаОбъект.Выполнена Тогда
			Представление = НСТР("ru = 'Снято с контроля.'; en = 'Monitoring stopped.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"СрокИсполненияПроцесса,
		|Схема,
		|Контролер,
		|Этапы,
		|ВариантМаршрутизации,
		|Стартован,
		|ВедущаяЗадача,
		|Шаблон,
		|ДатаЗавершения");
		
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	Схема = РеквизитыПроцесса.Схема;
	Контролер = РеквизитыПроцесса.Контролер;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ВариантМаршрутизации = РеквизитыПроцесса.ВариантМаршрутизации;
	Стартован = РеквизитыПроцесса.Стартован;
	ВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
	Шаблон = РеквизитыПроцесса.Шаблон;
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Определим вариант отображения сроков
	Если Не ЗначениеЗаполнено(ВедущаяЗадача) И Не ЗначениеЗаполнено(Шаблон)
		Или РеквизитыПроцесса.Стартован Тогда
		
		ВариантОтображенияСроков = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	Иначе
		ВариантОтображенияСроков = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	КонецЕсли;
	
	ИспользуетсяСхема = ЗначениеЗаполнено(Схема);
	
	ДатыЗавершения = СрокиИсполненияПроцессовКОРП.ДатыЗавершенияДействийКомплексногоПроцесса(Процесс);
	
	Если ИспользуетсяСхема Тогда
		
		РеквизитыСхемы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Схема, "ПараметрыДействий, ЭлементыСхемы, ПредшественникиЭлементовСхемы");
			
		Действия = РеквизитыСхемы.ПараметрыДействий.Выгрузить();
		ЭлементыСхемы = РеквизитыСхемы.ЭлементыСхемы.Выгрузить();
		ПредшественникиЭлементовСхемы = РеквизитыСхемы.ПредшественникиЭлементовСхемы.Выгрузить();
		
		КэшЭлементовСхемы = Новый Соответствие;
		Для Каждого ЭлементСхемы Из ЭлементыСхемы Цикл
			КэшЭлементовСхемы.Вставить(ЭлементСхемы.Имя, ЭлементСхемы);
		КонецЦикла;
		
		КэшДанныхДействий = РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий(Действия);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Дата"));
		ОписаниеТипаДата = Новый ОписаниеТипов(МассивТипов);
		
		Действия.Колонки.Добавить("СрокИсполненияПроцесса", ОписаниеТипаДата);
		Действия.Колонки.Добавить("СрокИсполненияПроцессаДни", ОписаниеТипаЧисло);
		Действия.Колонки.Добавить("СрокИсполненияПроцессаЧасы", ОписаниеТипаЧисло);
		Действия.Колонки.Добавить("СрокИсполненияПроцессаМинуты", ОписаниеТипаЧисло);
		Действия.Колонки.Добавить("СостояниеПроцесса");
		
		СрокиИсполненияПроцессовКлиентСерверКОРП.
			ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
				Действия, ЭлементыСхемы, КэшДанныхДействий);
		
		ПроцессыМассив = Действия.ВыгрузитьКолонку("Процесс");
		
	Иначе
		
		Действия = РеквизитыПроцесса.Этапы.Выгрузить();
		Действия.Колонки.Добавить("СрокИсполненияПроцесса");
		Действия.Колонки.Добавить("СрокИсполненияПроцессаДни");
		Действия.Колонки.Добавить("СрокИсполненияПроцессаЧасы");
		Действия.Колонки.Добавить("СрокИсполненияПроцессаМинуты");
		СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Действия);
		
		РеквизитПроцесс = "ЗапущенныйБизнесПроцесс";
		РеквизитШаблон = "ШаблонБизнесПроцесса";
		
		ПроцессыМассив = Действия.ВыгрузитьКолонку("ЗапущенныйБизнесПроцесс");
		
	КонецЕсли;
	
	// Формирование строк таблицы
	Если Действия.Количество() > 0 Тогда
		
		РезультатСоответствие 
			= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ПроцессыМассив, "Процесс");
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = '№'; en = '№'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		Если РезультатСоответствие.Количество() <> 0 Тогда
			// статус исполнения - в шапке пусто
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Действие'; en = 'Action'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""100"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'; en = 'Due date'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 0;
		
		//Заполнение таблицы действиями
		Для Каждого СтрокаТаблицы Из Действия Цикл
			
			НомерШага = НомерШага + 1;
			
			Если ИспользуетсяСхема Тогда
				
				ПараметрыЭлемента = КэшЭлементовСхемы.Получить(СтрокаТаблицы.Имя);
				
				Действие = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СсылкаНаДействиеСхемы(
					СтрокаТаблицы, ПараметрыЭлемента, СтрокаТаблицы.СостояниеПроцесса, Новый СписокЗначений);
				
				СнятьОтметкуТекущегоДействия = Не ПараметрыЭлемента.Текущий;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ЗапущенныйБизнесПроцесс) Тогда
					Действие = СтрокаТаблицы.ЗапущенныйБизнесПроцесс;
				Иначе
					Действие = СтрокаТаблицы.ШаблонБизнесПроцесса;
				КонецЕсли;
				
				СнятьОтметкуТекущегоДействия = СтрокаТаблицы.ЗадачаВыполнена
					Или Не ЗначениеЗаполнено(СтрокаТаблицы.ЗапущенныйБизнесПроцесс);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Действие) Тогда
				Продолжить;
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "<tr>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НомерШага, "");
			HTMLТекст = HTMLТекст + "</td>";
			
			// статус исполнения
			Если РезультатСоответствие.Количество() <> 0 Тогда
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(Действие);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				Иначе
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
				КонецЕсли;	
				HTMLТекст = HTMLТекст + "</td>";
				
			КонецЕсли;	
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			ЦветТекста = "";
			Если СнятьОтметкуТекущегоДействия Тогда
				HTMLТекст = HTMLТекст + "<FONT color=""" + ЦветЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = ЦветЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Действие, ЦветТекста);
			Если СнятьОтметкуТекущегоДействия Тогда
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			// Срок исполнения действия
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""100"">";
			
			ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				СтрокаТаблицы.СрокИсполненияПроцесса, СтрокаТаблицы.СрокИсполненияПроцессаДни, 
				СтрокаТаблицы.СрокИсполненияПроцессаЧасы, СтрокаТаблицы.СрокИсполненияПроцессаМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, ВариантОтображенияСроков);
			
			ДатаЗавершенияДействия = ДатыЗавершения.Получить(Действие);
			
			Если Не ЗначениеЗаполнено(ДатаЗавершенияДействия) Тогда
				ДатаЗавершенияДействия = ТекущаяДатаСеанса;
			КонецЕсли;
			
			ДатаЗавершенияДействия = ДатаЗавершенияДействия - Секунда(ДатаЗавершенияДействия);
			
			ЦветПредставленияСрока = "";
			Если СтрокаТаблицы.СрокИсполненияПроцесса < ДатаЗавершенияДействия Тогда
				ЦветПредставленияСрока = ЦветПросроченныеДанные;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
			
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
			
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		Если ЗначениеЗаполнено(Схема) Тогда
			HTMLТекст = HTMLТекст + СтрШаблон(
				"<A href=v8doc:%1>%2</A>",
				ПолучитьНавигационнуюСсылку(Схема),
				НСтр("ru = 'Схема'; en = 'Diagram'"));
		ИначеЕсли ЗначениеЗаполнено(ВариантМаршрутизации) Тогда
			ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Порядок: %1'; en = 'Order: %1'");
			ПредставлениеРеквизитаНаправлять = 
				СтрШаблон(ПредставлениеРеквизитаНаправлять, Строка(ВариантМаршрутизации));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
				HTMLТекст, ПредставлениеРеквизитаНаправлять, ЦветЗакрытыеНеактуальныеЗаписи);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтрШаблон(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_КомплексныйПроцесс",
			НСтр("ru = 'Все задачи'; en = 'All tasks'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	// Контролер
	Если Не Стартован И ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '; en = 'Monitor: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
	КонецЕсли;
	
	// Общий срок процесса
	ПредставлениеСрока = "";
	Если ВариантОтображенияСроков = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
		
		Если ИспользуетсяСхема Тогда
			Смещение = СрокиИсполненияПроцессовКОРП.СмещенияДатыОтсчета(Процесс);
			ДлительностьПроцесса = СрокиИсполненияПроцессовКОРП.
				ДлительностьИсполненияКомплексногоПроцессаПоДаннымСхемы(
					ЭлементыСхемы, Действия, ПредшественникиЭлементовСхемы, Смещение);
		Иначе
			ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Процесс);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаДни)
			Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаЧасы)
			Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаМинуты) Тогда
			
			ПредставлениеСрока = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
				ДлительностьПроцесса.СрокИсполненияПроцессаДни,
				ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
				ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		ПредставлениеСрока = Формат(СрокИсполненияПроцесса, ФорматСрока);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПредставлениеСрока) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'; en = 'Process due date:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Ложь;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Возврат Комментарий;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковКомплексногоПроцессаВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры	

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковКомплексногоПроцессаВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВыполнениеЗадач

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("УникальныйИдентификаторФормыИзмененияПараметров") Тогда
		ПараметрыВыполнения.Вставить(
			"УникальныйИдентификаторФормыИзмененияПараметров", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.Контролер Тогда
		
		КонтролерПроцесса = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				БизнесПроцессСсылка, "Контролер");
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(КонтролерПроцесса) <> Тип("СправочникСсылка.ПолныеРоли")
			И КонтролерПроцесса <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
					
			КПОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			
			КПОбъект.Контролер = ПараметрыВыполнения.ИсполнительЗадачи;
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(КПОбъект, "ПростаяЗапись");
			
			РазблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает возможные результаты выполнения действия комплексного процесса.
//
// Возвращаемое значение:
//  СписокЗначений
//   * Перечисление.РезультатыВыполненияДействийКомплексныхПроцессов
//
Функция РезультатыВыполненияДействияКомплексногоПроцесса() Экспорт
	
	РезультатыВыполнения = Новый СписокЗначений;
	
	ПеречислениеРезультатов = Перечисления.РезультатыВыполненияДействийКомплексныхПроцессов;
	
	РезультатыВыполнения.Добавить(
		ПеречислениеРезультатов.ЗавершеноСЛюбымРезультатом,
		НСтр("ru = 'Завершено успешно'; en = 'Completed successfully'"));
	
	Возврат РезультатыВыполнения;
	
КонецФункции

#Область КэшДанныхДействий

// Возвращает выбору данных действий.
//
// Параметры:
//  ПараметрыДействий - ТаблицаЗначений - параметры действий, соответствует табличной части
//                                        ПараметрыДействий схемы процесса.
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ПараметрыДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыДействий.Процесс
		|ПОМЕСТИТЬ ПараметрыДействий
		|ИЗ
		|	&ПараметрыДействий КАК ПараметрыДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомплексныйПроцесс.Ссылка,
		|	КомплексныйПроцесс.Наименование,
		|	КомплексныйПроцесс.СрокИсполненияПроцесса,
		|	КомплексныйПроцесс.Состояние,
		|	КомплексныйПроцесс.Завершен,
		|	КомплексныйПроцесс.ДатаЗавершения
		|ИЗ
		|	ПараметрыДействий КАК ПараметрыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО ПараметрыДействий.Процесс = КомплексныйПроцесс.Ссылка";
		
	Запрос.УстановитьПараметр("ПараметрыДействий", ПараметрыДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.КомплексныйПроцесс, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, СрокИсполненияПроцесса, Состояние, Завершен, ДатаЗавершения");
	Иначе
		РеквизитыОбъекта = Объект;
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Комплексный процесс: '; en = 'Composite process: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_РИБ

Процедура ОбработатьПолучениеПроцессаИзУзлаРИБ(Узел, ЭлементДанных) Экспорт
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	НеПередающиесяПоля = Новый Массив;
	НеПередающиесяПоля.Добавить("Контролер");
	НеПередающиесяПоля.Добавить("УдалитьКонтролер");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииКонтролера");
	
	Если ЭтотУзел = ЭлементДанных.УзелОбмена Тогда // Получение процесса в мастер-узле.
		
		ЗаписатьПроцесс = Ложь;
		
		ПроцессПоСсылке = ЭлементДанных.Ссылка.ПолучитьОбъект();
		
		// Добавляем новые предметы в текущий процесс
		КоличествоПредметовДоДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(
			ПроцессПоСсылке, ЭлементДанных.Предметы, ЭлементДанных.ПредметыЗадач);
		
		КоличествоПредметовПослеДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		Если КоличествоПредметовДоДобавления <> КоличествоПредметовПослеДобавления Тогда
			ЗаписатьПроцесс = Истина;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			ПроцессПоСсылке.ОбменДанными.Загрузка = Истина;
			ПроцессПоСсылке.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
			ПроцессПоСсылке.Записать();
		Иначе
			
			ОтправкаНазад = Ложь;
			
			// Сравниваем полученный процесс с процессом в мастер узле.
			// В случае отличий отправляем процесс обратно.
			МетаданныеЗадачи = ЭлементДанных.Ссылка.Метаданные();
			ИменаПолейДляСравнения = "";
			Разделитель = "";
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.Реквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.СтандартныеРеквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			
			СтруктураПроцессаПоСсылке = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцессаПоСсылке, ПроцессПоСсылке);
			
			СтруктураПроцесса = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ЭлементДанных);
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(СтруктураПроцессаПоСсылке, СтруктураПроцесса) Тогда
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.ДополнительныеРеквизиты.Выгрузить(),
					ЭлементДанных.ДополнительныеРеквизиты.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.Этапы.Выгрузить(),
					ЭлементДанных.Этапы.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.ПредшественникиЭтапов.Выгрузить(),
					ЭлементДанных.ПредшественникиЭтапов.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если ОтправкаНазад Тогда
				РаботаСБизнесПроцессами.ЗарегистрироватьИзмененияПроцессаЗадачи(ПроцессПоСсылке);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементДанных.Завершен Тогда // получение выполненного процесса в обычном узле
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
	Иначе
		
		// Принимает все пришедшие изменения, за исключением полей, которые
		// сохраняются для работы с процессом в текущем узле.
		ПоляДляПолучения = НеПередающиесяПоля;
		ПоляДляПолучения.Добавить("Предметы");
		ПоляДляПолучения.Добавить("ПредметыЗадач");
		
		ПоляПроцесса = СтрСоединить(ПоляДляПолучения, ",");
			
		РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ЭлементДанных.Ссылка, ПоляПроцесса);
			
		Предметы = РеквизитыПроцесса.Предметы.Выгрузить();
		РеквизитыПроцесса.Удалить("Предметы");
		
		ПредметыЗадач = РеквизитыПроцесса.ПредметыЗадач.Выгрузить();
		РеквизитыПроцесса.Удалить("ПредметыЗадач");
		
		// Восстанавливаем НеПередающиесяПоля по ссылке процесса
		ЗаполнитьЗначенияСвойств(ЭлементДанных, РеквизитыПроцесса);
		
		// Дополняем переданные предметы, которые были ранее.
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(ЭлементДанных, Предметы, ПредметыЗадач);
		
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Печать карточки шаблона комплексного процесса.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", "Карточка комплексного процесса", 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПечатьКарточки(
				МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс
//
// Возвращаемое значение:
//  Соотвествие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	// Функция не предусмотрена для данного вида процессов.
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("ТипПроцесса", "КомплексныйПроцесс");
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Заголовок", НСтр("ru = 'Комплексные процессы'; en = 'Composite processes'"));
		Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПраваПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПолучитьПраваПоФайлам(Файлы, Пользователи);
	
КонецФункции

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
		
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер Тогда
		ИмяФормы = "БизнесПроцесс.КомплексныйПроцесс.Форма.ФормаЗадачиКонтролера";		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Если ТочкаМаршрутаСсылка <> БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс Тогда
		Результат.Вставить("ИмяФормы", ИмяФормы);
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
				
	Возврат МассивПользователей;
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Предназначен для автоматизации составных процессов. Состоит из произвольного количества запланированных действий (типовых процессов), которые выполняются по заранее настроенному порядку и при определенных условиях.'; en = 'Is used for automation of composite processes. Consists of an arbitrary number of planned actions (model processes) that run in a predefined order and depending on certain conditions.'");
	
КонецФункции

Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныКомплексныхБизнесПроцессов";
	
КонецФункции

// Проверяет, что процесс завершился удачно
// Параметры:
//	Ссылка - ссылка на комплексный процесс
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Завершен");
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает результат выполнения - значение перечисления ВариантыВыполненияПроцессовИЗадач
Функция РезультатВыполненияПроцесса(Ссылка) Экспорт
	
	ЗавершилсяУдачно = ПроцессЗавершилсяУдачно(Ссылка);
	
	Если ЗавершилсяУдачно Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	Иначе
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	КонецЕсли;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Процесс, 
		"Автор, 
		|Контролер,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;		
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка, 
		"Автор, Контролер");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, 
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Возврат "";

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.КомплексныйПроцесс.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варианты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.КомплексныйПроцесс - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   БизнесПроцесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
			ЗадачаСсылка,
			БизнесПроцессСсылка,
			ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Контролер Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Снять с контроля'; en = 'Stop monitoring'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


#КонецЕсли
