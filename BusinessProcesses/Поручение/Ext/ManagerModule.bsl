#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей Процесса
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     Описание
//     Исполнитель
//     ИспользуетсяСОбъектамиАдресации
//     СрокИсполненияПроцесса
//     Важность
//     Проверяющий
//     Контролер
//     Автор
//     Предметы
//
Функция ПолучитьСтруктуруПроцесса() Экспорт
	
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("Наименование");
	ПараметрыПроцесса.Вставить("Описание");
	ПараметрыПроцесса.Вставить("Исполнитель");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланИсполнителя");
	ПараметрыПроцесса.Вставить("СрокИсполнения");
	ПараметрыПроцесса.Вставить("СрокИсполненияДни");
	ПараметрыПроцесса.Вставить("СрокИсполненияЧасы");
	ПараметрыПроцесса.Вставить("СрокИсполненияМинуты");
	ПараметрыПроцесса.Вставить("ВариантУстановкиСрокаИсполнения");
	ПараметрыПроцесса.Вставить("Важность");
	ПараметрыПроцесса.Вставить("Проверяющий");
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатов");
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатовДни");
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатовЧасы");
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатовМинуты");
	ПараметрыПроцесса.Вставить("ВариантУстановкиСрокаОбработкиРезультатов");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланПроверяющего");
	ПараметрыПроцесса.Вставить("Контролер");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланКонтролера");
	ПараметрыПроцесса.Вставить("Проект");
	ПараметрыПроцесса.Вставить("ПроектнаяЗадача");
	ПараметрыПроцесса.Вставить("Автор");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("Предмет");
	
	ПараметрыПроцесса.Вставить("Предметы", Предметы);
	
	Возврат ПараметрыПроцесса;
	
КонецФункции

// Создает, записывает, при необходимости стартует бизнес процесс.
//
// Параметры:
//   СтруктураПроцесса - Структура - структура полей процесса.
//
Процедура СоздатьПроцесс(СтруктураПроцесса, ЗапуститьПроцесс = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	НовыйПроцесс = СоздатьБизнесПроцесс();
	НовыйПроцесс.Заполнить(Новый Структура);
	ЗаполнитьЗначенияСвойств(НовыйПроцесс, СтруктураПроцесса,, "Предметы");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("ИмяПредмета");
	Предметы.Колонки.Добавить("ИмяПредметаОснование");
	Предметы.Колонки.Добавить("Предмет");
	Предметы.Колонки.Добавить("ШаблонОснование");
	Предметы.Колонки.Добавить("ТипОпределен");
	
	Для Каждого Предмет Из СтруктураПроцесса.Предметы Цикл
		
		НоваяСтрокаПредмет = Предметы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПредмет, Предмет);
		НоваяСтрокаПредмет.ИмяПредмета = МультипредметностьВызовСервера.
		ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(НоваяСтрокаПредмет.Предмет);
		
	КонецЦикла;
	
	Мультипредметность.ПередатьПредметыПроцессу(НовыйПроцесс, Предметы);
	
	НовыйПроцесс.Записать();
	
	Если ЗапуститьПроцесс Тогда
		
		Если НЕ НовыйПроцесс.ПроверитьЗаполнение() Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось запустить процесс.'; en = 'Could not start the process.'");
			
		КонецЕсли;
		
		СтартПроцессовСервер.СтартоватьПроцесс(НовыйПроцесс);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|Исполнитель,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|Контролер,
		|СрокИсполненияПроцесса,
		|Проверяющий,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовЧасы,
		|СрокОбработкиРезультатовМинуты";
	
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"ТрудозатратыПланИсполнителя, ТрудозатратыПланКонтролера, ТрудозатратыПланПроверяющего");
		
	Трудозатраты = 0;
		
	Если ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланИсполнителя;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланКонтролера;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланПроверяющего;
	КонецЕсли;
	
	Возврат Трудозатраты;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда
		Представление = НСтр("ru = 'Выполнено.'; en = 'Executed.'");
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		РезультатВыполнения = РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.
			РезультатВыполненияПоОбъекту(ЗадачаОбъект.Ссылка);
		Если РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			Представление = НСтр("ru = 'Завершено.'; en = 'Completed.'");
		Иначе
			Представление = НСтр("ru = 'Возврат.'; en = 'Return.'");
		КонецЕсли;
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
			Представление = НСтр("ru = 'Снято с контроля.'; en = 'Monitoring stopped.'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.Поручение - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"Исполнитель,
		|Проверяющий,
		|Контролер,
		|СрокИсполненияПроцесса,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|СрокИсполненияПроцесса,
		|ВариантУстановкиСрокаИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|Стартован,
		|ДатаЗавершения");
		
	Исполнитель = РеквизитыПроцесса.Исполнитель;
	Проверяющий = РеквизитыПроцесса.Проверяющий;
	Контролер = РеквизитыПроцесса.Контролер;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	Стартован = РеквизитыПроцесса.Стартован;
	
	ДатыИсполненияУчастников = ДатыИсполненияУчастников(Процесс);
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Исполнитель
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель: '; en = 'Performer: '"));
		
		ЗадачаИсполнителя = ОбзорПроцессовВызовСервера.ПолучитьЗадачуПроцесса(
			Процесс, БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
		Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			
			ЗадачаМассив = Новый Массив;
			ЗадачаМассив.Добавить(ЗадачаИсполнителя);
			РезультатСоответствие 
				= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаМассив, "Задача");
			Если РезультатСоответствие.Количество() <> 0 Тогда	
					
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				КонецЕсли;
					
			КонецЕсли;		
			
		КонецЕсли;	
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель, "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполнения) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<br>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок исполнения:'; en = 'Due date:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокИсполнения, 
			РеквизитыПроцесса.СрокИсполненияДни, 
			РеквизитыПроцесса.СрокИсполненияЧасы, 
			РеквизитыПроцесса.СрокИсполненияМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаИсполнения);
		
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("Исполнитель");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ТекущаяДатаСеанса, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокИсполнения < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
		
	// Проверяющий
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Проверяющий: '; en = 'Verifier: '"));
		
		ЗадачаИсполнителя = ОбзорПроцессовВызовСервера.ПолучитьЗадачуПроцесса(
			Процесс, БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить);
		Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			
			ЗадачаМассив = Новый Массив;
			ЗадачаМассив.Добавить(ЗадачаИсполнителя);
			РезультатСоответствие 
				= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаМассив, "Задача");
			Если РезультатСоответствие.Количество() <> 0 Тогда	
					
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				КонецЕсли;
					
			КонецЕсли;		
			
		КонецЕсли;	
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Проверяющий, "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатов) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<br>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок проверки:'; en = 'Verification due date:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокОбработкиРезультатов, 
			РеквизитыПроцесса.СрокОбработкиРезультатовДни, 
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы, 
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаОбработкиРезультатов);
			
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("Проверяющий");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ТекущаяДатаСеанса, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокОбработкиРезультатов < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
	
	// Контролер
	Если Не Стартован И ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '; en = 'Monitor: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<p>";
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=v8doc:%1>%2</A>",
		"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Поручение",
		НСтр("ru = 'Все задачи'; en = 'All tasks'"));
		
	Если ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'; en = 'Process due date:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, Формат(СрокИсполненияПроцесса, ФорматСрока), ЦветПредставленияСрока);
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печать карточки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "БизнесПроцесс.Поручение";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Поручение'; en = 'Order'");
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "Карточка", "Поручение", ПечатьКарточки(МассивОбъектов, ОбъектыПечати),,
				"БизнесПроцесс.Поручение.ПФ_MXL_Карточка");

	КонецЕсли;
		
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Ложь;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда
		Комментарий = НСтр("ru = 'Выполнено автоматически'; en = 'Executed automatically'");
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		Комментарий = НСтр("ru = 'Проверено автоматически'; en = 'Verified automatically'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковПорученияВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковПорученияВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВыполнениеЗадач

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("УникальныйИдентификаторФормыИзмененияПараметров") Тогда
		ПараметрыВыполнения.Вставить(
			"УникальныйИдентификаторФормыИзмененияПараметров", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда
		
		Исполнитель = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				БизнесПроцессСсылка, "Исполнитель");
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли")
			И Исполнитель <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
					
			ПоручениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			
			ПоручениеОбъект.Исполнитель = ПараметрыВыполнения.ИсполнительЗадачи;
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПоручениеОбъект, "ПростаяЗапись");
			
			РазблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
		
		ЗаписатьПроцесс = ПараметрыВыполнения.Свойство("ОтправленоНаДоработку")
			Или ПараметрыВыполнения.Свойство("ИсполнительЗадачи");
			
		Если ЗаписатьПроцесс Тогда
			ПоручениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ПоручениеОбъект.Ссылка);
		КонецЕсли;
			
		Если ПараметрыВыполнения.Свойство("ОтправленоНаДоработку") Тогда
			ПоручениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			ПоручениеОбъект.ДополнительныеСвойства.Вставить(
				"ОтправленоНаДоработку", ПараметрыВыполнения.ОтправленоНаДоработку);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(ПоручениеОбъект.Проверяющий) <> Тип("СправочникСсылка.ПолныеРоли")
			И ПоручениеОбъект.Проверяющий <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			ПоручениеОбъект.Проверяющий = ПараметрыВыполнения.ИсполнительЗадачи;
			
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПоручениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			РазблокироватьДанныеДляРедактирования(ПоручениеОбъект.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда
		
		Контролер = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				БизнесПроцессСсылка, "Контролер");
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(Контролер) <> Тип("СправочникСсылка.ПолныеРоли")
			И Контролер <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
					
			ПоручениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			
			ПоручениеОбъект.Контролер = ПараметрыВыполнения.ИсполнительЗадачи;
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПоручениеОбъект, "ПростаяЗапись");
			
			РазблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_РИБ

Процедура ОбработатьПолучениеПроцессаИзУзлаРИБ(Узел, ЭлементДанных) Экспорт
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	НеПередающиесяПоля = Новый Массив;
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресации");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииПроверяющего");
	НеПередающиесяПоля.Добавить("УдалитьИсполнитель");
	НеПередающиесяПоля.Добавить("Исполнитель");
	НеПередающиесяПоля.Добавить("Контролер");
	НеПередающиесяПоля.Добавить("УдалитьКонтролер");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресации");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииПроверяющего");
	НеПередающиесяПоля.Добавить("УдалитьПроверяющий");
	НеПередающиесяПоля.Добавить("Проверяющий");
	
	Если ЭтотУзел = ЭлементДанных.УзелОбмена Тогда // Получение процесса в мастер-узле.
		
		ЗаписатьПроцесс = Ложь;
		
		ПроцессПоСсылке = ЭлементДанных.Ссылка.ПолучитьОбъект();
		
		// Добавляем новые предметы в текущий процесс
		КоличествоПредметовДоДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(
			ПроцессПоСсылке, ЭлементДанных.Предметы, ЭлементДанных.ПредметыЗадач);
		
		КоличествоПредметовПослеДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		Если КоличествоПредметовДоДобавления <> КоличествоПредметовПослеДобавления Тогда
			ЗаписатьПроцесс = Истина;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			ПроцессПоСсылке.ОбменДанными.Загрузка = Истина;
			ПроцессПоСсылке.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
			ПроцессПоСсылке.Записать();
		Иначе
			
			ОтправкаНазад = Ложь;
		
			// Сравниваем полученный процесс с процессом в мастер узле.
			// В случае отличий отправляем процесс обратно.
			МетаданныеЗадачи = ЭлементДанных.Ссылка.Метаданные();
			ИменаПолейДляСравнения = "";
			Разделитель = "";
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.Реквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.СтандартныеРеквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			
			СтруктураПроцессаПоСсылке = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцессаПоСсылке, ПроцессПоСсылке);
			
			СтруктураПроцесса = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ЭлементДанных);
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(СтруктураПроцессаПоСсылке, СтруктураПроцесса) Тогда
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.ДополнительныеРеквизиты.Выгрузить(),
					ЭлементДанных.ДополнительныеРеквизиты.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.РезультатыПроверки.Выгрузить(),
					ЭлементДанных.РезультатыПроверки.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если ОтправкаНазад Тогда
				РаботаСБизнесПроцессами.ЗарегистрироватьИзмененияПроцессаЗадачи(ПроцессПоСсылке);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементДанных.Завершен Тогда // получение выполненного процесса в обычном узле
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
	Иначе
		
		// Принимает все пришедшие изменения, за исключением полей, которые
		// сохраняются для работы с процессом в текущем узле.
		ПоляДляПолучения = НеПередающиесяПоля;
		ПоляДляПолучения.Добавить("Предметы");
		ПоляДляПолучения.Добавить("ПредметыЗадач");
		ПоляДляПолучения.Добавить("СрокИсполнения");
		
		ПоляПроцесса = СтрСоединить(ПоляДляПолучения, ",");
			
		РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ЭлементДанных.Ссылка, ПоляПроцесса);
			
		Предметы = РеквизитыПроцесса.Предметы.Выгрузить();
		РеквизитыПроцесса.Удалить("Предметы");
		
		ПредметыЗадач = РеквизитыПроцесса.ПредметыЗадач.Выгрузить();
		РеквизитыПроцесса.Удалить("ПредметыЗадач");
		
		// Восстанавливаем НеПередающиесяПоля по ссылке процесса
		ЗаполнитьЗначенияСвойств(ЭлементДанных, РеквизитыПроцесса);
		
		// Дополняем переданные предметы, которые были ранее.
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(ЭлементДанных, Предметы, ПредметыЗадач);
		
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Поручение - ссылка на процесс
//
// Возвращаемое значение:
//  Соотвествие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыИсполнения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	// Получение даты исполнения исполнителем.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Поручение.ТочкаМаршрута.Выполнить)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Исполнитель", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	// Получение даты исполнения обработки результов.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Поручение.ТочкаМаршрута.Проверить)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Проверяющий", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	Возврат ДатыИсполнения;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_УчетПереносовСроковИсполнения

// Устанавливает срок исполнителю задачи в процессе.
//
// Параметры:
//  Срок - Дата - новый срок исполнителя.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  Процесс - БизнесПроцессОбъект - изменяемый процесс.
//  ПараметрыИзмененногоРеквизита - Структура - параметры измененного реквизита процесса.
//   * РеквизитТаблицаСИзмененнымСроком - Строка - имя реквизита или табличной части процесса.
//   * ИндексСтроки - Число - индекс строки табличной части. Присутствует если изменяется табличная часть.
//
Процедура УстановитьСрокИсполнителяЗадачиВПроцессе(
	Срок, Задача, Процесс, ПараметрыИзмененногоРеквизита) Экспорт
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	ПараметрыИзмененногоРеквизита.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	ПараметрыИзмененногоРеквизита.Вставить("ИндексСтроки", 0);
	
	ТочкаМаршрутаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ТочкаМаршрута");
	
	Если ТочкаМаршрутаЗадачи = ТочкиМаршрута.Выполнить Тогда
		Процесс.СрокИсполнения = Срок;
		
		Процесс.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокИсполнения";
		
	ИначеЕсли ТочкаМаршрутаЗадачи = ТочкиМаршрута.Проверить Тогда
		Процесс.СрокОбработкиРезультатов = Срок;
		
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов";
	КонецЕсли;
	
КонецПроцедуры

// Переносит срок исполнения задачи процесса Исполенипя по заявке.
// При переносе обновляются сроки в текущем и зависимых процессах.
//
// Параметры:
//  НовыйСрок - Дата - новый срок задачи.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  Процесс - БизнесПроцессСсылка - ссылка на процесс задачи.
//  ПричинаПереносаСрока - Строка - причина, по которой переносится срок задачи.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Процедура ИзменитьСрокИсполненияЗадачи(
	НовыйСрок, Задача, Процесс, ПричинаПереносаСрока, ЗаявкаНаПеренос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	СтарыеУчастникиПроцесса = ТекущиеУчастникиПроцесса(ПроцессОбъект);
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	
	УстановитьСрокИсполнителяЗадачиВПроцессе(
		НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
	
	Если ПараметрыИзмененногоРеквизита.Количество() > 0 Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", ЗаявкаНаПеренос);
		
		ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
		
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ПроцессОбъект, ПараметрыЗаписи);
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчета;
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = 
			ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиПоручения(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(
			ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов");
		
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("ТипПроцесса", "Поручение");
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Заголовок", НСтр("ru = 'Поручения'; en = 'Orders'"));
		Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.Поручение"));
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПраваПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПолучитьПраваПоФайлам(Файлы, Пользователи);
	
КонецФункции

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда 
		
		ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиИсполнителя";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда 
		
		ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиПроверяющего";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда 
		
		ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиКонтролера";
		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда 
		
		ПоручениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПоручениеОбъект.Ссылка);
		НоваяСтрока = ПоручениеОбъект.РезультатыПроверки.Добавить();
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ОтправленоНаДоработку = Ложь;
		ПоручениеОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры	

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Исполнитель = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Исполнитель = Реквизиты.РольИсполнителя;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Проверяющий = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Проверяющий = Реквизиты.РольИсполнителя;
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда  
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Контролер = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Контролер = Реквизиты.РольИсполнителя;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаПоручения";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поручение.Автор,
	|	Поручение.Важность,
	|	Поручение.Дата,
	|	Поручение.Исполнитель,
	|	Поручение.Наименование,
	|	Поручение.Номер,
	|	Поручение.Описание,
	|	Поручение.СрокИсполнения,
	|	Поручение.Ссылка,
	|	Поручение.Контролер,
	|	Поручение.Проверяющий,
	|	Поручение.Предметы.(
	|		ИмяПредмета,
	|		Предмет
	|	)
	|ИЗ
	|	БизнесПроцесс.Поручение КАК Поручение
	|ГДЕ
	|	Поручение.Ссылка В(&МассивОбъектов)";
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Поручение.ПФ_MXL_Карточка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	ПервыйДокумент = Истина;
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		ОбластьЗаголовок.Параметры.Номер = Выборка.Номер;
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка.Параметры.Заполнить(Выборка);
		ВыборкаПредметы = Выборка.Предметы.Выбрать();
		СтрокаПредметов = "";
		КоличествоПредметов = 0;
		Пока ВыборкаПредметы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПредметы.Предмет) Тогда
				СтрокаПредметов = СтрокаПредметов + ?(ПустаяСтрока(СтрокаПредметов),"", "," + Символы.ПС) 
					+ ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(ВыборкаПредметы.Предмет, ВыборкаПредметы.ИмяПредмета);
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли
		КонецЦикла;
		
		ОбластьШапка.Параметры.ПредметЗаголовок = ?(КоличествоПредметов > 1, НСтр("ru='Предметы'; en = 'Subjects'"), НСтр("ru='Предмет'; en = 'Subject'"));
		ОбластьШапка.Параметры.Предмет = ?(ЗначениеЗаполнено(СтрокаПредметов), СтрокаПредметов, "не задан");
		ОбластьШапка.Параметры.Проверяющий = ?(ЗначениеЗаполнено(Выборка.Проверяющий), Выборка.Проверяющий, "-");
		ОбластьШапка.Параметры.Контролер = ?(ЗначениеЗаполнено(Выборка.Контролер), Выборка.Контролер, "-");
		
		ОбластьШапка.Параметры.СрокИсполнения = Формат(Выборка.СрокИсполнения, ФорматДаты); 
		ОбластьШапка.Параметры.Дата = Формат(Выборка.Дата, ФорматДаты); 
		ТабличныйДокумент.Вывести(ОбластьШапка);

		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, "Автор, Контролер, Проверяющий");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		МассивПользователей.Добавить(Реквизиты.Контролер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		МассивПользователей.Добавить(Реквизиты.Проверяющий);
	КонецЕсли;
			
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныПоручения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для выдачи простого задания одному сотруднику с возможностью одновременного контроля и проверки результата выполнения.'; en = 'Is used to issue a simple order to one employee with the ability to monitor and verify the results of execution.'");
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Завершен");
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Процесс, 
		"Автор, 
		|Контролер,
		|Проверяющий,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Проверяющий;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			МассивПользователей.Добавить(ДанныеУчастника);
		КонецЕсли;
			
	КонецЕсли;	
			
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка, 
		"Автор, 
		| Исполнитель,
		| Контролер, 
		| Проверяющий");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнитель
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Исполнитель);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Проверяющий);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	Если Задача.ДополнительныеСвойства.Свойство("ПредыдущийИсполнитель")
		И Задача.ДополнительныеСвойства.ПредыдущийИсполнитель <> Задача.Исполнитель Тогда
		
		ПредставлениеИсполнителя = НСтр("ru = '%1 (вместо %2)'; en = '%1 (instead %2)'");
		ПредставлениеИсполнителя = СтрШаблон(
			ПредставлениеИсполнителя,
			Строка(Задача.Исполнитель),
			Строка(Задача.ДополнительныеСвойства.ПредыдущийИсполнитель));
			
		ра_РаботаСПроцессами.ДобавитьЗаписьПоФактическомуИсполнителю(Задача, ПредставлениеИсполнителя);
		
	Иначе
		ПредставлениеИсполнителя = Строка(Задача.Исполнитель);
	КонецЕсли;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтрШаблон(ОписаниеСобытияФормат,
		Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
		ПредставлениеИсполнителя);
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута;
	
	Действие = "";
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Выполнить Тогда
		
		Действие = НСтр("ru = 'Поручение выполнено'; en = 'Order executed'");
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Проверить Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ПоручениеРезультатыПроверки.ОтправленоНаДоработку
			|ИЗ
			|	БизнесПроцесс.Поручение.РезультатыПроверки КАК ПоручениеРезультатыПроверки
			|ГДЕ
			|	ПоручениеРезультатыПроверки.ЗадачаИсполнителя = &ЗадачаИсполнителя");
			
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", Задача.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.ОтправленоНаДоработку Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
				Действие = НСтр("ru = 'Поручение возвращено на доработку'; en = 'Order returned for revision'");
			Иначе
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				Действие = НСтр("ru = 'Поручение завершено'; en = 'Order completed'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(Задача.РезультатВыполнения), ":" + Символы.ПС, ".")
						  + Задача.РезультатВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Исполнитель
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнитель",
		Ложь));
		
	// Проверяющий
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проверяющий",
		Истина));
		
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.Поручение.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Возврат "";

КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варианты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Поручение - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   БизнесПроцесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Выполнено'; en = 'Executed'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Снять с контроля'; en = 'Stop monitoring'"));
			
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Завершить поручение'; en = 'Complete order'"));
			
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Вернуть на доработку'; en = 'Return for revision'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


#КонецЕсли
