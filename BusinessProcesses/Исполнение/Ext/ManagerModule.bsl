#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|Контролер,
		|СрокИсполненияПроцесса,
		|Проверяющий,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовЧасы,
		|СрокОбработкиРезультатовМинуты,
		|Исполнители";
		
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке,, "Исполнители");
		Участники.Исполнители = РеквизитыПроцессаПоСсылке.Исполнители.Выгрузить();
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс,, "Исполнители");
		Участники.Исполнители = Процесс.Исполнители.Выгрузить();
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"ТрудозатратыПланКонтролера, ТрудозатратыПланПроверяющего, Исполнители");
		
	Трудозатраты = 0;
		
	Если ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение
		ИЛИ ТочкаМаршрута = ТочкиМаршрута.Исполнить Тогда
		
		Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
		СтрокаИсполнителя = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
		Если СтрокаИсполнителя <> Неопределено Тогда
			Трудозатраты = СтрокаИсполнителя.ТрудозатратыПланИсполнителя;
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланКонтролера;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланПроверяющего;
	КонецЕсли;
	
	Возврат Трудозатраты;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение Тогда
		Представление = НСтр("ru = 'Исполнено и проверено.'; en = 'Performed and verified.'");
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Исполнить Тогда
		Представление = НСтр("ru = 'Исполнено.'; en = 'Performed.'");
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		РезультатВыполненияЗадачи = РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.
			РезультатВыполненияПоОбъекту(ЗадачаОбъект.Ссылка);
			
		Если РезультатВыполненияЗадачи = 
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			
			Представление = НСтр("ru = 'Завершено.'; en = 'Completed.'");
		Иначе
			Представление = НСтр("ru = 'Возврат.'; en = 'Return.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.Исполнение - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"ВариантИсполнения,
		|Исполнители,
		|Проверяющий,
		|Контролер,
		|СрокИсполненияПроцесса,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|КоличествоИтераций,
		|Стартован,
		|ДатаЗавершения");
		
	ВариантИсполнения = РеквизитыПроцесса.ВариантИсполнения;
	Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Проверяющий = РеквизитыПроцесса.Проверяющий;
	Контролер = РеквизитыПроцесса.Контролер;
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	Стартован = РеквизитыПроцесса.Стартован;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ЗадачаИсполнителяМассив = Исполнители.ВыгрузитьКолонку("ЗадачаИсполнителя");
	
	ДатыИсполненияУчастников = ДатыИсполненияУчастников(Процесс);
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	СмешанныйВариантИсполнения = 
			ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно");
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Формирование строк таблицы
	Если Исполнители.Количество() > 0 Тогда
		
		РезультатСоответствие 
			= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаИсполнителяМассив, "Задача");
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		Если СмешанныйВариантИсполнения Тогда
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Шаг'; en = 'Step'"));
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		Если РезультатСоответствие.Количество() <> 0 Тогда
			// статус исполнения - в шапке пусто
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель'; en = 'Performer'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""140"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'; en = 'Due date'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 1;
		
		//Заполнение таблицы исполнителями
		Для Каждого Исполнитель Из Исполнители Цикл
			HTMLТекст = HTMLТекст + "<tr>";
			
			Если СмешанныйВариантИсполнения Тогда
				
				Если Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НомерШага = НомерШага + 1;
				КонецЕсли;
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НомерШага, "");
				HTMLТекст = HTMLТекст + "</td>";
			КонецЕсли;
			
			// статус исполнения
			Если РезультатСоответствие.Количество() <> 0 Тогда
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(Исполнитель.ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				Иначе
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
				КонецЕсли;	
				HTMLТекст = HTMLТекст + "</td>";
				
			КонецЕсли;	
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			
			Если Исполнитель.Ответственный Тогда
				HTMLТекст = HTMLТекст + "<B>";
			КонецЕсли;
			
			ЦветТекста = "";
			Если Исполнитель.Пройден
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "<FONT color=""" + ЦветЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = ЦветЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗадачу(HTMLТекст, Исполнитель.ЗадачаИсполнителя, 
				Исполнитель.Исполнитель);
			
			Если Исполнитель.Пройден 
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			
			Если Исполнитель.Ответственный Тогда
				HTMLТекст = HTMLТекст + "</B>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""140"">";
				
			ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				Исполнитель.СрокИсполнения, Исполнитель.СрокИсполненияДни, 
				Исполнитель.СрокИсполненияЧасы, Исполнитель.СрокИсполненияМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, Исполнитель.ВариантУстановкиСрокаИсполнения);
			
			ЦветПредставленияСрока = "";
			Если ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
				ДатаИсполнения = ДатыИсполненияУчастников.Получить(Исполнитель.ЗадачаИсполнителя);
				Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
					ДатаИсполнения = Мин(ТекущаяДатаСеанса, ДатаИсполнения);
				Иначе
					ДатаИсполнения = ТекущаяДатаСеанса;
				КонецЕсли;
				
				ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
				
				Если Исполнитель.СрокИсполнения < ДатаИсполнения Тогда
					ЦветПредставленияСрока = ЦветПросроченныеДанные;
				КонецЕсли;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
				HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
				
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		Если ЗначениеЗаполнено(ВариантИсполнения) Тогда
			ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Направлять: %1'; en = 'Send: %1'");
			ПредставлениеРеквизитаНаправлять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРеквизитаНаправлять,
				Строка(ВариантИсполнения));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеРеквизитаНаправлять, ЦветЗакрытыеНеактуальныеЗаписи);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Исполнение",
			НСтр("ru = 'Все задачи'; en = 'All tasks'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Проверяющий: '; en = 'Verifier: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Проверяющий, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатов) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок проверки:'; en = 'Verification due date:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокОбработкиРезультатов, 
			РеквизитыПроцесса.СрокОбработкиРезультатовДни, 
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы, 
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаОбработкиРезультатов);
		
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("Проверяющий");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ТекущаяДатаСеанса, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокОбработкиРезультатов < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
	
	// Контролер
	Если Не Стартован И ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '; en = 'Monitor: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'; en = 'Process due date:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, Формат(СрокИсполненияПроцесса, ФорматСрока), ЦветПредставленияСрока);
		
		Если РеквизитыПроцесса.КоличествоИтераций <> 0 Тогда
			
			HTMLТекст = HTMLТекст + " (";
			
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Кол. циклов:'; en = 'Cycle count:'"));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, 
				Формат(РеквизитыПроцесса.КоличествоИтераций, "ЧЦ=2"), "");
			
			HTMLТекст = HTMLТекст + ")";
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Истина;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		
		Если Параметры.Свойство("ВариантВыполнения") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.ВариантВыполнения <>
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
		ИначеЕсли Параметры.Свойство("ОтправленоНаДоработку") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач = Не Параметры.ОтправленоНаДоработку;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Исполнить
		Или ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение Тогда
		Комментарий = НСтр("ru = 'Исполнено автоматически'; en = 'Performed automatically'");
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		Комментарий = НСтр("ru = 'Проверено автоматически'; en = 'Verified automatically'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковИсполненияВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковИсполненияВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВыполнениеЗадач

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("УникальныйИдентификаторФормыИзмененияПараметров") Тогда
		ПараметрыВыполнения.Вставить(
			"УникальныйИдентификаторФормыИзмененияПараметров", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.Исполнить
		Или ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОтветственноеИсполнение Тогда
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи") Тогда
			ИсполнителиПроцесса = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				БизнесПроцессСсылка, "Исполнители").Выгрузить();
				
			СтрИсполнитель = ИсполнителиПроцесса.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
			
			Если СтрИсполнитель <> Неопределено
				И ТипЗнч(СтрИсполнитель.Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли")
				И СтрИсполнитель.Исполнитель <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
				
				ЗаблокироватьДанныеДляРедактирования(
					БизнесПроцессСсылка,,
					ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
					
				ИсполнениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
				
				СтрИсполнитель = ИсполнениеОбъект.Исполнители.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
				Если СтрИсполнитель <> Неопределено Тогда
					СтрИсполнитель.Исполнитель = ПараметрыВыполнения.ИсполнительЗадачи;
				КонецЕсли;
				
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(ИсполнениеОбъект, "ПростаяЗапись");
				
				РазблокироватьДанныеДляРедактирования(
					БизнесПроцессСсылка,
					ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.Проверить Тогда
	
		ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
		ИсполнениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ИсполнениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
		
		Если ПараметрыВыполнения.Свойство("Исполнители") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("Исполнители", ПараметрыВыполнения.Исполнители);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("РезультатыПроверки") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("РезультатыПроверки", ПараметрыВыполнения.РезультатыПроверки);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("СрокИсполненияПроцесса") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"СрокИсполненияПроцесса", ПараметрыВыполнения.СрокИсполненияПроцесса);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("КоличествоИтераций") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"КоличествоИтераций", ПараметрыВыполнения.КоличествоИтераций);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"ВариантУстановкиСрокаОбработкиРезультатов", ПараметрыВыполнения.ВариантУстановкиСрокаОбработкиРезультатов);
		КонецЕсли;
		Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатов") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"СрокОбработкиРезультатов", ПараметрыВыполнения.СрокОбработкиРезультатов);
		КонецЕсли;
		Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатовДни") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"СрокОбработкиРезультатовДни", ПараметрыВыполнения.СрокОбработкиРезультатовДни);
		КонецЕсли;
		Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатовЧасы") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"СрокОбработкиРезультатовЧасы", ПараметрыВыполнения.СрокОбработкиРезультатовЧасы);
		КонецЕсли;
		Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатовМинуты") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"СрокОбработкиРезультатовМинуты", ПараметрыВыполнения.СрокОбработкиРезультатовМинуты);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ПричинаПереносаСрока") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"ПричинаПереносаСрока", ПараметрыВыполнения.ПричинаПереносаСрока);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(ИсполнениеОбъект.Проверяющий) <> Тип("СправочникСсылка.ПолныеРоли")
			И ИсполнениеОбъект.Проверяющий <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			ИсполнениеОбъект.Проверяющий = ПараметрыВыполнения.ИсполнительЗадачи;
			
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ОтправленоНаДоработку") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"ОтправленоНаДоработку", ПараметрыВыполнения.ОтправленоНаДоработку);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить(
				"РезультатВыполнения", ПараметрыВыполнения.РезультатВыполнения);
		КонецЕсли;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ИсполнениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
		
		РазблокироватьДанныеДляРедактирования(
			БизнесПроцессСсылка,
			ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.Контролировать Тогда
		
		КонтролерПроцесса = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				БизнесПроцессСсылка, "Контролер");
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(КонтролерПроцесса) <> Тип("СправочникСсылка.ПолныеРоли")
			И КонтролерПроцесса <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
					
			ИсполнениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			
			ИсполнениеОбъект.Контролер = ПараметрыВыполнения.ИсполнительЗадачи;
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ИсполнениеОбъект, "ПростаяЗапись");
			
			РазблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,
				ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает возможные результаты выполнения действия комплексного процесса.
//
// Возвращаемое значение:
//  СписокЗначений
//   * Перечисление.РезультатыВыполненияДействийКомплексныхПроцессов
//
Функция РезультатыВыполненияДействияКомплексногоПроцесса() Экспорт
	
	РезультатыВыполнения = Новый СписокЗначений;
	
	ПеречислениеРезультатов = Перечисления.РезультатыВыполненияДействийКомплексныхПроцессов;
	
	РезультатыВыполнения.Добавить(
		ПеречислениеРезультатов.ЗавершеноСЛюбымРезультатом,
		НСтр("ru = 'Завершено успешно'; en = 'Completed successfully'"));
	
	Возврат РезультатыВыполнения;
	
КонецФункции

#Область КэшДанныхДействий

// Возвращает выбору данных действий.
//
// Параметры:
//  ПараметрыДействий - ТаблицаЗначений - параметры действий, соответствует табличной части
//                                        ПараметрыДействий схемы процесса.
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ПараметрыДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыДействий.Процесс
		|ПОМЕСТИТЬ ПараметрыДействий
		|ИЗ
		|	&ПараметрыДействий КАК ПараметрыДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Исполнение.Ссылка,
		|	Исполнение.Наименование,
		|	Исполнение.Исполнители,
		|	Исполнение.СрокИсполненияПроцесса,
		|	Исполнение.Состояние,
		|	Исполнение.Завершен,
		|	Исполнение.ДатаЗавершения
		|	
		|ИЗ
		|	ПараметрыДействий КАК ПараметрыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение КАК Исполнение
		|		ПО ПараметрыДействий.Процесс = Исполнение.Ссылка";
		
	Запрос.УстановитьПараметр("ПараметрыДействий", ПараметрыДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.Исполнение, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, Исполнители, СрокИсполненияПроцесса,
					|Состояние, Завершен, ДатаЗавершения");
		Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	Иначе
		РеквизитыОбъекта = Объект;
		Исполнители = Объект.Исполнители.Выгрузить();
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Исполнение: '; en = 'Performance: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	МассивИсполнителей = Новый Массив;
	Для Каждого СтрокаИсполнитель Из Исполнители Цикл
		РаботаСКомплекснымиБизнесПроцессамиСервер.ДобавитьИсполнителяПроцессаВМассив(
			МассивИсполнителей, СтрокаИсполнитель.Исполнитель);
	КонецЦикла;
	
	ДанныеПроцесса.Исполнители = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИсполнителиСтрокой(МассивИсполнителей);
		
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_РИБ

Процедура ОбработатьПолучениеПроцессаИзУзлаРИБ(Узел, ЭлементДанных) Экспорт
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	НеПередающиесяПоля = Новый Массив;
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииПроверяющего");
	НеПередающиесяПоля.Добавить("УдалитьКонтролер");
	НеПередающиесяПоля.Добавить("Контролер");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииПроверяющего");
	НеПередающиесяПоля.Добавить("УдалитьПроверяющий");
	НеПередающиесяПоля.Добавить("Проверяющий");
	
	НомерИтерацииПоСсылке = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ЭлементДанных.Ссылка, "НомерИтерации");
	ИтерацияИзменена = НомерИтерацииПоСсылке < ЭлементДанных.НомерИтерации;
	
	Если ЭтотУзел = ЭлементДанных.УзелОбмена Тогда // Получение процесса в мастер-узле.
		
		ЗаписатьПроцесс = Ложь;
		
		ПроцессПоСсылке = ЭлементДанных.Ссылка.ПолучитьОбъект();
		
		// Добавляем новые предметы в текущий процесс
		КоличествоПредметовДоДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(
			ПроцессПоСсылке, ЭлементДанных.Предметы, ЭлементДанных.ПредметыЗадач);
		
		КоличествоПредметовПослеДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		Если КоличествоПредметовДоДобавления <> КоличествоПредметовПослеДобавления Тогда
			ЗаписатьПроцесс = Истина;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			ПроцессПоСсылке.ОбменДанными.Загрузка = Истина;
			ПроцессПоСсылке.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
			ПроцессПоСсылке.Записать();
		Иначе
			
			ОтправкаНазад = Ложь;
			
			// Сравниваем полученный процесс с процессом в мастер узле.
			// В случае отличий отправляем процесс обратно.
			МетаданныеЗадачи = ЭлементДанных.Ссылка.Метаданные();
			ИменаПолейДляСравнения = "";
			Разделитель = "";
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.Реквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.СтандартныеРеквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			
			СтруктураПроцессаПоСсылке = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцессаПоСсылке, ПроцессПоСсылке);
			
			СтруктураПроцесса = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ЭлементДанных);
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(СтруктураПроцессаПоСсылке, СтруктураПроцесса) Тогда
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.ДополнительныеРеквизиты.Выгрузить(),
					ЭлементДанных.ДополнительныеРеквизиты.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.РезультатыИсполнения.Выгрузить(),
					ЭлементДанных.РезультатыИсполнения.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если ОтправкаНазад Тогда
				РаботаСБизнесПроцессами.ЗарегистрироватьИзмененияПроцессаЗадачи(ПроцессПоСсылке);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлементДанных.Завершен Тогда // получение выполненного процесса в обычном узле
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
	ИначеЕсли ИтерацияИзменена Тогда
		
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		
		// Восстанавливаем поля контролера
		ПоляПроцесса = СтрСоединить(НеПередающиесяПоля, ",");
			
		РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ЭлементДанных.Ссылка, ПоляПроцесса);
			
		ЗаполнитьЗначенияСвойств(ЭлементДанных, РеквизитыПроцесса,
			"Контролер");
		
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
		
	Иначе
		// Принимает все пришедшие изменения, за исключением полей, которые
		// сохраняются для работы с процессом в текущем узле.
		ПоляДляПолучения = НеПередающиесяПоля;
		ПоляДляПолучения.Добавить("Предметы");
		ПоляДляПолучения.Добавить("ПредметыЗадач");
		ПоляДляПолучения.Добавить("Исполнители");
		ПоляДляПолучения.Добавить("РезультатыПроверки");
		ПоляДляПолучения.Добавить("РезультатыИсполнения");
		
		ПоляПроцесса = СтрСоединить(ПоляДляПолучения, ",");
		
		РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		ЭлементДанных.Ссылка, ПоляПроцесса);
		
		Предметы = РеквизитыПроцесса.Предметы.Выгрузить();
		РеквизитыПроцесса.Удалить("Предметы");
		
		ПредметыЗадач = РеквизитыПроцесса.ПредметыЗадач.Выгрузить();
		РеквизитыПроцесса.Удалить("ПредметыЗадач");
		
		Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
		РеквизитыПроцесса.Удалить("Исполнители");
		
		РезультатыПроверки = РеквизитыПроцесса.РезультатыПроверки.Выгрузить();
		РеквизитыПроцесса.Удалить("РезультатыПроверки");
		
		РезультатыИсполнения = РеквизитыПроцесса.РезультатыИсполнения.Выгрузить();
		РеквизитыПроцесса.Удалить("РезультатыИсполнения");
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерИтерации", ЭлементДанных.НомерИтерации);
		
		ЗагруженныйПроцессВТочкеМаршрутаПроверить =
			ЭлементДанных.РезультатыПроверки.НайтиСтроки(Отбор).Количество() > 0;
			
		Если Не ЗагруженныйПроцессВТочкеМаршрутаПроверить Тогда
			
			ПроцессПоСсылкеВТочкеМаршрутаПроверить =
				РезультатыПроверки.НайтиСтроки(Отбор).Количество() > 0;
			Если ПроцессПоСсылкеВТочкеМаршрутаПроверить Тогда
				ЭлементДанных.РезультатыПроверки.Загрузить(РезультатыПроверки);
				ЭлементДанных.РезультатыИсполнения.Загрузить(РезультатыИсполнения);
				ЭлементДанных.Исполнители.Загрузить(Исполнители);
			Иначе
				// Восстанавливаем исполнителей у задач.
				Для Каждого СтрИсполнитель Из Исполнители Цикл
					
					Если Не ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
						Продолжить;
					КонецЕсли;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ЗадачаИсполнителя", СтрИсполнитель.ЗадачаИсполнителя);
					
					НайденныеСтроки = ЭлементДанных.Исполнители.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НайденныеСтроки[0].Исполнитель = СтрИсполнитель.Исполнитель;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Восстанавливаем НеПередающиесяПоля по ссылке процесса
		ЗаполнитьЗначенияСвойств(ЭлементДанных, РеквизитыПроцесса);
		
		// Дополняем переданные предметы, которые были ранее.
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(ЭлементДанных, Предметы, ПредметыЗадач);
		
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПодсистемаПечать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Исполнение - ссылка на процесс
//
// Возвращаемое значение:
//  Соотвествие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыИсполнения = Новый Соответствие;
	
	НомерИтерации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Процесс, "НомерИтерации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	// Получение дата исполнения исполнителями.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнениеРезультатыИсполнения.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
		|	Задачи.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыИсполнения КАК ИсполнениеРезультатыИсполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ИсполнениеРезультатыИсполнения.ЗадачаИсполнителя = Задачи.Ссылка
		|ГДЕ
		|	ИсполнениеРезультатыИсполнения.Ссылка = &Процесс
		|	И ИсполнениеРезультатыИсполнения.НомерИтерации = &НомерИтерации";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатыИсполнения.Вставить(Выборка.ЗадачаИсполнителя, Выборка.ДатаИсполнения);
	КонецЦикла;
	
	// Получение даты исполнения обработки результов.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Задачи.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = Задачи.Ссылка
		|ГДЕ
		|	ИсполнениеРезультатыПроверки.Ссылка = &Процесс
		|	И ИсполнениеРезультатыПроверки.НомерИтерации = &НомерИтерации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Проверяющий", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	Возврат ДатыИсполнения;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_УчетПереносовСроковИсполнения

// Устанавливает срок исполнителю задачи в процессе.
//
// Параметры:
//  Срок - Дата - новый срок исполнителя.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  Процесс - БизнесПроцессОбъект - изменяемый процесс.
//  ПараметрыИзмененногоРеквизита - Структура - параметры измененного реквизита процесса.
//   * РеквизитТаблицаСИзмененнымСроком - Строка - имя реквизита или табличной части процесса.
//   * ИндексСтроки - Число - индекс строки табличной части. Присутствует если изменяется табличная часть.
//
Процедура УстановитьСрокИсполнителяЗадачиВПроцессе(
	Срок, Задача, Процесс, ПараметрыИзмененногоРеквизита) Экспорт
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	ПараметрыИзмененногоРеквизита.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	ПараметрыИзмененногоРеквизита.Вставить("ИндексСтроки", 0);
	
	ТочкаМаршрутаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ТочкаМаршрута");
	
	Если ТочкаМаршрутаЗадачи = ТочкиМаршрута.ОтветственноеИсполнение
		Или ТочкаМаршрутаЗадачи = ТочкиМаршрута.Исполнить Тогда
		
		СтрИсполнителя = Процесс.Исполнители.Найти(Задача, "ЗадачаИсполнителя");
			Если СтрИсполнителя <> Неопределено Тогда
				СтрИсполнителя.СрокИсполнения = Срок;
				
				СтрИсполнителя.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				
				ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "Исполнители";
				ПараметрыИзмененногоРеквизита.ИндексСтроки = Процесс.Исполнители.Индекс(СтрИсполнителя);
			КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаЗадачи = ТочкиМаршрута.Проверить Тогда
		Процесс.СрокОбработкиРезультатов = Срок;
		
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов";
	КонецЕсли;
	
КонецПроцедуры

// Переносит срок исполнения задачи процесса Исполенипя по заявке.
// При переносе обновляются сроки в текущем и зависимых процессах.
//
// Параметры:
//  НовыйСрок - Дата - новый срок задачи.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  Процесс - БизнесПроцессСсылка - ссылка на процесс задачи.
//  ПричинаПереносаСрока - Строка - причина, по которой переносится срок задачи.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Процедура ИзменитьСрокИсполненияЗадачи(
	НовыйСрок, Задача, Процесс, ПричинаПереносаСрока, ЗаявкаНаПеренос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	СтарыеУчастникиПроцесса = ТекущиеУчастникиПроцесса(ПроцессОбъект);
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	
	УстановитьСрокИсполнителяЗадачиВПроцессе(
		НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
	
	Если ПараметрыИзмененногоРеквизита.Количество() > 0 Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", ЗаявкаНаПеренос);
		
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ПроцессОбъект, ПараметрыЗаписи);
			
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
			
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = 
			ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
			
		ПараметрыДляРасчетаСроков.ИндексСтроки = 
			ПараметрыИзмененногоРеквизита.ИндексСтроки;
			
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(
			ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов");
		
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("ТипПроцесса", "Исполнение");
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Заголовок", НСтр("ru = 'Исполнения'; en = 'Performances'"));
		Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.Исполнение"));
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПраваПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПолучитьПраваПоФайлам(Файлы, Пользователи);
	
КонецФункции

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиИсполнителя";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя";	
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиКонтролера";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиПроверяющего";
		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры	

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Исполнить
	 Или ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение Тогда 
	 
	    БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		СтруктураПоиска = Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка);
		НайденныеСтроки = БизнесПроцессОбъект.Исполнители.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
				НайденнаяСтрока.Исполнитель = Реквизиты.Исполнитель;
			Иначе
				НайденнаяСтрока.Исполнитель = Реквизиты.РольИсполнителя;
			КонецЕсли;
			
			БизнесПроцессОбъект.Записать();
		КонецЕсли;	
	 
 	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Проверяющий = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Проверяющий = Реквизиты.РольИсполнителя;
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
	 
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда  
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Контролер = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Контролер = Реквизиты.РольИсполнителя;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, 
		"Автор, 
		| Контролер, 
		| Проверяющий");
		
	// Автор
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	// Контролер
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		Если ТипЗнч(Реквизиты.Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Реквизиты.Контролер);
		Иначе
			Ст = Новый Структура("Участник",
				Реквизиты.Контролер);
			МассивПользователей.Добавить(Ст);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		Если ТипЗнч(Реквизиты.Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Реквизиты.Проверяющий);
		Иначе
			Ст = Новый Структура("Участник",
				Реквизиты.Проверяющий);
			МассивПользователей.Добавить(Ст);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныИсполнения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для выдачи поручений одному или нескольким сотрудникам с возможностью определения порядка, настройки контроля и проверки результата выполнения.'; en = 'Is used to issue orders to one or several employees with the ability to determine the order of performance, to set up monitoring and to verify the result of performance.'");
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Завершен");
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Процесс, 
		"Автор, 
		|Контролер,
		|Проверяющий,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Проверяющий;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			МассивПользователей.Добавить(ДанныеУчастника);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка, 
		"Автор, 
		| Контролер, 
		| Проверяющий");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Проверяющий);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Исполнители
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Исполнители.Исполнитель
		|ИЗ
		|	БизнесПроцесс.Исполнение.Исполнители КАК Исполнители
		|ГДЕ
		|	Исполнители.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПроцессСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", Выборка.Исполнитель);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЦикла;

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	Если Задача.ДополнительныеСвойства.Свойство("ПредыдущийИсполнитель")
		И Задача.ДополнительныеСвойства.ПредыдущийИсполнитель <> Задача.Исполнитель Тогда
		
		ПредставлениеИсполнителя = НСтр("ru = '%1 (вместо %2)'; en = '%1 (instead %2)'");
		ПредставлениеИсполнителя = СтрШаблон(
		ПредставлениеИсполнителя,
			Строка(Задача.Исполнитель),
			Строка(Задача.ДополнительныеСвойства.ПредыдущийИсполнитель));
		
		ра_РаботаСПроцессами.ДобавитьЗаписьПоФактическомуИсполнителю(Задача, ПредставлениеИсполнителя);
		
	Иначе
		ПредставлениеИсполнителя = Строка(Задача.Исполнитель);
	КонецЕсли;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтрШаблон(ОписаниеСобытияФормат,
		Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
		ПредставлениеИсполнителя);
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Исполнение.ТочкиМаршрута;
	
	Действие = "";
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Исполнить
		 Или ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОтветственноеИсполнение Тогда
		 
		Действие = НСтр("ru = 'Задача выполнена'; en = 'Task is executed'");
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Проверить Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ЗадачиИсполнителей.Исполнитель,
			|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку,
			|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК Комментарий
			|ИЗ
			|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителей
			|		ПО ИсполнениеРезультатыПроверки.ЗадачаИсполнителя = ЗадачиИсполнителей.Ссылка
			|ГДЕ
			|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего
			|	И ИсполнениеРезультатыПроверки.ОтправленоНаДоработку");
			
		Запрос.УстановитьПараметр("ЗадачаПроверяющего", Задача.Ссылка);
			
		ЕстьВозвраты = Ложь;
		ТекстРезультатаВыполнения = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоКомментариев = Выборка.Количество();
		НомерИсполнителя = 0;
		Пока Выборка.Следующий() Цикл
			
			НомерИсполнителя = НомерИсполнителя + 1;
			
			Если Выборка.ОтправленоНаДоработку Тогда
				ЕстьВозвраты = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстРезультатаВыполнения) Тогда
				ТекстРезультатаВыполнения = ТекстРезультатаВыполнения + Символы.ПС;
			КонецЕсли;
			
			Если КоличествоКомментариев > 1 Тогда
				ТекстРезультатаВыполнения = ТекстРезультатаВыполнения + Строка(НомерИсполнителя) + ". " 
											+ Строка(Выборка.Исполнитель) + ": ";
			КонецЕсли;
			
			ТекстРезультатаВыполнения = ТекстРезультатаВыполнения + Выборка.Комментарий;
								  
		КонецЦикла;
		
		Если ЕстьВозвраты Тогда
			РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
			Если КоличествоКомментариев > 1 Тогда
				Действие = НСтр("ru = 'Задачи возвращены на доработку'; en = 'Tasks returned for revision'");
			Иначе
				Действие = НСтр("ru = 'Задача возвращена на доработку'; en = 'Task returned for revision'");
			КонецЕсли;
		Иначе
			РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
			Действие = НСтр("ru = 'Задача завершена'; en = 'Task is completed'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(ТекстРезультатаВыполнения), ":" + Символы.ПС, ".")
						  + ТекстРезультатаВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Исполнители
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнители", "Исполнитель",
		Ложь));
		
	// Проверяющий
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проверяющий",
		Истина));
		
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Результат = "";
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ПроцессСсылка, , Истина);

	Если Не ЗначениеЗаполнено(Предметы) Тогда
		Возврат "";
	КонецЕсли;

	ПредметыСИзмененнымСостоянием = Новый Массив();
	
	Для каждого Предмет Из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			СостоянияДокумента = Делопроизводство.ПолучитьСостоянияДокумента(Предмет, ПроцессСсылка);
			Если ЗначениеЗаполнено(СостоянияДокумента) Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхПредметов = ПредметыСИзмененнымСостоянием.Количество();
	Если КоличествоИзмененныхПредметов = 0 Тогда
		Возврат "";
	КонецЕсли;

	Если КоличествоИзмененныхПредметов = 1 Тогда
			
		НаименованиеПредмета = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ПредметыСИзмененнымСостоянием[0], 
			"Наименование");
			
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У документа ""%1"" будет очищено состояние исполнения.'; en = 'Performance state will be cleared for document ""%1"".'"),
			НаименованиеПредмета);
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У документов (%1) будет очищено состояние исполнения.'; en = 'Performance state will be cleared for the documents (%1).'"),
			КоличествоИзмененныхПредметов);
	КонецЕсли;

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.Исполнение.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варианты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Исполнение - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   БизнесПроцесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	ОписаниеРезультата = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Исполнить
		ИЛИ ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Исполнено'; en = 'Performed'"));
			
		Результат.ИспользоватьКомментарий = Истина;
			
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Снять с контроля'; en = 'Stop monitoring'"));
			
		Результат.ИспользоватьКомментарий = Ложь;
			
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Завершить'; en = 'Complete'"));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Вернуть'; en = 'Return'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


#КонецЕсли
