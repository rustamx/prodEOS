
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
		
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
		
	Если Объект.Стартован Тогда
		Если Объект.Завершен Тогда
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполнялся %1)'; en = '(was on execution for %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаЗавершения, Объект.ДатаНачала)));
		Иначе
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполняется %1)'; en = '(on execution for %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(), Объект.ДатаНачала)));
		КонецЕсли;
	КонецЕсли;
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Настройки старта
	СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	СрокиИсполненияПроцессов.ЗаполнитьДатыИсполненияУчастников(
		Объект.Ссылка, ДатыИсполненияУчастников);
	СрокиИсполненияПроцессов.КарточкаПроцессаПриСозданииНаСервере(ЭтаФорма);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Настройка дерева задач и списка активных задач
	РаботаСБизнесПроцессамиВызовСервера.ДеревоПроцессовИЗадач_ПриСозданииНаСервере(ЭтаФорма, Объект.Ссылка);
	
	// Заполнение количества активных задач
	КоличествоАктивныхЗадач = РаботаСБизнесПроцессамиВызовСервера.КоличествоАктивныхЗадачПоПредмету(Объект.Ссылка);
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ФормаГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтаФорма, Параметр.Файл);
	КонецЕсли;
	
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	ИначеЕсли ИмяСобытия = "ЗадачаВыполнена" Или ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" Тогда 
		ОбработатьИзменениеЗадачи(Параметр);
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	ИначеЕсли Параметр = Объект.Ссылка Тогда 
		Прочитать();
		ОбновитьСрокиИсполненияНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессамиВызовСервера.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадачКлиент.ДобавитьЗаявкуНаПереносСрокаВПараметрыЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// Сроки исполнения процессов
	СрокиИсполненияПроцессовКлиент.ПодтвердитьПереносСрокаПроцесса(ЭтаФорма, Отказ, ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	
	ПроверитьОтсутствиеУчастниковПроцесса = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
			Объект,
			Отказ,
			УникальныйИдентификатор,
			ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
			ЭтаФорма, Объект, ПараметрыЗаписи, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
		
	ИначеЕсли Объект.Стартован И Модифицированность Тогда 
		
		Если Объект.Стартован 
			И ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				Объект.СрокИсполненияПроцесса, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса")
		Или ПараметрыЗаписи.Свойство("ОтложенныйСтартПроцесса")
		Или (Не Объект.Стартован
			И Модифицированность
			И ЗначениеЗаполнено(НастройкаСтарта)
			И НастройкаСтарта.Состояние = 
				ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту")) Тогда
			
		ПараметрыЗаписи.Вставить("ИзменениеОтложенногоПроцесса", Истина);
		ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
	КонецЕсли;
	
	Если ПроверитьОтсутствиеУчастниковПроцесса
		И Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроцессуПередЗаписью(ЭтаФорма,
				ПараметрыЗаписи, Отказ) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт
			Или ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса") И ПараметрыЗаписи.ФоновыйСтартПроцесса) Тогда
			
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ОзнакомлениеВыполнениеКомандыСтартовать");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессамиВызовСервера.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи
	// Проверка правильности указания трудозатрат участников процесса
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессамиВызовСервера.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(ТекущийОбъект.Ссылка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		
		// проверка заполнения полей
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле ""Исполнитель"" в строке %1 списка исполнителей!'; en = 'Field ""Performer"" at row %1 of performers list is not filled in!'"), 
					Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					, 
					"Объект.Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",
					, 
					Отказ);
			КонецЕсли;			
		КонецЦикла;
		
		// проверка дублей
		РаботаСБизнесПроцессамиКлиентСервер.ПроверитьНаДублиТаблицуИсполнителей(
				Объект.Исполнители, "Объект.Исполнители", Отказ, Ложь);
		
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	// Настройки старта
	СтартПроцессовСервер.ОбновитьНастройкиСтартаПроцессаИзФормы(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи, НастройкаСтарта);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Объект.Ссылка, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковВТаблицеИсполнителей(
		Объект.Исполнители, ИспользоватьДатуИВремяВСрокахЗадач);
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОповеститьОПереносеСроков(ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(СтрокаПредмета.Предмет);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", Объект.Ссылка);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ПоказатьОповещениеПослеЗаписиПроцесса(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоПроцессовЗадач", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение(
		"Перечисление.СостоянияБизнесПроцессов.Прерван") Тогда
		
		КомандыРаботыСБизнесПроцессамиКлиент.ПоказатьПричинуПрерывания(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеОбработкаНавигационнойСсылки(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	ТрудозатратыИсполнителей = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Исполнители'; en = 'Performers'"),
			"ТрудозатратыПланИсполнителя",
			Объект.ТрудозатратыПланИсполнителя);
	Настройки.Участники.Добавить(ТрудозатратыИсполнителей);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Наименование",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Описание",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Объект.Наименование = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_ПроектЗадача

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЗаполнитьПоПроектнойЗадачеНаСервере(Объект.ПроектнаяЗадача);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Предметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	МультипредметностьКлиент.ОбновитьОтображениеКомандыОсновнойПредметВПроцессе(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	МультипредметностьКлиентСервер.УстановитьВидимостьТаблицыПредметов(ЭтаФорма, Объект);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтаФорма, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	Если МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
		ПредметыПредметПриИзменении();
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПередНачаломИзменения(
		Элемент, Отказ, ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Исполнители

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриАктивизацииСтроки(
		ЭтаФорма,
		Элементы.Исполнители,
		Элементы.ИсполнителиСрокИсполненияПредставление,
		ДоступностьПоШаблону,
		ВестиУчетПереносаСроков,
		ЗаявкаНаПереносСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Объект.Стартован Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ВсеПройдены = Истина;
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Не Строка.Пройден И ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
			ВсеПройдены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ВсеПройдены Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Все исполнители завершили свои задачи, добавление нового исполнителя невозможно!'; en = 'All performers have completed their tasks, it is not possible to add a new one!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ТекущиеДанные.Пройден Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, изменение исполнителя невозможно!'; en = 'The task of the current performer is already completed, it is not possible to change the performer!'"));
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ВыделенныеСтроки = Элементы.Исполнители.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 1 Тогда 
			ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
			
			Если ДанныеСтроки.Пройден Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, удаление исполнителя невозможно!'; en = 'The task of the current performer is already completed, it is not possible to delete the performer!'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				Если ДанныеСтроки.Пройден Тогда 
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Задача исполнителя %1 уже завершена, удаление исполнителя невозможно!'; en = 'Performer task %1 is aldready completed, it is not possible to delete the performer!'"),
						Строка(ДанныеСтроки.Исполнитель));
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		Если ВыделенныеСтроки.Количество() = Объект.Исполнители.Количество() Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'В списке не останется ни одного исполнителя, удаление невозможно!'; en = 'The list will contain no performers, deletion in not possible!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтаФорма, НоваяСтрока,
		Элементы.Исполнители,
		Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтаФорма, НоваяСтрока, ОтменаРедактирования, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПослеУдаления(ЭтаФорма, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительНачалоВыбора(
		ЭтаФорма, СтандартнаяОбработка,
		Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		ЭтаФорма, ВыбранноеЗначение, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Направление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СтартоватьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуОтложенногоСтарта(Команда)
	
	СтартПроцессовКлиент.УстановитьДатуОтложенногоСтарта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);	
	ШаблоныПоПредметам.ЗагрузитьЗначения(
		МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныОзнакомления", Ложь));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса(
		"ШаблоныОзнакомления", ШаблоныПоПредметам, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителей(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы_Предметы

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(
		ЭтаФорма, Объект, Истина,, Тип("СправочникСсылка.Файлы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойПредмет(Команда)
	
	МультипредметностьКлиент.ОсновнойПредмет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ДеревоПроцессовИЗадач

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоПроцессовЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуОбъекту(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПерейтиКТекущемуОбъекту(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИзменениеЗадачи(Задача)
	
	Если ОбщегоНазначенияДокументооборот.
		ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Задача, "БизнесПроцесс") = Объект.Ссылка Тогда
		
		Прочитать();
		
		СрокиИсполненияПроцессов.ЗаполнитьДатыИсполненияУчастников(
			Объект.Ссылка, ДатыИсполненияУчастников);
		ОбновитьПризнакиИстекшихСроков();
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(Ссылка)
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность() Экспорт
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	Если Объект.Завершен
		Или Не ПравоНаИзменение
		Или (ЗначениеЗаполнено(Объект.Ссылка) И ЭтотУзел <> Объект.УзелОбмена) Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.Стартован Тогда 
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.ЗаполнитьПоШаблону.Видимость = Ложь;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.ГруппаИнфо.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.Длительность.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессамиВызовСервера.ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Шаблон, ЭтаФорма);
	ОбновитьЭлементыДополнительныхРеквизитов();
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПроектнойЗадачеНаСервере(ПроектнаяЗадача) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессОбъект.ЗаполнитьПоПроектнойЗадаче(ПроектнаяЗадача);
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		
		Элементы.Исполнители.ИзменятьСоставСтрок = ДоступностьПоШаблону;
		Элементы.Исполнители.ИзменятьПорядокСтрок = ДоступностьПоШаблону;
		Для Каждого ЭлементТаблицыИсполнители Из Элементы.Исполнители.ПодчиненныеЭлементы Цикл
			ЭлементТаблицыИсполнители.ТолькоПросмотр = Не ДоступностьПоШаблону;
		КонецЦикла;
		
		Элементы.Подобрать.Доступность = ДоступностьПоШаблону;
	Иначе
		Элементы.Исполнители.ИзменятьСоставСтрок = Истина;
		Элементы.Исполнители.ИзменятьПорядокСтрок = Истина;
		Для Каждого ЭлементТаблицыИсполнители Из Элементы.Исполнители.ПодчиненныеЭлементы Цикл
			ЭлементТаблицыИсполнители.ТолькоПросмотр = Ложь;
		КонецЦикла;
		
		Элементы.Подобрать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ПрочитатьПараметрыСостояния = Ложь) Экспорт
	
	Если ПрочитатьПараметрыСостояния Тогда
		Прочитать();
		СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 75, 100);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Исполнитель", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителя", НСтр("ru = 'Исполнители (для каждого)'; en = 'Performers (separately)'"));
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеРезультата() Экспорт
	
	ПредставлениеРезультата = НСтр("ru = 'Завершен %1'; en = 'Completed %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПредставлениеРезультата, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
	РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Предметы

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	ПолучитьИнструкции();
	
	Если ВестиУчетПоПроектам
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначенияДокументооборот.
					ЗначениеРеквизитаОбъектаВПривилегированномРежиме(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДеревоПроцессовИЗадач

// Обновляет и разворачивает дерево процессов и задач.
//
&НаКлиенте
Процедура ОбновитьДеревоПроцессовЗадач() Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачи Тогда
		ЗаполнитьДеревоПроцессовИЗадач();
		РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоПроцессовИЗадач(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево процессов и задач.
//
&НаСервере
Процедура ЗаполнитьДеревоПроцессовИЗадач() Экспорт
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПроцессыИЗадачиПоПредмету(ЭтаФорма, Объект.Ссылка);
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
КонецПроцедуры

// Находит текущую списка СписокАктивныхЗадач в дереве задач.
//
&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	Если СрокиИсполненияПроцессов.ТребуетсяРасчетСроков(ЭтаФорма)
		Или ЗначениеЗаполнено(РеквизитТаблицаСИзмененнымСроком) Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		
		ПараметрыДляРасчетаСроков.Смещение = 
			СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
		
		СрокиИсполненияПроцессов.РассчитатьСрокиОзнакомления(Объект, ПараметрыДляРасчетаСроков);
		
		ПроверитьИзменениеСроковПроцесса();
		
	КонецЕсли;
	
	РеквизитТаблицаСИзмененнымСроком = "";
	
	ОбновитьПризнакиИстекшихСроков();
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = РеквизитТаблица;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	Прочитать();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Проверяет изменение сроков процесса и невыполненных задач.
//
&НаСервере
Процедура ПроверитьИзменениеСроковПроцесса()
	
	Если Не Объект.Стартован Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСроковДляПроверки = СрокиИсполненияПроцессов.СтруктураСроковПроцессаДляПроверкиИзменения();
	
	СтруктураСроковДляПроверки.Ссылка = Объект.Ссылка;
	
	СтруктураСроковДляПроверки.СрокИсполненияПроцесса = Объект.СрокИсполненияПроцесса;
	
	Для Каждого СтрИсполнитель Из Объект.Исполнители Цикл
		
		Если Не ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
			Продолжить;
		КонецЕсли;
			
			
		СтруктураСроковДляПроверки.СрокиИсполнителей.Вставить(
			СтрИсполнитель.ЗадачаИсполнителя, СтрИсполнитель.СрокИсполнения);
	КонецЦикла;
	
	СрокиИсполненияПроцессов.ПроверитьИзменениеСроковПроцесса(
		Объект.Ссылка, СтруктураСроковДляПроверки, ЭтаФорма);
	
КонецПроцедуры

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения истек (Исполнители)'; en = 'Due date is expired (Performers)'"),
		"Объект.Исполнители.СрокИсполненияИстек",
		"ИсполнителиСрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'; en = 'Process due date is expired'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
		Объект.Исполнители, ТекущаяДатаСеанса(), ДатыИсполненияУчастников);
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
		Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФоновыйИОтложенныйСтарт

&НаСервере
Процедура ОбновитьФормуПослеИзмененияНастроекОтложенногоСтарта() Экспорт
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи) Экспорт
	
	РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
		Объект,
		Отказ,
		УникальныйИдентификатор,
		ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
		ЭтаФорма, Объект, ПараметрыЗаписи, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверкиЗаполненияНаСервереДляФоновогоСтарта(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервереДляФоновогоСтарта(Отказ) Экспорт
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Объект");
	
	ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессОбъект = РеквизитФормыВЗначение("Объект", Тип("БизнесПроцессОбъект.Ознакомление"));
	
	Если Не ПроцессОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
