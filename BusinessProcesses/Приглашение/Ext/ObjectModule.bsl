#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
		
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") = Неопределено Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
					
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
				
				СтруктураОтбора = Новый Структура("Исполнитель",
					АвтоподстановкаИсполнитель);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
					
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
				СтруктураОтбора = Новый Структура("Исполнитель",
					АвтоподстановкаИсполнитель.РольИсполнителя);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
					НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
					
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") = Неопределено Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
							
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ПолныеРоли") И ЗначениеЗаполнено(ЭлементМассива)	Тогда 
						
						ПараметрыОтбора = Новый Структура("Исполнитель",
							ЭлементМассива);
					
						Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
							
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 	
						
						ПараметрыОтбора = Новый Структура("Исполнитель",
							ЭлементМассива.РольИсполнителя);
					
						Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
							НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
							
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
		Иначе
			СтруктураОтбора = Новый Структура("Исполнитель",
				Строка.Исполнитель);
		
			НайденныеСтроки = Исполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
		
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланАвтора = ШаблонБизнесПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	КоличествоИтераций = 1;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = СрокИсполненияУчастника;
		ВариантУстановкиСрокаОбработкиРезультатов = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если Исполнители.Количество() = 0 Тогда 
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
				НоваяСтрока.СрокИсполнения = СрокИсполненияУчастника;
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	ТрудозатратыПланИсполнителя = РаботаСПроектами.МинимальныеТрудозатратыИсполнителей(ПроектнаяЗадача.Исполнители);
	
КонецПроцедуры

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьНевыполненныеЗадачиВТочкеМаршрутаПригласить = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			СрокИсполненияИзменен = Ложь;
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
			СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
				Или ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда
				
				Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
					И ЗначениеЗаполнено(СтрокаПредметов) Тогда
					
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом приглашения %1'; en = 'Examine the invitation result %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						СтрокаПредметов);
				Иначе
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом приглашения: %1'; en = 'Examine the invitation result: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Наименование);
				КонецЕсли;
			Иначе
				НаименованиеЗадачи = Наименование;
				
				ЕстьНевыполненныеЗадачиВТочкеМаршрутаПригласить = Истина;
				
			КонецЕсли;
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
				
				СтрИсполнителя = Исполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
				
				Если СтрИсполнителя <> Неопределено Тогда
					
					СтарыйСрокЗадачи = ЗадачаОбъект.СрокИсполнения;
					
					СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
						ЗадачаОбъект,
						СтрИсполнителя.ВариантУстановкиСрокаИсполнения,
						СтрИсполнителя.СрокИсполнения,
						СтрИсполнителя.СрокИсполненияДни,
						СтрИсполнителя.СрокИсполненияЧасы,
						СтрИсполнителя.СрокИсполненияМинуты);
					
					Если СтарыйСрокЗадачи <> ЗадачаОбъект.СрокИсполнения Тогда
						СрокИсполненияИзменен = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
				
				СтарыйСрокЗадачи = ЗадачаОбъект.СрокИсполнения;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
				
				Если СтарыйСрокЗадачи <> ЗадачаОбъект.СрокИсполнения Тогда
					СрокИсполненияИзменен = Истина;
				КонецЕсли;
				
			Иначе
				ЗадачаОбъект.СрокИсполнения = Дата(1,1,1);
			КонецЕсли;
			
			Если ЗадачаОбъект.Наименование = НаименованиеЗадачи И
				 Не СрокИсполненияИзменен И
				 ЗадачаОбъект.Важность = Важность И
				 ЗадачаОбъект.Описание = Описание И
				 ЗадачаОбъект.Автор = Автор 
			Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.Наименование 	= НаименованиеЗадачи;
			ЗадачаОбъект.Важность 		= Важность;
			ЗадачаОбъект.Описание 		= Описание;
			ЗадачаОбъект.Автор 	  		= Автор;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если ЕстьНевыполненныеЗадачиВТочкеМаршрутаПригласить Тогда
		
			// обновление исполнителей
			ДобавленныеСтроки = Новый Массив;
			УдаленныеСтроки   = Новый Массив;
			ИзмененныеСтроки  = Новый Массив;
			
			КоличествоСтрок = СтарыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					СтарыеИсполнители.Удалить(Строка);
				КонецЕсли;	
			КонецЦикла;	
			
			НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = НовыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Тогда
					НовыеИсполнители.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 0 По КоличествоСтрок-1 Цикл
				Строка = НовыеИсполнители[Инд];
				
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					ДобавленныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого Строка Из НовыеИсполнители Цикл
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					Продолжить;
				КонецЕсли;	
				
				НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
					
				Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель Тогда 
					ИзмененныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого Строка Из СтарыеИсполнители Цикл
				НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			    Если НайденнаяСтрока = Неопределено Тогда 
					УдаленныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			// добавленные строки
			Для Каждого Строка Из ДобавленныеСтроки Цикл
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ЗаполнитьЗадачуПригласить(Задача, Строка);
				Задача.Записать();
				
				НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда 
					НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				КонецЕсли;
				
				НоваяСтрока = РезультатыПриглашения.Добавить();
				НоваяСтрока.НомерИтерации = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
				
			КонецЦикла;
			
			Если ДобавленныеСтроки.Количество() > 0 Тогда 
				Записать();
			КонецЕсли;
			
			// измененные строки
			Для Каждого Строка Из ИзмененныеСтроки Цикл	
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				
				Если Задача.ПринятаКИсполнению Тогда
					Задача.ПринятаКИсполнению = Ложь;
					Задача.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Задача.Исполнитель = Строка.Исполнитель;
					Задача.РольИсполнителя = Неопределено;
				Иначе	
					Задача.Исполнитель = Неопределено;
					Задача.РольИсполнителя = Строка.Исполнитель;
				КонецЕсли;	
				
				Задача.Записать();
			КонецЦикла;

			// удаленные строки
			Если УдаленныеСтроки.Количество() > 0 Тогда 
			
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
					Задача.ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче", Истина);
					Задача.ИсключенаИзПроцесса = Истина;
					Задача.ВыполнитьЗадачу();
					Задача.УстановитьПометкуУдаления(Истина);
				КонецЦикла;	
				Прочитать();
				
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					НайденнаяСтрока = РезультатыПриглашения.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если НайденнаяСтрока <> Неопределено Тогда 
						РезультатыПриглашения.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЦикла;	
				Записать();
				
			КонецЕсли;
			
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос срока обработки результатов
	ШаблонОбъект.СрокОбработкиРезультатов = СрокОбработкиРезультатов;
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = ВариантУстановкиСрокаОбработкиРезультатов;
	
	// Перенос количества итераций
	ШаблонОбъект.КоличествоИтераций = КоличествоИтераций;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, ЯвкаОбязательна, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
			
		ИсполнительШаблона.ВариантУстановкиСрокаИсполнения =
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	КонецЦикла;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();	
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
				Строка = Исполнители.Добавить();
				Строка.Исполнитель = Исполнитель;
			КонецЦикла;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Принять участие в ""%1""'; en = 'Attend to ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Мероприятие = Неопределено;
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			И (УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие)
			Или УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие)) Тогда 
			
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Принять участие в ""%1""'; en = 'Attend to ""%1""'"), 
					Строка(Мероприятие));
			
			ДатаНачалаМероприятия = Мероприятие.ДатаНачала;
			ДатаОкончанияМероприятия = Мероприятие.ДатаОкончания;
			МестоПроведения = Мероприятие.МестоПроведения;
			
			Участники = ПолучитьУчастниковМероприятия(Мероприятие);
			Исполнители.Загрузить(Участники);
			
			Для Каждого СтрИсполнитель Из Исполнители Цикл
				СтрИсполнитель.СрокИсполнения = ДатаНачалаМероприятия;
				
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЦикла;
			
			СрокОбработкиРезультатов = ДатаНачалаМероприятия;
			ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
			КоличествоИтераций = 1;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(
			ЭтотОбъект, НСтр("ru = 'Принять участие в'; en = 'Attend to'") + " ");
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	КоличествоИсполнителей = Исполнители.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Исполнители[Инд1];
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Исполнители[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'; en = 'Participant ""%1"" is specified twice in the participants list!'"),
					Строка(Строка1.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка1.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
	
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
				НайденнаяСтрока = РезультатыПриглашения.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.РезультатПриглашения = ДополнительныеСвойства.РезультатПриглашения;
				
				ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ДополнительныеСвойства.ТекущаяЗадача, , Истина);
				Для Каждого Предмет Из ПредметыДляУстановки Цикл
					Мероприятие = Неопределено;
					
					Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
						Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
						
						СтруктураПоиска = Новый Структура;
						
						СтруктураПоиска.Вставить("Исполнитель", ?(ЗначениеЗаполнено(ДополнительныеСвойства.ТекущаяЗадача.Исполнитель),
						ДополнительныеСвойства.ТекущаяЗадача.Исполнитель, ДополнительныеСвойства.ТекущаяЗадача.РольИсполнителя));
						
						Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
						
						НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() > 0 Тогда 
							НайденнаяСтрока = НайденныеСтроки[0];
							
							ЗначенияКлюча = Новый Структура;
							ЗначенияКлюча.Вставить("Мероприятие", Мероприятие);
							ЗначенияКлюча.Вставить("Исполнитель", НайденнаяСтрока.Исполнитель);
							Если ТипЗнч(НайденнаяСтрока.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
								ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденнаяСтрока.Исполнитель,
									"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
								ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
								ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
								ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
							Иначе
								ЗначенияКлюча.Вставить("УдалитьИсполнитель", НайденнаяСтрока.Исполнитель);
								ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
								ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
							КонецЕсли;
							
							КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
							ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
							
							МенеджерЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьМенеджерЗаписи();
							ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
							МенеджерЗаписи.Прочитать();
							
							Если ДополнительныеСвойства.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
								МенеджерЗаписи.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
							ИначеЕсли ДополнительныеСвойства.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
								МенеджерЗаписи.СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
							КонецЕсли;
							МенеджерЗаписи.Записать();
							
							КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
							РазблокироватьДанныеДляРедактирования(КлючЗаписи);
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
				Если ДополнительныеСвойства.Свойство("ПовторитьПриглашение") И ДополнительныеСвойства.ПовторитьПриглашение Тогда
					ПовторитьПриглашение = Истина;
					
					Если ДополнительныеСвойства.Свойство("Исполнители") Тогда
						Исполнители.Очистить();
						Для Каждого СтрИсполнитель Из ДополнительныеСвойства.Исполнители Цикл
							ЗаполнитьЗначенияСвойств(Исполнители.Добавить(), СтрИсполнитель);
						КонецЦикла;
					КонецЕсли;
					Если ДополнительныеСвойства.Свойство("МестоПроведения") Тогда
						МестоПроведения = ДополнительныеСвойства.МестоПроведения;
					КонецЕсли;
					Если ДополнительныеСвойства.Свойство("ДатаНачалаМероприятия") Тогда
						ДатаНачалаМероприятия = ДополнительныеСвойства.ДатаНачалаМероприятия;
					КонецЕсли;
					Если ДополнительныеСвойства.Свойство("ДатаОкончанияМероприятия") Тогда
						ДатаОкончанияМероприятия = ДополнительныеСвойства.ДатаОкончанияМероприятия;
					КонецЕсли;
					
					Если ДополнительныеСвойства.Свойство("СрокИсполненияПроцесса") Тогда
						СрокИсполненияПроцесса = ДополнительныеСвойства.СрокИсполненияПроцесса;
					КонецЕсли;
					
					Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовДни") Тогда
						СрокОбработкиРезультатовДни = ДополнительныеСвойства.СрокОбработкиРезультатовДни;
					КонецЕсли;
					Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовЧасы") Тогда
						СрокОбработкиРезультатовЧасы = ДополнительныеСвойства.СрокОбработкиРезультатовЧасы;
					КонецЕсли;
					Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовМинуты") Тогда
						СрокОбработкиРезультатовМинуты = ДополнительныеСвойства.СрокОбработкиРезультатовМинуты;
					КонецЕсли;
					Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
						ВариантУстановкиСрокаОбработкиРезультатов = ДополнительныеСвойства.ВариантУстановкиСрокаОбработкиРезультатов;
					КонецЕсли;
					
					Если ДополнительныеСвойства.Свойство("КоличествоИтераций") Тогда
						КоличествоИтераций = ДополнительныеСвойства.КоличествоИтераций;
					КонецЕсли;
					
					НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
					НайденнаяСтрока.ОтправленоПовторноеПриглашение = Истина;
					
				ИначеЕсли ДополнительныеСвойства.Свойство("ПодтвердитьПриглашение") И ДополнительныеСвойства.ПодтвердитьПриглашение Тогда
					НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача.Ссылка, "ЗадачаИсполнителя");
					НомерИтерации = НайденнаяСтрока.НомерИтерации;
					
					УдаленныеСтрокиИсполнителей = Новый Массив;
					Для Каждого Строка Из РезультатыПриглашения Цикл
						Если Строка.НомерИтерации <> НомерИтерации Тогда 
							Продолжить;
						КонецЕсли;	
						
						Если Строка.РезультатПриглашения <> Перечисления.РезультатыПриглашения.НеПринято Тогда 
							Продолжить;
						КонецЕсли;	
						
						Если Строка.ЯвкаОбязательна Тогда 
							Продолжить;
						КонецЕсли;	
						
						Строка.НеУчитывать = Истина;
						
						НайденнаяСтрока = Исполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
						Если НайденнаяСтрока <> Неопределено Тогда 
							СтруктураИсполнитель = Новый Структура;
							СтруктураИсполнитель.Вставить("Исполнитель", НайденнаяСтрока.Исполнитель);
							УдаленныеСтрокиИсполнителей.Добавить(СтруктураИсполнитель);
							Исполнители.Удалить(НайденнаяСтрока);
						КонецЕсли;
						
					КонецЦикла;
					
					ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ДополнительныеСвойства.ТекущаяЗадача, , Истина);
					Для Каждого Предмет Из ПредметыДляУстановки Цикл
						Мероприятие = Неопределено;
						УдаленныеЗаписи = Новый Массив;
						Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
							Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
							
							НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
							НаборЗаписей.Прочитать();
							Участники = НаборЗаписей.Выгрузить();
							
							Для Каждого СтрокаУчастник Из Участники Цикл
								ЗначенияКлюча = Новый Структура;
								ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
								ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
								Если ТипЗнч(СтрокаУчастник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
									ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Исполнитель,
										"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
									ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
									ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
									ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
								Иначе
									ЗначенияКлюча.Вставить("УдалитьИсполнитель", СтрокаУчастник.Исполнитель);
									ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
									ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
								КонецЕсли;
								
								КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
								ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
							КонецЦикла;
							
							Для Каждого Строка Из УдаленныеСтрокиИсполнителей Цикл
								
								НайденныеСтроки = Участники.НайтиСтроки(Строка);
								Если НайденныеСтроки.Количество() > 0 Тогда 
									Для Каждого Запись Из НаборЗаписей Цикл
										Если Запись.Исполнитель = Строка.Исполнитель Тогда
											УдаленныеЗаписи.Добавить(Запись);
											Прервать;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								
							КонецЦикла;
							
							Для Каждого УдаленнаяЗапись Из УдаленныеЗаписи Цикл
								НаборЗаписей.Удалить(УдаленнаяЗапись);
							КонецЦикла;
							
							НаборЗаписей.Записать();
							
							Для Каждого СтрокаУчастник Из Участники Цикл
								ЗначенияКлюча = Новый Структура;
								ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
								ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
								Если ТипЗнч(СтрокаУчастник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
									ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Исполнитель,
										"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
									ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
									ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
									ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
								Иначе
									ЗначенияКлюча.Вставить("УдалитьИсполнитель", СтрокаУчастник.Исполнитель);
									ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
									ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
								КонецЕсли;
								
								КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
								РазблокироватьДанныеДляРедактирования(КлючЗаписи);
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, , Истина);
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			
			Если ПометкаУдаления Тогда 
				Для Каждого Предмет Из ПредметыДляУстановки Цикл
					ПриОткрепленииПредмета(Предмет);
				КонецЦикла;
			Иначе
				ВосстановитьСостоянияПредметов();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыПриглашения.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатПриглашения = Неопределено;
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, , Истина);
	
	Для Каждого Предмет Из ПредметыДляУстановки Цикл
		Мероприятие = Неопределено;
		Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
			Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
			
			УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
				Мероприятие, 
				ТекущаяДатаСеанса(), 
				Перечисления.СостоянияМероприятий.ПриглашенияОтправлены, 
				Ссылка);
			
			НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
			НаборЗаписей.Прочитать();
			Участники = НаборЗаписей.Выгрузить();
			
			Для Каждого СтрокаУчастник Из Участники Цикл
				ЗначенияКлюча = Новый Структура;
				ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
				ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
				Если ТипЗнч(СтрокаУчастник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Исполнитель,
						"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
					ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
					ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
					ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
				Иначе
					ЗначенияКлюча.Вставить("УдалитьИсполнитель", СтрокаУчастник.Исполнитель);
					ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
					ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
				КонецЕсли;
				
				КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЦикла;
			
			Для Каждого Строка Из Исполнители Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Исполнитель", Строка.Исполнитель);
				
				НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда 
					
					Для Каждого Запись Из НаборЗаписей Цикл
						
						Если Запись.Исполнитель = Строка.Исполнитель Тогда
							
							Запись.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
					НоваяЗапись.Мероприятие = Мероприятие;
					НоваяЗапись.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено;
					НоваяЗапись.Порядок = Строка.НомерСтроки;
					
					Если ТипЗнч(НоваяЗапись.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяЗапись.Исполнитель,
							"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
						НоваяЗапись.УдалитьИсполнитель = ЗначенияРеквизитов.Владелец;
						НоваяЗапись.УдалитьОсновнойОбъектАдресации = ЗначенияРеквизитов.ОсновнойОбъектАдресации;
						НоваяЗапись.УдалитьДополнительныйОбъектАдресации = ЗначенияРеквизитов.ДополнительныйОбъектАдресации;
					Иначе
						НоваяЗапись.УдалитьИсполнитель = НоваяЗапись.Исполнитель;
						НоваяЗапись.УдалитьОсновнойОбъектАдресации = Неопределено;
						НоваяЗапись.УдалитьДополнительныйОбъектАдресации = Неопределено;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
			Для Каждого СтрокаУчастник Из Участники Цикл
				ЗначенияКлюча = Новый Структура;
				ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
				ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
				Если ТипЗнч(СтрокаУчастник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Исполнитель,
						"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
					ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
					ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
					ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
				Иначе
					ЗначенияКлюча.Вставить("УдалитьИсполнитель", СтрокаУчастник.Исполнитель);
					ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
					ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
				КонецЕсли;
				
				КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
				РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьПриглашение = Ложь;
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

Процедура ПригласитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого Строка Из Исполнители Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуПригласить(Задача, Строка);
	
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
		ФормируемыеЗадачи.Добавить(Задача);
		
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроля(Ссылка, Строка.ЗадачаИсполнителя, ЗадачаСсылка);
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		
		НоваяСтрока = РезультатыПриглашения.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ПригласитьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат приглашения
	Если РезультатыПриглашения.Количество() > 0 Тогда
		РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
		СтрокиИтерации = РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
		
		ЕстьПринятые = Ложь;
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
				ЕстьПринятые = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если Не ЕстьПринятые Тогда 
			РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
		Иначе	
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Если Строка.ЯвкаОбязательна Тогда 
						РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
						Прервать;
					Иначе
						РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;	
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		Мероприятие = Неопределено;
	
		Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
		 Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
		 
			Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
			 Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда 
				СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПриглашенияПриняты;
			Иначе	
				СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПриглашенияНеПриняты;
			КонецЕсли;	
			
			УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
				Мероприятие, 
				ТекущаяДатаСеанса(), 
				СостояниеМероприятия, 
				Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если процесс завершился положительно, то задачу ознакомления формируем
	// после завершения процесса.
	Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЗадачуОзнакомиться(ФормируемыеЗадачи);
	
КонецПроцедуры

Процедура ПовторитьПриглашениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьПриглашение;
	
КонецПроцедуры

Процедура ОповеститьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Задачи оповещения всегда создаем после завершения процесса.
	// Это нужно, чтобы не срывать сроки исполнения процесса и
	// не затягивать со стартом следующих действий комплексных процессов.
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// Если процесс завершился положительно и нет задачи ознакомления (задача ознакомления могла быть
	// создана до перехода на редакцию 2.1), то создаем задачу ознакомления с результатом.
	Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		И РезультатыОзнакомлений.Найти(НомерИтерации, "НомерИтерации") = Неопределено Тогда 
		
		СоздатьЗадачуОзнакомиться(, Истина);
	КонецЕсли;
	
	// Если нет задач оповещения (они могли быть созданы до перехода на редакцию 2.1)
	// то создаем их.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Приглашение.ТочкаМаршрута.Оповестить)
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	Если Запрос.Выполнить().Пустой() Тогда
		СоздатьЗадачиОповестить(, Истина);
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьЗадачуПригласить(Задача, Строка)
	
	Задача.Дата 	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить);
	
	Задача.Наименование = Наименование;
	Если Строка.ЯвкаОбязательна Тогда 
		Задача.Наименование = Задача.Наименование + НСтр("ru = ' (явка обязательна)'; en = ' (must attend)'");
	КонецЕсли;
	
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		Строка.ВариантУстановкиСрокаИсполнения,
		Строка.СрокИсполнения,
		Строка.СрокИсполненияДни,
		Строка.СрокИсполненияЧасы,
		Строка.СрокИсполненияМинуты);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
		
	ИначеЕсли ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		Задача.РольИсполнителя = Строка.Исполнитель;
		
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

Процедура СоздатьЗадачуОзнакомиться(ФормируемыеЗадачи = Неопределено, ЗаписатьЗадачу = Ложь)
	
	Если ФормируемыеЗадачи = Неопределено Тогда
		ФормируемыеЗадачи = Новый Массив;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	Если ЗаписатьЗадачу Тогда
		Задача.Записать();
	КонецЕсли;
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться);
	
	Задача.Исполнитель 	  = Автор;
	
	// Если указана дата завершения, то создается после завершения с пустым сроком,
	// т.к. она формируется для уведомления автора процесса о положительном
	// завершении и не влияет на срок исполнения всего процесса.
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		Задача.СрокИсполнения = Дата(1,1,1);
	Иначе
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
			Задача,
			ВариантУстановкиСрокаОбработкиРезультатов,
			СрокОбработкиРезультатов,
			СрокОбработкиРезультатовДни,
			СрокОбработкиРезультатовЧасы,
			СрокОбработкиРезультатовМинуты);
		
	КонецЕсли;
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(СтрокаПредметов) Тогда
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения %1'; en = 'Examine the invitation result %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения: %1'; en = 'Examine the invitation result: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)), 
			Наименование);
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

// Создает задачи для точки маршрута Оповестить и помещает задачи параметр ФормируемыеЗадачи.
//
// Параметры:
//   ФормируемыеЗадачи - массив созданных задач
//          - ЗадачаОбъекта
//   ЗаписатьЗадачи - Булево - если передается Истина, то задачи будут записаны при создании.
//
Процедура СоздатьЗадачиОповестить(ФормируемыеЗадачи = Неопределено, ЗаписатьЗадачи = Ложь)
	
	Если ФормируемыеЗадачи = Неопределено Тогда
		ФормируемыеЗадачи = Новый Массив;
	КонецЕсли;
	
	Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Или
		РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда 
		
		ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
		
		Для Каждого Строка Из РезультатыПриглашения Цикл
			Если Строка.НомерИтерации = НомерИтерации Тогда 
				Если Строка.НеУчитывать Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Продолжить;
				КонецЕсли;	
				
				СтрокаИсполнителя = Исполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если СтрокаИсполнителя = Неопределено Тогда 
					СтрокаИсполнителя = Строка.ЗадачаИсполнителя;
				КонецЕсли;	
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ЗаполнитьЗадачуОповестить(Задача, СтрокаИсполнителя, ДобавлятьНаименованиеПредмета);
				
				Если ЗаписатьЗадачи Тогда
					Задача.Записать();
				КонецЕсли;
				
				ФормируемыеЗадачи.Добавить(Задача);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗадачуОповестить(Задача, Строка, ДобавлятьНаименованиеПредмета)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
		
	ИначеЕсли ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		Задача.РольИсполнителя = Строка.Исполнитель;
		
	КонецЕсли;
	
	Задача.СрокИсполнения = '00010101'; 
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(СтрокаПредметов) Тогда
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения %1'; en = 'Examine the invitation result %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения: %1'; en = 'Examine the invitation result: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)), 
			Наименование);
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостоянияПредметов()
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Если Не ЗначениеЗаполнено(Предмет) Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СогласованиеРезультатыСогласования.НомерИтерации,
	//|	МИНИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.Дата) КАК ПерваяЗадача,
	//|	МАКСИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения) КАК ПоследняяЗадача
	//|ИЗ
	//|	БизнесПроцесс.Согласование.РезультатыСогласования КАК СогласованиеРезультатыСогласования
	//|ГДЕ
	//|	СогласованиеРезультатыСогласования.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СогласованиеРезультатыСогласования.НомерИтерации";
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//ДатыЗадач = Запрос.Выполнить().Выгрузить();
	//
	//Для Инд = 1 По НомерИтерации Цикл
	//	СтрокаДаты = ДатыЗадач.Найти(Инд, "НомерИтерации");
	//	
	//	Делопроизводство.ЗаписатьСостояниеДокумента(
	//		Предмет, 
	//		СтрокаДаты.ПерваяЗадача, 
	//		Перечисления.СостоянияДокументов.НаСогласовании, 
	//		Ссылка);
	//	
	//	ЗадачиИтерации = РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", Инд));
	//	
	//	ИтерацияЗавершена = Истина;
	//	Для Каждого Строка Из ЗадачиИтерации Цикл
	//		Если Не Строка.ЗадачаИсполнителя.Выполнена Тогда 
	//			ИтерацияЗавершена = Ложь;
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//	
	//	Если ИтерацияЗавершена Тогда 
	//		
	//		СостояниеИтерации = Перечисления.СостоянияДокументов.Согласован;
	//		Для Каждого Строка Из ЗадачиИтерации Цикл
	//			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
	//				СостояниеИтерации = Перечисления.СостоянияДокументов.НеСогласован;
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;	
	//		
	//		Делопроизводство.ЗаписатьСостояниеДокумента(
	//			Предмет, 
	//			СтрокаДаты.ПоследняяЗадача, 
	//			СостояниеИтерации, 
	//			Ссылка);
	//		
	//	КонецЕсли;	
	//	
	//КонецЦикла;	
	
КонецПроцедуры

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		
		// Результат предыдущего приглашения
		НомерИтерации = Неопределено;
		НайденнаяСтрока = РезультатыПриглашения.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			РезультатПриглашенияЗадачи = НайденнаяСтрока.РезультатПриглашения;
			НомерИтерации = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации =
			РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Приглашение было прислано повторно'; en = 'Invitation was sent again'", КодЯзыкаПолучателя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Результат приглашения
		Если РезультатПриглашенияЗадачи = Перечисления.РезультатыПриглашения.Принято Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				НСтр("ru = 'Результат приглашения: Принято'; en = 'Invitation result: Accepted'", КодЯзыкаПолучателя));
		ИначеЕсли РезультатПриглашенияЗадачи = Перечисления.РезультатыПриглашения.НеПринято Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				НСтр("ru = 'Результат приглашения: Не принято'; en = 'Invitation result: Not accepted'", КодЯзыкаПолучателя));
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		
		// Результат принятия приглашений
		НомерИтерации = Неопределено;
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		ЕстьПринятые = Ложь;
		РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
		СтрокиИтерации =
			РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
				ЕстьПринятые = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПринятые Тогда 
			РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
		Иначе	
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Если Строка.ЯвкаОбязательна Тогда 
						РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
						Прервать;
					Иначе
						РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = НСтр("ru = 'Результат принятия приглашений:'; en = 'Invitations accepting result:'", КодЯзыкаПолучателя) + " ";
		Если РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Все приглашения приняты'; en = 'All invitations accepted'",
				КодЯзыкаПолучателя);
		ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Есть приглашения, не принятые участниками без обязательной явки'; en = 'There are invitations not accepted by optional attendees'",
				КодЯзыкаПолучателя);
		ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Есть приглашения, не принятые участниками с обязательной явкой'; en = 'There are invitations not accepted by mandatory attendees'",
				КодЯзыкаПолучателя);
		ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Приглашения не приняты всеми участниками'; en = 'Invitations were not accepted by all attendees'",
				КодЯзыкаПолучателя);
		КонецЕсли;
		
		// Результат рассылки приглашений
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				
				Результат = Результат + Символы.ПС + НСтр("ru = 'Результат рассылки приглашений:'; en = 'Result of invitations:'", КодЯзыкаПолучателя) + " ";
				
				Если НайденнаяСтрока.ОтправленоПовторноеПриглашение Тогда
					Результат = Результат  + НСтр("ru = 'Приглашения разосланы повторно'; en = 'Invitations sent again'", КодЯзыкаПолучателя);
				ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
					ИЛИ РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
					Результат = Результат + НСтр("ru = 'Приглашения подтверждены'; en = 'Invitations are confirmed'", КодЯзыкаПолучателя);
				Иначе
					Результат = Результат + НСтр("ru = 'Приглашения отменены'; en = 'Invitation canceled'", КодЯзыкаПолучателя);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда
		
		Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
			Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда 
			Результат = НСтр("ru = 'Результат рассылки приглашений: Приглашения подтверждены'; en = 'Result of invitations: Invitations confirmed'", КодЯзыкаПолучателя);
		Иначе
			Результат = НСтр("ru = 'Результат рассылки приглашений: Приглашения отменены'; en = 'Result of invitations: Invitations cancelled'", КодЯзыкаПолучателя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает участников, для которых следует доформировать приглашение на мероприятие.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Участники мероприятия.
//
Функция ПолучитьУчастниковМероприятия(Мероприятие)
	
	// Получаем участников мероприятия.
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
	
	// Проверяем есть ли неприглашенные участники. Если таких нет - приглашем всех участников.
	УчастникБезПриглашения =
		Участники.Найти(Перечисления.СостоянияПриглашения.ПустаяСсылка(), "СостояниеПриглашения");
	ЕстьНеприглашенныеУчастники = УчастникБезПриглашения <> Неопределено;
	Если Не ЕстьНеприглашенныеУчастники Тогда
		Возврат Участники;
	КонецЕсли;
	
	// Не приглашем участников, которые уже приглашены. Приглашаем только неприглашенных участников.
	КоличествоУчастников = Участники.Количество();
	Для Инд = 1 По КоличествоУчастников Цикл
		Участник = Участники[КоличествоУчастников-Инд];
		Если Участник.СостояниеПриглашения = Перечисления.СостоянияПриглашения.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		Участники.Удалить(Участник);
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Принять участие в '; en = 'Attend to '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции


#КонецЕсли
