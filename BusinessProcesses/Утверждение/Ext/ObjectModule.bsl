#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыйИсполнитель = СтарыеУчастникиПроцесса.Исполнитель;
	
	СтарыйАвтор = СтарыеУчастникиПроцесса.Автор;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
			СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда 
				
				ЗадачаОбъект.Исполнитель = Автор;
				
				Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
					И ЗначениеЗаполнено(СтрокаПредметов) Тогда
					
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом утверждения %1'; en = 'Examine the confirmation result %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						СтрокаПредметов);
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом утверждения: %1'; en = 'Examine the confirmation result: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Наименование);
				КонецЕсли;
				
				// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
				ЗадачаОбъект.ра_ОписаниеДействияRU = "Ознакомиться с результатом утверждения";
				ЗадачаОбъект.ра_ОписаниеДействияEN = "Examine the confirmation result";
				// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
				
			Иначе
				ЗадачаОбъект.Наименование = Наименование;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаИсполнения,
					СрокИсполнения,
					СрокИсполненияДни,
					СрокИсполненияЧасы,
					СрокИсполненияМинуты);
				
				// исполнитель
				Если СтарыйИсполнитель <> Исполнитель Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
						ЗадачаОбъект.Исполнитель = Исполнитель;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
					Иначе
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Исполнитель;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Описание = Описание;
			ЗадачаОбъект.Автор 	  = Автор;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВидПроцесса) Тогда 
		ВидПроцесса = ШаблонБизнесПроцесса.ВидПроцесса;
	КонецЕсли;	
	
	// заполнение исполнителей
	Если ТипЗнч(ШаблонБизнесПроцесса.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Исполнитель, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи")
		 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		 
			Исполнитель = АвтоподстановкаИсполнитель;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
			
			Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'; en = 'Auto-substitution ""%1"" could not be used for field ""%2"" because containts an array of users'"),
				ШаблонБизнесПроцесса.Исполнитель,
				НСтр("ru = 'Исполнитель'; en = 'Performer'"));
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		Исполнитель = ШаблонБизнесПроцесса.Исполнитель;
	КонецЕсли;
	
	// Срок исполнения
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения) Тогда
		ВариантУстановкиСрокаИсполнения = ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда
		СрокИсполнения = ШаблонБизнесПроцесса.СрокИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияДни) Тогда
		СрокИсполненияДни = ШаблонБизнесПроцесса.СрокИсполненияДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧасы) Тогда
		СрокИсполненияЧасы = ШаблонБизнесПроцесса.СрокИсполненияЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияМинуты) Тогда
		СрокИсполненияМинуты = ШаблонБизнесПроцесса.СрокИсполненияМинуты;
	КонецЕсли;
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	// Электронная подпись
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП;
		
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
		ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
		
		Если ПредметыПодписыватьЭП.Количество() = 0 Тогда
			ПодписыватьЭП = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланАвтора = ШаблонБизнесПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование) Или
		Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	
	КоличествоИтераций = 1;
	
	Если СрокИсполнения = Дата(1,1,1)
		И СрокИсполненияДни = 0
		И СрокИсполненияЧасы = 0
		И СрокИсполненияМинуты = 0 Тогда
		
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		ВариантУстановкиСрокаОбработкиРезультатов = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) И ПроектнаяЗадача.Исполнители.Количество() > 0 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[0];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
			Исполнитель = СтрокаИсполнитель.Исполнитель;
			ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос сроков
	ШаблонОбъект.СрокИсполненияДни = СрокИсполненияДни;
	ШаблонОбъект.СрокИсполненияЧасы = СрокИсполненияЧасы;
	ШаблонОбъект.СрокИсполненияМинуты = СрокИсполненияМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнитель = Исполнитель;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	ШаблонОбъект.ПодписыватьЭП = ПодписыватьЭП;
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнители[0];
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Утвердить ""%1""'; en = 'Confirm ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Предмет");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПроцесса) Тогда
		ВидПроцесса = МультипредметностьПереопределяемый.ПолучитьВидПроцессаБПУтверждение(Предметы);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		
		НаименованиеПроцесса = НСтр("ru = 'Утвердить'; en = 'Confirm'");
		Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
			НаименованиеПроцесса = НСтр("ru = 'Подписать'; en = 'Sign'");
		КонецЕсли;
		
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НаименованиеПроцесса);
				
	КонецЕсли;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
	ра_НаименованиеБизнесПроцессаАнгл = Шаблон.ра_НаименованиеБизнесПроцессаАнгл + " " + МультипредметностьПереопределяемый.ПредметыСтрокойАнгл(Предметы);			
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 }
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.ЗаполнитьБизнесПроцессПоМероприятию(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
	ТипыВнутреннихДокументов = Новый Массив;
	ТипыВнутреннихДокументов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыВнутреннихДокументов, Истина);
	
	Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
		ИсполнителиВнутреннегоДокумента = Делопроизводство.ИсполнителиДокумента(Предмет);
		Если ИсполнителиВнутреннегоДокумента.Количество() > 0 Тогда 
			Исполнитель = ИсполнителиВнутреннегоДокумента[0];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
		Если ЗначениеЗаполнено(Предмет.ВидДокумента) Тогда
			РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет.ВидДокумента,
				"ВестиУчетСторон, ИспользоватьПодписание, ИспользоватьУтверждение, ВариантПодписания");

			Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание
				И РеквизитыВидаДокумента.ИспользоватьПодписание Тогда
					ДанныеПодписания = РаботаСПодписямиДокументов.ДанныеПодписанияДокумента(Предмет);
					Если ДанныеПодписания.ДокументПодписан Тогда
						
						Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеПодписания.ТекстОшибки);
						КонецЕсли;
						
						ВызватьИсключение ДанныеПодписания.ТекстОшибки;
					КонецЕсли;
				
			ИначеЕсли Не ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание
				И Не РеквизитыВидаДокумента.ИспользоватьУтверждение Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для документов вида ""%1"" не предусмотрено утверждение.
						|Обратитесь к ответственному за виды документов.';
						|en = 'Documents of ""%1"" type are not fit for confirmation. 
						|Contact the responsible for document type settings.'"),
						Строка(Предмет.ВидДокумента));
					
				Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Кому"" не заполнено", ЭтотОбъект,,"Исполнитель", Отказ);
	КонецЕсли;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
			Если ПодписыватьЭП
				И Не РаботаСЭП.ОбъектМожетБытьПодписанЭП(СтрокаПредмета.Предмет) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Процесс требует подписания предмета ""%1"" с помощью ЭП, но выбранный предмет не может быть подписан.'; en = 'The process requires subject ""%1"" to be signed digitally but the subject cannot be signed.'"),
						Строка(СтрокаПредмета.Предмет)),
					ЭтотОбъект,
					"Объект.Предметы[" + Формат(СтрокаПредмета.НомерСтроки - 1 ,"ЧН=0; ЧГ=0") +"].Описание",, 
					Отказ);
			КонецЕсли;
			Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(СтрокаПредмета.Предмет) Тогда
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПредмета.Предмет, "ВидДокумента, Подписал, РезультатПодписания, Стороны");
				Если ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
					РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.ВидДокумента,
						"ВестиУчетСторон, ИспользоватьПодписание, ИспользоватьУтверждение, ВариантПодписания");
						
					ДанныеПодписания = РаботаСПодписямиДокументов.ДанныеПодписанияДокумента(СтрокаПредмета.Предмет);
					Если ДанныеПодписания.ДокументПодписан Тогда
						Отказ = Истина;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеПодписания.ТекстОшибки, ЭтотОбъект,
							"Объект.Предметы[" + Формат(СтрокаПредмета.НомерСтроки - 1 ,"ЧН=0; ЧГ=0") +"].Описание",,
							Отказ);
						
					КонецЕсли;
						
					Если Не ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание
						И Не РеквизитыВидаДокумента.ИспользоватьУтверждение Тогда
						Отказ = Истина;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Для документов вида %1 не предусмотрено утверждение.
								|Обратитесь к ответственному за виды документов.';
								|en = 'Documents of %1 type are not fit for confirmation.
								|Contact the responsible for document type settings.'"),
							Строка(РеквизитыДокумента.ВидДокумента)),
							ЭтотОбъект,
							"Объект.Предметы[" + Формат(СтрокаПредмета.НомерСтроки - 1 ,"ЧН=0; ЧГ=0") +"].Описание",, 
							Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание
					И ЗначениеЗаполнено(РеквизитыДокумента.Подписал)
					И РеквизитыДокумента.Подписал <> Исполнитель Тогда
						Отказ = Истина;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Документ %1 подписывает %2.'; en = '%1 document is signed by %2.'"),
								Строка(СтрокаПредмета.Предмет),
								Строка(РеквизитыДокумента.Подписал)),
							ЭтотОбъект,"Исполнитель","Объект", Отказ);
							
				ИначеЕсли ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание
					И РеквизитыВидаДокумента.ВестиУчетСторон Тогда
						ПодписантыСторон = РаботаСПодписямиДокументов.ПодписантыСторонДокумента(РеквизитыДокумента.Стороны);
						Если ПодписантыСторон.Количество() > 0 
							И ПодписантыСторон.Найти(Исполнитель) = Неопределено Тогда
							Отказ = Истина;
							КоличествоПодписантов = ПодписантыСторон.Количество();
							ПодписантыСтрокой = "";
							Для Каждого ПодписантСтороны Из ПодписантыСторон Цикл
								ПодписантыСтрокой = ПодписантыСтрокой + Строка(ПодписантСтороны) + ", ";
							КонецЦикла;
							
							Если Прав(ПодписантыСтрокой, 2) = ", " Тогда
								ПодписантыСтрокой = Лев(ПодписантыСтрокой, СтрДлина(ПодписантыСтрокой) - 2);
							КонецЕсли;
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Документ %1 %2 %3.'; en = 'Document %1 %2 %3.'"),
								Строка(СтрокаПредмета.Предмет),
								?(КоличествоПодписантов = 1, "подписывает", "подписывают"),
								ПодписантыСтрокой),
								ЭтотОбъект,"Исполнитель","Объект", Отказ);
						КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
				НайденнаяСтрока = РезультатыУтверждения.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.РезультатУтверждения = ДополнительныеСвойства.РезультатУтверждения;
			ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
				ПовторитьУтверждение = ДополнительныеСвойства.ПовторитьУтверждение;
				Если ДополнительныеСвойства.Свойство("Исполнитель") Тогда
					Исполнитель = ДополнительныеСвойства.Исполнитель;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполненияПроцесса") Тогда
					СрокИсполненияПроцесса = ДополнительныеСвойства.СрокИсполненияПроцесса;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполнения") Тогда
					СрокИсполнения = ДополнительныеСвойства.СрокИсполнения;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокИсполненияДни") Тогда
					СрокИсполненияДни = ДополнительныеСвойства.СрокИсполненияДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокИсполненияЧасы") Тогда
					СрокИсполненияЧасы = ДополнительныеСвойства.СрокИсполненияЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокИсполненияМинуты") Тогда
					СрокИсполненияМинуты = ДополнительныеСвойства.СрокИсполненияМинуты;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаИсполнения") Тогда
					ВариантУстановкиСрокаИсполнения = ДополнительныеСвойства.ВариантУстановкиСрокаИсполнения;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатов") Тогда
					СрокОбработкиРезультатов = ДополнительныеСвойства.СрокОбработкиРезультатов;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовДни") Тогда
					СрокОбработкиРезультатовДни = ДополнительныеСвойства.СрокОбработкиРезультатовДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовЧасы") Тогда
					СрокОбработкиРезультатовЧасы = ДополнительныеСвойства.СрокОбработкиРезультатовЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовМинуты") Тогда
					СрокОбработкиРезультатовМинуты = ДополнительныеСвойства.СрокОбработкиРезультатовМинуты;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
					ВариантУстановкиСрокаОбработкиРезультатов = ДополнительныеСвойства.ВариантУстановкиСрокаОбработкиРезультатов;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("КоличествоИтераций") Тогда
					КоличествоИтераций = ДополнительныеСвойства.КоличествоИтераций;
				КонецЕсли;
				
				НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.ОтправленоНаПовторноеУтверждение = ДополнительныеСвойства.ПовторитьУтверждение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
	
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			
			Если ПометкаУдаления Тогда 
				Для Каждого Предмет Из ПредметыДляУстановки Цикл
					ПриОткрепленииПредмета(Предмет);
				КонецЦикла;
			Иначе
				ВосстановитьСостоянияПредметов();
			КонецЕсли;	
		КонецЕсли;
		
		ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
		Если Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
			И Состояние <> ПредыдущееСостояние Тогда
			КомпенсироватьСостояниеПредметов();
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыУтверждения.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатУтверждения = Неопределено;
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		СостояниеДокументов = Перечисления.СостоянияДокументов.НаПодписании;
	Иначе
		СостояниеДокументов = Перечисления.СостоянияДокументов.НаУтверждении;
	КонецЕсли;
	
	Для Каждого Предмет Из ПредметыДляУстановки Цикл
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ТекущаяДатаСеанса(), 
			СостояниеДокументов, 
			Ссылка);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка);
	КонецЕсли;
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьУтверждение = Ложь;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
	РаботаСГрифамиУтверждений.ОбработатьГрифыПриНачалеПроцесса(Ссылка);
	РаботаСПодписямиДокументов.ОбработатьПодписиПриНачалеПроцесса(Ссылка);
	
КонецПроцедуры

Процедура УтвердитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Наименование   = Наименование;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
	Задача.ра_НаименованиеБизнесПроцессаАнгл = ра_НаименованиеБизнесПроцессаАнгл;	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 }
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты);
	
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель;
	Иначе
		Задача.РольИсполнителя = Исполнитель;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	Если НомерИтерации > 1 Тогда 
		НайденнаяСтрока = РезультатыУтверждения.Найти(НомерИтерации-1, "НомерИтерации");
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроля(Ссылка, НайденнаяСтрока.ЗадачаИсполнителя, ЗадачаСсылка);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыУтверждения.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат утверждения
	РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
	Для Каждого Элемент Из РезультатыУтверждения Цикл
		Если Элемент.НомерИтерации = НомерИтерации Тогда
			
			ЗадачаИсполнителя = Элемент.ЗадачаИсполнителя;
			Если Элемент.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
				РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина); 
	
	Если ОбрабатываемыеДокументы.Количество() > 0 Тогда
		
		ДатаИсполнения = ТекущаяДатаСеанса();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(РезультатыУтверждения.ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Утверждение.РезультатыУтверждения КАК РезультатыУтверждения
		|ГДЕ
		|	РезультатыУтверждения.Ссылка = &Ссылка
		|	И РезультатыУтверждения.НомерИтерации = &НомерИтерации";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ДатаИсполнения = Выборка.ДатаИсполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Предмет Из ОбрабатываемыеДокументы Цикл
		
		Если РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено И ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда 
			// утвердил (подписал) 
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
				РаботаСПодписямиДокументов.ОбработатьПодписаниеПриВыполненииЗадачи(ЭтотОбъект, Предмет, ЗадачаИсполнителя, РезультатУтверждения);
				РаботаСГрифамиУтверждений.ОбработатьГрифыПриВыполненииЗадачи(ЭтотОбъект, Предмет, ЗадачаИсполнителя, РезультатУтверждения);
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				ЗаблокироватьДанныеДляРедактирования(Предмет);
				ДокументОбъект = Предмет.ПолучитьОбъект();
				РаботаСРабочимиГруппами.ОтключитьПерезаписьРабочейГруппыПредметаПроцесса(ДокументОбъект);
				ДокументОбъект.Подписал = ЗадачаИсполнителя.Исполнитель;
				ДокументОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено И ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
				РаботаСПодписямиДокументов.ОбработатьПодписаниеПриВыполненииЗадачи(ЭтотОбъект, Предмет, ЗадачаИсполнителя, РезультатУтверждения);
				РаботаСГрифамиУтверждений.ОбработатьГрифыПриВыполненииЗадачи(ЭтотОбъект, Предмет, ЗадачаИсполнителя, РезультатУтверждения);
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
			Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
				СостояниеДокумента = Перечисления.СостоянияДокументов.Отклонен;
			Иначе
				СостояниеДокумента = Перечисления.СостоянияДокументов.НеУтвержден;
			КонецЕсли;
		Иначе
			Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
				СостояниеДокумента = РаботаСПодписямиДокументов.ОпределитьСостояниеПодписи(Предмет);
			Иначе
				СостояниеДокумента = Перечисления.СостоянияДокументов.Утвержден;
			КонецЕсли;
		КонецЕсли;
				
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ДатаИсполнения, 
			СостояниеДокумента, 
			Ссылка);
					
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если процесс завершился положительно, то задачу ознакомления формируем
	// после завершения процесса.
	Если РезультатУтверждения <> Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ПовторитьУтверждениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьУтверждение;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// ТСК Корнюшенков А.Ю. 28.06.2018 {
	// комментируем это	
	// Если процесс завершился положительно и нет задачи ознакомления (задача ознакомления могла быть
	// создана до перехода на редакцию 2.1), то создаем задачу ознакомления с результатом.
	//Если РезультатУтверждения <> Перечисления.РезультатыУтверждения.НеУтверждено
	//	И РезультатыОзнакомлений.Найти(НомерИтерации, "НомерИтерации") = Неопределено Тогда
	//	
	//	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	//	ЗаполнитьЗадачуОзнакомиться(Задача);
	//	Задача.Записать();
	//	
	//	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	//	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	//	НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
	//	
	//	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	//	
	//КонецЕсли;
	// ТСК Корнюшенков А.Ю. 28.06.2018 } 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры

// Заполняет задачу создаваемую в точке маршрута "Ознакомиться".
//
// Параметры:
//   - Задача - ЗадачаОбъект.ЗадачаИсполнителя
//
Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться;
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Исполнитель 	  = Автор;
	
	// Если указана дата завершения, то создается после завершения с пустым сроком,
	// т.к. она формируется для уведомления автора процесса о положительном
	// завершении и не влияет на срок исполнения всего процесса.
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		Задача.СрокИсполнения = Дата(1,1,1);
	Иначе
		СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
			Задача,
			ВариантУстановкиСрокаОбработкиРезультатов,
			СрокОбработкиРезультатов,
			СрокОбработкиРезультатовДни,
			СрокОбработкиРезультатовЧасы,
			СрокОбработкиРезультатовМинуты);
	КонецЕсли;
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		НаименованиеВидаПроцесса = НСтр("ru = 'подписания'; en = 'signing'");
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 10.07.2018 {
		НаименованиеОтрицательногоРезультата = НСтр("ru = 'НЕ ПОДПИСАН'; en = 'NOT SIGNED'"); 			
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 10.07.2018 } 
	Иначе
		НаименованиеВидаПроцесса = НСтр("ru = 'утверждения'; en = 'confirmations'");
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 10.07.2018 {
		НаименованиеОтрицательногоРезультата = НСтр("ru = 'НЕ УТВЕРЖДЕН'; en = 'NOT SIGNED'"); 			
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 10.07.2018 } 
	КонецЕсли;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 10.07.2018 {
	//Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
	//	И ЗначениеЗаполнено(СтрокаПредметов) Тогда
	//	
	//	Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = '%1 %2. Ознакомиться с результатом %3'; en = '%1 %2.  Examine the result %3'",
	//			ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
	//		СтрокаПредметов,
	//		НаименованиеОтрицательногоРезультата,
	//		НаименованиеВидаПроцесса);
	//Иначе
	//	
	//	Наименование = СтрЗаменить(Наименование, НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) + " ", "");
	//	
	//	Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = '%1 %2. Ознакомиться с результатом'; en = '%1 %2. Examine the result'",
	//			ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
	//		Наименование,
	//		НаименованиеОтрицательногоРезультата);
	//КонецЕсли;
	
	// БЫЛО
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(СтрокаПредметов) Тогда
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом %1 %2'; en = 'Examine the result %1 %2'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			НаименованиеВидаПроцесса,
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом %1: %2'; en = 'Examine the result %1: %2'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			НаименованиеВидаПроцесса,
			Наименование);
	КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	Задача.ра_ОписаниеДействияRU = "Ознакомиться с результатом утверждения";
	Задача.ра_ОписаниеДействияEN = "Examine the confirmation result";
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 10.07.2018 } 	
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
	Задача.ра_НаименованиеБизнесПроцессаАнгл = "Examine the result: " + МультипредметностьПереопределяемый.ПредметыСтрокойАнгл(Предметы);
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 }
	
	// автор
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Автор = Исполнитель;
	Иначе	
		НайденнаяСтрока = РезультатыУтверждения.Найти(НомерИтерации, "НомерИтерации");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Задача.Автор = НайденнаяСтрока.ЗадачаИсполнителя.Исполнитель;
		КонецЕсли;	
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостоянияПредметов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ОбрабатываемыеПредметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УтверждениеРезультатыУтверждения.НомерИтерации,
		|	МИНИМУМ(УтверждениеРезультатыУтверждения.ЗадачаИсполнителя.Дата) КАК ПерваяЗадача,
		|	МАКСИМУМ(УтверждениеРезультатыУтверждения.ЗадачаИсполнителя.ДатаИсполнения) КАК ПоследняяЗадача
		|ИЗ
		|	БизнесПроцесс.Утверждение.РезультатыУтверждения КАК УтверждениеРезультатыУтверждения
		|ГДЕ
		|	УтверждениеРезультатыУтверждения.Ссылка = &ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УтверждениеРезультатыУтверждения.НомерИтерации";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ДатыЗадач = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого Предмет из ОбрабатываемыеПредметы Цикл

		
		Для Инд = 1 По НомерИтерации Цикл
			СтрокаДаты = ДатыЗадач.Найти(Инд, "НомерИтерации");
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			СтрокаДаты.ПерваяЗадача, 
			Перечисления.СостоянияДокументов.НаУтверждении, 
			Ссылка);
		
			ЗадачиИтерации = РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", Инд));
			
			ИтерацияЗавершена = Истина;
			Для Каждого Строка Из ЗадачиИтерации Цикл
				Если Не Строка.ЗадачаИсполнителя.Выполнена Тогда 
					ИтерацияЗавершена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИтерацияЗавершена Тогда 
				
				СостояниеИтерации = Перечисления.СостоянияДокументов.Утвержден;
				Для Каждого Строка Из ЗадачиИтерации Цикл
					Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
						СостояниеИтерации = Перечисления.СостоянияДокументов.НеУтвержден;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Делопроизводство.ЗаписатьСостояниеДокумента(
				Предмет, 
				СтрокаДаты.ПоследняяЗадача, 
				СостояниеИтерации, 
				Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

// Возвращает признак наличия метода ПриПрикрепленииПредмета
// 
Функция ЕстьМетодПриПрикрепленииПредмета() Экспорт
	Возврат Ложь;
КонецФункции

// Возвращает признак наличия метода ПриОткрепленииПредмета
// 
Функция ЕстьМетодПриОткрепленииПредмета() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Делопроизводство.УдалитьСостояниеДокумента(Документ, Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

// Компенсирует состояние документа при прерывании БП
//
Процедура КомпенсироватьСостояниеПредметов() Экспорт
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда 
			Делопроизводство.УдалитьСостояниеДокумента(Предмет, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		// Результат предыдущего утверждения
		НомерИтерацииЗадачи = Неопределено;
		
		НайденнаяСтрока = РезультатыУтверждения.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была направлена на повторное утверждение'; en = 'Task was sent for repeat approval'", КодЯзыкаПолучателя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Результат утверждения
		НайденнаяСтрока = РезультатыУтверждения.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			Если НайденнаяСтрока.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
				Результат = НСтр("ru = 'Результат утверждения: Утверждено'; en = 'Result of confirmation: Confirmed'", КодЯзыкаПолучателя);
			ИначеЕсли НайденнаяСтрока.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				Результат = НСтр("ru = 'Результат утверждения: Не утверждено'; en = 'Result of confirmation: Not confirmed'", КодЯзыкаПолучателя);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		// Результат утверждения
		НомерИтерацииЗадачи = Неопределено;
		РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.Утверждено;
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
				РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.НеУтверждено;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.Утверждено Тогда
			Результат = НСтр("ru = 'Результат утверждения: Утверждено'; en = 'Result of confirmation: Confirmed'", КодЯзыкаПолучателя);
		ИначеЕсли РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
			Результат = НСтр("ru = 'Результат утверждения: Не утверждено'; en = 'Result of confirmation: Not confirmed'", КодЯзыкаПолучателя);
		КонецЕсли;
		
		// Результат ознакомления
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Если НайденнаяСтрока.ОтправленоНаПовторноеУтверждение Тогда
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом утверждения: Отправлено на повторное утверждение'; en = 'Result of examination of confirmation result: Sent for repeat confirmation'",
						КодЯзыкаПолучателя);
				Иначе
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом утверждения: Ознакомился'; en = 'Result of examination with confirmation result: Examined'",
						КодЯзыкаПолучателя);
				КонецЕсли;
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					РезультатОзнакомления);
				
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		МассивПолей.Добавить("Исполнитель");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	


Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		НаименованиеПоУмолчанию = НСтр("ru = 'Подписать '; en = 'Sign '");
	Иначе
		НаименованиеПоУмолчанию = НСтр("ru = 'Утвердить '; en = 'Confirm '");
	КонецЕсли;
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

#КонецЕсли

// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 17.08.2018 {
Процедура ОзнакомитьсяПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	// записываем статус Аннулирован, когда не повторяет процесс
	Если ПовторитьУтверждение Тогда 
		Возврат;
	КонецЕсли;		
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	ДатаИсполнения = ТекущаяДатаСеанса();
	
	СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Аннулирован;
	
	Для Каждого Предмет Из ОбрабатываемыеДокументы Цикл
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ДатаИсполнения, 
			СостояниеДокумента, 
			Ссылка);	
		
	КонецЦикла;
	
КонецПроцедуры
// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 17.08.2018 }
