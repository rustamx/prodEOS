
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если Объект.Ссылка.Пустая() И Объект.Исполнитель = Неопределено Тогда 
		Объект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	Элементы.ПодписыватьЭП.Доступность = (ОсновныеПредметы.Количество() > 0);
	
	Если Объект.Стартован Тогда
		Если Объект.Завершен Тогда
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполнялся %1)'; en = '(was on execution for %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаЗавершения, Объект.ДатаНачала)));
		Иначе
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполняется %1)'; en = '(on execution for %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(), Объект.ДатаНачала)));
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Настройки старта
	СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	СрокиИсполненияПроцессов.ЗаполнитьДатыИсполненияУчастников(
		Объект.Ссылка, ДатыИсполненияУчастников);
	СрокиИсполненияПроцессов.КарточкаПроцессаПриСозданииНаСервере(
		ЭтаФорма, БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
		
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Настройка дерева задач и списка активных задач
	РаботаСБизнесПроцессамиВызовСервера.ДеревоПроцессовИЗадач_ПриСозданииНаСервере(ЭтаФорма, Объект.Ссылка);
	
	// Заполнение количества активных задач
	КоличествоАктивныхЗадач = РаботаСБизнесПроцессамиВызовСервера.КоличествоАктивныхЗадачПоПредмету(Объект.Ссылка);
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ФормаГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	ВидПроцессаПодписание = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание;
	СформироватьЗаголовкиИПодсказкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадачКлиент.ДобавитьЗаявкуНаПереносСрокаВПараметрыЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// Сроки исполнения процессов
	СрокиИсполненияПроцессовКлиент.ПодтвердитьПереносСрокаПроцесса(ЭтаФорма, Отказ, ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	
	ПроверитьОтсутствиеУчастниковПроцесса = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
			Объект,
			Отказ,
			УникальныйИдентификатор,
			ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
			ЭтаФорма, Объект, ПараметрыЗаписи, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
		
	ИначеЕсли Объект.Стартован И Модифицированность Тогда 
		
		Если ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				Объект.СрокИсполненияПроцесса, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса")
		Или ПараметрыЗаписи.Свойство("ОтложенныйСтартПроцесса")
		Или (Не Объект.Стартован
			И Модифицированность
			И ЗначениеЗаполнено(НастройкаСтарта)
			И НастройкаСтарта.Состояние = 
				ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту")) Тогда
			
		ПараметрыЗаписи.Вставить("ИзменениеОтложенногоПроцесса", Истина);
		ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
	КонецЕсли;
	
	Если ПроверитьОтсутствиеУчастниковПроцесса
		И Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроцессуПередЗаписью(ЭтаФорма,
				ПараметрыЗаписи, Отказ) Тогда
				
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт
			Или ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса") И ПараметрыЗаписи.ФоновыйСтартПроцесса) Тогда
			
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("УтверждениеВыполнениеКомандыСтартовать");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессамиВызовСервера.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи
	// Проверка правильности указания трудозатрат участников процесса
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессамиВызовСервера.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Объект.Ссылка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОповеститьОПереносеСроков(ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(СтрокаПредмета.Предмет);
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", Объект.Ссылка);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ПоказатьОповещениеПослеЗаписиПроцесса(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Объект.Ссылка, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	СформироватьЗаголовкиИПодсказкиЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Настройки старта
	СтартПроцессовСервер.ОбновитьНастройкиСтартаПроцессаИзФормы(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи, НастройкаСтарта);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессамиВызовСервера.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтаФорма, Параметр.Файл);
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя"
		Или ИмяСобытия = "ЗадачаВыполнена" Тогда
		
		ОбработатьИзменениеЗадачи(Параметр);
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПроцессаПриИзменении(Элемент)
	
	ПроверитьВозможностьУстановкиПодписей();
	СформироватьЗаголовкиИПодсказкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоПроцессовЗадач", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение(
		"Перечисление.СостоянияБизнесПроцессов.Прерван") Тогда
		
		КомандыРаботыСБизнесПроцессамиКлиент.ПоказатьПричинуПрерывания(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеОбработкаНавигационнойСсылки(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИтерацийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.КоличествоИтерацийПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписыватьЭППриИзменении(Элемент)
	
	ПроверитьВозможностьУстановкиЭлектронныхПодписей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Исполнитель

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникСоСрокомИсполненияПриИзменении(ЭтаФорма, "Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникСоСрокомИсполненияНачалоВыбора(
		Элемент, Объект.Исполнитель, СтандартнаяОбработка, ЭтаФорма, "Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникСоСрокомИсполненияОчистка(СтандартнаяОбработка,
		ЭтаФорма, "Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтаФорма, "Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, "Исполнитель");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СрокИсполненияПредставление

&НаКлиенте
Процедура СрокИсполненияПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтаФорма;
	ДопПараметры.Поле = "СрокИсполненияПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокИсполнения";
	ДопПараметры.Исполнитель = Объект.Исполнитель;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		Объект.СрокИсполнения,
		Объект.СрокИсполненияДни,
		Объект.СрокИсполненияЧасы,
		Объект.СрокИсполненияМинуты,
		Объект.ВариантУстановкиСрокаИсполнения,
		СрокИсполненияПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтаФорма;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокИсполненияДни";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокИсполненияЧасы";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокИсполненияМинуты";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокИсполненияПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "Объект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокИсполнения";
	ПараметрыВыбораСрока.Участник = Объект.Исполнитель;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтаФорма,
		Объект.СрокИсполнения,
		Объект.СрокИсполненияДни,
		Объект.СрокИсполненияЧасы,
		Объект.СрокИсполненияМинуты,
		СрокИсполненияПредставление,
		Объект.ВариантУстановкиСрокаИсполнения,
		Направление,
		"СрокИсполнения");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СрокОбработкиРезультатовПредставление

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтаФорма;
	ДопПараметры.Поле = "СрокОбработкиРезультатовПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокОбработкиРезультатов";
	ДопПараметры.Исполнитель = Объект.Автор;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		Объект.СрокОбработкиРезультатов,
		Объект.СрокОбработкиРезультатовДни,
		Объект.СрокОбработкиРезультатовЧасы,
		Объект.СрокОбработкиРезультатовМинуты,
		Объект.ВариантУстановкиСрокаОбработкиРезультатов,
		СрокОбработкиРезультатовПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтаФорма;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокОбработкиРезультатовДни";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокОбработкиРезультатовЧасы";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокОбработкиРезультатовМинуты";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаОбработкиРезультатов";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокОбработкиРезультатовПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "Объект";
	ПараметрыВыбораСрока.СрокиПредшественников = Объект.СрокИсполнения;
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.Участник = Объект.Автор;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтаФорма,
		Объект.СрокОбработкиРезультатов,
		Объект.СрокОбработкиРезультатовДни,
		Объект.СрокОбработкиРезультатовЧасы,
		Объект.СрокОбработкиРезультатовМинуты,
		СрокОбработкиРезультатовПредставление,
		Объект.ВариантУстановкиСрокаОбработкиРезультатов,
		Направление,
		"СрокОбработкиРезультатов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_ПроектЗадача

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(,Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(,Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЗаполнитьПоПроектнойЗадачеНаСервере(Объект.ПроектнаяЗадача);
		КонецЕсли;
		Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Автор

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.АвторСоСрокомИсполненияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_ТрудозатратыУчастниковПроцесса

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	ТрудозатратыИсполнителя = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Исполнитель'; en = 'Performer'"),
			"ТрудозатратыПланИсполнителя",
			Объект.ТрудозатратыПланИсполнителя,
			Объект.Исполнитель);
	Настройки.Участники.Добавить(ТрудозатратыИсполнителя);
	
	ТрудозатратыАвтора = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Автор'; en = 'Author'"),
			"ТрудозатратыПланАвтора",
			Объект.ТрудозатратыПланАвтора,
			Объект.Автор);
	Настройки.Участники.Добавить(ТрудозатратыАвтора);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Наименование",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПриглашениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Описание",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПриглашениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПриглашениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Объект.Наименование = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	МультипредметностьКлиент.ОбновитьОтображениеКомандыОсновнойПредметВПроцессе(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	МультипредметностьКлиентСервер.УстановитьВидимостьТаблицыПредметов(ЭтаФорма, Объект);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтаФорма, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	Если МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
		ПредметыПредметПриИзменении();
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СтартоватьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуОтложенногоСтарта(Команда)
	
	СтартПроцессовКлиент.УстановитьДатуОтложенногоСтарта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);	
	ШаблоныПоПредметам.ЗагрузитьЗначения(
		МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныУтверждения", Ложь));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса(
		"ШаблоныУтверждения", ШаблоныПоПредметам, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры        

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы_Предметы

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(
		ЭтаФорма, Объект, Истина,, Тип("СправочникСсылка.Файлы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойПредмет(Команда)
	
	МультипредметностьКлиент.ОсновнойПредмет(ЭтаФорма);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	
	КоличествоОсновныхПредметов = Предметы.Количество();
	
	Элементы.ПодписыватьЭП.Доступность = (КоличествоОсновныхПредметов > 0);
	
	Если КоличествоОсновныхПредметов = 0 Тогда
		Объект.ПодписыватьЭП = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ДеревоПроцессовИЗадач

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоПроцессовЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуОбъекту(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПерейтиКТекущемуОбъекту(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИзменениеЗадачи(Задача)
	
	Если ОбщегоНазначенияДокументооборот.
		ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Задача, "БизнесПроцесс") = Объект.Ссылка Тогда
		
		Прочитать();
		
		СрокиИсполненияПроцессов.ЗаполнитьДатыИсполненияУчастников(
			Объект.Ссылка, ДатыИсполненияУчастников);
		ОбновитьПризнакиИстекшихСроков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(Ссылка)
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьУстановкиЭлектронныхПодписей()
	
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,,Истина);
	
	Если ОбрабатываемыеПредметы.Количество() = 1 Тогда
		Если Объект.ПодписыватьЭП
			И Не РаботаСЭП.ОбъектМожетБытьПодписанЭП(ОбрабатываемыеПредметы[0]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Предмет ""%1"" не может быть подписан ЭП.'; en = 'Subject ""%1"" cannot be singed with DS.'"),
				ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(ОбрабатываемыеПредметы[0]));
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Очистить предмет'; en = 'Clear subject'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Снять опцию ""Подписывать ЭП""'; en = 'Uncheck option ""Sign with DS""'"));
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ОбрабатываемыеПредметы", ОбрабатываемыеПредметы);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПроверитьВозможностьУстановкиЭлектронныхПодписейПродолжение",
				ЭтотОбъект,
				ПараметрыОбработчика);
			ПоказатьВопрос(ОписаниеОповещения,Текст, Кнопки);
			
		КонецЕсли;
		
	Иначе
		
		МожноПодписатьВсеОбъекты = Истина;
		ПредметыБезВозможностиПодписи = Новый Массив;
		
		Для каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Если НЕ РаботаСЭП.ОбъектМожетБытьПодписанЭП(Предмет) Тогда
				МожноПодписатьВсеОбъекты = Ложь;
				ПредметыБезВозможностиПодписи.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ МожноПодписатьВсеОбъекты Тогда
			ПредметыБезВозможностиПодписиСтрокой = "";
			
			Для Каждого Предмет Из ПредметыБезВозможностиПодписи Цикл
				Если Не ПустаяСтрока(ПредметыБезВозможностиПодписиСтрокой) Тогда
					ПредметыБезВозможностиПодписиСтрокой = ПредметыБезВозможностиПодписиСтрокой + ", 
						|";
				КонецЕсли;
				ПредметыБезВозможностиПодписиСтрокой = ПредметыБезВозможностиПодписиСтрокой + ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(Предмет);
			КонецЦикла;
			
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не все выбранные предметы можно подписать ЭП. Опция ""Подписывать ЭП"" снята.
								|Нельзя подписать предметы: 
								|%1';
								|en = 'Some of the selected subjects cannot be signed digitally. ""Sign with DS"" option is disabled.
								|Subjects that cannot be signed: 
								|%1'"), ПредметыБезВозможностиПодписиСтрокой),, 
			"Объект.Предметы");
			Объект.ПодписыватьЭП = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьУстановкиЭлектронныхПодписейПродолжение(Выбор, Параметры) Экспорт
	
	Если Выбор <> КодВозвратаДиалога.ОК Тогда
		Объект.ПодписыватьЭП = Ложь;
		Возврат;
	КонецЕсли;
	СтрокиТекущегоПредмета = Объект.Предметы.НайтиСтроки(
		Новый Структура("Предмет, РольПредмета", 
						Параметры.ОбрабатываемыеПредметы[0],
						ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")));
		
	Элементы.Предметы.ТекущаяСтрока = СтрокиТекущегоПредмета[0].ПолучитьИдентификатор();
	Отказ = Ложь;
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	Если Не Отказ Тогда
		Объект.Предметы.Удалить(СтрокиТекущегоПредмета[0]);
	КонецЕсли;
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПроектнойЗадачеНаСервере(ПроектнаяЗадача) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессОбъект.ЗаполнитьПоПроектнойЗадаче(ПроектнаяЗадача);
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Шаблон, ЭтаФорма);
	ОбновитьЭлементыДополнительныхРеквизитов();
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	УстановитьДоступностьПоШаблону();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступность()
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	Если Объект.Завершен
		Или Не ПравоНаИзменение
		Или (ЗначениеЗаполнено(Объект.Ссылка) И ЭтотУзел <> Объект.УзелОбмена) Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		Элементы.Исполнитель.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
	Если Объект.Стартован Тогда
		Элементы.ЗаполнитьПоШаблону.Видимость = Ложь;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ВидПроцесса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	
	Элементы.ПодписыватьЭП.Доступность = (ОсновныеПредметы.Количество() > 0);
	
	Элементы.ГруппаИнфо.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.Длительность.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессамиВызовСервера.ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
		
	ТипыПредметов = Новый Массив;
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	ПредметыВнутренниеДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыПредметов, Истина);
	
	Если ПредметыВнутренниеДокументы.Количество() > 0 Тогда
		Элементы.ВидПроцесса.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда 
		Элементы.Исполнитель.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Исполнитель.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Элементы.Исполнитель.ТолькоПросмотр = Элементы.Исполнитель.ТолькоПросмотр ИЛИ ТолькоПросмотр;
	
	ПараметрыДоступности = 
		СрокиИсполненияПроцессовКлиентСервер.ПараметрыДоступностиЭлементаУправления();
	ПараметрыДоступности.ДоступностьПоШаблону = ДоступностьПоШаблону;
	ПараметрыДоступности.ВестиУчетПереносаСроков = ВестиУчетПереносаСроков;
	ПараметрыДоступности.ЗаявкаНаПереносСрока = ЗаявкаНаПереносСрока;
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.СрокИсполненияПредставление,
		СрокИсполненияПредставление,
		ПараметрыДоступности);
		
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.СрокОбработкиРезультатовПредставление,
		СрокОбработкиРезультатовПредставление,
		ПараметрыДоступности);
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.КоличествоИтераций,
		Объект.КоличествоИтераций,
		ПараметрыДоступности);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ПрочитатьПараметрыСостояния = Ложь) Экспорт
	
	Если ПрочитатьПараметрыСостояния Тогда
		Прочитать();
		СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
	
	Элементы.Исполнитель.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СрокИсполненияПредставление.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СрокОбработкиРезультатовПредставление.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура("Исполнитель", 
										  Объект.Исполнитель);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВозможностьУстановкиПодписей()
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,,Истина);
	
	Если ОсновныеПредметы.Количество() = 1 Тогда
		Если Объект.ВидПроцесса = ВидПроцессаПодписание
			И Не РаботаСПодписямиДокументовВызовСервера.МожетБытьПодписан(ОсновныеПредметы[0]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Предмет ""%1"" не может быть подписан.'; en = 'Subject ""%1"" cannot be signed.'"),
				ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(ОсновныеПредметы[0]));
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Очистить предмет'; en = 'Clear subject'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Установить вид процесса ""Утверждение""'; en = 'Setting the type of process ""Confirmation""'"));
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ОсновныеПредметы", ОсновныеПредметы);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПроверитьВозможностьУстановкиПодписейПродолжение",
				ЭтотОбъект,
				ПараметрыОбработчика);
			ПоказатьВопрос(ОписаниеОповещения,Текст, Кнопки);
			
		КонецЕсли;
		
	Иначе
		
		ПредметыБезВозможностиПодписи = Новый Массив;
		
		Для каждого Предмет Из ОсновныеПредметы Цикл
			Если НЕ РаботаСПодписямиДокументовВызовСервера.МожетБытьПодписан(Предмет) Тогда
				ПредметыБезВозможностиПодписи.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		
		Если ПредметыБезВозможностиПодписи.Количество() > 0 Тогда
			ПредметыБезВозможностиПодписиСтрокой = "";
			
			Для Каждого Предмет Из ПредметыБезВозможностиПодписи Цикл
				Если Не ПустаяСтрока(ПредметыБезВозможностиПодписиСтрокой) Тогда
					ПредметыБезВозможностиПодписиСтрокой = ПредметыБезВозможностиПодписиСтрокой + ", 
						|";
				КонецЕсли;
				ПредметыБезВозможностиПодписиСтрокой = ПредметыБезВозможностиПодписиСтрокой + ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(Предмет);
			КонецЦикла;
			
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не все выбранные предметы можно подписать. Вид процесса будет установлен в значение ""Утверждение"".
								|Нельзя подписать предметы: 
								|%1';
								|en = 'Not all of the selected subjects can be signed. Process type will be set to ""Confirmation"".
								|You cannot sign subjects:
								|%1'"), ПредметыБезВозможностиПодписиСтрокой),, 
			"Объект.Предметы");
			Объект.ВидПроцесса = ПредопределенноеЗначение("Перечисление.ВидыБизнесПроцессаУтверждение.Утверждение");
			СформироватьЗаголовкиИПодсказкиЭлементовФормы();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьУстановкиПодписейПродолжение(Выбор, Параметры) Экспорт
	
	Если Выбор <> КодВозвратаДиалога.ОК Тогда
		Объект.ВидПроцесса = ПредопределенноеЗначение("Перечисление.ВидыБизнесПроцессаУтверждение.Утверждение");
		СформироватьЗаголовкиИПодсказкиЭлементовФормы();
		Возврат;
	КонецЕсли;
	
	СтрокиТекущегоПредмета = Объект.Предметы.НайтиСтроки(
		Новый Структура("Предмет, РольПредмета", 
						Параметры.ОсновныеПредметы[0],
						ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")));
		
	Элементы.Предметы.ТекущаяСтрока = СтрокиТекущегоПредмета[0].ПолучитьИдентификатор();
	Отказ = Ложь;
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	Если Не Отказ Тогда
		Объект.Предметы.Удалить(СтрокиТекущегоПредмета[0]);
	КонецЕсли;
	ПредметыПредметПриИзменении();

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовкиИПодсказкиЭлементовФормы()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Объект.ВидПроцесса = ВидПроцессаПодписание Тогда 
			Заголовок = НСтр("ru = 'Подписание (создание)'; en = 'Signing (create)'");
		Иначе 
			Заголовок = НСтр("ru = 'Утверждение (создание)'; en = 'Confirmation (create)'");
		КонецЕсли;
	Иначе 
		Заголовок = Объект.Наименование;
	КонецЕсли;
	
	Если Объект.ВидПроцесса = ВидПроцессаПодписание Тогда
		Элементы.ГруппаГлавное.Заголовок = НСтр("ru = 'Подписание'; en = 'Signing'");
		Элементы.СрокИсполненияПредставление.Заголовок = НСтр("ru = 'Срок подписания'; en = 'Signing due date'");
		Элементы.СрокИсполненияПредставление.Подсказка = НСтр("ru = 'Срок подписания (по графику работ)'; en = 'Signing due date (according to schedule)'");
	Иначе
		Элементы.ГруппаГлавное.Заголовок = НСтр("ru = 'Утверждение'; en = 'Confirmation'");
		Элементы.СрокИсполненияПредставление.Заголовок = НСтр("ru = 'Срок утверждения'; en = 'Confirmation due date'");
		Элементы.СрокИсполненияПредставление.Подсказка = НСтр("ru = 'Срок утверждения (по графику работ)'; en = 'Confirmation due date (according to schedule)'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 75, 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Исполнитель", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителя", НСтр("ru = 'Исполнитель'; en = 'Performer'"));
	ПараметрыОписания.Вставить("Автор", Истина);
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеРезультата() Экспорт
	
	ПредставлениеРезультата = НСтр("ru = '%1 %2'; en = '%1 %2'");
	
	Если Объект.ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		Если Объект.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
			Возврат СтрШаблон(ПредставлениеРезультата, НСтр("ru = 'Подписано'; en = 'Signed'"), Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
		Иначе
			Возврат СтрШаблон(ПредставлениеРезультата, НСтр("ru = 'Не подписано'; en = 'Not signed'"), Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
		КонецЕсли;
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеРезультата, Объект.РезультатУтверждения, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
		
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
	РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Предметы

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	
	Элементы.ПодписыватьЭП.Доступность = (Предметы.Количество() > 0);
	
	ПроверитьВозможностьУстановкиЭлектронныхПодписей();
	
	ПроверитьВозможностьУстановкиПодписей();
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	ПолучитьИнструкции();
	
	Если ВестиУчетПоПроектам
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначенияДокументооборот.
					ЗначениеРеквизитаОбъектаВПривилегированномРежиме(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВидПроцесса = МультипредметностьПереопределяемый.ПолучитьВидПроцессаБПУтверждение(Объект.Предметы);
	Если Объект.ВидПроцесса <> ВидПроцесса Тогда
		Объект.ВидПроцесса = ВидПроцесса;
		СформироватьЗаголовкиИПодсказкиЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_ДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_СписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПередНачаломИзменения(
		Элемент, Отказ, ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДеревоПроцессовИЗадач

// Обновляет и разворачивает дерево процессов и задач.
//
&НаКлиенте
Процедура ОбновитьДеревоПроцессовЗадач() Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачи Тогда
		ЗаполнитьДеревоПроцессовИЗадач();
		РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоПроцессовИЗадач(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево процессов и задач.
//
&НаСервере
Процедура ЗаполнитьДеревоПроцессовИЗадач() Экспорт
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПроцессыИЗадачиПоПредмету(ЭтаФорма, Объект.Ссылка);
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
КонецПроцедуры

// Находит текущую списка СписокАктивныхЗадач в дереве задач.
//
&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	Если СрокиИсполненияПроцессов.ТребуетсяРасчетСроков(ЭтаФорма)
		Или ЗначениеЗаполнено(РеквизитСИзмененнымСроком) Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитСИзмененнымСроком;
		
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = 
			СрокиИсполненияПроцессов.НомерИтерацииДляРасчетаВКарточке(ЭтаФорма);
		
		ПараметрыДляРасчетаСроков.Смещение = 
			СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
		
		СрокиИсполненияПроцессов.РассчитатьСрокиУтверждения(Объект, ПараметрыДляРасчетаСроков);
		
		ПроверитьИзменениеСроковПроцесса();
			
	КонецЕсли;
	
	РеквизитСИзмененнымСроком = "";
	
	ОбновитьПризнакиИстекшихСроков();
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(Реквизит = "") Экспорт
	
	РеквизитСИзмененнымСроком = Реквизит;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	Прочитать();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Проверяет изменение сроков процесса и невыполненных задач.
//
&НаСервере
Процедура ПроверитьИзменениеСроковПроцесса()
	
	Если Не Объект.Стартован Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСроковДляПроверки = СрокиИсполненияПроцессов.СтруктураСроковПроцессаДляПроверкиИзменения();
	
	СтруктураСроковДляПроверки.Ссылка = Объект.Ссылка;
	
	СтруктураСроковДляПроверки.СрокИсполненияПроцесса = Объект.СрокИсполненияПроцесса;
	
	СтруктураСроковДляПроверки.СрокиИсполнителей.Вставить(
		БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить, Объект.СрокИсполнения);
	
	СтруктураСроковДляПроверки.СрокиИсполнителей.Вставить(
		БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться, Объект.СрокОбработкиРезультатов);
		
	СрокиИсполненияПроцессов.ПроверитьИзменениеСроковПроцесса(
		Объект.Ссылка, СтруктураСроковДляПроверки, ЭтаФорма);
	
КонецПроцедуры

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения истек (Исполнитель)'; en = 'Due date is expired (Performer)'"),
		"СрокИсполненияИстек",
		"СрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок обработки результатов истек'; en = 'Results processing due date is expired'"),
		"СрокОбработкиРезультатовИстек",
		"СрокОбработкиРезультатовПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'; en = 'Process due date is expired'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	ДатаИсполненияПоУмолчанию = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Объект.ДатаЗавершения) Тогда
		ДатаИсполненияПоУмолчанию = Объект.ДатаЗавершения;
	КонецЕсли;
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаУчастника(
		Объект.СрокИсполнения,
		СрокИсполненияИстек,
		ДатаИсполненияПоУмолчанию,
		"Исполнитель",
		ДатыИсполненияУчастников);
	
	Если Объект.Завершен
		И Объект.РезультатУтверждения <> Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		
		СрокОбработкиРезультатовИстек = Ложь;
	Иначе
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаУчастника(
			Объект.СрокОбработкиРезультатов,
			СрокОбработкиРезультатовИстек,
			ДатаИсполненияПоУмолчанию,
			"Автор",
			ДатыИсполненияУчастников);
	КонецЕсли;
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
		Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФоновыйИОтложенныйСтарт

&НаСервере
Процедура ОбновитьФормуПослеИзмененияНастроекОтложенногоСтарта() Экспорт
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	РеквизитСИзмененнымСроком = "НастройкаСтарта";
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи) Экспорт
	
	РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
		Объект,
		Отказ,
		УникальныйИдентификатор,
		ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
		ЭтаФорма, Объект, ПараметрыЗаписи, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверкиЗаполненияНаСервереДляФоновогоСтарта(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервереДляФоновогоСтарта(Отказ) Экспорт
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Объект");
	
	ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессОбъект = РеквизитФормыВЗначение("Объект", Тип("БизнесПроцессОбъект.Утверждение"));
	
	Если Не ПроцессОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
