#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ТипЗнч(ШаблонБизнесПроцесса.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Исполнитель, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		 
			Исполнитель = АвтоподстановкаИсполнитель;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
			
			Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'; en = 'Auto-substitution ""%1"" could not be used for field ""%2"" because containts an array of users'"),
				ШаблонБизнесПроцесса.Исполнитель,
				НСтр("ru = 'Исполнитель'; en = 'Performer'"));
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		Исполнитель = ШаблонБизнесПроцесса.Исполнитель;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВариантРассмотрения) Тогда 
		ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВариантОбработкиРезолюции) Тогда 
		ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
	КонецЕсли;	
	
	// Срок исполнения
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения) Тогда
		ВариантУстановкиСрокаИсполнения = ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда
		СрокИсполнения = ШаблонБизнесПроцесса.СрокИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияДни) Тогда
		СрокИсполненияДни = ШаблонБизнесПроцесса.СрокИсполненияДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧасы) Тогда
		СрокИсполненияЧасы = ШаблонБизнесПроцесса.СрокИсполненияЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияМинуты) Тогда
		СрокИсполненияМинуты = ШаблонБизнесПроцесса.СрокИсполненияМинуты;
	КонецЕсли;
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланАвтора = ШаблонБизнесПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) И ПроектнаяЗадача.Исполнители.Количество() > 0 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[0];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
			Исполнитель = СтрокаИсполнитель.Исполнитель;
			ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	
	Если СрокИсполнения = Дата(1,1,1)
		И СрокИсполненияДни = 0
		И СрокИсполненияЧасы = 0
		И СрокИсполненияМинуты = 0 Тогда
		
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = СрокИсполненияУчастника;
		ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыйИсполнитель = СтарыеУчастникиПроцесса.Исполнитель;
	
	ИзмененИсполнитель = СтарыйИсполнитель <> Исполнитель;
		
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
		
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда 
				
				МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
				ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
				
				ЗадачаОбъект.Исполнитель = Автор;
				
				Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
					И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
					
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Обработать резолюцию %1'; en = 'Process the resolution %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						ПредметыСтрокой);
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Обработать резолюцию: %1'; en = 'Process the resolution: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Наименование);
				КонецЕсли;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
				
			Иначе
				ЗадачаОбъект.Наименование = Наименование;
				
				// исполнитель
				Если ИзмененИсполнитель Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
						ЗадачаОбъект.Исполнитель = Исполнитель;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
					Иначе
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Исполнитель;
					КонецЕсли;
				КонецЕсли;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаИсполнения,
					СрокИсполнения,
					СрокИсполненияДни,
					СрокИсполненияЧасы,
					СрокИсполненияМинуты);
				
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Описание = Описание;
			ЗадачаОбъект.Автор = Автор;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = Автор;
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос сроков
	ШаблонОбъект.СрокИсполненияДни = СрокИсполненияДни;
	ШаблонОбъект.СрокИсполненияЧасы = СрокИсполненияЧасы;
	ШаблонОбъект.СрокИсполненияМинуты = СрокИсполненияМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	
	// Перенос исполнителя
	ШаблонОбъект.Исполнитель = Исполнитель;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции;
		ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнители[0];
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Рассмотреть ""%1""'; en = 'Review ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Предмет");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов);
		
		Если ОбрабатываемыеПредметы.Количество() > 0 Тогда
			Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
				Если ЗначениеЗаполнено(Предмет.Адресат) Тогда 
					Исполнитель = Предмет.Адресат; 
				Иначе
					Исполнитель = РаботаСОрганизациями.ПолучитьОтветственноеЛицо("Руководитель", Предмет.Организация, Предмет.ДатаСоздания);
				КонецЕсли;
				Если ЗначениеЗаполнено(Исполнитель) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
				Исполнитель = РаботаСПользователями.ПолучитьРуководителя(Автор);
				Если ЗначениеЗаполнено(Исполнитель) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Рассмотреть'; en = 'Review'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Кому"" не заполнено", ЭтотОбъект,,"Исполнитель", Отказ);
	КонецЕсли;
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть ИЛИ
				 	ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
				Если ДополнительныеСвойства.Свойство("ДанныеЗаполнения") Тогда
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеСвойства.ДанныеЗаполнения);
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ИсполнителиИсполнения") Тогда
					ИсполнителиИсполнения.Загрузить(ДополнительныеСвойства.ИсполнителиИсполнения);
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ИсполнителиОзнакомления") Тогда
					ИсполнителиОзнакомления.Загрузить(ДополнительныеСвойства.ИсполнителиОзнакомления);
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВыполнитьЗадачу") И ДополнительныеСвойства.ВыполнитьЗадачу Тогда 
					Если ДополнительныеСвойства.Свойство("РезультатВыполнения") Тогда
						Резолюция = ДополнительныеСвойства.РезультатВыполнения;
						Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции Тогда
					 		ОписаниеИсполнения = ДополнительныеСвойства.РезультатВыполнения;
							ОписаниеОзнакомления = ДополнительныеСвойства.РезультатВыполнения;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			
			Если ПометкаУдаления Тогда 
				Для Каждого Предмет Из ПредметыДляУстановки Цикл
					ПриОткрепленииПредмета(Предмет);
					УдалитьРезолюцию(Предмет);
				КонецЦикла;
			Иначе
				ВосстановитьСостояниеПредметов();
				ВосстановитьРезолюцию();
			КонецЕсли;	
		КонецЕсли;
		
		ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
		Если Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
			И Состояние <> ПредыдущееСостояние Тогда
			КомпенсироватьСостояниеПредметов();
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	
	ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции;
	ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
	
	НаименованиеИсполнения = "";
	ОписаниеИсполнения = "";
	
	СрокИсполненияПроцессаИсполнения = Дата(1,1,1);
	ВариантУстановкиСрокаОбработкиРезультатовИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка();
	СрокОбработкиРезультатовИсполнения = Дата(1,1,1);
	СрокОбработкиРезультатовДниИсполнения = 0;
	СрокОбработкиРезультатовЧасыИсполнения = 0;
	СрокОбработкиРезультатовМинутыИсполнения = 0;
	
	ИсполнителиИсполнения.Очистить();
	
	НаименованиеОзнакомления = "";
	ОписаниеОзнакомления = "";
	
	СрокИсполненияПроцессаОзнакомления = Дата(1,1,1);
	ИсполнителиОзнакомления.Очистить();
	
	КонтролерИсполнения = Неопределено;
	
	ПроверяющийИсполнения = Неопределено;
	
	ПроцессИсполнения = БизнесПроцессы.Исполнение.ПустаяСсылка();
	ПроцессОзнакомления = БизнесПроцессы.Ознакомление.ПустаяСсылка();
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
		ЗаписатьСостояниеПредметаНаРассмотрении(Предмет);
	КонецЦикла;
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура РассмотретьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Наименование   		= Наименование;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты);
	
	Задача.РезультатВыполнения 	= Резолюция;
	Задача.БизнесПроцесс  	   	= ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель;
	Иначе
		Задача.РольИсполнителя = Исполнитель;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура РассмотретьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			Задача.ДатаИсполнения, 
			Перечисления.СостоянияДокументов.Рассмотрен, 
			Ссылка);
			
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
			ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		 
			НоваяРезолюция = Справочники.Резолюции.СоздатьЭлемент();
			НоваяРезолюция.Наименование = РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Предмет);
			НоваяРезолюция.АвторРезолюции = Задача.Исполнитель;
			НоваяРезолюция.ВнесРезолюцию = Задача.Исполнитель;
			НоваяРезолюция.ДатаРезолюции = Задача.ДатаИсполнения;
			НоваяРезолюция.Документ = Предмет;	
			НоваяРезолюция.Источник = Задача.БизнесПроцесс;
			НоваяРезолюция.ТекстРезолюции = Резолюция;
			НоваяРезолюция.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ВыборВариантаРассмотренияОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.ВвестиТекстРезолюции;
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаИсполнение;
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаОзнакомление;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Исполнитель 	  = Автор;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаОбработкиРезультатов,
		СрокОбработкиРезультатов,
		СрокОбработкиРезультатовДни,
		СрокОбработкиРезультатовЧасы,
		СрокОбработкиРезультатовМинуты);
	
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(СтрокаПредметов) Тогда
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработать резолюцию %1'; en = 'Process the resolution %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработать резолюцию: %1'; en = 'Process the resolution: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Наименование);
	КонецЕсли;
	
	// автор
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Автор = Исполнитель;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";	
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Задача.Автор = Выборка.Исполнитель;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура ВыборВариантаОбработкиРезолюцииОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НеНаправлять Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.НеНаправлять;
	ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаИсполнение;
	ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаОзнакомление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВложенныйБизнесПроцессПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		ВедущаяЗадачаОбъект = ВедущаяЗадача.ПолучитьОбъект();
		Если ВедущаяЗадачаОбъект <> Неопределено
			И ВедущаяЗадача.БизнесПроцесс <> Неопределено
			И ТипЗнч(ВедущаяЗадача.БизнесПроцесс) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Результат = Истина;
		ИначеЕсли ВедущаяЗадачаОбъект = Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьИсполнениеОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Дата = ТекущаяДатаСеанса();
	ИсполнениеОбъект.ГлавнаяЗадача = ВычислитьГлавнуюЗадачуДляПодчиненныхПроцессов();
	ИсполнениеОбъект.ЗаполнитьПоРассмотрению(ЭтотОбъект);
	ИсполнениеОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
	ИсполнениеОбъект.Записать();
	СтартПроцессовСервер.СтартоватьПроцесс(ИсполнениеОбъект);
	
КонецПроцедуры

Процедура СформироватьОзнакомлениеОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	ОзнакомлениеОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	ОзнакомлениеОбъект.Дата = ТекущаяДатаСеанса();
	ОзнакомлениеОбъект.ГлавнаяЗадача = ВычислитьГлавнуюЗадачуДляПодчиненныхПроцессов();
	ОзнакомлениеОбъект.ЗаполнитьПоРассмотрению(ЭтотОбъект);
	ОзнакомлениеОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
	ОзнакомлениеОбъект.Записать();
	СтартПроцессовСервер.СтартоватьПроцесс(ОзнакомлениеОбъект);
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Процедура УдалитьРезолюцию(Документ = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Документ) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Возврат;
	КонецЕсли;
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Документ, Ложь,, Ссылка);
	Для ш = 0 По Резолюции.Количество() - 1 Цикл
		РезолюцияДокумента = Резолюции.Получить(ш);
		РаботаСРезолюциями.УстановитьПометкуНаУдаление(РезолюцияДокумента, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьРезолюцию()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
	
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ПредметыДляУстановки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	|	И ЗадачаИсполнителя.Выполнена";
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		
		ЗадачаИсполнителя = Выборка.Ссылка;
		
		Для Каждого Предмет Из ПредметыДляУстановки Цикл
			Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Предмет, Ложь,, Ссылка);
			Для ш = 0 По Резолюции.Количество() - 1 Цикл
				РезолюцияДокумента = Резолюции.Получить(ш);
				РаботаСРезолюциями.УстановитьПометкуНаУдаление(РезолюцияДокумента, Ложь);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостояниеПредметов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ОбрабатываемыеПредметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		Для Каждого Предмет из ОбрабатываемыеПредметы Цикл
			ЗаписатьСостояниеПредметаНаРассмотрении(Предмет);
		КонецЦикла;
	КонецЕсли;	
	
	// задача исполнителя
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И ЗадачаИсполнителя.Выполнена");
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗадачаИсполнителя = Выборка.Ссылка;
		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Предмет, 
				ЗадачаИсполнителя.ДатаИсполнения, 
				Перечисления.СостоянияДокументов.Рассмотрен, 
				Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСостояниеПредметаНаРассмотрении(Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		БизнесПроцессСсылка = Ссылка;
	Иначе
		БизнесПроцессСсылка = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(БизнесПроцессСсылка) Тогда
			БизнесПроцессСсылка = БизнесПроцессы.Рассмотрение.ПолучитьСсылку();
			УстановитьСсылкуНового(БизнесПроцессСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Делопроизводство.ЗаписатьСостояниеДокумента(
		Предмет, 
		ДатаНачала, 
		Перечисления.СостоянияДокументов.НаРассмотрении,
		БизнесПроцессСсылка);
	
КонецПроцедуры

// Возвращает признак наличия метода ПриПрикрепленииПредмета
// 
Функция ЕстьМетодПриПрикрепленииПредмета() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при прикреплении предмета к стартованному БП
//
Процедура ПриПрикрепленииПредмета(Предмет) Экспорт
	
	ЗаписатьСостояниеПредметаНаРассмотрении(Предмет);
	
КонецПроцедуры

// Возвращает признак наличия метода ПриОткрепленииПредмета
// 
Функция ЕстьМетодПриОткрепленииПредмета() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Делопроизводство.УдалитьСостояниеДокумента(Документ, Ссылка);
		УдалитьРезолюцию(Документ);
	КонецЕсли;	
	
КонецПроцедуры

// Компенсирует состояние документа при прерывании БП
//
Процедура КомпенсироватьСостояниеПредметов() Экспорт
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда 
			Делопроизводство.УдалитьСостояниеДокумента(Предмет, Ссылка);
		КонецЕсли;
		УдалитьРезолюцию(Предмет);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		Если Задача.Выполнена Тогда
			Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Введен текст резолюции'; en = 'Result of review: Resolution text entered'", КодЯзыкаПолучателя);
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					НСтр("ru = 'Резолюция'; en = 'Resolution'") + ": " + Резолюция);
			ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Направить на исполнение'; en = 'Result of review: Send for performance'", КодЯзыкаПолучателя);
			ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Направить на ознакомление'; en = 'Result of reviewal: Send for examination'", КодЯзыкаПолучателя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		
		Если Задача.Выполнена Тогда
			Если ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда
				Результат = НСтр("ru = 'Результат обработки резолюции: Направить на исполнение'; en = 'Resolution processing result: Send for performance'", КодЯзыкаПолучателя);
			ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда
				Результат = НСтр("ru = 'Результат обработки резолюции: Направить на ознакомление'; en = 'Resolution processing result: Send for examination'", КодЯзыкаПолучателя);
			ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НеНаправлять Тогда
				Результат = НСтр("ru = 'Результат обработки резолюции: Не направлять'; en = 'Resolution processing result: Do not send'", КодЯзыкаПолучателя);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			Символы.ПС,
			НСтр("ru = 'Резолюция'; en = 'Resolution'", КодЯзыкаПолучателя) + ": " + Резолюция);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вычисляет главную задачу для подчиненных процессов (исполнение или ознакомления)
// 
Функция ВычислитьГлавнуюЗадачуДляПодчиненныхПроцессов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГлавнаяЗадачаПодчиненногоПроцесса = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	
	Если Ссылка.Пустая() Тогда
		Возврат ГлавнаяЗадачаПодчиненногоПроцесса;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаРассмотреть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОзнакомиться";
		
	Запрос.УстановитьПараметр(
		"ТочкаМаршрутаРассмотреть", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	Запрос.УстановитьПараметр(
		"ТочкаМаршрутаОзнакомиться", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться);
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗадачРассмотреть = Результат[0].Выбрать();
	ВыборкаЗадачОзнакомиться = Результат[1].Выбрать();
	
	Если ВыборкаЗадачОзнакомиться.Следующий() Тогда
		ГлавнаяЗадачаПодчиненногоПроцесса = ВыборкаЗадачОзнакомиться.Задача;
	Иначе
		ВыборкаЗадачРассмотреть.Следующий();
		ГлавнаяЗадачаПодчиненногоПроцесса = ВыборкаЗадачРассмотреть.Задача;
	КонецЕсли;
	
	Возврат ГлавнаяЗадачаПодчиненногоПроцесса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		МассивПолей.Добавить("Исполнитель");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Рассмотреть '; en = 'Review '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

#КонецЕсли
