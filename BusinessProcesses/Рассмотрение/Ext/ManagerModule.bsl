#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовЧасы,
		|СрокОбработкиРезультатовМинуты,
		|Исполнитель,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты";
	
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"ТрудозатратыПланИсполнителя, ТрудозатратыПланАвтора");
		
	Трудозатраты = 0;
		
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланИсполнителя;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;
	
	Возврат Трудозатраты;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		
		ВариантРассмотрения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаОбъект.БизнесПроцесс, "ВариантРассмотрения");
		
		Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда 
			Представление = НСтр("ru = 'Отправлено на исполнение.'; en = 'Sent for performance.'");
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда 
			Представление = НСтр("ru = 'Отправлено на ознакомление.'; en = 'Submitted for examination.'");
		Иначе
			Представление = НСтр("ru = 'Рассмотрено.'; en = 'Reviewed.'");
		КонецЕсли;
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		
		ВариантОбработкиРезолюции = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаОбъект.БизнесПроцесс, "ВариантОбработкиРезолюции");
		
		Если ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда
			Представление = НСтр("ru = 'Отправлено на исполнение.'; en = 'Sent for performance.'");
		ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда
			Представление = НСтр("ru = 'Отправлено на ознакомление.'; en = 'Submitted for examination.'");
		Иначе
			Представление = НСтр("ru = 'Рассмотрено.'; en = 'Reviewed.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"Исполнитель,
		|СрокИсполненияПроцесса,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|ВариантУстановкиСрокаИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокИсполненияПроцесса,
		|ДатаЗавершения");
		
	Исполнитель = РеквизитыПроцесса.Исполнитель;
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ДатыИсполненияУчастников = ДатыИсполненияУчастников(Процесс);
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаИсполненияПоУмолчанию = ТекущаяДатаСеанса;
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		ДатаИсполненияПоУмолчанию = ДатаЗавершения;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Исполнитель
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель: '; en = 'Performer: '"));
		
		ЗадачаИсполнителя = ОбзорПроцессовВызовСервера.ПолучитьЗадачуПроцесса(
			Процесс, БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			
			ЗадачаМассив = Новый Массив;
			ЗадачаМассив.Добавить(ЗадачаИсполнителя);
			РезультатСоответствие 
				= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаМассив, "Задача");
			Если РезультатСоответствие.Количество() <> 0 Тогда	
					
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				КонецЕсли;
					
			КонецЕсли;		
			
		КонецЕсли;	
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель, "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполнения) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<br>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок рассмотрения:'; en = 'Reviewal due date:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокИсполнения, 
			РеквизитыПроцесса.СрокИсполненияДни, 
			РеквизитыПроцесса.СрокИсполненияЧасы, 
			РеквизитыПроцесса.СрокИсполненияМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаИсполнения);
			
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("Исполнитель");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ДатаИсполненияПоУмолчанию;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокИсполнения < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
		
	HTMLТекст = HTMLТекст + "<p>";
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=v8doc:%1>%2</A>",
		"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Рассмотрение",
		НСтр("ru = 'Все задачи'; en = 'All tasks'"));
		
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатов) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок обработки резолюции:'; en = 'Resolution processing due date:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокОбработкиРезультатов, 
			РеквизитыПроцесса.СрокОбработкиРезультатовДни, 
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы, 
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаОбработкиРезультатов);
			
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("Автор");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ДатаИсполненияПоУмолчанию;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокОбработкиРезультатов < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'; en = 'Process due date:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, Формат(СрокИсполненияПроцесса, ФорматСрока), ЦветПредставленияСрока);
		
	КонецЕсли;
		
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Истина;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		Комментарий = НСтр("ru = 'Рассмотрено автоматически'; en = 'Reviewed automatically'");
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Комментарий = НСтр("ru = 'Обработано автоматически'; en = 'Processed automatically'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковРассмотренияВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковРассмотренияВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВыполнениеЗадач

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		ЗаписатьПроцесс = ПараметрыВыполнения.Свойство("ДанныеЗаполнения")
			Или ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			Или ПараметрыВыполнения.Свойство("РезультатВыполнения");
			
		Если ЗаписатьПроцесс Тогда
			ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСсылка);
			РассмотрениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ДанныеЗаполнения")
			Или ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
			
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
			
			Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"РезультатВыполнения",ПараметрыВыполнения.РезультатВыполнения);
			КонецЕсли;
				
			Если ПараметрыВыполнения.Свойство("ДанныеЗаполнения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ДанныеЗаполнения", ПараметрыВыполнения.ДанныеЗаполнения);
				КонецЕсли;
				
			Если ПараметрыВыполнения.Свойство("ИсполнителиИсполнения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ИсполнителиИсполнения", ПараметрыВыполнения.ИсполнителиИсполнения);
				КонецЕсли;
				
			Если ПараметрыВыполнения.Свойство("ИсполнителиОзнакомления") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ИсполнителиОзнакомления", ПараметрыВыполнения.ИсполнителиОзнакомления);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ВариантРассмотрения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ВариантРассмотрения", ПараметрыВыполнения.ВариантРассмотрения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(РассмотрениеОбъект.Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли")
			И РассмотрениеОбъект.Исполнитель <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			РассмотрениеОбъект.Исполнитель = ПараметрыВыполнения.ИсполнительЗадачи;
			
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(РассмотрениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			РазблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		
		ЗаписатьПроцесс = ПараметрыВыполнения.Свойство("ДанныеЗаполнения")
			Или ПараметрыВыполнения.Свойство("ИсполнительЗадачи");
			
		Если ЗаписатьПроцесс Тогда
			ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСсылка);
			РассмотрениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		КонецЕсли;
			
		Если ПараметрыВыполнения.Свойство("ДанныеЗаполнения") Тогда
			
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
				"ДанныеЗаполнения", ПараметрыВыполнения.ДанныеЗаполнения);
			
			Если ПараметрыВыполнения.Свойство("ИсполнителиИсполнения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ИсполнителиИсполнения", ПараметрыВыполнения.ИсполнителиИсполнения);
			КонецЕсли;
			Если ПараметрыВыполнения.Свойство("ИсполнителиОзнакомления") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ИсполнителиОзнакомления", ПараметрыВыполнения.ИсполнителиОзнакомления);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(РассмотрениеОбъект.Автор) <> Тип("СправочникСсылка.ПолныеРоли")
			И РассмотрениеОбъект.Автор <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			РассмотрениеОбъект.Автор = ПараметрыВыполнения.ИсполнительЗадачи;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(РассмотрениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			РазблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка – точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		Если ПараметрыВыполнения.Свойство("ПодписиКРезолюциямПредметов")
			И ТипЗнч(ПараметрыВыполнения.ПодписиКРезолюциямПредметов) = Тип("Структура")
			И ПараметрыВыполнения.Свойство("ДатаИсполнения") Тогда
		
			ПодписиКРезолюциямПредметов = ПараметрыВыполнения.ПодписиКРезолюциямПредметов;
		
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "Предметы");
			ТаблицаПредметов = РеквизитыЗадачи.Предметы.Выгрузить();
		
			Для Каждого Предмет Из ТаблицаПредметов Цикл
			
				Предмет = Предмет.Предмет;
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
					ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
					
					Резолюции = РаботаСРезолюциями.ПолучитьРезолюциюПоДате(
						Предмет, ПараметрыВыполнения.ДатаИсполнения);
					
					Если Резолюции.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОбъектРезолюции = Резолюции[0].Ссылка.ПолучитьОбъект();
					
					Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"Предмет_%1_%2",
						СтрЗаменить(Строка(Предмет.УникальныйИдентификатор()), "-", ""),
						Формат(ПараметрыВыполнения.ДатаИсполнения, "ДФ=yyyyMMddHHmmss"));
					
					Если Не ПодписиКРезолюциямПредметов.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеПодписи = ПодписиКРезолюциямПредметов[Ключ];
					
					РаботаСЭП.ЗанестиИнформациюОПодписи(ОбъектРезолюции.Ссылка, ДанныеПодписи);
					ОбъектРезолюции.Подписана = Истина;
					ОбъектРезолюции.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает возможные результаты выполнения действия комплексного процесса.
//
// Возвращаемое значение:
//  СписокЗначений
//   * Перечисление.РезультатыВыполненияДействийКомплексныхПроцессов
//
Функция РезультатыВыполненияДействияКомплексногоПроцесса() Экспорт
	
	РезультатыВыполнения = Новый СписокЗначений;
	
	ПеречислениеРезультатов = Перечисления.РезультатыВыполненияДействийКомплексныхПроцессов;
	
	РезультатыВыполнения.Добавить(
		ПеречислениеРезультатов.ЗавершеноСЛюбымРезультатом,
		НСтр("ru = 'Завершено успешно'; en = 'Completed successfully'"));
	
	Возврат РезультатыВыполнения;
	
КонецФункции

#Область КэшДанныхДействий

// Возвращает выбору данных действий.
//
// Параметры:
//  ПараметрыДействий - ТаблицаЗначений - параметры действий, соответствует табличной части
//                                        ПараметрыДействий схемы процесса.
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ПараметрыДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыДействий.Процесс
		|ПОМЕСТИТЬ ПараметрыДействий
		|ИЗ
		|	&ПараметрыДействий КАК ПараметрыДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Рассмотрение.Ссылка,
		|	Рассмотрение.Наименование,
		|	Рассмотрение.Исполнитель,
		|	Рассмотрение.СрокИсполненияПроцесса,
		|	Рассмотрение.Состояние,
		|	Рассмотрение.Завершен,
		|	Рассмотрение.ДатаЗавершения
		|ИЗ
		|	ПараметрыДействий КАК ПараметрыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Рассмотрение КАК Рассмотрение
		|		ПО ПараметрыДействий.Процесс = Рассмотрение.Ссылка";
		
	Запрос.УстановитьПараметр("ПараметрыДействий", ПараметрыДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.Рассмотрение, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, Исполнитель, СрокИсполненияПроцесса,
					|Состояние, Завершен, ДатаЗавершения");
	Иначе
		РеквизитыОбъекта = Объект;
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Рассмотрение: '; en = 'Review: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	МассивИсполнителей = Новый Массив;
	РаботаСКомплекснымиБизнесПроцессамиСервер.ДобавитьИсполнителяПроцессаВМассив(
		МассивИсполнителей, РеквизитыОбъекта.Исполнитель);
		
	ДанныеПроцесса.Исполнители = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИсполнителиСтрокой(МассивИсполнителей);
	
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_РИБ

Процедура ОбработатьПолучениеПроцессаИзУзлаРИБ(Узел, ЭлементДанных) Экспорт
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	НеПередающиесяПоля = Новый Массив;
	НеПередающиесяПоля.Добавить("ВажностьИсполнения");
	НеПередающиесяПоля.Добавить("ВажностьОзнакомления");
	НеПередающиесяПоля.Добавить("ВариантИсполнения");
	НеПередающиесяПоля.Добавить("ВариантРассмотрения");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресации");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьДополнительныйОбъектАдресацииПроверяющего");
	НеПередающиесяПоля.Добавить("УдалитьИсполнитель");
	НеПередающиесяПоля.Добавить("Исполнитель");
	НеПередающиесяПоля.Добавить("УдалитьКонтролерИсполнения");
	НеПередающиесяПоля.Добавить("КонтролерИсполнения");
	НеПередающиесяПоля.Добавить("НаименованиеИсполнения");
	НеПередающиесяПоля.Добавить("НаименованиеОзнакомления");
	НеПередающиесяПоля.Добавить("ОписаниеИсполнения");
	НеПередающиесяПоля.Добавить("ОписаниеОзнакомления");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресации");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииКонтролера");
	НеПередающиесяПоля.Добавить("УдалитьОсновнойОбъектАдресацииПроверяющего");
	НеПередающиесяПоля.Добавить("УдалитьПроверяющийИсполнения");
	НеПередающиесяПоля.Добавить("ПроверяющийИсполнения");
	НеПередающиесяПоля.Добавить("УдалитьСрокИсполненияОбщий");
	НеПередающиесяПоля.Добавить("УдалитьСрокОзнакомления");
	НеПередающиесяПоля.Добавить("СрокИсполненияПроцессаИсполнения");
	НеПередающиесяПоля.Добавить("ВариантУстановкиСрокаОбработкиРезультатовИсполнения");
	НеПередающиесяПоля.Добавить("СрокОбработкиРезультатовИсполнения");
	НеПередающиесяПоля.Добавить("СрокОбработкиРезультатовДниИсполнения");
	НеПередающиесяПоля.Добавить("СрокОбработкиРезультатовЧасыИсполнения");
	НеПередающиесяПоля.Добавить("СрокОбработкиРезультатовМинутыИсполнения");
	НеПередающиесяПоля.Добавить("СрокИсполненияПроцессаОзнакомления");
	НеПередающиесяПоля.Добавить("ТрудозатратыПланИсполнителяОзнакомления");
	НеПередающиесяПоля.Добавить("ТрудозатратыПланКонтролера");
	НеПередающиесяПоля.Добавить("ТрудозатратыПланПроверяющего");
	НеПередающиесяПоля.Добавить("ШаблонИсполнения");
	НеПередающиесяПоля.Добавить("ШаблонОзнакомления");
	
	Если ЭтотУзел = ЭлементДанных.УзелОбмена Тогда // Получение процесса в мастер-узле.
		
		ЗаписатьПроцесс = Ложь;
		
		ПроцессПоСсылке = ЭлементДанных.Ссылка.ПолучитьОбъект();
		
		// Добавляем новые предметы в текущий процесс
		КоличествоПредметовДоДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(
			ПроцессПоСсылке, ЭлементДанных.Предметы, ЭлементДанных.ПредметыЗадач);
		
		КоличествоПредметовПослеДобавления = ПроцессПоСсылке.Предметы.Количество();
		
		Если КоличествоПредметовДоДобавления <> КоличествоПредметовПослеДобавления Тогда
			ЗаписатьПроцесс = Истина;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			ПроцессПоСсылке.ОбменДанными.Загрузка = Истина;
			ПроцессПоСсылке.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
			ПроцессПоСсылке.Записать();
		Иначе
			
			ОтправкаНазад = Ложь;
			
			// Сравниваем полученный процесс с процессом в мастер узле.
			// В случае отличий отправляем процесс обратно.
			МетаданныеЗадачи = ЭлементДанных.Ссылка.Метаданные();
			ИменаПолейДляСравнения = "";
			Разделитель = "";
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.Реквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.СтандартныеРеквизиты Цикл
				Если НеПередающиесяПоля.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИменаПолейДляСравнения = ИменаПолейДляСравнения
					+ Разделитель
					+ РеквизитЗадачи.Имя;
				Разделитель = ",";
			КонецЦикла;
			
			СтруктураПроцессаПоСсылке = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцессаПоСсылке, ПроцессПоСсылке);
			
			СтруктураПроцесса = Новый Структура(ИменаПолейДляСравнения);
			ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ЭлементДанных);
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(СтруктураПроцессаПоСсылке, СтруктураПроцесса) Тогда
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(
					ПроцессПоСсылке.ДополнительныеРеквизиты.Выгрузить(),
					ЭлементДанных.ДополнительныеРеквизиты.Выгрузить()) Тогда
					
				ОтправкаНазад = Истина;
			КонецЕсли;
			
			Если ОтправкаНазад Тогда
				РаботаСБизнесПроцессами.ЗарегистрироватьИзмененияПроцессаЗадачи(ПроцессПоСсылке);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлементДанных.Завершен Тогда // получение выполненного процесса в обычном узле
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
	Иначе
		// Принимает все пришедшие изменения, за исключением полей, которые
		// сохраняются для работы с процессом в текущем узле.
		ПоляДляПолучения = НеПередающиесяПоля;
		ПоляДляПолучения.Добавить("Предметы");
		ПоляДляПолучения.Добавить("ПредметыЗадач");
		ПоляДляПолучения.Добавить("ИсполнителиИсполнения");
		ПоляДляПолучения.Добавить("ИсполнителиОзнакомления");
		
		ПоляПроцесса = СтрСоединить(ПоляДляПолучения, ",");
		
		РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		ЭлементДанных.Ссылка, ПоляПроцесса);
		
		Предметы = РеквизитыПроцесса.Предметы.Выгрузить();
		РеквизитыПроцесса.Удалить("Предметы");
		
		ПредметыЗадач = РеквизитыПроцесса.ПредметыЗадач.Выгрузить();
		РеквизитыПроцесса.Удалить("ПредметыЗадач");
		
		ИсполнителиИсполнения = РеквизитыПроцесса.ИсполнителиИсполнения.Выгрузить();
		РеквизитыПроцесса.Удалить("ИсполнителиИсполнения");
		
		ИсполнителиОзнакомления = РеквизитыПроцесса.ИсполнителиОзнакомления.Выгрузить();
		РеквизитыПроцесса.Удалить("ИсполнителиОзнакомления");
		
		// Восстанавливаем НеПередающиесяПоля по ссылке процесса
		ЗаполнитьЗначенияСвойств(ЭлементДанных, РеквизитыПроцесса);
		ЭлементДанных.ИсполнителиИсполнения.Загрузить(ИсполнителиИсполнения);
		ЭлементДанных.ИсполнителиОзнакомления.Загрузить(ИсполнителиОзнакомления);
		
		// Дополняем переданные предметы, которые были ранее.
		РаботаСБизнесПроцессами.ДобавитьНовыеПредметыВПроцесс(ЭлементДанных, Предметы, ПредметыЗадач);
		
		ЭлементДанных.ОбменДанными.Загрузка = Истина;
		ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
		ЭлементДанных.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс
//
// Возвращаемое значение:
//  Соотвествие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыИсполнения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	// Получение даты исполнения исполнителем.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Исполнитель", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	// Получение даты исполнения обработки результов.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Автор", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	Возврат ДатыИсполнения;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_УчетПереносовСроковИсполнения

// Устанавливает срок исполнителю задачи в процессе.
//
// Параметры:
//  Срок - Дата - новый срок исполнителя.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  Процесс - БизнесПроцессОбъект - изменяемый процесс.
//  ПараметрыИзмененногоРеквизита - Структура - параметры измененного реквизита процесса.
//   * РеквизитТаблицаСИзмененнымСроком - Строка - имя реквизита или табличной части процесса.
//   * ИндексСтроки - Число - индекс строки табличной части. Присутствует если изменяется табличная часть.
//
Процедура УстановитьСрокИсполнителяЗадачиВПроцессе(
	Срок, Задача, Процесс, ПараметрыИзмененногоРеквизита) Экспорт
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	ПараметрыИзмененногоРеквизита.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	ПараметрыИзмененногоРеквизита.Вставить("ИндексСтроки", 0);
	
	ТочкаМаршрутаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ТочкаМаршрута");
	
	Если ТочкаМаршрутаЗадачи = ТочкиМаршрута.Рассмотреть Тогда
		Процесс.СрокИсполнения = Срок;
		
		Процесс.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокИсполнения";
		
	ИначеЕсли ТочкаМаршрутаЗадачи = ТочкиМаршрута.Ознакомиться Тогда
		Процесс.СрокОбработкиРезультатов = Срок;
		
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов";
	КонецЕсли;
	
КонецПроцедуры


// Переносит срок исполнения задачи процесса Исполенипя по заявке.
// При переносе обновляются сроки в текущем и зависимых процессах.
//
// Параметры:
//  НовыйСрок - Дата - новый срок задачи.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  Процесс - БизнесПроцессСсылка - ссылка на процесс задачи.
//  ПричинаПереносаСрока - Строка - причина, по которой переносится срок задачи.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Процедура ИзменитьСрокИсполненияЗадачи(
	НовыйСрок, Задача, Процесс, ПричинаПереносаСрока, ЗаявкаНаПеренос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	СтарыеУчастникиПроцесса = ТекущиеУчастникиПроцесса(ПроцессОбъект);
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	
	УстановитьСрокИсполнителяЗадачиВПроцессе(
		НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
	
	Если ПараметрыИзмененногоРеквизита.Количество() > 0 Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", ЗаявкаНаПеренос);
		
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ПроцессОбъект, ПараметрыЗаписи);
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
			
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = 
			ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиРассмотрения(
			ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(
			ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов");
		
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("ТипПроцесса", "Рассмотрение");
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Заголовок", НСтр("ru = 'Рассмотрения'; en = 'Reviewals'"));
		Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.Рассмотрение"));
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПраваПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПолучитьПраваПоФайлам(Файлы, Пользователи);
	
КонецФункции

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда 
		ИмяФормы = "БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя";
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда 
		ИмяФормы = "БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиОзнакомиться";
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры	

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Исполнитель = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Исполнитель = Реквизиты.РольИсполнителя;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда 
		
		Если Не ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			ВызватьИсключение НСтр("ru = 'Задачу автора процесса нельзя перенаправить на роль исполнителя.'; en = 'Author''s process task cannot be forwarded to performer roles.'");
		КонецЕсли;	
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		БизнесПроцессОбъект.Автор = Реквизиты.Исполнитель;
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныРассмотрения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для автоматизации рассмотрения документов. Рассматривающий сотрудник оставляет резолюцию по итогам рассмотрения.'; en = 'Is used to automate reviewing of documents. Reviewer leaves a resolution on the outcome of the review.'");
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Результат = Ложь;
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Завершен");
	Результат = РеквизитыПроцесса.Завершен;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "Автор, Проект");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			МассивПользователей.Добавить(ДанныеУчастника);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка, 
		"Автор, 
		| Исполнитель,
		| КонтролерИсполнения, 
		| ПроверяющийИсполнения");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнитель
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Исполнитель);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.КонтролерИсполнения) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.КонтролерИсполнения);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.ПроверяющийИсполнения) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.ПроверяющийИсполнения);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	Если Задача.ДополнительныеСвойства.Свойство("ПредыдущийИсполнитель")
		И Задача.ДополнительныеСвойства.ПредыдущийИсполнитель <> Задача.Исполнитель Тогда
		
		ПредставлениеИсполнителя = НСтр("ru = '%1 (вместо %2)'; en = '%1 (instead %2)'");
		ПредставлениеИсполнителя = СтрШаблон(
			ПредставлениеИсполнителя,
			Строка(Задача.Исполнитель),
			Строка(Задача.ДополнительныеСвойства.ПредыдущийИсполнитель));
			
		ра_РаботаСПроцессами.ДобавитьЗаписьПоФактическомуИсполнителю(Задача, ПредставлениеИсполнителя);
		
	Иначе
		ПредставлениеИсполнителя = Строка(Задача.Исполнитель);
	КонецЕсли;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтрШаблон(ОписаниеСобытияФормат,
		Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
		ПредставлениеИсполнителя);
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута;
	
	Действие = "";
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Рассмотреть Тогда
		
		ВариантРассмотрения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "ВариантРассмотрения");
		
		Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции Тогда
			Действие = НСтр("ru = 'Введен текст резолюции'; en = 'Resolution text entered'");
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
			Действие = НСтр("ru = 'Направлено на исполнение'; en = 'Sent for performance'");
			ТекстРезультатаВыполнения = "";
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
			Действие = НСтр("ru = 'Направлено на ознакомление'; en = 'Submitted for examination'");
			ТекстРезультатаВыполнения = "";
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
		Действие = НСтр("ru = 'Ознакомлен(а)'; en = 'Examined'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(ТекстРезультатаВыполнения), ": " + Символы.ПС, ".")
						  + ТекстРезультатаВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Исполнитель
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнитель",
		Ложь));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Результат = "";
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ПроцессСсылка, , Истина);

	Если Не ЗначениеЗаполнено(Предметы) Тогда
		Возврат "";
	КонецЕсли;

	ПредметыСИзмененнымСостоянием = Новый Массив();
	
	КоличествоРезолюцийУстановленныхПроцессом = 0;
	КоличествоСостоянийУстановленныхПроцессом = 0;
	
	Для каждого Предмет Из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			СостоянияДокумента = Делопроизводство.ПолучитьСостоянияДокумента(Предмет, ПроцессСсылка);
			Если ЗначениеЗаполнено(СостоянияДокумента) Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
				КоличествоСостоянийУстановленныхПроцессом = КоличествоСостоянийУстановленныхПроцессом +
					СостоянияДокумента.Количество();
			КонецЕсли;
		КонецЕсли;
		
		АвторыРезолюций = ПолучитьРезолюцииПоБизнесПроцессу(Предмет, ПроцессСсылка);
			
		Если АвторыРезолюций <> Неопределено И АвторыРезолюций.Количество() > 0 Тогда
			Если ПредметыСИзмененнымСостоянием.Найти(Предмет) = Неопределено Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
			КонецЕсли;
			КоличествоРезолюцийУстановленныхПроцессом = КоличествоРезолюцийУстановленныхПроцессом
				+ АвторыРезолюций.Количество();
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхПредметов = ПредметыСИзмененнымСостоянием.Количество();
	Если КоличествоИзмененныхПредметов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НаименованиеПредмета = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ПредметыСИзмененнымСостоянием[0], 
		"Наименование");
	
	Если КоличествоСостоянийУстановленныхПроцессом > 0
		И КоличествоРезолюцийУстановленныхПроцессом > 0 Тогда
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будет очищено состояние рассмотрения
					 |и будут удалены резолюции (%2), cозданные в рамках этого процесса.'; en = 'Reivew state will be cleared for document ""%1"". Resolutions created during the process (%2) will be deleted.'"),
				НаименованиеПредмета,
				КоличествоРезолюцийУстановленныхПроцессом);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будет очищено состояние рассмотрения
					 |и будут удалены резолюции (%2), cозданные в рамках этого процесса.'; en = 'Reivew state will be cleared for the documents (%1). Resolutions created during the process (%2) will be deleted.'"),
				КоличествоИзмененныхПредметов,
				КоличествоРезолюцийУстановленныхПроцессом);
		КонецЕсли;
		
	ИначеЕсли КоличествоСостоянийУстановленныхПроцессом > 0 Тогда
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будет очищено состояние рассмотрения.'; en = 'Review state will be cleared for document ""%1"".'"),
				НаименованиеПредмета);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будет очищено состояние рассмотрения.'; en = 'Review state will be cleared for the documents (%1).'"),
				КоличествоИзмененныхПредметов);
		КонецЕсли;
	Иначе
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будут удалены резолюции (%2), cозданные в рамках этого процесса.'; en = 'Resolutions of document  ""%1"" created during the process (%2) will be deleted.'"),
				НаименованиеПредмета,
				КоличествоРезолюцийУстановленныхПроцессом);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будут удалены резолюции (%2), cозданные в рамках этого процесса.'; en = 'Resolutions of documents (%1) created during the process (%2) will be deleted.'"),
				КоличествоИзмененныхПредметов,
				КоличествоРезолюцийУстановленныхПроцессом);
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Возвращает авторов резолюций Документа установленные БизнесПроцессом
//
// Возвращаемое значение:
//  Массив - массив авторов резолюций
//
Функция ПолучитьРезолюцииПоБизнесПроцессу(Документ, БизнесПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Документ) <> Тип("СправочникСсылка.ВходящиеДокументы")
		И ТипЗнч(Документ) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Резолюции.АвторРезолюции КАК АвторРезолюции
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Источник = &Рассмотрение
		|	И Резолюции.Документ = &Ссылка";

	Запрос.УстановитьПараметр("Рассмотрение", БизнесПроцесс);
	Запрос.УстановитьПараметр("Ссылка", Документ);

	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("АвторРезолюции");

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Контрагенты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Мероприятия")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Проекты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ПроектныеЗадачи"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.СообщенияОбсуждений")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ТемыОбсуждений"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы"));
	
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо")); 
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо")); 
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варианты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Рассмотрение - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   БизнесПроцесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Представление = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		Представление = НСтр("ru = 'Рассмотрено'; en = 'Reviewed'");
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Представление = НСтр("ru = 'Обработано'; en = 'Processed'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			Представление);
	КонецЕсли;
	
	Результат.ИспользоватьКомментарий = Истина;
	
	Возврат Результат;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


#КонецЕсли
