#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 06.07.2018 {
	ra_EtapPrinyatiyaUvedomleniya = Шаблон.ra_EtapPrinyatiyaUvedomleniya;
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 06.07.2018 } 
	
	// ТСК Талько Э.Г. 26.11.2018 {
	ra_EtapUtverzhdeniyaItogovogoOtcheta = Шаблон.ra_EtapUtverzhdeniyaItogovogoOtcheta;
	// ТСК Талько Э.Г. 26.11.2018 }
	
	// ТСК Шепелев М.Н. 20.12.2018 {
	ра_ЭтапСогласованияРезультатаКО = Шаблон.ра_ЭтапСогласованияРезультатаКО;
	// ТСК Шепелев М.Н. 20.12.2018 }
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	
	ВариантСогласования = ШаблонБизнесПроцесса.ВариантСогласования;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи")  
	   И ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
	 	ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП;
		
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
		
		// ТСК Талько Э.Г.; 11.07.2018; Бизнес-процессы {
		Для каждого ДокументКачества Из ра_ОбщегоНазначенияКлиентСервер.ДокументыКачества() Цикл
			ТипыПредметов.Добавить(Тип("ДокументСсылка." + ДокументКачества));
		КонецЦикла;
		// ТСК Талько Э.Г.; 11.07.2018; Бизнес-процессы }
		
		ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
		
		Если ПредметыПодписыватьЭП.Количество() = 0 Тогда
			ПодписыватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	НеобходимоПеренестиНачалоСледующегоШага = Ложь;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина); 
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
			
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
		
		Если НЕ Строка.Условие.Пустая()
			И ШаблонБизнесПроцесса.ИспользоватьУсловия Тогда
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета = Неопределено Тогда
				Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НеобходимоПеренестиНачалоСледующегоШага = Истина;
				КонецЕсли;
				Продолжить;
			Иначе
				Предмет = СтрокаПредмета.Предмет;
				РезультатПроверкиУсловия = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, Строка.Условие);
				Если НЕ РезультатПроверкиУсловия Тогда
					Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
						НеобходимоПеренестиНачалоСледующегоШага = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
		
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") = Неопределено Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 	
				
				СтруктураОтбора = Новый Структура("Исполнитель",
					АвтоподстановкаИсполнитель);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
				СтруктураОтбора = Новый Структура("Исполнитель",
					АвтоподстановкаИсполнитель.РольИсполнителя);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") = Неопределено Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						КонецЕсли;		
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ПолныеРоли") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						СтруктураОтбора = Новый Структура("Исполнитель",
							ЭлементМассива);
						
						Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 
						
						СтруктураОтбора = Новый Структура("Исполнитель",
							ЭлементМассива.РольИсполнителя);
						
						Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
		Иначе
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Исполнитель", Строка.Исполнитель);

			НайденныеСтроки = Исполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И НоваяСтрока.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
			НоваяСтрока.ПорядокСогласования	= Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	// трудозатраты
	Если ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланАвтора = ШаблонБизнесПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КоличествоИтераций = 1;
	
	Если Исполнители.Количество() = 0 Тогда 
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
			    Если Исполнители.Найти(СтрокаИсполнитель.Исполнитель) = Неопределено Тогда
				 	НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
					НоваяСтрока.СрокИсполнения = СрокИсполненияУчастника;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = СрокИсполненияУчастника;
		ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	ТрудозатратыПланИсполнителя = РаботаСПроектами.МинимальныеТрудозатратыИсполнителей(ПроектнаяЗадача.Исполнители);
	
КонецПроцедуры

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонОбъект.ВариантСогласования = ВариантСогласования;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, ПорядокСогласования, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
			
		ИсполнительШаблона.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	КонецЦикла;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	НачатьТранзакцию();
	Попытка
		
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И НЕ Задачи.ПометкаУдаления
		|	И НЕ Задачи.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ИзмененыСрокиЗадач = Ложь;
		
		ЕстьНевыполненныеЗадачиВТочкеМаршрутаСогласовать = Ложь;
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ОпределенНовыйСрокЗадачи = Ложь;
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда 
				
				МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
				ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
				
				Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
					И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
					
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом согласования %1'; en = 'Examine the approval result %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						ПредметыСтрокой);
				Иначе
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом согласования: %1'; en = 'Examine the approval result: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Наименование);
				КонецЕсли;
				
				СтарыйСрокЗадачи = ЗадачаОбъект.СрокИсполнения;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
					
				Если СтарыйСрокЗадачи <> ЗадачаОбъект.СрокИсполнения Тогда
					ИзмененыСрокиЗадач = Истина;
					ОпределенНовыйСрокЗадачи = Истина;
				КонецЕсли;
				
			Иначе
				НаименованиеЗадачи = Наименование;
				
				НайденнаяСтрока = Исполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					СтарыйСрокЗадачи = ЗадачаОбъект.СрокИсполнения;
					
					СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
						ЗадачаОбъект,
						НайденнаяСтрока.ВариантУстановкиСрокаИсполнения,
						НайденнаяСтрока.СрокИсполнения,
						НайденнаяСтрока.СрокИсполненияДни,
						НайденнаяСтрока.СрокИсполненияЧасы,
						НайденнаяСтрока.СрокИсполненияМинуты);
						
					Если СтарыйСрокЗадачи <> ЗадачаОбъект.СрокИсполнения Тогда
						ИзмененыСрокиЗадач = Истина;
						ОпределенНовыйСрокЗадачи = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				ЕстьНевыполненныеЗадачиВТочкеМаршрутаСогласовать = Истина;
				
			КонецЕсли;
			
			Если ЗадачаОбъект.Наименование = НаименованиеЗадачи И
				 Не ОпределенНовыйСрокЗадачи И
				 ЗадачаОбъект.Важность = Важность И
				 ЗадачаОбъект.Описание = Описание И
				 ЗадачаОбъект.Автор = Автор 
			Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.Наименование 	= НаименованиеЗадачи;
			
			ЗадачаОбъект.Важность 		= Важность;
			ЗадачаОбъект.Описание 		= Описание;
			ЗадачаОбъект.Автор 	  		= Автор;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если ЕстьНевыполненныеЗадачиВТочкеМаршрутаСогласовать Тогда
		
			// обновление исполнителей
			ДобавленныеСтроки = Новый Массив;
			УдаленныеСтроки   = Новый Массив;
			ИзмененныеСтроки  = Новый Массив;
			
			КоличествоСтрок = СтарыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					СтарыеИсполнители.Удалить(Строка);
				КонецЕсли;	
			КонецЦикла;	
			
			НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = НовыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Тогда
					НовыеИсполнители.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 0 По КоличествоСтрок-1 Цикл
				Строка = НовыеИсполнители[Инд];
				
				Если Инд > 0 Тогда 
					ПредыдущаяСтрока = НовыеИсполнители[Инд-1];
				Иначе
					ПредыдущаяСтрока = Неопределено;
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					
					Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
						ДобавленныеСтроки.Добавить(Строка);
					ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно 
							И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 	
						
						Если ПредыдущаяСтрока = Неопределено 
						 Или ЗначениеЗаполнено(ПредыдущаяСтрока.ЗадачаИсполнителя) 
						 Или ДобавленныеСтроки.Найти(ПредыдущаяСтрока) <> Неопределено Тогда 
						
							ДобавленныеСтроки.Добавить(Строка);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
			
			Для Каждого Строка Из НовыеИсполнители Цикл
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					Продолжить;
				КонецЕсли;	
				
				НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
					
				Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель Тогда 
					ИзмененныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из СтарыеИсполнители Цикл
				НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			    Если НайденнаяСтрока = Неопределено Тогда 
					УдаленныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			ЕстьДобавленныеСтроки = ДобавленныеСтроки.Количество() > 0;
			ЕстьИзмененныеСтроки = ИзмененныеСтроки.Количество() > 0;
			ЕстьУдаленныеСтроки = УдаленныеСтроки.Количество() > 0;
			
			// добавленные строки
			Для Каждого Строка Из ДобавленныеСтроки Цикл
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ЗаполнитьЗадачуСогласовать(Задача, Строка);
				Задача.Записать();
				
				НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда 
					НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				КонецЕсли;
				
				НоваяСтрока = РезультатыСогласования.Добавить();
				НоваяСтрока.НомерИтерации = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда 
				Записать();
			КонецЕсли;
			
			// измененные строки
			Для Каждого Строка Из ИзмененныеСтроки Цикл
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				
				Если Задача.ПринятаКИсполнению Тогда
					Задача.ПринятаКИсполнению = Ложь;
					Задача.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Задача.Исполнитель = Строка.Исполнитель;
					Задача.РольИсполнителя = Неопределено;
				Иначе	
					Задача.Исполнитель = Неопределено;
					Задача.РольИсполнителя = Строка.Исполнитель;
				КонецЕсли;
				
				Задача.Записать();
			КонецЦикла;

			// удаленные строки
			Если ЕстьУдаленныеСтроки Тогда 
			
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
					Задача.ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче", Истина);
					Задача.ИсключенаИзПроцесса = Истина;
					Задача.ВыполнитьЗадачу();
					Задача.УстановитьПометкуУдаления(Истина);
				КонецЦикла;	
				Прочитать();
				
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					НайденнаяСтрока = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если НайденнаяСтрока <> Неопределено Тогда 
						РезультатыСогласования.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
			
			Если ЕстьДобавленныеСтроки Или ЕстьИзмененныеСтроки Или ЕстьУдаленныеСтроки
				Или ИзмененыСрокиЗадач Тогда
				
				Записать();
			КонецЕсли;
			
			// обновление виз
			ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
			
			Для каждого Предмет Из ОбрабатываемыеПредметы Цикл
				
				Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессу(Предмет, Ссылка);
				РаботаСВизамиСогласования.УдалитьВизы(Визы);
			
				Для Каждого Строка Из ЭтотОбъект.Исполнители Цикл
					Если ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
						Продолжить;
					КонецЕсли;
					
					СтруктураИсполнителя = Новый Структура(
						"Исполнитель,
						|РольИсполнителя");
					Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
						СтруктураИсполнителя.Исполнитель = Строка.Исполнитель;
						СтруктураИсполнителя.РольИсполнителя = Справочники.ПолныеРоли.ПустаяСсылка();
					Иначе
						СтруктураИсполнителя.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
						СтруктураИсполнителя.РольИсполнителя = Строка.Исполнитель;
					КонецЕсли;
					
					РаботаСВизамиСогласования.СоздатьВизуПоБизнесПроцессу(Предмет, Ссылка, СтруктураИсполнителя);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Возвращает признак наличия метода ПриПрикрепленииПредмета
// 
Функция ЕстьМетодПриПрикрепленииПредмета() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Вызывается при прикреплении предмета к стартованному БП
//
Процедура ПриПрикрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ, ТекущаяДатаСеанса(), Перечисления.СостоянияДокументов.НаСогласовании, Ссылка);
	КонецЕсли;
	
	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(ЭтотОбъект, Ложь);
	
	ТочкиМаршрутаТекущихЗадач = ТочкиМаршрутаТекущихЗадач();
	
	Если ТочкиМаршрутаТекущихЗадач.Найти(БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать) <> Неопределено Тогда
		
		Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессуИЗадачам(Документ, Ссылка);
		
		Для Каждого СтрИсполнитель Из Исполнители Цикл
			
			Отбор = Новый Структура;
			
			Если ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
				Отбор.Вставить("Источник", СтрИсполнитель.ЗадачаИсполнителя);
			Иначе
				Отбор.Вставить("Источник", Ссылка);
			КонецЕсли;
			
			Если ТипЗнч(СтрИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Отбор.Вставить("Исполнитель", СтрИсполнитель.Исполнитель);
			Иначе
				Отбор.Вставить("РольИсполнителя", СтрИсполнитель.Исполнитель);
			КонецЕсли;
			
			ВизыИсполнителя = Визы.НайтиСтроки(Отбор);
			
			Если ВизыИсполнителя.Количество() = 0 Тогда
				
				Если ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
					РаботаСВизамиСогласования.СоздатьВизуПоЗадаче(Документ, СтрИсполнитель.ЗадачаИсполнителя);
				Иначе
					СтруктураИсполнителя = Новый Структура(
							"Исполнитель,
							|РольИсполнителя");
							
					Если ТипЗнч(СтрИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
						СтруктураИсполнителя.Исполнитель = СтрИсполнитель.Исполнитель;
						СтруктураИсполнителя.РольИсполнителя = Справочники.ПолныеРоли.ПустаяСсылка();
					Иначе
						СтруктураИсполнителя.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
						СтруктураИсполнителя.РольИсполнителя = СтрИсполнитель.Исполнитель;
					КонецЕсли;
					
					РаботаСВизамиСогласования.СоздатьВизуПоБизнесПроцессу(Документ, Ссылка, СтруктураИсполнителя);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия метода ПриОткрепленииПредмета
// 
Функция ЕстьМетодПриОткрепленииПредмета() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Делопроизводство.УдалитьСостояниеДокумента(Документ, Ссылка);
	КонецЕсли;	
	
	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(Ссылка, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
		ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
				Строка = Исполнители.Добавить();
				Строка.Исполнитель = Исполнитель;
			КонецЦикла;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Согласовать ""%1""'; en = 'Approve ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Предмет");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 {
		Если ПодписыватьЭП Тогда 
			МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Утвердить'; en = 'Approve'"));
		Иначе 
			МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Согласовать'; en = 'Approve'"));
		КонецЕсли;	
		// было МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Согласовать'; en = 'Approve'"));
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 } 
	КонецЕсли;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
	ра_НаименованиеБизнесПроцессаАнгл = Шаблон.ра_НаименованиеБизнесПроцессаАнгл + " " + МультипредметностьПереопределяемый.ПредметыСтрокойАнгл(Предметы);			
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 }
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		РаботаСВизамиСогласования.ЗаполнитьИсполнителейИзАктивныхВиз(ЭтотОбъект);
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.ЗаполнитьБизнесПроцессПоМероприятию(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		ПроверяемыеРеквизиты.Добавить("Исполнители.ПорядокСогласования");
	КонецЕсли;	
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	КоличествоИсполнителей = Исполнители.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Исполнители[Инд1];
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;

		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Исполнители[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'; en = 'Performer ""%1"" is specified twice in the list of performers'"),
					Строка(Строка2.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
				НайденнаяСтрока = РезультатыСогласования.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.РезультатСогласования = ДополнительныеСвойства.РезультатСогласования;
			ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
				ПовторитьСогласование = ДополнительныеСвойства.ПовторитьСогласование;
				Если ДополнительныеСвойства.Свойство("Исполнители") Тогда
					Исполнители.Очистить();
					Для Каждого СтрИсполнитель Из ДополнительныеСвойства.Исполнители Цикл
						ЗаполнитьЗначенияСвойств(Исполнители.Добавить(), СтрИсполнитель);
					КонецЦикла;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантСогласования") Тогда
					ВариантСогласования = ДополнительныеСвойства.ВариантСогласования;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполненияПроцесса") Тогда
					СрокИсполненияПроцесса = ДополнительныеСвойства.СрокИсполненияПроцесса;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатов") Тогда
					СрокОбработкиРезультатов = ДополнительныеСвойства.СрокОбработкиРезультатов;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовДни") Тогда
					СрокОбработкиРезультатовДни = ДополнительныеСвойства.СрокОбработкиРезультатовДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовЧасы") Тогда
					СрокОбработкиРезультатовЧасы = ДополнительныеСвойства.СрокОбработкиРезультатовЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовМинуты") Тогда
					СрокОбработкиРезультатовМинуты = ДополнительныеСвойства.СрокОбработкиРезультатовМинуты;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
					ВариантУстановкиСрокаОбработкиРезультатов = ДополнительныеСвойства.ВариантУстановкиСрокаОбработкиРезультатов;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("КоличествоИтераций") Тогда
					КоличествоИтераций = ДополнительныеСвойства.КоличествоИтераций;
				КонецЕсли;
				
				
				НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.ОтправленоНаПовторноеСогласование = ДополнительныеСвойства.ПовторитьСогласование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
	
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			
			Если ПометкаУдаления Тогда 
				Для Каждого Предмет Из ПредметыДляУстановки Цикл
					ПриОткрепленииПредмета(Предмет);
				КонецЦикла;
			Иначе
				ВосстановитьСостояниеПредметов();
				ВосстановитьВизыБизнесПроцесса();
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
		Если Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
			И Состояние <> ПредыдущееСостояние Тогда
			КомпенсироватьСостояниеПредметов();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыСогласования.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатСогласования = Неопределено;
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// Работа с визами согласования.
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
		Для Каждого Предмет Из ПредметыДляУстановки Цикл
			Результат = РаботаСВизамиСогласования.ПроверитьПересечениеВизИИсполнителей(Предмет, Исполнители);
			Если Результат = "пересогласовать" Тогда 
				РаботаСВизамиСогласования.ПоместитьЗакрытиеВизыДокументаВИсторию(Предмет); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Для Каждого Предмет из ПредметыДляУстановки Цикл
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 {
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
			СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НаПодтверждении;
		Иначе
			Если ra_EtapPrinyatiyaUvedomleniya Тогда 
				СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НаРассмотрении;				
			ИначеЕсли ПодписыватьЭП Тогда 	
				СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НаУтверждении;
			Иначе 
				СостояниеДокумента = Перечисления.СостоянияДокументов.НаСогласовании;
			КонецЕсли;
		КонецЕсли;
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ТекущаяДатаСеанса(), 
			СостояниеДокумента, 
			Ссылка);
		// БЫЛО
		//Делопроизводство.ЗаписатьСостояниеДокумента(
		//	Предмет, 
		//	ТекущаяДатаСеанса(), 
		//	Перечисления.СостоянияДокументов.НаСогласовании, 
		//	Ссылка);
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 }
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка);
	КонецЕсли;
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьСогласование = Ложь;
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
	КонецЦикла;	
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
	РаботаСВизамиСогласования.ОбработатьВизыПриНачалеИтерации(Ссылка);
	
КонецПроцедуры

Процедура СогласоватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтрок = Новый Массив;
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.Пройден Тогда 
				Продолжить;
			КонецЕсли;	
				
			МассивСтрок.Добавить(Строка);
			Прервать;
		КонецЦикла;	
	
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Строки = Исполнители.НайтиСтроки(Новый Структура("Пройден", Ложь));
		Если Строки.Количество() > 0 Тогда 
			МассивСтрок.Добавить(Строки[0]);
		КонецЕсли;	
		
		Для Инд = 1 По Строки.ВГраница() Цикл
			Если Строки[Инд].ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 
				МассивСтрок.Добавить(Строки[Инд]);
			Иначе	
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуСогласовать(Задача, Строка);
		
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
		
		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
		
		НоваяСтрока = РезультатыСогласования.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура СогласоватьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловиеОбходЗавершен(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Результат = Истина;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		
		ЕстьНеСогласовано = Ложь;
		Для Каждого Строка Из Исполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;	
				
			ЗначениеРезультата = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если ЗначениеРезультата = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если ЗначениеРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				ЕстьНеСогласовано = Истина;
			КонецЕсли;	
		КонецЦикла;	
	
		Если (Исполнители.Найти(Ложь, "Пройден") = Неопределено) Или ЕстьНеСогласовано Тогда 
			Результат = Истина;
			Возврат;
		КонецЕсли;	
			
		Результат = Ложь;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		
		Если (Исполнители.Найти(Ложь, "Пройден") = Неопределено) Тогда 
			Результат = Истина;
			Возврат;
		КонецЕсли;	
			
		ЕстьНеСогласовано = Ложь;
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего И ЕстьНеСогласовано Тогда 
				Результат = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗначениеРезультата = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если ЗначениеРезультата = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если ЗначениеРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				ЕстьНеСогласовано = Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Результат = Ложь;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен вариант согласования процесса ""%1""'; en = 'Approval result type is not specified for process: %1'"), 
			Строка(Ссылка));
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат согласования
	Если РезультатыСогласования.Количество() > 0 Тогда
		
		РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		Для Каждого Элемент Из РезультатыСогласования Цикл
			Если Элемент.НомерИтерации = НомерИтерации Тогда
				
				Если Элемент.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Элемент.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина); 
	
	Если ОбрабатываемыеДокументы.Количество() > 0 Тогда
		
		ДатаИсполнения = ТекущаяДатаСеанса();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|ГДЕ
		|	РезультатыСогласования.Ссылка = &Ссылка
		|	И РезультатыСогласования.НомерИтерации = &НомерИтерации";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ДатаИсполнения = Выборка.ДатаИсполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьВизыСогласования = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
	
	Для Каждого Предмет Из ОбрабатываемыеДокументы Цикл
		Если РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 {
			//СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;
			Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
				СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Проект;
			Иначе
				Если ПодписыватьЭП Тогда 
					СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НеУтвержден;
				Иначе 
					СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;	
				КонецЕсли;	
			КонецЕсли;
			// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 } 
		Иначе	
			// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 {
			//СостояниеДокумента = Перечисления.СостоянияДокументов.Согласован;
			Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
				СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Подтвержден;
			Иначе
				Если ra_EtapPrinyatiyaUvedomleniya Тогда 
					СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Принято;
				ИначеЕсли ПодписыватьЭП Тогда 
					СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Утвержден;
				Иначе 
					СостояниеДокумента = Перечисления.СостоянияДокументов.Согласован;
				КонецЕсли;	
			КонецЕсли;
			// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 } 
		КонецЕсли;
		
		Если ИспользоватьВизыСогласования Тогда 
			// удаление виз исполнителей, до которых не дошло согласование
			УдаляемыеВизы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессу(Предмет, Ссылка);
			РаботаСВизамиСогласования.УдалитьВизы(УдаляемыеВизы);
			
			Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Предмет);
			ЕстьСНезаполненнымРезультатом = Ложь;
			Для Каждого Виза Из Визы Цикл
				Если Не ЗначениеЗаполнено(Виза.РезультатСогласования) И Виза.Источник <> Ссылка Тогда 
					ЕстьСНезаполненнымРезультатом = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЕстьНесогласованные = Ложь;
			Для Каждого Виза Из Визы Цикл
				Если Виза.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					ЕстьНесогласованные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьСНезаполненнымРезультатом Тогда 
				// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 {
				//СостояниеДокумента = Перечисления.СостоянияДокументов.НаСогласовании;
				Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
					СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НаПодтверждении;
				Иначе
					Если ra_EtapPrinyatiyaUvedomleniya Тогда 
						СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НаРассмотрении;
					ИначеЕсли ПодписыватьЭП Тогда 
						СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НаУтверждении;
					Иначе 
						СостояниеДокумента = Перечисления.СостоянияДокументов.НаСогласовании;
					КонецЕсли;	
				КонецЕсли;
				// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 }
			ИначеЕсли ЕстьНесогласованные Тогда 
				// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 {
				//СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;
				Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
					СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Проект;
				Иначе
					Если ПодписыватьЭП Тогда 
						СостояниеДокумента = Перечисления.СостоянияДокументов.ra_НеУтвержден;
					Иначе
						СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;
					КонецЕсли;
				КонецЕсли;
				// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 }
			КонецЕсли;
		Иначе 
			// Устанавливаем состояние, только если по предмету нет других активных согласований
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
			|ГДЕ
			|	СогласованиеПредметы.Ссылка <> &Ссылка
			|	И СогласованиеПредметы.Предмет = &Предмет
			|	И СогласованиеПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
			|	И СогласованиеПредметы.Ссылка.Стартован
			|	И НЕ СогласованиеПредметы.Ссылка.Завершен
			|	И НЕ СогласованиеПредметы.Ссылка.ПометкаУдаления
			|	И НЕ СогласованиеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
			|	И ИСТИНА В
			|			(ВЫБРАТЬ
			|				ИСТИНА
			|			ИЗ
			|				Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|			ГДЕ
			|				ЗадачаИсполнителя.БизнесПроцесс = СогласованиеПредметы.Ссылка
			|				И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать)
			|				И НЕ ЗадачаИсполнителя.Выполнена
			|				И НЕ ЗадачаИсполнителя.ПометкаУдаления)";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("Предмет", Предмет);
			Выборка = Запрос.Выполнить().Выбрать();
		
			Если Выборка.Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ДатаИсполнения, 
			СостояниеДокумента, 
			Ссылка);
			
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 {
		// после утверждения документов "ОчетОНесоответствииЧасть1", "ОчетОНесоответствииЧасть2", "ОчетОНесоответствииЧасть3" необходимо направить по маршруту документы из табличных частей этих документов
		Если СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Утвержден Тогда 
			Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast1") Тогда 
				
				Для Каждого ДокументВСД из Предмет.Dejstviya Цикл
					Если НЕ ра_ОбщегоНазначения.ЕстьНеЗавершенныеБизнесПроцессыПоДокументу(ДокументВСД.VremennyeSderzhivayushchieDejstviyaIKorrekciya) Тогда
						БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ДокументВСД.VremennyeSderzhivayushchieDejstviyaIKorrekciya, Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента);
					Иначе
						ЗаписьЖурналаРегистрации(
							"Ошибка старта процесса",
							УровеньЖурналаРегистрации.Ошибка,
							ДокументВСД.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Метаданные(),
							ДокументВСД.VremennyeSderzhivayushchieDejstviyaIKorrekciya,
							"Ошибка старта процесса согласования документа " + ДокументВСД.VremennyeSderzhivayushchieDejstviyaIKorrekciya + " т.к. по нему есть незавершенные бизнес-процесы.");
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast2") Тогда 
				
				Для Каждого ДокументКД из Предмет.DejstviyaKD Цикл
					Если НЕ ра_ОбщегоНазначения.ЕстьНеЗавершенныеБизнесПроцессыПоДокументу(ДокументКД.KorrektiruyushcheeDejstvie) Тогда
						БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ДокументКД.KorrektiruyushcheeDejstvie, Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента);
					Иначе
						ЗаписьЖурналаРегистрации(
							"Ошибка старта процесса",
							УровеньЖурналаРегистрации.Ошибка,
							ДокументКД.KorrektiruyushcheeDejstvie.Метаданные(),
							ДокументКД.KorrektiruyushcheeDejstvie,
							"Ошибка старта процесса согласования документа " + ДокументКД.KorrektiruyushcheeDejstvie + " т.к. по нему есть незавершенные бизнес-процесы.");
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast3") Тогда 
				
				Для Каждого ДокументКД из Предмет.DejstviyaPD Цикл
					Если НЕ ра_ОбщегоНазначения.ЕстьНеЗавершенныеБизнесПроцессыПоДокументу(ДокументКД.PreduprezhdayushcheeDejstvie) Тогда
						БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ДокументКД.PreduprezhdayushcheeDejstvie, Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента);
					Иначе
						ЗаписьЖурналаРегистрации(
							"Ошибка старта процесса",
							УровеньЖурналаРегистрации.Ошибка,
							ДокументКД.PreduprezhdayushcheeDejstvie.Метаданные(),
							ДокументКД.PreduprezhdayushcheeDejstvie,
							"Ошибка старта процесса согласования документа " + ДокументКД.PreduprezhdayushcheeDejstvie + " т.к. по нему есть незавершенные бизнес-процесы.");
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 11.07.2018 }				
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если процесс завершился положительно, то задачу ознакомления формируем
	// после завершения процесса.
	Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ПовторитьСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьСогласование;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	СрокИсполненияДатой = ДатаЗавершения;
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// Если процесс завершился положительно и нет задачи ознакомления (задача ознакомления могла быть
	// создана до перехода на редакцию 2.1), то создаем задачу ознакомления с результатом.
	Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
		И РезультатыОзнакомлений.Найти(НомерИтерации, "НомерИтерации") = Неопределено
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 03.09.2018 {
		и ra_EtapPrinyatiyaUvedomleniya
		и ра_РаботаСПроцессами.УведомлениеПоСтороннейОрганизации(Ссылка).ПоСтороннейОрганизации Тогда
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 03.09.2018 }
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуОзнакомиться(Задача);
		Задача.Записать();
		
		НоваяСтрока = РезультатыОзнакомлений.Добавить();
		НоваяСтрока.НомерИтерации 	  = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры	

Процедура ЗаполнитьЗадачуСогласовать(Задача, Строка)
	
	Задача.Дата 	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(
		ЭтотОбъект, Задача, БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	
	Задача.Наименование  = Наименование;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
	Задача.ра_НаименованиеБизнесПроцессаАнгл = ра_НаименованиеБизнесПроцессаАнгл;	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 }
	
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
		ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Задача.Исполнитель);
	Иначе
		Задача.РольИсполнителя = Строка.Исполнитель;
		ГрафикРаботы = ПолучитьГрафикРаботыРоли(Строка.Исполнитель);
	КонецЕсли;
	
	// Определение срока исполнения
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		Строка.ВариантУстановкиСрокаИсполнения,
		Строка.СрокИсполнения,
		Строка.СрокИсполненияДни,
		Строка.СрокИсполненияЧасы,
		Строка.СрокИсполненияМинуты);
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(
		ЭтотОбъект, Задача, БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
		
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 16.08.2018 {
	// для этапа принятия УоН задача ознакомления должна уйти ОзК выявившей организации
	Если ra_EtapPrinyatiyaUvedomleniya Тогда
		СтруктураРезультат = ра_РаботаСПроцессами.УведомлениеПоСтороннейОрганизации(Ссылка);
		Если СтруктураРезультат.ПоСтороннейОрганизации Тогда
			Задача.Исполнитель = СтруктураРезультат.ОтветственныйЗаКачество;
		Иначе
			// ТСК Близнюк С.И.; 01.11.2018; task#1572{
			Задача.Исполнитель = ра_РаботаСПроцессами.ПолучитьВыявившегоНесоответствие(Ссылка);
			// ТСК Близнюк С.И.; 01.11.2018; task#1572}
		КонецЕсли;
	//// ТСК Шепелев М.Н. 20.12.2018 {
	//ИначеЕсли ра_ЭтапСогласованияРезультатаКО Тогда
	//	
	//	ТипыПредметов = Новый Массив;
	//	ТипыПредметов.Добавить(Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu"));
	//
	//	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
	//		ЭтотОбъект, ТипыПредметов, Истина);
	//		
	//	Если МассивПредметов.Количество() Тогда
	//		Задача.Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивПредметов[0], "Kontroler");
	//	Иначе
	//		Задача.Исполнитель = Автор;
	//	КонецЕсли;
	//					
	//// ТСК Шепелев М.Н. 20.12.2018 }	
	Иначе
		Задача.Исполнитель = Автор;
	КонецЕсли;
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 16.08.2018 }
	
	// Если указана дата завершения, то создается после завершения с пустым сроком,
	// т.к. она формируется для уведомления автора процесса о положительном
	// завершении и не влияет на срок исполнения всего процесса.
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 04.09.2018 {
		//Задача.СрокИсполнения = Дата(1,1,1);
		Задача.СрокИсполнения = ТекущаяДатаСеанса() + 86400;
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 04.09.2018 } 
	Иначе
		СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
			Задача,
			ВариантУстановкиСрокаОбработкиРезультатов,
			СрокОбработкиРезультатов,
			СрокОбработкиРезультатовДни,
			СрокОбработкиРезультатовЧасы,
			СрокОбработкиРезультатовМинуты);
	КонецЕсли;
	
	// ТСК Близнюк С.И.; 11.01.2019; task#1793{
	Задача.СрокИсполнения = Дата(1, 1, 1);
	// ТСК Близнюк С.И.; 11.01.2019; task#1793}
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	ра_ОписаниеДействияRU = "";
	ра_ОписаниеДействияEN = "";
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
	
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(СтрокаПредметов) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Ознакомиться с результатом согласования %1'; en = 'Examine the approval result %1'",
			ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача));
				
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 04.09.2018 {		
		ра_ОписаниеДействияRU = "Ознакомиться с результатом согласования";
		ра_ОписаниеДействияEN = "Examine the approval result";
		Если ra_EtapPrinyatiyaUvedomleniya
			и РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда 
			СтрокаСообщения = НСтр("ru = 'Принят допустившей организацией документ %1'; en = 'Accepted document by the admitted organization %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача));
			ра_ОписаниеДействияRU = "Принят допустившей организацией документ";
			ра_ОписаниеДействияEN = "Accepted document by the admitted organization";	
				
		КонецЕсли;			
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 04.09.2018 } 
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПредметов);
	Иначе
		
		СтрокаСообщения = НСтр("ru = 'Ознакомиться с результатом согласования: %1'; en = 'Examine the approval result: %1'",
			ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача));
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Наименование);	
			
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 04.09.2018 {		
		ра_ОписаниеДействияRU = "Ознакомиться с результатом согласования";
		ра_ОписаниеДействияEN = "Examine the approval result";
		Если ra_EtapPrinyatiyaUvedomleniya
			и РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда 
			СтрокаСообщения = НСтр("ru = 'Принят допустившей организацией документ %1'; en = 'Accepted document by the admitted organization %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача));
			ра_ОписаниеДействияRU = "Принят допустившей организацией документ";
			ра_ОписаниеДействияEN = "Accepted document by the admitted organization";	
			Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПредметов);	
		КонецЕсли;			
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 04.09.2018 }	
				
	КонецЕсли;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 {
	Если ПодписыватьЭП Тогда 
		Задача.Наименование = СтрЗаменить(Задача.Наименование, "согласования", "утверждения");
		ра_ОписаниеДействияRU = СтрЗаменить(ра_ОписаниеДействияRU, "согласования", "утверждения");
	КонецЕсли;	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 12.07.2018 } 
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
	СтрокаПредменты_En = МультипредметностьПереопределяемый.ПредметыСтрокойАнгл(Предметы);
	Задача.ра_НаименованиеБизнесПроцессаАнгл = "Examine the approval result: " + СтрокаПредменты_En;
	Если ra_EtapPrinyatiyaUvedomleniya
		и РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
		Задача.ра_НаименованиеБизнесПроцессаАнгл = "Accepted document by the admitted organization: " + СтрокаПредменты_En;	
	КонецЕсли;		
	
	Задача.ра_ОписаниеДействияRU = ра_ОписаниеДействияRU;
	Задача.ра_ОписаниеДействияEN = ра_ОписаниеДействияEN;
	
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 }
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры	

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Согласовать '; en = 'Approve '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

// Возвращает список точек маршрута текущих задач процесса
//
// Возвращаемое значение:
//  Массив
//   * ТочкаМаршрутаБизнесПроцессаСсылка
//
Функция ТочкиМаршрутаТекущихЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СогласованиеРезультатыСогласования.ЗадачаИсполнителя КАК Задача
		|ПОМЕСТИТЬ ЗадачиТекущейИтерации
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК СогласованиеРезультатыСогласования
		|ГДЕ
		|	СогласованиеРезультатыСогласования.Ссылка = &Процесс
		|	И СогласованиеРезультатыСогласования.НомерИтерации = &НомерИтерации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СогласованиеРезультатыОзнакомлений.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК СогласованиеРезультатыОзнакомлений
		|ГДЕ
		|	СогласованиеРезультатыОзнакомлений.Ссылка = &Процесс
		|	И СогласованиеРезультатыОзнакомлений.НомерИтерации = &НомерИтерации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.ТочкаМаршрута
		|ИЗ
		|	ЗадачиТекущейИтерации КАК ЗадачиТекущейИтерации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ЗадачиТекущейИтерации.Задача = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачаИсполнителя.ТочкаМаршрута";
		
	Запрос.УстановитьПараметр("Процесс", Ссылка);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТочкаМаршрута");
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостояниеПредметов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ОбрабатываемыеПредметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СогласованиеРезультатыСогласования.НомерИтерации,
		|	МИНИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.Дата) КАК ПерваяЗадача,
		|	МАКСИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения) КАК ПоследняяЗадача
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК СогласованиеРезультатыСогласования
		|ГДЕ
		|	СогласованиеРезультатыСогласования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СогласованиеРезультатыСогласования.НомерИтерации";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ДатыЗадач = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Предмет из ОбрабатываемыеПредметы Цикл
		Для Инд = 1 По НомерИтерации Цикл
			СтрокаДаты = ДатыЗадач.Найти(Инд, "НомерИтерации");
			
			Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет, 
					СтрокаДаты.ПерваяЗадача, 
					Перечисления.СостоянияДокументов.НаСогласовании, 
				Ссылка);
			
			ЗадачиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", Инд));
			
			ИтерацияЗавершена = Истина;
			Для Каждого Строка Из ЗадачиИтерации Цикл
				Если Не Строка.ЗадачаИсполнителя.Выполнена Тогда 
					ИтерацияЗавершена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИтерацияЗавершена Тогда 
				
				СостояниеИтерации = Перечисления.СостоянияДокументов.Согласован;
				Для Каждого Строка Из ЗадачиИтерации Цикл
					Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
						СостояниеИтерации = Перечисления.СостоянияДокументов.НеСогласован;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет, 
					СтрокаДаты.ПоследняяЗадача, 
					СостояниеИтерации, 
					Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Компенсирует состояние документа при прерывании БП
//
Процедура КомпенсироватьСостояниеПредметов() Экспорт
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ПредметыДляУстановки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Предмет Из ПредметыДляУстановки  Цикл
		Делопроизводство.УдалитьСостояниеДокумента(Предмет, Ссылка);
	КонецЦикла;
	
	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(Ссылка, Истина);
	
КонецПроцедуры

Процедура ВосстановитьВизыБизнесПроцесса() 

	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(Ссылка, Ложь);
	
КонецПроцедуры	

// Выбирает всех пользователей из регистра ИсполнителиЗадач по роли
Функция ПолучитьПользователейРоли(Роль)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсполнителиЗадач.Исполнитель
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Запрос.УстановитьПараметр("РольИсполнителя", Роль);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

// Получает график работы для роли - по пользователям, которые входят в роль
Функция ПолучитьГрафикРаботыРоли(Роль)
	
	Таблица = ПолучитьПользователейРоли(Роль);
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Константы.ОсновнойГрафикРаботы.Получить();
	ИначеЕсли Таблица.Количество() = 1 Тогда	
		Возврат ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Таблица[0].Исполнитель);
	Иначе // больше 1	
		
		ГрафикПервогоПользователя = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Таблица[0].Исполнитель);
		
		Для Пер = 1 По Таблица.Количество() - 1 Цикл
			График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Таблица[Пер].Исполнитель);
			Если График <> ГрафикПервогоПользователя Тогда
				Возврат Константы.ОсновнойГрафикРаботы.Получить();
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат ГрафикПервогоПользователя;
		
	КонецЕсли;	
	
КонецФункции

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		// Результат предыдущего согласования
		НомерИтерацииЗадачи = Неопределено;
		
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была направлена на повторное согласование'; en = 'Task was sent for repeat approval'", КодЯзыкаПолучателя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Результат согласования
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			Если НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
				Результат = НСтр("ru = 'Результат согласования: Согласовано'; en = 'Result of approval: Approved'", КодЯзыкаПолучателя);
			ИначеЕсли НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				Результат = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'; en = 'Result of approval: Approved with reservations'", КодЯзыкаПолучателя);
			ИначеЕсли НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				Результат = НСтр("ru = 'Результат согласования: Не согласовано'; en = 'Result of approval: Not approved'", КодЯзыкаПолучателя);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		// Результат согласования
		НомерИтерацииЗадачи = Неопределено;
		РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.Согласовано;
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.НеСогласовано;
				Прервать;
			КонецЕсли;
			
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
				РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			Результат = НСтр("ru = 'Результат согласования: Согласовано'; en = 'Result of approval: Approved'", КодЯзыкаПолучателя);
		ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			Результат = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'; en = 'Result of approval: Approved with reservations'", КодЯзыкаПолучателя);
		ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
			Результат = НСтр("ru = 'Результат согласования: Не согласовано'; en = 'Result of approval: Not approved'", КодЯзыкаПолучателя);
		КонецЕсли;
		
		// Результат ознакомления
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				
				Если НайденнаяСтрока.ОтправленоНаПовторноеСогласование Тогда
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом согласования: Отправлено на повторное согласование'; en = 'Result of examination of approval result: Sent for repeat approval'",
						КодЯзыкаПолучателя);
				Иначе
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом согласования: Ознакомился'; en = 'Result of examination of approval result: Examined'",
						КодЯзыкаПолучателя);
				КонецЕсли;
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					РезультатОзнакомления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	


#КонецЕсли

// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 16.08.2018 {
Процедура ОзнакомитьсяПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	// записываем статус Аннулирован, когда УоН не принято и ОзК не повторяет процесс
	Если ПовторитьСогласование Тогда 
		Возврат;
	КонецЕсли;		
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	ДатаИсполнения = ТекущаяДатаСеанса();
	
	СостояниеДокумента = Перечисления.СостоянияДокументов.ra_Аннулирован;
	
	Для Каждого Предмет Из ОбрабатываемыеДокументы Цикл
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ДатаИсполнения, 
			СостояниеДокумента, 
			Ссылка);	
		
	КонецЦикла;	
	
КонецПроцедуры
// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 16.08.2018 }
