//Формирует очередное значение штрихкода
//Параметры:	ПрефиксВнутреннегоШтрихкода - код распределенной базы
//Возвращает:   Значение штрихкода
//Штрихкод формируется по формату 2_ПрефиксВнутреннегоШтрихкода_ПорядковыйНомер_КонтрольныйСимвол
Функция СформироватьШтрихКод() Экспорт

	ПрефиксВнутреннегоШтрихкода = Константы.ПрефиксИБвШтрихкоде.Получить();
	ИспользоватьОбмен = Константы.ИспользоватьСинхронизациюДанных.Получить();
	Если НЕ ЗначениеЗаполнено(ПрефиксВнутреннегоШтрихкода)
		ИЛИ НЕ ИспользоватьОбмен Тогда
		ПрефиксВнутреннегоШтрихкода = "00";
	КонецЕсли;
	
	ПрефиксВнутреннегоШтрихкода = Формат(ПрефиксВнутреннегоШтрихкода, "ЧЦ=2; ЧН=; ЧВН=");

	ТекКод = ПолучитьОчереднойНомер();

	Штрихкод = "2" + ПрефиксВнутреннегоШтрихкода + Формат(ТекКод, "ЧЦ=9; ЧВН=; ЧГ=");
    Штрихкод = Штрихкод + КонтрольныйСимволEAN(Штрихкод, 13);  
	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

//Получает очередной порядковый номер для значения штрихкода
Функция ПолучитьОчереднойНомер()
	
	НачатьТранзакцию();
	Попытка		
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", Справочники.Нумераторы.Штрихкоды);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Нумератор.Установить(Справочники.Нумераторы.Штрихкоды);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			ТекущийНомер = НаборЗаписей[0].ТекущийНомер;
			СформированныйНомер = ТекущийНомер + 1
		Иначе
			СформированныйНомер = 1;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Нумератор = Справочники.Нумераторы.Штрихкоды;
		МенеджерЗаписи.ТекущийНомер = СформированныйНомер;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		Возврат СформированныйНомер;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

//Формирует контрольный символ для штрихкодов EAN-8 и -13
//Параметры: ШтрихКод - строка со штрихкодом без контрольного символа
//			 Тип - тип штрихкода, 8 или 13
//Возвращает: Контрольный символ, от "0" до "9"
Функция КонтрольныйСимволEAN(ШтрихКод, Тип)

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

//Присваивает штрихкод объекту
//Параметры: Ссылка - ссылка на Внутренний, Входящий, Исходящий документ или Файл
//			 Код - значение штрихкода
//			 ВнутреннийШтрихкод - флаг, показывающий, что создается штрихкод данной организации
Процедура ПрисвоитьШтрихКод(Ссылка, Код, ВнутреннийШтрихкод = Истина) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВнутреннийШтрихкод Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Штрихкоды.Владелец,
			|	Штрихкоды.Код
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &Владелец
			|	И Штрихкоды.ВнутреннийШтрихкод = &ВнутреннийШтрихкод
			|	И Штрихкоды.Код <> &Код";
		Запрос.УстановитьПараметр("Владелец", Ссылка);
		Запрос.УстановитьПараметр("ВнутреннийШтрихкод", Истина);
		Запрос.УстановитьПараметр("Код", Код);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка присвоения штрихкода %3. У объекта ""%1"" уже есть присвоенный ранее штрихкод %2'; en = 'Error assigning barcode %3. The object ""%1"" already have attributed earlier barcode %2'"),
				Строка(Ссылка),
				Строка(Выборка.Код),
				Строка(Код));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Присвоение штрихкода'; en = 'Assignment of barcode'"),
				УровеньЖурналаРегистрации.Ошибка,
				Ссылка.Метаданные(),
				Ссылка,
				ТекстОшибки);
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	ТекЗапись.Владелец = Ссылка;
	ТекЗапись.ВнутреннийШтрихкод = ВнутреннийШтрихкод;
	ТекЗапись.Код = Код;
	Попытка
		ТекЗапись.Записать();
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка при записи штрихкода у объекта ""%1"":
				|%2'; en = 'An error occurred while writing the barcode of object ""%1"": %2'"),
			Ссылка.Наименование,
			ИнформацияОбОшибке().Описание);
		ВызватьИсключение(ТекстОшибки);
	КонецПопытки;

КонецПроцедуры //ПрисвоитьШтрихКод()

//Получает значение штрихкода указанного объекта
//Параметры:	Ссылка - ссылка на Внутренний, Входящий, Исходящий документ или Файл
//Возвращает:	Значение штрихкода, если штрихкод найден
//				Неопределено, если штрихкод не найден
Функция ПолучитьШтрихКод(Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ВнутреннийШтрихкод Тогда
			Возврат Запись.Код;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции //ПолучитьШтрихКод()

//Получает из персональных настроек параметры расположения штрихкода на странице
//Параметры:нет
//Возвращает:структура
//				ПоказыватьФормуНастройки - показывать форму настройки положения штрихкода
//				ПоложениеНаСтранице - значение из перечисления ВариантыРасположенияШтрихкода
//				СмещениеПоГоризонтали - расстояние от левого края страницы
//				СмещениеПоВертикали - расстояние от верха страницы
Функция ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице() Экспорт
	
	ПоказыватьФормуНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "ПоказыватьФормуНастройкиШтрихкода");
	ПоложениеНаСтранице = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "ПоложениеШтрихкодаНаСтранице");
	СмещениеПоГоризонтали = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "СмещениеПоГоризонтали");
	СмещениеПоВертикали = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "СмещениеПоВертикали");
	ШиринаНаклейки = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "ШиринаНаклейки");
	ВысотаНаклейки = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "ВысотаНаклейки");	
    ВысотаШК = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "ВысотаШтрихкодаПриВставкеВФайл");
	Если НЕ ЗначениеЗаполнено(ВысотаШК) Тогда
		ВысотаШК = 10;
	КонецЕсли;
	ПоказыватьЦифры = ХранилищеОбщихНастроек.Загрузить("НастройкиШтрихкода", "ВставлятьЦифрыВШК");
	ПоказыватьЦифры = ?(ПоказыватьЦифры = Неопределено,Ложь,ПоказыватьЦифры);
	
	НастройкиШтрихкода = Новый Структура;
	НастройкиШтрихкода.Вставить("ПоказыватьФормуНастройки", ПоказыватьФормуНастройки);
	НастройкиШтрихкода.Вставить("ПоложениеНаСтранице", ПоложениеНаСтранице);
	НастройкиШтрихкода.Вставить("СмещениеПоГоризонтали", СмещениеПоГоризонтали);
	НастройкиШтрихкода.Вставить("СмещениеПоВертикали", СмещениеПоВертикали);
	НастройкиШтрихкода.Вставить("ШиринаНаклейки", ШиринаНаклейки);
	НастройкиШтрихкода.Вставить("ВысотаНаклейки", ВысотаНаклейки);
    НастройкиШтрихкода.Вставить("ВысотаШК", ВысотаШК);
	НастройкиШтрихкода.Вставить("ПоказыватьЦифры", ПоказыватьЦифры);
	
	Возврат НастройкиШтрихкода;
	
КонецФункции //ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице()

//Записывает в персональные настройки параметры расположения штрихкода на странице
//Параметры: структура
//				ПоказыватьФормуНастройки - показывать форму настройки положения штрихкода
//				ПоложениеНаСтранице - значение из перечисления ВариантыРасположенияШтрихкода
//				СмещениеПоГоризонтали - расстояние от левого края страницы
//				СмещениеПоВертикали - расстояние от верха страницы
//Возвращает:нет
Процедура ЗаписатьПерсональныеНастройкиОкнаСвойствШтрихкода(Настройки) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить("НастройкиШтрихкода", "ПоказыватьФормуНастройкиШтрихкода", Настройки.ПоказыватьФормуНастройки);
	ХранилищеОбщихНастроек.Сохранить("НастройкиШтрихкода", "ПоложениеШтрихкодаНаСтранице", Настройки.ПоложениеНаСтранице);
	ХранилищеОбщихНастроек.Сохранить("НастройкиШтрихкода", "СмещениеПоГоризонтали", Настройки.СмещениеПоГоризонтали);
	ХранилищеОбщихНастроек.Сохранить("НастройкиШтрихкода", "СмещениеПоВертикали", Настройки.СмещениеПоВертикали);
	ХранилищеОбщихНастроек.Сохранить("НастройкиШтрихкода", "ВысотаШтрихкодаПриВставкеВФайл", Настройки.ВысотаШК);	
	ХранилищеОбщихНастроек.Сохранить("НастройкиШтрихкода", "ВставлятьЦифрыВШК", Настройки.ПоказыватьЦифры);
	
КонецПроцедуры //ЗаписатьПерсональныеНастройкиОкнаСвойствШтрихкода()

//Получает данные о штрихкоде объекта. Если у объекта нет штрихкода, он присваивается
//Параметры: 
//			Объект - ссылка на объект, данные о штрихкоде которого собираются
//			ВысотаКартинкиВПроцентах - высота изображения штрихкода в процентах
//Возвращает:
//			структура
//				Штрихкод - значение штрихкода
//				ДвоичныеДанныеИзображения - двоичные данные изображения штрихкода
//				ДвоичныеДанныеФайла - двоичные данные файла, если Объект - это файл
//				НеобходимостьВставкиВместоТэга - влаг, показывающий, что штрихкод только сформирован для файла 
//					и что необходимо выполнить попытку вставить изображение штрихкода вместо тэга в файле
//				ИзменениеФайловMSWordТолькоНаСервере - флаг, показывающий, что вставка изображения в файл MS Word выполняется на сервере
//				НастройкиШтрихкода - структура из персональных настроек
//					ПоказыватьФормуНастройки - показывать форму настройки положения штрихкода
//					ПоложениеНаСтранице - значение из перечисления ВариантыРасположенияШтрихкода
//					СмещениеПоГоризонтали - расстояние от левого края страницы
//					СмещениеПоВертикали - расстояние от верха страницы	
//
//			Неопределено, если объект - это файл в папке ШаблоныФайлов
Функция ПолучитьДанныеДляВставкиШтрихкодаВОбъект(знач Объект,
	НеобходимоПередаватьСодержимоеФайла = Истина, 
	ВызовСКлиента = Ложь) Экспорт
	
	Ссылка = Объект.Ссылка;
	ДанныеШК = Новый Структура;
	
	//Получаем и вставляем персональные настройки окна положения ШК
	НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
	ДанныеШК.Вставить("НастройкиШтрихкода", НастройкиШтрихкода);
    ДанныеШК.Вставить("ДвоичныеДанныеИзображения", Неопределено);
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		Если НЕ (АвтозаполнениеШаблоновФайловКлиентСервер.ФорматMSWord(Ссылка.ТекущаяВерсияРасширение) ИЛИ Ссылка.ТекущаяВерсиярасширение = "odt")
			И НеобходимоПередаватьСодержимоеФайла Тогда
			ТекстОшибки = НСтр("ru = 'Вставка штрихкодов осуществляется только в файлы Microsoft Word или Open Office Writer.'; en = 'You can insert barcodes only to files of Microsoft Word or Open Office Writer.'");
			ДанныеШК.Вставить("СообщениеОбОшибке", ТекстОшибки);	
			Возврат ДанныеШК;
		КонецЕсли;
		ДанныеШК.Вставить("ФайлРедактируется", НЕ Ссылка.Редактирует.Пустая());
		//Получаем и вставляем значения констант, определяющих, где выполняется работа с файлами при вставке ШК
		ИзменениеФайловMSWordТолькоНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
		ДанныеШК.Вставить("ИзменениеФайловMSWordТолькоНаСервере", ИзменениеФайловMSWordТолькоНаСервере);
		
		ДанныеШК.Вставить("Расширение", Ссылка.ТекущаяВерсияРасширение);
		
		//Получаем и вставляем, если необходимо, двоичные данные файла - для обработки на стороне клиента
		ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловСервер.ПолучитьДвоичныеДанныеФайла(Ссылка);
		Если НеобходимоПередаватьСодержимоеФайла И Ссылка.ТекущаяВерсияРасширение = "doc"
			ИЛИ НРег(Ссылка.ТекущаяВерсияРасширение) <> "doc" И НЕ ВызовСКлиента Тогда
			ДанныеШК.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда	
		Возврат ДанныеШК;
	КонецЕсли;
	
	НеобходимостьВставкиВместоТэга = Ложь;
	Штрихкод = Неопределено;	
	//Пытаемся найти штрихкод у объекта
	ЗначениеШтрихкода = ШтрихкодированиеСервер.ПолучитьШтрихКод(Ссылка);
	Если ЗначениеШтрихкода = Неопределено
		ИЛИ ПустаяСтрока(ЗначениеШтрихкода) Тогда
		//если штрихкод не найден и Объект - это файл
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") И НЕ Ссылка.ТекущаяВерсия.Пустая() Тогда
			Если ТипЗнч(Ссылка.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов")
				И АвтозаполнениеШаблоновФайловСервер.ФайлНаходитсяВИерархииПапокШаблонов(Ссылка) Тогда				
				ТекстОшибки = НСтр("ru = 'Для файлов, находящихся в папке ""Шаблоны файлов"", штрихкод не формируется.'; en = 'For files located in the folder ""File templates"", barcode is not generated.'");
				ДанныеШК.Вставить("СообщениеОбОшибке", ТекстОшибки);
				Возврат ДанныеШК;
			ИначеЕсли ТипЗнч(Ссылка.ВладелецФайла) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Ссылка.ВладелецФайла) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(Ссылка.ВладелецФайла) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				//если файл хранится в документе, то ему присваивается штрихкод документа
				Штрихкод = ШтрихкодированиеСервер.ПолучитьШтрихКод(Ссылка.ВладелецФайла);
			ИначеЕсли Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка.ВладелецФайла) Тогда
				Штрихкод = ШтрихкодированиеСервер.СформироватьШтрихКод();
				//сформированный штрихкод присваивается Объекту
				ШтрихкодированиеСервер.ПрисвоитьШтрихКод(Ссылка, Штрихкод);
			КонецЕсли;
			
			//т.к. штрихкод только что сформирован, необходимо выполнить попытку вставить его изображение вместо тэга в файле
			НеобходимостьВставкиВместоТэга = Истина;
			
		ИначеЕсли  (ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы"))
			И ЗначениеЗаполнено(Ссылка) Тогда
			//если Объект - это документ, то ему присваивается персональный штрихкод
			Штрихкод = ШтрихкодированиеСервер.СформироватьШтрихКод();
			ШтрихкодированиеСервер.ПрисвоитьШтрихКод(Ссылка, Штрихкод);
		КонецЕсли;
	Иначе
		Штрихкод = ЗначениеШтрихкода;
	КонецЕсли;
	Если НЕ Штрихкод = Неопределено Тогда
		
		//Вставим значение ШК
		ДанныеШК.Вставить("Штрихкод", Штрихкод);		
		
		//Если Идет вызов с клиента, но штрихкодирование выполняется только на сервере, то возвращаем только часть данных
		Если ВызовСКлиента И ИзменениеФайловMSWordТолькоНаСервере И Ссылка.ТекущаяВерсияРасширение = "doc" Тогда
			Возврат ДанныеШК;
		КонецЕсли;
		
		//получаем изображение штрихкода
		ДвоичныеДанныеИзображения = ПолучитьКартинкуШтрихкода(Штрихкод,, НастройкиШтрихкода.ВысотаШК, НастройкиШтрихкода.ПоказыватьЦифры).ПолучитьДвоичныеДанные();
		ДанныеШК.ДвоичныеДанныеИзображения = ДвоичныеДанныеИзображения;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда						
		    ДанныеШК.Вставить("НеобходимостьВставкиВместоТэга", НеобходимостьВставкиВместоТэга);
		Конецесли;
				
		Возврат ДанныеШК;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

//Возвращает расширение текущей версии файла
//Параметры:
//			Ссылка - ссылка на объект типа Файл
Функция ПолучитьРасширениеФайла(Ссылка) Экспорт
	
	Возврат Ссылка.ТекущаяВерсияРасширение;
	
КонецФункции

//Выполняет поиск Документа или файла по штрихкоду
//параметры: 
//			Код - строка, содержащая значение штрихкода
//возвращает:
//			Структура
//				Ключ - ссылка на найденного владельца штрихкода
//				Метаданные - наименование типа данных найденного владельца штрихкода
//			Неопределено, если по штрихкоду ничего не найдено
Функция НайтиОбъектыПоШтрихкоду(Код, ИскатьЗадачиПоОбъектам = Ложь) Экспорт
	
    МассивНайденных = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец,
		|	Штрихкоды.Код
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Код = &Код";

	Запрос.УстановитьПараметр("Код", Код);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат МассивНайденных;
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Владелец = ВыборкаДетальныеЗаписи.Владелец;
		
		Если НЕ ЗначениеЗаполнено(Владелец) Тогда
			Возврат МассивНайденных;
		КонецЕсли;
		
		//проверка на доступность владельца для текущего пользователя
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Владелец).Чтение Тогда
			Возврат МассивНайденных;		
		КонецЕсли;
				
		//если объект-владелец штрихкода доступен для текущего пользователя, продолжаем обработку
		ДанныеВозврата = Новый Структура;			
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Файлы")
			И ТипЗнч(Владелец.ВладелецФайла) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
			ДанныеВозврата.Вставить("Ключ", Владелец.ВладелецФайла);
			ДанныеВозврата.Вставить("Метаданные", Владелец.ВладелецФайла.Метаданные().Имя);
			ДанныеВозврата.Вставить("ПредставлениеОбъекта", Владелец.ВладелецФайла.Метаданные().ПредставлениеОбъекта);
		Иначе
			ДанныеВозврата.Вставить("Ключ", Владелец.Ссылка);
			ДанныеВозврата.Вставить("Метаданные", Владелец.Ссылка.Метаданные().Имя);
			ДанныеВозврата.Вставить("ПредставлениеОбъекта", Владелец.Ссылка.Метаданные().ПредставлениеОбъекта);
		КонецЕсли;
		
		ТакойОбъектУжеЕсть = Ложь;
		Для Каждого ЭлементМассива Из МассивНайденных Цикл
			Если ЭлементМассива.Ключ = ДанныеВозврата.Ключ Тогда
				ТакойОбъектУжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ТакойОбъектУжеЕсть Тогда
			МассивНайденных.Добавить(ДанныеВозврата);
		КонецЕсли;
	КонецЦикла;	
	Если НЕ ИскатьЗадачиПоОбъектам ИЛИ МассивНайденных.Количество() > 1 ИЛИ МассивНайденных.Количество() = 0 Тогда
		Возврат МассивНайденных;
	ИначеЕсли ИскатьЗадачиПоОбъектам И МассивНайденных.Количество() = 1 Тогда 
		
		//поиск задач по найденному документу или файлу
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|			ПО ЗадачаИсполнителя.ТекущийИсполнитель = ИсполнителиРолейИДелегаты.РольПользователь
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|			ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|		ПО ЗадачаИсполнителяПредметы.Ссылка = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет = &Предмет
		|	И ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ";
			
		ПредметБизнесПроцесса = МассивНайденных[0].Ключ;
		Запрос.УстановитьПараметр("Предмет", ПредметБизнесПроцесса);
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоАктивныхЗадачПользователя = Выборка.Количество();
		Если КоличествоАктивныхЗадачПользователя = 0 Тогда
			Возврат МассивНайденных;	
		Иначе
			МассивНайденных.Очистить();
			Пока Выборка.Следующий() Цикл
				ДанныеВозврата = Новый Структура;
				ДанныеВозврата.Вставить("Ключ", Выборка.Ссылка);
				ДанныеВозврата.Вставить("Метаданные", Выборка.Ссылка.Метаданные().Имя);
				ДанныеВозврата.Вставить("ПредставлениеОбъекта", Выборка.Ссылка.Метаданные().ПредставлениеОбъекта);
				ДанныеВозврата.Вставить("ПредметБизнесПроцесса", ПредметБизнесПроцесса);
				МассивНайденных.Добавить(ДанныеВозврата);
			КонецЦикла;
			Возврат МассивНайденных;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции 
	
// Загрузка параметров подключения драйвера сканера из хранилища настроек. 
// 
// Параметры: 
//  ТипОС           – Строка – тип операционной системы.  (IN)
// 
// Возвращаемое значение: 
//  Структура, содержащая параметры подключения сканера
Функция ЗагрузитьПараметрыПодключенияСканера(ТипОС) Экспорт

	Если ТипОС = "Windows" Тогда
		
		Возврат ХранилищеОбщихНастроек.Загрузить("ТекущиеНастройкиСканераWindows");
		
	ИначеЕсли ТипОС = "Linux" Тогда
	
		Возврат ХранилищеОбщихНастроек.Загрузить("ТекущиеНастройкиСканераLinux");
		
	КонецЕсли;

КонецФункции

//Получает значение функциональной опции "Использовать штрихкоды"
Функция ПолучитьИспользованиеШтрихкодов() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
КонецФункции

// Получает двоичные данные файла и данные для вставки штрихкода
Функция ПолучитьДвоичныеДанныеФайлаИДанныеДляВставкиШтрихкодаВОбъект(
	АдресВременногоХранилищаФайла, 
	знач Объект, 
	НеобходимоПередаватьСодержимоеФайла = Истина, 
	ВызовСКлиента = Ложь) Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Объект, НеобходимоПередаватьСодержимоеФайла, ВызовСКлиента);
	
	Возврат Новый Структура("ДвоичныеДанные, ДанныеОШтрихкоде", ДвоичныеДанные, ДанныеОШтрихкоде);
	
КонецФункции

//Получает изображение штрихкода
//Параметры:
//			Код - значение штрихкода
//			ТипКода - формат штрихкода. По умолчанию EAN-13
//			ВысотаВПроцентах - высота штрихкода в процентах
//Возвращает:
//			Картинка с изображением штрихкода
Функция ПолучитьКартинкуШтрихкода(Код, ТипКода = 1, ВысотаВМиллиметрах, ВставлятьЦифры) Экспорт
	
	ИнформацияОСистеме = Новый СистемнаяИнформация;
	
	ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодов", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	
	// Создадим объект внешней компоненты
	Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");

	Компонент.ОтображатьТекст = ВставлятьЦифры;
	
	// Если нет возможности рисовать
	Если НЕ Компонент.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем
		ТекстСообщения = НСтр("ru = 'Не удалось установить компонент штрихкодирования.'; en = 'Barcode component could not be installed.'");
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Штрихкодирование'; en = 'Barcoding'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, , 
			ТекстСообщения);
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	
	Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86
		ИЛИ ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Если Компонент.НайтиШрифт("DejaVu-Serif-Book") = Истина Тогда
			Компонент.Шрифт = "DejaVu-Serif-Book";
		Иначе
			
			Если Компонент.НайтиШрифт("DejaVu-Serif") = Истина Тогда
				Компонент.Шрифт = "DejaVu-Serif";
			Иначе	
			
				// Не удалось подключить шрифт
				ТекстСообщения = НСтр("ru = 'Не удалось подключить шрифт ""DejaVu-Serif"" или ""DejaVu-Serif-Book"". 
				|Нужно установить на сервере (Linux) шрифт ""DejaVu-Serif"" или ""DejaVu-Serif-Book"".
				|Необходимо обратиться к администратору.';
				|en = 'Failed to install ""DejaVu Serif"" or ""DejaVu Serif-Book"" font.
				|Linux server should have the fonts ""DejaVu Serif"" or ""DejaVu Serif-Book"" installed.
				|Contact the administrator.'");
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Штрихкодирование'; en = 'Barcoding'"), 
					УровеньЖурналаРегистрации.Ошибка,
					, , 
					ТекстСообщения);
				ВызватьИсключение(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		// Если в системе установлен шрифт Arial
		Если Компонент.НайтиШрифт("Arial") Тогда
			// Выбираем его как шрифт для формирования картинки
			Компонент.Шрифт = "Arial";
		Иначе
			// Шрифт Arial в системе отсутствует
			// Обойдем все доступные компоненте шрифты
			Для Сч = 0 По Компонент.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте
				ТекущийШрифт = Компонент.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штрихкода
					Компонент.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// Установим размер шрифта
	Компонент.РазмерШрифта = 12;
	Компонент.ОриентацияТекста = 3;
	// Зададим размер картинки
	Если НЕ ЗначениеЗаполнено(ВысотаВМиллиметрах) Тогда
		ВысотаВМиллиметрах = 10;
	КонецЕсли;
	Компонент.Высота = Число(Формат((ВысотаВМиллиметрах/35.3) * 100, "ЧДЦ=0"));
	
	//EAN-13 по умолчанию
	Компонент.ТипКода = ТипКода;
	 
	// Если код содержит контрольный символ, обязательно указываем
	Компонент.СодержитКС = Истина;
	
	// Формируем картинку штрихкода
	Компонент.ЗначениеКода = Код;

	Компонент.Ширина = Компонент.МинимальнаяШиринаКода + 5;

	// Сформируем картинку
	ДвоичныеДанныеКартинки = Компонент.ПолучитьШтрихкод();
	// Если картинка сформировалась
	Если НЕ ДвоичныеДанныеКартинки = Неопределено Тогда
		// Формируем из двоичных данных
		Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
		Возврат Картинка;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Неизвестная ошибка штрихкодирования. Необходимо обратиться к администратору.';
|en = 'Unknown barcoding error. 
|Contact your administrator.'");
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Штрихкодирование'; en = 'Barcoding'"), 
		УровеньЖурналаРегистрации.Ошибка,
		, , 
		ТекстСообщения);
	ВызватьИсключение(ТекстСообщения);

КонецФункции

// Вставляет регистрационный штамп в файле DocX 
Функция ВставитьРегистрационныйШтампВФайлDocxСУказаниемПоложения(
	Расширение, 
	ТекстНадписи, 
	ДвоичныеДанныеФайла, 
	ДвоичныеДанныеКартинки, 
	ДанныеОПоложении, 
	ВставлятьШтрихкод) Экспорт
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();

	//Заполнение полей в теле документа
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	//получение макета для вставки регштампа
	Если ЗначениеЗаполнено(ТекстНадписи) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
			МакетДляВставки = ПолучитьОбщийМакет("ВставкаРегистрационногоШтампаВDocx");
		Иначе
			МакетДляВставки = ПолучитьОбщийМакет("ВставкаРегистрационногоШтампаВDocxБезШтрихкода");
	    КонецЕсли;
	Иначе
		МакетДляВставки = ПолучитьОбщийМакет("ВставкаШтрихкодаСУказаниемПоложенияDocx");	
	КонецЕсли;
	ТекстДляВставкиШтампа = МакетДляВставки.ПолучитьТекст();
		
	//установка положения и прочих параметров
	СмещениеПоГоризонтали = 0;
	СмещениеПоВертикали = 0;
	ГоризонтальноеВыравнивание = "";
	ОтносительночегоСчитатьГоризонтальноеВыравнивание = "margin";
	ВертикальноеВыравнивание = "";
	ОтносительноЧегоСчитатьВертикальноеВыравнивание = "margin";
	
	Если ЗначениеЗаполнено(ТекстНадписи) Тогда
		ИмяКомпании = ТекстНадписи.НазваниеОрганизации;
		РегистрационныйНомер = ТекстНадписи.РегНомер;
		ДатаРегистрации = ТекстНадписи.Регдата;
	КонецЕсли;
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ИмяКомпании_", ИмяКомпании);
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_РегистрационныйНомер_", РегистрационныйНомер);
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ДатаРегистрации_", ДатаРегистрации);

	//Высота штрихкода в EMU (English Metrick Units)
	ВысотаШтрихкода = (ДанныеОПоложении.ВысотаШК / 25.4) * 914400;
	
	ПоложениеНаСтранице = ДанныеОПоложении.ПоложениеНаСтранице;
	Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыРасположенияШтрихкода.ПравыйНижний") Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MAX";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыРасположенияШтрихкода.ПравыйВерхний") Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыРасположенияШтрихкода.ЛевыйВерхний") Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыРасположенияШтрихкода.ЛевыйНижний") Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MAX";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНадписи) Тогда
		Если СмещениеПоГоризонтали = "MAX" Тогда
			//выравнивание к правому краю
			ГоризонтальноеВыравнивание = "mso-position-horizontal:right";
		ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда
			//выравнивание к левому краю
			ГоризонтальноеВыравнивание = "mso-position-horizontal:left";
		Иначе
			//если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в Point'ы
			//1 д = 1/72"
			ОтносительночегоСчитатьГоризонтальноеВыравнивание = "page";
			СмещениеПоГоризонтали = (ДанныеОПоложении.СмещениеПоГоризонтали / 25.4) * 72;
		КонецЕсли;
		
		Если СмещениеПоВертикали = "MAX" Тогда
			//выравнивание по нижнему краю
			ВертикальноеВыравнивание = "mso-position-vertical:bottom";
		ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
			//выравнивание по верхнему краю
			ВертикальноеВыравнивание = "mso-position-vertical:top";
		Иначе
			//если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в Point'ы
			ОтносительноЧегоСчитатьВертикальноеВыравнивание = "page";
			СмещениеПоВертикали =(ДанныеОПоложении.СмещениеПоВертикали / 25.4) * 72;
		КонецЕсли;

		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоГоризонтали_", Формат(СмещениеПоГоризонтали,"ЧДЦ=0; ЧГ=0") + "pt");
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", Формат(СмещениеПоВертикали,"ЧДЦ=0; ЧГ=0") + "pt");
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ГоризонтальноеВыравнивание_", ГоризонтальноеВыравнивание);
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ВертикальноеВыравнивание_", ВертикальноеВыравнивание);
	Иначе
		
		Если СмещениеПоГоризонтали = "MAX" Тогда
			//выравнивание к правому краю
			СмещениеПоГоризонтали = "<wp:align>right</wp:align>";
		ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда
			//выравнивание к левому краю
			СмещениеПоГоризонтали = "<wp:align>left</wp:align>";
		Иначе
			//если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в EMU
			//1 д = 1/72"
			ОтносительночегоСчитатьГоризонтальноеВыравнивание = "page";
			СмещениеПоГоризонталиЗначение = (ДанныеОПоложении.СмещениеПоГоризонтали / 25.4) * 914400;
			СмещениеПоГоризонтали = "<wp:posOffset>" + Формат(СмещениеПоГоризонталиЗначение,"ЧДЦ=0; ЧГ=0") + "</wp:posOffset>";
		КонецЕсли;
		
		Если СмещениеПоВертикали = "MAX" Тогда
			//выравнивание по нижнему краю
			СмещениеПоВертикали = "<wp:align>bottom</wp:align>";
		ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
			//выравнивание по верхнему краю
			СмещениеПоВертикали = "<wp:align>top</wp:align>";
		Иначе
			//если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в EMU
			ОтносительноЧегоСчитатьВертикальноеВыравнивание = "page";
			СмещениеПоВертикалиЗначение =(ДанныеОПоложении.СмещениеПоВертикали / 25.4) * 914400;
			СмещениеПоВертикали = "<wp:posOffset>" + Формат(СмещениеПоВертикалиЗначение,"ЧДЦ=0; ЧГ=0") + "</wp:posOffset>";
		КонецЕсли;

		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоГоризонтали_", Формат(СмещениеПоГоризонтали,"ЧДЦ=0; ЧГ=0"));
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", Формат(СмещениеПоВертикали,"ЧДЦ=0; ЧГ=0"));
		
	КонецЕсли;
	
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ОтносительноЧегоСчитатьВертикальноеСмещение_", ОтносительноЧегоСчитатьВертикальноеВыравнивание);
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ОтносительноЧегоСчитатьГоризонтальноеСмещение_", ОтносительночегоСчитатьГоризонтальноеВыравнивание);
	
	ИДкартинки = 0;
	Если ВставлятьШтрихкод Тогда
		СчетчикСвязей = 0;
		СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, ДвоичныеДанныеКартинки, ИДкартинки, СчетчикСвязей);
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ВысотаШтрихкода_", Формат(ВысотаШтрихкода,"ЧДЦ=0; ЧГ=0"));
	КонецЕсли;
	
	// Обязательно нужно ставить Ложь, иначе будут пропадать пробелы
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	//вставка разметки для регштампа в файл
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ВставитьШтамп = Ложь;
			Если ЧтениеXML.Имя = "w:body" Тогда
				ВставитьШтамп = Истина;
			КонецЕсли;
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение); 
			КонецЦикла;
			Если ВставитьШтамп Тогда
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДляВставкиШтампа);
				ВставитьШтамп = Ложь;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml", ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

// Вставляет штрихкод вместо тэга в файле DocX
Функция ВставитьШтрихкодВместоТэгаВФайлDocx(
	Тэг, 
	ДвоичныеДанныеИзображения, 
	ДвоичныеДанныеФайла, 
	Расширение, 
	ВысотаШтрихкода) Экспорт
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	ИДкартинки = 0;
	СчетчикСвязей = 0;
	СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, ДвоичныеДанныеИзображения, ИДкартинки, СчетчикСвязей);
		
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Обязательно нужно ставить Ложь, иначе будут пропадать пробелы
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	КартинкаШтрихкода = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл	
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				Если ЧтениеXML.Имя = "name" И ЧтениеXML.Значение = Тэг Тогда
					КартинкаШтрихкода = Истина;
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение); 
				ИначеЕсли КартинкаШтрихкода И ЧтениеXML.Имя = "r:embed" Тогда
					КартинкаШтрихкода = Ложь;
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,"rId" + Строка(СчетчикСвязей + 1));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Найти(ЧтениеXML.Значение, Тэг) > 0 Тогда
				НовоеЗначение = СтрЗаменить(ЧтениеXML.Значение, "&lt;&lt;"+Тэг+"&gt;&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "&lt;"+Тэг+"&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<<"+Тэг+">>" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<"+Тэг+">" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, Тэг, "_");
				МакетДляВставкиШтрихкода = ПолучитьОбщийМакет("ВставкаШтрихкодаВместоТегаВDocx");
				ТекстДляВставки = МакетДляВставкиШтрихкода.ПолучитьТекст();
				ТекстДляВставки = "</w:t>" + ТекстДляВставки + "<w:t>";
				
				ВысотаШтрихкодаЗначение = (ВысотаШтрихкода / 25.4) * 914400;
				ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "_ВысотаШтрихкода_", Формат(ВысотаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));
				ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
				
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "_", ТекстДляВставки);
				ЗаписьXML.ЗаписатьБезОбработки(НовоеЗначение);
			Иначе
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;

	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml", ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

Процедура СохранитьИзображениеВоВнутреннейСтруктуреDocx(
	ВременнаяПапкаДляРазархивирования, 
	ДвоичныеДанныеКартинки, 
	ИДкартинки, 
	СчетчикСвязей)
	
	//сохранение картинки штрихкода во внутренней структуре файла docx
	СоздатьКаталог(ВременнаяПапкаДляРазархивирования + "/word/media");
	МассивФайлов = НайтиФайлы(ВременнаяПапкаДляРазархивирования + "/word/media", "Image*.*", Истина);
	
	Для Каждого НайденныйФайл Из МассивФайлов Цикл
		ИДкартинки = ИДкартинки + 1;
	Конеццикла;
	КартинкаШК = Новый Картинка(ДвоичныеДанныеКартинки);
	КартинкаШК.Записать(ВременнаяПапкаДляРазархивирования + "/word/media/Image" + Строка(ИДкартинки + 1) + ".jpeg");
	ЧтениеФайлаСвязей = Новый ЧтениеXML();
	ЧтениеФайлаСвязей.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/_rels/document.xml.rels");
	ЗаписьФайлаСвязей = Новый ЗаписьXML();
	ЗаписьФайлаСвязей.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels");
	ЗаписьФайлаСвязей.ЗаписатьОбъявлениеXML();
	Пока ЧтениеФайлаСвязей.Прочитать() Цикл
		Если ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаСвязей.ЗаписатьНачалоЭлемента(ЧтениеФайлаСвязей.Имя);
			Пока ЧтениеФайлаСвязей.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаСвязей.ЗаписатьАтрибут(ЧтениеФайлаСвязей.Имя,ЧтениеФайлаСвязей.Значение); 
				Если ЧтениеФайлаСвязей.Имя = "Id" Тогда
					СчетчикСвязей = СчетчикСвязей + 1;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаСвязей.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаСвязей.Имя = "Relationships" Тогда
				НоваяСтрока = "<Relationship Target=""media/Image" + Строка(ИДкартинки + 1) + ".jpeg"" Type=""http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"" Id=""rId" + Строка(СчетчикСвязей + 1) + """/>";
				ЗаписьФайлаСвязей.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаСвязей.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
    ЧтениеФайлаСвязей.Закрыть();
	ЗаписьФайлаСвязей.Закрыть();
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels", ВременнаяПапкаДляРазархивирования + "/word/_rels/document.xml.rels");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels");
	
	//расширение опсиания типов содержимого в файле docx
	ЧтениеФайлаТипов = Новый ЧтениеXML();
	ЧтениеФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	ЗаписьФайлаТипов = Новый ЗаписьXML();
	ЗаписьФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");		
	ЗаписьФайлаТипов.ЗаписатьОбъявлениеXML();
	АтрибутJPEGНайден = Ложь;
	Пока ЧтениеФайлаТипов.Прочитать() Цикл
		Если ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаТипов.ЗаписатьНачалоЭлемента(ЧтениеФайлаТипов.Имя);
			Пока ЧтениеФайлаТипов.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаТипов.ЗаписатьАтрибут(ЧтениеФайлаТипов.Имя,ЧтениеФайлаТипов.Значение); 
				Если ЧтениеФайлаТипов.Имя = "Extension" И ЧтениеФайлаТипов.Значение = "jpeg" Тогда
					АтрибутJPEGНайден = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаТипов.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаТипов.Имя = "Types" И НЕ АтрибутJPEGНайден Тогда
				НоваяСтрока = "<Default Extension=""jpeg"" ContentType=""image/jpeg""/>";
				ЗаписьФайлаТипов.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаТипов.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	ЧтениеФайлаТипов.Закрыть();
	ЗаписьФайлаТипов.Закрыть();
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml", ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");

КонецПроцедуры

Функция ВставитьШтрихкод(ТекущийФайл, ДанныеОШтрихкодеФайла) Экспорт
	
	Если ДанныеОШтрихкодеФайла <> Неопределено И Не ДанныеОШтрихкодеФайла.Свойство("ДвоичныеДанныеФайла") Тогда
		ДанныеОШтрихкодеФайла = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(ТекущийФайл);
	КонецЕсли;
	
	Возврат ШтрихкодированиеКлиентСервер.ВставитьШтрихкодСИспользованиемНастроек(ТекущийФайл, 
		Неопределено, 
		Ложь, 
		ДанныеОШтрихкодеФайла.ДвоичныеДанныеИзображения, 
		ДанныеОШтрихкодеФайла.ДвоичныеДанныеФайла,
		ДанныеОШтрихкодеФайла.Расширение,
		ДанныеОШтрихкодеФайла.ФайлРедактируется, 
		ДанныеОШтрихкодеФайла.ИзменениеФайловMSWordТолькоНаСервере);
	
КонецФункции

Функция ВставитьРегистрационныйШтамп(ТекущийФайл, ДанныеОШтрихкодеФайла, ТекстНадписи) Экспорт 
	
	Если ДанныеОШтрихкодеФайла <> Неопределено 
		И НЕ ДанныеОШтрихкодеФайла.Свойство("ДвоичныеДанныеФайла") Тогда
		ДанныеОШтрихкодеФайла = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(ТекущийФайл);
	КонецЕсли;
	Возврат ШтрихкодированиеКлиентСервер.ВставитьРегистрационныйШтампСИспользованиемНастроек(ТекущийФайл, 
		Неопределено, 
		Ложь, 
		ТекстНадписи, 
		ДанныеОШтрихкодеФайла.ДвоичныеДанныеФайла,
		ДанныеОШтрихкодеФайла.ДвоичныеДанныеИзображения,
		ДанныеОШтрихкодеФайла.Расширение,
		ДанныеОШтрихкодеФайла.ФайлРедактируется, 
		ДанныеОШтрихкодеФайла.ИзменениеФайловMSWordТолькоНаСервере);
	
КонецФункции

Функция ШтрихкодированиеВключено() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
КонецФункции


