
#Область ПрограммныйИнтерфейс

#Область ОбработчикиПодписокНаСобытия

// Обработчик подписки ОбменСМобильнымКлиентомПередЗаписьюПапкиПисем.
Процедура ОбменСМобильнымКлиентомПередЗаписьюПапкиПисемПередЗаписью(Источник, Отказ) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда
		Возврат;
	КонецЕсли;

	Источник.ДополнительныеСвойства.Вставить("Родитель", Источник.Ссылка.Родитель);

КонецПроцедуры

// Обработчик подписики ОбменСМобильнымКлиентомПриЗаписиПапкиПисем.
// Если синхронизируемая с мобильным клиентом папка писем переносится в несинхронизируюмую папку, 
//	то эта несинхронизируемая папка и все ее родители становятся синхронизируемыми.
Процедура ОбменСМобильнымКлиентомПриЗаписиПапкиПисемПриЗаписи(Источник, Отказ) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.Родитель = Источник.Родитель Тогда
		Возврат;
	КонецЕсли;

	ПапкиДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			ПользователиКлиентСервер.ТекущийПользователь());

	Если ПапкиДляСинхронизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивДобавленныхПапок = Новый Массив;
	БылиДобавленыПапки     = Ложь;

	Если ПапкиДляСинхронизации.Найти(Источник.Ссылка) <> Неопределено Тогда

		МассивРодителейПапки = ПолучитьВсехРодителейПапки(Источник.Ссылка);

		Для Каждого Папка Из МассивРодителейПапки Цикл
			Если ПапкиДляСинхронизации.Найти(Папка) = Неопределено Тогда
				ПапкиДляСинхронизации.Добавить(Папка);
				МассивДобавленныхПапок.Добавить(Папка);
				БылиДобавленыПапки = Истина;
			КонецЕсли;
		КонецЦикла;

		Если БылиДобавленыПапки Тогда
			РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПапкиДляСинхронизации);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обработчик подписки ОбменСМобильнымПередЗаписьюПисьма
Процедура ОбменСМобильнымПередЗаписьюПисьмаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	Источник.ДополнительныеСвойства.Вставить("ОбменСМобильнымПредыдущаяПапка", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Папка"));

КонецПроцедуры

// Обработчик подписики ОбменСМобильнымПриЗаписиПисьма.
// Если письмо было перемещено, то в регистр ПапкиПисем делается запись 
//	для передачи факта перемещения на мобильные клиенты.
Процедура ОбменСМобильнымПриЗаписиПисьмаПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ДополнительныеСвойства.ОбменСМобильнымПредыдущаяПапка <> Источник.Папка Тогда

		НаборЗаписейРегистра = РегистрыСведений.ПисьмаВПапках.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Письмо.Установить(Источник.Ссылка);

		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		НоваяЗапись.Письмо = Источник.Ссылка;
		НоваяЗапись.Папка  = Источник.Папка;

		Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			НаборЗаписейРегистра.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписейРегистра.ОбменДанными.Получатели.Очистить();
		КонецЕсли;

		НаборЗаписейРегистра.Записать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Отправляет письма полученные с мобильного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  ПисьмаКОтправке - Массив - Список писем полученных с мобильного в сеансе обмена.
//
Процедура ОтправитьПисьмаПолученныеСМобильногоКлиента(МобильныйКлиент, ПисьмаКОтправке) Экспорт

	// Обходим массив подготовленных к отправке писем и записываем у них дату подготовки к отправке, 
	//	чтобы регламентное задание начало их отправлять.
	Для Каждого ПодготовленноеПисьмо Из ПисьмаКОтправке Цикл

		ПисьмоОбъект = ПодготовленноеПисьмо.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.ПодготовленоКОтправке = ПодготовленноеПисьмо.ПодготовленоКОтправке;

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформациюПоОбъекту(
			НСтр("ru = 'Отправка письма полученного из мобильного клиента'; en = 'Sending email received from mobile client'"),
			Строка(ТипЗнч(ПисьмоОбъект)),
			ПисьмоОбъект.Ссылка.УникальныйИдентификатор(),
			Ложь,
			МобильныйКлиент);

		ПисьмоОбъект.Записать();

	КонецЦикла;

КонецПроцедуры

// Получает краткий текст указанной длины из указанного оригинального текста.
// Удаляются лишние пустые строки.
// Параметры:
//	Текст - исходный текст
//	Длина - длина короткого текста, который необходимо получить
Функция ПолучитьКраткийТекст(Текст, Длина) Экспорт 

	Если ТипЗнч(Текст) = Тип("ХранилищеЗначения") Тогда
		Строка = Текст.Получить();
	ИначеЕсли ТипЗнч(Текст) = Тип("Строка") Тогда
		Строка = Текст;
	Иначе
		Возврат "";
	КонецЕсли;

	КраткийТекст = Строка;

	Пока СтрНайти(КраткийТекст, Символы.ВК) > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, Символы.ВК, "");
	КонецЦикла;

	Пока СтрНайти(КраткийТекст, "  ") > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, "  ", " ");
	КонецЦикла;

	Пока СтрНайти(КраткийТекст, " " + Символы.ПС) > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, " " + Символы.ПС, Символы.ПС);
	КонецЦикла;

	Пока СтрНайти(КраткийТекст, Символы.ПС + Символы.ПС) > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, Символы.ПС+Символы.ПС, Символы.ПС);
	КонецЦикла;

	Пока Сред(КраткийТекст, 1, 1) = " " Цикл
		КраткийТекст = Сред(КраткийТекст, 2, СтрДлина(КраткийТекст));
	КонецЦикла;

	Пока Сред(КраткийТекст, 1, 1) = Символы.ПС Цикл
		КраткийТекст = Сред(КраткийТекст, 2, СтрДлина(КраткийТекст));
	КонецЦикла;

	КраткийТекст = Сред(КраткийТекст, 1, Длина);
	КраткийТекст = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(КраткийТекст);

	Возврат КраткийТекст;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВсехРодителейПапки(Знач Папка)

	МассивРодителей = Новый Массив;

	Пока ЗначениеЗаполнено(Папка.Родитель) Цикл
		МассивРодителей.Добавить(Папка.Родитель);
		Папка = Папка.Родитель;
	КонецЦикла;

	Возврат МассивРодителей;

КонецФункции

#КонецОбласти



