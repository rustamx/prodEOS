
////////////////////////////////////////////////////////////////////////////////
// Сроки исполнения процессов клиент: содержит процедуры и функции по работе со сроками процессов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс_ПереносСроков

// Проверяет необходимость подтверждения переноса срока и вызывает диалог подтверждения.
// Предназначена для вызова из обработчика формы ПередЗаписью.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса.
//  Отказ, ПараметрыЗаписи - параметры обработчика ПередЗаписью.
//
Процедура ПодтвердитьПереносСрокаПроцесса(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриПодтвержденииПереносаСрокаПроцесса(
		Форма, Отказ, ПараметрыЗаписи, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПереносСрокаПодтвержден") Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Объект.Стартован Или Не Форма.СрокИсполненияПроцессаИзменен Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьДеревоПроцессов", Истина);
	ПараметрыФормы.Вставить("Процесс", Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("НовыйСрокИсполнения", Форма.Объект.СрокИсполненияПроцесса);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПослеПодтвержденияПереносаСрока",
		ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ПодтверждениеПереносаСрока",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Отказ = Истина;
	
КонецПроцедуры

// Продолжение процедуры ПодтвердитьПереносСрокаПроцесса.
//
Процедура ПродолжитьПослеПодтвержденияПереносаСрока(РезультатПодтверждения, ДопПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриПродолженииПослеПодтвержденияПереносаСрока(
		РезультатПодтверждения, ДопПараметры, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПодтверждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ПараметрыЗаписи = ДопПараметры.ПараметрыЗаписи;
	
	ПараметрыЗаписи.Вставить("ПереносСрокаПодтвержден", Истина);
	
	Форма.Записать(ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьФормуПослеЗаписи") Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость подтверждения переноса срока и вызывает диалог подтверждения.
// Предназначена для вызова из обработчика ПередЗаписью формы изменения параметров процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса или шаблона.
//  ОписаниеОповещения - ОписаниеОповещения - оповещение, которое следует выполнить после подтверждения.
//
Процедура ПодтвердитьПереносСрокаПроцессаПриВозвратеНаДоработку(Форма, ОписаниеОповещения) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.
		ПриПодтвержденииПереносаСрокаПроцессаПриВозвратеНаДоработку(
		Форма, ОписаниеОповещения, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СрокИсполненияПроцессаИзменен Тогда
	
		ПараметрыФормы = Новый Структура;
		
		ОткрытьФормуПодтверждения = Ложь;
		
		ПараметрыФормы.Вставить("ПоказыватьДеревоПроцессов", Истина);
		ПараметрыФормы.Вставить("Процесс", Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("НовыйСрокИсполнения", Форма.Объект.СрокИсполненияПроцесса);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", Форма);
		ДопПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьПослеПодтвержденияПереносаСрокаПриВозвратеНаДоработку", ЭтотОбъект, ДопПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеПереносаСрока",
			ПараметрыФормы,
			Форма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Отказ = Истина;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПодтвердитьПереносСрокаПроцессаПриВозвратеНаДоработку.
//
Процедура ПродолжитьПослеПодтвержденияПереносаСрокаПриВозвратеНаДоработку(
	РезультатПодтверждения, ДопПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.
		ПриПродолженииПослеПодтвержденияПереносаСрокаПриВозвратеНаДоработку(
			РезультатПодтверждения, ДопПараметры, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПодтверждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ОписаниеОповещения = ДопПараметры.ОписаниеОповещения;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	
КонецПроцедуры

// Проверяет факт изменения сроков в форме процесса или шаблона.
// И при изменении посылает оповещение с именем "ПереносСрокаИсполненияПроцесса"
// другим формам процессов.
// Предназначена для вызова из обработчика формы ПослеЗаписи.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса или шаблона.
//
Процедура ОповеститьОПереносеСроков(Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриОповещениеОПереносеСроков(
		Форма, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОПереносеСроков = Ложь;
	
	Если Форма.СрокИсполненияПроцессаИзменен = Истина Тогда
		Форма.СрокИсполненияПроцессаИзменен = Ложь;
		Оповестить("ПереносСрокаИсполненияПроцесса", Форма.Объект.Ссылка, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает оповещение "ПереносСрокаИсполненияПроцесса" после
// переноса срока процесса в других формах.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса или шаблона.
//  ИмяСобытия, Параметр, Источник - см. параметры обработчика оповещений формы.
//
Процедура ОбработкаОповещенияПослеПереносаСрока(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ПереносСрокаИсполненияПроцесса" И Форма <> Источник Тогда
		Форма.ОбновитьФормуПослеПереносаСроковИсполнения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_КарточкиПроцессовИШаблонов

// Изменить срок (точную дату или относительный срок) по предствлению.
//
// Параметры:
//  Дата - Дата - срок исполнения датой (точный срок).
//  Дни - Число - относительный срок, дни.
//  Часы - Число - относительный срок, часы.
//  Минуты - Число - относительный срок, минуты.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения - 
//                          вариант установки срока.
//  Представление - Строка - представление срока строкой.
//  ДопПараметры - Структура - структура вспомогательных параметров.
//   * ТекстСообщенияПредупреждения - Строка - возвращаемый текст сообщения/предупреждения в
//                                  случае ошибки.
//   * ВПредставленииМожетБытьДата - Булево - признак того, что в представлении может быть дата.
//
Функция ИзменитьСрокИсполненияПоПредставлению(
	Дата, Дни, Часы, Минуты, ВариантУстановкиСрока, Представление, ДопПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриИзмененииСрокаИсполненияПоПредставлению(
		Дата, Дни, Часы, Минуты, ВариантУстановкиСрока, Представление, ДопПараметры,
		Результат, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если представление пустое, то очищаем все поля сроков
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Дата = Дата(1,1,1);
		Дни = 0;
		Часы = 0;
		Минуты = 0;
		
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Срок задан некорректно.'; en = 'Date (dur.) set incorrectly.'");
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	// Если есть разделитель даты и длительности, тогда разделяем представление на
	// длительность (ПредставлениеДлительности) и дату (ПредставлениеДаты), иначе
	// пытаемся обработать целиком представление и как длительность и как дату.
	Представление = СтрЗаменить(Представление, ")", "");
	ПредставлениеДлительности = Представление;
	ПредставлениеДаты = Представление;
	Если ДопПараметры.ВПредставленииМожетБытьДата Тогда
		Разделитель = "(";
		
		Если СтрНайти(Представление, Разделитель) Тогда
			ЧастиПредставления = СтрРазделить(Представление, Разделитель);
			КоличествоЧастейПредствления = ЧастиПредставления.Количество();
			Если КоличествоЧастейПредствления <> 2 Тогда
				ДопПараметры.ТекстСообщенияПредупреждения = ТекстСообщенияОбОшибке;
				Возврат Ложь;
			КонецЕсли;
			
			Если ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
				ПредставлениеДлительности = СокрЛП(ЧастиПредставления[1]);
				ПредставлениеДаты = СокрЛП(ЧастиПредставления[0]);
			Иначе
				ПредставлениеДлительности = СокрЛП(ЧастиПредставления[0]);
				ПредставлениеДаты = СокрЛП(ЧастиПредставления[1]);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Определяем дату по представлению.
	НоваяДата = Дата(1,1,1);
	Если ДопПараметры.ВПредставленииМожетБытьДата Тогда
		НоваяДата = СрокиИсполненияПроцессовКлиентСервер.ДатаПоПредставлению(ПредставлениеДаты);
	КонецЕсли;
	
	// Определяем длительность по представлению.
	Длительность = 
		СрокиИсполненияПроцессовКлиентСервер.ДлительностьПоПредставлению(ПредставлениеДлительности);
	
	// Если по представлению не удалось определить ни длительность
	// ни дату, то выводим сообщение об ошибке.
	Если Не ЗначениеЗаполнено(Длительность) И Не ЗначениеЗаполнено(НоваяДата) Тогда
		ДопПараметры.ТекстСообщенияПредупреждения = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	// Если удалось определить и длительность и дату,
	// и они все отличаются от предыдущих значений, тогда выводим ошибку.
	// Измененным может быть либо длительность, либо дата.
	Если ЗначениеЗаполнено(Длительность)
		И (Дни <> Длительность.Дни Или Часы <> Длительность.Часы Или Минуты <> Длительность.Минуты)
		И ЗначениеЗаполнено(НоваяДата)
		И Дата <> НоваяДата Тогда
		
		ДопПараметры.ТекстСообщенияПредупреждения = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ДопПараметры.Форма.ИспользоватьДатуИВремяВСрокахЗадач;
	
	// Установка срока исполнения по новой дате
	Если ЗначениеЗаполнено(НоваяДата) И Дата <> НоваяДата Тогда
		
		ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок;
		
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			Дата = НоваяДата;
		Иначе
			Дата = Дата(Год(НоваяДата), Месяц(НоваяДата), День(НоваяДата));
			Дата = КонецДня(Дата);
		КонецЕсли;
		
		Дни = 0;
		Часы = 0;
		Минуты = 0;
		
	// Установка срока исполнения по новой длительности
	ИначеЕсли ЗначениеЗаполнено(Длительность)
		И (Длительность.Дни <> Дни
			Или Длительность.Часы <> Часы
			Или Длительность.Минуты <> Минуты) Тогда
		
		ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
		
		Дни = Длительность.Дни;
		Часы = Длительность.Часы;
		Минуты = Длительность.Минуты;
		
		Если Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
			Часы = 0;
			Минуты = 0;
		КонецЕсли;
		
		Дата = Дата(1,1,1);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//////////////////////////////
// Проверка корректности сроков исполнения процессов

// Проверяет корректность заполнения сроков в карточке процессе перед стартом.
// При некорректном заполнении задается вопрос пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса.
//  Процесс - ДанныеФормыСтруктура,
//            Структура - процесс в форме или структура сроков процесса.
//  ПараметрыЗаписи - Структура - параметры записи обработки ПередЗаписью.
//  Отказ - Булево - Помещается Истина, если задается вопрос.
//  ОписаниеОповещения - ОписаниеОповещения - если заполнено, то выполняется вместо стандартной
//                       обработки проверки корректности заполнения сроков при старте из карточки процесса.
//
Процедура ПроверитьКорректностьЗаполненияСроковПередСтартом(
	Форма, Процесс, ПараметрыЗаписи, Отказ, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ПараметрыЗаписи.Свойство("СтартоватьСНекорректнымиСроками") Тогда
		Возврат;
	КонецЕсли;
	
	ТочныеСрокиПроцесса = ТочныеСрокиПроцесса(Процесс);
	
	ЕстьЗаполненныеСроки = Ложь;
	ЕстьНеЗаполненныеСроки = Ложь;
	ЕстьСрокиМеньшеТекущейДаты = Ложь;
	
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого Срок Из ТочныеСрокиПроцесса Цикл
		
		Если ЗначениеЗаполнено(Срок) Тогда
			ЕстьЗаполненныеСроки = Истина;
		Иначе
			ЕстьНеЗаполненныеСроки = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Срок < ТекущаяДата Тогда
			ЕстьСрокиМеньшеТекущейДаты = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если сроки участников в процессе не заполнены, то ничего не делаем.
	Если Не ЕстьЗаполненныеСроки Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОповещения = Неопределено Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьСтартПослеПроверкиКорректностиЗаполненияСроков",
			ЭтотОбъект,
			ПараметрыОповещения);
	КонецЕсли;
		
	ТекстыВопросов = ТекстыВопросовДляПроверкиКорректностиЗаполненияСроков(Процесс);
		
	КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
	
	ЗаголовокВопроса = НСтр("ru = 'Запуск процесса'; en = 'Process start'");
	
	Если ЕстьНеЗаполненныеСроки Тогда
		
		// Если в процессе есть незаполненные сроки, то задаем вопрос.
		Отказ = Истина;
		ТекстВопроса = ТекстыВопросов.ПриНеЗаполненныхСроках;
		
	ИначеЕсли ЕстьСрокиМеньшеТекущейДаты Тогда
		
		// Если все сроки определены и некоторые из них меньше текущей даты, то
		// задаем вопрос.
		Отказ = Истина;
		ТекстВопроса = ТекстыВопросов.ПриИстекшихСрока;
		
	ИначеЕсли Процесс.Свойство("СрокИсполненияПроцесса")
		И Не ЗначениеЗаполнено(Процесс.СрокИсполненияПроцесса) Тогда
		
		// Если срок процесса не определен, то задаем вопрос.
		Отказ = Истина;
		ТекстВопроса = ТекстыВопросов.ПриНеОпределенномСрокеПроцесса;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,, ЗаголовокВопроса);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры
//   ПроверитьКорректностьЗаполненияСроковПередСтартом
Процедура ПродолжитьСтартПослеПроверкиКорректностиЗаполненияСроков(
	Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("СтартоватьСНекорректнымиСроками", Истина);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);
	ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписи);
	
	Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	
КонецПроцедуры

//////////////////////////////
// Сроки участников процесса

// Возвращает структуру доп. параметров для изменения срока по представлению.
// Может быть переопределена в процедуре 
// СрокиИсполненияПроцессовКлиентПереопределяемый.ПриФормированииДопПараметровДляИзмененияСрокаПоПредставлению.
//
// Возвращаемое значение:
//  Структура
//   * Форма - УправляемаяФорма - форма процесса или шаблона.
//   * Поле - Строка - наименования элемент управления сроком исполнения.
//   * НаименованиеИзмененногоРеквизита - Строка - наименование измененного реквизита.
//     ...
//
Функция ДопПараметрыДляИзмененияСрокаПоПредставлению() Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.
		ПриФормированииДопПараметровДляИзмененияСрокаПоПредставлению(
			Параметры, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("Поле", "");
	Параметры.Вставить("НаименованиеИзмененногоРеквизита", "");
	
	Возврат Параметры;
	
КонецФункции

// Изменяет срок исполнения (точный или относительный) по представлению.
//
// Параметры:
//  Дата - Дата - срок исполнения датой (точный срок).
//  Дни - Число - относительный срок, дни.
//  Часы - Число - относительный срок, часы.
//  Минуты - Число - относительный срок, минуты.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения - 
//                          вариант установки срока.
//  Представление - Строка - представление срока строкой.
//  ДопПараметры - Структура - см. ДопПараметрыДляИзмененияСрокаПоПредставлению.
//
Процедура ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
	Дата, Дни, Часы, Минуты, ВариантУстановкиСрока, Представление, ДопПараметры) Экспорт
	
	ДопПараметры.Вставить("ТекстСообщенияПредупреждения", "");
	
	ВПредставленииМожетБытьДата = ЗначениеЗаполнено(ДопПараметры.Форма.ДатаОтсчетаДляРасчетаСроков)
		И (ДопПараметры.Форма.ВозможенВыборТочнойДатыВСроках);
	
	ДопПараметры.Вставить("ВПредставленииМожетБытьДата", ВПредставленииМожетБытьДата);
	
	Если ИзменитьСрокИсполненияПоПредставлению(
		Дата, Дни, Часы, Минуты,ВариантУстановкиСрока, Представление, ДопПараметры) Тогда
		
		// Определяем представление по относительному сроку
		Представление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			Дата, Дни, Часы, Минуты,
			ДопПараметры.Форма.ИспользоватьДатуИВремяВСрокахЗадач, ВариантУстановкиСрока);
			
		ДопПараметры.Форма.ОбновитьСрокиИсполненияОтложенно(
			ДопПараметры.НаименованиеИзмененногоРеквизита);
		
		ДопПараметры.Форма.Модифицированность = Истина;
		
		Если ЗначениеЗаполнено(ДопПараметры.ТекстСообщенияПредупреждения) Тогда
			ПоказатьПредупреждение(, ДопПараметры.ТекстСообщенияПредупреждения);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ДопПараметры.ТекстСообщенияПредупреждения,,
			ДопПараметры.Поле);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры для выбора срока исполнения участника процесса.
//
// Может быть переопределена в процедуре 
// СрокиИсполненияПроцессовКлиентПереопределяемый.ПриФормированииПараметровВыбораСрокаУчастникаПроцесса.
//
// Возвращаемое значение:
//  Структура - параметры для выбора срока.
//   * Форма - УправляемаяФорма - форма процесса или шаблона.
//   * ИмяРеквизитаСрокИсполнения - Строка
//   * ИмяРеквизитаСрокИсполненияДни - Строка
//   * ИмяРеквизитаСрокИсполненияЧасы - Строка
//   * ИмяРеквизитаСрокИсполненияМинуты - Строка
//   * ИмяРеквизитаВариантУстановкиСрока - Строка
//   * ИмяРеквизитаПредставлениеСрока - Строка
//   * ИмяОбъектаФормы - Строка
//   * СрокиПредшественников - Дата, ДанныеФормыКоллекция
//   * НаименованиеСрокаУчастника - Строка
//
Функция ПараметрыВыбораСрокаУчастникаПроцесса() Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.
		ПриФормированииПараметровВыбораСрокаУчастникаПроцесса(
			Параметры, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("ИмяРеквизитаСрокИсполнения");
	Параметры.Вставить("ИмяРеквизитаСрокИсполненияДни");
	Параметры.Вставить("ИмяРеквизитаСрокИсполненияЧасы");
	Параметры.Вставить("ИмяРеквизитаСрокИсполненияМинуты");
	Параметры.Вставить("ИмяРеквизитаВариантУстановкиСрока");
	Параметры.Вставить("ИмяРеквизитаПредставлениеСрока");
	Параметры.Вставить("ИмяОбъектаФормы");
	Параметры.Вставить("СрокиПредшественников");
	Параметры.Вставить("НаименованиеСрокаУчастника");
	
	Возврат Параметры;
	
КонецФункции

// Открывает форму выбора срока для текущей строки таблицы Исполнители
//
// Параметры:
//  Параметры - Структура - см. ПараметрыВыбораСрокаУчастникаПроцесса
//
Процедура ВыбратьСрокУчастникаПроцесса(Параметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриВыбореСрокаУчастникаПроцесса(
		Параметры, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Форма.ДатаОтсчетаДляРасчетаСроков)
		Или Параметры.Форма.ТекущийЭлемент.КнопкаВыбора = Ложь Тогда
		
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = Параметры.Форма.ДатаОтсчетаДляРасчетаСроков;
	Если ТипЗнч(Параметры.СрокиПредшественников) = Тип("ДанныеФормыКоллекция") Тогда
		Для Каждого СтрокаСрок Из Параметры.СрокиПредшественников Цикл
			ДатаОтсчета = Макс(ДатаОтсчета, СтрокаСрок.СрокИсполнения);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Параметры.СрокиПредшественников) = Тип("Дата") Тогда
		ДатаОтсчета = Макс(ДатаОтсчета, Параметры.СрокиПредшественников);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьВыборСрокаУчастникаПроцесса", ЭтотОбъект, Параметры);
	
	ПараметрыФормы = Новый Структура;
	
	ОбъектФормы = Параметры.Форма;
	Если ЗначениеЗаполнено(Параметры.ИмяОбъектаФормы) Тогда
		ОбъектФормы = Параметры.Форма[Параметры.ИмяОбъектаФормы];
	КонецЕсли;
	ПараметрыФормы.Вставить("СрокИсполнения", ОбъектФормы[Параметры.ИмяРеквизитаСрокИсполнения]);
	ПараметрыФормы.Вставить("ДатаОтсчета", ДатаОтсчета);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, Параметры.Форма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// см. процедуруе ВыбратьСрокУчастникаПроцесса
Процедура ЗавершитьВыборСрокаУчастникаПроцесса(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ИмяОбъектаФормы = ДопПараметры.ИмяОбъектаФормы;
	ИмяРеквизитаСрокИсполнения = ДопПараметры.ИмяРеквизитаСрокИсполнения;
	ИмяРеквизитаСрокИсполненияДни = ДопПараметры.ИмяРеквизитаСрокИсполненияДни;
	ИмяРеквизитаСрокИсполненияЧасы = ДопПараметры.ИмяРеквизитаСрокИсполненияЧасы;
	ИмяРеквизитаСрокИсполненияМинуты = ДопПараметры.ИмяРеквизитаСрокИсполненияМинуты;
	ИмяРеквизитаВариантУстановкиСрока = ДопПараметры.ИмяРеквизитаВариантУстановкиСрока;
	ИмяРеквизитаПредставлениеСрока = ДопПараметры.ИмяРеквизитаПредставлениеСрока;
	НаименованиеСрокаУчастника = ДопПараметры.НаименованиеСрокаУчастника;
	
	ОбъектФормы = Форма;
	Если ЗначениеЗаполнено(ИмяОбъектаФормы) Тогда
		ОбъектФормы = Форма[ИмяОбъектаФормы];
	КонецЕсли;
	
	ВариантыУстановкиСрокаИсполнения = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ОбъектФормы[ИмяРеквизитаСрокИсполнения] = РезультатВыбора;
	ОбъектФормы[ИмяРеквизитаСрокИсполненияДни] = 0;
	ОбъектФормы[ИмяРеквизитаСрокИсполненияЧасы] = 0;
	ОбъектФормы[ИмяРеквизитаСрокИсполненияМинуты] = 0;
	ОбъектФормы[ИмяРеквизитаВариантУстановкиСрока] = ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	
	Форма[ИмяРеквизитаПредставлениеСрока] = 
		СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			РезультатВыбора, 0, 0, 0, Форма.ИспользоватьДатуИВремяВСрокахЗадач,
			ВариантыУстановкиСрокаИсполнения.ТочныйСрок);
	
	Форма.ОбновитьСрокиИсполненияОтложенно(НаименованиеСрокаУчастника);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Изменяет относительный срок (дни, часы, минуты) участника процесса.
// Если задана отрицательное значение параметра Длительность, то срок уменьшается.
//
// Параметры:
//   Форма - УправляемаяФорма - форма процесса или шаблона процесса
//   Длительность - Число - значение, на которое необходимо увеличить срок
//
Процедура ИзменитьОтносительныйСрокУчастникаПроцесса(Форма, Дата, Дни, Часы, Минуты,
	Представление, ВариантУстановкиСроков, Длительность,
	НаименованиеИзмененногоРеквизита = "") Экспорт
	
	ИзменитьОтносительныйСрок(Дни, Часы, Минуты, Длительность);
	
	ВариантыУстановкиСроков = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ВариантУстановкиСроков = ВариантыУстановкиСроков.ОтносительныйСрок;
	
	// Определяем представление по относительному сроку
	Представление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
		Дата, Дни, Часы, Минуты, Форма.ИспользоватьДатуИВремяВСрокахЗадач, ВариантУстановкиСроков);
	
	Форма.ОбновитьСрокиИсполненияОтложенно(НаименованиеИзмененногоРеквизита);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

//////////////////////////////
// Сроки в таблице Исполнители

// Изменяет срок исполнения в текущей строке таблицы Исполнители
// по представлению.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса или шаблона процесса
//  ЭлементИсполнители - ТаблицаФормы - элемент формы таблица исполнителей.
//  РеквизитИсполнители - ДанныеФормыКоллекция - таблица исполнителей процесса.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//
Процедура ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
	Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.
		ПриИзмененииСрокаИсполненияПоПредставлениюВТаблицеИсполнители(
			Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстСообщенияПредупреждения", "");
	
	ВПредставленииМожетБытьДата = ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков)
		И (Форма.ВозможенВыборТочнойДатыВСроках);
		
	Параметры.Вставить("ВПредставленииМожетБытьДата", ВПредставленииМожетБытьДата);
	Параметры.Вставить("Форма", Форма);
	
	РезультатЗаполнения = ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.СрокИсполнения,
		ТекущиеДанные.СрокИсполненияДни,
		ТекущиеДанные.СрокИсполненияЧасы,
		ТекущиеДанные.СрокИсполненияМинуты,
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения,
		ТекущиеДанные.СрокИсполненияПредставление,
		Параметры);
		
	Если РезультатЗаполнения Тогда
		
		ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
			РеквизитИсполнители, ТекущиеДанные, ВариантИсполнения);
			
		Форма.ЗаполнитьПредставлениеСроковИсполнения();
		
		ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
		
		Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
		
		Если ЗначениеЗаполнено(Параметры.ТекстСообщенияПредупреждения) Тогда
			ПоказатьПредупреждение(, Параметры.ТекстСообщенияПредупреждения);
		КонецЕсли;
		
	Иначе
		
		ТекущееПоле = СтрШаблон("Объект.Исполнители[%1].СрокИсполненияПредставление",
			ТекущиеДанные.НомерСтроки - 1);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.ТекстСообщенияПредупреждения,,
			ТекущееПоле);
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Открывает форму выбора срока для текущей строки таблицы Исполнители
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса или шаблона процесса
//  ЭлементИсполнители - ТаблицаФормы - элемент формы таблица исполнителей.
//  РеквизитИсполнители - ДанныеФормыКоллекция - таблица исполнителей процесса.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//
Процедура ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
	Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриВыбореСрокаИсполненияДляСтрокиТаблицыИсполнители(
		Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков)
		Или ЭлементИсполнители.ТекущийЭлемент.КнопкаВыбора = Ложь Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	НомерСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные) + 1;
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	ДатаОтсчета = Форма.ДатаОтсчетаДляРасчетаСроков;
	
	Если ВариантИсполнения = ВариантыМаршуртизацииЗадач.Последовательно И НомерСтроки <> 1 Тогда
		
		ИндексПредыдущейСтроки = НомерСтроки - 2;
		ПредыдущаяСтрока = РеквизитИсполнители[ИндексПредыдущейСтроки];
		
		Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(ПредыдущаяСтрока) Тогда
			ДатаОтсчета = ПредыдущаяСтрока.СрокИсполнения;
		КонецЕсли;
		
	ИначеЕсли ВариантИсполнения = ВариантыМаршуртизацииЗадач.Смешанно Тогда
		
		Если ТекущиеДанные.Свойство("ПорядокСогласования") Тогда
			ИмяПоляПорядокИсполнения = "ПорядокСогласования";
		Иначе
			ИмяПоляПорядокИсполнения = "ПорядокИсполнения";
		КонецЕсли;
		
		МаксимальныйСрокЭтапа = Дата(1,1,1);
		
		НомерПервойСтрокиИсполнителя = 1;
		
		ВариантыПорядкаВыполненияЗадач = 
			РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
		
		Для Каждого СтрИсполнитель Из РеквизитИсполнители Цикл
			
			// Определим строку ответственного исполнителя и пропустим ее обработку.
			Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(СтрИсполнитель) Тогда
				НомерПервойСтрокиИсполнителя = 2;
				Продолжить;
			КонецЕсли;
			
			СтрИсполнительНомерСтроки = РеквизитИсполнители.Индекс(СтрИсполнитель) + 1;
			
			Если СтрИсполнитель[ИмяПоляПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего
				И СтрИсполнительНомерСтроки <> НомерПервойСтрокиИсполнителя Тогда
				
				ДатаОтсчета = Макс(МаксимальныйСрокЭтапа, ДатаОтсчета);
				МаксимальныйСрокЭтапа = Дата(1,1,1);
			КонецЕсли;
			
			Если СтрИсполнительНомерСтроки = НомерСтроки Тогда
				Прервать;
			КонецЕсли;
			
			МаксимальныйСрокЭтапа = Макс(СтрИсполнитель.СрокИсполнения, МаксимальныйСрокЭтапа);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("ВариантИсполнения", ВариантИсполнения);
	ДопПараметры.Вставить("ЭлементИсполнители", ЭлементИсполнители);
	ДопПараметры.Вставить("РеквизитИсполнители", РеквизитИсполнители);
	ДопПараметры.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьВыборСрокаИсполненияДляСтрокиТаблицыИсполнители", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СрокИсполнения", ТекущиеДанные.СрокИсполнения);
	ПараметрыФормы.Вставить("ДатаОтсчета", ДатаОтсчета);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// см. ВыбратьСрокИсполненияДляИсполнителей
//
Процедура ЗавершитьВыборСрокаИсполненияДляСтрокиТаблицыИсполнители(
	РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	ВариантыУстановкиСрокаИсполнения = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	ВариантИсполнения = ДопПараметры.ВариантИсполнения;
	Форма = ДопПараметры.Форма;
	ЭлементИсполнители = ДопПараметры.ЭлементИсполнители;
	РеквизитИсполнители = ДопПараметры.РеквизитИсполнители;
	
	ТекущиеДанные.СрокИсполнения = РезультатВыбора;
	
	ТекущиеДанные.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	
	ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
		РеквизитИсполнители, ТекущиеДанные, ВариантИсполнения);
		
	Форма.ЗаполнитьПредставлениеСроковИсполнения();
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Изменяет относительный срок (дни, часы, минуты) в текущей строке таблицы Исполнители
// по представлению.
//
// Если задана отрицательное значение параметра Длительность, то срок уменьшается.
//
// Параметры:
//   Форма - УправляемаяФорма - форма процесса или шаблона процесса
//   Длительность - Число - значение, на которое необходимо увеличить срок
//
Процедура ИзменитьСрокИсполненияВТаблицеИсполнители(
	Форма, ЭлементИсполнители, РеквизитИсполнители,
	Длительность, ВариантИсполнения = Неопределено) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	ИзменитьОтносительныйСрок(
		ТекущиеДанные.СрокИсполненияДни,
		ТекущиеДанные.СрокИсполненияЧасы,
		ТекущиеДанные.СрокИсполненияМинуты,
		Длительность);
		
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
		
	ТекущиеДанные.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	
	ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
		РеквизитИсполнители, ТекущиеДанные, ВариантИсполнения);
		
	Форма.ЗаполнитьПредставлениеСроковИсполнения();
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Заполняет в новой строке исполнителя сроки в зависимости от варианта маршрутизации
//
Процедура ЗаполнитьСрокВНовойСтрокеТаблицыИсполнители(
	НоваяСтрока, ТаблицаИсполнители, ВариантМаршрутизацииЗадач, ИспользоватьДатуИВремяВСрокахЗадач) Экспорт
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	Если ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Смешанно
		Или ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Последовательно Тогда
		
		НоваяСтрока.СрокИсполненияДни = 1;
		НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
			ПредопределенноеЗначение("Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
	Иначе
		
		Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(ТаблицаИсполнители[0]) Тогда
			ИндексПервойСтроки = 1;
		Иначе
			ИндексПервойСтроки = 0;
		КонецЕсли;
		
		СтрПервогоИсполнителя = ТаблицаИсполнители[ИндексПервойСтроки];
		
		Если СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения =
			ПредопределенноеЗначение("Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок") Тогда
			
			НоваяСтрока.СрокИсполнения = СтрПервогоИсполнителя.СрокИсполнения;
		Иначе
			НоваяСтрока.СрокИсполненияДни = СтрПервогоИсполнителя.СрокИсполненияДни;
			НоваяСтрока.СрокИсполненияЧасы = СтрПервогоИсполнителя.СрокИсполненияЧасы;
			НоваяСтрока.СрокИсполненияМинуты = СтрПервогоИсполнителя.СрокИсполненияМинуты;
		КонецЕсли;
		
		НоваяСтрока.ВариантУстановкиСрокаИсполнения = СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения;
		
	КонецЕсли;
	
	НоваяСтрока.СрокИсполненияПредставление = 
		СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			НоваяСтрока.СрокИсполнения,
			НоваяСтрока.СрокИсполненияДни,
			НоваяСтрока.СрокИсполненияЧасы,
			НоваяСтрока.СрокИсполненияМинуты,
			ИспользоватьДатуИВремяВСрокахЗадач,
			НоваяСтрока.ВариантУстановкиСрокаИсполнения);
	
КонецПроцедуры

// Заполняет сроки исполнения в таблице Исполнители процесса по строке исполнителя.
//
// Параметры:
//   Исполнители - ДанныеФормыКоллекция - таблица исполнителей
//   СтрокаИсполнителя - ДанныеФормыЭлементКоллекции - строка таблицы Исполнители.
//   ВариантМаршрутизацииЗадач - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач
//
Процедура ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
	Исполнители, СтрокаИсполнителя, ВариантМаршрутизацииЗадач) Экспорт
	
	КоличествоИсполнителей = Исполнители.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(СтрокаИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	ВариантыУстановкиСрокаИсполнения = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ВариантыПорядкаВыполненияЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
	
	Если ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Последовательно
		Или ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Смешанно Тогда
		
		СтрокиДляОбновления = Новый Массив;
		
		ИдексТекущейСтроки = Исполнители.Индекс(СтрокаИсполнителя);
		
		ТекущаяСтрока = СтрокаИсполнителя;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПорядокСогласования", Неопределено);
		СтруктураПоиска.Вставить("ПорядокИсполнения", Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		
		Если СтруктураПоиска.ПорядокСогласования <> Неопределено Тогда
			ИмяРеквизитаПорядокИсполнения = "ПорядокСогласования";
		Иначе
			ИмяРеквизитаПорядокИсполнения = "ПорядокИсполнения";
		КонецЕсли;
		
		СтрокиДляОбновления.Добавить(ТекущаяСтрока);
		
		ИдексТекущейСтроки = ИдексТекущейСтроки + 1;
		ДобавлятьВсеСледующиеСтроки = Ложь;
		Пока ИдексТекущейСтроки <= КоличествоИсполнителей - 1 Цикл
			
			ТекущаяСтрока = Исполнители[ИдексТекущейСтроки];
			
			Если ТекущаяСтрока[ИмяРеквизитаПорядокИсполнения] = 
				ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего Тогда
				
				ДобавлятьВсеСледующиеСтроки = Истина;
			КонецЕсли;
			
			Если ДобавлятьВсеСледующиеСтроки Тогда
				СтрокиДляОбновления.Добавить(ТекущаяСтрока);
			КонецЕсли;
			
			ИдексТекущейСтроки = ИдексТекущейСтроки + 1;
			
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из СтрокиДляОбновления Цикл
			Если ТекущаяСтрока.ВариантУстановкиСрокаИсполнения = 
				ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
				
				ТекущаяСтрока.СрокИсполненияДни = 0;
				ТекущаяСтрока.СрокИсполненияЧасы = 0;
				ТекущаяСтрока.СрокИсполненияМинуты = 0;
			Иначе
				ТекущаяСтрока.СрокИсполнения = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ИндексПервойСтроки = 0;
		
		Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(Исполнители[0]) Тогда
			ИндексПервойСтроки = 1;
		КонецЕсли;
		
		ВариантУстановкиСрокаИсполнения = СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения;
		
		Если ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			СрокИсполнения = СтрокаИсполнителя.СрокИсполнения;
			СрокИсполненияДни = 0;
			СрокИсполненияЧасы = 0;
			СрокИсполненияМинуты = 0;
		Иначе
			СрокИсполнения = Дата(1,1,1);
			СрокИсполненияДни = СтрокаИсполнителя.СрокИсполненияДни;
			СрокИсполненияЧасы = СтрокаИсполнителя.СрокИсполненияЧасы;
			СрокИсполненияМинуты = СтрокаИсполнителя.СрокИсполненияМинуты;
		КонецЕсли;
		
		Для ИдексТекущейСтроки = ИндексПервойСтроки По КоличествоИсполнителей - 1 Цикл
			ТекущаяСтрока = Исполнители[ИдексТекущейСтроки];
			ТекущаяСтрока.СрокИсполнения = СрокИсполнения;
			ТекущаяСтрока.СрокИсполненияДни = СрокИсполненияДни;
			ТекущаяСтрока.СрокИсполненияЧасы = СрокИсполненияЧасы;
			ТекущаяСтрока.СрокИсполненияМинуты = СрокИсполненияМинуты;
			ТекущаяСтрока.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрокаИсполнения;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КарточкиПроцессовИШаблонов

// Меняет относительный срок (дни, часы, минуты), добавляя переданную длительность.
// Если заполнены минуты, то меняются только минуты.
// Если минут нет и заполнены часы, то меняются только часы.
// Если заполнены только дни, то меняются только они.
//
// Параметры:
//  Дни, Часы, Минуты - Число - срок в днях, часах и минутах.
//  Длительность - Число - добавляемая длительность (1 или -1).
//                 Для уменьшения срока используется "-1", для увеличения "1".
//
Процедура ИзменитьОтносительныйСрок(Дни, Часы, Минуты, Длительность)
	
	Если ЗначениеЗаполнено(Минуты) Тогда
		Минуты = Минуты + Длительность;
	ИначеЕсли ЗначениеЗаполнено(Часы) Тогда
		Часы = Часы + Длительность;
	Иначе
		Дни = Дни + Длительность;
	КонецЕсли;
	
	Если Минуты > 59 Тогда
		Минуты = Минуты - 60;
		Часы = Часы + 1;
	КонецЕсли;
	
	Если Часы > 23 Тогда
		Часы = Часы - 23;
		Дни = Дни + 1;
	КонецЕсли;
	
	Если Дни > 999 Тогда
		Дни = 999;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////
// Проверка корректности сроков исполнения процессов

// Возвращает массив сроков участников или действий процесса.
//
// Может быть переопределена в процедуре
// СрокиИсполненияПроцессовКлиентПереопределяемый.ПриФормированииТочныхСроковПроцесса.
//
// Параметры:
//  Процесс - ДанныеФормыСтруктура, Структура - процесс в форме или структура сроков процесса.
//
// Возвращаемое значение:
//  Массив
//   * Дата
//
Функция ТочныеСрокиПроцесса(Процесс)
	
	ТочныеСрокиПроцесса = Новый Массив;
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовКлиентПереопределяемый.ПриФормированииТочныхСроковПроцесса(
		Процесс, ТочныеСрокиПроцесса, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ТочныеСрокиПроцесса;
	КонецЕсли;
	
	Если Процесс.Свойство("Исполнители") Тогда
		Для Каждого СтрокаИсполнитель Из Процесс.Исполнители Цикл
			ТочныеСрокиПроцесса.Добавить(СтрокаИсполнитель.СрокИсполнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Процесс.Свойство("СрокИсполнения") Тогда
		ТочныеСрокиПроцесса.Добавить(Процесс.СрокИсполнения);
	КонецЕсли;
	
	Если Процесс.Свойство("СрокОбработкиРезультатов")
		И (Не Процесс.Свойство("Проверяющий") Или ЗначениеЗаполнено(Процесс.Проверяющий)) Тогда
		
		ТочныеСрокиПроцесса.Добавить(Процесс.СрокОбработкиРезультатов);
	КонецЕсли;
	
	Если Процесс.Свойство("Шаблоны") Тогда
		Для Каждого СтрокаШаблон Из Процесс.Шаблоны Цикл
			ТочныеСрокиПроцесса.Добавить(СтрокаШаблон.СрокИсполненияПроцесса);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТочныеСрокиПроцесса;
	
КонецФункции

// Возвращает тексты вопросов для проверки корректности заполнения сроков.
//
// Параметры:
//  Процесс - ДанныеФормыСтруктура, Структура - процесс в форме или структура сроков процесса.
//
// Возвращаемое значение:
//  Структура
//   * ПриНеЗаполненныхСроках
//   * ПриИстекшихСрока
//   * ПриНеОпределенномСрокеПроцесса
//
Функция ТекстыВопросовДляПроверкиКорректностиЗаполненияСроков(Процесс)
	
	ТекстыВопросов = Новый Структура;
	ТекстыВопросов.Вставить("ПриНеЗаполненныхСроках");
	ТекстыВопросов.Вставить("ПриИстекшихСрока");
	ТекстыВопросов.Вставить("ПриНеОпределенномСрокеПроцесса");
	
	ТекстыВопросов.ПриНеОпределенномСрокеПроцесса =
			НСтр("ru = 'Срок процесса не определен. Запустить процесс?'; en = 'Process due date is not defined. Start the process?'");
	
	ЭтоСоставнойПроцесс = Не Процесс.Свойство("Исполнители")
		И Не Процесс.Свойство("СрокИсполнения")
		И Не Процесс.Свойство("СрокОбработкиРезультатов");
	
	Если ЭтоСоставнойПроцесс Тогда
		ТекстыВопросов.ПриНеЗаполненныхСроках =
			НСтр("ru = 'Сроки некоторых действий не определены. Запустить процесс?'; en = 'Due dates of some actions are not defined. Start the process?'");
		ТекстыВопросов.ПриИстекшихСрока =
			НСтр("ru = 'Сроки некоторых действий уже истекли. Запустить процесс?'; en = 'Due dates of some actions are already overdue. Start the process?'");
	Иначе
		ТекстыВопросов.ПриНеЗаполненныхСроках =
			НСтр("ru = 'Некоторые сроки не указаны. Запустить процесс?'; en = 'Some dates are not specified. Start the process?'");
		ТекстыВопросов.ПриИстекшихСрока =
			НСтр("ru = 'Некоторые сроки процесса уже истекли. Запустить процесс?'; en = 'Some dates of the process are already overdue. Start the process?'");
	КонецЕсли;
	
	Возврат ТекстыВопросов;
	
КонецФункции

#КонецОбласти
