
#Область ПрограммныйИнтерфейс

#Область ОбработчикиПодписокНаСобытия

// Обработчик подписки ОбменСМобильнымиПередЗаписьюФайла
Процедура ОбменСМобильнымиПередЗаписьюФайлаПередЗаписью(Источник, Отказ) Экспорт

	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.Ссылка, "ВладелецФайла, Наименование, ТекущаяВерсияДатаСоздания");

	Источник.ДополнительныеСвойства.Вставить("ВладелецФайла", РеквизитыФайла.ВладелецФайла);
	Источник.ДополнительныеСвойства.Вставить("Наименование", РеквизитыФайла.Наименование);
	Источник.ДополнительныеСвойства.Вставить("ТекущаяВерсияДатаСоздания", РеквизитыФайла.ТекущаяВерсияДатаСоздания);

КонецПроцедуры

// Обработчик подписки ОбменСМобильнымиПриЗаписиФайла
Процедура ОбменСМобильнымиПриЗаписиФайлаПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ВладелецФайла = Источник.ДополнительныеСвойства.ВладелецФайла
		И Источник.Наименование = Источник.ДополнительныеСвойства.Наименование
		И Источник.ТекущаяВерсияДатаСоздания = Источник.ДополнительныеСвойства.ТекущаяВерсияДатаСоздания Тогда
		Возврат;
	КонецЕсли;

	УзелОбменаДляРегистрацииВсехДанных = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзелДляРегистрацииДанных();
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, Источник);

КонецПроцедуры

#КонецОбласти

#Область РаботаССообщениямиОбмена

// Выполняет запуск фонового задания обработки данных с мобильного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  ИмяМетода       - Строка - Имя метода который будет запущен как фоновое задание.
//
Процедура ЗапуститьФоновоеЗаданиеОбработкиДанных(МобильныйКлиент, ИмяМетода) Экспорт

	// В клиент-серверном варианте и в файловом 8.3 сообщение принимается и готовится в 
	// фоновом задании. Это позволяет избежать таймаутов на стороне мобильного клиента, 
	// т.к. сообщение может долго приниматься и готовиться.

	СтруктураОтбора = Новый Структура("Наименование", МобильныйКлиент.Код);
	МассивЗаданий   = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);

	ЕстьАктивноеЗадание = Ложь;
	Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл

		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ЕстьАктивноеЗадание = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если Не ЕстьАктивноеЗадание Тогда

		// Создание в очереди сообщений нового сообщения с процентом готовности 0.
		// Это сообщение будет наполнять запускаемое фоновое задание
		ИсходящееСообщение = СоздатьНовоеСообщение(МобильныйКлиент);

		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(МобильныйКлиент);
		МассивПараметров.Добавить(ИсходящееСообщение);

		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			ИмяМетода, 
			МассивПараметров, 
			Новый УникальныйИдентификатор(),// уникальный идентификатор фонового задания
			МобильныйКлиент.Код); // наименование фонового задания

	КонецЕсли;

КонецПроцедуры

// Создание нового сообщения интегрированных систем и помещение его в очередь. У сообщения 
// устанавливается признак того, что оно находится в стадии подготовки (процент готовности = 0).
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщенияИнтегрированныхСистем - Ссылка на сообщение.
//
Функция СоздатьНовоеСообщение(МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	Сообщение.Входящее = Ложь;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();

	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(
		МобильныйКлиент,
		Сообщение);

	// Установка у сообщения степени готовности 0%
	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
		Сообщение, 0);

	Возврат Сообщение.Ссылка;

КонецФункции

// Получает массив еще не обработанных входящих сообщений от указанного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
// 
// Возвращаемое значение:
//  Массив - Необработанные входящие сообщения.
//
Функция ПолучитьВходящиеНеобработанныеСообщения(МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|ГДЕ
		|	СообщенияИнтегрированныхСистем.Входящее = ИСТИНА
		|	И СообщенияИнтегрированныхСистем.ДатаОбработки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
		|	И СообщенияИнтегрированныхСистем.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// Вычисляет формат сообщения обмена от клиента и выполняет обработку сообщения в соответствии
//  с версией формата.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  Сообщение		 - СправочникСсылка.СообщенияИнтегрированныхСистем - Ссылка на входящее сообщение;
//  ВерсияКлиента	 - Строка - Версия формат обмена.
// 
// Возвращаемое значение:
//  Булево - Истина, если сообщение обработано.
//
Функция ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение, ВерсияКлиента = Неопределено) Экспорт

	Данные = Сообщение.ДанныеСообщения.Получить();
	Если Данные = Неопределено Или ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

	Данные.Записать(ИмяВременногоФайла);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();

	// для DMX читаем запрашиваемую версию данных
	ВерсияКлиента = ЧтениеXML.ПолучитьАтрибут("Version");

	ЧтениеXML.Прочитать(); // пропуск тэга Message

	Если Не ВерсияКлиента = Неопределено Тогда
		Версия = "DMX";
	Иначе
		Версия = "";
	КонецЕсли;

	ЧтениеXML.Закрыть();

	Если Версия = "DMX" Тогда

		Возврат ОбменСМобильнымиDMXСервер.ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение);

	КонецЕсли;

КонецФункции

// Выполняет выгрузку массива XDTO в XML-файл для последующей передачи данных этого файла
//  мобильному клиенту.
//
// Параметры:
//  ИмяВременногоФайла	 - Строка	 - имя файла XML на диске;
//  ЗаписьXML			 - ЗаписьXML - объект, с помощью которого выполняется запись в файл;
//  ОбъектыXDTO			 - соответствие	 - объекты XDTO, которые необходимо выгрузить в XML;
//  Сообщение			 - ссылка		 - на СообщениеИнтегрированныхСистем, в которое помещаются
//  										данные XML-файлa;
//  МобильныйКлиент 	 - ПланОбменаСсылка.Мобильный - Ссылка на узел.
//
Процедура ВыгрузитьМассивXDTOВСообщение(ИмяВременногоФайла, ЗаписьXML, ОбъектыXDTO, Сообщение, 
	МобильныйКлиент) Экспорт

	НачалоЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Готовится сообщение из %1 объектов'; en = 'Preparing the message from %1 objects'"),
			Строка(ОбъектыXDTO.Количество())),
			Ложь,
			МобильныйКлиент);

	// Выгрузка каждого из объектов XDTO в файл XML
	ЗаписьXML.ЗаписатьНачалоЭлемента("Message");

	Для Каждого Элемент из ОбъектыXDTO Цикл

		ОбъектXDTO = Элемент.Значение;

		Если ОбъектXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		Исключение
			Инфо = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с мобильным.Выгрузка XDTO в XML'; en = 'Exchange with mobile.Exporting XDTO to XML'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОбъектXDTO.Тип().Имя,
				ОбъектXDTO.Тип().Имя + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();

	РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(
		МобильныйКлиент, Сообщение, ИмяВременногоФайла, НачалоЗаполнения, ОбъектыXDTO.Количество());

КонецПроцедуры

// Процедура - Разбить данные из файла на части и записать в сообщение обмена
//
// Параметры:
//  МобильныйКлиент		 - ПланОбменаСсылка.Мобильный	 - Узел обмен мобильного клиента;
//  ИсходящееСообщение	 - СправочникСсылка.СообщенияИнтегрированныхСистем - Формируемое сообщение обмена;
//  ИмяВременногоФайла	 - Строка - Имя файла с записанными данными;
//  НачалоЗаполнения	 - Число  - Дата начала формирования файлов (в миллисекундах);
//  КоличествоОбъектов	 - Число  - Количество выгруженных объектов.
//
Процедура РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(МобильныйКлиент, ИсходящееСообщение, 
	ИмяВременногоФайла, НачалоЗаполнения, КоличествоОбъектов) Экспорт

	ДвоичныеДанныеСообщения = Новый ДвоичныеДанные(ИмяВременногоФайла);

	// Файл с сообщением обмена разделяется на части по 5 Мб для стабилизации передачи на мобильный клиент
	МассивЧастейФайла = РазделитьФайл(ИмяВременногоФайла, 5 * 1024 * 1024);

	МассивЧастей = Новый Массив;
	Для Каждого ИмяФайла Из МассивЧастейФайла Цикл

		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);

		// Каждая часть сообщения максимально сжимается
		МассивЧастей.Добавить(Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));

		УдалитьФайлы(ИмяФайла);

	КонецЦикла;

	// Запись массива частей файла в содержательную часть сообщения интегрированных систем
	СообщениеОбъект = ИсходящееСообщение.ПолучитьОбъект();
	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивЧастей);
	СообщениеОбъект.Записать();

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
		ИсходящееСообщение,
		ДвоичныеДанныеСообщения.Размер(),
		КоличествоОбъектов);

	ОкончаниеЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьВремяФормирования(
		ИсходящееСообщение,
		(ОкончаниеЗаполнения - НачалоЗаполнения)/1000);

	// Установка отметки о 100% готовности сообщения после выполнения всех действий по подготовке сообщения.
	// После установки степени готовности в 100% сообщение может быть передано на клиента.
	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
		ИсходящееСообщение, 100);

	УдалитьФайлы(ИмяВременногоФайла);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Подготовлено сообщение объемом %1 байт'; en = 'Message prepared, size: %1 bytes'"),
				Строка(ДвоичныеДанныеСообщения.Размер())),
		Ложь,
		МобильныйКлиент);

КонецПроцедуры

// Записывает в очередь входящее сообщение
//
// Параметры:
//  МобильныйКлиент 	 - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  СообщениеОтСервера	 - ОбъектXDTO - Полученные сервером данные.
//
Процедура ЗаписатьВходящееСообщение(МобильныйКлиент, СообщениеОтСервера) Экспорт

	ДанныеСообщения = Неопределено;
	Если ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ХранилищеЗначения") Тогда
		ДанныеСообщения = СообщениеОтСервера.exchangeData.Получить();

	ИначеЕсли ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ДвоичныеДанные") Тогда
		ДанныеСообщения = СообщениеОтСервера.exchangeData;

	КонецЕсли;

	Если ДанныеСообщения = Неопределено Или ТипЗнч(ДанныеСообщения) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;

	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор());
	Сообщение.Входящее = Истина;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();

	Если ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ХранилищеЗначения") Тогда
		Сообщение.ДанныеСообщения = СообщениеОтСервера.exchangeData;

	ИначеЕсли ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ДвоичныеДанные") Тогда

		Сообщение.ДанныеСообщения = 
			Новый ХранилищеЗначения(СообщениеОтСервера.exchangeData, Новый СжатиеДанных(9));

	КонецЕсли;

	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(
		МобильныйКлиент,
		Сообщение);

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьРазмер(
		Сообщение.Ссылка,
		ДанныеСообщения.Размер());

КонецПроцедуры

#КонецОбласти // Работа с сообщениями обмена

#Область ПолучениеПредставленияКарточкиЗадачиВHTML

Процедура СформироватьТаблЧастьФормыКонтролера(Результат, СсылкаНаЗадачу, ТочкиМаршрута, 
	ТочкаМаршрутаОтвИсполнение)

	БизнесПроцесс = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЗадачу, "БизнесПроцесс");

	//список исполнителей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", ТочкаМаршрутаОтвИсполнение);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Ответственный_исполнитель,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.Исполнитель
		|		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)";

	СформироватьТаблицуИсполнителей(Результат, Запрос, "Ход исполнения:");

КонецПроцедуры

Процедура СформироватьТаблицуИсполнителей(Результат, Запрос, Заголовок)

	Выборка = Запрос.Выполнить().Выгрузить();

	Если Выборка.Количество() > 0 Тогда

		Результат = Результат + "&nbsp;<span class = ""TextStyle""><b>" + Заголовок + "</b></span>";
		Результат = Результат 
			+ "&nbsp;<table border=""1"" class = ""TextStyle""><tbody><tr  align=""center"" class = ""PropName"">";

		Для Каждого Столбец Из Выборка.Колонки Цикл
			Результат = Результат + "<td><b>" + СтрЗаменить(Столбец.Имя,"_"," ") + "</b></td>";
		КонецЦикла;

		Результат = Результат + "</tr>";

	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Выборка Цикл

		Результат = Результат + "<tr class = ""PropValue"">";

		Для Счетчик = 0 ПО Выборка.Колонки.Количество()-1 Цикл
			Результат = Результат + "<td>" 
				+ ?(ЗначениеЗаполнено(СтрокаТаблицы[Счетчик]), СтрокаТаблицы[Счетчик], "&nbsp;") + "</td>";
		КонецЦикла;

		Результат = Результат + "</tr>";

	КонецЦикла;

	Если Выборка.Количество() > 0 Тогда
		Результат = Результат + "</tbody></table>";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаНаЗадачу) Экспорт

	ПараметрыФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьФормуВыполненияЗадачи(СсылкаНаЗадачу);
	ИмяФормы       = ПараметрыФормы.Имяформы;

	//заголовок HTML
	Результат = 
		"<html>
		|<head>
		|	<meta name=""viewport"" %content% http-equiv=""Content-Type""/>
		|</head>
		|<body>
		|	<div style = ""font-family:Arial;font-size:14px;"">";
	Результат = СтрЗаменить(Результат, "%content%", "content = ""text/html,width=320,initial-scale=1""");

	//Заполняется шапка, общая для всех задач
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаЗадачу,
		"Наименование,
		|Описание,
		|СрокИсполнения,
		|Важность,
		|Исполнитель,
		|Автор,
		|БизнесПроцесс,
		|РольИсполнителя");
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		БизнесПроцесс,
		"ДатаНачала");

	//Задача
	Результат = Результат 
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Задача'; en = 'Task'"), СтрЗаменить(РеквизитыЗадачи.Наименование, """","'"));

	//Автор
	Результат = Результат 
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Автор'; en = 'Author'"), СтрЗаменить(РеквизитыЗадачи.Автор, """","'"));

	//РольИсполнителя
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) 
		И Не РеквизитыЗадачи.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(
				НСтр("ru = 'Кому'; en = 'To'"), 
				СтрЗаменить(РеквизитыЗадачи.Исполнитель, """","'"), ,
				БиблиотекаКартинок.ДелегированнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(
				НСтр("ru = 'Кому'; en = 'To'"), 
				СтрЗаменить(РеквизитыЗадачи.РольИсполнителя, """","'"), ,
				БиблиотекаКартинок.РолеваяЗадача);
	КонецЕсли;

	//Описание
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Описание) Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(НСтр("ru = 'Описание'; en = 'Details'"), РеквизитыЗадачи.Описание);
	КонецЕсли;

	//Срок
	Если ЗначениеЗаполнено(РеквизитыЗадачи.СрокИсполнения) Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(
				НСтр("ru = 'Срок'; en = 'Due date'"), Формат(РеквизитыЗадачи.СрокИсполнения,"ДФ='dd.MM.yyyy ЧЧ:мм'"), Ложь);
	КонецЕсли;

	//Важность
	Если РеквизитыЗадачи.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		ПредставлениеВажности = НСтр("ru = 'Высокая'; en = 'High'");
	ИначеЕсли РеквизитыЗадачи.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
		ПредставлениеВажности = НСтр("ru = 'Обычная'; en = 'Normal'");
	Иначе
		ПредставлениеВажности = НСтр("ru = 'Низкая'; en = 'Low'");
	КонецЕсли;
	
	Результат = Результат 
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Важность'; en = 'Importance'"), ПредставлениеВажности, Ложь);

	//Дата
	Результат = Результат 
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Дата'; en = 'Date'"), РеквизитыБизнесПроцесса.ДатаНачала, Ложь);

	//история выполнения
	ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(БизнесПроцесс);
	Если ЗначениеЗаполнено(ИсторияВыполнения) Тогда

		ИсторияВыполнения = СтрЗаменить(ИсторияВыполнения, Символы.ПС, "<br/>");

		Результат = Результат 
			+ ПолучитьHTMLреквизита(НСтр("ru = 'История выполнения'; en = 'Execution history'"), ИсторияВыполнения, Истина);

	КонецЕсли;

	//Дополняем форму задачи элементами, специфичными только для нее
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда

		Если ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя" Тогда

			//список соисполнителей
			Результат = Результат + "</tbody></table>";

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫБОР
				|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|			ТОГДА ЗадачаИсполнителя.Исполнитель
				|		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
				|	КОНЕЦ КАК Исполнитель,
				|	ЗадачаИсполнителя.Наименование,
				|	ЗадачаИсполнителя.Выполнена,
				|	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
				|	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
				|	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";

			СформироватьТаблицуИсполнителей(Результат, Запрос, НСтр("ru = 'Соисполнители:'; en = 'Co-performers:'"));

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда

		Если Имяформы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиКонтролера" Тогда
			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить);
			ТочкаМаршрутаОтвИсполнение = Неопределено;
			СформироватьТаблЧастьФормыКонтролера(
				Результат, СсылкаНаЗадачу, ТочкиМаршрута, ТочкаМаршрутаОтвИсполнение);
		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда
			НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'; en = 'Cycle'"), НомерИтерации, Ложь);
		КонецЕсли;

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться" Тогда

			//Цикл
			НайденнаяСтрока =  БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			
			//Результат согласования
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
			СтрокиИтерации = БизнесПроцесс.РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
			КонецЦикла;
			Результат = Результат 
				+ ПолучитьHTMLреквизита(НСтр("ru = 'Результат согласования'; en = 'Approval result'"), РезультатСогласования, Ложь);
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'; en = 'Cycle'"), НомерИтерации, Ложь);

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации   = "";

			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'; en = 'Cycle'"), НомерИтерации, Ложь);

		КонецЕсли;

		Если Имяформы = "БизнесПроцесс.Утверждение.Форма.ФормаЗадачиОзнакомиться" Тогда

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации   = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;

			// результат утверждения
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
			СтрокиИтерации = БизнесПроцесс.РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл

				РезультатВыполнения = Строка.ЗадачаИсполнителя.РезультатВыполнения;
				УтверждающееЛицо = Строка.ЗадачаИсполнителя.Исполнитель;
				ДатаУтверждения = Строка.ЗадачаИсполнителя.ДатаИсполнения;

				Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
					РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Результат = Результат 
				+ ПолучитьHTMLреквизита(НСтр("ru = 'Результат утверждения'; en = 'Confirmation result'"), РезультатУтверждения, Ложь);
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'; en = 'Cycle'"), НомерИтерации);

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда

		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			БизнесПроцесс,
			"ДатаНачала,
			|ДатаЗавершения,
			|МестоПроведения,
			|РезультатПриглашения,
			|НомерИтерации");

		Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаНачала) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Дата начала мероприятия'; en = 'Event start date'"), 
				Формат(РеквизитыПроцесса.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаЗавершения) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Дата завершения'; en = 'Completion date'"), 
				Формат(РеквизитыПроцесса.ДатаЗавершения, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыПроцесса.МестоПроведения) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Место проведения'; en = 'Location'"), 
				РеквизитыПроцесса.МестоПроведения);
		КонецЕсли;

		Если ИмяФормы = "БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОзнакомиться" Тогда

			Если РеквизитыПроцесса.РезультатПриглашения 
				= Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками
				Или РеквизитыПроцесса.РезультатПриглашения 
					= Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда
				Результат = Результат + ПолучитьHTMLреквизита(
					НСтр("ru = 'Цикл'; en = 'Cycle'"), 
					РеквизитыПроцесса.НомерИтерации);
			КонецЕсли;

			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Результат'; en = 'Result'"), 
				РеквизитыПроцесса.РезультатПриглашения);

			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить);

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(
				СсылкаНаЗадачу, "ЗадачаИсполнителя");

			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс); 
			Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
			Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗадачаЗадачаИсполнителя.Исполнитель КАК Участник,
				|	ЗадачаЗадачаИсполнителя.ДатаИсполнения КАК Дата_ответа,
				|	РезультатыПриглашения.РезультатПриглашения КАК Результат,
				|	РезультатыПриглашения.ЯвкаОбязательна КАК Явка_обязательна
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
				|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Приглашение.РезультатыПриглашения КАК РезультатыПриглашения
				|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыПриглашения.ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
				|	И РезультатыПриглашения.НомерИтерации = &НомерИтерации";

			СформироватьТаблицуИсполнителей(Результат, Запрос, НСтр("ru = 'Участники:'; en = 'Attendees:'"));

		КонецЕсли;

	КонецЕсли;

	//закрываем HTML
	Результат = Результат + "</div></body></html>";

	Возврат Результат;

КонецФункции

Функция ПолучитьHTMLреквизита(ИмяРеквизита, ЗначениеРеквизита, Вертикально = Ложь, Картинка = Неопределено)

	ЗначениеРеквизитаСтр = "&nbsp;";

	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда

		Если ТипЗнч(ЗначениеРеквизита) <> Тип("Строка") Тогда
			ЗначениеРеквизитаСтр = Строка(ЗначениеРеквизита);
		Иначе
			ЗначениеРеквизитаСтр = ЗначениеРеквизита;
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(Картинка) Тогда
		Если ТипЗнч(Картинка) = Тип("Картинка") Тогда
			ДвоичныеДанныеФото = Картинка.ПолучитьДвоичныеДанные();
			Формат = Строка(Картинка.Формат());
		Иначе
			ДвоичныеДанныеФото = Неопределено;
			Формат = ФорматКартинки.НеизвестныйФормат;
		КонецЕсли;

		СтрокаИсточника = "data:image/" + Формат + ";base64," + Base64Строка(ДвоичныеДанныеФото);
		ЗначениеКартинки = СтрШаблон("<img border=""0"" src=""%1"" height = ""#height"">", СтрокаИсточника);
	Иначе
		ЗначениеКартинки = "";
	КонецЕсли;

	Если Вертикально Тогда
		Результат = "<p><b>" + ИмяРеквизита + ":</b></p><p>" + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	Иначе
		Результат = "<p><b>" + ИмяРеквизита + ":</b> " + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти


// Выполняет регистрацию данных на узлах мобильных устройств.
//
Процедура ВыполнитьРегистрациюИзмененийДляМобильныхУстройств() Экспорт

	УзелОбмена = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзелДляРегистрацииДанных();

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;
		МассивИзмененныхДанных = Новый Массив;

		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		Иначе
			ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		КонецЕсли;

		Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЭлементДанных);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

//	Получает массив, содержащий ссылки на элементы справочника, документы, задачи, процессы, 
//	а также наборы регистров сведений, входящие в состав плана обмена указанного узла 
//	и зарегистрированных в данный момент на этом узле.
//
// Параметры:
//  УзелОбмена  - ссылка на узел плана обмена
//
// Возвращаемое значение:
//	Массив - содержит ссылки на справочники и документы, наборы записей регистров, менеджеры констант, 
//		изменения которых были зарегистрированы на указанном узле плана обмена в момент вызова функции.
//
Функция ПолучитьИзмененныеДанные(УзелОбмена, СПометкойУдаления = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	МассивИзмененныхДанных = Новый Массив;

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;

		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		Иначе
			ПолучитьИзмененныеДанныеСсылочногоТипа(
				УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, СПометкойУдаления);

		КонецЕсли;

	КонецЦикла;
	
	Возврат МассивИзмененныхДанных;

КонецФункции

//Создает и настраивает центральный узел обмена с мобильными устройствами.
//
Процедура НайтиСоздатьЦентральныйУзелОбменаСМобильнымиКлиентами() Экспорт

	УзелОбмена = ПланыОбмена.Мобильный.ЭтотУзел().ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(УзелОбмена.Код) Тогда

		УзелОбмена.Код          = "001";
		УзелОбмена.Наименование = НСтр("ru='Центральный'; en = 'Central'");

		УзелОбмена.Записать();

	КонецЕсли;

КонецПроцедуры

// Находит, и в случае отсутсвия, создает узел обмена с мобильным устройством.
//
Функция ПолучитьУзелОбменаДляМобильногоКлиента(МобильныйКлиент, КодМобильногоКлиента) Экспорт

	УзелОбмена = ПланыОбмена.Мобильный.НайтиПоКоду(КодМобильногоКлиента); 

	Если Не УзелОбмена.Пустая() Тогда

		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.Код          = КодМобильногоКлиента;
		УзелОбъект.Пользователь = МобильныйКлиент.Пользователь;
		УзелОбъект.ДатаСоздания = ТекущаяДатаСеанса();
		УзелОбъект.Записать();

		УзелОбмена = УзелОбъект.Ссылка;

	КонецЕсли;

	Возврат УзелОбмена;

КонецФункции

// Проверяет, существует ли указанный объект в базе данных
Функция ЭлементДанныхСуществуетВБазе(ЭлементДанных) Экспорт

	ЭлементСуществует = Истина;

	Если ТипЗнч(ЭлементДанных) = Тип("ИнформацияОбОшибке")
		Или ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда 
		Возврат ЭлементСуществует;
	КонецЕсли;

	Попытка

		Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
			Объект = ЭлементДанных.Ссылка;
		Иначе
			Объект = ЭлементДанных;
		КонецЕсли;

		МетаданныеЭлементаДанных = Объект.Метаданные();

		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлементаДанных)
		 Или ОбщегоНазначения.ЭтоДокумент(МетаданныеЭлементаДанных) Тогда

			ЭлементСуществует = ОбщегоНазначения.СсылкаСуществует(Объект);

		КонецЕсли;

	Исключение
		ЭлементСуществует = Истина;
	КонецПопытки;

	Возврат ЭлементСуществует;

КонецФункции

// Проверяет доступность по правам указанного объекта для пользователя мобильного клиента
// Параметры:
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
//	Объект - ссылка на проверяемый объект
Функция ОбъектДоступенТекущемуПользователю(МобильныйКлиент, Объект, ОбщиеПраваНаОбъекты = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Попытка

		Если Не ОбщегоНазначения.ЭтоСправочник(Объект.Метаданные())
			И Не ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные()) Тогда
			Возврат Истина;
		КонецЕсли;

		Если Объект.Метаданные().Имя = "УдалитьШаблоныТекстовПисем" Тогда
			Возврат Объект.Владелец = Пользователь;
		КонецЕсли;

		Если Объект.Метаданные().Имя = "ШаблоныТекстов" Тогда
			Возврат Объект.Автор = Пользователь;
		КонецЕсли;

		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
			Объект, Пользователь);

		Возврат ПраваПоОбъекту.Чтение;

	Исключение
		// У передаваемого объекта невозможно получить метаданные - пропускаем его к передаче.
		Возврат Истина;
	КонецПопытки;

КонецФункции

// Получает часто используемые параметры синхронизации для обмена с мобильным клиентом
// Параметры:
//	Пользователь - Ссылка на пользователя
Функция ПолучитьПараметрыСинхронизации(Пользователь) Экспорт

	ПараметрыСинхронизации = Новый Структура();

	ПараметрыСинхронизации.Вставить("СинхронизироватьПочту",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты));

	ПараметрыСинхронизации.Вставить("СинхронизироватьЗадачи",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач));

	ПараметрыСинхронизации.Вставить("СинхронизироватьКалендарь",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря));

	ПараметрыСинхронизации.Вставить("СинхронизироватьКонтроль",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКонтроля));

	ПараметрыСинхронизации.Вставить("МаксимальныйРазмерФайла",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов));

	ПараметрыСинхронизации.Вставить("ПериодПервичнойЗагрузки",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки));

	ПараметрыСинхронизации.Вставить("СрокУстареванияДанных",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных));

	ПараметрыСинхронизации.Вставить("ФильтроватьФайлыПоФормату",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ОграничениеФорматовПередаваемыхФайлов));

	ПараметрыСинхронизации.Вставить("ФорматыПередаваемыхФайлов",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ФорматыПередаваемыхФайлов));

	ПараметрыСинхронизации.Вставить("ПодробныйПротоколОбмена",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПодробныйПротоколОбменаСМобильнымУстройством));

	ПараметрыСинхронизации.Вставить("ОбщиеПраваНаОбъекты", Новый Соответствие());
	ПараметрыСинхронизации.Вставить("ПротоколируемыеТипы", Новый Соответствие());

	Если ПараметрыСинхронизации.ПодробныйПротоколОбмена Тогда

		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("ДокументСсылка.ИсходящееПисьмо"), Тип("ДокументСсылка.ИсходящееПисьмо"));

		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("ДокументСсылка.ВходящееПисьмо"), Тип("ДокументСсылка.ВходящееПисьмо"));

		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("СправочникСсылка.Контроль"), Тип("СправочникСсылка.Контроль"));

		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("ЗадачаСсылка.ЗадачаИсполнителя"), Тип("ЗадачаСсылка.ЗадачаИсполнителя"));

		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("СправочникСсылка.ЗаписиРабочегоКалендаря"), Тип("СправочникСсылка.ЗаписиРабочегоКалендаря"));

		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("БизнесПроцессСсылка.Исполнение"), Тип("БизнесПроцессСсылка.Исполнение"));

	КонецЕсли;

	Возврат ПараметрыСинхронизации;

КонецФункции

// Формирует список по умолчанию форматов передаваемых на мобильный клиент файлов
Функция СписокФорматовФайловПередаваемыхНаМобильныйКлиент() Экспорт

	Массив = Новый Массив();
	Массив.Добавить("txt log ini"); // текстовые файлы
	Массив.Добавить("ico wmf emf"); // иконки и картинки
	Массив.Добавить("htm html url mht mhtml"); // документы интернета
	Массив.Добавить("doc docx dot rtf xls xlsx ppt pptx"); // документы MS Office
	Массив.Добавить("jpg jpeg jp2 jpe bmp dib tif tiff gif png"); // изображения
	Массив.Добавить("pdf"); // файлы PDF
	Массив.Добавить("odt odf odp odg ods"); // документы Open Office

	Возврат ВРег(СтрСоединить(Массив, " "));

КонецФункции 

// Проверяет возможность работы с мобильного клиента для текущего пользователя.
// Вызывает исключение в случае отсутсвия разрешения.
// Параметры
// 	Пользователь - ссылка на пользователя
Функция ПроверитьВозможностьПодключенияМобильногоКлиента(ТекущийПользователь) Экспорт

	Если Не РегистрыСведений.РазрешенныеМобильныеПользователи.ИспользованиеМобильногоКлиентаРазрешено(
		ТекущийПользователь) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Формирует шаг отображения готовности для ускорения вывода данных в зависимости от их объема.
//
// Параметры:
//  КоличествоОбъектовВсего	 - Число - Количество объектов в выборке.
// 
// Возвращаемое значение:
//  Число - Шаг отображения изменений процента готовности.
//
Функция ПолучитьШагОтображенияПроцентаГотовности(КоличествоОбъектовВсего) Экспорт

	// Выводим каждые 5%.
	Шаг = Окр(КоличествоОбъектовВсего / 100 * 5);

	Если Шаг = 0 Тогда
		Шаг = 1;
	КонецЕсли;

	Возврат Шаг;

КонецФункции

// Процедура - Записать подробную информацию о событии обмена
//
// Параметры:
//  ПараметрыСинхронизации	 - Структура - 
//   * ПодробныйПротоколОбмена - Булево - вести подробный протокол обмена с мобильным клиентом
//   * ПротоколируемыеТипы     - Соответствие - типы данных, для которых ведется расширенное протоколирование
//  МобильныйКлиент			 - ПланОбменаСсылка.Мобильный - 
//  Объект					 - Ссылка - Ссылка на объект, для которого записывается информация
//  ТекстСообщения			 - Строка - Информация об операции
//  СКлиента				 - Булево - Признак того, что информация формируется при записи данных полученных с клиента
//
Процедура ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
	Объект, ТекстСообщения, СКлиента = Ложь) Экспорт

	Если Не ПараметрыСинхронизации.ПодробныйПротоколОбмена Тогда
		Возврат;
	КонецЕсли;

	ТипЗначенияОбъекта = ТипЗнч(Объект);

	Если ПараметрыСинхронизации.ПротоколируемыеТипы[ТипЗначенияОбъекта] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформациюПоОбъекту(
		ТекстСообщения,
		Строка(ТипЗначенияОбъекта),
		Объект.Ссылка.УникальныйИдентификатор(),
		СКлиента,
		МобильныйКлиент);

КонецПроцедуры

// Записать ошибку произошедшую во время обмена в протокол работы с пользователем.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - Информация о произошедшей ошибке.
//
Процедура ЗаписатьОшибкуВПротоколПриОбмене(МобильныйКлиент, ИнформацияОбОшибке) Экспорт

	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	Если СтрНайти(ИнформацияОбОшибке.Описание, "info:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрЗаменить(ПредставлениеОшибки, "info:", ""),
			Ложь,
			МобильныйКлиент);

	ИначеЕсли СтрНайти(ИнформацияОбОшибке.Описание, "warning:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрЗаменить(ПредставлениеОшибки, "warning:", ""),
			Ложь,
			МобильныйКлиент);

	Иначе
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
			ПредставлениеОшибки,
			Ложь,
			МобильныйКлиент);

	КонецЕсли;

КонецПроцедуры

// Записывает данные обмена из временного файл и устанавливает процент готовности сообщения равным 100.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  ИмяВременногоФайла	 - Строка - Имя файла для записи данных обмена;
//  КоличествоОбъектов	 - Число - Количество выгруженных объектов.
//
Процедура ЗаписатьДанныеОбмена(МобильныйКлиент, ИмяВременногоФайла, КоличествоОбъектов) Экспорт

	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);

	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9)));

	// Запись массива частей файла в содержательную часть сообщения интегрированных систем
	Сообщение = СоздатьНовоеСообщение(МобильныйКлиент);

	СообщениеОбъект = Сообщение.ПолучитьОбъект();

	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивДанных);
	СообщениеОбъект.ДатаСоздания    = ТекущаяДатаСеанса();

	СообщениеОбъект.Записать();

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
		Сообщение,
		ДвоичныеДанныеФайла.Размер(),
		КоличествоОбъектов);

	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
		Сообщение, 100);

КонецПроцедуры

// Проверяет возможность переадресовать задачу другому пользователю.
//
// Параметры:
//  Задача			 - ЗадачаСсылка.ЗадачаПользователя - Ссылка на проверяемую задачу;
//  НовыйИсполнитель - СправочникСсылка.Пользователи - Новый исполнитель задачи.
// 
// Возвращаемое значение:
//  Истина - Если операция возможна.
//
Процедура ПроверитьВозможностьПереадресацииЗадачи(Задача, НовыйИсполнитель) Экспорт
	
	Если ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.ПолныеРоли")
		И Не БизнесПроцессыИЗадачиСервер.ЕстьИсполнителиРоли(НовыйИсполнитель) Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'error:Задача ""%1"" не перенаправлена. 
				|На указанную роль ""%2"" не назначено ни одного исполнителя.';
				|en = 'error:Tesk ""%1"" was not forwarded.
				|There are no performers for specified role ""%2"".'"),
			Строка(Задача),
			Строка(НовыйИсполнитель));

		ВызватьИсключение (ТекстИсключения);

	КонецЕсли;

	// Проверка прав доступа нового исполнителя на предметы задачи
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Предметы = Задача.Предметы.Выгрузить();
	
	Если Предметы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	// Определим предметы для проверок
	ПредметыДляПроверкиПрав = 
		Мультипредметность.ПредметыДляПроверкиПрав(
			Предметы.ВыгрузитьКолонку("Предмет"), Задача.БизнесПроцесс);
		
	ПредметыДляПроверкиПравДоступаУчастников = 
		ПредметыДляПроверкиПрав.ДляПроверкиПравДоступаУчастников;
	
	ПредметыДляПроверкиНарушенияПолитикиДоступа = 
		ПредметыДляПроверкиПрав.ДляПроверкиНарушенияПолитикиДоступа;
	
	ПредметыСОграниченнымДоступом = Новый Массив;
	
	// Проверка нарушения политики доступа при расширении рабочей группы предмета.
	Участники = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(Участники, НовыйИсполнитель);
	
	Для Каждого Предмет Из ПредметыДляПроверкиНарушенияПолитикиДоступа Цикл
		Попытка
			Мультипредметность.ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
				Предмет, Участники);
		Исключение
			ПредметыСОграниченнымДоступом.Добавить(Предмет);
		КонецПопытки;
	КонецЦикла;
	
	// Проверка прав на предметы без автоматического заполнения рабочей группы.
	
	ПользователиДляПроверкиПрав = Мультипредметность.ПользователиДляПроверкиПрав(Участники);
	
	ПраваУчастниковНаПредметы = ДокументооборотПраваДоступа.ПолучитьПраваПользователейПоОбъектам(
		ПредметыДляПроверкиПравДоступаУчастников,
		Истина,
		ПользователиДляПроверкиПрав.ВыгрузитьКолонку("Участник"));
	
	Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
		
		Для Каждого СтрокаПользователь Из ПользователиДляПроверкиПрав Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ОбъектДоступа", Предмет);
			Отбор.Вставить("Пользователь", СтрокаПользователь.Участник);
			
			НайденныеПрава = ПраваУчастниковНаПредметы.НайтиСтроки(Отбор);
			Если НайденныеПрава.Количество() = 0 Тогда
				ПредметыСОграниченнымДоступом.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоПредметов = ПредметыСОграниченнымДоступом.Количество();
	
	Если КоличествоПредметов <> 0 Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = "%1%2";
		
		Если ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ПерваяЧастьТекстаОшибки = НСтр("ru = 'У некоторых исполнителей роли нет прав '; en = 'Some performers of the role do not have permissions '");
		Иначе
			ПерваяЧастьТекстаОшибки = НСтр("ru = 'У пользователя нет прав '; en = 'The user has no permissions '");
		КонецЕсли;
		
		Если КоличествоПредметов = 1 Тогда
			ВтораяЧастьТекстаОшибки = СтрШаблон(
				НСтр("ru = 'на предмет ""%1""'; en = 'for subject ""%1""'"),
				Строка(ПредметыСОграниченнымДоступом[0]));
		Иначе
			
			ПредметыСтрокой = "";
			
			ПереносСтроки = "";
			
			Для Каждого Предмет Из ПредметыСОграниченнымДоступом Цикл
				ПредметыСтрокой = ПредметыСтрокой
					+ ПереносСтроки
					+ Символы.Таб
					+ Строка(Предмет);
				
				ПереносСтроки = Символы.ПС;
			КонецЦикла;
			
			ВтораяЧастьТекстаОшибки = НСтр("ru = 'на предметы
				|""%1""';
				|en = 'for subjects 
				|""%1""'");
			
			ВтораяЧастьТекстаОшибки = СтрШаблон(
				ВтораяЧастьТекстаОшибки,
				ПредметыСтрокой);
			
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПерваяЧастьТекстаОшибки, ВтораяЧастьТекстаОшибки);
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'warning:Задача ""%1"" не перенаправлена. %2. Задача возвращена.'; en = 'warning:Task ""%1"" was not forwarded. %2. Task was returned.'"),
			Строка(Задача),
			ТекстОшибки);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму для представления предмета задачи или процесса на мобильном клиенте
// Параметры:
// Объект - ссылка на объект или документ, находящийся в составе плана обмена Мобильный, 
//			который может быть предметом процесса
//
// Возвращаемое значение:
//	Табличный документ или форматированный документ с печатной формой предмета в зависимости 
Функция ПолучитьСодержаниеПредмета(Объект) Экспорт

	Перем КоллекцияПечатныхФорм, ПараметрыВывода;

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
		ПараметрыПечати.Вставить("Рассмотрение", 		Ложь);
		ПараметрыПечати.Вставить("Исполнение", 			Ложь);
		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
		ПараметрыПечати.Вставить("Поручения", 			Ложь);
		ПараметрыПечати.Вставить("Задачи", 				Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
		ПараметрыПечати.Вставить("Резолюции",			Истина);

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.ВходящиеДокументы", 
			"Карточка",
			ПараметрыПечати);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
	 	ПараметрыПечати.Вставить("Согласование", 		Истина);
		ПараметрыПечати.Вставить("Утверждение", 		Истина);
		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
		ПараметрыПечати.Вставить("Поручения", 			Ложь);
		ПараметрыПечати.Вставить("Задачи", 				Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
		ПараметрыПечати.Вставить("Резолюции",			Истина);

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.ИсходящиеДокументы", 
			"Карточка",
			ПараметрыПечати);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
	 	ПараметрыПечати.Вставить("Согласование", 		Истина);
		ПараметрыПечати.Вставить("Утверждение", 		Истина);
		ПараметрыПечати.Вставить("Рассмотрение", 		Истина);
		ПараметрыПечати.Вставить("Исполнение", 			Ложь);
		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
		ПараметрыПечати.Вставить("Поручения", 			Ложь);
		ПараметрыПечати.Вставить("Задачи", 				Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
		ПараметрыПечати.Вставить("ИсторияСрокаДействия",Ложь);
		ПараметрыПечати.Вставить("Резолюции",			Истина);

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.ВнутренниеДокументы", 
			"Карточка",
			ПараметрыПечати);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.Контрагенты", 
			"Карточка");

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия") Тогда		
		
		ВОтдельномДокументе = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе;
		ВТаблице = Перечисления.ТипыПрограммыПротокола.ВТаблице;
		ВМатериалах = Перечисления.ТипыПрограммыПротокола.ВМатериалах;
	
		РеквизитыМероприятия = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект,
				"ТипПротокола, ТипПрограммы, ВидМероприятия");
			
		ТипПротокола = РеквизитыМероприятия.ТипПротокола;
		ТипПрограммы = РеквизитыМероприятия.ТипПрограммы;
		ПротокольноеМероприятие = РеквизитыМероприятия.ВидМероприятия.ПротокольноеМероприятие;
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ЗаголовокОтчета", "");
		ПараметрыПечати.Вставить("ВыводитьДатуИМестоПроведения", Истина);
		ПараметрыПечати.Вставить("ВыводитьУчастников", Истина);
		ПараметрыПечати.Вставить("ВыводитьОрганизацию", Истина);
		ПараметрыПечати.Вставить("ВыводитьОрганизатора", Истина);
		
		Если ПротокольноеМероприятие Тогда 
			ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Истина);
		Иначе
			ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Ложь);
		КонецЕсли;
		
		Если ТипПрограммы = ВТаблице Тогда 
			ПараметрыПечати.Вставить("ВыводитьПрограмму", Истина);
		Иначе
			ПараметрыПечати.Вставить("ВыводитьПрограмму", Ложь);
		КонецЕсли;
		
		Если ТипПротокола = ВТаблице И ПротокольноеМероприятие Тогда 
			ПараметрыПечати.Вставить("ВыводитьПротокол", Истина);
		Иначе	
			ПараметрыПечати.Вставить("ВыводитьПротокол", Ложь);
		КонецЕсли;

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.Мероприятия", 
			"Карточка",
			ПараметрыПечати);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.ТемыОбсуждений", 
			"Карточка");

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.СообщенияОбсуждений", 
			"Карточка");

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.Проекты", 
			"Карточка");

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Справочник.ПроектныеЗадачи", 
			"Карточка");

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Отсутствие") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Объект, 
			"Документ.Отсутствие", 
			"Карточка");

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		ТекстHTML = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			Объект,
			Новый УникальныйИдентификатор,
			Истина, // ВыводитьШапку
			Истина, // СокращенныйСписокАдресатов
			Ложь); // ВключитьРежимРедактированияHTML
			
		ФорматированныйДок = Новый ФорматированныйДокумент();
		ФорматированныйДок.УстановитьHTML(ТекстHTML, Новый Структура());
		
		Возврат ФорматированныйДок;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

// Установливает связи между письмами полученными с мобильного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  СвязиКУстановке - Массив - Массив содержащий настройки связей между письмами.
//   * Связь - Структура - Описание связи между объектами.
//    ** Объект - ДокументСсылка.ВходящееПисьмо, ИсходящееПисьмо - Исходный объект;
//    ** СвязанныйОбъект - ДокументСсылка.ВходящееПисьмо, ИсходящееПисьмо - Связанный объект;
//    ** ТипСвязи - СправочникСсылка.ТипыСвязей - Тип устанавливаемой связи.
//
Процедура УстановитьСвязиПисемПолученныхСМобильногоКлиента(МобильныйКлиент, СвязиКУстановке) Экспорт

	// Обходим массив с настройками связей, которые необходимо создать
	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СвязьКУстановке Из СвязиКУстановке Цикл

		Попытка

			СвязиДокументов.СоздатьСвязь(
				СвязьКУстановке.Объект,
				СвязьКУстановке.СвязанныйОбъект,
				СвязьКУстановке.ТипСвязи);

		Исключение

			Инфо = ИнформацияОбОшибке();

			СообщениеОбОшибке = НСтр("ru = 'Не удалось создать связь: '; en = 'Failed to create the relation: '");
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
				СообщениеОбОшибке,
				Ложь,
				МобильныйКлиент);

			ВызватьИсключение;

		КонецПопытки;

	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Формирирует указанную печатную форму объекта.
//
// Параметры:
//  Объект          - Ссылка - Ссылка на объект для которого формируется печаетная форме;
//  МенеджерПечати  - Строка - Описание менеджера печати, который формирует формы;
//  ИменаМакетов    - Строка - Имена макетов печатных форм, которые нужно сформировать;
//  ПараметрыПечати - Структура - Структура параметров печати;
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Сформированая печатная форма, Неопределено в противном случае.
//
Функция СформироватьПолучитьПечатнуюФормуОбъекта(Объект, МенеджерПечати, ИменаМакетов, 
	ПараметрыПечати = Неопределено)

	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(Объект);

	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;

	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(
		МенеджерПечати, 
		ИменаМакетов, 
		МассивОбъектов,
		ПараметрыПечати);

	КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
			Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, 
	ТолькоКоличество = Ложь)

	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	// Сначала считываются все наборы значений измерений, соответствующие записям регистра,
	//	изменения которых зарегистрированы на указанном узле плана обмена.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	%2.Изменения КАК ИзмененияДанныхРегистра
		|ГДЕ
		|	ИзмененияДанныхРегистра.Узел = (&Узел)";

	СтрокаРеквизитыВЗапросе = "";
	Измерения = МетаданныеЭлемента.Измерения;
	Для Каждого Измерение Из Измерения Цикл

		СтрокаДляДобавления = 
			"ИзмененияДанныхРегистра." + Измерение.Имя + " Как " + Измерение.Имя;

		Если ЗначениеЗаполнено(СтрокаРеквизитыВЗапросе) Тогда
			СтрокаРеквизитыВЗапросе = СтрокаРеквизитыВЗапросе + ", " + СтрокаДляДобавления;
		Иначе
			СтрокаРеквизитыВЗапросе = СтрокаДляДобавления;
		КонецЕсли;

	КонецЦикла;

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзменения = Новый Запрос;
	ЗапросИзменения.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзменения.Текст = СтрШаблон(
		ТекстЗапроса,
		СтрокаРеквизитыВЗапросе,
		ПолноеИмяМетаданныхЭлемента);

	Выборка = ЗапросИзменения.Выполнить().Выбрать();

	Если Не ТолькоКоличество Тогда

		Пока Выборка.Следующий() Цикл

			ЗапросДанныеРегистра = Новый Запрос;

			// После того, как был считан очередной набор значений измерений регистра,
			//	по этому набору значений формируется набор записей регистра.
			ТекстЗапросаДляЧтенияДанныхРегистра = 
				"ВЫБРАТЬ
				|	%1
				|ИЗ
				|	%2 КАК Регистр
				|%3";

			// Добавление измерений регистра в секцию "Выбрать"
			СтрокаВыбрать = "";
			Для Каждого Измерение Из Измерения Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Измерение.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Измерение.Имя;
				КонецЕсли;
			КонецЦикла;

			// Добавление ресурсов регистра в секцию "Выбрать"
			Ресурсы = МетаданныеЭлемента.Ресурсы;
			Для Каждого Ресурс Из Ресурсы Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Ресурс.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Ресурс.Имя;
				КонецЕсли;
			КонецЦикла;

			// Добавление реквизитов регистра в секцию "Выбрать"
			Реквизиты = МетаданныеЭлемента.Реквизиты;
			Для Каждого Реквизит Из Реквизиты Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Реквизит.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Реквизит.Имя;
				КонецЕсли;
			КонецЦикла;

			// Установка отбора в запрос на основании значений измерений регистра
			СтрокаГде = "";
			Для Каждого Измерение Из Измерения Цикл
				Если ЗначениеЗаполнено(СтрокаГде) Тогда
					СтрокаГде = СтрокаГде 
						+ " И " + "Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
				Иначе
					СтрокаГде = "ГДЕ Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
				КонецЕсли;
				ЗапросДанныеРегистра.УстановитьПараметр(Измерение.Имя, Выборка[Измерение.Имя]);
			КонецЦикла;

			// После получения всех данных регистра запросом формируется набор записей регистра,
			// так как дальнейшая обработка данных производится именно над наборами записей.
			НаборЗаписейРегистра = РегистрыСведений[ИмяМетаданныхЭлемента].СоздатьНаборЗаписей();
			Для Каждого Измерение Из Измерения Цикл
				НаборЗаписейРегистра.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
			КонецЦикла;

			ЗапросДанныеРегистра.Текст = СтрШаблон(
				ТекстЗапросаДляЧтенияДанныхРегистра,
				СтрокаВыбрать,
				ПолноеИмяМетаданныхЭлемента,
				СтрокаГде);

			ВыборкаДанныеРегистра = ЗапросДанныеРегистра.Выполнить().Выбрать();
			Пока ВыборкаДанныеРегистра.Следующий() Цикл
				НоваяЗапись = НаборЗаписейРегистра.Добавить();
				ЗаполнитьЗначенияСвойств(Новаязапись, ВыборкаДанныеРегистра);
			КонецЦикла;
			
			// Добавление сформированного набора записей регистра в массив измененных данных.
			// Этот массив будет передан в дальнейшую обработку.
			МассивИзмененныхДанных.Добавить(НаборЗаписейРегистра);
			
		КонецЦикла;

	КонецЕсли;
	
	Возврат Выборка.Количество();

КонецФункции

Функция ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, 
	ТолькоКоличество = Ложь)

	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИзменения.НомерСообщения
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = (&Узел)";

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзмененияКонстанты = Новый Запрос;
	ЗапросИзмененияКонстанты.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияКонстанты.Текст = СтрШаблон(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента);

	РезультатЗапроса = ЗапросИзмененияКонстанты.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Если НЕ ТолькоКоличество Тогда
			МассивИзмененныхДанных.Добавить(Константы[ИмяМетаданныхЭлемента]);
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции

Функция ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, 
	МетаданныеЭлемента, СПометкойУдаления = Ложь, ТолькоКоличество = Ложь)

	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	ЭлементЗапроса = 
		?(СПометкойУдаления, "ТаблицаИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,", "");

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%2
		|	ТаблицаИзменения.Ссылка
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = (&Узел)";

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзмененияДанных = Новый Запрос;
	ЗапросИзмененияДанных.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияДанных.Текст = СтрШаблон(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента,
		ЭлементЗапроса);

	РезультатЗапроса = ЗапросИзмененияДанных.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Если Не ТолькоКоличество Тогда

		Пока Выборка.Следующий() Цикл

			Если СПометкойУдаления Тогда

				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Ссылка", Выборка.Ссылка);
				СтруктураДанных.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);

				МассивИзмененныхДанных.Добавить(СтруктураДанных);
			Иначе
				МассивИзмененныхДанных.Добавить(Выборка.Ссылка);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Выборка.Количество();

КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

