
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции для обработки ТекущиеДела
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик оповещений формы Текущие дела.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//
Процедура ОбработкаОповещенияФормыТекущиеДела(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОбновитьВиджет" Тогда
		ВиджетыКОбновлению = Новый Массив;
		ВиджетыКОбновлению.Добавить(Параметр);
		ПрочитатьНастройкиВиджетов = Истина;
		Форма.ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов, ВиджетыКОбновлению);
	ИначеЕсли ИмяСобытия = "ИзмененЕжедневныйОтчет" Тогда
		ВиджетыКОбновлению = Новый Массив;
		ВиджетыКОбновлению.Добавить(ПредопределенноеЗначение("Справочник.Виджеты.ЕжедневныеОтчеты"));
		Форма.ЗаполнитьВиджеты(, ВиджетыКОбновлению);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриНажатии полей html в форме текущие дела.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//
Процедура HTMLПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма.ТекущийЭлемент = Элемент;
	
	ИндексВиджета = Форма.ИндексТекущегоВиджета();
	
	Если ИндексВиджета = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = Форма["Виджет" + ИндексВиджета];
	
	СсылкиОбластей = Форма["СсылкиОбластей" + ИндексВиджета];
	ПозицияX = ДанныеСобытия.Event.x;
	ПозицияY = ДанныеСобытия.Event.y;
	
	// клик по ссылке
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) И Не СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "МенюВиджета") Тогда
		ОбработатьНажатиеНаСсылку(ДанныеСобытия.Href, Форма, ИндексВиджета);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийВиджет) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкиОбластей) Тогда
		Возврат;
	КонецЕсли;
	
	// клик по области меню
	ОбластьМеню = ОбластьМеню();
	Если ПозицияX <= ОбластьМеню.Right И ПозицияY <= ОбластьМеню.Bottom Тогда
		ОбработатьНажатиеНаОбластьМеню(ТекущийВиджет, Форма, Элемент, ИндексВиджета);
		Возврат;
	КонецЕсли;
	
	// клик по области показателя
	Если ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя3) Тогда
		ЧислоПоказателей = 3;
	ИначеЕсли ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя2) Тогда
		ЧислоПоказателей = 2;
	Иначе
		ЧислоПоказателей = 0;
	КонецЕсли;
	
	Если ЧислоПоказателей > 0 Тогда
		ОбластьПоказателя3 = ОбластьПоказателя3(ЧислоПоказателей);
		ОбластьПоказателя2 = ОбластьПоказателя2(ЧислоПоказателей);
		ОбластьПоказателя1 = ОбластьПоказателя1(ЧислоПоказателей);
		
		Если ПозицияX >= ОбластьПоказателя3.Left
			И ПозицияX <= ОбластьПоказателя3.Right
			И ПозицияY >= ОбластьПоказателя3.Top
			И ПозицияY <= ОбластьПоказателя3.Bottom
			И ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя3) Тогда
			
			ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиПоказателя3, Форма, ИндексВиджета);
			Возврат;
			
		ИначеЕсли ПозицияX >= ОбластьПоказателя2.Left
			И ПозицияX <= ОбластьПоказателя2.Right
			И ПозицияY >= ОбластьПоказателя2.Top
			И ПозицияY <= ОбластьПоказателя2.Bottom
			И ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя2) Тогда
			
			ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиПоказателя2, Форма, ИндексВиджета);
			Возврат;
			
		ИначеЕсли ПозицияX >= ОбластьПоказателя1.Left
			И ПозицияX <= ОбластьПоказателя1.Right
			И ПозицияY >= ОбластьПоказателя1.Top
			И ПозицияY <= ОбластьПоказателя1.Bottom
			И ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя1) Тогда
			
			ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиПоказателя1, Форма, ИндексВиджета);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// клик по области виджета
	Если ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиВиджета) Тогда
		ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиВиджета, Форма, ИндексВиджета);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ОбработкаРасшифровки диаграмм в форме текущие дела.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//
Процедура ДиаграммаОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		
		ИндексВиджета = Прав(Элемент.Имя, 3);
		ТекущийВиджет = Форма["Виджет" + ИндексВиджета];
		
		Если ТекущийВиджет = ПредопределенноеЗначение("Справочник.Виджеты.ЕжедневныеОтчеты") Тогда
			
			Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда
				ЕжедневныйОтчет = ТекущиеДелаДокументооборотСервер.ПолучитьЕжедневныйОтчетНаДату(Расшифровка);
				Если ЗначениеЗаполнено(ЕжедневныйОтчет) Тогда
					ПоказатьЗначение(, ЕжедневныйОтчет);
				Иначе
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Дата", Расшифровка);
					ОткрытьФорму("Документ.ЕжедневныйОтчет.ФормаОбъекта", ПараметрыФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настройки виджета формы.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//   ИндексВиджета - Строка - индекс настраиваемого виджета в форме.
//
Процедура НастроитьВиджетФормы(Форма, ИндексВиджета) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеНастройкиВиджетаФормы", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИндексВиджета", ИндексВиджета);
	
	ОткрытьФорму("Обработка.ТекущиеДелаДокументооборот.Форма.ФормаНастройки",
		ПараметрыФормы, Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение процедуры НастроитьВиджетФормы.
//
Процедура ЗавершениеНастройкиВиджетаФормы(Виджет, ДопПараметры) Экспорт
	
	Если Виджет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьВиджет", Виджет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значения координат крайних точек области меню.
//
Функция ОбластьМеню()
	
	ОбластьВызоваМеню = Новый Структура;
	ОбластьВызоваМеню.Вставить("Top", 0);
	ОбластьВызоваМеню.Вставить("Bottom", 20);
	ОбластьВызоваМеню.Вставить("Left", 0);
	ОбластьВызоваМеню.Вставить("Right", 20);
	
	Возврат ОбластьВызоваМеню;
	
КонецФункции

// Возвращает значения координат крайних точек области показателя 3.
//
// Параметры:
//   ЧислоПоказателей - Число - может принимать значения 2 или 3.
//
Функция ОбластьПоказателя3(ЧислоПоказателей)
	
	ОбластьПоказателя1 = Новый Структура;
	
	Если ЧислоПоказателей = 2 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 0);
		ОбластьПоказателя1.Вставить("Right", 20);
	ИначеЕсли ЧислоПоказателей = 3 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 156);
		ОбластьПоказателя1.Вставить("Right", 219);
	КонецЕсли;
	
	Возврат ОбластьПоказателя1;
	
КонецФункции

// Возвращает значения координат крайних точек области показателя 2.
//
// Параметры:
//   ЧислоПоказателей - Число - может принимать значения 2 или 3.
//
Функция ОбластьПоказателя2(ЧислоПоказателей)
	
	ОбластьПоказателя1 = Новый Структура;
	
	Если ЧислоПоказателей = 2 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 122);
		ОбластьПоказателя1.Вставить("Right", 216);
	ИначеЕсли ЧислоПоказателей = 3 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 83);
		ОбластьПоказателя1.Вставить("Right", 146);
	КонецЕсли;
	
	Возврат ОбластьПоказателя1;
	
КонецФункции

// Возвращает значения координат крайних точек области показателя 1.
//
// Параметры:
//   ЧислоПоказателей - Число - может принимать значения 2 или 3.
//
Функция ОбластьПоказателя1(ЧислоПоказателей)
	
	ОбластьПоказателя1 = Новый Структура;
	
	Если ЧислоПоказателей = 2 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 12);
		ОбластьПоказателя1.Вставить("Right", 106);
	ИначеЕсли ЧислоПоказателей = 3 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 9);
		ОбластьПоказателя1.Вставить("Right", 71);
	КонецЕсли;
	
	Возврат ОбластьПоказателя1;
	
КонецФункции

// Обработчик перехода по ссылке
//
// Параметры:
//   Ссылка - Строка - ссылка в поле html
//   Форма - УправляемаяФорма - форма Текущие дела.
//   ИндексВиджета - Строка - индекс виджета на форме Текущие дела.
//
Процедура ОбработатьНажатиеНаСсылку(Ссылка, Форма, ИндексВиджета)
	
	Если Лев(Ссылка, 6) = "v8doc:" Тогда
		НавигационнаяСсылкаПоля = Сред(Ссылка, 7);
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "НастройкаВиджета") Тогда
		НастроитьВиджетФормы(Форма, ИндексВиджета);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиЗадачи") Тогда
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиЗадачи_НеПринятые") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "СписокМоихНепринятыхЗадач");
		ОткрытьФорму("Отчет.ОтчетПоЗадачам.Форма", ПараметрыФормы, Форма, "ЗадачиНеПринятые");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиЗадачи_Просроченные") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "СписокМоихИстекающихЗадач");
		ОткрытьФорму("Отчет.ОтчетПоЗадачам.Форма", ПараметрыФормы, Форма, "СписокМоихИстекающихЗадач");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "ЗадачиОтдела") Тогда
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ФормаЗадачиОтдела");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "ЗадачиОтдела_НеПринятые") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "СписокНепринятыхЗадачПодчиненными");
		ОткрытьФорму("Отчет.ОтчетПоЗадачам.Форма", ПараметрыФормы, Форма, "СписокНепринятыхЗадачПодчиненными");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "ЗадачиОтдела_Просроченные") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "СписокИстекающихЗадачПодчиненных");
		ОткрытьФорму("Отчет.ОтчетПоЗадачам.Форма", ПараметрыФормы, Форма, "СписокИстекающихЗадачПодчиненных");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиДокументы") Тогда
		ОткрытьФорму("РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиДокументы_Просроченные") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтображениеПросроченныхДокументов");
		ОткрытьФорму("РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы", ПараметрыФормы,, "ОтображатьТолькоПросроченные");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиДокументы_ВходящиеБезОтвета") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "МоиДокументыОжидающиеОтвета");
		ОткрытьФорму("Отчет.ИсходящиеДокументы.Форма", ПараметрыФормы, Форма, "МоиДокументы_ВходящиеБезОтвета");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтображениеИстекающихДокументов");
		ОткрытьФорму("РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы", ПараметрыФормы,, "ОтображатьТолькоИстекающие");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "СВД") Тогда
		ОткрытьФорму("Справочник.СерверныеСообщенияСВД.Форма.ФормаСписка");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "СВД_ГотовыеКОтправке") Тогда
		ОткрытьФорму("Обработка.ОтправкаДокументовПоСВД.Форма");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "СВД_ЗагруженныеНаПроверку") Тогда
		ОткрытьФорму("ОбщаяФорма.ПроверкаЗагруженныхДанных");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "СВД_СОшибкой") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "ОшибкиОтправкиДокументовПоСВД");
		ОткрытьФорму("Отчет.ИсходящиеДокументы.Форма", ПараметрыФормы, Форма, "СВД_СОшибкой");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиФайлы_РедактируемыеФайлы") Тогда
		ОткрытьФорму("Справочник.Файлы.Форма.РедактируемыеФайлы");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Мероприятия") Тогда
		ОткрытьФорму("Справочник.Мероприятия.Форма.МоиМероприятия");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Календарь") Тогда
		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.Календарь");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Форум") Тогда
		ОткрытьФорму("Справочник.ТемыОбсуждений.ФормаСписка");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Форум_НовыеОтветыНаСообщенияПользователя") Тогда
		ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаНовыеСообщенияДляРабочегоСтола");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Контроль") Тогда
		ОткрытьФорму("Справочник.Контроль.Форма.НаКонтроле");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Контроль_Просрочено") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтображатьТолькоПросроченные", Истина);
		ОткрытьФорму("Справочник.Контроль.Форма.НаКонтроле", ПараметрыФормы,, "Контроль_Просрочено");
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Почта") Тогда
		ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на область меню в виджете
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты - ссылка на виджет.
//   Форма - УправляемаяФорма - форма Текущие дела.
//   Элемент - ЭлементФормы - html поле на форме Текущие дела.
//   ИндексВиджета - Строка - индекс виджета на форме Текущие дела.
//
Процедура ОбработатьНажатиеНаОбластьМеню(Виджет, Форма, Элемент, ИндексВиджета) Экспорт
	
	КомандыВМенюВиджета = Новый СписокЗначений;
	
	Если Виджет = ПредопределенноеЗначение("Справочник.Виджеты.ЕжедневныеОтчеты") Тогда
		
		НачалоДня = НачалоДня(ТекущаяДата());
		ЕжедневныйОтчет = ТекущиеДелаДокументооборотСервер.ПолучитьЕжедневныйОтчетНаДату(НачалоДня);
		
		Если ЗначениеЗаполнено(ЕжедневныйОтчет) Тогда
			КомандыВМенюВиджета.Добавить(
				"ОткрытьОтчетЗаСегодня", НСтр("ru = 'Открыть отчет за сегодня'; en = 'Open report for today'"));
		Иначе
			КомандыВМенюВиджета.Добавить(
				"ДобавитьОтчетЗаСегодня", НСтр("ru = 'Добавить отчет за сегодня'; en = 'Add report for today'"));
		КонецЕсли;
		
		КомандыВМенюВиджета.Добавить(
			"МоиЕжедневныеОтчеты", НСтр("ru = 'Все мои отчеты'; en = 'All my reports'"));
		
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Календарь") Тогда
		КомандыВМенюВиджета.Добавить(
			"СоздатьЗаписьКалендаря", НСтр("ru = 'Добавить запись'; en = 'Add entry'"));
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Контроль") Тогда
		КомандыВМенюВиджета.Добавить("СоздатьКонтрольнуюКарточку",
			НСтр("ru = 'Добавить контроль'; en = 'Add monitoring'"), , Форма.КэшКартинок.КартинкаКонтроль16);
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Мероприятия") Тогда
		КомандыВМенюВиджета.Добавить(
			"СоздатьМероприятие", НСтр("ru = 'Создать мероприятие'; en = 'Create event'"));
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.МоиДела") Тогда
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.МоиДокументы") Тогда
		КомандыВМенюВиджета.Добавить(
			"СоздатьВнутреннийДокумент", НСтр("ru = 'Создать вн. документ'; en = 'Create int. document'"));
			
		Если форма.КэшЗначений.ЧтениеВходящихДокументов Тогда
			КомандыВМенюВиджета.Добавить(
				"СоздатьВходящийДокумент", НСтр("ru = 'Создать вх. документ'; en = 'Create inc. document'"));
		КонецЕсли;
			
		Если форма.КэшЗначений.ЧтениеИсходящихДокументов Тогда
			КомандыВМенюВиджета.Добавить(
				"СоздатьИсходящийДокумент", НСтр("ru = 'Создать исх. документ'; en = 'Create outg. document'"));
		КонецЕсли;
			
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.МоиЗадачи")
		Или Виджет = ПредопределенноеЗначение("Справочник.Виджеты.ЗадачиОтдела") Тогда
		
		КомандыВМенюВиджета.Добавить(
			"СоздатьПроцесс", НСтр("ru = 'Создать процесс'; en = 'Create process'"), , Форма.КэшКартинок.БизнесПроцесс);
		КомандыВМенюВиджета.Добавить(
			"ОткрытьМоиПроцессы", НСтр("ru = 'Мои процессы'; en = 'My processes'"));
			
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Почта") Тогда
		КомандыВМенюВиджета.Добавить(
			"СоздатьПисьмо", НСтр("ru = 'Написать письмо'; en = 'Create email'"), , Форма.КэшКартинок.НаписатьПисьмо);
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.СВД") Тогда
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Форум") Тогда
		КомандыВМенюВиджета.Добавить(
			"СоздатьТемуНаФоруме", НСтр("ru = 'Создать тему'; en = 'Create thread'"));
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.МоиФайлы") Тогда
		КомандыВМенюВиджета.Добавить(
			"ОткрытьСписокФайлов", НСтр("ru = 'Список файлов'; en = 'File list'"));
	КонецЕсли;
	
	КомандыВМенюВиджета.Добавить(
		"НастройкаВиджета", НСтр("ru = 'Настроить виджет...'; en = 'Customize widget...'"), , Форма.КэшКартинок.ШестерёнкаПлоская);
	
	ПараметрыОП = Новый Структура;
	ПараметрыОП.Вставить("Форма", Форма);
	ПараметрыОП.Вставить("ИндексВиджета", ИндексВиджета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьНажатиеНаОбластьМеню_Завершение", ЭтотОбъект, ПараметрыОП);
	
	Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, КомандыВМенюВиджета, Элемент);
	
КонецПроцедуры

// Завершение процедуры ОбработатьНажатиеНаОбластьМеню
//
Процедура ОбработатьНажатиеНаОбластьМеню_Завершение(ВыбраннаяКоманда, Параметры) Экспорт
	
	Если ВыбраннаяКоманда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ВыбраннаяКоманда.Значение;
	
	Если Команда = "НастройкаВиджета" Тогда
		НастроитьВиджетФормы(Параметры.Форма, Параметры.ИндексВиджета);
	ИначеЕсли Команда = "СоздатьПроцесс" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/ОбщаяКоманда.СоздатьБизнесПроцессГлобальная");
	ИначеЕсли Команда = "ОткрытьМоиПроцессы" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/ОбщаяКоманда.МоиПроцессы");
	ИначеЕсли Команда = "СоздатьПисьмо" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/ОбщаяКоманда.СоздатьПисьмо");
	ИначеЕсли Команда = "СоздатьЗаписьКалендаря" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/Справочник.ЗаписиРабочегоКалендаря.Команда.СоздатьЗаписьКалендаря");
	ИначеЕсли Команда = "СоздатьТемуНаФоруме" Тогда
		ОткрытьФорму("Справочник.ТемыОбсуждений.ФормаОбъекта");
	ИначеЕсли Команда = "СоздатьКонтрольнуюКарточку" Тогда
		ОткрытьФорму("Справочник.Контроль.ФормаОбъекта");
	ИначеЕсли Команда = "СоздатьВнутреннийДокумент" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/Справочник.ВнутренниеДокументы.Команда.СоздатьВнутреннийДокумент");
	ИначеЕсли Команда = "СоздатьВходящийДокумент" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/Справочник.ВходящиеДокументы.Команда.СоздатьВходящийДокумент");
	ИначеЕсли Команда = "СоздатьИсходящийДокумент" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/Справочник.ИсходящиеДокументы.Команда.СоздатьИсходящийДокумент");
	ИначеЕсли Команда = "ОткрытьСписокФайлов" Тогда
		ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов",, Параметры.Форма);
	ИначеЕсли Команда = "СоздатьМероприятие" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/Справочник.Мероприятия.Команда.СоздатьМероприятие");
	ИначеЕсли Команда = "ДобавитьОтчетЗаСегодня" Тогда
		ПараметрыФормы = Новый Структура;
		НачалоДня = НачалоДня(ТекущаяДата());
		ПараметрыФормы.Вставить("Дата", НачалоДня);
		ОткрытьФорму("Документ.ЕжедневныйОтчет.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли Команда = "ОткрытьОтчетЗаСегодня" Тогда
		НачалоДня = НачалоДня(ТекущаяДата());
		ЕжедневныйОтчет = ТекущиеДелаДокументооборотСервер.ПолучитьЕжедневныйОтчетНаДату(НачалоДня);
		ПоказатьЗначение(, ЕжедневныйОтчет);
	ИначеЕсли Команда = "МоиЕжедневныеОтчеты" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/Документ.ЕжедневныйОтчет.Команда.ОткрытьСвоиОтчеты");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
