////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	// Для обмена по форматам ФНС.
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	// Для обмена по форматам CML 2.
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);

	// Для обмена между организациями
	Массив.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ДокументДО = Источник;
	ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
	ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	Если ТипЗнч(ДокументДО) = Тип("Структура") Тогда
		Если ДокументДО.Свойство("КонтрагентЭДО") ТОгда
			ПараметрыЭД.Контрагент = ДокументДО.КонтрагентЭДО;
		КонецЕсли;
		Если ДокументДО.Свойство("ОрганизацияЭДО") ТОгда
			ПараметрыЭД.Организация = ДокументДО.ОрганизацияЭДО;
		КонецЕсли;
		Если ДокументДО.Свойство("ДокументОбъект") ТОгда
			ДокументДО = ДокументДО.ДокументОбъект;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДокументДО) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ДокументДО = ДокументДО.Владелец.ВладелецФайла;
	КонецЕсли;
	Если ТипЗнч(ДокументДО) = Тип("СправочникСсылка.ВнутренниеДокументы") 
		Или ТипЗнч(ДокументДО) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ДокументДО.Контрагенты.Количество() > 0 Тогда
			ПараметрыЭД.Контрагент = ДокументДО.Контрагенты[0].Контрагент;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = ДокументДО.Организация;
		КонецЕсли;	
		ПараметрыЭД.ДоговорКонтрагента = "";
	ИначеЕсли ТипЗнч(ДокументДО) = Тип("СправочникСсылка.ИсходящиеДокументы") 	
		Или ТипЗнч(ДокументДО) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда	
		Если ДокументДО.Получатели.Количество() > 0 Тогда
			ПараметрыЭД.Контрагент = ДокументДО.Получатели[0].Получатель;
		КонецЕсли;	
		ПараметрыЭД.Организация = ДокументДО.Организация;
		ПараметрыЭД.ДоговорКонтрагента = "";
	ИначеЕсли ТипЗнч(ДокументДО) = Тип("СправочникСсылка.ВходящиеДокументы") 	
		Или ТипЗнч(ДокументДО) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда	
		ПараметрыЭД.Контрагент = ДокументДО.Отправитель; 
		ПараметрыЭД.Организация = ДокументДО.Организация;
		ПараметрыЭД.ДоговорКонтрагента = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения.

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС",                      "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо",                "ЮрФизЛицо");
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена ЭД.

// Определяет, является ли объект корректировочным документом.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ учета.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, объект является ли корректировочным документом.
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	
	
	Возврат Результат;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Справочник.ИсходящиеДокументы");
	СоставКомандЭДО.Исходящие.Добавить("Справочник.ВнутренниеДокументы");
	
	СоставКомандЭДО.Входящие.Добавить("Справочник.ВходящиеДокументы");
	СоставКомандЭДО.Входящие.Добавить("Справочник.ВнутренниеДокументы");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

// Работа с деревом данных ФНС.

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	

КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	

КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	

КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	

КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	

КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	

КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	

КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - Дерево значений, соответствующее макету ПрайсЛист обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры


// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
 
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//  Записывать - Булево - если Истина, то объект будет записан.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайденныйОбъект = СсылкаНаВладельца;
	
	Если ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		НайденныйОбъект = НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина) Экспорт
	
	
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина) Экспорт
	
	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников.

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//
// Возвращаемое значение:
//  Ссылка - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовыйЭлемент = Неопределено;
	
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчета" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьБанковскийСчетКонтрагента(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - имя справочника в метаданных.
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//
// Возвращаемое значение:
//  Ссылка - найденной значение.
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ИмяМетаданных = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Выборка
	|ГДЕ
	|	НЕ Выборка.ПометкаУдаления И
	|	Выборка.ИНН = &ИНН";
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = ТекстЗапроса
			+ " И Выборка.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//
// Возвращаемое значение:
//  Результат - Контрагент.Ссылка - ссылка на справочник контрагентов.
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	
	
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру реквизитов товара.
//
// Параметры:
//  РеквизитыНоменклатуры - Структура - параметры поиска.
//  СтруктураВозврата - Структура - содержит ссылки на номенклатуру, характеристику, упаковку.
//  ИД - Строка - идентификатор обмена ЭД.
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент -ссылка на контрагента (Организация или Контрагент).
//  ВидКонтрагента - Строка - вид контрагента.
//
// Возвращаемое значение:
//  ИдКонтрагента - Строка - значение ИдКонтрагента.
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	
	
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//  
// Результат запроса должен содержать свойства:
//  * АртикулНоменклатурыКонтрагента      - Строка - артикул номенклатуры контрагента;
//  * НаименованиеНоменклатурыКонтрагента - Строка - наименование номенклатуры контрагента;
//  * ЕдиницаНоменклатурыКонтрагента      - Ссылка - ссылка на единицу измерения номенклатуры контрагента;
//  * Описание                            - Строка - описание номенклатуры поставщика;
//  * Идентификатор                       - Строка - идентификатор номенклатуры контрагента;
//  * НоменклатураПоставщика              - Ссылка - ссылка на элементы номенклатуры контрагента.
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД.
//
// Параметры:
//  ТаблицаСопоставления - ТаблицаЗначений - данные сопоставления.
//  Контрагент - СправочникСсылка - ссылка на справочник контрагенты.
//  Отказ - Булево - признак ошибки.
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//
// Возвращаемое значение:
//  Структура - содержит ИмяФормы и ПараметрыОткрытияФормы.
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Заполнение реквизитов формы переданными значениями.
//
// Параметры:
//  ДанныеФормы - УправляемаяФорма - данные управляемой формы.
//  ЗначениеЗаполнения - Строка - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов.

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - Строка - адрес хранения каталога товаров;
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка - наименование перечисления.
//  ПредставлениеПеречисления - Строка - наименование значения перечисления.
//  НайденноеЗначение - ПеречислениеСсылка - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - СправочникСсылка - источник, по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	
	
КонецПроцедуры

// Получение контактной информации организации по ссылке.
//
// Параметры:
//  Организация - Ссылка - элемент справочника Организации, по которому нужно получить данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений - контактная информация по организации.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

// Возвращает название региона по коду.
//
// Параметры:
//  КодРегиона - Строка - строка, содержащая двухсимвольный код региона.
//
// Возвращаемое значение:
//  Строка - наименование региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	НазваниеРегиона = "";
	
	
	
	Возврат НазваниеРегиона;
	
КонецФункции

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	АдресЭП = "";
	
	
	
	Возврат АдресЭП;
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками.
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("БанковскийСчет");
	
	
	
	Возврат Таблица;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
	
КонецФункции

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	
	
КонецПроцедуры

// Процедура возвращает данные для заполнения заявки на получение уникального
// идентификатора абонента, добавления сертификата абонента.
//
// Параметры:
//  Организация - Произвольный - ссылка на элемент справочника Организации
//  ДанныеОрганизации - Структура - содержит данные об организации:
//   * Индекс - Строка - почтовый индекс организации;
//   * Регион - Строка - код региона организации;
//   * Район - Строка;
//   * Город - Строка;
//   * НаселенныйПункт - Строка - населенный пункт расположения организации;
//   * Улица - Строка;
//   * Дом - Строка;
//   * Корпус - Строка;
//   * Квартира - Строка;
//   * Телефон - Строка - телефон организации;
//   * ЭлектроннаяПочта - Строка - электронная почта организации;
//   * Наименование - Строка - наименование организации;
//   * ПолноеНаименование - Строка - полное наименование организации;
//   * ИНН - Строка - ИНН организации;
//   * КПП - Строка - КПП организации;
//   * ОГРН - Строка - ОГРН организации;
//   * КодИМНС - Строка - код ИМНС организации;
//   * ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//   * Фамилия - Строка - фамилия руководителя;
//   * Имя - Строка - имя руководителя;
//   * Отчество - Строка - отчество руководителя;
//
//
// Пример:
//
////////////////////////////////////////////////////////////////////////////////
//  Пример для "Управление торговлей 11"
//
//	ОрганизацияОбъект = Неопределено;
//	Попытка
//		ОрганизацияОбъект = Организация.ПолучитьОбъект();
//	Исключение
//	КонецПопытки;
//
//	ДанныеОрганизации.Очистить();
//
//	//// Возвращаемая структура должна содержать все перечисленные ниже
//	//// ключи и их значения - строки
//	//// Проверка свойств в дальнейшем не выполняется.
//
//	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
//
//	// в конфигурации "Управление торговлей" не реализовано хранение
//	// компонентов адреса, поэтому компоненты адреса остаются пустыми.
//
//	ДанныеОрганизации.Вставить("Индекс"         , "");
//	ДанныеОрганизации.Вставить("Регион"         , "");
//	ДанныеОрганизации.Вставить("Район"          , "");
//	ДанныеОрганизации.Вставить("Город"          , "");
//	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
//	ДанныеОрганизации.Вставить("Улица"          , "");
//	ДанныеОрганизации.Вставить("Дом"            , "");
//	ДанныеОрганизации.Вставить("Корпус"         , "");
//	ДанныеОрганизации.Вставить("Квартира"       , "");
//
//	Если ОрганизацияОбъект = Неопределено Тогда
//		
//		ДанныеОрганизации.Вставить("Наименование"   , "");
//		ДанныеОрганизации.Вставить("ИНН"            , "");
//		ДанныеОрганизации.Вставить("КПП"            , "");
//		ДанныеОрганизации.Вставить("ОГРН"           , "");
//		ДанныеОрганизации.Вставить("КодИМНС"        , "");
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//		
//		ДанныеОрганизации.Вставить("Фамилия"        , "");
//		ДанныеОрганизации.Вставить("Имя"            , "");
//		ДанныеОрганизации.Вставить("Отчество"       , "");
//		
//		Возврат;
//		
//	КонецЕсли;
//
//	// получение реквизитов организации
//
//	ДанныеОрганизации.Вставить("Наименование"      , ОрганизацияОбъект.Наименование);
//	ДанныеОрганизации.Вставить("ПолноеНаименование", ОрганизацияОбъект.НаименованиеПолное);
//	ДанныеОрганизации.Вставить("ИНН"               , ОрганизацияОбъект.ИНН);
//	ДанныеОрганизации.Вставить("КПП"               , ОрганизацияОбъект.КПП);
//	ДанныеОрганизации.Вставить("ОГРН"              , ОрганизацияОбъект.ОГРН);
//	ДанныеОрганизации.Вставить("КодИМНС"           , "");
//
//	ВидыЛиц = Перечисления.ЮрФизЛицо;
//	Если ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицо
//		ИЛИ ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицоНеРезидент Тогда
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	Иначе
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//	КонецЕсли;
//
//	ДанныеОрганизации.Вставить("Фамилия" , "");
//	ДанныеОрганизации.Вставить("Имя"     , "");
//	ДанныеОрганизации.Вставить("Отчество", "");
//
//	Руководитель = ОрганизацияОбъект.ТекущийРуководитель;
//	Если НЕ Руководитель.Пустая() Тогда
//		
//		ФИОМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Руководитель.Наименование, " ");
//		КоличествоЭлементов = ФИОМассив.Количество();
//		
//		Если КоличествоЭлементов > 0 Тогда
//			ДанныеОрганизации.Фамилия = ФИОМассив[0];
//		КонецЕсли;
//		
//		Если КоличествоЭлементов > 1 Тогда
//			ДанныеОрганизации.Имя = ФИОМассив[1];
//		КонецЕсли;
//		
//		Если КоличествоЭлементов > 2 Тогда
//			ДанныеОрганизации.Отчество = ФИОМассив[2];
//		КонецЕсли;
//		
//	КонецЕсли;
//
//	ДанныеОрганизации.Вставить("Телефон", "");
//	ДанныеОрганизации.Вставить("ЭлектроннаяПочта", "");
//
//	СтруктураПоиска = Новый Структура;
//	СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//	СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
//	СтрокиТелефона = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
//
//	Если СтрокиТелефона.Количество() > 0 Тогда
//		ДанныеОрганизации.Телефон = СтрокиТелефона[0].НомерТелефона;
//	КонецЕсли;
//
//	СтруктураПоиска = Новый Структура;
//	СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
//	СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
//	СтрокиЭлектроннаяПочта = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
//
//	Если СтрокиЭлектроннаяПочта.Количество() > 0 Тогда
//		ДанныеОрганизации.ЭлектроннаяПочта = СтрокиЭлектроннаяПочта[0].АдресЭП;
//	КонецЕсли;
//
////////////////////////////////////////////////////////////////////////////////
//
//  Пример для "Бухгалтерия предприятия, редакция 3.0":
//
//	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
//			"НаименованиеПолное, ИНН, КПП, ОГРН, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
//	
//	ОрганизацияФизЛицо = СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//	
//	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
//	
//	ДанныеОрганизации.Вставить("Наименование"   , СвойстваОрганизации.НаименованиеПолное);
//	ДанныеОрганизации.Вставить("ИНН"            , СвойстваОрганизации.ИНН);
//	ДанныеОрганизации.Вставить("КПП"            , СвойстваОрганизации.КПП);
//	ДанныеОрганизации.Вставить("ОГРН"           , СвойстваОрганизации.ОГРН);
//	ДанныеОрганизации.Вставить("КодИМНС"        , СвойстваОрганизации.КодНалоговогоОргана);
//	
//	Если ОрганизацияФизЛицо Тогда
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//	Иначе
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	КонецЕсли;
//	
//	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
//	ДанныеОрганизации.Вставить("Фамилия" , ОтветственныеЛица.РуководительФИО.Фамилия);
//	ДанныеОрганизации.Вставить("Имя"     , ОтветственныеЛица.РуководительФИО.Имя);
//	ДанныеОрганизации.Вставить("Отчество", ОтветственныеЛица.РуководительФИО.Отчество);
//	
//
//	Если ОрганизацияФизЛицо Тогда
//		ОбъектКонтактнойИнформации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИндивидуальныйПредприниматель");
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
//		ИмяСправочника = "ФизическиеЛица";
//	Иначе
//		ОбъектКонтактнойИнформации = Организация;
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
//		ИмяСправочника = "Организации";
//	КонецЕсли;
//	
//	ДанныеОрганизации.Вставить("Индекс"         , "");
//	ДанныеОрганизации.Вставить("Регион"         , "");
//	ДанныеОрганизации.Вставить("Район"          , "");
//	ДанныеОрганизации.Вставить("Город"          , "");
//	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
//	ДанныеОрганизации.Вставить("Улица"          , "");
//	ДанныеОрганизации.Вставить("Дом"            , "");
//	ДанныеОрганизации.Вставить("Корпус"         , "");
//	ДанныеОрганизации.Вставить("Квартира"       , "");
//	
//	ТекстЗапроса =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КонтактнаяИнформация.ЗначенияПолей
//	|ИЗ
//	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
//	|ГДЕ
//	|	КонтактнаяИнформация.Ссылка = &Ссылка
//	|	И КонтактнаяИнформация.Вид = &Вид";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапроса;
//	Запрос.УстановитьПараметр("Ссылка", ОбъектКонтактнойИнформации);
//	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		
//		АдресСтруктурой = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей);
//		Если АдресСтруктурой.Свойство("Индекс") Тогда
//			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Регион") Тогда
//			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
//			ДанныеОрганизации.Вставить("КодРегиона", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Район") Тогда
//			ДанныеОрганизации.Район = АдресСтруктурой.Район;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Город") Тогда
//			ДанныеОрганизации.Город = АдресСтруктурой.Город;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
//			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Улица") Тогда
//			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Дом") Тогда
//			ДанныеОрганизации.Дом = АдресСтруктурой.Дом;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Корпус") Тогда
//			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпус;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Квартира") Тогда
//			ДанныеОрганизации.Квартира = АдресСтруктурой.Квартира;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ДанныеОрганизации.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)));
//
//	ДанныеОрганизации.Вставить("ЭлектроннаяПочта", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, Справочники.ВидыКонтактнойИнформации.EmailОрганизации)));
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	
КонецПроцедуры

// Заполняет структуру, содержащую информацию об адресе участника ЭДО.
//
// Параметры:
//  СтруктураАдреса - структура - информация об адресе;
//   * Поля структуры для адреса РФ.
//    ** АдресРФ - Булево - признак, что адрес РФ;
//    ** Индекс - Строка - почтовый индекс организации;
//    ** Регион - Строка - код региона организации;
//    ** Район - Строка;
//    ** Город - Строка;
//    ** НаселенныйПункт - Строка - населенный пункт расположения организации;
//    ** Улица - Строка;
//    ** Дом - Строка;
//    ** Корпус - Строка;
//    ** Квартира - Строка;
//    ** Поля структуры для иностранного адреса или адреса РФ строкой.
//   * КодСтраны - Строка - код страны;
//    ** АдресТекст - Строка - представление адреса;
//  СтруктураПараметров - Структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента - Строка - имя метаданных справочника;
//  ВидАдреса - Строка - "Факт" или "Юр";
//  ТекстОшибки - Строка - описание ошибки.
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "") Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодГАР", "");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов.

// Формирует текст НДС по этапу оплаты.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС().
//  ПроцентПлатежа       - Число - Процент платежа по этапу.
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС.
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	
	
	Возврат ТекстНДС;
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число - сумма, по которой надо получить представление.
//  КодВалюты - Число - код используемой валюты.
//  ЧН - Строка - параметр нулевого значения числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Строка - текстовое представление. 
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Результат = "";
	
	
	
	Возврат Результат;
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты - Число - код используемой валюты.
//
// Возвращаемое значение:
//  Строка - сумма прописью.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Результат = "";
	
	
	
	Возврат Результат;
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа.
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст.
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//  Результат - Строка - текстовое представление ставки НДС.
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	Результат = "";
	
	
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение, по которому надо найти ответственного.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ответственное лицо.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", Контрагент.Метаданные()) 
		И ЗначениеЗаполнено(Контрагент.Ответственный) Тогда
		ОтветственныйПоЭД =Контрагент.Ответственный;
	Иначе 	
		ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//
// Возвращаемое значение:
//  Булево - Истина если физическое лицо.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	
	
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Вывод данных о скидках в печатную форму документа.
//
// Параметры:
//  Товары - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - список товаров.
//  ИспользоватьСкидки - Булево - используются скидки.
// 
// Возвращаемое значение:
//  Булево - есть скидки.
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Результат = "";
	
	
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов.

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы.
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа.
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект.
//  СтруктураПараметров - Структура - структура изменяемых реквизитов.
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	// Из Файла документа ДО передается ЭП и для добавления в файл ЭД(ЭДПрисоединенныеФайлы) 
	Если СтруктураПараметров.Свойство("ЭПФайла") И СтруктураПараметров.ЭПФайла.Количество() > 0 Тогда
		Для каждого ЭПФайла Из СтруктураПараметров.ЭПФайла Цикл
			ОбменСКонтрагентамиДОВызовСервера.ЗанестиИнформациюОПодписи(
				Объект.Ссылка,
				ЭПФайла.НоваяПодписьДвоичныеДанные,
				ЭПФайла.Отпечаток,
				ЭПФайла.ДатаПодписи,
				ЭПФайла.Комментарий,
				ЭПФайла.ИмяФайлаПодписи,
				ЭПФайла.КомуВыданСертификат,
				ЭПФайла.ДвоичныеДанныеСертификата,
				ЭПФайла.ПодписьВерна,
				ЭПФайла.ДатаПроверкиПодписи,
				ЭПФайла.УникальныйИдентификатор);
		КонецЦикла;
		СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Подписан);
	КонецЕсли;
	
	// Перенос передаваемых реквизитов, пришедших в card.xml от отправителя, 
	// в хранилище ДополнительныеРеквизиты ЭДПрисоединенныеФайлы
	// для последующего заполненния документа ДО.
	ДополнительныеПараметры = "";
	Если СтруктураПараметров.Свойство("ДополнительныеПараметры", ДополнительныеПараметры)
		И ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		СтруктураИменПередаваемыхРеквизитов = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСтруктуруИменПередаваемыхРеквизитов();
		
		Если СтруктураПараметров.Свойство("ДополнительныеРеквизиты") 
			И ЗначениеЗаполнено(СтруктураПараметров.ДополнительныеРеквизиты) Тогда
			ДополнительныеРеквизиты = СтруктураПараметров.ДополнительныеРеквизиты;
		Иначе
			ДополнительныеРеквизиты = Новый Структура;
		КонецЕсли;
		
		Для Каждого КлючИмяПередаваемогоРеквизита Из СтруктураИменПередаваемыхРеквизитов Цикл
			ИмяПередаваемогоРеквизита = КлючИмяПередаваемогоРеквизита.Ключ;
			Если ДополнительныеПараметры.Свойство(ИмяПередаваемогоРеквизита) 
				И ЗначениеЗаполнено(ДополнительныеПараметры[ИмяПередаваемогоРеквизита]) Тогда
			
				ДополнительныеРеквизиты.Вставить(ИмяПередаваемогоРеквизита, ДополнительныеПараметры[ИмяПередаваемогоРеквизита]);
			КонецЕсли; 
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
			СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("СтатусЭД") 
		И (СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение 
		Или СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
		Или СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
		Или СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.Получен 
		Или СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.Подписан) 
		Тогда
		
		Если СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
			Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(Объект) Тогда
				ВерсияФайла = ОбменСКонтрагентамиДОВызовСервера.ФайлПоСвязиЭДПФИФайлов(Объект.ЭлектронныйДокументВладелец);
				Если ВерсияФайла <> Неопределено Тогда
					ВнутреннийДокументСсылка = ВерсияФайла.Владелец.ВладелецФайла;
					Если ЗначениеЗаполнено(ВнутреннийДокументСсылка) Тогда
						ВнутреннийДокумент = ВнутреннийДокументСсылка.ПолучитьОбъект();
						СтрокаТЧСтороны = ВнутреннийДокумент.Стороны.Найти(1,"Номерстроки");
						Если СтрокаТЧСтороны <> Неопределено Тогда
							ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
								ВнутреннийДокумент.Ссылка, 
								ВнутреннийДокумент.Стороны[1].Сторона,
								Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку,
								Перечисления.НаправленияЭД.Входящий);
							
							СтрокаТЧСтороны.ДатаПодписи = ТекущаяДатаСеанса();
							СтрокаТЧСтороны.Подписал = Пользователи.АвторизованныйПользователь();
							СтрокаТЧСтороны.Подписан = Истина;
							ВнутреннийДокумент.Записать();
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		// Пришел ответный титул ФНС на сторону отправителя. Проставляется признак подписанности.
		ИначеЕсли СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
			Если СтруктураПараметров.Свойство("ТипЭлементаВерсииЭД") И ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СтруктураПараметров.ТипЭлементаВерсииЭД) Тогда
				ВерсияФайла = ОбменСКонтрагентамиДОВызовСервера.ФайлПоСвязиЭДПФИФайлов(СтруктураПараметров.ЭлектронныйДокументВладелец);
				Если ВерсияФайла <> Неопределено Тогда
					ВнутреннийДокументСсылка = ВерсияФайла.Владелец.ВладелецФайла;
					Если ЗначениеЗаполнено(ВнутреннийДокументСсылка) Тогда
						ЗаблокироватьДанныеДляРедактирования(ВнутреннийДокументСсылка);
						ВнутреннийДокумент = ВнутреннийДокументСсылка.ПолучитьОбъект();
						СтрокаТЧСтороны = ВнутреннийДокумент.Стороны.Найти(СтруктураПараметров.ВладелецЭД.Контрагент,"Сторона");
						Если СтрокаТЧСтороны <> Неопределено Тогда
							СтруктураПараметров.Свойство("ДатаФормированияЭДОтправителем",СтрокаТЧСтороны.ДатаПодписи);
							СтруктураПараметров.Свойство("Подписант",СтрокаТЧСтороны.Подписал);
							СтрокаТЧСтороны.Подписан = Истина;
							ВнутреннийДокумент.Записать();
						КонецЕсли; 
						РазблокироватьДанныеДляРедактирования(ВнутреннийДокументСсылка);
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВерсияФайла = ОбменСКонтрагентамиДОВызовСервера.ФайлПоСвязиЭДПФИФайлов(Объект);
			Если ВерсияФайла <> Неопределено Тогда
				Если СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
					МассивДобавляемыхПодписйВДО = Новый Массив;
					МассивДанныхОПодписяхЭД = ОбменСКонтрагентамиДОВызовСервера.ПолучитьВсеПодписиЭД(Объект);
					Если МассивДанныхОПодписяхЭД.Количество() > 0 Тогда
						МассивДанныхОПодписяхДО = ФайловыеФункции.ПолучитьВсеПодписи(ВерсияФайла, Новый УникальныйИдентификатор);
						МассивДанныхОПодписяхДОКоличество = МассивДанныхОПодписяхДО.Количество();
						Для каждого ПодписьДокументаЭД Из МассивДанныхОПодписяхЭД Цикл
							
							ДвоичныеДанныеПодписиЭД = ПодписьДокументаЭД.СвойстваПодписи.Подпись;
							Если МассивДанныхОПодписяхДОКоличество > 0 Тогда
								ЕстьТакаяПодпись = Ложь;
								Для Каждого ПодписьДокументаДО Из МассивДанныхОПодписяхДО Цикл
									ДвоичныеДанныеПодписиДО = ПолучитьИзВременногоХранилища(ПодписьДокументаДО.АдресПодписи);
									Если ДвоичныеДанныеПодписиЭД = ДвоичныеДанныеПодписиДО Тогда
										ЕстьТакаяПодпись = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если ЕстьТакаяПодпись = Ложь Тогда
									ПодписьДокументаЭД.ПодписанныйОбъект = ВерсияФайла;
									МассивДобавляемыхПодписйВДО.Добавить(ПодписьДокументаЭД);
									СертификатДвоичныеДанные = ПодписьДокументаЭД.СвойстваПодписи.Сертификат;
									ДатаПодписанияКонтрагентом = ПодписьДокументаЭД.СвойстваПодписи.ДатаПодписи;
								КонецЕсли; 
							Иначе
								МассивДобавляемыхПодписйВДО.Добавить(ПодписьДокументаЭД);
								СертификатДвоичныеДанные = ПодписьДокументаЭД.СвойстваПодписи.Сертификат;
								ДатаПодписанияКонтрагентом = ПодписьДокументаЭД.СвойстваПодписи.ДатаПодписи;
							КонецЕсли;
							
						КонецЦикла;
						Если МассивДобавляемыхПодписйВДО.Количество() > 0 Тогда
							РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДобавляемыхПодписйВДО);
							Если ЗначениеЗаполнено(СертификатДвоичныеДанные) Тогда
								Запрос = Новый Запрос;
								Запрос.Текст = 
								"ВЫБРАТЬ
								|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайла,
								|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
								|	ВЫРАЗИТЬ(СостоянияЭД.СсылкаНаОбъект.Владелец.ВладелецФайла КАК Справочник.ВнутренниеДокументы) КАК ВнутреннийДокумент,
								|	ВнутренниеДокументыСтороны.Сторона КАК Контрагент,
								|	ВнутренниеДокументыСтороны.НомерСтроки КАК НомерСтрокиТЧСтороны
								|ИЗ
								|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
								|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
								|		ПО СостоянияЭД.ЭлектронныйДокумент.Контрагент = ВнутренниеДокументыСтороны.Сторона
								|			И ((ВЫРАЗИТЬ(СостоянияЭД.СсылкаНаОбъект.Владелец.ВладелецФайла КАК Справочник.ВнутренниеДокументы)) = ВнутренниеДокументыСтороны.Ссылка)
								|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
								|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
								|			И (ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка ЕСТЬ NULL )
								|ГДЕ
								|	ЭДПрисоединенныеФайлы.Ссылка = &ЭДПрисоединенныйФайл
								|	И СостоянияЭД.СсылкаНаОбъект.Владелец.ВладелецФайла ССЫЛКА Справочник.ВнутренниеДокументы
								|	И ВнутренниеДокументыСтороны.Подписал.Ссылка ЕСТЬ NULL ";
								
								Запрос.УстановитьПараметр("ЭДПрисоединенныйФайл", Объект);
								РезультатЗапроса = Запрос.Выполнить();
								Выборка = РезультатЗапроса.Выбрать();
								Если Выборка.Следующий() Тогда
									ПодписантОтКонтрагента = ОбменСКонтрагентамиДОВызовСервера.НайтиДобавитьКонтактноеЛицоИзСертификата(
										Выборка.Контрагент,СертификатДвоичныеДанные);
									Если ЗначениеЗаполнено(ПодписантОтКонтрагента) Тогда
										ЗаблокироватьДанныеДляРедактирования(Выборка.ВнутреннийДокумент);
										ВнутреннийДокумент = Выборка.ВнутреннийДокумент.ПолучитьОбъект();
										СтрокаТЧСтороны = ВнутреннийДокумент.Стороны.Найти(Выборка.НомерСтрокиТЧСтороны,"НомерСтроки");
										СтрокаТЧСтороны.Подписал = ПодписантОтКонтрагента;
										СтрокаТЧСтороны.ДатаПодписи = ДатаПодписанияКонтрагентом;
										СтрокаТЧСтороны.Подписан = Истина;
										ВнутреннийДокумент.Записать();
										РазблокироватьДанныеДляРедактирования(Выборка.ВнутреннийДокумент);
									КонецЕсли; 
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли; 
					КонецЕсли;
				ИначеЕсли СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем 
					Или СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
					
					ЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект,"ВладелецФайла");
					Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"Контрагент");
					Если СтруктураПараметров.Свойство("ТекстУточнения") 
						И ЗначениеЗаполнено(СтруктураПараметров.ТекстУточнения) Тогда
						Комментарий = СтруктураПараметров.ТекстУточнения;
					Иначе
						Комментарий = Неопределено;
					КонецЕсли; 
					ВнутреннийДокументСсылка = ВерсияФайла.Владелец.ВладелецФайла;
					
					//РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
					//	ВнутреннийДокументСсылка, 
					//	Контрагент, 
					//	Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем,,
					//	Комментарий); 
						
					Если СтруктураПараметров.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						
						ЗаблокироватьДанныеДляРедактирования(ВнутреннийДокументСсылка);
						ВнутреннийДокумент = ВнутреннийДокументСсылка.ПолучитьОбъект();
						СтрокаТЧСтороны = ВнутреннийДокумент.Стороны.Найти(Контрагент,"Сторона");
						Если Не СтрокаТЧСтороны = Неопределено И СтрокаТЧСтороны.Подписан Тогда
							СтрокаТЧСтороны.Подписан = Ложь;
							ВнутреннийДокумент.Записать();
						КонецЕсли; 
						РазблокироватьДанныеДляРедактирования(ВнутреннийДокументСсылка);
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - Булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	
КонецПроцедуры

// Проверка выполнения условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - Ссылка - ссылка на электронный документ.
//
// Возвращаемое значение:
//  Булево - Истина, если готов к утверждению.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект.
//  РедактированиеРазрешено - Булево - возвращает разрешено или нет редактирование.
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, РедактированиеРазрешено) Экспорт

	СсылкаНаОбъект = Источник.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СостояниеВерсииЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И НЕ (Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - Булево, Неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//                                                       (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки.
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Результат = Истина;
	
	
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю.

// Устарела.Следует использовать ЭлектронноеВзаимодействиеПереопределяемый.СоответствиеКодовРеквизитовИПредставлений.
// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - ТаблицаЗначений - соответствие параметров для типов метаданных их пользовательским
//                          представлениям содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции.

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	
	
	Возврат Таблица;
	
КонецФункции

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных.
//
// Параметры:
//  СсылкаНаФайл - Строка - адрес хранилища файла с реквизитами контрагента.
//  СтруктураВозврата - Структура - перечень параметров.
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//  ОшибкаРазбора - Строка - текст, описание ошибки.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста),
// то используется функция БСП: ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка - Ссылка - произвольная ссылка.
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - Структура - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки.

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
									Метаданные.Справочники.Контрагенты.Представление());
	Иначе
		СписокВозврата.Добавить(Справочники.ВнутренниеДокументы.ПустаяСсылка(),
			Метаданные.Справочники.ВнутренниеДокументы.Представление());
	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ДокументСсылка - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД.
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемента справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность.

// Метод заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на документы ИБ (в качестве возможных значений следует принимать те типы 
//                          документов, на основании которых в данном прикладном решении формируется электронный
//                          документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, то помещать пустые 
//                             значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра;
//                             * значение соответствия - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями.

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - данные для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

// Заполнение состояния ЭДО.
//
// Параметры:
//  Форма - Форма - текущая форма.
//
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
	
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	СписокСпособовОбработки.Добавить("ВнутренниеДокументы", НСтр("ru = 'Внутренний документ'; en = 'Internal document'"), Истина);
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента) Экспорт 
	
	
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПроизвольныйЭД, НСтр("ru = 'Внутренний документ	'; en = 'Internal document'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции.

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоТорг12ПродавецФНС).
// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы,
//                                    по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
		
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоТОРГ12ПокупательФНС).
// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоАкт501ИсполнительФНС).
// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоАкт501ЗаказчикФНС).
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоСчетуФактуреФНС).
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС).
// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - дополнительные параметры для подготовки данных.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоКаталогуТоваровCML).
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоПрайсЛисту).
// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоСчету).
// Подготавливает данные для электронного документа типа Счет формата CML 4.02.
//  
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоЗаказуТоваров).
// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоОтветуНаЗаказ).
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара).
// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара).
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка- ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьСоответствиеСтавокНДС).
// Необходимо заполнить соответствие ставок и сумм НДС.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие ставок и сумм НДС.
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - Структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - ТаблицаЗначений - содержит колонки: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//                                        НаименованиеДляСообщенияПользователю, Наименование - передается Оператору ЭДО,
//                                        НаименованиеДляСообщенияПользователю.
//  МассивКонтрагентов - Массив - ссылки на участников-контрагентов.
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка обмена с контрагентом.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Возвращает числовое значение ставки НДС по значению перечисления.
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС.
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом.
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Результат = 0;
	

	Возврат Результат;
	
КонецФункции

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление;
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Возврат ЗначениеНДС;
	
КонецФункции

// Заполняет таблицу значений ДополнительныеДанные по отправляемому документу по ЭДО
//
// Параметры:
//  ДокументОснование - ДокументСсылка или СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  ДополнительныеДанные - ТаблицаЗначений - данные для формирования электронного документа.
//
Процедура ЗаполнитьДополнительныеДанныеПоДокументуОснования(ДокументОснование, ДополнительныеДанные) Экспорт
	
	ОбменСКонтрагентамиДОВызовСервера.ЗаполнитьДополнительныеДанныеПоДокументуОснования(ДокументОснование, ДополнительныеДанные);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки.
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);
	
	Если ПустаяСтрока(ОфициальноеНаименование) Тогда
		ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПолноеНаименование", Истина, ДеревоРазбора);
	КонецЕсли; 
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.УстановитьНовыйКод();
	Иначе
		Контрагент = СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	Контрагент.Наименование = ОфициальноеНаименование;
	Контрагент.НаименованиеПолное = ОфициальноеНаименование;
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП;
	
	Контрагент.Записать();
	КонтрагентСсылка = Контрагент.Ссылка;
	
	Отбор = Новый Структура("Реквизит", "СтрокаТЧРасчетныйСчет");
	МассивСчетов = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
	
	Для Каждого ЭлементМассива Из МассивСчетов Цикл
		
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "НомерСчета", Истина, ДеревоРазбора);
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Владелец", КонтрагентСсылка);
		
		БанковскийСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("БанковскиеСчетаОрганизаций", НомерСчета, ДопПараметры);
		Если БанковскийСчет = Неопределено Тогда
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.Владелец = КонтрагентСсылка;
			БанковскийСчет.НомерСчета = НомерСчета;
		Иначе
			БанковскийСчет = БанковскийСчет.ПолучитьОбъект();
			БанковскийСчет.Владелец = КонтрагентСсылка;
		КонецЕсли;
		НаименованиеСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "Комментарий", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(НаименованиеСчета) Тогда
			БанковскийСчет.Наименование = НаименованиеСчета;
		Иначе
			БанковскийСчет.Наименование = НомерСчета;
		КонецЕсли;
		
		БанкБИК = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкБИК", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(БанкБИК) Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Код", БанкБИК);
			Банк = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", ,ПараметрыПоиска);
			
			Если Не ЗначениеЗаполнено(Банк) Тогда
				Банк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
				Банк.Наименование =  ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкНаименование", Истина, ДеревоРазбора);
				Банк.Код = БанкБИК;
			Иначе
				Банк = Банк.ПолучитьОбъект();
			КонецЕсли;
			
			Банк.КоррСчет = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкСчетКорр", Истина, ДеревоРазбора);
			Банк.Записать();
			
			БанковскийСчет.Банк = Банк.Ссылка;
		КонецЕсли;
		
		БанковскийСчет.Записать();
		
	КонецЦикла;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Функция СоздатьПерезаполнитьБанковскийСчетКонтрагента(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
	Иначе
		НовЭл = Справочники.БанковскиеСчета.СоздатьЭлемент();
	КонецЕсли;
	
	НовЭл.НомерСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "НомерСчета");
	НовЭл.Владелец = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Владелец");
	НовЭл.Банк = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Банк", , ДеревоРазбора);
	НовЭл.Наименование = СтрокаОбъекта.ОписаниеОбъекта;
	
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'; en = 'Creating item of %1 catalog.'"),
			НСтр("ru ='Банковские счета'; en = 'Bank accounts'")) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 2, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Функция БанковскийСчет(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Счет,
	|	0 КАК Порядок
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	1
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Счет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Счет = Выборка.Счет;
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

Функция ЗначениеСуммыНДС(Сумма, СтавкаНДС)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Результат = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Результат = Окр(Сумма * 0.1, 2);
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		Результат = Окр(Сумма * 0.18, 2);
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтроки(Строка)
	
	Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	
КонецФункции

#КонецОбласти
