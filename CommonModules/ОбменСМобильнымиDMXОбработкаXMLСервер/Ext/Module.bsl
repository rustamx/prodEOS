
#Область ПрограммныйИнтерфейс

// Выполняет обработку одного объекта .
//
// Параметры:
//  ДанныеОбъекта			 - Соответствие - Прочитанные данные объекта который нужно обработать;
//  ПисьмаКОтправке			 - Массив - Массив ссылок на письма, которые необходимо отправить после обработки всех XDTO сообщения;
//  СвязиКУстановке			 - Массив - Массив связей которые нужно установить между объектами;
//  ПараметрыСинхронизации	 - Структура - кешированные параметры обмена
//
Процедура ОбработатьДанныеОбъектаDMX(ДанныеОбъекта, ПисьмаКОтправке, СвязиКУстановке, ПараметрыСинхронизации) Экспорт

	ИмяТипа = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ИмяТипа", "Строка");
	МобильныйКлиент = ПараметрыСинхронизации.МобильныйКлиент;
	ВерсияКлиента = ПараметрыСинхронизации.ВерсияКлиента;

	// КОМАНДЫ

	Если СтрСравнить(ИмяТипа, "Connect") = 0 Тогда
		ПодключитьНовоеУстройство(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "Disconnect") = 0 Тогда
		ОтключитьУстройство(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "GetFile") = 0 Тогда
		ПередатьОдинФайл(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента);

	ИначеЕсли СтрСравнить(ИмяТипа, "NotificationSubscriberID") = 0 Тогда
		УстановитьИдентификаторПодписчика(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента);

	ИначеЕсли СтрСравнить(ИмяТипа, "UsePushNotificatios") = 0 Тогда
		НастроитьУведомления(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента);

	// ПРИКЛАДНЫЕ ОБЪЕКТЫ

	ИначеЕсли СтрСравнить(ИмяТипа, "ClientInfo") = 0 Тогда
		ЗаписатьИнформациюОКлиенте(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "ProblemReportFromUser") = 0 Тогда
		ЗаписатьСообщениеОПроблемеОтПользователя(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "ObjectDeletion") = 0 Тогда
		ЗаписатьУдалениеОбъекта(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);


	ИначеЕсли СтрСравнить(ИмяТипа, "Addressee") = 0 Тогда
		ЗаписатьАдресатаПочтовыхСообщений(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "CalendarEvent") = 0 Тогда
		ЗаписатьЗаписьРабочегоКалендаря(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "Control") = 0 Тогда
		ЗаписатьКонтроль(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "ExecutionProcess") = 0 Тогда
		ЗаписатьПроцессИсполнение(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "File") = 0 Тогда
		ЗаписатьФайл(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "MailTextTemplate") = 0 Тогда
		ЗаписатьШаблонТекстаПисьма(ДанныеОбъекта, МобильныйКлиент);

		
	ИначеЕсли СтрСравнить(ИмяТипа, "OutgoingMail") = 0 Тогда
		ЗаписатьИсходящееПисьмо(ДанныеОбъекта, ПисьмаКОтправке, СвязиКУстановке, 
		МобильныйКлиент, ПараметрыСинхронизации);
		
	// ТСК Грачев А.А. 20.08.2018 {
	// цель изменения: РА МП
	ИначеЕсли СтрСравнить(ИмяТипа, "ra_Signal") = 0 Тогда
		Записать_ra_Signal(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);
	// ТСК Грачев А.А. 20.08.2018 }
		
	// ТСК Близнюк С.И.; 30.10.2018; task#1602{
	ИначеЕсли СтрСравнить(ИмяТипа, "ra_Nesootvetstvie") = 0 Тогда
		Записать_ra_Nesootvetstvie(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "ra_ZayavkaNaKontrolnuyuOperaciyu") = 0 Тогда
		Записать_ra_ZayavkaNaKontrolnuyuOperaciyu(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);
		
	// ТСК Близнюк С.И.; 30.10.2018; task#1602}
	ИначеЕсли СтрСравнить(ИмяТипа, "MailFolderSynchronizationSettings") = 0 Тогда
		ЗаписатьНастройкиСинхронизацииПапок(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "DataExpirationSettings") = 0 Тогда
		ЗаписатьНастройкиУстареванияДанных(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "MaxFileSizeToDownloadSetting") = 0 Тогда
		ЗаписатьНастройкуМаксимальныйРазмерФайла(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "MailFooterSettings") = 0 Тогда
		ЗаписатьНастройкиПодписейКПисьмам(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "MailSynchronizationSettings") = 0 Тогда
		ЗаписатьНастройкиСинхронизацииПочты(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "CalendarSynchronizationSettings") = 0 Тогда
		ЗаписатьНастройкиСинхронизацииКалендаря(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "TaskSynchronizationSettings") = 0 Тогда
		ЗаписатьНастройкиСинхронизацииЗадач(ДанныеОбъекта, МобильныйКлиент);

	ИначеЕсли СтрСравнить(ИмяТипа, "MonitoringSynchronizationSettings") = 0 Тогда
		ЗаписатьНастройкиСинхронизацииКонтроля(ДанныеОбъекта, МобильныйКлиент);


	ИначеЕсли СтрСравнить(ИмяТипа, "TaskRedirection") = 0 Тогда
		ЗаписатьПеренаправлениеЗадачи(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "TaskAcception") = 0 Тогда
		ЗаписатьПринятиеЗадачиНаИсполнение(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "TaskExecution") = 0 Тогда
		ЗаписатьРезультатВыполненияЗадачи(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "ProcessStateChange") = 0 Тогда
		ЗаписатьСостояниеПроцесса(ДанныеОбъекта, МобильныйКлиент);


	ИначеЕсли СтрСравнить(ИмяТипа, "ObjectInFolder") = 0 Тогда
		ЗаписатьОбъектВПапке(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "ObjectReadState") = 0 Тогда
		ЗаписатьУстановкуСостоянияПрочтенности(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);

	ИначеЕсли СтрСравнить(ИмяТипа, "ObjectFlag") = 0 Тогда
		ЗаписатьФлагОбъекта(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации);


	ИначеЕсли СтрСравнить(ИмяТипа, "JournalRecord") = 0 Тогда
		ЗаписатьСобытиеПротокола(ДанныеОбъекта, МобильныйКлиент);

	Иначе

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрШаблон(НСтр("ru = 'В сообщении обнаружен неизвестный тип объекта %1'; en = 'Unknown object type %1 was found in message'"), ИмяТипа), Ложь, 
			МобильныйКлиент);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция ПолучитьДанныеСтроки(КоллекцияЭлементов, ЭлементКоллекции)

	Если ТипЗнч(КоллекцияЭлементов) = Тип("Соответствие") Тогда
		Возврат ЭлементКоллекции.Значение;
	Иначе
		Возврат ЭлементКоллекции;
	КонецЕсли;

КонецФункции

Процедура СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент)

	ШаблонСообщения = НСтр("ru = 'Неизвестная версия ""%1"" для объекта ""%2""';
						  |en = 'Unknown version ""%1"" for object ""%2""'; en = 'Unknown version ""%1"" for object ""%2""'");

	ТекстСообщениея = СтрШаблон(ШаблонСообщения, 
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка"), 
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка"));

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
		ТекстСообщениея, Ложь, МобильныйКлиент);

КонецПроцедуры

Функция СформироватьСообщениеОбОтсутствииОжидаемогоРеквизита(ИмяТипа, ИмяАтрибута)

	ТекстСообщения = 
		НСтр("ru = 'Не найден ожидаемый аттрибут ""%2"" с типом ""%1""';
			 |en = 'Expected attribute (%2) of type ""%1"" not found'; en = 'Expected ""%2"" attribute with ""%1"" type not found'");

	Возврат СтрШаблон(ТекстСообщения, ИмяТипа, ИмяАтрибута);

КонецФункции

Функция ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, ИмяРеквизита, ИмяТипа = Неопределено, Обязательный = Истина)

	Значение = СтруктураДанныхОбъекта[ВРег(ИмяРеквизита)];

	// Читаем значение атрибута из потока данных
	Если Значение = Неопределено Тогда

		Если Обязательный Тогда

			ВызватьИсключение 
				СформироватьСообщениеОбОтсутствииОжидаемогоРеквизита(
					ИмяТипа, 
					ИмяРеквизита);

		Иначе

			Возврат Значение;

		КонецЕсли;

	КонецЕсли;

	// Получаем значение нужного типа 
	Если ИмяТипа = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат XMLЗначение(Тип(ИмяТипа), Значение);
	КонецЕсли;

КонецФункции

Функция ПолучитьСсылкуСоставногоТипа(ДанныеОбъекта)

	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипЗначения   = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Type", "Строка");
	Идентификатор = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID"  , "Строка");

	Возврат ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(ТипЗначения, Идентификатор);

КонецФункции

#КонецОбласти

#Область ОбработкаКоманд

#Область ПодключитьНовоеУстройство

Процедура ПодключитьНовоеУстройство(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ПодключитьНовоеУстройствоПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ПодключитьНовоеУстройствоПоВерсии206(ДанныеОбъекта, МобильныйКлиент) Экспорт 

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подключения нового клиента'; en = 'Starting new client connection'"),
		Ложь, МобильныйКлиент);

	ПериодПервичнойЗагрузки = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "InitialPeriod", "Число", Ложь);
	Если Не ЗначениеЗаполнено(ПериодПервичнойЗагрузки) Тогда
		ПериодПервичнойЗагрузки = 7;
	КонецЕсли;
		
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки,
		ПериодПервичнойЗагрузки);

	УстановитьПривилегированныйРежим(Истина);

	ОбменСМобильнымиСервер.НайтиСоздатьЦентральныйУзелОбменаСМобильнымиКлиентами();

	ПапкиПисемДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			ПользователиКлиентСервер.ТекущийПользователь(), 
			Истина);

	РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПапкиПисемДляСинхронизации);

	УстановитьПривилегированныйРежим(Ложь);

	ПараметрыСинхронизации = 
		ОбменСМобильнымиСервер.ПолучитьПараметрыСинхронизации(ПользователиКлиентСервер.ТекущийПользователь());

	ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьПочтуДляПервичнойЗагрузки(
			МобильныйКлиент, ПараметрыСинхронизации);

	ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьЗадачиДляПервичнойЗагрузки(
		МобильныйКлиент, ПараметрыСинхронизации);

	ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьКалендарьДляПервичнойЗагрузки(
		МобильныйКлиент, ПараметрыСинхронизации);

	ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьКонтрольДляПервичнойЗагрузки(
		МобильныйКлиент, ПараметрыСинхронизации);

КонецПроцедуры

#КонецОбласти

#Область ОтключитьУстройство

Процедура ОтключитьУстройство(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ОтключитьУстройствоПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ОтключитьУстройствоПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Отключения мобильного клиента'; en = 'Mobile client disconnections'"),
		Ложь,
		МобильныйКлиент);

	УстановитьПривилегированныйРежим(Истина);
	МобильныйКлиент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

	ВызватьИсключение "СтопДальнейшейОбработки";

КонецПроцедуры

#КонецОбласти

#Область ПередатьОдинФайл

Процедура ПередатьОдинФайл(СтруктураДанныхОбъекта, МобильныйКлиент, ВерсияКлиента)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ПередатьОдинФайлПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент, ВерсияКлиента);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ПередатьОдинФайлПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента)

	УстановитьПривилегированныйРежим(Истина);

	Сообщение  = ОбменСМобильнымиСервер.СоздатьНовоеСообщение(МобильныйКлиент);
	ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ПользовательУзла   = ПользователиКлиентСервер.ТекущийПользователь();
	ПараметрыСинхронизации = ОбменСМобильнымиDMXСервер.ПолучитьПараметрыСинхронизации(МобильныйКлиент);

	Попытка

		ВозвращаемыеОбъекты = Новый Соответствие;

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
		ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияКлиента);

		ОбменСМобильнымиDMXФормированиеXMLСервер.ПолучитьXMLИзОбъекта(ЗаписьXML,
			"206", ПараметрыСинхронизации, ФайлСсылка, Истина);

		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();

		КоличествоОбъектов = ВозвращаемыеОбъекты.Количество();
		ТекстИнформации = СтрШаблон(
			НСтр("ru = 'Готовится сообщение из %1 объектов'; en = 'Preparing the message from %1 objects'"),Строка(КоличествоОбъектов));

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			ТекстИнформации, Ложь, МобильныйКлиент);

		ОбменСМобильнымиСервер.РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(МобильныйКлиент, Сообщение, 
			ИмяВременногоФайла, ТекущаяУниверсальнаяДатаВМиллисекундах(), КоличествоОбъектов);

		УдалитьФайлы(ИмяВременногоФайла);

		ВызватьИсключение "СтопДальнейшейОбработки";

	Исключение

		Если НайтиФайлы(ИмяВременногоФайла).Количество() > 0 Тогда
			ЗаписьXML.Закрыть();
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

#КонецОбласти


#Область НастроитьУведомления

Процедура НастроитьУведомления(СтруктураДанныхОбъекта, МобильныйКлиент, ВерсияКлиента)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		НастроитьУведомленияПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент, ВерсияКлиента);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура НастроитьУведомленияПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента)

	Использование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "UsePush", "Булево");

	Объект = МобильныйКлиент.ПолучитьОбъект();
	Объект.ИдентификаторУстановлен = Использование;

	Если Не Использование Тогда

		Объект.ИдентификаторКлиента = Неопределено;

	КонецЕсли;

	Объект.Записать();

	ВызватьИсключение "СтопДальнейшейОбработки";

КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ПроцедурыИФункцииЗагрузкиДанных

#Область ИнформацияОКлиенте

Процедура ЗаписатьИнформациюОКлиенте(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьИнформациюОКлиентеПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИнформациюОКлиентеПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "AppVersion", "Строка");
	Система = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "OS", "Строка");
	Память = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RAM", "Строка");
	ИмяУстройства = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DeviceName", "Строка");
	РазмерЭкрана = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ScreenSize", "Строка");
	
	ПредставлениеУстройства = 
		СтрШаблон(НСтр("ru = 'Версия:%1, ОС:%2, ОЗУ:%3, WS:%4, Экран:%5""'; en = 'Version:%1, OS:%2, RAM:%3, WS:%4, Screen:%5""'"),
			Версия, Система, Память, ИмяУстройства, РазмерЭкрана);

	РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьСведенияОКлиенте(
		МобильныйКлиент, ТекущаяДатаСеанса(), ПредставлениеУстройства, Версия);

КонецПроцедуры

#КонецОбласти

#Область ИдентификаторПодписчика

Процедура УстановитьИдентификаторПодписчика(СтруктураДанныхОбъекта, МобильныйКлиент, ВерсияКлиента)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		УстановитьИдентификаторПодписчикаПоВерсии206(
			СтруктураДанныхОбъекта, МобильныйКлиент, ВерсияКлиента);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьИдентификаторПодписчикаПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента)

	Идентификатор = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SubscriberData", "ХранилищеЗначения");

	ИдентификаторПодписчика = Неопределено;

	ТекстИдентификатора = Идентификатор.Получить();
	Если Не ТекстИдентификатора = Неопределено Тогда

		Чтение = Новый ЧтениеXML();
		Чтение.УстановитьСтроку(ТекстИдентификатора);

		Попытка

			Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);

			XDTOИдентификатор = ФабрикаXDTO.ПрочитатьXML(Чтение);
			ИдентификаторПодписчика = Сериализатор.ПрочитатьXDTO(XDTOИдентификатор);

		Исключение

			Инфо = ИнформацияОбОшибке();

			ТекстИнформации = 
				НСтр("ru = 'Не удалось распознать идентификатор подписчика доставляемых уведомлений:
					|%1';
					|en = 'Failed to recognize identifier of notification subscriber:
					|%1'");

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
				СтрШаблон(ТекстИнформации, ПодробноеПредставлениеОшибки(Инфо)), 
				Ложь, МобильныйКлиент);

		КонецПопытки;

	КонецЕсли;

	Объект = МобильныйКлиент.ПолучитьОбъект();
	Объект.ИдентификаторКлиента = 
		Новый ХранилищеЗначения(ИдентификаторПодписчика, Новый СжатиеДанных(9));

	Объект.Записать();

КонецПроцедуры

#КонецОбласти

#Область СообщениеОПроблемеОтПользователя

Процедура ЗаписатьСообщениеОПроблемеОтПользователя(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьСообщениеОПроблемеОтПользователяПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСообщениеОПроблемеОтПользователяПоВерсии206(ДанныеОбъекта, МобильныйКлиент)
	
	// Добавление клиентских записей в протокол работы

	Записи = ДанныеОбъекта[Врег("JournalRecords")];

	Для Каждого ЗаписьПротокола Из Записи Цикл
		ЗаписатьСобытиеПротокола(ЗаписьПротокола, МобильныйКлиент);
	КонецЦикла;

	// Отправка уведомления ответственным за разбор сообщений

	УстановитьПривилегированныйРежим(Истина);

	Описание = СтрШаблон(
		НСтр("ru='Ошибка мобильного клиента (от %1):
			|%2';
			|en = 'Mobile client error (from %1): 
			|%2'"),
		Строка(ПользователиКлиентСервер.ТекущийПользователь()),
		ДанныеОбъекта[Врег("Description")]);

	Описание = Описание + Символы.ПС + Символы.ПС;
	Описание = Описание 
		+ НСтр("ru = 'Информация:
			|Протокол работы мобильного клиента этого пользователя можно посмотреть 
			|в разделе ""Настройка и администрирование""';
			|en = 'Info: 
			|Mobile client protocol for this user can be found in 
			|section ""Setup and administration"".'");

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолучателиОповещенийОПроблемахРаботыПрограммы.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы 
		|		КАК ПолучателиОповещенийОПроблемахРаботыПрограммы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь";

	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	БизнесПроцесс = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();

	БизнесПроцесс.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
		БизнесПроцесс.Автор = МассивПользователей[0];
	КонецЕсли;

	Для Каждого Пользователь Из МассивПользователей Цикл
		Строка = БизнесПроцесс.Исполнители.Добавить();
		Строка.Исполнитель = Пользователь;
	КонецЦикла;

	БизнесПроцесс.Наименование = СтрШаблон(
		НСтр("ru ='Ошибка мобильного клиента (от %1)'; en = 'Mobile client error (from %1)'"),
		Строка(ПользователиКлиентСервер.ТекущийПользователь()));

	БизнесПроцесс.Дата     = ТекущаяДатаСеанса();
	БизнесПроцесс.Описание = Описание;
	БизнесПроцесс.Записать();
	БизнесПроцесс.Старт();

КонецПроцедуры 

#КонецОбласти 


#Область УдалениеОбъекта 

Процедура ЗаписатьУдалениеОбъекта(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьУдалениеПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаписатьУдалениеПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	ОбъектСсылка = ПолучитьСсылкуСоставногоТипа(ДанныеОбъекта);

	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат;
	КонецЕсли;

	Попытка

		ОбъектКУдалению = ОбъектСсылка.ПолучитьОбъект();
		ОбъектКУдалению.УстановитьПометкуУдаления(Истина);

		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ОбъектСсылка);

		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСсылка));

	Исключение

	КонецПопытки;

КонецПроцедуры

#КонецОбласти


#Область АдресатыПочтовыхСообщений

Процедура ЗаписатьАдресатаПочтовыхСообщений(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьАдресатаПочтовыхСообщенийПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьАдресатаПочтовыхСообщенийПоВерсии206(ДанныеОбъекта)

	УстановитьПривилегированныйРежим(Истина);

	Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Address", "Строка"), 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Presentation", "Строка", Ложь),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

КонецПроцедуры 

#КонецОбласти 

#Область ЗаписьРабочегоКалендаря

Процедура ЗаписатьЗаписьРабочегоКалендаря(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьЗаписьРабочегоКалендаряПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЗаписьРабочегоКалендаряПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	// Получение ссылки на запись календаря или создание новой
	Ссылка = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));
	Объект = Ссылка.ПолучитьОбъект();

	Если Объект = Неопределено Тогда
		Объект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);

	Иначе
		ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);
		Если ЗначениеЗаполнено(ВерсияДанных) И Не Объект.ВерсияДанных = ВерсияДанных Тогда

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Объект.Ссылка);

			ТекстПредупреждения = 
				"warning:" +
				СтрШаблон(
					НСтр("ru = 'Запись календаря ""%1"" не была передана, т.к. она была изменена на сервере. 
							|Запись календаря на данном устройстве заменена версией записи с сервера.';
							|en = 'Calendar entry ""%1"" was not transferred because it was changed on the server. 
							|The calendar entry on this device was replaced with the version from the server.'"),
					ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь));

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;

	НовоеСостояние = ОбменСМобильнымиСерверПовтИсп.ПолучитьСостояниеЗаписиПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Status", "Строка"));

	Цвет = ОбменСМобильнымиСерверПовтИсп.ПолучитьЦветПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Color", "Строка", Ложь));

	// Для связанных записей изменяем только 
	Отработана = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IsDone", "Булево");
	ЭтоСвязаннаяЗапись = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Linked", "Булево");

	Если ЭтоСвязаннаяЗапись Тогда

		Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда

			РегистрыСведений.УчастникиМероприятия.ИзменитьСостояниеПриглашения(
				Объект.Предмет,
				МобильныйКлиент.Пользователь,
				НовоеСостояние);

		КонецЕсли;

		РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(Объект.Ссылка, Отработана);
		РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Объект.Ссылка, Перечисления.ЦветаРабочегоКалендаря.Нет);

		Возврат;

	КонецЕсли;

	Объект.Состояние = НовоеСостояние;

	// записываем данные объекта
	Объект.Описание      = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь);
	Объект.ВесьДень      = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DayLong", "Булево");
	Объект.ДатаНачала    = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "StartDate", "Дата");
	Объект.ДатаОкончания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "EndDate", "Дата", Ложь);

	ТипЗаписи = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Type", "Строка");
	Объект.ТипЗаписиКалендаря = 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьТипаЗаписиКалендаряПоПредставлению(ТипЗаписи);

	ДанныеПредмета = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Target", , Ложь);
	СсылкаПредмет = ПолучитьСсылкуСоставногоТипа(ДанныеПредмета);
	Если ЗначениеЗаполнено(СсылкаПредмет) И Не ЗначениеЗаполнено(Объект.Предмет) Тогда
		Объект.Предмет = СсылкаПредмет;
	КонецЕсли;

	Если СтрСравнить(ТипЗаписи, "recurrence") = 0 Тогда

		Объект.ДатаНачалаПовторения = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecurrenceStartDate", "Дата", Ложь);

		Объект.ДатаОкончанияПовторения = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecurrenceEndDate", "Дата", Ложь);

		Объект.ИнтервалПовторения = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Interval", "Число");

		Объект.ПовторениеПоДнямМесяца  = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ByMonthDay", "Число", Ложь);

		Объект.ПовторениеПоМесяцам = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ByMonth", "Число", Ложь);

		Объект.КоличествоПовторов = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Count", "Число", Ложь);

		Объект.ЧастотаПовторения = 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьЧастотуПоПредставлению(
				ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Frequency", "Строка", Ложь));

		Объект.ПравилоОкончанияПовторения = 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьПравилоОкончанияПовторенияПоПредставлению(
				ПолучитьЗначениеРеквизита(ДанныеОбъекта, "EndRule", "Строка", Ложь));

		Объект.ПовторениеПоДням.Очистить();
		
		ТаблицаДни = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecurrenceDays", ,Ложь);
		Если Не ТаблицаДни = Неопределено Тогда

			Для Каждого СтрокаТаблица Из ТаблицаДни Цикл

				ДанныеСтроки = ПолучитьДанныеСтроки(ТаблицаДни, СтрокаТаблица);

				НоваяСтрока = Объект.ПовторениеПоДням.Добавить();
				НоваяСтрока.ДеньНедели = 
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "Day", "Число", Ложь);

				НоваяСтрока.НомерВхождения = 
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "Occurrence", "Число", Ложь);

			КонецЦикла;
		КонецЕсли;

		Объект.ИсключенияПовторения.Очистить();
		ТаблицаДни = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecurrenceExceptions", ,Ложь);
		Если Не ТаблицаДни = Неопределено Тогда

			Для Каждого СтрокаТаблица Из ТаблицаДни Цикл

				ДанныеСтроки = ПолучитьДанныеСтроки(ТаблицаДни, СтрокаТаблица);

				НоваяСтрока = Объект.ИсключенияПовторения.Добавить();
				НоваяСтрока.ДатаИсключения   = 
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "Date", "Дата", Ложь);

				НоваяСтрока.ЗаписьИсключения = 
					Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(
						ПолучитьЗначениеРеквизита(ДанныеСтроки, "ID", "УникальныйИдентификатор"));

			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Объект.Записать();

	Цвет = ОбменСМобильнымиСерверПовтИсп.ПолучитьЦветПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Color", "Строка", Ложь));

	РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(Объект.Ссылка, Отработана);
	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Объект.Ссылка, Цвет);

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Объект.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область Контроль

Процедура ЗаписатьКонтроль(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьКонтрольПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьКонтрольПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	НеобходимоЗарегистрироватьОбъектСразу = Ложь;
	ОбъектНайденНаСервере = Истина;

	КонтрольСсылка = Справочники.Контроль.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));
	КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();

	Если КонтрольОбъект = Неопределено Тогда
		ОбъектНайденНаСервере = Ложь;
		КонтрольОбъект = Справочники.Контроль.СоздатьЭлемент();
		КонтрольОбъект.УстановитьСсылкуНового(КонтрольСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);

	Если ОбъектНайденНаСервере и КонтрольОбъект.СнятСКонтроля Тогда
		
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(КонтрольОбъект.Ссылка);
		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Контроль ""%1"" не был передан, т.к. объект был снят с контроля на сервере. 
							|Данные на данном устройстве обновлены.';
							|en = 'Monitoring ""%1"" was not transferred because it was changed on the server. 
							|Monitoring data on this device was replaced with the version from the server.'"),
				ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Name", "Строка"));

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	КонтрольОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонтрольОбъект.ДатаПостановкиНаКонтроль = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ControlStartDate", "Дата", Ложь);

	КонтрольОбъект.ПоставленНаКонтроль = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Active", "Булево");

	КонтрольОбъект.ДатаСнятияСКонтроля = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ControlEndDate", "Дата", Ложь);

	КонтрольОбъект.СнятСКонтроля = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Deactivated", "Булево");

	КонтрольОбъект.Описание =
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь);

	КонтрольОбъект.СрокИсполнения = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DeadLine", "Дата", Ложь);

	Если Не ОбъектНайденНаСервере Тогда

		ДанныеПредмета = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Source", , Ложь);
		СсылкаИсточник = ПолучитьСсылкуСоставногоТипа(ДанныеПредмета);

		Если Не СсылкаИсточник = Неопределено Тогда

			ТипПредмета = ПолучитьЗначениеРеквизита(ДанныеПредмета,"Type");
			
			Если СтрСравнить(ТипПредмета, "IncomingMail") = 0
			 Или СтрСравнить(ТипПредмета, "OutgoingMail") = 0 Тогда

				КонтрольОбъект.Источник = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(СсылкаИсточник);

				НеобходимоЗарегистрироватьОбъектСразу = Истина;

			Иначе
				КонтрольОбъект.Источник = СсылкаИсточник;

			КонецЕсли;

		КонецЕсли;

		ДанныеПредмета = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Target", , Ложь);
		СсылкаПредмет = ПолучитьСсылкуСоставногоТипа(ДанныеПредмета);

		Если Не СсылкаПредмет = Неопределено Тогда

			ТипПредмета = ПолучитьЗначениеРеквизита(ДанныеПредмета,"Type");

			Если СтрСравнить(ТипПредмета, "IncomingMail") = 0
			 Или СтрСравнить(ТипПредмета, "OutgoingMail") = 0 Тогда

				КонтрольОбъект.Предмет = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(СсылкаПредмет);
				НеобходимоЗарегистрироватьОбъектСразу = Истина;

			Иначе
				КонтрольОбъект.Предмет = СсылкаПредмет;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	Контролер = 
		ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Сontroller",, Ложь));

	КонтрольОбъект.Контролер = 
		?(Контролер = Неопределено,
			ПользователиКлиентСервер.ТекущийПользователь(), Контролер);

	ТаблицаИсполнители = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ControlPerformers", ,Ложь);
	Если Не ТаблицаИсполнители = Неопределено Тогда

		Для Каждого СтрокаТаблица Из ТаблицаИсполнители Цикл

			ДанныеСтроки = ПолучитьДанныеСтроки(ТаблицаИсполнители, СтрокаТаблица);

			СтрокаНайдена = Ложь;

			Для Каждого Строка Из КонтрольОбъект.Исполнители Цикл

				ИсполнительАдресат = 
					ПолучитьЗначениеРеквизита(
						ДанныеСтроки, "PerformerAddresse", "Строка", Ложь);

				Если ЗначениеЗаполнено(ИсполнительАдресат) Тогда
					Исполнитель = 
						ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата("", ИсполнительАдресат);
				Иначе
					Исполнитель = 
						ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, "Performer", , Ложь));
				КонецЕсли;

				Если Не Строка.Исполнитель = Исполнитель Тогда
					Продолжить;
				КонецЕсли;

				Строка.ДатаКонтроля = 
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "ControlEndDate", "Дата", Ложь);

				Строка.Проконтролировано = 
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "TaskControlled", "Булево");

				СтрокаНайдена = Истина;
				НеобходимоЗарегистрироватьОбъектСразу = Истина;

			КонецЦикла;

			Если СтрокаНайдена Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = КонтрольОбъект.Исполнители.Добавить();

			НоваяСтрока.Ответственный  = 
				ПолучитьЗначениеРеквизита(ДанныеСтроки, "Main", "Булево", Ложь);

			НоваяСтрока.ДатаКонтроля   = 
				ПолучитьЗначениеРеквизита(ДанныеСтроки, "ControlEndDate", "Дата", Ложь);

			НоваяСтрока.Проконтролировано = 
				ПолучитьЗначениеРеквизита(ДанныеСтроки, "TaskControlled", "Булево");

			НоваяСтрока.Исполнено      = 
				ПолучитьЗначениеРеквизита(ДанныеСтроки, "TaskIsExecuted", "Булево");

			НоваяСтрока.ДатаИсполнения = 
				ПолучитьЗначениеРеквизита(ДанныеСтроки, "TaskExecutionDate", "Дата", Ложь);

			ИсполнительАдресат = 
				ПолучитьЗначениеРеквизита(
					ДанныеСтроки, "PerformerAddresse", "Строка", Ложь);

			Если ЗначениеЗаполнено(ИсполнительАдресат) Тогда
				НоваяСтрока.Исполнитель = 
					ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата("", ИсполнительАдресат);
			Иначе
				НоваяСтрока.Исполнитель = 
					ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, "Performer", , Ложь));
			КонецЕсли;

			Если Не ОбъектНайденНаСервере Тогда
				НоваяСтрока.Источник = 
					ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, "Source",, Ложь));
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	КонтрольОбъект.Записать();

	Если НеобходимоЗарегистрироватьОбъектСразу Тогда
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(КонтрольСсылка);
	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(КонтрольОбъект.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область ПроцессИсполнение

Процедура ЗаписатьПроцессИсполнение(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "214" Тогда
		ЗаписатьПроцессИсполнениеПоВерсии214(СтруктураДанныхОбъекта, МобильныйКлиент);
	ИначеЕсли Версия >= "206" Тогда
		ЗаписатьПроцессИсполнениеПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПроцессИсполнениеПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	ИД = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор");
	Имя = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Name", "Строка");

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;
	Ссылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(ИД);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Исполнение.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Процесс = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		Процесс.УстановитьСсылкуНового(Ссылка);
	Иначе

		ОбъектНайденНаСервере = Истина;
		Процесс = Ссылка.ПолучитьОбъект();

		ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);
		Если Процесс.ВерсияДанных <> ВерсияДанных И ЗначениеЗаполнено(ВерсияДанных) Тогда

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. 
								|Настройка процесса на данном устройстве заменена версией с сервера.';
								|en = 'Pefrormance ""%1"" was not transferred because it was changed on the server. 
								|Process on this device was replaced with the version from the server.'"),
					Имя);

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;

	СсылкаНаГлавнуюЗадачу = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MainTask", "УникальныйИдентификатор", Ложь));

	Если Не СсылкаНаГлавнуюЗадачу = Неопределено Тогда

		ГлавнаяЗадачаОбъект = СсылкаНаГлавнуюЗадачу.ПолучитьОбъект();
		
		Если Не ГлавнаяЗадачаОбъект = Неопределено Тогда

			Процесс.ГлавнаяЗадача = СсылкаНаГлавнуюЗадачу;
			Для Каждого ПредметЗадачи Из ГлавнаяЗадачаОбъект.Предметы Цикл
				НоваяСтрока = Процесс.Предметы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредметЗадачи);
			КонецЦикла;

			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);

			Для Каждого ПредметЗадачи Из Процесс.Предметы Цикл
				Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
					НоваяСтрока = Процесс.ПредметыЗадач.Добавить();
					НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
					НоваяСтрока.ИмяПредмета   = ПредметЗадачи.ИмяПредмета;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Процесс.Наименование   = Имя;
	Процесс.Описание       = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь);
	Процесс.Автор          = ТекущийПользователь;
	Процесс.Проверяющий    = ТекущийПользователь;
	Процесс.СрокИсполненияПроцесса = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Deadline", "Дата", Ложь);
	Процесс.КоличествоИтераций = 1;

	Важность = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Importance", "Строка");
	Если СтрСравнить(Важность, "low") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли СтрСравнить(Важность, "high") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Процесс.Дата = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationDate", "Дата");
	Если Процесс.Дата = Дата(1,1,1) Тогда
		Процесс.Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Процесс);
	Процесс.Исполнители.Очистить();

	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();

	ТаблицаИсполнители = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ExecutionPerformers", ,Ложь);
	Если Не ТаблицаИсполнители = Неопределено Тогда

		Для Каждого СтрокаТаблица Из ТаблицаИсполнители Цикл

			ДанныеСтроки = ПолучитьДанныеСтроки(ТаблицаИсполнители, СтрокаТаблица);
			ДанныеИсполнителя = ПолучитьЗначениеРеквизита(ДанныеСтроки, "Performer");

			ТипИсполнителя      = ПолучитьЗначениеРеквизита(ДанныеИсполнителя, "Type", "Строка");
			СсылкаНаИсполнителя = ПолучитьЗначениеРеквизита(ДанныеИсполнителя, "ID", "УникальныйИдентификатор");
			
			Исполнитель = Неопределено;
			Если СтрСравнить(ТипИсполнителя, "User") = 0 Тогда
				Исполнитель = Справочники.Пользователи.ПолучитьСсылку(СсылкаНаИсполнителя);

			ИначеЕсли СтрСравнить(ТипИсполнителя, "Role") = 0 Тогда
				Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
					Справочники.РолиИсполнителей.ПолучитьСсылку(СсылкаНаИсполнителя),
					Неопределено,
					Неопределено);

			КонецЕсли;

			Если Исполнитель <> Неопределено Тогда
				НоваяСтрока = Процесс.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = Исполнитель;

				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				НоваяСтрока.СрокИсполнения = Процесс.СрокИсполненияПроцесса;

				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					НоваяСтрока.СрокИсполнения,
					НоваяСтрока.СрокИсполненияДни,
					НоваяСтрока.СрокИсполненияЧасы,
					НоваяСтрока.СрокИсполненияМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					НоваяСтрока.ВариантУстановкиСрокаИсполнения)

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Процесс.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	
	Процесс.Записать();
	Если Процесс.Стартован Тогда
		Процесс.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);
	КонецЕсли;

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Процесс.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Процесс.Ссылка);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "StartDate", "Дата", Ложь))
		И Не Процесс.Стартован Тогда

		Процесс.Старт();

		ПараметрыЗаписи = Новый Структура("Старт", Истина);
		ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Процесс.Ссылка, ПараметрыЗаписи);

	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));

КонецПроцедуры 

Процедура ЗаписатьПроцессИсполнениеПоВерсии214(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	ИД = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор");
	Имя = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Name", "Строка");

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;
	Ссылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(ИД);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Исполнение.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Процесс = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		Процесс.УстановитьСсылкуНового(Ссылка);
	Иначе

		ОбъектНайденНаСервере = Истина;
		Процесс = Ссылка.ПолучитьОбъект();

		ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);
		Если Процесс.ВерсияДанных <> ВерсияДанных И ЗначениеЗаполнено(ВерсияДанных) Тогда

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. 
								|Настройка процесса на данном устройстве заменена версией с сервера.';
								|en = 'Pefrormance ""%1"" was not transferred because it was changed on the server. 
								|Process settings on this device were replaced with the version from the server.'"),
					Имя);

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;

	ИДГлавнойЗадачи = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MainTask", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(ИДГлавнойЗадачи) Тогда

		СсылкаНаГлавнуюЗадачу = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИДГлавнойЗадачи);

		Если Не СсылкаНаГлавнуюЗадачу = Неопределено Тогда

			ГлавнаяЗадачаОбъект = СсылкаНаГлавнуюЗадачу.ПолучитьОбъект();
			
			Если Не ГлавнаяЗадачаОбъект = Неопределено Тогда

				Процесс.ГлавнаяЗадача = СсылкаНаГлавнуюЗадачу;
				Для Каждого ПредметЗадачи Из ГлавнаяЗадачаОбъект.Предметы Цикл
					НоваяСтрока = Процесс.Предметы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредметЗадачи);
				КонецЦикла;

				ТочкиМаршрута = Новый Массив;
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить);
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);

				Для Каждого ПредметЗадачи Из Процесс.Предметы Цикл
					Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
						НоваяСтрока = Процесс.ПредметыЗадач.Добавить();
						НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
						НоваяСтрока.ИмяПредмета   = ПредметЗадачи.ИмяПредмета;
					КонецЦикла;
				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Процесс.Наименование   = Имя;
	Процесс.Описание       = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь);
	Процесс.Автор          = ТекущийПользователь;
	Процесс.Проверяющий    = ТекущийПользователь;
	Процесс.СрокИсполненияПроцесса = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Deadline", "Дата", Ложь);
	Процесс.КоличествоИтераций = 1;

	Важность = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Importance", "Строка");
	Если СтрСравнить(Важность, "low") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли СтрСравнить(Важность, "high") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Процесс.Дата = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationDate", "Дата");
	Если Процесс.Дата = Дата(1,1,1) Тогда
		Процесс.Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Процесс);

	ЗагрузитьТабличнуюЧастьИсполнителиПоВерсии214(Процесс, ДанныеОбъекта, СтарыеУчастникиПроцесса);

	Процесс.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;

	Процесс.Записать();
	Если Процесс.Стартован Тогда
		Процесс.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);
	КонецЕсли;

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Процесс.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Процесс.Ссылка);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "StartDate", "Дата", Ложь))
		И Не Процесс.Стартован Тогда

		Процесс.Старт();

		ПараметрыЗаписи = Новый Структура("Старт", Истина);
		ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(
			Процесс.Ссылка, ПараметрыЗаписи);

	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));

КонецПроцедуры 

Процедура ЗагрузитьТабличнуюЧастьИсполнителиПоВерсии214(Процесс, ДанныеОбъекта, СтарыеУчастникиПроцесса)

	ТаблицаИсполнители = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ExecutionPerformers",, Ложь);
	Если ТаблицаИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();

	ЗагружаемыеУчастники = Новый ТаблицаЗначений();
	ЗагружаемыеУчастники.Колонки.Добавить("Исполнитель");
	ЗагружаемыеУчастники.Колонки.Добавить("Идентификатор");

	Для Каждого СтрокаТаблица Из ТаблицаИсполнители Цикл

		ДанныеСтроки = ПолучитьДанныеСтроки(ТаблицаИсполнители, СтрокаТаблица);
		ДанныеИсполнителя = ПолучитьЗначениеРеквизита(ДанныеСтроки, "Performer");

		ТипИсполнителя      = ПолучитьЗначениеРеквизита(ДанныеИсполнителя, "Type", "Строка");
		СсылкаНаИсполнителя = ПолучитьЗначениеРеквизита(ДанныеИсполнителя, "ID", "УникальныйИдентификатор");
		
		Исполнитель = Неопределено;
		Если СтрСравнить(ТипИсполнителя, "User") = 0 Тогда
			Исполнитель = Справочники.Пользователи.ПолучитьСсылку(СсылкаНаИсполнителя);

		ИначеЕсли СтрСравнить(ТипИсполнителя, "Role") = 0 Тогда
			Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				Справочники.РолиИсполнителей.ПолучитьСсылку(СсылкаНаИсполнителя),
				Неопределено,
				Неопределено);
		КонецЕсли;

		ИД = ПолучитьЗначениеРеквизита(ДанныеСтроки, "ID", "УникальныйИдентификатор");

		СтрокаУчастника = ЗагружаемыеУчастники.Добавить();
		СтрокаУчастника.Исполнитель   = Исполнитель;
		СтрокаУчастника.Идентификатор = ИД;

	КонецЦикла;

	МассивКУдалению = Новый Массив();
	Для каждого СтрокаИсполнителя Из Процесс.Исполнители Цикл

		Строка = ЗагружаемыеУчастники.Найти(
			СтрокаИсполнителя.ИдентификаторИсполнителя, "Идентификатор");

		Если Строка = Неопределено Тогда
			МассивКУдалению.Добавить(СтрокаИсполнителя);
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаИсполнителя Из МассивКУдалению Цикл
		Процесс.Исполнители.Удалить(СтрокаИсполнителя);
	КонецЦикла;

	Для каждого СтрокаИсполнителя Из ЗагружаемыеУчастники Цикл

		Строка = Процесс.Исполнители.Найти(
			СтрокаИсполнителя.Идентификатор, "ИдентификаторИсполнителя");

		Если Не Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Процесс.Исполнители.Добавить();
		НоваяСтрока.Исполнитель = СтрокаИсполнителя.Исполнитель;
		НоваяСтрока.ИдентификаторИсполнителя = СтрокаИсполнителя.Идентификатор;

		НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;

		НоваяСтрока.СрокИсполнения = Процесс.СрокИсполненияПроцесса;

		СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			НоваяСтрока.СрокИсполнения,
			НоваяСтрока.СрокИсполненияДни,
			НоваяСтрока.СрокИсполненияЧасы,
			НоваяСтрока.СрокИсполненияМинуты,
			ИспользоватьДатуИВремяВСрокахЗадач,
			НоваяСтрока.ВариантУстановкиСрокаИсполнения)

	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область Файл

Процедура ЗаписатьФайл(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьФайлПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьФайлПоВерсии206(ДанныеОбъекта)

	Имя = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Name", "Строка", Ложь);
	Расширение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Extension", "Строка", Ложь);
	
	Если СтрНайти(Имя, Расширение) > 0 Тогда
		Имя = СтрЗаменить(Имя, "." + Расширение, "");
	КонецЕсли;

	ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	Попытка
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		Если Не ФайлОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

	ДанныеВладельца = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Owner");
	ВладелецТип = ПолучитьЗначениеРеквизита(ДанныеВладельца, "Type", "Строка");
	ВладелецИд  = ПолучитьЗначениеРеквизита(ДанныеВладельца, "ID", "УникальныйИдентификатор");

	ВладелецФайла = Неопределено;
	Если СтрСравнить(ВладелецТип, "IncomingMail") = 0 Тогда
		ВладелецФайла = Документы.ВходящееПисьмо.ПолучитьСсылку(ВладелецИд);

	ИначеЕсли СтрСравнить(ВладелецТип, "OutgoingMail") = 0 Тогда
		ВладелецФайла = Документы.ИсходящееПисьмо.ПолучитьСсылку(ВладелецИд);

	ИначеЕсли СтрСравнить(ВладелецТип, "Task") = 0 Тогда
		// получаем по id Задачу. А по задаче - процесс владелец
		Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ВладелецИд);
		ВладелецФайла = Задача.БизнесПроцесс;

	ИначеЕсли СтрСравнить(ВладелецТип, "ExecutionProcess") = 0 Тогда
		ВладелецФайла = БизнесПроцессы.Исполнение.ПолучитьСсылку(ВладелецИд);

	// ТСК Близнюк С.И.; 30.10.2018; task#1602{
	//// ТСК Грачев А.А. 28.08.2018 task#РА МП {
	//ИначеЕсли СтрСравнить(ВладелецТип, "ActionTarget") = 0 Тогда
	//	ВладелецФайла = Документы.ra_Signal.ПолучитьСсылку(ВладелецИд);
	//// ТСК Грачев А.А. 28.08.2018 }	
		
	ИначеЕсли СтрСравнить(ВладелецТип, "ra_Signal") = 0 Тогда
		ВладелецФайла = Документы.ra_Signal.ПолучитьСсылку(ВладелецИд);

	ИначеЕсли СтрСравнить(ВладелецТип, "ra_Nesootvetstvie") = 0 Тогда
		ВладелецФайла = Документы.ra_Nesootvetstvie.ПолучитьСсылку(ВладелецИд);

	ИначеЕсли СтрСравнить(ВладелецТип, "ra_ZayavkaNaKontrolnuyuOperaciyu") = 0 Тогда
		ВладелецФайла = Документы.ra_ZayavkaNaKontrolnuyuOperaciyu.ПолучитьСсылку(ВладелецИд);

	// ТСК Близнюк С.И.; 30.10.2018; task#1602}
	Иначе
		Возврат; // другие типы не поддерживаем

	КонецЕсли;

	ОбъектИД = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор");
	ДанныеФайла = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileData", "ХранилищеЗначения", Ложь);
	ТолькоЗаголовок = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "HeaderOnly", "Булево");
	БазовыйФайл = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BaseFileId", "УникальныйИдентификатор", Ложь);

	Если ЗначениеЗаполнено(БазовыйФайл) Тогда

		ИсходныйФайл = Справочники.Файлы.ПолучитьСсылку(БазовыйФайл);
		РаботаСФайламиВызовСервера.СкопироватьФайл(ИсходныйФайл, ВладелецФайла,ОбъектИД);

	ИначеЕсли Не ТолькоЗаголовок И ДанныеФайла <> Неопределено Тогда

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДанныеФайла.Получить().Записать(ИмяВременногоФайла);

		Файл = РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(
			ВладелецФайла,
			ИмяВременногоФайла,
			Имя,
			ОбъектИД,
			Истина);

		Если СтрСравнить(ВладелецТип, "Task") = 0 Тогда
			МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(Задача,
			ВладелецФайла, Файл, ОбъектИД);
			
		ИначеЕсли СтрСравнить(ВладелецТип, "ExecutionProcess") = 0 Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Процесс", ВладелецФайла);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И НЕ ЗадачаИсполнителя.Отменена";
			
			ЗадачиПроцесса = Запрос.Выполнить().Выгрузить();
			Если ЗадачиПроцесса.Количество() = 0 Тогда
				Возврат;
			Иначе
				Задача = ЗадачиПроцесса[0].Ссылка;
			КонецЕсли;
			
			МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(Задача,
			ВладелецФайла, Файл, ОбъектИД);
			
		КонецЕсли;

		УдалитьФайлы(ИмяВременногоФайла);

	КонецЕсли;

	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ФайлСсылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ФайлСсылка));

КонецПроцедуры 

#КонецОбласти 

#Область ШаблонТекстаПисьма

Процедура ЗаписатьШаблонТекстаПисьма(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьШаблонТекстаПисьмаПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаписатьШаблонТекстаПисьмаПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	ШаблонСсылка = Справочники.ШаблоныТекстов.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();

	Если ШаблонОбъект = Неопределено Тогда
		ШаблонОбъект = Справочники.ШаблоныТекстов.СоздатьЭлемент();
		ШаблонОбъект.УстановитьСсылкуНового(ШаблонСсылка);
	КонецЕсли;

	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);

	Если Не ШаблонОбъект.ВерсияДанных = ВерсияДанных И ЗначениеЗаполнено(ВерсияДанных) Тогда

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ШаблонОбъект.Ссылка);
		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Шаблон ""%1"" не был передан, т.к. он был изменен на сервере. 
							|Шаблон на данном устройстве заменен версией с сервера.';
							|en = 'Template ""%1"" was not transferred because it was changed on the server. 
							|The template on this device was replaced with the version from the server.'"),
				ШаблонОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ШаблонОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Presentation", "Строка", Ложь);
	ШаблонОбъект.Шаблон = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Text", "Строка", Ложь);
	ШаблонОбъект.Автор  = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ШаблонОбъект.Ссылка));

КонецПроцедуры 

#КонецОбласти 


#Область ИсходящееПисьмо

Процедура ЗаписатьИсходящееПисьмо(СтруктураДанныхОбъекта, ПисьмаКОтправке, СвязиКУстановке, 
	МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьИсходящееПисьмоПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент, ПисьмаКОтправке, 
			СвязиКУстановке, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИсходящееПисьмоПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ПисьмаКОтправке, 
	СвязиКУстановке, ПараметрыСинхронизации)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;

	Ссылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееПисьмо.Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Письмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
		Письмо.УстановитьСсылкуНового(Ссылка);

	Иначе

		ОбъектНайденНаСервере = Истина;

		Письмо = Ссылка.ПолучитьОбъект();
		ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);

		Если ЗначениеЗаполнено(ВерсияДанных) И Не Письмо.ВерсияДанных = ВерсияДанных Тогда

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Письмо.Ссылка);

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Исходящее письмо ""%1"" не было передано, т.к. оно было изменено на сервере. 
								|Письмо на данном устройстве заменено версией письма с сервера.';
								|en = 'Outgoing email ""%1"" was not transferred because it was changed on the server. 
								|Email on this device was replaced with the version from the server.'"),
					ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Subject", "Строка", Ложь));

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;

	Если Письмо.ДатаОтправки > Дата(1,1,1) Тогда
		ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
			МобильныйКлиент, Ссылка, 
			НСтр("ru = 'Прием изменений с клиента: письмо не загружено, т.к. не указана дата отправки'; en = 'Receiving changes from the client: email was not imported because sending date was not specifed'"));
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	// Заполнение реквизитов письма
	Письмо.Важность       = Перечисления.ВажностьПисем[
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Importance", "Строка")];

	Письмо.Автор = ТекущийПользователь;
	Письмо.Дата = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationDate", "Дата");
	Письмо.ЕстьВложения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "HasAttachment", "Булево");
	Письмо.Тема = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Subject", "Строка", Ложь);
	Письмо.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	Письмо.ТекстХранилище = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Body", "ХранилищеЗначения", Ложь);

	Письмо.ОтправительКонтакт = ТекущийПользователь;
	Письмо.УчетнаяЗапись = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Account", "УникальныйИдентификатор"));

	// заполнение получателей письма
	Письмо.ПолучателиПисьма.Очистить();
	Письмо.ПолучателиКопий.Очистить();
	Письмо.ПолучателиСкрытыхКопий.Очистить();

	Кому = СтрРазделить(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TO" , "Строка", Ложь), ";", Ложь);
	Для каждого Адресат Из Кому Цикл
		ЗаполнитьСтрокуАдресата(Письмо.ПолучателиПисьма, Адресат);
	КонецЦикла;

	Копии = СтрРазделить(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CC" , "Строка", Ложь), ";", Ложь);
	Для каждого Адресат Из Копии Цикл
		ЗаполнитьСтрокуАдресата(Письмо.ПолучателиКопий, Адресат);
	КонецЦикла;

	Скрытые = СтрРазделить(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BCC", "Строка", Ложь), ";", Ложь);
	Для каждого Адресат Из Скрытые Цикл
		ЗаполнитьСтрокуАдресата(Письмо.ПолучателиСкрытыхКопий, Адресат);
	КонецЦикла;

	Письмо.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(Письмо.ПолучателиПисьма);

	ДанныеПисьмаОснования = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BaseMail", ,Ложь);
	ПисьмоОснованиеСсылка = Неопределено;

	// заполнение реквизитов для истории переписки
	Если Не ДанныеПисьмаОснования = Неопределено Тогда

		Тип = ПолучитьЗначениеРеквизита(ДанныеПисьмаОснования, "Type", "Строка");
		ИД  = ПолучитьЗначениеРеквизита(ДанныеПисьмаОснования, "ID", "УникальныйИдентификатор");

		ПисьмоОснованиеСсылка = Неопределено;
		Если СтрСравнить(Тип, "IncomingMail") = 0 Тогда
			ПисьмоОснованиеСсылка = Документы.ВходящееПисьмо.ПолучитьСсылку(ИД);

		ИначеЕсли СтрСравнить(Тип, "OutgoingMail") = 0 Тогда
			ПисьмоОснованиеСсылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(ИД);

		КонецЕсли;

		Если ПисьмоОснованиеСсылка <> Неопределено Тогда

			ТипОтвета = Перечисления.ТипыОтвета[
				ПолучитьЗначениеРеквизита(ДанныеОбъекта, "AnswerType", "Строка")];

			Письмо.ТипОтвета       = ТипОтвета;
			Письмо.ПисьмоОснование = ПисьмоОснованиеСсылка;

		КонецЕсли;

	КонецЕсли;

	Письмо.Записать();

	ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
		Ссылка, НСтр("ru = 'Прием изменений с клиента: изменения записаны.'; en = 'Receiving changes from the client: changes saved.'"));

	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Ссылка);

	// Если письмо было отправлено на мобильном клиенте, то запоминаем это.
	// Такие письма будут отправлены после полной обработки сообщения от мобильного клиента.
	
	ГотовКОтправке = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ReadyToBeSent", "Дата", Ложь);
	Если НЕ ГотовКОтправке = Неопределено Тогда		
		Если ГотовКОтправке > ТекущаяДатаСеанса() Тогда
			//Если дата подготовки письма к отправке больше текущей, значит письмо подготовлено
			//в другом часовом поясе, но отправиться должно сейчас. Отложенной отправки в мобильном сейчас нет.
			ГотовКОтправке = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ГотовКОтправке) Тогда

		// Подготовка письма к отправке
		ПисьмоКОтправке = Новый Структура();
		ПисьмоКОтправке.Вставить("Ссылка" , Письмо.Ссылка);
		ПисьмоКОтправке.Вставить("ПодготовленоКОтправке", ГотовКОтправке);

		ПисьмаКОтправке.Добавить(ПисьмоКОтправке);

		// установка связей для истории переписки
		Если ПисьмоОснованиеСсылка <> Неопределено Тогда

			ТипОтвета = Перечисления.ТипыОтвета[ПолучитьЗначениеРеквизита(ДанныеОбъекта, "AnswerType", "Строка")];

			Если ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда

				СвязьКУстановке = Новый Структура();
				СвязьКУстановке.Вставить("Объект"         , Письмо.Ссылка);
				СвязьКУстановке.Вставить("СвязанныйОбъект", ПисьмоОснованиеСсылка);
				СвязьКУстановке.Вставить("ТипСвязи"       , Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
				СвязиКУстановке.Добавить(СвязьКУстановке);

			ИначеЕсли ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда

				СвязьКУстановке = Новый Структура();
				СвязьКУстановке.Вставить("Объект"         , Письмо.Ссылка);
				СвязьКУстановке.Вставить("СвязанныйОбъект", ПисьмоОснованиеСсылка);
				СвязьКУстановке.Вставить("ТипСвязи"       , Справочники.ТипыСвязей.ПересылкаПисьма);
				СвязиКУстановке.Добавить(СвязьКУстановке);

			КонецЕсли;

		КонецЕсли;

		Если Письмо.ПолучателиПисьма.Количество() + Письмо.ПолучателиКопий.Количество() <= 50 Тогда

			Для Каждого Строка Из Письмо.ПолучателиПисьма Цикл

				Если ЗначениеЗаполнено(Строка.Адресат) Тогда

					МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Адресат      = Строка.Адресат;
					МенеджерЗаписи.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
					МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
					МенеджерЗаписи.Записать();

				КонецЕсли;

			КонецЦикла;

			Для Каждого Строка Из Письмо.ПолучателиКопий Цикл

				Если ЗначениеЗаполнено(Строка.Адресат) Тогда
					МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Адресат      = Строка.Адресат;
					МенеджерЗаписи.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
					МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
					МенеджерЗаписи.Записать();
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Письмо.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Письмо.Ссылка);
	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Письмо.Ссылка));

КонецПроцедуры 

#КонецОбласти 


#Область ra_Signal
// ТСК Грачев А.А. 20.08.2018 {
// цель изменения: РА МП
Процедура Записать_ra_Signal(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации)
	
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;

	Ссылка = Документы.ra_Signal.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ra_Signal.Ссылка
		|ИЗ
		|	Документ.ra_Signal КАК ra_Signal
		|ГДЕ
		|	ra_Signal.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Письмо = Документы.ra_Signal.СоздатьДокумент();
		Письмо.УстановитьСсылкуНового(Ссылка);

	Иначе

		ОбъектНайденНаСервере = Истина;

		Письмо = Ссылка.ПолучитьОбъект();
		//ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);

		//Если ЗначениеЗаполнено(ВерсияДанных) И Не Письмо.ВерсияДанных = ВерсияДанных Тогда

		//	ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Письмо.Ссылка);

		//	ТекстПредупреждения = 
		//		"warning:" + 
		//		СтрШаблон(
		//			НСтр("ru = 'Исходящее письмо ""%1"" не было передано, т.к. оно было изменено на сервере. 
		//						|Письмо на данном устройстве заменено версией письма с сервера.';
		//						|en = 'Outgoing email ""%1"" was not transferred because it was changed on the server. 
		//						|Email on this device was replaced with the version from the server.'"),
		//			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Subject", "Строка", Ложь));

		//	ВызватьИсключение ТекстПредупреждения;

		//КонецЕсли;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	// Заполнение реквизитов письма
	
	Письмо.Дата 		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationDate", "Дата");
	//Письмо.Номер 		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationNumber", "Строка");
	Письмо.PodrobnoeOpisanie = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PodrobnoeOpisanie", "Строка");
	// ТСК Близнюк С.И.; 29.10.2018; task#1602{
	Письмо.MestoViyavleniya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MestoViyavleniya", "Строка", Ложь);
	
	СсылкаНаВыявившего = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "VyyavivsheeLico", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(СсылкаНаВыявившего) Тогда
		Письмо.VyyavivsheeLico = Справочники.Пользователи.ПолучитьСсылку(СсылкаНаВыявившего);
	КонецЕсли;
	Organizaciya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Organizaciya", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(Organizaciya) Тогда
		Письмо.Organizaciya = Справочники.Контрагенты.ПолучитьСсылку(Organizaciya);
	КонецЕсли;
	OtvetstvenniyZaKachestvo = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "OtvetstvenniyZaKachestvo", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(OtvetstvenniyZaKachestvo) Тогда
		Письмо.OtvetstvenniyZaKachestvo = Справочники.Пользователи.ПолучитьСсылку(OtvetstvenniyZaKachestvo);
	КонецЕсли;
	Proekt = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Proekt", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(Proekt) Тогда
		Письмо.Proekt = Справочники.Проекты.ПолучитьСсылку(Proekt);
	КонецЕсли;
	VyyavivshayaOrganizaciya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Proekt", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(VyyavivshayaOrganizaciya) Тогда
		Письмо.VyyavivshayaOrganizaciya = Справочники.Контрагенты.ПолучитьСсылку(VyyavivshayaOrganizaciya);
	КонецЕсли;
	VyyavivsheePodrazdelenie = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "VyyavivsheePodrazdelenie", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(VyyavivsheePodrazdelenie) Тогда
		Письмо.VyyavivsheePodrazdelenie = Справочники.СтруктураПредприятия.ПолучитьСсылку(VyyavivsheePodrazdelenie);
	КонецЕсли;
	// ТСК Близнюк С.И.; 29.10.2018; task#1602}
	// ТСК Близнюк С.И.; 13.11.2018; task#1734{
	Письмо.ПометкаУдаления = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MarkedForDeletion", "Булево", Ложь);
	// ТСК Близнюк С.И.; 13.11.2018; task#1734}

	Письмо.Записать();

	ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
		Ссылка, НСтр("ru = 'Прием изменений с клиента: изменения записаны.'; en = 'Receiving changes from the client: changes saved.'"));

	// Если письмо было отправлено на мобильном клиенте, то запоминаем это.
	// Такие письма будут отправлены после полной обработки сообщения от мобильного клиента.
	
	ГотовКОтправке = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ReadyToBeSent", "Дата", Ложь);
	Если НЕ ГотовКОтправке = Неопределено Тогда		
		Если ГотовКОтправке > ТекущаяДатаСеанса() Тогда
			//Если дата подготовки письма к отправке больше текущей, значит письмо подготовлено
			//в другом часовом поясе, но отправиться должно сейчас. Отложенной отправки в мобильном сейчас нет.
			ГотовКОтправке = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Письмо.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Письмо.Ссылка);
	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Письмо.Ссылка));

КонецПроцедуры 
// ТСК Грачев А.А. 20.08.2018 }
#КонецОбласти //ra_Signal



#Область НастройкаУстареванияДанных

Процедура ЗаписатьНастройкиУстареванияДанных(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьНастройкиУстареванияДанныхПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройкиУстареванияДанныхПоВерсии206(ДанныеОбъекта)
	
	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataExpirationPeriod", "Число", Ложь);

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных,
		Значение);

КонецПроцедуры

#КонецОбласти

#Область НастройкаМаксимальныйРазмерФайла

Процедура ЗаписатьНастройкуМаксимальныйРазмерФайла(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьНастройкуМаксимальныйРазмерФайлаПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройкуМаксимальныйРазмерФайлаПоВерсии206(ДанныеОбъекта)

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileSize", "Число", Ложь);
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов,
		Значение);

КонецПроцедуры

#КонецОбласти

#Область НастройкиСинхронизацииПапок

Процедура ЗаписатьНастройкиСинхронизацииПапок(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьНастройкиСинхронизацииПапокПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройкиСинхронизацииПапокПоВерсии206(ДанныеОбъекта)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПапкиДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			ТекущийПользователь);

	Папки = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FolderList",, Ложь);
	Если Папки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Папки.Количество() = 0 Тогда
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
			ТекущийПользователь, Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты, Ложь);
		Возврат;
	КонецЕсли;

	ПереданныеПапки = Новый Массив;
	Для Каждого ИдПапки Из Папки Цикл

		Попытка
			УИД = Новый УникальныйИдентификатор(ИдПапки);
		Исключение
			Продолжить;
		КонецПопытки;

		ПапкаСсылка = Справочники.ПапкиПисем.ПолучитьСсылку(УИД);
		ПереданныеПапки.Добавить(ПапкаСсылка);

	КонецЦикла;

	// Поиск удаленных папок
	УдаленныеПапки = Новый Массив;
	Для Каждого СтараяПапка Из ПапкиДляСинхронизации Цикл
		Если ПереданныеПапки.Найти(СтараяПапка) = Неопределено Тогда
			УдаленныеПапки.Добавить(СтараяПапка);
		КонецЕсли;
	КонецЦикла;

	// Поиск добавленных папок
	ДобавленныеПапки = Новый Массив;
	Для Каждого НоваяПапка Из ПереданныеПапки Цикл
		Если ПапкиДляСинхронизации.Найти(НоваяПапка) = Неопределено Тогда
			ДобавленныеПапки.Добавить(НоваяПапка);
		КонецЕсли;
	КонецЦикла;

	// Сохранение принятого от клиента списка синхронизируемых папок
	РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПереданныеПапки);

	// Если список синхронизируемых папок изменился, то отметим этот факт, чтобы изменения передались на другие
	//	мобильные клиенты текущего пользователя
	Если УдаленныеПапки.Количество() > 0 Или ДобавленныеПапки.Количество() > 0 Тогда
		РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(
			ТекущийПользователь,
			Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизацияПапокПисем);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НастройкаПодписейКПисьмам

Процедура ЗаписатьНастройкиПодписейКПисьмам(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьНастройкиПодписейКПисьмамПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройкиПодписейКПисьмамПоВерсии206(ДанныеОбъекта)

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		Пользователь.ИдентификаторПользователяИБ);

	Если ПользовательИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УУИДДляНового = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "NewMailFooter", "УникальныйИдентификатор", Ложь);

	УУИДДляОтвета = 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ResponseMailFooter", "УникальныйИдентификатор", Ложь);

	Если УУИДДляНового = УникальныйИдентификаторПустой() Тогда
		ПодписьНовыхПисем = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Иначе
		ПодписьНовыхПисем = 
			Справочники.ШаблоныТекстов.ПолучитьСсылку(УУИДДляНового);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВстроеннаяПочта",
		"ПодписьДляНовыхПисем",
		ПодписьНовыхПисем,
		, 
		ПользовательИБ.Имя);

	Если УУИДДляОтвета = УникальныйИдентификаторПустой() Тогда
		ПодписьОтветныхПисем = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Иначе
		ПодписьОтветныхПисем = 
			Справочники.ШаблоныТекстов.ПолучитьСсылку(УУИДДляОтвета);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВстроеннаяПочта",
		"ПодписьПриОтветеИПересылке",
		ПодписьОтветныхПисем,
		, 
		ПользовательИБ.Имя);

КонецПроцедуры

#КонецОбласти

#Область НастройкиСинхронизацииПочты

Процедура ЗаписатьНастройкиСинхронизацииПочты(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");
	Значение = Неопределено;

	Если Версия >= "214" Тогда
		Значение = ЗаписатьНастройкуСинхронизацииПочтыПоВерсии214(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

	Если Не Значение = Неопределено Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Изменен параметр: Синхронизация почты = %1'; en = 'Parameter change: Email synchronization = %1'"), 
				Формат(Значение, "БЛ=Нет; БИ=Да")), 
			Ложь, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Функция ЗаписатьНастройкуСинхронизацииПочтыПоВерсии214(ДанныеОбъекта)

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MailSynchronization", "Булево", Ложь);

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты,
		Значение);

	Возврат Значение;

КонецФункции

#КонецОбласти

#Область НастройкиСинхронизацииКалендаря

Процедура ЗаписатьНастройкиСинхронизацииКалендаря(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");
	Значение = Неопределено;

	Если Версия >= "214" Тогда
		Значение = ЗаписатьНастройкуСинхронизацииКалендаряПоВерсии214(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

	Если Не Значение = Неопределено Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Изменен параметр: Синхронизация календаря = %1'; en = 'Parameter change: Calendar synchronization = %1'"),
				Формат(Значение, "БЛ=Нет; БИ=Да")), 
			Ложь, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Функция ЗаписатьНастройкуСинхронизацииКалендаряПоВерсии214(ДанныеОбъекта)

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CalendarSynchronization", "Булево", Ложь);

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря,
		Значение);

	Возврат Значение;

КонецФункции

#КонецОбласти

#Область НастройкиСинхронизацииЗадач

Процедура ЗаписатьНастройкиСинхронизацииЗадач(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");
	Значение = Неопределено;

	Если Версия >= "214" Тогда
		Значение = ЗаписатьНастройкуСинхронизацииЗадачПоВерсии214(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

	Если Не Значение = Неопределено Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Изменен параметр: Синхронизация задач = %1'; en = 'Parameter change: Task synchronization = %1'"), 
				Формат(Значение, "БЛ=Нет; БИ=Да")), 
			Ложь, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Функция ЗаписатьНастройкуСинхронизацииЗадачПоВерсии214(ДанныеОбъекта)

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskSynchronization", "Булево", Ложь);
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач,
		Значение);

	Возврат Значение;

КонецФункции

#КонецОбласти

#Область НастройкиСинхронизацииКонтроля

Процедура ЗаписатьНастройкиСинхронизацииКонтроля(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "214" Тогда
		Значение = ЗаписатьНастройкуСинхронизацииКонтроляПоВерсии214(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

	Если Не Значение = Неопределено Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Изменен параметр: Синхронизация контроля = %1'; en = 'Parameter change: Monitoring synchronization = %1'"), 
				Формат(Значение, "БЛ=Нет; БИ=Да")), 
			Ложь, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Функция ЗаписатьНастройкуСинхронизацииКонтроляПоВерсии214(ДанныеОбъекта)

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MonitoringSynchronization", "Булево", Ложь);

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКонтроля,
		Значение);

	Возврат Значение;

КонецФункции

#КонецОбласти


#Область ПапкиОбъектов

Процедура ЗаписатьОбъектВПапке(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьОбъектВПапкеПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОбъектВПапкеПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	ИДПапки = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Folder", "УникальныйИдентификатор");
	Папка = Справочники.ПапкиПисем.ПолучитьСсылку(ИДПапки);

	ДанныеОбъектаЗаписи = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Object");

	ТипОбъекта = ПолучитьЗначениеРеквизита(ДанныеОбъектаЗаписи, "Type", "Строка");
	ИДОбъекта  = ПолучитьЗначениеРеквизита(ДанныеОбъектаЗаписи, "ID", "УникальныйИдентификатор");

	Если СтрСравнить(ТипОбъекта, "IncomingMail") = 0 Тогда
		Объект = Документы.ВходящееПисьмо.ПолучитьСсылку(ИДОбъекта);

	ИначеЕсли СтрСравнить(ТипОбъекта, "OutgoingMail") = 0 Тогда
		Объект = Документы.ИсходящееПисьмо.ПолучитьСсылку(ИДОбъекта);

	Иначе
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'В объекте MailFolder объект не может иметь тип ""%1""'; en = 'Objects inside of MailFolder object cannot be of type ""%1""'"),
			ИДОбъекта);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	СообщениеОбОшибке = "";

	ВстроеннаяПочтаСервер.ПоместитьПисьмоВПапку(Объект, Папка, СообщениеОбОшибке);

	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Объект.Ссылка));

	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 


#Область ПеренаправлениеЗадачи

Процедура ЗаписатьПеренаправлениеЗадачи(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьПеренаправлениеЗадачиПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПеренаправлениеЗадачиПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации)
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Task", "УникальныйИдентификатор"));

	УстановитьПривилегированныйРежим(Истина);

	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаСсылка, 
		"ВерсияДанных,Выполнена,СостояниеБизнесПроцесса,ПринятаКИсполнению,ПометкаУдаления,Наименование");

	// Выполняем провеверку, что задача доступна пользователю по ролям и делегированию.
	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(ЗадачаСсылка);
	Если РезультатЗапроса.Пустой() Тогда

		// Выполняем регистрацию задачи на конкретном узле - это запустит механизм передачи удаления объекта
		// на указанный мобильный клиент, т.к. задача на нем больше не нужна
		ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыСинхронизации.МобильныйКлиент, ЗадачаСсылка);

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
							|т.к. задача более не доступна пользователю.';
							|en = 'Forwarding of task ""%1"" was not transferred, 
							|because the task is no longer available to the user.'"),
				РеквизитыЗадачи.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	Запрос.УстановитьПараметр("Исполнитель", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.ВерсияДанных
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Исполнитель, ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка = Задачи.Ссылка
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда

		ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);

		Если Не РеквизитыЗадачи.ВерсияДанных = ВерсияДанных Тогда
			ДополнениеРасширенногоПротокола = "задача изменена на сервере";
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
								|т.к. ранее задача была изменена на сервере.';
								|en = 'Forwarding of task ""%1"" was not transferred, 
								|because the task was changed on the server.'"),
					РеквизитыЗадачи.Наименование);
		ИначеЕсли РеквизитыЗадачи.Выполнена Тогда
			ДополнениеРасширенногоПротокола = "задача выполнена ранее";
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
								|т.к. ранее задача была выполнена.';
								|en = 'Forwarding of task ""%1"" was not transferred, 
								|because the task was executed earlier.'"),
					РеквизитыЗадачи.Наименование);
					
		Иначе
			ДополнениеРасширенногоПротокола = "задача уже перенаправлена";
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
								|т.к. ранее задача уже была перенаправлена.';
								|en = 'Forwarding of task ""%1"" was not transferred, 
								|because the task was forwarded earlier.'"),
					РеквизитыЗадачи.Наименование);
		КонецЕсли;

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение ТекстПредупреждения;
	КонецЕсли;

	Исполнитель = ДанныеОбъекта[Врег("NewPerformer")];

	ТипИсполнителя      = ПолучитьЗначениеРеквизита(Исполнитель, "Type", "Строка");
	СсылкаНаИсполнителя = ПолучитьЗначениеРеквизита(Исполнитель, "ID", "УникальныйИдентификатор");
	
	Если СтрСравнить(ТипИсполнителя, "User") = 0 Тогда
		НовыйИсполнитель = Справочники.Пользователи.ПолучитьСсылку(СсылкаНаИсполнителя);
	ИначеЕсли СтрСравнить(ТипИсполнителя, "Role") = 0 Тогда
		НовыйИсполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Справочники.РолиИсполнителей.ПолучитьСсылку(СсылкаНаИсполнителя),
			Неопределено,
			Неопределено);
	Иначе

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		Возврат;

	КонецЕсли;

	Попытка
		ОбменСМобильнымиСервер.ПроверитьВозможностьПереадресацииЗадачи(ЗадачаСсылка, НовыйИсполнитель);
	Исключение
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение;
	КонецПопытки;

	ПереадресацияПользователю = ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.Пользователи");

	СтруктураПеренаправления = Новый Структура;
	СтруктураПеренаправления.Вставить("Исполнитель", 
		?(ПереадресацияПользователю, НовыйИсполнитель, Неопределено));

	СтруктураПеренаправления.Вставить("РольИсполнителя", 
		?(ПереадресацияПользователю, НовыйИсполнитель, Неопределено));

	СтруктураПеренаправления.Вставить("Комментарий", 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Comment", "Строка", Ложь));

	Попытка

		БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(
			ЗадачаСсылка, СтруктураПеренаправления, Новый УникальныйИдентификатор());

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

	Исключение

		Инфо = ИнформацияОбОшибке();
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'warning:Не удалось перенаправить задачу ""%1"" на ""%2"". %3. Задача возвращена.'; en = 'warning: failed to forward task ""%1"" to ""%2"". %3. The task was returned.'"),
			Строка(ЗадачаСсылка),
			Строка(НовыйИсполнитель),
			Инфо.Описание);
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение ТекстСообщения;

	КонецПопытки;

	ПротоколированиеРаботыПользователей.ЗаписатьПеренаправлениеЗадачи(ЗадачаСсылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗадачаСсылка));

КонецПроцедуры 

#КонецОбласти 

#Область ПротоколСобытий

Процедура ЗаписатьСобытиеПротокола(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьСобытиеПротоколаПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСобытиеПротоколаПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	ТипЗаписи = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecordType", "Строка");

	Если СтрСравнить(ТипЗаписи, "Warning") = 0 Тогда
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Предупреждение;
	ИначеЕсли СтрСравнить(ТипЗаписи, "Error") = 0 Тогда
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Ошибка;
	Иначе
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Информация;
	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьЗаписьВПротоколСКлиента(
		МобильныйКлиент,
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecordMSecs", "Число"),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecordDate", "Дата"),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ObjectID", "УникальныйИдентификатор", Ложь),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ObjectType", "Строка", Ложь),
		ТипСобытия);

КонецПроцедуры 

#КонецОбласти 

#Область РезультатВыполненияЗадачи

Процедура ЗаписатьРезультатВыполненияЗадачи(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьРезультатВыполненияЗадачиПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьРезультатВыполненияЗадачиПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	УстановитьПривилегированныйРежим(Истина);

	ИД = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор");
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);
	КомментарийВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Comment", "Строка", Ложь);

	Задача       = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИД);
	ЗадачаОбъект = Задача.ПолучитьОбъект();

	Если ЗадачаОбъект = Неопределено Тогда

		ТекстПредупреждения = 
			"warning:" + НСтр("ru = 'Результат выполнения одной из задач не был передан, 
									|т.к. задача была удалена на сервере.';
									|en = 'Execution result of one of the tasks was not transferred, 
									|because the task was deleted on the server.'");

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибкуПоОбъекту(
			НСтр("ru = 'Ошибка при выполнении задачи. Объект не найден на сервере.'; en = 'An error occurred while performing the task. The object is not found on the server.'"),
			"Task",
			ИД,
			Ложь,
			МобильныйКлиент);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	РеквизитыЗадачи = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, 
			"Ссылка,ВерсияДанных,Выполнена,ПометкаУдаления,Наименование,
			|СостояниеБизнесПроцесса,ПринятаКИсполнению,ТочкаМаршрута");

	ТекстПредупреждения = "";

	// Выполняем провеверку, что задача доступна пользователю по ролям и делегированию.
	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(Задача);
	Если РезультатЗапроса.Пустой() Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
							|т.к. задача более не доступна пользователю.';
							|en = 'Execution result of task ""%1"" was not transferred, 
							|because the task is no longer available to the user.'"),
				РеквизитыЗадачи.Наименование);

	ИначеЕсли РеквизитыЗадачи.Выполнена  Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
					|была выполнена ранее.';
					|en = 'Execution result of ""%1"" task was not transferred, 
					|because the task was executed earlier.'"),
				РеквизитыЗадачи.Наименование); 

	ИначеЕсли РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
					|т.к. родительский бизнес-процесс не активен.';
					|en = 'Execution result of task ""%1"" was not transferred, 
					|because the parent process is not active.'"),
				РеквизитыЗадачи.Наименование); 

	ИначеЕсли ЗначениеЗаполнено(ВерсияДанных) И Не РеквизитыЗадачи.ВерсияДанных = ВерсияДанных Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
					|т.к. задача ранее уже была изменена на сервере.';
					|en = 'Execution result of task ""%1"" was not transferred, 
					|because the task was changed on the server.'"),
				РеквизитыЗадачи.Наименование);

	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(
			РеквизитыЗадачи.Ссылка);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	ЗадачаОбъект.РезультатВыполнения = КомментарийВыполнения;

	Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");
		
		Если РезультатВыполнения = 1 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		ИначеЕсли РезультатВыполнения = 2 Тогда
			// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 {
			// в ЕОС-Качество не используется вариант согласования "Согласовано с замечаниями". Соответственно, результат с кодом "2" обрабатываем как  "Не согласовано"
			РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
			//РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 } 
		ИначеЕсли РезультатВыполнения = 3 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
		КонецЕсли;

		СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		СогласованиеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"        , Задача);
		СогласованиеОбъект.ДополнительныеСвойства.Вставить("РезультатСогласования", РезультатСогласования);
		СогласованиеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда

		СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		СогласованиеОбъект.ПовторитьСогласование = РезультатВыполнения = 2;

		НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеСогласование = РезультатВыполнения = 2;

		СогласованиеОбъект.Записать();
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		Если РезультатВыполнения = 1 Тогда
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
		ИначеЕсли РезультатВыполнения = 2 Тогда
			РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
		КонецЕсли;

		УтверждениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("РезультатУтверждения", РезультатУтверждения);
		УтверждениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		УтверждениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача",Задача);
		УтверждениеОбъект.ДополнительныеСвойства.Вставить(
			"ПовторитьУтверждение", РезультатВыполнения = 2);

		УтверждениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда

		РассмотрениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();

		// сформируем дополнительные свойства для передачи данных объекту
		РеквизитыЗаполнения = "ВариантРассмотрения";
		ДанныеЗаполнения    = Новый Структура();

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");
		
		Если РезультатВыполнения = 1 Тогда
			ДанныеЗаполнения.Вставить("ВариантРассмотрения", 
				Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
		Иначе
			ДанныеЗаполнения.Вставить("ВариантРассмотрения", 
				Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение);

			РассмотрениеОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
			РассмотрениеОбъект.ВажностьИсполнения = РассмотрениеОбъект.Важность;
		КонецЕсли;

		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"      , Задача);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения"   , ДанныеЗаполнения);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("РезультатВыполнения", КомментарийВыполнения);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"    , Истина);
		РассмотрениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда

		РассмотрениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ДанныеЗаполнения   = Новый Структура();
		ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции", 
			Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);

		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"   , Задача);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		РассмотрениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		ВозвратНаДоработку = РезультатВыполнения = 2;

		Если ВозвратНаДоработку Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ИсполнениеРезультатыПроверки.НомерИтерации КАК НомерИтерации,
				|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
				|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего КАК ЗадачаПроверяющего,
				|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку КАК ОтправленоНаДоработку,
				|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК КомментарийПроверяющего,
				|	ВЫБОР
				|		КОГДА ИсполнениеРезультатыПроверки.ЗадачаИсполнителя.ТочкаМаршрута = 
				|			&ТочкаМаршрутаОтвИсполнение ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ОтвИсполнение
				|ИЗ
				|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
				|ГДЕ
				|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего";

			Запрос.УстановитьПараметр("ЗадачаПроверяющего", Задача);
			Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", 
				БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);

			Исполнители = Запрос.Выполнить().Выгрузить();

			ИсполнениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			Для каждого Исполнитель Из Исполнители Цикл
				Исполнитель.ОтправленоНаДоработку = Истина;
				Исполнитель.КомментарийПроверяющего = КомментарийВыполнения;
			КонецЦикла;

			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("Исполнители"  , Исполнители);
			ИсполнениеОбъект.Записать();

		КонецЕсли;

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		ВозвратНаДоработку = РезультатВыполнения = 2;

		ПоручениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПоручениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПоручениеОбъект.ДополнительныеСвойства.Вставить("ОтправленоНаДоработку", ВозвратНаДоработку);
		ПоручениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли Задачаобъект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");
		
		Если РезультатВыполнения = 1 Тогда
			РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано;
		Иначе
			РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
		КонецЕсли;

		РегистрацияОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"       , Задача);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"     , Истина);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("РезультатРегистрации", РезультатРегистрации);
		РегистрацияОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		ПовторитьРегистрацию = Истина;
		Если РезультатВыполнения = 1 Тогда
			ПовторитьРегистрацию = Ложь;
		КонецЕсли;

		РегистрацияОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"       , Задача);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"     , Истина);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ПовторитьРегистрацию", ПовторитьРегистрацию);
		РегистрацияОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");
		
		РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято;
		Если РезультатВыполнения = 1 Тогда
			РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято;
		КонецЕсли;

		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"       , Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"     , Истина);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("РезультатПриглашения", РезультатПриглашения);
		ПриглашениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда

		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);

		РезультатВыполнения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Result", "Число");

		Если РезультатВыполнения = 1 Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПодтвердитьПриглашение", Истина);

		ИначеЕсли РезультатВыполнения = 2 Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПовторитьПриглашение", Истина);

		Иначе
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ОтложитьПриглашение", Истина);

		КонецЕсли;

		ПриглашениеОбъект.Записать();
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда

		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		ПриглашениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	КонецЕсли;

	Если ЗадачаОбъект.Выполнена Тогда

		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ЗадачаОбъект.Ссылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗадачаОбъект.Ссылка));

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 

#Область СведенияОПрочтенииОбъекта

Процедура ЗаписатьУстановкуСостоянияПрочтенности(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьУстановкуСостоянияПрочтенностиПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьУстановкуСостоянияПрочтенностиПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	ОбъектСсылка = 
		ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Object"));

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда

		РаботаСПрочтениями.УстановитьСвойствоПрочтен(ОбъектСсылка, 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "WasRead", "Булево"));

		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ОбъектСсылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСсылка));

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 

#Область ФлагОбъекта

Процедура ЗаписатьФлагОбъекта(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьФлагОбъектаПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьФлагОбъектаПоВерсии206(ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	ОбъектСсылка = 
		ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Object",,Истина));

	Цвет = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Flag", "Строка", Истина);
	Флаг = ОбменСМобильнымиСерверПовтИсп.ПолучитьФлагПоПредставление(Цвет);

	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектуОтТекущегоПользователя(ОбъектСсылка, Флаг);

КонецПроцедуры 

#КонецОбласти 

#Область СостояниеПроцесса

Процедура ЗаписатьСостояниеПроцесса(СтруктураДанныхОбъекта, МобильныйКлиент)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьСостояниеПроцессаПоВерсии206(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСостояниеПроцессаПоВерсии206(ДанныеОбъекта)

	Тип = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Type", "Строка");

	Если СтрСравнить(Тип, "ExecutionProcess") = 0 Тогда
		ПроцессСсылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Process", "УникальныйИдентификатор"));
	Иначе
		Возврат;
	КонецЕсли;

	ПроцессОбъект = ПроцессСсылка.ПолучитьОбъект();
	Если ПроцессОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);
	Если Не ПроцессОбъект.ВерсияДанных = ВерсияДанных И ЗначениеЗаполнено(ВерсияДанных) Тогда

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. 
					|Настройка процесса на данном устройстве заменена версией с сервера.';
					|en = 'Pefrormance ""%1"" was not transferred because it was changed on the server. 
					|Process on this device was replaced with the version from the server.'"),
				ПроцессОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Если ПроцессОбъект.Завершен Тогда

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было завершено на сервере %2. 
					|Настройка процесса на данном устройстве заменена версией с сервера.';
					|en = 'Pefrormance ""%1"" was not transferred because it was finished on the server %2. 
					|Process on this device was replaced with the version from the server.'"),
				ПроцессОбъект.Наименование, ПроцессОбъект.ДатаЗавершения);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Попытка
		ПроцессОбъект.Заблокировать();
	Исключение

		ТекстПредупреждения = 
			СтрШаблон(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было 
							|заблокировано другим пользователем на сервере.';
							|en = 'Pefrormance ""%1"" was not transferred because it was 
							|blocked by another user on the server.'"),
				ПроцессОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецПопытки;

	ТекущееСостояние = ПроцессОбъект.Состояние;
	НовоеСостояние = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "NewState", "Строка");

	Если СтрСравнить(НовоеСостояние, "Active") = 0
		И Не ТекущееСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда

		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ПроцессОбъект.Записать();

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);

	ИначеЕсли СтрСравнить(НовоеСостояние, "Stopped") = 0
		И Не ТекущееСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда

		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
		ПроцессОбъект.Записать();

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);

	ИначеЕсли СтрСравнить(НовоеСостояние, "Terminated") = 0
		И Не ТекущееСостояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда

		ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(ПроцессОбъект.Ссылка);

		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
		ПроцессОбъект.ПричинаПрерывания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Comment", "Строка", Ложь);
		ПроцессОбъект.Записать();

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);

	КонецЕсли;

	ПроцессОбъект.Разблокировать();

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПроцессОбъект.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область ПринятиеЗадачиНаИсполнение

Процедура ЗаписатьПринятиеЗадачиНаИсполнение(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка");

	Если Версия >= "206" Тогда
		ЗаписатьПринятиеЗадачиНаИсполнениеПоВерсии206(СтруктураДанныхОбъекта, МобильныйКлиент, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПринятиеЗадачиНаИсполнениеПоВерсии206(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации)

	УстановитьПривилегированныйРежим(Истина);

	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	ПринятаКИсполнению = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Accepted", "Булево");
	ДатаПринятия = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "AcceptDate", "Дата", Ложь);
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVersion", "Строка", Ложь);

	
	РеквизитыЗадачи = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗадачаСсылка, 
			"Ссылка,ВерсияДанных,Выполнена,ПометкаУдаления,Наименование,
			|СостояниеБизнесПроцесса,ПринятаКИсполнению,ТочкаМаршрута");

	// Выполняем провеверку, что задача доступна пользователю по ролям и делегированию.
	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(ЗадачаСсылка);
	Если РезультатЗапроса.Пустой() Тогда

		// Выполняем регистрацию задачи на конкретном узле - это запустит механизм передачи удаления объекта
		// на указанный мобильный клиент, т.к. задача на нем больше не нужна
		ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыСинхронизации.МобильныйКлиент, ЗадачаСсылка);

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
							|т.к. задача более не доступна пользователю.';
							|en = 'Execution result of task ""%1"" was not transferred, 
							|because the task is no longer available to the user.'"),
				РеквизитыЗадачи.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	Запрос.УстановитьПараметр("Исполнитель", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.ВерсияДанных
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Исполнитель, ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка = Задачи.Ссылка
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Если РеквизитыЗадачи.Выполнена Тогда
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
								|т.к. задача была выполнена ранее.';
								|en = 'Acceptance of task ""%1"" was not transferred, 
								|because the task was executed earlier.'"),
					ЗадачаСсылка.Наименование);
					
		Иначе
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
								|т.к. задача уже была перенаправлена ранее.';
								|en = 'Forwarding of task ""%1"" was not transferred, 
								|because the task was forwarded earlier.'"),
					ЗадачаСсылка.Наименование);
		КонецЕсли;

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение ТекстПредупреждения;

	ИначеЕсли Не РеквизитыЗадачи.ВерсияДанных = ВерсияДанных Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
							|т.к. ранее задача была изменена на сервере.';
							|en = 'Acceptance of task ""%1"" was not transferred, 
							|because the task was changed on the server.'"),
				РеквизитыЗадачи.Наименование);

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	Попытка
		ЗадачаОбъект.Заблокировать();
	Исключение

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
							|т.к. ранее задача была изменена на сервере.';
							|en = 'Acceptance of task ""%1"" was not transferred, 
							|because the task was changed on the server.'"),
				РеквизитыЗадачи.Наименование);

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение ТекстПредупреждения;

	КонецПопытки;

	Если ПринятаКИсполнению Тогда
		
		Если РеквизитыЗадачи.Выполнена
			Или РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
			Или РеквизитыЗадачи.ПринятаКИсполнению
			Или РеквизитыЗадачи.ПометкаУдаления Тогда

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);
			Возврат;

		КонецЕсли;

		ЗадачаОбъект.ПринятаКИсполнению = Истина;
		ЗадачаОбъект.ДатаПринятияКИсполнению = ДатаПринятия;

		Если ЗадачаОбъект.Исполнитель.Пустая() Тогда
			ЗадачаОбъект.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;

		ЗадачаОбъект.Записать();
	Иначе

		Если ЗадачаОбъект.Выполнена
			Или Не ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен
			Или Не ЗадачаОбъект.ПринятаКИсполнению
			Или ЗадачаОбъект.ПометкаУдаления Тогда

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);
			Возврат;

		КонецЕсли;

		ЗадачаОбъект.ПринятаКИсполнению = Ложь;
		ЗадачаОбъект.ДатаПринятияКИсполнению = "00010101000000";

		Если Не ЗадачаОбъект.РольИсполнителя.Пустая() Тогда
			ЗадачаОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;

		ЗадачаОбъект.Записать();

	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьСтрокуАдресата(ТабличнаяЧасть, Адресат)

	ДанныеАдресата = 
		РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Адресат);

	АдресатСсылка = 
		ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
			ДанныеАдресата.Адрес, ДанныеАдресата.ОтображаемоеИмя);

	Если ЗначениеЗаполнено(АдресатСсылка) Тогда

		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Адресат = АдресатСсылка;

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 

// ТСК Близнюк С.И.; 30.10.2018; task#1602{
#Область ra_Nesootvetstvie

Процедура Записать_ra_Nesootvetstvie(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации)
	
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;

	Ссылка = Документы.ra_Nesootvetstvie.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка
		|ИЗ
		|	Документ.ra_Nesootvetstvie КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Документ = Документы.ra_Nesootvetstvie.СоздатьДокумент();
		Документ.УстановитьСсылкуНового(Ссылка);

	Иначе

		ОбъектНайденНаСервере = Истина;

		Документ = Ссылка.ПолучитьОбъект();
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	// Заполнение реквизитов документа
	Документ.Дата = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationDate", "Дата");
	//Документ.Номер = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationNumber", "Строка");
	
	Документ.DataVyyavleniya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataVyyavleniya", "Дата", Ложь);
	Документ.NarushennyeTrebovaniya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "NarushennyeTrebovaniya", "Строка");
	Документ.NomerVnutrennij = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "NomerVnutrennij", "Строка", Ложь);
	Документ.PodrobnoeOpisanie = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PodrobnoeOpisanie", "Строка");
		
	СсылкаНаVidNesootvetstviya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "VidNesootvetstviya", "УникальныйИдентификатор");
	Если ЗначениеЗаполнено(СсылкаНаVidNesootvetstviya) Тогда
		Документ.VidNesootvetstviya = Справочники.ra_VidyNesootvetstvij.ПолучитьСсылку(СсылкаНаVidNesootvetstviya);
	КонецЕсли;

	Документ.ПометкаУдаления = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MarkedForDeletion", "Булево", Ложь);
		
	Документ.Записать();

	ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
		Ссылка, НСтр("ru = 'Прием изменений с клиента: изменения записаны.'; en = 'Receiving changes from the client: changes saved.'"));

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Документ.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Документ.Ссылка);
	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Документ.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область ra_ZayavkaNaKontrolnuyuOperaciyu

Процедура Записать_ra_ZayavkaNaKontrolnuyuOperaciyu(ДанныеОбъекта, МобильныйКлиент, ПараметрыСинхронизации)
	
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;

	Ссылка = Документы.ra_ZayavkaNaKontrolnuyuOperaciyu.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка
		|ИЗ
		|	Документ.ra_ZayavkaNaKontrolnuyuOperaciyu КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Документ = Документы.ra_ZayavkaNaKontrolnuyuOperaciyu.СоздатьДокумент();
		Документ.УстановитьСсылкуНового(Ссылка);

	Иначе

		ОбъектНайденНаСервере = Истина;

		Документ = Ссылка.ПолучитьОбъект();
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	// Заполнение реквизитов документа
	Документ.Дата = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationDate", "Дата");
	//Документ.Номер = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CreationNumber", "Строка");
	
	Документ.DataPostupleniyaObektaNaKontrol = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataPostupleniyaObektaNaKontrol", "Дата", Ложь);
	Документ.DataZaversheniyaKO = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataZaversheniyaKO", "Дата", Ложь);
	
	СсылкаНаEhtapVyyavleniya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "EtapVyyavleniya", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(СсылкаНаEhtapVyyavleniya) Тогда
		Документ.EhtapVyyavleniya = Справочники.ra_EhtapyVyyavleniyaNesootvetstvij.ПолучитьСсылку(СсылкаНаEhtapVyyavleniya);
	КонецЕсли;

	KharakterRezultata = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "KharakterRezultata", "Строка", Ложь);
	Если ЗначениеЗаполнено(KharakterRezultata) Тогда
		Документ.KharakterRezultata = Перечисления.ra_KharakterRezultata[KharakterRezultata];
	КонецЕсли;

	СсылкаНаKontrolnoeMeropriyatie = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "KontrolnoeMeropriyatie", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(СсылкаНаKontrolnoeMeropriyatie) Тогда
		Документ.KontrolnoeMeropriyatie = Справочники.ra_KontrolnyeMeropriyatiya.ПолучитьСсылку(СсылкаНаKontrolnoeMeropriyatie);
	КонецЕсли;
	
	Документ.RezultatKO = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RezultatKO", "Строка", Ложь);
		
	СсылкаНаVidKontrolnojOperacii = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "VidKontrolnojOperacii", "УникальныйИдентификатор", Ложь);
	Если ЗначениеЗаполнено(СсылкаНаVidKontrolnojOperacii) Тогда
		Документ.VidKontrolnoyOperacii = Справочники.ra_VidyKontrolnyhOperacij.ПолучитьСсылку(СсылкаНаVidKontrolnojOperacii);
	КонецЕсли;

	Документ.OpisaniePredmetaKontrolya.Очистить();
	ТаблицаOpisaniePredmetaKontrolya = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "OpisaniePredmetaKontrolyaRows", , Ложь);
	Если Не ТаблицаOpisaniePredmetaKontrolya = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаOpisaniePredmetaKontrolya Цикл

			ДанныеСтроки = ПолучитьДанныеСтроки(ТаблицаOpisaniePredmetaKontrolya, СтрокаТаблица);

			НоваяСтрока = Документ.OpisaniePredmetaKontrolya.Добавить();
			НоваяСтрока.OboznachenieINaimenovaniePredmeta = ПолучитьЗначениеРеквизита(ДанныеСтроки, "OboznachenieINaimenovaniePredmeta", "Строка", Ложь);
			
		КонецЦикла;
	КонецЕсли;
	
	Документ.ПометкаУдаления = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "MarkedForDeletion", "Булево", Ложь);
	
	Документ.Записать();

	ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
		Ссылка, НСтр("ru = 'Прием изменений с клиента: изменения записаны.'; en = 'Receiving changes from the client: changes saved.'"));

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Документ.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Документ.Ссылка);
	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Документ.Ссылка));

КонецПроцедуры 

#КонецОбласти 
// ТСК Близнюк С.И.; 30.10.2018; task#1602}

#КонецОбласти
