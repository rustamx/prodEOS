
////////////////////////////////////////////////////////////////////////////////
// Сроки исполнения процессов: содержит процедуры и функции по работе со сроками процессов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров срока исполнения для определения длительности
// функцией ДлительностьПоСрокуИсполнения.
//
// Результат функции может быть переопределен в 
// СрокиИсполненияПроцессовПереопределяемый.ПриФормированииПараметровСрокаИсполненияДляОпределенияДлительности.
//
// Возвращаемое значение:
//  Структура
//   * СрокИсполнения - Дата
//   * ДатаОтсчета - Дата
//
Функция ПараметрыСрокаИсполненияДляОпределенияДлительности() Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.
		ПриФормированииПараметровСрокаИсполненияДляОпределенияДлительности(
			Параметры, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Параметры.Вставить("СрокИсполнения", Дата(1,1,1));
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	
	Возврат Параметры
	
КонецФункции

// Возвращает длительность (количество дней, часов, минут) по сроку исполнения.
//
// Результат может быть переопределен в 
// СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииДлительностиПоСрокуИсполнения.
// 
// Параметры:
//  ПараметрыСрокаИсполнения - Структура - см. функцию ПараметрыСрокаИсполненияДляОпределенияДлительности.
//
// Возвращаемое значение:
//  Структура
//   * Дни - Число - количество дней.
//   * Часы - Число - количество часов.
//   * Минуты - Число - количество минут.
//
Функция ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения) Экспорт
	
	ДлительностьИсполнения = Новый Структура;
	ДлительностьИсполнения.Вставить("Дни", 0);
	ДлительностьИсполнения.Вставить("Часы", 0);
	ДлительностьИсполнения.Вставить("Минуты", 0);
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииДлительностиПоСрокуИсполнения(
		ПараметрыСрокаИсполнения, ДлительностьИсполнения, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ДлительностьИсполнения;
	КонецЕсли;
	
	СрокИсполнения = ПараметрыСрокаИсполнения.СрокИсполнения;
	ДатаОтсчета = ПараметрыСрокаИсполнения.ДатаОтсчета;
	
	СкорректироватьДатуОтсчета(ДатаОтсчета, Новый Структура);
	
	Дни = 0;
	Часы = 0;
	Минуты = 0;
	
	ДлительностьРабочегоДня = 86400;
	ДлительностьИсполненияВСекундах = СрокИсполнения - ДатаОтсчета;
	
	Если ДлительностьИсполненияВСекундах > 0 Тогда
	
		// Корректировка длительности рабочего для.
		// Нужно для корректного вычисления относительного срока.
		// Точный срок равный концу дня, то последней день должен включаться полностью.
		Если СрокИсполнения = КонецДня(СрокИсполнения) Тогда
			ДлительностьИсполненияВСекундах = ДлительностьИсполненияВСекундах + 1;
		КонецЕсли;
		
		Дни = Цел(ДлительностьИсполненияВСекундах / ДлительностьРабочегоДня);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			Часы = Цел((ДлительностьИсполненияВСекундах - Дни * ДлительностьРабочегоДня) / 3600);
			Минуты = Окр((ДлительностьИсполненияВСекундах - Дни * ДлительностьРабочегоДня - Часы * 3600) / 60);
		КонецЕсли;
		
	КонецЕсли;
	
	ДлительностьИсполнения.Дни = Дни;
	ДлительностьИсполнения.Часы = Часы;
	ДлительностьИсполнения.Минуты = Минуты;
	
	Возврат ДлительностьИсполнения;
	
КонецФункции

// Возвращает структуру параметров длительности исполнения для определения точного срока
// функцией СрокИсполненияПоДлительности.
//
// Результат функции может быть переопределен в 
// СрокиИсполненияПроцессовПереопределяемый.ПриФормированииПараметровДлительностиИсполненияДляОпределенияТочногоСрока.
//
// Возвращаемое значение:
//  Структура
//   * Дни - Число
//   * Часы - Число
//   * Минуты - Число
//   * ДатаОтсчета - Дата
//
Функция ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока() Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.
		ПриФормированииПараметровДлительностиИсполненияДляОпределенияТочногоСрока(
			Параметры, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Параметры.Вставить("Дни", 0);
	Параметры.Вставить("Часы", 0);
	Параметры.Вставить("Минуты", 0);
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	
	Возврат Параметры
	
КонецФункции

// Возвращает срок исполнения датой по длительности (срок в секундах).
//
// Результат может быть переопределен в 
// СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииСрокИсполненияПоДлительности.
//
// Параметры:
//  ПараметрыДлительностиИсполнения - Структура - см. функцию ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока.
//
// Возвращаемое значение:
//   Дата
//
Функция СрокИсполненияПоДлительности(ПараметрыДлительностиИсполнения) Экспорт
	
	СрокИсполнения = Дата(1,1,1);
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииСрокИсполненияПоДлительности(
		ПараметрыДлительностиИсполнения, СрокИсполнения, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат СрокИсполнения;
	КонецЕсли;
	
	Дни = ПараметрыДлительностиИсполнения.Дни;
	Часы = ПараметрыДлительностиИсполнения.Часы;
	Минуты = ПараметрыДлительностиИсполнения.Минуты;
	ДатаОтсчета = ПараметрыДлительностиИсполнения.ДатаОтсчета;
	
	СкорректироватьДатуОтсчета(ДатаОтсчета, Новый Структура);
	
	Если Дни = 0 И Часы = 0 И Минуты = 0 Тогда
		Возврат СрокИсполнения;
	КонецЕсли;
	
	СрокВСекундах = Дни * 86400;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		СрокВСекундах = СрокВСекундах + Часы * 3600 + Минуты * 60;
	Иначе
		// Корректировка срока на последнюю секунду дня.
		// Предполагается, что если не используется время в сроках, то оно
		// равно концу дня.
		СрокВСекундах = СрокВСекундах - 1;
	КонецЕсли;
	
	СрокИсполнения = ДатаОтсчета + СрокВСекундах;
	
	Возврат СрокИсполнения;
	
КонецФункции

// Возвращает дату от которой следует производить расчет сроков в процессе.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, ДанныеФормыСтруктура - процесс.
//  ТочкаМаршрутаВозвратаНаДоработку -  ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута процесса
//                                     в которой создается задача ознакомления с возможность
//                                     отправить процесс на следующий цикл.
//  ДляНовойИтерации - Булево - если передано значение Истина, то будет возвращена текущая дата.
//
// Возвращаемое значение:
//  Дата - дата отсчета для расчета сроков процесса.
//
Функция ДатаОтсчетаДляРасчетаСроковПроцесса(Процесс,
	ТочкаМаршрутаВозвратаНаДоработку = Неопределено,
	ДляНовойИтерации = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаОтсчета = ТекущаяДатаСеанса();
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииДатыОтсчетаДляРасчетаСроковПроцесса(
		Процесс, ТочкаМаршрутаВозвратаНаДоработку, ДляНовойИтерации, ДатаОтсчета, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат ДатаОтсчета;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, "Ссылка, ДатаНачала, Стартован, ВедущаяЗадача");
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Ссылка)
		И РеквизитыПроцесса.Стартован
		И Не ДляНовойИтерации Тогда
		
		ДатаОтсчета = РеквизитыПроцесса.ДатаНачала;
		
		Если ЗначениеЗаполнено(ТочкаМаршрутаВозвратаНаДоработку) Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	МАКСИМУМ(ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
				|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
			Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаВозвратаНаДоработку);
			Запрос.УстановитьПараметр("БизнесПроцесс", РеквизитыПроцесса.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаИсполнения)Тогда
				ДатаОтсчета = Выборка.ДатаИсполнения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОтсчета;
	
КонецФункции

// Корректирует дату отсчета для вычисления сроков исполнения.
//
// Может быть переопределена в процедуре 
// СрокиИсполненияПроцессовПереопределяемый.ПриКорректировкиДатыОтсчета.
//
// Параметры:
//  ДатаОтсчета - ДатаИВремя - дата отсчета.
//  ДопПарметры - Структура - дополнительные параметры для корректировки.
//
Процедура СкорректироватьДатуОтсчета(ДатаОтсчета, ДопПарметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриКорректировкеДатыОтсчета(
		ДатаОтсчета, ДопПарметры, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		// Убираем секунды из даты отсчета
		СрокиИсполненияПроцессовКлиентСервер.УбратьСекундыВДате(ДатаОтсчета);
	Иначе
		
		ВремяДатыОтсчета = Дата(1,1,1) + Час(ДатаОтсчета) * 3600 + Минута(ДатаОтсчета) *60;
		
		// Смещение даты отсчета на начало следующего дня, если
		// дата отсчета больше начала рабочего дня (9.00).
		Если ВремяДатыОтсчета > Дата(1,1,1) + 9 * 3600 Тогда
			ДатаОтсчета = НачалоДня(ДатаОтсчета) + 86400;
		Иначе
			ДатаОтсчета = НачалоДня(ДатаОтсчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет длительность шаблонов составного процесса в таблице
// шаблонов.
//
// Параметры:
//  Шаблоны - ТаблицаЗначений, ДанныеФормыКоллекция - таблица шаблонов
//   * Шаблон - СправочникСсылка - ссылка на шаблон.
//   * СрокИсполненияПроцессаДни - Число - относительный срок, дни.
//   * СрокИсполненияПроцессаЧасы - Число - относительный срок, часы.
//   * СрокИсполненияПроцессаМинуты - Число - относительный срок, минуты.
//
Процедура ЗаполнитьДлительностьШаблоновСоставногоПроцесса(Шаблоны) Экспорт
	
	Для Каждого Стр Из Шаблоны Цикл
		Стр.СрокИсполненияПроцессаДни = 0;
		Стр.СрокИсполненияПроцессаЧасы = 0;
		Стр.СрокИсполненияПроцессаМинуты = 0;
		Если ЗначениеЗаполнено(Стр.Шаблон) Тогда
			ДлительностьШаблона = ДлительностьИсполненияПроцесса(Стр.Шаблон);
			ЗаполнитьЗначенияСвойств(Стр, ДлительностьШаблона);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет срок исполнения задачи по параметрам.
//
// Процедура может быть переопределен в 
// СрокиИсполненияПроцессовПереопределяемый.ПриЗаполненииСрокаИсполненияЗадач.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя
//  ВариантУстановкиСрокаИсполнения - Перечисление.ВариантыУстановкиСрокаИсполнения - 
//                                    вариант установки срока в процессе, для текущей задачи.
//  СрокИсполнения - Дата - срок исполнения в процессе.
//  СрокИсполненияДни - Число - относительный срок исполнения в процессе.
//  СрокИсполненияЧасы - Число - относительный срок исполнения в процессе.
//  СрокИсполненияМинуты - Число - относительный срок исполнения в процессе.
//
Процедура ЗаполнитьСрокИсполненияЗадачи(Задача,
	ВариантУстановкиСрокаИсполнения,
	СрокИсполнения,
	СрокИсполненияДни,
	СрокИсполненияЧасы,
	СрокИсполненияМинуты) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриЗаполненииСрокаИсполненияЗадач(
		Задача,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты,
		СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Задача.СрокИсполнения = Дата(1,1,1);
	
	Если Не ЗначениеЗаполнено(СрокИсполнения)
		И Не ЗначениеЗаполнено(СрокИсполненияДни)
		И Не ЗначениеЗаполнено(СрокИсполненияЧасы)
		И Не ЗначениеЗаполнено(СрокИсполненияМинуты)
		Или Не ЗначениеЗаполнено(Задача.Дата) Тогда
		
		Возврат;
		
	ИначеЕсли ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
		
		ПараметрыДляОпределенияТочногоСрока = ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
		ПараметрыДляОпределенияТочногоСрока.Дни = СрокИсполненияДни;
		ПараметрыДляОпределенияТочногоСрока.Часы = СрокИсполненияЧасы;
		ПараметрыДляОпределенияТочногоСрока.Минуты = СрокИсполненияМинуты;
		ПараметрыДляОпределенияТочногоСрока.ДатаОтсчета = Задача.Дата;
		
		Задача.СрокИсполнения = СрокИсполненияПоДлительности(ПараметрыДляОпределенияТочногоСрока);
		
	Иначе
		
		Задача.СрокИсполнения = СрокИсполнения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РасчетСроковПроцессов

// Возвращает структуру параметров для расчета сроков процесса.
//
// Результат может быть переопределен в
// СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииПараметровДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура
//   * ДатаОтсчета - Дата
//   * РеквизитТаблицаСИзмененнымСроком - Строка
//   * ИндексСтроки - Строка
//   * ТекущаяИтерация - Число
//   * ЗаполнятьСрокПроцессаТолькоПриПревышении - Булево
//
Функция ПараметрыДляРасчетаСроков() Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииПараметровДляРасчетаСроков(
		Параметры, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	Параметры.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	Параметры.Вставить("ИндексСтроки", 0);
	Параметры.Вставить("ТекущаяИтерация", 1);
	Параметры.Вставить("ЗаполнятьСрокПроцессаТолькоПриПревышении", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает пустую таблицу для расчета сроков процесса.
// Используется в процедуре РассчитатьСрокиИсполнения.
//
// Результат функции может быть переопределен в
// СрокиИсполненияПроцессов.ПриФормированииПустойТаблицыСроков.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * IDСрока - строка с путым идентификатором является датой отсчета в текущей таблице.
//   * СрокИсполнения - Дата
//   * СрокИсполненияДни - Число
//   * СрокИсполненияЧасы - Число
//   * СрокИсполненияМинуты - Число
//   * ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//   * Пройден - Булево
//   * Изменен - Булево - признак того, что в текущей строке срока произошли изменения.
//                        Учитываются изменения срока как текущей строки, так и подчиненных срок.
//   * ПодчиненныеСроки - Структура
//      ** Сроки - см. ПустаяТаблицаСроков()
//      ** Предшественники - см. ПустаяТаблицаПредшественников()
//      ** IDРассчитанногоСрок - строка с рассчитанным сроком.
//
Функция ПустаяТаблицаСроков() Экспорт
	
	Сроки = Новый ТаблицаЗначений();
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриФормированииПустойТаблицыСроков(
		Сроки, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Сроки;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("УникальныйИдентификатор"));
	ОписаниеТиповУникальныйИдентификатор = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения"));
	ОписаниеТиповВариантыУстановкиСрокаИсполнения = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	ОписаниеТиповСтруктура = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповЧислоДата = Новый ОписаниеТипов(МассивТипов);
	
	Сроки.Колонки.Добавить("IDСрока", ОписаниеТиповУникальныйИдентификатор);
	Сроки.Колонки.Добавить("СрокИсполнения", ОписаниеТиповДата);
	Сроки.Колонки.Добавить("СрокИсполненияДни", ОписаниеТиповЧисло);
	Сроки.Колонки.Добавить("СрокИсполненияЧасы", ОписаниеТиповЧисло);
	Сроки.Колонки.Добавить("СрокИсполненияМинуты", ОписаниеТиповЧисло);
	
	Сроки.Колонки.Добавить("ВариантУстановкиСрокаИсполнения",
		ОписаниеТиповВариантыУстановкиСрокаИсполнения);
	
	Сроки.Колонки.Добавить("Пройден", ОписаниеТиповБулево);
	Сроки.Колонки.Добавить("Изменен", ОписаниеТиповБулево);
	Сроки.Колонки.Добавить("ПодчиненныеСроки", ОписаниеТиповСтруктура);
	
	Возврат Сроки;
	
КонецФункции

// Возвращает пустую таблицу предшественников для расчета сроков процесса.
// Используется в процедуре РассчитатьСрокиИсполнения.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Последователь - Число
//   * Предшественник - Число
//
Функция ПустаяТаблицаПредшественников() Экспорт
	
	Предшественники = Новый ТаблицаЗначений();
	Предшественники.Колонки.Добавить("Последователь");
	Предшественники.Колонки.Добавить("Предшественник");
	
	Возврат Предшественники;
	
КонецФункции

// Рассчитывает в таблице (Сроки) зависимые сроки от рассчитанного (РассчитанныйСрок).
// Рекурсивная процедура.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков
//  Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников
//  IDРассчитанногоСрок - УникальныйИдентификатор - идентификатор рассчитанного срока, для последователей которого следует произвести расчет сроков.
//
Процедура РассчитатьСрокиИсполнения(
	Сроки, Предшественники, IDРассчитанногоСрок) Экспорт
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриРасчетеСроковИсполнения(
		Сроки, Предшественники, IDРассчитанногоСрок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ЗависимыеСроки = ЗависимыеСроки(Сроки ,Предшественники, IDРассчитанногоСрок);
	
	Для Каждого СрокДляРасчета Из ЗависимыеСроки Цикл
		
		ДатаОтсчетаДляЗависимогоСрока = 
			ДатаОтсчетаДляЗависимогоСрока(Сроки, Предшественники, СрокДляРасчета.IDСрока);
		
		Если ДатаОтсчетаДляЗависимогоСрока = Неопределено
			Или ДатаОтсчетаДляЗависимогоСрока = Дата(1,1,1) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Не СрокДляРасчета.Пройден Тогда
			
			Если ЗначениеЗаполнено(СрокДляРасчета.ПодчиненныеСроки) Тогда
				
				ПодчиненныеСроки = СрокДляРасчета.ПодчиненныеСроки.Сроки;
				
				// Обновим даты отсчета в подчиненной таблице
				Отбор = Новый Структура("IDСрока", УникальныйИдентификаторПустой());
				СтрокиСДатойОтсчета = ПодчиненныеСроки.НайтиСтроки(Отбор);
				Для Каждого СтрСДатойОтсчета Из СтрокиСДатойОтсчета Цикл
					СтрСДатойОтсчета.СрокИсполнения = ДатаОтсчетаДляЗависимогоСрока;
				КонецЦикла;
				
				ПодчиненныеПредшественники = СрокДляРасчета.ПодчиненныеСроки.Предшественники;
				IDПодчиненногоРассчитанногоСрока = СрокДляРасчета.ПодчиненныеСроки.IDРассчитанногоСрок;
				
				ПредыдущийСрокИсполнения = СрокДляРасчета.СрокИсполнения;
				
				// Рассчитаем подчиненные сроки
				РассчитатьСрокиИсполнения(
					ПодчиненныеСроки,
					ПодчиненныеПредшественники,
					IDПодчиненногоРассчитанногоСрока);
				
				// Определим и заполним текущий срок по подчиненным.
				МаксимальныйПодчиненныйСрок = Дата(1,1,1);
					
				Для Каждого СтрПодчиненныйСрок Из ПодчиненныеСроки Цикл
					
					// Пропускаем дату отсчета.
					Если СтрПодчиненныйСрок.IDСрока = УникальныйИдентификаторПустой() Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрПодчиненныйСрок.СрокИсполнения) Тогда
						МаксимальныйПодчиненныйСрок = Дата(1,1,1);
						Прервать;
					КонецЕсли;
					
					МаксимальныйПодчиненныйСрок = Макс(
						МаксимальныйПодчиненныйСрок, СтрПодчиненныйСрок.СрокИсполнения);
					
				КонецЦикла;
				
				СрокДляРасчета.СрокИсполнения = МаксимальныйПодчиненныйСрок;
				
				// Определим признак изменения для текущей строки сроков.
				Отбор = Новый Структура("Изменен", Истина);
				Если МаксимальныйПодчиненныйСрок <> ПредыдущийСрокИсполнения
					Или ПодчиненныеСроки.НайтиСтроки(Отбор).Количество() > 0 Тогда
					
					СрокДляРасчета.Изменен = Истина;
				КонецЕсли;
				
			Иначе
				
				СрокИсполнения = Дата(1,1,1);
				Дни = 0;
				Часы = 0;
				Минуты = 0;
				
				Если ДатаОтсчетаДляЗависимогоСрока <> Дата(1,1,1) Тогда
					Если СрокДляРасчета.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ТочныйСрок Тогда
						
						ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
						ПараметрыСрокаИсполнения.СрокИсполнения = СрокДляРасчета.СрокИсполнения;
						ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчетаДляЗависимогоСрока;
						
						Длительность = ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
						
						Дни = Длительность.Дни;
						Часы = Длительность.Часы;
						Минуты = Длительность.Минуты;
					Иначе
						
						ПараметрыДлительности = ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
						ПараметрыДлительности.Дни = СрокДляРасчета.СрокИсполненияДни;
						ПараметрыДлительности.Часы = СрокДляРасчета.СрокИсполненияЧасы;
						ПараметрыДлительности.Минуты = СрокДляРасчета.СрокИсполненияМинуты;
						ПараметрыДлительности.ДатаОтсчета = ДатаОтсчетаДляЗависимогоСрока;
							
						СрокИсполнения = СрокИсполненияПоДлительности(ПараметрыДлительности);
						
					КонецЕсли;
				КонецЕсли;
				
				Если СрокДляРасчета.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ТочныйСрок Тогда
					Если СрокДляРасчета.СрокИсполненияДни <> Дни
						Или СрокДляРасчета.СрокИсполненияЧасы <> Часы
						Или СрокДляРасчета.СрокИсполненияМинуты <> Минуты Тогда
						
						СрокДляРасчета.Изменен = Истина;
					КонецЕсли;
					
					СрокДляРасчета.СрокИсполненияДни = Дни;
					СрокДляРасчета.СрокИсполненияЧасы = Часы;
					СрокДляРасчета.СрокИсполненияМинуты = Минуты;
				Иначе
					Если СрокДляРасчета.СрокИсполнения <> СрокИсполнения Тогда
						СрокДляРасчета.Изменен = Истина;
					КонецЕсли;
					СрокДляРасчета.СрокИсполнения = СрокИсполнения;
				КонецЕсли;
				
			КонецЕсли;
			
			СрокДляРасчета.Пройден = Истина;
			
		КонецЕсли;
		
		РассчитатьСрокиИсполнения(
			Сроки, Предшественники, СрокДляРасчета.IDСрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает все зависимые сроки от текущего.
// Используется в процедуре РассчитатьСрокиИсполнения.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников.
//  IDСрока - СтрокаТаблицыЗначений - текущий срок в таблице Сроки (см. ПустаяТаблицаСроков).
//
Функция ЗависимыеСроки(Сроки, Предшественники, IDСрока) Экспорт
	
	Результат = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Предшественник", IDСрока);
	
	НайденныеПоследователи = Предшественники.НайтиСтроки(Отбор);
	
	Для Каждого СтрПоследователь Из НайденныеПоследователи Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("IDСрока", СтрПоследователь.Последователь);
		НайденныеСроки = Сроки.НайтиСтроки(Отбор);
		
		Для Каждого НайденныйСрок Из НайденныеСроки Цикл
			Результат.Добавить(НайденныйСрок);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату отсчета для зависимого срока.
// Используется в процедуре РассчитатьСрокиИсполнения.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников.
//  IDСрока - СтрокаТаблицыЗначений - Зависимый срок в таблице Сроки (см. ПустаяТаблицаСроков).
//
Функция ДатаОтсчетаДляЗависимогоСрока(Сроки, Предшественники, IDСрока) Экспорт
	
	ДатаОтсчета = Дата(1,1,1);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Последователь", IDСрока);
	
	НайденныеПредшественники = Предшественники.НайтиСтроки(Отбор);
	
	Для Каждого СтрПредшественник Из НайденныеПредшественники Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("IDСрока", СтрПредшественник.Предшественник);
		НайденныеСроки = Сроки.НайтиСтроки(Отбор);
		
		Для Каждого НайденныйСрок Из НайденныеСроки Цикл
			
			Если Не НайденныйСрок.Пройден Тогда
				Возврат Неопределено;
			Иначе
				ДатаОтсчета = Макс(ДатаОтсчета, НайденныйСрок.СрокИсполнения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДатаОтсчета;
	
КонецФункции

//Возвращает признак наличия точных сроков исполнения в процессе.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект,
//            СправочникОбъект.Шаблон<Имя шаблона процесса>,
//            ДанныеФормыСтуктура - процесс или шаблон процесса.
//
// Возвращаемое значение:
//  Булево - признак наличия точных сроков в процессе.
//
Функция ВПроцессеЕстьТочныеСрокиИсполнения(Процесс) Экспорт
	
	Результат = Ложь;
	
	ТочныйСрок = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	
	МетаданныеПроцесса = Процесс.Ссылка.Метаданные();
	
	Если МетаданныеПроцесса.Реквизиты.Найти("ВариантУстановкиСрокаИсполнения") <> Неопределено Тогда
		Если Процесс.ВариантУстановкиСрокаИсполнения = ТочныйСрок Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено
		И Процесс.Исполнители.Количество() > 0 Тогда
		
		Если Процесс.Исполнители[0].ВариантУстановкиСрокаИсполнения = ТочныйСрок Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти(
		"ВариантУстановкиСрокаОбработкиРезультатов") <> Неопределено Тогда
		
		Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов = ТочныйСрок Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет дату отсчета в данные для расчета сроков.
// Дата отсчета должна добавляться всегда первой строкой.
// Дате отсчета соответствует уникальный идентификатор пустой.
//
// Процедура может быть переопределена в
// СрокиИсполненияПроцессовПереопределяемый.ПриДобавленииДатыОтсчетаВДанныеДляРасчета.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ПараметрыДляРасчета - Структура - см. функцию ПараметрыДляРасчетаСроков.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//
Процедура ДобавитьДатуОтсчетаВДанныеДляРасчета(
	Сроки, Предшественники, ИдентификаторыСроков, ПараметрыДляРасчета,
	ПредшественникиСледующегоЭтапа) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриДобавленииДатыОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков, ПараметрыДляРасчета,
		ПредшественникиСледующегоЭтапа, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	IDДатыОтсчета = УникальныйИдентификаторПустой();
	ИдентификаторыСроков.Вставить(IDДатыОтсчета, "ДатаОтсчета");
	
	СтрокаСрок = Сроки.Добавить();
	СтрокаСрок.IDСрока = IDДатыОтсчета;
	СтрокаСрок.СрокИсполнения = ПараметрыДляРасчета.ДатаОтсчета;
	СтрокаСрок.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	СтрокаСрок.Пройден = Истина; // считаем, что дата отсчета всегда рассчитана в таблице и ее пересчет не требуется.
	
	// Дата отсчета всегда является предшественником для следующих строк в таблице Сроки.
	ПредшественникиСледующегоЭтапа.Добавить(IDДатыОтсчета);
	
КонецПроцедуры

// Добавляет срок исполнителя в данные для расчета сроков.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  Процесс - БизнесПроцессОбъект, ДанныеФормыСтруктура - объект процесса/шаблона.
//  СрокУчастникаИзменен - Булево - признак того, что срок исполнения изменился.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ИмяИдентификатораСрока - Строка - описание (роль) срока в процессе.
//
Процедура ДобавитьСрокИсполнителяВДанныеДляРасчета(
	Сроки, Предшественники,
	Процесс,
	СрокУчастникаИзменен,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ИмяИдентификатораСрока = Неопределено) Экспорт
	
	ПараметрыСрокаУчастника = Новый Структура;
	ПараметрыСрокаУчастника.Вставить("Участник", Процесс.Исполнитель);
	ПараметрыСрокаУчастника.Вставить("СрокИсполнения", Процесс.СрокИсполнения);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияДни", Процесс.СрокИсполненияДни);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияЧасы", Процесс.СрокИсполненияЧасы);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияМинуты", Процесс.СрокИсполненияМинуты);
	ПараметрыСрокаУчастника.Вставить("ВариантУстановкиСрока", Процесс.ВариантУстановкиСрокаИсполнения);
	
	ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		ПараметрыСрокаУчастника,
		СрокУчастникаИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		ИмяИдентификатораСрока);
	
КонецПроцедуры

// Добавляет срок проверяющего в данные для расчета сроков.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  Процесс - БизнесПроцессОбъект, ДанныеФормыСтруктура - объект процесса/шаблона.
//  СрокУчастникаИзменен - Булево - признак того, что срок исполнения изменился.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ИмяИдентификатораСрока - Строка - описание (роль) срока в процессе.
//
Процедура ДобавитьСрокПроверяющегоВДанныеДляРасчета(
	Сроки, Предшественники,
	Процесс,
	СрокУчастникаИзменен,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ИмяИдентификатораСрока = Неопределено) Экспорт
	
	ПараметрыСрокаУчастника = Новый Структура;
	ПараметрыСрокаУчастника.Вставить("Участник", Процесс.Проверяющий);
	ПараметрыСрокаУчастника.Вставить("СрокИсполнения", Процесс.СрокОбработкиРезультатов);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияДни", Процесс.СрокОбработкиРезультатовДни);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияЧасы", Процесс.СрокОбработкиРезультатовЧасы);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияМинуты", Процесс.СрокОбработкиРезультатовМинуты);
	
	ПараметрыСрокаУчастника.Вставить("ВариантУстановкиСрока",
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов);
	
	ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		ПараметрыСрокаУчастника,
		СрокУчастникаИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		ИмяИдентификатораСрока);
	
КонецПроцедуры

// Добавляет срок автора в данные для расчета сроков.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  Процесс - БизнесПроцессОбъект, ДанныеФормыСтруктура - объект процесса/шаблона.
//  СрокУчастникаИзменен - Булево - признак того, что срок исполнения изменился.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ИмяИдентификатораСрока - Строка - описание (роль) срока в процессе.
//
Процедура ДобавитьСрокАвтораВДанныеДляРасчета(
	Сроки, Предшественники,
	Процесс,
	СрокУчастникаИзменен,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ИмяИдентификатораСрока = Неопределено) Экспорт
	
	ПараметрыСрокаУчастника = Новый Структура;
	ПараметрыСрокаУчастника.Вставить("Участник", Процесс.Автор);
	ПараметрыСрокаУчастника.Вставить("СрокИсполнения", Процесс.СрокОбработкиРезультатов);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияДни", Процесс.СрокОбработкиРезультатовДни);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияЧасы", Процесс.СрокОбработкиРезультатовЧасы);
	ПараметрыСрокаУчастника.Вставить("СрокИсполненияМинуты", Процесс.СрокОбработкиРезультатовМинуты);
	
	ПараметрыСрокаУчастника.Вставить("ВариантУстановкиСрока",
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов);
	
	ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		ПараметрыСрокаУчастника,
		СрокУчастникаИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		ИмяИдентификатораСрока);
	
КонецПроцедуры

// Добавляет сроки таблицы участников в данные для расчета сроков.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ТаблицаУчастников - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей.
//  ИндексИзменнойСтроки - Число - индекс измененной строки.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения процесса.
//  ИмяРеквизитаПорядокИсполнения - Строка - имя реквизита порядка исполнения в таблице исполнителей.
//
Процедура ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
	Сроки, Предшественники,
	ТаблицаУчастников, Знач ИндексИзменнойСтроки,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ВариантИсполнения = Неопределено,
	ИмяРеквизитаПорядокИсполнения = "") Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.
		ПриДобавленииСроковТаблицыУчастниковПроцессаВДанныеДляРасчета(
			Сроки, Предшественники,
			ТаблицаУчастников, ИндексИзменнойСтроки,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроков,
			ВариантИсполнения,
			ИмяРеквизитаПорядокИсполнения,
			СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоУчастников = ТаблицаУчастников.Количество();
	
	Если КоличествоУчастников = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредшественникиТекущегоЭтапа = 
		ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПредшественникиСледующегоЭтапа);
	ПредшественникиСледующегоЭтапа.Очистить();
	
	Если ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		И ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Смешанно
		И ИндексИзменнойСтроки < КоличествоУчастников Тогда
		
		ИндексИзменнойСтроки = 0;
	КонецЕсли;
	
	IDСрокаИсполненияОтвественного = Неопределено;
	
	Для ИндексСтроки = 0 По КоличествоУчастников - 1 Цикл
		
		СтрУчастник = ТаблицаУчастников[ИндексСтроки];
		
		IDТекущегоСрокаИсполнения = Новый УникальныйИдентификатор;
		
		СтрокаСрок = Сроки.Добавить();
		СтрокаСрок.IDСрока = IDТекущегоСрокаИсполнения;
		
		СтрокаСрок.СрокИсполнения = СтрУчастник.СрокИсполнения;
		
		Если ИндексСтроки >= ИндексИзменнойСтроки Тогда
			СтрокаСрок.Пройден = Ложь;
		Иначе
			СтрокаСрок.Пройден = Истина;
		КонецЕсли;
		
		Если ИдентификаторыСроков <> Неопределено Тогда
			ИдентификаторыСроков.Вставить(
				IDТекущегоСрокаИсполнения, "Исполнители_" + Строка(ИндексСтроки));
		КонецЕсли;
		
		СтрокаСрок.СрокИсполненияДни = СтрУчастник.СрокИсполненияДни;
		СтрокаСрок.СрокИсполненияЧасы = СтрУчастник.СрокИсполненияЧасы;
		СтрокаСрок.СрокИсполненияМинуты = СтрУчастник.СрокИсполненияМинуты;
		
		СтрокаСрок.ВариантУстановкиСрокаИсполнения = СтрУчастник.ВариантУстановкиСрокаИсполнения;
		
		Если ИндексСтроки > 0
			И ЗначениеЗаполнено(ИмяРеквизитаПорядокИсполнения)
			И СтрУчастник[ИмяРеквизитаПорядокИсполнения] = 
				Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
				
			ПредшественникиТекущегоЭтапа = 
				ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПредшественникиСледующегоЭтапа);
			ПредшественникиСледующегоЭтапа.Очистить();
		КонецЕсли;
		
		Для Каждого СтрПредшественникТекущегоЭтапа Из ПредшественникиТекущегоЭтапа Цикл
			СтрПредшественник = Предшественники.Добавить();
			СтрПредшественник.Последователь = IDТекущегоСрокаИсполнения;
			СтрПредшественник.Предшественник = СтрПредшественникТекущегоЭтапа;
		КонецЦикла;
		
		Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(СтрУчастник) Тогда
			ПредшественникиСледующегоЭтапа = 
				ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПредшественникиТекущегоЭтапа);
			IDСрокаИсполненияОтвественного = IDТекущегоСрокаИсполнения;
		Иначе
			ПредшественникиСледующегоЭтапа.Добавить(IDТекущегоСрокаИсполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(IDСрокаИсполненияОтвественного) Тогда
		ПредшественникиСледующегоЭтапа.Добавить(IDСрокаИсполненияОтвественного);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру измененных сроков процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, СправочникОбъект.Шаблон<Имя шаблона процесса>, ДанныеФормыСтуктура - процесс или шаблон процесса.
//  Параметры - Структура - см. функцию ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - измененные сроки процесса/шаблона.
//   * СрокАвтораИзменен - Булево
//   * СрокПроверяющегоИзменен - Булево
//   * СрокИсполнителяИзменен - Булево
//   * ИндексИзменнойСтроки - Число - индекс измененной строки Исполнители.
//
Функция ИзмененныеСрокиПроцесса(Процесс, Параметры) Экспорт
	
	Результат = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииИзмененныхСроковПроцесса(
		Процесс, Параметры, Результат, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("СрокАвтораИзменен", Ложь);
	Результат.Вставить("СрокПроверяющегоИзменен", Ложь);
	Результат.Вставить("СрокИсполнителяИзменен", Ложь);
	Результат.Вставить("ИндексИзменнойСтроки", 0);
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ИндексСтроки = Параметры.ИндексСтроки;
	
	МетаданныеПроцесса = Процесс.Ссылка.Метаданные();
	ЕстьТаблицаИсполнители = МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено;
	
	Если ЕстьТаблицаИсполнители Тогда
		
		КоличествоИсполнителей = Процесс.Исполнители.Количество();
		
		Результат.ИндексИзменнойСтроки = КоличествоИсполнителей;
		
		Если РеквизитТаблицаСИзмененнымСроком = ""
			Или РеквизитТаблицаСИзмененнымСроком = "ВариантИсполнения" Тогда
			
			Результат.ИндексИзменнойСтроки = 0;
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			
		ИначеЕсли РеквизитТаблицаСИзмененнымСроком = "Автор"
			Или РеквизитТаблицаСИзмененнымСроком = "Проверяющий"
			Или РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов" Тогда
			
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			
		ИначеЕсли РеквизитТаблицаСИзмененнымСроком = "Исполнители" Тогда
			
			Результат.ИндексИзменнойСтроки = ИндексСтроки;
			Если Результат.ИндексИзменнойСтроки < КоличествоИсполнителей Тогда
				Результат.СрокАвтораИзменен = Истина;
				Результат.СрокПроверяющегоИзменен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если РеквизитТаблицаСИзмененнымСроком = ""
			Или РеквизитТаблицаСИзмененнымСроком = "Исполнитель"
			Или РеквизитТаблицаСИзмененнымСроком = "СрокИсполнения" Тогда
			
			Результат.СрокИсполнителяИзменен = Истина;
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			
		ИначеЕсли РеквизитТаблицаСИзмененнымСроком = "Автор"
			Или РеквизитТаблицаСИзмененнымСроком = "Проверяющий"
			Или РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов"
			Или РеквизитТаблицаСИзмененнымСроком = "КоличествоИтераций" Тогда
			
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет последний рассчитанный срок в таблице сроков.
// Последний рассчитанный срок определяется первой пройденной строкой,
// у которой есть последователи с не рассчитанным сроком.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков()
//  Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников()
//
Функция IDПоследнегоРассчитанногоСрока(Сроки, Предшественники) Экспорт
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Предшественник", СтрокаСрок.IDСрока);
		
		НайденныеПоследователи = Предшественники.НайтиСтроки(Отбор);
		
		Для Каждого СтрПоследователь Из НайденныеПоследователи Цикл
			СрокПоследователя = Сроки.Найти(СтрПоследователь.Последователь, "IDСрока");
			Если СтрокаСрок.Пройден И СрокПоследователя.Пройден = Ложь Тогда
				Возврат СтрокаСрок.IDСрока
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат УникальныйИдентификаторПустой();
	
КонецФункции

// Возвращает структуру данных для расчета сроков.
// Используется в процедурах формирующих данные для расчета сроков по процессу.
//
// Возвращаемое значение:
//  Структура
//   * Ссылка - БизнесПроцессСсылка - ссылка на процесс.
//   * ИсходныйСрокИсполнения - Дата - сроки исполнения процесса до расчета срока.
//   * Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков.
//   * Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников()
//   * IDРассчитанногоСрок - УникальныйИдентификатор - индетификатор последнего рассчитанного срока
//                           в тбалице Сроки
//   * ИдентификаторыСроков - Соответствие - идентификаторов сроков и их расположения в процессе, по которому
//                                          заполняется процесс после расчета.
//
Функция ДанныеДляРасчетаСроков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("ИсходныйСрокИсполнения");
	Результат.Вставить("Сроки");
	Результат.Вставить("Предшественники");
	Результат.Вставить("IDРассчитанногоСрок");
	Результат.Вставить("ИдентификаторыСроков");
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает сроки исполнения для нового процесса.
//
// Процедура может быть переопределена в
// СрокиИсполненияПроцессовПереопределяемый.ПриРасчетеСрокаИсполненияНовогоПроцесса.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект
//
Процедура РассчитатьСрокИсполненияДляНовогоПроцесса(ПроцессОбъект) Экспорт
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриРасчетеСрокаИсполненияНовогоПроцесса(
		ПроцессОбъект, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыДляРасчетаСроков();
	Параметры.ДатаОтсчета = ТекущаяДатаСеанса();
	
	ТипПроцесса = ТипЗнч(ПроцессОбъект.Ссылка);
	
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		РассчитатьСрокиПроцессаИсполнения(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		Или ТипПроцесса = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
		Или ТипПроцесса = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
		
		РассчитатьСрокиСоставногоПроцесса(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		РассчитатьСрокиОзнакомления(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		РассчитатьСрокиПоручения(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		РассчитатьСрокиРассмотрения(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		РассчитатьСрокиРегистрации(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		РассчитатьСрокиСогласования(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		РассчитатьСрокиУтверждения(ПроцессОбъект, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректно установленных сроков участников процесса.
//
Функция СрокиУчастниковПроцессаКорректны(Объект, УчитыватьСрокОбработкиРезультата = Истина) Экспорт
	
	НарушенаПоследовательностьСроков = Ложь;
	ЕстьУчастникиБезСрокаИсполнения = Ложь;
	
	МетаданныеПроцесса = Объект.Ссылка.Метаданные();
	
	ЕстьСрокИсполненияВТалицеИсполнители = 
		(МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено)
		И (МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("СрокИсполнения") <> Неопределено);
	
	ЕстьСрокИсполнения = 
		(МетаданныеПроцесса.Реквизиты.Найти("СрокИсполнения") <> Неопределено);
	
	ЕстьСрокОбработкиРезультатов = 
		(МетаданныеПроцесса.Реквизиты.Найти("СрокОбработкиРезультатов") <> Неопределено);
	
	СрокИсполненияУчастников = Дата(1,1,1);
	
	Если ЕстьСрокИсполненияВТалицеИсполнители Тогда
		
		ИмяРеквизитаВариантИсполнения = "";
		Если МетаданныеПроцесса.Реквизиты.Найти("ВариантИсполнения") <> Неопределено Тогда
			ИмяРеквизитаВариантИсполнения = "ВариантИсполнения";
		ИначеЕсли МетаданныеПроцесса.Реквизиты.Найти("ВариантСогласования") <> Неопределено Тогда
			ИмяРеквизитаВариантИсполнения = "ВариантСогласования";
		КонецЕсли;
		
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		Если ЗначениеЗаполнено(ИмяРеквизитаВариантИсполнения) Тогда
			ВариантИсполнения = Объект[ИмяРеквизитаВариантИсполнения];
		КонецЕсли;
		
		Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
			
			ПредыдущийСрокИсполнения = Дата(1,1,1);
			
			Для Каждого СтрокИсполнитель Из Объект.Исполнители Цикл
				
				Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(СтрокИсполнитель)Тогда
					
					Если Не ЗначениеЗаполнено(СтрокИсполнитель.СрокИсполнения) Тогда
						ЕстьУчастникиБезСрокаИсполнения = Истина;
					КонецЕсли;
					
					Если СтрокИсполнитель.СрокИсполнения < ПредыдущийСрокИсполнения Тогда
						НарушенаПоследовательностьСроков = Истина;
						Прервать;
					КонецЕсли;
					
					ПредыдущийСрокИсполнения = СтрокИсполнитель.СрокИсполнения;
					
				КонецЕсли;
				
				СрокИсполненияУчастников = Макс(СрокИсполненияУчастников, СтрокИсполнитель.СрокИсполнения);
				
			КонецЦикла;
			
		ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
			
			ИмяРеквизитаПорядокИсполнения = "";
			Если МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("ПорядокИсполнения") <> Неопределено Тогда
				ИмяРеквизитаПорядокИсполнения = "ПорядокИсполнения";
			ИначеЕсли МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("ПорядокСогласования") <> Неопределено Тогда
				ИмяРеквизитаПорядокИсполнения = "ПорядокСогласования";
			КонецЕсли;
			
			СрокИсполненияПредыдущегоЭтапа = Дата(1,1,1);
			СрокИсполненияТекущегоЭтапа = Дата(1,1,1);
			
			Для Каждого СтрокИсполнитель Из Объект.Исполнители Цикл
				
				Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(СтрокИсполнитель)Тогда
					
					Если СтрокИсполнитель[ИмяРеквизитаПорядокИсполнения] = 
						Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
						
						СрокИсполненияПредыдущегоЭтапа = СрокИсполненияТекущегоЭтапа;
						СрокИсполненияТекущегоЭтапа = Дата(1,1,1);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокИсполнитель.СрокИсполнения) Тогда
						ЕстьУчастникиБезСрокаИсполнения = Истина;
					КонецЕсли;
					
					Если СтрокИсполнитель.СрокИсполнения < СрокИсполненияПредыдущегоЭтапа Тогда
						
						НарушенаПоследовательностьСроков = Истина;
						Прервать;
					КонецЕсли;
					
					СрокИсполненияТекущегоЭтапа = Макс(СрокИсполненияТекущегоЭтапа, СтрокИсполнитель.СрокИсполнения);
					
				КонецЕсли;
				
				СрокИсполненияУчастников = Макс(СрокИсполненияУчастников, СтрокИсполнитель.СрокИсполнения);
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокИсполнитель Из Объект.Исполнители Цикл
				
				Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(СтрокИсполнитель)Тогда
					
					Если Не ЗначениеЗаполнено(СтрокИсполнитель.СрокИсполнения) Тогда
						ЕстьУчастникиБезСрокаИсполнения = Истина;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокИсполнитель.СрокИсполнения) Тогда
						НарушенаПоследовательностьСроков = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
				СрокИсполненияУчастников = Макс(СрокИсполненияУчастников, СтрокИсполнитель.СрокИсполнения);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЕстьСрокИсполнения Тогда
		СрокИсполненияУчастников = Объект.СрокИсполнения;
		
		Если Не ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
			ЕстьУчастникиБезСрокаИсполнения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не НарушенаПоследовательностьСроков
		И ЕстьСрокОбработкиРезультатов
		И УчитыватьСрокОбработкиРезультата Тогда
		
		НарушенаПоследовательностьСроков =
			(Объект.СрокОбработкиРезультатов < СрокИсполненияУчастников);
		
		Если Не ЗначениеЗаполнено(Объект.СрокОбработкиРезультатов) Тогда
			ЕстьУчастникиБезСрокаИсполнения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СрокиИсполненияКорректны = 
		Не НарушенаПоследовательностьСроков И Не ЕстьУчастникиБезСрокаИсполнения;
	
	Возврат СрокиИсполненияКорректны;
	
КонецФункции

// Исполнение

// Возвращает структура для расчета срока процесса/шаблона Исполнения.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Исполнение,
//                    СправочникСсылка.ШаблоныИсполнения - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * ВариантИсполнения
//   * КоличествоИтераций
//   * Проверяющий
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * Исполнители
//   * СрокИсполненияПроцесса
//
Функция СтруктураДляРасчетаСрокаПроцессаИсполнения(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка, ВариантИсполнения, КоличествоИтераций, Проверяющий,
		|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы,
		|СрокОбработкиРезультатовМинуты, Исполнители, СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
		СтруктураДляРасчета.Исполнители = СтруктураДляРасчета.Исполнители.Выгрузить();
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Исполнения.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Исполнение,
//            СправочникОбъект.ШаблоныИсполнения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПроцессаИсполнения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковПроцессаИсполнения(Процесс, Параметры) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ИндексСтроки = Параметры.ИндексСтроки;
	ТекущаяИтерация = Параметры.ТекущаяИтерация;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = ИзмененныеСрокиПроцесса(Процесс, Параметры);
	ИндексИзменнойСтроки = ИзмененныеСрокиПроцесса.ИндексИзменнойСтроки;
	СрокПроверяющегоИзменен = ИзмененныеСрокиПроцесса.СрокПроверяющегоИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков,
		Параметры, ПредшественникиСледующегоЭтапа);
	
	// Определим количество итераций и номер текущей итерации.
	
	Если ВПроцессеЕстьТочныеСрокиИсполнения(Процесс)
		Или Не ЗначениеЗаполнено(Процесс.Проверяющий) Тогда
		
		КоличествоИтераций = 1;
		ТекущаяИтерация = 1;
	Иначе
		КоличествоИтераций = Процесс.КоличествоИтераций;
	КонецЕсли;
	
	ИдентификаторыСроковДляТекИтерации = ИдентификаторыСроков;
	ИндексИзменнойСтрокиДляТекИтерации = ИндексИзменнойСтроки;
	СрокПроверяющегоИзмененДляТекИтерации = СрокПроверяющегоИзменен;
	
	КоличествоИсполнителей = Процесс.Исполнители.Количество();
	
	Пока ТекущаяИтерация <= КоличествоИтераций Цикл
		
		ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс.Исполнители,
			ИндексИзменнойСтрокиДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации,
			Процесс.ВариантИсполнения,
			"ПорядокИсполнения");
			
		Если ЗначениеЗаполнено(Процесс.Проверяющий) И КоличествоИсполнителей > 0 Тогда
			ДобавитьСрокПроверяющегоВДанныеДляРасчета(
				Сроки, Предшественники,
				Процесс,
				СрокПроверяющегоИзмененДляТекИтерации,
				ПредшественникиСледующегоЭтапа,
				ИдентификаторыСроковДляТекИтерации,
				"СрокПроверяющего");
		КонецЕсли;
		
		ТекущаяИтерация = ТекущаяИтерация + 1;
		
		ИдентификаторыСроковДляТекИтерации = Неопределено;
		ИндексИзменнойСтрокиДляТекИтерации = -1;
		СрокПроверяющегоИзмененДляТекИтерации = Истина;
	КонецЦикла;
	
	// Определим ID последнего рассчитанного срока.
	IDПоследнегоРассчитанногоСрока = УникальныйИдентификаторПустой();
	IDРассчитанныхСроков = Новый Массив;
	// Определяем все рассчитанные сроки, у которых есть не рассчитанные последователи.
	Для Каждого СтрокаСрок Из Сроки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Предшественник", СтрокаСрок.IDСрока);
		НайденныеПоследователи = Предшественники.НайтиСтроки(Отбор);
		Для Каждого СтрПоследователь Из НайденныеПоследователи Цикл
			СрокПоследователя = Сроки.Найти(СтрПоследователь.Последователь, "IDСрока");
			Если СтрокаСрок.Пройден И СрокПоследователя.Пройден = Ложь Тогда
				IDРассчитанныхСроков.Добавить(СтрокаСрок.IDСрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Определяем последний расситанный срок.
	КоличествоРассчитанныхСроков = IDРассчитанныхСроков.Количество();
	Если КоличествоРассчитанныхСроков = 1 Тогда
		IDПоследнегоРассчитанногоСрока = IDРассчитанныхСроков[0];
	ИначеЕсли КоличествоРассчитанныхСроков > 0 Тогда
		// Если последних рассчитанных сроков несколько, то
		// исключаем из них срок ответственного исполнителя и выбираем первый из оставшихся.
		Если КоличествоИсполнителей > 0 И Процесс.Исполнители[0].Ответственный Тогда
			Индекс = 0;
			Пока Индекс < КоличествоРассчитанныхСроков Цикл
				IDРассчитанногоСрока = IDРассчитанныхСроков[Индекс];
				Если ИдентификаторыСроков.Получить(IDРассчитанногоСрока) = "Исполнители_0" Тогда
					IDРассчитанныхСроков.Удалить(Индекс);
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
		IDПоследнегоРассчитанногоСрока = IDРассчитанныхСроков[0];
	КонецЕсли;
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Исполнение,
//            СправочникОбъект.ШаблоныИсполнения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПроцессаИсполнения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиПроцессаИсполнения(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковПроцессаИсполнения(Процесс, Параметры);
	
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиПроцессаИсполнения(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков,
		Параметры.ЗаполнятьСрокПроцессаТолькоПриПревышении);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Исполнение,
//            СправочникОбъект.ШаблоныИсполнения - ссылка на шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПроцессаИсполнения
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//  ЗаполнятьТолькоПриПревышении - Булево - признак указывающий, что срок исполнения процесса
//                                          заполняется только, если новый рассчитанный срок больше
//                                          предыдущего.
//
Процедура ЗаполнитьСрокиПроцессаИсполнения(Процесс, Сроки, ИдентификаторыСроков,
	ЗаполнятьТолькоПриПревышении = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ДатаОтсчета = Дата(1,1,1);
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			ДатаОтсчета = СтрокаСрок.СрокИсполнения;
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокПроверяющего" Тогда
			Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(РольСрокаВПроцесса, "Исполнители") Тогда
			
			ИндексИсполнителя = Число(СтрЗаменить(РольСрокаВПроцесса, "Исполнители_", ""));
			
			Если Процесс.Исполнители[ИндексИсполнителя].ВариантУстановкиСрокаИсполнения
				= ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
				
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
			
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	СкорректироватьСрокИсполненияОтветственного(Процесс.Исполнители, ДатаОтсчета);
	
	Если Не СрокиУчастниковПроцессаКорректны(Процесс, ЗначениеЗаполнено(Процесс.Проверяющий)) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Если ЗаполнятьТолькоПриПревышении Тогда
		
		Процесс.СрокИсполненияПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Процесс.Ссылка, "СрокИсполненияПроцесса");
		
		Процесс.СрокИсполненияПроцесса = 
			Макс(Процесс.СрокИсполненияПроцесса, СрокИсполненияПроцессаВсемиУчастниками);
		
	Иначе
		Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	КонецЕсли;
	
КонецПроцедуры

// Составные процессы

// Возвращает структура для расчета срока Составного процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента,
//            БизнесПроцессСсылка.ОбработкаВходящегоДокумента,
//            БизнесПроцессСсылка.ОбработкаИсходящегоДокумента,
//            СправочникСсылка.ШаблоныСоставныхБизнесПроцессов,
//            БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента,
//            БизнесПроцессОбъект.ОбработкаВходящегоДокумента,
//            БизнесПроцессОбъект.ОбработкаИсходящегоДокумента,
//            СправочникОбъект.ШаблоныСоставныхБизнесПроцессов - процесс/шаблон.
//            Если параметр заполнен, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура
//   * Ссылка - БизнесПроцессСсылка - Ссылка на процесс.
//   * СрокИсполненияПроцесса - Дата - Срок исполнения процесса.
//   * Шаблоны - ТаблицаЗначений - таблица шаблонов или стартованных действий составного процесса.
//      ** Реквизит - Строка - строкое предствление шаблона.
//      ** Шаблон - БизнесПроцессСсылка, СправочникСсылка.<ИмяШаблонаПроцесса> - ссылка на шаблон или процесс.
//      ** СрокИсполненияПроцесса - Дата - Срок исполнения действия датой.
//      ** СрокИсполненияПроцессаДни - Число - Относительный срок исполнения действия, дни.
//      ** СрокИсполненияПроцессаЧасы - Число - Относительный срок исполнения действия, часы.
//      ** СрокИсполненияПроцессаМинуты - Число - Относительный срок исполнения действия, минуты.
//
Функция СтруктураДляРасчетаСрокаСоставногоПроцесса(Процесс = Неопределено) Экспорт
	
	СтруктураДляРасчета = Новый Структура;
	СтруктураДляРасчета.Вставить("Ссылка");
	СтруктураДляРасчета.Вставить("СрокИсполненияПроцесса");
	СтруктураДляРасчета.Вставить("Шаблоны", Новый ТаблицаЗначений);
	
	СтруктураДляРасчета.Шаблоны.Колонки.Добавить("Реквизит");
	СтруктураДляРасчета.Шаблоны.Колонки.Добавить("Шаблон");
	СтруктураДляРасчета.Шаблоны.Колонки.Добавить("СрокИсполненияПроцесса");
	СтруктураДляРасчета.Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаДни");
	СтруктураДляРасчета.Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаЧасы");
	СтруктураДляРасчета.Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаМинуты");
	
	Если Процесс = Неопределено Тогда
		Возврат СтруктураДляРасчета;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипПроцесса = ТипЗнч(Процесс);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипПроцесса);
	
	Если ЭтоСсылка Тогда
		ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Процесс);
		
		СтруктураДляРасчета.Ссылка = Процесс;
	Иначе
		ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Процесс.Ссылка);
		
		СтруктураДляРасчета.Ссылка = Процесс.Ссылка;
	КонецЕсли;
	
	ТипыПроцессовИИменаШаблонов = Новый Соответствие;
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Согласование"), "ШаблонСогласования");
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Утверждение"), "ШаблонУтверждения");
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Регистрация"), "ШаблонРегистрации");
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Рассмотрение"), "ШаблонРассмотрения");
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Исполнение"), "ШаблонИсполненияОзнакомления");
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Ознакомление"), "ШаблонИсполненияОзнакомления");
	ТипыПроцессовИИменаШаблонов.Вставить(Тип("БизнесПроцессСсылка.Поручение"), "ШаблонПоручения");
	
	Если ЭтоШаблон Тогда
		Если ЭтоСсылка Тогда
			Шаблоны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Процесс, "Шаблоны");
			Шаблоны = Шаблоны.Выгрузить();
		Иначе
			Шаблоны = Процесс.Шаблоны;
		КонецЕсли;
		
		Для Каждого СтрШаблон Из Шаблоны Цикл
			СтрШаблонаВСтруктуреРасчета = СтруктураДляРасчета.Шаблоны.Добавить();
			ЗаполнитьЗначенияСвойств(СтрШаблонаВСтруктуреРасчета, СтрШаблон);
		КонецЦикла;
	Иначе
		
		Если ЭтоСсылка Тогда
			МетаданныеПроцесса = Процесс.Метаданные();
			
			РеквизитыПроцессаСтрокой = "СрокИсполненияПроцесса, Стартован";
			
			Для Каждого ИмяШаблона Из ТипыПроцессовИИменаШаблонов Цикл
				
				Если СтруктураДляРасчета.Шаблоны.Найти(ИмяШаблона.Значение, "Реквизит") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если МетаданныеПроцесса.Реквизиты.Найти(ИмяШаблона.Значение) <> Неопределено Тогда
					
					СтрШаблон = СтруктураДляРасчета.Шаблоны.Добавить();
					СтрШаблон.Реквизит = ИмяШаблона.Значение;
					
					РеквизитыПроцессаСтрокой = РеквизитыПроцессаСтрокой + ", " + ИмяШаблона.Значение;
					
				КонецЕсли;
			КонецЦикла;
			
			РеквизитыПроцесса = 
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, РеквизитыПроцессаСтрокой);
			
			Для Каждого СтрШаблон Из СтруктураДляРасчета.Шаблоны Цикл
				СтрШаблон.Шаблон = РеквизитыПроцесса[СтрШаблон.Реквизит];
			КонецЦикла;
			
			СтруктураДляРасчета.СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
			
			ПроцессСтартован = РеквизитыПроцесса.Стартован;
			
		Иначе
			СтруктураДляРасчета.СрокИсполненияПроцесса = Процесс.СрокИсполненияПроцесса;
			
			ПроцессСтартован = Процесс.Стартован;
			
			Для Каждого ИмяШаблона Из ТипыПроцессовИИменаШаблонов Цикл
				
				Если СтруктураДляРасчета.Шаблоны.Найти(ИмяШаблона.Значение, "Реквизит") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить(ИмяШаблона.Значение);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Процесс);
				
				Если ЗначениеЗаполнено(СтруктураПоиска[ИмяШаблона.Значение]) Тогда
					СтрШаблон = СтруктураДляРасчета.Шаблоны.Добавить();
					СтрШаблон.Реквизит = ИмяШаблона.Значение;
					СтрШаблон.Шаблон = СтруктураПоиска[ИмяШаблона.Значение];
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
		Если ПроцессСтартован Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДочерниеБизнесПроцессы.ДочернийПроцесс
				|ИЗ
				|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
				|ГДЕ
				|	ДочерниеБизнесПроцессы.РодительскийПроцесс = &РодительскийПроцесс";
				Запрос.УстановитьПараметр("РодительскийПроцесс", Процесс.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Реквизит = ТипыПроцессовИИменаШаблонов.Получить(ТипЗнч(Выборка.ДочернийПроцесс));
				
				НайденнаяСтрока = СтруктураДляРасчета.Шаблоны.Найти(Реквизит, "Реквизит");
				
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Шаблон = Выборка.ДочернийПроцесс;
					НайденнаяСтрока.СрокИсполненияПроцесса = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСтрока.Шаблон, "СрокИсполненияПроцесса");
					НайденнаяСтрока.СрокИсполненияПроцессаДни = 0;
					НайденнаяСтрока.СрокИсполненияПроцессаЧасы = 0;
					НайденнаяСтрока.СрокИсполненияПроцессаМинуты = 0;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока составных процессов/шаблонов.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента,
//            БизнесПроцессОбъект.ОбработкаВходящегоДокумента,
//            БизнесПроцессОбъект.ОбработкаИсходящегоДокумента,
//            СправочникОбъект.ШаблоныСоставныхБизнесПроцессов - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаСоставногоПроцесса
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковСоставногоПроцесса(Процесс, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	IDРассчитанногоСрок = УникальныйИдентификаторПустой();
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков, Параметры, Новый Массив);
		
	IDПредшественника = УникальныйИдентификаторПустой();
	
	// Добавляем подчиненные шаблоны составного процесса.
	СрокРассчитан = Ложь;
	Если ЗначениеЗаполнено(РеквизитСИзмененнымСроком) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Реквизит", РеквизитСИзмененнымСроком);
		
		ИзмененныеСтроки = Процесс.Шаблоны.НайтиСтроки(Отбор);
		Если ИзмененныеСтроки.Количество() > 0 Тогда
			СрокРассчитан = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекИндекс = 0;
	МаксИндекс = Процесс.Шаблоны.Количество() - 1;
	Пока ТекИндекс <= МаксИндекс Цикл
		СтрШаблон = Процесс.Шаблоны[ТекИндекс];
		
		Если СтрШаблон.Реквизит = РеквизитСИзмененнымСроком Тогда
			СрокРассчитан = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрШаблон.Шаблон) Тогда
			СтрокаСрок = Сроки.Добавить();
			СтрокаСрок.IDСрока = Новый УникальныйИдентификатор;
			СтрокаСрок.СрокИсполнения = СтрШаблон.СрокИсполненияПроцесса;
			
			СтрокаСрок.ПодчиненныеСроки = 
				ДанныеДляРасчетаСрокаДействияСоставногоПроцесса(СтрШаблон.Шаблон);
			
			СтрПредшественник = Предшественники.Добавить();
			СтрПредшественник.Последователь = СтрокаСрок.IDСрока;
			СтрПредшественник.Предшественник = IDПредшественника;
			
			IDПредшественника = СтрокаСрок.IDСрока;
			
			ИдентификаторыСроков.Вставить(СтрокаСрок.IDСрока, "Шаблоны_" + Строка(ТекИндекс));
			
			СтрокаСрок.Пройден = СрокРассчитан;
			
			Если СрокРассчитан Тогда
				IDРассчитанногоСрок = СтрокаСрок.IDСрока;
			КонецЕсли;
		КонецЕсли;
		
		ТекИндекс = ТекИндекс + 1;
	КонецЦикла;
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDРассчитанногоСрок;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента,
//            БизнесПроцессОбъект.ОбработкаВходящегоДокумента,
//            БизнесПроцессОбъект.ОбработкаИсходящегоДокумента,
//            СправочникОбъект.ШаблоныСоставныхБизнесПроцессов - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаСоставногоПроцесса
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиСоставногоПроцесса(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Процесс) = Тип("Структура") Тогда
		СтруктураДляРасчета = Процесс;
	Иначе
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаСоставногоПроцесса(Процесс);
	КонецЕсли;
	
	// Подготовим данные для расчета сроков действий процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковСоставногоПроцесса(СтруктураДляРасчета, Параметры);
	
	// Рассчитаем сроки действий процесса.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
	
	// Заполнить сроки в процессе
	ЗаполнитьСрокиСоставногоПроцесса(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента,
//            БизнесПроцессОбъект.ОбработкаВходящегоДокумента,
//            БизнесПроцессОбъект.ОбработкаИсходящегоДокумента,
//            СправочникОбъект.ШаблоныСоставныхБизнесПроцессов - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаСоставногоПроцесса
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//
Процедура ЗаполнитьСрокиСоставногоПроцесса(
	Процесс, Сроки, ИдентификаторыСроков) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТипЗаполняемогоОбъекта = ТипЗнч(Процесс);
	
	ЕстьТаблицаШаблоны = Ложь;
	Если ТипЗаполняемогоОбъекта = Тип("СправочникОбъект.ШаблоныСоставныхБизнесПроцессов")
		Или ТипЗаполняемогоОбъекта = Тип("Структура") Тогда
		
		ЕстьТаблицаШаблоны = Истина;
	КонецЕсли;
	
	СрокИсполненияВсехЭтапов = Дата(1,1,1);
	
	ЕстьЭтапыСНеРассчитаннымиСроками = Ложь;
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьТаблицаШаблоны И СтрНачинаетсяС(РольСрокаВПроцесса, "Шаблоны_") Тогда
			ИндексШаблона = Число(СтрЗаменить(РольСрокаВПроцесса, "Шаблоны_", ""));
			
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("СрокИсполненияПроцесса", СтрокаСрок.СрокИсполнения);
			
			ЗаполнитьЗначенияСвойств(Процесс.Шаблоны[ИндексШаблона], СтруктураЗаполнения);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаСрок.СрокИсполнения) Тогда
			ЕстьЭтапыСНеРассчитаннымиСроками = Истина;
		КонецЕсли;
		
		Если ЕстьЭтапыСНеРассчитаннымиСроками Тогда
			СрокИсполненияВсехЭтапов = Дата(1,1,1);
		Иначе
			СрокИсполненияВсехЭтапов = Макс(СрокИсполненияВсехЭтапов, СтрокаСрок.СрокИсполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Процесс.СрокИсполненияПроцесса = СрокИсполненияВсехЭтапов;
	
КонецПроцедуры

// Возвращает дату отсчета для нового действия составного процесса.
//
// Параметры:
//  СоставнойПроцесс - БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента,
//                     БизнесПроцессСсылка.ОбработкаВходящегоДокумента,
//                     БизнесПроцессСсылка.ОбработкаИсходящегоДокумента - ссылка на составной процесс.
//
// Возвращаемое значение:
//  Дата - Дата
//
Функция ДатаОтсчетаДляНовогоДействияСоставногоПроцесса(СоставнойПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаОтсчета = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеБизнесПроцессов.СрокИсполнения) КАК СрокИсполненияПроцесса
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс = &СоставнойПроцесс";
		
	Запрос.УстановитьПараметр("СоставнойПроцесс", СоставнойПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И ТипЗнч(Выборка.СрокИсполненияПроцесса) = Тип("Дата") Тогда
		
		ДатаОтсчета = Макс(ДатаОтсчета, Выборка.СрокИсполненияПроцесса);
	КонецЕсли;
	
	Возврат ДатаОтсчета;
	
КонецФункции

// Ознакомление

// Возвращает структура для расчета срока процесса/шаблона Ознакомления.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Ознакомление,
//                    СправочникСсылка.ШаблоныОзнакомления - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * Исполнители
//   * СрокИсполненияПроцесса
//
Функция СтруктураДляРасчетаСрокаОзнакомления(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка, Исполнители, СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
		СтруктураДляРасчета.Исполнители = СтруктураДляРасчета.Исполнители.Выгрузить();
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Ознакомление.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Ознакомление,
//            СправочникОбъект.ШаблоныОзнакомления - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаОзнакомления
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковОзнакомления(Процесс, Параметры) Экспорт
	
	ДатаОтсчета = Параметры.ДатаОтсчета;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИндексИзменнойСтроки = 0;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники,
		ИдентификаторыСроков,
		Параметры,
		ПредшественникиСледующегоЭтапа);
	
	// Добавляем таблицу исполнителей
	ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		Процесс.Исполнители, ИндексИзменнойСтроки,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков);
	
	IDПоследнегоРассчитанногоСрока = IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Ознакомление,
//            СправочникОбъект.ШаблоныОзнакомления - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаОзнакомления
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиОзнакомления(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковОзнакомления(
		Процесс, Параметры);
		
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиОзнакомления(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Ознакомление,
//            СправочникОбъект.ШаблоныОзнакомления - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаОзнакомления
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//
Процедура ЗаполнитьСрокиОзнакомления(Процесс, Сроки, ИдентификаторыСроков) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли СтрНачинаетсяС(РольСрокаВПроцесса, "Исполнители") Тогда
			
			ИндексИсполнителя = Число(СтрЗаменить(РольСрокаВПроцесса, "Исполнители_", ""));
			
			Если Процесс.Исполнители[ИндексИсполнителя].ВариантУстановкиСрокаИсполнения
				= ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
				
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
			
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
				Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиУчастниковПроцессаКорректны(Процесс) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	
КонецПроцедуры

// Поручение

// Возвращает структура для расчета срока процесса/шаблона Поручение.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Поручение,
//                    СправочникСсылка.ШаблоныПоручения - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * Исполнитель
//   * СрокИсполнения
//   * СрокИсполненияДни
//   * СрокИсполненияЧасы
//   * СрокИсполненияМинуты
//   * ВариантУстановкиСрокаИсполнения
//   * Проверяющий
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокИсполненияПроцесса
//
Функция СтруктураДляРасчетаСрокаПоручения(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка,
		|Исполнитель,
		|СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты, ВариантУстановкиСрокаИсполнения,
		|Проверяющий,
		|СрокОбработкиРезультатов, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты, ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Поручение.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Поручение,
//            СправочникОбъект.ШаблоныПоручения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПоручения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковПоручения(Процесс, Параметры) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = ИзмененныеСрокиПроцесса(Процесс, Параметры);
	СрокИсполнителяИзменен = ИзмененныеСрокиПроцесса.СрокИсполнителяИзменен;
	СрокПроверяющегоИзменен = ИзмененныеСрокиПроцесса.СрокПроверяющегоИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники,
		ИдентификаторыСроков,
		Параметры,
		ПредшественникиСледующегоЭтапа);
	
	ДобавитьСрокИсполнителяВДанныеДляРасчета(
		Сроки, Предшественники,
		Процесс,
		СрокИсполнителяИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		"СрокИсполнителя");
	
	Если ЗначениеЗаполнено(Процесс.Проверяющий) Тогда
		ДобавитьСрокПроверяющегоВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс,
			СрокПроверяющегоИзменен,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроков,
			"СрокПроверяющего");
	КонецЕсли;
	
	IDПоследнегоРассчитанногоСрока = IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Поручение,
//            СправочникОбъект.ШаблоныПоручения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПоручения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиПоручения(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковПоручения(Процесс, Параметры);
		
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиПоручения(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Поручение,
//            СправочникОбъект.ШаблоныПоручения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПоручения
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//
Процедура ЗаполнитьСрокиПоручения(Процесс, Сроки, ИдентификаторыСроков) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокИсполнителя" Тогда
			Если Процесс.ВариантУстановкиСрокаИсполнения
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли РольСрокаВПроцесса = "СрокПроверяющего" Тогда
			Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиУчастниковПроцессаКорректны(Процесс, ЗначениеЗаполнено(Процесс.Проверяющий)) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	
КонецПроцедуры

// Рассмотрение

// Возвращает структура для расчета срока процесса/шаблона Рассмотрение.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Рассмотрение,
//                    СправочникСсылка.ШаблоныРассмотрения - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * Исполнитель
//   * СрокИсполнения
//   * СрокИсполненияДни
//   * СрокИсполненияЧасы
//   * СрокИсполненияМинуты
//   * ВариантУстановкиСрокаИсполнения
//   * Автор
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокИсполненияПроцесса
//
Функция СтруктураДляРасчетаСрокаРассмотрения(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка,
		|Исполнитель,
		|СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты, ВариантУстановкиСрокаИсполнения,
		|Автор,
		|СрокОбработкиРезультатов, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты, ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Рассмотрение.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Рассмотрение,
//            СправочникОбъект.ШаблоныРассмотрения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаРассмотрения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковРассмотрения(Процесс, Параметры) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = ИзмененныеСрокиПроцесса(Процесс, Параметры);
	СрокИсполнителяИзменен = ИзмененныеСрокиПроцесса.СрокИсполнителяИзменен;
	СрокАвтораИзменен = ИзмененныеСрокиПроцесса.СрокАвтораИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники,
		ИдентификаторыСроков,
		Параметры,
		ПредшественникиСледующегоЭтапа);
	
	ДобавитьСрокИсполнителяВДанныеДляРасчета(
		Сроки, Предшественники,
		Процесс,
		СрокИсполнителяИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		"СрокИсполнителя");
		
	ДобавитьСрокАвтораВДанныеДляРасчета(
		Сроки, Предшественники,
		Процесс,
		СрокАвтораИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		"СрокАвтора");
	
	IDПоследнегоРассчитанногоСрока = IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Рассмотрение,
//            СправочникОбъект.ШаблоныРассмотрения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаРассмотрения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиРассмотрения(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковРассмотрения(Процесс, Параметры);
		
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиРассмотрения(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Рассмотрение,
//            СправочникОбъект.ШаблоныРассмотрения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаРассмотрения
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//
Процедура ЗаполнитьСрокиРассмотрения(Процесс, Сроки, ИдентификаторыСроков) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокИсполнителя" Тогда
			Если Процесс.ВариантУстановкиСрокаИсполнения
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли РольСрокаВПроцесса = "СрокАвтора" Тогда
			Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиУчастниковПроцессаКорректны(Процесс) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	
КонецПроцедуры

// Регистрация

// Возвращает структура для расчета срока процесса/шаблона Рассмотрение.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Рассмотрение,
//                    СправочникСсылка.ШаблоныРассмотрения - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * Исполнитель
//   * СрокИсполнения
//   * СрокИсполненияДни
//   * СрокИсполненияЧасы
//   * СрокИсполненияМинуты
//   * ВариантУстановкиСрокаИсполнения
//   * Автор
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокИсполненияПроцесса,
//   * КоличествоИтераций
//
Функция СтруктураДляРасчетаСрокаРегистрации(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка,
		|Исполнитель,
		|СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты, ВариантУстановкиСрокаИсполнения,
		|Автор,
		|СрокОбработкиРезультатов, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты, ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокИсполненияПроцесса,
		|КоличествоИтераций";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Регистрация.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Регистрация,
//            СправочникОбъект.ШаблоныРегистрации - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаРегистрации
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковРегистрации(Процесс, Параметры) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ТекущаяИтерация = Параметры.ТекущаяИтерация;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = ИзмененныеСрокиПроцесса(Процесс, Параметры);
	СрокИсполнителяИзменен = ИзмененныеСрокиПроцесса.СрокИсполнителяИзменен;
	СрокАвтораИзменен = ИзмененныеСрокиПроцесса.СрокАвтораИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники,
		ИдентификаторыСроков,
		Параметры,
		ПредшественникиСледующегоЭтапа);
	
	// Определим количество итераций и номер текущей итерации.
	Если ВПроцессеЕстьТочныеСрокиИсполнения(Процесс) Тогда
		КоличествоИтераций = 1;
		ТекущаяИтерация = 1;
	Иначе
		КоличествоИтераций = Процесс.КоличествоИтераций;
	КонецЕсли;
	
	ИдентификаторыСроковДляТекИтерации = ИдентификаторыСроков;
	СрокИсполнителяИзмененДляТекИтерации = СрокИсполнителяИзменен;
	СрокАвтораИзмененДляТекИтерации = СрокАвтораИзменен;
	
	Пока ТекущаяИтерация <= КоличествоИтераций Цикл
		
		ДобавитьСрокИсполнителяВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс,
			СрокИсполнителяИзмененДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации,
			"СрокИсполнителя");
			
		ДобавитьСрокАвтораВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс,
			СрокАвтораИзмененДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации,
			"СрокАвтора");
		
		ТекущаяИтерация = ТекущаяИтерация + 1;
		
		ИдентификаторыСроковДляТекИтерации = Неопределено;
		СрокИсполнителяИзмененДляТекИтерации = Истина;
		СрокАвтораИзмененДляТекИтерации = Истина;
	КонецЦикла;
	
	IDПоследнегоРассчитанногоСрока = IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Регистрация,
//            СправочникОбъект.ШаблоныРегистрации - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаРегистрации
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиРегистрации(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковРегистрации(Процесс, Параметры);
		
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиРегистрации(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков,
		Параметры.ЗаполнятьСрокПроцессаТолькоПриПревышении);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Регистрация,
//            СправочникОбъект.ШаблоныРегистрации - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаРегистрации
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//  ЗаполнятьТолькоПриПревышении - Булево - признак указывающий, что срок исполнения процесса
//                                          заполняется только, если новый рассчитанный срок больше
//                                          предыдущего.
//
Процедура ЗаполнитьСрокиРегистрации(Процесс, Сроки, ИдентификаторыСроков,
	ЗаполнятьТолькоПриПревышении = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокИсполнителя" Тогда
			Если Процесс.ВариантУстановкиСрокаИсполнения
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли РольСрокаВПроцесса = "СрокАвтора" Тогда
			Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиУчастниковПроцессаКорректны(Процесс) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Если ЗаполнятьТолькоПриПревышении Тогда
		
		Процесс.СрокИсполненияПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Процесс.Ссылка, "СрокИсполненияПроцесса");
		
		Процесс.СрокИсполненияПроцесса = 
			Макс(Процесс.СрокИсполненияПроцесса, СрокИсполненияПроцессаВсемиУчастниками);
		
	Иначе
		Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	КонецЕсли;
	
КонецПроцедуры

// Согласование

// Возвращает структура для расчета срока процесса/шаблона Согласование.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Согласование,
//                    СправочникСсылка.ШаблоныСогласования - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * КоличествоИтераций
//   * Автор
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * Исполнители
//   * ВариантСогласования
//   * СрокИсполненияПроцесса
//
Функция СтруктураДляРасчетаСрокаСогласования(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка, КоличествоИтераций, Автор,
			|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов,
			|СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы,
			|СрокОбработкиРезультатовМинуты, Исполнители, ВариантСогласования, СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
		СтруктураДляРасчета.Исполнители = СтруктураДляРасчета.Исполнители.Выгрузить();
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Согласование.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование,
//            СправочникОбъект.ШаблоныСогласования - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаСогласования
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковСогласования(Процесс, Параметры) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ИндексСтроки = Параметры.ИндексСтроки;
	ТекущаяИтерация = Параметры.ТекущаяИтерация;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = ИзмененныеСрокиПроцесса(Процесс, Параметры);
	ИндексИзменнойСтроки = ИзмененныеСрокиПроцесса.ИндексИзменнойСтроки;
	СрокАвтораИзменен = ИзмененныеСрокиПроцесса.СрокАвтораИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков,
		Параметры, ПредшественникиСледующегоЭтапа);
	
	// Определим количество итераций и номер текущей итерации.
	Если ВПроцессеЕстьТочныеСрокиИсполнения(Процесс) Тогда
		КоличествоИтераций = 1;
		ТекущаяИтерация = 1;
	Иначе
		КоличествоИтераций = Процесс.КоличествоИтераций;
	КонецЕсли;
	
	ИдентификаторыСроковДляТекИтерации = ИдентификаторыСроков;
	ИндексИзменнойСтрокиДляТекИтерации = ИндексИзменнойСтроки;
	СрокАвтораИзмененДляТекИтерации = СрокАвтораИзменен;
	
	КоличествоИсполнителей = Процесс.Исполнители.Количество();
	
	Пока ТекущаяИтерация <= КоличествоИтераций Цикл
		
		ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс.Исполнители,
			ИндексИзменнойСтрокиДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации,
			Процесс.ВариантСогласования,
			"ПорядокСогласования");
		
		Если КоличествоИсполнителей > 0 Тогда
			
			ДобавитьСрокАвтораВДанныеДляРасчета(
				Сроки, Предшественники,
				Процесс,
				СрокАвтораИзмененДляТекИтерации,
				ПредшественникиСледующегоЭтапа,
				ИдентификаторыСроковДляТекИтерации,
				"СрокАвтора");
		КонецЕсли;
		
		ТекущаяИтерация = ТекущаяИтерация + 1;
		
		ИдентификаторыСроковДляТекИтерации = Неопределено;
		ИндексИзменнойСтрокиДляТекИтерации = -1;
		СрокАвтораИзмененДляТекИтерации = Истина;
	КонецЦикла;
	
	IDПоследнегоРассчитанногоСрока = IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование,
//            СправочникОбъект.ШаблоныСогласования - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаСогласования
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиСогласования(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковСогласования(Процесс, Параметры);
	
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиСогласования(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков,
		Параметры.ЗаполнятьСрокПроцессаТолькоПриПревышении);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование,
//            СправочникОбъект.ШаблоныСогласования - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаСогласования
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//  ЗаполнятьТолькоПриПревышении - Булево - признак указывающий, что срок исполнения процесса
//                                          заполняется только, если новый рассчитанный срок больше
//                                          предыдущего.
//
Процедура ЗаполнитьСрокиСогласования(ПроцессОбъект, Сроки, ИдентификаторыСроков,
	ЗаполнятьТолькоПриПревышении = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокАвтора" Тогда
			Если ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов
				= ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				ПроцессОбъект.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				ПроцессОбъект.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				ПроцессОбъект.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				ПроцессОбъект.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(РольСрокаВПроцесса, "Исполнители") Тогда
			
			ИндексИсполнителя = Число(СтрЗаменить(РольСрокаВПроцесса, "Исполнители_", ""));
			
			Если ПроцессОбъект.Исполнители[ИндексИсполнителя].ВариантУстановкиСрокаИсполнения
				= ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
				
				ПроцессОбъект.Исполнители[ИндексИсполнителя].СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				ПроцессОбъект.Исполнители[ИндексИсполнителя].СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				ПроцессОбъект.Исполнители[ИндексИсполнителя].СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				ПроцессОбъект.Исполнители[ИндексИсполнителя].СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
			
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиУчастниковПроцессаКорректны(ПроцессОбъект) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Если ЗаполнятьТолькоПриПревышении Тогда
		
		ПроцессОбъект.СрокИсполненияПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПроцессОбъект.Ссылка, "СрокИсполненияПроцесса");
		
		ПроцессОбъект.СрокИсполненияПроцесса = 
			Макс(ПроцессОбъект.СрокИсполненияПроцесса, СрокИсполненияПроцессаВсемиУчастниками);
		
	Иначе
		ПроцессОбъект.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	КонецЕсли;
	
КонецПроцедуры

// Утверждение

// Возвращает структура для расчета срока процесса/шаблона Рассмотрение.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка.Рассмотрение,
//                    СправочникСсылка.ШаблоныРассмотрения - ссылка на процесс/шаблон. Если ссылка
//                    заполнена, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * Исполнитель
//   * СрокИсполнения
//   * СрокИсполненияДни
//   * СрокИсполненияЧасы
//   * СрокИсполненияМинуты
//   * ВариантУстановкиСрокаИсполнения
//   * Автор
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокИсполненияПроцесса,
//   * КоличествоИтераций
//
Функция СтруктураДляРасчетаСрокаУтверждения(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка, КоличествоИтераций,
		|Исполнитель,
		|СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты, ВариантУстановкиСрокаИсполнения,
		|Автор,
		|СрокОбработкиРезультатов, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты, ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Утверждение.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Утверждение,
//            СправочникОбъект.ШаблоныУтверждения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаУтверждения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковУтверждения(Процесс, Параметры) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ТекущаяИтерация = Параметры.ТекущаяИтерация;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = ПустаяТаблицаСроков();
	Предшественники = ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = ИзмененныеСрокиПроцесса(Процесс, Параметры);
	СрокИсполнителяИзменен = ИзмененныеСрокиПроцесса.СрокИсполнителяИзменен;
	СрокАвтораИзменен = ИзмененныеСрокиПроцесса.СрокАвтораИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков,
		Параметры, ПредшественникиСледующегоЭтапа);
	
	// Определим количество итераций и номер текущей итерации.
	Если ВПроцессеЕстьТочныеСрокиИсполнения(Процесс) Тогда
		КоличествоИтераций = 1;
		ТекущаяИтерация = 1;
	Иначе
		КоличествоИтераций = Процесс.КоличествоИтераций;
	КонецЕсли;
	
	ИдентификаторыСроковДляТекИтерации = ИдентификаторыСроков;
	СрокИсполнителяИзмененДляТекИтерации = СрокИсполнителяИзменен;
	СрокАвтораИзмененДляТекИтерации = СрокАвтораИзменен;
	
	Пока ТекущаяИтерация <= КоличествоИтераций Цикл
		
		ДобавитьСрокИсполнителяВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс,
			СрокИсполнителяИзмененДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации,
			"СрокИсполнителя");
		
		ДобавитьСрокАвтораВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс,
			СрокАвтораИзмененДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации,
			"СрокАвтора");
		
		ТекущаяИтерация = ТекущаяИтерация + 1;
		
		ИдентификаторыСроковДляТекИтерации = Неопределено;
		СрокИсполнителяИзмененДляТекИтерации = Истина;
		СрокАвтораИзмененДляТекИтерации = Истина;
	КонецЦикла;
	
	IDПоследнегоРассчитанногоСрока = IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
	
	Результат = ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Утверждение,
//            СправочникОбъект.ШаблоныУтверждения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаУтверждения
//  Параметры - Структура - см. ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиУтверждения(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для расчета сроков участников процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковУтверждения(Процесс, Параметры);
		
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиУтверждения(
		Процесс,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков,
		Параметры.ЗаполнятьСрокПроцессаТолькоПриПревышении);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Утверждение,
//            СправочникОбъект.ШаблоныУтверждения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаУтверждения
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//  ЗаполнятьТолькоПриПревышении - Булево - признак указывающий, что срок исполнения процесса
//                                          заполняется только, если новый рассчитанный срок больше
//                                          предыдущего.
//
Процедура ЗаполнитьСрокиУтверждения(Процесс, Сроки, ИдентификаторыСроков,
	ЗаполнятьТолькоПриПревышении = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокИсполнителя" Тогда
			Если Процесс.ВариантУстановкиСрокаИсполнения
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли РольСрокаВПроцесса = "СрокАвтора" Тогда
			Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиУчастниковПроцессаКорректны(Процесс) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Если ЗаполнятьТолькоПриПревышении Тогда
		
		Процесс.СрокИсполненияПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Процесс.Ссылка, "СрокИсполненияПроцесса");
		
		Процесс.СрокИсполненияПроцесса = 
			Макс(Процесс.СрокИсполненияПроцесса, СрокИсполненияПроцессаВсемиУчастниками);
		
	Иначе
		Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РасчетДлительностиПроцессов

// Возвращает длительность исполнения процесса/шаблона в днях, часах и минутах.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//  Смещение - Число - смещение даты отсчета процесса в секундах.
//                     Параметр предназначен для использования в переопределяемой процедуре.
//
// Возвращаемое значение:
//  Структура
//   * СрокИсполненияПроцессаДни - Число
//   * СрокИсполненияПроцессаЧасы - Число
//   * СрокИсполненияПроцессаМинуты - Число
//
Функция ДлительностьИсполненияПроцесса(Процесс, Знач Смещение = Неопределено) Экспорт
	
	Длительность = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииДлительностиПроцесса(
		Процесс, Смещение, Длительность, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Длительность;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		ТипПроцесса = ТипЗнч(Процесс.Ссылка);
	КонецЕсли;
	
	Если ТипПроцесса = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		
		Длительность = ДлительностьИсполненияПроцессаИсполнения(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		
		Длительность = ДлительностьИсполненияСоставнегоПроцесса(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		
		Длительность = ДлительностьИсполненияОзнакомления(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		
		Длительность = ДлительностьИсполненияПоручения(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		
		Длительность = ДлительностьИсполненияРассмотрения(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		
		Длительность = ДлительностьИсполненияРегистрации(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		
		Длительность = ДлительностьИсполненияСогласования(Процесс);
		
	ИначеЕсли ТипПроцесса = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		
		Длительность = ДлительностьИсполненияУтверждения(Процесс);
		
	КонецЕсли;
	
	КоличествоРабочихЧасовВДне = КоличествоРабочихЧасовПользователя(Неопределено);
	
	Длительность = ДлительностьВДняхЧасахМинутах(Длительность, КоличествоРабочихЧасовВДне);
	
	Результат = Новый Структура;
	Результат.Вставить("СрокИсполненияПроцессаДни", Длительность.Дни);
	Результат.Вставить("СрокИсполненияПроцессаЧасы", Длительность.Часы);
	Результат.Вставить("СрокИсполненияПроцессаМинуты", Длительность.Минуты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает длительность процесса/шаблона Исполнения в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияПроцессаИсполнения(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		СтрокаРеквизитовПроцессов = 
			"Ссылка, Исполнители, Проверяющий,
			|СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты,
			|КоличествоИтераций";
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
		
		РеквизитыПроцесса.Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителями = ДлительностьИсполненияПроцессаУчастникамиВМинутах(
		РеквизитыПроцесса.Исполнители, "ПорядокИсполнения");
	
	Если ДлительностьИсполненияИсполнителями <> 0 Тогда
		
		ДлительностьИсполненияПроверяющим = ДлительностьИсполненияУчастникаПроцессаВМинутах(
			РеквизитыПроцесса.Проверяющий,
			РеквизитыПроцесса.СрокОбработкиРезультатовДни,
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
			
		КоличествоИтераций = 1;
		Если ЗначениеЗаполнено(РеквизитыПроцесса.КоличествоИтераций) Тогда
			КоличествоИтераций = РеквизитыПроцесса.КоличествоИтераций;
		КонецЕсли;
		
		ДлительностьПроцесса = (ДлительностьИсполненияИсполнителями
			+ ДлительностьИсполненияПроверяющим) * КоличествоИтераций;
		
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Выполняет корректировку длительности отвественного, если она меньше длительности остальных
// исполнителей.
//
// Параметры:
//  Исполнители - ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей Исполнения.
//
Процедура СкорректироватьДлительностьИсполненияОтвественного(Исполнители) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(Исполнители[0]) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВариантУстановкиСрокаИсполнения",
		Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок);
	Если Исполнители.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определим длительность исполнения всеми участниками в минутах.
	ДлительностьИсполненияВсемиИсполнителямиВМинутах = 
		ДлительностьИсполненияПроцессаУчастникамиВМинутах(Исполнители, "ПорядокИсполнения");
	
	// Определим длительность исполнения отвественного в минутах.
	ДлительностьИсполненияОтвественнымВМинутах = 
		ДлительностьИсполненияУчастникаПроцессаВМинутах(
		Исполнители[0].Исполнитель,
		Исполнители[0].СрокИсполненияДни,
		Исполнители[0].СрокИсполненияЧасы,
		Исполнители[0].СрокИсполненияМинуты);
		
	// Скорректируем длительность исполнения ответственного, если
	// она меньше суммарной длительности исполнения других исполнителей.
	Если ДлительностьИсполненияОтвественнымВМинутах < ДлительностьИсполненияВсемиИсполнителямиВМинутах Тогда
		
		КоличествоРабочихЧасовОтвественногоВДне = 
			КоличествоРабочихЧасовПользователя(Исполнители[0].Исполнитель);
		
		НоваяДлительностьОтветственного = ДлительностьВДняхЧасахМинутах(
			ДлительностьИсполненияВсемиИсполнителямиВМинутах, КоличествоРабочихЧасовОтвественногоВДне);
		
		Исполнители[0].СрокИсполненияДни = НоваяДлительностьОтветственного.Дни;
		Исполнители[0].СрокИсполненияЧасы = НоваяДлительностьОтветственного.Часы;
		Исполнители[0].СрокИсполненияМинуты = НоваяДлительностьОтветственного.Минуты;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает длительность процесса/шаблона составнего процесса в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияСоставнегоПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцессаВМинутах = 0;
	
	КоличествоРабочихЧасовВДне = 
		КоличествоРабочихЧасовПользователя(Неопределено);
		
	ТипПроцесса = ТипЗнч(Процесс);

	Если ТипПроцесса = Тип("ДанныеФормыСтруктура") Тогда
		Шаблоны = Процесс.Шаблоны.Выгрузить();
	Иначе
		Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "Шаблоны");
			Шаблоны = РеквизитыПроцесса.Шаблоны.Выгрузить();
		Иначе
			Шаблоны = Процесс.Шаблоны.Выгрузить();
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
		Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаДни", ОписаниеТиповЧисло);
		Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаЧасы", ОписаниеТиповЧисло);
		Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаМинуты", ОписаниеТиповЧисло);
		
		ЗаполнитьДлительностьШаблоновСоставногоПроцесса(Шаблоны);
	КонецЕсли;
	
	Для Каждого Стр Из Шаблоны Цикл
		
		// Если попадается этап с нулевой длительностью, то
		// считаем, что длительность составного процесса
		// не определена.
		Если ЗначениеЗаполнено(Стр.Шаблон)
			И Стр.СрокИсполненияПроцессаДни = 0
			И Стр.СрокИсполненияПроцессаЧасы = 0
			И Стр.СрокИсполненияПроцессаМинуты = 0 Тогда
			
			Возврат 0;
		КонецЕсли;
		
		ДлительностьШаблонаВМинутах = ДлительностьВМинутах(
			Стр.СрокИсполненияПроцессаДни,
			Стр.СрокИсполненияПроцессаЧасы,
			Стр.СрокИсполненияПроцессаМинуты,
			КоличествоРабочихЧасовВДне);
		ДлительностьПроцессаВМинутах = ДлительностьПроцессаВМинутах + ДлительностьШаблонаВМинутах;
	КонецЦикла;
	
	Возврат ДлительностьПроцессаВМинутах;
	
КонецФункции

// Возвращает длительность процесса/шаблона Ознакомления в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияОзнакомления(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = "Исполнители";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
		РеквизитыПроцесса.Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьПроцесса = ДлительностьИсполненияПроцессаУчастникамиВМинутах(
		РеквизитыПроцесса.Исполнители);
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность процесса/шаблона Поручения в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияПоручения(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = 
			"Исполнитель, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты,
			|Проверяющий, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителем = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Исполнитель,
		РеквизитыПроцесса.СрокИсполненияДни,
		РеквизитыПроцесса.СрокИсполненияЧасы,
		РеквизитыПроцесса.СрокИсполненияМинуты);
	
	Если ДлительностьИсполненияИсполнителем <> 0 Тогда
	
		ДлительностьИсполненияПроверяющим = ДлительностьИсполненияУчастникаПроцессаВМинутах(
			РеквизитыПроцесса.Проверяющий,
			РеквизитыПроцесса.СрокОбработкиРезультатовДни,
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
			
		ДлительностьПроцесса = ДлительностьИсполненияИсполнителем + ДлительностьИсполненияПроверяющим;
		
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность процесса/шаблона Рассмотрения в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияРассмотрения(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = 
			"Исполнитель, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты,
			|Автор, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителем = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Исполнитель,
		РеквизитыПроцесса.СрокИсполненияДни,
		РеквизитыПроцесса.СрокИсполненияЧасы,
		РеквизитыПроцесса.СрокИсполненияМинуты);
	
	ДлительностьИсполненияАвтором = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Автор,
		РеквизитыПроцесса.СрокОбработкиРезультатовДни,
		РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
		РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
		
	Если ДлительностьИсполненияИсполнителем <> 0 И ДлительностьИсполненияАвтором <> 0 Тогда
		ДлительностьПроцесса = ДлительностьИсполненияИсполнителем + ДлительностьИсполненияАвтором;
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность процесса/шаблона Регистрации в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияРегистрации(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = 
			"Исполнитель, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты,
			|Автор, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты,
			|КоличествоИтераций";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителем = 0;
	ДлительностьИсполненияАвтором = 0;
	
	ДлительностьИсполненияИсполнителем = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Исполнитель,
		РеквизитыПроцесса.СрокИсполненияДни,
		РеквизитыПроцесса.СрокИсполненияЧасы,
		РеквизитыПроцесса.СрокИсполненияМинуты);
		
	ДлительностьИсполненияАвтором = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Автор,
		РеквизитыПроцесса.СрокОбработкиРезультатовДни,
		РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
		РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
		
	КоличествоИтераций = 1;
	Если ЗначениеЗаполнено(РеквизитыПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = РеквизитыПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	Если ДлительностьИсполненияИсполнителем <> 0 И ДлительностьИсполненияАвтором <> 0 Тогда
		
		ДлительностьПроцесса = 
			(ДлительностьИсполненияИсполнителем + ДлительностьИсполненияАвтором) * КоличествоИтераций;
		
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность процесса/шаблона Согласования в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияСогласования(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = 
			"Исполнители,
			|Автор, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты,
			|КоличествоИтераций";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
		РеквизитыПроцесса.Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителями = ДлительностьИсполненияПроцессаУчастникамиВМинутах(
		РеквизитыПроцесса.Исполнители, "ПорядокСогласования");
	
	ДлительностьИсполненияАвтором = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Автор,
		РеквизитыПроцесса.СрокОбработкиРезультатовДни,
		РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
		РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
		
	КоличествоИтераций = 1;
	Если ЗначениеЗаполнено(РеквизитыПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = РеквизитыПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	Если ДлительностьИсполненияИсполнителями <> 0 И ДлительностьИсполненияАвтором <> 0 Тогда
		ДлительностьПроцесса = 
			(ДлительностьИсполненияИсполнителями + ДлительностьИсполненияАвтором) * КоличествоИтераций;
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность процесса/шаблона Утверждения в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияУтверждения(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = 
			"Исполнитель, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты,
			|Автор, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты,
			|КоличествоИтераций";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителем = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Исполнитель,
		РеквизитыПроцесса.СрокИсполненияДни,
		РеквизитыПроцесса.СрокИсполненияЧасы,
		РеквизитыПроцесса.СрокИсполненияМинуты);
		
	ДлительностьИсполненияАвтором = ДлительностьИсполненияУчастникаПроцессаВМинутах(
		РеквизитыПроцесса.Автор,
		РеквизитыПроцесса.СрокОбработкиРезультатовДни,
		РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
		РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
		
	КоличествоИтераций = 1;
	Если ЗначениеЗаполнено(РеквизитыПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = РеквизитыПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	Если ДлительностьИсполненияИсполнителем <> 0 И ДлительностьИсполненияАвтором <> 0 Тогда
		
		ДлительностьПроцесса = 
			(ДлительностьИсполненияИсполнителем + ДлительностьИсполненияАвтором) * КоличествоИтераций;
		
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Переводит длительность из минут в дни, часы, минуты.
//
// Параметры:
//  ДлительностьВМинутах - Число - длительность в минутах.
//  КоличествоРабочихЧасовВДне - Число - количество рабочих часов в дне.
//
// Возвращаемое значение:
//  Структура
//   * Дни - Число
//   * Часы - Число
//   * Минуты - Число
//
Функция ДлительностьВДняхЧасахМинутах(ДлительностьВМинутах, КоличествоРабочихЧасовВДне) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дни", 0);
	Результат.Вставить("Часы", 0);
	Результат.Вставить("Минуты", 0);
	
	Результат.Дни = Цел(ДлительностьВМинутах / (КоличествоРабочихЧасовВДне * 60));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		Результат.Часы = 
			Цел(ДлительностьВМинутах / 60 - Результат.Дни * КоличествоРабочихЧасовВДне);
		
		Результат.Минуты = ДлительностьВМинутах
			- Результат.Дни * КоличествоРабочихЧасовВДне * 60
			- Результат.Часы * 60;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество рабочих часов пользователя.
//
// Результат может быть преопределен в
// СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииКоличестваРабочихЧасовПользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - участник процесса.
//
// Возвращаемое значение:
//  Число - количество рабочих часов в дней для пользователя.
//
Функция КоличествоРабочихЧасовПользователя(Пользователь) Экспорт
	
	КоличествоРабочихЧасовВДне = 0;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииКоличестваРабочихЧасовПользователя(
		Пользователь, КоличествоРабочихЧасовВДне, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат КоличествоРабочихЧасовВДне;
	КонецЕсли;
	
	КоличествоРабочихЧасовВДне = 24;
	
	Возврат КоличествоРабочихЧасовВДне;
	
КонецФункции

// Возвращает длительность исполнения процесса в минутах его участниками.
//
// Параметры:
//  ТаблицаИсполнители - ТаблицаЗначений, ДанныеФормЫКоллекция - таблица участников.
//  ИмяПоляПорядокИсполнения - Строка - имя поля порядка исполнения в таблице исполнителей.
//
// Возвращаемое значение:
//  Число - длительность исполнения в минутах.
//
Функция ДлительностьИсполненияПроцессаУчастникамиВМинутах(
	ТаблицаИсполнители, ИмяПоляПорядокИсполнения = "") Экспорт
	
	КоличествоИсполнителей = ТаблицаИсполнители.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(ТаблицаИсполнители[0]) Тогда
		ТекущийИндекс = 1;
		ДлительностьИсполненияОтвественным = ДлительностьИсполненияУчастникаПроцессаВМинутах(
			ТаблицаИсполнители[0].Исполнитель,
			ТаблицаИсполнители[0].СрокИсполненияДни,
			ТаблицаИсполнители[0].СрокИсполненияЧасы,
			ТаблицаИсполнители[0].СрокИсполненияМинуты);
	Иначе
		ТекущийИндекс = 0;
		ДлительностьИсполненияОтвественным = 0;
	КонецЕсли;
	
	ВариантыПорядкаВыполнения = РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
	
	МаксимальнаяДлительностьЭтапа = 0;
	ДлительностьИсполненияИсполнителями = 0;
	
	Пока ТекущийИндекс < КоличествоИсполнителей Цикл
		
		СтрИсполнитель = ТаблицаИсполнители[ТекущийИндекс];
		
		Если ЗначениеЗаполнено(ИмяПоляПорядокИсполнения)
			И СтрИсполнитель[ИмяПоляПорядокИсполнения] = ВариантыПорядкаВыполнения.ПослеПредыдущего Тогда
			
			ДлительностьИсполненияИсполнителями = ДлительностьИсполненияИсполнителями
				+ МаксимальнаяДлительностьЭтапа;
				
			МаксимальнаяДлительностьЭтапа = 0;
		КонецЕсли;
		
		ДлительностьСрокИсполнения = ДлительностьИсполненияУчастникаПроцессаВМинутах(
			СтрИсполнитель.Исполнитель,
			СтрИсполнитель.СрокИсполненияДни,
			СтрИсполнитель.СрокИсполненияЧасы,
			СтрИсполнитель.СрокИсполненияМинуты);
		
		МаксимальнаяДлительностьЭтапа = Макс(МаксимальнаяДлительностьЭтапа, ДлительностьСрокИсполнения);
		
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
	ДлительностьИсполненияИсполнителями = ДлительностьИсполненияИсполнителями
		+ МаксимальнаяДлительностьЭтапа;
	
	ДлительностьИсполненияИсполнителями = Макс(
		ДлительностьИсполненияИсполнителями, ДлительностьИсполненияОтвественным);
	
	Возврат ДлительностьИсполненияИсполнителями;
	
КонецФункции

// Возвращает длительность исполнения процесса в минутах его участником.
//
// Параметры:
//  Участник - СправочникСсылка.Пользователи, СправочникСсылка.РолиИсполнителей - участник процесса.
//  Дни - Число - количество дней исполнения.
//  Часы - Число - количество часов исполнения
//  Минуты - Число - количество минут исполнения
//
// Возвращаемое значение:
//  Число - длительность исполнения в минутах.
//
Функция ДлительностьИсполненияУчастникаПроцессаВМинутах(
	Участник, Дни, Часы, Минуты) Экспорт
	
	КоличествоРабочихЧасовВДне = 
		КоличествоРабочихЧасовПользователя(Участник);
	
	Возврат ДлительностьВМинутах(Дни, Часы, Минуты, КоличествоРабочихЧасовВДне);
	
КонецФункции

// Перевод длительность из дней, часов, минут в минуты.
//
// Параметры:
//  Дни - Число
//  Часы - Число
//  Минуты - Число
//  КоличествоРабочихЧасовВДне - Число - количество рабочих часов в дне.
//
// Возвращаемое значение:
//  Число - длительность в минутах.
//
Функция ДлительностьВМинутах(Дни, Часы, Минуты, КоличествоРабочихЧасовВДне) Экспорт
	
	Результат = Дни * КоличествоРабочихЧасовВДне * 60;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		Результат = Результат + Часы * 60 + Минуты;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПереносСроков

// Возвращает структуру сроков процесса.
//
// Может быть переопределена в
// СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииСтруктурыСроковПроцессаДляПроверкиИзменения
//
// Возвращаемое значение:
//  Ссылка - БизнесПроцессСсылка - ссылка на процесс
//  СрокИсполненияПроцесса - Дата
//
Функция СтруктураСроковПроцессаДляПроверкиИзменения() Экспорт
	
	СтруктураСроков = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииСтруктурыСроковПроцессаДляПроверкиИзменения(
		СтруктураСроков, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат СтруктураСроков;
	КонецЕсли;
	
	СтруктураСроков.Вставить("Ссылка");
	СтруктураСроков.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
	
	Возврат СтруктураСроков;
	
КонецФункции

// Проверяет изменение срока процесса.
// В случае изменения присваивает реквизиту СрокИсполненияПроцессаИзменен форму значение Иситина.
//
// Параметры:
//  СсылкаНаПроцесс - БизнессПроцессСсылка - ссылкан на процесс.
//  Сроки - Структура - см. Функция СтруктураСроковПроцессаДляПроверкиИзменения()
//  Форма - УправляемаяФорма - форма процесса.
//
Процедура ПроверитьИзменениеСроковПроцесса(СсылкаНаПроцесс, НовыеСрокиПроцесса, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриПроверкеИзмененияСроковПроцесса(
		СсылкаНаПроцесс, НовыеСрокиПроцесса, Форма, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СрокИсполненияПроцессаИзменен = Ложь;
	
	Если Не ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка изменения срока исполнения процесса
	СрокИсполненияПроцессаПоСсылке = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПроцесс, "СрокИсполненияПроцесса");
	Если СрокИсполненияПроцессаПоСсылке <> НовыеСрокиПроцесса.СрокИсполненияПроцесса Тогда
		Форма.СрокИсполненияПроцессаИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет изменение срока процесса в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма изменения параметров процесса.
//
Процедура ПроверитьИзменениеСроковВФормеПроцесса(Форма) Экспорт
	
	Если Не Форма.Объект.Стартован Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСроковДляПроверки = СтруктураСроковПроцессаДляПроверкиИзменения();
	
	СтруктураСроковДляПроверки.Ссылка = Форма.Объект.Ссылка;
	
	СтруктураСроковДляПроверки.СрокИсполненияПроцесса = Форма.Объект.СрокИсполненияПроцесса;
		
	СрокиИсполненияПроцессов.ПроверитьИзменениеСроковПроцесса(
		Форма.Объект.Ссылка,
		СтруктураСроковДляПроверки,
		Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_КарточкиПроцессовИШаблонов

// Подготавливает форму процесса для работы со сроками.
// В зависимости от параметров ТочкаМаршрутаВозвратаНаДоработку и ДляНовойИтерации
// особым образом определяется дата отсчета.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса.
//  ТочкаМаршрутаВозвратаНаДоработку - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута процесса
//                                     в которой создается задача ознакомления с возможность
//                                     отправить процесс на следующий цикл.
//  ДляНовойИтерации - Булево - если передано значение Истина, то расчет сроков будет осуществляться от
//                              текущей даты.
//
Процедура КарточкаПроцессаПриСозданииНаСервере(Форма,
	ТочкаМаршрутаВозвратаНаДоработку = Неопределено,
	ДляНовойИтерации = Ложь) Экспорт
	
	Форма.ДатаОтсчетаДляРасчетаСроков = ДатаОтсчетаДляРасчетаСроковПроцесса(
		Форма.Объект, ТочкаМаршрутаВозвратаНаДоработку, ДляНовойИтерации);
		
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ВозможенВыборТочнойДатыВСроках", Истина);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураЗаполнения);
	
	Если Форма.Объект.Свойство("КоличествоИтераций")
		И ЗначениеЗаполнено(Форма.Объект.НомерИтерации) Тогда
		
		Форма.Элементы.КоличествоИтераций.МинимальноеЗначение = Форма.Объект.НомерИтерации;
	КонецЕсли;
	
	Если ДляНовойИтерации Тогда
		
		ОбновитьВариантыУстановкиСроковДляНовойИтерации(Форма);
		
		// Увеличиваем количество итераций, если текущая итерация последняя.
		Если Форма.Объект.Свойство("КоличествоИтераций") Тогда
			Форма.Элементы.КоличествоИтераций.МинимальноеЗначение = Форма.Объект.НомерИтерации + 1;
			Если Форма.Объект.КоличествоИтераций = Форма.Объект.НомерИтерации Тогда
				Форма.Объект.КоличествоИтераций = Форма.Объект.КоличествоИтераций + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Подготавливает форму шаблона процесса для работы со сроками.
//
// Параметры:
//  Форма - УправляемаяФормы - форма шаблона процесса.
//
Процедура КарточкаШаблонаПриСозданииНаСервере(Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриСозданииНаСервереКарточкиШаблона(
		Форма, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Для шаблонов процессов дата отсчета всегда не заполнена,
	// т.к. точный срок для шаблонов не рассчитывается.
	Форма.ДатаОтсчетаДляРасчетаСроков = Дата(1,1,1);
	
	ПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Подготавливает форму процесса/шаблона для работы со сроками.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса/шаблона.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриСозданииНаСервере(Форма, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Форма.ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	ПодсказкаВводаПоляСрокИсполнения = ПодсказкаВводаПоляСрокИсполнения(Форма);
	
	ШиринаПоляСрок = ШиринаПоляСрокИсполнения(Форма);
	
	Если Форма.Элементы.Найти("ИсполнителиСрокИсполненияПредставление") <> Неопределено Тогда
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление.ПодсказкаВвода = 
			ПодсказкаВводаПоляСрокИсполнения;
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление.Ширина = ШиринаПоляСрок;
		
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление.КнопкаВыбора = 
			Форма.ВозможенВыборТочнойДатыВСроках;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокИсполненияПредставление") <> Неопределено Тогда
		Форма.Элементы.СрокИсполненияПредставление.ПодсказкаВвода = 
			ПодсказкаВводаПоляСрокИсполнения;
		Форма.Элементы.СрокИсполненияПредставление.Ширина = ШиринаПоляСрок;
		
		Форма.Элементы.СрокИсполненияПредставление.КнопкаВыбора = 
			Форма.ВозможенВыборТочнойДатыВСроках;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокОбработкиРезультатовПредставление") <> Неопределено Тогда
		Форма.Элементы.СрокОбработкиРезультатовПредставление.ПодсказкаВвода = 
			ПодсказкаВводаПоляСрокИсполнения;
		Форма.Элементы.СрокОбработкиРезультатовПредставление.Ширина = ШиринаПоляСрок;
		
		Форма.Элементы.СрокОбработкиРезультатовПредставление.КнопкаВыбора = 
			Форма.ВозможенВыборТочнойДатыВСроках;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("КоличествоИтераций") <> Неопределено
		И Форма.Объект.Свойство("НомерИтерации")
		И Форма.Объект.НомерИтерации > 0
		И Не ЗначениеЗаполнено(Форма.Элементы.КоличествоИтераций.МинимальноеЗначение) Тогда
		
		Форма.Элементы.КоличествоИтераций.МинимальноеЗначение = Форма.Объект.НомерИтерации;
	КонецЕсли;
	
	Форма.ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Возвращает тест подсказки ввода поля срок исполнения, в зависимости от настройки
// настройки ИспользоватьДатуИВремяВСрокахЗадач
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса или шаблона
//
// Возвращаемое значение:
//  Строка - подсказка ввода для поля срок исполнения.
//
Функция ПодсказкаВводаПоляСрокИсполнения(Форма) Экспорт
	
	Результат = "";
	
	Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Результат = НСтр("ru = 'дата, дни, часы, минуты'; en = 'date, days, hours, minutes'");
	Иначе
		Результат = НСтр("ru = 'дата, дни'; en = 'date, days'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
		
		Результат = СокрЛП(СтрЗаменить(Результат, НСтр("ru = 'дата,'; en = 'date,'"), ""));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ширину для полей со сроком в зависимости от
// реквизита формы ДатаОтсчетаДляРасчетаСроков и ИспользоватьДатуИВремяВСрокахЗадач.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса/шаблона.
//
// Возвращаемое значение:
//  Число
//
Функция ШиринаПоляСрокИсполнения(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
		
		ШиринаПоляСрок = 16;
		Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ШиринаПоляСрок = 25;
		КонецЕсли;
		
	Иначе
		
		ШиринаПоляСрок = 10;
		Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ШиринаПоляСрок = 15;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ШиринаПоляСрок;
	
КонецФункции

// Возвращает ширину для полей со сроком для составного процесса в зависимости от
// реквизита формы ДатаОтсчетаДляРасчетаСроков и ИспользоватьДатуИВремяВСрокахЗадач.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса/шаблона.
//
// Возвращаемое значение:
//  Число
//
Функция ШиринаПоляСрокИсполненияДействияСоставногоПроцесса(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
		ШиринаПоляСрокЭтапа = 10;
		Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ШиринаПоляСрокЭтапа = 12;
		КонецЕсли;
	Иначе
		ШиринаПоляСрокЭтапа = 10;
		Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ШиринаПоляСрокЭтапа = 15;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШиринаПоляСрокЭтапа;
	
КонецФункции

// Определяет необходимость расчета сроков в форме процесса.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяРасчетСроков(Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Ложь;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииНеобходимостиРасчетаСрока(
		Форма, Результат, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Форма.Объект.Стартован = Ложь
		И Форма.Объект.ПометкаУдаления = Ложь;
	
КонецФункции

// Определяет номер итерации для расчета срока в карточке процесса.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса.
//
// Возвращаемое значение:
//  Число - номер итерации.
//
Функция НомерИтерацииДляРасчетаВКарточке(Форма) Экспорт
	
	НомерИтерации = Форма.Объект.НомерИтерации;
	Если НомерИтерации = 0 Тогда
		НомерИтерации = 1;
	КонецЕсли;
	
	Возврат НомерИтерации;
	
КонецФункции

// Возвращает соотвествие ключей действий и их сроков из таблицы
// действий.
//
// Параметры:
//  Действия - ДанныеФормыКоллекция - таблица действий процесса.
//  КлючДействия - Строка - наименование поля с ключом уникальности действия.
//
// Возвращаемое значение:
//  Соотвествие
//   * Ключ - Строка - ключ действия.
//   * Значение - Структура - структура сроков действия
//      ** СрокИсполненияПроцесса - Дата
//      ** СрокИсполненияПроцессаДни - Число
//      ** СрокИсполненияПроцессаЧасы - Число
//      ** СрокИсполненияПроцессаМинуты - Число
//      ** СрокИсполненияПредставление - Строка
//
Функция СрокиДействийПроцесса(Действия, КлючДействия) Экспорт
	
	СрокиЭтапов = Новый Соответствие;
	Для Каждого СтрДействие Из Действия Цикл
		СрокиДействие = Новый Структура(
			"СрокИсполненияПроцесса,
			|СрокИсполненияПроцессаДни,
			|СрокИсполненияПроцессаЧасы,
			|СрокИсполненияПроцессаМинуты,
			|СрокИсполненияПроцессаПредставление");
		ЗаполнитьЗначенияСвойств(СрокиДействие, СтрДействие);
		
		СрокиЭтапов.Вставить(СтрДействие[КлючДействия], СрокиДействие);
	КонецЦикла;
	
	Возврат СрокиЭтапов;
	
КонецФункции

// Заполняет таблицу действий сроками.
// Используется вместе с процедурой СрокиДействийПроцесса.
//
// Параметры:
//  Сроки - Соответствие - см. возвращаемое значение функции СрокиДействийПроцесса.
//  Действия - ДанныеФормыКоллекция - таблица действий процесса.
//  КлючДействия - Строка - наименование поля с ключом уникальности действия.
//
Процедура ЗаполнитьСрокиВТаблицеДействий(Сроки, Действия, КлючДействия) Экспорт
	
	Для Каждого СтрДействие Из Действия Цикл
		СрокиДействия = Сроки.Получить(СтрДействие[КлючДействия]);
		ЗаполнитьЗначенияСвойств(СтрДействие, СрокиДействия);
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////
// Условное оформление

// Устанавливает условное оформление истекших сроков в карточке процесса/шаблона.
//
// Параметры:
//  Форма - УсправляемаяФорма - карточка процесса.
//  ПредставлениеОформления - Строка - текстовое представление условного оформления. Должно быть уникальным в форме.
//  ПолеСПризнакомИстекшегоСрока - Строка - путь к полю с признаком истекшего срока.
//  ОформляемоеПоле - Строка - наименование оформляемого поля.
//
Процедура УстановитьУсловноеОформлениеИстекшегоСрока(
	Форма, ПредставлениеОформления, ПолеСПризнакомИстекшегоСрока, ОформляемоеПоле) Экспорт
	
	ЭлементУсловногоОформленияПоПредставлению = 
		БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
			Форма.УсловноеОформление, ПредставлениеОформления);
			
	ЭлементОтбораДанных = ЭлементУсловногоОформленияПоПредставлению.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементОтбораДанных.ЛевоеЗначение = 
		Новый ПолеКомпоновкиДанных(ПолеСПризнакомИстекшегоСрока);
		
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОформления = 
		ЭлементУсловногоОформленияПоПредставлению.Оформление.Элементы.Найти("ЦветТекста");
	
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = ЭлементУсловногоОформленияПоПредставлению.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Заполняет таблицу дат исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка - ссылка на процесс
//  ДатаИсполненияУчастников - ДанныеФормыКоллекция - таблица с датами исполнения участников.
//
Процедура ЗаполнитьДатыИсполненияУчастников(Процесс, ДатаИсполненияУчастников) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИсполненияУчастников.Очистить();
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
	ДатыИсполнения = МенеджерПроцесса.ДатыИсполненияУчастников(Процесс);
	
	Если ТипЗнч(ДатыИсполнения) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДатаИсполнения Из ДатыИсполнения Цикл
		СтрокаТаблицы = ДатаИсполненияУчастников.Добавить();
		СтрокаТаблицы.Участник = ДатаИсполнения.Ключ;
		СтрокаТаблицы.ДатаИсполнения = ДатаИсполнения.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет даты заверешения действий.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента,
//            БизнесПроцессСсылка.ОбработкаВходящегоДокумента,
//            БизнесПроцессСсылка.ОбработкаИсходящегоДокумента - ссылка на составной процесс.
//  ДатыЗавершенияДействий - ДанныеФормыКоллекция - таблица с датами завершения действий.
//
Процедура ЗаполнитьДатыЗавершенияДействий(Процесс, ДатыЗавершенияДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыЗавершенияДействий.Очистить();
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДействийИРеквизитыПроцесса = Новый Соответствие;
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Согласование"), "ШаблонСогласования");
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Утверждение"), "ШаблонУтверждения");
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Регистрация"), "ШаблонРегистрации");
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Рассмотрение"), "ШаблонРассмотрения");
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Ознакомление"), "ШаблонИсполненияОзнакомления");
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Исполнение"), "ШаблонИсполненияОзнакомления");
	ТипыДействийИРеквизитыПроцесса.Вставить(Тип("БизнесПроцессСсылка.Поручение"), "ШаблонПоручения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ДанныеБизнесПроцессов.БизнесПроцесс) КАК ТипДействия,
		|	ДанныеБизнесПроцессов.ДатаЗавершения
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс = &Процесс
		|	И ДанныеБизнесПроцессов.Завершен";
		
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДатаЗавершенияДействия = ДатыЗавершенияДействий.Добавить();
		ДатаЗавершенияДействия.Реквизит = ТипыДействийИРеквизитыПроцесса.Получить(Выборка.ТипДействия);
		ДатаЗавершенияДействия.ДатаЗавершения = Выборка.ДатаЗавершения
	КонецЦикла;
	
КонецПроцедуры

// Обновляет признак истекших сроков исполнения в таблице исполнителей
//
// Параметры:
//  РеквизитИсполнители - ДанныеФормыКоллекция - таблица исполнителей.
//  ДатаИсполненияПоУмолчанию - Дата - дата исполнения по умолчанию.
//  ДатыИсполненияУчастников - ДанныеФормыКоллекция - таблица дата исполнения процесса участниками.
//
Процедура ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
	РеквизитИсполнители, ДатаИсполненияПоУмолчанию, ДатыИсполненияУчастников = Неопределено) Экспорт
	
	Для Каждого СтрокаИсполнителя Из РеквизитИсполнители Цикл
		
		СтрокаИсполнителя.СрокИсполненияИстек = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаИсполнителя.СрокИсполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаИсполнения = Дата(1,1,1);
		Если ДатыИсполненияУчастников <> Неопределено Тогда
			ДатаИсполнения = ДатаИсполненияУчастника(
				СтрокаИсполнителя.ЗадачаИсполнителя, ДатыИсполненияУчастников);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ДатаИсполненияПоУмолчанию;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		Если СтрокаИсполнителя.СрокИсполнения < ДатаИсполнения Тогда
			СтрокаИсполнителя.СрокИсполненияИстек = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет признак истекшего срока для участника процесса
//
// Параметры:
//  СрокИсполнения - Дата - срок исполнения участника процесса.
//  СрокИсполненияИстек - Булево - признак истекшего срока.
//  ДатаИсполненияПоУмолчанию - Дата - дата исполнения по умолчанию.
//  ИмяРеквизитаУчастника - Строка - наименование реквизита с участником в процессе.
//  ДатыИсполненияУчастников - ДанныеФормыКоллекция - таблица дата исполнения процесса участниками.
//
Процедура ОбновитьПризнакИстекшегоСрокаУчастника(
	СрокИсполнения, СрокИсполненияИстек, ДатаИсполненияПоУмолчанию,
	ИмяРеквизитаУчастника = "", ДатыИсполненияУчастников = Неопределено) Экспорт
	
	ДатаИсполнения = Дата(1,1,1);
	Если ДатыИсполненияУчастников <> Неопределено Тогда
		ДатаИсполнения = ДатаИсполненияУчастника(ИмяРеквизитаУчастника, ДатыИсполненияУчастников);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
		ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
	Иначе
		ДатаИсполнения = ДатаИсполненияПоУмолчанию;
	КонецЕсли;
	
	ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
	
	СрокИсполненияИстек = Ложь;
	Если ЗначениеЗаполнено(СрокИсполнения) И СрокИсполнения < ДатаИсполнения Тогда
		СрокИсполненияИстек = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет признак истекшего срока для процесса
//
// Параметры:
//  СрокИсполнения - Дата - срок исполнения процесса.
//  ДатаЗаверешения - Дата - дата завершения процесса.
//  СрокИсполненияИстек - Булево - признак истекшего срока.
//
Процедура ОбновитьПризнакИстекшегоСрокаПроцесса(
	СрокИсполнения, ДатаЗаверешения, СрокИсполненияИстек) Экспорт
	
	СрокИсполненияИстек = Ложь;
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИсполнения = ТекущаяДата();
	
	Если ЗначениеЗаполнено(ДатаЗаверешения) Тогда
		ДатаИсполнения = ДатаЗаверешения;
	КонецЕсли;
	
	ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
	
	Если СрокИсполнения < ДатаИсполнения Тогда
		СрокИсполненияИстек = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке составного.
//
// Параметры:
//  Форма - УсправляемаяФорма - карточка процесса.
//
Процедура ОбновитьПризнакиИстекшихСроковСоставныхПроцессов(Форма) Экспорт
	
	ДатаЗавершенияПоУмолчанию = ТекущаяДатаСеанса();
	
	Для Каждого СтрокаСрок Из Форма.СрокиШаблонов Цикл
		
		РеквизитСрокИстек = Форма[СтрокаСрок.Реквизит + "СрокИстек"];
		РеквизитСрокИстек = Ложь;
		
		СрокИсполнения = СтрокаСрок.СрокИсполненияПроцесса;
		
		Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершенияДействия(СтрокаСрок.Реквизит, Форма.ДатыЗавершенияДействий);
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ДатаЗавершенияПоУмолчанию;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		Если СрокИсполнения < ДатаЗавершения Тогда
			РеквизитСрокИстек = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
		Форма.Объект.СрокИсполненияПроцесса,
		Форма.Объект.ДатаЗавершения,
		Форма.СрокИсполненияПроцессаИстек);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Обновление

// Возвращает количество неактивных процессов, шаблонов.
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоНеактивныхОбъектовДляОбработки() Экспорт
	
	Результат = 0;
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриОпределенииКоличестваНеактивныхОбъектовДляОбработки(
		Результат, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ВыборкаНеактивныхПроцессовИсполненияДляОбработки(0).Количество()
		+ ВыборкаНеактивныхПроцессовОзнакомленияДляОбработки(0).Количество()
		+ ВыборкаНеактивныхПроцессовПорученияДляОбработки(0).Количество()
		+ ВыборкаНеактивныхПроцессовРассмотренияДляОбработки(0).Количество()
		+ ВыборкаНеактивныхПроцессовРегристрацииДляОбработки(0).Количество()
		+ ВыборкаНеактивныхПроцессовСогласованияДляОбработки(0).Количество()
		+ ВыборкаНеактивныхПроцессовУтвержденияДляОбработки(0).Количество()
		+ ВыборкаНеактивныхСоставныхПроцессовДляОбработки().Количество();
	
	Возврат Результат;
	
КонецФункции

// Обработчик для отложенного обновления сроков неактивных процессов, шаблонов, протоколов мероприятий
//
// Возвращаемое значение:
//  Число - количество обработанных данных.
//
Функция ОбновитьСрокиИсполненияОтложенноНеАктивныхОбъектов() Экспорт
	
	// Ниже важен порядок обработки. Нельзя запускать обновление составных процессов
	// без обновления сроков в их действиях.
	
	КоличествоОбработанныхОбъектов = 0;
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриОтложенномОбновленииНеактивныхОбъектов(
		КоличествоОбработанныхОбъектов, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	// Простые процессы
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовИсполнения(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовОзнакомления(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовПоручения(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовРассмотрения(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовРегристрации(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовСогласования(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияПроцессовУтверждения(Ложь);
	Если КоличествоОбработанныхОбъектов > 0 Тогда
		Возврат КоличествоОбработанныхОбъектов;
	КонецЕсли;
	
	// Составные процессы. Обрабатываются один раз все составные процессы.
	// Нет деления на порции, т.к. нет возможности отличить
	// обработанные процессы.
	КоличествоОбработанныхОбъектов = 
		ОбновитьСрокиИсполненияСоставныхПроцессов(Ложь);
	Возврат 0;
	
КонецФункции

// Обработчик обновления сроков активных процессов, шаблонов и протоколов мероприятий
//
Процедура ОбновитьСрокиИсполненияАктивныхОбъектов() Экспорт
	
	// Ниже важен порядок обработки. Нельзя запускать обновление составных процессов
	// без обновления сроков в их действиях.
	
	СтандартнаяОбработка = Истина;
	СрокиИсполненияПроцессовПереопределяемый.ПриОбновленииАктивныхОбъектов(СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// шаблоны 
	ОбновитьСрокиИсполненияШаблоновИсполнения();
	ОбновитьСрокиИсполненияШаблоновОзнакомления();
	ОбновитьСрокиИсполненияШаблоновПоручения();
	ОбновитьСрокиИсполненияШаблоновРассмотрения();
	ОбновитьСрокиИсполненияШаблоновРегистрации();
	ОбновитьСрокиИсполненияШаблоновСогласования();
	ОбновитьСрокиИсполненияШаблоновУтверждения();
	
	// процессы
	ОбновитьСрокиИсполненияПроцессовИсполнения();
	ОбновитьСрокиИсполненияПроцессовОзнакомления();
	ОбновитьСрокиИсполненияПроцессовПоручения();
	ОбновитьСрокиИсполненияПроцессовРассмотрения();
	ОбновитьСрокиИсполненияПроцессовРегристрации();
	ОбновитьСрокиИсполненияПроцессовСогласования();
	ОбновитьСрокиИсполненияПроцессовУтверждения();
	ОбновитьСрокиИсполненияСоставныхПроцессов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РасчетСроковПроцессов

// Добавляет сроки участника в данные для расчета сроков.
//
// Процедура может быть переопределена в
// СрокиИсполненияПроцессовПереопределяемый.ПриДобавленииСрокаУчастникаПроцессаВДанныеДляРасчета.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ПараметрыСрокаУчастника - Структура
//   * Участник - СправочникСсылка.Пользователи, СправочникСсылка.РолиИсполнителей
//   * СрокИсполнения - Дата
//   * СрокИсполненияДни - Число
//   * СрокИсполненияЧасы - Число
//   * СрокИсполненияМинуты - Число
//   * ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  СрокУчастникаИзменен - Булево - признак того, что срок исполнения изменился.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ИмяИдентификатораСрока - Строка - описание (роль) срока в процессе.
//
Процедура ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета(
	Сроки, Предшественники,
	ПараметрыСрокаУчастника,
	СрокУчастникаИзменен,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ИмяИдентификатораСрока = Неопределено)
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриДобавленииСрокаУчастникаПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		ПараметрыСрокаУчастника,
		СрокУчастникаИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		ИмяИдентификатораСрока,
		СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СрокИсполнения = ПараметрыСрокаУчастника.СрокИсполнения;
	СрокИсполненияДни = ПараметрыСрокаУчастника.СрокИсполненияДни;
	СрокИсполненияЧасы = ПараметрыСрокаУчастника.СрокИсполненияЧасы;
	СрокИсполненияМинуты = ПараметрыСрокаУчастника.СрокИсполненияМинуты;
	ВариантУстановкиСрока = ПараметрыСрокаУчастника.ВариантУстановкиСрока;
	
	ПредшественникиТекущегоЭтапа = 
		ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПредшественникиСледующегоЭтапа);
	ПредшественникиСледующегоЭтапа.Очистить();
	
	IDТекущегоСрокаИсполнения = Новый УникальныйИдентификатор;
	
	СтрокаСрок = Сроки.Добавить();
	СтрокаСрок.IDСрока = IDТекущегоСрокаИсполнения;
	
	СтрокаСрок.СрокИсполнения = СрокИсполнения;
	СтрокаСрок.СрокИсполненияДни = СрокИсполненияДни;
	СтрокаСрок.СрокИсполненияЧасы = СрокИсполненияЧасы;
	СтрокаСрок.СрокИсполненияМинуты = СрокИсполненияМинуты;
	
	СтрокаСрок.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрока;
	
	СтрокаСрок.Пройден = Не СрокУчастникаИзменен;
	
	Если ИдентификаторыСроков <> Неопределено Тогда
		ИдентификаторыСроков.Вставить(IDТекущегоСрокаИсполнения, ИмяИдентификатораСрока);
	КонецЕсли;
		
	Для Каждого СтрПредшественникТекущегоЭтапа Из ПредшественникиТекущегоЭтапа Цикл
		СтрПредшественник = Предшественники.Добавить();
		СтрПредшественник.Последователь = IDТекущегоСрокаИсполнения;
		СтрПредшественник.Предшественник = СтрПредшественникТекущегоЭтапа;
	КонецЦикла;
	
	ПредшественникиСледующегоЭтапа.Добавить(IDТекущегоСрокаИсполнения);
	
КонецПроцедуры

// Исполнение

// Корректирует срок исполнения (точный и относительный) ответственного, если
// он меньше общего срока остальных исполнителей.
//
// Параметры:
//  Исполнители - ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей Исполнения.
//  ДатаОтсчета - Дата - дата отсчета для расчета сроков исполнителей.
//
Процедура СкорректироватьСрокИсполненияОтветственного(Исполнители, ДатаОтсчета)
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриКорректировкиСрокаИсполненияОтветственного(
		Исполнители, ДатаОтсчета, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтвественного(Исполнители[0]) Тогда
		Возврат;
	КонецЕсли;
	
	СрокИсполненияВсемиИсполнителями = Дата(1,1,1);
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		СрокИсполненияВсемиИсполнителями = 
			Макс(СрокИсполненияВсемиИсполнителями, СтрокаИсполнителя.СрокИсполнения);
	КонецЦикла;
	
	Если Исполнители[0].СрокИсполнения >= СрокИсполненияВсемиИсполнителями Тогда
		Возврат;
	КонецЕсли;
	
	// Присвоим максимальный срок исполнения всеми участниками ответственному.
	Исполнители[0].СрокИсполнения = СрокИсполненияВсемиИсполнителями;
	
	// Рассчитаем  и присвоим новую длительность срока исполнения для ответственного.
	ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
	ПараметрыСрокаИсполнения.СрокИсполнения = СрокИсполненияВсемиИсполнителями;
	ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
	
	ДлительностьСрокаОтветственногоИсполнителя = 
		ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
	
	Исполнители[0].СрокИсполненияДни = ДлительностьСрокаОтветственногоИсполнителя.Дни;
	Исполнители[0].СрокИсполненияЧасы = ДлительностьСрокаОтветственногоИсполнителя.Часы;
	Исполнители[0].СрокИсполненияМинуты = ДлительностьСрокаОтветственногоИсполнителя.Минуты;
	
КонецПроцедуры

// Составные процессы

// Возвращает данные действия составного процесса для расчета срока.
//
// Параметры:
//  Действие - БизнесПроцессСсылка, СправочникСсылка.<Имя шаблона процесса> - ссылка на действие
//             составного процесса.
//
// Параметры:
//  Структура - см. ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСрокаДействияСоставногоПроцесса(Действие)
	
	СтандартнаяОбработка = Истина;
	
	ДанныеДляРасчета = Новый Структура;
	
	СрокиИсполненияПроцессовПереопределяемый.ПриПолученииДанныхДляРасчетаСрокаДействияСоставногоПроцесса(
		Действие, ДанныеДляРасчета, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат ДанныеДляРасчета;
	КонецЕсли;
	
	ТипДействия = ТипЗнч(Действие);
	
	Параметры = ПараметрыДляРасчетаСроков();
	
	Если ТипДействия = Тип("СправочникСсылка.ШаблоныИсполнения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаПроцессаИсполнения(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковПроцессаИсполнения(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныОзнакомления")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаОзнакомления(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковОзнакомления(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныПоручения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаПоручения(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковПоручения(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРассмотрения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаРассмотрения(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковРассмотрения(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРегистрации")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаРегистрации(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковРегистрации(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныСогласования")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаСогласования(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковСогласования(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныУтверждения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаУтверждения(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковУтверждения(СтруктураДляРасчета, Параметры);
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПереносСроков

// Обработчик подписки СрокИсполненияПроцессовПередЗаписью
//
Процедура СрокИсполненияПроцессовПередЗаписью(Источник, Отказ) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.СрокИсполненияПроцессовПередЗаписью(
		Источник, Отказ, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	СрокИсполненияПроцесса = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "СрокИсполненияПроцесса");
		
	Источник.ДополнительныеСвойства.Вставить("СтарыйСрокИсполненияПроцесса", СрокИсполненияПроцесса);
	
КонецПроцедуры

// Обработчик подписки СрокИсполненияПроцессовПриЗаписи
// Обработчик предназначен для распространения изменения срока
// по иерархии процессов.
//
Процедура СрокИсполненияПроцессовПриЗаписи(Источник, Отказ) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	СрокиИсполненияПроцессовПереопределяемый.СрокИсполненияПроцессовПриЗаписи(
		Источник, Отказ, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("СтарыйСрокИсполненияПроцесса")
		Или Источник.ДополнительныеСвойства.СтарыйСрокИсполненияПроцесса = Источник.СрокИсполненияПроцесса Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ВедущаяЗадача)
		Или Не Источник.Стартован Тогда
		
		Возврат;
	КонецЕсли;
	
	ВедущаяЗадача = Источник.ВедущаяЗадача;
	ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		
	ЗаблокироватьДанныеДляРедактирования(ВедущийПроцесс);
	ОбъектВедущегоПроцесса = ВедущийПроцесс.ПолучитьОбъект();
	
	СтруктураДляРасчетаСрока = СтруктураДляРасчетаСрокаСоставногоПроцесса(ОбъектВедущегоПроцесса);
	
	ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
	ПараметрыДляРасчетаСроков.ДатаОтсчета = ОбъектВедущегоПроцесса.ДатаНачала;
	
	РассчитатьСрокиСоставногоПроцесса(СтруктураДляРасчетаСрока, ПараметрыДляРасчетаСроков);
		
	ОбъектВедущегоПроцесса.СрокИсполненияПроцесса = СтруктураДляРасчетаСрока.СрокИсполненияПроцесса;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ОбъектВедущегоПроцесса, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
	РазблокироватьДанныеДляРедактирования(ВедущийПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КарточкиПроцессовИШаблонов

// Устанавливает для сроков вариант установки срока ОтносительныйСрок,
// если точный срок исполнения меньше даты отсчета.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса.
//
Процедура ОбновитьВариантыУстановкиСроковДляНовойИтерации(Форма)
	
	ВариантОтносительныйСрок = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
	ВариантТочныйСрок = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	
	Если Форма.Объект.Свойство("ВариантУстановкиСрокаИсполнения")
		И Форма.Объект.ВариантУстановкиСрокаИсполнения = ВариантТочныйСрок
		И Форма.Объект.СрокИсполнения < Форма.ДатаОтсчетаДляРасчетаСроков Тогда
			
		Форма.Объект.ВариантУстановкиСрокаИсполнения = ВариантОтносительныйСрок;
	КонецЕсли;
	
	Если Форма.Объект.Свойство("ВариантУстановкиСрокаОбработкиРезультатов")
		И Форма.Объект.ВариантУстановкиСрокаОбработкиРезультатов = ВариантТочныйСрок
		И Форма.Объект.СрокОбработкиРезультатов < Форма.ДатаОтсчетаДляРасчетаСроков Тогда
		
		Форма.Объект.ВариантУстановкиСрокаОбработкиРезультатов = ВариантОтносительныйСрок;
	КонецЕсли;
	
	Если Форма.Объект.Свойство("Исполнители") Тогда
		Для Каждого СтрИсполнитель Из Форма.Объект.Исполнители Цикл
			Если СтрИсполнитель.ВариантУстановкиСрокаИсполнения = ВариантТочныйСрок
				И СтрИсполнитель.СрокИсполнения < Форма.ДатаОтсчетаДляРасчетаСроков Тогда
				
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения = ВариантОтносительныйСрок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////
// Условное оформление

// Возвращает дату исполнения участника из таблицы.
//
// Параметры:
//  Участник - ЗадачаИсполнителяСсылка.ЗадачаИсполнителя, Строка - имя реквизита с участником процесса или ссылка на его задачу.
//  ДатыИсполненияУчастников - ДанныеФормыКоллекция - таблица дата исполнения процесса участниками.
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаИсполненияУчастника(Участник, ДатыИсполненияУчастников)
	
	ДатаИсполнения = Дата(1,1,1);
	
	Если ДатыИсполненияУчастников = Неопределено Тогда
		Возврат ДатаИсполнения;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	
	НайденныеДатыИсполнения = ДатыИсполненияУчастников.НайтиСтроки(Отбор);
	
	Если НайденныеДатыИсполнения.Количество() <> 0
		И ЗначениеЗаполнено(НайденныеДатыИсполнения[0].ДатаИсполнения) Тогда
		
		ДатаИсполнения = НайденныеДатыИсполнения[0].ДатаИсполнения;
	КонецЕсли;
	
	Возврат ДатаИсполнения;
	
КонецФункции

// Возвращает из таблицы ДатыЗавершенияДействий дату завершения действия
// составного процесса по наименованию.
//
// Параметры:
//  НаименованиеДействия - Строка - наименование действия.
//  ДатыЗавершенияДействий - ДанныеФормыКоллекция - таблица дата завершения действий составного процесса.
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаЗавершенияДействия(НаименованиеДействия, ДатыЗавершенияДействий)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Реквизит", НаименованиеДействия);
	
	НайденныеДатыЗавершения = ДатыЗавершенияДействий.НайтиСтроки(Отбор);
	
	Если НайденныеДатыЗавершения.Количество() <> 0 Тогда
		Возврат НайденныеДатыЗавершения[0].ДатаЗавершения;
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Обновление

//////////////////////////
// Шаблоны процессов

// Обновляет сроки в шаблонах процессов Исполнений.
//
Процедура ОбновитьСрокиИсполненияШаблоновИсполнения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныИсполнения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсполнения КАК ШаблоныИсполнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныИсполнения.Исполнители КАК ШаблоныИсполненияИсполнители
		|		ПО ШаблоныИсполнения.Ссылка = ШаблоныИсполненияИсполнители.Ссылка
		|ГДЕ
		|	ШаблоныИсполнения.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныИсполнения.КоличествоИтераций = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныИсполнения.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДлительностьИсполненияИсполнителямиВЧасах = 0;
		
		ДлительностьЭтапаВЧасах = 0;
		
		Для Каждого СтрИсполнители Из ШаблонОбъект.Исполнители Цикл
			
			Если ШаблонОбъект.ВариантИсполнения = 
				Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
				
				ДлительностьИсполненияИсполнителямиВЧасах = 
					ДлительностьИсполненияИсполнителямиВЧасах + ДлительностьЭтапаВЧасах;
				
				ДлительностьЭтапаВЧасах = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрИсполнители.УдалитьСрокИсполнения)
				Или ЗначениеЗаполнено(СтрИсполнители.УдалитьСрокИсполненияЧас) Тогда
				
				СтрИсполнители.СрокИсполненияДни = СтрИсполнители.УдалитьСрокИсполнения;
				СтрИсполнители.СрокИсполненияЧасы = СтрИсполнители.УдалитьСрокИсполненияЧас;
			Иначе
				СтрИсполнители.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
				СтрИсполнители.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
			КонецЕсли;
			
			СтрИсполнители.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
				
			ДлительностьИсполненияВЧасах = 
				СтрИсполнители.СрокИсполненияДни * 24 + СтрИсполнители.СрокИсполненияЧасы;
				
			ДлительностьЭтапаВЧасах = Макс(
				ДлительностьЭтапаВЧасах, 
				ДлительностьИсполненияВЧасах);
			
		КонецЦикла;
		
		ДлительностьИсполненияИсполнителямиВЧасах = 
			ДлительностьИсполненияИсполнителямиВЧасах + ДлительностьЭтапаВЧасах;
		
		Если ЗначениеЗаполнено(ШаблонОбъект.Проверяющий) Тогда
			
			ДлительностьИсполненияДляПроверяющего = 24;
			
			Если ЗначениеЗаполнено(ШаблонОбъект.УдалитьСрокИсполнения)
				Или ЗначениеЗаполнено(ШаблонОбъект.УдалитьСрокИсполненияЧас) Тогда
				
				ДлительностьИсполненияПроцессаВЧасах = ШаблонОбъект.УдалитьСрокИсполнения * 24
					+ ШаблонОбъект.УдалитьСрокИсполненияЧас;
				
				Если ДлительностьИсполненияПроцессаВЧасах > ДлительностьИсполненияИсполнителямиВЧасах Тогда
					ДлительностьИсполненияДляПроверяющего = 
						ДлительностьИсполненияПроцессаВЧасах - ДлительностьИсполненияИсполнителямиВЧасах;
				КонецЕсли;
			КонецЕсли;
			
			ШаблонОбъект.СрокОбработкиРезультатовДни = Цел(ДлительностьИсполненияДляПроверяющего / 24);
			ШаблонОбъект.СрокОбработкиРезультатовЧасы = ДлительностьИсполненияДляПроверяющего % 24;
			ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
			
		КонецЕсли;
		
		ШаблонОбъект.КоличествоИтераций = 1;
		
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сроки в шаблонах процессов Ознакомлений.
//
Процедура ОбновитьСрокиИсполненияШаблоновОзнакомления()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныОзнакомления.Ссылка
		|ИЗ
		|	Справочник.ШаблоныОзнакомления.Исполнители КАК ШаблоныОзнакомленияИсполнители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныОзнакомления КАК ШаблоныОзнакомления
		|		ПО ШаблоныОзнакомленияИсполнители.Ссылка = ШаблоныОзнакомления.Ссылка
		|ГДЕ
		|	(ШаблоныОзнакомления.УдалитьСрокИсполнения <> 0
		|			ИЛИ ШаблоныОзнакомления.УдалитьСрокИсполненияЧас <> 0)
		|	И ШаблоныОзнакомленияИсполнители.СрокИсполненияДни = 0
		|	И ШаблоныОзнакомленияИсполнители.СрокИсполненияЧасы = 0
		|	И ШаблоныОзнакомления.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныОзнакомления.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрИсполнители Из ШаблонОбъект.Исполнители Цикл
			СтрИсполнители.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
			СтрИсполнители.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
			
			СтрИсполнители.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		КонецЦикла;
		
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сроки в шаблонах процессов Поручений.
//
Процедура ОбновитьСрокиИсполненияШаблоновПоручения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныПоручения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныПоручения КАК ШаблоныПоручения
		|ГДЕ
		|	(ШаблоныПоручения.УдалитьСрокИсполнения <> 0
		|			ИЛИ ШаблоныПоручения.УдалитьСрокИсполненияЧас <> 0)
		|	И ШаблоныПоручения.СрокИсполненияДни = 0
		|	И ШаблоныПоручения.СрокИсполненияЧасы = 0
		|	И ШаблоныПоручения.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныПоручения.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ШаблонОбъект.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
		ШаблонОбъект.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
		
		ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		Если ЗначениеЗаполнено(ШаблонОбъект.Проверяющий) Тогда
			ШаблонОбъект.СрокОбработкиРезультатовДни = 1;
			ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		КонецЕсли;
		
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сроки в шаблонах процессов Рассмотрений.
//
Процедура ОбновитьСрокиИсполненияШаблоновРассмотрения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныРассмотрения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныРассмотрения КАК ШаблоныРассмотрения
		|ГДЕ
		|	(ШаблоныРассмотрения.УдалитьСрокИсполнения <> 0
		|			ИЛИ ШаблоныРассмотрения.УдалитьСрокИсполненияЧас <> 0)
		|	И ШаблоныРассмотрения.СрокИсполненияДни = 0
		|	И ШаблоныРассмотрения.СрокИсполненияЧасы = 0
		|	И ШаблоныРассмотрения.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныРассмотрения.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ШаблонОбъект.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
		ШаблонОбъект.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
		
		ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		ШаблонОбъект.СрокОбработкиРезультатовДни = 1;
		ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сроки в шаблонах процессов Регистраций.
//
Процедура ОбновитьСрокиИсполненияШаблоновРегистрации()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныРегистрации.Ссылка
		|ИЗ
		|	Справочник.ШаблоныРегистрации КАК ШаблоныРегистрации
		|ГДЕ
		|	ШаблоныРегистрации.КоличествоИтераций = 0
		|	И ШаблоныРегистрации.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныРегистрации.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ШаблонОбъект.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
		ШаблонОбъект.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
		
		ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		ШаблонОбъект.СрокОбработкиРезультатовДни = 1;
		ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
			
		ШаблонОбъект.КоличествоИтераций = 1;
			
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сроки в шаблонах процессов Согласований.
//
Процедура ОбновитьСрокиИсполненияШаблоновСогласования()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныСогласования.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСогласования КАК ШаблоныСогласования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныСогласования.Исполнители КАК ШаблоныСогласованияИсполнители
		|		ПО ШаблоныСогласования.Ссылка = ШаблоныСогласованияИсполнители.Ссылка
		|ГДЕ
		|	ШаблоныСогласования.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныСогласования.КоличествоИтераций = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныСогласования.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрИсполнители Из ШаблонОбъект.Исполнители Цикл
			
			Если ШаблонОбъект.УдалитьРазныеСроки Тогда
				СтрИсполнители.СрокИсполненияДни = СтрИсполнители.УдалитьСрокИсполнения;
				СтрИсполнители.СрокИсполненияЧасы = СтрИсполнители.УдалитьСрокИсполненияЧас;
			Иначе
				СтрИсполнители.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
				СтрИсполнители.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
			КонецЕсли;
			
			СтрИсполнители.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		КонецЦикла;
		
			
		ШаблонОбъект.СрокОбработкиРезультатовДни = 1;
		ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		ШаблонОбъект.КоличествоИтераций = 1;
		
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сроки в шаблонах процессов Утверждений.
//
Процедура ОбновитьСрокиИсполненияШаблоновУтверждения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныУтверждения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныУтверждения КАК ШаблоныУтверждения
		|ГДЕ
		|	ШаблоныУтверждения.КоличествоИтераций = 0
		|	И ШаблоныУтверждения.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныУтверждения.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ШаблонОбъект.СрокИсполненияДни = ШаблонОбъект.УдалитьСрокИсполнения;
		ШаблонОбъект.СрокИсполненияЧасы = ШаблонОбъект.УдалитьСрокИсполненияЧас;
		
		ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		ШаблонОбъект.СрокОбработкиРезультатовДни = 1;
		ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		ШаблонОбъект.КоличествоИтераций = 1;
		
		ШаблонОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////
// Процессы

// Помещает активные процессы во временную таблицу запроса АктивныеПроцессы.
//
// Параметры:
//  Запрос - Запрос в котором создается временная таблица АктивныеПроцессы.
//  ИмяТаблицыПроцессов - Строка - полное имя таблицы бизнес-процессов (пример: БизнесПроцесс.Исполнение).
//
Процедура ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, ИмяТаблицыПроцессов)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Процессы.Ссылка
		|ПОМЕСТИТЬ АктивныеПроцессы
		|ИЗ
		|	#ТаблицаПроцессов КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|			ПО ДочерниеБизнесПроцессы.РодительскийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|		ПО Процессы.Ссылка = ДочерниеБизнесПроцессы.ДочернийПроцесс
		|			И Процессы.ВедущаяЗадача = ДочерниеБизнесПроцессы.СвязующаяЗадача
		|ГДЕ
		|	Процессы.ПометкаУдаления = ЛОЖЬ
		|	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Процессы.Ссылка
		|ИЗ
		|	#ТаблицаПроцессов КАК Процессы
		|ГДЕ
		|	Процессы.ПометкаУдаления = ЛОЖЬ
		|	И Процессы.Завершен = ЛОЖЬ";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПроцессов", ИмяТаблицыПроцессов);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

// Исполнение

// Обновляет сроки в процессах Исполнение.
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовИсполнения(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		Запрос = Новый Запрос;
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Исполнение");
			
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Исполнение.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение КАК Исполнение
			|		ПО АктивныеПроцессы.Ссылка = Исполнение.Ссылка
			|ГДЕ
			|	Исполнение.КоличествоИтераций = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Исполнение.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовИсполненияДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		Если ПроцессОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
			Для Каждого СтрИсполнитель Из ПроцессОбъект.Исполнители Цикл
				
				Если ЗначениеЗаполнено(СтрИсполнитель.УдалитьСрокИсполнения) Тогда
					СтрИсполнитель.СрокИсполнения = СтрИсполнитель.УдалитьСрокИсполнения;
				Иначе
					СтрИсполнитель.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполнения;
				КонецЕсли;
				
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
					
				Попытка
					
					ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
					ПараметрыСрокаИсполнения.СрокИсполнения = СтрИсполнитель.СрокИсполнения;
					ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
					
					Длительность = ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
					
					СтрИсполнитель.СрокИсполненияДни = Длительность.Дни;
					СтрИсполнитель.СрокИсполненияЧасы = Длительность.Часы;
					СтрИсполнитель.СрокИсполненияМинуты = Длительность.Минуты;
				Исключение
					// Длительность может и не рассчитаться.
					// В этом случае ничего не делаем и продолжаем обработку, чтобы не прерывать обновление.
				КонецПопытки;
				
			КонецЦикла;
		Иначе
			Для Каждого СтрИсполнитель Из ПроцессОбъект.Исполнители Цикл
				СтрИсполнитель.СрокИсполненияДни = СтрИсполнитель.УдалитьДлительностьИсполненияДни;
				СтрИсполнитель.СрокИсполненияЧасы = СтрИсполнитель.УдалитьДлительностьИсполненияЧасы;
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
				Если ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
					СтрИсполнитель.СрокИсполнения = 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрИсполнитель.ЗадачаИсполнителя, "СрокИсполнения");
				Иначе
					СтрИсполнитель.СрокИсполнения = СтрИсполнитель.УдалитьСрокИсполнения;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
			ПроцессОбъект.СрокОбработкиРезультатов = ПроцессОбъект.УдалитьСрокИсполнения;
			ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЕсли;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполнения;
		
		ПроцессОбъект.КоличествоИтераций = 1;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Исполнение.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовИсполненияДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Исполнение.Ссылка,
		|	Исполнение.Дата
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.ПометкаУдаления = ЛОЖЬ
		|	И Исполнение.КоличествоИтераций = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Исполнение.Ссылка,
		|	Исполнение.Дата";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Ознакомление

// Обновляет сроки в процессах Ознакомление.
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовОзнакомления(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		Запрос = Новый Запрос;
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Ознакомление");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Ознакомление.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Ознакомление КАК Ознакомление
			|		ПО АктивныеПроцессы.Ссылка = Ознакомление.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Ознакомление.Исполнители КАК ОзнакомлениеИсполнители
			|		ПО АктивныеПроцессы.Ссылка = ОзнакомлениеИсполнители.Ссылка
			|ГДЕ
			|	Ознакомление.УдалитьСрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|	И Ознакомление.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|	И ОзнакомлениеИсполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|	И ОзнакомлениеИсполнители.СрокИсполненияДни = 0
			|	И ОзнакомлениеИсполнители.СрокИсполненияЧасы = 0
			|	И ОзнакомлениеИсполнители.СрокИсполненияМинуты = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Ознакомление.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовОзнакомленияДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		Для Каждого СтрИсполнитель Из ПроцессОбъект.Исполнители Цикл
			
			СтрИсполнитель.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполнения;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				
			Попытка
				ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
				ПараметрыСрокаИсполнения.СрокИсполнения = СтрИсполнитель.СрокИсполнения;
				ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
				
				Длительность = ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
				
				СтрИсполнитель.СрокИсполненияДни = Длительность.Дни;
				СтрИсполнитель.СрокИсполненияЧасы = Длительность.Часы;
				СтрИсполнитель.СрокИсполненияМинуты = Длительность.Минуты;
			Исключение
				// Длительность может и не рассчитаться.
				// В этом случае ничего не делаем и продолжаем обработку, чтобы не прерывать обновление.
			КонецПопытки;
			
		КонецЦикла;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполнения;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Ознакомление.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовОзнакомленияДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Ознакомление.Ссылка,
		|	Ознакомление.Дата
		|ИЗ
		|	БизнесПроцесс.Ознакомление.Исполнители КАК ОзнакомлениеИсполнители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Ознакомление КАК Ознакомление
		|		ПО ОзнакомлениеИсполнители.Ссылка = Ознакомление.Ссылка
		|ГДЕ
		|	Ознакомление.ПометкаУдаления = ЛОЖЬ
		|	И Ознакомление.УдалитьСрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ОзнакомлениеИсполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОзнакомлениеИсполнители.СрокИсполненияДни = 0
		|	И ОзнакомлениеИсполнители.СрокИсполненияЧасы = 0
		|	И ОзнакомлениеИсполнители.СрокИсполненияМинуты = 0
		|	И Ознакомление.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ознакомление.Ссылка,
		|	Ознакомление.Дата";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Поручение

// Обновляет сроки в процессах Поручение.
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовПоручения(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		Запрос = Новый Запрос;
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Поручение");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Поручение.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Поручение КАК Поручение
			|		ПО АктивныеПроцессы.Ссылка = Поручение.Ссылка
			|ГДЕ
			|	Поручение.УдалитьСрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|	И Поручение.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|	И Поручение.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Поручение.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовПорученияДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		ПроцессОбъект.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполнения;
		ПроцессОбъект.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		Попытка
			ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
				ПараметрыСрокаИсполнения.СрокИсполнения = ПроцессОбъект.СрокИсполнения;
				ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
				
			Длительность = ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
			
			ПроцессОбъект.СрокИсполненияДни = Длительность.Дни;
			ПроцессОбъект.СрокИсполненияЧасы = Длительность.Часы;
			ПроцессОбъект.СрокИсполненияМинуты = Длительность.Минуты;
		Исключение
			// Длительность может и не рассчитаться.
			// В этом случае ничего не делаем и продолжаем обработку, чтобы не прерывать обновление.
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
			ПроцессОбъект.СрокОбработкиРезультатов = ПроцессОбъект.УдалитьСрокИсполнения;
			ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЕсли;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполнения;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Поручение.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовПорученияДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Поручение.Ссылка,
		|	Поручение.Дата
		|ИЗ
		|	БизнесПроцесс.Поручение КАК Поручение
		|ГДЕ
		|	Поручение.ПометкаУдаления = ЛОЖЬ
		|	И Поручение.УдалитьСрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Поручение.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|	И Поручение.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Рассмотрение

// Обновляет сроки в процессах Рассмотрение.
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовРассмотрения(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		
		Запрос = Новый Запрос;
		
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Рассмотрение");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Рассмотрение.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Рассмотрение КАК Рассмотрение
			|		ПО АктивныеПроцессы.Ссылка = Рассмотрение.Ссылка
			|ГДЕ
			|	Рассмотрение.КоличествоИтерацийИсполнения = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Рассмотрение.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовРассмотренияДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		ПроцессОбъект.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполнения;
		ПроцессОбъект.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполнения;
		
		// Перенос установленных настроек Исполнения/Ознакомления.
		
		Если ПроцессОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
			Для Каждого СтрИсполнитель Из ПроцессОбъект.ИсполнителиИсполнения Цикл
				
				Если ЗначениеЗаполнено(СтрИсполнитель.УдалитьСрокИсполнения) Тогда
					СтрИсполнитель.СрокИсполнения = СтрИсполнитель.УдалитьСрокИсполнения;
				Иначе
					СтрИсполнитель.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполненияОбщий;
				КонецЕсли;
				
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЦикла;
		Иначе
			Для Каждого СтрИсполнитель Из ПроцессОбъект.ИсполнителиИсполнения Цикл
				СтрИсполнитель.СрокИсполненияДни = СтрИсполнитель.УдалитьДлительностьИсполненияДни;
				СтрИсполнитель.СрокИсполненияЧасы = СтрИсполнитель.УдалитьДлительностьИсполненияЧасы;
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
				СтрИсполнитель.СрокИсполнения = СтрИсполнитель.УдалитьСрокИсполнения;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроцессОбъект.ПроверяющийИсполнения) Тогда
			ПроцессОбъект.СрокОбработкиРезультатовИсполнения = ПроцессОбъект.УдалитьСрокИсполненияОбщий;
			ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатовИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЕсли;
		ПроцессОбъект.СрокИсполненияПроцессаИсполнения = ПроцессОбъект.УдалитьСрокИсполненияОбщий;
		ПроцессОбъект.КоличествоИтерацийИсполнения = 1;
		
		Для Каждого СтрИсполнитель Из ПроцессОбъект.ИсполнителиОзнакомления Цикл
			СтрИсполнитель.СрокИсполнения = ПроцессОбъект.УдалитьСрокОзнакомления;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЦикла;
		ПроцессОбъект.СрокИсполненияПроцессаОзнакомления = ПроцессОбъект.УдалитьСрокОзнакомления;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Рассмотрение.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовРассмотренияДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Рассмотрение.Ссылка,
		|	Рассмотрение.Дата
		|ИЗ
		|	БизнесПроцесс.Рассмотрение КАК Рассмотрение
		|ГДЕ
		|	Рассмотрение.ПометкаУдаления = ЛОЖЬ
		|	И Рассмотрение.КоличествоИтерацийИсполнения = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Рассмотрение.Ссылка,
		|	Рассмотрение.Дата";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Регистрация

// Обновляет сроки в процессах Регистрация
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовРегристрации(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		
		Запрос = Новый Запрос;
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Регистрация");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Регистрация.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация КАК Регистрация
			|		ПО АктивныеПроцессы.Ссылка = Регистрация.Ссылка
			|ГДЕ
			|	Регистрация.КоличествоИтераций = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Регистрация.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовРегристрацииДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		ПроцессОбъект.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполнения;
		ПроцессОбъект.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		Попытка
			ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
			ПараметрыСрокаИсполнения.СрокИсполнения = ПроцессОбъект.СрокИсполнения;
			ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
			
			Длительность = ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
			
			ПроцессОбъект.СрокИсполненияДни = Длительность.Дни;
			ПроцессОбъект.СрокИсполненияЧасы = Длительность.Часы;
			ПроцессОбъект.СрокИсполненияМинуты = Длительность.Минуты;
		Исключение
			// Длительность может и не рассчитаться.
			// В этом случае ничего не делаем и продолжаем обработку, чтобы не прерывать обновление.
		КонецПопытки;
		
		ПроцессОбъект.СрокОбработкиРезультатов = ПроцессОбъект.УдалитьСрокИсполнения;
		ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполнения;
		
		ПроцессОбъект.КоличествоИтераций = 1;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Регистрация.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовРегристрацииДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Регистрация.Ссылка,
		|	Регистрация.Дата
		|ИЗ
		|	БизнесПроцесс.Регистрация КАК Регистрация
		|ГДЕ
		|	Регистрация.ПометкаУдаления = ЛОЖЬ
		|	И Регистрация.КоличествоИтераций = 0";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Согласование

// Обновляет сроки в процессах Согласование
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовСогласования(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		
		Запрос = Новый Запрос;
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Согласование");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Согласование.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование КАК Согласование
			|		ПО АктивныеПроцессы.Ссылка = Согласование.Ссылка
			|ГДЕ
			|	Согласование.КоличествоИтераций = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Согласование.Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовСогласованияДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		МаксимальныйСрокЭтапа = ДатаОтсчета;
		
		Для Каждого СтрИсполнитель Из ПроцессОбъект.Исполнители Цикл
			Если ПроцессОбъект.УдалитьРазныеСроки Тогда
				СтрИсполнитель.СрокИсполненияДни = СтрИсполнитель.УдалитьСрокИсполнения;
				СтрИсполнитель.СрокИсполненияЧасы = СтрИсполнитель.УдалитьСрокИсполненияЧас;
			Иначе
				СтрИсполнитель.СрокИсполненияДни = ПроцессОбъект.УдалитьСрокИсполнения;
				СтрИсполнитель.СрокИсполненияЧасы = ПроцессОбъект.УдалитьСрокИсполненияЧас;
			КонецЕсли;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
			
			Если СтрИсполнитель.ПорядокСогласования = 
				Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
				
				ДатаОтсчета = Макс(МаксимальныйСрокЭтапа, ДатаОтсчета);
				МаксимальныйСрокЭтапа = Дата(1,1,1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
				СтрИсполнитель.СрокИсполнения = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрИсполнитель.ЗадачаИсполнителя, "СрокИсполнения");
			Иначе
				Попытка
					
					ПараметрыДлительности = ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
					ПараметрыДлительности.Дни = СтрИсполнитель.СрокИсполненияДни;
					ПараметрыДлительности.Часы = СтрИсполнитель.СрокИсполненияЧасы;
					ПараметрыДлительности.Минуты = СтрИсполнитель.СрокИсполненияМинуты;
					ПараметрыДлительности.ДатаОтсчета = ДатаОтсчета;
					
					СтрИсполнитель.СрокИсполнения = СрокИсполненияПоДлительности(ПараметрыДлительности);
				Исключение
					// Длительность может и не рассчитаться, из-за незаполненного графика работ.
					// В этом случае обновление будет прервано и база останется неработоспособной.
				КонецПопытки;
			КонецЕсли;
			
			МаксимальныйСрокЭтапа = Макс(МаксимальныйСрокЭтапа, СтрИсполнитель.СрокИсполнения);
			
		КонецЦикла;
		
		ПроцессОбъект.КоличествоИтераций = 1;
		
		ПроцессОбъект.СрокОбработкиРезультатов = ПроцессОбъект.УдалитьСрокИсполненияДатой;
		ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполненияДатой;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Согласование.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовСогласованияДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Согласование.Ссылка,
		|	Согласование.Дата
		|ИЗ
		|	БизнесПроцесс.Согласование КАК Согласование
		|ГДЕ
		|	Согласование.ПометкаУдаления = ЛОЖЬ
		|	И Согласование.КоличествоИтераций = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Согласование.Ссылка,
		|	Согласование.Дата";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Утверждение

// Обновляет сроки в процессах Утверждение
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияПроцессовУтверждения(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		Запрос = Новый Запрос;
		ПоместитьАктивныеПроцессыВВиртуальнуюТаблицуЗапроса(Запрос, "БизнесПроцесс.Утверждение");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	АктивныеПроцессы.Ссылка,
			|	Утверждение.Дата
			|ИЗ
			|	АктивныеПроцессы КАК АктивныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Утверждение КАК Утверждение
			|		ПО АктивныеПроцессы.Ссылка = Утверждение.Ссылка
			|ГДЕ
			|	Утверждение.КоличествоИтераций = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	АктивныеПроцессы.Ссылка,
			|	Утверждение.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхПроцессовУтвержденияДляОбработки();
	КонецЕсли;
	
	КоличествоОбработанныхПроцессов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		ПроцессОбъект.СрокИсполнения = ПроцессОбъект.УдалитьСрокИсполнения;
		ПроцессОбъект.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		Попытка
			ПараметрыСрокаИсполнения = ПараметрыСрокаИсполненияДляОпределенияДлительности();
			ПараметрыСрокаИсполнения.СрокИсполнения = ПроцессОбъект.СрокИсполнения;
			ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
			
			Длительность = ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
			
			ПроцессОбъект.СрокИсполненияДни = Длительность.Дни;
			ПроцессОбъект.СрокИсполненияЧасы = Длительность.Часы;
			ПроцессОбъект.СрокИсполненияМинуты = Длительность.Минуты;
		Исключение
			// Длительность может и не рассчитаться.
			// В этом случае ничего не делаем и продолжаем обработку, чтобы не прерывать обновление.
		КонецПопытки;
		
		ПроцессОбъект.СрокОбработкиРезультатов = ПроцессОбъект.УдалитьСрокИсполнения;
		ПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПроцессОбъект.СрокИсполненияПроцесса = ПроцессОбъект.УдалитьСрокИсполнения;
		
		ПроцессОбъект.КоличествоИтераций = 1;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		КоличествоОбработанныхПроцессов = КоличествоОбработанныхПроцессов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных процессов Утверждение.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхПроцессовУтвержденияДляОбработки(Количество = 1000)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Утверждение.Ссылка,
		|	Утверждение.Дата
		|ИЗ
		|	БизнесПроцесс.Утверждение КАК Утверждение
		|ГДЕ
		|	Утверждение.ПометкаУдаления = ЛОЖЬ
		|	И Утверждение.КоличествоИтераций = 0";
		
	Если Количество > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Составные процессы

// Обновляет сроки в Составных процессах
//
// Параметры:
//  ТолькоАктивные - Булево - при значении Истина обновляет только активные (которые находятся в работе) процессы.
//
Функция ОбновитьСрокиИсполненияСоставныхПроцессов(ТолькоАктивные = Истина)
	
	Если ТолькоАктивные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбработкаВнутреннегоДокумента.Ссылка,
			|	ОбработкаВнутреннегоДокумента.Дата
			|ИЗ
			|	БизнесПроцесс.ОбработкаВнутреннегоДокумента КАК ОбработкаВнутреннегоДокумента
			|ГДЕ
			|	ОбработкаВнутреннегоДокумента.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|	И ОбработкаВнутреннегоДокумента.ПометкаУдаления = ЛОЖЬ
			|	И ОбработкаВнутреннегоДокумента.Завершен = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОбработкаВходящегоДокумента.Ссылка,
			|	ОбработкаВходящегоДокумента.Дата
			|ИЗ
			|	БизнесПроцесс.ОбработкаВходящегоДокумента КАК ОбработкаВходящегоДокумента
			|ГДЕ
			|	ОбработкаВходящегоДокумента.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|	И ОбработкаВходящегоДокумента.ПометкаУдаления = ЛОЖЬ
			|	И ОбработкаВходящегоДокумента.Завершен = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОбработкаИсходящегоДокумента.Ссылка,
			|	ОбработкаИсходящегоДокумента.Дата
			|ИЗ
			|	БизнесПроцесс.ОбработкаИсходящегоДокумента КАК ОбработкаИсходящегоДокумента
			|ГДЕ
			|	ОбработкаИсходящегоДокумента.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|	И ОбработкаИсходящегоДокумента.ПометкаУдаления = ЛОЖЬ
			|	И ОбработкаИсходящегоДокумента.Завершен = ЛОЖЬ";
			
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = ВыборкаНеактивныхСоставныхПроцессовДляОбработки();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ДатаОтсчета = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			ДатаОтсчета = Выборка.Дата;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			СтруктураДляРасчета = СтруктураДляРасчетаСрокаСоставногоПроцесса(ПроцессОбъект);
			
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчета;
			
			ДанныеДляРасчета = ДанныеДляРасчетаСроковСоставногоПроцесса(СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			ПометитьРассчитаннымиСрокиПростыхПроцессовВТаблицеСроков(ДанныеДляРасчета.Сроки);
			РассчитатьСрокиИсполнения(ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники, УникальныйИдентификаторПустой());
			
			ЗаполнитьСрокиСоставногоПроцесса(
				СтруктураДляРасчета,
				ДанныеДляРасчета.Сроки,
				ДанныеДляРасчета.ИдентификаторыСроков);
				
			ПроцессОбъект.СрокИсполненияПроцесса = СтруктураДляРасчета.СрокИсполненияПроцесса;
			
			ПроцессОбъект.Записать();
		Исключение
			// При наличии ссылок на несуществующие объекты в составном процессе
			// срок может и не рассчитаться. Такие процессы пропускаем.
		КонецПопытки;
		
	КонецЦикла;
	
	КоличествоОбработанныхПроцессов = Выборка.Количество();
	
	Возврат КоличествоОбработанныхПроцессов;
	
КонецФункции

// Возвращает выборку неактивных составных процессов.
//
// Параметры:
//  Количество - Число - количество процессов в выборке
//
Функция ВыборкаНеактивныхСоставныхПроцессовДляОбработки()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбработкаВнутреннегоДокумента.Ссылка,
		|	ОбработкаВнутреннегоДокумента.Дата
		|ИЗ
		|	БизнесПроцесс.ОбработкаВнутреннегоДокумента КАК ОбработкаВнутреннегоДокумента
		|ГДЕ
		|	ОбработкаВнутреннегоДокумента.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОбработкаВнутреннегоДокумента.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбработкаВходящегоДокумента.Ссылка,
		|	ОбработкаВходящегоДокумента.Дата
		|ИЗ
		|	БизнесПроцесс.ОбработкаВходящегоДокумента КАК ОбработкаВходящегоДокумента
		|ГДЕ
		|	ОбработкаВходящегоДокумента.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОбработкаВходящегоДокумента.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбработкаИсходящегоДокумента.Ссылка,
		|	ОбработкаИсходящегоДокумента.Дата
		|ИЗ
		|	БизнесПроцесс.ОбработкаИсходящегоДокумента КАК ОбработкаИсходящегоДокумента
		|ГДЕ
		|	ОбработкаИсходящегоДокумента.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОбработкаИсходящегоДокумента.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Помечает рассчитанными сроки простых процессов в таблице сроков
// для расчета общего срока составных процессов.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию СрокиИсполненияПроцессов.ПустаяТаблицаСроков.
//
Процедура ПометитьРассчитаннымиСрокиПростыхПроцессовВТаблицеСроков(Сроки)
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		Если СтрокаСрок.ПодчиненныеСроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СтрокаСрок.ПодчиненныеСроки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПроцесса = ТипЗнч(СтрокаСрок.ПодчиненныеСроки.Ссылка);
		
		Если ТипПроцесса <> Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
			И ТипПроцесса <> Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
			И ТипПроцесса <> Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
			
			СтрокаСрок.Пройден = Истина;
		КонецЕсли;
		
		ПометитьРассчитаннымиСрокиПростыхПроцессовВТаблицеСроков(СтрокаСрок.ПодчиненныеСроки.Сроки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
