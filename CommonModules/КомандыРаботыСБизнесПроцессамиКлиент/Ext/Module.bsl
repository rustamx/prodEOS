////////////////////////////////////////////////////////////////////////////////
// Команды работы с бизнес процессами клиент.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Стартует процесс из карточки процесса
//
// Параметры:
//   Форма - УправляемаяФорма - карточка процесса
//
Процедура СтартоватьИЗакрыть(Форма) Экспорт
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
	
	Если ЗначениеЗаполнено(Форма.НастройкаСтарта)
		И ЗначениеЗаполнено(Форма.НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
		
		ПараметрыЗаписи.Вставить("ОтложенныйСтартПроцесса", Истина);
		РезультатЗаписи = Форма.Записать(ПараметрыЗаписи);
	ИначеЕсли Форма.СтартоватьФоново Тогда
		ПараметрыЗаписи.Вставить("ФоновыйСтартПроцесса", Истина);
		РезультатЗаписи = Форма.Записать(ПараметрыЗаписи);
	Иначе
		ПараметрыЗаписи.Вставить("Старт", Истина);
		РезультатЗаписи = Форма.Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	Если РезультатЗаписи Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как остановленный
//
Процедура Остановить(Знач ПараметрКоманды, Форма) Экспорт
	
	ТекстВопроса = "";
	
	ЧислоЗадач = 0;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		ЧислоЗадач = БизнесПроцессыИЗадачиВызовСервера.ПолучитьЧислоНевыполненныхЗадачБизнесПроцессов(ПараметрКоманды);
		Если ПараметрКоманды.Количество() = 1 Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				|Будет выполнена остановка процесса ""%1"", его невыполненных задач (%2) и подчиненных процессов. Продолжить?'; en = 'Process ""%1"" will be stopped, along with its unexecuted tasks (%2) and subprocesses. Continue?'"), 
				Строка(ПараметрКоманды[0]), ЧислоЗадач);
		ИначеЕсли ПараметрКоманды.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите один или несколько процессов!'; en = 'Select one or several processes!'"));		
			Возврат;
		Иначе		
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				|Будет выполнена остановка процессов (%1), их невыполненных задач (%2) и подчиненных процессов. Продолжить?'; en = 'Processes (%1) will be stopped, along with their unexecuted tasks (%2) and subprocesses. Continue?'"), 
				ПараметрКоманды.Количество(), ЧислоЗадач);
		КонецЕсли;		
		
	Иначе
		
		ЧислоЗадач = БизнесПроцессыИЗадачиВызовСервера.ПолучитьЧислоНевыполненныхЗадачБизнесПроцесса(ПараметрКоманды);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '
			|Будет выполнена остановка процесса ""%1"", его невыполненных задач (%2) и подчиненных процессов. Продолжить?'; en = 'Process ""%1"" will be stopped, along with its unexecuted tasks (%2) and subprocesses. Continue?'"), 
			Строка(ПараметрКоманды), ЧислоЗадач);
			
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрКоманды", ПараметрКоманды);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОстановитьПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет, , 
		КодВозвратаДиалога.Нет, НСтр("ru = 'Остановка процесса'; en = 'Stop process'"));

КонецПроцедуры

Процедура ОстановитьПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Параметры.ПараметрКоманды;
	Форма = Параметры.Форма;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 1 Тогда
			Состояние(НСтр("ru = 'Идет остановка процесса. Пожалуйста подождите...'; en = 'Process is stopping. Please wait...'"));
		Иначе
			Состояние(НСтр("ru = 'Идет остановка процессов. Пожалуйста подождите...'; en = 'Processes are stopping. Please wait...'"));
		КонецЕсли;	
		
		БизнесПроцессыИЗадачиВызовСервера.ОстановитьБизнесПроцессы(ПараметрКоманды);
		
		Если ПараметрКоманды.Количество() = 1 Тогда
			Состояние(НСтр("ru = 'Остановка процесса успешно завершена!'; en = 'Process stopped successfully!'"));
		Иначе	
			Состояние(НСтр("ru = 'Остановка процессов успешно завершена!'; en = 'Processes stopped successfully!'"));
		КонецЕсли;	
	Иначе	
		Состояние(НСтр("ru = 'Идет остановка процесса. Пожалуйста подождите...'; en = 'Process is stopping. Please wait...'"));
		БизнесПроцессыИЗадачиВызовСервера.ОстановитьБизнесПроцесс(ПараметрКоманды);
		Состояние(НСтр("ru = 'Остановка процесса успешно завершена!'; en = 'Process stopped successfully!'"));
	КонецЕсли;
	
	Оповестить("БизнесПроцессИзменен", ПараметрКоманды, Форма);
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как активный
//
Процедура СделатьАктивным(Знач ПараметрКоманды, Форма) Экспорт
	
	ТекстВопроса = "";
	
	ЧислоЗадач = 0;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		ЧислоЗадач = БизнесПроцессыИЗадачиВызовСервера.ПолучитьЧислоНевыполненныхЗадачБизнесПроцессов(ПараметрКоманды);
		Если ПараметрКоманды.Количество() = 1 Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				|Процесс ""%1"", его задачи (%2) и подчиненные процессы будут сделаны активными. Продолжить?'; en = 'Process ""%1"", its tasks (%2) and subprocesses will be activated. Continue?'"), 
				Строка(ПараметрКоманды[0]), ЧислоЗадач);
		ИначеЕсли ПараметрКоманды.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите один или несколько процессов!'; en = 'Select one or several processes!'"));		
			Возврат;
		Иначе		
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				|Процессы (%1), их задачи (%2) и подчиненные процессы будут сделаны активными. Продолжить?'; en = 'Processes (%1), their tasks (%2) and subprocesses will be activated. Continue?'"), 
				ПараметрКоманды.Количество(), ЧислоЗадач);
		КонецЕсли;		
		
		ЗаголовокВопроса = НСтр("ru = 'Продолжение процессов'; en = 'Processes'' contituation'");
		
	Иначе
		
		ЧислоЗадач = БизнесПроцессыИЗадачиВызовСервера.ПолучитьЧислоНевыполненныхЗадачБизнесПроцесса(ПараметрКоманды);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '
			|Процесс ""%1"", его задачи (%2) и подчиненные процессы будут сделаны активными. Продолжить?'; en = 'Process ""%1"", its tasks (%2) and subprocesses will be activated. Continue?'"), 
			Строка(ПараметрКоманды), ЧислоЗадач);
		
		ЗаголовокВопроса = НСтр("ru = 'Продолжение процесса'; en = 'Process continuation'");
		
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрКоманды", ПараметрКоманды);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СделатьАктивнымПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет, , 
		КодВозвратаДиалога.Нет, 
		ЗаголовокВопроса);
	
КонецПроцедуры

Процедура СделатьАктивнымПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Параметры.ПараметрКоманды;
	Форма = Параметры.Форма;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 1 Тогда
			Состояние(НСтр("ru = 'Процесс и его задачи делаются активными. Пожалуйста подождите...'; en = 'Process and its tasks are being activated. Please wait...'"));
		Иначе	
			Состояние(НСтр("ru = 'Процессы и их задачи делаются активными. Пожалуйста подождите...'; en = 'Processes and their tasks are being activated. Please wait...'"));
		КонецЕсли;	
		БизнесПроцессыИЗадачиВызовСервера.СделатьАктивнымБизнесПроцессы(ПараметрКоманды);
		Если ПараметрКоманды.Количество() = 1 Тогда
			Состояние(НСтр("ru = 'Процесс, его задачи и подчиненные процессы сделаны активными!'; en = 'Process, its task, and subprocesses are activated!'"));
		Иначе	
			Состояние(НСтр("ru = 'Процессы, их задачи и подчиненные процессы сделаны активными!'; en = 'Processes, their tasks, and subprocesses are activated!'"));
		КонецЕсли;	
	Иначе	
		Состояние(НСтр("ru = 'Идет отмена остановки процесса. Пожалуйста подождите...'; en = 'Process stop is being cancelled. Please wait...'"));
		БизнесПроцессыИЗадачиВызовСервера.СделатьАктивнымБизнесПроцесс(ПараметрКоманды);
		Состояние(НСтр("ru = 'Процесс, его задачи и подчиненные процессы сделаны активными!'; en = 'Process, its task, and subprocesses are activated!'"));
	КонецЕсли;
	
	Оповестить("БизнесПроцессИзменен", ПараметрКоманды, Форма);
	
КонецПроцедуры

// Отмечает указанные задачи как принятые к исполнению
//
Процедура ПринятьЗадачиКИсполнению(Знач МассивЗадач, Форма) Экспорт
	
	ВыбраноЗадач = МассивЗадач.Количество();
	Если ВыбраноЗадач = 0 
		или ВыбраноЗадач = 1 И ТипЗнч(МассивЗадач[0]) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПринятьЗадачиКИсполнению(МассивЗадач);
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли МассивЗадач.Количество() <> 1 Тогда
		Состояние(НСтр("ru = 'Задачи приняты к исполнению!'; en = 'Tasks are accepted for execution!'"));
	Иначе		
		Состояние(НСтр("ru = 'Задача принята к исполнению!'; en = 'The task is accepted for execution!'"));
	КонецЕсли;	
	
	Оповестить("ЗадачаИзменена", МассивЗадач, Форма);
	
КонецПроцедуры

// Отмечает указанную задачу как принятую к исполнению
//
Процедура ПринятьЗадачуКИсполнению(Форма, ТекущийПользователь) Экспорт
	
	Форма.Объект.ПринятаКИсполнению = Истина;
	Форма.Объект.ДатаПринятияКИсполнению = ТекущаяДата();
	Если Форма.Объект.Исполнитель.Пустая() Тогда
		Форма.Объект.Исполнитель = ТекущийПользователь;
	КонецЕсли;	
			
	Форма.Записать();
	Состояние(НСтр("ru = 'Задача принята к исполнению!'; en = 'The task is accepted for execution!'"));
	ОбновитьДоступностьКомандПринятияКИсполнению(Форма);
	
	Оповестить("ЗадачаИзменена", Форма.Объект.Ссылка, Форма);

КонецПроцедуры

// Открывает форму нового вопроса по задаче или 
// список имеющихся вопросов
//
// Параметры:
//   Форма - УправляемаФорма - форма задачи
//
Процедура ЗадатьВопрос(Форма) Экспорт
	
	Если Форма.Элементы.ЗадатьВопрос.Заголовок = НСтр("ru = 'Задать вопрос'; en = 'Raise issue'") Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Задача", Форма.Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ВидВопроса", ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.Иное"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта",
			ПараметрыФормы);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Форма.Объект.Ссылка);
		
		ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ВопросыВыполненияЗадачи",
			ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменять выполнение задач Исполнить в процессах Согласования и Исполнения. При успешной
// отмене выполнения задачи пользователю показывается оповещение об успешной отмене выполнения.
// Иначе выдается предупреждение о том что отмена задачи невозможна.
//
Процедура ОтменитьПринятиеЗадачКИсполнению(Знач МассивЗадач, Форма) Экспорт
	
	ВыбраноЗадач = МассивЗадач.Количество();
	Если ВыбраноЗадач = 0 
		или ВыбраноЗадач = 1 И ТипЗнч(МассивЗадач[0]) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиВызовСервера.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач);
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли МассивЗадач.Количество() <> 1 Тогда
		Состояние(НСтр("ru = 'Задачи помечены как НЕ принятые к исполнению!'; en = 'The tasks are marked as NOT accepted for execution!'"));
	Иначе		
		Состояние(НСтр("ru = 'Задача помечена как НЕ принятая к исполнению!'; en = 'The task is marked as NOT accepted for execution!'"));
	КонецЕсли;		
	
	Оповестить("ЗадачаИзменена", МассивЗадач, Форма);
	
КонецПроцедуры

// Отмечает указанную задачу как не принятую к исполнению
//
Процедура ОтменитьПринятиеЗадачиКИсполнению(Форма) Экспорт
	
	Форма.Объект.ПринятаКИсполнению = Ложь;
	Форма.Объект.ДатаПринятияКИсполнению = "00010101000000";
	Если Не Форма.Объект.РольИсполнителя.Пустая() Тогда
		Форма.Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;	
	
	Форма.Записать();
	Состояние(НСтр("ru = 'Задача помечена как НЕ принятая к исполнению!'; en = 'The task is marked as NOT accepted for execution!'"));
	ОбновитьДоступностьКомандПринятияКИсполнению(Форма);
	
	Оповестить("ЗадачаИзменена", Форма.Объект.Ссылка, Форма);
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как остановленный.
// Предназначена для вызова из формы бизнес-процесса.
//
Процедура ОстановитьБизнесПроцессИзФормыОбъекта(Форма) Экспорт
	
	ИзменитьСостояниеБизнесПроцессаИзФормы(
		Форма,
		ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен"),
		НСтр("ru = 'Процесс остановлен'; en = 'Process stopped'"));
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как прерванный.
// Предназначена для вызова из формы бизнес-процесса (Начало).
//
Процедура ПрерватьБизнесПроцессИзФормыОбъекта(Форма) Экспорт
	
	Если Форма.Объект.Завершен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя прервать уже завершенный процесс!'; en = 'It is not possible to terminate a process that is already completed!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Объект.Стартован Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя прервать не стартовавшие процессы!'; en = 'It is not possible to terminate processes that not yet started!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя прервать процесс являющийся частью комплексного или составного процесса!'; en = 'It is not possible to terminate a process that is a part of a composite or compund process!'"));
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Форма.Объект.Ссылка;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("БизнесПроцесс", ОбъектСсылка);
	
	ОткрытьФорму("ОбщаяФорма.ПрерываниеПроцесса", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как прерванный.
// Предназначена для вызова из формы бизнес-процесса (Окончание).
//
Процедура ПрерватьБизнесПроцессИзФормыОбъектаОкончание(Форма, Результат) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ВладелецФормы <> Форма Тогда
		Возврат;
	КонецЕсли;

	ОбъектСсылка = Форма.Объект.Ссылка;
	
	ПредыдущееСостояние = Форма.Объект.Состояние;
	
	Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Форма.Объект.Состояние = ПредопределенноеЗначение(
		"Перечисление.СостоянияБизнесПроцессов.Прерван");
	Форма.Объект.ПричинаПрерывания = Результат.ПричинаПрерывания;
	
	Попытка
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПрерываниеПроцесса", Истина);
		Форма.Записать(ПараметрыЗаписи);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(, СообщениеОбОшибке);
		Форма.Объект.Состояние = ПредыдущееСостояние;
		Возврат;
	КонецПопытки;
	
	ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(ОбъектСсылка);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс прерван'; en = 'Process terminated'"),
		ПолучитьНавигационнуюСсылку(ОбъектСсылка),
		Строка(ОбъектСсылка),
		БиблиотекаКартинок.Информация32);
	ОповеститьОбИзменении(ОбъектСсылка);
	
	Для Каждого СтрокаПредмета из Форма.Объект.Предметы Цикл
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОЗапуске = Новый Структура();
		ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Форма.Объект.Ссылка);
		ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
		
		Оповестить("БизнесПроцессПрерван", ИнформацияОЗапуске);
	КонецЦикла;
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как прерванный.
//
Процедура ПрерватьБизнесПроцесс(Процесс, Форма) Экспорт
	
	РеквизитыПроцесса = 
		ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Процесс, "Завершен, Стартован, ВедущаяЗадача, Состояние");
	
	Если РеквизитыПроцесса.Состояние = 
		ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Прерван") Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Процесс уже прерван!'; en = 'Process is already terminated!'"));
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПроцесса.Завершен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя прервать уже завершенный процесс!'; en = 'It is not possible to terminate a process that is already completed!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ РеквизитыПроцесса.Стартован Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя прервать не стартовавшие процессы!'; en = 'It is not possible to terminate processes that not yet started!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
		ПоказатьПредупреждение(,
		НСтр("ru = 'Нельзя прервать процесс являющийся частью комплексного или составного процесса!'; en = 'It is not possible to terminate a process that is a part of a composite or compund process!'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПрерватьБизнесПроцесс_Продолжение", ЭтотОбъект, Процесс);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("БизнесПроцесс", Процесс);
	
	ОткрытьФорму("ОбщаяФорма.ПрерываниеПроцесса",
		ПараметрыФормы, Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПрерватьБизнесПроцесс_Продолжение(РезультатПрерывания, Процесс) Экспорт
	
	Если ТипЗнч(РезультатПрерывания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(
		Процесс, РезультатПрерывания.ПричинаПрерывания);
	
	ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(Процесс);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс прерван'; en = 'Process terminated'"),
		ПолучитьНавигационнуюСсылку(Процесс),
		Строка(Процесс),
		БиблиотекаКартинок.Информация32);
	ОповеститьОбИзменении(Процесс);
	
	Оповестить("БизнесПроцессИзменен", Процесс);
	
	Предметы = МультипредметностьВызовСервера.ПолучитьПредметыПроцесса(Процесс, Истина);
	
	Для Каждого Предметы из Предметы Цикл
		Если Не ЗначениеЗаполнено(Предметы) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОЗапуске = Новый Структура();
		ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Процесс);
		ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Предметы);
		
		Оповестить("БизнесПроцессПрерван", ИнформацияОЗапуске);
	КонецЦикла;
	
КонецПроцедуры

// Показывает окно с причиной прерывания процесса
//
Процедура ПоказатьПричинуПрерывания(Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда		
		БизнесПроцесс = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Форма.Объект.Ссылка, 
			"БизнесПроцесс");
		Если НЕ ЗначениеЗаполнено(БизнесПроцесс) Тогда
			Возврат;		
		КонецЕсли;
	Иначе
		БизнесПроцесс = Форма.Объект.Ссылка;
	КонецЕсли;
	
	КтоИКогдаПрервалПроцесс = БизнесПроцессыИЗадачиСервер.ПолучитьИнформациюОПрерыванииПроцесса(
		БизнесПроцесс);	
		
	ПараметрыФормы = Новый Структура();
			
	ПараметрыФормы.Вставить("КтоИКогдаПрервалПроцесс", КтоИКогдаПрервалПроцесс);
	
	ОткрытьФорму("ОбщаяФорма.ПричинаПрерыванияПроцесса", ПараметрыФормы,
		Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как активный.
// Предназначена для вызова из формы бизнес-процесса.
//
Процедура ПродолжитьБизнесПроцессИзФормыОбъекта(Форма) Экспорт
	
	ИзменитьСостояниеБизнесПроцессаИзФормы(
		Форма,
		ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен"),
		НСтр("ru = 'Процесс сделан активным'; en = 'Process activated'"));
	
КонецПроцедуры

// Устанавливает доступность команд принятия к исполнению
//
Процедура ОбновитьДоступностьКомандПринятияКИсполнению(Форма) Экспорт
	
	Если Форма.Объект.ПринятаКИсполнению = Истина Тогда
		Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
		Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Истина;
	Иначе	
		Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Истина;
		Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Отменяет выполнение задачи Исполнить в процессах Согласования и Исполнения. При успешной
// отмене выполнения задачи пользователю показывается оповещение.
// Иначе выдается предупреждение о том, что отмена задачи невозможна.
//
// Параметры:
//   Форма - УправляемаяФорма - форма объекта задачи
//
Процедура ОтменитьВыполнениеЗадачи(Форма) Экспорт
	
	Задача = Форма.Объект.Ссылка;
	
	РезультатОтменыВыполнения = БизнесПроцессыИЗадачиВызовСервера.ОтменитьВыполнениеЗадачи(Задача);
	Если РезультатОтменыВыполнения.Отказ Тогда
		ПоказатьПредупреждение(,РезультатОтменыВыполнения.ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	Оповестить("ОтмененоВыполнениеЗадачи", Задача);
	Оповестить("ЗадачаИзменена", Задача, Форма);
	
	ТекстОповещения = НСтр("ru = 'Выполнение задачи отменено.'; en = 'Task execution cancelled.'");
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Задача),
		Задача,
		БиблиотекаКартинок.Информация32)
	
КонецПроцедуры

Процедура ПереключитьХронометраж(Форма) Экспорт
	
	ВключенХронометраж = Форма.ВключенХронометраж;
	ДатаНачалаХронометража = Форма.ДатаНачалаХронометража;
	ВидыРабот = Форма.ВидыРабот;
	
	Попытка
		СсылкаНаЗадачу = Форма.ЗадачиМнеТекущаяЗадача;
	Исключение
		СсылкаНаЗадачу = Форма.Объект.Ссылка;
	КонецПопытки;
	
	СпособУказанияВремени = Форма.СпособУказанияВремени;
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
		
	Если НуженДиалог = Ложь Тогда
		
		Форма.ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, СсылкаНаЗадачу);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(СсылкаНаЗадачу));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", СсылкаНаЗадачу);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ФормаОбъекта", Форма);
		ПараметрыОповещения.Вставить("ТипДействия", "ПереключитьХронометраж");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеФормыДобавленияРаботы", УчетВремениКлиент, ПараметрыОповещения);
			
		ОткрытьФорму(
			"РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", 
			ПараметрыФормы, 
			Форма,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Перенаправить(Форма) Экспорт
	
	Если Форма.Объект.Выполнена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Уже выполненную задачу нельзя перенаправить.'; en = 'Executed task cannot be forwarded.'"));
		Возврат;
	КонецЕсли;	
			
	Если Форма.Записать() Тогда
		БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачу(Форма.Объект.Ссылка, Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Изменяет состояние бизнес-процесса из формы. При успешной установке состояния
// пользователю показывается постепенно затухающее окно с ТекстоСообщения.
// Если же возникает ошибка, то выдается предупреждение.
//
// Параметры:
//   - Форма - УправляемаяФорма - форма объекта бизнес-процесса.
//   - НовоеСостояние - ПеречислениеСсылка.СостоянияБизнесПроцессов - новое состояние 
//                      которое необходимо установить процессу из формы
//   - ТекстСообщения - Строка - текст сообщения которые будет показан в постепенно затухающем
//                      окне.
//
Процедура ИзменитьСостояниеБизнесПроцессаИзФормы(Форма, НовоеСостояние, ТекстСообщения)
	
	//ПредыдущееСостояние = Форма.Объект.Состояние;
	
	Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	//Форма.Объект.Состояние = НовоеСостояние;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИзменениеСостоянияПроцесса", Истина);
	ПараметрыЗаписи.Вставить("НовоеСостояние", НовоеСостояние);
	ПараметрыЗаписи.Вставить("СообщениеПриИзмененииСостоянияПроцесса", ТекстСообщения);
	
	Попытка
		Если Не Форма.Записать(ПараметрыЗаписи) Тогда
			//Форма.Объект.Состояние = ПредыдущееСостояние;
			Возврат;
		КонецЕсли;;
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(, СообщениеОбОшибке);
		//Форма.Объект.Состояние = ПредыдущееСостояние;
		Возврат;
	КонецПопытки;
	
	ПоказатьОповещениеПользователя(
		ТекстСообщения,
		ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
		Строка(Форма.Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	ОповеститьОбИзменении(Форма.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти
