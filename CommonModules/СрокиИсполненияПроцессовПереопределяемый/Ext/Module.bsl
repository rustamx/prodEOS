
////////////////////////////////////////////////////////////////////////////////
// Сроки исполнения процессов переопределяемый: модуль содержит переопределяемые
// процедуры для поддержки особой логики работы сроков исполнения в редакциях КОРП и ДГУ.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается из СрокиИсполненияПроцессов.ПараметрыСрокаИсполненияДляОпределенияДлительности при
// формировании параметров срока исполнения для определения длительности.
//
// Параметры:
//  Параметры - Структура - параметры срока исполнения для определения длительности.
//  СтандартнаяОбработка – Булево - В случае значения Истина параметры
//                         будут сформированы способом по умолчанию.
//
Процедура ПриФормированииПараметровСрокаИсполненияДляОпределенияДлительности(
	Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = СрокиИсполненияПроцессовКОРП.ПараметрыСрокаИсполненияДляОпределенияДлительности();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ДлительностьПоСрокуИсполнения при
// определении длительности срока исполнения.
//
// Параметры:
//  ПараметрыСрокаИсполнения - Структура - см. СрокиИсполненияПроцессов.ПараметрыСрокаИсполненияДляОпределенияДлительности
//  ДлительностьИсполнения - Структура - в этот параметр следует записать длительность срока исполнения.
//  СтандартнаяОбработка – Булево - в случае значения Истина длительность срока исполнения
//                         будет определена способом по умолчанию.
//
Процедура ПриОпределенииДлительностиПоСрокуИсполнения(
	ПараметрыСрокаИсполнения, ДлительностьИсполнения, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДлительностьИсполнения = 
		СрокиИсполненияПроцессовКОРП.ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока при
// формировании параметров длительности исполнения для определения точного срока.
//
// Параметры:
//  Параметры - Структура - параметры длительности исполнения.
//  СтандартнаяОбработка – Булево - В случае значения Истина параметры
//                         будут сформированы способом по умолчанию.
//
Процедура ПриФормированииПараметровДлительностиИсполненияДляОпределенияТочногоСрока(
	Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = 
		СрокиИсполненияПроцессовКОРП.ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.СрокИсполненияПоДлительности при
// определении срока исполнения по длительности.
//
// Параметры:
//  ПараметрыДлительности - Структура - см. СрокиИсполненияПроцессов.ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока.
//  СрокаИсполнения - Структура - в этот параметр следует записать точный срок исполнения.
//  СтандартнаяОбработка – Булево - в случае значения Истина точный срок исполнения
//                         будет определена способом по умолчанию.
//
Процедура ПриОпределенииСрокИсполненияПоДлительности(
	ПараметрыДлительности, СрокаИсполнения, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокаИсполнения = 
		СрокиИсполненияПроцессовКОРП.СрокИсполненияПоДлительности(ПараметрыДлительности);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса при
// определении даты отсчета для расчета сроков процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, ДанныеФормыСтруктура - процесс.
//  ТочкаМаршрутаВозвратаНаДоработку -  ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута процесса
//                                     в которой создается задача ознакомления с возможность
//                                     отправить процесс на следующий цикл.
//  ДляНовойИтерации - Булево - признак того, что дата отсчета требуется для расчета сроков
//                              новой итерации процесса.
//  ДатыОтсчета - Дата - в этот параметр следует записать результат.
//  СтандартнаяОбработка – Булево - В случае значения Истина дата отсчета будет определена способом по умолчанию.
//
Процедура ПриОпределенииДатыОтсчетаДляРасчетаСроковПроцесса(Процесс,
	ТочкаМаршрутаВозвратаНаДоработку = Неопределено,
	ДляНовойИтерации = Ложь,
	ДатыОтсчета,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДатыОтсчета = СрокиИсполненияПроцессовКОРП.ДатаОтсчетаДляРасчетаСроковПроцесса(
		Процесс, ТочкаМаршрутаВозвратаНаДоработку, ДляНовойИтерации);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.СкорректироватьДатуОтсчета при
// корректировке даты отсчета для расчета сроков процесса.
//
// Параметры:
//  ДатаОтсчета - ДатаИВремя - дата отсчета.
//  ДопПарметры - Структура - дополнительные параметры для корректировки.
//  СтандартнаяОбработка – Булево - В случае значения Истина дата отсчета
//                         будет скорректирована способом по умолчанию.
//
Процедура ПриКорректировкеДатыОтсчета(ДатаОтсчета, ДопПараметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.СкорректироватьДатуОтсчета(ДатаОтсчета, ДопПараметры);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя
//  ВариантУстановкиСрокаИсполнения - Перечисление.ВариантыУстановкиСрокаИсполнения - 
//                                    вариант установки срока в процессе, для текущей задачи.
//  СрокИсполнения - Дата - срок исполнения в процессе.
//  СрокИсполненияДни - Число - относительный срок исполнения в процессе.
//  СрокИсполненияЧасы - Число - относительный срок исполнения в процессе.
//  СрокИсполненияМинуты - Число - относительный срок исполнения в процессе.
//  СтандартнаяОбработка – Булево - В случае значения Истина заполнение срока исполнения задачи
//                         будет выполнено способом по умолчанию.
//
Процедура ПриЗаполненииСрокаИсполненияЗадач(Задача,
	ВариантУстановкиСрокаИсполнения,
	СрокИсполнения,
	СрокИсполненияДни,
	СрокИсполненияЧасы,
	СрокИсполненияМинуты,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РасчетСроковПроцессов

// Вызывается из СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков при
// определении структуры параметров для расчета сроков.
//
// Параметры:
//  Параметры - Структура - в этот параметр следует поместить структуру параметров.
//  СтандартнаяОбработка – Булево - в случае значения Истина структура параметров
//                                  определяется способом по умолчанию.
//
Процедура ПриОпределенииПараметровДляРасчетаСроков(
	Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = СрокиИсполненияПроцессовКОРП.ПараметрыДляРасчетаСроков();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ПустаяТаблицаСроков при
// формировании пустой таблицы сроков.
//
// Параметры:
//  Таблица - ТаблицаЗначений - в этот параметр следует поместить пустую таблицу сроков.
//  СтандартнаяОбработка – Булево - в случае значения Истина формирование таблицы будет
//                                  произведено способом по умолчанию.
//
Процедура ПриФормированииПустойТаблицыСроков(Таблица, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Таблица = СрокиИсполненияПроцессовКОРП.ПустаяТаблицаСроков();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ИзмененныеСрокиПроцесса при
// определении измененных сроков процесс.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, СправочникОбъект.Шаблон<Имя шаблона процесса>, ДанныеФормыСтуктура - процесс или шаблон процесса.
//  Параметры - Структура - см. функцию ПараметрыДляРасчетаСроков
//  ИзмененныеСроки - Структура - в этот параметр следует поместить структуру измененных сроков процесса.
//  СтандартнаяОбработка – Булево - в случае значения Истина определение измененных сроков будет
//                                  произведено способом по умолчанию.
//
Процедура ПриОпределенииИзмененныхСроковПроцесса(
	Процесс, Параметры, ИзмененныеСроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИзмененныеСроки = СрокиИсполненияПроцессовКОРП.ИзмененныеСрокиПроцесса(Процесс, Параметры);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ДобавитьДатуОтсчетаВДанныеДляРасчета при
// добавлении даты отсчета в данные для расчета сроков процесса.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ПараметрыДляРасчета - Структура - см. функцию ПараметрыДляРасчетаСроков.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  СтандартнаяОбработка – Булево - в случае значения Истина формирование таблицы будет
//                                  произведено способом по умолчанию.
//
Процедура ПриДобавленииДатыОтсчетаВДанныеДляРасчета(
	Сроки, Предшественники, ИдентификаторыСроков, ПараметрыДляРасчета,
	ПредшественникиСледующегоЭтапа, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков, ПараметрыДляРасчета,
		ПредшественникиСледующегоЭтапа);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета при
// добавлении срока участника в данные для расчета сроков процесса.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ПараметрыСрокаУчастника - Структура
//   * Участник - СправочникСсылка.Пользователи, СправочникСсылка.РолиИсполнителей
//   * СрокИсполнения - Дата
//   * СрокИсполненияДни - Число
//   * СрокИсполненияЧасы - Число
//   * СрокИсполненияМинуты - Число
//   * ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  СрокУчастникаИзменен - Булево - признак того, что срок исполнения изменился.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ИмяИдентификатораСрока - Строка - описание (роль) срока в процессе.
//  СтандартнаяОбработка – Булево - в случае значения Истина формирование таблицы будет
//                                  произведено способом по умолчанию.
//
Процедура ПриДобавленииСрокаУчастникаПроцессаВДанныеДляРасчета(
	Сроки, Предшественники,
	ПараметрыСрокаУчастника,
	СрокУчастникаИзменен,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков,
	ИмяИдентификатораСрока,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		ПараметрыСрокаУчастника,
		СрокУчастникаИзменен,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		ИмяИдентификатораСрока);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета при
// добавлении сроков таблицы участников в данные для расчета.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ТаблицаУчастников - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей.
//  ИндексИзменнойСтроки - Число - индекс измененной строки.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения процесса.
//  ИмяРеквизитаПорядокИсполнения - Строка - имя реквизита порядка исполнения в таблице исполнителей.
//  СтандартнаяОбработка – Булево - в случае значения Истина формирование таблицы будет
//                                  произведено способом по умолчанию.
//
Процедура ПриДобавленииСроковТаблицыУчастниковПроцессаВДанныеДляРасчета(
	Сроки, Предшественники,
	ТаблицаУчастников, ИндексИзменнойСтроки,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков,
	ВариантИсполнения,
	ИмяРеквизитаПорядокИсполнения,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
		Сроки, Предшественники,
		ТаблицаУчастников, ИндексИзменнойСтроки,
		ПредшественникиСледующегоЭтапа,
		ИдентификаторыСроков,
		ВариантИсполнения,
		ИмяРеквизитаПорядокИсполнения);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.РассчитатьСрокиИсполнения при
// расчете сроков исполнения.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. СрокиИсполненияПроцессов.ПустаяТаблицаСроков
//  Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников
//  IDРассчитанногоСрок - УникальныйИдентификатор - идентификатор рассчитанного срока, для последователей которого следует произвести расчет сроков.
//  СтандартнаяОбработка – Булево - в случае значения Истина расчет будет
//                                  произведен способом по умолчанию.
//
Процедура ПриРасчетеСроковИсполнения(
	Сроки, Предшественники, IDРассчитанногоСрок, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.РассчитатьСрокиИсполнения(
		Сроки, Предшественники, IDРассчитанногоСрок);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ДанныеДляРасчетаСрокаДействияСоставногоПроцесса при
// получении данных для расчета срока действия составного процесса.
//
// Параметры:
//  Действие - СправочникСсылка.<ИмяШаблонапроцесса>
//           - БизнесПроцессСсылка - ссылка на шаблон или процесс действия.
//  ДанныеДляРасчета - Стрктура - в этот параметр нужно поместить данные для расчета.
//  СтандартнаяОбработка – Булево - в случае значения Истина данные для расчета будут
//                                  определены способом по умолчанию.
//
Процедура ПриПолученииДанныхДляРасчетаСрокаДействияСоставногоПроцесса(
	Действие, ДанныеДляРасчета, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеДляРасчета = 
		СрокиИсполненияПроцессовКОРП.ДанныеДляРасчетаСрокаДействияСоставногоПроцесса(Действие);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса при
// расчете срока исполнения нового процесса.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект - процесс, для которого производится расчет сроков.
//  СтандартнаяОбработка – Булево - в случае значения Истина расчет будет
//                                  произведен способом по умолчанию.
//
Процедура ПриРасчетеСрокаИсполненияНовогоПроцесса(Процесс, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.РассчитатьСрокИсполненияДляНовогоПроцесса(Процесс);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.СкорректироватьСрокИсполненияОтветственного при
// корректировки срока исполнения ответственного.
//
// Параметры:
//  Исполнители - ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей Исполнения.
//  ДатаОтсчета - Дата - дата отсчета для расчета сроков исполнителей.
//  СтандартнаяОбработка – Булево - в случае значения Истина корректировка будет
//                                  произведена способом по умолчанию.
//
Процедура ПриКорректировкиСрокаИсполненияОтветственного(Исполнители, ДатаОтсчета, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.СкорректироватьСрокИсполненияОтветственного(Исполнители, ДатаОтсчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РасчетДлительностиПроцессов

// Вызывается из СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса при
// определении длительности процесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//  Смещение - Число - смещение даты отсчета процесса в секундах.
//  ДлительностьПроцесса - Структура - в этот параметр следует поместить длительность процесса в днях, часах, минутах.
//   * СрокИсполненияПроцессаДни - Число
//   * СрокИсполненияПроцессаЧасы - Число
//   * СрокИсполненияПроцессаМинуты - Число
//  СтандартнаяОбработка – Булево - в случае значения Истина длительность будет
//                                  определяться способом по умолчанию.
//
Процедура ПриОпределенииДлительностиПроцесса(
	Процесс, Смещение, ДлительностьПроцесса, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДлительностьПроцесса = 
		СрокиИсполненияПроцессовКОРП.ДлительностьИсполненияПроцесса(Процесс, Смещение);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.КоличествоРабочихЧасовПользователя при
// определении количества рабочих часов.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - участник процесса.
//  КоличествоРабочихЧасов - Число - в этот параметр следует поместить количество
//                                   рабочих часов в дней для пользователя.
//  СтандартнаяОбработка – Булево - в случае значения Истина количество рабочих часов будет
//                                  определено способом по умолчанию.
//
Процедура ПриОпределенииКоличестваРабочихЧасовПользователя(
	Пользователь, КоличествоРабочихЧасов, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	КоличествоРабочихЧасов = 
		СрокиИсполненияПроцессовКОРП.КоличествоРабочихЧасовПользователя(Пользователь);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПереносСроков

// Вызывается из СрокиИсполненияПроцессов.СтруктураСроковПроцессаДляПроверкиИзменения при
// определении структуры сроков для проверки.
//
// Параметры:
//  Результат - Структура - в этот параметр следует записать результат.
//  СтандартнаяОбработка – Булево - В случае значения Истина определение будет осуществляться
//                                  способом по умолчанию.
//
Процедура ПриОпределенииСтруктурыСроковПроцессаДляПроверкиИзменения(
	Результат, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = 
		СрокиИсполненияПроцессовКОРП.СтруктураСроковПроцессаДляПроверкиИзменения();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ПроверитьИзменениеСроковПроцесса при
// проверке изменения сроков процесса.
//
// Параметры:
//  СсылкаНаПроцесс - БизнессПроцессСсылка - ссылкан на процесс.
//  Сроки - Структура - см. Функция СтруктураСроковПроцессаДляПроверкиИзменения()
//  Форма - УправляемаяФорма - форма процесса.
//  СтандартнаяОбработка – Булево - В случае значения Истина проверка будет осуществляться
//                                  способом по умолчанию.
//
Процедура ПриПроверкеИзмененияСроковПроцесса(СсылкаНаПроцесс, НовыеСрокиПроцесса,
	Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ПроверитьИзменениеСроковПроцесса(
		СсылкаНаПроцесс, НовыеСрокиПроцесса, Форма);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.СрокИсполненияПроцессовПередЗаписью перед
// записью процесса.
//
// Параметры:
//  Источник, Отказ - стандартные параметры подписки на события ПередЗаписью.
//  СтандартнаяОбработка - Булево - в случае значения Истина обработка перед записью будет осуществляться
//                                  способом по умолчанию.
//
Процедура СрокИсполненияПроцессовПередЗаписью(Источник, Отказ, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.СрокИсполненияПроцессовПередЗаписью(Источник, Отказ);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.СрокИсполненияПроцессовПриЗаписи при
// записи процесса.
//
// Параметры:
//  Источник, Отказ - стандартные параметры подписки на события ПриЗаписи.
//  СтандартнаяОбработка - Булево - в случае значения Истина обработка записи будет осуществляться
//                                  способом по умолчанию.
//
Процедура СрокИсполненияПроцессовПриЗаписи(Источник, Отказ, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.СрокИсполненияПроцессовПриЗаписи(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_КарточкиПроцессовИШаблонов

// Вызывается из СрокиИсполненияПроцессов.ПриСозданииНаСервере при
// подготовке формы процесса/шаблона для работы со сроками.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса/шаблона.
//  СтандартнаяОбработка – Булево - В случае значения Истина подготовка будет осуществляться
//                                  способом по умолчанию.
//
Процедура ПриСозданииНаСервере(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ТребуетсяРасчетСроков при
// определении необходимости расчета срока.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса.
//  Результат - Булево - в этот параметр следует записать результат.
//  СтандартнаяОбработка – Булево - В случае значения Истина определение будет осуществляться
//                                  способом по умолчанию.
//
Процедура ПриОпределенииНеобходимостиРасчетаСрока(Форма, Результат, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = СрокиИсполненияПроцессовКОРП.ТребуетсяРасчетСроков(Форма);
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.КарточкаШаблонаПриСозданииНаСервере при
// подготовке формы шаблона для работы со сроками.
//
// Параметры:
//  Форма - УправляемаяФормы - форма шаблона процесса.
//  СтандартнаяОбработка – Булево - В случае значения Истина подготовка будет осуществляться
//                                  способом по умолчанию.
//
Процедура ПриСозданииНаСервереКарточкиШаблона(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.КарточкаШаблонаПриСозданииНаСервере(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Обновление

// Вызывается из СрокиИсполненияПроцессов.КоличествоНеактивныхОбъектовДляОбработки при
// определении количества неактивных объектов для обработки.
//
// Параметры:
//  Результат - Число - в этот параметр следует записать результат.
//  СтандартнаяОбработка - Булево - в случае значения Истина определение количества
//                                  будет осуществляться способом по умолчанию.
//
Процедура ПриОпределенииКоличестваНеактивныхОбъектовДляОбработки(
	Результат, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = СрокиИсполненияПроцессовКОРП.КоличествоНеактивныхОбъектовДляОбработки();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ОбновитьСрокиИсполненияОтложенноНеАктивныхОбъектов при
// обновлении неактивных объектов.
//
// Параметры:
//  КоличествоОбъектов - Число - в этот параметр следует записать количество обработанных объектов.
//  СтандартнаяОбработка - Булево - в случае значения Истина обновление неактивных объектов
//                                  будет осуществляться способом по умолчанию.
//
Процедура ПриОтложенномОбновленииНеактивныхОбъектов(КоличествоОбъектов, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	КоличествоОбъектов = 
		СрокиИсполненияПроцессовКОРП.ОбновитьСрокиИсполненияОтложенноНеАктивныхОбъектов();
	
КонецПроцедуры

// Вызывается из СрокиИсполненияПроцессов.ОбновитьСрокиИсполненияАктивныхОбъектов при
// обновлении активных объектов.
//
// Параметры:
//  СтандартнаяОбработка - Булево - в случае значения Истина обновление активных объектов
//                                  будет осуществляться способом по умолчанию.
//
Процедура ПриОбновленииАктивныхОбъектов(СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СрокиИсполненияПроцессовКОРП.ОбновитьСрокиИсполненияАктивныхОбъектов();
	
КонецПроцедуры

#КонецОбласти
