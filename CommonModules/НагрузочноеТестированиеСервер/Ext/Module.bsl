////////////////////////////////////////////////////////////////////////////////
// НагрузочноеТестированиеСервер:
//  Содержит код получения данных для сценариев и код создания клонов
//  пользователей для подсистемы ТестЦентр.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует незаполненную структуру шага сценария и добавляет его в переданный
// сценарий.
//
// Параметры:
//  Сценарий - Массив - Сценарий, в который добавляется шаг.
// 
// Возвращаемое значение:
//  Ссылка на созданный шаг.
//
Функция ДобавитьШагСценария(Сценарий) Экспорт
	
	НовыйШаг = Новый Структура("Действие, Параметры, Пауза");
	НовыйШаг.Действие = "";
	НовыйШаг.Параметры = Новый Структура;
	НовыйШаг.Пауза = ПолучитьДлительностьПаузы();
	
	Сценарий.Добавить(НовыйШаг);
	
	Возврат Сценарий.Получить(Сценарий.Количество() - 1);
	
КонецФункции

// Возвращает значение паузы в секундах.
//
// Параметры:
//  Значение - Число - Номинальное значение паузы. Если не задано, то 1.
//  МаксимальноеЗначение - Число - Максимальное значение паузы. Если задано, то
//    значение паузы выбирается случайным образом между номинальным и максимальным
//    значениями.
// 
// Возвращаемое значение:
//  Число - значение паузы в секундах.
//
Функция ПолучитьДлительностьПаузы(Значение = Неопределено, МаксимальноеЗначение = Неопределено) Экспорт
	
	Если Значение = Неопределено
		Или Значение < 0 Тогда
		
		Возврат 1;
	КонецЕсли;
	
	Если МаксимальноеЗначение = Неопределено
		Или МаксимальноеЗначение <= Значение Тогда
		
		Возврат Значение;
	КонецЕсли;
		
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Возврат ГСЧ.СлучайноеЧисло(Значение, МаксимальноеЗначение);
	
КонецФункции

// Возвращает случайно выбранный элемент справочника с учетом РЛС. Если элементов
// для выборки нет, то вернет пустую ссылку.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника, из которого необходимо получить элемент.
// 
// Возвращаемое значение:
//  СправочникСсылка.<ИмяСправочника> - Ссылка на выбранный элемент либо пустая ссылка.
//
Функция ПолучитьСлучайныйЭлементСправочника(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	Ссылка
		|ИЗ
		|	Справочник.%ИмяСправочника%
		|ГДЕ
		|	ПометкаУдаления = ЛОЖЬ";
		
	Если Метаданные.Справочники[ИмяСправочника].Иерархический
		И Метаданные.Справочники[ИмяСправочника].ВидИерархии =
			Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Запрос.Текст = СтрШаблон("%1 И НЕ ЭтоГруппа", Запрос.Текст);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", ИмяСправочника);
	МассивЭлементов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, МассивЭлементов.Количество() - 1);
	
	Возврат МассивЭлементов[Индекс];
	
КонецФункции

// Определяет наличие элементов в справочнике с учетом РЛС.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника.
// 
// Возвращаемое значение:
//  Булево - 
//
Функция ЕстьДоступныеЭлементыСправочника(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.%ИмяСправочника%
		|ГДЕ
		|	ПометкаУдаления = ЛОЖЬ";
		
	Если Метаданные.Справочники[ИмяСправочника].Иерархический
		И Метаданные.Справочники[ИмяСправочника].ВидИерархии =
			Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Запрос.Текст = СтрШаблон("%1 И НЕ ЭтоГруппа", Запрос.Текст);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", ИмяСправочника);
	Возврат Запрос.Выполнить().Выбрать().Количество() > 0;
	
КонецФункции

// Возвращает случайно выбранные реквизиты внутреннего документа с учетом РЛС, для
// дальнейшего создания документа по этим рекизитам. Данная процедура гарантирует,
// что документ с подобранными реквизитами будет однозначно создан текущим пользователем.
// 
// Возвращаемое значение:
//  Структура - Структура реквизитов.
//
Функция ПолучитьСлучайныеРеквизитыВнутреннегоДокумента(ЗначенияОтбора = Неопределено) Экспорт
	
	Результат = Новый Структура("Папка, ВидДокумента, ГрифДоступа, ВопросДеятельности, Организация, Проект");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	ДДО.Папка КАК Папка,
		|	ДДО.ВидОбъекта КАК ВидДокумента,
		|	ДДО.ГрифДоступа,
		|	ДДО.ВопросДеятельности,
		|	ДДО.Организация,
		|	ДДО.Проект
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПДД
		|		ПО ДДО.Ссылка = ПДД.Дескриптор
		|ГДЕ
		|	ДДО.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
		|	И ПДД.Добавление = ИСТИНА
		|	И ПДД.Пользователь = &ТекущийПользователь";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВнутренниеДокументы));
	Если ТипЗнч(ЗначенияОтбора) = Тип("Структура") Тогда
		Если ЗначенияОтбора.Свойство("Папка") И ЗначениеЗаполнено(ЗначенияОтбора.Папка) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДДО.Папка = &Папка", Запрос.Текст);
			Запрос.УстановитьПараметр("Папка", ЗначенияОтбора.Папка);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВидДокумента") И ЗначениеЗаполнено(ЗначенияОтбора.ВидДокумента) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ВидОбъекта = &ВидДокумента", Запрос.Текст);
			Запрос.УстановитьПараметр("ВидДокумента", ЗначенияОтбора.ВидДокумента);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ГрифДоступа") И ЗначениеЗаполнено(ЗначенияОтбора.ГрифДоступа) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ГрифДоступа = &ГрифДоступа", Запрос.Текст);
			Запрос.УстановитьПараметр("ГрифДоступа", ЗначенияОтбора.ГрифДоступа);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВопросДеятельности") И ЗначениеЗаполнено(ЗначенияОтбора.ВопросДеятельности) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначенияОтбора.ВопросДеятельности);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияОтбора.Организация) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.Организация = &Организация", Запрос.Текст);
			Запрос.УстановитьПараметр("Организация", ЗначенияОтбора.Организация);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияОтбора.Проект) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.Проект = &Проект", Запрос.Текст);
			Запрос.УстановитьПараметр("Проект", ЗначенияОтбора.Проект);
		КонецЕсли;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, Выборка.Количество() - 1);
	
	Пока Выборка.Следующий() Цикл
		
		Индекс = Индекс - 1;
		Если Индекс > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Возврат Результат;
		
	КонецЦикла;
	
КонецФункции

// Возвращает случайно выбранный шаблон внутреннего документа с учетом значений отбора.
//
// Параметры:
//  ЗначенияОтбора - Структура - Значения отбора шаблона. По умолчанию не задан.
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныВнутреннихДокументов
//
Функция ПолучитьСлучайныйШаблонВнутреннегоДокумента(ЗначенияОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	Ссылка
		|ИЗ
		|	Справочник.ШаблоныВнутреннихДокументов
		|ГДЕ
		|	ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЭтоГруппа";
	Если ТипЗнч(ЗначенияОтбора) = Тип("Структура") Тогда
		Если ЗначенияОтбора.Свойство("Папка") И ЗначениеЗаполнено(ЗначенияОтбора.Папка) Тогда
			Запрос.Текст = СтрШаблон("%1 И Папка = &Папка", Запрос.Текст);
			Запрос.УстановитьПараметр("Папка", ЗначенияОтбора.Папка);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВидДокумента") И ЗначениеЗаполнено(ЗначенияОтбора.ВидДокумента) Тогда
			Запрос.Текст = СтрШаблон("%1 И ВидДокумента = &ВидДокумента", Запрос.Текст);
			Запрос.УстановитьПараметр("ВидДокумента", ЗначенияОтбора.ВидДокумента);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ГрифДоступа") И ЗначениеЗаполнено(ЗначенияОтбора.ГрифДоступа) Тогда
			Запрос.Текст = СтрШаблон("%1 И ГрифДоступа = &ГрифДоступа", Запрос.Текст);
			Запрос.УстановитьПараметр("ГрифДоступа", ЗначенияОтбора.ГрифДоступа);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВопросДеятельности") И ЗначениеЗаполнено(ЗначенияОтбора.ВопросДеятельности) Тогда
			Запрос.Текст = СтрШаблон("%1 И ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначенияОтбора.ВопросДеятельности);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияОтбора.Организация) Тогда
			Запрос.Текст = СтрШаблон("%1 И Организация = &Организация", Запрос.Текст);
			Запрос.УстановитьПараметр("Организация", ЗначенияОтбора.Организация);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияОтбора.Проект) Тогда
			Запрос.Текст = СтрШаблон("%1 И Проект = &Проект", Запрос.Текст);
			Запрос.УстановитьПараметр("Проект", ЗначенияОтбора.Проект);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат "Пустой";
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, Выборка.Количество() - 1);
	
	Пока Выборка.Следующий() Цикл
		Индекс = Индекс - 1;
		Если Индекс > 0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

// Возвращает случайно выбранные реквизиты входящего документа с учетом РЛС, для
// дальнейшего создания документа по этим рекизитам. Данная процедура гарантирует,
// что документ с подобранными реквизитами будет однозначно создан текущим пользователем.
// 
// Возвращаемое значение:
//  Структура - Структура реквизитов.
//
Функция ПолучитьСлучайныеРеквизитыВходящегоДокумента(ЗначенияОтбора = Неопределено) Экспорт
	
	Результат = Новый Структура("ВидДокумента, ГрифДоступа, ВопросДеятельности, Организация, Проект");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	ДДО.ВидОбъекта КАК ВидДокумента,
		|	ДДО.ГрифДоступа,
		|	ДДО.ВопросДеятельности,
		|	ДДО.Организация,
		|	ДДО.Проект
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПДД
		|		ПО ДДО.Ссылка = ПДД.Дескриптор
		|ГДЕ
		|	ДДО.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
		|	И ПДД.Добавление = ИСТИНА
		|	И ПДД.Пользователь = &ТекущийПользователь";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВходящиеДокументы));
	Если ТипЗнч(ЗначенияОтбора) = Тип("Структура") Тогда
		Если ЗначенияОтбора.Свойство("ВидДокумента") И ЗначениеЗаполнено(ЗначенияОтбора.ВидДокумента) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ВидОбъекта = &ВидДокумента", Запрос.Текст);
			Запрос.УстановитьПараметр("ВидДокумента", ЗначенияОтбора.ВидДокумента);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ГрифДоступа") И ЗначениеЗаполнено(ЗначенияОтбора.ГрифДоступа) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ГрифДоступа = &ГрифДоступа", Запрос.Текст);
			Запрос.УстановитьПараметр("ГрифДоступа", ЗначенияОтбора.ГрифДоступа);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВопросДеятельности") И ЗначениеЗаполнено(ЗначенияОтбора.ВопросДеятельности) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначенияОтбора.ВопросДеятельности);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияОтбора.Организация) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.Организация = &Организация", Запрос.Текст);
			Запрос.УстановитьПараметр("Организация", ЗначенияОтбора.Организация);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияОтбора.Проект) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.Проект = &Проект", Запрос.Текст);
			Запрос.УстановитьПараметр("Проект", ЗначенияОтбора.Проект);
		КонецЕсли;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, Выборка.Количество() - 1);
	
	Пока Выборка.Следующий() Цикл
		
		Индекс = Индекс - 1;
		Если Индекс > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Возврат Результат;
		
	КонецЦикла;
	
КонецФункции

// Возвращает случайно выбранный шаблон входящего документа с учетом значений отбора.
//
// Параметры:
//  ЗначенияОтбора - Структура - Значения отбора шаблона. По умолчанию не задан.
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныВходящихДокументов
//
Функция ПолучитьСлучайныйШаблонВходящегоДокумента(ЗначенияОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	Ссылка
		|ИЗ
		|	Справочник.ШаблоныВходящихДокументов
		|ГДЕ
		|	ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЭтоГруппа";
	Если ТипЗнч(ЗначенияОтбора) = Тип("Структура") Тогда
		Если ЗначенияОтбора.Свойство("ВидДокумента") И ЗначениеЗаполнено(ЗначенияОтбора.ВидДокумента) Тогда
			Запрос.Текст = СтрШаблон("%1 И ВидДокумента = &ВидДокумента", Запрос.Текст);
			Запрос.УстановитьПараметр("ВидДокумента", ЗначенияОтбора.ВидДокумента);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ГрифДоступа") И ЗначениеЗаполнено(ЗначенияОтбора.ГрифДоступа) Тогда
			Запрос.Текст = СтрШаблон("%1 И ГрифДоступа = &ГрифДоступа", Запрос.Текст);
			Запрос.УстановитьПараметр("ГрифДоступа", ЗначенияОтбора.ГрифДоступа);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВопросДеятельности") И ЗначениеЗаполнено(ЗначенияОтбора.ВопросДеятельности) Тогда
			Запрос.Текст = СтрШаблон("%1 И ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначенияОтбора.ВопросДеятельности);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияОтбора.Организация) Тогда
			Запрос.Текст = СтрШаблон("%1 И Организация = &Организация", Запрос.Текст);
			Запрос.УстановитьПараметр("Организация", ЗначенияОтбора.Организация);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияОтбора.Проект) Тогда
			Запрос.Текст = СтрШаблон("%1 И Проект = &Проект", Запрос.Текст);
			Запрос.УстановитьПараметр("Проект", ЗначенияОтбора.Проект);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат "Пустой";
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, Выборка.Количество() - 1);
	
	Пока Выборка.Следующий() Цикл
		Индекс = Индекс - 1;
		Если Индекс > 0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

// Возвращает случайно выбранные реквизиты исходящего документа с учетом РЛС, для
// дальнейшего создания документа по этим рекизитам. Данная процедура гарантирует,
// что документ с подобранными реквизитами будет однозначно создан текущим пользователем.
// 
// Возвращаемое значение:
//  Структура - Структура реквизитов.
//
Функция ПолучитьСлучайныеРеквизитыИсходящегоДокумента(ЗначенияОтбора = Неопределено) Экспорт
	
	Результат = Новый Структура("ВидДокумента, ГрифДоступа, ВопросДеятельности, Организация, Проект");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ДДО.ВидОбъекта КАК ВидДокумента,
		|	ДДО.ГрифДоступа,
		|	ДДО.ВопросДеятельности,
		|	ДДО.Организация,
		|	ДДО.Проект
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПДД
		|		ПО ДДО.Ссылка = ПДД.Дескриптор
		|ГДЕ
		|	ДДО.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
		|	И ПДД.Добавление = ИСТИНА
		|	И ПДД.Пользователь = &ТекущийПользователь";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ИсходящиеДокументы));
	Если ТипЗнч(ЗначенияОтбора) = Тип("Структура") Тогда
		Если ЗначенияОтбора.Свойство("ВидДокумента") И ЗначениеЗаполнено(ЗначенияОтбора.ВидДокумента) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ВидОбъекта = &ВидДокумента", Запрос.Текст);
			Запрос.УстановитьПараметр("ВидДокумента", ЗначенияОтбора.ВидДокумента);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ГрифДоступа") И ЗначениеЗаполнено(ЗначенияОтбора.ГрифДоступа) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ГрифДоступа = &ГрифДоступа", Запрос.Текст);
			Запрос.УстановитьПараметр("ГрифДоступа", ЗначенияОтбора.ГрифДоступа);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВопросДеятельности") И ЗначениеЗаполнено(ЗначенияОтбора.ВопросДеятельности) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначенияОтбора.ВопросДеятельности);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияОтбора.Организация) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.Организация = &Организация", Запрос.Текст);
			Запрос.УстановитьПараметр("Организация", ЗначенияОтбора.Организация);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияОтбора.Проект) Тогда
			Запрос.Текст = СтрШаблон("%1 И ДДО.Проект = &Проект", Запрос.Текст);
			Запрос.УстановитьПараметр("Проект", ЗначенияОтбора.Проект);
		КонецЕсли;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, Выборка.Количество() - 1);
	
	Пока Выборка.Следующий() Цикл
		
		Индекс = Индекс - 1;
		Если Индекс > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Возврат Результат;
		
	КонецЦикла;
	
КонецФункции

// Возвращает случайно выбранный шаблон исходящего документа с учетом значений отбора.
//
// Параметры:
//  ЗначенияОтбора - Структура - Значения отбора шаблона. По умолчанию не задан.
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныИсходящихДокументов
//
Функция ПолучитьСлучайныйШаблонИсходящегоДокумента(ЗначенияОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсходящихДокументов
		|ГДЕ
		|	ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЭтоГруппа";
	Если ТипЗнч(ЗначенияОтбора) = Тип("Структура") Тогда
		Если ЗначенияОтбора.Свойство("ВидДокумента") И ЗначениеЗаполнено(ЗначенияОтбора.ВидДокумента) Тогда
			Запрос.Текст = СтрШаблон("%1 И ВидДокумента = &ВидДокумента", Запрос.Текст);
			Запрос.УстановитьПараметр("ВидДокумента", ЗначенияОтбора.ВидДокумента);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ГрифДоступа") И ЗначениеЗаполнено(ЗначенияОтбора.ГрифДоступа) Тогда
			Запрос.Текст = СтрШаблон("%1 И ГрифДоступа = &ГрифДоступа", Запрос.Текст);
			Запрос.УстановитьПараметр("ГрифДоступа", ЗначенияОтбора.ГрифДоступа);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("ВопросДеятельности") И ЗначениеЗаполнено(ЗначенияОтбора.ВопросДеятельности) Тогда
			Запрос.Текст = СтрШаблон("%1 И ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначенияОтбора.ВопросДеятельности);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияОтбора.Организация) Тогда
			Запрос.Текст = СтрШаблон("%1 И Организация = &Организация", Запрос.Текст);
			Запрос.УстановитьПараметр("Организация", ЗначенияОтбора.Организация);
		КонецЕсли;
		Если ЗначенияОтбора.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияОтбора.Проект) Тогда
			Запрос.Текст = СтрШаблон("%1 И Проект = &Проект", Запрос.Текст);
			Запрос.УстановитьПараметр("Проект", ЗначенияОтбора.Проект);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат "Пустой";
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Индекс = ГСЧ.СлучайноеЧисло(0, Выборка.Количество() - 1);
	
	Пока Выборка.Следующий() Цикл
		Индекс = Индекс - 1;
		Если Индекс > 0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

// Возвращает случайно выбранный вид просмотра списка внутренних документов.
// В выборке участвуют только следующие значения:
//   - ПоКатегориям
//   - ПоПапкам
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПросмотраСпискаОбъектов - выбранный вид просмотра.
//
Функция ПолучитьСлучайныйВидПросмотраСпискаВнутреннихДокументов() Экспорт
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	СлучайныйВидПросмотра = ГСЧ.СлучайноеЧисло(1, 2);
	Если СлучайныйВидПросмотра = 1 Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям");
	Иначе
		Результат = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Синхронизует дополнительные сведения клонов пользователей.
// Используется только со встроенной подсистемой ТестЦентр.
// Данная процедура должна вызываться в общем модуле ТЦСервер в процедуре
// БСПДобавитьНеобходимыеПрава после вызова процедуры БСПСинхронизироватьГруппыПользователей.
//
// Параметры:
//  СозданныеПользователи - Массив - Список клонов.
//  Оригинал - СправочникСсылка.Пользователи - Ссылка на оригинального пользователя
//
Процедура СинхронизоватьДополнительныеСведения(СозданныеПользователи, Оригинал) Экспорт
	
	СинхронизоватьСведенияОПользователяхДокументооборот(СозданныеПользователи, Оригинал);
	СинхронизоватьДелегированиеПрав(СозданныеПользователи, Оригинал);
	СинхронизоватьНастройкиПравОбъектов(СозданныеПользователи, Оригинал);
	СинхронизоватьИсполнителейЗадач(СозданныеПользователи, Оригинал);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Синхронизует сведения между оригинальным пользователем и его клонами.
// Используется только со встроенной подсистемой ТестЦентр.
//
// Параметры:
//  СозданныеПользователи - Массив - Список клонов.
//  Оригинал - СправочникСсылка.Пользователи - Ссылка на оригинального пользователя
//
Процедура СинхронизоватьСведенияОПользователяхДокументооборот(СозданныеПользователи, Оригинал)
	
	СведенияПользователей = РегистрыСведений.СведенияОПользователяхДокументооборот.Получить(Новый Структура("Пользователь", Оригинал));
	Для Каждого СозданныйПользователь Из СозданныеПользователи Цикл
		НоваяЗапись = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьМенеджерЗаписи();
		НоваяЗапись.Пользователь = СозданныйПользователь;
		НоваяЗапись.Подразделение = СведенияПользователей.Подразделение;
		НоваяЗапись.Должность = СведенияПользователей.Должность;
		НоваяЗапись.ГрафикРаботы = СведенияПользователей.ГрафикРаботы;
		НоваяЗапись.Ранг = СведенияПользователей.Ранг;
		НоваяЗапись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Синхронизует делегирование прав между оригинальным пользователем и его клонами.
// Используется только со встроенной подсистемой ТестЦентр.
//
// Параметры:
//  СозданныеПользователи - Массив - Список клонов.
//  Оригинал - СправочникСсылка.Пользователи - Ссылка на оригинального пользователя
//
Процедура СинхронизоватьДелегированиеПрав(СозданныеПользователи, Оригинал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Ссылка
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	ДелегированиеПрав.Кому = &Кому
		|	И ДелегированиеПрав.ПометкаУдаления = ЛОЖЬ";
	Запрос.Параметры.Вставить("Кому", Оригинал);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДелегированиеПравОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СозданныйПользователь Из СозданныеПользователи Цикл
			Если ДелегированиеПравОбъект.Кому = СозданныйПользователь Тогда
				Продолжить;
			КонецЕсли;
			ДелегированиеПравНовыйОбъект = ДелегированиеПравОбъект.Скопировать();
			ДелегированиеПравНовыйОбъект.Кому = СозданныйПользователь;
			ДелегированиеПравНовыйОбъект.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Синхронизует настройки прав объектов между оригинальным пользователем и его клонами.
// Используется только со встроенной подсистемой ТестЦентр.
//
// Параметры:
//  СозданныеПользователи - Массив - Список клонов.
//  Оригинал - СправочникСсылка.Пользователи - Ссылка на оригинального пользователя
//
Процедура СинхронизоватьНастройкиПравОбъектов(СозданныеПользователи, Оригинал)
	
	Для Каждого СозданныйПользователь Из СозданныеПользователи Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПравОбъектов.Объект,
			|	НастройкиПравОбъектов.Пользователь,
			|	НастройкиПравОбъектов.Право,
			|	НастройкиПравОбъектов.ПравоЗапрещено,
			|	НастройкиПравОбъектов.НаследованиеРазрешено
			|ИЗ
			|	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
			|ГДЕ
			|	НастройкиПравОбъектов.Пользователь = &Пользователь";
		Запрос.Параметры.Вставить("Пользователь", Оригинал);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Пользователь = СозданныйПользователь;
			НоваяЗапись.Записать();
		КонецЦикла
	КонецЦикла;
	
КонецПроцедуры

// Синхронизует исполнителей задач между оригинальным пользователем и его клонами.
// Используется только со встроенной подсистемой ТестЦентр.
//
// Параметры:
//  СозданныеПользователи - Массив - Список клонов.
//  Оригинал - СправочникСсылка.Пользователи - Ссылка на оригинального пользователя
//
Процедура СинхронизоватьИсполнителейЗадач(СозданныеПользователи, Оригинал)
	
	Для Каждого СозданныйПользователь Из СозданныеПользователи Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя,
			|	ИсполнителиЗадач.Исполнитель
			|ИЗ
			|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			|	ИсполнителиЗадач.Исполнитель = &Пользователь";
		Запрос.Параметры.Вставить("Пользователь", Оригинал);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = РегистрыСведений.ИсполнителиЗадач.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Исполнитель = СозданныйПользователь;
			НоваяЗапись.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
