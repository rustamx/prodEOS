////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль МультипредметностьПереопределяемый: сервер, внешнее соединение
//
// Содержит переопределяемые процедуры и функции, обрабатываемые на сервере.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает пустую ссылку на процесс в зависимости от переданного параметра 
// Параметры:
//  ШаблонСсылка - ссылка на шаблон процесса
//
Функция ПолучитьСсылкуНаПроцессПоШаблону(Шаблон) Экспорт
	
	ПроцессСсылка = Неопределено;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Шаблон)) Тогда
		Ссылка = Шаблон;
	Иначе
		Ссылка = Шаблон.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		ПроцессСсылка = БизнесПроцессы.Исполнение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		ПроцессСсылка = БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		ПроцессСсылка = БизнесПроцессы.Ознакомление.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		ПроцессСсылка = БизнесПроцессы.Поручение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		ПроцессСсылка = БизнесПроцессы.Приглашение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		ПроцессСсылка = БизнесПроцессы.Рассмотрение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		ПроцессСсылка = БизнесПроцессы.Регистрация.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		ПроцессСсылка = БизнесПроцессы.Согласование.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		ПроцессСсылка = БизнесПроцессы.Утверждение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		
		Если Шаблон = Ссылка Тогда
			ТипШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипШаблона");
		Иначе
			ТипШаблона = Шаблон.ТипШаблона;
		КонецЕсли;
		
		Если ТипШаблона <> Неопределено Тогда
			Если ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
				ПроцессСсылка = БизнесПроцессы.ОбработкаВнутреннегоДокумента.ПустаяСсылка();
				
			ИначеЕсли ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
				ПроцессСсылка = БизнесПроцессы.ОбработкаВходящегоДокумента.ПустаяСсылка();
				
			ИначеЕсли ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
				ПроцессСсылка = БизнесПроцессы.ОбработкаИсходящегоДокумента.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПроцессСсылка;

	
КонецФункции

// Возвращает основной проект по предметам заполнения
//
Функция ПолучитьОсновнойПроектПоПредметам(Предметы) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предметы)) Тогда
		Предмет = Предметы;
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет)
		 Или ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет)
		 Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда 
			Возврат Предмет.Проект;
		КонецЕсли;
	Иначе
		ОсновныеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета",Перечисления.РолиПредметов.Основной));
		Если ОсновныеПредметы.Количество() > 0 Тогда
			Предмет = ОсновныеПредметы[0].Предмет;
			Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет)
			 Или ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет)
			 Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда 
				Возврат Предмет.Проект;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаПредмета Из Предметы Цикл
				Предмет = СтрокаПредмета.Предмет;
				Если ЗначениеЗаполнено(Предмет) 
				 И (ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет)
				 Или ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет)
				 Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет)) Тогда 
					Возврат Предмет.Проект;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Проекты.ПустаяСсылка();
	
КонецФункции

// Возвращает массив типов документов входящих и исходящих писем
//
Функция ПолучитьТипыПисем() Экспорт
	
	ТипыПисем = Новый Массив;
	ТипыПисем.Добавить(Тип("ДокументСсылка.ВходящееПисьмо"));
	ТипыПисем.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо"));
	
	Возврат ТипыПисем;
	
КонецФункции

// Возвращает вид БП Утверждение по предметам заполнения
//
Функция ПолучитьВидПроцессаБПУтверждение(Предметы) Экспорт

	ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Утверждение;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предметы)) Тогда
		Предмет = Предметы;
		Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Предмет)
			И ЗначениеЗаполнено(Предмет.ВидДокумента) Тогда
				ИспользоватьПодписание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет.ВидДокумента, "ИспользоватьПодписание");
				Если ИспользоватьПодписание Тогда
					ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание;
				КонецЕсли;
		КонецЕсли;
	Иначе
		ОсновныеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета",Перечисления.РолиПредметов.Основной));
		Если ОсновныеПредметы.Количество() > 0 Тогда
			Предмет = ОсновныеПредметы[0].Предмет;
			Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Предмет)
				И ЗначениеЗаполнено(Предмет.ВидДокумента) Тогда
					ИспользоватьПодписание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет.ВидДокумента, "ИспользоватьПодписание");
					Если ИспользоватьПодписание Тогда
						ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание;
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидПроцесса;
	
КонецФункции

// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 {
// Возвращает строковое представление предметов по-английски через запятую
// 
// Параметры
//	Предметы - табличная часть предметов задачи
//	Кавычки - признак установки предмета в кавычки
//	ЗаполнятьНеЗаданы - признак заполнения строки предметов словом "Не заданы" если предметы не установлены
//
Функция ПредметыСтрокойАнгл(Предметы, Кавычки = Ложь, ЗаполнятьНеЗаданы = Истина, ТолькоОсновные = Ложь) Экспорт
	
	СтрокаПредметов = "";
	
	СписокЗначений_Предметы = Новый СписокЗначений;
	Если ТипЗнч(Предметы) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива из Предметы Цикл 
			СписокЗначений_Предметы.Добавить(ЭлементМассива);	
		КонецЦикла;	
	Иначе 
		Для Каждого СтрокаПредмета Из Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				СписокЗначений_Предметы.Добавить(СтрокаПредмета.Предмет);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// запросом выберем метаданные 
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	ПервыйПроход = Истина;
	Для Каждого ИмяДокументаКачества из ра_ОбщегоНазначенияКлиентСервер.ДокументыКачества() Цикл 
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ВЫБРАТЬ " + ?(ПервыйПроход, " РАЗРЕШЕННЫЕ ", " ") + "
			|	ПРЕДСТАВЛЕНИЕ(ДокументЕОСК.ВидДокумента) КАК ВидДокумента,
			|	ДокументЕОСК.Номер КАК Номер,
			|	ДокументЕОСК.Дата КАК Дата
			|ИЗ
			|	Документ." + ИмяДокументаКачества + " КАК ДокументЕОСК
			|ГДЕ
			|	ДокументЕОСК.Ссылка В(&СписокДокументов)
			|
			|ОБЪЕДИНИТЬ ВСЕ";
			
		ПервыйПроход = Ложь;
				
	КонецЦикла;	
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-14);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СписокДокументов", СписокЗначений_Предметы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
	
		СтрокаПредметов = СтрокаПредметов + ?(ПустаяСтрока(СтрокаПредметов),"",", ") 
			+ ?(Кавычки,"""","") + Выборка.ВидДокумента + " " + Выборка.Номер + " from " + Формат(Выборка.Дата, "ДЛФ=DT") + ?(Кавычки,"""","");
		
	КонецЦикла;
	
	Если ПустаяСтрока(СтрокаПредметов) И ЗаполнятьНеЗаданы Тогда
		СтрокаПредметов = "Not specified";
	КонецЕсли;
	
	Возврат СтрокаПредметов;
	
КонецФункции
// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 30.07.2018 } 

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПроверкаПравНаПредметы

// Вызывается из Мультипредметность.ПредметыДляПроверкиПрав при определении
// предметов для проверка прав.
//
// Параметры:
//  Предметы - Массив - Предметы для проверки прав.
//  СсылкаНаПроцесс - БизнесПроцессСсылка - процесс, файлы которого исключаются из проверки.
//  Результат - Структура - в этот параметр, в качестве результата следует поместить 2 массива предметов.
//   * ДляПроверкиПравДоступаУчастников - Массив
//   * ДляПроверкиНарушенияПолитикиДоступа - Массив - предметы, по которым возможно автоматическое
//                                                    расширение рабочих групп.
//  СтандартнаяОбработка – Булево - в случае значения Истина параметры результат будет определен
//                                  способом по умолчанию.
//
Процедура ПриОпределенииПредметовДляПроверкиПрав(
	Предметы, СсылкаНаПроцесс, Результат, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ДляПроверкиПравДоступаУчастников", Новый Массив);
	Результат.Вставить("ДляПроверкиНарушенияПолитикиДоступа", Новый Массив);
	
	ДляПроверкиПравДоступаУчастников = Новый Массив;
	ДляПроверкиНарушенияПолитикиДоступа = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		
		Если Не ЗначениеЗаполнено(Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПредмета = ТипЗнч(Предмет);
		
		Если ТипПредмета = Тип("СправочникСсылка.Файлы") 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Предмет, "ВладелецФайла") = СсылкаНаПроцесс Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ТипПредмета = Тип("СправочникСсылка.СообщенияОбсуждений")
			Или ТипПредмета = Тип("СправочникСсылка.ТемыОбсуждений")
			Или ТипПредмета = Тип("СправочникСсылка.УведомленияПрограммы") Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если РаботаСРабочимиГруппами.
			ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Предмет) Тогда
			
			ДляПроверкиНарушенияПолитикиДоступа.Добавить(Предмет);
		Иначе
			ДляПроверкиПравДоступаУчастников.Добавить(Предмет);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ДляПроверкиПравДоступаУчастников = ДляПроверкиПравДоступаУчастников;
	Результат.ДляПроверкиНарушенияПолитикиДоступа = ДляПроверкиНарушенияПолитикиДоступа;
	
КонецПроцедуры

#КонецОбласти
