// Функция формирует таблицу значений с наименованиями элементов формы
// и их значениями по переданной структуре. Передаваемая структура
// должна содержать соответствия ключ - имя поля, значение - значение
// реквизита формы, связанное с этим полем.
//
Функция СформироватьТаблицуСохраняемыхЭлементов(знач СохраняемыеЭлементы) Экспорт
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	Для Каждого СохраняемыйЭлемент Из СохраняемыеЭлементы Цикл
		НоваяСтрока = СписокСохраняемыхПолей.Добавить();
		НоваяСтрока.ИмяПоляЭлемента = СохраняемыйЭлемент.Ключ;
		НоваяСтрока.ЗначениеРеквизита = СохраняемыйЭлемент.Значение;
	КонецЦикла;
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

// Обновляет информацию по истории выбора новым значением, а так же
// обновляет список выбора по всем элементам
//
// Параметры
// ЭтаФорма      - УправляемаяФорма - форма, на элементы которой, навешивается механизм
// ЭлементыСЗначениями - специально сформированная таблица значений
//                 содержащая сведения с именами элементов и их текущими значениями
// ДополнительнаяИдентификация - строка - дополнительная идентификация, необходимая
//                 для поддержки уникальности адресации элементов\
//
Процедура ОбновитьСпискиВыбора(знач ЭтаФорма,
                               знач СохраняемыеЭлементы,
                               знач ДополнительнаяИдентификация = "") Экспорт
	
	Префикс = ?(ЗначениеЗаполнено(ДополнительнаяИдентификация), ДополнительнаяИдентификация + ".", "");
	
	Для Каждого ЭлементТаблицы Из СохраняемыеЭлементы Цикл
		Если ЗначениеЗаполнено(ЭлементТаблицы.ЗначениеРеквизита) Тогда
			ДобавитьЗначениеВИсториюВвода(
			              Префикс+ЭлементТаблицы.ИмяПоляЭлемента,
			              ЭлементТаблицы.ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокВыбора(ЭтаФорма, СохраняемыеЭлементы, ДополнительнаяИдентификация);
	
КонецПроцедуры

// Заполняет списки выбора элементов форм считывая сохраненные 
// 
// Параметры
// ЭтаФорма      - УправляемаяФорма - форма, на элементы которой, навешивается механизм
// ЭлементыСЗначениями - специально сформированная таблица значений
//                 содержащая сведения с именами элементов и их текущими значениями
// ДополнительнаяИдентификация - строка - дополнительная идентификация, необходимая
//                 для поддержки уникальности адресации элементов\
//
Процедура ЗаполнитьСписокВыбора(ЭтаФорма,
                                знач ЭлементыСЗначениями,
                                знач ДополнительнаяИдентификация = "") Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	
	Префикс = ?(ЗначениеЗаполнено(ДополнительнаяИдентификация), ДополнительнаяИдентификация + ".", "");
	
	Для Каждого ЭлементТЗ Из ЭлементыСЗначениями Цикл
		НаименованиеЭлементаФормы = ЭлементТЗ.ИмяПоляЭлемента;
		
		Если ЗначениеЗаполнено(НаименованиеЭлементаФормы) Тогда
			СписокИсторииВвода = ПолучитьСписокЗначенийИсторииВвода(Префикс+ЭлементТЗ.ИмяПоляЭлемента);
			
			Если СписокИсторииВвода <> Неопределено Тогда
				СписокВыбора = Элементы.Найти(НаименованиеЭлементаФормы).СписокВыбора;
				
				Если СписокИсторииВвода.Количество() > 0 Тогда 
					Элементы.Найти(НаименованиеЭлементаФормы).КнопкаВыпадающегоСписка = Истина;
				КонецЕсли;
				
				СписокВыбора.Очистить();
				Для Каждого ЭлементСпискаИсторииВыбора Из СписокИсторииВвода Цикл
					НовыйЭлемент = СписокВыбора.Добавить();
					НовыйЭлемент.Значение = ЭлементСпискаИсторииВыбора.Значение;
				КонецЦикла;
			КонецЕсли; // СписокИсторииВвода <> Неопределено
		КонецЕсли; // ЗначениеЗаполнено(НаименованиеЭлементаФормы)
	КонецЦикла; // Для Каждого ЭлементТЗ Из ЭлементыСЗначениями Цикл
	
КонецПроцедуры

// Добавляет значение для истории ввода по идентификатору в конец списка
// Если запись уже существует - она переносится в конец
// Если записей больше чем 15 то первая запись удаляется
//
// Параметры:
// Идентификатор - Строка - идентификатор по которому будет вестись история ввода
// Значение      - значение добавляемое к истории
//
Процедура ДобавитьЗначениеВИсториюВвода(Идентификатор, Значение)
	
	МассивВведенныхЗначений = ПолучитьНастройкуСистемногоХранилища(Идентификатор,"МеханизмСохраненияПоследнихВыбранныхЗначений");
	
	Если МассивВведенныхЗначений = Неопределено Тогда
		МассивВведенныхЗначений = Новый Массив;
	КонецЕсли;
	
	Для Индекс = 0 по МассивВведенныхЗначений.ВГраница() Цикл
		Если МассивВведенныхЗначений.Получить(Индекс) = Значение Тогда
			МассивВведенныхЗначений.Удалить(Индекс);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МассивВведенныхЗначений.Вставить(0, Значение);
	
	Пока МассивВведенныхЗначений.Количество() > 15 Цикл
		МассивВведенныхЗначений.Удалить(МассивВведенныхЗначений.ВГраница());
	КонецЦикла;
	
	СохранитьНастройкуСистемногоХранилища(Идентификатор, МассивВведенныхЗначений, "МеханизмСохраненияПоследнихВыбранныхЗначений");
	
КонецПроцедуры

// Возвращает список ранее введенных значений. В качестве ссылки на пользователя
// берется значение ПараметрСеанса.ТекущийПользователь
// 
// Параметры:
// Идентификатор - Строка - идентификатор элемента, по которому необходимо вернуть
//                 список вводимых значений
// Возвращаемое значение:
// СписокЗначений - список из значений истории ввода
//
Функция ПолучитьСписокЗначенийИсторииВвода(Идентификатор)
	
	МассивВведенныхЗначений = ПолучитьНастройкуСистемногоХранилища(Идентификатор,"МеханизмСохраненияПоследнихВыбранныхЗначений");
	Если МассивВведенныхЗначений = Неопределено Тогда
		МассивВведенныхЗначений = Новый Массив;
	КонецЕсли;
	
	Если МассивВведенныхЗначений.Количество() > 0 Тогда 
		ТекстЗапроса = "";
		ИменаТаблиц = Новый Массив;
		Для Каждого Значение Из МассивВведенныхЗначений Цикл
			Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение) Тогда 
				Продолжить;
			КонецЕсли;	
				
			ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Значение);
			Если ИменаТаблиц.Найти(ИмяТаблицы) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			ТекстЗапроса = ТекстЗапроса +
				?(ТекстЗапроса = "", "", " ОБЪЕДИНИТЬ ВСЕ ")
				+ "ВЫБРАТЬ Ссылка ИЗ " + ИмяТаблицы + " ГДЕ Не ПометкаУдаления И Ссылка В (&Ссылки) "
				+ ?(ИмяТаблицы = "Справочник.Пользователи", " И Не Недействителен ", "");	
					
			ИменаТаблиц.Добавить(ИмяТаблицы);
		КонецЦикла;
		
		Если ТекстЗапроса <> "" Тогда 
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(ТекстЗапроса, СтрДлина("ВЫБРАТЬ ") + 1);
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылки", МассивВведенныхЗначений); 
			Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			КодичествоЭлементов = МассивВведенныхЗначений.Количество();
			Для Инд = 1 По КодичествоЭлементов Цикл
				Значение = МассивВведенныхЗначений[КодичествоЭлементов - Инд]; 
				Если Результат.Найти(Значение) = Неопределено Тогда 
					МассивВведенныхЗначений.Удалить(КодичествоЭлементов - Инд);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокИстории = Новый СписокЗначений;
	СписокИстории.ЗагрузитьЗначения(МассивВведенныхЗначений);
	Возврат СписокИстории;
	
КонецФункции

// Сохраняет настройку в системное хранилище
//
Функция СохранитьНастройкуСистемногоХранилища(знач КлючОбъекта,
                                              знач Настройка,
                                              знач КлючНастроек = Неопределено,
                                              знач ОписаниеНастроек = Неопределено,
                                              знач ИдентификаторПользователя = Неопределено) Экспорт
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройка, ОписаниеНастроек, ИдентификаторПользователя);
	
КонецФункции

// Получает настройку из системного хранилища
//
Функция ПолучитьНастройкуСистемногоХранилища(знач КлючОбъекта,
                                             знач КлючНастроек = Неопределено,
                                             знач ОписаниеНастроек = Неопределено,
                                             знач ИдентификаторПользователя = Неопределено) Экспорт
											 
	Результат = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИдентификаторПользователя);
	
	Возврат Результат;
	
КонецФункции


// Загружает список выбора элемента формы из хранилища системных настроек
//
Процедура ЗагрузитьСписокВыбора(Форма, ИмяСписка) Экспорт
	
	СписокВыбора = ХранилищеСистемныхНастроек.Загрузить(Форма.ИмяФормы, ИмяСписка);
	
	Если ТипЗнч(СписокВыбора) = Тип("СписокЗначений") Тогда
		Форма.Элементы[ИмяСписка].СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	Форма.Элементы[ИмяСписка].КнопкаВыпадающегоСписка = (Форма.Элементы[ИмяСписка].СписокВыбора.Количество() > 0);
	
КонецПроцедуры

// Созраняет список выбора элемента формы в хранилище системных настроек
//
Процедура СохранитьСписокВыбора(ИмяФормы, ИмяСписка, СписокВыбора) Экспорт
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, ИмяСписка, СписокВыбора);
	
КонецПроцедуры



