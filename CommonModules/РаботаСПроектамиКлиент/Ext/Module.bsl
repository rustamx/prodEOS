
// Открывает форму выбора проекта \ проектной задачи
Функция ВыбратьПроектЗадачу(Элемент, Проект, ПроектнаяЗадача) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Проект);
	ПараметрыФормы.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы, Элемент);
	
КонецФункции	

//Формирует список раскрытых элементов дерева задач
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			МассивСтрокОдногоУровня - массив задач одного уровня
//			СписокРаскрытыхЗадач - список, который содержит раскрытые элементы дерева задач
Процедура ПолучитьМассивРаскрытыхЗадач(ДеревоЭлемент, МассивСтрокОдногоУровня, СписокРаскрытыхЗадач) Экспорт
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		ИдЗадачи = СтрокаОдногоУровня.ПолучитьИдентификатор();
		Если ДеревоЭлемент.Развернут(ИдЗадачи) <> Неопределено 
			И ДеревоЭлемент.Развернут(ИдЗадачи) Тогда
			СписокРаскрытыхЗадач.Добавить(СтрокаОдногоУровня.Ссылка);
		КонецЕсли;
		ПолучитьМассивРаскрытыхЗадач(ДеревоЭлемент, СтрокаОдногоУровня.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	КонецЦикла;
	
КонецПроцедуры

//Раскрывает указанные элементы дерева
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево задач
//			СписокЗадачДляРазвертывания - список задач, которые необходимо развернуть в дереве
Процедура УстановитьРазвернутостьЭлементовДерева(ДеревоЭлемент, ДеревоРеквизит, СписокЗадачДляРазвертывания) Экспорт
	
	Если СписокЗадачДляРазвертывания <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокЗадачДляРазвертывания Цикл
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ЭлементСписка.Значение, Индекс);
			Если Индекс > -1 Тогда
				Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Количество() > 0 Тогда
					ДеревоЭлемент.Развернуть(ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьИдентификатор(), Ложь);
				Иначе
					Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя() <> Неопределено Тогда
						ДеревоЭлемент.Развернуть(ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в дереве текущую строку
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево задач
//			ТекущаяЗадача - задача, которую необходимо выделить в дереве 
Процедура УстановитьТекущуюЗадачуВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущаяЗадача) Экспорт
	
	Если ТекущаяЗадача <> Неопределено И
		НЕ ТекущаяЗадача.Пустая() Тогда
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущаяЗадача, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в дереве выделенную строку
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево задач
//			ТекущаяЗадача - задача, которую необходимо выделить в дереве 
Процедура УстановитьВыделеннуюЗадачуВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущаяЗадача) Экспорт
	
	Если ТекущаяЗадача <> Неопределено И
		НЕ ТекущаяЗадача.Пустая() Тогда
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущаяЗадача, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ВыделенныеСтроки.Добавить(Индекс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки перед стартом бизнес-процесса по проекту
Процедура ПередСтартомБизнесПроцесса(Объект, Отказ, ПараметрыЗаписи, ИдентификаторФормыПроцесса) Экспорт 
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда 
		Возврат;
	КонецЕсли;
		
	МассивОшибок = Новый Массив; ЕстьПравоЗапуска = Истина;
	РаботаСПроектами.ПроверитьВозможностьСтартаБизнесПроцесса(Объект, МассивОшибок, ЕстьПравоЗапуска);
	
	Если МассивОшибок.Количество() > 0 Тогда
		Отказ = Истина;
		
		Если ЕстьПравоЗапуска Тогда 
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			ПараметрыОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
			ПараметрыОповещения.Вставить("МассивОшибок", МассивОшибок);
			ЗадатьВопросПоОшибкеИзМассиваПередСтартомБизнесПроцесс(
				КодВозвратаДиалога.Да, ПараметрыОповещения);
		Иначе 
			ПоказатьПредупреждение(, МассивОшибок[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВопросПоОшибкеИзМассиваПередСтартомБизнесПроцесс(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивОшибок = Параметры.МассивОшибок;
	ПараметрыЗаписи = Параметры.ПараметрыЗаписи;
	ИдентификаторФормыПроцесса = Параметры.ИдентификаторФормыПроцесса;
	
	Если МассивОшибок.Количество() = 0 Тогда
		ПараметрыЗаписи.Вставить("СтартоватьПриОшибкахВПроектах", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписи);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = МассивОшибок[0];
	МассивОшибок.Удалить(0);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ПараметрыОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
	ПараметрыОповещения.Вставить("МассивОшибок", МассивОшибок);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадатьВопросПоОшибкеИзМассиваПередСтартомБизнесПроцесс", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("ru = 'Запуск процесса'; en = 'Process start'"));
	
КонецПроцедуры

// Выполняет проверку корректности срока исполнения в бизнес-процессе
Процедура ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
	ПроектнаяЗадача, СрокПроцесса, Отказ, ПараметрыЗаписи, ИдентификаторФормыПроцесса) Экспорт
	
	ЗадатьВопрос = Ложь;
	ПлановаяДатаОкончания = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача).ТекущийПланОкончание;
	Если ЗначениеЗаполнено(ПлановаяДатаОкончания) Тогда
		ЗадатьВопрос = СрокПроцесса > ПлановаяДатаОкончания;
		Если ЗадатьВопрос Тогда
			ТекстВопроса = НСтр("ru = 'Срок исполнения процесса превышает плановую дату окончания проектной задачи. Продолжить?'; en = 'Process due date exceeds the planned finish date of the project. Continue?'");
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			ПараметрыОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачиПродолжение", ЭтотОбъект, ПараметрыОповещения);
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Нет, НСтр("ru = 'Запуск процесса'; en = 'Process start'"));
				
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачиПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры.ПараметрыЗаписи.Вставить("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи", Истина);
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
	ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписи);
	Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	
КонецПроцедуры

// Меняет папку для массива проектов на новую.
//
// Параметры:
//  МассивПроектов - Массив - Проекты, у которых необходимо изменить папку.
//  НоваяПапка - СправочникСсылка.ПапкиПроектов - Новая папка проектов.
//
Процедура ИзменитьПапкуПроектов(МассивПроектов, НоваяПапка) Экспорт
	
	// Не указана новая папка
	Если Не ЗначениеЗаполнено(НоваяПапка) Тогда
		Возврат;
	КонецЕсли;
	
	// Нет элементов в массиве
	Если МассивПроектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСПроектами.ИзменитьПапкуПроектов(МассивПроектов, НоваяПапка) Тогда
		
		Если МассивПроектов.Количество() = 1 Тогда
			
			ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проект ""%1"" перенесен в папку ""%2""'; en = 'Project ""%1"" moved to the folder ""%2""'"), МассивПроектов[0], НоваяПапка);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Проект перенесен.'; en = 'Project moved.'"),
				ПолучитьНавигационнуюСсылку(МассивПроектов[0]),
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
			
		Иначе
			
			ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проекты (%1 шт.) перенесены в папку ""%2""'; en = 'Projects (%1 pcs.) moved to folder ""%2""'"), МассивПроектов.Количество(), НоваяПапка);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Проекты перенесены.'; en = 'Projects moved.'"),
				,
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.Проекты"));
		
	КонецЕсли;
	
КонецПроцедуры


