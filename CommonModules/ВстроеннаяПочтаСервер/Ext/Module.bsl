/////////////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ ПОЛУЧЕНИЕ И ОТПРАВКА ПИСЕМ

// Обработчик регламентного задания "Получение и отправка писем".
//
Процедура ПолучениеИОтправкаПисем() Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПолучитьИОтправитьПисьма();
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяМетода", "ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма");
		Отбор.Вставить("Ключ", "ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма");
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Если МассивФоновыхЗаданий.Количество() = 0 Тогда
			Попытка
				ФоновыеЗадания.Выполнить("ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма",,
					"ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма", // Ключ
					НСтр("ru = 'Получение и отправка писем'; en = 'Sending and receiving emails'")); // Наименование
			Исключение
				// Иногда фоновое задание успевает запуститься после проверки.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет процедуру отправки и получения писем.
//
Функция ПолучитьИОтправитьПисьма() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияОбОшибках = Новый Массив;
	
	ВремяНачала = ТекущаяДата();
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
		
	ОтправитьВсеПисьма(ТекущаяДата(), СообщенияОбОшибках, ПараметрыЛогирования);
	
	ПолучитьВсеПисьма(СообщенияОбОшибках, ПараметрыЛогирования);
	
	ВремяОкончания = ТекущаяДата();
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Длительность сеанса: %1 сек.'; en = 'The duration of the session: %1 sec.'"),
		ВремяОкончания - ВремяНачала);
	
	ЗаписатьПротоколДоставкиПочты(
		Неопределено,
		ТекстЛога,
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.ЗавершениеСеансаПриемкиОтправкиПисем,
		Неопределено,
		ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса);
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Получает письма всех учетных записей, с установленным признаком
// использования для встроенной почты и ИспользоватьДляПолучения.
//
Процедура ПолучитьВсеПисьма(СообщенияОбОшибках, ПараметрыЛогирования, МассивУчетныхЗаписей = Неопределено)
	
	УчетныеЗаписи = Новый Массив;
	
	Если МассивУчетныхЗаписей <> Неопределено Тогда
		УчетныеЗаписи = МассивУчетныхЗаписей;
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИспользоватьДляПолучения", Истина);
		ПараметрыОтбора.Вставить("ВариантИспользования", Перечисления.ВариантыИспользованияПочты.Встроенная);
		УчетныеЗаписи = Почта.ПолучитьУчетныеЗаписиЭлектроннойПочты(ПараметрыОтбора);
	КонецЕсли;		
	
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		
		СообщениеОбОшибке = "";
		Соединение = Почта.ИнтернетПочтаУстановитьСоединение(УчетнаяЗапись,, СообщениеОбОшибке);
		Если Соединение = Неопределено Тогда
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Учетная запись: %1
					|Ошибка при попытке подключения к почтовому ящику:
					|%2';
					|en = 'Account:%1 
					|Error when attempting to connect to mailbox: 
					|%2'"),
				УчетнаяЗапись,
				СообщениеОбОшибке);
			
			ЗаписатьОшибкуДоставки(СообщениеОбОшибке, Неопределено, УчетнаяЗапись, ПараметрыЛогирования,
				Неопределено, Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
			
			СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Ложь, // ОперацияУспешноЗавершена
				СообщениеОбОшибке); // Комментарий
			
			Продолжить;
			
		Иначе
			
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Истина, // ОперацияУспешноЗавершена
				""); // Комментарий
			
		КонецЕсли;
		
		ПолучитьПисьмаУчетнойЗаписи(Соединение, УчетнаяЗапись, СообщенияОбОшибках, ПараметрыЛогирования);
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПисьмаУчетнойЗаписи(Соединение, УчетнаяЗапись, СообщенияОбОшибках, ПараметрыЛогирования)
	
	ЗаписатьПротоколДоставкиПочты(Неопределено, "", 
		Ложь, 
		Перечисления.ТипыСобытийДоставкиПочты.НачалоПолученияИдентификаторовВходящихСообщений,
		УчетнаяЗапись, ПараметрыЛогирования.ПорядковыйНомерСобытия, 
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
		
	ПротоколВходящейПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, 
		"ПротоколВходящейПочты");

	ПараметрыОтбора = Неопределено;
	Если ПротоколВходящейПочты = "IMAP" Тогда
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ПослеДатыОтправления", ТекущаяДата() - 7 * 86400);
		ПараметрыОтбора.Вставить("Удаленные", Ложь);
		
	КонецЕсли;	
		
	// Получение идентификаторов всех сообщений в почтовом ящике
	СообщениеОбОшибке = "";
	
	Идентификаторы = Почта.ПолучитьИдентификаторыВходящихСообщений(
		Соединение,,ПараметрыОтбора, СообщениеОбОшибке);
		
	Если Идентификаторы = Неопределено И ПротоколВходящейПочты = "IMAP" Тогда
		
		ПараметрыОтбора.Удалить("ПослеДатыОтправления");
		
		Идентификаторы = Почта.ПолучитьИдентификаторыВходящихСообщений(
			Соединение,,ПараметрыОтбора, СообщениеОбОшибке);
			
	КонецЕсли;	
		
	Если Идентификаторы = Неопределено Тогда
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Учетная запись: %1
				|Ошибка при попытке получения идентификаторов писем в почтовом ящике:
				|%2';
				|en = 'Account: %1
				|An error occurred while trying to retrieve the IDs of emails in mailbox: 
				|%2'"),
			УчетнаяЗапись,
			СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			Неопределено,
			УчетнаяЗапись,
			ПараметрыЛогирования,
			Неопределено,
			Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
			УчетнаяЗапись,
			Перечисления.ОперацииСУчетнойЗаписью.ПолучениеПисем,
			ТекущаяДата(),
			Ложь, // ОперацияУспешноЗавершена
			СообщениеОбОшибке); // Комментарий
			
		ЗаписатьОбработаннуюУчетнуюЗапись(УчетнаяЗапись);		
		
		Возврат;
		
	КонецЕсли;
	
	РезультатРазбораИдентификаторов = РегистрыСведений.ИдентификаторыПолученныхПисем.РазобратьИдентификаторы(
		УчетнаяЗапись,
		Идентификаторы);
	
	// Удаление записей из регистра сведений ИдентификаторыПолученныхПисем
	Если РезультатРазбораИдентификаторов.УдалитьВРегистре.Количество() > 0 Тогда
		РегистрыСведений.ИдентификаторыПолученныхПисем.УдалитьЗаписи(
			УчетнаяЗапись,
			РезультатРазбораИдентификаторов.УдалитьВРегистре);
	КонецЕсли;
	
	// Получение новых писем
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Количество получаемых писем: %1'; en = 'Number of received email: %1'"),
		РезультатРазбораИдентификаторов.Загрузить.Количество());
	
	ПолученоПисем = 0;
	НеПолученоПисем = 0;
	НеЗаписаноПисем = 0;
	СообщенияОбОшибкахПриПолучении = "";
	Если РезультатРазбораИдентификаторов.Загрузить.Количество() > 0 Тогда
		ПараметрыЗагрузки = Почта.СформироватьСтруктуруПараметровЗагрузки();
		ПараметрыЗагрузки.Идентификаторы = РезультатРазбораИдентификаторов.Загрузить;
		
		// Попытка получить все сообщения сразу
		СообщениеОбОшибке = "";
		Сообщения = Почта.ПолучитьВходящиеСообщения(Соединение, ПараметрыЗагрузки, СообщениеОбОшибке, ПротоколВходящейПочты);
		Если ЗначениеЗаполнено(Сообщения) Тогда
			
			ЗаписатьПротоколДоставкиПочты(
				Неопределено,
				"",
				Ложь,
				Перечисления.ТипыСобытийДоставкиПочты.УспешноеПолучениеВходящихСообщений,
				УчетнаяЗапись, ПараметрыЛогирования.ПорядковыйНомерСобытия,
				ПараметрыЛогирования.ИдентификаторСеанса,
				ПараметрыЛогирования.НомерЗадания);
			
			Для каждого Сообщение Из Сообщения Цикл
				
				СообщениеОбОшибке = "";
				НеЗаписыватьКакОшибку = Ложь;
				ПисьмоСсылка = ЗаписатьВходящееПисьмо(Сообщение, УчетнаяЗапись, СообщениеОбОшибке, НеЗаписыватьКакОшибку);
				Если Не ЗначениеЗаполнено(ПисьмоСсылка) Тогда
					
			       СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			        НСтр("ru = 'Учетная запись: %1
			         |Ошибка при попытке записи входящего письма:
			         |%2
				     |Письмо:  
				     |Тема: ""%3"" 
				     |Дата: %4  
				     |От кого: %5 %6  
				     |Размер: %7';
				     |en = 'Account: %1 
				     |Error trying to save incoming mail: 
				     |%2 
				     |Email: 
				     |Subject: ""%3"" 
				     |Date: %4 
				     |From: %5 %6 
				     |Size %7'"), 
			         УчетнаяЗапись,
			         СообщениеОбОшибке,
					 Сообщение.Тема, 
					 Строка(Сообщение.ДатаПолучения), 
					 Строка(Сообщение.Отправитель.ОтображаемоеИмя),
					 Строка(Сообщение.Отправитель.Адрес), 
					 Строка(Сообщение.Размер));
					 
					Если НеЗаписыватьКакОшибку = Ложь Тогда
					 
						ЗаписатьОшибкуДоставки(
							СообщениеОбОшибке,
							Неопределено,
							УчетнаяЗапись,
							ПараметрыЛогирования,
							Неопределено,
							Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
						
						СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
						
						ДобавитьЗначениеКСтрокеЧерезРазделитель(
							СообщенияОбОшибкахПриПолучении,
							Символы.ПС,
							СообщениеОбОшибке);
							
					Иначе
						
						ЗаписатьПротоколДоставкиПочты(
							Неопределено,
							СообщениеОбОшибке,
							Ложь, // ЭтоОшибка
							Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма,
							УчетнаяЗапись, 
							ПараметрыЛогирования.ПорядковыйНомерСобытия,
							ПараметрыЛогирования.ИдентификаторСеанса,
							ПараметрыЛогирования.НомерЗадания);
						
					КонецЕсли;
							
					НеЗаписаноПисем = НеЗаписаноПисем + 1;
					
				Иначе
					
					ПолученоПисем = ПолученоПисем + 1;
					
					ЗаписатьПротоколДоставкиПочты(
						ПисьмоСсылка,
						"",
						Ложь,
						Перечисления.ТипыСобытийДоставкиПочты.УспешноеПолучениеПисьма,
						УчетнаяЗапись,
						ПараметрыЛогирования.ПорядковыйНомерСобытия,
						ПараметрыЛогирования.ИдентификаторСеанса,
						ПараметрыЛогирования.НомерЗадания);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Учетная запись: %1
					|Ошибка при попытке получения входящих сообщений:
					|%2';
					|en = 'Account: %1
					|An error occurred while trying to retrieve incoming messages: 
					|%2'"),
				УчетнаяЗапись,
				СообщениеОбОшибке);
			
			ЗаписатьОшибкуДоставки(
				СообщениеОбОшибке,
				Неопределено,
				УчетнаяЗапись,
				ПараметрыЛогирования,
				Неопределено,
				Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
			
			// Попытка получить все сообщения по отдельности
			Для каждого Идентификатор Из РезультатРазбораИдентификаторов.Загрузить Цикл
				МассивИдентификаторов = Новый Массив;
				МассивИдентификаторов.Добавить(Идентификатор);
				ПараметрыЗагрузки = Почта.СформироватьСтруктуруПараметровЗагрузки();
				ПараметрыЗагрузки.Идентификаторы = МассивИдентификаторов;
				
				СообщениеОбОшибке = "";
				Сообщения = Почта.ПолучитьВходящиеСообщения(Соединение, ПараметрыЗагрузки, СообщениеОбОшибке, ПротоколВходящейПочты);
				Если ЗначениеЗаполнено(Сообщения) Тогда
					
					ЗаписатьПротоколДоставкиПочты(
						Неопределено,
						"",
						Ложь,
						Перечисления.ТипыСобытийДоставкиПочты.УспешноеПолучениеВходящихСообщений,
						УчетнаяЗапись,
						ПараметрыЛогирования.ПорядковыйНомерСобытия,
						ПараметрыЛогирования.ИдентификаторСеанса,
						ПараметрыЛогирования.НомерЗадания);
					
					Для каждого Сообщение Из Сообщения Цикл
						
						СообщениеОбОшибке = "";
						НеЗаписыватьКакОшибку = Ложь;
						ПисьмоСсылка = ЗаписатьВходящееПисьмо(Сообщение, УчетнаяЗапись, СообщениеОбОшибке, НеЗаписыватьКакОшибку);
						Если Не ЗначениеЗаполнено(ПисьмоСсылка) Тогда
							
					       СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					        НСтр("ru = 'Учетная запись: %1
					         |Ошибка при попытке записи входящего письма:
					         |%2
						     |Письмо:  
						     |Тема: ""%3"" 
						     |Дата: %4  
						     |От кого: %5 %6  
						     |Размер: %7';
						     |en = 'Account: %1 
						     |Error trying to save incoming mail: 
						     |%2 
						     |Email: 
						     |Subject: ""%3"" 
						     |Date: %4 
						     |From: %5 %6 
						     |Size %7'"), 
					         УчетнаяЗапись,
					         СообщениеОбОшибке,
							 Сообщение.Тема, 
							 Строка(Сообщение.ДатаПолучения), 
							 Строка(Сообщение.Отправитель.ОтображаемоеИмя),
							 Строка(Сообщение.Отправитель.Адрес), 
							 Строка(Сообщение.Размер));
							 
							Если НеЗаписыватьКакОшибку = Ложь Тогда 
							
								ЗаписатьОшибкуДоставки(
									СообщениеОбОшибке,
									Неопределено,
									УчетнаяЗапись,
									ПараметрыЛогирования,
									Неопределено,
									Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
								
								СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
								
								ДобавитьЗначениеКСтрокеЧерезРазделитель(
									СообщенияОбОшибкахПриПолучении,
									Символы.ПС,
									СообщениеОбОшибке);
									
							Иначе
								
								ЗаписатьПротоколДоставкиПочты(
									Неопределено,
									СообщениеОбОшибке,
									Ложь, // ЭтоОшибка
									Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма,
									УчетнаяЗапись, 
									ПараметрыЛогирования.ПорядковыйНомерСобытия,
									ПараметрыЛогирования.ИдентификаторСеанса,
									ПараметрыЛогирования.НомерЗадания);
								
							КонецЕсли;
									
							НеЗаписаноПисем = НеЗаписаноПисем + 1;
							
						Иначе
							
							ПолученоПисем = ПолученоПисем + 1;
							
							ЗаписатьПротоколДоставкиПочты(
								ПисьмоСсылка,
								"",
								Ложь,
								Перечисления.ТипыСобытийДоставкиПочты.УспешноеПолучениеПисьма,
								УчетнаяЗапись,
								ПараметрыЛогирования.ПорядковыйНомерСобытия,
								ПараметрыЛогирования.ИдентификаторСеанса,
								ПараметрыЛогирования.НомерЗадания);
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе // Ошибка получения сообщения
					
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Учетная запись: %1
							|Ошибка при попытке получения входящего сообщения:
							|%2';
							|en = 'Account: %1: 
							|An error occurred while trying to retrieve the incoming message: 
							|%2'"),
						УчетнаяЗапись,
						СообщениеОбОшибке);
					
					ЗаписатьОшибкуДоставки(
						СообщениеОбОшибке,
						Неопределено,
						УчетнаяЗапись,
						ПараметрыЛогирования,
						Неопределено,
						Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
					
					СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
					
					ДобавитьЗначениеКСтрокеЧерезРазделитель(
						СообщенияОбОшибкахПриПолучении,
						Символы.ПС,
						СообщениеОбОшибке);
					
					РегистрыСведений.НеПолученныеВходящиеПисьма.НеуспешнаяПопыткаПолучения(УчетнаяЗапись, Идентификатор);
					
					НеПолученоПисем = НеПолученоПисем + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='Получено писем: %1'; en = 'Emails received: %1'"),
		ПолученоПисем);
	Если НеПолученоПисем > 0 Тогда
		Комментарий = Комментарий + Символы.ПС +
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Не получено писем: %1'; en = 'Not received emails: %1'"),
			НеПолученоПисем);
	КонецЕсли;
	Если НеЗаписаноПисем > 0 Тогда
		Комментарий = Комментарий + Символы.ПС +
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Не записано писем: %1'; en = 'Not saved emails: %1'"),
			НеЗаписаноПисем);
		КонецЕсли;
	БылиОшибкиПриПолучении = (НеПолученоПисем > 0) Или (НеЗаписаноПисем > 0);
	Если БылиОшибкиПриПолучении Тогда
		Комментарий = Комментарий + Символы.ПС +
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Сообщения об ошибках:
				|%1';
				|en = 'Error messages: 
				|%1'"),
			СообщенияОбОшибкахПриПолучении);
	КонецЕсли;
	
	РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
		УчетнаяЗапись,
		Перечисления.ОперацииСУчетнойЗаписью.ПолучениеПисем,
		ТекущаяДата(),
		Не БылиОшибкиПриПолучении, // ОперацияУспешноЗавершена
		Комментарий); // Комментарий
		
	ЗаписатьОбработаннуюУчетнуюЗапись(УчетнаяЗапись);		
	
	// Удаление старых писем из почтового ящика
	Если РезультатРазбораИдентификаторов.УдалитьВПочтовомЯщике.Количество() > 0 Тогда
		СообщениеОбОшибке = "";
		Если Не Почта.УдалитьСообщенияВПочтовомЯщике(
			Соединение,
			РезультатРазбораИдентификаторов.УдалитьВПочтовомЯщике,
			СообщениеОбОшибке) Тогда
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Учетная запись: %1
					|Ошибка при попытке удаления сообщений в почтовом ящике:
					|%2';
					|en = 'Account: %1 
					|Error when trying to delete messages in the mailbox: 
					|%2'"),
				УчетнаяЗапись,
				СообщениеОбОшибке);
			
			ЗаписатьОшибкуДоставки(
				СообщениеОбОшибке,
				Неопределено,
				УчетнаяЗапись,
				ПараметрыЛогирования,
				Неопределено,
				Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
			
			СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить письма в ящике:
					|%1'; en = 'Failed to delete the email in a box: %1'"),
				СообщениеОбОшибке);
			
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.УдалениеПисем,
				ТекущаяДата(),
				Ложь, // ОперацияУспешноЗавершена
				Комментарий); // Комментарий
			
		Иначе
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удалено писем: %1'; en = 'Deleted emails: %1'"),
				РезультатРазбораИдентификаторов.УдалитьВПочтовомЯщике.Количество());
			
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.УдалениеПисем,
				ТекущаяДата(),
				Истина, // ОперацияУспешноЗавершена
				Комментарий); // Комментарий
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат отправки писем в виде структуры:
// Результат (Структура)
// - ПисемКОтправке (Число)
// - Отправлено (Число)
// - НеОтправлено(Число)
//
Функция ОтправитьВсеПисьма(Знач ТекДата, СообщенияОбОшибках, ПараметрыЛогирования, МассивУчетныхЗаписей = Неопределено)
	
	Результат = Новый Структура("ПисемКОтправке, Отправлено, НеОтправлено", 0, 0, 0);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодготовленныеКОтправкеПисьма.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ПодготовленныеКОтправкеПисьма.Письмо КАК Письмо
		|ИЗ
		|	РегистрСведений.ПодготовленныеКОтправкеПисьма КАК ПодготовленныеКОтправкеПисьма
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ПО ПодготовленныеКОтправкеПисьма.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтложеннойОтправкиПисем КАК НастройкиОтложеннойОтправкиПисем
		|		ПО ПодготовленныеКОтправкеПисьма.Автор = НастройкиОтложеннойОтправкиПисем.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НеотправленныеИсходящиеПисьма КАК НеОтправленныеИсходящиеПисьма
		|		ПО ПодготовленныеКОтправкеПисьма.Письмо = НеОтправленныеИсходящиеПисьма.Письмо
		|			И (НеОтправленныеИсходящиеПисьма.ОсталосьПопытокОтправки = 0)
		|ГДЕ
		|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		|	И ДОБАВИТЬКДАТЕ(ПодготовленныеКОтправкеПисьма.ПодготовленоКОтправке, СЕКУНДА, ЕСТЬNULL(НастройкиОтложеннойОтправкиПисем.Задержка, 0)) <= &ТекДата
		|	И НеОтправленныеИсходящиеПисьма.Письмо ЕСТЬ NULL 
		|	И ПодготовленныеКОтправкеПисьма.ОтправкаОтменена = ЛОЖЬ
		|	И (НЕ &ИспользоватьВнутреннююМаршрутизацию
		|			ИЛИ ПодготовленныеКОтправкеПисьма.ВидМаршрутизации = ЗНАЧЕНИЕ(Перечисление.ВидыМаршрутизацииПисем.Внешняя))");
		
	Если МассивУчетныхЗаписей <> Неопределено Тогда
		
		// отбираем только среди указанных учетных записей
			
		Запрос.Текст = Запрос.Текст +
			" И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&МассивУчетныхЗаписей)";
			
		Запрос.УстановитьПараметр("МассивУчетныхЗаписей", МассивУчетныхЗаписей);
			
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст +
		" ИТОГИ ПО
		|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("ИспользоватьВнутреннююМаршрутизацию", Константы.ИспользоватьВнутреннююМаршрутизацию.Получить());	
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;	
		
	ДеревоВыборки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Для каждого СтрокаУчетнойЗаписи Из ДеревоВыборки.Строки Цикл
		
		УчетнаяЗапись = СтрокаУчетнойЗаписи.УчетнаяЗапись;
		
		СообщениеОбОшибке = "";
		ИспользоватьДляПолучения = Ложь;
		Соединение = Почта.ИнтернетПочтаУстановитьСоединение(
			УчетнаяЗапись,, СообщениеОбОшибке, ИспользоватьДляПолучения);
		Если Соединение = Неопределено Тогда
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Учетная запись: %1
					|Ошибка при попытке подключения к почтовому ящику:
					|%2';
					|en = 'Account:%1 
					|error when attempting to connect to mailbox: 
					|%2'"),
				УчетнаяЗапись,
				СообщениеОбОшибке);
			
			ЗаписатьОшибкуДоставки(СообщениеОбОшибке, Неопределено, УчетнаяЗапись, ПараметрыЛогирования);
			
			СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Ложь, // ОперацияУспешноЗавершена
				СообщениеОбОшибке); // Комментарий
			
			Продолжить;
			
		КонецЕсли;
		
		РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
			УчетнаяЗапись,
			Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
			ТекущаяДата(),
			Истина, // ОперацияУспешноЗавершена
			""); // Комментарий
		
		ОтправленоПисем = 0;
		НеОтправленоПисем = 0;
		Для каждого СтрокаПисьма Из СтрокаУчетнойЗаписи.Строки Цикл			
			
			Результат.ПисемКОтправке = Результат.ПисемКОтправке + 1;
			
			Если Не ОтправитьПисьмо(СтрокаПисьма.Письмо, Соединение, СообщенияОбОшибках, УчетнаяЗапись, ПараметрыЛогирования) Тогда
				НеОтправленоПисем = НеОтправленоПисем + 1;
			Иначе
				ОтправленоПисем = ОтправленоПисем + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Отправлено = Результат.Отправлено + ОтправленоПисем;
		Результат.НеОтправлено = Результат.НеОтправлено + НеОтправленоПисем;
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Отправлено писем: %1'; en = 'Sent emails: %1'"),
			ОтправленоПисем);
		
		Если НеОтправленоПисем > 0 Тогда
			
			Комментарий = Комментарий + Символы.ПС +
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Не отправлено писем: %1'; en = 'Not sent emails: %1'"),
				НеОтправленоПисем);
			
		КонецЕсли;
		
		РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
			УчетнаяЗапись,
			Перечисления.ОперацииСУчетнойЗаписью.ОтправкаПисем,
			ТекущаяДата(),
			(НеОтправленоПисем = 0), // ОперацияУспешноЗавершена
			Комментарий); // Комментарий
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПисьмо(ПисьмоСсылка, Соединение, СообщенияОбОшибках, УчетнаяЗапись, ПараметрыЛогирования)
	
	СообщениеОбОшибке = "";
	
	ЗаписатьПротоколДоставкиПочты(
		ПисьмоСсылка,
		"",
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.НачалоОтправкиПисьма,
		УчетнаяЗапись, ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
	Исключение
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заблокировать письмо:
				|%1'; en = 'Unable to lock email: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьПротоколДоставкиПочты(
			ПисьмоСсылка,
			СообщениеОбОшибке,
			Ложь, // логируем как НЕ-ошибку
			Перечисления.ТипыСобытийДоставкиПочты.ОшибкаОтправкиПисьма,
			УчетнаяЗапись, 
			ПараметрыЛогирования.ПорядковыйНомерСобытия,
			ПараметрыЛогирования.ИдентификаторСеанса,
			ПараметрыЛогирования.НомерЗадания);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
	
	Если Не ПисьмоГотовоКОтправке(ПисьмоОбъект) Тогда
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Письмо не готово к отправке:
				|%1'; en = 'The email is not ready to send: %1'"),
				ПисьмоСсылка);
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		ПараметрыОтправки = ПолучитьСтруктуруПараметровОтправкиПисьма(ПисьмоОбъект);
		
	Исключение
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не ПараметрыОтправки.ЕстьПолучатели Тогда
		
		// снимаем письмо с отправки
		ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
		ПисьмоОбъект.ОтправкаОтменена = Истина;
		ПисьмоОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		СообщениеОбОшибке = НСтр("ru = 'Письмо не содержит ни одного адреса электронной почты'; en = 'The email contains no email addresses'");
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если Не Почта.ОтправитьСообщение(Соединение, ПараметрыОтправки, СообщениеОбОшибке, УчетнаяЗапись, ПисьмоСсылка) Тогда
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		РегистрыСведений.НеОтправленныеИсходящиеПисьма.ЗарегистрироватьНеуспешнуюПопыткуОтправкиПисьма(
				ПисьмоСсылка);
				
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
				
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		РегистрыСведений.НеОтправленныеИсходящиеПисьма.УдалитьСведенияОПисьме(ПисьмоСсылка);
		
		ПисьмоОбъект.ИдентификаторСообщения = ПараметрыОтправки.ИдентификаторСообщения;
		
		Если Не ПараметрыОтправки.Свойство("Размер") Тогда
			Размер = ВычислитьРазмерПочтовогоСообщения(ПараметрыОтправки);
			ПараметрыОтправки.Вставить("Размер", Размер);
		КонецЕсли;
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		ПисьмоОбъект.Размер = ПараметрыОтправки.Размер;
		ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
		ПапкаДляОтправленных = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			ПисьмоОбъект.УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Отправленные);
		ПисьмоОбъект.Папка = ПапкаДляОтправленных;
		ПисьмоОбъект.ДатаОтправки = ТекущаяДатаСеанса;
		ПисьмоОбъект.Дата = ТекущаяДатаСеанса;
		ПрименитьПравилоПриОтправке(ПисьмоОбъект, Истина); //применение пользовательских правил
		ПисьмоОбъект.Записать();
		
	Исключение
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка при регистрации отправки письма:
				|%1'; en = 'An error occurred while registering the email sent: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
	
	ЗаписатьПротоколДоставкиПочты(
		ПисьмоСсылка,
		"",
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.УспешнаяОтправкаПисьма,
		УчетнаяЗапись,
		ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
	
	Возврат Истина;
	
КонецФункции

Функция ПисьмоГотовоКОтправке(ПисьмоОбъект)
	
	ТекДата = ТекущаяДата();
	
	Если ПисьмоОбъект.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
	
	Если ДанныеУчетнойЗаписи.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеУчетнойЗаписи.ВариантИспользования <> Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеУчетнойЗаписи.ИспользоватьДляОтправки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПисьмоОбъект.ОтправкаОтменена Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Задержка = РегистрыСведений.НастройкиОтложеннойОтправкиПисем.ПолучитьНастройку(ПисьмоОбъект.Автор);
	Если ПисьмоОбъект.ПодготовленоКОтправке + Задержка > ТекДата Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РегистрыСведений.НеОтправленныеИсходящиеПисьма.ЗакончилисьПопыткиОтправкиПисьма(ПисьмоОбъект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вычисляет размер почтового сообщения
Функция ВычислитьРазмерПочтовогоСообщения(ПараметрыОтправки) Экспорт
	
	Размер = 0;
	
	Размер = Размер + СтрДлина(ПараметрыОтправки.Тема);
	Для каждого Текст Из ПараметрыОтправки.Тексты Цикл
		Размер = Размер + СтрДлина(Текст.Текст);
	КонецЦикла;
	Для каждого Вложение Из ПараметрыОтправки.Вложения Цикл
		Если ТипЗнч(Вложение.Данные) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		Размер = Размер + Вложение.Данные.Размер();
	КонецЦикла;
	
	Возврат Размер;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровОтправкиПисьма(ПисьмоОбъект,
	ТолькоАдресаЭлектроннойПочты = Истина, ЭтоВложенноеПисьмо = Ложь)
	
	ПараметрыОтправки = Почта.СформироватьСтруктуруПараметровОтправки();
	ПараметрыОтправки.Важность = ПисьмоОбъект.Важность;
	ПараметрыОтправки.Кодировка = ПисьмоОбъект.Кодировка;
	
	ПараметрыОтправки.Тексты.Добавить(ПисьмоОбъект.ПолучитьСодержаниеПисьма());
	
	Если ЭтоВложенноеПисьмо = Ложь Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
		СтруктураОтправителя = Новый Структура;
		СтруктураОтправителя.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);	
		СтруктураОтправителя.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ИмяПользователя);
		ПараметрыОтправки.ИмяОтправителя = ДанныеУчетнойЗаписи.ИмяПользователя;	
		ПараметрыОтправки.Отправитель = СтруктураОтправителя;
		
	Иначе // тут только входящие письма
		
		СтруктураОтправителя = Новый Структура("Адрес, ОтображаемоеИмя");
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект) Тогда
			СтруктураОтправителя.Адрес = ПисьмоОбъект.ОтправительАдресат.Адрес;
			СтруктураОтправителя.ОтображаемоеИмя = ПисьмоОбъект.ОтправительАдресат.Наименование;
		КонецЕсли;	
		
		ПараметрыОтправки.Отправитель = СтруктураОтправителя;
		
	КонецЕсли;	
	
	ТаблицаЗначений = Неопределено;
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		ТаблицаЗначений = ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(ПисьмоОбъект.Ссылка);
	Иначе
		ТаблицаЗначений = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(ПисьмоОбъект.Ссылка);
	КонецЕсли;	
	
	ЕстьПолучатели = Ложь;
	
	Для каждого ПочтовыйАдресИнфо Из ТаблицаЗначений Цикл
		
		СтруктураПочтовогоАдреса = Новый Структура;
		Адрес = ПочтовыйАдресИнфо.Адрес;
		Представление = ПочтовыйАдресИнфо.Представление;
		СтруктураПочтовогоАдреса.Вставить("Адрес", Адрес);
		СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", Представление);
		
		Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Адрес) Или Не ТолькоАдресаЭлектроннойПочты Тогда
			Если ПочтовыйАдресИнфо.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда 
				ПараметрыОтправки.Получатели.Добавить(СтруктураПочтовогоАдреса);
				ЕстьПолучатели = Истина;
			ИначеЕсли ПочтовыйАдресИнфо.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда 
				ПараметрыОтправки.Копии.Добавить(СтруктураПочтовогоАдреса);
				ЕстьПолучатели = Истина;
			ИначеЕсли ПочтовыйАдресИнфо.ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
				ПараметрыОтправки.СлепыеКопии.Добавить(СтруктураПочтовогоАдреса);
				ЕстьПолучатели = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОтправки.Вставить("ЕстьПолучатели", ЕстьПолучатели);
	
	ПараметрыОтправки.Тема = ПисьмоОбъект.Тема;
	ПараметрыОтправки.УведомитьОДоставке = ПисьмоОбъект.УведомитьОДоставке;
	ПараметрыОтправки.УведомитьОПрочтении = ПисьмоОбъект.УведомитьОПрочтении;
	
	Вложения = ПолучитьФайлыПисьма(
		ПисьмоОбъект.Ссылка, // Письмо
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь); // ВключатьПомеченныеНаУдаление
	
	Для каждого Вложение Из Вложения Цикл
			
		СтруктураВложения = Новый Структура;
		
		Данные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка);
		СтруктураВложения.Вставить("Наименование", Вложение.ИмяФайла);
		
		Если Вложение.ЭтоВложенноеПисьмо Тогда
			
			ИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
			ИнтернетПочтовоеСообщение.УстановитьИсходныеДанные(Данные);

			СтруктураВложения.Вставить("Данные", ИнтернетПочтовоеСообщение);
			СтруктураВложения.Вставить("Идентификатор", Неопределено);
			
		Иначе
			
			СтруктураВложения.Вставить("Данные", Данные);
			
			ИдентификаторПочтовогоВложения =
				РегистрыСведений.ИдентификаторыПочтовыхВложений.ПолучитьИдентификаторПочтовогоВложения(
					Вложение.Ссылка);
			
			СтруктураВложения.Вставить("Идентификатор", ИдентификаторПочтовогоВложения);
			
		КонецЕсли;	
			
		ПараметрыОтправки.Вложения.Добавить(СтруктураВложения);
		
	КонецЦикла;
	
	ВложенныеПисьма = РегистрыСведений.ВложенныеПисьма.ПолучитьВложенныеПисьма(ПисьмоОбъект.Ссылка);
	Для Каждого Вложение Из ВложенныеПисьма Цикл
		
		СтруктураВложения = Новый Структура;
		
		ВложенноеПисьмоОбъект = Вложение.Письмо.ПолучитьОбъект();
		ЭтоВложенноеПисьмо = Истина;
		ПараметрыОтправкиВложенногоПисьма 
			= ПолучитьСтруктуруПараметровОтправкиПисьма(ВложенноеПисьмоОбъект,,ЭтоВложенноеПисьмо);
		
		ИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
		Почта.ЗаполнитьИнтернетПочтовоеСообщение(ИнтернетПочтовоеСообщение, ПараметрыОтправкиВложенногоПисьма);

		СтруктураВложения.Вставить("Данные", ИнтернетПочтовоеСообщение);
		СтруктураВложения.Вставить("Наименование", Вложение.ИмяФайла);
		СтруктураВложения.Вставить("Идентификатор", Неопределено);
		
		ПараметрыОтправки.Вложения.Добавить(СтруктураВложения);
		
	КонецЦикла;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		ПисьмоОтправленоВОтветНа = ПисьмоОбъект.ПисьмоОснование;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОтправленоВОтветНа) Тогда
			
			ПисьмоОтправленоВОтветНаИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПисьмоОтправленоВОтветНа,
				"ИдентификаторСообщения, ВнутреннийЗаголовок");
				
			Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения) Тогда
				
				// Формирование поля заголовка In-Reply-To
				ПараметрыОтправки.ПоляЗаголовка.Добавить(
					Почта.СформироватьСтруктуруПоляЗаголовка(
						"In-Reply-To", // ИмяПоля
						ВКавычках(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения, "<", ">"), // ЗначениеПоля
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
				
				// Формирование поля заголовка References
				References = ПолучитьЗначениеПоляИзЗаголовкаПисьма(
					ПисьмоОтправленоВОтветНаИнфо.ВнутреннийЗаголовок,
					"References");
					
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					References,
					" ",
					ВКавычках(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения, "<", ">"));
					
				ПараметрыОтправки.ПоляЗаголовка.Добавить(
					Почта.СформироватьСтруктуруПоляЗаголовка(
						"References", // ИмяПоля
						References, // ЗначениеПоля
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// перенаправление
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) 
		И ПисьмоОбъект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма 
		И ЗначениеЗаполнено(ПисьмоОбъект.ПисьмоОснование) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПисьмоОбъект.ПисьмоОснование) Тогда 
		
		СтруктураОтправителя = Новый Структура;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект.ПисьмоОснование) Тогда 
			
			ОтправительАдресат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОбъект.ПисьмоОснование, "ОтправительАдресат");
			ПредставлениеАдресата = ПолучитьПредставлениеИКонтактАдресата(ОтправительАдресат);
			
			СтруктураОтправителя.Вставить("Адрес", ОтправительАдресат.Адрес);
			СтруктураОтправителя.Вставить("ОтображаемоеИмя", ПредставлениеАдресата.Представление); 
			
		Иначе 	
			
			УчетнаяЗаписьОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОбъект.ПисьмоОснование, "УчетнаяЗапись");
			
			СтруктураОтправителя.Вставить("Адрес", УчетнаяЗаписьОснования.АдресЭлектроннойПочты);
			СтруктураОтправителя.Вставить("ОтображаемоеИмя", 
				Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьПредставлениеАдреса(УчетнаяЗаписьОснования.Ссылка));
			
		КонецЕсли;	
		ПараметрыОтправки.Отправитель = СтруктураОтправителя;	
		ПараметрыОтправки.ИмяОтправителя = СтруктураОтправителя.ОтображаемоеИмя;	
		
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
		ПараметрыОтправки.ПоляЗаголовка.Добавить(
			Почта.СформироватьСтруктуруПоляЗаголовка(
			"Resent-From", // ИмяПоля
			ДанныеУчетнойЗаписи.АдресЭлектроннойПочты, // ЗначениеПоля
			СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
			
		ДатаПеренаправления = ТекущаяДатаСеанса();
		ПараметрыОтправки.ПоляЗаголовка.Добавить(
			Почта.СформироватьСтруктуруПоляЗаголовка(
			"Resent-Date", // ИмяПоля
			Почта.ПеревестиДатуВПолеЗаголовка(ДатаПеренаправления), // ЗначениеПоля
			СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования	
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПисьмоОбъект.Проект) Тогда
		
		// Формирование поля заголовка "X-1C-Project-ID"  - проект письма
		ПараметрыОтправки.ПоляЗаголовка.Добавить(
			Почта.СформироватьСтруктуруПоляЗаголовка(
				"X-1C-Project-ID", // ИмяПоля
				Строка(ПисьмоОбъект.Проект.УникальныйИдентификатор()), // ЗначениеПоля
				СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
		
	КонецЕсли;	
			
	Если РегистрыСведений.АвтоматическиеОтветыПоАдресам.ПисьмоЯвляетсяАвтоОтветом(ПисьмоОбъект.Ссылка) Тогда
		
		// Формирование поля заголовка "X-1C-AutoReply"  - признак автоответа
		ПараметрыОтправки.ПоляЗаголовка.Добавить(
			Почта.СформироватьСтруктуруПоляЗаголовка(
				"X-1C-AutoReply", // ИмяПоля
				"true", // ЗначениеПоля
				СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
		
	КонецЕсли;		
				
	Возврат ПараметрыОтправки;
	
КонецФункции

// Возвращает значение поля из заголовка письма
Функция ПолучитьЗначениеПоляИзЗаголовкаПисьма(Знач ЗаголовокПисьма, Знач Поле) Экспорт
	
	СимволыПереводаСтроки = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСоответствиеСимволовПереводаСтроки();

	КоличествоСтрок = СтрЧислоСтрок(ЗаголовокПисьма);
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(ЗаголовокПисьма, Индекс);
		Если СтрНайти(НРег(Строка), НРег(Поле) + ": ") = 1 Тогда
			Результат = Сред(Строка, СтрДлина(Поле) + 3);
			Для ВнутреннийИндекс = Индекс + 1 По КоличествоСтрок Цикл
				Строка = СтрПолучитьСтроку(ЗаголовокПисьма, ВнутреннийИндекс);
				СимволПеревода = СимволыПереводаСтроки.Получить(Лев(Строка, 1));
		
				Если СимволПеревода = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Результат = Результат + " " + Сред(Строка, 2);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Устанавливает текст входящего письма из структуры текста почтового сообщения.
//
Процедура УстановитьСодержаниеПисьмаИзСтруктурыТекстаПочтовогоСообщения(ПисьмоОбъект, СтруктураТекста) Экспорт
	
	ПисьмоОбъект.ТипТекста = СтруктураТекста.ТипТекста;
	
	Если СтруктураТекста.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ПисьмоОбъект.УстановитьСодержаниеПисьма(
			СтруктураТекста.ТекстHTML,
			СтруктураТекста.ТипТекста,
			СтруктураТекста.Кодировка);
		
	Иначе
		
		ПисьмоОбъект.УстановитьСодержаниеПисьма(
			СтруктураТекста.Текст,
			СтруктураТекста.ТипТекста,
			СтруктураТекста.Кодировка);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на записанное письмо или Неопределено в случае ошибки.
//
Функция ЗаписатьВходящееПисьмо(Сообщение, УчетнаяЗапись, 
	СообщениеОбОшибке = Неопределено, НеЗаписыватьКакОшибку = Ложь) Экспорт
	
	СообщениеОбОшибке = "";
	
	ИдентификаторСообщения = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.ИдентификаторСообщения);
	РанееПринятоеПисьмо = НайтиВходящееПисьмоПоИдентификаторуИУчетнойЗаписи(ИдентификаторСообщения, УчетнаяЗапись);
	
	Если ЗначениеЗаполнено(РанееПринятоеПисьмо) Тогда
		
		ИдентификаторыСтрока = "";
		Для Каждого Ид Из Сообщение.Идентификатор Цикл
			ИдентификаторыСтрока = ИдентификаторыСтрока + Ид + " ";
		КонецЦикла;
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Ранее уже принято письмо (%1) с таким идентификатором (Message-Id: %2) - (Идентификатор: %3).'; en = 'Email (%1) with the same identifier  (Message-Id:%2) (ID:%3) received previously.'"),
			РанееПринятоеПисьмо, ИдентификаторСообщения, ИдентификаторыСтрока);
			
		// Запись идентификатора полученного сообщения - чтобы больше не принималось это письмо.
		Для каждого Идентификатор Из Сообщение.Идентификатор Цикл
			РегистрыСведений.ИдентификаторыПолученныхПисем.ДобавитьЗапись(
				УчетнаяЗапись,
				Идентификатор);
			КонецЦикла;
			
		НеЗаписыватьКакОшибку = Истина;
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		ПисьмоОбъект = Документы.ВходящееПисьмо.СоздатьДокумент();
		ПисьмоОбъект.УчетнаяЗапись = УчетнаяЗапись;
		ПисьмоОбъект.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
		
		ЗаполнитьВходящееПисьмоИзСтруктурыПочтовогоСообщения(ПисьмоОбъект, Сообщение, УчетнаяЗапись);
		
		ИдентификаторПроектаСтрока = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "X-1C-Project-ID");
		Если ЗначениеЗаполнено(ИдентификаторПроектаСтрока) Тогда
			
			ИдентификаторПроекта = Неопределено;
			
			Попытка
				ИдентификаторПроекта = Новый УникальныйИдентификатор(ИдентификаторПроектаСтрока);
			Исключение
				// может придти некорректный Ид проекта
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ИдентификаторПроекта) Тогда
				Проект = Справочники.Проекты.ПолучитьСсылку(ИдентификаторПроекта);
				Если ЗначениеЗаполнено(Проект) И ДоступенПоПравамОтветственнымУчетнойЗаписи(Проект, УчетнаяЗапись) Тогда 
					ПисьмоОбъект.Проект = Проект;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;	
		
		Основание = Неопределено;
		ИдентификаторПисьма = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "In-Reply-To");
		Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
			ИдентификаторОснования = РаботаСоСтроками.ВыделитьПодстрокуВСкобках(ИдентификаторПисьма, "<", ">");
			Основание = НайтиИсходящееПисьмоПоИдентификатору(ИдентификаторОснования, УчетнаяЗапись);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Основание) Тогда // не было поля "In-Reply-To" или не нашли по идентификатору
			СтрокаИдентификаторовПисем = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "References");
			Если ЗначениеЗаполнено(СтрокаИдентификаторовПисем) Тогда
				МассивИдентификаторовПисем = ПолучитьМассивИдентификаторовПисем(СтрокаИдентификаторовПисем);
				Если МассивИдентификаторовПисем.Количество() > 0 Тогда
					МассивПисем = НайтиИсходящиеПисьмаПоИдентификаторам(МассивИдентификаторовПисем, УчетнаяЗапись);
					Если МассивПисем.Количество() > 0 Тогда
						Основание = МассивПисем[0];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Основание) Тогда
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("Основание", Основание);
			ЗаполнитьРеквизитыПисьмаИзОснования(ПисьмоОбъект, Основание);
		КонецЕсли;
		
		ПисьмоОбъект.Записать();
		ПланыОбмена.ПоискПисемРегистрацияВсехПисем.ЗарегистрироватьИзменениеПисьма(ПисьмоОбъект.Ссылка);
		
		Если Сообщение.ОбнаруженыОшибки = Истина Тогда
			РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
				ПисьмоОбъект.Ссылка, "ЕстьОшибкиПриемкиОтправкиПочты", Истина);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Основание) Тогда
			СвязиДокументов.УстановитьСвязь(
				ПисьмоОбъект.Ссылка,
				Неопределено,
				Основание,
				Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
		КонецЕсли;
		
		ОбновитьВеткуПереписки(ПисьмоОбъект.Ссылка);
		
		// Запись вложений
		СобственныеФайлыВозвращаемый = Новый Массив;
		ПорядковыйНомерВложения = 0;
		
		ДобавитьФайлыИзИнтернетПочтовогоСообщения(
			ПисьмоОбъект.Ссылка,
			Сообщение,
			ПисьмоОбъект.Дата, //ВремяИзменения
			"", // ПрефиксНомераПисьма
			СобственныеФайлыВозвращаемый,
			ПорядковыйНомерВложения);
			
		ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();	
		ПроверятьУникальность = ЭтоФайловаяБаза;
		
		// Запись идентификатора полученного сообщения
		Для каждого Идентификатор Из Сообщение.Идентификатор Цикл
			РегистрыСведений.ИдентификаторыПолученныхПисем.ДобавитьЗапись(
				УчетнаяЗапись,
				Идентификатор,
				ПроверятьУникальность);
		КонецЦикла;
			
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ПисьмоОбъект.Ссылка, 
			Справочники.ВидыБизнесСобытий.ПолучениеВходящегоПисьма);	
		
		ЗафиксироватьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(ПисьмоОбъект.Ссылка);
			
			Если ПрименитьПользовательскиеПравила(ПисьмоОбъект) Тогда
				ПисьмоОбъект.Записать();
			КонецЕсли;
			
			Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Правила_УстановитьПометкуУдаления")
				И ПисьмоОбъект.ДополнительныеСвойства.Правила_УстановитьПометкуУдаления Тогда
				ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
			Если ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ПрименитьПравилаОповещенияДляВходящихПисем(ПисьмоОбъект);	
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(ПисьмоОбъект.Ссылка);
			
		Исключение
			РазблокироватьДанныеДляРедактирования(ПисьмоОбъект.Ссылка);
			Инфо = ИнформацияОбОшибке();
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при обработке письма правилами: 
					|%1';
					|en = 'Error email processing rules: 
					|%1'"),
				ПодробноеПредставлениеОшибки(Инфо));
			Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, ПисьмоОбъект.Ссылка);
		КонецПопытки;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		// Чтобы ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата сбросила закешированные значения.
		ОбновитьПовторноИспользуемыеЗначения();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ПисьмоОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьМассивИдентификаторовПисем(Знач СтрокаИдентификаторовПисем)
	
	Результат = Новый Массив;
	
	СтрокаИдентификаторовПисем = СтрЗаменить(СтрокаИдентификаторовПисем, "> <", Символы.ПС);
	СтрокаИдентификаторовПисем = СтрЗаменить(СтрокаИдентификаторовПисем, "<", "");
	СтрокаИдентификаторовПисем = СтрЗаменить(СтрокаИдентификаторовПисем, ">", "");
	
	Для Индекс = 1 По СтрДлина(СтрокаИдентификаторовПисем) Цикл
		Строка = СтрПолучитьСтроку(СтрокаИдентификаторовПисем, Индекс);
		Если ЗначениеЗаполнено(Строка) Тогда
			ИдентификаторУрезанный = Лев(СокрЛП(Строка), 200);	
			Результат.Добавить(ИдентификаторУрезанный);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает входящее письмо по идентификатору.
// Если письмо не найдено, возвращает Неопределено.
//
Функция НайтиВходящееПисьмоПоИдентификаторуИУчетнойЗаписи(Идентификатор, УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.Дата
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.ИдентификаторСообщения = &Идентификатор
		|	И ВходящееПисьмо.УчетнаяЗапись = &УчетнаяЗапись");
		
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;	
	
КонецФункции

// Возвращает массив писем, найденных по идентификаторам, отсортированный по убыванию даты письма.
//
Функция НайтиИсходящиеПисьмаПоИдентификаторам(МассивИдентификаторовПисем, УчетнаяЗапись)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящееПисьмо.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.ИдентификаторСообщения В(&МассивИдентификаторовПисем)
		|	И ИсходящееПисьмо.УчетнаяЗапись = &УчетнаяЗапись
		|	И ИсходящееПисьмо.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходящееПисьмо.Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивИдентификаторовПисем", МассивИдентификаторовПисем);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает массив исходящих писем, найденных по идентификатору основания.
//
Функция НайтиИсходящиеПисьмаПоИдентификаторуОснования(ИдентификаторОснования) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИдентификаторыИмпортированныхПисем.Письмо.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ИдентификаторыИмпортированныхПисем КАК ИдентификаторыИмпортированныхПисем
		|ГДЕ
		|	ИдентификаторыИмпортированныхПисем.ИдентификаторОснования = &ИдентификаторОснования
		|	И ТИПЗНАЧЕНИЯ(ИдентификаторыИмпортированныхПисем.Письмо) = ТИП(Документ.ИсходящееПисьмо)
		|	И ИдентификаторыИмпортированныхПисем.Письмо.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ИдентификаторОснования", ИдентификаторОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает массив входящих писем, найденных по идентификатору основания.
//
Функция НайтиВходящиеПисьмаПоИдентификаторуОснования(ИдентификаторОснования) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИдентификаторыИмпортированныхПисем.Письмо.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ИдентификаторыИмпортированныхПисем КАК ИдентификаторыИмпортированныхПисем
		|ГДЕ
		|	ИдентификаторыИмпортированныхПисем.ИдентификаторОснования = &ИдентификаторОснования
		|	И ТИПЗНАЧЕНИЯ(ИдентификаторыИмпортированныхПисем.Письмо) = ТИП(Документ.ВходящееПисьмо)
		|	И ИдентификаторыИмпортированныхПисем.Письмо.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ИдентификаторОснования", ИдентификаторОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции   

// Добавляет вложение письма.
//
Функция ДобавитьВложениеПисьмаИзДвоичныхДанных(
	Письмо, 
	ДвоичныеДанные, // ДвоичныеДанные
	ИмяФайла,
	ВремяИзменения, // ДатаВремя
	Идентификатор) Экспорт // Идентификатор почтового вложения
	
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Размер = ДвоичныеДанные.Размер();
	
	ФайлСсылка = ДобавитьВложениеПисьмаИзВременногоХранилища(
		Письмо,
		Адрес,
		Неопределено,
		Размер,
		ИмяФайла,
		ВремяИзменения,
		Идентификатор);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	Возврат ФайлСсылка;
	
КонецФункции

// Добавляет вложение письма.
//
Функция ДобавитьВложениеПисьмаИзВременногоХранилища(
	Письмо, 
	АдресВременногоХранилища,
	АдресВременногоХранилищаТекста,
	Размер,
	ИмяФайла,
	ВремяИзменения, // ДатаВремя
	Идентификатор) Экспорт // Идентификатор почтового вложения
	
	ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ИмяФайла);
	ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ВремяИзменения);
	
	// Создадим карточку Файла в БД
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилища;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
	СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
	СведенияОФайле.Размер = Размер;
	СведенияОФайле.ВремяИзменения = ВремяИзменения;
	СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
	СведенияОФайле.ХранитьВерсии = Ложь;
	
	ВложениеПисьмаСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Письмо, СведенияОФайле);
	
	Если Не ПустаяСтрока(Идентификатор) Тогда
		РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(ВложениеПисьмаСсылка, Идентификатор);
	КонецЕсли;
	
	Возврат ВложениеПисьмаСсылка;
	
КонецФункции

Процедура ЗаполнитьВходящееПисьмоИзСтруктурыПочтовогоСообщения(ПисьмоОбъект, Сообщение, УчетнаяЗапись)
	
	ДатаПолучения = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Сообщение.ДатаПолучения) Тогда
		ДатаПолучения = Сообщение.ДатаПолучения;
	КонецЕсли;
	
	ПисьмоОбъект.Важность = Сообщение.Важность;
	
	ПисьмоОбъект.Дата = ТекущаяДатаСеанса();
	ПисьмоОбъект.ДатаОтправки = Сообщение.ДатаОтправки;
	ПисьмоОбъект.ДатаПолучения = ДатаПолучения;
	
	// Если дата письма старее, чем сутки назад - берем дату из письма.
	Если ЗначениеЗаполнено(ДатаПолучения) 
		И ПисьмоОбъект.Дата > ДатаПолучения
		И ПисьмоОбъект.Дата - ДатаПолучения > 86400 Тогда
		ПисьмоОбъект.Дата = ДатаПолучения;
	КонецЕсли;
	
	Если Год(ПисьмоОбъект.ДатаОтправки) > 3999 Тогда
		ПисьмоОбъект.ДатаОтправки = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	ПисьмоОбъект.ВнутреннийЗаголовок = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.Заголовок);
	ПисьмоОбъект.ИдентификаторСообщения = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.ИдентификаторСообщения);
	ПисьмоОбъект.Кодировка = Сообщение.Кодировка;
	ПисьмоОбъект.УведомитьОДоставке = Сообщение.УведомитьОДоставке;
	ПисьмоОбъект.УведомитьОПрочтении = Сообщение.УведомитьОПрочтении;
	
	Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Сообщение.Отправитель.Адрес, Сообщение.Отправитель.ОтображаемоеИмя);
	ПисьмоОбъект.ОтправительАдресат = Адресат;
	
	СтруктураТекста = ПолучитьСтруктуруТекстаИзСтруктурыПочтовогоСообщения(Сообщение);
	
	УстановитьСодержаниеПисьмаИзСтруктурыТекстаПочтовогоСообщения(ПисьмоОбъект, СтруктураТекста);
	
	ПисьмоОбъект.Размер = Сообщение.Размер;
	ПисьмоОбъект.Тема = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.Тема);
	
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.ПолучателиПисьма, Сообщение.Получатели);
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.ПолучателиКопий, Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.ПолучателиОтвета, Сообщение.ОбратныйАдрес);
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.АдресаУведомленияОПрочтении, Сообщение.АдресаУведомленияОПрочтении);
	
	Если СтруктураТекста.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		КорректироватьВложения(Сообщение, СтруктураТекста.ТекстHTML);
	ИначеЕсли СтруктураТекста.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда	
		ОчиститьИдентификаторыВложений(Сообщение);
	КонецЕсли;	
	
	ЧислоВложений = ПодсчитатьЧислоВложений(Сообщение);
	ПисьмоОбъект.ЕстьВложения = (ЧислоВложений <> 0);
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыВложений(Сообщение)
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				
				// очищаем Идентификатор, чтобы не попало в регистр ИдентификаторыВложений 
				Вложение.Идентификатор = ""; 
				
			КонецЕсли;	

		ИначеЕсли ТипЗнч(Вложение.Данные) = Тип("Структура") Тогда
			
			ОчиститьИдентификаторыВложений(Вложение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КорректироватьВложения(Сообщение, ТекстHTML)
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				
				ВложениеНайденоВHTML = Ложь;
				
				Если СтрНайти(ТекстHTML, "cid:" + Вложение.Идентификатор) <> 0 Тогда 
					ВложениеНайденоВHTML = Истина;
				ИначеЕсли СтрНайти(ТекстHTML, "CID:" + Вложение.Идентификатор) <> 0 Тогда 
					ВложениеНайденоВHTML = Истина;
				ИначеЕсли СтрДлина(Вложение.Идентификатор) > 18 И СтрНайти(ТекстHTML, Вложение.Идентификатор) <> 0 Тогда 
					ВложениеНайденоВHTML = Истина;
				КонецЕсли;	
				
				Если Не ВложениеНайденоВHTML Тогда 
					// Не нашли в тексте HTML ссылки на вложение - очищаем Идентификатор, чтобы не попало в регистр ИдентификаторыВложений. 
					Вложение.Идентификатор = ""; 
				КонецЕсли;			
				
			КонецЕсли;	

		ИначеЕсли ТипЗнч(Вложение.Данные) = Тип("Структура") Тогда
			
			КорректироватьВложения(Вложение.Данные, ТекстHTML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодсчитатьЧислоВложений(Сообщение)
	
	ЧислоВложений = 0;
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			
			Если Не ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				ЧислоВложений = ЧислоВложений + 1;
			КонецЕсли;	

		ИначеЕсли ТипЗнч(Вложение.Данные) = Тип("Структура") Тогда
			
			ЧислоЛокальное = ПодсчитатьЧислоВложений(Вложение.Данные);
			ЧислоВложений = ЧислоВложений + ЧислоЛокальное;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧислоВложений;
	
КонецФункции	

Функция ПолучитьСтруктуруТекстаИзСтруктурыПочтовогоСообщения(Сообщение, ПрефиксНомера = "") Экспорт
	
	СтруктураТекста = Почта.ПолучитьСтруктуруТекстаИзСтруктурыПочтовогоСообщения(Сообщение);
	
	ИндексНомера = 1;
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		
		Если ТипЗнч(Вложение.Данные) = Тип("Структура") Тогда
			
			Если ПустаяСтрока(ПрефиксНомера) Тогда
				Номер = Строка(ИндексНомера);
			Иначе
				Номер = ПрефиксНомера + "." + ИндексНомера;
			КонецЕсли;
			ИндексНомера = ИндексНомера + 1;
			
			// рекурсия
			СтруктураТекстаВложения =
				ПолучитьСтруктуруТекстаИзСтруктурыПочтовогоСообщения(Вложение.Данные, Номер);
			
			ДобавитьСтруктуруТекстаВложения(СтруктураТекста, СтруктураТекстаВложения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ПрефиксНомера) Тогда
		ВставитьШапкуСообщенияВСтруктуруТекста(СтруктураТекста, Сообщение, ПрефиксНомера);
	КонецЕсли;
	
	Возврат СтруктураТекста;
	
КонецФункции

Процедура ВставитьШапкуСообщенияВСтруктуруТекста(СтруктураТекста, Сообщение, ПрефиксНомера)
	
	Отправлено = Формат(Сообщение.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
	От = ПолучитьПредставлениеОтправителяИзСтруктуры(Сообщение.Отправитель);
	
	Шапка = Новый Структура;
	Шапка.Вставить("НомерПисьма", ПрефиксНомера);
	Шапка.Вставить("Тема", Сообщение.Тема);
	Шапка.Вставить("От", От);
	Шапка.Вставить("Отправлено", Отправлено);
	
	ПолучателиСтрока = ПолучитьПредставлениеПолучателей(Сообщение.Получатели);
	Шапка.Вставить("Кому", ПолучателиСтрока);
	
	ШапкаВложенногоПисьмаПростойТекст = СформироватьШапкуВложенногоПисьмаПростойТекст(Шапка);
	
	СтруктураТекста.Текст = ШапкаВложенногоПисьмаПростойТекст + Символы.ПС + СтруктураТекста.Текст;
	
	Если СтруктураТекста.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстHTMLИнфо = РаботаС_HTML.РазложитьТекстHTML(СтруктураТекста.ТекстHTML);
		
		ШапкаВложенногоПисьмаТекстHTML =
			РаботаС_HTML.ПолучитьHTMLИзТекста(ШапкаВложенногоПисьмаПростойТекст);
		
		ШапкаВложенногоПисьмаТекстHTMLИнфо = РаботаС_HTML.РазложитьТекстHTML(ШапкаВложенногоПисьмаТекстHTML);
		
		СтруктураТекста.ТекстHTML = ТекстHTMLИнфо.Заголовок
			+ ШапкаВложенногоПисьмаТекстHTMLИнфо.Тело
			+ ТекстHTMLИнфо.Тело + ТекстHTMLИнфо.Окончание;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПолучателей(Получатели)
	
	ПолучателиСтрока = "";
	
	Если ТипЗнч(Получатели) = Тип("Массив") Тогда
		Для Каждого Получатель Из Получатели Цикл
			ПолучательОписание = ПолучитьПредставлениеОтправителяИзСтруктуры(Получатель);	
			Если ПолучателиСтрока <> "" Тогда
				ПолучателиСтрока = ПолучателиСтрока + "; ";
			КонецЕсли;	
			ПолучателиСтрока = ПолучателиСтрока + ПолучательОписание;
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат ПолучателиСтрока;

КонецФункции

Функция ПолучитьПредставлениеОтправителяИзСтруктуры(Отправитель)
	
	ПредставлениеОтправителя = Отправитель.Адрес;
	Если Не ПустаяСтрока(Отправитель.ОтображаемоеИмя) Тогда
		Если Отправитель.ОтображаемоеИмя <> Отправитель.Адрес Тогда
			ПредставлениеОтправителя = Отправитель.ОтображаемоеИмя + " <" + Отправитель.Адрес + ">";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОтправителя;
	
КонецФункции

Процедура ДобавитьСтруктуруТекстаВложения(СтруктураТекста, СтруктураТекстаДобавляемая)
	
	СтруктураТекста.Текст = СтруктураТекста.Текст + Символы.ПС + Символы.ПС
		+ СтруктураТекстаДобавляемая.Текст;
	
	Если СтруктураТекста.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстHTMLИнфо = РаботаС_HTML.РазложитьТекстHTML(СтруктураТекста.ТекстHTML);
		
		Если СтруктураТекстаДобавляемая.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			
			ТекстHTMLДобавляемыйИнфо = РаботаС_HTML.РазложитьТекстHTML(СтруктураТекстаДобавляемая.ТекстHTML);
			
		Иначе
			
			ТекстHTMLДобавляемый =
				РаботаС_HTML.ПолучитьHTMLИзТекста(СтруктураТекстаДобавляемая.Текст);
			
			ТекстHTMLДобавляемыйИнфо = РаботаС_HTML.РазложитьТекстHTML(ТекстHTMLДобавляемый);
			
		КонецЕсли;
		
		СтруктураТекста.ТекстHTML = ТекстHTMLИнфо.Заголовок + ТекстHTMLИнфо.Тело
			+ ТекстHTMLДобавляемыйИнфо.Тело + ТекстHTMLИнфо.Окончание;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьШапкуВложенногоПисьмаПростойТекст(Шапка)
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(
		"ru ='---Вложенное письмо %1---------------------------------------------------------
			|%2
			|От: %3
			|Отправлено: %4
			|Кому: %5
			|--------------------------------------------------------------------------------';
			|en = '---Sub email %1---------------------------------------------------------
			|%2
			|From: %3
			|Sent: %4
			|To: %5
			|--------------------------------------------------------------------------------'"),
		Шапка.НомерПисьма,
		Шапка.Тема,
		Шапка.От,
		Шапка.Отправлено,
		Шапка.Кому);
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты Предмет и Проект из письма-основания.
//
Процедура ЗаполнитьРеквизитыПисьмаИзОснования(ПисьмоОбъект, Основание) Экспорт
	
	ОснованиеИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Предмет, Проект");
	ПисьмоОбъект.Предмет = ОснованиеИнфо.Предмет;
	ПисьмоОбъект.Проект = ОснованиеИнфо.Проект;
	
КонецПроцедуры

// Возвращает письмо по идентификатору.
// Если письмо не найдено, возвращает Неопределено.
//
Функция НайтиИсходящееПисьмоПоИдентификатору(Идентификатор, УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящееПисьмо.Ссылка,
		|	ИсходящееПисьмо.Дата
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.ИдентификаторСообщения = &Идентификатор
		|	И ИсходящееПисьмо.УчетнаяЗапись = &УчетнаяЗапись
		|	И ИсходящееПисьмо.ПометкаУдаления = ЛОЖЬ");
		
	ИдентификаторУрезанный = Лев(Идентификатор, 200);	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторУрезанный);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции

// Возвращает входящее письмо по идентификатору.
// Если письмо не найдено, возвращает Неопределено.
//
Функция НайтиВходящееПисьмоПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.Дата
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.ИдентификаторСообщения = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;	
КонецФункции

// Возвращает письмо по идентификатору Outlook.
// Если письмо не найдено, возвращает Неопределено.
//
Функция НайтиПисьмоПоИдентификаторуOutlook(Идентификатор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИдентификаторыИмпортированныхПисем.Письмо.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ИдентификаторыИмпортированныхПисем КАК ИдентификаторыИмпортированныхПисем
		|ГДЕ
		|	ИдентификаторыИмпортированныхПисем.ИдентификаторИсточника = &ИдентификаторИсточника");	
		
	Запрос.УстановитьПараметр("ИдентификаторИсточника", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;	
КонецФункции

// Возвращает идентификаторы письма из заголовка
//
Функция ИдентификаторыПисьмаИзЗаголовка(Заголовок) Экспорт
		
	Результат = Новый Структура("ИдентификаторСообщения, ИдентификаторОснования");
	
	Результат.ИдентификаторОснования = ПолучитьЗначениеПоляИзЗаголовкаПисьма(
		Заголовок, 
		"In-Reply-To");
	Результат.ИдентификаторОснования = 
		РаботаСоСтроками.ВыделитьПодстрокуВСкобках(Результат.ИдентификаторОснования, "<", ">");
		
	Результат.ИдентификаторСообщения = ПолучитьЗначениеПоляИзЗаголовкаПисьма(
		Заголовок, 
		"Message-Id");
	Результат.ИдентификаторСообщения = 
		РаботаСоСтроками.ВыделитьПодстрокуВСкобках(Результат.ИдентификаторСообщения, "<", ">");
	
	Возврат Результат;	
КонецФункции

Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТаблицаАдресов, Адреса)
	
	Для каждого Адрес Из Адреса Цикл
		НайденВТаблице = Ложь;
		Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Адрес.Адрес, Адрес.ОтображаемоеИмя);
		Для Каждого Строка Из ТаблицаАдресов Цикл
			Если Строка.Адресат = Адресат Тогда
				НайденВТаблице = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не НайденВТаблице Тогда
			ТаблицаАдресовСтрока = ТаблицаАдресов.Добавить();
			ТаблицаАдресовСтрока.Адресат = Адресат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает адресат для контакта - с минимальным кодом - аналогично функции ПолучитьПочтовогоАдресата
Функция ПолучитьАдресатПоКонтакту(Контакт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|ГДЕ
		|	СведенияОбАдресатах.Контакт = &Контакт
		|
		|УПОРЯДОЧИТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения.Код";
		
	Запрос.УстановитьПараметр("Контакт", Контакт);	
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.АдресатСообщения;
		
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРАВИЛАМИ

// Применяет к письму предопределенные правила.
// Вызывается из модулей объектов ВходящееПисьмо, ИсходящееПисьмо в конце процедуры ПередЗаписью.
//
Процедура ПрименитьПравила(ПисьмоОбъект) Экспорт
	
	ПрименитьПредопределенныеПравила(ПисьмоОбъект);
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		Если ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке)
			И ПисьмоОбъект.ДополнительныеСвойства.Свойство("ВыполняетсяОтправка")
			И ПисьмоОбъект.ДополнительныеСвойства.ВыполняетсяОтправка Тогда
			ПрименитьПравилоПриОтправке(ПисьмоОбъект, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает письмо с учетом предопределенных правил.
//
Процедура ПрименитьПредопределенныеПравила(ПисьмоОбъект) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект) Тогда
		
		Если ПисьмоОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(ПисьмоОбъект.Папка) Тогда
			// Новые письма без папки помещаются в папку Входящие.
			ПисьмоОбъект.Папка = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
				ПисьмоОбъект.УчетнаяЗапись,
				Перечисления.ВидыПапокПисем.Входящие);
		КонецЕсли;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		
		Если ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке) Тогда
			// Письма, готовые к отправке помещаются в папку Исходящие.
			ПапкаДляИсходящих = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
				ПисьмоОбъект.УчетнаяЗапись,
				Перечисления.ВидыПапокПисем.Исходящие);
			Если Не ЗначениеЗаполнено(ПапкаДляИсходящих) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для учетной записи %1 не определена папка для исходящих писем.'; en = 'For account %1 folder for outgoing messages is not defined.'"),
					ПисьмоОбъект.УчетнаяЗапись);
			КонецЕсли;
			ПисьмоОбъект.Папка = ПапкаДляИсходящих;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПисьмоОбъект.Папка) Тогда
			// Письма без папки помещаются в папку Черновики.
			ПапкаДляЧерновиков = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
				ПисьмоОбъект.УчетнаяЗапись,
				Перечисления.ВидыПапокПисем.Черновики);
			Если ЗначениеЗаполнено(ПапкаДляЧерновиков) Тогда
				ПисьмоОбъект.Папка = ПапкаДляЧерновиков;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'В процедуру ""ПрименитьПредопределенныеПравила"" передан некорректный параметр.'; en = 'Invalid parameter is passed to the procedure ""ПрименитьПредопределенныеПравила""'");
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция ПрименитьПользовательскиеПравила(ПисьмоОбъект) Экспорт
	
	Если ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		Возврат ПрименитьПравилаДляВходящихПисем(ПисьмоОбъект);
	ИначеЕсли ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат ПрименитьПравилаДляИсходящихПисем(ПисьмоОбъект);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПрименитьПравилаДляВходящихПисем(ПисьмоОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаОбработкиПисем.Ссылка
		|ИЗ
		|	Справочник.ПравилаОбработкиПисем КАК ПравилаОбработкиПисем
		|ГДЕ
		|	ПравилаОбработкиПисем.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаОбработкиПисем.УчетнаяЗапись = &УчетнаяЗапись
		|	И ПравилаОбработкиПисем.ДляВходящихПисем = ИСТИНА
		|	И ПравилаОбработкиПисем.ДляИсходящихПисем = ЛОЖЬ
		|	И ПравилаОбработкиПисем.Используется = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаОбработкиПисем.Порядок";
	Запрос.УстановитьПараметр("УчетнаяЗапись", ПисьмоОбъект.УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	ДействияВыполнялись = Ложь;
	НеобходимоЗаписатьПисьмо = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияУсловийПриОбработкеПисем.Правило,
			|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия КАК Параметр,
			|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия КАК Вид,
			|	ЗначенияУсловийПриОбработкеПисем.Порядок КАК Порядок,
			|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения КАК ЭтоЗначенияИсключения,
			|	NULL КАК ТекстАвтоответа
			|ИЗ
			|	РегистрСведений.ЗначенияУсловийПриОбработкеПисем КАК ЗначенияУсловийПриОбработкеПисем
			|ГДЕ
			|	ЗначенияУсловийПриОбработкеПисем.Правило = &Правило
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия,
			|	ЗначенияУсловийПриОбработкеПисем.Правило,
			|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия,
			|	ЗначенияУсловийПриОбработкеПисем.Порядок,
			|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗначенияДействийПриОбработкеПисем.Правило,
			|	ЗначенияДействийПриОбработкеПисем.ПараметрДействия,
			|	ЗначенияДействийПриОбработкеПисем.ВидДействия,
			|	0,
			|	ЛОЖЬ,
			|	ЗначенияДействийПриОбработкеПисем.ТекстАвтоответа
			|ИЗ
			|	РегистрСведений.ЗначенияДействийПриОбработкеПисем КАК ЗначенияДействийПриОбработкеПисем
			|ГДЕ
			|	ЗначенияДействийПриОбработкеПисем.Правило = &Правило
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
		Запрос.УстановитьПараметр("Правило", Выборка.Ссылка);
		ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
				
		Если ПроверитьУсловияПравилаДляВходящих(ПисьмоОбъект, Выборка.Ссылка, ТаблицаПараметров, ПисьмоОбъект, Ложь) 
			И НЕ ПроверитьУсловияПравилаДляВходящих(ПисьмоОбъект, Выборка.Ссылка, ТаблицаПараметров, ПисьмоОбъект, Истина) Тогда
			ПрерватьВыполнениеПравил = ВыполнитьДействияПравилаДляВходящих(ПисьмоОбъект, Выборка.Ссылка, ТаблицаПараметров, ДействияВыполнялись, НеобходимоЗаписатьПисьмо);
			Если ПрерватьВыполнениеПравил Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеобходимоЗаписатьПисьмо;
	
КонецФункции

Функция ПроверитьУсловияПравилаДляВходящих(ПисьмоОбъектСсылка, Правило, ТаблицаПараметров, РеквизитыПисьма, Исключения) Экспорт
		
	Результат = Не Исключения;
	ПервоеСрабатываниеУсловия = Истина;
	
	Если Исключения = Ложь Тогда
		Связь = Перечисления.ТипыЛогическойСвязи.И;	
	Иначе
		Связь = Перечисления.ТипыЛогическойСвязи.Или;
	КонецЕсли;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл

			Отбор = Новый Структура("Вид, ЭтоЗначенияИсключения", ЗначениеПеречисления, Исключения);
			МассивСтрок = ТаблицаПараметров.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ПервоеСрабатываниеУсловия Тогда
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Истина;
				Иначе 
					Результат = Ложь;
				КонецЕсли;
				ПервоеСрабатываниеУсловия = Ложь;
			КонецЕсли;
			Если ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова Тогда
				
				РезультатПроверкиУсловия = Ложь;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ СтрНайти(НРег(РеквизитыПисьма.Тема), НРег(Строка.Параметр)) > 0;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС Тогда
				
				РезультатПроверкиУсловия = Ложь;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ СтрНайти(НРег(РеквизитыПисьма.Тема), НРег(Строка.Параметр)) = 1;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова Тогда
				
				РезультатПроверкиУсловия = Ложь;
				ПредставлениеОтправителя = ПолучитьПредставлениеИКонтактАдресата(РеквизитыПисьма.ОтправительАдресат).Представление;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ СтрНайти(НРег(РеквизитыПисьма.ОтправительАдресат.Адрес), НРег(Строка.Параметр)) > 0
						ИЛИ СтрНайти(НРег(РеквизитыПисьма.ОтправительАдресат.Наименование), НРег(Строка.Параметр)) > 0
						ИЛИ СтрНайти(НРег(ПредставлениеОтправителя), НРег(Строка.Параметр)) > 0;
				КонецЦикла;
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;	
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса Тогда
				
				РезультатПроверкиУсловия = Ложь;
				ТаблицаПолучателей = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				Для Каждого Строка Из МассивСтрок Цикл
					
					Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
						РезультатПроверкиУсловия = РезультатПроверкиУсловия
							ИЛИ СтрНайти(НРег(СтрокаПолучатель.Адрес), НРег(Строка.Параметр)) > 0
							ИЛИ СтрНайти(НРег(СтрокаПолучатель.Наименование), НРег(Строка.Параметр)) > 0
							ИЛИ СтрНайти(НРег(СтрокаПолучатель.Представление), НРег(Строка.Параметр)) > 0;	
						Если РезультатПроверкиУсловия Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;
					
					Если РезультатПроверкиУсловия Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				ИначеЕсли Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова Тогда
				
				Текст = РеквизитыПисьма.ТекстПисьмаПростойТекстХранилище.Получить();
				Если Не ЗначениеЗаполнено(Текст) Тогда
					Текст = РаботаС_HTML.ПолучитьТекстИзHTML(РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить());
					Если Не ЗначениеЗаполнено(Текст) Тогда
						Текст = РеквизитыПисьма.ТекстПисьмаРазмеченныйТекстХранилище.Получить();
						Если Не ЗначениеЗаполнено(Текст) Тогда
							Текст = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				РезультатПроверкиУсловия = Ложь;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ СтрНайти(НРег(Текст), НРег(Строка.Параметр)) > 0;
				КонецЦикла;
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;

				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода Тогда
		
				РезультатПроверкиУсловия = Ложь;
				Дата1 = Дата(1,1,1);
				Дата2 = Дата(1,1,1);
				
				Если МассивСтрок.Количество() > 0 Тогда
					Дата1 = МассивСтрок[0].Параметр;
					Если ТипЗнч(Дата1) <> Тип("Дата") Тогда
						Дата1 = Дата(1,1,1);
					КонецЕсли;
				конецЕсли;                                                                                                            
				Если МассивСтрок.Количество() > 1 Тогда
					Дата2 = МассивСтрок[1].Параметр;
					Если ТипЗнч(Дата2) <> Тип("Дата") Тогда
						Дата2 = Дата(1,1,1);
					КонецЕсли;
				КонецЕсли;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат 
						И РеквизитыПисьма.ДатаПолучения >= НачалоДня(Дата1)
						И (ЗначениеЗаполнено(Дата2) И РеквизитыПисьма.ДатаПолучения <= КонецДня(Дата2)
						ИЛИ Не ЗначениеЗаполнено(Дата2));
				Иначе
					Результат = Результат 
						ИЛИ РеквизитыПисьма.ДатаПолучения >= НачалоДня(Дата1)
						И (ЗначениеЗаполнено(Дата2) И РеквизитыПисьма.ДатаПолучения <= КонецДня(Дата2)
						ИЛИ Не ЗначениеЗаполнено(Дата2));
				КонецЕсли;
				
						
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ИмеетВложения Тогда
				
				Для Каждого Строка Из МассивСтрок Цикл
					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат 
							И (РеквизитыПисьма.ЕстьВложения И Строка.Параметр = Истина
							ИЛИ Не РеквизитыПисьма.ЕстьВложения И Строка.Параметр = Ложь);
					Иначе
						Результат = Результат 
							ИЛИ (РеквизитыПисьма.ЕстьВложения И Строка.Параметр = Истина
							ИЛИ Не РеквизитыПисьма.ЕстьВложения И Строка.Параметр = Ложь);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресованоМне Тогда
				
				ТаблицаПолучателейПисьма = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				
				Для Каждого Строка Из МассивСтрок Цикл
					
					РезультатПроверкиУсловия = Ложь;
					Для Каждого СтрокаПолучатель Из ТаблицаПолучателейПисьма Цикл
						РезультатПроверкиУсловия = РезультатПроверкиУсловия 
							ИЛИ СтрокаПолучатель.Адрес = РеквизитыПисьма.УчетнаяЗапись.АдресЭлектроннойПочты;
						Если РезультатПроверкиУсловия Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
		
					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат 
							И (РезультатПроверкиУсловия И Строка.Параметр = Истина
							ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь);
					Иначе
						Результат = Результат 
							ИЛИ (РезультатПроверкиУсловия И Строка.Параметр = Истина
							ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь);
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне Тогда
				
				ТаблицаПолучателей = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);	
				Для Каждого Строка Из МассивСтрок Цикл
					Если ТаблицаПолучателей.Количество() = 1  Тогда
						СтрокаПолучатель = ТаблицаПолучателей[0];
						РезультатПроверкиУсловия = 
							СтрокаПолучатель.Адрес = РеквизитыПисьма.УчетнаяЗапись.АдресЭлектроннойПочты;
			
						Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
							Результат = Результат
								И (РезультатПроверкиУсловия И Строка.Параметр = Истина
								ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь);
						Иначе
							Результат = Результат
								ИЛИ (РезультатПроверкиУсловия И Строка.Параметр = Истина
								ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь);
						КонецЕсли;
					Иначе
						Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
							Результат = Результат И Строка.Параметр = Ложь;
						Иначе
							Результат = Результат ИЛИ Строка.Параметр = Ложь;
						КонецЕсли;	
					КонецЕсли;		
				КонецЦикла;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СведенияОбАдресатах.Контакт
					|ИЗ
					|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
					|ГДЕ
					|	СведенияОбАдресатах.АдресатСообщения = &АдресатСообщения
					|	И ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
					|	И СведенияОбАдресатах.Активна = ИСТИНА";
					
				Запрос.УстановитьПараметр("АдресатСообщения", РеквизитыПисьма.ОтправительАдресат);
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					ВыборкаКонтакты = РезультатЗапроса.Выбрать();
					Пока ВыборкаКонтакты.Следующий() Цикл
						Для Каждого Строка Из МассивСтрок Цикл
							Группа = Строка.Параметр;
							СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставРабочейГруппы(Группа);
							РезультатПроверкиУсловия = 
								РезультатПроверкиУсловия Или СоставГруппы.Найти(ВыборкаКонтакты.Контакт) <> Неопределено;
							Если РезультатПроверкиУсловия = Истина Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если РезультатПроверкиУсловия = Истина Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;		
				КонецЕсли;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат ИЛИ РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы Тогда	
				
				РезультатПроверкиУсловия = Ложь;
	            ТаблицаПолучателей = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл					
					Для Каждого Строка Из МассивСтрок Цикл
						Группа = Строка.Параметр;
						СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставРабочейГруппы(Группа);
						РезультатПроверкиУсловия = 
							РезультатПроверкиУсловия Или СоставГруппы.Найти(СтрокаПолучатель.Контакт) <> Неопределено;
						Если РезультатПроверкиУсловия = Истина Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат ИЛИ РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				
				СписокАдресовЭлектроннойПочты = Неопределено;
				Если МассивСтрок.Количество() = 1 Тогда
					СписокАдресовЭлектроннойПочты = МассивСтрок[0].Параметр;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(РеквизитыПисьма.ОтправительАдресат) Тогда
					АдресОтправителя = РеквизитыПисьма.ОтправительАдресат.Адрес;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(АдресОтправителя) И ЗначениеЗаполнено(СписокАдресовЭлектроннойПочты) Тогда
					
					Для Каждого Строка Из СписокАдресовЭлектроннойПочты.Адреса Цикл
						
						Если НРег(Строка.Адрес) = НРег(НСтр("ru='Все внутренние адресаты'; en = 'All internal addressees'")) Тогда
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ
								|	СведенияОбАдресатах.Контакт
								|ИЗ
								|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
								|ГДЕ
								|	СведенияОбАдресатах.АдресатСообщения = &АдресатСообщения
								|	И (ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
								|			ИЛИ ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей))
								|	И СведенияОбАдресатах.Активна = ИСТИНА";
								
							Запрос.УстановитьПараметр("АдресатСообщения", РеквизитыПисьма.ОтправительАдресат);
							РезультатЗапроса = Запрос.Выполнить();
							Если Не РезультатЗапроса.Пустой() Тогда
								РезультатПроверкиУсловия = Истина;
								Прервать;
							КонецЕсли;		
							
						Иначе
							
							Если СтрНайти(НРег(АдресОтправителя), НРег(Строка.Адрес)) <> 0 Тогда
								РезультатПроверкиУсловия = Истина;
								Прервать;
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат ИЛИ РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.БылНаправленОтвет Тогда	
				
				БылНаправленОтвет = СвязиДокументов.ПолучитьСвязанныйДокумент(
					РеквизитыПисьма.Ссылка, Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо);
				Для Каждого Строка Из МассивСтрок Цикл
					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат 
							И (БылНаправленОтвет <> Неопределено И Строка.Параметр = Истина
							ИЛИ Не БылНаправленОтвет <> Неопределено И Строка.Параметр = Ложь);
					Иначе
						Результат = Результат 
							ИЛИ (БылНаправленОтвет <> Неопределено И Строка.Параметр = Истина
							ИЛИ Не БылНаправленОтвет <> Неопределено И Строка.Параметр = Ложь);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.БылоПереслано Тогда	
				
				БылоПереслано = СвязиДокументов.ПолучитьСвязанныйДокумент(
					РеквизитыПисьма.Ссылка, Справочники.ТипыСвязей.ПересланоПисьмом);
				Для Каждого Строка Из МассивСтрок Цикл
					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат 
							И (БылоПереслано <> Неопределено И Строка.Параметр = Истина
							ИЛИ Не БылоПереслано <> Неопределено И Строка.Параметр = Ложь);
					Иначе
						Результат = Результат 
							ИЛИ (БылоПереслано <> Неопределено И Строка.Параметр = Истина
							ИЛИ Не БылоПереслано <> Неопределено И Строка.Параметр = Ложь);
					КонецЕсли;
				КонецЦикла;	
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				ПапкаПисьма = РеквизитыПисьма.Папка;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = Строка.Параметр = ПапкаПисьма;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат ИЛИ РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.Проект Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				ПроектПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПисьма.Ссылка, "Проект");
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = Строка.Параметр = ПроектПисьма;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат ИЛИ РезультатПроверкиУсловия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Результат = Ложь И Связь = Перечисления.ТипыЛогическойСвязи.И
				ИЛИ Результат = Истина И Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьДействияПравилаДляВходящих(ПисьмоОбъект, Правило, ТаблицаПараметров, ДействияВыполнялись, НеобходимоЗаписатьПисьмо) Экспорт
	
	Если ТаблицаПараметров.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДействийПриОбработкеВходящихПисем Цикл
		
		Отбор = Новый Структура("Вид", ЗначениеПеречисления);
		МассивСтрок = ТаблицаПараметров.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку Тогда
			
			Для Каждого Строка Из МассивСтрок Цикл
				Если Не Строка.Параметр.ПометкаУдаления И ПисьмоОбъект.Папка <> Строка.Параметр Тогда
					ПисьмоОбъект.Папка = Строка.Параметр;
					ДействияВыполнялись = Истина;
					НеобходимоЗаписатьПисьмо = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг Тогда			
			
			Для Каждого Строка Из МассивСтрок Цикл
				Для каждого Ответственный Из ПисьмоОбъект.УчетнаяЗапись.ОтветственныеЗаОбработкуПисем Цикл
					РегистрыСведений.ФлагиОбъектов.УстановитьФлаг(
						ПисьмоОбъект.Ссылка, 
						Ответственный.Пользователь, 
						Строка.Параметр);
					ДействияВыполнялись = Истина;	
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.УстановитьПометкуПрочтения Тогда
			
			Для Каждого Строка Из МассивСтрок Цикл
				Для каждого Ответственный Из ПисьмоОбъект.УчетнаяЗапись.ОтветственныеЗаОбработкуПисем Цикл
					РегистрыСведений.СведенияОПрочтении.УстановитьСведенияОПрочтении(
						ПисьмоОбъект.Ссылка, 
						Истина, 
						Ответственный.Пользователь);
					ДействияВыполнялись = Истина;	
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом Тогда
			
			Значение = ПолучитьЗначениеПоляИзЗаголовкаПисьма(ПисьмоОбъект.ВнутреннийЗаголовок, "X-1C-AutoReply");
			Если Значение = "true" Тогда
				Продолжить;
			КонецЕсли;
	
			АдресОтправителя = НРег(ПисьмоОбъект.ОтправительАдресат.Адрес);
			Если АдресОтправителя = НРег(Правило.УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли;
				
			Если РегистрыСведений.АвтоматическиеОтветыПоАдресам.ЕстьЗаписиПоПравилуИАдресу(
					Правило,
					АдресОтправителя) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Строка Из МассивСтрок Цикл
				ИсходящееПисьмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("Команда", "Ответить");
				ЗначенияЗаполнения.Вставить("Письмо", ПисьмоОбъект.Ссылка);
				
				ИсходящееПисьмо.Заполнить(ЗначенияЗаполнения);

				ИсходящееПисьмо.УстановитьСодержаниеПисьма(Строка.ТекстАвтоответа);
				ИсходящееПисьмо.УчетнаяЗапись = ПисьмоОбъект.УчетнаяЗапись;
				
				ИсходящееПисьмо.ПодготовленоКОтправке = ТекущаяДатаСеанса();
				ИсходящееПисьмо.ДополнительныеСвойства.Вставить("ВыполняетсяОтправка", Истина);
				
				ИсходящееПисьмо.Записать();
									
				СвязиДокументов.УстановитьСвязь(
					ИсходящееПисьмо.Ссылка,
					Неопределено,
					ПисьмоОбъект.Ссылка,
					Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
					
				РегистрыСведений.АвтоматическиеОтветыПоАдресам.ДобавитьЗапись(
					Правило,
					АдресОтправителя,
					ИсходящееПисьмо.Ссылка);						
				
				ДействияВыполнялись = Истина;
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ПометитьНаУдаление Тогда
			
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("Правила_УстановитьПометкуУдаления", Истина);
			ДействияВыполнялись = Истина;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект Тогда
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого Строка Из МассивСтрок Цикл
				Если Не Строка.Параметр.ПометкаУдаления И ПисьмоОбъект.Проект <> Строка.Параметр Тогда
					ПисьмоОбъект.Проект = Строка.Параметр;
					ДействияВыполнялись = Истина;
					НеобходимоЗаписатьПисьмо = Истина;
				КонецЕсли;
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОстановитьПроверкуДругихПравил Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПрименитьПравилоПриОтправке(ПисьмоОбъект, ПрименятьДействияНаОтправляемоеПисьмо)
	
	Попытка
		Если ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			ПрименитьПравилаДляИсходящихПисем(ПисьмоОбъект, ПрименятьДействияНаОтправляемоеПисьмо);
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при обработке письма правилами: 
				|%1';
				|en = 'Error email processing rules: 
				|%1'"),
			ПодробноеПредставлениеОшибки(Инфо));
		Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, ПисьмоОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Функция ПрименитьПравилаДляИсходящихПисем(ПисьмоОбъект, ПрименятьДействияНаОтправляемоеПисьмо = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаОбработкиПисем.Ссылка
		|ИЗ
		|	Справочник.ПравилаОбработкиПисем КАК ПравилаОбработкиПисем
		|ГДЕ
		|	ПравилаОбработкиПисем.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаОбработкиПисем.УчетнаяЗапись = &УчетнаяЗапись
		|	И ПравилаОбработкиПисем.ДляВходящихПисем = ЛОЖЬ
		|	И ПравилаОбработкиПисем.ДляИсходящихПисем = ИСТИНА
		|	И ПравилаОбработкиПисем.Используется = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаОбработкиПисем.Порядок";
	Запрос.УстановитьПараметр("УчетнаяЗапись", ПисьмоОбъект.УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	ДействияВыполнялись = Ложь;
	НеобходимоЗаписатьПисьмо = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияУсловийПриОбработкеПисем.Правило,
			|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия КАК Параметр,
			|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия КАК Вид,
			|	ЗначенияУсловийПриОбработкеПисем.Порядок КАК Порядок,
			|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения КАК ЭтоЗначенияИсключения,
			|	NULL КАК ТекстАвтоответа
			|ИЗ
			|	РегистрСведений.ЗначенияУсловийПриОбработкеПисем КАК ЗначенияУсловийПриОбработкеПисем
			|ГДЕ
			|	ЗначенияУсловийПриОбработкеПисем.Правило = &Правило
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия,
			|	ЗначенияУсловийПриОбработкеПисем.Правило,
			|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия,
			|	ЗначенияУсловийПриОбработкеПисем.Порядок,
			|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗначенияДействийПриОбработкеПисем.Правило,
			|	ЗначенияДействийПриОбработкеПисем.ПараметрДействия,
			|	ЗначенияДействийПриОбработкеПисем.ВидДействия,
			|	0,
			|	ЛОЖЬ,
			|	ЗначенияДействийПриОбработкеПисем.ТекстАвтоответа
			|ИЗ
			|	РегистрСведений.ЗначенияДействийПриОбработкеПисем КАК ЗначенияДействийПриОбработкеПисем
			|ГДЕ
			|	ЗначенияДействийПриОбработкеПисем.Правило = &Правило
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
		Запрос.УстановитьПараметр("Правило", Выборка.Ссылка);
		ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
		
		ДополнительныеСвойстваОбъекта = Новый Структура;
		Если ПроверитьУсловияПравилаДляИсходящих(ПисьмоОбъект, Выборка.Ссылка, ТаблицаПараметров, ПисьмоОбъект, Ложь, ДополнительныеСвойстваОбъекта) 
			И НЕ ПроверитьУсловияПравилаДляИсходящих(ПисьмоОбъект, Выборка.Ссылка, ТаблицаПараметров, ПисьмоОбъект, Истина, ДополнительныеСвойстваОбъекта) Тогда
			
			Для Каждого КлючЗначение Из ДополнительныеСвойстваОбъекта Цикл
				ПисьмоОбъект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);	
			КонецЦикла;
			
			ПрерватьВыполнениеПравил = ВыполнитьДействияПравилаДляИсходящих(
				ПисьмоОбъект, 
				Выборка.Ссылка, 
				ТаблицаПараметров, 
				ПрименятьДействияНаОтправляемоеПисьмо, 
				ДействияВыполнялись, 
				НеобходимоЗаписатьПисьмо);
			Если ПрерватьВыполнениеПравил Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеобходимоЗаписатьПисьмо;
	
КонецФункции

Функция ПроверитьУсловияПравилаДляИсходящих(ПисьмоОбъектСсылка, Правило, ТаблицаПараметров, РеквизитыПисьма, Исключения, ДополнительныеСвойства) Экспорт
			
	Результат = Не Исключения;
	ПервоеСрабатываниеУсловия = Истина;
	
	Если Исключения = Ложь Тогда
		Связь = Перечисления.ТипыЛогическойСвязи.И;	
	Иначе
		Связь = Перечисления.ТипыЛогическойСвязи.Или;
	КонецЕсли;
			
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораИсходящихПисем Цикл
		
		Отбор = Новый Структура("Вид, ЭтоЗначенияИсключения", ЗначениеПеречисления, Исключения);
		МассивСтрок = ТаблицаПараметров.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервоеСрабатываниеУсловия Тогда
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Истина;
			Иначе 
				Результат = Ложь;
			КонецЕсли;
			ПервоеСрабатываниеУсловия = Ложь;
		КонецЕсли;

		Если ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова Тогда
			
			РезультатПроверкиУсловия = Ложь;
			Для Каждого Строка Из МассивСтрок Цикл
				РезультатПроверкиУсловия = РезультатПроверкиУсловия 
					ИЛИ СтрНайти(НРег(РеквизитыПисьма.Тема), НРег(Строка.Параметр)) > 0;
			КонецЦикла;
				
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Результат И РезультатПроверкиУсловия;
			ИначеЕсли Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
				Результат = Результат Или РезультатПроверкиУсловия;
			КонецЕсли;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС Тогда
			
			РезультатПроверкиУсловия = Ложь;
			Для Каждого Строка Из МассивСтрок Цикл
				РезультатПроверкиУсловия = РезультатПроверкиУсловия 
					ИЛИ СтрНайти(НРег(РеквизитыПисьма.Тема), НРег(Строка.Параметр)) = 1;
			КонецЦикла;
			
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Результат И РезультатПроверкиУсловия;
			Иначе
				Результат = Результат Или РезультатПроверкиУсловия;
			КонецЕсли;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса Тогда
			
			РезультатПроверкиУсловия = Ложь;
			
			Если ЗначениеЗаполнено(РеквизитыПисьма.Ссылка) Тогда
				ТаблицаПолучатели = ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(РеквизитыПисьма.Ссылка);
			Иначе
				МассивАдресатов = Новый Массив;
				Для Каждого СтрокаАдресат Из РеквизитыПисьма.ПолучателиПисьма Цикл
					Если МассивАдресатов.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивАдресатов.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаАдресат Из РеквизитыПисьма.ПолучателиКопий Цикл
					Если МассивАдресатов.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивАдресатов.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаАдресат Из РеквизитыПисьма.ПолучателиСкрытыхКопий Цикл
					Если МассивАдресатов.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивАдресатов.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеАдресатов = ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
				ТаблицаПолучатели = Новый ТаблицаЗначений;
				ТаблицаПолучатели.Колонки.Добавить("Адрес");
				ТаблицаПолучатели.Колонки.Добавить("Наименование");
				ТаблицаПолучатели.Колонки.Добавить("Представление");
				
				Для Каждого КлючЗначение Из ДанныеАдресатов Цикл
					НоваяСтрока = ТаблицаПолучатели.Добавить();
					НоваяСтрока.Адрес = КлючЗначение.Значение.Адрес;
					НоваяСтрока.Наименование = КлючЗначение.Значение.Наименование;
					НоваяСтрока.Представление = КлючЗначение.Значение.Представление;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого Строка Из МассивСтрок Цикл
				Для Каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл
					
					РезультатПроверкиУсловия = РезультатПроверкиУсловия
						ИЛИ СтрНайти(НРег(СтрокаПолучатель.Адрес), НРег(Строка.Параметр)) > 0
						ИЛИ СтрНайти(НРег(СтрокаПолучатель.Наименование), НРег(Строка.Параметр)) > 0
						ИЛИ СтрНайти(НРег(СтрокаПолучатель.Представление), НРег(Строка.Параметр)) > 0;
						
					Если РезультатПроверкиУсловия Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				
				Если РезультатПроверкиУсловия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Результат И РезультатПроверкиУсловия;
			ИначеЕсли Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
				Результат = Результат Или РезультатПроверкиУсловия;
			КонецЕсли;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей Тогда	
			
			РезультатПроверкиУсловия = Ложь;
			ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Для Каждого Строка Из МассивСтрок Цикл
				РезультатПроверкиУсловия = РезультатПроверкиУсловия 
					ИЛИ Строка.Параметр = ТекущийПользователь;
			КонецЦикла;
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Результат И РезультатПроверкиУсловия;
			ИначеЕсли Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
				Результат = Результат Или РезультатПроверкиУсловия;
			КонецЕсли;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ПересылаетВходящееПисьмо 
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ПересылаетИсходящееПисьмо Тогда
		
			Для Каждого Строка Из МассивСтрок Цикл
				СвязанныйДокумент = РеквизитыПисьма.ПисьмоОснование;
				Если РеквизитыПисьма.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
					СвязанныйДокумент = Неопределено;
				КонецЕсли;
					
				РезультатПроверкиУсловия = ЗначениеЗаполнено(СвязанныйДокумент)
					И (ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ВходящееПисьмо") 
						И ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ПересылаетВходящееПисьмо
					ИЛИ ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ИсходящееПисьмо") 
						И ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ПересылаетИсходящееПисьмо);					
						
				РезультатПроверкиУсловия = 
					РезультатПроверкиУсловия И Строка.Параметр = Истина
					ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь;	
						
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				ИначеЕсли Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
				Если Результат Тогда
					ДополнительныеСвойства.Вставить("Пересылает", Не Исключения);			
				КонецЕсли;
				
			КонецЦикла;		
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ЯвляетсяОтветомНаПисьмо Тогда
						
			Для Каждого Строка Из МассивСтрок Цикл
				СвязанныйДокумент = РеквизитыПисьма.ПисьмоОснование;
				Если РеквизитыПисьма.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
					СвязанныйДокумент = Неопределено;
				КонецЕсли;

				РезультатПроверкиУсловия = ЗначениеЗаполнено(СвязанныйДокумент);					
				
				РезультатПроверкиУсловия = 
					РезультатПроверкиУсловия И Строка.Параметр = Истина
					ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И 
						(РезультатПроверкиУсловия И Строка.Параметр = Истина
						ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь);
				ИначеЕсли Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
					Результат = Результат ИЛИ 
						(РезультатПроверкиУсловия И Строка.Параметр = Истина
						ИЛИ Не РезультатПроверкиУсловия И Строка.Параметр = Ложь);
				КонецЕсли;
					
				Если Результат Тогда
					ДополнительныеСвойства.Вставить("Ответ", Не Исключения);			
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы Тогда	
			
			РезультатПроверкиУсловия = Ложь;
			
			Если ЗначениеЗаполнено(РеквизитыПисьма.Ссылка) Тогда
				ТаблицаПолучатели = ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(РеквизитыПисьма.Ссылка);
			Иначе
				МассивАдресатов = Новый Массив;
				Для Каждого СтрокаАдресат Из РеквизитыПисьма.ПолучателиПисьма Цикл
					Если МассивАдресатов.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивАдресатов.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаАдресат Из РеквизитыПисьма.ПолучателиКопий Цикл
					Если МассивАдресатов.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивАдресатов.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаАдресат Из РеквизитыПисьма.ПолучателиСкрытыхКопий Цикл
					Если МассивАдресатов.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивАдресатов.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеАдресатов = ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
				ТаблицаПолучатели = Новый ТаблицаЗначений;
				ТаблицаПолучатели.Колонки.Добавить("Адрес");
				ТаблицаПолучатели.Колонки.Добавить("Наименование");
				ТаблицаПолучатели.Колонки.Добавить("Представление");
				ТаблицаПолучатели.Колонки.Добавить("Контакт");
				
				Для Каждого КлючЗначение Из ДанныеАдресатов Цикл
					НоваяСтрока = ТаблицаПолучатели.Добавить();
					НоваяСтрока.Адрес = КлючЗначение.Значение.Адрес;
					НоваяСтрока.Наименование = КлючЗначение.Значение.Наименование;
					НоваяСтрока.Представление = КлючЗначение.Значение.Представление;
					НоваяСтрока.Контакт = КлючЗначение.Значение.Контакт;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл					
				Для Каждого Строка Из МассивСтрок Цикл
					Группа = Строка.Параметр;
					СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставРабочейГруппы(Группа);
					РезультатПроверкиУсловия = 
						РезультатПроверкиУсловия Или СоставГруппы.Найти(СтрокаПолучатель.Контакт) <> Неопределено;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если РезультатПроверкиУсловия = Истина Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Результат И РезультатПроверкиУсловия;
			Иначе
				Результат = Результат ИЛИ РезультатПроверкиУсловия;
			КонецЕсли;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова Тогда
			
			Текст = РеквизитыПисьма.ТекстХранилище.Получить();
			Если Не ЗначениеЗаполнено(Текст) Тогда
				Текст = РаботаС_HTML.ПолучитьТекстИзHTML(РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить());
				Если Не ЗначениеЗаполнено(Текст) Тогда
					Текст = "";
				КонецЕсли;
			КонецЕсли;
			РезультатПроверкиУсловия = Ложь;
			Для Каждого Строка Из МассивСтрок Цикл
				РезультатПроверкиУсловия = РезультатПроверкиУсловия 
					ИЛИ СтрНайти(НРег(Текст), НРег(Строка.Параметр)) > 0;
			КонецЦикла;
			Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
				Результат = Результат И РезультатПроверкиУсловия;
			Иначе
				Результат = Результат Или РезультатПроверкиУсловия;
			КонецЕсли;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.БылНаправленОтвет Тогда	
				
			БылНаправленОтвет = СвязиДокументов.ПолучитьСвязанныйДокумент(
				РеквизитыПисьма.Ссылка, Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
			Для Каждого Строка Из МассивСтрок Цикл
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат 
						И (БылНаправленОтвет <> Неопределено И Строка.Параметр = Истина
						ИЛИ Не БылНаправленОтвет <> Неопределено И Строка.Параметр = Ложь);
				Иначе
					Результат = Результат 
						ИЛИ (БылНаправленОтвет <> Неопределено И Строка.Параметр = Истина
						ИЛИ Не БылНаправленОтвет <> Неопределено И Строка.Параметр = Ложь);
				КонецЕсли;
			КонецЦикла;
				
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.БылоПереслано Тогда	
			
			БылоПереслано = СвязиДокументов.ПолучитьСвязанныйДокумент(
				РеквизитыПисьма.Ссылка, Справочники.ТипыСвязей.ПересылкаПисьма);
			Для Каждого Строка Из МассивСтрок Цикл
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат 
						И (БылоПереслано <> Неопределено И Строка.Параметр = Истина
						ИЛИ Не БылоПереслано <> Неопределено И Строка.Параметр = Ложь);
				Иначе
					Результат = Результат 
						ИЛИ (БылоПереслано <> Неопределено И Строка.Параметр = Истина
						ИЛИ Не БылоПереслано <> Неопределено И Строка.Параметр = Ложь);
				КонецЕсли;
			КонецЦикла;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораИсходящихПисем.Проект Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				ПроектПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПисьма.Ссылка, "Проект");
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = Строка.Параметр = ПроектПисьма;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат ИЛИ РезультатПроверкиУсловия;
				КонецЕсли;
			
		КонецЕсли;
		
		Если Результат = Ложь И Связь = Перечисления.ТипыЛогическойСвязи.И
			ИЛИ Результат = Истина И Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьДействияПравилаДляИсходящих(ПисьмоОбъект, Правило, ТаблицаПараметров, ПрименятьДействияНаОтправляемоеПисьмо = Истина, ДействияВыполнялись, НеобходимоЗаписатьПисьмо) Экспорт
	
	Если ТаблицаПараметров.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДействийПриОбработкеИсходящихПисем Цикл
		
		Отбор = Новый Структура("Вид", ЗначениеПеречисления);
		МассивСтрок = ТаблицаПараметров.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;		 
		
		Если ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку
			И ПрименятьДействияНаОтправляемоеПисьмо Тогда
			
			Для Каждого Строка Из МассивСтрок Цикл
				Если Не Строка.Параметр.ПометкаУдаления И ПисьмоОбъект.Папка <> Строка.Параметр Тогда
					ПисьмоОбъект.Папка = Строка.Параметр;
					ДейсвияВыполнялись = Истина;
					НеобходимоЗаписатьПисьмо = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг 
			И ПрименятьДействияНаОтправляемоеПисьмо Тогда			
			
			Для Каждого Строка Из МассивСтрок Цикл
				Для каждого Ответственный Из ПисьмоОбъект.УчетнаяЗапись.ОтветственныеЗаОбработкуПисем Цикл
					РегистрыСведений.ФлагиОбъектов.УстановитьФлаг(
						ПисьмоОбъект.Ссылка, 
						Ответственный.Пользователь, 
						Строка.Параметр);
					ДействияВыполнялись = Истина;
				КонецЦикла;
			КонецЦикла;
				
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку Тогда
			
			Для Каждого Строка Из МассивСтрок Цикл 
				Если Строка.Параметр.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				СвязанныйДокумент = Неопределено;
				СвязанныйДокументОтвет = Неопределено;
				СвязанныйДокументПересылка = Неопределено;
				Если Не ПисьмоОбъект.ДополнительныеСвойства.Свойство("Ответ") Тогда
					СвязанныйДокументОтвет = ПисьмоОбъект.ПисьмоОснование;
					Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
						СвязанныйДокументОтвет = Неопределено;
					КонецЕсли;					
				КонецЕсли;
						
				Если Не ПисьмоОбъект.ДополнительныеСвойства.Свойство("Пересылает") Тогда
					СвязанныйДокументПересылка = ПисьмоОбъект.ПисьмоОснование;
					Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
						СвязанныйДокументПересылка = Неопределено;
					КонецЕсли;
				КонецЕсли;
					
				СвязанныйДокумент = 
					?(ЗначениеЗаполнено(СвязанныйДокументОтвет), СвязанныйДокументОтвет,
						?(ЗначениеЗаполнено(СвязанныйДокументПересылка), СвязанныйДокументПересылка, Неопределено));
						
				Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Пересылает")
					И ПисьмоОбъект.ДополнительныеСвойства.Пересылает Тогда
					
					СвязанныйДокумент = ПисьмоОбъект.ПисьмоОснование;
					Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
						СвязанныйДокумент = Неопределено;
					КонецЕсли;
				КонецЕсли;
					
				Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Ответ")
					И ПисьмоОбъект.ДополнительныеСвойства.Ответ Тогда 						
					СвязанныйДокумент = ПисьмоОбъект.ПисьмоОснование;
					Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
						СвязанныйДокумент = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
					ЗаблокироватьДанныеДляРедактирования(СвязанныйДокумент);	
					ИсходноеПисьмоОбъект = СвязанныйДокумент.ПолучитьОбъект();
					Если ИсходноеПисьмоОбъект.Папка <> Строка.Параметр Тогда
						ИсходноеПисьмоОбъект.Папка = Строка.Параметр;
						ИсходноеПисьмоОбъект.Записать();
						РазблокироватьДанныеДляРедактирования(СвязанныйДокумент);
						ДействияВыполнялись = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект Тогда
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого Строка Из МассивСтрок Цикл
				Если Не Строка.Параметр.ПометкаУдаления И ПисьмоОбъект.Проект <> Строка.Параметр Тогда
					ПисьмоОбъект.Проект = Строка.Параметр;
					ДействияВыполнялись = Истина;
					НеобходимоЗаписатьПисьмо = Истина;
				КонецЕсли;
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.ПрименитьКИсходномуПисьмуПравила Тогда
			 
			СвязанныйДокумент = Неопределено;
			СвязанныйДокументОтвет = Неопределено;
			СвязанныйДокументПересылка = Неопределено;
			Если Не ПисьмоОбъект.ДополнительныеСвойства.Свойство("Ответ") Тогда
				СвязанныйДокументОтвет = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
					СвязанныйДокументОтвет = Неопределено;
				КонецЕсли;					
			КонецЕсли;
					
			Если Не ПисьмоОбъект.ДополнительныеСвойства.Свойство("Пересылает") Тогда
				СвязанныйДокументПересылка = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
					СвязанныйДокументПересылка = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			СвязанныйДокумент = 
				?(ЗначениеЗаполнено(СвязанныйДокументОтвет), СвязанныйДокументОтвет,
					?(ЗначениеЗаполнено(СвязанныйДокументПересылка), СвязанныйДокументПересылка, Неопределено));
					
			Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Пересылает")
				И ПисьмоОбъект.ДополнительныеСвойства.Пересылает Тогда
				
				СвязанныйДокумент = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
					СвязанныйДокумент = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Ответ")
				И ПисьмоОбъект.ДополнительныеСвойства.Ответ Тогда 						
				СвязанныйДокумент = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
					СвязанныйДокумент = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
					
				Для Каждого Строка Из МассивСтрок Цикл
					Если Строка.Параметр.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли;
					Если РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПисьму(Строка.Параметр, СвязанныйДокумент) Тогда					
						НаборЗаписей = РегистрыСведений.ЗначенияДействийПриОбработкеПисем.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Правило.Установить(Строка.Параметр);
						НаборЗаписей.Отбор.ВидДействия.Установить(Перечисления.ВидыДействийПриОбработкеИсходящихПисем.ОстановитьПроверкуДругихПравил);
						НаборЗаписей.Прочитать();
						НеобходимоПрервать = Ложь;
						Для Каждого Запись Из НаборЗаписей Цикл
							НеобходимоПрервать = Запись.ПараметрДействия;								
							Если НеобходимоПрервать Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НеобходимоПрервать Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВПапкуИсходногоПисьма 
			И ПрименятьДействияНаОтправляемоеПисьмо Тогда
			
			СвязанныйДокумент = Неопределено;
			СвязанныйДокументОтвет = Неопределено;
			СвязанныйДокументПересылка = Неопределено;
			Если Не ПисьмоОбъект.ДополнительныеСвойства.Свойство("Ответ") Тогда
				СвязанныйДокументОтвет = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
					СвязанныйДокументОтвет = Неопределено;
				КонецЕсли;					
			КонецЕсли;
					
			Если Не ПисьмоОбъект.ДополнительныеСвойства.Свойство("Пересылает") Тогда
				СвязанныйДокументПересылка = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
					СвязанныйДокументПересылка = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			СвязанныйДокумент = 
				?(ЗначениеЗаполнено(СвязанныйДокументОтвет), СвязанныйДокументОтвет,
					?(ЗначениеЗаполнено(СвязанныйДокументПересылка), СвязанныйДокументПересылка, Неопределено));
					
			Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Пересылает")
				И ПисьмоОбъект.ДополнительныеСвойства.Пересылает Тогда
				
				СвязанныйДокумент = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
					СвязанныйДокумент = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Ответ")
				И ПисьмоОбъект.ДополнительныеСвойства.Ответ Тогда 						
				СвязанныйДокумент = ПисьмоОбъект.ПисьмоОснование;
				Если ПисьмоОбъект.ТипОтвета <> Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
					СвязанныйДокумент = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
				Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент, "Папка");
				Если Не Папка.ПометкаУдаления И ПисьмоОбъект.Папка <> Папка Тогда
					ПисьмоОбъект.Папка = Папка;
					ДействияВыполнялись = Истина;
					НеобходимоЗаписатьПисьмо = Истина;
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыДействийПриОбработкеИсходящихПисем.ОстановитьПроверкуДругихПравил Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет настройки оповещения о новых письмах у пользователей, ответственных за учетную запись письма, 
// если настройки включены, то выполняется проверка письма на удовлетворение правилам оповещения, если они заданы.
// В случае удовлетворения правилам письмо заносится в регистр ОповещенияОПисьмах 
// Параметры:
//  ПисьмоОбъект - ВходящееПисьмо - проверяемое письмо.
//
Процедура ПрименитьПравилаОповещенияДляВходящихПисем(ПисьмоОбъект)
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь,
			|	&Письмо КАК Письмо
			|ПОМЕСТИТЬ Пользователи
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
			|ГДЕ
			|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка = &УчетнаяЗапись
			|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
			|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Пользователь КАК Пользователь,
			|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтен
			|ПОМЕСТИТЬ ПользователиИПрочтение
			|ИЗ
			|	Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
			|		ПО Пользователи.Пользователь = СведенияОПрочтении.Пользователь
			|			И Пользователи.Письмо = СведенияОПрочтении.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиИПрочтение.Пользователь,
			|	НастройкиОповещенийОПисьмах.ПоказыватьСписокОповещений
			|ИЗ
			|	ПользователиИПрочтение КАК ПользователиИПрочтение
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОповещенийОПисьмах КАК НастройкиОповещенийОПисьмах
			|		ПО ПользователиИПрочтение.Пользователь = НастройкиОповещенийОПисьмах.Пользователь
			|			И (&УчетнаяЗапись = НастройкиОповещенийОПисьмах.УчетнаяЗапись)
			|ГДЕ
			|	НастройкиОповещенийОПисьмах.ПоказыватьСписокОповещений
			|	И НЕ ПользователиИПрочтение.Прочтен";
			
	Запрос.УстановитьПараметр("УчетнаяЗапись", ПисьмоОбъект.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Письмо", ПисьмоОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		Пользователь = Выборка.Пользователь;	
					
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УсловияОповещенийОПисьмах.ВидУсловия,
			|	УсловияОповещенийОПисьмах.ЗначениеУсловия,
			|	УсловияОповещенийОПисьмах.ЭтоИсключение
			|ИЗ
			|	РегистрСведений.УсловияОповещенийОПисьмах КАК УсловияОповещенийОПисьмах
			|ГДЕ
			|	УсловияОповещенийОПисьмах.Пользователь = &Пользователь
			|	И УсловияОповещенийОПисьмах.УчетнаяЗапись = &УчетнаяЗапись";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("УчетнаяЗапись", ПисьмоОбъект.УчетнаяЗапись);				
		ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаПараметров.Количество() > 0 Тогда 
			Если ПроверитьПравилаОповещенияДляВходящих(ПисьмоОбъект, ТаблицаПараметров, ПисьмоОбъект, Ложь) 
				И Не ПроверитьПравилаОповещенияДляВходящих(ПисьмоОбъект, ТаблицаПараметров, ПисьмоОбъект, Истина) Тогда  
				РегистрыСведений.ОповещенияОПисьмах.Записать(ПисьмоОбъект.Ссылка, Пользователь);
			КонецЕсли;
		Иначе 
			РегистрыСведений.ОповещенияОПисьмах.Записать(ПисьмоОбъект.Ссылка, Пользователь);						
		КонецЕсли;	

	КонецЦикла;
	
КонецПроцедуры

// Проверяет письмо на удовлетворение/не удовлетворение заданным правилам/исключениям оповещения о новом письме
// Параметры:
//  ПисьмоОбъектСсылка - ВходящееПисьмо - проверяемое письмо
//  ТаблицаПараметров  - Таблица значений - содержит правила и исключения оповещений о новых письмах
//  РеквизитыПисьма	   - ВходящееПисьмо - реквизиты проверяемого письма
//  Исключения 		   - Булево - истина, если проверяются исключения из правил.
//
// Возвращаемое значение:
//  Истина - Булево - если письмо удовлетворяет заданным правилам оповещения о новом письме.
//
Функция ПроверитьПравилаОповещенияДляВходящих(ПисьмоОбъектСсылка, ТаблицаПараметров, РеквизитыПисьма, Исключения) 
	
	Результат = Не Исключения;
	ПервоеСрабатываниеУсловия = Истина;
	
	Если Исключения = Ложь Тогда
		Связь = Перечисления.ТипыЛогическойСвязи.И;	
	Иначе
		Связь = Перечисления.ТипыЛогическойСвязи.Или;
	КонецЕсли;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл

			Отбор = Новый Структура("ВидУсловия, ЭтоИсключение", ЗначениеПеречисления, Исключения);
			МассивСтрок = ТаблицаПараметров.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ПервоеСрабатываниеУсловия Тогда
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Истина;
				Иначе 
					Результат = Ложь;
				КонецЕсли;
				ПервоеСрабатываниеУсловия = Ложь;
			КонецЕсли;
			Если ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова Тогда
				
				РезультатПроверкиУсловия = Ложь;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ Найти(НРег(РеквизитыПисьма.Тема), НРег(Строка.ЗначениеУсловия)) > 0;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;

			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС Тогда
				
				РезультатПроверкиУсловия = Ложь;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ Найти(НРег(РеквизитыПисьма.Тема), НРег(Строка.ЗначениеУсловия)) = 1;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;

			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова Тогда
				
				РезультатПроверкиУсловия = Ложь;
				ПредставлениеОтправителя = ПолучитьПредставлениеИКонтактАдресата(РеквизитыПисьма.ОтправительАдресат).Представление;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ Найти(НРег(РеквизитыПисьма.ОтправительАдресат.Адрес), НРег(Строка.ЗначениеУсловия)) > 0
						ИЛИ Найти(НРег(РеквизитыПисьма.ОтправительАдресат.Наименование), НРег(Строка.ЗначениеУсловия)) > 0
						ИЛИ Найти(НРег(ПредставлениеОтправителя), НРег(Строка.ЗначениеУсловия)) > 0;
				КонецЦикла;
					
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
								
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса Тогда
				
				РезультатПроверкиУсловия = Ложь;
				ТаблицаПолучателей = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				Для Каждого Строка Из МассивСтрок Цикл
					
					Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
						РезультатПроверкиУсловия = РезультатПроверкиУсловия
							ИЛИ Найти(НРег(СтрокаПолучатель.Адрес), НРег(Строка.ЗначениеУсловия)) > 0
							ИЛИ Найти(НРег(СтрокаПолучатель.Наименование), НРег(Строка.ЗначениеУсловия)) > 0
							ИЛИ Найти(НРег(СтрокаПолучатель.Представление), НРег(Строка.ЗначениеУсловия)) > 0;	
						Если РезультатПроверкиУсловия Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;
					
					Если РезультатПроверкиУсловия Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;

				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова Тогда
				
				Текст = РеквизитыПисьма.ТекстПисьмаПростойТекстХранилище.Получить();
				Если Не ЗначениеЗаполнено(Текст) Тогда
					Текст = РаботаС_HTML.ПолучитьТекстИзHTML(РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить());
					Если Не ЗначениеЗаполнено(Текст) Тогда
						Текст = РеквизитыПисьма.ТекстПисьмаРазмеченныйТекстХранилище.Получить();
						Если Не ЗначениеЗаполнено(Текст) Тогда
							Текст = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				РезультатПроверкиУсловия = Ложь;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = РезультатПроверкиУсловия 
						ИЛИ Найти(НРег(Текст), НРег(Строка.ЗначениеУсловия)) > 0;
				КонецЦикла;

				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;

			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода Тогда
		
				РезультатПроверкиУсловия = Ложь;
				Дата1 = Дата(1,1,1);
				Дата2 = Дата(1,1,1);
				
				Если МассивСтрок.Количество() > 0 Тогда
					Дата1 = МассивСтрок[0].ЗначениеУсловия;
					Если ТипЗнч(Дата1) <> Тип("Дата") Тогда
						Дата1 = Дата(1,1,1);
					КонецЕсли;
				конецЕсли;                                                                                                            
				Если МассивСтрок.Количество() > 1 Тогда
					Дата2 = МассивСтрок[1].ЗначениеУсловия;
					Если ТипЗнч(Дата2) <> Тип("Дата") Тогда
						Дата2 = Дата(1,1,1);
					КонецЕсли;
				КонецЕсли;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат 
						И РеквизитыПисьма.ДатаПолучения >= НачалоДня(Дата1)
						И (ЗначениеЗаполнено(Дата2) И РеквизитыПисьма.ДатаПолучения <= КонецДня(Дата2)
						ИЛИ Не ЗначениеЗаполнено(Дата2));
				Иначе
					Результат = Результат 
						ИЛИ РеквизитыПисьма.ДатаПолучения >= НачалоДня(Дата1)
						И (ЗначениеЗаполнено(Дата2) И РеквизитыПисьма.ДатаПолучения <= КонецДня(Дата2)
						ИЛИ Не ЗначениеЗаполнено(Дата2));
				КонецЕсли;
											
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ИмеетВложения Тогда
				
				Для Каждого Строка Из МассивСтрок Цикл
					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат                    
							И (РеквизитыПисьма.ЕстьВложения И Строка.ЗначениеУсловия = Истина
							ИЛИ Не РеквизитыПисьма.ЕстьВложения И Строка.ЗначениеУсловия = Ложь);
					Иначе
						Результат = Результат 
							ИЛИ (РеквизитыПисьма.ЕстьВложения И Строка.ЗначениеУсловия = Истина
							ИЛИ Не РеквизитыПисьма.ЕстьВложения И Строка.ЗначениеУсловия = Ложь);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресованоМне Тогда
				
				ТаблицаПолучателейПисьма = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				
				Для Каждого Строка Из МассивСтрок Цикл
					
					РезультатПроверкиУсловия = Ложь;
					Для Каждого СтрокаПолучатель Из ТаблицаПолучателейПисьма Цикл
						РезультатПроверкиУсловия = РезультатПроверкиУсловия 
							ИЛИ СтрокаПолучатель.Адрес = РеквизитыПисьма.УчетнаяЗапись.АдресЭлектроннойПочты;
						Если РезультатПроверкиУсловия Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
		
					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат 
							И (РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Истина
							ИЛИ Не РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Ложь);
					Иначе
						Результат = Результат 
							ИЛИ (РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Истина
							ИЛИ Не РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Ложь);
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне Тогда
				
				ТаблицаПолучателейПисьма = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = Ложь;
					
					Если ТаблицаПолучателейПисьма.Количество() = 1 Тогда
						РезультатПроверкиУсловия = РезультатПроверкиУсловия 
							ИЛИ ТаблицаПолучателейПисьма[0].Адрес = РеквизитыПисьма.УчетнаяЗапись.АдресЭлектроннойПочты;
					КонецЕсли;

					Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
						Результат = Результат
							И (РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Истина
							ИЛИ Не РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Ложь);
					Иначе
						Результат = Результат
							ИЛИ (РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Истина
							ИЛИ Не РезультатПроверкиУсловия И Строка.ЗначениеУсловия = Ложь);
					КонецЕсли;
				КонецЦикла;
			
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СведенияОбАдресатах.Контакт
					|ИЗ
					|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
					|ГДЕ
					|	СведенияОбАдресатах.АдресатСообщения = &АдресатСообщения
					|	И ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)";
					
				Запрос.УстановитьПараметр("АдресатСообщения", РеквизитыПисьма.ОтправительАдресат);
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					ВыборкаКонтакты = РезультатЗапроса.Выбрать();
					Пока ВыборкаКонтакты.Следующий() Цикл
						Для Каждого Строка Из МассивСтрок Цикл
							Группа = Строка.ЗначениеУсловия;
							СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставРабочейГруппы(Группа);
							РезультатПроверкиУсловия = 
								РезультатПроверкиУсловия Или СоставГруппы.Найти(ВыборкаКонтакты.Контакт) <> Неопределено;
							Если РезультатПроверкиУсловия = Истина Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если РезультатПроверкиУсловия = Истина Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;		
				КонецЕсли;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				ТаблицаПолучателей = ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(РеквизитыПисьма.Ссылка);
				Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл					
					Для Каждого Строка Из МассивСтрок Цикл
						Группа = Строка.ЗначениеУсловия;
						СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставРабочейГруппы(Группа);
						РезультатПроверкиУсловия = 
							РезультатПроверкиУсловия Или СоставГруппы.Найти(СтрокаПолучатель.Контакт) <> Неопределено;
						Если РезультатПроверкиУсловия = Истина Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				
				СписокАдресовЭлектроннойПочты = Неопределено;
				Если МассивСтрок.Количество() = 1 Тогда
					СписокАдресовЭлектроннойПочты = МассивСтрок[0].ЗначениеУсловия;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(РеквизитыПисьма.ОтправительАдресат) Тогда
					АдресОтправителя = РеквизитыПисьма.ОтправительАдресат.Адрес;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(АдресОтправителя) И ЗначениеЗаполнено(СписокАдресовЭлектроннойПочты) Тогда
					
					Для Каждого Строка Из СписокАдресовЭлектроннойПочты.Адреса Цикл
						
						Если НРег(Строка.Адрес) = НРег(НСтр("ru='Все внутренние адресаты'; en = 'All internal addressees'")) Тогда
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ
								|	СведенияОбАдресатах.Контакт
								|ИЗ
								|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
								|ГДЕ
								|	СведенияОбАдресатах.АдресатСообщения = &АдресатСообщения
								|	И (ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
								|			ИЛИ ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей))";
								
							Запрос.УстановитьПараметр("АдресатСообщения", РеквизитыПисьма.ОтправительАдресат);
							РезультатЗапроса = Запрос.Выполнить();
							Если Не РезультатЗапроса.Пустой() Тогда
								РезультатПроверкиУсловия = Истина;
								Прервать;
							КонецЕсли;		
							
						Иначе
							
							Если Найти(НРег(АдресОтправителя), НРег(Строка.Адрес)) <> 0 Тогда
								РезультатПроверкиУсловия = Истина;
								Прервать;
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке Тогда	
				
				РезультатПроверкиУсловия = Ложь;
				ПапкаПисьма = РеквизитыПисьма.Папка;
				Для Каждого Строка Из МассивСтрок Цикл
					РезультатПроверкиУсловия = Строка.ЗначениеУсловия = ПапкаПисьма;
					Если РезультатПроверкиУсловия = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Связь = Перечисления.ТипыЛогическойСвязи.И Тогда
					Результат = Результат И РезультатПроверкиУсловия;
				Иначе
					Результат = Результат Или РезультатПроверкиУсловия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Результат = Ложь И Связь = Перечисления.ТипыЛогическойСвязи.И
				ИЛИ Результат = Истина И Связь = Перечисления.ТипыЛогическойСвязи.Или Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПИСЬМАМИ

// Возвращает представление письма.
//
Функция ПолучитьПредставлениеПисьма(ПисьмоОбъект) Экспорт
	
	Если ПустаяСтрока(ПисьмоОбъект.Тема) Тогда
		Тема = НСтр("ru = 'без темы'; en = 'no subject'");
	Иначе
		Тема = ПисьмоОбъект.Тема;
	КонецЕсли;
	
	Представление = "";
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект.Ссылка) Тогда
		ВидПисьма = НСтр("ru = 'Входящее письмо'; en = 'Incoming email'");
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект.Ссылка) Тогда
		ВидПисьма = НСтр("ru = 'Исходящее письмо'; en = 'Outgoing email'");
	КонецЕсли;
	
	Если ПисьмоОбъект.Ссылка.Пустая() Тогда
		Представление = ВидПисьма;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Представление,
			" ",
			ВКавычках(НСтр("ru = 'создание'; en = 'creating'"),"(",")"))
	Иначе
		Представление = Тема;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Представление,
			" ",
			ВКавычках(ВидПисьма,"(",")"))
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Устанавливает значение реквизита Папка в письме.
// Возвращает: Истина - если удалось установить папку для письма, иначе Ложь.
//
Функция УстановитьПапкуПисьма(ПисьмоОбъект, Папка, СообщениеОбОшибке)
	
	СообщениеОбОшибке = "";
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ПисьмоОбъект.Папка) Тогда
		
		Права = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ПисьмоОбъект.Ссылка, ТекущийПользователь);
		Если Не Права.Изменение Тогда
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет прав на изменение письма ""%1"".'; en = 'You do not have permissions to modify the email ""%1"".'"),
				Строка(ПисьмоОбъект));
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПисьмоОбъект.Папка = Папка;
	
	Возврат Истина;
	
КонецФункции

// Помещает письма в указанную папку писем.
// Возвращает результат переноса в виде структуры:
// - НеПеренесенныеПисьма (Массив)
//
Функция ПоместитьПисьмаВПапку(МассивПисем, Папка) Экспорт
	
	РезультатПереноса = Новый Структура("НеПеренесенныеПисьма, Ошибки", Новый Массив, Новый Массив);
	
	Для каждого Письмо Из МассивПисем Цикл
		СообщениеОбОшибке = "";
		Если Не ПоместитьПисьмоВПапку(Письмо, Папка, СообщениеОбОшибке) Тогда
			
			НеПеренесенноеПисьмо = Новый Структура("Письмо, СообщениеОбОшибке");
			НеПеренесенноеПисьмо.Письмо = Письмо;
			НеПеренесенноеПисьмо.СообщениеОбОшибке = СообщениеОбОшибке;
			РезультатПереноса.НеПеренесенныеПисьма.Добавить(НеПеренесенноеПисьмо);
			РезультатПереноса.Ошибки.Добавить(СообщениеОбОшибке);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Перенос писем в папку.Ошибка'; en = 'Transferring emails to folder.Error'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,, 
				Письмо,
				СообщениеОбОшибке);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПереноса;
	
КонецФункции

// Помещает письмо в указанную папку
Функция ПоместитьПисьмоВПапку(Письмо, Папка, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	
	Попытка
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		ПисьмоОбъект.Заблокировать();
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Если Не УстановитьПапкуПисьма(ПисьмоОбъект, Папка, СообщениеОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПисьмоОбъект.Записать();
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Помещает письма в папку Корзина учетной записи.
// Возвращает результат переноса в виде структуры:
// - НеПеренесенныеПисьма (Массив)
//
Функция ПоместитьПисьмаВКорзину(МассивПисем) Экспорт
	
	РезультатПереноса = Новый Структура("НеПеренесенныеПисьма", Новый Массив);
	
	Для каждого Письмо Из МассивПисем Цикл
		СообщениеОбОшибке = "";
		Если Не ПоместитьПисьмоВКорзину(Письмо, СообщениеОбОшибке) Тогда
			РезультатПереноса.НеПеренесенныеПисьма.Добавить(Письмо);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПереноса;
	
КонецФункции

// Помещает письмо в папку Корзина учетной записи.
//
Функция ПоместитьПисьмоВКорзину(Письмо, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Письмо);
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	УчетнаяЗапись = ПисьмоОбъект.УчетнаяЗапись;
	Корзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(УчетнаяЗапись, Перечисления.ВидыПапокПисем.Корзина);
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		Если ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке) Тогда
			ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не УстановитьПапкуПисьма(ПисьмоОбъект, Корзина, СообщениеОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПисьмоОбъект.Записать();
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак доступности письма текущему пользователю.
//
Функция ПисьмоДоступно(Письмо) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Письма.Ссылка
			|ИЗ
			|	Документ.ВходящееПисьмо КАК Письма
			|ГДЕ
			|	Письма.Ссылка = &Ссылка");
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Письма.Ссылка
			|ИЗ
			|	Документ.ИсходящееПисьмо КАК Письма
			|ГДЕ
			|	Письма.Ссылка = &Ссылка");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Письмо);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОЛИЧЕСТВОМ ПИСЕМ В ПАПКАХ

// Возвращает данные о представлении папок писем, доступных пользователю,
// с учетом настроек отображения папок в списке.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - адрес которого нужно получить
//
// Возвращаемое значение:
//    Соответствие = Ключ - Папка,  
//    Значение - Структура (Представление ВариантОтображенияКоличестваПисем Всего Прочтено Количество Выделена ПолныйПутьСРодителями)
//
Функция ПолучитьСведенияОПапках(Знач Пользователь = Неопределено, Знач РежимМоиПапки = Ложь,
	МассивПапок = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"%ВыборДоступныеПапки%
		|
		|%ОтборМоиПапки%
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоличествоПисемВПапках.Папка КАК Папка,
		|	КоличествоПисемВПапках.Прочтено КАК Прочтено,
		|	КоличествоПисемВПапках.Всего КАК Всего
		|ПОМЕСТИТЬ КоличествоПисемВПапках
		|ИЗ
		|	РегистрСведений.КоличествоПисемВПапках КАК КоличествоПисемВПапках
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеПапки КАК ДоступныеПапки
		|		ПО КоличествоПисемВПапках.Папка = ДоступныеПапки.Папка
		|ГДЕ
		|	КоличествоПисемВПапках.Пользователь = &Пользователь
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеПапки.Папка КАК Папка
		|ПОМЕСТИТЬ НерассчитанныеПапки
		|ИЗ
		|	ДоступныеПапки КАК ДоступныеПапки
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПисемВПапках КАК КоличествоПисемВПапках
		|		ПО (КоличествоПисемВПапках.Папка = ДоступныеПапки.Папка)
		|ГДЕ
		|	КоличествоПисемВПапках.Папка ЕСТЬ NULL 
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеПапки.Папка,
		|	ДоступныеПапки.Наименование,
		|	ДоступныеПапки.ВариантОтображенияКоличестваПисем
		|ИЗ
		|	ДоступныеПапки КАК ДоступныеПапки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоПисемВПапках.Папка,
		|	КоличествоПисемВПапках.Прочтено,
		|	КоличествоПисемВПапках.Всего
		|ИЗ
		|	КоличествоПисемВПапках КАК КоличествоПисемВПапках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НерассчитанныеПапки.Папка КАК Папка,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Прочтено,
		|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК Всего
		|ИЗ
		|	НерассчитанныеПапки КАК НерассчитанныеПапки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ПО (ЭлектроннаяПочта.Папка = НерассчитанныеПапки.Папка)
		|			И (НЕ ЭлектроннаяПочта.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (ЭлектроннаяПочта.Ссылка = СведенияОПрочтении.Объект)
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|
		|СГРУППИРОВАТЬ ПО
		|	НерассчитанныеПапки.Папка");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Если МассивПапок = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВыборДоступныеПапки%",
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПисем.Ссылка КАК Папка,
			|	ПапкиПисем.Представление КАК Наименование,
			|	ПапкиПисем.ВариантОтображенияКоличестваПисем
			|ПОМЕСТИТЬ ДоступныеПапки
			|ИЗ
			|	Справочник.ПапкиПисем КАК ПапкиПисем");
			
	Иначе		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВыборДоступныеПапки%",
			"ВЫБРАТЬ
			|	ТаблицаПапок.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ТаблицаПапокВременная
			|ИЗ
			|	&ТаблицаПапок КАК ТаблицаПапок
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаПапокВременная.Ссылка КАК Папка,
			|	ПапкиПисем.Наименование КАК Наименование,
			|	ПапкиПисем.ВариантОтображенияКоличестваПисем КАК ВариантОтображенияКоличестваПисем
			|ПОМЕСТИТЬ ДоступныеПапки
			|ИЗ
			|	ТаблицаПапокВременная КАК ТаблицаПапокВременная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиПисем КАК ПапкиПисем
			|		ПО ТаблицаПапокВременная.Ссылка = ПапкиПисем.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Папка");
			
			ТаблицаПапок = Новый ТаблицаЗначений; 
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ПапкиПисем")); 
			Массив.Добавить(Тип("Null")); 
			НоваяКолонка = ТаблицаПапок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Массив));
			
			Для Каждого Папка Из МассивПапок Цикл
				
				НоваяСтрока = ТаблицаПапок.Добавить();
				НоваяСтрока.Ссылка = Папка;
				
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ТаблицаПапок", ТаблицаПапок);
		
	КонецЕсли;	
	
	Если РежимМоиПапки И МассивПапок = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборМоиПапки%",
			"ГДЕ ПапкиПисем.Ссылка В ИЕРАРХИИ
			|	(ВЫБРАТЬ
			|		ПапкиПисемБыстрогоДоступа.Папка
			|	ИЗ
			|		РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
			|	ГДЕ
			|		ПапкиПисемБыстрогоДоступа.Пользователь = &Пользователь)");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборМоиПапки%", "");
		
	КонецЕсли;
	
	СтартовыйИндекс = 3;
	Если МассивПапок = Неопределено Тогда
		СтартовыйИндекс = 3;
	Иначе
		СтартовыйИндекс = 4;
	КонецЕсли;	
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДоступныеПапки = РезультатыЗапроса[СтартовыйИндекс].Выбрать();
	РассчитанныеПапки = РезультатыЗапроса[СтартовыйИндекс + 1].Выбрать();
	НерассчитанныеПапки = РезультатыЗапроса[СтартовыйИндекс + 2].Выбрать();
	
	СведенияОПапках = Новый Соответствие;
	
	Пока ДоступныеПапки.Следующий() Цикл
		
		СведенияОПапке = Новый Структура;
		СведенияОПапке.Вставить("Представление", ДоступныеПапки.Наименование);
		
		СведенияОПапке.Вставить("ВариантОтображенияКоличестваПисем",
			ДоступныеПапки.ВариантОтображенияКоличестваПисем);
		
		СведенияОПапке.Вставить("Всего", 0);
		СведенияОПапке.Вставить("Прочтено", 0);
		СведенияОПапке.Вставить("Количество", 0);
		
		СведенияОПапке.Вставить("Выделена", Ложь);
		
		СведенияОПапках.Вставить(ДоступныеПапки.Папка, СведенияОПапке);
		
	КонецЦикла;
	
	Пока РассчитанныеПапки.Следующий() Цикл
		
		СведенияОПапке = СведенияОПапках.Получить(РассчитанныеПапки.Папка);
		СведенияОПапке.Всего = РассчитанныеПапки.Всего;
		СведенияОПапке.Прочтено = РассчитанныеПапки.Прочтено;
		
	КонецЦикла;
	
	Пока НерассчитанныеПапки.Следующий() Цикл
		
		СведенияОПапке = СведенияОПапках.Получить(НерассчитанныеПапки.Папка);
		СведенияОПапке.Всего = НерассчитанныеПапки.Всего;
		СведенияОПапке.Прочтено = НерассчитанныеПапки.Прочтено;
		
		РегистрыСведений.КоличествоПисемВПапках.ДобавитьЗапись(
			НерассчитанныеПапки.Папка,
			Пользователь,
			НерассчитанныеПапки.Всего,
			НерассчитанныеПапки.Прочтено);
		
	КонецЦикла;
	
	Для каждого Элемент Из СведенияОПапках Цикл
		
		СведенияОПапке = Элемент.Значение;
		
		Если СведенияОПапке.ВариантОтображенияКоличестваПисем
			= Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Все Тогда
			
			СведенияОПапке.Количество = СведенияОПапке.Всего;
			
		ИначеЕсли СведенияОПапке.ВариантОтображенияКоличестваПисем
			= Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Непрочтенные Тогда
			
			СведенияОПапке.Количество = СведенияОПапке.Всего - СведенияОПапке.Прочтено;
			
			СведенияОПапке.Выделена = (СведенияОПапке.Количество > 0);
			
		Иначе
			
			СведенияОПапке.Количество = 0;
			
		КонецЕсли;
		
		Если СведенияОПапке.Количество > 0 Тогда
			
			СведенияОПапке.Представление = СведенияОПапке.Представление
				+ " (" + Формат(СведенияОПапке.Количество, "ЧГ=0") + ")";
			
		КонецЕсли;
		
		СведенияОПапке.Удалить("ВариантОтображенияКоличестваПисем");
		СведенияОПапке.Удалить("Всего");
		СведенияОПапке.Удалить("Прочтено");
		
		
		Если МассивПапок <> Неопределено Тогда
			
			Папка = Элемент.Ключ;
			
			Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка, 
				"Родитель");
				
			Описание = "";	
				
			Если ЗначениеЗаполнено(Родитель) Тогда
				ОписаниеРодителей = Справочники.ПапкиПисем.ПолучитьПолныйПутьПапки(Родитель);
				Описание = Строка(Папка) + " (" + ОписаниеРодителей + ")";
			Иначе
				Описание = Строка(Папка);
			КонецЕсли;	
			
			СведенияОПапке.Вставить("ПолныйПутьСРодителями", Описание);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СведенияОПапках;
	
КонецФункции

// Возвращает данные о количестве писем в папке писем.
//
Функция ПолучитьКоличествоПисемВПапке(Папка, ВариантОтображенияКоличестваПисем, Знач Пользователь = Неопределено) Экспорт
	
	КоличествоПисем = 0;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ВариантОтображенияКоличестваПисем =
		Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Все Тогда
		
		Запись = РегистрыСведений.КоличествоПисемВПапках.ПолучитьЗапись(Папка, Пользователь);
		
		Если Запись <> Неопределено Тогда
			
			КоличествоПисем = Запись.Всего;
			
		Иначе
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК Количество
				|ИЗ
				|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
				|ГДЕ
				|	ЭлектроннаяПочта.Папка = &Папка
				|	И НЕ ЭлектроннаяПочта.ПометкаУдаления");
			
			Запрос.УстановитьПараметр("Папка", Папка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				КоличествоПисем = 0;
			Иначе
				КоличествоПисем = РезультатЗапроса.Выгрузить()[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВариантОтображенияКоличестваПисем =
		Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Непрочтенные Тогда
		
		Запись = РегистрыСведений.КоличествоПисемВПапках.ПолучитьЗапись(Папка, Пользователь);
		
		Если Запись <> Неопределено Тогда
			
			КоличествоПисем = Запись.Всего - Запись.Прочтено;
			
		Иначе
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЕСТЬNULL(КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка), 0) - ЕСТЬNULL(СУММА(ВЫБОР
				|				КОГДА ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ)
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ), 0) КАК Количество
				|ИЗ
				|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
				|		ПО ЭлектроннаяПочта.Ссылка = СведенияОПрочтении.Объект
				|			И (СведенияОПрочтении.Пользователь = &Пользователь)
				|ГДЕ
				|	ЭлектроннаяПочта.Папка = &Папка
				|	И НЕ ЭлектроннаяПочта.ПометкаУдаления");
			
			Запрос.УстановитьПараметр("Папка", Папка);
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				КоличествоПисем = 0;
			Иначе
				КоличествоПисем = РезультатЗапроса.Выгрузить()[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоличествоПисем;
	
КонецФункции	

// Возвращает данные о представлении папки писем.
//
Функция ПолучитьСведенияОПапке(Папка, Знач Пользователь = Неопределено) Экспорт
	
	СведенияОПапке = Новый Структура(
		"Представление, Выделена",
		"", Ложь);
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	РеквизитыПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Папка,
		"Представление, ВариантОтображенияКоличестваПисем");
	
	СведенияОПапке.Представление = РеквизитыПапки.Представление;
	ВариантОтображенияКоличестваПисем = РеквизитыПапки.ВариантОтображенияКоличестваПисем;
	
	КоличествоПисем = ПолучитьКоличествоПисемВПапке(Папка, ВариантОтображенияКоличестваПисем, Пользователь);
	
	Если ВариантОтображенияКоличестваПисем =
		Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Непрочтенные Тогда
		
		СведенияОПапке.Выделена = (КоличествоПисем > 0);
		
	КонецЕсли;
	
	Если КоличествоПисем > 0 Тогда
		
		СведенияОПапке.Представление = СведенияОПапке.Представление
			+ " (" + Формат(КоличествоПисем, "ЧГ=0") + ")";
		
	КонецЕсли;
	
	Возврат СведенияОПапке;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ПЕРЕПИСКИ

// Возвращает связанное письмо. Ищет по связям ПисьмоОтправленоВОтветНа, ПолученоВОтветНа, ПересылкаПисьма.
//
Функция ПолучитьПисьмоОснование(Письмо) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПолученоВОтветНаДокумент);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПересылкаПисьма);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПеренаправлениеПисьма);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Письмо) Тогда
		
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПолученВОтветНа);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПолученВОтветНаПисьмо);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Письмо) Тогда
		
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ОтправленВОтветНа);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает массив писем, находящихся в дереве переписки.
//
Функция ПолучитьПисьмаПереписки(Письмо) Экспорт
	
	ТекКореньПереписки = ПолучитьКорневоеПисьмо(Письмо);
	Переписка = Новый Массив;
	Переписка.Добавить(ТекКореньПереписки);
	ДобавитьВПерепискуПодчиненныеПисьмаИерархически(Переписка, ТекКореньПереписки);
	
	Возврат Переписка;
	
КонецФункции

// Возвращает корневое письмо дерева переписки.
//
Функция ПолучитьКорневоеПисьмо(Знач Письмо) Экспорт
	
	КорневоеПисьмо = Письмо;
	Письмо = ПолучитьПисьмоОснование(Письмо);
	
	Счетчик = 0;
	
	Пока ЗначениеЗаполнено(Письмо) Цикл
		
		КорневоеПисьмо = Письмо;
		Письмо = ПолучитьПисьмоОснование(Письмо);
		
		Счетчик = Счетчик + 1;
		Если Счетчик > 1000 Тогда
			ВызватьИсключение НСтр("ru ='Обнаружено зацикливание в ПолучитьКорневоеПисьмо'; en = 'Recursion loop was detected at ПолучитьКорневоеПисьмо'");
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат КорневоеПисьмо;
	
КонецФункции

Процедура ДобавитьВПерепискуПодчиненныеПисьмаИерархически(Переписка, ТекКореньПереписки)
	
	МассивПисем = Новый Массив;
	ПолучитьПодчиненныеПисьма(ТекКореньПереписки, МассивПисем);
	Для каждого ПодчиненноеПисьмо Из МассивПисем Цикл
		Переписка.Добавить(ПодчиненноеПисьмо);
		ДобавитьВПерепискуПодчиненныеПисьмаИерархически(Переписка, ПодчиненноеПисьмо);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив подчиненных писем.
//
Процедура ПолучитьПодчиненныеПисьма(Письмо, МассивПисем) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		
		ПолучатьПомеченныеНаУдаление = Истина;
		ВсеСвязиДокумента = СвязиДокументов.ПолучитьВсеСвязиДокумента(Письмо, ПолучатьПомеченныеНаУдаление);
		
		Для каждого Связь Из ВсеСвязиДокумента Цикл
			
			СвязанноеПисьмо = Связь.СвязанныйДокумент;
			Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СвязанноеПисьмо).Чтение Тогда
				Продолжить;
			КонецЕсли;	
			
			ТипСвязи = Связь.ТипСвязи;
			
			Если (ТипСвязи = Справочники.ТипыСвязей.ОтправленОтветныйДокумент
				Или ТипСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо
				Или ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом
				Или ТипСвязи = Справочники.ТипыСвязей.ПеренаправленоПисьмом) Тогда
				
				МассивПисем.Добавить(СвязанноеПисьмо);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		
		ПолучатьПомеченныеНаУдаление = Истина;
		ВсеСвязиДокумента = СвязиДокументов.ПолучитьВсеСвязиДокумента(Письмо, ПолучатьПомеченныеНаУдаление);
		
		Для каждого Связь Из ВсеСвязиДокумента Цикл
			
			СвязанноеПисьмо = Связь.СвязанныйДокумент;
			Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СвязанноеПисьмо).Чтение Тогда
				Продолжить;
			КонецЕсли;	
			
			ТипСвязи = Связь.ТипСвязи;
			
			Если (ТипСвязи = Справочники.ТипыСвязей.ПолученОтветныйДокумент
				Или ТипСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо
				Или ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом
				Или ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет
				Или ТипСвязи = Справочники.ТипыСвязей.ПеренаправленоПисьмом) Тогда
				
				МассивПисем.Добавить(СвязанноеПисьмо);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Письмо) Тогда
		
		ПолучатьПомеченныеНаУдаление = Истина;
		ВсеСвязиДокумента = СвязиДокументов.ПолучитьВсеСвязиДокумента(Письмо, ПолучатьПомеченныеНаУдаление);
		
		Для каждого Связь Из ВсеСвязиДокумента Цикл
			
			СвязанноеПисьмо = Связь.СвязанныйДокумент;
			Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СвязанноеПисьмо).Чтение Тогда
				Продолжить;
			КонецЕсли;	
			
			ТипСвязи = Связь.ТипСвязи;
			
			Если (ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет
				Или ТипСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо) Тогда
				
				МассивПисем.Добавить(СвязанноеПисьмо);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Письмо) Тогда
		
		ПолучатьПомеченныеНаУдаление = Истина;
		ВсеСвязиДокумента = СвязиДокументов.ПолучитьВсеСвязиДокумента(Письмо, ПолучатьПомеченныеНаУдаление);
		
		Для каждого Связь Из ВсеСвязиДокумента Цикл
			
			СвязанноеПисьмо = Связь.СвязанныйДокумент;
			Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СвязанноеПисьмо).Чтение Тогда
				Продолжить;
			КонецЕсли;	
			
			ТипСвязи = Связь.ТипСвязи;
			
			Если (ТипСвязи = Справочники.ТипыСвязей.ПолученОтвет
				Или ТипСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо) Тогда
				
				МассивПисем.Добавить(СвязанноеПисьмо);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество писем в переписке, в которую входит текущее письмо.
//
Функция ПолучитьКоличествоПисемВПереписке(Письмо) Экспорт
	
	КорневоеПисьмо = ПолучитьКорневоеПисьмо(Письмо);
	
	ПисьмаВПереписке = Новый Массив;
	ПисьмаВПереписке.Добавить(КорневоеПисьмо);
	
	Счетчик = 0;
	Пока Счетчик < ПисьмаВПереписке.Количество() Цикл
		
		ПолучитьПодчиненныеПисьма(ПисьмаВПереписке[Счетчик], ПисьмаВПереписке);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;

	Возврат ПисьмаВПереписке.Количество();

КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ПИСЬМА

// Возвращает таблицу значений с информацией о вложениях письма.
//
Функция ПолучитьФайлыПисьма(
	Письмо,
	ФормироватьПредставлениеРазмера = Ложь,
	ВключатьПомеченныеНаУдалениеПараметр = Ложь,
	ТолькоСИдентификаторами = Ложь,
	ТолькоБезИдентификаторов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВключатьПомеченныеНаУдаление = ВключатьПомеченныеНаУдалениеПараметр;
	
	ПометкаУдаленияПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ПометкаУдаления");
	Если ПометкаУдаленияПисьма = Истина Тогда
		ВключатьПомеченныеНаУдаление = Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение КАК Представление,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	ЕСТЬNULL(ИдентификаторыПочтовыхВложений.Идентификатор, """") КАК ИДФайлаЭлектронногоПисьма,
		|	ВЫБОР
		|		КОГДА Файлы.ТекущаяВерсияРасширение = """"
		|			ТОГДА Файлы.Наименование
		|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение
		|	КОНЕЦ КАК ИмяФайла,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.Редактирует КАК Редактирует,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
		|	Файлы.ТекущаяВерсияДатаМодификацииФайла КАК ТекущаяВерсияДатаМодификацииФайла,
		|	СведенияОФайлах.ПорядковыйНомерВложения КАК ПорядковыйНомерВложения,
		|	ЕСТЬNULL(СведенияОФайлах.ЭтоВложенноеПисьмо, ЛОЖЬ) КАК ЭтоВложенноеПисьмо
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ПО (ИдентификаторыПочтовыхВложений.Файл = Файлы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
		|		ПО (СведенияОФайлах.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Письмо
		|	И (&ВключатьПомеченныеНаУдаление
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|	И НЕ(&ТолькоСИдентификаторами
		|				И ИдентификаторыПочтовыхВложений.Идентификатор ЕСТЬ NULL )
		|	И НЕ(&ТолькоБезИдентификаторов
		|				И НЕ ИдентификаторыПочтовыхВложений.Идентификатор ЕСТЬ NULL )");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("ВключатьПомеченныеНаУдаление", ВключатьПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТолькоСИдентификаторами", ТолькоСИдентификаторами);
	Запрос.УстановитьПараметр("ТолькоБезИдентификаторов", ТолькоБезИдентификаторов);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Сортировать("ПорядковыйНомерВложения, Представление");
	
	Если ФормироватьПредставлениеРазмера Тогда
		Для каждого СтрокаТаблицы Из Результат Цикл
			СтрокаТаблицы.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(СтрокаТаблицы.Размер);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак наличия непомеченных на удаление вложений письма.
// Картинки в теле письма вложениями не считаются.
//
Функция ПисьмоИмеетВложения(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ПО (ИдентификаторыПочтовыхВложений.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Письмо
		|	И (НЕ Файлы.ПометкаУдаления)
		|	И ЕСТЬNULL(ИдентификаторыПочтовыхВложений.Идентификатор, """") = """"");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает Массив структур с информацией о вложениях письма
// Результат (Массив)
// - Элемент(Структура)
//   - Ссылка (Файл)
//   - Представление (Строка)
//   - ИмяФайла (Строка)
//   - ИндексКартинки (Число)
//   - Размер (Число)
//   - РазмерПредставление (Строка)
//   - ПометкаУдаления (Булево)
//   - Редактирует (Пользователь)
//   - РедактируетТекущийПользователь (Булево)
//
Функция ПолучитьИнформациюОВложениях(МассивФайлов) Экспорт
	
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Файлы.Ссылка) КАК Представление,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	ВЫБОР
		|		КОГДА Файлы.ТекущаяВерсияРасширение = """"
		|			ТОГДА Файлы.Наименование
		|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение
		|	КОНЕЦ КАК ИмяФайла,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.Редактирует КАК Редактирует,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&МассивФайлов)");
	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИндексКартинки = Выборка.ИндексКартинки;
		Если Выборка.ПометкаУдаления Тогда
			ИндексКартинки = ИндексКартинки + 1;
		КонецЕсли;
		ФайлИнфо = Новый Структура;
		ФайлИнфо.Вставить("Ссылка", Выборка.Ссылка);
		ФайлИнфо.Вставить("Представление", Выборка.Представление);
		ФайлИнфо.Вставить("ИмяФайла", Выборка.ИмяФайла);
		ФайлИнфо.Вставить("ИндексКартинки", ИндексКартинки);
		ФайлИнфо.Вставить("Размер", Выборка.Размер);
		ФайлИнфо.Вставить("РазмерПредставление", РаботаСоСтроками.ПолучитьРазмерСтрокой(Выборка.Размер));
		ФайлИнфо.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ФайлИнфо.Вставить("Редактирует", Выборка.Редактирует);
		ФайлИнфо.Вставить("РедактируетТекущийПользователь", Выборка.РедактируетТекущийПользователь);
		
		Результат.Добавить(ФайлИнфо);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает данные файла письма по строке уникального идентификатора файла.
//
Функция ПолучитьДанныеФайлаПоИдентификатору(ИдентификаторФайла) Экспорт
	
	Ссылка = Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторФайла));
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Ссылка);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Функция заполняет данные сохраняемых файлов, с учетом пути выбора для 
// сохранения файлов почты.
Функция ПолучитьДанныеФайловДляСохраненияФайлов(СписокФайлов, УникальныйИдентификатор) Экспорт
	
	СписокДанныхФайлов = Новый СписокЗначений();
	ОбщийРазмер = 0;
	
	Если ТипЗнч(СписокФайлов) = Тип("СписокЗначений") Тогда
		
		СписокФайловПисьма = СписокФайлов;
		
		Для Каждого Файл Из СписокФайловПисьма Цикл
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
				Файл.Значение,
				Неопределено,
				УникальныйИдентификатор);
				
			СписокДанныхФайлов.Добавить(ДанныеФайла);
			ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СписокФайлов) = Тип("ТаблицаЗначений") Тогда
		
		СписокФайловПисьма = Новый СписокЗначений();
		Для каждого ФайлыПисьмаСтрока Из СписокФайлов Цикл
			СписокФайловПисьма.Добавить(ФайлыПисьмаСтрока.Ссылка);
		КонецЦикла;
		
		Для Каждого Файл Из СписокФайлов Цикл
			
			Если Файл.Расположение = "Файл" ИЛИ Файл.Расположение = "СсылкаНаФайл" Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
					Файл.Ссылка,
					Неопределено,
					УникальныйИдентификатор);
				
			ИначеЕсли Файл.Расположение = "ВременноеХранилище" Тогда
				
				ДанныеФайла = Новый Структура;
				ДанныеФайла.Вставить("Ссылка", Справочники.Файлы.ПустаяСсылка());
				ДанныеФайла.Вставить("Версия", Справочники.ВерсииФайлов.ПустаяСсылка());
				ДанныеФайла.Вставить("ТекущаяВерсия", Справочники.ВерсииФайлов.ПустаяСсылка());
				ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", Файл.Адрес);
				ДанныеФайла.Вставить("Размер", Файл.Размер);
				ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяДата());
				Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(Файл.ИмяФайла);
				ДанныеФайла.Вставить("Расширение", Расширение);
				ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", Файл.ИмяФайла);
				ДанныеФайла.Вставить("Зашифрован", Ложь);
				ДанныеФайла.Вставить("РедактируетТекущийПользователь", Ложь);
				
			КонецЕсли;
			
			СписокДанныхФайлов.Добавить(ДанныеФайла);
			ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоФайлов = СписокФайловПисьма.Количество();
	ПутьВыбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохраненияПисем");
	
	ДанныеСохраняемыхФайлов = Новый Структура;
	ДанныеСохраняемыхФайлов.Вставить("СписокДанныхФайлов", СписокДанныхФайлов);
	ДанныеСохраняемыхФайлов.Вставить("СписокФайлов", СписокФайловПисьма);
	ДанныеСохраняемыхФайлов.Вставить("ПутьВыбора", ПутьВыбора);
	ДанныеСохраняемыхФайлов.Вставить("КоличествоФайлов", КоличествоФайлов);
	ДанныеСохраняемыхФайлов.Вставить("ОбщийРазмер", ОбщийРазмер);
	
	Возврат ДанныеСохраняемыхФайлов;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЦЕЙ ПОЛУЧАТЕЛЕЙ ПИСЬМА

// Возвращает строку получателей.
//
Функция ТаблицаПолучателейВСтроку(Получатели) Экспорт
	
	Если Получатели.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Получатели) = Тип("ТаблицаЗначений") Тогда
		МассивАдресатов = Получатели.ВыгрузитьКолонку("Адресат");
	Иначе
		МассивАдресатов = Новый Массив;
		Для Каждого ЭлементПолучатель Из Получатели Цикл
			МассивАдресатов.Добавить(ЭлементПолучатель.Адресат);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолучитьПредставлениеМассиваАдресатов(МассивАдресатов);
	
КонецФункции

// Возвращает строку получателей. Если получателей больше 10,
// то выводятся только первые 3 и общее количество.
//
Функция СформироватьСтрокуПолучателейДляПредпросмотра(ТаблицаПолучателей, ТипАдреса)
	
	КоличествоПолучателей = ТаблицаПолучателей.Количество();
	Если КоличествоПолучателей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МаксимальноеКоличествоОтображаемыхПолучателей = 10;
	КоличествоОтображаемыхПолучателейПриПревышении = 3;
	Если КоличествоПолучателей > МаксимальноеКоличествоОтображаемыхПолучателей Тогда
		КоличествоОтображаемыхПолучателей = КоличествоОтображаемыхПолучателейПриПревышении;
	Иначе
		КоличествоОтображаемыхПолучателей = КоличествоПолучателей;
	КонецЕсли;
	
	Результат = "";
	МассивАдресатов = Новый Массив;
	Для Индекс = 0 По КоличествоОтображаемыхПолучателей - 1 Цикл
		Получатель = ТаблицаПолучателей[Индекс];
		
		МассивАдресатов.Добавить(Получатель.Адресат);
		
	КонецЦикла;
	Результат = ПолучитьПредставлениеМассиваАдресатовСГиперссылками(МассивАдресатов);
	
	Если КоличествоПолучателей > МаксимальноеКоличествоОтображаемыхПолучателей Тогда
		
		ПодписьПолучателей = ВстроеннаяПочтаКлиентСервер.ПодписьКЧислу(
			КоличествоПолучателей,
			НСтр("ru = 'получатель'; en = 'recipient'"),
			НСтр("ru = 'получателя'; en = 'recipient'"),
			НСтр("ru = 'получателей'; en = 'recipients'"));
			
		СтрокаUrl = "";	
			
		Если ТипАдреса = "Кому" Тогда
			СтрокаUrl = "allrecipientsto";
		Иначе
			СтрокаUrl = "allrecipientscopy";
		КонецЕсли;	
		
		Результат = Результат +
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ' и другие (всего <a href=""v8doc:mail/%1"">%2 %3</a>)'; en = ' and others (total <a href=""v8doc:mail/%1"">%2 %3</a>)'"),
				СтрокаUrl,
				Формат(КоличествоПолучателей, "ЧГ=0"),
				ПодписьПолучателей);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку получателей. Если получателей больше 10,
// то выводятся только первые 3 и общее количество.
//
Функция СформироватьСтрокуПолучателейДляОтчета(ТаблицаПолучателей, ТипАдреса) Экспорт
	
	КоличествоПолучателей = ТаблицаПолучателей.Количество();
	Если КоличествоПолучателей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МаксимальноеКоличествоОтображаемыхПолучателей = 10;
	КоличествоОтображаемыхПолучателейПриПревышении = 3;
	Если КоличествоПолучателей > МаксимальноеКоличествоОтображаемыхПолучателей Тогда
		КоличествоОтображаемыхПолучателей = КоличествоОтображаемыхПолучателейПриПревышении;
	Иначе
		КоличествоОтображаемыхПолучателей = КоличествоПолучателей;
	КонецЕсли;
	
	Результат = "";
	МассивАдресатов = Новый Массив;
	Для Индекс = 0 По КоличествоОтображаемыхПолучателей - 1 Цикл
		Получатель = ТаблицаПолучателей[Индекс];
		
		МассивАдресатов.Добавить(Получатель.Адресат);
		
	КонецЦикла;
	Результат = ПолучитьПредставлениеМассиваАдресатов(МассивАдресатов);
	
	Если КоличествоПолучателей > МаксимальноеКоличествоОтображаемыхПолучателей Тогда
		
		ПодписьПолучателей = ВстроеннаяПочтаКлиентСервер.ПодписьКЧислу(
			КоличествоПолучателей,
			НСтр("ru = 'получатель'; en = 'recipient'"),
			НСтр("ru = 'получателя'; en = 'recipient'"),
			НСтр("ru = 'получателей'; en = 'recipients'"));
		
		Результат = Результат +
			СтрШаблон(
				НСтр("ru = ' и другие (всего %1 %2)'; en = ' and other (total %1 %2)'"),
				Формат(КоличествоПолучателей, "ЧГ=0"),
				ПодписьПолучателей);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТЕКСТОМ ПИСЬМА

// Возвращает HTML представление письма
//
Функция СформироватьHTMLПредставлениеПисьма(
	Письмо,
	УникальныйИдентификаторФормы,
	ВыводитьШапку,
	СокращенныйСписокАдресатов = Истина,
	ВключитьРежимРедактированияHTML = Ложь,
	ВыводитьИсториюПереписки = Истина,
	ДляКарточкиВходящегоПисьма = Ложь) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		
		Возврат СформироватьHTMLПредставлениеВходящегоПисьма(
			Письмо,
			УникальныйИдентификаторФормы,
			ВыводитьШапку,
			СокращенныйСписокАдресатов,
			ВключитьРежимРедактированияHTML,
			ВыводитьИсториюПереписки,
			ДляКарточкиВходящегоПисьма);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		
		Возврат СформироватьHTMLПредставлениеИсходящегоПисьма(
			Письмо,
			УникальныйИдентификаторФормы,
			ВыводитьШапку,
			СокращенныйСписокАдресатов,
			ВключитьРежимРедактированияHTML,
			ВыводитьИсториюПереписки,
			ДляКарточкиВходящегоПисьма);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Некорректный вид письма.'; en = 'Incorrect email type.'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьHTMLПредставлениеВходящегоПисьма(
	Письмо,
	УникальныйИдентификаторФормы,
	ВыводитьШапку,
	СокращенныйСписокАдресатов,
	ВключитьРежимРедактированияHTML = Ложь,
	ВыводитьИсториюПереписки = Истина,
	ДляКарточкиВходящегоПисьма = Ложь)
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, 
		"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстПисьмаПростойТекстХранилище, Кодировка, ОтправительАдресат, ДатаОтправки, Тема, ПолучателиПисьма, ПолучателиКопий, Дата, ВнутреннийЗаголовок, Важность, Комментарий");
		
	ТекстHTML = Документы.ВходящееПисьмо.ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма, ДляКарточкиВходящегоПисьма);
	
	Если РеквизитыПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ДобавитьНеобходимыеТэгиHTML(ТекстHTML);
		ВставитьКартинкиВТекстHTML(ТекстHTML, Письмо, УникальныйИдентификаторФормы);
		УдалитьТеги(ТекстHTML, "script");
		УдалитьСвойствоТегаА(ТекстHTML, "onmouseover");
		УдалитьСвойствоТегаА(ТекстHTML, "onmouseout");
		
	КонецЕсли;
	
	Если ВыводитьШапку Тогда
		
		ПредставлениеАдресата = ПолучитьПредставлениеИКонтактОтправителя(
			РеквизитыПисьма.ОтправительАдресат, УникальныйИдентификаторФормы);
		
		ПредставлениеОт = ПредставлениеАдресата.Представление;
		
		ПредставлениеДата = Формат(РеквизитыПисьма.Дата, "ДФ='dd.MM.yyyy HH:mm'");
		
		Если СокращенныйСписокАдресатов Тогда
			
			ПредставлениеКому = СформироватьСтрокуПолучателейДляПредпросмотра(
				РеквизитыПисьма.ПолучателиПисьма.Выгрузить(), "Кому");
			
			ПредставлениеКопии = СформироватьСтрокуПолучателейДляПредпросмотра(
				РеквизитыПисьма.ПолучателиКопий.Выгрузить(), "Копия");
			
		Иначе
			
			ПредставлениеКому = ТаблицаПолучателейВСтроку(РеквизитыПисьма.ПолучателиПисьма.Выгрузить());
			ПредставлениеКопии = ТаблицаПолучателейВСтроку(РеквизитыПисьма.ПолучателиКопий.Выгрузить());
			
		КонецЕсли;
		
		ПредставлениеТема = РеквизитыПисьма.Тема;
		
		ПредставлениеАдресата = ПолучитьПредставлениеИКонтактАдресата(
			РеквизитыПисьма.ОтправительАдресат);
		
		Если ВыводитьИсториюПереписки Тогда
			ЧислоПисемВПереписке = ПолучитьКоличествоПисемВПереписке(Письмо);
			ЕстьПисьмаВПереписке = (ЧислоПисемВПереписке > 1);
		Иначе
			ЧислоПисемВПереписке = 0;
			ЕстьПисьмаВПереписке = Ложь;
		КонецЕсли;
		
		Шапка = Новый Структура;
		Шапка.Вставить("От", ПредставлениеОт);
		Шапка.Вставить("Дата", ПредставлениеДата);
		Шапка.Вставить("Кому", ПредставлениеКому);
		Шапка.Вставить("Копии", ПредставлениеКопии);
		Шапка.Вставить("Тема", ПредставлениеТема);
		Шапка.Вставить("ОтправительКонтакт", ПредставлениеАдресата.Контакт);
		Шапка.Вставить("ЧислоПисемВПереписке", ЧислоПисемВПереписке);
		Шапка.Вставить("ЕстьПисьмаВПереписке", ЕстьПисьмаВПереписке);
		Шапка.Вставить("Важность", РеквизитыПисьма.Важность);
		Шапка.Вставить("Комментарий", РеквизитыПисьма.Комментарий);
		
		ВставитьШапкуПисьмаВТекстHTML(ТекстHTML, Шапка, УникальныйИдентификаторФормы,
			ВключитьРежимРедактированияHTML, ДляКарточкиВходящегоПисьма);
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// В случае отсутствия у текста HTML тэгов <html></html>,  <body></body> добавляет их.
// Модифицирует параметр ТекстHTML
//
Процедура ДобавитьНеобходимыеТэгиHTML(ТекстHTML) Экспорт
	
	НРегТекстHTML = НРег(ТекстHTML);
	ПозицияТэгаHTML = СтрНайти(НРегТекстHTML, "<html");
	ПозицияТэгаBODY = СтрНайти(НРегТекстHTML, "<body");
	Если ПозицияТэгаHTML = 0 И ПозицияТэгаBODY = 0 Тогда
		ТекстHTML = "<html><body style=""margin-top:1px; padding-top:1px"">" + ТекстHTML + "</body></html>";
	ИначеЕсли ПозицияТэгаHTML = 0 И ПозицияТэгаBODY > 0 Тогда
		ТекстHTML = "<html>" + ТекстHTML + "</html>";
	ИначеЕсли ПозицияТэгаHTML > 0 И ПозицияТэгаBODY = 0 Тогда
		ПозицияОкончанияТэгаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияТэгаHTML);
		Голова = Лев(ТекстHTML, ПозицияОкончанияТэгаHTML);
		ПозицияЗакрывающегосяТэгаHTML = СтрНайти(НРегТекстHTML, "</html>");
		Хвост = Сред(ТекстHTML, ПозицияЗакрывающегосяТэгаHTML);
		Середина = Сред(ТекстHTML, ПозицияОкончанияТэгаHTML + 1, ПозицияЗакрывающегосяТэгаHTML - ПозицияОкончанияТэгаHTML - 1);
		ТекстHTML = Голова + "<body style=""margin-top:1px; padding-top:1px"">" + Середина + "</body>" + Хвост;
	КонецЕсли;
	
КонецПроцедуры

Функция ПриложениеРаботаетСВебСервером()
	
	Результат = Ложь;
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "http://") <> 0 Или 
		Найти(НавигационнаяСсылкаИнформационнойБазы, "https://") <> 0 Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

// формирует HTML для фото - только для тонкого клиента
//
Функция ПолучитьТекстHTMLДляФото(Шапка, УникальныйИдентификатор)
	
	ТекстHTML = "";
	
	Если ЗначениеЗаполнено(Шапка.ОтправительКонтакт)
		И ТипЗнч(Шапка.ОтправительКонтакт) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ОтображатьФотографииПерсональнаяНастройка =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ОтображатьФотографииПерсональнаяНастройка",
			Истина);
		
		ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");	
		ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
		
		ПолучатьФотографии = Истина;
		
		Если Не ОтображатьФотографииОбщаяНастройка
			Или Не ОтображатьФотографииПерсональнаяНастройка
			Или ПриложениеЯвляетсяВебКлиентом
			Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
			ПолучатьФотографии = Ложь;
		КонецЕсли;
		
		Если ПолучатьФотографии Тогда
			
			НавигационнаяСсылкаПользователя = ПолучитьНавигационнуюСсылку(Шапка.ОтправительКонтакт);
			
			Если Истина Тогда  // ПриложениеРаботаетСВебСервером()
				
				ДвоичныеДанныеФото = РаботаСФотографиями.ПолучитьДвоичныеДанныеФото(Шапка.ОтправительКонтакт);
				Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
					
					Подсказка = "";
					Если ТипЗнч(Шапка.ОтправительКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
						Подсказка = РаботаСФотографиями.СформироватьПодсказку(Шапка.ОтправительКонтакт);
					КонецЕсли;	
					
					Попытка
						Картинка = Новый Картинка(ДвоичныеДанныеФото);
						Расширение = Строка(Картинка.Формат());
						СтрокаИсточника = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеФото);
						
						ТекстHTML = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"<a href=""%1""><img border=""1"" src=""%2"" alt=""%3"" height=""70"" style=""border-color: #bdbdbd"" ></a>", 
							"v8doc:" + НавигационнаяСсылкаПользователя,
							СтрокаИсточника,
							Подсказка);
						
					Исключение
						// Двоичные данные могут не соответствовать никакой картинке
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе
				
				ЕстьКартинка = Ложь;
				Фотография = РаботаСФотографиями.ПолучитьАдресФото(Шапка.ОтправительКонтакт, УникальныйИдентификатор, ЕстьКартинка);
				
				Если ЕстьКартинка Тогда
					
					Подсказка = "";
					Если ТипЗнч(Шапка.ОтправительКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
						Подсказка = РаботаСФотографиями.СформироватьПодсказку(Шапка.ОтправительКонтакт);
					КонецЕсли;	
					
					ТекстHTML = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<a href=""%1""><img border=""1"" src=""%2"" alt=""%3"" height=""70"" style=""border-color: #bdbdbd"" ></a>", 
						НавигационнаяСсылкаПользователя,
						Фотография,
						Подсказка);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст шапки письма и вставляет его в ТекстHTML
// сразу после тэга <body>.
//
Процедура ВставитьШапкуПисьмаВТекстHTML(ТекстHTML, Шапка, УникальныйИдентификаторФормы,
	ВключитьРежимРедактированияHTML = Ложь, ДляКарточкиВходящегоПисьма = Ложь)
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	// Нахождение места для вставки текста шапки
	ВставитьПеред = 1;
	ПозицияHTML = СтрНайти(НРегТекстHTML, "<html");
	ПозицияBody = 0;
	Если ПозицияHTML > 0 Тогда
		ПозицияBody = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "<body", ПозицияHTML);
		Если ПозицияBody > 0 Тогда
			ПозицияЗакрывающейсяСкобки = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияBody);
			Если ПозицияЗакрывающейсяСкобки > 0 Тогда
				ВставитьПеред = ПозицияЗакрывающейсяСкобки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование текста шапки письма
	ШапкаHTML =
		"<table>
		|<tr>
		|<td width=100%>
		|<div class=v8doc-mail-header><b>[Тема]</b></div>
		|<div class=v8doc-mail-header>[От]</div>
		|<div class=v8doc-mail-information>
		|[НадписьКому]: [Кому]<br>
		|[НадписьКопии]: [Копии]<br></div>
		|<div class=v8doc-mail-information-date>[Дата]<br></div>
		|<div class=v8doc-mail-information>
		|<a href=""v8doc:mail/correspondencehistory"">[НадписьПереписка]: [Переписка]</a><br>
		|<b>[НадписьКомментарий]:</b> [Комментарий]<br>
		|</div>
		|</td>
		|<td valign=top>
		|<table cellpadding=""0"" cellspacing=""0""><tr><td> <div style=""font-size:1pt; line-height:1px;""> &nbsp; </div> </td></tr>  
		| <tr><td> [ФотоПользователя] </td></tr> </table> 
		|</td>
		|</tr>
		|</table>
		|<hr>";
		
	ТекстHTMLДляФото = ПолучитьТекстHTMLДляФото(Шапка, УникальныйИдентификаторФормы);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[ФотоПользователя]", ТекстHTMLДляФото);
	
	Если ПустаяСтрока(Шапка.Комментарий) Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "<b>[НадписьКомментарий]:</b> [Комментарий]<br>", "");
	КонецЕсли;
	
	Если ПустаяСтрока(Шапка.Кому) Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "[НадписьКому]: [Кому]<br>", "");
	КонецЕсли;
	Если ПустаяСтрока(Шапка.Копии) Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "[НадписьКопии]: [Копии]<br>", "");
	КонецЕсли;
	Если ПустаяСтрока(Шапка.Дата) Или ДляКарточкиВходящегоПисьма = Истина Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "[Дата]<br>", "");
	КонецЕсли;
	Если Не Шапка.ЕстьПисьмаВПереписке Или ДляКарточкиВходящегоПисьма = Истина Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, "<a href=""v8doc:mail/correspondencehistory"">[НадписьПереписка]: [Переписка]</a><br>", "");
	КонецЕсли;
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьДата]", НСтр("ru = 'Дата'; en = 'Date'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьКому]", НСтр("ru = 'Кому'; en = 'To'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьКопии]", НСтр("ru = 'Копии'; en = 'Cc'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьПереписка]", НСтр("ru = 'Переписка'; en = 'Thread'"));
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьКомментарий]", НСтр("ru = 'Комментарий'; en = 'Comment'"));
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[От]", Шапка.От);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Дата]", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Шапка.Дата));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Кому]", Шапка.Кому);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Копии]", Шапка.Копии);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Переписка]", Формат(Шапка.ЧислоПисемВПереписке, "ЧН=0")
		+ " " + ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(Шапка.ЧислоПисемВПереписке));
	
	ТекстHTMLДляТемы = РаботаС_HTML.ЗаменитьСпецСимволыHTML(Шапка.Тема);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTMLДляТемы);
	Если Шапка.Важность = Перечисления.ВажностьПисем.Высокая Тогда 

		ДвоичныеДанныеКартинки = БиблиотекаКартинок.ВажностьВОбластиПросмотра.ПолучитьДвоичныеДанные();
			
		Расширение = "png";
		СтрокаИсточника = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеКартинки);
				
		ТекстHTMLВажности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<img border=""0"" src=""%1""> &nbsp;", 
			СтрокаИсточника);
		
		ТекстHTMLДляТемы = ТекстHTMLВажности + ТекстHTMLДляТемы;
		
	КонецЕсли;	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Тема]", ТекстHTMLДляТемы);
	
	ТекстHTMLДляКомментария= РаботаС_HTML.ЗаменитьСпецСимволыHTML(Шапка.Комментарий);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTMLДляКомментария);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Комментарий]", ТекстHTMLДляКомментария);
	
	// Нахождение места для вставки конца div
	ВставитьDIVПеред = 1;
	ВставитьDIVПеред = СтрНайти(НРегТекстHTML, "</body");
	
	// Вставка
	Если (ВставитьDIVПеред <> 0) И ВключитьРежимРедактированияHTML Тогда
		
		ТекстHTML = Лев(ТекстHTML, ВставитьПеред - 1) + ШапкаHTML 
			+ "<div contentEditable=true>" +  Сред(ТекстHTML, ВставитьПеред, ВставитьDIVПеред - ВставитьПеред)
			+ "</div>" + Сред(ТекстHTML, ВставитьDIVПеред);
			
	Иначе
			
		ТекстHTML = Лев(ТекстHTML, ВставитьПеред - 1) + ШапкаHTML + Сред(ТекстHTML, ВставитьПеред);
		
	КонецЕсли;
	
	Если ПозицияBody <> 0 Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "<body", "<body style=""margin-top:1px; padding-top:1px""");
		ТекстHTML = СтрЗаменить(ТекстHTML, "<BODY", "<BODY style=""margin-top:1px; padding-top:1px""");
	КонецЕсли;	
	
КонецПроцедуры

// Формирует и возвращает HTML текст письма. Если в тексте есть ссылки на картинки,
// они загружаются во временное хранилище и ссылки в HTML
// заменяются на навигационные ссылки картинок во временном хранилище.
//
Функция СформироватьHTMLПредставлениеИсходящегоПисьма(
	Письмо,
	УникальныйИдентификаторФормы,
	ВыводитьШапку,
	СокращенныйСписокАдресатов,
	ВключитьРежимРедактированияHTML = Ложь,
	ВыводитьИсториюПереписки = Истина,
	ДляКарточкиВходящегоПисьма = Ложь)
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, 
		"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстХранилище, Кодировка, ОтправительКонтакт, ДатаОтправки, Тема, ПолучателиПисьма, ПолучателиКопий, УчетнаяЗапись, Дата, Важность, Комментарий");
		
	ТекстHTML = Документы.ИсходящееПисьмо.ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма);
	
	Если РеквизитыПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ДобавитьНеобходимыеТэгиHTML(ТекстHTML);
		ВставитьКартинкиВТекстHTML(ТекстHTML, Письмо, УникальныйИдентификаторФормы);
		УдалитьТеги(ТекстHTML, "script");
		УдалитьСвойствоТегаА(ТекстHTML, "onmouseover");
		УдалитьСвойствоТегаА(ТекстHTML, "onmouseout");
		
	КонецЕсли;
	
	Если ВыводитьШапку Тогда
		
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(РеквизитыПисьма.УчетнаяЗапись);		
		ОтправительОтображаемоеИмя = ДанныеУчетнойЗаписи.ИмяПользователя;
				
		ПредставлениеОт = РаботаС_HTML.ЗаменитьСпецСимволыHTML(
			ПолучитьПочтовоеПредставлениеКонтакта(Письмо.ОтправительКонтакт, ""));
		
		ПредставлениеДата = Формат(РеквизитыПисьма.Дата, "ДФ='dd.MM.yyyy HH:mm'");
		
		Если СокращенныйСписокАдресатов Тогда
			ПредставлениеКому = СформироватьСтрокуПолучателейДляПредпросмотра(РеквизитыПисьма.ПолучателиПисьма.Выгрузить(), "Кому");
			ПредставлениеКопии = СформироватьСтрокуПолучателейДляПредпросмотра(РеквизитыПисьма.ПолучателиКопий.Выгрузить(), "Копия");
		Иначе
			ПредставлениеКому = ТаблицаПолучателейВСтроку(РеквизитыПисьма.ПолучателиПисьма.Выгрузить());
			ПредставлениеКопии = ТаблицаПолучателейВСтроку(РеквизитыПисьма.ПолучателиКопий.Выгрузить());
		КонецЕсли;
		
		ПредставлениеТема = РеквизитыПисьма.Тема;
		
		Если ВыводитьИсториюПереписки Тогда
			ЧислоПисемВПереписке = ПолучитьКоличествоПисемВПереписке(Письмо);
			ЕстьПисьмаВПереписке = (ЧислоПисемВПереписке > 1);
		Иначе
			ЧислоПисемВПереписке = 0;
			ЕстьПисьмаВПереписке = Ложь;
		КонецЕсли;
		
		Шапка = Новый Структура;
		Шапка.Вставить("От", ПредставлениеОт);
		Шапка.Вставить("Дата", ПредставлениеДата);
		Шапка.Вставить("Кому", ПредставлениеКому);
		Шапка.Вставить("Копии", ПредставлениеКопии);
		Шапка.Вставить("Тема", ПредставлениеТема);
		Шапка.Вставить("ОтправительКонтакт", РеквизитыПисьма.ОтправительКонтакт);
		Шапка.Вставить("ЧислоПисемВПереписке", ЧислоПисемВПереписке);
		Шапка.Вставить("ЕстьПисьмаВПереписке", ЕстьПисьмаВПереписке);
		Шапка.Вставить("Важность", РеквизитыПисьма.Важность);
		Шапка.Вставить("Комментарий", РеквизитыПисьма.Комментарий);
		
		ВставитьШапкуПисьмаВТекстHTML(ТекстHTML, Шапка, УникальныйИдентификаторФормы,
			ВключитьРежимРедактированияHTML, ДляКарточкиВходящегоПисьма);
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// При работе с веб сервером вставляет картинки письма в тело HTML,
// иначе помещает их во временное хранилище и заменяет ссылки на временное хранилище.
//
Процедура ВставитьКартинкиВТекстHTML(
	ТекстHTML,
	Письмо,
	УникальныйИдентификаторФормы,
	ИдентификаторыКартинокПисьма = Неопределено,
	ВызовИзШаблонаПисьма = Ложь) Экспорт
	
	ФайлыПисьма = ПолучитьФайлыПисьма(
		Письмо,
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		Истина); // ТолькоСИдентификаторами
	
	Для каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		Если СтрЧислоВхождений(ТекстHTML, ИсточникФайла) > 0 Тогда
			
			Если ПриложениеРаботаетСВебСервером() Или ВызовИзШаблонаПисьма Тогда
			
				ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлПисьма.Ссылка);
				Расширение = ФайлПисьма.ТекущаяВерсияРасширение;
				
				Если ПустаяСтрока(Расширение) Тогда
					Картинка = Новый Картинка(ДвоичныеДанныеФайла);
					Расширение = Строка(Картинка.Формат());
				КонецЕсли;
				
				СтрокаИсточника = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеФайла);
				ТекстHTML = СтрЗаменить(ТекстHTML, "cid:" + ИсточникФайла, СтрокаИсточника);
				ТекстHTML = СтрЗаменить(ТекстHTML, "CID:" + ИсточникФайла, СтрокаИсточника);
				Если СтрДлина(ИсточникФайла) > 18 Тогда
					ТекстHTML = СтрЗаменить(ТекстHTML, ИсточникФайла, СтрокаИсточника);
				КонецЕсли;	
				
				Если ИдентификаторыКартинокПисьма = Неопределено Тогда
					ДобавитьСсылкиККартинкам(ТекстHTML, СтрокаИсточника, ФайлПисьма.Ссылка);
				КонецЕсли;	
				
			Иначе // тонкий клиент
				
				НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
				НавигационнаяСсылка = "";
				
				Попытка
					НавигационнаяСсылка = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
						ФайлПисьма.ТекущаяВерсия, // ВерсияСсылка
						УникальныйИдентификаторФормы); // ИдентификаторФормы
				Исключение
					Инфо = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Ошибка вставки картинок в HTML'; en = 'Error pasting images into HTML'", Метаданные.ОсновнойЯзык.КодЯзыка),
						УровеньЖурналаРегистрации.Ошибка,,
						,
						ПодробноеПредставлениеОшибки(Инфо));
					Продолжить;
				КонецПопытки;	
				
				АбсолютнаяСсылкаНаКартинку = НавигационнаяСсылкаИнформационнойБазы + "/" + НавигационнаяСсылка;
				
				ТекстHTML = СтрЗаменить(ТекстHTML, "http:cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку); // коррекция ошибочного html
				ТекстHTML = СтрЗаменить(ТекстHTML, "cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
				ТекстHTML = СтрЗаменить(ТекстHTML, "CID:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
				Если СтрДлина(ИсточникФайла) > 18 Тогда
					ТекстHTML = СтрЗаменить(ТекстHTML, ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
				КонецЕсли;	
				
				Если ИдентификаторыКартинокПисьма = Неопределено Тогда
					ДобавитьСсылкиККартинкам(ТекстHTML, АбсолютнаяСсылкаНаКартинку, ФайлПисьма.Ссылка);
				КонецЕсли;	
				
				Если ИдентификаторыКартинокПисьма <> Неопределено Тогда
					ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка", ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
					УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма, ИсточникФайла);
					ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет строку с тегом img - от "<" до ">" включительно
Функция ВыделитьТегImg(ТекстHTML, АбсолютнаяСсылкаНаКартинку) Экспорт
	
	ПозицияНачалаСсылки = СтрНайти(ТекстHTML, АбсолютнаяСсылкаНаКартинку);
	Если ПозицияНачалаСсылки = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияНачалаПоиска = ПозицияНачалаСсылки - 1;
	ПозицияНачалаТега = 0;
	
	Пока ПозицияНачалаПоиска > 1 И ПозицияНачалаПоиска > ПозицияНачалаСсылки - 250 Цикл
		
		Символ = Сред(ТекстHTML, ПозицияНачалаПоиска, 1);
		Если Символ = "<" Тогда
			ПозицияНачалаТега = ПозицияНачалаПоиска;
			Прервать;
		КонецЕсли;	
		
		ПозицияНачалаПоиска = ПозицияНачалаПоиска - 1;
		
	КонецЦикла;	
	
	Если ПозицияНачалаТега = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияОкончанияТегаHTML = РаботаСоСтроками.НайтиПосле(ТекстHTML, ">", ПозицияНачалаСсылки + СтрДлина(АбсолютнаяСсылкаНаКартинку));
	Если ПозицияОкончанияТегаHTML = -1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если РаботаС_HTML.ПозицияНаходитсяВТеге(ТекстHTML, "A", ПозицияНачалаТега) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстТега = Сред(ТекстHTML, ПозицияНачалаТега, ПозицияОкончанияТегаHTML - ПозицияНачалаТега + 1);
	Возврат ТекстТега;
	
КонецФункции	

Процедура ДобавитьСсылкиККартинкам(ТекстHTML, АбсолютнаяСсылкаНаКартинку, ФайлПисьмаСсылка)
	
	ТекстТега = ВыделитьТегImg(ТекстHTML, АбсолютнаяСсылкаНаКартинку);
	
	Если Не ПустаяСтрока(ТекстТега) Тогда
		
		НавигационнаяСсылкаФайла = "v8doc:" + ПолучитьНавигационнуюСсылку(ФайлПисьмаСсылка);
		
		ТекстТегаНРег = НРег(ТекстТега);
		ТекстТегаИзмененный = ТекстТега;
		Если СтрНайти(ТекстТегаНРег, "border") = 0 Тогда
			ТекстТегаИзмененный = СтрЗаменить(ТекстТегаИзмененный, "<img", "<img border=""0""");
			ТекстТегаИзмененный = СтрЗаменить(ТекстТегаИзмененный, "<IMG", "<IMG border=""0""");
		КонецЕсли;
		
		Расширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлПисьмаСсылка, "ТекущаяВерсияРасширение");
		ТекстТегаИзмененный = Лев(ТекстТегаИзмененный, СтрДлина(ТекстТегаИзмененный) - 1) + " data-ext=""" + Расширение + """>";
		
		НовыйТекстТега = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<a href=""%1"">%2</a>", 
			НавигационнаяСсылкаФайла,
			ТекстТегаИзмененный);
			
		ТекстHTML = СтрЗаменить(ТекстHTML, ТекстТега, НовыйТекстТега);	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма, ИсточникФайла)
	
	Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
		
		ОписаниеИсточника = Строка.Значение;
		Если ОписаниеИсточника.ИсточникФайла = ИсточникФайла Тогда
			ИдентификаторыКартинокПисьма.Удалить(Строка);
			ВОзврат;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Формирует текст исходящего письма.
//
Функция СформироватьТекстИсходящегоПисьма(Основание, ТипТекста, Кодировка, ТипОтвета, ИспользованныйШаблон = Неопределено) Экспорт
	
	ТекстПисьма = "";
	ЭтоШаблонПисьма = Ложь;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Содержание");
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроект(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Описание");
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоКонтрольОбъектов(Основание) Тогда
		
		РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Описание, Предмет");
		ТекстПисьма = РеквизитыКонтроля.Описание;
		
		Если ЗначениеЗаполнено(РеквизитыКонтроля.Предмет) Тогда 
			Если ТипЗнч(РеквизитыКонтроля.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда
				КорневоеПисьмо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					РеквизитыКонтроля.Предмет, "КорневоеПисьмо");
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КорневоеПисьмо);
			Иначе 
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(РеквизитыКонтроля.Предмет);
			КонецЕсли;
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ТекстПисьма,
				Символы.ПС,
				НавигационнаяСсылка);
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Описание");
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Описание");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ШаблоныПисем") Тогда 
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстХранилище, Кодировка");
		
		ТекстПисьма = Справочники.ШаблоныПисем.ПолучитьПредставлениеСодержанияШаблона(Реквизиты);
		ЭтоШаблонПисьма = Истина;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоЗадачаИсполнителя(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Описание");
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФайл(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Описание");
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоСообщение(Основание) Тогда
		
		ТекстСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ТекстСообщения");
		ТекстПисьма = ТекстСообщения + Символы.ПС + Символы.ПС + ПолучитьНавигационнуюСсылку(Основание);
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоЗаметка(Основание) Тогда
		
		ТекстСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СодержаниеТекст");
		ТекстПисьма = ТекстСообщения;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоОтсутствие(Основание) Тогда
		
		ТекстПисьма = Отсутствия.ПолучитьПредставлениеОтсутствияДляТекстаПисьма(Основание);
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоУведомлениеПрограммы(Основание) Тогда
		
		ТекстПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Описание");
		ТекстПисьма = РаботаС_HTML.ПолучитьПростойТекстИзHTML(ТекстПисьма);
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоБронь(Основание) Тогда
		
		ТекстПисьма = БронированиеПомещений.ПолучитьОписаниеБрони(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("Массив") И Основание.Количество() > 0 Тогда
		
		ТекстПисьма = "";
		
		Для каждого Файл Из Основание Цикл
			
			Если Не ДелопроизводствоКлиентСервер.ЭтоФайл(Файл) Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеФайла = Строка(Файл) + " (" + Файл.Метаданные().ПредставлениеОбъекта + ")";
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Файл);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ТекстПисьма,
				Символы.ПС + Символы.ПС,
				ПредставлениеФайла);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ТекстПисьма,
				Символы.ПС,
				НавигационнаяСсылка);
			
		КонецЦикла;
		
		Если Основание.Количество() = 1 Тогда
			ТекстПисьма = НСтр("ru = 'Основание:'; en = 'Base:'") + Символы.ПС + Символы.ПС + ТекстПисьма;
		Иначе
			ТекстПисьма = НСтр("ru = 'Основания:'; en = 'Base:'") + Символы.ПС + Символы.ПС + ТекстПисьма;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("Строка") Тогда
		
		ТекстПисьма = Основание;
		
	КонецЕсли;
	
	Если ЭтоШаблонПисьма Тогда 
		
		ТекстШаблона = ТекстПисьма;
		// Дата
		ТекущаяДата = ТекущаяДатаСеанса();
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[День]", Формат(ТекущаяДата, "ДФ=дд"));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Месяц]", Формат(ТекущаяДата, "ДФ=ММ"));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Год]", Формат(ТекущаяДата, "ДФ=гггг"));
		
		// Время
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Час]", Формат(ТекущаяДата, "ДФ=ЧЧ"));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Минута]", Формат(ТекущаяДата, "ДФ=мм"));
		
		ТекстПисьма = ТекстШаблона;
		
	Иначе 
	
		Если ЗначениеЗаполнено(Основание) Тогда
			
			ШаблонПисьма = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
			
		Иначе
			
			ШаблонПисьма = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПодписьДляНовыхПисем");
			
		КонецЕсли;
		
		Если ТипЗнч(ШаблонПисьма) = Тип("СправочникСсылка.ШаблоныТекстов")
			И ЗначениеЗаполнено(ШаблонПисьма) Тогда
			
			ИспользованныйШаблон = ШаблонПисьма;
			Подпись = Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(ШаблонПисьма);
			
			ТипТекстаШаблона = ШаблонПисьма.ТипТекста;
			Если Не ЗначениеЗаполнено(ТипТекстаШаблона) Тогда
				ТипТекстаШаблона = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
			КонецЕсли;	
			
			Если ПустаяСтрока(ТекстПисьма) Тогда
				ТекстПисьма = Подпись;
			Иначе
				ТекстПисьма = ТекстПисьма + Символы.ПС + Подпись;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстПисьма) Тогда
			ТекстПисьма = Символы.ПС;
		КонецЕсли;
		
		Если ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML И ТипТекстаШаблона  = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
			ТекстПисьма = РаботаС_HTML.ПолучитьHTMLИзТекста(ТекстПисьма, Кодировка);
		ИначеЕсли ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст И ТипТекстаШаблона  = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			ТекстПисьма = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма, Кодировка);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Основание) Тогда
		
		ВставлятьТекстИсходногоПисьмаПриОтвете =
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ВставлятьТекстИсходногоПисьмаПриОтвете");
		
		Если ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма
			ИЛИ (ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо
				И ВставлятьТекстИсходногоПисьмаПриОтвете) Тогда
			
			ДобавитьТекстИсходногоПисьма(
				ТекстПисьма,
				Основание,
				ТипТекста,
				ТипОтвета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПисьма;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРЕДМЕТАМИ И ПРОЕКТАМИ ПИСЕМ

// Возвращает массив корневых писем в переписке по предмету.
// Корневыми считаются письма или документы (входящие, исходящие)
// которые либо первые в переписке либо их основание содержит переписку
// по другому предмету.
//
Функция ПолучитьКорневыеПисьмаПоПредмету(Предмет) Экспорт
	
	ТипыСвязи = Новый Массив;
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ОтправленВОтветНа);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученВОтветНа);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученВОтветНаПисьмо);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученоВОтветНаДокумент);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПересылкаПисьма);
	
	ПравоДоступаВходящиеДокументыЧтение = ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы);
	ПравоДоступаИсходящиеДокументыЧтение = ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаПисемПоПредмету
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Предмет = &Предмет
		|	И НЕ ЭлектроннаяПочта.ПометкаУдаления
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектроннаяПочта.Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Предмет = &Предмет
		|	И НЕ ЭлектроннаяПочта.ПометкаУдаления
		|";
		
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда 
		Запрос.Текст = Запрос.Текст + 
		
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Проект = &Предмет
		|	И НЕ ЭлектроннаяПочта.ПометкаУдаления
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектроннаяПочта.Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Проект = &Предмет
		|	И НЕ ЭлектроннаяПочта.ПометкаУдаления
		|";
		
	КонецЕсли;		
		
	Если ПравоДоступаВходящиеДокументыЧтение И ПравоДоступаИсходящиеДокументыЧтение Тогда	
		
		Запрос.Текст = Запрос.Текст + 
	
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ВходящиеДокументы.Ссылка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|			И (СвязиДокументов.СвязанныйДокумент = &Предмет)
		|ГДЕ
		|	НЕ ВходящиеДокументы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ИсходящиеДокументы.Ссылка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|			И (СвязиДокументов.СвязанныйДокумент = &Предмет)
		|ГДЕ
		|	НЕ ИсходящиеДокументы.ПометкаУдаления
		|";
		
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда 
			
			Запрос.Текст = Запрос.Текст + 
	
			"ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВходящиеДокументы.Ссылка
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|ГДЕ ВходящиеДокументы.Проект = &Предмет И НЕ ВходящиеДокументы.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИсходящиеДокументы.Ссылка
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|ГДЕ
			|	ИсходящиеДокументы.Проект = &Предмет И НЕ ИсходящиеДокументы.ПометкаУдаления
			|";
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПисемПоПредмету.Ссылка КАК Ссылка,
		|	СвязиДокументов.СвязанныйДокумент
		|ПОМЕСТИТЬ СвязанныеПисьмаПоПредмету
		|ИЗ
		|	ТаблицаПисемПоПредмету КАК ТаблицаПисемПоПредмету
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ТаблицаПисемПоПредмету.Ссылка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи В (&ТипыСвязи))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеПисьмаПоПредмету.Ссылка КАК Ссылка
		|ИЗ
		|	СвязанныеПисьмаПоПредмету КАК СвязанныеПисьмаПоПредмету
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвязанныеПисьмаПоПредмету КАК СвязанныеДокументы
		|		ПО СвязанныеПисьмаПоПредмету.СвязанныйДокумент = СвязанныеДокументы.Ссылка
		|ГДЕ
		|	СвязанныеДокументы.Ссылка ЕСТЬ NULL ";
	
		
	Запрос.УстановитьПараметр("ТипыСвязи", ТипыСвязи);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив корневых писем в переписке по предмету.
//
Функция ПолучитьИнформациюКорневыхПисемПоПредмету(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка,
		|	ЭлектроннаяПочта.Дата,
		|	ЭлектроннаяПочта.Тема
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ЭлектроннаяПочта.Ссылка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПисьмоОтправленоВОтветНа)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоВОтветНаДокумент)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоВОтветНаПисьмо))
		|ГДЕ
		|	ЭлектроннаяПочта.Предмет = &Предмет
		|	И СвязиДокументов.Документ ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата";
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив писем в переписке по связям ОтправленОтвет ПолученОтвет ПересланоПисьмом НаОснованииПисьма
//
Функция ПолучитьИнформациюПисемПоСвязям(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка,
		|	ЭлектроннаяПочта.Дата,
		|	ЭлектроннаяПочта.Тема
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ЭлектроннаяПочта.Ссылка = СвязиДокументов.СвязанныйДокумент
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПеренаправленоПисьмом)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПисьмоОснование)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.НаОснованииПисьма))
		|ГДЕ
		|	СвязиДокументов.Документ = &Предмет
		|	И ЭлектроннаяПочта.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив подчиненных писем в переписке по предмету.
//
Функция ПолучитьПодчиненныеПисьмаПоПредмету(Письмо, Предмет) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ПО (ЭлектроннаяПочта.Ссылка = СвязиДокументов.СвязанныйДокумент)
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПеренаправленоПисьмом)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом))
		|ГДЕ
		|	СвязиДокументов.Документ = &Письмо
		|	И ЭлектроннаяПочта.Предмет = &Предмет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УЧЕТНЫМИ ЗАПИСЯМИ

// Возвращает признак наличия писем по учетной записи.
//
Функция ЕстьПисьмаУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектроннаяПочта.Ссылка
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает учетную запись или Неопределено.
//
Функция ПолучитьУчетнуюЗаписьДляОтправки() Экспорт
	
	ОсновнаяУчетнаяЗапись =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОсновнаяУчетнаяЗапись");
	
	Если Почта.ЭтоУчетнаяЗапись(ОсновнаяУчетнаяЗапись)
		И ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) Тогда
		Возврат ОсновнаяУчетнаяЗапись;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИспользоватьДляОтправки", Истина);
	ПараметрыОтбора.Вставить("ВариантИспользования", Перечисления.ВариантыИспользованияПочты.Встроенная);
	УчетныеЗаписи = Почта.ПолучитьУчетныеЗаписиЭлектроннойПочты(ПараметрыОтбора);
	Если УчетныеЗаписи.Количество() = 1 Тогда
		Возврат УчетныеЗаписи[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СОХРАНЕНИМ ПИСЬМА НА ДИСК

// Формирует данные письма для сохранения на диск
//
Функция ПолучитьДанныеПисьмаДляСохраненияТекста(Письмо, УникальныйИдентификаторФормы) Экспорт
	
	Расширение = "txt";
	ФорматСохраненияПисьма = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ФорматСохраненияПисьма");
	
	Если ФорматСохраненияПисьма = ПредопределенноеЗначение("Перечисление.ФорматыСохраненияПисьма.HTML") Тогда
		Расширение = "html";
		Тема = Письмо.Тема;
		ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(Письмо, УникальныйИдентификаторФормы, Истина);
	Иначе
	
		ПредставлениеОтправителя = "";
		ПредставлениеДатыСтрока = "";
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
			
			ПисьмоОбъект = Письмо.ПолучитьОбъект();
			
			Тема = Письмо.Тема;
			КодировкаПисьма = Письмо.Кодировка;
			
			ПростойТекстПисьма = ПисьмоОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
				
				ПредставлениеОтправителя = ПолучитьПредставлениеИКонтактАдресата(
					Письмо.ОтправительАдресат).Представление;
				
				ПредставлениеДатыСтрока = "Получено: " + Формат(Письмо.ДатаПолучения, "ДФ='dd.MM.yyyy HH:mm'");
				
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
				
				ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(Письмо.УчетнаяЗапись);
				ПредставлениеОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
				ПредставлениеДатыСтрока = "Отправлено: " + Формат(Письмо.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
				
			КонецЕсли;
			
			ПолучателиПисьма = Письмо.ПолучателиПисьма;
			ПолучателиКопий = Письмо.ПолучателиКопий;
			
		ИначеЕсли ТипЗнч(Письмо) = Тип("Структура") Тогда
			
			СтруктураПисьма = Письмо;
			Тема = СтруктураПисьма.ТемаПисьма;
			КодировкаПисьма = СтруктураПисьма.Кодировка;
			ПростойТекстПисьма = СтруктураПисьма.ТекстПисьма;
			
			ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(СтруктураПисьма.УчетнаяЗапись);
			ПредставлениеОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
			ПредставлениеДатыСтрока = "Отправлено: " + Формат(СтруктураПисьма.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
			
			Получатели = СтруктураПисьма.Получатели;
			
			ПолучателиПисьма = Новый ТаблицаЗначений;
			ПолучателиПисьма.Колонки.Добавить("Адресат");
			
			ПолучателиКопий = Новый ТаблицаЗначений;
			ПолучателиКопий.Колонки.Добавить("Адресат");
			
			Для каждого Строка Из Получатели Цикл
				
				Если Не ЗначениеЗаполнено(Строка.Представление) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
					
					РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
					
					Если ПустаяСтрока(РазложенныйАдрес.Адрес) Тогда
						Продолжить;
					КонецЕсли;
					
					Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
						
						Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
							РазложенныйАдрес.Адрес, Строка.Представление);
						
					Иначе
						
						Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
							Строка.Представление, Строка.Представление);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Строка.ТипАдреса = НСтр("ru='Кому:'; en = 'To:'") Тогда
					НоваяСтрока = ПолучателиПисьма.Добавить();
				ИначеЕсли Строка.ТипАдреса = НСтр("ru='Копия:'; en = 'Cc:'") Тогда
					НоваяСтрока = ПолучателиКопий.Добавить();
				Иначе
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока.Адресат = Строка.Адресат;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучателиКопий) Тогда
			
			Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
				"ru ='От: %1
					|%2
					|Кому: %3
					|Копии: %4
					|Тема: %5
					|';
					|en = 'From: %1 
					|%2 
					|To: %3 
					|Copies: %4 
					|Subject: %5'"),
				ПредставлениеОтправителя,
				ПредставлениеДатыСтрока,
				ТаблицаПолучателейВСтроку(ПолучателиПисьма),
				ТаблицаПолучателейВСтроку(ПолучателиКопий),
				Тема);
			
		Иначе
			
			Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
				"ru ='От: %1
					|%2
					|Кому: %3
					|Тема: %4
					|';
					|en = 'From: %1
					|%2
					|To: %3 
					|Subject: %4'"),
				ПредставлениеОтправителя,
				ПредставлениеДатыСтрока,
				ТаблицаПолучателейВСтроку(ПолучателиПисьма),
				Тема);
			
		КонецЕсли;
		
		Кодировка = ПолучитьПерсональнуюНастройку("КодировкаПриСохраненииПисем");
		Если Не ЗначениеЗаполнено(Кодировка) Тогда
			Кодировка = КодировкаПисьма;
		КонецЕсли;
		
		Ширина = ПолучитьПерсональнуюНастройку("ШиринаСтрокиПриСохранении");
		
		ТекстПисьма = Шапка + Символы.ПС + ПростойТекстПисьма;
		
		Если ЗначениеЗаполнено(Ширина) Тогда
			СимволПереписки = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСимволЦитированияВПереписке();
			ТекстПисьма = РаботаСоСтроками.ПолучитьСтрокуВФормате(ТекстПисьма, Ширина, СимволПереписки, Истина);
		КонецЕсли;
	
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	Попытка
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, Кодировка);
		ЗаписьТекста.Записать(ТекстПисьма);
		ЗаписьТекста.Закрыть();
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификаторФормы);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПутьВыбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохраненияПисем");
	
	ДанныеПисьма = Новый Структура;
	ДанныеПисьма.Вставить("Тема", Тема);
	ДанныеПисьма.Вставить("АдресФайла", Адрес);
	ДанныеПисьма.Вставить("ПутьВыбора", ПутьВыбора);
	ДанныеПисьма.Вставить("Кодировка", Кодировка);
	ДанныеПисьма.Вставить("ТекстПисьма", ТекстПисьма);
	ДанныеПисьма.Вставить("Расширение", Расширение);
	
	Возврат ДанныеПисьма;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// ПРЕФИКСЫ ПРИ ОТВЕТАХ И ПЕРЕСЫЛКАХ

// Возвращает префикса для темы в ответном письме.
// Значение по умолчанию: "Re:"
//
Функция ПолучитьПрефиксДляОтветныхПисем() Экспорт
	
	ПрефиксДляОтветныхПисем = СокрЛП(Константы.ПрефиксДляОтветныхПисем.Получить());
	Если ПустаяСтрока(ПрефиксДляОтветныхПисем) Тогда
		ПрефиксДляОтветныхПисем = "Re:";
	КонецЕсли;
	
	Возврат ПрефиксДляОтветныхПисем;
	
КонецФункции

// Устанавливает настройку префикса для темы в ответном письме.
//
Процедура УстановитьПрефиксДляОтветныхПисем(Знач Префикс) Экспорт
	
	Если ПустаяСтрока(Префикс) Тогда
		Префикс = "Re:";
	КонецЕсли;
	Константы.ПрефиксДляОтветныхПисем.Установить(СокрЛп(Префикс));
	
КонецПроцедуры

// Возвращает префикс для темы в пересылаемом письме.
// Значение по умолчанию: "Fw:"
//
Функция ПолучитьПрефиксДляПересылаемыхПисем() Экспорт
	
	ПрефиксДляПересылаемыхПисем = СокрЛП(Константы.ПрефиксДляПересылаемыхПисем.Получить());
	Если ПустаяСтрока(ПрефиксДляПересылаемыхПисем) Тогда
		ПрефиксДляПересылаемыхПисем = "Fw:";
	КонецЕсли;
	
	Возврат ПрефиксДляПересылаемыхПисем;
	
КонецФункции

// Устанавливает настройку префикса для темы в пересылаемом письме.
//
Процедура УстановитьПрефиксДляПересылаемыхПисем(Знач Префикс) Экспорт
	
	Если ПустаяСтрока(Префикс) Тогда
		Префикс = "Fw:";
	КонецЕсли;
	Константы.ПрефиксДляПересылаемыхПисем.Установить(СокрЛП(Префикс));
	
КонецПроцедуры

// Возвращает текст запроса для получения таблицы адресатов для автоподбора
// по личному списку автоподбора пользователя (регистр сведений ОбъектыДляАвтоподбораАдресатов)
//
// Возвращаемое значение:
//   - Строка - текст запроса
//
Функция ТекстЗапросаВычисленияАдресатовДляАвтоподбора()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СведенияОПользователяхДокументооборот.Пользователь КАК Адресат
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ОбъектыДляАвтоподбораАдресатов.ОбъектДанных
		|			ИЗ
		|				РегистрСведений.ОбъектыДляАвтоподбораАдресатов КАК ОбъектыДляАвтоподбораАдресатов
		|			ГДЕ
		|				ОбъектыДляАвтоподбораАдресатов.Владелец = &ТекущийПользователь
		|				И ОбъектыДляАвтоподбораАдресатов.ОбъектДанных ССЫЛКА Справочник.СтруктураПредприятия)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектыДляАвтоподбораАдресатов.ОбъектДанных
		|ИЗ
		|	РегистрСведений.ОбъектыДляАвтоподбораАдресатов КАК ОбъектыДляАвтоподбораАдресатов
		|ГДЕ
		|	ОбъектыДляАвтоподбораАдресатов.Владелец = &ТекущийПользователь
		|	И ОбъектыДляАвтоподбораАдресатов.ОбъектДанных ССЫЛКА Справочник.Пользователи";
		
	Возврат ТекстЗапроса;
		
КонецФункции

// Получает данные для автоподбора в списке получателей для исх письма и формы пересылки.
Функция ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, ЭтоВебКлиент,
	ИскатьПоГруппам = Ложь) Экспорт 
	
	ИспользоватьСвойСписокДляАвтоподбора = 
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ИспользоватьСвойСписокДляАвтоподбора");
	ТекстТаблицыАвтоподбораПользователя = ТекстЗапросаВычисленияАдресатовДляАвтоподбора();
	ТекстПоляВходитВСписокАвтоподбораПользователя = 
		"	ВЫБОР
		|		КОГДА НЕ СписокАвтоподбораПользователя.Адресат ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВходитВСписокАвтоподбораПользователя";
				
	ТекстДополнительнойТаблицы = 
		"ЛЕВОЕ СОЕДИНЕНИЕ ("
		+ ТекстТаблицыАвтоподбораПользователя
		+ ") КАК СписокАвтоподбораПользователя
			|ПО СведенияОбАдресатах.Контакт = СписокАвтоподбораПользователя.Адресат";
			
	ВозвращаемыйСписок = Новый СписокЗначений;
	ВозвращаемыйСписокАвтоподбораПользователя = Новый СписокЗначений;
	
	МассивСлов = Новый Массив;
	МассивСлов.Добавить(Текст);
		
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АдресатыПочтовыхСообщений.Адрес КАК Адрес,
		|	АдресатыПочтовыхСообщений.Ссылка КАК ПочтовыйАдресат,
		|	ЕСТЬNULL(СведенияОбАдресатах.Контакт, НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ЕСТЬNULL(СведенияОбАдресатах.Представление, АдресатыПочтовыхСообщений.Наименование) КАК Представление,
		|	ЛичныеАдресаты.Пользователь,
		|	ЕСТЬNULL(ИспользованиеАдресатов.ДатаПоследнегоИспользования, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоИспользования,
		|	ЛОЖЬ КАК ВходитВСписокАвтоподбораПользователя
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатов
		|		ПО АдресатыПочтовыхСообщений.Ссылка = ИспользованиеАдресатов.Адресат
		|			И (ИспользованиеАдресатов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|			ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
		|		ПО (СведенияОбАдресатах.АдресатСообщения = АдресатыПочтовыхСообщений.Ссылка)
		|			И (СведенияОбАдресатах.Активна)
		|	%ТаблицаАвтоподбораПользователя%
		|ГДЕ
		|	(СведенияОбАдресатах.Представление ПОДОБНО &Представление
		|			ИЛИ АдресатыПочтовыхСообщений.Адрес ПОДОБНО &Представление
		|			ИЛИ АдресатыПочтовыхСообщений.Наименование ПОДОБНО &Представление)
		|	И (ЛичныеАдресаты.Пользователь ЕСТЬ NULL 
		|			ИЛИ ЛичныеАдресаты.Пользователь = &ТекущийПользователь)
		|	И НЕ(ИспользованиеАдресатов.ДатаПоследнегоИспользования = ДАТАВРЕМЯ(1, 1, 1)
		|				И СведенияОбАдресатах.Представление ЕСТЬ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПоследнегоИспользования УБЫВ";
		
	Если ИспользоватьСвойСписокДляАвтоподбора Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ЛОЖЬ КАК ВходитВСписокАвтоподбораПользователя",
			ТекстПоляВходитВСписокАвтоподбораПользователя);
			
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"%ТаблицаАвтоподбораПользователя%",
			ТекстДополнительнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"%ТаблицаАвтоподбораПользователя%",
			"");
	КонецЕсли;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Представление", Текст + "%");
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВозвращаемыйСписок.Количество() = 0
		И ИскатьПоГруппам = Ложь Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	МаксимальноеКоличествоЭлементовВыбора = 22;
	КоличествоЭлементовВыбора = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контакт) 
			И ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Пользователи") 
			И Выборка.Контакт.Недействителен Тогда
			Продолжить;
		КонецЕсли;
		
		Адрес = Выборка.Адрес;
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДубликат = Ложь;
		
		Для каждого Строка Из ВозвращаемыйСписок Цикл
			Если Строка.Значение.Адресат = Выборка.ПочтовыйАдресат 
				И Строка.Значение.Контакт = Выборка.Контакт Тогда
				ЕстьДубликат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДубликат Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Адресат", Выборка.ПочтовыйАдресат);
		ЗначениеВыбора.Вставить("Адрес", Выборка.ПочтовыйАдресат.Адрес);
		ЗначениеВыбора.Вставить("Контакт", Выборка.Контакт);
		Представление = Выборка.Представление;
		
		Если ЭтоВебКлиент Тогда
			Представление = СтрЗаменить(Представление, "<", "(");
			Представление = СтрЗаменить(Представление, ">", ")");
		КонецЕсли;	
		
		ЗначениеВыбора.Вставить("Представление", Представление);
		ЗначениеВыбора.Вставить("Внешний", ЭтоВнешнийАдресат(ЗначениеВыбора.Адресат));
		ЗначениеВыбора.Вставить("ВидМаршрутизации", ЗначениеВыбора.Адресат.ВидМаршрутизации);
		
		ФорматированноеПредставление = ПолучитьФорматированноеПредставление(Представление, МассивСлов);
		
		Если Выборка.ВходитВСписокАвтоподбораПользователя Тогда
			ВозвращаемыйСписокАвтоподбораПользователя.Добавить(ЗначениеВыбора, ФорматированноеПредставление);
		Иначе	
			ВозвращаемыйСписок.Добавить(ЗначениеВыбора, ФорматированноеПредставление);
		КонецЕсли;
		
		КоличествоЭлементовВыбора = КоличествоЭлементовВыбора + 1;
		
		Если КоличествоЭлементовВыбора >= МаксимальноеКоличествоЭлементовВыбора Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВозвращаемыйСписокАвтоподбораПользователя.Количество() > 0 Тогда
		Возврат ВозвращаемыйСписокАвтоподбораПользователя;
	Иначе	
		
		ЧислоГрупп = МаксимальноеКоличествоЭлементовВыбора - ВозвращаемыйСписок.Количество();
		
		Если ИскатьПоГруппам = Истина И ЧислоГрупп > 0 Тогда
			
			МассивСловДляГрупп = Новый Массив;
			МассивСловДляГрупп.Добавить(Текст);
			
			УникальныеПредставления = Новый Соответствие;
			
			ЗапросГрупп = Новый Запрос;
			ЗапросГрупп.Текст = ПолучитьЗапросГрупп(); // Текст
			ЗапросГрупп.УстановитьПараметр("Наименование", "%" + Текст + "%");
			ЗапросГрупп.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
			ЗапросГрупп.УстановитьПараметр("Родитель", 
				Справочники.ГруппыКонтактовПользователей.ПустаяСсылка());
			
			ВыборкаГрупп = ЗапросГрупп.Выполнить().Выбрать();
			Пока ВыборкаГрупп.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаГрупп.Ссылка) = Тип("СправочникСсылка.РабочиеГруппы") Или
					ТипЗнч(ВыборкаГрупп.Ссылка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
					
					Найдено = УникальныеПредставления.Получить(ВыборкаГрупп.Наименование);
					Если Найдено <> Неопределено Тогда
						Продолжить;
					Иначе
						УникальныеПредставления[ВыборкаГрупп.Наименование] = ВыборкаГрупп.Ссылка;
					КонецЕсли;	
					
				КонецЕсли;	
				
				ЗначениеВыбора = Новый Структура(
					"Адресат, Контакт, Адрес, Внешний, ВидМаршрутизации, ЭтоГруппа, Представление");
				ЗначениеВыбора.Внешний = Ложь;
				ЗначениеВыбора.ЭтоГруппа = Истина;
				ЗначениеВыбора.Адресат = ВыборкаГрупп.Ссылка;
				
				ИмяТипа = ПолучитьИмяТипа(ВыборкаГрупп.Ссылка);
				
				Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1 (%2)", ВыборкаГрупп.Наименование, ИмяТипа);
				
				Если ЭтоВебКлиент Тогда
					Представление = СтрЗаменить(Представление, "<", "(");
					Представление = СтрЗаменить(Представление, ">", ")");
				КонецЕсли;
				ЗначениеВыбора.Представление = Представление;
				
				ФорматированноеПредставление = ПолучитьФорматированноеПредставление(Представление, МассивСловДляГрупп);
				
				ВозвращаемыйСписок.Добавить(ЗначениеВыбора, ФорматированноеПредставление);
				
				КоличествоЭлементовВыбора = КоличествоЭлементовВыбора + 1;
				
				Если КоличествоЭлементовВыбора >= МаксимальноеКоличествоЭлементовВыбора Тогда
					Прервать;
				КонецЕсли;
					
			КонецЦикла;			
			
		КонецЕсли;
		
		Возврат ВозвращаемыйСписок;
		
	КонецЕсли;	
	
КонецФункции

// Возвращает понятное для пользователя имя типа группы
//
// Параметры
//  Группа - группа пользователей, контрагентов, физлиц, 
//		личных адресатов, групп Мои контакты, Отдел
Функция ПолучитьИмяТипа(Группа)

	ИмяТипа = Строка(ТипЗнч(Группа));
	
	Если ТипЗнч(Группа) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		ИмяТипа = НСтр("ru = 'рабочая группа'; en = 'Working group'");
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ИмяТипа = НСтр("ru = 'отдел'; en = 'department'");
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		ИмяТипа = НСтр("ru = 'группа личных адресатов'; en = 'personal contacts group'");
	ИначеЕсли ТипЗнч(Группа) 
		= Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		ИмяТипа = НСтр("ru = 'группа «Мои контакты»'; en = '«my contacts» group'");
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяТипа = НСтр("ru = 'группа контрагентов'; en = 'counterparty group'");
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяТипа = НСтр("ru = 'группа физических лиц'; en = 'Individuals group'");
	КонецЕсли;	
	
	Возврат ИмяТипа;

КонецФункции				

// Возвращает текст запроса для поиска групп по подстроке
Функция ПолучитьЗапросГрупп()
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	СтруктураПредприятия.Ссылка КАК Ссылка,
	        |	СтруктураПредприятия.Наименование КАК Наименование
	        |ИЗ
	        |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	        |ГДЕ
	        |	СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
	        |	И СтруктураПредприятия.Наименование ПОДОБНО &Наименование
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	РабочиеГруппы.Ссылка,
	        |	РабочиеГруппы.Наименование
	        |ИЗ
	        |	Справочник.РабочиеГруппы КАК РабочиеГруппы
	        |ГДЕ
	        |	РабочиеГруппы.ПометкаУдаления = ЛОЖЬ
	        |	И РабочиеГруппы.Наименование ПОДОБНО &Наименование
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ГруппыЛичныхАдресатов.Ссылка,
	        |	ГруппыЛичныхАдресатов.Наименование
	        |ИЗ
	        |	Справочник.ГруппыЛичныхАдресатов КАК ГруппыЛичныхАдресатов
	        |ГДЕ
	        |	ГруппыЛичныхАдресатов.ПометкаУдаления = ЛОЖЬ
	        |	И ГруппыЛичныхАдресатов.Наименование ПОДОБНО &Наименование
	        |	И ГруппыЛичныхАдресатов.Пользователь = &Пользователь
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ГруппыКонтактовПользователей.Ссылка,
	        |	ГруппыКонтактовПользователей.Наименование
	        |ИЗ
	        |	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
	        |ГДЕ
	        |	ГруппыКонтактовПользователей.ПометкаУдаления = ЛОЖЬ
	        |	И ГруппыКонтактовПользователей.Наименование ПОДОБНО &Наименование
	        |	И ГруппыКонтактовПользователей.Родитель <> &Родитель
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Контрагенты.Ссылка,
	        |	Контрагенты.Наименование
	        |ИЗ
	        |	Справочник.Контрагенты КАК Контрагенты
	        |ГДЕ
	        |	Контрагенты.ПометкаУдаления = ЛОЖЬ
	        |	И Контрагенты.Наименование ПОДОБНО &Наименование
	        |	И Контрагенты.ЭтоГруппа = ИСТИНА
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ФизическиеЛица.Ссылка,
	        |	ФизическиеЛица.Наименование
	        |ИЗ
	        |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	        |ГДЕ
	        |	ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	        |	И ФизическиеЛица.Наименование ПОДОБНО &Наименование
	        |	И ФизическиеЛица.ЭтоГруппа = ИСТИНА";
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьФорматированноеПредставление(Представление, МассивСлов)
	
	ФорматированноеПредставление = Представление;
	
	МассивПодсветки = Новый Массив;
	МассивСловПредставления = ВстроеннаяПочтаКлиентСервер.СтрокуПочтовогоАдресаВСтруктурыСлов(Представление);
	
	Для Каждого СтруктураСлова Из МассивСловПредставления Цикл
		
		СловоПредставления = НРег(СтруктураСлова.Слово);
		
		Для Каждого СловоПоиска Из МассивСлов Цикл
			
			ПозицияНачала = Найти(СловоПредставления, НРег(СловоПоиска));
			Если ПозицияНачала = 1 Тогда
				МассивПодсветки.Добавить(
					Новый Структура("Начало, ДлинаСлова, ДлинаПодсвеченного", 
					СтруктураСлова.Позиция, СтрДлина(СловоПредставления), СтрДлина(СловоПоиска)));
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Если МассивПодсветки.Количество() <> 0 Тогда
		
		ФорматированноеПредставление = "";
		ПозицияКонцаПредыдущегоСлова = 1;
		
		Для Каждого Подсветка Из МассивПодсветки Цикл			
			
			ПозицияНачала = Подсветка.Начало;
			Длина = Подсветка.ДлинаПодсвеченного;
			
			СтрокаДо =    Сред(Представление, 
				ПозицияКонцаПредыдущегоСлова, ПозицияНачала - ПозицияКонцаПредыдущегоСлова);
			СтрокаВыделенная = Сред(Представление, ПозицияНачала, Длина);
			
			ФорматированноеПредставление = Новый ФорматированнаяСтрока(
				ФорматированноеПредставление,
				СтрокаДо, 
				Новый ФорматированнаяСтрока(СтрокаВыделенная, , WebЦвета.Красный) 
				);
				
			ПозицияКонцаПредыдущегоСлова = ПозицияНачала + Длина;	
			
		КонецЦикла;	
		
		Если ПозицияКонцаПредыдущегоСлова <= СтрДлина(Представление) Тогда
			
			СтрокаПосле = Сред(Представление, ПозицияКонцаПредыдущегоСлова);
			
			ФорматированноеПредставление = Новый ФорматированнаяСтрока(
				ФорматированноеПредставление,
				СтрокаПосле);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат ФорматированноеПредставление;
	
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С АДРЕСНЫМИ ДАННЫМИ КОНТАКТОВ

// Возвращает ссылку на почтового адресата
//
// Параметры:
//   Адрес        (Строка) Адрес email
//   ОтображаемоеИмя (Строка) Отображаемое имя для формирования представления адресата
//   Ид            (УникальныйИдентификатор)  Уникальный идентификатор адресата - заполнен
//	   при обмене с мобильным
//
// Возвращаемое значение: 
//   Адресат (СправочникСсылка.АдресатыПочтовыхСообщений)
Функция ПолучитьПочтовогоАдресата(Адрес, ОтображаемоеИмя = Неопределено, Ид = Неопределено) Экспорт
	
	Если Ид <> Неопределено Тогда
		
		Адресат = НайтиПочтовогоАдресатаПоСсылке(Ид);
		Если ЗначениеЗаполнено(Адресат) Тогда
			Возврат Адресат;
	  	КонецЕсли;
	  
	КонецЕсли; 
	
	// Адрес длиной более 100 не имеет смысла, 
	// т.к. реквизит Адрес в справочнике АдресатыПочтовыхСообщений имеет длину 100.
	Адрес = Лев(Адрес, 100); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресатыПочтовыхСообщений.Ссылка
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|ГДЕ
		|	АдресатыПочтовыхСообщений.Адрес = &Адрес";
	Запрос.УстановитьПараметр("Адрес", Адрес);
	РезультатЗапроса = Запрос.Выполнить();
	Адресат = Справочники.АдресатыПочтовыхСообщений.ПустаяСсылка();
	Если РезультатЗапроса.Пустой() Тогда
		Если Не ЗначениеЗаполнено(ОтображаемоеИмя) Тогда
			ОтображаемоеИмя = Адрес;
		КонецЕсли;
		АдресатОбъект = Справочники.АдресатыПочтовыхСообщений.СоздатьЭлемент();
		Если Ид <> Неопределено Тогда
			АдресатОбъект.УстановитьСсылкуНового(Справочники.АдресатыПочтовыхСообщений.ПолучитьСсылку(Ид));
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтображаемоеИмя) И СтрНайти(НРег(ОтображаемоеИмя), НРег(Адрес)) = 0 Тогда
			АдресатОбъект.Наименование = ОтображаемоеИмя + " <" + Адрес + ">";
		ИначеЕсли ЗначениеЗаполнено(ОтображаемоеИмя) Тогда
			АдресатОбъект.Наименование = ОтображаемоеИмя;
		Иначе
			АдресатОбъект.Наименование = Адрес;
		КонецЕсли;	
		АдресатОбъект.Адрес = Адрес;
		АдресатОбъект.Записать();
		Адресат = АдресатОбъект.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Адресат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Адресат;
	
КонецФункции

// Находит адресата по уже известной ссылке
Функция НайтиПочтовогоАдресатаПоСсылке(Ид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресатыПочтовыхСообщений.Ссылка
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|ГДЕ
		|	АдресатыПочтовыхСообщений.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	АдресатыПочтовыхСообщений.Код";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.АдресатыПочтовыхСообщений.ПолучитьСсылку(Ид));
	РезультатЗапроса = Запрос.Выполнить();
	Адресат = Справочники.АдресатыПочтовыхСообщений.ПустаяСсылка();
	
	Если РезультатЗапроса.Пустой() Тогда			
		
		Возврат Адресат;
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Адресат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адресат;
		
КонецФункции	

// Ищет контрагента по соответствию адреса электронной почты, в том числе и среди контактных лиц
// Результат (Структура, Неопределено)
// - Контрагент (СправочникСсылка.Контрагенты)
// - КонтактноеЛицо (СправочникСсылка.КонтактныеЛица, Неопределено)
//
// Параметры:
// - Отправитель (Строка) Строка вида "ХХХХХХ <AA@BB.cc>" или "AA@BB.cc"
//
Функция ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Отправитель) Экспорт
	
	АдресЭлектроннойПочты = РаботаСоСтроками.ВыделитьПодстрокуВСкобках(Отправитель, "<", ">");
	Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаКонтрагентов = ПолучитьКонтрагентовПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты);
	Если ТаблицаКонтрагентов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Контрагент", ТаблицаКонтрагентов[0].Контрагент);
	Результат.Вставить("КонтактноеЛицо", ТаблицаКонтрагентов[0].КонтактноеЛицо);
	
	Возврат Результат;
	
КонецФункции

// Результат (ТаблицаЗначений)
// - Контрагент (СправочникСсылка.Контрагенты)
// - КонтактноеЛицо (СправочникСсылка.КонтактныеЛица)
//
// Параметры
// - АдресЭлектроннойПочты (Строка) Адрес электронной почты
//
Функция ПолучитьКонтрагентовПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|		ПО Контрагенты.Ссылка = КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
		|			И (КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП)");
	Запрос.УстановитьПараметр("АдресЭП", АдресЭлектроннойПочты);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает строку, содержащую представление адресата
Функция ПолучитьПочтовоеПредставлениеКонтакта(Контакт, Адрес) Экспорт
	
	СтрокаКВозврату = "";
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Адрес;
	КонецЕсли;
	// Если у контакта несколько адресов, то покажем его с адресом.
	// Если заполненный адрес только один, то покажем без адреса.
	КоличествоЗаполненныхАдресов = 0;
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Количество(Таблица.Ссылка)
		|ИЗ
		|	%1 КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|					И ТаблицаКонтактнаяИнформация.АдресЭП <> """")
		|			И (Таблица.Ссылка = &Ссылка)",
		ИмяТаблицы);
	Запрос.УстановитьПараметр("Ссылка", Контакт);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ПредставлениеКонтакт = Строка(Контакт);
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				ПредставлениеКонтакт = Контакт.ПредставлениеВПерепискеСРангом;
			КонецЕсли;
		
			Если Выборка[0] = 1 Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					СтрокаКВозврату,
					", ",
					ПредставлениеКонтакт);
			Иначе
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					СтрокаКВозврату,
					", ",
					РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
						ПредставлениеКонтакт,
						Адрес));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаКВозврату; 
	
КонецФункции

// Возвращает строку, содержащую представление адресата
Функция ПолучитьПредставлениеИКонтактАдресата(ПочтовыйАдресат, ПринудительноеДобавлениеАдреса = Ложь) Экспорт

	СтруктураВозврата = Новый Структура;
	Если ЗначениеЗаполнено(ПочтовыйАдресат.Наименование) Тогда
		Если СтрНайти(НРег(ПочтовыйАдресат.Наименование), НРег(ПочтовыйАдресат.Адрес)) > 0 Тогда
			ПредставлениеАдресата = ПочтовыйАдресат.Наименование;
		Иначе
			ПредставлениеАдресата = ПочтовыйАдресат.Наименование + " <" + НРег(ПочтовыйАдресат.Адрес) + ">";
		КонецЕсли;
	Иначе
		ПредставлениеАдресата = НРег(ПочтовыйАдресат.Адрес);
	КонецЕсли;
	СтруктураВозврата.Вставить("Представление", ПредставлениеАдресата);
	СтруктураВозврата.Вставить("Контакт", Неопределено);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + ЕСТЬNULL(СведенияОбАдресатах.Представление, Адресаты.Наименование)), 2, 1000) КАК Представление
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК Адресаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Адресаты.Ссылка = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Активна)
		|ГДЕ
		|	Адресаты.Ссылка = &АдресатСообщения
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения";
				
	Запрос.УстановитьПараметр("АдресатСообщения", ПочтовыйАдресат);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Представление = Выборка.Представление;
			
			Если ПринудительноеДобавлениеАдреса
				И СтрНайти(НРег(Выборка.Представление), НРег(ПочтовыйАдресат.Адрес)) = 0 Тогда
				СтруктураВозврата.Представление = Выборка.Представление + " <" + НРег(ПочтовыйАдресат.Адрес) + ">";			
			КонецЕсли;
			
			СтруктураВозврата.Контакт = Выборка.Контакт;
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Внешний", ЭтоВнешнийАдресат(ПочтовыйАдресат));
	СтруктураВозврата.Вставить("ВидМаршрутизации", ПочтовыйАдресат.ВидМаршрутизации);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает строку, содержащую представление адресата
Функция ПолучитьПредставлениеИКонтактОтправителя(ПочтовыйАдресат, УникальныйИдентификаторФормы, 
	ПринудительноеДобавлениеАдреса = Ложь) Экспорт

	СтруктураВозврата = Новый Структура;
	Если ЗначениеЗаполнено(ПочтовыйАдресат.Наименование) Тогда
		Если СтрНайти(НРег(ПочтовыйАдресат.Наименование), НРег(ПочтовыйАдресат.Адрес)) > 0 Тогда
			ПредставлениеАдресата = ПочтовыйАдресат.Наименование;
		Иначе
			ПредставлениеАдресата = ПочтовыйАдресат.Наименование + " <" + НРег(ПочтовыйАдресат.Адрес) + ">";
		КонецЕсли;
	Иначе
		ПредставлениеАдресата = НРег(ПочтовыйАдресат.Адрес);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Контакт", Неопределено);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + ЕСТЬNULL(СведенияОбАдресатах.Представление, Адресаты.Наименование)), 2, 1000) КАК Представление
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК Адресаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Адресаты.Ссылка = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Активна)
		|ГДЕ
		|	Адресаты.Ссылка = &АдресатСообщения
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения";
				
	Запрос.УстановитьПараметр("АдресатСообщения", ПочтовыйАдресат);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ПредставлениеАдресата = Выборка.Представление;
			
			Если ПринудительноеДобавлениеАдреса
				И СтрНайти(НРег(Выборка.Представление), НРег(ПочтовыйАдресат.Адрес)) = 0 Тогда
				ПредставлениеАдресата = Выборка.Представление + " <" + НРег(ПочтовыйАдресат.Адрес) + ">";			
			КонецЕсли;
			
			СтруктураВозврата.Контакт = Выборка.Контакт;
			
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеАдресата = РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеАдресата);
	
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	ПолучатьФотографии = Истина;
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ОтображатьФотографииПерсональнаяНастройка",
			Истина);
	
	Если Не ОтображатьФотографииОбщаяНастройка
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая
		Или ПриложениеЯвляетсяВебКлиентом Тогда
		ПолучатьФотографии = Ложь;
	КонецЕсли;
	
	УказатьГиперссылку = Не ПолучатьФотографии; // если нет фото, нужна гиперссылка
	
	Если ПолучатьФотографии Тогда
		
		Контакт = СтруктураВозврата.Контакт;
		
		Фотография = "";
		Если ЗначениеЗаполнено(Контакт) 
			И ТипЗнч(Контакт) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
			
			ЕстьКартинка = Ложь;
			Фотография = РаботаСФотографиями.ПолучитьАдресФото(Контакт, УникальныйИдентификаторФормы, ЕстьКартинка);
			
			Если Не ЗначениеЗаполнено(Фотография) Тогда
				УказатьГиперссылку = Истина;
			КонецЕсли;	
			
		КонецЕсли;
			
	КонецЕсли;	
	
	Если УказатьГиперссылку И ЗначениеЗаполнено(СтруктураВозврата.Контакт) Тогда
		ПредставлениеАдресата = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=v8doc:%1> %2 </a>", 
					ПолучитьНавигационнуюСсылку(СтруктураВозврата.Контакт),
					ПредставлениеАдресата);
	КонецЕсли;	
	
	СтруктураВозврата.Вставить("Представление", ПредставлениеАдресата);
	
	СтруктураВозврата.Вставить("Внешний", ЭтоВнешнийАдресат(ПочтовыйАдресат));
	СтруктураВозврата.Вставить("ВидМаршрутизации", ПочтовыйАдресат.ВидМаршрутизации);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует представление массива адресатов  - как одну строку
Функция ПолучитьПредставлениеМассиваАдресатов(МассивАдресатов) Экспорт
	
	Если МассивАдресатов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаАдресатов = Новый ТаблицаЗначений; 
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.АдресатыПочтовыхСообщений"));	
	НоваяКолонка = ТаблицаАдресатов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Массив));
	Для Каждого ЭлементМассива Из МассивАдресатов Цикл
		ТаблицаАдресатов.Добавить().Ссылка = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&Данные КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Адресаты.Ссылка,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + ЕСТЬNULL(СведенияОбАдресатах.Представление, Адресаты.Наименование)), 2, 1000) КАК Представление
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК Адресаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК Таблица
		|		ПО Адресаты.Ссылка = Таблица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Адресаты.Ссылка = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Активна)
		|
		|СГРУППИРОВАТЬ ПО
		|	Адресаты.Ссылка";
	
	Запрос.УстановитьПараметр("Данные", ТаблицаАдресатов); 			
	РезультатЗапроса = Запрос.Выполнить();
	ИтоговаяСтрока = "";
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ПустаяСтрока(ИтоговаяСтрока) Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + "; ";
			КонецЕсли;	
			ИтоговаяСтрока = ИтоговаяСтрока + Выборка.Представление;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

// Формирует представление массива адресатов  - как одну html строку - с гиперссылками на контактах.
Функция ПолучитьПредставлениеМассиваАдресатовСГиперссылками(МассивАдресатов) Экспорт
	
	Если МассивАдресатов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаАдресатов = Новый ТаблицаЗначений; 
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.АдресатыПочтовыхСообщений"));	
	НоваяКолонка = ТаблицаАдресатов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Массив));
	Для Каждого ЭлементМассива Из МассивАдресатов Цикл
		ТаблицаАдресатов.Добавить().Ссылка = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&Данные КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Адресаты.Ссылка КАК Ссылка,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + ЕСТЬNULL(СведенияОбАдресатах.Представление, Адресаты.Наименование)), 2, 1000) КАК Представление
		|ПОМЕСТИТЬ АдресатИПредставление
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК Адресаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК Таблица
		|		ПО Адресаты.Ссылка = Таблица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Адресаты.Ссылка = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Активна)
		|
		|СГРУППИРОВАТЬ ПО
		|	Адресаты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдресатИПредставление.Ссылка КАК Ссылка,
		|	АдресатИПредставление.Представление КАК Представление,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт
		|ИЗ
		|	АдресатИПредставление КАК АдресатИПредставление
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО АдресатИПредставление.Ссылка = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Представление = АдресатИПредставление.Представление)
		|			И (СведенияОбАдресатах.Активна)
		|
		|СГРУППИРОВАТЬ ПО
		|	АдресатИПредставление.Ссылка,
		|	АдресатИПредставление.Представление";
	
	Запрос.УстановитьПараметр("Данные", ТаблицаАдресатов); 			
	РезультатЗапроса = Запрос.Выполнить();
	ИтоговаяСтрока = "";
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ПустаяСтрока(ИтоговаяСтрока) Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + "; ";
			КонецЕсли;
			
			ПредставлениеКорректное = Выборка.Представление;
			ПредставлениеКорректное = РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеКорректное);
			
			Если Не ЗначениеЗаполнено(Выборка.Контакт) Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + ПредставлениеКорректное;
			Иначе
				ИтоговаяСтрока = ИтоговаяСтрока
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<a href=%1> %2 </a>", 
						ПолучитьНавигационнуюСсылку(Выборка.Контакт),
						ПредставлениеКорректное);
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

// Заполняет массив получателей входящего письма
Функция ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(Письмо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + СведенияОбАдресатах.Представление), 2, 1000) КАК Представление
		|ПОМЕСТИТЬ СведенияПредставления
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|ГДЕ
		|	СведенияОбАдресатах.Активна
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АдресатСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящееПисьмоПолучателиПисьма.Адресат.Адрес КАК Адрес,
		|	ВходящееПисьмоПолучателиПисьма.Адресат КАК ПочтовыйАдресат,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ВходящееПисьмоПолучателиПисьма.Адресат.Наименование) КАК Представление,
		|	&СтрокаКому КАК ТипАдреса,
		|	1 КАК НомерСпособаАдресации
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиПисьма КАК ВходящееПисьмоПолучателиПисьма
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ВходящееПисьмоПолучателиПисьма.Адресат.Ссылка)
		|ГДЕ
		|	ВходящееПисьмоПолучателиПисьма.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящееПисьмоПолучателиКопий.Адресат.Адрес,
		|	ВходящееПисьмоПолучателиКопий.Адресат,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ВходящееПисьмоПолучателиКопий.Адресат.Наименование),
		|	&СтрокаКопия,
		|	2
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиКопий КАК ВходящееПисьмоПолучателиКопий
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ВходящееПисьмоПолучателиКопий.Адресат.Ссылка)
		|ГДЕ
		|	ВходящееПисьмоПолучателиКопий.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПочтовыйАдресат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат.Наименование КАК Наименование,
		|	Данные.ПочтовыйАдресат КАК ПочтовыйАдресат,
		|	Данные.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.РолиИсполнителей)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Внешний,
		|	Данные.ТипАдреса,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Данные.ПочтовыйАдресат = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Представление = Данные.Представление)
		|			И (СведенияОбАдресатах.Активна)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат,
		|	Данные.Представление,
		|	Данные.ТипАдреса,
		|	Данные.ПочтовыйАдресат.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Запрос.УстановитьПараметр("Ссылка", Письмо);
	Запрос.УстановитьПараметр("СтрокаКому", НСтр("ru = 'Кому:'; en = 'To:'"));
	Запрос.УстановитьПараметр("СтрокаКопия", НСтр("ru = 'Копия:'; en = 'Cc:'"));
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Заполняет массив получателей исходящего письма
Функция ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(Письмо,
	СортироватьПоПредставлению = Истина, ШаблоныПисем = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + СведенияОбАдресатах.Представление), 2, 1000) КАК Представление
		|ПОМЕСТИТЬ СведенияПредставления
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|ГДЕ
		|	СведенияОбАдресатах.Активна
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АдресатСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящееПисьмоПолучателиПисьма.Адресат.Адрес КАК Адрес,
		|	ИсходящееПисьмоПолучателиПисьма.Адресат КАК ПочтовыйАдресат,
		|	ИсходящееПисьмоПолучателиПисьма.Адресат.ВидМаршрутизации КАК ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиПисьма.Адресат.Наименование) КАК Представление,
		|	&СтрокаКому КАК ТипАдреса,
		|	ИсходящееПисьмоПолучателиПисьма.ПорядковыйНомер КАК ПорядковыйНомер
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Документ.ИсходящееПисьмо.ПолучателиПисьма КАК ИсходящееПисьмоПолучателиПисьма
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиПисьма.Адресат.Ссылка)
		|ГДЕ
		|	ИсходящееПисьмоПолучателиПисьма.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящееПисьмоПолучателиКопий.Адресат.Адрес,
		|	ИсходящееПисьмоПолучателиКопий.Адресат,
		|	ИсходящееПисьмоПолучателиКопий.Адресат.ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиКопий.Адресат.Наименование),
		|	&СтрокаКопия,
		|	ИсходящееПисьмоПолучателиКопий.ПорядковыйНомер
		|ИЗ
		|	Документ.ИсходящееПисьмо.ПолучателиКопий КАК ИсходящееПисьмоПолучателиКопий
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиКопий.Адресат.Ссылка)
		|ГДЕ
		|	ИсходящееПисьмоПолучателиКопий.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Адрес,
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат,
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Наименование),
		|	&СтрокаСкрытаяКопия,
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.ПорядковыйНомер
		|ИЗ
		|	Документ.ИсходящееПисьмо.ПолучателиСкрытыхКопий КАК ИсходящееПисьмоПолучателиСкрытыхКопий
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Ссылка)
		|ГДЕ
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПочтовыйАдресат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат КАК Адресат,
		|	Данные.ПочтовыйАдресат.Наименование КАК Наименование,
		|	Данные.ВидМаршрутизации КАК ВидМаршрутизации,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.РолиИсполнителей)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Внешний,
		|	Данные.Представление КАК Представление,
		|	Данные.ТипАдреса,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ИСТИНА КАК РедактированиеЗавершено,
		|	Данные.ПорядковыйНомер КАК ПорядковыйНомер
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Данные.ПочтовыйАдресат = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Представление = Данные.Представление)
		|			И (СведенияОбАдресатах.Активна)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат,
		|	Данные.ВидМаршрутизации,
		|	Данные.Представление,
		|	Данные.ТипАдреса,
		|	Данные.ПочтовыйАдресат.Наименование,
		|	Данные.ПорядковыйНомер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Если ШаблоныПисем Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсходящееПисьмо.", "Справочник.ШаблоныПисем.");
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Ссылка", Письмо);	
	Запрос.УстановитьПараметр("СтрокаКому", НСтр("ru = 'Кому:'; en = 'To:'"));
	Запрос.УстановитьПараметр("СтрокаКопия", НСтр("ru = 'Копия:'; en = 'Cc:'"));
	Запрос.УстановитьПараметр("СтрокаСкрытаяКопия", НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'"));
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Если СортироватьПоПредставлению Тогда
		ТаблицаЗначений.Сортировать("Представление");
	Иначе
		ТаблицаЗначений.Сортировать("ПорядковыйНомер");
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Формирует соответствие структур-описаний массива адресатов
Функция ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + СведенияОбАдресатах.Представление), 2, 1000) КАК Представление
		|ПОМЕСТИТЬ СведенияПредставления
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|ГДЕ
		|	СведенияОбАдресатах.Активна
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АдресатСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Адресаты.Адрес КАК Адрес,
		|	Адресаты.Ссылка КАК ПочтовыйАдресат,
		|	ЕСТЬNULL(Сведения.Представление, Адресаты.Наименование) КАК Представление,
		|	&СтрокаКому КАК ТипАдреса
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК Адресаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК Сведения
		|		ПО Адресаты.Ссылка = Сведения.АдресатСообщения
		|ГДЕ
		|	Адресаты.Ссылка В(&МассивАдресатов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПочтовыйАдресат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат КАК ПочтовыйАдресат,
		|	Данные.Представление КАК Представление,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.РолиИсполнителей)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Внешний,
		|	Данные.ПочтовыйАдресат.Наименование
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Данные.ПочтовыйАдресат = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Представление = Данные.Представление)
		|			И (СведенияОбАдресатах.Активна)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат,
		|	Данные.Представление,
		|	Данные.ТипАдреса
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Запрос.УстановитьПараметр("МассивАдресатов", МассивАдресатов);	
	Запрос.УстановитьПараметр("СтрокаКому", НСтр("ru = 'Кому:'; en = 'To:'"));
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Соответствие = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ТаблицаЗначений Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Адрес", СтрокаДанных[0]);
		СтруктураДанных.Вставить("Представление", СтрокаДанных[2]);
		СтруктураДанных.Вставить("Контакт", СтрокаДанных[3]);
		СтруктураДанных.Вставить("Внешний", СтрокаДанных[4]);
		СтруктураДанных.Вставить("Наименование", СтрокаДанных[5]);
		СтруктураДанных.Вставить("Ссылка", СтрокаДанных[1]);
		
		Соответствие.Вставить(СтрокаДанных[1], СтруктураДанных);
	КонецЦикла;
	
	Возврат Соответствие;	
	
КонецФункции

// Сотрудник другой организации
Функция ЭтоВнешнийАдресат(Адресат) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбАдресатах.Контакт
	|ИЗ
	|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
	|ГДЕ
	|	СведенияОбАдресатах.АдресатСообщения = &АдресатСообщения
	|	И СведенияОбАдресатах.Активна";
	Запрос.УстановитьПараметр("АдресатСообщения", Адресат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Пользователи")
		 Или ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

// Получает вид маршрутизации (внутренняя или внешняя)
Функция ПолучитьВидМаршрутизацииПоАдресу(Адрес) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьВстроеннуюПочту.Получить() Тогда 
		Возврат Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьВнутреннююМаршрутизацию.Получить() Тогда 
		Возврат Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	КонецЕсли;
	
	УчетныеЗаписи = ПолучитьУчетныеЗаписиПоАдресу(Адрес, Истина);
	Если УчетныеЗаписи.Количество() = 0 Тогда  // для адресата нет учетных записей для внутренней маршрутизации
		Возврат Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	КонецЕсли;
		
	Возврат Перечисления.ВидыМаршрутизацииПисем.Внутренняя;
		
КонецФункции	

// Получает таблицу с информацией о получателях переданного массива входящих писем
// Параметры:
//	МассивПисем - массив ссылок на письма. Из них будут обрабатываться только входящие письма.
// Возвращает
//	ТаблицаЗначений
//		Письмо - ссылка на письмо
//		Адрес - адрес получателя
//		Наименование - наименование адресата-получателя
//		ПочтовыйАдресат - ссылка на адресата-получателя
//		Представление - представление контакта, если он есть
//		Внешний - тип адресата
//		ТипАдреса - строка "Кому" или "Копия"
//		Контакт - ссылка на контакт из адресной книги
Функция ПолучитьПредставленияИКонтактыПолучателейВходящихПисем(МассивПисем) Экспорт
	
	Таблица = Новый ТаблицаЗначений; 
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ВходящееПисьмо"));	
	НоваяКолонка = Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Массив));
	Для Каждого ЭлементМассива Из МассивПисем Цикл
		Если ТипЗнч(ЭлементМассива.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			Таблица.Добавить().Ссылка = ЭлементМассива.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВходящиеПисьмаВременная
		|ИЗ
		|	&Данные КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + СведенияОбАдресатах.Представление), 2, 1000) КАК Представление
		|ПОМЕСТИТЬ СведенияПредставления
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АдресатСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеПисьмаВременная.Ссылка КАК Письмо,
		|	ВходящееПисьмоПолучателиПисьма.Адресат.Адрес КАК Адрес,
		|	ВходящееПисьмоПолучателиПисьма.Адресат КАК ПочтовыйАдресат,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ВходящееПисьмоПолучателиПисьма.Адресат.Наименование) КАК Представление,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.Кому) КАК ТипАдреса
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	ВходящиеПисьмаВременная КАК ВходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо.ПолучателиПисьма КАК ВходящееПисьмоПолучателиПисьма
		|		ПО ВходящееПисьмоПолучателиПисьма.Ссылка = ВходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ВходящееПисьмоПолучателиПисьма.Адресат.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящиеПисьмаВременная.Ссылка,
		|	ВходящееПисьмоПолучателиКопий.Адресат.Адрес,
		|	ВходящееПисьмоПолучателиКопий.Адресат,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ВходящееПисьмоПолучателиКопий.Адресат.Наименование),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.Копия)
		|ИЗ
		|	ВходящиеПисьмаВременная КАК ВходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо.ПолучателиКопий КАК ВходящееПисьмоПолучателиКопий
		|		ПО ВходящееПисьмоПолучателиКопий.Ссылка = ВходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ВходящееПисьмоПолучателиКопий.Адресат.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящиеПисьмаВременная.Ссылка,
		|	ВходящееПисьмоПолучателиОтвета.Адресат.Адрес,
		|	ВходящееПисьмоПолучателиОтвета.Адресат,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ВходящееПисьмоПолучателиОтвета.Адресат.Наименование),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.ОбратныйАдрес)
		|ИЗ
		|	ВходящиеПисьмаВременная КАК ВходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо.ПолучателиОтвета КАК ВходящееПисьмоПолучателиОтвета
		|		ПО ВходящееПисьмоПолучателиОтвета.Ссылка = ВходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ВходящееПисьмоПолучателиОтвета.Адресат.Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПочтовыйАдресат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Письмо,
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат.Наименование КАК Наименование,
		|	Данные.ПочтовыйАдресат КАК ПочтовыйАдресат,
		|	Данные.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.РолиИсполнителей)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Внешний,
		|	Данные.ТипАдреса,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Данные.ПочтовыйАдресат = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Представление = Данные.Представление)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Письмо,
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат,
		|	Данные.Представление,
		|	Данные.ТипАдреса,
		|	Данные.ПочтовыйАдресат.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Запрос.УстановитьПараметр("Данные", Таблица);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Получает таблицу с информацией о получателях переданного массива исходящих писем
// Параметры:
//	МассивПисем - массив ссылок на письма. Из них будут обрабатываться только исходящие письма.
// Возвращает
//	ТаблицаЗначений
//		Письмо - ссылка на письмо
//		Адрес - адрес получателя
//		ПочтовыйАдресат - ссылка на адресата-получателя
//		ВидМаршрутизации - вид марщрутизации адресата
//		Внешний - признак того, что адресат внешний (булево)
//		Представление - почтовое представление адресата
//		ТипАдреса - строка "Кому", "Копия" или "Скрытая"
//		Контакт - ссылка на конткат из адресной книги, если есть
Функция ПолучитьПредставленияИКонтактыПолучателейИсходящихПисем(МассивПисем) Экспорт
	
	Таблица = Новый ТаблицаЗначений; 
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо"));	
	НоваяКолонка = Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Массив));
	Для Каждого ЭлементМассива Из МассивПисем Цикл
		Если ТипЗнч(ЭлементМассива.Ссылка) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			Таблица.Добавить().Ссылка = ЭлементМассива.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ИсходящиеПисьмаВременная
		|ИЗ
		|	&Данные КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	ПОДСТРОКА(МИНИМУМ(ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|					ТОГДА ""0""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ФизическиеЛица)
		|					ТОГДА ""1""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Контрагенты)
		|					ТОГДА ""2""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.КонтактныеЛица)
		|					ТОГДА ""3""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|					ТОГДА ""4""
		|				КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.ЛичныеАдресаты)
		|					ТОГДА ""5""
		|				ИНАЧЕ ""6""
		|			КОНЕЦ + СведенияОбАдресатах.Представление), 2, 1000) КАК Представление
		|ПОМЕСТИТЬ СведенияПредставления
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.АдресатСообщения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АдресатСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящиеПисьмаВременная.Ссылка КАК Письмо,
		|	ИсходящееПисьмоПолучателиПисьма.Адресат.Адрес КАК Адрес,
		|	ИсходящееПисьмоПолучателиПисьма.Адресат КАК ПочтовыйАдресат,
		|	ИсходящееПисьмоПолучателиПисьма.Адресат.ВидМаршрутизации КАК ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиПисьма.Адресат.Наименование) КАК Представление,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.Кому) КАК ТипАдреса
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	ИсходящиеПисьмаВременная КАК ИсходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо.ПолучателиПисьма КАК ИсходящееПисьмоПолучателиПисьма
		|		ПО ИсходящееПисьмоПолучателиПисьма.Ссылка = ИсходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиПисьма.Адресат.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящиеПисьмаВременная.Ссылка,
		|	ИсходящееПисьмоПолучателиКопий.Адресат.Адрес,
		|	ИсходящееПисьмоПолучателиКопий.Адресат,
		|	ИсходящееПисьмоПолучателиКопий.Адресат.ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиКопий.Адресат.Наименование),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.Копия)
		|ИЗ
		|	ИсходящиеПисьмаВременная КАК ИсходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо.ПолучателиКопий КАК ИсходящееПисьмоПолучателиКопий
		|		ПО ИсходящееПисьмоПолучателиКопий.Ссылка = ИсходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиКопий.Адресат.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящиеПисьмаВременная.Ссылка,
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Адрес,
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат,
		|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Наименование),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.СкрытаяКопия)
		|ИЗ
		|	ИсходящиеПисьмаВременная КАК ИсходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо.ПолучателиСкрытыхКопий КАК ИсходящееПисьмоПолучателиСкрытыхКопий
		|		ПО ИсходящееПисьмоПолучателиСкрытыхКопий.Ссылка = ИсходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящиеПисьмаВременная.Ссылка,
		|	ИсходящееПисьмоПолучателиОтвета.Адресат.Адрес,
		|	ИсходящееПисьмоПолучателиОтвета.Адресат,
		|	ИсходящееПисьмоПолучателиОтвета.Адресат.ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияПредставления.Представление, ИсходящееПисьмоПолучателиОтвета.Адресат.Наименование),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.ОбратныйАдрес)
		|ИЗ
		|	ИсходящиеПисьмаВременная КАК ИсходящиеПисьмаВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо.ПолучателиОтвета КАК ИсходящееПисьмоПолучателиОтвета
		|		ПО ИсходящееПисьмоПолучателиОтвета.Ссылка = ИсходящиеПисьмаВременная.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПредставления КАК СведенияПредставления
		|		ПО (СведенияПредставления.АдресатСообщения = ИсходящееПисьмоПолучателиОтвета.Адресат.Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПочтовыйАдресат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Письмо,
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат КАК Адресат,
		|	Данные.ПочтовыйАдресат.Наименование КАК Наименование,
		|	Данные.ВидМаршрутизации КАК ВидМаршрутизации,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(МИНИМУМ(СведенияОбАдресатах.Контакт)) = ТИП(Справочник.РолиИсполнителей)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Внешний,
		|	Данные.Представление КАК Представление,
		|	Данные.ТипАдреса,
		|	ЕСТЬNULL(МИНИМУМ(СведенияОбАдресатах.Контакт), НЕОПРЕДЕЛЕНО) КАК Контакт
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Данные.ПочтовыйАдресат = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Представление = Данные.Представление)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Письмо,
		|	Данные.Адрес,
		|	Данные.ПочтовыйАдресат,
		|	Данные.ВидМаршрутизации,
		|	Данные.Представление,
		|	Данные.ТипАдреса,
		|	Данные.ПочтовыйАдресат.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Запрос.УстановитьПараметр("Данные", Таблица);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// ИЗМЕНЕНИЕ АДРЕСНЫХ ДАННЫХ ПРИ РЕДАКТИРОВАНИИ КОНТАКТОВ

Процедура ПочтовыйКонтактПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееПредставлениеОбъекта = "";
	Если Не Источник.Ссылка.Пустая() Тогда
		ПредыдущееПредставлениеОбъекта = Строка(Источник.Ссылка);
		Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ПредыдущееПредставлениеОбъекта = Источник.Ссылка.ПредставлениеВПерепискеСРангом;
		КонецЕсли;
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить(
		"ПредыдущееПредставлениеОбъекта", 
		ПредыдущееПредставлениеОбъекта); 		
	МассивПочтовыеАдреса = Новый Массив;
	Для каждого Строка Из Источник.Ссылка.КонтактнаяИнформация Цикл
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты 
			И ЗначениеЗаполнено(Строка.АдресЭП) Тогда
			СтруктураПочтовыеАдреса = Новый Структура("Вид, Адрес, Обработан");
			СтруктураПочтовыеАдреса.Вид = Строка.Вид;
			СтруктураПочтовыеАдреса.Обработан = Ложь;
			СтруктураПочтовыеАдреса.Адрес = Строка.АдресЭП;
			МассивПочтовыеАдреса.Добавить(СтруктураПочтовыеАдреса);
		КонецЕсли;	
	КонецЦикла;
	Источник.ДополнительныеСвойства.Вставить(
		"ПредыдущееКоличествоПочтовыхАдресов", 
		МассивПочтовыеАдреса.Количество());
	Источник.ДополнительныеСвойства.Вставить("ПредыдущиеАдреса", МассивПочтовыеАдреса);
	
	Источник.ДополнительныеСвойства.Вставить(
		"ПредыдущаяПометкаУдаления", 
		Источник.Ссылка.ПометкаУдаления);

	Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Источник.ДополнительныеСвойства.Вставить(
			"ПредыдущаяПометкаНедействителен", 
			Источник.Ссылка.Недействителен);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПочтовыйКонтактПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления 
		И Источник.ДополнительныеСвойства.ПредыдущаяПометкаУдаления = Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПредставлениеОбъекта = "";
	
	ТекущееПредставлениеОбъекта = Строка(Источник.Ссылка);
	Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		ТекущееПредставлениеОбъекта = Источник.Ссылка.ПредставлениеВПерепискеСРангом;
	КонецЕсли;
	
	Если ТекущееПредставлениеОбъекта <> Источник.ДополнительныеСвойства.ПредыдущееПредставлениеОбъекта Тогда
		// Необходимо обновить все представления в регистре СведенияОбадресатах, ссылающиеся на этот Источник.
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СведенияОбАдресатах.АдресатСообщения,
			|	СведенияОбАдресатах.Представление
			|ИЗ
			|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
			|ГДЕ
			|	СведенияОбАдресатах.Контакт = &Контакт";
		Запрос.УстановитьПараметр("Контакт", Источник.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборРегистра = РегистрыСведений.СведенияОбАдресатах.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.АдресатСообщения.Установить(Выборка.АдресатСообщения);
				НаборРегистра.Прочитать();
				Для Каждого Запись Из НаборРегистра Цикл
					Запись.Представление = ПолучитьПочтовоеПредставлениеКонтакта(
						Запись.Контакт,
						Запись.АдресатСообщения.Адрес);
				КонецЦикла;
				НаборРегистра.Записать();				
			КонецЦикла;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Получение текущих контактных данных Источника.
	МассивТекущиеПочтовыеАдреса = Новый Массив;
	Для каждого Строка Из Источник.Ссылка.КонтактнаяИнформация Цикл
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты 
			И ЗначениеЗаполнено(Строка.АдресЭП) Тогда
			СтруктураПочтовыеАдреса = Новый Структура("Вид, Адрес, НайденСредиСтарых");
			СтруктураПочтовыеАдреса.Вид = Строка.Вид;
			СтруктураПочтовыеАдреса.НайденСредиСтарых = Ложь;
			СтруктураПочтовыеАдреса.Адрес = Строка.АдресЭП;
			МассивТекущиеПочтовыеАдреса.Добавить(СтруктураПочтовыеАдреса);
		КонецЕсли;	
	КонецЦикла;
			
	Для Каждого ТекущийАдрес Из МассивТекущиеПочтовыеАдреса Цикл
		Для Каждого СтарыйАдрес Из Источник.ДополнительныеСвойства.ПредыдущиеАдреса Цикл
			Если ТекущийАдрес.Вид = СтарыйАдрес.Вид Тогда
				ТекущийАдрес.НайденСредиСтарых = Истина;
				СтарыйАдрес.Обработан = Истина;
				Если ТекущийАдрес.Адрес <> СтарыйАдрес.Адрес Тогда // адрес был изменен
					// Если адрес был изменен, необходимо перезаписать ссылку на адресата в регистре СведенияОбАдресатах и 
					//	перевычислить представление.
					НовыйПочтовыйАдресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
						ТекущийАдрес.Адрес,	ТекущееПредставлениеОбъекта);
					ПредыдущийПочтовыйАдресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
						СтарыйАдрес.Адрес);
					МенеджерЗаписиРегистра = РегистрыСведений.СведенияОбАдресатах.СоздатьМенеджерЗаписи();
					МенеджерЗаписиРегистра.АдресатСообщения = ПредыдущийПочтовыйАдресат;
					МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
					МенеджерЗаписиРегистра.Прочитать();
					МенеджерЗаписиРегистра.АдресатСообщения = НовыйПочтовыйАдресат;
					МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
					МенеджерЗаписиРегистра.Представление = ПолучитьПочтовоеПредставлениеКонтакта(
						Источник.Ссылка,
						НовыйПочтовыйАдресат.Адрес);
					МенеджерЗаписиРегистра.Активна = 
						НЕ Источник.ПометкаУдаления
						И НЕ(ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") И Источник.Недействителен);
					МенеджерЗаписиРегистра.Записать();
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	НеобходимоПерезаписатьПредставления = Ложь;
	Для Каждого ТекущийАдрес Из МассивТекущиеПочтовыеАдреса Цикл
		Если НЕ ТекущийАдрес.НайденСредиСтарых Тогда
			// Был введен новый адрес, необходимо записать об этом информацию.
			НовыйПочтовыйАдресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				ТекущийАдрес.Адрес,	ТекущееПредставлениеОбъекта);
			МенеджерЗаписиРегистра = РегистрыСведений.СведенияОбАдресатах.СоздатьМенеджерЗаписи();
			МенеджерЗаписиРегистра.АдресатСообщения = НовыйПочтовыйАдресат;
			МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
			МенеджерЗаписиРегистра.Прочитать();
			Если Не МенеджерЗаписиРегистра.Выбран() Тогда	
				МенеджерЗаписиРегистра.АдресатСообщения = НовыйПочтовыйАдресат;
				МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
			КонецЕсли;
			МенеджерЗаписиРегистра.Представление = ПолучитьПочтовоеПредставлениеКонтакта(
				Источник.Ссылка,
				НовыйПочтовыйАдресат.Адрес);
			МенеджерЗаписиРегистра.Активна = 
						НЕ Источник.ПометкаУдаления
						И НЕ(ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") И Источник.Недействителен);	
			МенеджерЗаписиРегистра.Записать();
			
			// Т.к. был добавлен новый адрес, необходимо перевычислить старые представления контакта.
			НеобходимоПерезаписатьПредставления = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого СтарыйАдрес Из Источник.ДополнительныеСвойства.ПредыдущиеАдреса Цикл
		Если Не СтарыйАдрес.Обработан Тогда
			// Адрес был удален, необходимо очистить соответствующие структуры.
			ПредыдущийПочтовыйАдресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				СтарыйАдрес.Адрес);
			МенеджерЗаписиРегистра = РегистрыСведений.СведенияОбАдресатах.СоздатьМенеджерЗаписи();
			МенеджерЗаписиРегистра.АдресатСообщения = ПредыдущийПочтовыйАдресат;
			МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
			МенеджерЗаписиРегистра.Удалить();
			
			// Т.к. был удален адрес, необходимо перевычислить старые представления контакта.
			НеобходимоПерезаписатьПредставления = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если Источник.ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> Источник.ПометкаУдаления 
		ИЛИ ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи")
		И Источник.ДополнительныеСвойства.ПредыдущаяПометкаНедействителен <> Источник.Недействителен Тогда
		НеобходимоПерезаписатьПредставления = Истина;
	КонецЕсли;
	
	// Если у контакта есть адреса, но для них нет записей в регистре СведенияОбАдресатах, 
	//	или необходимо перевычислить представления, необходимо добавить записи в этот регистр.
	Для Каждого Запись Из МассивТекущиеПочтовыеАдреса Цикл
		Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
			Запись.Адрес, 
			ТекущееПредставлениеОбъекта);
		МенеджерЗаписиРегистра = РегистрыСведений.СведенияОбАдресатах.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.АдресатСообщения = Адресат;
		МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
		МенеджерЗаписиРегистра.Прочитать();
		Если Не МенеджерЗаписиРегистра.Выбран() Тогда
			МенеджерЗаписиРегистра.АдресатСообщения = Адресат;
			МенеджерЗаписиРегистра.Контакт = Источник.Ссылка;
			МенеджерЗаписиРегистра.Представление = 
				ПолучитьПочтовоеПредставлениеКонтакта(Источник.Ссылка, Запись.Адрес);
			МенеджерЗаписиРегистра.Активна = 
						НЕ Источник.ПометкаУдаления
						И НЕ(ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") И Источник.Недействителен);	
			МенеджерЗаписиРегистра.Записать();
		ИначеЕсли НеобходимоПерезаписатьПредставления
			И МенеджерЗаписиРегистра.Контакт = Источник.Ссылка Тогда
			
			МенеджерЗаписиРегистра.Представление = 
				ПолучитьПочтовоеПредставлениеКонтакта(Источник.Ссылка, Запись.Адрес);
			МенеджерЗаписиРегистра.Активна = 
						НЕ Источник.ПометкаУдаления
						И НЕ(ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Пользователи") И Источник.Недействителен);	
			МенеджерЗаписиРегистра.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОТОКОЛОМ ДОСТАВКИ ПОЧТЫ

// Записать событие в регистр ПротоколДоставкиПочты 
Процедура ЗаписатьПротоколДоставкиПочты(Письмо, Текст, ЭтоОшибка, ТипСобытия,
	УчетнаяЗапись, ПорядковыйНомерСобытия, ИдентификаторСеанса,
	НомерЗадания = 0) Экспорт
	
	Если Не ВстроеннаяПочтаСерверПовтИсп.ПолучитьВестиПротоколДоставкиПочты() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ПротоколДоставкиПочты.СоздатьМенеджерЗаписи();
	
	ПорядковыйНомерСобытия = ПорядковыйНомерСобытия + 1;
	
	Запись.Письмо = Письмо;
	Запись.Дата = ТекущаяДатаСеанса();
	Запись.ИдентификаторСеанса = ИдентификаторСеанса;
	Запись.ПорядковыйНомерСобытия = ПорядковыйНомерСобытия;
	
	Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Запись.УчетнаяЗапись = УчетнаяЗапись;
	Запись.ЭтоОшибка = ЭтоОшибка;
	Запись.ТипСобытия = ТипСобытия;
	Запись.Текст = Текст;
	Запись.НомерЗадания = НомерЗадания;
	
	Запись.Записать();
	
КонецПроцедуры

// Записывает ошибку и в журнал регистрации и в регистр ПротоколДоставкиПочты
Процедура ЗаписатьОшибкуДоставки(СообщениеОбОшибке, Письмо, УчетнаяЗапись, ПараметрыЛогирования,
	ОсталосьПопытокОтправки = Неопределено, 
	ТипСобытияДоставки = Неопределено) Экспорт
	
	Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Письмо);
	
	СообщениеОбОшибкеЛокальное = СообщениеОбОшибке;
	
	Если ОсталосьПопытокОтправки <> Неопределено Тогда
		СообщениеОбОшибкеЛокальное = СообщениеОбОшибкеЛокальное + Символы.ПС +
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Осталось попыток отправки: ""%1""'; en = 'Send attempts left: ""%1""'"), 
			ОсталосьПопытокОтправки);
		КонецЕсли;
		
	Если ТипСобытияДоставки = Неопределено Тогда
		ТипСобытияДоставки = Перечисления.ТипыСобытийДоставкиПочты.ОшибкаОтправкиПисьма;
	КонецЕсли;
	
	ЗаписатьПротоколДоставкиПочты(Письмо, СообщениеОбОшибкеЛокальное, 
		Истина,
		ТипСобытияДоставки,
		УчетнаяЗапись, ПараметрыЛогирования.ПорядковыйНомерСобытия, 
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
		
	// Запись уведомлений программы
	Если ТипСобытияДоставки = Перечисления.ТипыСобытийДоставкиПочты.ОшибкаОтправкиПисьма
		И Письмо <> Неопределено Тогда
		
		АвторПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Автор");
		
		ТекстУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время отправки этого письма возникли ошибки:
				|%1'; en = 'Errors occured when sending this email: %1'"),
				СообщениеОбОшибке);
				
		РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
				ТекстУведомления,
				АвторПисьма,
				Письмо);
				
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ ВСТРОЕННОЙ ПОЧТЫ

// Возвращает персональную настройку встроенной почты текущего пользователя по ключу.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "АвтовыборКодировкиИсходящихПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"АвтовыборКодировкиИсходящихПисем",
			Истина);
		
	ИначеЕсли Настройка = "ВставлятьТекстИсходногоПисьмаПриОтвете" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ВставлятьТекстИсходногоПисьмаПриОтвете",
			Истина);
		
	ИначеЕсли Настройка = "ДействиеПриВыбореВходящегоПисьма" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ДействиеПриВыбореВходящегоПисьма",
			Перечисления.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма);
		
	ИначеЕсли Настройка = "ДобавлятьАвтораИсходногоПисьмаПриПересылке" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ДобавлятьАвтораИсходногоПисьмаПриПересылке",
			Ложь);
		
	ИначеЕсли Настройка = "ДобавлятьПолучателейИсходногоПисьмаПриПересылке" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ДобавлятьПолучателейИсходногоПисьмаПриПересылке",
			Ложь);
		
	ИначеЕсли Настройка = "ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке",
			Ложь);
		
	ИначеЕсли Настройка = "КодировкаИсходящихПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"КодировкаИсходящихПисем",
			"utf-8");
			
	ИначеЕсли Настройка = "КодировкаПриСохраненииПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"КодировкаПриСохраненииПисем",
			"");
			
	ИначеЕсли Настройка = "ОсновнаяУчетнаяЗапись" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОсновнаяУчетнаяЗапись",
			Неопределено);
		
	ИначеЕсли Настройка = "ОсновнойФлаг" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ФлагиОбъектов",
			"ФлагПоУмолчаниюДляПисем",
			Перечисления.ФлагиОбъектов.Красный);
			
	ИначеЕсли Настройка = "ОткрыватьФайлыИсходящегоПисьмаНаРедактирование" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование",
			Ложь);
			
	ИначеЕсли Настройка = "ОтвечатьСФайлами" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОтвечатьСФайлами",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьУдаленныеПисьмаИПапки" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОтображатьУдаленныеПисьмаИПапки",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображениеОбластиЧтения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОтображениеОбластиЧтения",
			Перечисления.ВариантыОтображенияОбластиЧтения.Внизу);
		
	ИначеЕсли Настройка = "ПериодАвтоматическогоСохраненияНеотправленныхПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПериодАвтоматическогоСохраненияНеотправленныхПисем",
			0);
		
	ИначеЕсли Настройка = "ПодписьДляНовыхПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПодписьДляНовыхПисем",
			Неопределено);
		
	ИначеЕсли Настройка = "ПодписьПриОтветеИПересылке" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПодписьПриОтветеИПересылке",
			Неопределено);
		
	ИначеЕсли Настройка = "РежимМоиПапки" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"РежимМоиПапки",
			Ложь);
		
	ИначеЕсли Настройка = "ШиринаСтрокиПриСохранении" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ШиринаСтрокиПриСохранении",
			0);
		
	ИначеЕсли Настройка = "ШиринаСтрокиПриФорматировании" Тогда
			
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ШиринаСтрокиПриФорматировании",
			0);
			
	ИначеЕсли Настройка = "ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
			Истина);
			
	ИначеЕсли Настройка = "ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям",
			Истина);		
			
	ИначеЕсли Настройка = "НеПредлагатьСоздатьПравилоПриПеретаскивании" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"НеПредлагатьСоздатьПравилоПриПеретаскивании",
			Ложь);			
			
	ИначеЕсли Настройка = "СпособРедактированияТекстаПисьма" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"СпособРедактированияТекстаПисьма",
			Перечисления.СпособРедактированияТекстаПисьма.Авто);
			
	ИначеЕсли Настройка = "ЧислоСимволовПисьмаДляСпособаРедактирования" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ЧислоСимволовПисьмаДляСпособаРедактирования",
			5000);
			
	ИначеЕсли Настройка = "ФорматНовыхПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ФорматНовыхПисем",
			Перечисления.ФорматыНовыхПисем.HTML);
			
	ИначеЕсли Настройка = "ФорматОтветныхИПересылаемыхПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ФорматОтветныхИПересылаемыхПисем",
			Неопределено);
			
		Если Не ЗначениеЗаполнено(Значение) Тогда
			
			Значение = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ФорматИсходногоПисьма");
			
			ИспользоватьHTMLФорматПисем = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ВстроеннаяПочта",
				"ИспользоватьHTMLФорматПисем",
				Неопределено);
		
			Если ИспользоватьHTMLФорматПисем <> Неопределено Тогда
				Если Не ИспользоватьHTMLФорматПисем Тогда
					Значение = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ПростойТекст");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Настройка = "ФорматСохраненияПисьма" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ФорматСохраненияПисьма",
			Неопределено);
		
		Если Не ЗначениеЗаполнено(Значение) Тогда
			
			ФорматОтветныхИПересылаемыхПисем = ПолучитьПерсональнуюНастройку("ФорматОтветныхИПересылаемыхПисем");
			Если ФорматОтветныхИПересылаемыхПисем = Перечисления.ФорматыОтветныхИПересылаемыхПисем.ПростойТекст Тогда
				Значение = Перечисления.ФорматыСохраненияПисьма.ПростойТекст;
			Иначе
				Значение = Перечисления.ФорматыСохраненияПисьма.HTML;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Настройка = "ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
			Ложь);
			
	ИначеЕсли Настройка = "ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar",
			Истина);
			
	ИначеЕсли Настройка = "АвтоматическиСохранятьВерсииНеотправленногоПисьма" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"АвтоматическиСохранятьВерсииНеотправленногоПисьма",
			Истина);
			
	ИначеЕсли Настройка = "ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную",
			Ложь);
			
	ИначеЕсли Настройка = "ВремяПроверкиНовыхПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ВремяПроверкиНовыхПисем",
			5); //  5 минут
			
	ИначеЕсли Настройка = "ПроверятьНаличиеНовыхПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПроверятьНаличиеНовыхПисем",
			Истина);
			
	ИначеЕсли Настройка = "ВидСписка" Тогда
			
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ВидСписка",
			"Обычный");
			
	ИначеЕсли Настройка = "ШрифтОтображения" Тогда
		
		ШрифтОтображенияПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ШрифтОтображения",
			ШрифтОтображенияПоУмолчанию);
			
	ИначеЕсли Настройка = "ОтображатьДругиеШрифтыВПисьмах" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОтображатьДругиеШрифтыВПисьмах",
			Истина);
			
	ИначеЕсли Настройка = "ИспользоватьСвойСписокДляАвтоподбора" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ИспользоватьСвойСписокДляАвтоподбора",
			Ложь);
			
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка встроенной почты: ""%1""'; en = 'Incorrect built-in email setting: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку встроенной почты текущего пользователя.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "АвтовыборКодировкиИсходящихПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"АвтовыборКодировкиИсходящихПисем",
			Значение);
		
	ИначеЕсли Настройка = "ВставлятьТекстИсходногоПисьмаПриОтвете" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ВставлятьТекстИсходногоПисьмаПриОтвете",
			Значение);
		
	ИначеЕсли Настройка = "ДействиеПриВыбореВходящегоПисьма" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ДействияПриВыбореВходящегоПисьма") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ДействиеПриВыбореВходящегоПисьма",
			Значение);
		
	ИначеЕсли Настройка = "ДобавлятьАвтораИсходногоПисьмаПриПересылке" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ДобавлятьАвтораИсходногоПисьмаПриПересылке",
			Значение);
		
	ИначеЕсли Настройка = "ДобавлятьПолучателейИсходногоПисьмаПриПересылке" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ДобавлятьПолучателейИсходногоПисьмаПриПересылке",
			Значение);
		
	ИначеЕсли Настройка = "ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке",
			Значение);
		
	ИначеЕсли Настройка = "КодировкаИсходящихПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"КодировкаИсходящихПисем",
			Значение);
			
	ИначеЕсли Настройка = "КодировкаПриСохраненииПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"КодировкаПриСохраненииПисем",
			Значение);
			
	ИначеЕсли Настройка = "ОсновнаяУчетнаяЗапись" Тогда
		
		Если ТипЗнч(Значение) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
			И Значение <> Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ОсновнаяУчетнаяЗапись",
			Значение);
		
	ИначеЕсли Настройка = "ОсновнойФлаг" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ФлагиОбъектов") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ФлагиОбъектов",
			"ФлагПоУмолчаниюДляПисем",
			Значение);
			
	ИначеЕсли Настройка = "ОткрыватьФайлыИсходящегоПисьмаНаРедактирование" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование",
			Значение);
		
	ИначеЕсли Настройка = "ОтвечатьСФайлами" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ОтвечатьСФайлами",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьУдаленныеПисьмаИПапки" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ОтображатьУдаленныеПисьмаИПапки",
			Значение);
		
	ИначеЕсли Настройка = "ОтображениеОбластиЧтения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ОтображениеОбластиЧтения",
			Значение);
		
	ИначеЕсли Настройка = "ПериодАвтоматическогоСохраненияНеотправленныхПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПериодАвтоматическогоСохраненияНеотправленныхПисем",
			Значение);
		
	ИначеЕсли Настройка = "ПодписьДляНовыхПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("СправочникСсылка.ШаблоныТекстов")
			И Значение <> Неопределено Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПодписьДляНовыхПисем",
			Значение);
		
	ИначеЕсли Настройка = "ПодписьПриОтветеИПересылке" Тогда
		
		Если ТипЗнч(Значение) <> Тип("СправочникСсылка.ШаблоныТекстов")
			И Значение <> Неопределено Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПодписьПриОтветеИПересылке",
			Значение);
			
	ИначеЕсли Настройка = "РежимМоиПапки" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"РежимМоиПапки",
			Значение);
		
	ИначеЕсли Настройка = "ШиринаСтрокиПриСохранении" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ШиринаСтрокиПриСохранении",
			Значение);
		
	ИначеЕсли Настройка = "ШиринаСтрокиПриФорматировании" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ШиринаСтрокиПриФорматировании",
			Значение);
			
	ИначеЕсли Настройка = "ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
			Значение);
			
	ИначеЕсли Настройка = "ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям",
			Значение);		
			
	ИначеЕсли Настройка = "НеПредлагатьСоздатьПравилоПриПеретаскивании" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"НеПредлагатьСоздатьПравилоПриПеретаскивании",
			Значение);		
			
	ИначеЕсли Настройка = "СпособРедактированияТекстаПисьма" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.СпособРедактированияТекстаПисьма") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"СпособРедактированияТекстаПисьма",
			Значение);
			
	ИначеЕсли Настройка = "ЧислоСимволовПисьмаДляСпособаРедактирования" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ЧислоСимволовПисьмаДляСпособаРедактирования",
			Значение);
			
	ИначеЕсли Настройка = "ФорматНовыхПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ФорматыНовыхПисем") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ФорматНовыхПисем",
			Значение);
			
	ИначеЕсли Настройка = "ФорматОтветныхИПересылаемыхПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ФорматыОтветныхИПересылаемыхПисем") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ФорматОтветныхИПересылаемыхПисем",
			Значение);
			
	ИначеЕсли Настройка = "ФорматСохраненияПисьма" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ФорматыСохраненияПисьма") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ФорматСохраненияПисьма",
			Значение);
			
	ИначеЕсли Настройка = "ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
			Значение);
			
	ИначеЕсли Настройка = "ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar",
			Значение);
			
	ИначеЕсли Настройка = "АвтоматическиСохранятьВерсииНеотправленногоПисьма" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"АвтоматическиСохранятьВерсииНеотправленногоПисьма",
			Значение);
			
	ИначеЕсли Настройка = "ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную",
			Значение);
			
	ИначеЕсли Настройка = "ВремяПроверкиНовыхПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ВремяПроверкиНовыхПисем",
			Значение);
			
	ИначеЕсли Настройка = "ПроверятьНаличиеНовыхПисем" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ПроверятьНаличиеНовыхПисем",
			Значение);
			
	ИначеЕсли Настройка = "ВидСписка" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ВидСписка",
			Значение);
			
	ИначеЕсли Настройка = "ШрифтОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Шрифт") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ШрифтОтображения",
			Значение);
			
	ИначеЕсли Настройка = "ОтображатьДругиеШрифтыВПисьмах" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ОтображатьДругиеШрифтыВПисьмах",
			Значение);
			
	ИначеЕсли Настройка = "ИспользоватьСвойСписокДляАвтоподбора" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки встроенной почты: ""%1""'; en = 'Incorrect value of built-in email setting: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ВстроеннаяПочта",
			"ИспользоватьСвойСписокДляАвтоподбора",
			Значение);
			
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка встроенной почты: ""%1""'; en = 'Incorrect built-in email setting: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает настройку встроенной почты
//
Функция ПолучитьНастройкуПрограммы(Настройка) Экспорт
	
	Если Настройка = "ПериодХраненияHTMLПредставленияСодержанияПисем" Тогда
		
		Значение = Константы.ПериодХраненияHTMLПредставленияСодержанияПисем.Получить();
		Если Значение = 0 Тогда
			Значение = 30; // значение по умолчанию
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка встроенной почты: ""%1""'; en = 'Incorrect built-in email setting: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Устанавливает настройку встроенной почты
//
Процедура УстановитьНастройкуПрограммы(Настройка, Значение) Экспорт
	
	Если Настройка = "ПериодХраненияHTMLПредставленияСодержанияПисем" Тогда
		
		Константы.ПериодХраненияHTMLПредставленияСодержанияПисем.Установить(Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка встроенной почты: ""%1""'; en = 'Incorrect built-in email setting: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// ЗАМЕНА ПРЕДМЕТА И ПРОЕКТА ПЕРЕПИСКИ

// Заменяет предмет в массиве переданных писем, при неудаче возвращает Ложь.
// При успешной замене возвращает Истина.
//
Функция ЗаменитьПредметВПисьмах(Письма, Предмет, СообщенияОбОшибках) Экспорт
	
	СообщенияОбОшибках = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Письмо);
			
			ПисьмоОбъект = Письмо.ПолучитьОбъект();
			ПисьмоОбъект.Предмет = Предмет;
			ПисьмоОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Письмо);
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Не удалось заменить предмет в письме: ""%1""
					|%2'; en = 'Failed to replace the subject in a email: ""%1"" %2'"),
				ПолучитьПредставлениеПисьма(ПисьмоОбъект),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СообщенияОбОшибках.Добавить(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Заменяет проект в массиве переданных писем, при неудаче возвращает Ложь.
// При успешной замене возвращает Истина.
//
Функция ЗаменитьПроектВПисьмах(Письма, Проект, СообщенияОбОшибках) Экспорт
	
	СообщенияОбОшибках = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Письмо);
			
			ПисьмоОбъект = Письмо.ПолучитьОбъект();
			ПисьмоОбъект.Проект = Проект;
			ПисьмоОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Письмо);
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Не удалось заменить проект в письме: ""%1""
					|%2'; en = 'Failed to replace the project in a email: ""%1"" %2'"),
				ПолучитьПредставлениеПисьма(ПисьмоОбъект),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СообщенияОбОшибках.Добавить(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВЛЕННЫЕ К ОТПРАВКЕ ПИСЬМА

Процедура ДобавитьПисьмоВПодготовленныеКОтправке(Письмо) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Письмо) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,
		"ПодготовленоКОтправке, УчетнаяЗапись, Автор, ОтправкаОтменена, ВидМаршрутизации");
	
	МенеджерЗаписи = РегистрыСведений.ПодготовленныеКОтправкеПисьма.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Письмо = Письмо;
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураРеквизитов);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

Процедура УдалитьПисьмоИзПодготовленныхКОтправке(Письмо) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Письмо) Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПодготовленныеКОтправкеПисьма.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Письмо = Письмо;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННЯЯ МАРШРУТИЗАЦИЯ

Функция ПолучитьИОтправитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачала = ТекущаяДата();
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
		
	ОтправитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования);
	
	ПолучитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования);
	
	ВремяОкончания = ТекущаяДата();
	
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Длительность сеанса: %1 сек.'; en = 'The duration of the session: %1 sec.'"),
		ВремяОкончания - ВремяНачала);
	
	Возврат СообщенияОбОшибках;

КонецФункции

Процедура ОтправкаПисемПоВнутреннейМаршрутизации() Экспорт 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СообщенияОбОшибках = Новый Массив;
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
	
	ОтправитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования);
	
КонецПроцедуры

Процедура ОтправитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования) 
	
	Если Не Константы.ИспользоватьВнутреннююМаршрутизацию.Получить() Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачала = ТекущаяДата();
	
	ОтправитьВсеПисьмаПоВнутреннейМаршрутизации(ТекущаяДата(), СообщенияОбОшибках, ПараметрыЛогирования);
	
	ВремяОкончания = ТекущаяДата();
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Длительность сеанса: %1 сек.'; en = 'The duration of the session: %1 sec.'"),
		ВремяОкончания - ВремяНачала);
	
КонецПроцедуры

Процедура ОтправитьВсеПисьмаПоВнутреннейМаршрутизации(Знач ТекДата, СообщенияОбОшибках, ПараметрыЛогирования)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодготовленныеКОтправкеПисьма.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ПодготовленныеКОтправкеПисьма.Письмо КАК Письмо
		|ИЗ
		|	РегистрСведений.ПодготовленныеКОтправкеПисьма КАК ПодготовленныеКОтправкеПисьма
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ПО ПодготовленныеКОтправкеПисьма.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтложеннойОтправкиПисем КАК НастройкиОтложеннойОтправкиПисем
		|		ПО ПодготовленныеКОтправкеПисьма.Автор = НастройкиОтложеннойОтправкиПисем.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НеотправленныеИсходящиеПисьма КАК НеОтправленныеИсходящиеПисьма
		|		ПО ПодготовленныеКОтправкеПисьма.Письмо = НеОтправленныеИсходящиеПисьма.Письмо
		|			И (НеОтправленныеИсходящиеПисьма.ОсталосьПопытокОтправки = 0)
		|ГДЕ
		|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И ДОБАВИТЬКДАТЕ(ПодготовленныеКОтправкеПисьма.ПодготовленоКОтправке, СЕКУНДА, ЕСТЬNULL(НастройкиОтложеннойОтправкиПисем.Задержка, 0)) <= &ТекДата
		|	И НеОтправленныеИсходящиеПисьма.Письмо ЕСТЬ NULL 
		|	И ПодготовленныеКОтправкеПисьма.ОтправкаОтменена = ЛОЖЬ
		|	И &ИспользоватьВнутреннююМаршрутизацию
		|	И ПодготовленныеКОтправкеПисьма.ВидМаршрутизации = ЗНАЧЕНИЕ(Перечисление.ВидыМаршрутизацииПисем.Внутренняя)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДОБАВИТЬКДАТЕ(ПодготовленныеКОтправкеПисьма.ПодготовленоКОтправке, СЕКУНДА, ЕСТЬNULL(НастройкиОтложеннойОтправкиПисем.Задержка, 0))");
		
	Запрос.УстановитьПараметр("ИспользоватьВнутреннююМаршрутизацию", Константы.ИспользоватьВнутреннююМаршрутизацию.Получить());	
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Таблица = РезультатЗапроса.Выгрузить();	
	
	Для Каждого Строка Из Таблица Цикл
		
		ОтправитьПисьмоПоВнутреннейМаршрутизации(Строка.Письмо, Строка.УчетнаяЗапись, СообщенияОбОшибках, ПараметрыЛогирования);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПисьмоГотовоКОтправкеПоВнутреннейМаршрутизации(ПисьмоОбъект, НеНужноПисатьОшибкуДоставки, ТекстСообщения)
	
	ТекДата = ТекущаяДата();
	
	Если ПисьмоОбъект.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru = 'Письмо помечено на удаление'; en = 'Email is marked for deletion'");
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
	
	Если ДанныеУчетнойЗаписи.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru = 'Учетная запись помечена на удаление'; en = 'The account has been marked for deletion'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеУчетнойЗаписи.ВариантИспользования <> Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		ТекстСообщения = НСтр("ru = 'Учетная запись не используется для встроенной почты'; en = 'Account is not used for built-in email'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеУчетнойЗаписи.ИспользоватьДляОтправки Тогда
		ТекстСообщения = НСтр("ru = 'Учетная запись не используется для отправки'; en = 'Account is not used for sending'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке) Тогда
		// Пользователь мог успеть открыть карточку письма и сбросить признак ПодготовленоКОтправке - это не ошибка.
		НеНужноПисатьОшибкуДоставки = Истина; 
		Возврат Ложь;
	КонецЕсли;
	
	Если ПисьмоОбъект.ОтправкаОтменена Тогда 
		ТекстСообщения = НСтр("ru = 'Отправка письма отменена'; en = 'Sending email is canceled'");
		Возврат Ложь;
	КонецЕсли;
		
	Задержка = РегистрыСведений.НастройкиОтложеннойОтправкиПисем.ПолучитьНастройку(ПисьмоОбъект.Автор);
	Если ПисьмоОбъект.ПодготовленоКОтправке + Задержка > ТекДата Тогда
		НеНужноПисатьОшибкуДоставки = Истина; 
		Возврат Ложь;
	КонецЕсли;
	
	Если РегистрыСведений.НеОтправленныеИсходящиеПисьма.ЗакончилисьПопыткиОтправкиПисьма(ПисьмоОбъект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Закончились попытки отправки письма'; en = 'Attempts to send the email ended'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьПисьмоПоВнутреннейМаршрутизации(ПисьмоСсылка, УчетнаяЗапись, СообщенияОбОшибках, ПараметрыЛогирования)
	
	СообщениеОбОшибке = "";
	
	ЗаписатьПротоколДоставкиПочты(
		ПисьмоСсылка,
		"",
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.НачалоОтправкиПисьмаПоВнутреннейМаршрутизации,
		УчетнаяЗапись, ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
	Исключение
		
		//СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//	НСтр("ru = 'Не удалось заблокировать письмо:
		//		|%1'"),
		//		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//
		//СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		//
		//ЗаписатьОшибкуДоставки(
		//	СообщениеОбОшибке,
		//	ПисьмоСсылка,
		//	УчетнаяЗапись,
		//	ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
	
	НеНужноПисатьОшибкуДоставки = Ложь;
	ТекстСообщения = "";
	Если Не ПисьмоГотовоКОтправкеПоВнутреннейМаршрутизации(ПисьмоОбъект, НеНужноПисатьОшибкуДоставки, ТекстСообщения) Тогда
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
		Если Не НеНужноПисатьОшибкуДоставки Тогда
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Письмо не готово к отправке:
				|%1
				|%2';
				|en = 'The email is not ready to send: 
				|%1
				|%2'"),
				ПисьмоСсылка,
				ТекстСообщения);
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
			
		КонецЕсли;	
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		ИдентификаторСообщения = Новый УникальныйИдентификатор;
		
		// Формирование параметров отправки
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("ДатаОтправки", ТекущаяДатаСеанса);
		ПараметрыОтправки.Вставить("ИдентификаторСообщения", Строка(ИдентификаторСообщения));
		
		Вложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			ПисьмоСсылка, // Письмо
			Ложь, // ФормироватьПредставлениеРазмера
			Ложь); // ВключатьПомеченныеНаУдаление
		
		Размер = СтрДлина(ПисьмоОбъект.Тема) + СтрДлина(ПисьмоОбъект.ПолучитьСодержаниеПисьма().Текст);
		Для Каждого Вложение Из Вложения Цикл
			Размер = Размер + Вложение.Размер;
		КонецЦикла;	
			
		ПараметрыОтправки.Вставить("Размер", Размер);
		
	Исключение
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	
	НачатьТранзакцию();
	Попытка
		
		МассивАдресатов = Новый Массив;
		Для каждого Получатель Из ПисьмоОбъект.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Получатель.Адресат);
		КонецЦикла;
		Для каждого Получатель Из ПисьмоОбъект.ПолучателиКопий Цикл
			МассивАдресатов.Добавить(Получатель.Адресат);
		КонецЦикла;
		Для каждого Получатель Из ПисьмоОбъект.ПолучателиСкрытыхКопий Цикл
			МассивАдресатов.Добавить(Получатель.Адресат);
		КонецЦикла;
		
		Если МассивАдресатов.Количество() > 50 Тогда 
			ПорядокДоставки = Перечисления.ПорядокДоставкиПисемПоВнутреннейМаршрутизации.ДолгаяДоставка;
		Иначе
			ПорядокДоставки = Перечисления.ПорядокДоставкиПисемПоВнутреннейМаршрутизации.БыстраяДоставка;
		КонецЕсли;	
		
		// проверка адресов получателей на возможность внутренней маршрутизации
		Для Каждого Адресат Из МассивАдресатов Цикл
			
			УчетныеЗаписи = ПолучитьУчетныеЗаписиПоАдресу(Адресат.Адрес, Истина);
			Если УчетныеЗаписи.Количество() = 0 Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Письмо не может быть отправлено по внутренней маршрутизации на адрес %1.
					|Возможно изменились настройки учетной записи этого получателя.
					|Повторите отправку письма.';
					|en = 'Email cannot be sent via internal routing for address %1. 
					|Account settings of the recipient may have changed. 
					|Try to send again.'"),
					Адресат.Адрес);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецЦикла;	
		
		ПисьмоОбъект.ИдентификаторСообщения = ПараметрыОтправки.ИдентификаторСообщения;
		ПисьмоОбъект.Размер = ПараметрыОтправки.Размер;
		ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
		ПапкаДляОтправленных = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			ПисьмоОбъект.УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Отправленные);
		ПисьмоОбъект.Папка = ПапкаДляОтправленных;
		ПисьмоОбъект.ДатаОтправки = ТекущаяДатаСеанса;
		ПисьмоОбъект.Дата = ТекущаяДатаСеанса;
		ПрименитьПравилоПриОтправке(ПисьмоОбъект, Истина);//применение пользовательских правил
		ПисьмоОбъект.Записать();
		
		// добавление в регистр писем в процессе отправки 
		Для Каждого Адресат Из МассивАдресатов Цикл
			МенеджерЗаписи = РегистрыСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Письмо = ПисьмоСсылка;
			МенеджерЗаписи.Адресат = Адресат;
			МенеджерЗаписи.ПорядокДоставки = ПорядокДоставки;
			МенеджерЗаписи.ДатаОтправки = ТекущаяДатаСеанса;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка при регистрации отправки письма:
				|%1'; en = 'An error occurred while registering the email sent: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);
	
	ЗаписатьПротоколДоставкиПочты(
		ПисьмоСсылка,
		"",
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.УспешнаяОтправкаПисьмаПоВнутреннейМаршрутизации,
		УчетнаяЗапись,
		ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
	
	Возврат Истина;
	
КонецФункции

Процедура ПриемПисемПоВнутреннейМаршрутизацииБыстрый() Экспорт 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СообщенияОбОшибках = Новый Массив;
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
		
	ПорядокДоставки = Перечисления.ПорядокДоставкиПисемПоВнутреннейМаршрутизации.БыстраяДоставка;
		
	ПолучитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования, ПорядокДоставки);
	
КонецПроцедуры

Процедура ПриемПисемПоВнутреннейМаршрутизацииДолгий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СообщенияОбОшибках = Новый Массив;
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
		
	ПорядокДоставки = Перечисления.ПорядокДоставкиПисемПоВнутреннейМаршрутизации.ДолгаяДоставка;	
		
	ПолучитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования, ПорядокДоставки);
	
КонецПроцедуры

Процедура ПолучитьПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования, ПорядокДоставки = Неопределено)
	
	Если Не Константы.ИспользоватьВнутреннююМаршрутизацию.Получить() Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачала = ТекущаяДата();
	
	ПолучитьВсеПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования, ПорядокДоставки);
	
	ВремяОкончания = ТекущаяДата();
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Длительность сеанса: %1 сек.'; en = 'The duration of the session: %1 sec.'"),
		ВремяОкончания - ВремяНачала);
	
КонецПроцедуры	
		
Процедура ПолучитьВсеПисьмаПоВнутреннейМаршрутизации(СообщенияОбОшибках, ПараметрыЛогирования, ПорядокДоставки)	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации.Письмо,
	|	ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации.Адресат
	|ИЗ
	|	РегистрСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации КАК ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации";
	
	Если ЗначениеЗаполнено(ПорядокДоставки) Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ (ПорядокДоставки = &ПорядокДоставки) ";
	КонецЕсли;	
	ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаОтправки ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если ЗначениеЗаполнено(ПорядокДоставки) Тогда 
		Запрос.УстановитьПараметр("ПорядокДоставки", ПорядокДоставки);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
			
	Таблица = РезультатЗапроса.Выгрузить();	
	
	Для Каждого Строка Из Таблица Цикл
		
		ПолучитьПисьмоПоВнутреннейМаршрутизации(Строка.Письмо, Строка.Адресат, СообщенияОбОшибках, ПараметрыЛогирования);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПолучитьПисьмоПоВнутреннейМаршрутизации(ПисьмоСсылка, Адресат, СообщенияОбОшибках, ПараметрыЛогирования)
	
	ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
	
	НачатьТранзакцию();
	Попытка
		
		// Проверка наличия записи в регистре писем в процессе отправки 
		МенеджерЗаписи = РегистрыСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо = ПисьмоСсылка;
		МенеджерЗаписи.Адресат = Адресат;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПисьмоОбъект.ИдентификаторСообщения) Тогда 
			ВызватьИсключение НСтр("ru = 'Неверный идентификатор письма. Обратитесь к Администратору.'; en = 'Wrong identifier of the email. Please contact your administrator.'");
		КонецЕсли;	
		
		// Формирование параметров отправки
		ПараметрыОтправки = ПолучитьСтруктуруПараметровОтправкиПисьма(ПисьмоОбъект);
		ПараметрыОтправки.Вставить("ИдентификаторСообщения", ПисьмоОбъект.ИдентификаторСообщения);
		ПараметрыОтправки.Вставить("Предмет", ПисьмоОбъект.Предмет);
		ПараметрыОтправки.Вставить("Проект", ПисьмоОбъект.Проект);
		ПараметрыОтправки.Вставить("Размер", ПисьмоОбъект.Размер);
		ПараметрыОтправки.Вставить("ДатаОтправки", ПисьмоОбъект.ДатаОтправки);
		
		// Формирование поля заголовка Message-Id
		ПараметрыОтправки.ПоляЗаголовка.Добавить(
			Почта.СформироватьСтруктуруПоляЗаголовка(
			"Message-Id", // ИмяПоля
			ПисьмоОбъект.ИдентификаторСообщения, // ЗначениеПоля
			СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
		
		// Формирование заголовка In-Reply-To если основания нет идентификатора
		ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
			ПисьмоОбъект.Ссылка,
				Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
				
		Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОтправленоВОтветНа) Тогда
				ПисьмоОтправленоВОтветНаИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ПисьмоОтправленоВОтветНа,
					"ИдентификаторСообщения, ВнутреннийЗаголовок");
					
				Если Не ЗначениеЗаполнено(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения) Тогда // письмо без ИД
					
					// Формирование поля заголовка In-Reply-To
					ПараметрыОтправки.ПоляЗаголовка.Добавить(
						Почта.СформироватьСтруктуруПоляЗаголовка(
						"In-Reply-To", // ИмяПоля
						ВКавычках("NULL", "<", ">"), // ЗначениеПоля
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
					
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;	
	
		// прием писем по внутренней маршрутизации
		УчетныеЗаписи = ПолучитьУчетныеЗаписиПоАдресу(Адресат.Адрес, Истина);
		Если УчетныеЗаписи.Количество() = 0 Тогда 
			ВызватьИсключение НСтр("ru = 'Неверный вид маршрутизации письма. Обратитесь к Администратору.'; en = 'Wrong email routing type. Contact the administrator.'");
		КонецЕсли;
		
		Для Каждого УчетнаяЗапись Из УчетныеЗаписи Цикл 
			
			СообщениеОбОшибке = "";
			Если Не ПолучитьСообщениеПоВнутреннейМаршрутизации(ПисьмоОбъект, УчетнаяЗапись, ПараметрыОтправки, СообщениеОбОшибке, ПараметрыЛогирования) Тогда
				
				ОтменитьТранзакцию();
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Учетная запись: %1
					|Ошибка при получении письма по внутренней маршрутизации:
					|%2';
					|en = 'Account: %1 
					|Error receiving internal routing email: 
					|%2'"),
					УчетнаяЗапись,
					СообщениеОбОшибке);
				
				ЗаписатьОшибкуДоставки(СообщениеОбОшибке, 
					Неопределено, 
					УчетнаяЗапись, 
					ПараметрыЛогирования,
					Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаление из регистра писем в процессе отправки 
		МенеджерЗаписи = РегистрыСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо = ПисьмоСсылка;
		МенеджерЗаписи.Адресат = Адресат;
		МенеджерЗаписи.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка при получении письма по внутренней маршрутизации:
			|%1'; en = 'An error occurred while receiving the internal routing emails :%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		
		ЗаписатьОшибкуДоставки(
			СообщениеОбОшибке,
			ПисьмоСсылка,
			УчетнаяЗапись,
			ПараметрыЛогирования,
			Перечисления.ТипыСобытийДоставкиПочты.ОшибкаПолученияПисьма);
		
	КонецПопытки;
	
КонецПроцедуры
	
Функция ПолучитьСообщениеПоВнутреннейМаршрутизации(ИсходящееПисьмоОбъект, УчетнаяЗапись, ПараметрыОтправки, СообщениеОбОшибке, ПараметрыЛогирования)
	
	Попытка
		ВходящееПисьмоОбъект = Документы.ВходящееПисьмо.СоздатьДокумент();
		
		Предмет = ПараметрыОтправки.Предмет;
		
		Если ЗначениеЗаполнено(Предмет) Тогда
		
			ПредметДоступенОтветственнымУчетнойЗаписи = 
				ТипЗнч(Предмет) = Тип("СправочникСсылка.УведомленияПрограммы")
					ИЛИ ДоступенПоПравамОтветственнымУчетнойЗаписи(Предмет, УчетнаяЗапись);
			
			Если ПредметДоступенОтветственнымУчетнойЗаписи Тогда
				ВходящееПисьмоОбъект.Предмет = Предмет;
			КонецЕсли;
		
		КонецЕсли;
		
		Проект = ПараметрыОтправки.Проект;
		Если ЗначениеЗаполнено(Проект) И ДоступенПоПравамОтветственнымУчетнойЗаписи(Проект, УчетнаяЗапись) Тогда 
			ВходящееПисьмоОбъект.Проект = Проект;
		КонецЕсли;
		
		// Заполнение структуры сообщения
		Сообщение = Почта.СформироватьСтруктуруПочтовогоСообщения();
		ЗаполнитьЗначенияСвойств(Сообщение, ПараметрыОтправки,, "Вложения");
		
		Для Каждого ПолеЗаголовка Из ПараметрыОтправки.ПоляЗаголовка Цикл
			Если ЗначениеЗаполнено(ПолеЗаголовка.ЗначениеПоля) Тогда 
				Сообщение.Заголовок = Сообщение.Заголовок + СокрЛП(ПолеЗаголовка.ИмяПоля) + ": " + СокрЛП(ПолеЗаголовка.ЗначениеПоля) + Символы.ПС;
			КонецЕсли;	
		КонецЦикла;	
		
		Сообщение.Вложения.Очистить();
		Для Каждого Вложение Из ПараметрыОтправки.Вложения Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("Имя", Вложение.Наименование);
			СтруктураВложения.Вставить("Данные", Вложение.Данные);
			СтруктураВложения.Вставить("Идентификатор", Вложение.Идентификатор);
			
			Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
				СтруктураВложения.Данные = Вложение.Данные.ПолучитьИсходныеДанные();
				ПредставлениеТема = Вложение.Данные.Тема;
				СтруктураВложения.Имя = ПредставлениеТема + ".msg";
				СтруктураВложения.Вставить("ЭтоВложенноеПисьмо", Истина);
			КонецЕсли;	
			
			Сообщение.Вложения.Добавить(СтруктураВложения);
		КонецЦикла;	
		
		Сообщение.ДатаПолучения = ТекущаяДатаСеанса();
		
		ЗаполнитьВходящееПисьмоПриВнутреннейМаршрутизации(ВходящееПисьмоОбъект, Сообщение, УчетнаяЗапись);
		
		ЗаписатьПротоколДоставкиПочты(
			ВходящееПисьмоОбъект.Ссылка,
			"",
			Ложь,
			Перечисления.ТипыСобытийДоставкиПочты.УспешноеПолучениеПисьмаПоВнутреннейМаршрутизации,
			УчетнаяЗапись,
			ПараметрыЛогирования.ПорядковыйНомерСобытия,
			ПараметрыЛогирования.ИдентификаторСеанса,
			ПараметрыЛогирования.НомерЗадания);
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьВходящееПисьмоПриВнутреннейМаршрутизации(ПисьмоОбъект, Сообщение, УчетнаяЗапись) Экспорт
	
	ПисьмоОбъект.УчетнаяЗапись = УчетнаяЗапись;
	ПисьмоОбъект.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внутренняя; 
	
	ЗаполнитьВходящееПисьмоИзСтруктурыПочтовогоСообщения(ПисьмоОбъект, Сообщение, УчетнаяЗапись);
	
	Основание = Неопределено;
	ИдентификаторПисьма = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "In-Reply-To");
	Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
		ИдентификаторОснования = РаботаСоСтроками.ВыделитьПодстрокуВСкобках(ИдентификаторПисьма, "<", ">");
		Если ИдентификаторОснования <> "NULL" Тогда 
			Основание = НайтиИсходящееПисьмоПоИдентификатору(ИдентификаторОснования, УчетнаяЗапись); // поиск основания по идентификатору
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Основание) Тогда // не было поля "In-Reply-To" или не нашли по идентификатору
		
		СтрокаИдентификаторовПисем = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "References");
		Если ЗначениеЗаполнено(СтрокаИдентификаторовПисем) Тогда
			МассивИдентификаторовПисем = ПолучитьМассивИдентификаторовПисем(СтрокаИдентификаторовПисем);
			Если МассивИдентификаторовПисем.Количество() > 0 Тогда
				МассивПисем = НайтиИсходящиеПисьмаПоИдентификаторам(МассивИдентификаторовПисем, УчетнаяЗапись);
				Если МассивПисем.Количество() > 0 Тогда
					Основание = МассивПисем[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ПисьмоОбъект.ДополнительныеСвойства.Вставить("Основание", Основание);
	КонецЕсли;
	
	ПисьмоОбъект.Записать();
	ПланыОбмена.ПоискПисемРегистрацияВсехПисем.ЗарегистрироватьИзменениеПисьма(ПисьмоОбъект.Ссылка);
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ПисьмоОбъект.Ссылка, 
		Справочники.ВидыБизнесСобытий.ПолучениеВходящегоПисьма);	
	
	Если ЗначениеЗаполнено(Основание) Тогда
		СвязиДокументов.УстановитьСвязь(
			ПисьмоОбъект.Ссылка,
			Неопределено,
			Основание,
			Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
	КонецЕсли;
	
	ОбновитьВеткуПереписки(ПисьмоОбъект.Ссылка);
	
	// Запись вложений
	ДатаИзменения = Сообщение.ДатаПолучения;
	Если Не ЗначениеЗаполнено(ДатаИзменения) Тогда
		ДатаИзменения = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	СобственныеФайлыВозвращаемый = Новый Массив;
	ПорядковыйНомерВложения = 0;
	
	ДобавитьФайлыИзИнтернетПочтовогоСообщения(
		ПисьмоОбъект.Ссылка,
		Сообщение,
		ДатаИзменения, //ВремяИзменения
		"", // ПрефиксНомераПисьма
		СобственныеФайлыВозвращаемый,
		ПорядковыйНомерВложения);
	
	Попытка
			
		ЗаблокироватьДанныеДляРедактирования(ПисьмоОбъект.Ссылка);
		
		Если ПрименитьПользовательскиеПравила(ПисьмоОбъект) Тогда
			ПисьмоОбъект.Записать();
		КонецЕсли;
		
		Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("Правила_УстановитьПометкуУдаления")
			И ПисьмоОбъект.ДополнительныеСвойства.Правила_УстановитьПометкуУдаления Тогда
			ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		Если ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			ПрименитьПравилаОповещенияДляВходящихПисем(ПисьмоОбъект);	
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(ПисьмоОбъект.Ссылка);
		
	Исключение
		РазблокироватьДанныеДляРедактирования(ПисьмоОбъект.Ссылка);
		Инфо = ИнформацияОбОшибке();
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при обработке письма правилами: 
				|%1';
				|en = 'Error email processing rules: 
				|%1'"),
			ПодробноеПредставлениеОшибки(Инфо));
		Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, ПисьмоОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьУчетныеЗаписиПоАдресу(Адрес, ТолькоПодходящиеДляВнутреннейМаршрутизации = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &Адрес
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления";
	
	Если ТолькоПодходящиеДляВнутреннейМаршрутизации Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|	И УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
		|	И УчетныеЗаписиЭлектроннойПочты.НеИспользоватьВнутреннююМаршрутизациюДляВходящихПисем = ЛОЖЬ";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Адрес", Адрес);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

Функция ПолучитьВидМаршрутизацииПисьма(ПисьмоОбъект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьВнутреннююМаршрутизацию.Получить() Тогда 
		Возврат Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	КонецЕсли;	
	
	ВсеАдресатыВнутренние = Истина;
	
	МассивАдресатов = Новый Массив;
	Для каждого Получатель Из ПисьмоОбъект.ПолучателиПисьма Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	Для каждого Получатель Из ПисьмоОбъект.ПолучателиКопий Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	Для каждого Получатель Из ПисьмоОбъект.ПолучателиСкрытыхКопий Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	
	Для Каждого Адресат Из МассивАдресатов Цикл
		
		УчетныеЗаписи = ПолучитьУчетныеЗаписиПоАдресу(Адресат.Адрес, Истина);
		Если УчетныеЗаписи.Количество() = 0 Тогда  // для адресата нет учетных записей для внутренней маршрутизации
			ВсеАдресатыВнутренние = Ложь;
			Прервать;
		КонецЕсли;	
			
	КонецЦикла;	
	
	Если ВсеАдресатыВнутренние Тогда 
		Возврат Перечисления.ВидыМаршрутизацииПисем.Внутренняя;
	Иначе
		Возврат Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	КонецЕсли;	
	
КонецФункции	

// Доступен ли объект (проект или предмет) ответственным учетной записи
Функция ДоступенПоПравамОтветственнымУчетнойЗаписи(Объект, УчетнаяЗапись) Экспорт
	
	МассивПользователей = Новый Массив;
	
	Для Каждого Строка Из УчетнаяЗапись.ОтветственныеЗаОбработкуПисем Цикл
		МассивПользователей.Добавить(Строка.Пользователь);
	КонецЦикла;	
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ПолучитьПраваПользователейПоОбъекту(Объект, Истина, МассивПользователей);
	
	ЧислоПользователей = 0;
	
	Для Каждого Строка Из ТаблицаПрав Цикл
		
		Если Не Строка.Чтение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЧислоПользователей = ЧислоПользователей + 1;
		
	КонецЦикла;

	Возврат (ЧислоПользователей = МассивПользователей.Количество());
	
КонецФункции	

Процедура ДобавитьФайлыИзИнтернетПочтовогоСообщения(
	Письмо,
	Сообщение,
	ВремяИзменения,
	ПрефиксНомераПисьма,
	СобственныеФайлыВозвращаемый, // в этом параметре возвращается массив ссылок на созданные файлы,
	// Ссылки на файлы, полученные из вложенных сообщений в массив СобственныеФайлыВозвращаемый.
	// не добавляются.
	ПорядковыйНомерВложения)
	
	ИндексНомераПисьма = 1;
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			
			ИмяФайла =
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Вложение.Имя, "_");
			
			Если Не ПустаяСтрока(ПрефиксНомераПисьма) Тогда
				
				ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Письмо %1 %2'; en = 'Email %1 %2'"),
					ПрефиксНомераПисьма,
					ИмяФайла);
				
			КонецЕсли;
			
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ИмяФайла);	
			Если Не ЗначениеЗаполнено(ИмяФайлаИнфо.Расширение)
				И Вложение.Свойство("ТипСодержимого") Тогда
				
				Если НРег(Вложение.ТипСодержимого) = НРег("image/gif") Тогда
					ИмяФайла = ИмяФайла + ".gif";
				ИначеЕсли НРег(Вложение.ТипСодержимого) = НРег("image/jpeg") Тогда
					ИмяФайла = ИмяФайла + ".jpeg";
				ИначеЕсли НРег(Вложение.ТипСодержимого) = НРег("image/png") Тогда
					ИмяФайла = ИмяФайла + ".png";
				ИначеЕсли НРег(Вложение.ТипСодержимого) = НРег("image/tiff") Тогда
					ИмяФайла = ИмяФайла + ".tiff";
				КонецЕсли;			
				
			КонецЕсли;	
			
			ФайлСсылка = ДобавитьВложениеПисьмаИзДвоичныхДанных(
				Письмо,
				Вложение.Данные, // ДвоичныеДанные
				ИмяФайла, // ИмяФайла
				ВремяИзменения,
				Вложение.Идентификатор);
				
			РегистрыСведений.СведенияОФайлах.УстановитьПризнак(
				ФайлСсылка, "ПорядковыйНомерВложения", ПорядковыйНомерВложения);
			
			ПорядковыйНомерВложения = ПорядковыйНомерВложения + 1;
				
			Если Вложение.Свойство("ЭтоВложенноеПисьмо") Тогда
				РегистрыСведений.СведенияОФайлах.УстановитьПризнак(
					ФайлСсылка, "ЭтоВложенноеПисьмо", Истина);
			КонецЕсли;	
				
			Если ПустаяСтрока(ПрефиксНомераПисьма) Тогда
				СобственныеФайлыВозвращаемый.Добавить(ФайлСсылка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Вложение.Данные) = Тип("Структура") Тогда
			
			Если ПустаяСтрока(ПрефиксНомераПисьма) Тогда
				ПрефиксВложенногоПисьма = Строка(ИндексНомераПисьма);
			Иначе
				ПрефиксВложенногоПисьма = ПрефиксНомераПисьма + "." + ИндексНомераПисьма;
			КонецЕсли;
			ИндексНомераПисьма = ИндексНомераПисьма + 1;
			
			// рекурсия
			ДобавитьФайлыИзИнтернетПочтовогоСообщения(
				Письмо, // ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо
				Вложение.Данные, // ИнтернетПочтовоеСообщение
				ВремяИзменения,  // ДатаВремя
				ПрефиксВложенногоПисьма,
				СобственныеФайлыВозвращаемый,
				ПорядковыйНомерВложения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет вложение письма.
//
Функция ДобавитьВложениеПисьмаИзИнтернетПочтовогоВложения(
	Письмо, 
	Вложение, // ИнтернетПочтовоеВложение
	ВремяИзменения) Экспорт // ДатаВремя
	
	Если ТипЗнч(Вложение.Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Вложение.Имя, "_");
	
	ФайлСсылка = ДобавитьВложениеПисьмаИзДвоичныхДанных(
		Письмо,
		Вложение.Данные, // ДвоичныеДанные
		ИмяФайла, // ИмяФайла
		ВремяИзменения,
		Вложение.Идентификатор);
		
	Возврат ФайлСсылка;
	
КонецФункции

// Возвращает список подписей пользователя.
//
Функция ПолучитьСписокПодписейПользователя(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	МассивГруппПользователей = ПользователиСерверПовтИсп.ПолучитьМассивГруппПользователя(Пользователь);
	МассивГруппПользователей.Добавить(Пользователь);
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныТекстов.Ссылка КАК Ссылка,
		|	ШаблоныТекстов.Наименование КАК Наименование,
		|	ШаблоныТекстов.Шаблон КАК Шаблон
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
		|ГДЕ
		|	(ШаблоныТекстов.Автор = &Пользователь
		|			ИЛИ ШаблоныТекстов.ОбщийШаблон
		|				И ШаблоныТекстов.Пользователи.ПользовательИлиГруппа.Ссылка В (&МассивГруппПользователей))");

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("МассивГруппПользователей", МассивГруппПользователей);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстШаблона = Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(Выборка.Ссылка);
		Результат.Добавить(ТекстШаблона, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Распараллеливание приемки email

// Перезаполняет регистр ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи
Процедура ПерезаполнитьРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(ЧислоЗаданий) Экспорт
	
	Если ЧислоЗаданий = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// очистим весь регистр
	НаборЗаписей = РегистрыСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	// Получаем все учетки УчетныеЗаписиЭлектроннойПочты - кроме помеченных на удаление - и только те, где заполнены поля 1С:Почты
	//  - считаем их количество.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
		|	УчетныеЗаписиЭлектроннойПочты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ
		|	И (УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки = ИСТИНА
		|			ИЛИ УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения = ИСТИНА)
		|	И УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	ТаблицаУчетныхЗаписей = Запрос.Выполнить().Выгрузить();	
	Если ТаблицаУчетныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	// равномерно делим все учетки УчетныеЗаписиЭлектроннойПочты
	Для Индекс = 0 По ТаблицаУчетныхЗаписей.Количество()-1 Цикл
		
		УчетнаяЗапись = ТаблицаУчетныхЗаписей[Индекс].Ссылка;
		
		НомерРобота = Индекс % ЧислоЗаданий;
		
		НомерЗадания = НомерРобота + 1;
		
		МенеджерЗаписи = РегистрыСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МенеджерЗаписи.НомерЗадания = НомерЗадания;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;	
	
	
КонецПроцедуры

// добавим в наименее загруженного робота
Процедура ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.НомерЗадания,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись) КАК КоличествоУчетныхЗаписей
		|ИЗ
		|	РегистрСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи КАК ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.НомерЗадания
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоУчетныхЗаписей";
		
	НомерЗадания = 1;
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	Если Таблица.Количество() = 1 Тогда
		НомерЗадания = Таблица[0].НомерЗадания;
	КонецЕсли;	
		
	МенеджерЗаписи = РегистрыСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.НомерЗадания = НомерЗадания;
	МенеджерЗаписи.Записать();
		
КонецПроцедуры

// удалим запись у робота
Процедура УдалитьУчетнуюЗаписьИзРегистраОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты1
Процедура ПриемОтправкаПочты1() Экспорт
	ПринятьОтправитьПочту(1);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты2
Процедура ПриемОтправкаПочты2() Экспорт
	ПринятьОтправитьПочту(2);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты3
Процедура ПриемОтправкаПочты3() Экспорт
	ПринятьОтправитьПочту(3);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты4
Процедура ПриемОтправкаПочты4() Экспорт
	ПринятьОтправитьПочту(4);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты5
Процедура ПриемОтправкаПочты5() Экспорт
	ПринятьОтправитьПочту(5);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты6
Процедура ПриемОтправкаПочты6() Экспорт
	ПринятьОтправитьПочту(6);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты7
Процедура ПриемОтправкаПочты7() Экспорт
	ПринятьОтправитьПочту(7);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты8
Процедура ПриемОтправкаПочты8() Экспорт
	ПринятьОтправитьПочту(8);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты9
Процедура ПриемОтправкаПочты9() Экспорт
	ПринятьОтправитьПочту(9);
КонецПроцедуры

// Обработчик регламентного задания ПриемОтправкаПочты10
Процедура ПриемОтправкаПочты10() Экспорт
	ПринятьОтправитьПочту(10);
КонецПроцедуры

// Принять и отправить почту для указанного задания
Процедура ПринятьОтправитьПочту(НомерЗадания) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	ВыполнитьПриемкуОтправкуПочты(НомерЗадания);
	
КонецПроцедуры

// Принять и отправить почту для указанного задания
Процедура ВыполнитьПриемкуОтправкуПочты(НомерЗадания) Экспорт
	
	// Получаем учетки именно ДЛЯ ПОЛУЧЕНИЯ - для отправки другой запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи КАК ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи
		|ГДЕ
		|	ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.НомерЗадания = &НомерЗадания
		|	И ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись.ИспользоватьДляПолучения = ИСТИНА
		|	И ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчетнаяЗапись";
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);	
		
	МассивУчетныхЗаписейПолучения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");	
	
	МассивУчетныхЗаписейОтправки = Новый Массив;
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		// Получаем учетки именно ДЛЯ ОТПРАВКИ - для получения другой запрос
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись КАК УчетнаяЗапись
			|ИЗ
			|	РегистрСведений.ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи КАК ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи
			|ГДЕ
			|	ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.НомерЗадания = &НомерЗадания
			|	И ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
			|	И ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись.ИспользоватьДляОтправки = ИСТИНА
			|	И ОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи.УчетнаяЗапись.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	УчетнаяЗапись";
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);	
			
		МассивУчетныхЗаписейОтправки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");	
	КонецЕсли;	
	
	Если МассивУчетныхЗаписейПолучения.Количество() = 0 И МассивУчетныхЗаписейОтправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияОбОшибках = Новый Массив;
	
	ВремяНачала = ТекущаяДата();
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания);
		
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		ОтправитьВсеПисьма(ТекущаяДата(), СообщенияОбОшибках, ПараметрыЛогирования, МассивУчетныхЗаписейОтправки);
	КонецЕсли;
	
	ПолучитьВсеПисьма(СообщенияОбОшибках, ПараметрыЛогирования, МассивУчетныхЗаписейПолучения);
	
	ВремяОкончания = ТекущаяДата();
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Длительность сеанса: %1 сек.'; en = 'The duration of the session: %1 sec.'"),
		ВремяОкончания - ВремяНачала);
	
	ЗаписатьПротоколДоставкиПочты(
		Неопределено,
		ТекстЛога,
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.ЗавершениеСеансаПриемкиОтправкиПисем,
		Неопределено,
		ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса,
		ПараметрыЛогирования.НомерЗадания);
	
КонецПроцедуры

// Выполняет отправку внешних писем - по email
Процедура ОтправкаПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияОбОшибках = Новый Массив;
	
	ВремяНачала = ТекущаяДата();
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
		ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
		
	// только отправка
	ОтправитьВсеПисьма(ТекущаяДата(), СообщенияОбОшибках, ПараметрыЛогирования);
	
	ВремяОкончания = ТекущаяДата();
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Длительность сеанса: %1 сек.'; en = 'The duration of the session: %1 sec.'"),
		ВремяОкончания - ВремяНачала);
	
	ЗаписатьПротоколДоставкиПочты(
		Неопределено,
		ТекстЛога,
		Ложь,
		Перечисления.ТипыСобытийДоставкиПочты.ЗавершениеСеансаОтправкиПисем,
		Неопределено,
		ПараметрыЛогирования.ПорядковыйНомерСобытия,
		ПараметрыЛогирования.ИдентификаторСеанса);
	
КонецПроцедуры

// Подписка на событие ПередЗаписью учетной записи
Процедура УчетнаяЗаписьПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, 
		"ПометкаУдаления, ИспользоватьДляПолучения, ИспользоватьДляОтправки");
	
	// учетная запись помечена на удаление
	Если ЗначенияРеквизитов.ПометкаУдаления = Ложь И Источник.ПометкаУдаления = Истина
		И Источник.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		
		УдалитьУчетнуюЗаписьИзРегистраОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(Источник.Ссылка);
		УдалитьЗаписьИзРегистраОбработанныеУчетныеЗаписи(Источник.Ссылка);
		
	КонецЕсли;	
	
	// с учетной записи снята пометка удаления
	Если ЗначенияРеквизитов.ПометкаУдаления = Истина И Источник.ПометкаУдаления = Ложь
		И Источник.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		
		ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(Источник.Ссылка);
		УдалитьЗаписьИзРегистраОбработанныеУчетныеЗаписи(Источник.Ссылка);
		
	КонецЕсли;	
	
	// У учетной записи не были заполнены поля ИспользоватьДляОтправки ИспользоватьДляПолучения - теперь заполнены.
	Если (ЗначенияРеквизитов.ИспользоватьДляОтправки = Ложь
		И ЗначенияРеквизитов.ИспользоватьДляПолучения = Ложь)
		И (Источник.ИспользоватьДляОтправки = Истина Или Источник.ИспользоватьДляПолучения = Истина)
		И Источник.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		
		УдалитьЗаписьИзРегистраОбработанныеУчетныеЗаписи(Источник.Ссылка);
		
		Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
			ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(Источник.Ссылка);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи", 
				Истина);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка)
		И Источник.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		
		Если (Источник.ИспользоватьДляОтправки = Истина Или Источник.ИспользоватьДляПолучения = Истина) Тогда
			Источник.ДополнительныеСвойства.Вставить("ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи", 
				Истина);
		КонецЕсли;	
		
	КонецЕсли;		
	
	// У учетной записи БЫЛИ заполнены поля ИспользоватьДляОтправки ИспользоватьДляПолучения - теперь НЕ заполнены.
	Если (Источник.ИспользоватьДляОтправки = Ложь И Источник.ИспользоватьДляПолучения = Ложь)
		И (ЗначенияРеквизитов.ИспользоватьДляОтправки = Истина Или ЗначенияРеквизитов.ИспользоватьДляПолучения = Истина)
		И Источник.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		
		УдалитьУчетнуюЗаписьИзРегистраОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(Источник.Ссылка);
		УдалитьЗаписьИзРегистраОбработанныеУчетныеЗаписи(Источник.Ссылка);
		
	КонецЕсли;	
	
	// У учетки сейчас заполнены поля ИспользоватьДляОтправки ИспользоватьДляПолучения и ПометкаУдаления = Ложь
	//  - добавим ее в регистр ОбрабатываемыеРоботамиУчетныеЗаписи
	//  - неважно, какое раньше было состояние.
	Если (Источник.ИспользоватьДляОтправки = Истина Или Источник.ИспользоватьДляПолучения = Истина)
		И Источник.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная
		 И Источник.ПометкаУдаления = Ложь Тогда
		
		Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
			ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(Источник.Ссылка);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи", 
				Истина);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

// Подписка на событие ПриЗаписи учетной записи
Процедура УчетнаяЗаписьПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи") Тогда
		ДобавитьУчетнуюЗаписьВРегистрОбрабатываемыеРегламентнымиЗаданиямиУчетныеЗаписи(Источник.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

// Модифицирует параметр ТекстПисьма: добавляет в него текст исходного письма
//
Процедура ДобавитьТекстИсходногоПисьма(
	ТекстПисьма,
	ИсходноеПисьмо,
	ТипТекста,
	ТипОтвета) Экспорт
	
	Если ТипЗнч(ИсходноеПисьмо) = Тип("СправочникСсылка.ШаблоныПисем") Тогда
		ЭтоШаблон = Истина;
	Иначе 
		ЭтоШаблон = Ложь;
	КонецЕсли;
	
	Если ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
		
		ПомечатьКаждуюСтрокуИсходногоПисьма = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете();
		СокращатьИнформациюОПисьмеПриОтвете = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСокращатьИнформациюОПисьмеПриОтвете();
		
	ИначеЕсли ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
		
		ПомечатьКаждуюСтрокуИсходногоПисьма = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке();
		СокращатьИнформациюОПисьмеПриОтвете = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСокращатьИнформациюОПисьмеПриПересылке();
		
	ИначеЕсли ЭтоШаблон Тогда 
		
		ПомечатьКаждуюСтрокуИсходногоПисьма = Ложь;
		СокращатьИнформациюОПисьмеПриОтвете = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСокращатьИнформациюОПисьмеПриОтвете();
		
	Иначе
		
		ПомечатьКаждуюСтрокуИсходногоПисьма = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете();
		СокращатьИнформациюОПисьмеПриОтвете = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСокращатьИнформациюОПисьмеПриОтвете();
		
	КонецЕсли;
	
	СимволЦитирования = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСимволЦитированияВПереписке();
	
	ИсходноеПисьмоОбъект = ИсходноеПисьмо.ПолучитьОбъект();
	
	Если ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстHTML = "";
		Если ЭтоШаблон Тогда 
			ТекстHTML = Справочники.ШаблоныПисем.ПолучитьПредставлениеСодержанияШаблона(ИсходноеПисьмоОбъект);
		Иначе 
		
			HTMLПредставлениеШапкиИсходногоПисьма = СформироватьШапкуПисьма(
				ИсходноеПисьмоОбъект,
				ТипТекста,
				СокращатьИнформациюОПисьмеПриОтвете);
			
			ТекстHTML = "";
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ИсходноеПисьмо) Тогда 
				ТекстHTML = Документы.ВходящееПисьмо.ПолучитьHTMLПредставлениеСодержанияПисьма(ИсходноеПисьмоОбъект);
			Иначе	
				ТекстHTML = Документы.ИсходящееПисьмо.ПолучитьHTMLПредставлениеСодержанияПисьма(ИсходноеПисьмоОбъект);
			КонецЕсли;	
			
		КонецЕсли;
			
		HTMLПредставлениеИсходногоПисьма = РаботаС_HTML.РазложитьТекстHTML(ТекстHTML).Тело;
			
		Если ПомечатьКаждуюСтрокуИсходногоПисьма Тогда
			
			ВидЦитированияПриОтвете = ВстроеннаяПочтаСерверПовтИсп.ПолучитьВидЦитированияПриОтвете();
			
			ТекстСтиляBlockquote = РаботаС_HTML.ПолучитьСтильЦитированияПриОтвете(ВидЦитированияПриОтвете);
			
			Если Не СокращатьИнформациюОПисьмеПриОтвете Тогда
				
				ТекстИсходногоПисьма =
					"<div>&nbsp;</div>
					|<blockquote " + ТекстСтиляBlockquote + ">
					|" + HTMLПредставлениеШапкиИсходногоПисьма + "
					|<div>&nbsp;</div>
					|" + HTMLПредставлениеИсходногоПисьма + "
					|</blockquote>";
				
			Иначе
				
				ТекстИсходногоПисьма =
					"<div>&nbsp;</div>
					|" + HTMLПредставлениеШапкиИсходногоПисьма + "
					|<blockquote " + ТекстСтиляBlockquote + ">
					|" + HTMLПредставлениеИсходногоПисьма + "
					|</blockquote>";
				
			КонецЕсли;
			
		Иначе
			
			ТекстСтиляBlockquote = "style = 'border:none;padding:0cm;margin:0cm'";
			
			ТекстИсходногоПисьма =
				"<div>&nbsp;</div>
				|<hr>
				|<blockquote " + ТекстСтиляBlockquote + ">
				|" + HTMLПредставлениеШапкиИсходногоПисьма + "
				|<div>&nbsp;</div>
				|" + HTMLПредставлениеИсходногоПисьма + "
				|</blockquote>";
			
		КонецЕсли;
		
		РаботаС_HTML.ДобавитьТекстHTML(ТекстПисьма, ТекстИсходногоПисьма);
		РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(ТекстПисьма);
		
	ИначеЕсли ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
		
		
		Если ЭтоШаблон Тогда 
			ПредставлениеШапкаИсходногоПисьма = "";
			ПредставлениеИсходногоПисьма = ИсходноеПисьмоОбъект.ПолучитьТекстовоеПредставлениеСодержанияШаблона();
		Иначе 
		
			ПредставлениеШапкаИсходногоПисьма = СформироватьШапкуПисьма(
				ИсходноеПисьмоОбъект,
				ТипТекста,
				СокращатьИнформациюОПисьмеПриОтвете);
			
			ПредставлениеИсходногоПисьма = ИсходноеПисьмоОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
			
		КонецЕсли;
		
		Если ПомечатьКаждуюСтрокуИсходногоПисьма Тогда
			
			Если Не СокращатьИнформациюОПисьмеПриОтвете Тогда
				
				ТекстИсходногоПисьма = ПредставлениеШапкаИсходногоПисьма
					+ Символы.ПС
					+ Символы.ПС
					+ ПредставлениеИсходногоПисьма;
				
				Если ЗначениеЗаполнено(СимволЦитирования) Тогда
					Почта.ДобавитьКвотирование(ТекстИсходногоПисьма, СимволЦитирования);
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(СимволЦитирования) Тогда
					Почта.ДобавитьКвотирование(ПредставлениеИсходногоПисьма, СимволЦитирования);
				КонецЕсли;
				
				ТекстИсходногоПисьма = ПредставлениеШапкаИсходногоПисьма
					+ Символы.ПС
					+ ПредставлениеИсходногоПисьма;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоШаблон Тогда 
			
			ТекстИсходногоПисьма = ПредставлениеШапкаИсходногоПисьма
				+ Символы.ПС
				+ ПредставлениеИсходногоПисьма;
			
		Иначе
			
			ТекстИсходногоПисьма = НСтр("ru = '---------- Исходное сообщение ----------'; en = '---------- Original message ----------'") 
				+ Символы.ПС 
				+ ПредставлениеШапкаИсходногоПисьма
				+ Символы.ПС
				+ Символы.ПС
				+ ПредставлениеИсходногоПисьма;
			
		КонецЕсли;
		
		// Добавление текста исходного письма с отбивкой пустой строкой от
		// основного текста письма
		Если ПустаяСтрока(ТекстПисьма) Тогда
			
			ТекстПисьма = Символы.ПС + Символы.ПС + ТекстИсходногоПисьма;
			
		Иначе
			
			Если Прав(ТекстПисьма, 1) = Символы.ПС Тогда
				ТекстПисьма = ТекстПисьма + Символы.ПС + ТекстИсходногоПисьма;
			Иначе
				ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ТекстИсходногоПисьма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоШаблон Тогда
		ТекстШаблона = ТекстПисьма;
		// Дата
		ТекущаяДата = ТекущаяДатаСеанса();
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[День]", Формат(ТекущаяДата, "ДФ=дд"));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Месяц]", Формат(ТекущаяДата, "ДФ=ММ"));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Год]", Формат(ТекущаяДата, "ДФ=гггг"));
		
		// Время
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Час]", Формат(ТекущаяДата, "ДФ=ЧЧ"));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Минута]", Формат(ТекущаяДата, "ДФ=мм"));
		
		ТекстПисьма = ТекстШаблона;
	КонецЕсли;
	
КонецПроцедуры

// Формирует шапку письма в формате HTML
Функция СформироватьШапкуПисьма(ПисьмоОбъект, ТипТекста, СокращатьИнформациюОПисьмеПриОтвете)
	
	ПредставлениеОтправителя = "";
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект) Тогда
		
		ПредставлениеОтправителя = ПолучитьПредставлениеИКонтактАдресата(
			ПисьмоОбъект.ОтправительАдресат,
			Истина).Представление;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
		ПредставлениеОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
		
	КонецЕсли;
	
	ДатаОтправки = ПисьмоОбъект.ДатаОтправки;
	Если Не ЗначениеЗаполнено(ДатаОтправки) Тогда
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект) Тогда
			ДатаОтправки = ПисьмоОбъект.ДатаПолучения;
		КонецЕсли;		
	КонецЕсли;	
	ПредставлениеДатыОтправления = Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
	
	Если ПустаяСтрока(ПредставлениеДатыОтправления) Тогда
		ПредставлениеДатыОтправления = НСтр("ru = 'Не отправлено'; en = 'Not sent'");
	КонецЕсли;
	ПредставлениеТема = ПисьмоОбъект.Тема;
	ПредставлениеКому = СформироватьПредставлениеАдресатов(ПисьмоОбъект.ПолучателиПисьма);
	ПредставлениеКопии = СформироватьПредставлениеАдресатов(ПисьмоОбъект.ПолучателиКопий);
	
	Если ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеОтправителя);
		РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеДатыОтправления);
		РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеКому);
		РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеКопии);
		РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеТема);
		
		Если Не СокращатьИнформациюОПисьмеПриОтвете Тогда
			
			Шапка = 
				"<div><b>[НадписьОт]:</b> %1<br>
				|<b>[НадписьОтправлено]:</b> %2<br>
				|<b>[НадписьКому]:</b> %3<br>
				|<b>[НадписьКопии]:</b> %4<br>
				|<b>[НадписьТема]:</b> %5</div>";
				
			Если ПустаяСтрока(ПредставлениеКому) Тогда
				Шапка = СтрЗаменить(Шапка, Символы.ПС + "<b>[НадписьКому]:</b> %3<br>", "");
			КонецЕсли;
			
			Если ПустаяСтрока(ПредставлениеКопии) Тогда
				Шапка = СтрЗаменить(Шапка, Символы.ПС + "<b>[НадписьКопии]:</b> %4<br>", "");
			КонецЕсли;
			
		Иначе
			
			Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<div><b>%1, %2:</b></div>",
				ПредставлениеДатыОтправления,
				ПредставлениеОтправителя);
			
		КонецЕсли;
		
	Иначе // ПростойТекст
		
		Если Не СокращатьИнформациюОПисьмеПриОтвете Тогда
			
			Шапка = "[НадписьОт]: %1
				|[НадписьОтправлено]: %2
				|[НадписьКому]: %3
				|[НадписьКопии]: %4
				|[НадписьТема]: %5";
			
			Если ПустаяСтрока(ПредставлениеКому) Тогда
				Шапка = СтрЗаменить(Шапка, Символы.ПС + "[НадписьКому]: %3", "");
			КонецЕсли;
			Если ПустаяСтрока(ПредставлениеКопии) Тогда
				Шапка = СтрЗаменить(Шапка, Символы.ПС + "[НадписьКопии]: %4", "");
			КонецЕсли;
			
		Иначе
			
			Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2:",
				ПредставлениеДатыОтправления,
				ПредставлениеОтправителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СокращатьИнформациюОПисьмеПриОтвете Тогда
		
		Шапка = СтрЗаменить(Шапка, "[НадписьОт]", НСтр("ru = 'От'; en = 'From'"));
		Шапка = СтрЗаменить(Шапка, "[НадписьОтправлено]", НСтр("ru = 'Отправлено'; en = 'Sent'"));
		Шапка = СтрЗаменить(Шапка, "[НадписьКому]", НСтр("ru = 'Кому'; en = 'To'"));
		Шапка = СтрЗаменить(Шапка, "[НадписьКопии]", НСтр("ru = 'Копии'; en = 'Cc'"));
		Шапка = СтрЗаменить(Шапка, "[НадписьТема]", НСтр("ru = 'Тема'; en = 'Subject'"));
		
		Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шапка,
			ПредставлениеОтправителя,
			ПредставлениеДатыОтправления,
			ПредставлениеКому,
			ПредставлениеКопии,
			ПредставлениеТема);
		
	КонецЕсли;
	
	Возврат Шапка;
	
КонецФункции

// Формирует полное или краткое представление адресатов
// в соответствии с настройками программы
Функция СформироватьПредставлениеАдресатов(ТаблицаПолучателей)
	
	КоличествоПолучателей = ТаблицаПолучателей.Количество();
	Если КоличествоПолучателей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СокращатьПредставлениеАдресатов = ВстроеннаяПочтаСерверПовтИсп.ПолучитьСокращатьПредставлениеАдресатов();
	ЧислоАдресатовДляКраткогоПредставления = ВстроеннаяПочтаСерверПовтИсп.ПолучитьЧислоАдресатовДляКраткогоПредставления();
	КоличествоОтображаемыхПолучателейПриПревышении = 3;
	
	Если СокращатьПредставлениеАдресатов
		И (КоличествоПолучателей >= ЧислоАдресатовДляКраткогоПредставления)
		И (КоличествоПолучателей > КоличествоОтображаемыхПолучателейПриПревышении) Тогда
		
		ПредставлениеАдресатов = "";
		
		Для Индекс = 0 По КоличествоОтображаемыхПолучателейПриПревышении - 1 Цикл
			
			Получатель = ТаблицаПолучателей[Индекс];
			
			ПредставлениеАдресатов = ПредставлениеАдресатов +
				ПолучитьПредставлениеИКонтактАдресата(Получатель.Адресат).Представление + "; ";
			
		КонецЦикла;
		
		ПодписьПолучателей = ВстроеннаяПочтаКлиентСервер.ПодписьКЧислу(
			КоличествоПолучателей,
			НСтр("ru = 'получатель'; en = 'recipient'"),
			НСтр("ru = 'получателя'; en = 'recipient'"),
			НСтр("ru = 'получателей'; en = 'recipients'"));
		
		ПредставлениеАдресатов = ПредставлениеАдресатов +
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ' и другие (всего %1 %2)'; en = ' and other (total %1 %2)'"),
				Формат(КоличествоПолучателей, "ЧГ=0"),
				ПодписьПолучателей);
		
	Иначе
		
		ПредставлениеАдресатов = ТаблицаПолучателейВСтроку(ТаблицаПолучателей.Выгрузить());
		
	КонецЕсли;
	
	Возврат ПредставлениеАдресатов;
	
КонецФункции

// Добавляет запись в регистр ОбработанныеУчетныеЗаписи
Процедура ЗаписатьОбработаннуюУчетнуюЗапись(УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаОбращения = ТекущаяДатаСеанса();
	
	МенеджерЗаписи = РегистрыСведений.ОбработанныеУчетныеЗаписи.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.ДатаПоследнейОбработки = ДатаОбращения;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// обработчик регламентного задания ПроверкаРаботыПриемкиПочты
Процедура ПроверкаРаботыПриемкиПочты() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработанныеУчетныеЗаписи.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.ОбработанныеУчетныеЗаписи КАК ОбработанныеУчетныеЗаписи
		|ГДЕ
		|	ОбработанныеУчетныеЗаписи.ДатаПоследнейОбработки < &ДатаОтсечения
		|	И ОбработанныеУчетныеЗаписи.УчетнаяЗапись.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчетнаяЗапись";
	
	ДатаОтсечения = ТекущаяДатаСеанса() - 30 * 60; // если 30 минут ящик не обрабатывался - считаем ошибкой
	Запрос.УстановитьПараметр("ДатаОтсечения", ДатаОтсечения);
	
	МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
	
	Если МассивУчетныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	Описание = НСтр("ru='Перечисленные ниже учетные записи не обрабатывались более 30 минут.
		|Возможно не работает автоматическая приемка почты.';
		|en = 'Accounts listed below are not handled for more than 30 minutes.
		|Maybe automatic acceptance of the mail is not working.'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
	Описание = Описание + Символы.ПС + Символы.ПС;
		
	Для Каждого УчетнаяЗапись Из МассивУчетныхЗаписей Цикл
		Описание = Описание + Символы.ПС + Строка(УчетнаяЗапись);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолучателиОповещенийОПроблемахРаботыПрограммы.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы КАК ПолучателиОповещенийОПроблемахРаботыПрограммы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь";
	
	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцесс = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	
	БизнесПроцесс.Автор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
		БизнесПроцесс.Автор = МассивПользователей[0];
	КонецЕсли;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		Строка = БизнесПроцесс.Исполнители.Добавить();
		Строка.Исполнитель = Пользователь;
	КонецЦикла;
	
	БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='Учетные записи электронной почты перестали обрабатываться (%1 шт)'; en = 'Email accounts processing stopped (%1 PCs)'"),
		Строка(МассивУчетныхЗаписей.Количество()));
	
	БизнесПроцесс.Дата = ТекущаяДатаСеанса();
	БизнесПроцесс.Описание = Описание;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Приемка электронной почты.Учетные записи электронной почты перестали обрабатываться'; en = 'Receiving emails.Email accounts processing stopped'", 
			Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Ошибка,,,
		Описание);
	
	БизнесПроцесс.Записать();
	СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
	
КонецПроцедуры

// Удаляет запись из регистра ОбработанныеУчетныеЗаписи
Процедура УдалитьЗаписьИзРегистраОбработанныеУчетныеЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		НаборЗаписей = РегистрыСведений.ОбработанныеУчетныеЗаписи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает вид цитирования для HTML
Функция ПолучитьВидЦитированияПриОтвете() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВидЦитирования = Константы.ВидЦитированияПриОтветеВФорматеHTML.Получить();
	
	Если Не ЗначениеЗаполнено(ВидЦитирования) Тогда
		ВидЦитирования = Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса;
	КонецЕсли;	
	
	Возврат ВидЦитирования;
	
КонецФункции	

// Записывает в журнал регистрации
Процедура ЗаписьЖурналаРегистрацииСервер(ТекстСообщения) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка орфографии'; en = 'Spell checking'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОЧИСТКА УСТАРЕВШИХ ЗАПИСЕЙ HTML ПРЕДСТАВЛЕНИЯ СОДЕРЖАНИЯ ПИСЕМ

Функция ПолучитьСпискиАдресовДляАвтоподбора(Текст, УчетнаяЗапись) Экспорт
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпискиАдресовЭлектроннойПочты.Ссылка КАК Ссылка,
		|	СпискиАдресовЭлектроннойПочты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СпискиАдресовЭлектроннойПочты КАК СпискиАдресовЭлектроннойПочты
		|ГДЕ
		|	СпискиАдресовЭлектроннойПочты.Наименование ПОДОБНО &Наименование
		|	И СпискиАдресовЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Текст + "%");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВозвращаемыйСписок.Количество() = 0 Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвращаемыйСписок.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции	

// получить значение константы СворачиватьПрефиксОтветаИПересылкиВТемеПисьма
Функция ПолучитьСворачиватьПрефиксОтветаИПересылкиВТемеПисьма() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СворачиватьПрефиксОтветаИПересылкиВТемеПисьма.Получить();
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////
// ССЫЛКИ MAILTO

// Возвращает структуру, содержащую информацию из ссылки mailto
Функция РазобратьСсылкуMailto(СсылкаMailto) Экспорт
	
	СтруктураMailto = Новый Структура;
	СтрокаПоискаВСсылке = НРег(СсылкаMailto);
	
	Если СтрНайти(СтрокаПоискаВСсылке, "mailto:") = 1 Тогда
		
		СсылкаMailto = Сред(СсылкаMailto, СтрДлина("mailto:") + 1);
		АнализПараметров = Ложь;
		
		Пока Не ПустаяСтрока(СсылкаMailto) Цикл
			
			ВыделенныйПараметр = ВыделитьПараметр(СсылкаMailto, АнализПараметров);
			ВнестиПараметрВСтруктуру(СтруктураMailto, ВыделенныйПараметр.НаименованиеПараметра, ВыделенныйПараметр.ЗначениеПараметра);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураMailto;
	
КонецФункции

Функция ВыделитьПараметр(СсылкаMailto, АнализПараметров)
	
	ПервыйСимвол = Сред(СсылкаMailto, 1, 1);
	
	Если ПервыйСимвол = "?" И НЕ АнализПараметров Тогда
		
		АнализПараметров = Истина;
		СсылкаMailto = Сред(СсылкаMailto, 2);
		
	ИначеЕсли ПервыйСимвол = "&" И АнализПараметров Тогда
		
		СсылкаMailto = Сред(СсылкаMailto, 2);
		
	КонецЕсли;
	
	Если АнализПараметров Тогда
		
		ПозицияРазделителя = СтрНайти(СсылкаMailto, "=");
		НаименованиеПараметра = Лев(СсылкаMailto, ПозицияРазделителя - 1);
		СсылкаMailto = Сред(СсылкаMailto, ПозицияРазделителя + 1);
		
	Иначе
		
		НаименованиеПараметра = "to";
		
	КонецЕсли;
	
	Если АнализПараметров Тогда
		
		ЗнакРазделителя = "&";
		
	Иначе
		
		ЗнакРазделителя = "?";
		
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(СсылкаMailto, ЗнакРазделителя);
	Если ПозицияРазделителя <> 0 Тогда
		
		ЗначениеПараметра = Лев(СсылкаMailto, ПозицияРазделителя - 1);
		СсылкаMailto = Сред(СсылкаMailto, ПозицияРазделителя);
		
	Иначе
		
		ЗначениеПараметра = СсылкаMailto;
		СсылкаMailto = "";
		
	КонецЕсли;
	
	ВыделенныйПараметр = Новый Структура;
	ВыделенныйПараметр.Вставить("НаименованиеПараметра", НаименованиеПараметра);
	ВыделенныйПараметр.Вставить("ЗначениеПараметра", ЗначениеПараметра);
	
	Возврат ВыделенныйПараметр;
	
КонецФункции

Процедура ВнестиПараметрВСтруктуру(СтруктураMailto, НаименованиеПараметра, ЗначениеПараметра)
	
	НаименованиеПараметра = НРег(НаименованиеПараметра);
	Если НаименованиеПараметра = "to" Тогда
		
		ДобавляемоеНаименованиеПараметра = "АдресатыКому";
		ДобавляемоеЗначениеПараметра = 
			ПолучитьМассивПолучателей(
				ВстроеннаяПочтаКлиентСервер.РаскодироватьСсылкуMailto(ЗначениеПараметра),
				НСтр("ru='Кому:'; en = 'To:'"));
		
	ИначеЕсли НаименованиеПараметра = "cc" Тогда
		
		ДобавляемоеНаименованиеПараметра = "АдресатыКопия";
		ДобавляемоеЗначениеПараметра = 
			ПолучитьМассивПолучателей(
				ВстроеннаяПочтаКлиентСервер.РаскодироватьСсылкуMailto(ЗначениеПараметра),
				НСтр("ru='Копия:'; en = 'Cc:'"));
		
	ИначеЕсли НаименованиеПараметра = "bcc" Тогда
		
		ДобавляемоеНаименованиеПараметра = "АдресатыСкрытаяКопия";
		ДобавляемоеЗначениеПараметра = 
			ПолучитьМассивПолучателей(
				ВстроеннаяПочтаКлиентСервер.РаскодироватьСсылкуMailto(ЗначениеПараметра),
				НСтр("ru='Скрытая копия:'; en = 'Bcc:'"));
		
	ИначеЕсли НаименованиеПараметра = "subject" Тогда
		
		ДобавляемоеНаименованиеПараметра = "ТемаПисьма";
		ДобавляемоеЗначениеПараметра = ВстроеннаяПочтаКлиентСервер.РаскодироватьСсылкуMailto(ЗначениеПараметра);
		
	ИначеЕсли НаименованиеПараметра = "body" Тогда
		
		ДобавляемоеНаименованиеПараметра = "ТекстПисьма";
		ДобавляемоеЗначениеПараметра = ВстроеннаяПочтаКлиентСервер.РаскодироватьСсылкуMailto(ЗначениеПараметра);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураMailto.Вставить(ДобавляемоеНаименованиеПараметра, ДобавляемоеЗначениеПараметра);
	
КонецПроцедуры

Функция ПолучитьМассивПолучателей(СтрокаПочтовыхПолучателей, ТипПолучателя)
	
	МассивАдресов = РаботаСоСтроками.РазложитьСтрокуПочтовыхАдресов(СтрокаПочтовыхПолучателей);
	МассивПолучателей = Новый Массив;
	
	Для каждого ПочтовыйАдресИнфо Из МассивАдресов Цикл
		
		Если ЗначениеЗаполнено(ПочтовыйАдресИнфо.Адрес) Тогда
			СтруктураПочтовогоАдреса = Новый Структура;
			СтруктураПочтовогоАдреса.Вставить("Адрес", ПочтовыйАдресИнфо.Адрес);
			СтруктураПочтовогоАдреса.Вставить("Представление", ПочтовыйАдресИнфо.ОтображаемоеИмя);
			СтруктураПочтовогоАдреса.Вставить("ТипПолучателя", ТипПолучателя);
			СтруктураПочтовогоАдреса.Вставить("Контакт", Неопределено);
			МассивПолучателей.Добавить(СтруктураПочтовогоАдреса);
			
			Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(ПочтовыйАдресИнфо.Адрес, ПочтовыйАдресИнфо.ОтображаемоеИмя);
			ПредставлениеАдресата = ПолучитьПредставлениеИКонтактАдресата(Адресат);
			Контакт = ПредставлениеАдресата.Контакт;
			СтруктураПочтовогоАдреса.Вставить("Контакт", Контакт);
			СтруктураПочтовогоАдреса.Представление = ПредставлениеАдресата.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Получает все папки писем пользователя ("Мои папки")
Функция ПолучитьВсеПапкиПисемПользователя(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапросВсеПапки = Новый Запрос;
	ЗапросВсеПапки.Текст = 
		"ВЫБРАТЬ
		|	ПапкиПисем.Ссылка
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|ГДЕ
		|	ПапкиПисем.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПапкиПисемБыстрогоДоступа.Папка
		|			ИЗ
		|				РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
		|			ГДЕ
		|				ПапкиПисемБыстрогоДоступа.Пользователь = &Пользователь)
		|	И ПапкиПисем.ПометкаУдаления = ЛОЖЬ";
	ЗапросВсеПапки.УстановитьПараметр("Пользователь", Пользователь);
	ПапкиПользователя = ЗапросВсеПапки.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат ПапкиПользователя;
	
КонецФункции

// Удаляет теги из тела письма
Процедура УдалитьТеги(ТекстПисьмаHTML, ИмяТега) Экспорт
	
	НРегТекстHTML = НРег(ТекстПисьмаHTML);
	
	Пока СтрНайти(НРегТекстHTML, "<" + ИмяТега) <> 0 Цикл
		
		ПозицияНачалаТегаHTML = СтрНайти(НРегТекстHTML, "<" + ИмяТега);
		ПозицияОкончанияТегаHTML = 0;
		Если ПозицияНачалаТегаHTML > 0 Тогда
			ПозицияОкончанияТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаТегаHTML);
		КонецЕсли;
		
		Если ПозицияНачалаТегаHTML <> 0 И ПозицияОкончанияТегаHTML <> 0 Тогда
			
			ПозицияНачалаЗакрывающегоТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "</" + ИмяТега, ПозицияОкончанияТегаHTML);
			ПозицияОкончанияЗакрывающегоТегаHTML = 0;
			Если ПозицияНачалаЗакрывающегоТегаHTML > 0 Тогда
				ПозицияОкончанияЗакрывающегоТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаЗакрывающегоТегаHTML);
			КонецЕсли;
			
			Если ПозицияНачалаЗакрывающегоТегаHTML <> 0 И ПозицияОкончанияЗакрывающегоТегаHTML <> 0 Тогда
				
				ТекстПисьмаHTML = Лев(ТекстПисьмаHTML, ПозицияНачалаТегаHTML - 1) 
					+ Сред(ТекстПисьмаHTML, ПозицияОкончанияЗакрывающегоТегаHTML + 1);
				НРегТекстHTML = НРег(ТекстПисьмаHTML);
				
			Иначе
				Возврат;	
			КонецЕсли;		
				
		Иначе
			
			Возврат;	
			
		КонецЕсли;		
		
	КонецЦикла;	
	
КонецПроцедуры	

// Удаляет onmouseover onmouseout из тега A
//
// Параметры:
//  ТекстПисьмаHTML - Строка с html текстом письма
//  ИмяСвойства - Строка, например "onmouseover"
//
Процедура УдалитьСвойствоТегаА(ТекстПисьмаHTML, ИмяСвойства) Экспорт
	
	УдалитьСвойствоТегаАСУказаниемКавычки(ТекстПисьмаHTML, ИмяСвойства, """");
	УдалитьСвойствоТегаАСУказаниемКавычки(ТекстПисьмаHTML, ИмяСвойства, "'");
	
КонецПроцедуры	
	
// Удаляет onmouseover onmouseout из тега A
//
// Параметры:
//  ТекстПисьмаHTML - Строка с html текстом письма
//  ИмяСвойства - Строка, например "onmouseover"
//  Кавычка - Строка   " или '
//
Процедура УдалитьСвойствоТегаАСУказаниемКавычки(ТекстПисьмаHTML, ИмяСвойства, Кавычка) Экспорт
	
	НРегТекстHTML = НРег(ТекстПисьмаHTML);
	
	ИмяСвойстваСКавычкой = ИмяСвойства + "=" + Кавычка;
	ЧислоВхождений = 0;
	
	Пока Найти(НРегТекстHTML, ИмяСвойстваСКавычкой) <> 0 Цикл
		
		ПозицияНачалаСвойства = Найти(НРегТекстHTML, ИмяСвойстваСКавычкой);
		ЧислоВхождений = ЧислоВхождений + 1;
		Если ЧислоВхождений > 1000 Тогда
			Возврат; // чтобы не было зацикливания
		КонецЕсли;	
		
		Если ПозицияНачалаСвойства <> 0 Тогда
			
			СвойствоВнутриТегаА = Ложь;
		
			Позиция = 0;
			Для Позиция = 0 По 100 Цикл
				
				Если ПозицияНачалаСвойства - Позиция > 0 Тогда
					
					Фрагмент = Сред(НРегТекстHTML, ПозицияНачалаСвойства - Позиция, 2);
					Если Фрагмент = "<a" Тогда
						СвойствоВнутриТегаА = Истина;
						Прервать;
					КонецЕсли;		
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если СвойствоВнутриТегаА Тогда
				
				ПозицияОкончанияСвойства = РаботаСоСтроками.НайтиПосле(
					НРегТекстHTML, Кавычка, ПозицияНачалаСвойства + СтрДлина(ИмяСвойстваСКавычкой));
					
				Если ПозицияОкончанияСвойства <> 0 Тогда
						
					ТекстПисьмаHTML = Лев(ТекстПисьмаHTML, ПозицияНачалаСвойства - 1) 
						+ Сред(ТекстПисьмаHTML, ПозицияОкончанияСвойства + 1);
					НРегТекстHTML = НРег(ТекстПисьмаHTML);
					
				Иначе
					Возврат; // чтобы не было зацикливания
				КонецЕсли;	
				
			Иначе
				Возврат; // чтобы не было зацикливания
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Возвращает константу МаксимальныйРазмерВнешнегоИсходящегоПисьма - размер в Мб (по умолчанию 25).
Функция ПолучитьМаксимальныйРазмерВнешнегоИсходящегоПисьма() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Получить();
	Возврат МаксимальныйРазмерВнешнегоИсходящегоПисьма;
	
КонецФункции

// Обработчик регламентного задания ЗаполнениеДанныхДляПоискаПисем
Процедура ЗаполнениеДанныхДляПоискаПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поиск по тексту писем.Информация'; en = 'Searching emails for text.Information'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное заполнение данных для поиска писем'; en = 'Started the scheduled job of filling the data to search for emails.'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	УзелСсылка = Неопределено;	
	Попытка
		
		УзелСсылка = ПланыОбмена.ПоискПисемРегистрацияВсехПисем.НайтиПоКоду("001");
		Если Не ЗначениеЗаполнено(УзелСсылка) Тогда
			НовыйУзел = ПланыОбмена.ПоискПисемРегистрацияВсехПисем.СоздатьУзел();
			НовыйУзел.Код = "001";
			НовыйУзел.Записать();
			УзелСсылка = НовыйУзел.Ссылка;
		КонецЕсли;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Поиск по тексту писем.Ошибка'; en = 'Searching emails for text.Error'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,
			,
			ПодробноеПредставлениеОшибки(Инфо));
		Возврат;
	КонецПопытки;
	
	ОбработаноПисем = 0;
	
	ЗапросПисем = Новый Запрос;
	
	// входящие письма
	ЗапросПисем.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВходящееПисьмоИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВходящееПисьмо.Изменения КАК ВходящееПисьмоИзменения
	|ГДЕ
	|	ВходящееПисьмоИзменения.Узел ССЫЛКА ПланОбмена.ПоискПисемРегистрацияВсехПисем";
	
	ТаблицаПисем = ЗапросПисем.Выполнить().Выгрузить();
	МассивСсылок = ТаблицаПисем.ВыгрузитьКолонку("Ссылка");
	
	// исходящие письма
	ЗапросПисем.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ИсходящееПисьмоИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИсходящееПисьмо.Изменения КАК ИсходящееПисьмоИзменения
	|ГДЕ
	|	ИсходящееПисьмоИзменения.Узел ССЫЛКА ПланОбмена.ПоискПисемРегистрацияВсехПисем";
	
	ТаблицаПисем = ЗапросПисем.Выполнить().Выгрузить();
	МассивСсылокИсходящих = ТаблицаПисем.ВыгрузитьКолонку("Ссылка");
	Для Каждого Ссылка Из МассивСсылокИсходящих Цикл
		МассивСсылок.Добавить(Ссылка);
	КонецЦикла;	
	
	Если МассивСсылок.Количество() = 0 Тогда
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поиск по тексту писем.Завершена обработка всех новых писем'; en = 'Searching emails for text.Completed processing all new emails'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Информация);
		
		Возврат;
		
	КонецЕсли;	
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		СсылкаПисьма = Ссылка;
		
		Попытка
			
			ТекстПисьмаХранилище = Неопределено;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СсылкаПисьма) Тогда
				
				ТекстПисьмаХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаПисьма, "ТекстПисьмаПростойТекстХранилище");
				
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СсылкаПисьма) Тогда
				
				ТекстПисьмаХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаПисьма, "ТекстХранилище");				
				
			КонецЕсли;	
			
			Если ТекстПисьмаХранилище = Неопределено Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелСсылка, СсылкаПисьма);
				Продолжить;
			КонецЕсли;	
			
			ТекстПисьма = НРег(ТекстПисьмаХранилище.Получить());
			
			// письма с телом выше 3 Мб - не индексируем
			Если СтрДлина(ТекстПисьма) < 3000000 Тогда
				РегистрыСведений.СловаПисем.ЗаписатьСловаДляПоиска(
					ТекстПисьма,
					СсылкаПисьма);
			КонецЕсли;	
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелСсылка, СсылкаПисьма);
			
			ОбработаноПисем = ОбработаноПисем + 1;
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поиск по тексту писем.Ошибка'; en = 'Searching emails for text.Error'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,
				СсылкаПисьма,
				ПодробноеПредставлениеОшибки(Инфо));
				
			Если ЗначениеЗаполнено(СсылкаПисьма) Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелСсылка, СсылкаПисьма);
			КонецЕсли;	
			
		КонецПопытки;
			
	КонецЦикла;
		
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено регламентное заполнение данных для поиска писем. Обработано писем: %1'; en = 'Completed the scheduled job of filling the data to search for emails. Emails processed: %1'"),
		Строка(ОбработаноПисем));
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поиск по тексту писем.Информация'; en = 'Searching emails for text.Information'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Информация, , ,
		Описание);
		
	Если ОбработаноПисем < 1000 И ОбработаноПисем <> 0 Тогда
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поиск по тексту писем.Завершена обработка всех новых писем'; en = 'Searching emails for text.Completed processing all new emails'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Информация);
			
	КонецЕсли;	
	
КонецПроцедуры

// Функция возвращает массив символов, которые используются в качестве разделителей слов адреса.
Функция ПолучитьРазделителиСловТекстаПисьма()
	
	РазделителиСлов = Новый Массив;
	РазделителиСлов.Добавить(" ");
	РазделителиСлов.Добавить(",");
	РазделителиСлов.Добавить(":");
	РазделителиСлов.Добавить(";");
	РазделителиСлов.Добавить("~");
	РазделителиСлов.Добавить("!");
	РазделителиСлов.Добавить("#");
	РазделителиСлов.Добавить("%");
	РазделителиСлов.Добавить("^");
	РазделителиСлов.Добавить("&");
	РазделителиСлов.Добавить("*");
	РазделителиСлов.Добавить("(");
	РазделителиСлов.Добавить(")");
	РазделителиСлов.Добавить("+");
	РазделителиСлов.Добавить("-");
	РазделителиСлов.Добавить("=");
	РазделителиСлов.Добавить("/");
	РазделителиСлов.Добавить("\");
	РазделителиСлов.Добавить("|");
	РазделителиСлов.Добавить("[");
	РазделителиСлов.Добавить("]");
	РазделителиСлов.Добавить("{");
	РазделителиСлов.Добавить("}");
	РазделителиСлов.Добавить("?");
	РазделителиСлов.Добавить("'");
	РазделителиСлов.Добавить("""");
	РазделителиСлов.Добавить("«");
	РазделителиСлов.Добавить("»");
	РазделителиСлов.Добавить("<");
	РазделителиСлов.Добавить(">");
	РазделителиСлов.Добавить("№");
	РазделителиСлов.Добавить(Символы.ВК);
	РазделителиСлов.Добавить(Символы.Таб);
	РазделителиСлов.Добавить(Символы.ПС);

	Возврат РазделителиСлов;
	
КонецФункции

// Функция разбивает переданную строку на отдельные слова
Функция ТекстПисьмаВСлова(Знач ТекстПисьма, РазделителиСлов = Неопределено) Экспорт 
	
	Если ТипЗнч(РазделителиСлов) <> Тип("Массив") Тогда
		РазделителиСлов = ПолучитьРазделителиСловТекстаПисьма();
	КонецЕсли;
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "ё", "е");
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "Ё", "Е");
	
	СловаПисьма = Новый Соответствие;
	
	ДлинаСтр = СтрДлина(ТекстПисьма);
	НачалоСлова = 0;
	ДлинаСлова = 0;
	Для Счетчик = 1 По ДлинаСтр Цикл
		
		ТекущийСимвол = Сред(ТекстПисьма, Счетчик, 1);
		
		Если РазделителиСлов.Найти(ТекущийСимвол) <> Неопределено Тогда
			
			Если НачалоСлова > 0 и ДлинаСлова > 0 Тогда
				
				Слово = Сред(ТекстПисьма, НачалоСлова, ДлинаСлова);
				
				Если СтрНайти(Слово, "@") = 0 И СтрНайти(Слово, ".") <> 0 Тогда
					МассивСловРазделенныхТочкой = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Слово, ".");
					Для Каждого СловоМассива Из МассивСловРазделенныхТочкой Цикл
						Если Не ПустаяСтрока(СловоМассива) Тогда
							СловаПисьма.Вставить(СловоМассива, 1);
						КонецЕсли;	
					КонецЦикла;	
				Иначе	
					СловаПисьма.Вставить(Слово, 1);
				КонецЕсли;	
				
			КонецЕсли;
			
			ДлинаСлова = 0;
			НачалоСлова = 0;
			
		Иначе
			
			Если НачалоСлова = 0 Тогда
				НачалоСлова = Счетчик;
			КонецЕсли;
			
			ДлинаСлова = ДлинаСлова + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НачалоСлова > 0 и ДлинаСлова > 0 Тогда
		
		Слово = Сред(ТекстПисьма, НачалоСлова, Счетчик - 1);
		
		Если СтрНайти(Слово, "@") = 0 И СтрНайти(Слово, ".") <> 0 Тогда
			МассивСловРазделенныхТочкой = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Слово, ".");
			Для Каждого СловоМассива Из МассивСловРазделенныхТочкой Цикл
				Если Не ПустаяСтрока(СловоМассива) Тогда
					СловаПисьма.Вставить(СловоМассива, 1);
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			СловаПисьма.Вставить(Слово, 1);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат СловаПисьма;
	
КонецФункции

// Проверяем наличие новых писем для пользователя
Процедура ПроверитьНаличиеНовыхПисем(ВозвращаемыеПараметры) Экспорт
	
	ВозвращаемыеПараметры = Новый Структура(
		"ЧислоНовыхПисем, ЧислоНовыхПисемСписка, ПоследнееПисьмо, Описание, УчетныеЗаписи, НужноОбновитьСписок, СписокОповещений", 
		0, 0, Неопределено, "", Новый Массив, Ложь, Новый Массив);
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	УстановитьПривилегированныйРежим(Истина); 

	ЗапросУчетныеЗаписи = Новый Запрос;
	ЗапросУчетныеЗаписи.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь,
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка КАК УчетнаяЗапись
		|ПОМЕСТИТЬ Пользователи
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И НЕ УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(НастройкиОповещенийОПисьмах.ПоказыватьСписокОповещений, ЛОЖЬ) КАК ПоказыватьСписокОповещений,
		|	ЕСТЬNULL(НастройкиОповещенийОПисьмах.ПоказыватьВсплывающиеОповещения, ЛОЖЬ) КАК ПоказыватьВсплывающиеОповещения,
		|	Пользователи.УчетнаяЗапись
		|ИЗ
		|	Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОповещенийОПисьмах КАК НастройкиОповещенийОПисьмах
		|		ПО Пользователи.Пользователь = НастройкиОповещенийОПисьмах.Пользователь
		|			И Пользователи.УчетнаяЗапись = НастройкиОповещенийОПисьмах.УчетнаяЗапись";
	ЗапросУчетныеЗаписи.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = ЗапросУчетныеЗаписи.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МассивУчетныеЗаписиПоказыватьОповещение = Новый Массив;
	МассивУчетныеЗаписиПоОтветственному = Новый Массив;
	МассивОповещений = Новый Массив;
	ПоказыватьСписокОповещений = Ложь;
	Пока Выборка.Следующий() Цикл
		МассивУчетныеЗаписиПоОтветственному.Добавить(Выборка.УчетнаяЗапись);
		
		Если Выборка.ПоказыватьВсплывающиеОповещения Тогда
			МассивУчетныеЗаписиПоказыватьОповещение.Добавить(Выборка.УчетнаяЗапись);
		КонецЕсли;	
		
		Если Не ПоказыватьСписокОповещений И Выборка.ПоказыватьСписокОповещений Тогда
			ПоказыватьСписокОповещений = Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка оповещений
	Если ПоказыватьСписокОповещений Тогда 
		ЗапросОповещения = Новый Запрос;
		ЗапросОповещения.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОповещенияОПисьмах.Письмо КАК Письмо
			|ИЗ
			|	РегистрСведений.ОповещенияОПисьмах КАК ОповещенияОПисьмах
			|ГДЕ
			|	ОповещенияОПисьмах.Пользователь = &Пользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|	Письмо УБЫВ";
			
		ЗапросОповещения.УстановитьПараметр("Пользователь", Пользователь);		
		Выборка = ЗапросОповещения.Выполнить().Выбрать();
				
		Пока Выборка.Следующий() Цикл 
			Если ЗначениеЗаполнено(Выборка.Письмо) Тогда 
				МассивОповещений.Добавить(Выборка.Письмо);	
			КонецЕсли;	
		КонецЦикла;
	
		ВозвращаемыеПараметры.СписокОповещений = МассивОповещений;
	КонецЕсли;	
	
	// тут читаем дату последней проверки
	УстановитьПривилегированныйРежим(Истина);
	ЗапросДатаПроверки = Новый Запрос;
	ЗапросДатаПроверки.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроверкаПоступленияНовыхПисем.Дата
		|ИЗ
		|	РегистрСведений.ПроверкаПоступленияНовыхПисем КАК ПроверкаПоступленияНовыхПисем
		|ГДЕ
		|	ПроверкаПоступленияНовыхПисем.Пользователь = &Пользователь";
	ЗапросДатаПроверки.УстановитьПараметр("Пользователь", Пользователь);
	МассивДаты = ЗапросДатаПроверки.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДатаПоследнейПроверки = ТекущаяДатаСеанса();
	
	Если МассивДаты.Количество() = 1 Тогда
		
		ДатаПоследнейПроверки = МассивДаты[0];
		
		МинимальнаяДата = ТекущаяДатаСеанса() - 86400;
		Если ДатаПоследнейПроверки < МинимальнаяДата Тогда
			ДатаПоследнейПроверки = МинимальнаяДата;
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ПроверитьНаличиеНовыхПисем.ДатаПоследнейПроверки'; en = 'ПроверитьНаличиеНовыхПисем.ДатаПоследнейПроверки'"),
		УровеньЖурналаРегистрации.Информация,,,
		"ДатаПоследнейПроверки = " + Строка(ДатаПоследнейПроверки));
	
	// проверка входящих писем
	ЗапросПисьма = Новый Запрос;
	ЗапросПисьма.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВходящееПисьмо.Дата КАК Дата,
		|	ВходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВходящееПисьмо.Тема КАК Тема,
		|	ВходящееПисьмо.ОтправительАдресат КАК ОтправительАдресат,
		|	ВходящееПисьмо.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (СведенияОПрочтении.Объект = ВходящееПисьмо.Ссылка)
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|ГДЕ
		|	ВходящееПисьмо.Дата > &Дата
		|	И ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
		|	И ВходящееПисьмо.УчетнаяЗапись В(&МассивУчетныеЗаписи)
		|	И ВходящееПисьмо.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	ЗапросПисьма.УстановитьПараметр("Дата", ДатаПоследнейПроверки);
	ЗапросПисьма.УстановитьПараметр("Пользователь", Пользователь);
	ЗапросПисьма.УстановитьПараметр("МассивУчетныеЗаписи", МассивУчетныеЗаписиПоОтветственному);
	Выборка = ЗапросПисьма.Выполнить();
	
	ТаблицаПисем = Выборка.Выгрузить();
	
	ЗаписатьДатуВРегистрПроверкаПоступленияНовыхПисем(Пользователь, ТекущаяДатаСеанса());
	
	Если ТаблицаПисем.Количество() = 0 Тогда
		
		// проверка исходящих писем
		ЗапросПисьма = Новый Запрос;
		ЗапросПисьма.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсходящееПисьмо.Ссылка КАК Ссылка,
			|	ИсходящееПисьмо.ОтправительКонтакт КАК ОтправительКонтакт
			|ИЗ
			|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
			|ГДЕ
			|	ИсходящееПисьмо.Дата > &Дата
			|	И ИсходящееПисьмо.УчетнаяЗапись В(&МассивУчетныеЗаписи)";
			
		ЗапросПисьма.УстановитьПараметр("Дата", ДатаПоследнейПроверки);
		ЗапросПисьма.УстановитьПараметр("МассивУчетныеЗаписи", МассивУчетныеЗаписиПоОтветственному);
		Выборка = ЗапросПисьма.Выполнить();
		
		Если Выборка.Пустой() Тогда
			Возврат;
		Иначе
			
			ТаблицаИсхПисем = Выборка.Выгрузить();
			Для Каждого Строка Из ТаблицаИсхПисем Цикл
				Если Строка.ОтправительКонтакт = Пользователь Тогда
					ВозвращаемыеПараметры.НужноОбновитьСписок = Истина; // измененные исх письма есть
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ВозвращаемыеПараметры.НужноОбновитьСписок = Истина; // новые письма есть, даже если они не в учетных записях с настроенным оповещением
	
	ЧислоПисемВУчетныхЗаписяхСОповещением = 0;
	УчетныеЗаписиСоответствие = Новый Соответствие;
	ПоследнееПисьмоСтрока = Неопределено;
	Для Каждого Строка Из ТаблицаПисем Цикл
		
		Если МассивУчетныеЗаписиПоказыватьОповещение.Найти(Строка.УчетнаяЗапись) <> Неопределено Тогда
			УчетныеЗаписиСоответствие.Вставить(Строка.УчетнаяЗапись, 0);
			ЧислоПисемВУчетныхЗаписяхСОповещением = ЧислоПисемВУчетныхЗаписяхСОповещением + 1;
			Если ПоследнееПисьмоСтрока = Неопределено Тогда
				ПоследнееПисьмоСтрока = Строка;
			КонецЕсли;			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ЧислоПисемВУчетныхЗаписяхСОповещением = 0
		И МассивОповещений.Количество() > 0 Тогда 
		ВозвращаемыеПараметры.ЧислоНовыхПисемСписка = МассивОповещений.Количество();
	КонецЕсли;
	
	ВозвращаемыеПараметры.ЧислоНовыхПисем = ЧислоПисемВУчетныхЗаписяхСОповещением;
	Если ПоследнееПисьмоСтрока <> Неопределено Тогда
		ВозвращаемыеПараметры.ПоследнееПисьмо = ПоследнееПисьмоСтрока.Ссылка;
	КонецЕсли;	
	
	Для Каждого КлючИЗначение Из УчетныеЗаписиСоответствие Цикл
		ВозвращаемыеПараметры.УчетныеЗаписи.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;	
	
	Если ЧислоПисемВУчетныхЗаписяхСОповещением = 1 Тогда
		
		МаксимальнаяДлинаСтроки = 18;
		
		Тема = Лев(ПоследнееПисьмоСтрока.Тема, МаксимальнаяДлинаСтроки);
		Если СтрДлина(ПоследнееПисьмоСтрока.Тема) > МаксимальнаяДлинаСтроки Тогда
			Тема = Тема + "...";
		КонецЕсли;	
		ПредставлениеАдресата = ПолучитьПредставлениеИКонтактАдресата(ПоследнееПисьмоСтрока.ОтправительАдресат);
		ОтКого = Лев(ПредставлениеАдресата.Представление, МаксимальнаяДлинаСтроки);
		Если СтрДлина(ПредставлениеАдресата.Представление) > МаксимальнаяДлинаСтроки Тогда
			ОтКого = ОтКого + "...";
		КонецЕсли;	
		
		ВозвращаемыеПараметры.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='От: ""%1""
			|Тема: ""%2""';
			|en = 'From: ""%1"" 
			|Subject: ""%2""'"), 
			ОтКого, Тема);
			
		Если МассивУчетныеЗаписиПоказыватьОповещение.Количество() > 1 Тогда
			
			УчетнаяЗаписьПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСТр("ru = 'Учет. запись: ""%1""'; en = 'Account: ""%1""'"), Строка(ПоследнееПисьмоСтрока.УчетнаяЗапись));
				
			ВозвращаемыеПараметры.Описание = ВозвращаемыеПараметры.Описание + Символы.ПС 
				+ УчетнаяЗаписьПредставление;
				
		КонецЕсли;	
		
	ИначеЕсли ЧислоПисемВУчетныхЗаписяхСОповещением > 1 Тогда
		
		ВозвращаемыеПараметры.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Новые письма: %1 шт.'; en = 'New emails: %1 pcs.'"), Строка(ТаблицаПисем.Количество()));
			
		Если МассивУчетныеЗаписиПоказыватьОповещение.Количество() > 1 Тогда
				
			СтрокаВсехУчетныхЗаписей = "";
			Для Каждого УчетнаяЗапись Из ВозвращаемыеПараметры.УчетныеЗаписи Цикл
				Если Не ПустаяСтрока(СтрокаВсехУчетныхЗаписей) Тогда
					СтрокаВсехУчетныхЗаписей = СтрокаВсехУчетныхЗаписей + ", ";
				КонецЕсли;	
				СтрокаВсехУчетныхЗаписей = СтрокаВсехУчетныхЗаписей + Строка(УчетнаяЗапись);
			КонецЦикла;	
			
			УчетнаяЗаписьПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСТр("ru = 'Учет. записи: ""%1""'; en = 'Accounts: ""%1""'"), СтрокаВсехУчетныхЗаписей);
				
			ВозвращаемыеПараметры.Описание = ВозвращаемыеПараметры.Описание + Символы.ПС 
				+ УчетнаяЗаписьПредставление;
				
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры	

// Записывает дату в регистр ПроверкаПоступленияНовыхПисем для указанного пользователя.
Процедура ЗаписатьДатуВРегистрПроверкаПоступленияНовыхПисем(Пользователь, Дата) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ПроверкаПоступленияНовыхПисем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Дата = Дата;
	МенеджерЗаписи.Записать();

КонецПроцедуры	

// Возвращает структуру  ВключенаПроверкаПриходаПисем, ИнтервалПроверкиВМинутах
Функция ПолучитьНастройкиОповещенийОНовыхПисьмах() Экспорт
	
	ИнтервалПроверкиВМинутах = ПолучитьПерсональнуюНастройку("ВремяПроверкиНовыхПисем");
	ПроверятьНаличиеНовыхПисем = ПолучитьПерсональнуюНастройку("ПроверятьНаличиеНовыхПисем");
	
	СтруктураВозврата = Новый Структура("ПроверятьНаличиеНовыхПисем, ИнтервалПроверкиВМинутах", 
		ПроверятьНаличиеНовыхПисем, ИнтервалПроверкиВМинутах);
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает учетные записи, где текущий пользователь - Ответственный
Функция ПолучитьУчетныеЗаписиТекущегоПользователя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат МассивУчетныхЗаписей;
	
КонецФункции

// Устанавливает связь между письмом и веткой переписки. Если ветка не существует, тогда создает
// новую.
// Выполняет в привилегированном режиме.
//
// Параметры:
//  Письмо - ссылка на документы ВходящееПисьмо и ИсходящееПисьмо
//
Процедура ОбновитьВеткуПереписки(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПисьмаБезВеток = Новый Соответствие;
	ПредельноеКоличествоИтераций = 1000;
	КорневоеПисьмо = Письмо.Ссылка;
	
	ВеткаПереписки = Неопределено;
	КоличествоНеучтенныхПисемВПереписке = 0;
	
	Пока Истина Цикл
		
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(КорневоеПисьмо, Ложь);
		// Корневое письмо найдено
		Если ВеткаПереписки <> Неопределено Тогда
			КорневоеПисьмо = ВеткаПереписки.КорневоеПисьмо;
			Прервать;
		КонецЕсли;
		
		// У текущего письма нет связи с веткой переписки
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(КорневоеПисьмо.Ссылка) Тогда
			ПисьмаБезВеток.Вставить(КорневоеПисьмо.Ссылка);
		КонецЕсли;
		КоличествоНеучтенныхПисемВПереписке = КоличествоНеучтенныхПисемВПереписке + 1;
		
		ПисьмоОснование = ПолучитьПисьмоОснование(КорневоеПисьмо);
		// Корневое письмо найдено
		Если ПисьмоОснование = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		КорневоеПисьмо = ПисьмоОснование;
		
		// Чтобы не висело, в случае коллапса
		ПредельноеКоличествоИтераций = ПредельноеКоличествоИтераций - 1;
		Если ПредельноеКоличествоИтераций = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получаем ветку для корневого письма, когда не дождались завершения итераций.
	Если ВеткаПереписки = Неопределено И ПредельноеКоличествоИтераций = 0 Тогда
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(КорневоеПисьмо, Ложь);
	КонецЕсли;
	
	// Если ветки нет, тогда создаем новую.
	Если ВеткаПереписки = Неопределено Тогда
		
		НоваяВетка = Справочники.ВеткиПереписки.СоздатьЭлемент();
		НоваяВетка.КорневоеПисьмо = КорневоеПисьмо.Ссылка;
		НоваяВетка.КоличествоПисемВПереписке = КоличествоНеучтенныхПисемВПереписке;
		НоваяВетка.Записать();
		
		ВеткаПереписки = НоваяВетка.Ссылка;
		
	ИначеЕсли КоличествоНеучтенныхПисемВПереписке > 0 Тогда
		
		СуществующаяВетка = ВеткаПереписки.Ссылка.ПолучитьОбъект();
		СуществующаяВетка.КоличествоПисемВПереписке = СуществующаяВетка.КоличествоПисемВПереписке + КоличествоНеучтенныхПисемВПереписке;
		СуществующаяВетка.Записать();
		
		ВеткаПереписки = СуществующаяВетка.Ссылка;
		
	КонецЕсли;
	
	// Связываем письма без веток
	Для каждого ПисьмоБезВетки Из ПисьмаБезВеток Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПисьмаВеток.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо = ПисьмоБезВетки.Ключ;
		МенеджерЗаписи.ВеткаПереписки = ВеткаПереписки.Ссылка;
		МенеджерЗаписи.Записать();
		
		Контроль.ОтметитьПоследнееПисьмоВКонтрольнойКарточке(ВеткаПереписки.Ссылка, ПисьмоБезВетки.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки ОбновлениеКоличестваПисемВПереписке.
//
Процедура ОбновлениеВеткиПерепискиПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Запись Из Источник.ЭтотОбъект Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Запись.Документ) Тогда
			ОбновитьВеткуПереписки(Запись.Документ);
		КонецЕсли;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Запись.СвязанныйДокумент) Тогда
			ОбновитьВеткуПереписки(Запись.СвязанныйДокумент);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу быстрого отбора для списка писем
Процедура СформироватьТаблицуБыстрогоОтбора(ОтборВПапке, ИмяЭтойФормы) Экспорт
	
	// Настройка отбора в текущей папке
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Адресаты";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'От кого/Кому:'; en = 'From/To:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Тема";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Тема:'; en = 'Subject:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Текст";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Текст:'; en = 'Body:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'; en = 'Date from:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'; en = 'Date to:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Флаг";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Флаг:'; en = 'Flag:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ФлагиОбъектов";
	НоваяСтрока.Значение = Перечисления.ФлагиОбъектов.ПустаяСсылка();
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Прочтено";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Прочтенные:'; en = 'Read:'");
	НоваяСтрока.Тип = "Булево";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Комментарий";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Комментарий:'; en = 'Comment:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НастройкиОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяЭтойФормы,
		"ОтборВПапке",
		Новый Массив);
	
	Индекс = 0;
	Для каждого Элемент Из НастройкиОтбора Цикл
		ОтборВПапке[Индекс].Значение = Элемент;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Меняет настройку рабочего стола
//
// Параметры:
//  ИмяПрежнее - Строка - прежнее имя настройки
//  ИмяНовое - Строка - новое имя настройки
Процедура ПоменятьНастройкуРабочегоСтола(ИмяПрежнее, ИмяНовое) Экспорт
	
	НастройкиНачальнойСтраницы = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиНачальнойСтраницы");
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	
	Для Индекс = 0 По СоставФорм.ЛеваяКолонка.Количество()-1  Цикл
		Если СоставФорм.ЛеваяКолонка[Индекс] = ИмяПрежнее Тогда
			СоставФорм.ЛеваяКолонка[Индекс] = ИмяНовое;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Индекс = 0 По СоставФорм.ПраваяКолонка.Количество()-1  Цикл
		Если СоставФорм.ПраваяКолонка[Индекс] = ИмяПрежнее Тогда
			СоставФорм.ПраваяКолонка[Индекс] = ИмяНовое;
		КонецЕсли;	
	КонецЦикла;	
	
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", , НастройкиНачальнойСтраницы);
	
КонецПроцедуры	

// Заполняет дерево папок в форме списка
Процедура ЗаполнитьДеревоПапок(ДеревоПапок, РежимМоиПапки, ОтображатьУдаленныеПисьмаИПапки) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Папка,
		|	ПапкиПисем.ПометкаУдаления КАК ПапкаПометкаУдаления,
		|	ПапкиПисем.Представление КАК ПредставлениеПапки,
		|	ПапкиПисем.ВидПапки КАК ВидПапки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ПометкаУдаления
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Входящие)
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Исходящие)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Отправленные)
		|			ТОГДА 3
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 5
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 6
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК Порядок,
		|
		|%ПапкаБыстрогоДоступа%
		|
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
		|	ПО (ПапкиПисемБыстрогоДоступа.Папка = ПапкиПисем.Ссылка И ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	((НЕ ПапкиПисем.ПометкаУдаления)
		|			ИЛИ &ОтображатьУдаленные)
		|
		|%ОтборМоиПапки%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Папка ИЕРАРХИЯ";
	
	// Добавление отметки папки быстрого доступа, которая используется для условного
	// оформления в режиме просмотра "Все папки"
	Если РежимМоиПапки Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПапкаБыстрогоДоступа%",
			"	ЛОЖЬ КАК ПапкаБыстрогоДоступа");
		
		// Добавление отбора только папок, которые находятся в иерархии папок быстрого
		// доступа
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборМоиПапки%",
			"	И ПапкиПисем.Ссылка В ИЕРАРХИИ
			|		(ВЫБРАТЬ
			|			ПапкиПисемБыстрогоДоступа.Папка
			|		ИЗ
			|			РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
			|		ГДЕ
			|			ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПапкаБыстрогоДоступа%",
			"	ВЫБОР
			|		КОГДА ПапкиПисемБыстрогоДоступа.Папка ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПапкаБыстрогоДоступа");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборМоиПапки%", "");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоПапок.Строки.Очистить();
	
	СведенияОПапках = ВстроеннаяПочтаСервер.ПолучитьСведенияОПапках(
		Пользователи.ТекущийПользователь(),
		РежимМоиПапки);
	
	ДобавитьПапкиВДерево(ДеревоПапок.Строки, Дерево.Строки, СведенияОПапках);
	
	СортироватьИерархически(ДеревоПапок.Строки, "Порядок, Представление");
	
	// Добавление папок поиска в общее дерево папок
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПапкиПоиска.Ссылка,
		|	ПапкиПоиска.КоличествоОбъектов,
		|	ПапкиПоиска.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПапкиПоиска КАК ПапкиПоиска
		|ГДЕ
		|	ПапкиПоиска.Ответственный = &Ответственный
		|	И НЕ ПапкиПоиска.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ПапкаПоиска = ДеревоПапок.Строки.Добавить();
		ПапкаПоиска.Ссылка = Неопределено;
		ПапкаПоиска.Представление = НСтр("ru = 'Папки поиска'; en = 'Search folders'");
		ПапкаПоиска.НомерКартинки = 5;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ПапкаПоиска.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			
			НоваяСтрока.Представление = Строка(Выборка.Ссылка);
			
			Если Выборка.КоличествоОбъектов > 0 Тогда
				
				НоваяСтрока.Представление = НоваяСтрока.Представление
					+ " (" + Строка(Выборка.КоличествоОбъектов) + ")";
				
			КонецЕсли;
			
			НоваяСтрока.НомерКартинки = 5;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СортироватьИерархически(СтрокиДерева, Знач Колонки)
	
	СтрокиДерева.Сортировать(Колонки);
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СортироватьИерархически(СтрокаДерева.Строки, Колонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПапкиВДерево(СтрокиДерева, СтрокиИсточника, СведенияОПапках)
	
	Для каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Ссылка = СтрокаИсточника.Папка;
		
		НоваяСтрока.Представление = СтрокаИсточника.ПредставлениеПапки;
		НоваяСтрока.Количество = 0;
		НоваяСтрока.Выделена = Ложь;
		
		СведенияОПапке = СведенияОПапках.Получить(СтрокаИсточника.Папка);
		
		Если СведенияОПапке <> Неопределено Тогда
			
			НоваяСтрока.Представление = СведенияОПапке.Представление;
			НоваяСтрока.Количество = СведенияОПапке.Количество;
			НоваяСтрока.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
		
		НоваяСтрока.НомерКартинки = СтрокаИсточника.НомерКартинки;
		
		НоваяСтрока.ВидПапки = СтрокаИсточника.ВидПапки;
		НоваяСтрока.Порядок = СтрокаИсточника.Порядок;
		НоваяСтрока.ПапкаБыстрогоДоступа = СтрокаИсточника.ПапкаБыстрогоДоступа;
		
		ДобавитьПапкиВДерево(НоваяСтрока.Строки, СтрокаИсточника.Строки, СведенияОПапках);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса поиска по тексту для формы списка
Функция ПолучитьТекстЗапросаПоискаПоТексту() Экспорт
	
	Возврат "ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловаПисем КАК СловаПисем
	|ПО (СловаПисем.Письмо = ЭлектроннаяПочта.Ссылка)
	|	И (СловаПисем.Слово = &СтрокаПоиска)
	| ";
	
КонецФункции	

// Возвращает текст запроса поиска по папке поиска для формы списка
Функция ПолучитьТекстЗапросаПоПапкеПоиска() Экспорт
	
	Возврат "ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромежуточныеРезультатыПоискаПисем КАК ПромежуточныеРезультатыПоискаПисем
	|ПО (ПромежуточныеРезультатыПоискаПисем.Ссылка = ЭлектроннаяПочта.Ссылка)
	|	И (ПромежуточныеРезультатыПоискаПисем.ИдентификаторПоиска = &ИдентификаторПоиска)
	| ";

КонецФункции	

// Возвращает текст запроса поиска по тексту в папке поиска для формы списка
Функция ПолучитьТекстЗапросаПоПапкеПоискаИПоТексту() Экспорт
	
	Возврат "ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромежуточныеРезультатыПоискаПисем КАК ПромежуточныеРезультатыПоискаПисем
	|ПО (ПромежуточныеРезультатыПоискаПисем.Ссылка = ЭлектроннаяПочта.Ссылка)
	|	И (ПромежуточныеРезультатыПоискаПисем.ИдентификаторПоиска = &ИдентификаторПоиска)
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловаПисем КАК СловаПисем
	|ПО (СловаПисем.Письмо = ЭлектроннаяПочта.Ссылка)
	|	И (СловаПисем.Слово = &СтрокаПоиска)
	| ";

КонецФункции	

// Устанавливает отбор быстрого поиска в форме списка писем
Процедура УстановитьОтборСписка(ПоискВключен, ЭтаФорма) Экспорт
	
	Для каждого строка Из ЭтаФорма.ОтборВПапке Цикл
		ИмяПараметра = СтрЗаменить(СтрЗаменить(Строка.Параметр, "_С", ""), "_По", "");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Список.Отбор, ИмяПараметра);
	КонецЦикла;
	
	Если СтрНайти(ЭтаФорма.Список.ТекстЗапроса, "РегистрСведений.СловаПисем") <> 0 Тогда
		
		Если СтрНайти(ЭтаФорма.Список.ТекстЗапроса, "РегистрСведений.ПромежуточныеРезультатыПоискаПисем") <> 0 Тогда
			
			ЭтаФорма.Список.ТекстЗапроса = ЭтаФорма.ИсходныйТекстЗапроса;
			
			ЭтаФорма.Список.ТекстЗапроса = СтрЗаменить(
				ЭтаФорма.Список.ТекстЗапроса,
				"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
				ВстроеннаяПочтаСервер.ПолучитьТекстЗапросаПоПапкеПоиска());
				
		Иначе
			
			ЭтаФорма.Список.ТекстЗапроса = ЭтаФорма.ИсходныйТекстЗапроса;
			
		КонецЕсли;		
		
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
			
	КонецЕсли;	
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь, ЭтаФорма);
	
	Для каждого строка Из ЭтаФорма.ОтборВПапке Цикл
		
		ИмяПараметра = СтрЗаменить(СтрЗаменить(Строка.Параметр, "_С", ""), "_По", "");
		
		Если ЗначениеЗаполнено(Строка.Значение)
			И Строка.Значение <> Неопределено Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина, ЭтаФорма);
		КонецЕсли;	
		
		Если Не ПоискВключен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Тип = "Строка"
			И ЗначениеЗаполнено(Строка.Значение)
			И Строка.Параметр <> "Текст" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭтаФорма.Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Содержит,
				Строка.Значение);
						
		ИначеЕсли Строка.Тип = "Булево"
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭтаФорма.Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка.Значение);
					
		ИначеЕсли Строка.Тип = "Дата"
			И ЗначениеЗаполнено(Строка.Значение)Тогда
			
			Если СтрНайти(Строка.Параметр, "_С") > 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ЭтаФорма.Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
					НачалоДня(Строка.Значение));
				
			КонецЕсли;
			
			Если СтрНайти(Строка.Параметр, "_По") > 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ЭтаФорма.Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
					КонецДня(Строка.Значение));
				
			КонецЕсли;
							
		ИначеЕсли (Строка.Значение = Неопределено
			Или ЗначениеЗаполнено(Строка.Значение))
			И Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			
			Если Строка.Значение = НСтр("ru = 'Любой'; en = 'Any'") Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ЭтаФорма.Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.НеРавно,
					Ложь);			
			Иначе
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ЭтаФорма.Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.Равно,
					Строка.Значение);
			КонецЕсли;
						
		ИначеЕсли (Строка.Значение = Неопределено
			Или ЗначениеЗаполнено(Строка.Значение))
			И Строка.Тип <> "Булево"
			И Строка.Параметр <> "Текст" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭтаФорма.Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка.Значение);
				
		ИначеЕсли Строка.Параметр = "Текст"
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			СтрокаПоиска = Строка.Значение;
			СтрокаПоиска = СокрЛП(НРег(СтрокаПоиска));
			
			Если СтрНайти(ЭтаФорма.Список.ТекстЗапроса, "РегистрСведений.СловаПисем") = 0 Тогда
				
				Если СтрНайти(ЭтаФорма.Список.ТекстЗапроса, "РегистрСведений.ПромежуточныеРезультатыПоискаПисем") = 0 Тогда
					
					ЭтаФорма.Список.ТекстЗапроса = ЭтаФорма.ИсходныйТекстЗапроса;
					
					ЭтаФорма.Список.ТекстЗапроса = СтрЗаменить(
						ЭтаФорма.Список.ТекстЗапроса,
						"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
						ВстроеннаяПочтаСервер.ПолучитьТекстЗапросаПоискаПоТексту());
					
					
				Иначе	
					
					ЭтаФорма.Список.ТекстЗапроса = ЭтаФорма.ИсходныйТекстЗапроса;
					
					ЭтаФорма.Список.ТекстЗапроса = СтрЗаменить(
						ЭтаФорма.Список.ТекстЗапроса,
						"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
						ВстроеннаяПочтаСервер.ПолучитьТекстЗапросаПоПапкеПоискаИПоТексту());
						
					
				КонецЕсли;	
					
				ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("СтрокаПоиска", СтрокаПоиска);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись истории ввода
	ЭтаФорма.СписокСписковВыбора.Очистить();
	Для каждого Строка Из ЭтаФорма.ОтборВПапке Цикл
		
		СписокПоследнихЗначений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяЭтойФормы,
			Строка.Параметр,
			Новый СписокЗначений());
		
		ОбновленныйСписокПоследнихЗначений = Новый СписокЗначений;
		Если (Строка.Тип = "Строка"
			Или Строка.Тип = "Дата")
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			Представление = Строка(Строка.Значение);
			Если ТипЗнч(Строка.Значение) = Тип("Дата") Тогда
				Представление = Формат(Строка.Значение, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			ОбновленныйСписокПоследнихЗначений.Добавить(
				Строка.Значение,
				Представление);
				
		ИначеЕсли Строка.Тип = "Булево" Тогда				
			
			ОбновленныйСписокПоследнихЗначений.Добавить(Истина);
			ОбновленныйСписокПоследнихЗначений.Добавить(Ложь);
			
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			
			// Подготовка списка выбора для Флага
			Для каждого Флаг Из Метаданные.Перечисления.ФлагиОбъектов.ЗначенияПеречисления Цикл
				
				ОбновленныйСписокПоследнихЗначений.Добавить(
					Перечисления.ФлагиОбъектов[Флаг.Имя],,,
					БиблиотекаКартинок[Флаг.Имя + "Флаг"]);
				
			КонецЦикла;
			
			ОбновленныйСписокПоследнихЗначений.Добавить(
				НСтр("ru = 'Любой'; en = 'Any'"), НСтр("ru = 'Любой флаг'; en = 'Any flag'"),,
				БиблиотекаКартинок.ПустойФлаг);
				
			ОбновленныйСписокПоследнихЗначений.Добавить(
				Ложь,,,
				БиблиотекаКартинок.ПустойФлаг);
			
		КонецЕсли;
		
		Для каждого Элемент Из СписокПоследнихЗначений Цикл
			
			Если ОбновленныйСписокПоследнихЗначений.НайтиПоЗначению(Элемент.Значение) = Неопределено
				И ОбновленныйСписокПоследнихЗначений.Количество() < 8 Тогда
				
				ОбновленныйСписокПоследнихЗначений.Добавить(
					Элемент.Значение,
					Элемент.Представление,
					Элемент.Пометка,
					Элемент.Картинка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ЭтаФорма.ИмяЭтойФормы, Строка.Параметр, ОбновленныйСписокПоследнихЗначений);
		
		// Обновление коллекции списков выбора на форме
		ЭтаФорма.СписокСписковВыбора.Добавить(ОбновленныйСписокПоследнихЗначений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность, ЭтаФорма)
	
	ЭтаФорма.Элементы.СброситьОтбор.Доступность = Доступность;	
	
	Если Не ЭтаФорма.ПоказыватьДеревоПапок Тогда
		ЭтаФорма.Элементы.ГруппаОтбор.Видимость = Доступность;	
	КонецЕсли;	
	
КонецПроцедуры

// Читает статус письма
Процедура ПрочитатьСтатусПисьма(Письмо, НомерСостояния, ПодсказкаСтатуса) Экспорт
	
	ОтправкаОтменена = Неопределено;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		ОтправкаОтменена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ОтправкаОтменена");
	КонецЕсли;	
	
	Отправлено = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ДатаОтправки");
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = Письмо;
	КешИнформации.Прочитать();
	
	НомерСостояния = 0;
	
	Если ОтправкаОтменена = Истина Тогда
		НомерСостояния = 5;
		ПодсказкаСтатуса = НСтр("ru='Отправка отменена'; en = 'Send canceled'");
	ИначеЕсли Не КешИнформации.Выбран() Тогда
		НомерСостояния = 0;
	ИначеЕсли КешИнформации.ЕстьОшибкиПриемкиОтправкиПочты И Отправлено = Дата(1, 1, 1) Тогда
		НомерСостояния = 6;
		ПодсказкаСтатуса = НСтр("ru='Есть ошибки отправки почты'; en = 'There are errors when sending email'");
	ИначеЕсли КешИнформации.ПолученОтвет Тогда	
		НомерСостояния = 4;
		ПодсказкаСтатуса = НСтр("ru='Получен ответ'; en = 'Received a response'");
	ИначеЕсли КешИнформации.ОтправленОтвет И КешИнформации.Переслан Тогда	
		НомерСостояния = 3;
		ПодсказкаСтатуса = НСтр("ru='Отвечено, переслано'; en = 'Replied, forwarded'");
	ИначеЕсли КешИнформации.ОтправленОтвет
				И Не КешИнформации.Переслан Тогда	
		НомерСостояния = 1;
		ПодсказкаСтатуса = НСтр("ru='Отправлен ответ'; en = 'Sent reply'");
	ИначеЕсли НЕ КешИнформации.ОтправленОтвет
				И КешИнформации.Переслан Тогда	
		НомерСостояния = 2;
		ПодсказкаСтатуса = НСтр("ru='Переслано'; en = 'Forwarded'");
	КонецЕсли;	
	
КонецПроцедуры

// Получает представление папки для режима отображения по одной папке
//
// Параметры:
//  Папка - СправочникСсылка.ПапкиПисем - папка письма
//
// Возвращаемое значение:
//    Структура - "Описание, КоличествоПисем"
//
Функция ПолучитьПредставлениеПапки(Папка) Экспорт
	
	Описание = "";
	
	РеквизитыПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Папка, 
		"Родитель, ВариантОтображенияКоличестваПисем");
		
	Родитель = РеквизитыПапки.Родитель;	
	ВариантОтображенияКоличестваПисем = РеквизитыПапки.ВариантОтображенияКоличестваПисем;	
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		ОписаниеРодителей = Справочники.ПапкиПисем.ПолучитьПолныйПутьПапки(Родитель);
		Описание = Строка(Папка) + " (" + ОписаниеРодителей + ")";
	Иначе
		Описание = Строка(Папка);
	КонецЕсли;	
	
	КоличествоПисем = ПолучитьКоличествоПисемВПапке(Папка, ВариантОтображенияКоличестваПисем);
	
	Возврат Новый Структура("Описание, КоличествоПисем", Описание, КоличествоПисем);
	
КонецФункции	

// Вызывается непосредственно перед удалением письма из ИБ.
// Удаляет связи письма с веткой переписки из РС ПисьмаВеток и саму ветку, при необходимости.
//
// Параметры:
//  Письмо - ДокументСсылка.ВходящееПисьмо
//         - ДокументСсылка.ИсходящееПисьмо
//
Процедура ПередУдалениемПисьма(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определение ветки переписки.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВеткиПереписки.Ссылка,
		|	ВеткиПереписки.КорневоеПисьмо
		|ИЗ
		|	РегистрСведений.ПисьмаВеток КАК ПисьмаВеток
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВеткиПереписки КАК ВеткиПереписки
		|		ПО ПисьмаВеток.ВеткаПереписки = ВеткиПереписки.Ссылка
		|ГДЕ
		|	ПисьмаВеток.Письмо = &Письмо";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		// Если письмо является корневым
		Если Выборка.КорневоеПисьмо = Письмо Тогда
			
			ПисьмаБезВеток = Новый Соответствие;
			
			// Удаление записей из РС, соответствующих удаляемой ветке переписки.
			Запрос2 = Новый Запрос;
			Запрос2.Текст =
				"ВЫБРАТЬ
				|	ПисьмаВеток.Письмо
				|ИЗ
				|	РегистрСведений.ПисьмаВеток КАК ПисьмаВеток
				|ГДЕ
				|	ПисьмаВеток.ВеткаПереписки = &ВеткаПереписки";
			Запрос2.УстановитьПараметр("ВеткаПереписки", Выборка.Ссылка);
			Выборка2 = Запрос2.Выполнить().Выбрать();
			
			Если Выборка2.Количество() > 0 Тогда
				Пока Выборка2.Следующий() Цикл
					
					МенеджерЗаписи = РегистрыСведений.ПисьмаВеток.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Письмо = Выборка2.Письмо;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.Удалить();
					
					Если Выборка2.Письмо <> Письмо Тогда
						ПисьмаБезВеток.Вставить(Выборка2.Письмо, Истина);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Удаление ветки.
			ОбъектВеткаПереписки = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектВеткаПереписки.Удалить();
			
			// Создание новых веток переписок и связей с другими ветками для писем без веток.
			Для Каждого ПисьмоБезВетки Из ПисьмаБезВеток Цикл
				ОбновитьВеткуПереписки(ПисьмоБезВетки.Ключ);
			КонецЦикла;
			
		// Если письмо не является корневым.
		Иначе
			
			// Удаление записи из РС.
			МенеджерЗаписи = РегистрыСведений.ПисьмаВеток.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Письмо = Письмо;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
			
			// Обновление количества писем в переписке.
			ОбъектВеткаПереписки = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектВеткаПереписки.КоличествоПисемВПереписке = ОбъектВеткаПереписки.КоличествоПисемВПереписке - 1;
			ОбъектВеткаПереписки.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает адрес электронной почты пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - адрес которого нужно получить
//
// Возвращаемое значение:
//    Адресат - Структура - найденные данные.
//    ""      - Строка - при отсутствии данных.
//
Функция ПолучитьАдресЭлектроннойПочты(Пользователь) Экспорт 
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		Пользователь,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Если ТаблицаКонтактов.Количество() > 0 Тогда
		Адрес = ТаблицаКонтактов[0].Значение;
		Представление = Строка(Пользователь);
		Адресат = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
			Пользователь, Адрес, Представление);
		
		Возврат Адресат;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получает имя значения перечисления как объекта метаданных.
//
// Параметры:
//  Значение - значение перечисления для которого необходимо получить имя перечисления.
//
// Возвращаемое значение:
//  Строка - имя значения перечисления как объекта метаданных.
//
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	
	ОбъектМетаданных = Значение.Метаданные();
	
	ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
	
	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
КонецФункции 

// Выполняет отзыв (удаление) писем в ящиках получателей
Процедура ОтозватьПисьмо(Письмо, ТекстСообщения) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, 
		"ВидМаршрутизации, 
		|ИдентификаторСообщения, 
		|ДатаОтправки");
	
	ПисьмоОтправлено = ЗначениеЗаполнено(РеквизитыПисьма.ДатаОтправки);
	Если Не ПисьмоОтправлено Тогда 
		ТекстСообщения = НСтр("ru = 'Отзыв писем возможен только для отправленных писем.'; en = 'Revoking emails is possible only for sent emails.'");
		Возврат;
	КонецЕсли;	
	
	Если ПисьмоОтозвано(Письмо) Тогда 
		ТекстСообщения = НСтр("ru = 'Письмо уже было отозвано ранее.'; en = 'The email has already been revoked earlier.'");
		Возврат;
	КонецЕсли;
	
	СведенияОбОтзыве = Новый ТаблицаЗначений;
	СведенияОбОтзыве.Колонки.Добавить("Адрес");
	СведенияОбОтзыве.Колонки.Добавить("Адресат");
	СведенияОбОтзыве.Колонки.Добавить("ВходящееПисьмо");
	СведенияОбОтзыве.Колонки.Добавить("Отозвано");
	СведенияОбОтзыве.Колонки.Добавить("Сообщение");
	СведенияОбОтзыве.Колонки.Добавить("ТипАдреса");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящееПисьмоПолучателиПисьма.Адресат,
	|	ИсходящееПисьмоПолучателиПисьма.Адресат.Адрес КАК Адрес,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.Кому) КАК ТипАдреса
	|ИЗ
	|	Документ.ИсходящееПисьмо.ПолучателиПисьма КАК ИсходящееПисьмоПолучателиПисьма
	|ГДЕ
	|	ИсходящееПисьмоПолучателиПисьма.Ссылка = &Письмо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящееПисьмоПолучателиКопий.Адресат,
	|	ИсходящееПисьмоПолучателиКопий.Адресат.Адрес,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.Копия)
	|ИЗ
	|	Документ.ИсходящееПисьмо.ПолучателиКопий КАК ИсходящееПисьмоПолучателиКопий
	|ГДЕ
	|	ИсходящееПисьмоПолучателиКопий.Ссылка = &Письмо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат,
	|	ИсходящееПисьмоПолучателиСкрытыхКопий.Адресат.Адрес,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыАдресатов.СкрытаяКопия)
	|ИЗ
	|	Документ.ИсходящееПисьмо.ПолучателиСкрытыхКопий КАК ИсходящееПисьмоПолучателиСкрытыхКопий
	|ГДЕ
	|	ИсходящееПисьмоПолучателиСкрытыхКопий.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	ВыборкаПолучателиПисьма = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПолучателиПисьма.Следующий() Цикл
		НоваяСтрока = СведенияОбОтзыве.Добавить();
		НоваяСтрока.Адресат = ВыборкаПолучателиПисьма.Адресат;
		НоваяСтрока.Адрес = ВыборкаПолучателиПисьма.Адрес;
		НоваяСтрока.ТипАдреса = ВыборкаПолучателиПисьма.ТипАдреса;
		НоваяСтрока.Отозвано = Ложь;
	КонецЦикла;	
	
	Если РеквизитыПисьма.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внутренняя Тогда 
		
		// удаление из регистра "Письма в процессе отправки"
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации");
			ЭлементБлокировки.УстановитьЗначение("Письмо", Письмо);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Адресат, Письмо
			|ИЗ
			|	РегистрСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации
			|ГДЕ
			|	Письмо = &Письмо");
			Запрос.УстановитьПараметр("Письмо", Письмо);
			
			ВыборкаПисьмаВПроцессеОтправки = Запрос.Выполнить().Выбрать();
			Пока ВыборкаПисьмаВПроцессеОтправки.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ПисьмаВПроцессеОтправкиПоВнутреннейМаршрутизации.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо = ВыборкаПисьмаВПроцессеОтправки.Письмо;
				МенеджерЗаписи.Адресат = ВыборкаПисьмаВПроцессеОтправки.Адресат;
				МенеджерЗаписи.Удалить();
				
				НайденнаяСтрока = СведенияОбОтзыве.Найти(ВыборкаПисьмаВПроцессеОтправки.Адресат.Адрес, "Адрес");
				Если НайденнаяСтрока <> Неопределено Тогда 
					НайденнаяСтрока.Отозвано = Истина;
					НайденнаяСтрока.Сообщение = НСтр("ru = 'письмо удалено из очереди отправки'; en = 'the email has been removed from the send queue'");
				КонецЕсли;
			КонецЦикла;	
			
			ЗафиксироватьТранзакцию();	
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если СведенияОбОтзыве.Найти(Ложь, "Отозвано") <> Неопределено Тогда // есть неотозванные письма
			
			// поиск в ящике получателя
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВходящееПисьмо.Ссылка КАК ВходящееПисьмо,
			|	ВходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ВходящееПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты КАК Адрес
			|ИЗ
			|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
			|ГДЕ
			|	ВходящееПисьмо.ИдентификаторСообщения = &ИдентификаторСообщения");
			Запрос.УстановитьПараметр("ИдентификаторСообщения", РеквизитыПисьма.ИдентификаторСообщения);
			
			ВыборкаПисьма = Запрос.Выполнить().Выбрать();
			Пока ВыборкаПисьма.Следующий() Цикл
				ВходящееПисьмоСсылка = ВыборкаПисьма.ВходящееПисьмо;
				ВходящееПисьмоАдрес = ВыборкаПисьма.Адрес;
				
				Просмотрено = РегистрыСведений.СведенияОПросмотреПисем.ПолучитьПризнакПросмотрено(ВходящееПисьмоСсылка);
				Если Просмотрено Тогда 
					Продолжить;
				КонецЕсли;	
				
				Попытка
					ЗаблокироватьДанныеДляРедактирования(ВходящееПисьмоСсылка);
					ВходящееПисьмоОбъект = ВходящееПисьмоСсылка.ПолучитьОбъект();
					ВходящееПисьмоОбъект.Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Письмо отозвано: %1'; en = 'Email revoked: %1'"),
						ВходящееПисьмоОбъект.Тема);
					
					ВходящееПисьмоОбъект.ТекстПисьмаHTMLХранилище = Неопределено;
					ВходящееПисьмоОбъект.ТекстПисьмаПростойТекстХранилище = Неопределено;
					ВходящееПисьмоОбъект.ТекстПисьмаРазмеченныйТекстХранилище = Неопределено;
					ВходящееПисьмоОбъект.Записать();
					
					РегистрыСведений.HTMLПредставленияСодержанияПисем.Удалить(ВходящееПисьмоСсылка);
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Справочник.Файлы.Ссылка КАК Ссылка
					|ГДЕ
					|	ВладелецФайла = &ВладелецФайла";
					Запрос.УстановитьПараметр("ВладелецФайла", ВходящееПисьмоСсылка);
					ВыборкаФайлы = Запрос.Выполнить().Выбрать();
					Пока ВыборкаФайлы.Следующий() Цикл
						ЗаблокироватьДанныеДляРедактирования(ВыборкаФайлы.Ссылка);
						ФайлОбъект = ВыборкаФайлы.Ссылка.ПолучитьОбъект();
						ФайлОбъект.ПолноеНаименование = НСтр("ru = 'Отозван'; en = 'Revoked'");
						ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения("");
						ФайлОбъект.Записать();
						ФайлОбъект.УстановитьПометкуУдаления(Истина);
					КонецЦикла;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Версиифайлов.Ссылка КАК Ссылка,
					|	Версиифайлов.ТипХраненияФайла
					|ИЗ
					|	Справочник.ВерсииФайлов КАК Версиифайлов
					|ГДЕ
					|	Версиифайлов.Владелец.ВладелецФайла = &ВладелецФайла";
					Запрос.УстановитьПараметр("ВладелецФайла", ВходящееПисьмоСсылка);
					ВыборкаВерсии = Запрос.Выполнить().Выбрать();
					Пока ВыборкаВерсии.Следующий() Цикл
						ЗаблокироватьДанныеДляРедактирования(ВыборкаВерсии.Ссылка);
						ВерсияОбъект = ВыборкаВерсии.Ссылка.ПолучитьОбъект();
						ВерсияОбъект.Расширение = "txt";
						ВерсияОбъект.Размер = 0;
						ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения("");
						ВерсияОбъект.РаспознанныйТекст = Новый ХранилищеЗначения("");
						ВерсияОбъект.ИзвлеченныйТекст = Новый ХранилищеЗначения("");
						
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
						ТекстовыйДокумент = Новый ТекстовыйДокумент;
						ТекстовыйДокумент.Записать(ИмяВременногоФайла);
						ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
						
						Если ВыборкаВерсии.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда 
							
							ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияОбъект.Том) + ВерсияОбъект.ПутьКФайлу; 
							Файл = Новый Файл(ПолныйПуть);
							Файл.УстановитьТолькоЧтение(Ложь);
							ДвоичныеДанные.Записать(ПолныйПуть);
							
						Иначе
							
							МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.ВерсияФайла = ВерсияОбъект.Ссылка;
							МенеджерЗаписи.Прочитать();
							
							Если МенеджерЗаписи.Выбран() Тогда 
								МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные);
								МенеджерЗаписи.Записать();
							КонецЕсли;	
							
						КонецЕсли;
						
						УдалитьФайлы(ИмяВременногоФайла);
						ВерсияОбъект.Записать();
						
					КонецЦикла;	
					
					НайденнаяСтрока = СведенияОбОтзыве.Найти(ВходящееПисьмоАдрес, "Адрес");
					Если НайденнаяСтрока <> Неопределено Тогда 
						НайденнаяСтрока.Отозвано = Истина;
						НайденнаяСтрока.Сообщение = НСтр("ru = 'очищено входящее письмо'; en = 'cleaned up the incoming email'");
					КонецЕсли;	
					
				Исключение
					
					// отзовем уведомлением
					Инфо = ИнформацияОбОшибке();
					ОписаниеОшибки = ПодробноеПредставлениеОшибки(Инфо);
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отзыв писем. Ошибка при очистке входящего письма.'; en = 'Revoking emails. Error occurred while cleaning up incoming email.'"),
						УровеньЖурналаРегистрации.Ошибка,,
						ВходящееПисьмоСсылка,
						ОписаниеОшибки);
					
				КонецПопытки;	
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;	
		 	
	//Формирование уведомлений
	Адресаты = Новый Массив;
	АдресатыДляУведомления = Новый Массив;
	Для Каждого Строка Из СведенияОбОтзыве Цикл
		
		Если Строка.Отозвано Тогда 
			Продолжить;
		КонецЕсли;	
		
		Адресаты.Добавить(Строка.Адресат);
		
		Если Строка.ТипАдреса <> Перечисления.ТипыАдресатов.СкрытаяКопия Тогда
			АдресатыДляУведомления.Добавить(Строка.Адресат);
		КонецЕсли;		
		
	КонецЦикла;
	
	Если АдресатыДляУведомления.Количество() > 0 Тогда 
		ОтправитьУведомлениеОбОтзыве(АдресатыДляУведомления, Письмо);
	КонецЕсли;	
	
	Для Каждого Адресат Из АдресатыДляУведомления Цикл
		НайденнаяСтрока = СведенияОбОтзыве.Найти(Адресат.Адрес, "Адрес");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.Отозвано = Истина;
			НайденнаяСтрока.Сообщение = НСтр("ru = 'отправлено уведомление об отзыве'; en = 'sent a notice of revoking'");
		КонецЕсли;
	КонецЦикла;	
	
	ТекстСообщения = НСтр("ru = 'Письмо было успешно отозвано у получателей:'; en = 'The email was successfully revoked from recipients:'");
	Для Каждого Строка Из СведенияОбОтзыве Цикл
		СтруктураАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Строка.Адресат);
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтруктураАдресата.Представление + " - " + Строка.Сообщение;
	КонецЦикла;	
	
	// признак отозвано
	МенеджерЗаписи = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Письмо;
	МенеджерЗаписи.Прочитать();
		
	МенеджерЗаписи.Объект = Письмо;
	МенеджерЗаписи.Отозван = Истина;
	МенеджерЗаписи.Записать();
				
КонецПроцедуры			
				
Процедура ОтправитьУведомлениеОбОтзыве(Адресаты, ОтзываемоеПисьмо)
			
	ИсходящееПисьмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
	ИсходящееПисьмо.Дата = ТекущаяДатаСеанса();
	ИсходящееПисьмо.ВидМаршрутизации = ОтзываемоеПисьмо.ВидМаршрутизации;
	
	ИсходящееПисьмо.Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Письмо отозвано: %1'; en = 'Email revoked: %1'"),
		ОтзываемоеПисьмо.Тема);
		
	КемОтозвано = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьПредставлениеАдреса(ОтзываемоеПисьмо.УчетнаяЗапись);	
	ДатаОтзыва = ТекущаяДатаСеанса();
		
	ТекстПисьма	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сообщение
		    |
			|	от: %1
			|	тема: %2
			|	отправленное: %3
			|
			|отозвано автором.';
			|en = 'Message 
			|from: %1 
			|Subject: %2 
			|sent: %3 
			|revoked by the author.'"),
		КемОтозвано,
		ОтзываемоеПисьмо.Тема,
		Формат(ОтзываемоеПисьмо.ДатаОтправки, "ДФ='дд.ММ.гг ЧЧ:мм'"));
			
	ИсходящееПисьмо.ТекстХранилище = Новый ХранилищеЗначения(ТекстПисьма, Новый СжатиеДанных);
	ИсходящееПисьмо.УчетнаяЗапись = ОтзываемоеПисьмо.УчетнаяЗапись;
	ИсходящееПисьмо.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	
	КодировкаИсходящихПисем = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("КодировкаИсходящихПисем");
	Если ПустаяСтрока(КодировкаИсходящихПисем) Тогда
		КодировкаИсходящихПисем = "utf-8";
	КонецЕсли;
	
	АвтовыборКодировкиИсходящихПисем = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтовыборКодировкиИсходящихПисем");
	Если АвтовыборКодировкиИсходящихПисем Тогда
		КодировкаОтзываемогоПисьма = ОтзываемоеПисьмо.Кодировка;
		Если КодировкаОтзываемогоПисьма <> "us-ascii" Тогда 
			КодировкаИсходящихПисем = КодировкаОтзываемогоПисьма;
		КонецЕсли;	
	КонецЕсли;
	
	ИсходящееПисьмо.Кодировка = КодировкаИсходящихПисем;
	
	Для Каждого Адресат Из Адресаты Цикл 
		ПолучательПисьма = ИсходящееПисьмо.ПолучателиПисьма.Добавить();
		ПолучательПисьма.Адресат = Адресат;
	КонецЦикла;	
	
	ИсходящееПисьмо.ПолучателиПисьмаСтрокой = ТаблицаПолучателейВСтроку(ИсходящееПисьмо.ПолучателиПисьма);
	
	ИсходящееПисьмо.ПодготовленоКОтправке = ТекущаяДатаСеанса();
	ИсходящееПисьмо.Записать();
	
	РаботаСПрочтениями.УстановитьСвойствоПрочтен(ИсходящееПисьмо.Ссылка);
	
КонецПроцедуры	

// Проверяет, что переданное письмо было отозвано
Функция ПисьмоОтозвано(ПисьмоСсылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ПисьмоСсылка) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КешИнформацииОбОбъектах.Отозван
	|ИЗ
	|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|ГДЕ
	|	КешИнформацииОбОбъектах.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ПисьмоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Отозван;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции	

// Возвращает массив структур - данные о файлах письма
Функция ПолучитьСведенияОФайлахПисьма(Письмо) Экспорт
	
	СведенияОФайлах = Новый Массив;
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
	
	Для Каждого Файл Из ФайлыПисьма Цикл
		
		СведенияОФайле = Новый Структура(
			"ИмяФайла,
			|ИндексКартинки,
			|ПометкаУдаления,
			|Представление,
			|Размер,
			|РазмерПредставление,
			|Редактирует,
			|РедактируетТекущийПользователь,
			|ЭтоВложенноеПисьмо,
			|Ссылка,
			|Письмо");
		
		ЗаполнитьЗначенияСвойств(СведенияОФайле, Файл);
		СведенияОФайлах.Добавить(СведенияОФайле);
		
	КонецЦикла;
	
	ВложенныеПисьма = РегистрыСведений.ВложенныеПисьма.ПолучитьВложенныеПисьма(Письмо);
	Для Каждого Файл Из ВложенныеПисьма Цикл
		
		СведенияОФайле = Новый Структура(
			"ИмяФайла,
			|ИндексКартинки,
			|ПометкаУдаления,
			|Представление,
			|Размер,
			|РазмерПредставление,
			|Редактирует,
			|РедактируетТекущийПользователь,
			|ЭтоВложенноеПисьмо,
			|Ссылка,
			|Письмо");
		
		ЗаполнитьЗначенияСвойств(СведенияОФайле, Файл);
		СведенияОФайлах.Добавить(СведенияОФайле);
		
	КонецЦикла;
	
	Возврат СведенияОФайлах;
	
КонецФункции

// Преобразует массив ссылок на письма в массив структур с информацией в формате вложений - для поля Вложения
//
// Параметры:
// - МассивПисем – массив, содержащий письма 
//
//  Возвращаемое значение:
//   Массив структур - массив 
// с полями писем (Письмо Представление ИмяФайла ИндексКартинки Размер РазмерПредставление ПометкаУдаления Редактирует РедактируетТекущийПользователь)
//  - для заполнения реквизита Вложения в карточке письма или форме списка писем.
Функция ПолучитьИнформациюОПисьмахВложениях(МассивПисем) Экспорт
	
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КраткиеОписанияПисем.Ссылка КАК Письмо,
		|	КраткиеОписанияПисем.Тема,
		|	КраткиеОписанияПисем.Дата,
		|	КраткиеОписанияПисем.Размер,
		|	КраткиеОписанияПисем.ПометкаУдаления
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК КраткиеОписанияПисем
		|ГДЕ
		|	КраткиеОписанияПисем.Ссылка В(&МассивПисем)");
		
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИндексКартинки = 32;
		
		ФайлИнфо = Новый Структура;
		ФайлИнфо.Вставить("Письмо", Выборка.Письмо);
		ФайлИнфо.Вставить("Представление", Выборка.Тема);
		ФайлИнфо.Вставить("ИмяФайла", Выборка.Тема);
		ФайлИнфо.Вставить("ИндексКартинки", ИндексКартинки);
		ФайлИнфо.Вставить("Размер", Выборка.Размер);
		ФайлИнфо.Вставить("РазмерПредставление", РаботаСоСтроками.ПолучитьРазмерСтрокой(Выборка.Размер));
		ФайлИнфо.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ФайлИнфо.Вставить("Редактирует", Неопределено);
		ФайлИнфо.Вставить("РедактируетТекущийПользователь", Ложь);
		
		Результат.Добавить(ФайлИнфо);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоответствиеАдресатовПоАдресуИКонтакту(МассивСтруктур) Экспорт
	
	Таблица = Новый ТаблицаЗначений; 
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка")); 
	НоваяКолонка = Таблица.Колонки.Добавить("Адрес", Новый ОписаниеТипов(Массив));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Пользователи")); 
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица")); 
	Массив.Добавить(Тип("СправочникСсылка.РолиИсполнителей")); 
	Массив.Добавить(Тип("СправочникСсылка.Контрагенты")); 
	Массив.Добавить(Тип("СправочникСсылка.КонтактныеЛица")); 
	Массив.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты")); 
	НоваяКолонка = Таблица.Колонки.Добавить("Контакт", Новый ОписаниеТипов(Массив));
	
	Для Каждого Элемент Из МассивСтруктур Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Адрес = Элемент.Адрес;
		НоваяСтрока.Контакт = Элемент.Контакт;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Контакт КАК Контакт,
		|	Таблица.Адрес КАК Адрес
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&Данные КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
		|	СведенияОбАдресатах.Контакт КАК Контакт,
		|	СведенияОбАдресатах.АдресатСообщения.Адрес КАК Адрес,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Внешний,
		|	СведенияОбАдресатах.АдресатСообщения.ВидМаршрутизации КАК ВидМаршрутизации
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО (СведенияОбАдресатах.Контакт = ВременнаяТаблица.Контакт)
		|			И (СведенияОбАдресатах.АдресатСообщения.Адрес ПОДОБНО ВременнаяТаблица.Адрес)";
		
	Запрос.УстановитьПараметр("Данные", Таблица);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СоответствиеАдресатов = Новый Соответствие;
	Для Каждого Строка Из РезультатЗапроса Цикл
		СоответствиеАдресатов[НРег(Строка.Адрес)] 
			= Новый Структура("Адресат, Внешний, ВидМаршрутизации", 
				Строка.АдресатСообщения, Строка.Внешний, Строка.ВидМаршрутизации);
	КонецЦикла;	
	
	Возврат СоответствиеАдресатов;
		
КонецФункции	

// Получает элементы справочника "Адресаты почтовых сообщений"
//	по переданной Фамилии и ФИО.
// Если адресата с таким адресом и представлением не найдено, 
//	то создастся новый адресат и привяжется к контактам с таким же адресом
//
// Параметры:
//   ФИО - Строка - ФИО искомого адресата
//
// Возвращаемое значение: 
//   МассивАдресатов - Маасив адрестов удовлетворяющих условию
//
Функция ПолучитьПочтовогоАдресатаПоФИО(ФИО) Экспорт
	
	ПозицияПробела = Найти(ФИО, " ");
	Если ПозицияПробела > 0 Тогда 
		Фамилия = Лев(ФИО, ПозицияПробела - 1);
	Иначе 
		Фамилия = ФИО;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка,
		|	ЕСТЬNULL(СведенияОбАдресатах.АдресатСообщения, НЕОПРЕДЕЛЕНО) КАК АдресатСообщения
		|ПОМЕСТИТЬ Адресаты
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО (СведенияОбАдресатах.Контакт = Пользователи.Ссылка)
		|ГДЕ
		|	(Пользователи.Наименование ПОДОБНО &Фамилия
		|			ИЛИ Пользователи.ПредставлениеВДокументах ПОДОБНО &Фамилия
		|			ИЛИ Пользователи.ПредставлениеВПереписке ПОДОБНО &Фамилия)
		|	И НЕ Пользователи.Недействителен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.ПредставлениеВДокументах,
		|	Пользователи.ПредставлениеВПереписке,
		|	Адресаты.АдресатСообщения
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Адресаты КАК Адресаты
		|		ПО Пользователи.Ссылка = Адресаты.Ссылка
		|ГДЕ
		|	(Пользователи.Наименование ПОДОБНО &Фамилия
		|			ИЛИ Пользователи.ПредставлениеВДокументах ПОДОБНО &Фамилия
		|			ИЛИ Пользователи.ПредставлениеВПереписке ПОДОБНО &Фамилия)
		|	И НЕ Пользователи.Недействителен";
		
		
	Запрос.УстановитьПараметр("Фамилия", "%" + Фамилия + "%");
	РезультатЗапроса = Запрос.Выполнить();
	МассивАдресатов = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивАдресатов;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если ЗначениеЗаполнено(Выборка.АдресатСообщения) Тогда 
				
				Если Строка(Выборка.Ссылка) = ФИО 
					Или Выборка.ПредставлениеВДокументах = ФИО 
					Или Выборка.ПредставлениеВПереписке = ФИО Тогда 
					МассивАдресатов = Новый Массив;
					МассивАдресатов.Добавить(Выборка.АдресатСообщения);
					Прервать;
				Иначе 
					МассивАдресатов.Добавить(Выборка.АдресатСообщения);
				КонецЕсли;
			Иначе 
				Адрес = ПолучитьОсновнойАдрес(Выборка.Ссылка);
				Если Не ЗначениеЗаполнено(Адрес) Тогда 
					Продолжить;
				КонецЕсли;
				
				Адресат = ПолучитьПочтовогоАдресата(Адрес, Строка(Выборка.Ссылка));
				
				Если Строка(Выборка.Ссылка) = ФИО 
					Или Выборка.ПредставлениеВДокументах = ФИО 
					Или Выборка.ПредставлениеВПереписке = ФИО Тогда 
					МассивАдресатов = Новый Массив;
					МассивАдресатов.Добавить(Адресат);
					Прервать;
				Иначе 
					МассивАдресатов.Добавить(Адресат);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивАдресатов;
	
КонецФункции

// Возвращает основной адрес контакта
Функция ПолучитьОсновнойАдрес(Контакт) Экспорт  
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.РолиИсполнителей") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
	
		ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Контакт, 
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
		Если ТаблицаКонтактовEmail.Количество() <> 0 Тогда
			Возврат ТаблицаКонтактовEmail[0].Значение;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

// Находит адресатов в тексте письма в строках вида From: От: От кого:
Функция НайтиАдресатовВТекстеПисьма(Письмо) Экспорт 
	
	АдресаПолучателей = Новый Массив;
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	ТекстПисьма = ПисьмоОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПисьма);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок(); 
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(КоличествоСтрок-Инд+1);
		
		Если Найти(Строка, "From:") > 0 Тогда 
			Поз = Найти(Строка, "From:");
			СтрокаАдресаПроверка = Сред(Строка, Поз + СтрДлина("From:"));
		ИначеЕсли Найти(Строка, "От:") > 0 Тогда 	
			Поз = Найти(Строка, "От:");
			СтрокаАдресаПроверка = Сред(Строка, Поз + СтрДлина("От:"));
		ИначеЕсли Найти(Строка, "От кого:") > 0 Тогда 	
			Поз = Найти(Строка, "От кого:");
			СтрокаАдресаПроверка = Сред(Строка, Поз + СтрДлина("От кого:"));
		Иначе	
			Продолжить;
		КонецЕсли;	
		
		СтрокаАдресаПроверка = СтрЗаменить(СтрокаАдресаПроверка, "mailto:", "");
		СтрокаАдресаПроверка = СтрЗаменить(СтрокаАдресаПроверка, "mailto", "");
		
		АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(СтрокаАдресаПроверка);
		Если ПустаяСтрока(АдресИнфо.Адрес) Тогда
			Продолжить;
		КонецЕсли;	
			
		ИмяАдресата = ?(ЗначениеЗаполнено(АдресИнфо.ОтображаемоеИмя), АдресИнфо.ОтображаемоеИмя, АдресИнфо.Адрес);
		Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(АдресИнфо.Адрес, ИмяАдресата);
		
		Если АдресаПолучателей.Найти(Адресат) = Неопределено Тогда 
			АдресаПолучателей.Добавить(Адресат);
		КонецЕсли;	
		
	КонецЦикла;	
	
	УчетнаяЗапись = ПисьмоОбъект.УчетнаяЗапись;
	Если ТипЗнч(Письмо.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда 
		ОтправительАдресат = ПисьмоОбъект.ОтправительАдресат;
		
		Если АдресаПолучателей.Найти(ОтправительАдресат) = Неопределено Тогда 
			АдресаПолучателей.Добавить(ОтправительАдресат);
		КонецЕсли;	
	КонецЕсли;	
		
	АдресатыВТекстеПисьма = Новый СписокЗначений;
	Для Каждого Адресат Из АдресаПолучателей Цикл
		Если Адресат.Адрес = УчетнаяЗапись.АдресЭлектроннойПочты Тогда 
			Продолжить;
		КонецЕсли;	
		
		ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат).Представление;
		АдресатыВТекстеПисьма.Вставить(0, Адресат, ПредставлениеАдресата); 
	КонецЦикла;	
		
	Возврат АдресатыВТекстеПисьма;	
	
КонецФункции

// Групповая отправка писем

Функция ПолучитьДанныеПисемДляОтправкиИзСписка(Письма) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПисем = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящееПисьмо.Ссылка,
	|	ИсходящееПисьмо.Тема,
	|	ИсходящееПисьмо.ТипОтвета,
	|	ИсходящееПисьмо.УчетнаяЗапись,
	|	ИсходящееПисьмо.УчетнаяЗапись.ИспользоватьДляОтправки КАК УчетнаяЗаписьИспользоватьДляОтправки,
	|	ИсходящееПисьмо.УчетнаяЗапись.ВариантИспользования КАК УчетнаяЗаписьВариантИспользования,
	|	ИсходящееПисьмо.УчетнаяЗапись.ПометкаУдаления КАК УчетнаяЗаписьПометкаУдаления,
	|	ИсходящееПисьмо.ВидМаршрутизации,
	|	ИсходящееПисьмо.ПисьмоОснование,
	|	ИсходящееПисьмо.Проект,
	|	ИсходящееПисьмо.ПолучателиПисьма.(
	|		Адресат,
	|		Адресат.Наименование КАК Наименование,
	|		Адресат.Адрес КАК Адрес
	|	),
	|	ИсходящееПисьмо.ПолучателиСкрытыхКопий.(
	|		Адресат,
	|		Адресат.Наименование КАК Наименование,
	|		Адресат.Адрес КАК Адрес
	|	),
	|	ИсходящееПисьмо.ПолучателиКопий.(
	|		Адресат,
	|		Адресат.Наименование КАК Наименование,
	|		Адресат.Адрес КАК Адрес
	|	),
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.Файлы КАК Файлы
	|				ГДЕ
	|					Файлы.ВладелецФайла = ИсходящееПисьмо.Ссылка
	|					И НЕ Файлы.ПометкаУдаления
	|					И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПисьмоСодержитЗанятыеФайлы
	|ИЗ
	|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
	|ГДЕ
	|	ИсходящееПисьмо.Ссылка В(&Письма)";
	
	Запрос.УстановитьПараметр("Письма", Письма);
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	АдресаДляПроверки = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеПисьма = Новый Структура;
		ДанныеПисьма.Вставить("Ссылка", Выборка.Ссылка);
	    ДанныеПисьма.Вставить("Тема", Выборка.Тема);
		ДанныеПисьма.Вставить("ТипОтвета", Выборка.ТипОтвета);
		ДанныеПисьма.Вставить("УчетнаяЗапись", Выборка.УчетнаяЗапись);
		ДанныеПисьма.Вставить("УчетнаяЗаписьИспользоватьДляОтправки", Выборка.УчетнаяЗаписьИспользоватьДляОтправки);
		ДанныеПисьма.Вставить("УчетнаяЗаписьВариантИспользования", Выборка.УчетнаяЗаписьВариантИспользования);
		ДанныеПисьма.Вставить("УчетнаяЗаписьПометкаУдаления", Выборка.УчетнаяЗаписьПометкаУдаления);
		ДанныеПисьма.Вставить("ПисьмоОснование", Выборка.ПисьмоОснование);
		ДанныеПисьма.Вставить("Проект", Выборка.Проект);
		ДанныеПисьма.Вставить("ПроверятьОтсутствие", ПроверятьОтсутствие);
		ДанныеПисьма.Вставить("Получатели", Новый Массив);
		ДанныеПисьма.Вставить("ПисьмоСодержитЗанятыеФайлы", Выборка.ПисьмоСодержитЗанятыеФайлы);
			
		ВыборкаПолучатели = Выборка.ПолучателиПисьма.Выбрать();
		Пока ВыборкаПолучатели.Следующий() Цикл
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Адресат", ВыборкаПолучатели.Адресат);
			НоваяСтрока.Вставить("Представление", ВыборкаПолучатели.Наименование);
			НоваяСтрока.Вставить("Адрес", ВыборкаПолучатели.Адрес);
			НоваяСтрока.Вставить("ТипАдреса", Перечисления.ТипыАдресатов.Кому);
			НоваяСтрока.Вставить("Внутренний", Не ЭтоВнешнийАдресат(ВыборкаПолучатели.Адресат));
			НоваяСтрока.Вставить("Внешний", Не НоваяСтрока.Внутренний);
			НоваяСтрока.Вставить("Контакт", ПолучитьПользователяПоАдресату(ВыборкаПолучатели.Адресат));
			НоваяСтрока.Вставить("ЭтоАдресЭлектроннойПочты", 
				РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(ВыборкаПолучатели.Адрес));
			
			ДанныеПисьма.Получатели.Добавить(НоваяСтрока);
			АдресаДляПроверки.Добавить(НоваяСтрока.Адрес);
		КонецЦикла;	
		
		ВыборкаПолучатели = Выборка.ПолучателиКопий.Выбрать();
		Пока ВыборкаПолучатели.Следующий() Цикл
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Адресат", ВыборкаПолучатели.Адресат);
			НоваяСтрока.Вставить("Представление", ВыборкаПолучатели.Наименование);
			НоваяСтрока.Вставить("Адрес", ВыборкаПолучатели.Адрес);
			НоваяСтрока.Вставить("ТипАдреса", Перечисления.ТипыАдресатов.Копия);
			НоваяСтрока.Вставить("Внутренний", Не ЭтоВнешнийАдресат(ВыборкаПолучатели.Адресат));
			НоваяСтрока.Вставить("Внешний", Не НоваяСтрока.Внутренний);
			НоваяСтрока.Вставить("Контакт", ПолучитьПользователяПоАдресату(ВыборкаПолучатели.Адресат));
			НоваяСтрока.Вставить("ЭтоАдресЭлектроннойПочты", 
				РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(ВыборкаПолучатели.Адрес));
			
			ДанныеПисьма.Получатели.Добавить(НоваяСтрока);
			АдресаДляПроверки.Добавить(НоваяСтрока.Адрес);
		КонецЦикла;
		
		ВыборкаПолучатели = Выборка.ПолучателиСкрытыхКопий.Выбрать();
		Пока ВыборкаПолучатели.Следующий() Цикл
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Адресат", ВыборкаПолучатели.Адресат);
			НоваяСтрока.Вставить("Представление", ВыборкаПолучатели.Наименование);
			НоваяСтрока.Вставить("Адрес", ВыборкаПолучатели.Адрес);
			НоваяСтрока.Вставить("ТипАдреса", Перечисления.ТипыАдресатов.СкрытаяКопия);
			НоваяСтрока.Вставить("Внутренний", Не ЭтоВнешнийАдресат(ВыборкаПолучатели.Адресат));
			НоваяСтрока.Вставить("Внешний", Не НоваяСтрока.Внутренний);
			НоваяСтрока.Вставить("Контакт", ПолучитьПользователяПоАдресату(ВыборкаПолучатели.Адресат));
			НоваяСтрока.Вставить("ЭтоАдресЭлектроннойПочты", 
				РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(ВыборкаПолучатели.Адрес));
			
			ДанныеПисьма.Получатели.Добавить(НоваяСтрока);
			АдресаДляПроверки.Добавить(НоваяСтрока.Адрес);
		КонецЦикла;
		
		ОригинальноеПисьмоВФорматеICalendar = Ложь;	
		ПисьмоОснование = Выборка.ПисьмоОснование;
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОснование) Тогда
			ContentType = ВстроеннаяПочтаСервер.ПолучитьЗначениеПоляИзЗаголовкаПисьма(ПисьмоОснование.ВнутреннийЗаголовок, "Content-Type");
			Если Найти(НРег(ContentType), "text/calendar") > 0 Тогда 
				СодержаниеПисьма = ПисьмоОснование.ПолучитьОбъект().ПолучитьСодержаниеПисьма();
				ТекстHTML = СодержаниеПисьма.Текст;
				Если Найти(ТекстHTML, "BEGIN:VCALENDAR") <> 0 Тогда
					ОригинальноеПисьмоВФорматеICalendar = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		ДанныеПисьма.Вставить("ОригинальноеПисьмоВФорматеICalendar", ОригинальноеПисьмоВФорматеICalendar);
		
		ТекстОшибкиПредельныйРазмерПисьма = "";
		ПроверитьПредельныйРазмерПисьма = ВстроеннаяПочтаСервер.ПроверитьПредельныйРазмерПисьма(
			Выборка.Ссылка, ТекстОшибкиПредельныйРазмерПисьма);
		ДанныеПисьма.Вставить("ПроверитьПредельныйРазмерПисьма", ПроверитьПредельныйРазмерПисьма);
		ДанныеПисьма.Вставить("ТекстОшибкиПредельныйРазмерПисьма", ТекстОшибкиПредельныйРазмерПисьма);
		
		ДанныеПисем.Добавить(ДанныеПисьма);
	КонецЦикла;	
	
	Возврат ДанныеПисем;
	
КонецФункции	

Функция ПроверитьПредельныйРазмерПисьма(Письмо, ТекстОшибки = "") Экспорт 
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, 
		"ВидМаршрутизации, 
		|ТипТекста, 
		|ТекстХранилище, 
		|ТекстПисьмаHTMLХранилище");
	
	Если РеквизитыПисьма.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внутренняя Тогда
		Возврат Истина;
	КонецЕсли;	
			
	РазмерТекстаБайт = 0;
	Если РеквизитыПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		РазмерТекстаБайт = СтрДлина(РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить());
	Иначе	
		РазмерТекстаБайт = СтрДлина(РеквизитыПисьма.ТекстХранилище.Получить());
	КонецЕсли;	
	РазмерТекстаМБ = РазмерТекстаБайт / (1024*1024);
	
	МаксимальныйРазмерТекста = 3; // 3 МБ
	Если РазмерТекстаМБ > МаксимальныйРазмерТекста Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Размер содержимого письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
			|Удалите лишний текст письма.';
			|en = 'The size of the content of the email (%1 Mb) exceeds the maximum allowed size (%2 Mb). 
			|Remove the redundant email text.'"),
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерТекстаМБ), 
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(МаксимальныйРазмерТекста));
		Возврат Ложь;
	КонецЕсли;	
	
	МаксимальныйРазмерПисьма = ВстроеннаяПочтаСервер.ПолучитьМаксимальныйРазмерВнешнегоИсходящегоПисьма();
	Если МаксимальныйРазмерПисьма = 0 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	РазмерПисьмаБайт = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(Файлы.ТекущаяВерсияРазмер), 0) КАК ТекущаяВерсияРазмер
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Письмо
		|	И НЕ Файлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		РазмерПисьмаБайт = Выборка.ТекущаяВерсияРазмер;
	КонецЕсли;	
	РазмерПисьмаБайт = РазмерПисьмаБайт + РазмерТекстаБайт;
	РазмерПисьмаМБ = РазмерПисьмаБайт / (1024*1024);
	
	Если РазмерПисьмаМБ > МаксимальныйРазмерПисьма Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Размер письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
			|Удалите слишком большие вложения.';
			|en = 'Email size (%1 MB) exceeds the maximum allowed size (%2 MB). 
			|Remove too large attachments.'"),
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерПисьмаМБ), 
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(МаксимальныйРазмерПисьма));
		Возврат Ложь;
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции	

Функция ПересылкаВнутреннегоПисьма(Письмо) Экспорт 
	
	ПересылкаВнутреннегоПисьма = Ложь;
	Если ЗначениеЗаполнено(Письмо.ПисьмоОснование) И 
		ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо.ПисьмоОснование) И
		(Письмо.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Или 
		 Письмо.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Или 
		 Письмо.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма)
		 И ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Письмо.ПисьмоОснование).Чтение Тогда
		 
		ВидМаршрутизацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо.ПисьмоОснование, "ВидМаршрутизации");
		
		ПересылкаВнутреннегоПисьма = Истина;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо.ПисьмоОснование) Тогда 
			ПересылкаВнутреннегоПисьма = Не ЕстьВнешнийАдресатУВходящегоПисьма(Письмо.ПисьмоОснование);
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо.ПисьмоОснование) Тогда 	
			ПересылкаВнутреннегоПисьма = Не ЕстьВнешнийАдресатУИсходящегоПисьма(Письмо.ПисьмоОснование);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ПересылкаВнутреннегоПисьма;
	
КонецФункции

Функция ЕстьВнешнийАдресатУВходящегоПисьма(ПисьмоОснование) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееПисьмо.ОтправительАдресат КАК Адресат
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.Ссылка = &Письмо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящееПисьмоПолучателиПисьма.Адресат
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиПисьма КАК ВходящееПисьмоПолучателиПисьма
		|ГДЕ
		|	ВходящееПисьмоПолучателиПисьма.Ссылка = &Письмо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящееПисьмоПолучателиКопий.Адресат
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиКопий КАК ВходящееПисьмоПолучателиКопий
		|ГДЕ
		|	ВходящееПисьмоПолучателиКопий.Ссылка = &Письмо";
		
	Запрос.УстановитьПараметр("Письмо", ПисьмоОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоВнешнийАдресат(Выборка.Адресат) Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ЕстьВнешнийАдресатУИсходящегоПисьма(ПисьмоОснование) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящееПисьмоПолучателиПисьма.Адресат КАК Адресат
		|ИЗ
		|	Документ.ИсходящееПисьмо.ПолучателиПисьма КАК ИсходящееПисьмоПолучателиПисьма
		|ГДЕ
		|	ИсходящееПисьмоПолучателиПисьма.Ссылка = &Письмо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящееПисьмоПолучателиКопий.Адресат
		|ИЗ
		|	Документ.ИсходящееПисьмо.ПолучателиКопий КАК ИсходящееПисьмоПолучателиКопий
		|ГДЕ
		|	ИсходящееПисьмоПолучателиКопий.Ссылка = &Письмо";
		
		
	Запрос.УстановитьПараметр("Письмо", ПисьмоОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоВнешнийАдресат(Выборка.Адресат) Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Процедура ОтправитьПисьмаПриГрупповойОтправке(Письма, ОтправленныеПисьма, СписокОшибок) Экспорт 
	
	ИдентификаторСеанса = Новый УникальныйИдентификатор;
	ПорядковыйНомерСобытия = 0;
	
	Для Каждого Письмо Из Письма Цикл
		
		НачатьТранзакцию();
		Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Письмо);
		
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		ПисьмоОбъект.ПодготовленоКОтправке = ТекущаяДатаСеанса();
		ПисьмоОбъект.Дата = ТекущаяДатаСеанса();
		ПисьмоОбъект.ОтправкаОтменена = Ложь;
		ПисьмоОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяОтправка", Истина);
		ПисьмоОбъект.Записать();
		
		Если ЗначениеЗаполнено(ПисьмоОбъект.ПисьмоОснование) Тогда
			ПредЗначениеПривилегированныйРежим = ПривилегированныйРежим();
			УстановитьПривилегированныйРежим(Истина); // При отправке письма связи пишем в привилег режиме
		
			Если ПисьмоОбъект.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
			
				СвязиДокументов.УстановитьСвязь(
					ПисьмоОбъект.Ссылка,
					Неопределено,
					ПисьмоОбъект.ПисьмоОснование,
					Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
				
			ИначеЕсли ПисьмоОбъект.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
				
				СвязиДокументов.УстановитьСвязь(
					ПисьмоОбъект.Ссылка,
					Неопределено,
					ПисьмоОбъект.ПисьмоОснование,
					Справочники.ТипыСвязей.ПересылкаПисьма);	
				
			ИначеЕсли ПисьмоОбъект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
				
				СвязиДокументов.УстановитьСвязь(
					ПисьмоОбъект.Ссылка,
					Неопределено,
					ПисьмоОбъект.ПисьмоОснование,
					Справочники.ТипыСвязей.ПеренаправлениеПисьма);
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(ПредЗначениеПривилегированныйРежим);
		КонецЕсли;
		
		ВстроеннаяПочтаСервер.ЗаписатьПротоколДоставкиПочты(
			ПисьмоОбъект.Ссылка,
			"",
			Ложь,
			Перечисления.ТипыСобытийДоставкиПочты.ИнтерактивнаяОтправкаПисьма,
			ПисьмоОбъект.УчетнаяЗапись,
			ПорядковыйНомерСобытия,
			ИдентификаторСеанса);
			
			ВстроеннаяПочтаСервер.ПрименитьПравила(ПисьмоОбъект);
		
			РазблокироватьДанныеДляРедактирования(Письмо);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			РазблокироватьДанныеДляРедактирования(Письмо);
			
			ПараметрыЛогирования = Новый Структура("ИдентификаторСеанса, ПорядковыйНомерСобытия, НомерЗадания",
				ИдентификаторСеанса, ПорядковыйНомерСобытия, 0);
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Произошла ошибка при групповой отправке письма:
				|%1'; en = 'An error occurred while group sending emails: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
			ЗаписатьОшибкуДоставки(
				СообщениеОбОшибке,
				Письмо,
				Письмо.УчетнаяЗапись,
				ПараметрыЛогирования,
				Перечисления.ТипыСобытийДоставкиПочты.ИнтерактивнаяОтправкаПисьма);

			СписокОшибок.Добавить(Письмо, СообщениеОбОшибке);	
				
			Продолжить;
				
		КонецПопытки;
		
		ОтправленныеПисьма.Добавить(Письмо);
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьПользователяПоАдресату(Адресат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СведенияОбАдресатах.Контакт КАК Контакт
		|ИЗ
		|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|ГДЕ
		|	СведенияОбАдресатах.АдресатСообщения = &АдресатСообщения
		|	И ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
		|	И СведенияОбАдресатах.Активна = ИСТИНА";
		
	Запрос.УстановитьПараметр("АдресатСообщения", Адресат);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаКонтакты = РезультатЗапроса.Выбрать();
		ВыборкаКонтакты.Следующий();
		Возврат ВыборкаКонтакты.Контакт;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

// Групповая отправка писем - конец

// По переданной группе пользователей, контрагентов, физлиц, личных адресатов, группе Мои контакты, Отделу
// заполняет массив структур (Адрес  Группа Контакт	Представление)
//  Работает рекурсивно
//
// Параметры
// Группа - входной параметр - группа пользователей, контрагентов, физлиц, 
//		личных адресатов, групп Мои контакты, Отдел
// АдресатыГруппы - выходной параметр, массив структур(Адрес  Группа Контакт Представление)
// ИспользованныеАдреса - Соответствие - для проверки уникальности адресов
Процедура РазвернутьГруппуВАдресаты(Группа, АдресатыГруппы, ИспользованныеАдреса) Экспорт
	
	ТипАдресаКому = НСтр("ru = 'Кому:'; en = 'To:'");
	
	Если ТипЗнч(Группа) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		
		Запрос = Новый Запрос;
		
		Если Группа = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи") Тогда
		
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Пользователи.Ссылка КАК Ссылка,
				|	Пользователи.Наименование КАК Наименование
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ПометкаУдаления = ЛОЖЬ
				|
				|УПОРЯДОЧИТЬ ПО
				|	Наименование";
		Иначе
				
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РабочиеГруппы.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ РабочиеГруппыВременная
				|ИЗ
				|	Справочник.РабочиеГруппы КАК РабочиеГруппы
				|ГДЕ
				|	РабочиеГруппы.Ссылка В ИЕРАРХИИ(&Родитель)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	РабочиеГруппыСостав.Пользователь КАК Ссылка,
				|	РабочиеГруппыСостав.Пользователь.ПредставлениеВПерепискеСРангом КАК Наименование
				|ИЗ
				|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
				|ГДЕ
				|	РабочиеГруппыСостав.Ссылка В
				|			(ВЫБРАТЬ
				|				РабочиеГруппыВременная.Ссылка
				|			ИЗ
				|				РабочиеГруппыВременная)
				|	И РабочиеГруппыСостав.Пользователь.Недействителен = ЛОЖЬ
				|	И РабочиеГруппыСостав.Пользователь.ПометкаУдаления = ЛОЖЬ
				|
				|УПОРЯДОЧИТЬ ПО
				|	Наименование";
				
			Запрос.УстановитьПараметр("Родитель", Группа);		
			
		КонецЕсли;		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Адрес = ПолучитьОсновнойАдрес(Выборка.Ссылка);
			Если ЗначениеЗаполнено(Адрес) И ИспользованныеАдреса.Получить(Адрес) = Неопределено Тогда
				
				ГруппаТипАдреса = ТипАдресаКому;
				
				Наименование = Выборка.Наименование + " <" + Адрес + ">";
				
				Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
					Адрес, Наименование, Выборка.Ссылка, ГруппаТипАдреса);
				АдресатыГруппы.Добавить(Контакт);
				ИспользованныеАдреса.Вставить(Адрес, 1);
				
			КонецЕсли;		
				
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СведенияОПользователяхДокументооборот.Пользователь КАК Ссылка,
			|	СведенияОПользователяхДокументооборот.Пользователь.ПредставлениеВПерепискеСРангом КАК Наименование
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
			|		ПО (СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка)
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Родитель)
			|	И СведенияОПользователяхДокументооборот.Пользователь.Недействителен = ЛОЖЬ
			|	И СведенияОПользователяхДокументооборот.Пользователь.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
		Запрос.УстановитьПараметр("Родитель", Группа);		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Адрес = ПолучитьОсновнойАдрес(Выборка.Ссылка);
			Если ЗначениеЗаполнено(Адрес) И ИспользованныеАдреса.Получить(Адрес) = Неопределено Тогда
				
				ГруппаТипАдреса = ТипАдресаКому;
				
				Наименование = Выборка.Наименование + " <" + Адрес + ">";
				
				Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
					Адрес, Наименование, Выборка.Ссылка, ГруппаТипАдреса);
				АдресатыГруппы.Добавить(Контакт);
				ИспользованныеАдреса.Вставить(Адрес, 1);
				
			КонецЕсли;		
				
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЛичныеАдресаты.Ссылка,
			|	ЛичныеАдресаты.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
			|ГДЕ
			|	ЛичныеАдресаты.Группа = &Родитель
			|	И ЛичныеАдресаты.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
		Запрос.УстановитьПараметр("Родитель", Группа);		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Адрес = ПолучитьОсновнойАдрес(Выборка.Ссылка);
			Если ЗначениеЗаполнено(Адрес) И ИспользованныеАдреса.Получить(Адрес) = Неопределено Тогда
				
				ГруппаТипАдреса = ТипАдресаКому;
				
				Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
					Адрес, Выборка.Наименование, Выборка.Ссылка, ГруппаТипАдреса);
				АдресатыГруппы.Добавить(Контакт);
				ИспользованныеАдреса.Вставить(Адрес, 1);
				
			КонецЕсли;		
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		
		Для Каждого Строка Из Группа.Контакты Цикл
			
			Адрес = Строка.КонтактнаяИнформация;
			Если ЗначениеЗаполнено(Адрес) И ИспользованныеАдреса.Получить(Адрес) = Неопределено Тогда
				
				ГруппаТипАдреса = ТипАдресаКому;
				
				Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
					Адрес, Строка.Представление, Строка.Контакт, ГруппаТипАдреса);
				АдресатыГруппы.Добавить(Контакт);
				ИспользованныеАдреса.Вставить(Адрес, 1);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.Контакт)	Тогда
				
				Если 	ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.РабочиеГруппы")
					Или ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.СтруктураПредприятия")
					Или ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.ГруппыЛичныхАдресатов")
					Или ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.Контрагенты")
					Или ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
					РазвернутьГруппуВАдресаты(Строка.Контакт, АдресатыГруппы, ИспользованныеАдреса);
					
				КонецЕсли;	
				
			КонецЕсли;		
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка,
			|	Контрагенты.Наименование КАК Наименование
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)
			|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
			|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
		Запрос.УстановитьПараметр("Родитель", Группа);	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Адрес = ПолучитьОсновнойАдрес(Выборка.Ссылка);
			Если ЗначениеЗаполнено(Адрес) И ИспользованныеАдреса.Получить(Адрес) = Неопределено Тогда
				
				ГруппаТипАдреса = ТипАдресаКому;
				
				Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
					Адрес, Выборка.Наименование, Выборка.Ссылка, ГруппаТипАдреса);
				АдресатыГруппы.Добавить(Контакт);
				ИспользованныеАдреса.Вставить(Адрес, 1);
				
			КонецЕсли;	
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Группа) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛица.Ссылка,
			|	ФизическиеЛица.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Родитель В ИЕРАРХИИ(&Родитель)
			|	И ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
			|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
		Запрос.УстановитьПараметр("Родитель", Группа);	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Адрес = ПолучитьОсновнойАдрес(Выборка.Ссылка);
			Если ЗначениеЗаполнено(Адрес) И ИспользованныеАдреса.Получить(Адрес) = Неопределено Тогда
				
				ГруппаТипАдреса = ТипАдресаКому;
				
				Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
					Адрес, Выборка.Наименование, Выборка.Ссылка, ГруппаТипАдреса);
				АдресатыГруппы.Добавить(Контакт);
				ИспользованныеАдреса.Вставить(Адрес, 1);
				
			КонецЕсли;		
				
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

// Помечает на удаления письма в папках, для которых настроена автоочистка.
//
Процедура ОчисткаПапокОтСтарыхПисем() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Очистка папок от старых писем'; en = 'Folder cleanup of old emails'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало выполнения'; en = 'Started execution'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Настройки = РегистрыСведений.НастройкиАвтоочисткиПапокПисем.Выбрать();
	Пока Настройки.Следующий() Цикл
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ЭлектроннаяПочта.Ссылка КАК Письмо
			|ИЗ
			|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
			|ГДЕ
			|	ЭлектроннаяПочта.ПометкаУдаления = ЛОЖЬ
			|	И ЭлектроннаяПочта.Папка = &Папка
			|	И ЭлектроннаяПочта.Дата < &ДатаУстаревания
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭлектроннаяПочта.Дата";
		Запрос.УстановитьПараметр("Папка", Настройки.Папка);
		ДатаУстаревания = ТекущаяДата() - Настройки.ПериодУстаревания * 24 * 60 * 60;
		Запрос.УстановитьПараметр("ДатаУстаревания", ДатаУстаревания);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				
				ЗаблокироватьДанныеДляРедактирования(Выборка.Письмо);
				ПисьмоОбъект = Выборка.Письмо.ПолучитьОбъект();
				ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
				РазблокироватьДанныеДляРедактирования(Выборка.Письмо);
				
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Очистка папок от старых писем'; en = 'Folder cleanup of old emails'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
				
			КонецЦикла;
			
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Очистка папок от старых писем'; en = 'Folder cleanup of old emails'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершение'; en = 'Completion'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Возвращает номер способа адресации письма
// Параметры:
//  Письмо - Входящее письмо - объект - письмо, для которого определяется способ адресации.
//
// Возвращаемое значение:
//  0 - не удалось определить способ адресации
//  1 - получатель письма находится в списке "Кому"
//  2 - получатель письма находится в списке "Копии"
//  3 - письмо получено в качестве слепой копии
//
Функция ПолучитьСпособАдресацииОбъекта(Письмо) Экспорт
	
	Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо.УчетнаяЗапись, "АдресЭлектроннойПочты");
	Адрес = НРег(Адрес);
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда 
		Возврат 0;
	КонецЕсли;
	
	Для Каждого Строка Из Письмо.ПолучателиПисьма Цикл
		Если НРег(Строка.Адресат.Адрес) = Адрес Тогда
			Возврат 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Строка Из Письмо.ПолучателиКопий Цикл
		Если НРег(Строка.Адресат.Адрес) = Адрес Тогда
			Возврат 2;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат 3;

КонецФункции

// Возвращает номер способа адресации письма
// Параметры:
//  Письмо - Входящее письмо - письмо, для которого определяется способ адресации.
//
// Возвращаемое значение:
//  0 - не удалось определить способ адресации
//  1 - получатель письма находится в списке "Кому"
//  2 - получатель письма находится в списке "Копии"
//  3 - письмо получено в качестве слепой копии
//
Функция ПолучитьСпособАдресации(Письмо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееПисьмоПолучателиПисьма.Адресат,
		|	1 КАК НомерСпособаАдресации
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиПисьма КАК ВходящееПисьмоПолучателиПисьма
		|ГДЕ
		|	ВходящееПисьмоПолучателиПисьма.Ссылка = &Письмо
		|	И ВходящееПисьмоПолучателиПисьма.Адресат.Адрес = &Адрес
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящееПисьмоПолучателиКопий.Адресат,
		|	2
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиКопий КАК ВходящееПисьмоПолучателиКопий
		|ГДЕ
		|	ВходящееПисьмоПолучателиКопий.Ссылка = &Письмо
		|	И ВходящееПисьмоПолучателиКопий.Адресат.Адрес = &Адрес
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящееПисьмоПолучателиОтвета.Адресат,
		|	4
		|ИЗ
		|	Документ.ВходящееПисьмо.ПолучателиОтвета КАК ВходящееПисьмоПолучателиОтвета
		|ГДЕ
		|	ВходящееПисьмоПолучателиОтвета.Ссылка = &Письмо
		|	И ВходящееПисьмоПолучателиОтвета.Адресат.Адрес = &Адрес";
			
	Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо.УчетнаяЗапись, "АдресЭлектроннойПочты");
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда 
		Возврат 0;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Письмо", Письмо);
	Запрос.Параметры.Вставить("Адрес", Адрес);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Если Выборка.Количество() = 0 Тогда 
		Возврат 3;
	Иначе 	
		Возврат Выборка.НомерСпособаАдресации;
	КонецЕсли;	

КонецФункции

// Устанавливает пометку удаления на все письма указанной папки.
//
// Параметры:
//  Папка - СправочникСсылка.ПапкиПисем - папка, письма которой нужно пометить на удаление.
//
Процедура ПометитьВсеПисьмаВПапкеНаУдаление(Папка) Экспорт
	
	// Выборка всех писем в указанной папке 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Письмо
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Папка = &Папка
		|	И НЕ ЭлектроннаяПочта.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Папка", Папка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Письмо);
			ПисьмоОбъект = Выборка.Письмо.ПолучитьОбъект();
			ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			РазблокироватьДанныеДляРедактирования(Выборка.Письмо);
			
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ПометитьВсеПисьмаВПапкеНаУдаление'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры

// Получает по адресу и представлению структуру с полями Контакт Адресат Адрес Внешний ВидМаршрутизации
Функция ПолучитьПараметрыАдресатаПоАдресуИПредставлению(Адрес, Представление) Экспорт
	
	Адресат = ПолучитьПочтовогоАдресата(Адрес, Представление);
	СтруктураАдресата = ПолучитьПредставлениеИКонтактАдресата(Адресат, Истина);
	
	ОписаниеАдресата = Новый Структура("Контакт, Адресат, Представление, Адрес, Внешний, ВидМаршрутизации",
		СтруктураАдресата.Контакт, Адресат, Представление, Адрес, 
		СтруктураАдресата.Внешний, СтруктураАдресата.ВидМаршрутизации);
		
	Возврат ОписаниеАдресата;	
	
КонецФункции	

// Переносит все письма из папки источника в папку приемник.
//
// Параметры:
//  ПапкаИсточник - СправочникСсылка.ПапкиПисем - папка, письма которой нужно перенести.
//  ПапкаПриемник - СправочникСсылка.ПапкиПисем - папка, в которую переносим письма.
//
Процедура ПеренестиВсеПисьмаВПапку(ПапкаИсточник, ПапкаПриемник) Экспорт
	
	// Выборка всех писем в указанной папке 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Письмо
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Папка = &Папка";
		
	Запрос.УстановитьПараметр("Папка", ПапкаИсточник);
	ТаблицаПисьма = Запрос.Выполнить().Выгрузить();
	Письма = ТаблицаПисьма.ВыгрузитьКолонку("Письмо");
	
	РезультатПереноса = ПоместитьПисьмаВПапку(Письма, ПапкаПриемник);
	
	Если ТипЗнч(РезультатПереноса.Ошибки) = Тип("Массив") 
		И РезультатПереноса.Ошибки.Количество() <> 0 Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет прав на изменение писем в папке ""%1"".'; en = 'Not enough permissions to modify emails in ""%1"" folder.'"), 
			Строка(ПапкаИсточник));
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Переносит все письма из папки источника в корзину.
//
// Параметры:
//  ПапкаИсточник - СправочникСсылка.ПапкиПисем - папка, письма которой нужно перенести.
//
Процедура ПеренестиВсеПисьмаВКорзину(ПапкаИсточник) Экспорт
	
	// Выборка всех писем в указанной папке 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Письмо
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Папка = &Папка";
		
	Запрос.УстановитьПараметр("Папка", ПапкаИсточник);
	ТаблицаПисьма = Запрос.Выполнить().Выгрузить();
	Письма = ТаблицаПисьма.ВыгрузитьКолонку("Письмо");
	
	РезультатПереноса = ПоместитьПисьмаВКорзину(Письма);
	
	Если РезультатПереноса = Ложь Тогда 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет прав на изменение писем в папке ""%1"".'; en = 'Not enough permissions to modify emails in ""%1"" folder.'"), 
			Строка(ПапкаИсточник));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

