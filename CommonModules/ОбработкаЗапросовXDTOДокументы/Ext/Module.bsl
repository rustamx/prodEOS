////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, документы
// Реализует функционал веб-сервиса DMService в части операций с документами
// и основными справочниками
////////////////////////////////////////////////////////////////////////////////

#Область ВходящийДокумент

// Получает заполненный объект XDTO, соответствующий входящему документу
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий документ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument или DMError
//
Функция ПолучитьВходящийДокумент(Узел, ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Документ = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ПолучитьДанныеВходящегоДокумента(Узел, Документ, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении входящего документа'; en = 'Error retrieving incoming document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Создает новый входящий документ по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument или DMError
//
Функция СоздатьВходящийДокумент(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Документ, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВходящегоДокумента(Узел, Документ, Объект, Ошибка, Ложь) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Документ.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
			РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Документ.Шаблон);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьВходящийДокумент(Узел, ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании входящего документа'; en = 'Error creating incoming document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Изменяет и записывает входящий документ по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMIncomingDocument 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument, заново заполненный, или DMError
//
Функция ИзменитьВходящийДокумент(Узел, Объект, ОбменДанными = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не ЗначениеЗаполнено(Ссылка) И ОбменДанными Тогда
			Возврат Ссылка;
		КонецЕсли;
		
		ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка);
		ЧислоПодписейПосле = Объект.signatures.Количество();
		Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
			ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВходящегоДокумента(Узел, Документ, Объект, Ошибка, ОбменДанными) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
			ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
		КонецЕсли;
		
		Если ОбменДанными Тогда
			Возврат Неопределено;
		Иначе
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
			Возврат ПолучитьВходящийДокумент(Узел, ОбъектИд);
		КонецЕсли;
		
	Исключение
		
		Если Ссылка <> Неопределено И ОбменДанными Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении входящего документа'; en = 'Error changing incoming document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Получает объект XDTO для нового входящего документа
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//   ДанныеЗаполнения - СправочникСсылка.ШаблоныВходящихДокументов или Неопределено.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument или DMError
//
Функция ПолучитьНовыйВходящийДокумент(Узел, НаборКолонок, ДанныеЗаполнения) Экспорт 
	
	Попытка
		
		Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		
		// Заполним документ по шаблону, если необходимо.
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ДанныеЗаполнения, "DMIncomingDocumentTemplate") Тогда
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ДанныеЗаполнения.objectId);
			Если ЗначениеЗаполнено(Шаблон) Тогда
				Документ.Шаблон = Шаблон;
				ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ);
			КонецЕсли;
		КонецЕсли;
	
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ПолучитьДанныеВходящегоДокумента(Узел, Документ, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового входящего документа'; en = 'Error retrieving new incoming document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.ВходящиеДокументы
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocument
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
Процедура ПолучитьДанныеВходящегоДокумента(Узел, Документ, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь)
	
	ДанныеДокумента = Новый Структура;
	
	ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ);
	
	ДанныеДокумента.Вставить("externalNumber", 	Документ.ИсходящийНомер);
	ДанныеДокумента.Вставить("externalDate", 	Документ.ИсходящаяДата);
	ДанныеДокумента.Вставить("correspondent", 	Документ.Отправитель);
	ДанныеДокумента.Вставить("signer", 			Документ.Подписал);
	ДанныеДокумента.Вставить("addressee", 		Документ.Адресат);
	ДанныеДокумента.Вставить("deliveryMethod", 	Документ.СпособПолучения);
	
	// Заполним состояние документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		СостояниеДокумента = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
	
		ИменаСостояний = Новый Структура("Согласование, Утверждение, Регистрация, Рассмотрение, Исполнение");
		
		ИменСвойствПоСостояниям = Новый Соответствие;
		ИменСвойствПоСостояниям.Вставить("Согласование", "statusApproval");
		ИменСвойствПоСостояниям.Вставить("Утверждение", "statusConfirmation");
		ИменСвойствПоСостояниям.Вставить("Регистрация", "statusRegistration");
		ИменСвойствПоСостояниям.Вставить("Рассмотрение", "statusConsideration");
		ИменСвойствПоСостояниям.Вставить("Исполнение", "statusPerformance");
		
		Для Каждого Строка Из ИменаСостояний Цикл
			ИмяСостояния = Строка.Ключ;
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
			ДанныеДокумента.Вставить(ИменСвойствПоСостояниям.Получить(ИмяСостояния), СтруктураСостояния.Состояние);
		КонецЦикла;
		
	Иначе // пустой
		
		СостояниеДокумента = Перечисления.СостоянияДокументов.НаРегистрации;
		ДанныеДокумента.Вставить("statusRegistration", Перечисления.СостоянияДокументов.НаРегистрации);
		
	КонецЕсли;
		
	ДанныеДокумента.Вставить("status", СостояниеДокумента);
	
	// Настройки.
	ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	ДанныеДокумента.Вставить("documentTypeEnabled", 
		Константы.ИспользоватьВидыВходящихДокументов.Получить());
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл 
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеДокумента Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты вида документа.
	Если ОбъектXDTO.Установлено("documentType") Тогда
		ПолучитьДанныеВидаДокумента(ОбъектXDTO.documentType, ДанныеДокумента.documentType);
	КонецЕсли;
	
	// Заполним реквизиты шаблона документа.
	Если ОбъектXDTO.Установлено("template") Тогда
		ПолучитьДанныеШаблонаВходящегоДокумента(Узел,
			ДанныеДокумента.template,
			ОбъектXDTO.template,,
			Истина);
	КонецЕсли;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Документ.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним подписи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда 
			МассивПодписей = ЗаполнитьСписокПодписей(Документ.Ссылка);
			ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним слепок.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда 
			ОбъектXDTO.keyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним связи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда 
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Определим доступные поля.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда 
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, СостояниеДокумента);
		
		Если ДоступныеПоля <> "" Тогда 
			Для Каждого Строка Из ДоступныеПоля Цикл
				ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним ссылку на внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
			Документ.Ссылка,
			ОбъектXDTO);
	КонецЕсли;
	
	// Заполним параметры хронометража.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("chronometrationSettings")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним признак "Содержит оригиналы".
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
		ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
		
	// Заполним резолюции.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("resolutions")) <> Неопределено Тогда
		ЗаполнитьРезолюцииДокумента(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
	ОбъектXDTO.name = Строка(Документ.Ссылка);
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.ВходящиеДокументы - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocument - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВходящегоДокумента(Узел, Документ, ОбъектXDTO, Ошибка, ОбменДанными = Ложь)
	
	НачальныйРегистрационныйНомер = Документ.РегистрационныйНомер;
	НачальнаяДатаРегистрации = Документ.ДатаРегистрации;
	
	Блокировать = ЗначениеЗаполнено(Документ.Ссылка);
	Если Блокировать Тогда 
		Документ.Заблокировать();
	КонецЕсли;
	ЗаполнитьДанныеВходящегоДокумента(Узел, Документ, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи входящего документа'; en = 'Error saving incoming document'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	// изменение полей по состоянию
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		ТекущееСостояние = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, ТекущееСостояние);
		
		Если ДоступныеПоля <> "" Тогда 
		
			ТекущиеДанные = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
			ПолучитьДанныеВходящегоДокумента(Узел, Документ.Ссылка.ПолучитьОбъект(), ТекущиеДанные);
			
			Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
				Если Свойство.Имя = "status" Тогда // свойства проверяются только в разрезе их типов
					Продолжить;
				КонецЕсли;
				Если ОбъектXDTO.Установлено(Свойство) И Свойство.НижняяГраница = 0 И Свойство.ВерхняяГраница = 1 И Не ДоступныеПоля.Свойство(Свойство.Имя) Тогда 
					НовоеЗначениеСвойства = ОбъектXDTO.Получить(Свойство);
					ТекущееЗначениеСвойства = ТекущиеДанные.Получить(Свойство);
					
					Если ТипЗнч(НовоеЗначениеСвойства) = Тип("ОбъектXDTO") Тогда 
						Если ТекущееЗначениеСвойства = Неопределено Тогда 
							ТекущееЗначениеСвойства = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
							ТекущееЗначениеСвойства.name = "";
							ТекущееЗначениеСвойства.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
							ТекущееЗначениеСвойства.objectId.id = "";
							ТекущееЗначениеСвойства.objectId.type = "";
						КонецЕсли;
						
						Если НовоеЗначениеСвойства.objectId.id   <> ТекущееЗначениеСвойства.objectId.id 
						 Или НовоеЗначениеСвойства.objectId.type <> ТекущееЗначениеСвойства.objectId.type Тогда 
							Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
							Ошибка.subject = НСтр("ru = 'Ошибка при записи входящего документа'; en = 'Error saving incoming document'");
							Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
								НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'; en = 'Property ""%1"" cannot be changed in state ""%2""'"), Свойство.Имя, ТекущееСостояние);
							Возврат Ложь;
						КонецЕсли;
					Иначе	
						Если Не ЗначениеЗаполнено(НовоеЗначениеСвойства) И Не ЗначениеЗаполнено(ТекущееЗначениеСвойства) Тогда 
							Продолжить;
						КонецЕсли;
						
						Если НовоеЗначениеСвойства <> ТекущееЗначениеСвойства Тогда 
							Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
							Ошибка.subject = НСтр("ru = 'Ошибка при записи входящего документа'; en = 'Error saving incoming document'");
							Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
								НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'; en = 'Property ""%1"" cannot be changed in state ""%2""'"), Свойство.Имя, ТекущееСостояние);
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка)
		И ЗначениеЗаполнено(Документ.Шаблон);
	Если ЗаполнятьПоШаблону Тогда
		Документ.НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон, "НоменклатураДел");
	КонецЕсли;
	
	Документ.Записать();
	
	// Заполним рабочую группу.
	Если ЗаполнятьПоШаблону Тогда
		ЗаписатьРабочуюГруппуСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	// состояние
	ЗаполнитьСостоянияДокумента(Узел, Документ, ОбъектXDTO);
		
	// регистрация
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда 
		СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка, 
			ТекущаяДата(), 
			СостояниеДокумента, 
			ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	Попытка // в отсутствие подходящего нумератора будет выброшено исключение
		Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
	Исключение
		Нумератор = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		// изменен автоматический номер
		Если Документ.РегистрационныйНомер <> НачальныйРегистрационныйНомер Тогда 
			Документ.ЧисловойНомер = -1;
			Документ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменДанными Тогда
		СписокВнешнихОбъектов = ОбработкаЗапросовXDTO.ПолучитьСписокВнешнихОбъектов(Узел, Документ.Ссылка);
		Если СписокВнешнихОбъектов.Количество() <= 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если Блокировать Тогда 
		Документ.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ДокументОбъект - СправочникОбъект.ВходящиеДокументы - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocument - источник данных заполнения
//
Процедура ЗаполнитьДанныеВходящегоДокумента(Узел, ДокументОбъект, ОбъектXDTO)
	
	ЗаполнитьОбщиеДанныеДокумента(Узел, ДокументОбъект, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ИсходящийНомер, 		 ОбъектXDTO, "externalNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ИсходящаяДата,  		 ОбъектXDTO, "externalDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Отправитель, 		 ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Подписал, 			 ОбъектXDTO, "signer");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Адресат, 			 ОбъектXDTO, "addressee");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.СпособПолучения, 	 ОбъектXDTO, "deliveryMethod");
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Узел, ДокументОбъект, ОбъектXDTO);	
	ЗаписатьДанныеФайлов(Узел, ДокументОбъект, ОбъектXDTO.files);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблонВходящегоДокумента

// Получает заполненный объект XDTO, соответствующий шаблону входящего документа.
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий шаблон.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocumentTemplate или DMError.
//
Функция ПолучитьШаблонВходящегоДокумента(Узел, ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Шаблон = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocumentTemplate");
		ПолучитьДанныеШаблонаВходящегоДокумента(Узел, Шаблон, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении шаблона входящего документа'; en = 'Error retrieving incoming document template'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Шаблон - СправочникОбъект.ШаблоныВходящихДокументов, СправочникСсылка.ШаблоныВходящихДокументов.
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocumentTemplate.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//   ИгнорируяПрава - Булево - Истина, если данные следует получить в привилегированном режиме.
//
Процедура ПолучитьДанныеШаблонаВходящегоДокумента(Узел, Шаблон, ОбъектXDTO,
	НаборКолонок = Неопределено, ИгнорируяПрава = Ложь)
	
	Если ИгнорируяПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныВходящихДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, ШаблонОбъект);
	
	ДанныеШаблона.Вставить("correspondent", 	ШаблонОбъект.Отправитель);
	ДанныеШаблона.Вставить("signer", 			ШаблонОбъект.Подписал);
	ДанныеШаблона.Вставить("addressee", 		ШаблонОбъект.Адресат);
	ДанныеШаблона.Вставить("deliveryMethod", 	ШаблонОбъект.СпособПолучения);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл 
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеШаблона Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ШаблонОбъект.Ссылка);
	ОбъектXDTO.name = ШаблонОбъект.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящийДокумент

// Получает заполненный объект XDTO, соответствующий исходящему документу
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий документ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument или DMError
//
Функция ПолучитьИсходящийДокумент(Узел, ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Документ = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ПолучитьДанныеИсходящегоДокумента(Узел, Документ, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении исходящего документа'; en = 'Error retrieving outgoing document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Создает новый исходящий документ по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument или DMError
//
Функция СоздатьИсходящийДокумент(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Документ = Справочники.ИсходящиеДокументы.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Документ, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеИсходящегоДокумента(Узел, Документ, Объект, Ошибка, Ложь) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Документ.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
			РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Документ.Шаблон);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьИсходящийДокумент(Узел, ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении исходящего документа'; en = 'Error changing outgoing document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Изменяет и записывает исходящий документ по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMOutgoingDocument 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument, заново заполненный, или DMError
//
Функция ИзменитьИсходящийДокумент(Узел, Объект, ОбменДанными = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не ЗначениеЗаполнено(Ссылка) И ОбменДанными Тогда
			Возврат Ссылка;
		КонецЕсли;
		
		ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка);
		ЧислоПодписейПосле = Объект.signatures.Количество();
		Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
			ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеИсходящегоДокумента(Узел, Документ, Объект, Ошибка, ОбменДанными) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
			ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
		КонецЕсли;
		
		Если ОбменДанными Тогда
			Возврат Неопределено;
		Иначе
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
			Возврат ПолучитьИсходящийДокумент(Узел, ОбъектИд);
		КонецЕсли;
		
	Исключение
		
		Если Ссылка <> Неопределено И ОбменДанными Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении исходящего документа'; en = 'Error changing outgoing document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции	

// Получает объект XDTO для нового исходящего документа
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//   ДанныеЗаполнения - СправочникСсылка.ШаблоныИсходящихДокументов или Неопределено.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument или DMError
//
Функция ПолучитьНовыйИсходящийДокумент(Узел, НаборКолонок, ДанныеЗаполнения) Экспорт 
	
	Попытка
		
		Документ = Справочники.ИсходящиеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		
		// Заполним документ по шаблону, если необходимо.
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ДанныеЗаполнения, "DMOutgoingDocumentTemplate") Тогда
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ДанныеЗаполнения.objectId);
			Если ЗначениеЗаполнено(Шаблон) Тогда
				Документ.Шаблон = Шаблон;
				ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ);
			КонецЕсли;
		КонецЕсли;
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ПолучитьДанныеИсходящегоДокумента(Узел, Документ, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового исходящего документа'; en = 'Error retrieving new outgoing document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.ИсходящиеДокументы
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocument
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
Процедура ПолучитьДанныеИсходящегоДокумента(Узел, Документ, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь)
	
	ДанныеДокумента = Новый Структура;
	
	ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ);
	
	ДанныеДокумента.Вставить("signer", 			Документ.Подписал);
	ДанныеДокумента.Вставить("author", 			Документ.Подготовил);
	
	// Заполним получателя данными первой строки табличной части.
	Если Документ.Получатели.Количество() > 0 Тогда 
		ПерваяСтрока = Документ.Получатели[0];
		ДанныеДокумента.Вставить("externalNumber", 	ПерваяСтрока.ВходящийНомер);
		ДанныеДокумента.Вставить("externalDate", 	ПерваяСтрока.ВходящаяДата);
		ДанныеДокумента.Вставить("correspondent", 	ПерваяСтрока.Получатель);
		ДанныеДокумента.Вставить("addressee", 		ПерваяСтрока.Адресат);
		ДанныеДокумента.Вставить("deliveryMethod", 	ПерваяСтрока.СпособОтправки);
		ДанныеДокумента.Вставить("sent", 			ПерваяСтрока.Отправлен);
		ДанныеДокумента.Вставить("sendDate", 		ПерваяСтрока.ДатаОтправки);
	КонецЕсли;
	
	// Заполним состояние.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		СостояниеДокумента = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		
		ИменаСостояний = Новый Структура("Согласование, Утверждение, Регистрация, Рассмотрение, Исполнение");
		
		ИменСвойствПоСостояниям = Новый Соответствие;
		ИменСвойствПоСостояниям.Вставить("Согласование", "statusApproval");
		ИменСвойствПоСостояниям.Вставить("Утверждение", "statusConfirmation");
		ИменСвойствПоСостояниям.Вставить("Регистрация", "statusRegistration");
		ИменСвойствПоСостояниям.Вставить("Рассмотрение", "statusConsideration");
		ИменСвойствПоСостояниям.Вставить("Исполнение", "statusPerformance");
		
		Для Каждого Строка Из ИменаСостояний Цикл
			ИмяСостояния = Строка.Ключ;
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
			ДанныеДокумента.Вставить(ИменСвойствПоСостояниям.Получить(ИмяСостояния), СтруктураСостояния.Состояние);
		КонецЦикла;
		
	Иначе // пустой
		
		СостояниеДокумента = Перечисления.СостоянияДокументов.Проект;
		ДанныеДокумента.Вставить("statusRegistration", Перечисления.СостоянияДокументов.Проект);
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("status", СостояниеДокумента);
	
	// Заполним настройки вида документа.
	ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	ДанныеДокумента.Вставить("documentTypeEnabled", Константы.ИспользоватьВидыИсходящихДокументов.Получить());
	
	// Разберем набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	Для Каждого Реквизит Из ДанныеДокумента Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты вида документа.
	Если ОбъектXDTO.Установлено("documentType") Тогда
		ПолучитьДанныеВидаДокумента(ОбъектXDTO.documentType, ДанныеДокумента.documentType);
	КонецЕсли;
	
	// Заполним реквизиты шаблона документа.
	Если ОбъектXDTO.Установлено("template") Тогда
		ПолучитьДанныеШаблонаИсходящегоДокумента(Узел,
			ДанныеДокумента.template,
			ОбъектXDTO.template,,
			Истина);
	КонецЕсли;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Документ.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
		
		ФайлыШаблона = Новый ТаблицаЗначений;
		ФайлыШаблона.Колонки.Добавить("Наименование");
		ФайлыШаблона.Колонки.Добавить("ПолныйПуть");
		ФайлыШаблона.Колонки.Добавить("Расширение");
		ФайлыШаблона.Колонки.Добавить("ШаблонОснованиеДляСоздания");
		ФайлыШаблона.Колонки.Добавить("ДобавленИзШаблона");
		
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(Документ.Шаблон, ФайлыШаблона, Ложь);
		
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона);
		
	КонецЕсли;
	
	// Заполним подписи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда 
			МассивПодписей = ЗаполнитьСписокПодписей(Документ.Ссылка);
			ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним слепок документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда 
			ОбъектXDTO.keyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним связи документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда 
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним доступные и недоступные поля.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда 
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, СостояниеДокумента);
		Если ДоступныеПоля <> "" Тогда 
			Для Каждого Строка Из ДоступныеПоля Цикл
				ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним ссылку на внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
			Документ.Ссылка,
			ОбъектXDTO);
	КонецЕсли;
	
	// Заполним параметры хронометража.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("chronometrationSettings")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним признак "Содержит оригиналы".
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
		ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним визы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("visas")) <> Неопределено Тогда
		ЗаполнитьВизыДокумента(ОбъектXDTO, Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
	ОбъектXDTO.name = Строка(Документ.Ссылка);
		
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.ИсходящиеДокументы - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocument - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеИсходящегоДокумента(Узел, Документ, ОбъектXDTO, Ошибка, ОбменДанными = Ложь)
	
	НачальныйРегистрационныйНомер = Документ.РегистрационныйНомер;
	НачальнаяДатаРегистрации = Документ.ДатаРегистрации;
	
	Блокировать = ЗначениеЗаполнено(Документ.Ссылка);
	Если Блокировать Тогда 
		Документ.Заблокировать();
	КонецЕсли;
	ЗаполнитьДанныеИсходящегоДокумента(Узел, Документ, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения);
	Если Не ЗначениеЗаполнено(Документ.Получатели[0].Получатель) Тогда 
		ТекстСообщения = НСтр("ru = 'Поле ""Получатель"" не заполнено'; en = 'Field ""Recipient"" is not filled in'") + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи исходящего документа'; en = 'Error saving outgoing document'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	
	// изменение полей по состоянию
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		ТекущееСостояние = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, ТекущееСостояние);
		
		Если ДоступныеПоля <> "" Тогда 
		
			ТекущиеДанные = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
			ПолучитьДанныеИсходящегоДокумента(Узел, Документ.Ссылка.ПолучитьОбъект(), ТекущиеДанные);
			
			Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
				Если Свойство.Имя = "status" Тогда // свойства проверяются только в разрезе их типов
					Продолжить;
				КонецЕсли;
				Если ОбъектXDTO.Установлено(Свойство) И Свойство.НижняяГраница = 0 И Свойство.ВерхняяГраница = 1 И Не ДоступныеПоля.Свойство(Свойство.Имя) Тогда 
					НовоеЗначениеСвойства = ОбъектXDTO.Получить(Свойство);
					ТекущееЗначениеСвойства = ТекущиеДанные.Получить(Свойство);
					
					Если ТипЗнч(НовоеЗначениеСвойства) = Тип("ОбъектXDTO") Тогда 
						Если ТекущееЗначениеСвойства = Неопределено Тогда 
							ТекущееЗначениеСвойства = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
							ТекущееЗначениеСвойства.name = "";
							ТекущееЗначениеСвойства.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
							ТекущееЗначениеСвойства.objectId.id = "";
							ТекущееЗначениеСвойства.objectId.type = "";
						КонецЕсли;
						
						Если НовоеЗначениеСвойства.objectId.id   <> ТекущееЗначениеСвойства.objectId.id 
						 Или НовоеЗначениеСвойства.objectId.type <> ТекущееЗначениеСвойства.objectId.type Тогда 
							Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
							Ошибка.subject = НСтр("ru = 'Ошибка при записи исходящего документа'; en = 'Error saving outgoing document'");
							Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
								НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'; en = 'Property ""%1"" cannot be changed in state ""%2""'"), Свойство.Имя, ТекущееСостояние);
							Возврат Ложь;
						КонецЕсли;
					Иначе	
						Если Не ЗначениеЗаполнено(НовоеЗначениеСвойства) И Не ЗначениеЗаполнено(ТекущееЗначениеСвойства) Тогда 
							Продолжить;
						КонецЕсли;
						
						Если НовоеЗначениеСвойства <> ТекущееЗначениеСвойства Тогда 
							Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
							Ошибка.subject = НСтр("ru = 'Ошибка при записи исходящего документа'; en = 'Error saving outgoing document'");
							Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
								НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'; en = 'Property ""%1"" cannot be changed in state ""%2""'"), Свойство.Имя, ТекущееСостояние);
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка)
		И ЗначениеЗаполнено(Документ.Шаблон);
	Если ЗаполнятьПоШаблону Тогда
		Документ.НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон, "НоменклатураДел");
	КонецЕсли;
	
	Документ.Записать();
	
	// Заполним визы и рабочую группу.
	Если ЗаполнятьПоШаблону Тогда
		ЗаписатьВизыСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
		ЗаписатьРабочуюГруппуСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	// состояние
	ЗаполнитьСостоянияДокумента(Узел, Документ, ОбъектXDTO);
		
	// регистрация
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда 
		СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка, 
			ТекущаяДата(), 
			СостояниеДокумента, 
			ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	Попытка // в отсутствие подходящего нумератора будет выброшено исключение
		Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
	Исключение
		Нумератор = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		// изменен автоматический номер
		Если Документ.РегистрационныйНомер <> НачальныйРегистрационныйНомер Тогда 
			Документ.ЧисловойНомер = -1;
			Документ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменДанными Тогда
		СписокВнешнихОбъектов = ОбработкаЗапросовXDTO.ПолучитьСписокВнешнихОбъектов(Узел, Документ.Ссылка);
		Если СписокВнешнихОбъектов.Количество() <= 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если Блокировать Тогда 
		Документ.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ДокументОбъект - СправочникОбъект.ИсходящиеДокументы - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocument - источник данных заполнения
//
Процедура ЗаполнитьДанныеИсходящегоДокумента(Узел, ДокументОбъект, ОбъектXDTO)
	
	ЗаполнитьОбщиеДанныеДокумента(Узел, ДокументОбъект, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Подписал, 		ОбъектXDTO, "signer");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Подготовил, 	ОбъектXDTO, "author");
	
	Если ДокументОбъект.Получатели.Количество() = 0 Тогда 
		ДокументОбъект.Получатели.Добавить();
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].ВходящийНомер,   ОбъектXDTO, "externalNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].ВходящаяДата,    ОбъектXDTO, "externalDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].Получатель,  	ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].Адресат, 		ОбъектXDTO, "addressee");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].Отправлен, 		ОбъектXDTO, "sent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].ДатаОтправки,	ОбъектXDTO, "sendDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Получатели[0].СпособОтправки,  ОбъектXDTO, "deliveryMethod");
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Узел, ДокументОбъект, ОбъектXDTO);
	ЗаписатьДанныеФайлов(Узел, ДокументОбъект, ОбъектXDTO.files);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблонИсходящегоДокумента

// Получает заполненный объект XDTO, соответствующий шаблону исходящего документа.
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий шаблон.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocumentTemplate или DMError.
//
Функция ПолучитьШаблонИсходящегоДокумента(Узел, ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Шаблон = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocumentTemplate");
		ПолучитьДанныеШаблонаИсходящегоДокумента(Узел, Шаблон, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении шаблона исходящего документа'; en = 'Error retrieving outgoing document template'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Шаблон - СправочникОбъект.ШаблоныИсходящихДокументов, СправочникСсылка.ШаблоныИсходящихДокументов.
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocumentTemplate.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//   ИгнорируяПрава - Булево - Истина, если данные следует получить в привилегированном режиме.
//
Процедура ПолучитьДанныеШаблонаИсходящегоДокумента(Узел, Шаблон, ОбъектXDTO,
	НаборКолонок = Неопределено, ИгнорируяПрава = Ложь)
	
	Если ИгнорируяПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, ШаблонОбъект);
	
	ДанныеШаблона.Вставить("signer", ШаблонОбъект.Подписал);
	
	// Данные табличной части "Получатели".
	Если ШаблонОбъект.Получатели.Количество() > 0 Тогда 
		ПерваяСтрока = ШаблонОбъект.Получатели[0];
		ДанныеШаблона.Вставить("correspondent", 	ПерваяСтрока.Получатель);
		ДанныеШаблона.Вставить("addressee", 		ПерваяСтрока.Адресат);
		ДанныеШаблона.Вставить("deliveryMethod", 	ПерваяСтрока.СпособОтправки);
	КонецЕсли;
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеШаблона Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ШаблонОбъект.Ссылка);
	ОбъектXDTO.name = ШаблонОбъект.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область ВнутреннийДокумент

// Получает заполненный объект XDTO, соответствующий внутреннему документу
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий документ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument или DMError
//
Функция ПолучитьВнутреннийДокумент(Узел, ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Документ = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		ПолучитьДанныеВнутреннегоДокумента(Узел, Документ, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении внутреннего документа'; en = 'Error retrieving internal document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Создает новый внутренний документ по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument или DMError
//
Функция СоздатьВнутреннийДокумент(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Документ = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Документ, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВнутреннегоДокумента(Узел, Документ, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Документ.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
			РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Документ.Шаблон);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьВнутреннийДокумент(Узел, ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании внутреннего документа'; en = 'Error creating internal document type'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Изменяет и записывает внутренний документ по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMInternalDocument 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument, заново заполненный, или DMError
//
Функция ИзменитьВнутреннийДокумент(Узел, Объект, ОбменДанными = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не ЗначениеЗаполнено(Ссылка) И ОбменДанными Тогда
			Возврат Ссылка;
		КонецЕсли;
		
		ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка);
		ЧислоПодписейПосле = Объект.signatures.Количество();
		Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
			ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВнутреннегоДокумента(Узел, Документ, Объект, Ошибка, ОбменДанными) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
			ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
		КонецЕсли;
		
		Если ОбменДанными Тогда
			Возврат Неопределено;
		Иначе
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
			Возврат ПолучитьВнутреннийДокумент(Узел, ОбъектИд);
		КонецЕсли;
		
	Исключение
		
		Если Ссылка <> Неопределено И ОбменДанными Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении внутреннего документа'; en = 'Error changing internal document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции	

// Получает объект XDTO для нового внутреннего документа
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//   ДанныеЗаполнения - СправочникСсылка.ШаблоныВнутреннихДокументов или Неопределено.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument или DMError
//
Функция ПолучитьНовыйВнутреннийДокумент(Узел, НаборКолонок, ДанныеЗаполнения) Экспорт 
	
	Попытка
		
		Документ = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		
		// Заполним документ по шаблону, если необходимо.
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ДанныеЗаполнения, "DMInternalDocumentTemplate") Тогда
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ДанныеЗаполнения.objectId);
			Если ЗначениеЗаполнено(Шаблон) Тогда
				Документ.Шаблон = Шаблон;
				ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ);
			КонецЕсли;
		КонецЕсли;
	
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		ПолучитьДанныеВнутреннегоДокумента(Узел, Документ, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового внутреннего документа'; en = 'Error retrieving new internal document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.ВнутренниеДокументы
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocument
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
Процедура ПолучитьДанныеВнутреннегоДокумента(Узел, Документ, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт
	
	ДанныеДокумента = Новый Структура;
	
	ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ);
	
	ДанныеДокумента.Вставить("folder", 			Документ.Папка);
	ДанныеДокумента.Вставить("beginDate", 		Документ.ДатаНачалаДействия);
	ДанныеДокумента.Вставить("endDate", 		Документ.ДатаОкончанияДействия);
	ДанныеДокумента.Вставить("openEnded", 		Документ.Бессрочный);
	ДанныеДокумента.Вставить("correspondent", 	Документ.Контрагент);
	ДанныеДокумента.Вставить("contactPerson", 	Документ.КонтактноеЛицо);
	ДанныеДокумента.Вставить("signer", 			Документ.Утвердил);
	ДанныеДокумента.Вставить("author", 			Документ.Подготовил);
	ДанныеДокумента.Вставить("prolongationProcedure", Документ.ПорядокПродления);
	
	// Заполним состояние документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		
		СостояниеДокумента = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		
		ИменаСостояний = Новый Структура("Согласование, Утверждение, Регистрация, Рассмотрение, Исполнение");
		
		ИменСвойствПоСостояниям = Новый Соответствие;
		ИменСвойствПоСостояниям.Вставить("Согласование", "statusApproval");
		ИменСвойствПоСостояниям.Вставить("Утверждение", "statusConfirmation");
		ИменСвойствПоСостояниям.Вставить("Регистрация", "statusRegistration");
		ИменСвойствПоСостояниям.Вставить("Рассмотрение", "statusConsideration");
		ИменСвойствПоСостояниям.Вставить("Исполнение", "statusPerformance");
		
		Для Каждого Строка Из ИменаСостояний Цикл
			ИмяСостояния = Строка.Ключ;
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
			ДанныеДокумента.Вставить(ИменСвойствПоСостояниям.Получить(ИмяСостояния), СтруктураСостояния.Состояние);
		КонецЦикла;
		
	Иначе // пустой
		
		СостояниеДокумента = Перечисления.СостоянияДокументов.Проект;
		ДанныеДокумента.Вставить("statusRegistration", Перечисления.СостоянияДокументов.Проект);
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("status", СостояниеДокумента);
	
	// Настройки.
	ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	ДанныеДокумента.Вставить("documentTypeEnabled", Константы.ИспользоватьВидыВнутреннихДокументов.Получить());
	ДанныеДокумента.Вставить("filesEnabled", Истина);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты документа.
	Для Каждого Реквизит Из ДанныеДокумента Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты вида документа.
	Если ОбъектXDTO.Установлено("documentType") Тогда
		
		ПолучитьДанныеВидаДокумента(ОбъектXDTO.documentType, ДанныеДокумента.documentType);
		
		// Заполним суммы по статьям ДДС.
		Если ЗначениеЗаполнено(Документ.Ссылка)
			И ОбъектXDTO.documentType.Установлено("cashFlowDetailsEnabled")
			И ОбъектXDTO.documentType.cashFlowDetailsEnabled = Истина
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("cashFlowRows")) <> Неопределено) Тогда
			
			ОбъектXDTO.cashFlowRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowRows");
			СтатьиДвиженияДенежныхСредств = Новый ТаблицаЗначений;
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("Сумма");
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СуммаНДС");
			
			Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
				
				РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
					Документ.Ссылка, СтатьиДвиженияДенежныхСредств);
					
			ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
				
				ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(
					Документ.Шаблон, СтатьиДвиженияДенежныхСредств);
					
			КонецЕсли;
				
			Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
				
				СтатьяXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
				СтатьяXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Строка.СтатьяДвиженияДенежныхСредств);
				СтатьяXDTO.name = Строка(Строка.СтатьяДвиженияДенежныхСредств);
				
				СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowRow");
				СтрокаXDTO.item = СтатьяXDTO;
				СтрокаXDTO.total = Строка.Сумма;
				СтрокаXDTO.VAT = Строка.СуммаНДС;
				
				ОбъектXDTO.cashFlowRows.rows.Добавить(СтрокаXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
			
		// Заполним товары и услуги.
		Если ЗначениеЗаполнено(Документ.Ссылка)
			И ОбъектXDTO.documentType.Установлено("productRowsEnabled")
			И ОбъектXDTO.documentType.productRowsEnabled = Истина
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("productRows")) <> Неопределено) Тогда
			
			ОбъектXDTO.productRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProductRows");
			
			Для Каждого Строка из Документ.Товары Цикл
				
				СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProductRow");
				
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "product", Строка.Номенклатура);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "quantity", Строка.Количество);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "measurementUnit", Строка.ЕдиницаИзмерения);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "price", Строка.Цена);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "VATRate", Строка.СтавкаНДС);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "VAT", Строка.СуммаНДС);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "total", Строка.Сумма);

				ОбъектXDTO.productRows.rows.Добавить(СтрокаXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним реквизиты вида организации.
	Если ОбъектXDTO.Установлено("organization") Тогда
		ПолучитьДанныеОрганизации(ДанныеДокумента.organization, ОбъектXDTO.organization);
	КонецЕсли;
		
	// Заполним реквизиты шаблона документа.
	Если ОбъектXDTO.Установлено("template") Тогда
		ПолучитьДанныеШаблонаВнутреннегоДокумента(Узел,
			ДанныеДокумента.template,
			ОбъектXDTO.template,,
			Истина);
	КонецЕсли;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Документ.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
		
		ФайлыШаблона = Новый ТаблицаЗначений;
		ФайлыШаблона.Колонки.Добавить("Наименование");
		ФайлыШаблона.Колонки.Добавить("ПолныйПуть");
		ФайлыШаблона.Колонки.Добавить("Расширение");
		ФайлыШаблона.Колонки.Добавить("ШаблонОснованиеДляСоздания");
		ФайлыШаблона.Колонки.Добавить("ДобавленИзШаблона");
		
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(Документ.Шаблон, ФайлыШаблона, Ложь);
		
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона);
		
	КонецЕсли;
	
	// Заполним подписи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда 
			МассивПодписей = ЗаполнитьСписокПодписей(Документ.Ссылка);
			ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним слепок документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда 
			ОбъектXDTO.KeyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним связи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда 
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.Relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним доступные и недоступные поля.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда 
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, СостояниеДокумента);
		Если ДоступныеПоля <> "" Тогда 
			Для Каждого Строка Из ДоступныеПоля Цикл
				ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним ссылку на внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
			Документ.Ссылка,
			ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
	ОбъектXDTO.name = Строка(Документ.Ссылка);
	
	// Заполним параметры хронометража.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("chronometrationSettings")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним признак "Содержит оригиналы".
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
		ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним визы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("visas")) <> Неопределено Тогда
		ЗаполнитьВизыДокумента(ОбъектXDTO, Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	// Заполним резолюции.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("resolutions")) <> Неопределено Тогда
		ЗаполнитьРезолюцииДокумента(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.ВнутренниеДокументы - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocument - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВнутреннегоДокумента(Узел, Документ, ОбъектXDTO, Ошибка, ОбменДанными = Ложь)
	
	НачальныйРегистрационныйНомер = Документ.РегистрационныйНомер;
	НачальнаяДатаРегистрации = Документ.ДатаРегистрации;
	
	Блокировать = ЗначениеЗаполнено(Документ.Ссылка);
	Если Блокировать Тогда 
		Документ.Заблокировать();
	КонецЕсли;
	ЗаполнитьДанныеВнутреннегоДокумента(Узел, Документ, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи внутреннего документа'; en = 'Error saving internal document'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	// изменение полей по состоянию
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		ТекущееСостояние = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, ТекущееСостояние);
		
		Если ДоступныеПоля <> "" Тогда 
		
			ТекущиеДанные = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ПолучитьДанныеВнутреннегоДокумента(Узел, Документ.Ссылка.ПолучитьОбъект(), ТекущиеДанные);
			
			Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
				Если Свойство.Имя = "status" Тогда // свойства проверяются только в разрезе их типов
					Продолжить;
				КонецЕсли;
				Если ОбъектXDTO.Установлено(Свойство) И Свойство.НижняяГраница = 0 И Свойство.ВерхняяГраница = 1 И Не ДоступныеПоля.Свойство(Свойство.Имя) Тогда 
					НовоеЗначениеСвойства = ОбъектXDTO.Получить(Свойство);
					ТекущееЗначениеСвойства = ТекущиеДанные.Получить(Свойство);
					
					Если ТипЗнч(НовоеЗначениеСвойства) = Тип("ОбъектXDTO") Тогда 
						Если ТекущееЗначениеСвойства = Неопределено Тогда 
							ТекущееЗначениеСвойства = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
							ТекущееЗначениеСвойства.name = "";
							ТекущееЗначениеСвойства.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
							ТекущееЗначениеСвойства.objectId.id = "";
							ТекущееЗначениеСвойства.objectId.type = "";
						КонецЕсли;
						
						Если НовоеЗначениеСвойства.objectId.id   <> ТекущееЗначениеСвойства.objectId.id 
						 Или НовоеЗначениеСвойства.objectId.type <> ТекущееЗначениеСвойства.objectId.type Тогда 
							Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
							Ошибка.subject = НСтр("ru = 'Ошибка при записи внутреннего документа'; en = 'Error saving internal document'");
							Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
								НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'; en = 'Property ""%1"" cannot be changed in state ""%2""'"), Свойство.Имя, ТекущееСостояние);
							Возврат Ложь;
						КонецЕсли;
					Иначе	
						Если Не ЗначениеЗаполнено(НовоеЗначениеСвойства) И Не ЗначениеЗаполнено(ТекущееЗначениеСвойства) Тогда 
							Продолжить;
						КонецЕсли;
						
						Если НовоеЗначениеСвойства <> ТекущееЗначениеСвойства Тогда 
							Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
							Ошибка.subject = НСтр("ru = 'Ошибка при записи внутреннего документа'; en = 'Error saving internal document'");
							Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
								НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'; en = 'Property ""%1"" cannot be changed in state ""%2""'"), Свойство.Имя, ТекущееСостояние);
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка)
		И ЗначениеЗаполнено(Документ.Шаблон);
	Если ЗаполнятьПоШаблону Тогда
		Документ.НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон, "НоменклатураДел");
	КонецЕсли;
	
	Документ.Записать();
	
	// Статьи ДДС.
	ЗаписатьСтатьиДДСДокумента(Узел, Документ, ОбъектXDTO);
	
	// Заполним визы и рабочую группу.
	Если ЗаполнятьПоШаблону Тогда
		ЗаписатьВизыСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
		ЗаписатьРабочуюГруппуСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	// состояние
	ЗаполнитьСостоянияДокумента(Узел, Документ, ОбъектXDTO);
	
	// регистрация
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда 
		СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка, 
			ТекущаяДата(), 
			СостояниеДокумента, 
			ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	Попытка // в отсутствие подходящего нумератора будет выброшено исключение
		Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
	Исключение
		Нумератор = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		// изменен автоматический номер
		Если Документ.РегистрационныйНомер <> НачальныйРегистрационныйНомер Тогда 
			Документ.ЧисловойНомер = -1;
			Документ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменДанными Тогда
		СписокВнешнихОбъектов = ОбработкаЗапросовXDTO.ПолучитьСписокВнешнихОбъектов(Узел, Документ.Ссылка);
		Если СписокВнешнихОбъектов.Количество() <= 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если Блокировать Тогда 
		Документ.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ДокументОбъект - СправочникОбъект.ВнутренниеДокументы - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocument - источник данных заполнения
//
Процедура ЗаполнитьДанныеВнутреннегоДокумента(Узел, ДокументОбъект, ОбъектXDTO)
	
	ЗаполнитьОбщиеДанныеДокумента(Узел, ДокументОбъект, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Папка, 		 	 	ОбъектXDTO, "folder");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ДатаНачалаДействия, 	ОбъектXDTO, "beginDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ДатаОкончанияДействия, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Бессрочный,  			ОбъектXDTO, "openEnded");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ПорядокПродления, 		ОбъектXDTO, "prolongationProcedure");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Подготовил, 			ОбъектXDTO, "author");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Контрагент, 		ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.КонтактноеЛицо, 		ОбъектXDTO, "contactPerson");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Утвердил, 				ОбъектXDTO, "signer");
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Если ДокументОбъект.Стороны.Количество() = 0 Тогда
			СторонаОрганизация = ДокументОбъект.Стороны.Добавить();
		ИначеЕсли ТипЗнч(ДокументОбъект.Стороны[0].Сторона) <> Тип("СправочникСсылка.Организации") Тогда
			СторонаОрганизация = ДокументОбъект.Стороны.Вставить(0);
		Иначе
			Для Каждого Сторона Из ДокументОбъект.Стороны Цикл
				Если ТипЗнч(Сторона.Сторона) = Тип("СправочникСсылка.Организации") Тогда
					СторонаОрганизация = Сторона;
					Если Сторона.Сторона = ДокументОбъект.Организация Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СторонаОрганизация.Сторона = ДокументОбъект.Организация;
		СторонаОрганизация.КонтактноеЛицо = ДокументОбъект.Утвердил;
		СторонаОрганизация.Подписал = ДокументОбъект.Утвердил;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		Если ДокументОбъект.Стороны.Количество() = 0 Тогда
			СторонаОрганизация = ДокументОбъект.Стороны.Добавить();
			СторонаКонтрагент = ДокументОбъект.Стороны.Добавить();
		Иначе
			СторонаКонтрагент = Неопределено;
			Для Каждого Сторона Из ДокументОбъект.Стороны Цикл
				Если ТипЗнч(Сторона.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
					СторонаКонтрагент = Сторона;
					Если Сторона.Сторона = ДокументОбъект.Контрагент Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если СторонаКонтрагент = Неопределено Тогда
				СторонаКонтрагент = ДокументОбъект.Стороны.Добавить();
			КонецЕсли;
		КонецЕсли;
		СторонаКонтрагент.Сторона = ДокументОбъект.Контрагент;
		СторонаКонтрагент.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
		СторонаКонтрагент.Подписал = ДокументОбъект.КонтактноеЛицо;
	КонецЕсли;
	
	// Запись контрагента и контактного лица в табличную часть Контрагенты
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		Если ДокументОбъект.Контрагенты.Количество() <= 1 Тогда
			ДокументОбъект.Контрагенты.Очистить();
			СтрокаКонтрагента = ДокументОбъект.Контрагенты.Добавить();
		Иначе
			СтрокаКонтрагента = ДокументОбъект.Контрагенты[0];
		КонецЕсли;
		СтрокаКонтрагента.Контрагент = ДокументОбъект.Контрагент;
		СтрокаКонтрагента.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("productRows") <> Неопределено
		И ОбъектXDTO.Установлено("productRows") Тогда
		ДокументОбъект.Товары.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.productRows.rows Цикл
			Строка = ДокументОбъект.Товары.Добавить();
			Строка.Номер = Строка.НомерСтроки;
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.Номенклатура, СтрокаXDTO, "product");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.Количество, СтрокаXDTO, "quantity");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.ЕдиницаИзмерения, СтрокаXDTO, "measurementUnit");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.Цена, СтрокаXDTO, "price");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.СтавкаНДС, СтрокаXDTO, "VATRate");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.СуммаНДС, СтрокаXDTO, "VAT");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Строка.Сумма, СтрокаXDTO, "total");
			// Заполнение по умолчанию.
			Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения)
				И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Строка.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "ЕдиницаИзмерения");
			КонецЕсли;
			Если Строка.Цена = 0
				И Строка.Сумма <> 0 
				И Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			Если Строка.Сумма = 0
				И Строка.Цена <> 0 
				И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Цена * Строка.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Узел, ДокументОбъект, ОбъектXDTO);
	ЗаписатьДанныеФайлов(Узел, ДокументОбъект, ОбъектXDTO.files);
	
КонецПроцедуры

// Получает массив вложенных папок
//
// Параметры:
//   ИдентификаторКорневойПапки - Строка - идентификатор папки-родителя
//
// Возвращаемое значение:
//   Массив - массив структур, описывающих вложенные папки следующего уровня:
//     * УникальныйИдентификатор - Строка - идентификатор вложенной папки
//     * Наименование - Строка - наименование вложенной папки
//
Функция ПолучитьСписокПапок(ИдентификаторКорневойПапки) Экспорт
	
	СсылкаПапки = Справочники.ПапкиВнутреннихДокументов.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИдентификаторКорневойПапки) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторКорневойПапки);
		СсылкаПапки = Справочники.ПапкиВнутреннихДокументов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиВнутреннихДокументов.Ссылка КАК Ссылка,
		|	ПапкиВнутреннихДокументов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПапкиВнутреннихДокументов КАК ПапкиВнутреннихДокументов
		|ГДЕ
		|	ПапкиВнутреннихДокументов.Родитель = &Ссылка
		|	И ПапкиВнутреннихДокументов.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	МассивПапок = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПапки = Новый Структура("УникальныйИдентификатор, Наименование", 
			Выборка.Ссылка.УникальныйИдентификатор(), Выборка.Наименование);
		МассивПапок.Добавить(СтруктураПапки);
	КонецЦикла;
	
	Возврат МассивПапок;
	
КонецФункции

#КонецОбласти

#Область ШаблонВнутреннегоДокумента

// Получает заполненный объект XDTO, соответствующий шаблону внутреннего документа.
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий шаблон.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentTemplate или DMError.
//
Функция ПолучитьШаблонВнутреннегоДокумента(Узел, ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Шаблон = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocumentTemplate");
		ПолучитьДанныеШаблонаВнутреннегоДокумента(Узел, Шаблон, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении шаблона внутреннего документа'; en = 'Error retrieving internal document template'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Шаблон - СправочникОбъект.ШаблоныВнутреннихДокументов, СправочникСсылка.ШаблоныВнутреннихДокументов.
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentTemplate.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//   ИгнорируяПрава - Булево - Истина, если данные следует получить в привилегированном режиме.
//
Процедура ПолучитьДанныеШаблонаВнутреннегоДокумента(Узел, Шаблон, ОбъектXDTO,
	НаборКолонок = Неопределено, ИгнорируяПрава = Ложь)
	
	Если ИгнорируяПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, ШаблонОбъект);
	
	ДанныеШаблона.Вставить("folder", 			ШаблонОбъект.Папка);
	ДанныеШаблона.Вставить("correspondent", 	ШаблонОбъект.Контрагент);
	ДанныеШаблона.Вставить("contactPerson", 	ШаблонОбъект.КонтактноеЛицо);
	ДанныеШаблона.Вставить("cashFlowItem", 		ШаблонОбъект.СтатьяДвиженияДенежныхСредств);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеШаблона Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ШаблонОбъект.Ссылка);
	ОбъектXDTO.name = ШаблонОбъект.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область Контрагент

// Получает заполненный объект XDTO, соответствующий контрагенту
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующего контрагента
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent или DMError
//
Функция ПолучитьКонтрагента(Узел, ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Контрагент = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
		ПолучитьДанныеКонтрагента(Узел, Контрагент, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении контрагента'; en = 'Error retrieving counterparty'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает нового контрагента по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent или DMError
//
Функция СоздатьКонтрагента(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Контрагент, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтрагента(Узел, Контрагент, Объект, Ошибка, Ложь) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Контрагент.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент.Ссылка);
		Возврат ПолучитьКонтрагента(Узел, ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании контрагента'; en = 'Error creating counterparty'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает контрагента по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMCorrespondent 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent, заново заполненный, или DMError
//
Функция ИзменитьКонтрагента(Узел, Объект, ОбменДанными = Ложь) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не ЗначениеЗаполнено(Ссылка) И ОбменДанными Тогда
			Возврат Ссылка;
		КонецЕсли;
		
		Контрагент = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтрагента(Узел, Контрагент, Объект, Ошибка, ОбменДанными) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если ОбменДанными Тогда
			Возврат Неопределено;
		Иначе
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент.Ссылка);
			Возврат ПолучитьКонтрагента(Узел, ОбъектИд);
		КонецЕсли;
		
	Исключение
		
		Если Ссылка <> Неопределено И ОбменДанными Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении контрагента'; en = 'Error changing counterparty'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Получает объект XDTO для нового контрагента
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent или DMError
//
Функция ПолучитьНовогоКонтрагента(Узел, НаборКолонок) Экспорт 
	
	Попытка
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Заполнить(Неопределено);
	
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
		ПолучитьДанныеКонтрагента(Узел, Контрагент, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового контрагента'; en = 'Error retrieving new counterparty'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Контрагент - СправочникОбъект.Контрагенты
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеКонтрагента(Узел, Контрагент, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь) 
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("deletionMark", Контрагент.ПометкаУдаления);
	
	ДанныеКонтрагента.Вставить("inn", Контрагент.ИНН);
	ДанныеКонтрагента.Вставить("kpp", Контрагент.КПП);
	ДанныеКонтрагента.Вставить("okpo", Контрагент.КодПоОКПО);
	ДанныеКонтрагента.Вставить("registrationNumber", Контрагент.РегистрационныйНомер);
	ДанныеКонтрагента.Вставить("fullName", Контрагент.НаименованиеПолное);
	ДанныеКонтрагента.Вставить("comment", Контрагент.Комментарий);
	
	ДанныеКонтрагента.Вставить("privatePerson", Контрагент.ФизЛицо);
	ДанныеКонтрагента.Вставить("legalPrivatePerson", Контрагент.ЮрФизЛицо);
	ДанныеКонтрагента.Вставить("responsible", Контрагент.Ответственный);
 
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	Для Каждого Реквизит Из ДанныеКонтрагента Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Контрагент.Ссылка) Тогда 
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Контрагент.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
	КонецЕсли;
	
	// Контактная информация.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("contactInformation")) <> Неопределено Тогда 
		ПолучитьКонтактнуюИнформациюОбъектаДО(Контрагент, ОбъектXDTO);
	КонецЕсли;
	
	// Дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Контрагент, ОбъектXDTO);
	КонецЕсли;
	
	// Внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
			Контрагент.Ссылка,
			ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент.Ссылка);
	ОбъектXDTO.name = Контрагент.Наименование;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Контрагент - СправочникОбъект.Контрагенты - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеКонтрагента(Узел, Контрагент, ОбъектXDTO, Ошибка, ОбменДанными = Ложь) 
	
	Блокировать = ЗначениеЗаполнено(Контрагент.Ссылка);
	Если Блокировать Тогда 
		Контрагент.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеКонтрагента(Узел, Контрагент, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Контрагент, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи контрагента'; en = 'Error saving counterparty'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Контрагент.Записать();
	
	Если ОбменДанными Тогда
		СписокВнешнихОбъектов = ОбработкаЗапросовXDTO.ПолучитьСписокВнешнихОбъектов(Узел, Контрагент.Ссылка);
		Если СписокВнешнихОбъектов.Количество() <= 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Контрагент.Ссылка);
		КонецЕсли;
	КонецЕсли;
		
	Если Блокировать Тогда 
		Контрагент.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Контрагент - СправочникОбъект.Контрагенты - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent - источник данных заполнения
//
Процедура ЗаполнитьДанныеКонтрагента(Узел, Контрагент, ОбъектXDTO) 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.ПометкаУдаления, ОбъектXDTO, "deletionMark"); 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.КодПоОКПО, ОбъектXDTO, "okpo");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.РегистрационныйНомер, ОбъектXDTO, "registrationNumber");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.НаименованиеПолное, ОбъектXDTO, "fullName");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.Комментарий,  ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.ФизЛицо, ОбъектXDTO, "privatePerson");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.Ответственный, ОбъектXDTO, "responsible");
	
	Если ОбъектXDTO.Установлено("legalPrivatePerson") Тогда 
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Контрагент.ЮрФизЛицо, ОбъектXDTO, "legalPrivatePerson");
	Иначе
		Если Не ЗначениеЗаполнено(Контрагент.ЮрФизЛицо) Тогда
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(Узел, Контрагент, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Узел, Контрагент, ОбъектXDTO);
	
КонецПроцедуры

// Находит подходящего или создает нового контрагента по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагенты - найденный или созданный контрагент
//
Функция НайтиСоздатьКонтрагента(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Контрагенты.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.Контрагенты.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
		
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "Контрагенты");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеКонтрагента(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеКонтрагента(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
	
		Возврат ОбъектДО.Ссылка;
		
	КонецЕсли;
	
	// стандартный поиск
	Наименование = "";
	ИНН = "";
	КПП = "";
	РегистрационныйНомер = "";
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ИНН,ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, РегистрационныйНомер, ОбъектXDTO, "registrationNumber");

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.Контрагенты";
	
	РезультатПустой = Истина;
	Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ ИНН = &ИНН И КПП = &КПП ";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой
		И ЗначениеЗаполнено(РегистрационныйНомер)
		И Не ЗначениеЗаполнено(ИНН) Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ РегистрационныйНомер = &РегистрационныйНомер ";
		Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой И ЗначениеЗаполнено(ИНН) Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ ИНН = &ИНН И Наименование = &Наименование ";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ Наименование = &Наименование ";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	
	Если РезультатПустой Тогда 
		ОбъектДО = Справочники.Контрагенты.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбъектДО = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеКонтрагента(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Организация

// Получает заполненный объект XDTO, соответствующий организации
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую организацию
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOrganization или DMError
//
Функция ПолучитьОрганизацию(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Организация = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOrganization");
		ПолучитьДанныеОрганизации(Организация, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении организации'; en = 'Error retrieving company'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Организация - СправочникОбъект.Организации
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеОрганизации(Организация, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("inn", Организация.ИНН);
	ДанныеОрганизации.Вставить("kpp", Организация.КПП);
	ДанныеОрганизации.Вставить("okpo", Организация.КодПоОКПО);
	ДанныеОрганизации.Вставить("fullName", Организация.НаименованиеПолное);
	ДанныеОрганизации.Вставить("comment", Организация.Комментарий);
	ДанныеОрганизации.Вставить("prefix", Организация.Префикс);
	ДанныеОрганизации.Вставить("legalPrivatePerson", Организация.ЮрФизЛицо);
	ДанныеОрганизации.Вставить("VATpayer", Организация.ПлательщикНДС);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеОрганизации Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация.Ссылка);
	ОбъектXDTO.name = Организация.Наименование;
	
КонецПроцедуры

// Создает новую организацию по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOrganization или DMError
//
Функция СоздатьОрганизацию(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Организация = Справочники.Организации.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Организация, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеОрганизации(Узел, Организация, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Организация.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация.Ссылка);
		Возврат ПолучитьОрганизацию(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании организации'; en = 'Error creating company'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает организацию по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMOrganization 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOrganization, заново заполненный, или DMError
//
Функция ИзменитьОрганизацию(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Организация = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеОрганизации(Узел, Организация, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация.Ссылка);
		Возврат ПолучитьОрганизацию(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении организации'; en = 'Error changing organization'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Организация - СправочникОбъект.Организации - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеОрганизации(Узел, Организация, ОбъектXDTO, Ошибка) 
	
	Организация.Заблокировать();
	ЗаполнитьДанныеОрганизации(Узел, Организация, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Организация, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи организации'; en = 'Error saving organization'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Организация.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Организация - СправочникОбъект.Организации - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization - источник данных заполнения
//
Процедура ЗаполнитьДанныеОрганизации(Узел, Организация, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.КодПоОКПО, ОбъектXDTO, "okpo");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.Префикс, ОбъектXDTO, "prefix");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.ПлательщикНДС, ОбъектXDTO, "VATpayer");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.НаименованиеПолное, ОбъектXDTO, "fullName");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.Комментарий, ОбъектXDTO, "comment");
	
	Если ОбъектXDTO.Установлено("legalPrivatePerson") Тогда 
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Организация.ЮрФизЛицо, ОбъектXDTO, "legalPrivatePerson");
	Иначе
		Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
КонецПроцедуры

// Находит подходящую или создает новую организацию по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - найденная или созданная организация
//
Функция НайтиСоздатьОрганизацию(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Организации.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.Организации.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	// синхронизация по ID
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СсылкаНаОбъектДО
	|ИЗ
	|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Организации)
	|	И ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта И (ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта ИЛИ ТипВнешнегоОбъекта = """")";
	
	Запрос.УстановитьПараметр("ИДВнешнегоОбъекта", ВнешнийID);
	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ВнешнийТип);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаДО = Выборка.СсылкаНаОбъектДО;
		
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеОрганизации(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		
		Возврат ОбъектДО.Ссылка;
		
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеОрганизации(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
	
		Возврат ОбъектДО.Ссылка;
		
	КонецЕсли;
	
	// стандартный поиск
	Наименование = "";
	ИНН = "";
	КПП = "";
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, 	ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ИНН, 			ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КПП, 			ОбъектXDTO, "kpp");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатПустой = Истина;
	Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ ИНН = &ИНН И КПП = &КПП ";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой И ЗначениеЗаполнено(ИНН) Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ ИНН = &ИНН И Наименование = &Наименование ";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой Тогда 
		Запрос.Текст = ТекстЗапроса + " ГДЕ Наименование = &Наименование ";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	
	Если РезультатПустой Тогда 
		ОбъектДО = Справочники.Организации.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбъектДО = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеОрганизации(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции	

#КонецОбласти

#Область ФизическоеЛицо

// Получает заполненный объект XDTO, соответствующий физическому лицу
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее физлицо
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPrivatePerson или DMError
//
Функция ПолучитьФизическоеЛицо(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ФизЛицо = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPrivatePerson");
		ПолучитьДанныеФизическогоЛица(ФизЛицо, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении физического лица'; en = 'Error retrieving individual'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   ФизЛицо - СправочникОбъект.ФизическиеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMPrivatePerson
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеФизЛица = Новый Структура;
	ДанныеФизЛица.Вставить("birthDay", ФизЛицо.ДатаРождения);
	ДанныеФизЛица.Вставить("comment",  ФизЛицо.Комментарий);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеФизЛица Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФизЛицо.Ссылка);
	ОбъектXDTO.name = ФизЛицо.Наименование;
	
КонецПроцедуры

// Создает новое физическое лицо по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPrivatePerson или DMError
//
Функция СоздатьФизическоеЛицо(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(ФизЛицо, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеФизическогоЛица(Узел, ФизЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, ФизЛицо.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФизЛицо.Ссылка);
		Возврат ПолучитьФизическоеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании физического лица'; en = 'Error creating individual'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает физическое лицо по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMPrivatePerson 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPrivatePerson, заново заполненный, или DMError
//
Функция ИзменитьФизическоеЛицо(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		ФизЛицо = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеФизическогоЛица(Узел, ФизЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФизЛицо.Ссылка);
		Возврат ПолучитьФизическоеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении физического лица'; en = 'Error changing individual'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ФизЛицо - СправочникОбъект.ФизическиеЛица - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMPrivatePerson - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеФизическогоЛица(Узел, ФизЛицо, ОбъектXDTO, Ошибка) 
	
	ФизЛицо.Заблокировать();
	ЗаполнитьДанныеФизическогоЛица(Узел, ФизЛицо, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ФизЛицо, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи физического лица'; en = 'Error saving individual'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	ФизЛицо.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ФизЛицо - СправочникОбъект.ФизическиеЛица - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMPrivatePerson - источник данных заполнения
//
Процедура ЗаполнитьДанныеФизическогоЛица(Узел, ФизЛицо, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФизЛицо.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФизЛицо.ДатаРождения, ОбъектXDTO, "birthDay");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФизЛицо.Комментарий,  ОбъектXDTO, "comment");
	
КонецПроцедуры

// Находит подходящее или создает новое физическое лицо по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - найденное или созданное физическое лицо
//
Функция НайтиСоздатьФизическоеЛицо(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ФизическиеЛица");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеФизическогоЛица(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ФизическиеЛица.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеФизическогоЛица(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции	

#КонецОбласти

#Область КонтактноеЛицо

// Получает заполненный объект XDTO, соответствующий контактному лицу
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее контактное лицо
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson или DMError
//
Функция ПолучитьКонтактноеЛицо(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		КонтактноеЛицо = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactPerson");
		ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении контактного лица'; en = 'Error retrieving contact person'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает новое контактное лицо по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson или DMError
//
Функция СоздатьКонтактноеЛицо(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(КонтактноеЛицо, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтактногоЛица(Узел, КонтактноеЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, КонтактноеЛицо.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(КонтактноеЛицо.Ссылка);
		Возврат ПолучитьКонтактноеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании контактного лица'; en = 'Error creating contact person'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает контактное лицо по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMContactPerson 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson, заново заполненный, или DMError
//
Функция ИзменитьКонтактноеЛицо(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		КонтактноеЛицо = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтактногоЛица(Узел, КонтактноеЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(КонтактноеЛицо.Ссылка);
		Возврат ПолучитьКонтактноеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении контактного лица'; en = 'Error changing contact person'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Получает объект XDTO для нового контактного лица
// 
// Параметры:
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson или DMError
//
Функция ПолучитьНовоеКонтактноеЛицо(НаборКолонок) Экспорт 
	
	Попытка
		
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Заполнить(Неопределено);
	
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactPerson");
		ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового контактного лица'; en = 'Error retrieving new contact person'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеКонтактногоЛица = Новый Структура;
	ДанныеКонтактногоЛица.Вставить("correspondent", КонтактноеЛицо.Владелец);
	ДанныеКонтактногоЛица.Вставить("position", 		КонтактноеЛицо.Должность);
	ДанныеКонтактногоЛица.Вставить("comment",  		КонтактноеЛицо.Комментарий);
	ДанныеКонтактногоЛица.Вставить("privatePerson", КонтактноеЛицо.ФизЛицо);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеКонтактногоЛица Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// контактная информация
	Если НаборКолонок = Неопределено Или Колонки.Найти(НРег("contactInformation")) <> Неопределено Тогда 
		ПолучитьКонтактнуюИнформациюОбъектаДО(КонтактноеЛицо, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(КонтактноеЛицо.Ссылка);
	ОбъектXDTO.name = КонтактноеЛицо.Наименование;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеКонтактногоЛица(Узел, КонтактноеЛицо, ОбъектXDTO, Ошибка) 
	
	Если Не КонтактноеЛицо.ЭтоНовый() Тогда
		КонтактноеЛицо.Заблокировать();
	КонецЕсли;
	ЗаполнитьДанныеКонтактногоЛица(Узел, КонтактноеЛицо, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(КонтактноеЛицо, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи контактного лица'; en = 'Error saving contact person'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	КонтактноеЛицо.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson - источник данных заполнения
//
Процедура ЗаполнитьДанныеКонтактногоЛица(Узел, КонтактноеЛицо, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КонтактноеЛицо.Наименование,  	ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КонтактноеЛицо.Владелец, 		ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КонтактноеЛицо.Должность, 		ОбъектXDTO, "position");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КонтактноеЛицо.Комментарий, 	ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, КонтактноеЛицо.ФизЛицо, 		ОбъектXDTO, "privatePerson");
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(Узел, КонтактноеЛицо, ОбъектXDTO);
	
КонецПроцедуры

// Находит подходящее или создает новое контактное лицо по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson
//
// Возвращаемое значение:
//   СправочникСсылка.КонтактныеЛица - найденное или созданное контактное лицо
//
Функция НайтиСоздатьКонтактноеЛицо(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.КонтактныеЛица.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.КонтактныеЛица.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "КонтактныеЛица");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеКонтактногоЛица(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.КонтактныеЛица.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.КонтактныеЛица.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеКонтактногоЛица(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Пользователь

// Получает заполненный объект XDTO, соответствующий пользователю
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующего пользователя
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser или DMError
//
Функция ПолучитьПользователя(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Пользователь = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
		ПолучитьДанныеПользователя(Пользователь, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении пользователя'; en = 'Error retrieving user'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Пользователь - СправочникОбъект.Пользователи
//   ОбъектXDTO - ОбъектXDTO типа DMUser
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеПользователя(Пользователь, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("privatePerson", Пользователь.ФизЛицо);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеПользователя Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Пользователь.Ссылка);
	ОбъектXDTO.name = Пользователь.Наименование;
	
КонецПроцедуры

// Создает нового пользователя по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser или DMError
//
Функция СоздатьПользователя(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Пользователь, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПользователя(Узел, Пользователь, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ПользователиСлужебный.ОбновитьСоставыГруппПользователей(Справочники.РабочиеГруппы.ВсеПользователи);
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Пользователь.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Пользователь.Ссылка);
		Возврат ПолучитьПользователя(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании пользователя'; en = 'Error creating user'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает пользователя по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMUser
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser, заново заполненный, или DMError
//
Функция ИзменитьПользователя(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Пользователь = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПользователя(Узел, Пользователь, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Пользователь.Ссылка);
		Возврат ПолучитьПользователя(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении пользователя'; en = 'Error changing user'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Пользователь - СправочникОбъект.Пользователи - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMUser - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеПользователя(Узел, Пользователь, ОбъектXDTO, Ошибка) 
	
	Пользователь.Заблокировать();
	ЗаполнитьДанныеПользователя(Узел, Пользователь, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Пользователь, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи пользователя'; en = 'Error saving user'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Пользователь.Записать();
	
	СвязатьПользователяСПодразделением(Узел, Пользователь, ОбъектXDTO);
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Пользователь - СправочникОбъект.Пользователи - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMUser - источник данных заполнения
//
Процедура ЗаполнитьДанныеПользователя(Узел, Пользователь, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Пользователь.Наименование,  ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Пользователь.ФизЛицо, 	  ОбъектXDTO, "privatePerson");
	
КонецПроцедуры

// Находит подходящего или создает нового пользователя по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMUser
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи - найденный или созданный пользователь
//
Функция НайтиСоздатьПользователя(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Пользователи.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.Пользователи.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ОбъектДО.ФизЛицо, ОбъектXDTO, "privatePerson");
			ОбъектДО.Записать();
			СвязатьПользователяСПодразделением(Узел, ОбъектДО, ОбъектXDTO);
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "Пользователи");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПользователя(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Пользователи.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.Пользователи.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПользователя(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	СвязатьПользователяСПодразделением(Узел, ОбъектДО, ОбъектXDTO);
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции	

// Связывает пользователя с подразделением, указанным в свойствах объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   ОбъектДО - СправочникСсылка.Пользователи, СправочникОбъект.Пользователи
//   ОбъектXDTO - ОбъектXDTO типа DMUser
//
Процедура СвязатьПользователяСПодразделением(Узел, ОбъектДО, ОбъектXDTO)
	
	Подразделение = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Подразделение, ОбъектXDTO, "subdivision");
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		МенеджерЗаписи = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = ОбъектДО.Ссылка;

		МенеджерЗаписи.Подразделение = Подразделение;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Валюта

// Получает заполненный объект XDTO, соответствующий валюте
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую валюту
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCurrency или DMError
//
Функция ПолучитьВалюту(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Валюта = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCurrency");
		ПолучитьДанныеВалюты(Валюта, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении валюты'; en = 'Error retrieving currency'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеВалюты(Валюта, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеВалюты = Новый Структура;
	ДанныеВалюты.Вставить("code", 	  Валюта.Код);
	ДанныеВалюты.Вставить("fullName", Валюта.НаименованиеПолное);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеВалюты Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Валюта.Ссылка);
	ОбъектXDTO.name = Валюта.Наименование;
	
КонецПроцедуры

// Создает новую валюту по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCurrency или DMError
//
Функция СоздатьВалюту(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Валюта = Справочники.Валюты.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Валюта, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВалюты(Узел, Валюта, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Валюта.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Валюта.Ссылка);
		Возврат ПолучитьВалюту(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании валюты'; en = 'Error creating currency'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает валюту по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMCurrency
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCurrency, заново заполненный, или DMError
//
Функция ИзменитьВалюту(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Валюта = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВалюты(Узел, Валюта, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Валюта.Ссылка);
		Возврат ПолучитьВалюту(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении валюты'; en = 'Error changing currency'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Валюта - СправочникОбъект.Валюты - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВалюты(Узел, Валюта, ОбъектXDTO, Ошибка) 
	
	Валюта.Заблокировать();
	ЗаполнитьДанныеВалюты(Узел, Валюта, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Валюта, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи валюты'; en = 'Error saving currency'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	Валюта.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Валюта - СправочникОбъект.Валюты - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency - источник данных заполнения
//
Процедура ЗаполнитьДанныеВалюты(Узел, Валюта, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Валюта.Код,  			  ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Валюта.Наименование,  	  ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Валюта.НаименованиеПолное,ОбъектXDTO, "fullName");
	
КонецПроцедуры

// Находит подходящую или создает новую валюту по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - найденная или созданная валюта
//
Функция НайтиСоздатьВалюту(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Валюты.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.Валюты.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "Валюты");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВалюты(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Валюты.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.Валюты.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВалюты(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции	

#КонецОбласти

#Область Подразделение

// Получает заполненный объект XDTO, соответствующий подразделению 
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее подразделение
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSubdivision или DMError
//
Функция ПолучитьПодразделение(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Подразделение = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSubdivision");
		ПолучитьДанныеПодразделения(Подразделение, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении подразделения'; en = 'Error retrieving department'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Подразделение - СправочникОбъект.СтруктураПредприятия
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеПодразделения(Подразделение, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт 
	
	ДанныеПодразделения = Новый Структура;
	ДанныеПодразделения.Вставить("head", Подразделение.Руководитель);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеПодразделения Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подразделение.Ссылка);
	ОбъектXDTO.name = Подразделение.Наименование;
	
КонецПроцедуры

// Создает новое подразделение по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSubdivision или DMError
//
Функция СоздатьПодразделение(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Подразделение = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Подразделение, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПодразделения(Узел, Подразделение, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Подразделение.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подразделение.Ссылка);
		Возврат ПолучитьПодразделение(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании подразделения'; en = 'Error creating department'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает подразделение по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMSubdivision
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSubdivision, заново заполненный, или DMError
//
Функция ИзменитьПодразделение(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Подразделение = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПодразделения(Узел, Подразделение, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подразделение.Ссылка);
		Возврат ПолучитьПодразделение(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении подразделения'; en = 'Error changing department'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Подразделение - СправочникОбъект.Подразделения - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеПодразделения(Узел, Подразделение, ОбъектXDTO, Ошибка) 
	
	Подразделение.Заблокировать();
	ЗаполнитьДанныеПодразделения(Узел, Подразделение, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Подразделение, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи подразделения'; en = 'Error saving department'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	Подразделение.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Подразделение - СправочникОбъект.Подразделения - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision - источник данных заполнения
//
Процедура ЗаполнитьДанныеПодразделения(Узел, Подразделение, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Подразделение.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Подразделение.Руководитель,	ОбъектXDTO, "head");
	
КонецПроцедуры

// Находит подходящее или создает новое подразделение по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision
//
// Возвращаемое значение:
//   СправочникСсылка.Подразделения - найденная или созданная подразделение
//
Функция НайтиСоздатьПодразделение(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "СтруктураПредприятия");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПодразделения(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПодразделения(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СтатьяДвиженияДенежныхСредств

// Получает заполненный объект XDTO, соответствующий статье ДДС 
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую статью ДДС.
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCashFlowItem или DMError
//
Функция ПолучитьСтатьюДвиженияДенежныхСредств(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		СтатьяДвиженияДенежныхСредств = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
		ПолучитьДанныеСтатьиДвиженияДенежныхСредств(СтатьяДвиженияДенежныхСредств, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении статьи ДДС'; en = 'Error retrieving cash flow report item'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   СтатьяДвиженияДенежныхСредств - СправочникОбъект.СтатьиДвиженияДенежныхСредств
//   ОбъектXDTO - ОбъектXDTO типа DMCashFlowItem
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеСтатьиДвиженияДенежныхСредств(СтатьяДвиженияДенежныхСредств, ОбъектXDTO, 
	НаборКолонок = Неопределено) Экспорт 
	
	ДанныеСтатьиДвиженияДенежныхСредств = Новый Структура;
	ДанныеСтатьиДвиженияДенежныхСредств.Вставить("description", СтатьяДвиженияДенежныхСредств.Описание);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеСтатьиДвиженияДенежныхСредств Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтатьяДвиженияДенежныхСредств.Ссылка);
	ОбъектXDTO.name = СтатьяДвиженияДенежныхСредств.Наименование;
	
КонецПроцедуры	

// Создает новую статью ДДС по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCashFlowItem
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCashFlowItem или DMError
//
Функция СоздатьСтатьюДвиженияДенежныхСредств(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(СтатьяДвиженияДенежныхСредств, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеСтатьиДвиженияДенежныхСредств(Узел, СтатьяДвиженияДенежныхСредств,
			Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел, Объект.externalObject.id, 
				Объект.externalObject.type, СтатьяДвиженияДенежныхСредств.Ссылка);
		КонецЕсли;	
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтатьяДвиженияДенежныхСредств.Ссылка);
		Возврат ПолучитьСтатьюДвиженияДенежныхСредств(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании статьи ДДС'; en = 'Error creating cash flow report item'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает статью ДДС по объекту XDTO
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMCashFlowItem
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCashFlowItem, заново заполненный, или DMError
//
Функция ИзменитьСтатьюДвиженияДенежныхСредств(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		СтатьяДвиженияДенежныхСредств = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеСтатьиДвиженияДенежныхСредств(Узел, СтатьяДвиженияДенежныхСредств,
			Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтатьяДвиженияДенежныхСредств.Ссылка);
		Возврат ПолучитьСтатьюДвиженияДенежныхСредств(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении статьи ДДС'; en = 'Error changing cash flow report item'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   СтатьяДвиженияДенежныхСредств - СправочникОбъект.СтатьиДвиженияДенежныхСредств - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCashFlowItem - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеСтатьиДвиженияДенежныхСредств(Узел, СтатьяДвиженияДенежныхСредств, ОбъектXDTO, 
	Ошибка) 
	
	СтатьяДвиженияДенежныхСредств.Заблокировать();
	ЗаполнитьДанныеСтатьиДвиженияДенежныхСредств(Узел, СтатьяДвиженияДенежныхСредств, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(СтатьяДвиженияДенежныхСредств, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи статьи ДДС'; en = 'Error saving cash flow report item'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	СтатьяДвиженияДенежныхСредств.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   СтатьяДвиженияДенежныхСредств - СправочникОбъект.СтатьиДвиженияДенежныхСредств - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCashFlowItem - источник данных заполнения
//
Процедура ЗаполнитьДанныеСтатьиДвиженияДенежныхСредств(Узел, СтатьяДвиженияДенежныхСредств, 
	ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтатьяДвиженияДенежныхСредств.Наименование,
		ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтатьяДвиженияДенежныхСредств.Описание,
		ОбъектXDTO, "description");
	
КонецПроцедуры

// Находит подходящую или создает новую статью ДДС по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMCashFlowItem
//
// Возвращаемое значение:
//   СправочникСсылка.СтатьиДвиженияДенежныхСредств - найденная или созданная статья ДДС
//
Функция НайтиСоздатьСтатьюДвиженияДенежныхСредств(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, 
		"СтатьиДвиженияДенежныхСредств");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеСтатьиДвиженияДенежныхСредств(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеСтатьиДвиженияДенежныхСредств(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ЕдиницаИзмерения

// Получает заполненный объект XDTO, соответствующий единице измерения.
// 
// Параметры:
//   ObjectId - ОбъектXDTO типа ObjectId, описывающий существующую единицу измерения.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeasurementUnit или DMError.
//
Функция ПолучитьЕдиницуИзмерения(ObjectId, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Объект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ObjectId).ПолучитьОбъект();
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeasurementUnit");
		ПолучитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO, НаборКолонок);
		
	Исключение
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		ОбъектXDTO.subject = НСтр("ru = 'Ошибка при получении единицы измерения'; en = 'Error occured while obtaining measurement unit'");
		ОбъектXDTO.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ОбъектXDTO;
		
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Объект - СправочникОбъект.КлассификаторЕдиницИзмерения.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO, 
	НаборКолонок = Неопределено) Экспорт 
	
	Данные = Новый Структура;
	Данные.Вставить("fullName", Объект.НаименованиеПолное);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из Данные Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
	ОбъектXDTO.name = Объект.Наименование;
	
КонецПроцедуры

// Создает новую единицу измерения по объекту XDTO.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeasurementUnit или DMError.
//
Функция СоздатьЕдиницуИзмерения(Сообщение) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		ОбъектXDTO = Сообщение.object;
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
		
		Если Не ЗаписатьДанныеЕдиницыИзмерения(Узел,
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			
			Возврат Ошибка;
			
		КонецЕсли;
		
		Если ОбъектXDTO.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				ОбъектXDTO.externalObject.id, 
				ОбъектXDTO.externalObject.type,
				Объект.Ссылка);
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕдиницуИзмерения(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при создании единицы измерения'; en = 'Error occured while creating measurement unit'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает единицу измерения по объекту XDTO.
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeasurementUnit, заново заполненный, или DMError.
//
Функция ИзменитьЕдиницуИзмерения(Узел, ОбъектXDTO) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Не ЗаписатьДанныеЕдиницыИзмерения(Узел,
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕдиницуИзмерения(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении единицы измерения'; en = 'Error while changing measurement unit'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает единицу измерения Документооборота по данным объекта XDTO.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Объект - СправочникОбъект.КлассификаторЕдиницИзмерения - заполняемый и записываемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit - объект-источник данных.
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки.
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеЕдиницыИзмерения(Узел, Объект, ОбъектXDTO, Ошибка)
	
	Объект.Заблокировать();
	ЗаполнитьДанныеЕдиницыИзмерения(Узел, Объект, ОбъектXDTO);
	
	// Проверим заполнение.
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда 
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи единицы измерения'; en = 'Error while saving measurement unit'");
		Ошибка.description = ТекстСообщения;
		
		Возврат Ложь;
		
	Иначе
	
		Объект.Записать();
	
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции	

// Заполняет единицу измерения Документооборота по данным объекта XDTO.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Объект - СправочникОбъект.КлассификаторЕдиницИзмерения - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit - объект-источник данных.
//
Процедура ЗаполнитьДанныеЕдиницыИзмерения(Узел, Объект, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.НаименованиеПолное, ОбъектXDTO, "fullName");
	
КонецПроцедуры

// Находит подходящую или создает новую единицу измерения по объекту XDTO.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторЕдиницИзмерения - найденная или созданная единица измерения.
//
Функция НайтиСоздатьЕдиницуИзмерения(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	Ссылка = Неопределено;
	
	// Синхронизация по наименованию.
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			Объект.Наименование = Наименование;
			Объект.Записать();
			Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Синхронизация по идентификатору объекта ИС.
	Ссылка = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "КлассификаторЕдиницИзмерения");
	Если Ссылка <> Неопределено Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		ЗаполнитьДанныеЕдиницыИзмерения(Узел, Объект, ОбъектXDTO);
		Если Объект.Модифицированность() Тогда
			Объект.Записать();
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Переопределяемый поиск.
	Ссылка = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// Стандартный поиск.
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
	КонецЕсли;
	
	Объект.Заблокировать();
	ЗаполнитьДанныеЕдиницыИзмерения(Узел, Объект, ОбъектXDTO);
	
	Если Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

// Получает заполненный объект XDTO, соответствующий номенклатуре.
// 
// Параметры:
//   ObjectId - ОбъектXDTO типа ObjectId, описывающий существующую номенклатуру.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMProduct или DMError.
//
Функция ПолучитьНоменклатуру(ObjectId, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Объект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ObjectId).ПолучитьОбъект();
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProduct");
		ПолучитьДанныеНоменклатуры(Объект, ОбъектXDTO, НаборКолонок);
		
	Исключение
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		ОбъектXDTO.subject = НСтр("ru = 'Ошибка при получении номенклатуры'; en = 'Error occured while obtaining products and services'");
		ОбъектXDTO.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ОбъектXDTO;
		
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Объект - СправочникОбъект.Номенклатура.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеНоменклатуры(Объект, ОбъектXDTO, 
	НаборКолонок = Неопределено) Экспорт 
	
	Данные = Новый Структура;
	Данные.Вставить("isFolder", Объект.ЭтоГруппа);
	Данные.Вставить("parent", Объект.Родитель);
	Если Не Объект.ЭтоГруппа Тогда
		Данные.Вставить("code", Объект.Код);
		Данные.Вставить("price", Объект.Цена);
		Данные.Вставить("measurementUnit", Объект.ЕдиницаИзмерения);
		Данные.Вставить("VATRate", Объект.СтавкаНДС);
		Данные.Вставить("article", Объект.Артикул);
	КонецЕсли;
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из Данные Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
	ОбъектXDTO.name = Объект.Наименование;
	
КонецПроцедуры

// Создает новую номенклатуру по объекту XDTO.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMProduct.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMProduct или DMError.
//
Функция СоздатьНоменклатуру(Сообщение) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		ОбъектXDTO = Сообщение.object;
		
		Если ОбъектXDTO.isFolder = Истина Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
		
		Если Не ЗаписатьДанныеНоменклатуры(Узел,
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			
			Возврат Ошибка;
			
		КонецЕсли;
		
		Если ОбъектXDTO.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				ОбъектXDTO.externalObject.id, 
				ОбъектXDTO.externalObject.type,
				Объект.Ссылка);
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьНоменклатуру(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при создании номенклатуры'; en = 'Error while creating product or service'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает номенклатуру по объекту XDTO.
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMProduct, заново заполненный, или DMError.
//
Функция ИзменитьНоменклатуру(Узел, ОбъектXDTO) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Не ЗаписатьДанныеНоменклатуры(Узел,
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьНоменклатуру(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении номенклатуры'; en = 'Error while changing product or service'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает номенклатуру Документооборота по данным объекта XDTO.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Объект - СправочникОбъект.Номенклатура - заполняемый и записываемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct - объект-источник данных.
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки.
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеНоменклатуры(Узел, Объект, ОбъектXDTO, Ошибка)
	
	Объект.Заблокировать();
	ЗаполнитьДанныеНоменклатуры(Узел, Объект, ОбъектXDTO);
	
	// Проверим заполнение.
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда 
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи номенклатуры'; en = 'Error while saving product or service'");
		Ошибка.description = ТекстСообщения;
		
		Возврат Ложь;
		
	Иначе
	
		Объект.Записать();
	
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции	

// Заполняет номенклатуру Документооборота по данным объекта XDTO.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Объект - СправочникОбъект.Номенклатура - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct - объект-источник данных.
//
Процедура ЗаполнитьДанныеНоменклатуры(Узел, Объект, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.Родитель, ОбъектXDTO, "parent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.Код, ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.Наименование, ОбъектXDTO, "name");
	
	Если Не Объект.ЭтоГруппа Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.Цена, ОбъектXDTO, "price");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.ЕдиницаИзмерения, ОбъектXDTO, "measurementUnit");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.СтавкаНДС, ОбъектXDTO, "VATRate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Объект.Артикул, ОбъектXDTO, "article");
	КонецЕсли;
	
КонецПроцедуры

// Находит подходящую или создает новую номенклатуру по объекту XDTO.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct.
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура - найденная или созданная номенклатура.
//
Функция НайтиСоздатьНоменклатуру(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	Ссылка = Неопределено;
	
	// Синхронизация по наименованию.
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
			Объект.Наименование = Наименование;
			Объект.Записать();
			Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Синхронизация по идентификатору объекта ИС.
	Ссылка = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "Номенклатура");
	Если Ссылка <> Неопределено Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		ЗаполнитьДанныеНоменклатуры(Узел, Объект, ОбъектXDTO);
		Если Объект.Модифицированность() Тогда
			Объект.Записать();
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Переопределяемый поиск.
	Ссылка = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// Стандартный поиск.
	
	Если Не ЗначениеЗаполнено(Ссылка)
		И ОбъектXDTO.isFolder <> Истина Тогда 
		Артикул = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Артикул, ОбъектXDTO, "article");
		Если ЗначениеЗаполнено(Артикул) Тогда
			Ссылка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Если ОбъектXDTO.isFolder = Истина Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
	КонецЕсли;
	
	Объект.Заблокировать();
	ЗаполнитьДанныеНоменклатуры(Узел, Объект, ОбъектXDTO);
	
	Если Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Получает заполненный объект XDTO, соответствующий виду контактной информации 
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий вид КИ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactInformationKind или DMError
//
Функция ПолучитьВидКонтактнойИнформации(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Валюта = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformationKind");
		ПолучитьДанныеВидаКонтактнойИнформации(Валюта, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении вида контактной информации'; en = 'Error retrieving contact information kind'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   ВидКонтактнойИнформации - СправочникОбъект.ВидыКонтактнойИнформации
//   ОбъектXDTO - ОбъектXDTO типа DMContactInformationKind
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеВидаКонтактнойИнформации(ВидКонтактнойИнформации, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеВидаКИ = Новый Структура;
	ДанныеВидаКИ.Вставить("type", 	  ВидКонтактнойИнформации.Тип);
	ДанныеВидаКИ.Вставить("mandatory", ВидКонтактнойИнформации.ОбязательноеЗаполнение);
	ДанныеВидаКИ.Вставить("parent", ВидКонтактнойИнформации.Родитель);
	ДанныеВидаКИ.Вставить("predefinedName", ОбщегоНазначения.ИмяПредопределенного(ВидКонтактнойИнформации.Ссылка));
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеВидаКИ Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ВидКонтактнойИнформации.Ссылка);
	ОбъектXDTO.name = ВидКонтактнойИнформации.Наименование;
	
КонецПроцедуры

// Дополняет объект XDTO данными табличной части Контактная информация объекта ДО
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Контрагенты, СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent, DMContactPerson 
//
Процедура ПолучитьКонтактнуюИнформациюОбъектаДО(ОбъектДО, ОбъектXDTO) Экспорт
	
	ОбъектXDTO.contactInformation = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformation");
		
	Для каждого СтрокаКонтактнаяИнформация из ОбъектДО.КонтактнаяИнформация Цикл
		
		ОбъектКИ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformationItem");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектКИ, "type", СтрокаКонтактнаяИнформация.Тип);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектКИ, "kind", СтрокаКонтактнаяИнформация.Вид);
		Если ЗначениеЗаполнено(СтрокаКонтактнаяИнформация.Вид) Тогда
			ПолучитьДанныеВидаКонтактнойИнформации(СтрокаКонтактнаяИнформация.Вид, ОбъектКИ.kind);
		КонецЕсли;
		
		ОбъектКИ.description = СтрокаКонтактнаяИнформация.Представление;
		ОбъектКИ.fieldValues = СтрокаКонтактнаяИнформация.ЗначенияПолей;
		ОбъектКИ.country = СтрокаКонтактнаяИнформация.Страна;
		ОбъектКИ.territory = СтрокаКонтактнаяИнформация.Регион;
		ОбъектКИ.city = СтрокаКонтактнаяИнформация.Город;
		ОбъектКИ.email = СтрокаКонтактнаяИнформация.АдресЭП;
		ОбъектКИ.serverDomainName = СтрокаКонтактнаяИнформация.ДоменноеИмяСервера;
		ОбъектКИ.phoneNumber = СтрокаКонтактнаяИнформация.НомерТелефона;
		ОбъектКИ.localPhoneNumber = СтрокаКонтактнаяИнформация.НомерТелефонаБезКодов;
		
		ОбъектXDTO.contactInformation.items.Добавить(ОбъектКИ);
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит в табличную часть Контактная информация данные из свойства contactInformation объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектДО - СправочникОбъект.Контрагенты, СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent, DMContactPerson 
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектаДО(Узел, ОбъектДО, ОбъектXDTO) Экспорт
	
	Если Не ОбъектXDTO.Установлено("contactInformation") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДО.КонтактнаяИнформация.Очистить();
	
	Для каждого contactInformationItem из ОбъектXDTO.contactInformation.items Цикл
		
		СтрокаКИ = ОбъектДО.КонтактнаяИнформация.Добавить();
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.Тип, contactInformationItem, "type");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.Вид, contactInformationItem, "kind");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.Представление, contactInformationItem, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.ЗначенияПолей, contactInformationItem, "fieldValues");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.Страна, contactInformationItem, "country");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.Регион, contactInformationItem, "territory");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.Город, contactInformationItem, "city");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.АдресЭП, contactInformationItem, "email");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.ДоменноеИмяСервера, contactInformationItem, "serverDomainName");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.НомерТелефона, contactInformationItem, "phoneNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СтрокаКИ.НомерТелефонаБезКодов, contactInformationItem, "localPhoneNumber");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВидДокумента

// Создает новый вид документа по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DM<...>DocumentType или DMError
//
Функция СоздатьВидДокумента(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Объект = Сообщение.object;
		ТипОбъекта = Объект.objectId.type;
		Если ТипОбъекта = "DMInternalDocumentType" Тогда
			ВидСправочника = "ВидыВнутреннихДокументов";
		ИначеЕсли ТипОбъекта = "DMIncomingDocumentType" Тогда
			ВидСправочника = "ВидыВходящихДокументов";
		Иначе
			ВидСправочника = "ВидыИсходящихДокументов";
		КонецЕсли;
		ВидДокумента = Справочники[ВидСправочника].СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ВидДокумента, Объект);
		
		Если ТипОбъекта = "DMInternalDocumentType" Тогда
			ВидДокумента.ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
			ВидДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВидаДокумента(Узел, ВидДокумента, Объект, Ошибка, Ложь) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.automaticNumeration = Истина Тогда // запишем настройки автонумерации
			ЗаписьНастроекНумерации = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			Если ТипОбъекта = "DMInternalDocumentType" Тогда
				ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
				ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
			ИначеЕсли ТипОбъекта = "DMIncomingDocumentType" Тогда
				ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
				ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
			Иначе
				ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
				ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
			КонецЕсли;
			ЗаписьНастроекНумерации.ВидДокумента = ВидДокумента.Ссылка;
			ЗаписьНастроекНумерации.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			ЗаписьНастроекНумерации.Нумеровать = Нумерация.СформироватьПолеНумеровать(
				ЗаписьНастроекНумерации.СпособНумерации, ЗаписьНастроекНумерации.Нумератор);
			ЗаписьНастроекНумерации.Записать();
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, ВидДокумента.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ВидДокумента.Ссылка);
		Возврат ПолучитьВидДокумента(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании вида документа'; en = 'Error creating document type'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий виду документа
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий вид документа
//
// Возвращаемое значение:
//   ОбъектXDTO типа DM<>DocumentType
//
Функция ПолучитьВидДокумента(ОбъектИд) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеВидаДокумента(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении вида документа'; en = 'Error retrieving document type'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DM<...>DocumentType.
//   ВидДокумента - СправочникСсылка.Виды<...>Документов, СправочникОбъект.Виды<...>Документов.
//
Процедура ПолучитьДанныеВидаДокумента(ОбъектXDTO, ВидДокумента)
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
		Или ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
		Или ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		ВидДокументаОбъект = ВидДокумента.ПолучитьОбъект();
	Иначе
		ВидДокументаОбъект = ВидДокумента;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"performanceDateEnabled", ВидДокументаОбъект.ИспользоватьСрокИсполнения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"sumEnabled", ВидДокументаОбъект.УчитыватьСуммуДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиНумерации.СпособНумерации
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|ГДЕ
	|	НастройкиНумерации.ВидДокумента = &ВидДокумента";
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		АвтоНумерация = Ложь;
	Иначе
		АвтоНумерация = Результат.Выгрузить()[0].СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "automaticNumeration", АвтоНумерация);
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMIncomingDocumentType") Тогда 
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMOutgoingDocumentType") Тогда 
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"externalNumberEnabled", ВидДокументаОбъект.УчитыватьВходящийНомерИДатуПолучателя);
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMInternalDocumentType") Тогда 
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"durationEnabled", ВидДокументаОбъект.УчитыватьСрокДействия);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"correspondentEnabled",
			ВидДокументаОбъект.ВестиУчетПоКонтрагентам Или ВидДокументаОбъект.ВестиУчетСторон);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"organizationEnabled", ВидДокументаОбъект.ВестиУчетПоОрганизациям);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"cashFlowDetailsEnabled", ВидДокументаОбъект.ВестиУчетПоСтатьямДДС);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"productRowsEnabled", ВидДокументаОбъект.ВестиУчетТоваровИУслуг);
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ВидДокумента - СправочникОбъект.Виды<...>Документов - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DM<...>DocumentType - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВидаДокумента(Узел, ВидДокумента, ОбъектXDTO, Ошибка, ОбменДанными = Ложь) 
	
	Блокировать = ЗначениеЗаполнено(ВидДокумента.Ссылка);
	Если Блокировать Тогда 
		ВидДокумента.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеВидаДокумента(Узел, ВидДокумента, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ВидДокумента, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи вида документа'; en = 'Error saving document type'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	ВидДокумента.Записать();
	
	Если ОбменДанными Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ВидДокумента.Ссылка);
	КонецЕсли;
		
	Если Блокировать Тогда 
		ВидДокумента.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ВидДокумента - СправочникОбъект.Виды<...>Документов - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DM<...>DocumentType - источник данных заполнения
//
Процедура ЗаполнитьДанныеВидаДокумента(Узел, ВидДокумента, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
		ВидДокумента.Наименование, ОбъектXDTO, "name");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
		ВидДокумента.УчитыватьСуммуДокумента, ОбъектXDTO, "sumEnabled");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
		ВидДокумента.ИспользоватьСрокИсполнения, ОбъектXDTO, "performanceDateEnabled");
		
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMInternalDocumentType") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
			ВидДокумента.ВестиУчетПоКонтрагентам, ОбъектXDTO, "correspondentEnabled");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
			ВидДокумента.ВестиУчетПоОрганизациям, ОбъектXDTO, "organizationEnabled");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
			ВидДокумента.ВестиУчетПоСтатьямДДС, ОбъектXDTO, "cashFlowDetailsEnabled");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
			ВидДокумента.УчитыватьСрокДействия, ОбъектXDTO, "durationEnabled");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
			ВидДокумента.ВариантПодписания, ОбъектXDTO, "signatureOption");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
			ВидДокумента.ВестиУчетТоваровИУслуг, ОбъектXDTO, "productRowsEnabled");
	КонецЕсли;
	
КонецПроцедуры

// Находит подходящий или создает новый вид входящего документа по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocumentType
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыВходящихДокументов - найденный или созданный вид входящего документа
//
Функция НайтиСоздатьВидВходящегоДокумента(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВходящихДокументов.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВидыВходящихДокументов.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ВидыВходящихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВидаДокумента(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВходящихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ВидыВходящихДокументов.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВидаДокумента(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый вид исходящего документа по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocumentType
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыИсходящихДокументов - найденный или созданный вид исходящего документа
//
Функция НайтиСоздатьВидИсходящегоДокумента(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыИсходящихДокументов.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВидыИсходящихДокументов.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ВидыИсходящихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВидаДокумента(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыИсходящихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ВидыИсходящихДокументов.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВидаДокумента(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
	
КонецФункции

// Находит подходящий или создает новый вид внутреннего документа по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentType
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыВнутреннихДокументов - найденный или созданный вид внутреннего документа
//
Функция НайтиСоздатьВидВнутреннегоДокумента(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВидыВнутреннихДокументов.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ВидыВнутреннихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВидаДокумента(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ВидыВнутреннихДокументов.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВидаДокумента(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПапкаВнутреннихДокументов

// Создает новую папку внутренних документов по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentFolder или DMError
//
Функция СоздатьПапкуВнутреннихДокументов(Сообщение) Экспорт 
	
	Попытка 
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		Папка = Справочники.ПапкиВнутреннихДокументов.СоздатьЭлемент();
		Объект = Сообщение.object;
		УстановитьСсылкуНовогоДляСправочника(Папка, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПапкиВнутреннихДокументов(Узел, Папка, Объект, Ошибка, Ложь) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(Узел,
				Объект.externalObject.id, Объект.externalObject.type, Папка.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Папка.Ссылка);
		Возврат ПолучитьПапкуВнутреннихДокументов(Узел, ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании папки внутренних документов'; en = 'Error creating internal document folder'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий папке внутренних документов
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую папку
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentFolder или DMError
//
Функция ПолучитьПапкуВнутреннихДокументов(Узел, ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Папка = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocumentFolder");
		ПолучитьДанныеПапкиВнутреннихДокументов(Узел, Папка, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении папки внутренних документов'; en = 'Error retrieving internal document folder'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Папка - СправочникОбъект.ПапкиВнутреннихДокументов
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеПапкиВнутреннихДокументов(Узел, Папка, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеПапки = Новый Структура;
	ДанныеПапки.Вставить("description", 	  Папка.Описание);
	ДанныеПапки.Вставить("responsible", 	  Папка.Ответственный);
	ДанныеПапки.Вставить("creationDate", 	  Папка.ДатаСоздания);
	
	ДанныеПапки.Вставить("parent", Папка.Родитель);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	Для Каждого Реквизит Из ДанныеПапки Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// внешний объект
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
			Папка.Ссылка,
			ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Папка.Ссылка);
	ОбъектXDTO.name = Папка.Наименование;
	
КонецПроцедуры

// Изменяет и записывает папку внутренних документов по объекту XDTO.
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы.
//   Объект - ОбъектXDTO типа DMInternalDocumentFolder.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentFolder, заново заполненный, или DMError.
//
Функция ИзменитьПапкуВнутреннихДокументов(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Папка = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПапкиВнутреннихДокументов(Узел, Папка, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Папка.Ссылка);
		Возврат ПолучитьПапкуВнутреннихДокументов(Узел, ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении папки внутренних документов'; en = 'Error while changing internal document folder'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Папка - СправочникОбъект.ПапкиВнутреннихДокументов - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеПапкиВнутреннихДокументов(Узел, Папка, ОбъектXDTO, Ошибка, ОбменДанными = Ложь) 
	
	Блокировать = ЗначениеЗаполнено(Папка.Ссылка);
	Если Блокировать Тогда 
		Папка.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеПапкиВнутреннихДокументов(Узел, Папка, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Папка, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи папки внутренних документов'; en = 'Error saving internal document folder'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Папка.Записать();
	
	Если ОбменДанными Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Папка.Ссылка);
	КонецЕсли;
		
	Если Блокировать Тогда 
		Папка.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Папка - СправочникОбъект.ПапкиВнутреннихДокументов - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder - источник данных заполнения
//
Процедура ЗаполнитьДанныеПапкиВнутреннихДокументов(Узел, Папка, ОбъектXDTO) 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Папка.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Папка.Описание, ОбъектXDTO, "description");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Папка.Ответственный, ОбъектXDTO, "responsible");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Папка.ДатаСоздания, ОбъектXDTO, "creationDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Папка.Родитель, ОбъектXDTO, "parent");
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыДокумента

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ГрифДоступа - СправочникОбъект.ГрифыДоступа - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMAccessLevel - источник данных заполнения
//
Процедура ЗаполнитьДанныеГрифаДоступа(Узел, ГрифаДоступа, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ГрифаДоступа.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ВопросДеятельности - СправочникОбъект.ВидыДеятельности - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMActivityMatter - источник данных заполнения
//
Процедура ЗаполнитьДанныеВопросаДеятельности(Узел, ВопросДеятельности, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ВопросДеятельности.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   СпособДоставки - СправочникОбъект.СпособыДоставки - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMDeliveryMethod - источник данных заполнения
//
Процедура ЗаполнитьДанныеСпособаДоставки(Узел, СпособДоставки, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СпособДоставки.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Проект - СправочникСсылка.Проекты - заполняемый объект 
//   ОбъектXDTO - ОбъектXDTO типа DMProject - источник данных заполнения
//
Процедура ЗаполнитьДанныеПроекта(Узел, Проект, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Проект.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Находит подходящий или создает новый гриф доступа по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMAccessLevel
//
// Возвращаемое значение:
//   СправочникСсылка.ГрифыДоступа - найденный или созданный элемент справочника
//
Функция НайтиСоздатьГрифДоступа(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ГрифыДоступа.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ГрифыДоступа.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ГрифыДоступа");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеГрифаДоступа(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ГрифыДоступа.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ГрифыДоступа.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеГрифаДоступа(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый вопрос деятельности по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMActivityMatter
//
// Возвращаемое значение:
//   СправочникСсылка.ВопросыДеятельности - найденный или созданный элемент справочника
//
Функция НайтиСоздатьВопросДеятельности(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВопросыДеятельности.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВопросыДеятельности.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ВопросыДеятельности");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВопросаДеятельности(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "Name");
		СсылкаДО = Справочники.ВопросыДеятельности.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ВопросыДеятельности.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	
	ЗаполнитьДанныеВопросаДеятельности(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый способ доставки по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMDeliveryMethod
//
// Возвращаемое значение:
//   СправочникСсылка.СпособыДоставки - найденный или созданный элемент справочника
//
Функция НайтиСоздатьСпособДоставки(Узел, ОбъектXDTO) Экспорт 
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СпособыДоставки.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.СпособыДоставки.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "СпособыДоставки");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеСпособаДоставки(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СпособыДоставки.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.СпособыДоставки.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеСпособаДоставки(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящую или создает новую папку внутренних документов по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиВнутреннихДокументов - найденный или созданный элемент справочника
//
Функция НайтиСоздатьПапкуВнутреннихДокументов(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ПапкиВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ПапкиВнутреннихДокументов.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "ПапкиВнутреннихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПапкиВнутреннихДокументов(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ПапкиВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ПапкиВнутреннихДокументов.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПапкиВнутреннихДокументов(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый проект по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа DMProject
//
// Возвращаемое значение:
//   СправочникСсылка.Проекты - найденный или созданный элемент справочника
//
Функция НайтиСоздатьПроект(Узел, ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Проекты.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.Проекты.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, "Проекты");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПроекта(Узел, ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Проекты.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.Проекты.СоздатьЭлемент();
		УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПроекта(Узел, ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СвязиДокументов

// Создает связь документов по переданному сообщению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddDocumentRelationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddDocumentRelationResponse или DMError
//
Функция СоздатьСвязьДокументов(Сообщение) Экспорт 
	
	Попытка 
		
		Документ = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.document.objectId);
		СвязанныйДокумент = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relatedDocument.objectId);
		
		Если Сообщение.relation.Установлено("relationType") Тогда
			
			ТипСвязи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relationType.objectId);
			
		Иначе // тип связи не указан, выберем однозначно настроенную или, в отсутствие таковой, предопределенную
			
			НастройкиСвязи = СвязиДокументов.ПолучитьНастройкиСвязи(Документ, СвязанныйДокумент);
			СтруктураПоиска = Новый Структура("Предопределенная", Ложь);
			Непредопределенные = НастройкиСвязи.НайтиСтроки(СтруктураПоиска);
			
			Если Непредопределенные.Количество() = 1 Тогда
				ТипСвязи = Непредопределенные[0].ТипСвязи;
			Иначе
				ТипСвязи = Справочники.ТипыСвязей.СодержитСсылкуНаИнтегрированныйОбъект;
			КонецЕсли;
			
		КонецЕсли;
		
		СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи);
		
		Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddDocumentRelationResponse");
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании связи документов'; en = 'Error creating document relation'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Удаляет связь документов по переданному сообщению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRemoveDocumentRelationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMRemoveDocumentRelationResponse или DMError
//
Функция УдалитьСвязьДокументов(Сообщение) Экспорт 
	
	Попытка 
		
		Документ = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.document.objectId);
		ТипСвязи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relationType.objectId);
		СвязанныйДокумент = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relatedDocument.objectId);
		
		СвязиДокументов.УдалитьСвязь(Документ, СвязанныйДокумент, ТипСвязи);
		
		Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMRemoveDocumentRelationResponse");
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при удалении связи документов'; en = 'Error deleting document relation'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедуры

// Возвращает значения реквизитов, назначаемых по умолчанию видом документа
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetDefaultValuesByDocumentTypeRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetDefaultValuesByDocumentTypeResponse или DMError
//
Функция ЗначенияРеквизитовПоУмолчанию(Сообщение) Экспорт
	
	Попытка 
		
		ВидДокумента = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.documentTypeId);
		
		Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			ЗначенияПоУмолчанию = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ИмяОбъекта = "ВнутренниеДокументы";
			ХранитсяВПапках = Истина;
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			ЗначенияПоУмолчанию = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
			ИмяОбъекта = "ВходящиеДокументы";
			ХранитсяВПапках = Ложь;
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			ЗначенияПоУмолчанию = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ИмяОбъекта = "ИсходящиеДокументы";
			ХранитсяВПапках = Ложь;
		КонецЕсли;
		
		Объект = Справочники[ИмяОбъекта].СоздатьЭлемент();
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|" + ?(ХранитсяВПапках, "	Папка,", "") + "
		|	ГрифДоступа,
		|	ВопросДеятельности,
		|	Проект,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.%1 КАК Документы
		|ГДЕ
		|	ВидДокумента = &ВидДокумента
		|	И ПометкаУдаления = Ложь";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%1", ИмяОбъекта);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда
			Для Каждого Колонка Из Результат.Колонки Цикл
				Если Колонка.Имя <> "Количество" Тогда
					ЗначенияРеквизита = Результат.Скопировать(,Колонка.Имя + ", Количество");
					ЗначенияРеквизита.Свернуть(Колонка.Имя, "Количество");
					ЗначенияРеквизита.Сортировать("Количество УБЫВ");
					Объект[Колонка.Имя] = ЗначенияРеквизита[0][Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа")
			И Не ЗначениеЗаполнено(Объект.ГрифДоступа) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	Ссылка
				|ИЗ
				|	Справочник.ГрифыДоступа
				|ГДЕ
				|	НЕ ПометкаУдаления");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Объект.ГрифДоступа = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности")
			И Не ЗначениеЗаполнено(Объект.ВопросДеятельности) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	Ссылка
				|ИЗ
				|	Справочник.ВопросыДеятельности
				|ГДЕ
				|	НЕ ПометкаУдаления");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Объект.ВопросДеятельности = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			ПолучитьДанныеВнутреннегоДокумента(Узел, Объект, ЗначенияПоУмолчанию);
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			ПолучитьДанныеВходящегоДокумента(Узел, Объект, ЗначенияПоУмолчанию);
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			ПолучитьДанныеИсходящегоДокумента(Узел, Объект, ЗначенияПоУмолчанию);
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetDefaultValuesByDocumentTypeResponse");
		Ответ.object = ЗначенияПоУмолчанию;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных'; en = 'Error retrieving data'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Регистрирует документ согласно сообщению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMDocumentRegistrationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDocumentRegistrationResponse или DMError
//
Функция ЗарегистрироватьДокумент(Сообщение) Экспорт 
	
	Попытка 
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.document.objectId);
		Документ = Ссылка.ПолучитьОбъект();
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Если РольДоступна("ПолныеПрава") Тогда 
			ЭтоДелопроизводитель = Истина;
	    ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ЭтоДелопроизводитель = РольДоступна("РегистрацияВходящихДокументов");
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ЭтоДелопроизводитель = РольДоступна("РегистрацияИсходящихДокументов");
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ЭтоДелопроизводитель = РольДоступна("РегистрацияВнутреннихДокументов");
		КонецЕсли;
		Если Не ЭтоДелопроизводитель Тогда 
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'; en = 'Error registering document'");
			Инфо = ИнформацияОбОшибке();
			Ошибка.description = НСтр("ru = 'У вас нет прав на регистрацию документа'; en = 'Not enough permissions to register document'");
			Возврат Ошибка;
		КонецЕсли;
		
		ВидДокумента = Документ.ВидДокумента;
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'; en = 'Error registering document'");
			Инфо = ИнформацияОбОшибке();
			Ошибка.description = НСтр("ru = 'Поле ""Вид документа"" не заполнено'; en = 'Field ""Document type"" is not filled in'");
			Возврат Ошибка;
		КонецЕсли;
		
		Попытка // в отсутствие подходящего нумератора будет выброшено исключение
			Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
		Исключение
			Нумератор = Неопределено;
		КонецПопытки;
		Если Не ЗначениеЗаполнено(Нумератор) Тогда 
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'; en = 'Error registering document'");
			Инфо = ИнформацияОбОшибке();
			Ошибка.description = НСтр("ru = 'Документ регистрируется вручную. Укажите номер и запишите документ.'; en = 'Document is registered manually. Specify the number and save the document.'");
			Возврат Ошибка;
		КонецЕсли;
		
		Документ.Заблокировать();
		Документ.ДатаРегистрации = ТекущаяДатаСеанса();
		Документ.Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
		
		// числовой номер
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Документ);
		Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, Документ.ЧисловойНомер);
		
		// строковый номер
		ОписанияОшибок = Новый СписокЗначений;
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Документ);
		Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, Документ.РегистрационныйНомер, ОписанияОшибок);
		
		// проверим заполнение
		ТекстСообщения = "";
		Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения) Тогда 
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'; en = 'Error registering document'");
			Ошибка.description = ТекстСообщения;
			Возврат Ошибка;
		КонецЕсли;
		
		Документ.Записать();
		
		// состояние 
		СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка, 
			Документ.ДатаРегистрации, 
			СостояниеДокумента, 
			Документ.Зарегистрировал);
			
			
		НаборКолонок = Новый Массив;
		НаборКолонок.Добавить("regDate");
		НаборКолонок.Добавить("regNumber");
		НаборКолонок.Добавить("status");
		НаборКолонок.Добавить("statusApproval");
		НаборКолонок.Добавить("statusConfirmation");
		НаборКолонок.Добавить("statusRegistration");
		НаборКолонок.Добавить("statusConsideration");
		НаборКолонок.Добавить("statusPerformance");
		НаборКолонок.Добавить("enabledProperties");
		
		Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
			ПолучитьДанныеВходящегоДокумента(Узел, Документ, Результат, НаборКолонок);
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
			ПолучитьДанныеИсходящегоДокумента(Узел, Документ, Результат, НаборКолонок);
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ПолучитьДанныеВнутреннегоДокумента(Узел, Документ, Результат, НаборКолонок);
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocumentRegistrationResponse");
		Ответ.document = Результат;
		Возврат Ответ;
			
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'; en = 'Error registering document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненные объекты XDTO по списку
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetDocumentListRequest 
//
// Возвращаемое значение:
//    ОбъектXDTO типа DMGetDocumentListResponse или DMError
//
Функция ПолучитьДокументы(Сообщение) Экспорт 
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetDocumentListResponse");
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
			
		Если Сообщение.externalObjects.Количество() = 1 Тогда 
			ВнешнийОбъект = Сообщение.externalObjects.Получить(0);
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СсылкаНаОбъектДО,
			|	УзелИнтегрированнойСистемы,
			|	ТипВнешнегоОбъекта,
			|	ИСТИНА КАК СвязиОбъектовИнтегрированныхСистем
			|ИЗ
			|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
			|ГДЕ
			|	СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы В(&УзлыИнтегрируемойСистемы)
			|	И ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта
			|	И (ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта
			|			ИЛИ СвязиОбъектовИнтегрированныхСистем.ТипВнешнегоОбъекта = """")
			|	И (ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.ВходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.ИсходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.ВнутренниеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Контрагенты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Организации)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Валюты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.СтруктураПредприятия)
			|	)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.ВходящиеДокументы.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.ИсходящиеДокументы.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.ВнутренниеДокументы.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	УникальныйИдентификаторИсточника,
			|	Неопределено,
			|	ТипПриемника,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
			|ГДЕ
			|	УникальныйИдентификаторПриемника = &ИДВнешнегоОбъекта
			|	И (ТипПриемника = &ТипПриемника)
			|	И (ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.ВходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.ИсходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.ВнутренниеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.Контрагенты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.Организации)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.Валюты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.СтруктураПредприятия)
			|	)
			|";
			
			Узлы = Новый Массив;
			Узлы.Добавить(Узел);
			Узлы.Добавить(ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка());
			Запрос.УстановитьПараметр("УзлыИнтегрируемойСистемы", Узлы);
			
			Запрос.УстановитьПараметр("ИДВнешнегоОбъекта", ВнешнийОбъект.ID);
			Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ВнешнийОбъект.type);
			// Пока в интеграции участвуют только документы и справочники.
			ТипПриемника = ВнешнийОбъект.type;
			ТипПриемника = СтрЗаменить(ТипПриемника, "Документ.", "ДокументСсылка.");
			ТипПриемника = СтрЗаменить(ТипПриемника, "Справочник.", "СправочникСсылка.");
			Запрос.УстановитьПараметр("ТипПриемника", ТипПриемника);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда 
				СсылкаНаОбъектДО = Выборка.СсылкаНаОбъектДО;
				
				Если (Не ЗначениеЗаполнено(Выборка.УзелИнтегрированнойСистемы) 
					Или Не ЗначениеЗаполнено(Выборка.ТипВнешнегоОбъекта))
					и Выборка.СвязиОбъектовИнтегрированныхСистем Тогда
					ОбработкаЗапросовXDTO.ИсправитьЗаписьСвязиОбъектов(
						СсылкаНаОбъектДО,
						Выборка.УзелИнтегрированнойСистемы,
						Выборка.ТипВнешнегоОбъекта,
						Узел,
						ВнешнийОбъект.type,
						ВнешнийОбъект.ID);
				КонецЕсли;
				
				Если ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Контрагенты") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Организации") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOrganization");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Валюты") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCurrency");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSubdivision");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
					
				КонецЕсли;
				
				МетаданныеОбъектаДО = СсылкаНаОбъектДО.Метаданные();
				Если Не ПравоДоступа("Чтение", МетаданныеОбъектаДО) Тогда 
					Объект.name = НСтр("ru = '<нет прав доступа для просмотра объекта>'; en = '<not enough permissions to view object>'");
					Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаОбъектДО);
					
				Иначе
					
					ЗапросДоступности = Новый Запрос;
					ЗапросДоступности.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Ссылка 
					|ИЗ
					|	" + МетаданныеОбъектаДО.ПолноеИмя() + " 
					|ГДЕ 
					|	Ссылка = &Ссылка";
					ЗапросДоступности.УстановитьПараметр("Ссылка", СсылкаНаОбъектДО);
					
					Если ЗапросДоступности.Выполнить().Пустой() Тогда 
						Объект.name = НСтр("ru = '<нет прав доступа для просмотра документа>'; en = '<not enough permissions to view document>'");
						Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаОбъектДО);
					Иначе	
						
						ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
						Если ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
							
							ПолучитьДанныеВходящегоДокумента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
							
							ПолучитьДанныеИсходящегоДокумента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
							
							ПолучитьДанныеВнутреннегоДокумента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Контрагенты") Тогда 
							
							ПолучитьДанныеКонтрагента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Организации") Тогда 
							
							ПолучитьДанныеОрганизации(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Валюты") Тогда 
							
							ПолучитьДанныеВалюты(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
							
							ПолучитьДанныеПодразделения(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда 
							
							ПолучитьДанныеСтатьиДвиженияДенежныхСредств(ОбъектДО, Объект, Сообщение.columnSet);
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Ответ.documents.Добавить(Объект);
				
			КонецЕсли;
			
		Иначе
			Для Каждого ВнешнийОбъект Из Сообщение.ExternalObjects Цикл
				
				ОбъектыДО = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(
					Узел, ВнешнийОбъект.ID,ВнешнийОбъект.type);
					
				Для Каждого ОбъектДО Из ОбъектыДО Цикл
					
					Если Не ЗначениеЗаполнено(ОбъектДО) Тогда 
						Продолжить;
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
						ПолучитьДанныеВходящегоДокумента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
						ПолучитьДанныеИсходящегоДокумента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
						ПолучитьДанныеВнутреннегоДокумента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.Контрагенты") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
						ПолучитьДанныеКонтрагента(Узел, ОбъектДО, Объект, Сообщение.columnSet);
					Иначе	
						Продолжить;
					КонецЕсли;
					
					Ответ.documents.Добавить(Объект);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка объектов'; en = 'Error retrieving list of objects'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции	

// Получает массив связей документа
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - документ, чьи связи нужно определить
//
// Возвращаемое значение:
//    Массив - массив объектов DMDocumentRelation, описывающих связь
//
Функция ПолучитьСвязанныеДокументы(Ссылка) Экспорт 
	
	СвязиXDTO = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Неопределено КАК ТипСвязи,
		|	Неопределено КАК ТипСвязиПредставление,
		|	ТекущийДокумент.Ссылка КАК Документ,
		|	ТекущийДокумент.Представление КАК ДокументПредставление,
		|	ТекущийДокумент.Заголовок КАК ДокументЗаголовок,
		|	ТекущийДокумент.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
		|	ТекущийДокумент.ДатаРегистрации КАК ДокументДатаРегистрации
		|ИЗ
		|	&ТекущийДокумент КАК ТекущийДокумент
		|ГДЕ
		|	ТекущийДокумент.Ссылка = &Ссылка
		|");
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВнутренниеДокументы) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
			|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК СвязанныеДокументы
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ПО
			|	СвязанныеДокументы.Ссылка = СвязиДокументов.СвязанныйДокумент
			|	И СвязиДокументов.Документ = &Ссылка
			|	И НЕ СвязанныеДокументы.ПометкаУдаления
			|";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
			|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК СвязанныеДокументы
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ПО
			|	СвязанныеДокументы.Ссылка = СвязиДокументов.СвязанныйДокумент
			|	И СвязиДокументов.Документ = &Ссылка
			|	И НЕ СвязанныеДокументы.ПометкаУдаления
			|";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
			|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК СвязанныеДокументы
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ПО
			|	СвязанныеДокументы.Ссылка = СвязиДокументов.СвязанныйДокумент
			|	И СвязиДокументов.Документ = &Ссылка
			|	И НЕ СвязанныеДокументы.ПометкаУдаления
			|
			|";
	КонецЕсли;
		
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		ТекущийДокумент = "Справочник.ВходящиеДокументы";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		ТекущийДокумент = "Справочник.ИсходящиеДокументы";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		ТекущийДокумент = "Справочник.ВнутренниеДокументы";
	Иначе
		Возврат СвязиXDTO;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущийДокумент", ТекущийДокумент);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	СтрокаТекущего = Результат[0];
	
	Для НСтроки = 1 По Результат.Количество() - 1 Цикл
		
		СтрокаСвязанного = Результат[НСтроки];
		
		СвязьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocumentRelation");
		
		// Заполним сам документ.
		
		Если ТипЗнч(СтрокаТекущего.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ИначеЕсли ТипЗнч(СтрокаТекущего.Документ) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ИначеЕсли ТипЗнч(СтрокаТекущего.Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		КонецЕсли;
		
		ДокументXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаТекущего.Документ);
		ДокументXDTO.name = СтрокаТекущего.ДокументПредставление;
		
		ДокументXDTO.title = СтрокаТекущего.ДокументЗаголовок;
		ДокументXDTO.regNumber = СтрокаТекущего.ДокументРегистрационныйНомер;
		ДокументXDTO.regDate = СтрокаТекущего.ДокументДатаРегистрации;
			
		СвязьXDTO.document = ДокументXDTO;
		
		// Заполним тип связи.
		
		ТипСвязиXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRelationType");
		ТипСвязиXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаСвязанного.ТипСвязи);
		ТипСвязиXDTO.name = СтрокаСвязанного.ТипСвязиПредставление;
		
		СвязьXDTO.relationType = ТипСвязиXDTO;
		
		// Заполним связанный документ.
		
		Если ТипЗнч(СтрокаСвязанного.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ИначеЕсли ТипЗнч(СтрокаСвязанного.Документ) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ИначеЕсли ТипЗнч(СтрокаСвязанного.Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		КонецЕсли;
		СвязанныйДокументXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаСвязанного.Документ);
		СвязанныйДокументXDTO.name = СтрокаСвязанного.ДокументПредставление;
		
		СвязанныйДокументXDTO.title = СтрокаСвязанного.ДокументЗаголовок;
		СвязанныйДокументXDTO.regNumber = СтрокаСвязанного.ДокументРегистрационныйНомер;
		СвязанныйДокументXDTO.regDate = СтрокаСвязанного.ДокументДатаРегистрации;
		
		СвязьXDTO.relatedDocument = СвязанныйДокументXDTO;
		
		СвязиXDTO.Добавить(СвязьXDTO);
		
	КонецЦикла;
	
	Возврат СвязиXDTO;
	
КонецФункции

// Получает структуру полей, доступных к изменению в указанном состоянии
//
// Параметры:
//   Документ - СправочникОбъект.<...>Документы
//   Состояние - ПеречислениеСсылка.СостоянияДокументов
//
// Возвращаемое значение:
//   Структура, ключами которой являются имена изменяемых реквизитов
//
Функция ПолучитьДоступностьПолейПоСостоянию(Документ, Состояние)
	
	ДоступныеПоля = "";
	
	Если Не Константы.ИспользоватьСостоянияДокументов.Получить() Тогда 
		Возврат ДоступныеПоля;
	КонецЕсли;
	
	Если Не Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить() Тогда 
		Возврат ДоступныеПоля;
	КонецЕсли;
		
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат ДоступныеПоля;
	КонецЕсли;
	
	ДоступныеПоля = Новый Структура;
	
	ДоступныеПоля.Вставить("openFile");
	ДоступныеПоля.Вставить("externalObject");
	
	Если Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Получить()
		Или Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		ДоступныеПоля.Вставить("status");
	КонецЕсли;
	
	ДоступныеПоля.Вставить("statusApproval");
	ДоступныеПоля.Вставить("statusConfirmation");
	ДоступныеПоля.Вставить("statusRegistration");
	ДоступныеПоля.Вставить("statusConsideration");
	ДоступныеПоля.Вставить("statusPerformance");
	
	ИменаДоступныхПолей = Новый Массив;
	ИменаНедоступныхПолей = Новый Массив;
	Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
		Документ, ИменаДоступныхПолей, ИменаНедоступныхПолей);
	
	Если ТипЗнч(Документ) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда 
		ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда 
		ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда 
		ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
	КонецЕсли;
	
	ИменаПолейИКоманд = 
		Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности(ТипДокумента);
	
	ДоступныеПоля.Вставить("register");
	ДоступныеПоля.Вставить("addFile");
	ДоступныеПоля.Вставить("editFile");
	ДоступныеПоля.Вставить("additionalProperties");
	
	Для Каждого ИмяПоля Из ИменаНедоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураИмен = Новый Структура(НайденнаяСтрока.ИменаDMService);
			Для Каждого Элемент Из СтруктураИмен Цикл
				ДоступныеПоля.Удалить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ИмяПоля Из ИменаДоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураИмен = Новый Структура(НайденнаяСтрока.ИменаDMService);
			Для Каждого Элемент Из СтруктураИмен Цикл
				ДоступныеПоля.Вставить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДоступныеПоля;
	
КонецФункции

// Устарела, подлежит удалению.
//
Функция СоответствиеСвойствXDTOиПолейБазыДанных() Экспорт 
	
	СоответствиеРеквизитов = Новый Структура;

	СоответствиеРеквизитов.Вставить("Заголовок", "title");
	СоответствиеРеквизитов.Вставить("Содержание", "summary");
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции	

// Помещает в базу изменения файлов по запросу DMUpdateFilesRequest и возвращает ответ.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMUpdateFilesRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUpdateFilesResponse
//
Функция ЗаписатьИзмененияФайлов(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUpdateFilesResponse");
		Ответ.dataBaseId = Сообщение.dataBaseId;
		Узел =  ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Для Каждого Объект Из Сообщение.objects Цикл
			
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, Заголовок");
			ЗаписатьДанныеФайлов(Узел, ДанныеДокумента, Объект.files);
			
		КонецЦикла;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(
			НСтр("ru = 'Ошибка при обновлении файлов документа %1'; en = 'Error while updating files of %1 document'"),
			Объект.name);
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Заполняет набор имен колонок, описывающих файлы документа.
//
// Параметры:
//   НаборКолонокФайлов - Массив - неявно возвращаемое значение, заполняемый массив.
//   ДляОбмена - Булево - Истина, если нужен сокращенный набор колонок для обмена.
//
Процедура ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена)
	
	НаборКолонокФайлов.Добавить("objectId");
	НаборКолонокФайлов.Добавить("scannedOriginal");
	НаборКолонокФайлов.Добавить("deletionMark");
	
	Если ДляОбмена Тогда
		Возврат;
	КонецЕсли;
	
	НаборКолонокФайлов.Добавить("signed");
	НаборКолонокФайлов.Добавить("name");
	НаборКолонокФайлов.Добавить("size");
	НаборКолонокФайлов.Добавить("creationDate");
	НаборКолонокФайлов.Добавить("modificationDateUniversal");
	НаборКолонокФайлов.Добавить("author");
	НаборКолонокФайлов.Добавить("extension");
	НаборКолонокФайлов.Добавить("description");
	НаборКолонокФайлов.Добавить("editing");
	НаборКолонокФайлов.Добавить("encrypted");
	
	НаборКолонокФайлов.Добавить("signatures.author");
	НаборКолонокФайлов.Добавить("signatures.date");
	НаборКолонокФайлов.Добавить("signatures.comment");
	НаборКолонокФайлов.Добавить("signatures.signature");
	НаборКолонокФайлов.Добавить("signatures.thumbprint");
	НаборКолонокФайлов.Добавить("signatures.signer");
	НаборКолонокФайлов.Добавить("signatures.certificate");
	НаборКолонокФайлов.Добавить("signatures.signatureFileName");
	
КонецПроцедуры

// Записывает файлы документа, обновляя их согласно переданному списку
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ДокументОбъект - СправочникОбъект.<...>Документ
//   ФайлыXDTO - СписокXDTO объектов типа DMFile
//
Процедура ЗаписатьДанныеФайлов(Узел, ДокументОбъект, ФайлыXDTO)
	
	Если ФайлыXDTO.Количество() <> 0 Тогда
	
		МассивПодчиненныхФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ДокументОбъект.Ссылка);
		
		Для Каждого ФайлXDTO Из ФайлыXDTO Цикл
			
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ФайлXDTO.objectId);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Если МассивПодчиненныхФайлов.Найти(Ссылка) = Неопределено Тогда // файл не найден
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
						НСтр("ru = 'Файл ""%1"" не входит в число файлов документа'; en = 'File ""%1"" does not belong to the document files'") +  """%2""", 
						ФайлXDTO.name, ДокументОбъект.Заголовок);
					
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				ОбработкаЗапросовXDTOФайлы.ИзменитьФайл(Узел, ФайлXDTO);
			Иначе
				
				ФайлОбновлен = Ложь;
				Для каждого Файл Из МассивПодчиненныхФайлов Цикл
					Если Строка(Файл) = ФайлXDTO.name Тогда
						
						СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
						СведенияОФайле.АдресВременногоХранилищаФайла = 
							ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
						Если ФайлXDTO.Установлено("text") Тогда
							СведенияОФайле.АдресВременногоХранилищаТекста = 
								Новый ХранилищеЗначения(ФайлXDTO.Text);
						КонецЕсли;
						СведенияОФайле.ВремяИзменения = ФайлXDTO.modificationDate;
						СведенияОФайле.ВремяИзмененияУниверсальное = ФайлXDTO.modificationDateUniversal;
						СведенияОФайле.Размер = ФайлXDTO.size;
						СведенияОФайле.ИмяБезРасширения = ФайлXDTO.name;
						СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
						
						РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(Файл, СведенияОФайле);
						
						ФайлОбновлен = Истина;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
				Если Не ФайлОбновлен Тогда
					
					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.АдресВременногоХранилищаФайла = 
						ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
					Если ФайлXDTO.Установлено("text") Тогда
						СведенияОФайле.АдресВременногоХранилищаТекста = 
							Новый ХранилищеЗначения(ФайлXDTO.Text);
					КонецЕсли;
					СведенияОФайле.ВремяИзменения = ФайлXDTO.modificationDate;
					СведенияОФайле.ВремяИзмененияУниверсальное = ФайлXDTO.modificationDateUniversal;
					СведенияОФайле.Размер = ФайлXDTO.size;
					СведенияОФайле.ИмяБезРасширения = ФайлXDTO.name;
					СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
					
					ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ДокументОбъект.Ссылка, СведенияОФайле);
					
					Если ФайлXDTO.signatures.Количество() > 0 Тогда
						ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(ФайлXDTO.signatures, ФайлСсылка);
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

// Возвращает массив подписей документа
//
// Параметры:
//   ДокументСсылка - СправочникСсылка.<...>Документ
//
// Возвращаемое значение:
//   Массив - массив структур, описывающих подписи документа:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.<...>Документ - ДокументСсылка
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Функция ЗаполнитьСписокПодписей(ДокументСсылка)
	
	МассивПодписей = Новый Массив;
	
	ЗаполнитьСписокПодписейДокумента(ДокументСсылка, МассивПодписей);
	
	Возврат МассивПодписей;
	
КонецФункции	

// Заполняет список подписей файла по объекту Документооборота
//
// Параметры:
//   ТекущийОбъект - СправочникСсылка.Файлы
//   МассивПодписей - Массив - неявно возвращаемый массив структур, описывающих подписи файла:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.Файлы - ТекущийОбъект
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Процедура ЗаполнитьСписокПодписейФайла(ТекущийОбъект, МассивПодписей) Экспорт
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
			|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
			|	ЭлектронныеПодписи.Подпись КАК Подпись,
			|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
			|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
			|	ЭлектронныеПодписи.Сертификат КАК Сертификат
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|ГДЕ
			|	ЭлектронныеПодписи.Объект = &ОбъектСсылка";
				   
		Запрос.Параметры.Вставить("ОбъектСсылка", ТекущийОбъект);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("КомуВыданСертификат, ДатаПодписи, Комментарий, Объект, Отпечаток, УстановившийПодпись, Подпись, Сертификат, ИмяФайлаПодписи");
			
			НоваяСтрока.КомуВыданСертификат = ВыборкаЗапроса.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			НоваяСтрока.Комментарий = ВыборкаЗапроса.Комментарий;
			НоваяСтрока.Объект = ТекущийОбъект;
			НоваяСтрока.Отпечаток = ВыборкаЗапроса.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			НоваяСтрока.ИмяФайлаПодписи = ВыборкаЗапроса.ИмяФайлаПодписи;
			
			НоваяСтрока.Подпись = ВыборкаЗапроса.Подпись.Получить();
			НоваяСтрока.Сертификат = ВыборкаЗапроса.Сертификат.Получить();
			
			МассивПодписей.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей файла в объекте XDTO по переданному списку
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMDocument, чьи подписи нужно заполнить
//   МассивПодписей - Массив - структуры, описывающие подписи документа к переносу в XDTO:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.<...>Документ, СправочникСсылка.Файлы - владелец подписи
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Процедура ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей)
	
	Для Каждого Подпись Из МассивПодписей Цикл
		
		ПодписьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSignature");
		
		Объект = Подпись.Объект;
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда	
			Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подпись.Объект, "Владелец");
		КонецЕсли;
		
		Для Каждого КлючИЗначениеПодписи Из Подпись Цикл
			
			Если КлючИЗначениеПодписи.Ключ = "КомуВыданСертификат" Тогда
				ПодписьXDTO.author = Подпись.КомуВыданСертификат;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "ДатаПодписи" Тогда
				ПодписьXDTO.date = Подпись.ДатаПодписи;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Комментарий" Тогда
				ПодписьXDTO.comment = Подпись.Комментарий;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Подпись" Тогда
				ПодписьXDTO.signature = Подпись.Подпись;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Отпечаток" Тогда
				ПодписьXDTO.thumbprint = Подпись.Отпечаток;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Сертификат" Тогда
				ПодписьXDTO.certificate = Подпись.Сертификат;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "ИмяФайлаПодписи" Тогда
				ПодписьXDTO.signatureFileName = Подпись.ИмяФайлаПодписи;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "УстановившийПодпись" Тогда
				ПодписьXDTO.signer = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
				ПодписьXDTO.signer.name = Строка(Подпись.УстановившийПодпись); 
				ПодписьXDTO.signer.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
				ПодписьXDTO.signer.objectId.id = Строка(Подпись.УстановившийПодпись.УникальныйИдентификатор()); 
				ПодписьXDTO.signer.objectId.type = "DMUser";
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектXDTO.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список подписей документа по данным Документооборота
//
// Параметры:
//   ТекущийОбъект - СправочникСсылка.<...>Документ
//   МассивПодписей - Массив - неявно возвращаемый массив структур, описывающих подписи документа:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.<...>Документ - ТекущийОбъект
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Процедура ЗаполнитьСписокПодписейДокумента(ТекущийОбъект, МассивПодписей) Экспорт
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект);
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("КомуВыданСертификат, ДатаПодписи, Комментарий, Объект, Отпечаток, УстановившийПодпись, Подпись, Сертификат, ИмяФайлаПодписи");
			
			НоваяСтрока.КомуВыданСертификат = ВыборкаЗапроса.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			НоваяСтрока.Комментарий = ВыборкаЗапроса.Комментарий;
			НоваяСтрока.Объект = ТекущийОбъект;
			НоваяСтрока.Отпечаток = ВыборкаЗапроса.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			НоваяСтрока.ИмяФайлаПодписи = ВыборкаЗапроса.ИмяФайлаПодписи;
			
			НоваяСтрока.Подпись = ВыборкаЗапроса.Подпись.Получить();
			НоваяСтрока.Сертификат = ВыборкаЗапроса.Сертификат.Получить();
			
			МассивПодписей.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет и записывает состояние документа по данным объекта XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Документ - СправочникОбъект.<...>Документ
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMDocument
//
Процедура ЗаполнитьСостоянияДокумента(Узел, Документ, ОбъектXDTO)
	
	Если ОбъектXDTO.Установлено("status") Тогда
		СостояниеДокумента = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, СостояниеДокумента, ОбъектXDTO, "status");
		Если Не ЗначениеЗаполнено(СостояниеДокумента) Тогда 
			СостояниеДокумента = Перечисления.СостоянияДокументов.НаРегистрации;
		КонецЕсли;
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка, 
			ТекущаяДата(), 
			СостояниеДокумента, 
			ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	СоответствиеСостояний = Новый Соответствие;
	СоответствиеСостояний.Вставить("Согласование", "statusApproval");
	СоответствиеСостояний.Вставить("Утверждение",  "statusConfirmation");
	СоответствиеСостояний.Вставить("Регистрация",  "statusRegistration");
	СоответствиеСостояний.Вставить("Рассмотрение", "statusConsideration");
	СоответствиеСостояний.Вставить("Исполнение",   "statusPerformance");
	
	Для Каждого Строка Из СоответствиеСостояний Цикл
		ИмяСостояния = Строка.Ключ;
		ИмяСвойства = Строка.Значение;
		ТекущееСостояние = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
		Если ОбъектXDTO.Установлено(ИмяСвойства) Тогда
			НовоеСостояние = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO[ИмяСвойства].objectId);
			Если НовоеСостояние = Неопределено Тогда
				НовоеСостояние = Перечисления.СостоянияДокументов.ПустаяСсылка();
			КонецЕсли;
			Если ТекущееСостояние.Состояние <> НовоеСостояние Тогда
				Если Не ЗначениеЗаполнено(НовоеСостояние) Тогда
					Делопроизводство.ОчиститьСостояниеДокумента(Документ.Ссылка, ТекущееСостояние.Состояние)
				Иначе 
					Делопроизводство.ЗаписатьСостояниеДокумента(Документ.Ссылка, ТекущаяДатаСеанса(), 
						НовоеСостояние, ПользователиКлиентСервер.ТекущийПользователь());
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 
// Заполняет данными документа структуру реквизитов, общих для всех типов документов
//
// Параметры:
//   ДанныеДокумента - Структура, неявно возвращаемое значение
//   Документ - СправочникОбъект.<...>Документ - источник данных заполнения
//
Процедура ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ)
	
	ДанныеДокумента.Вставить("documentType", Документ.ВидДокумента);
	ДанныеДокумента.Вставить("title", Документ.Заголовок);
	ДанныеДокумента.Вставить("summary", Документ.Содержание);
	ДанныеДокумента.Вставить("comment", Документ.Комментарий);
	ДанныеДокумента.Вставить("regNumber", Документ.РегистрационныйНомер);
	ДанныеДокумента.Вставить("regDate", Документ.ДатаРегистрации);
	ДанныеДокумента.Вставить("sum", Документ.Сумма);
	ДанныеДокумента.Вставить("currency", Документ.Валюта);
	ДанныеДокумента.Вставить("organization", Документ.Организация);
	ДанныеДокумента.Вставить("subdivision", Документ.Подразделение);
	ДанныеДокумента.Вставить("accessLevel", Документ.ГрифДоступа);
	ДанныеДокумента.Вставить("performanceDate", Документ.СрокИсполнения);
	ДанныеДокумента.Вставить("activityMatter",Документ.ВопросДеятельности);
	ДанныеДокумента.Вставить("responsible", Документ.Ответственный);
	ДанныеДокумента.Вставить("project", Документ.Проект);
	ДанныеДокумента.Вставить("template", Документ.Шаблон);
	ДанныеДокумента.Вставить("deletionMark", Документ.ПометкаУдаления);

КонецПроцедуры

// Заполняет структуру общих настроек, относящихся к документам
//
Процедура ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ)
	
	ДанныеДокумента.Вставить("organizationEnabled", Константы.ИспользоватьУчетПоОрганизациям.Получить());
	
	Если ТипЗнч(Документ) = Тип("СправочникОбъект.ВнутренниеДокументы")
		И ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		
		ВестиУчетПоОрганизациям = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента,
			"ВестиУчетПоОрганизациям");
			
		ДанныеДокумента.organizationEnabled = ДанныеДокумента.organizationEnabled
			И ВестиУчетПоОрганизациям;
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("activityMatterEnabled", Константы.ИспользоватьВопросыДеятельности.Получить());
	ДанныеДокумента.Вставить("accessLevelEnabled", Константы.ИспользоватьГрифыДоступа.Получить());
	ДанныеДокумента.Вставить("filesEnabled", Константы.ИспользоватьФайлыУВходящихДокументов.Получить());
	ДанныеДокумента.Вставить("statusEnabled", Константы.ИспользоватьСостоянияДокументов.Получить());
	ДанныеДокумента.Вставить("statusChangeEnabled", РольДоступна("ПолныеПрава")
		Или Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Получить());
	ДанныеДокумента.Вставить("limitPropertiesAvailability", Не РольДоступна("ПолныеПрава")
		И Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить());
	ДанныеДокумента.Вставить("projectsEnabled", Константы.ВестиУчетПоПроектам.Получить());

	Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗаполнениеНаименованияПоШаблону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон,
			"ЗаполнениеНаименованияПоШаблону");
		ДанныеДокумента.Вставить("titleBlockedByTemplate", ЗаполнениеНаименованияПоШаблону);
	Иначе
		ДанныеДокумента.Вставить("titleBlockedByTemplate", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ значениями свойство объекта XDTO, общими для всех типов документов
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ДокументОбъект - СправочникОбъект.<...>Документ - заполняемый документ
//   ОбъектXDTO - ОбъектXDTO - источник данных для заполнения
//
Процедура ЗаполнитьОбщиеДанныеДокумента(Узел, ДокументОбъект, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Заголовок, ОбъектXDTO, "title");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Содержание, ОбъектXDTO, "summary");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.СрокИсполнения, ОбъектXDTO, "performanceDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.РегистрационныйНомер, ОбъектXDTO, "regNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ДатаРегистрации, ОбъектXDTO, "regDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Сумма, ОбъектXDTO, "sum");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Валюта, ОбъектXDTO, "currency");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Организация, ОбъектXDTO, "organization");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Подразделение, ОбъектXDTO, "subdivision");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ГрифДоступа, ОбъектXDTO, "accessLevel");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ВидДокумента, ОбъектXDTO, "documentType");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Ответственный, ОбъектXDTO, "responsible");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ВопросДеятельности, ОбъектXDTO, "activityMatter"); 
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Проект, ОбъектXDTO, "project"); 
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Шаблон, ОбъектXDTO, "template"); 
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ПометкаУдаления, ОбъектXDTO, "deletionMark"); 
	
КонецПроцедуры

// Заполняет данными шаблона документа структуру реквизитов, общих для всех типов.
//
// Параметры:
//   ДанныеШаблона - Структура, неявно возвращаемое значение.
//   Шаблон - СправочникОбъект.Шаблон<...>Документа - источник данных заполнения.
//
Процедура ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, Шаблон)
	
	ДанныеШаблона.Вставить("documentType", 		Шаблон.ВидДокумента);
	ДанныеШаблона.Вставить("title", 			Шаблон.Заголовок);
	ДанныеШаблона.Вставить("summary", 			Шаблон.Содержание);
	ДанныеШаблона.Вставить("comment", 			Шаблон.КомментарийКДокументу);
	ДанныеШаблона.Вставить("organization", 		Шаблон.Организация);
	ДанныеШаблона.Вставить("subdivision", 		Шаблон.Подразделение);
	ДанныеШаблона.Вставить("accessLevel", 		Шаблон.ГрифДоступа);
	ДанныеШаблона.Вставить("performanceTerm", 	Шаблон.ДлительностьИсполнения);
	ДанныеШаблона.Вставить("activityMatter", 	Шаблон.ВопросДеятельности);
	ДанныеШаблона.Вставить("responsible", 		Шаблон.Ответственный);
	ДанныеШаблона.Вставить("project",			Шаблон.Проект);
	ДанныеШаблона.Вставить("blockDerivedDocuments",
		Шаблон.ЗапретитьИзменятьРеквизитыИзШаблона);
	
КонецПроцедуры

// Устанавливает новому объекту ссылку, заданную свойством externalObject, если возможно
//
// Параметры:
//   НовыйОбъект - СправочникОбъект
//   ОбъектXDTO - ОбъектXDTO произвольного типа
//
Процедура УстановитьСсылкуНовогоДляСправочника(НовыйОбъект, ОбъектXDTO) 
	
	Если НЕ ОбъектXDTO.Установлено("externalObject") Тогда
		Возврат;
	КонецЕсли;
	
	ВидСправочника = НовыйОбъект.Метаданные().Имя;
	ИдентификаторВнешнегоОбъекта = Новый УникальныйИдентификатор(ОбъектXDTO.externalObject.id);
	СсылкаДО = Справочники[ВидСправочника].ПолучитьСсылку(ИдентификаторВнешнегоОбъекта);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	Ссылка
		|ИЗ
		|	Справочник." + ВидСправочника + "
		|ГДЕ 
		|	Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаДО);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйОбъект.УстановитьСсылкуНового(СсылкаДО);
	КонецЕсли;
	
КонецПроцедуры

// Получает ссылку по идентификатору внешнего объекта, если объект существует в БД
//
// Параметры:
//	 Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   ОбъектXDTO - ОбъектXDTO произвольного типа
//   ВидСправочника - Строка - вид справочника
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка, если объект найден по идентификатору
//   Неопределено - если объект не найден
//
Функция СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(Узел, ОбъектXDTO, ВидСправочника) 
	
	Если НЕ ОбъектXDTO.Установлено("externalObject") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторВнешнегоОбъекта = Новый УникальныйИдентификатор(ОбъектXDTO.externalObject.id);
	СсылкаПоИдентификатору = Справочники[ВидСправочника].ПолучитьСсылку(ИдентификаторВнешнегоОбъекта);
	// у связей, сохраненных в регистре - приоритет
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	СсылкаНаОбъектДО КАК Ссылка,
		|	УзелИнтегрированнойСистемы КАК УзелИнтегрированнойСистемы,
		|	ТипВнешнегоОбъекта КАК ТипВнешнегоОбъекта,
		|	ИСТИНА КАК ЗаписьРегистра
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем
		|ГДЕ
		|	УзелИнтегрированнойСистемы В(&Узлы)
		|	И ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник." + ВидСправочника + ")
		|	И ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта 
		|	И (ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта ИЛИ ТипВнешнегоОбъекта = """")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1 
		|	Ссылка,
		|	Неопределено,
		|	Неопределено,
		|	ЛОЖЬ КАК ЗаписьРегистра
		|ИЗ 
		|	Справочник." + ВидСправочника + "
		|ГДЕ 
		|	Ссылка = &СсылкаПоИдентификатору");
	Узлы = Новый Массив;
	Узлы.Добавить(Узел);
	Запрос.УстановитьПараметр("Узлы", Узел);
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	Запрос.УстановитьПараметр("ИДВнешнегоОбъекта", ОбъектXDTO.externalObject.id);
	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ОбъектXDTO.externalObject.type);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЗаписьРегистра
			И (Не ЗначениеЗаполнено(Выборка.УзелИнтегрированнойСистемы) 
			Или Не ЗначениеЗаполнено(Выборка.ТипВнешнегоОбъекта)) Тогда
			ОбработкаЗапросовXDTO.ИсправитьЗаписьСвязиОбъектов(
				Выборка.Ссылка,
				Выборка.УзелИнтегрированнойСистемы, 
				Выборка.ТипВнешнегоОбъекта, 
				Узел,
				ОбъектXDTO.externalObject.type,
				ОбъектXDTO.externalObject.id);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Заполняет признак "Содержит оригиналы" для указанного документа
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, заполняемый документ
//   Документ - СправочникСсылка.<...>Документ, ссылка на источник данных
//
Процедура ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СодержитОригинал
		|ИЗ
		|	РегистрСведений.ОбщиеРеквизитыДокументов
		|ГДЕ
		|	Документ = &Документ
		|");
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектXDTO.containsScannedOriginals = Выборка.СодержитОригинал;
	Иначе
		ОбъектXDTO.containsScannedOriginals = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет коллекцию виз для указанного документа.
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, заполняемый документ.
//   Документ - СправочникСсылка.<...>Документ, ссылка на источник данных.
//   Шаблон - СправочникСсылка.Шаблоны<...>Документов, ссылка на шаблон документа.
//
Процедура ЗаполнитьВизыДокумента(ОбъектXDTO, Документ, Шаблон)
	
	Если ЗначениеЗаполнено(Документ) Тогда // существующие визы
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВизыСогласования.Ссылка КАК Ссылка,
			|	ВизыСогласования.Наименование КАК Наименование,
			|	ВЫБОР
			|		КОГДА ВизыСогласования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ВизыСогласования.РольИсполнителя.Владелец
			|		КОГДА ВизыСогласования.Исполнитель = Неопределено
			|			ТОГДА ВизыСогласования.РольИсполнителя.Владелец
			|		КОГДА  ВизыСогласования.Исполнитель ССЫЛКА Справочник.ПолныеРоли
			|			ТОГДА ВизыСогласования.Исполнитель.Владелец
			|		ИНАЧЕ
			|			ВизыСогласования.Исполнитель
			|	КОНЕЦ КАК Исполнитель,
			|	ВЫБОР
			|		КОГДА ВизыСогласования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВизыСогласования.РольИсполнителя)
			|		КОГДА ВизыСогласования.Исполнитель = Неопределено
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВизыСогласования.РольИсполнителя)
			|		ИНАЧЕ
			|			ПРЕДСТАВЛЕНИЕ(ВизыСогласования.Исполнитель)
			|	КОНЕЦ КАК ПредставлениеИсполнителя,
			|	ВизыСогласования.УстановилРезультат КАК УстановилРезультат,
			|	ВизыСогласования.ДатаИсполнения КАК Дата,
			|	ВизыСогласования.Подписана КАК Подписана,
			|	ЕСТЬNULL(Подписи.ДатаПроверкиПодписи, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПодписьПроверена,
			|	ЕСТЬNULL(Подписи.ПодписьВерна, ЛОЖЬ) КАК ПодписьВерна,
			|	ВизыСогласования.РезультатСогласования КАК Результат,
			|	ВизыСогласования.Комментарий КАК Комментарий
			|ИЗ
			|	Справочник.ВизыСогласования КАК ВизыСогласования
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК Подписи
			|		ПО (Подписи.Объект = ВизыСогласования.Ссылка)
			|ГДЕ
			|	ВизыСогласования.Документ = &Документ
			|	И НЕ ВизыСогласования.ПометкаУдаления
			|	И НЕ ВизыСогласования.Удалена
			|	И НЕ ВизыСогласования.ПомещенаВИсторию");
			
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВизаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMVisa");
			ВизаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
			ВизаXDTO.name = Выборка.Наименование;
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
				"reviewer", Выборка.Исполнитель);
			ВизаXDTO.reviewer.name = Выборка.ПредставлениеИсполнителя;
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO, 
				"addedBy", Выборка.УстановилРезультат);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
				"result", Выборка.Результат);
				
			ВизаXDTO.date = Выборка.Дата;
			ВизаXDTO.signed = Выборка.Подписана;
			ВизаXDTO.signatureChecked = Выборка.ПодписьПроверена;
			ВизаXDTO.signatureValid = Выборка.ПодписьВерна;
			ВизаXDTO.comment = Выборка.Комментарий;
			
			ОбъектXDTO.visas.Добавить(ВизаXDTO);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(Шаблон) Тогда
		
		ВизыШаблона = Новый ТаблицаЗначений;
		ВизыШаблона.Колонки.Добавить("Исполнитель");
		ВизыШаблона.Колонки.Добавить("РольИсполнителя");
		ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(Шаблон, ВизыШаблона);
		
		Для Каждого ВизаШаблона Из ВизыШаблона Цикл
			
			ПустаяСсылка = Справочники.ВизыСогласования.ПустаяСсылка();
			
			ВизаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMVisa");
			ВизаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ПустаяСсылка);
			ВизаXDTO.name = НСтр("ru = 'Виза согласования шаблона документа'; en = 'Approval endorsement in document template'");
			
			Если ТипЗнч(ВизаШаблона.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВизаШаблона.Исполнитель,
					"Владелец");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", РольИсполнителя);
			ИначеЕсли Не ЗначениеЗаполнено(ВизаШаблона.Исполнитель)
				И ЗначениеЗаполнено(ВизаШаблона.РольИсполнителя) Тогда
				РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВизаШаблона.РольИсполнителя,
					"Владелец");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", РольИсполнителя);
			Иначе
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", ВизаШаблона.Исполнитель);
			КонецЕсли;
			
			ВизаXDTO.date = Дата(1, 1, 1);
			ВизаXDTO.signed = Ложь;
			ВизаXDTO.signatureChecked = Ложь;
			ВизаXDTO.signatureValid = Ложь;
			ВизаXDTO.comment = "";
			
			ОбъектXDTO.visas.Добавить(ВизаXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет коллекцию резолюций для указанного документа.
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, заполняемый документ.
//   Документ - СправочникСсылка.<...>Документ, ссылка на источник данных.
//
Процедура ЗаполнитьРезолюцииДокумента(ОбъектXDTO, Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Ссылка КАК Ссылка,
		|	Резолюции.Наименование КАК Наименование,
		|	ВЫБОР КОГДА Резолюции.АвторРезолюции ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА Резолюции.АвторРезолюции.Владелец
		|		ИНАЧЕ Резолюции.АвторРезолюции
		|	КОНЕЦ КАК АвторРезолюции,
		|	Резолюции.ВнесРезолюцию КАК ВнесРезолюцию,
		|	Резолюции.ДатаРезолюции КАК Дата,
		|	Резолюции.Подписана КАК Подписана,
		|	ЕСТЬNULL(Подписи.ДатаПроверкиПодписи, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПодписьПроверена,
		|	ЕСТЬNULL(Подписи.ПодписьВерна, ЛОЖЬ) КАК ПодписьВерна,
		|	Резолюции.ТекстРезолюции КАК Текст
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК Подписи
		|		ПО (Подписи.Объект = Резолюции.Ссылка)
		|ГДЕ
		|	Резолюции.Документ = &Документ
		|	И НЕ Резолюции.ПометкаУдаления");
		
	Запрос.УстановитьПараметр("Документ", Документ);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РезолюцияXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMResolution");
		РезолюцияXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		РезолюцияXDTO.name = Выборка.Наименование;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(РезолюцияXDTO, 
			"reviewer", Выборка.АвторРезолюции);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(РезолюцияXDTO, 
			"addedBy", Выборка.ВнесРезолюцию);
		РезолюцияXDTO.date = Выборка.Дата;
		РезолюцияXDTO.signed = Выборка.Подписана;
		РезолюцияXDTO.signatureChecked = Выборка.ПодписьПроверена;
		РезолюцияXDTO.signatureValid = Выборка.ПодписьВерна;
		РезолюцияXDTO.text = Выборка.Текст;
		
		ОбъектXDTO.resolutions.Добавить(РезолюцияXDTO);
		
	КонецЦикла;
		
КонецПроцедуры

// Создает и записывает визы согласования согласно шаблону документа.
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы,
//              СправочникСсылка.ИсходящиеДокументы - документ, созданный по шаблону.
//   Шаблон -  СправочникСсылка.ШаблоныВнутреннихДокументов,
//             СправочникСсылка.ШаблоныИсходящихДокументов - исходный шаблон.
//
Процедура ЗаписатьВизыСогласноШаблону(Документ, Шаблон)
	
	Если Не ЗначениеЗаполнено(Документ)
		Или Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ВизыШаблона = Новый ТаблицаЗначений;
	ВизыШаблона.Колонки.Добавить("Исполнитель");
	ВизыШаблона.Колонки.Добавить("РольИсполнителя");
	ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(Шаблон, ВизыШаблона);
	
	Порядок = 0;
	
	Для Каждого ВизаШаблона Из ВизыШаблона Цикл
		
		Порядок = Порядок + 1;
		
		НоваяВиза = Справочники.ВизыСогласования.СоздатьЭлемент();
		НоваяВиза.Наименование = РаботаСВизамиСогласования.ПолучитьНаименованиеВизы(Документ);
		НоваяВиза.Документ = Документ;
		НоваяВиза.Исполнитель = ВизаШаблона.Исполнитель;
		НоваяВиза.РольИсполнителя = ВизаШаблона.РольИсполнителя;
		НоваяВиза.Автор = Пользователи.ТекущийПользователь();
		НоваяВиза.Порядок = Порядок;
		НоваяВиза.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает участников рабочей группы шаблону документа.
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы,
//              СправочникСсылка.ВходящиеДокументы,
//              СправочникСсылка.ИсходящиеДокументы - документ, созданный по шаблону.
//   Шаблон -  СправочникСсылка.ШаблоныВнутреннихДокументов,
//             СправочникСсылка.ШаблоныВходящихДокументов,
//             СправочникСсылка.ШаблоныИсходящихДокументов - исходный шаблон.
//
Процедура ЗаписатьРабочуюГруппуСогласноШаблону(Документ, Шаблон)
	
	Если Не ЗначениеЗаполнено(Документ)
		Или Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	РабочаяГруппаШаблона = Шаблон.РабочаяГруппаДокумента.Выгрузить();
	
	Для каждого РабочаяГруппаСтрока Из РабочаяГруппаШаблона Цикл
		
		Если Не ЗначениеЗаполнено(РабочаяГруппаСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("Строка") Тогда
			
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				РабочаяГруппаСтрока.Участник,
				Документ);
				
			Если ЗначениеАвтоподстановки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.РабочиеГруппы")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников,
					ЗначениеАвтоподстановки,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
				
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
					ЗначениеАвтоподстановки.РольИсполнителя,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда 
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					
					Если ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.Пользователи")
						Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.РабочиеГруппы")
						Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент,
							РабочаяГруппаСтрока.Изменение);
						
					ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура") Тогда 
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников, 
							ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
							РабочаяГруппаСтрока.Изменение);
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'; en = 'Auto-substitution function returned an incorrect value of working group member.'");
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'; en = 'Auto-substitution function returned an incorrect value of working group member.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение);
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'В шаблоне некорректно задан участник рабочей группы.'; en = 'Working group member is specified incorrectly in the template.'");
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		Документ,
		ТаблицаУчастников,
		Истина);
	
КонецПроцедуры

// Записывает расшифровку суммы документа по статьям ДДС.
//
Процедура ЗаписатьСтатьиДДСДокумента(Узел, ДокументОбъект, ОбъектXDTO)
	
	// Заполним статьи ДДС.
	ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументОбъект.ВидДокумента, "ВестиУчетПоСтатьямДДС");
	Если ВестиУчетПоСтатьямДДС = Истина
		и ОбъектXDTO.Установлено("cashFlowRows") Тогда
		
		СтатьиДвиженияДенежныхСредств = Новый ТаблицаЗначений;
		СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
		СтатьиДвиженияДенежныхСредств.Колонки.Добавить("Сумма");
		СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СуммаНДС");
		
		Для каждого СтрокаXDTO из ОбъектXDTO.cashFlowRows.rows Цикл
			Строка = СтатьиДвиженияДенежныхСредств.Добавить();
			Если Не ЗначениеЗаполнено(СтрокаXDTO.item.objectId.id) 
				И СтрокаXDTO.item.Установлено("ExternalObject") Тогда 
				Строка.СтатьяДвиженияДенежныхСредств 
					= НайтиСоздатьСтатьюДвиженияДенежныхСредств(Узел, СтрокаXDTO.item);
			Иначе
				Строка.СтатьяДвиженияДенежныхСредств 
					= ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(СтрокаXDTO.item.objectId);
				КонецЕсли;
				Строка.Сумма = СтрокаXDTO.total;
				Строка.СуммаНДС = СтрокаXDTO.VAT;
		КонецЦикла;
			
		РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ЗаписатьСтатьиДокумента(
			ДокументОбъект.Ссылка, СтатьиДвиженияДенежныхСредств)
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
