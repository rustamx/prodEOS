////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, редакция КОРП
// Реализует дополнительный функционал веб-сервиса DMService редакции КОРП
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Дополнительная обработка сообщения XDTO
// Вызывается из ОбработкаЗапросовXDTOПереопределяемый.ОбработатьУниверсальноеСообщение
//
// Параметры:
//   Сообщение - ОбъектXDTO, потомок DMRequest
//
// Возвращаемое значение:
//   ОбъектXDTO, потомок DMResponse - если сообщение считается обработанным, или
//   Неопределено - если сообщение требует дальнейшей обработки
// 
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		Если ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMAcceptTasksRequest") Тогда
			Возврат ПринятьЗадачиКИсполнению(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetCorrespondenceTreeRequest") Тогда
			Возврат ОбработкаЗапросовXDTOПочта.ПолучитьДеревоПисем(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetNewEMailRequest") Тогда
			Возврат ОбработкаЗапросовXDTOПочта.ПолучитьНовоеПисьмо(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetIncomingEMailAnswerRequest") Тогда
			Возврат ОбработкаЗапросовXDTOПочта.ПолучитьОтветНаВходящееПисьмо(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetOutgoingEMailForwardRequest") Тогда
			Возврат ОбработкаЗапросовXDTOПочта.ПолучитьИсходящееПисьмоДляПересылки(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetAddressBookRequest") Тогда
			Возврат ОбработкаЗапросовXDTOПочта.ПолучитьАдреснуюКнигу(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetRecipientsListByNameRequest") Тогда
			Возврат ОбработкаЗапросовXDTOПочта.ПолучитьСписокПолучателейПоИмени(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMRetrieveBarcodesRequest") Тогда
			Возврат ПрочитатьШтрихкодыОбъекта(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMUpdateBarcodesRequest") Тогда
			Возврат ЗаписатьШтрихкодыОбъекта(Сообщение);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMFindByBarcodeRequest") Тогда
			Возврат НайтиОбъектПоШтрихкоду(Сообщение);
			
		Иначе
			Возврат Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения'; en = 'Error when processing a message'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненный объект XDTO по бизнес-процессу Исполнение Документооборота
// Вызывается из ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБизнесПроцесс
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС
//   СсылкаНаБизнесПроцесс - БизнесПроцессОбъект.Приглашение, источник данных заполнения
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessInvitation
//
Функция ПолучитьБППриглашение(Узел, СсылкаНаБизнесПроцесс) Экспорт
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessInvitation");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	
	// Общая шапка бизнес-процесса.
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПередатьОбщиеРеквизитыБизнесПроцесса(Узел, СсылкаНаБизнесПроцесс, Ответ);
	
	// Особенная шапка Приглашения.
	Ответ.activityBegin = СсылкаНаБизнесПроцесс.ДатаНачалаМероприятия;
	Ответ.activityEnd = СсылкаНаБизнесПроцесс.ДатаОкончанияМероприятия;
	Ответ.activityVenue = СсылкаНаБизнесПроцесс.МестоПроведения;
	
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПередатьСрокОбработкиРезультата(СсылкаНаБизнесПроцесс, Ответ);
	
	// Результат приглашения.
	Ответ.invitationResult = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGeneralInvitationResult");
	Ответ.invitationResult.name = Строка(СсылкаНаБизнесПроцесс.РезультатПриглашения);
	ответ.invitationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.РезультатПриглашения);
	
	// Исполнители.
	Для Каждого Исполнитель Из СсылкаНаБизнесПроцесс.Исполнители Цикл
		performer = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessInvitationParticipant");
		basePerformer = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПодготовитьИсполнителя(Исполнитель, "Исполнитель", "Исполнитель");
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];
			КонецЕсли;
		КонецЦикла;                                  
		performer.attendanceCompulsory = Исполнитель.ЯвкаОбязательна;
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает заполненный объект XDTO по бизнес-процессу "Комплексный процесс" Документооборота 
// Вызывается из ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБизнесПроцесс
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС
//   СсылкаНаБизнесПроцесс - БизнесПроцессОбъект.КомплексныйПроцесс, источник данных заполнения
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMComplexBusinessProcess
//
Функция ПолучитьБПКомплексныйПроцесс(Узел, СсылкаНаБизнесПроцесс) Экспорт
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMComplexBusinessProcess");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	
	// Общая шапка бизнес-процесса.
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПередатьОбщиеРеквизитыБизнесПроцесса(Узел, СсылкаНаБизнесПроцесс, Ответ);
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПередатьЗначениеКонтролера(СсылкаНаБизнесПроцесс, Ответ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СсылкаНаБизнесПроцесс.Схема) Тогда
		
		РеквизитыСхемы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СсылкаНаБизнесПроцесс.Схема, "ПараметрыДействий, ЭлементыСхемы, Схема");
			
		Если ЗначениеЗаполнено(РеквизитыСхемы.Схема) Тогда
			Схема = РеквизитыСхемы.Схема.Получить();
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("grs");
			Схема.Записать(ИмяВременногоФайла);
			Ответ.diagram = Новый ДвоичныеДанные(ИмяВременногоФайла);
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
			
		// Заполним stages для частичной совместимости с ранними версиями клиентов.
		Действия = РеквизитыСхемы.ПараметрыДействий.Выгрузить();
		ЭлементыСхемы = РеквизитыСхемы.ЭлементыСхемы.Выгрузить();
		
		КэшЭлементовСхемы = Новый Соответствие;
		Для Каждого ЭлементСхемы Из ЭлементыСхемы Цикл
			КэшЭлементовСхемы.Вставить(ЭлементСхемы.Имя, ЭлементСхемы);
		КонецЦикла;
		
		КэшДанныхДействий = РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий(Действия);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Дата"));
		ОписаниеТипаДата = Новый ОписаниеТипов(МассивТипов);
		
		Действия.Колонки.Добавить("СрокИсполненияПроцесса", ОписаниеТипаДата);
		Действия.Колонки.Добавить("СрокИсполненияПроцессаДни", ОписаниеТипаЧисло);
		Действия.Колонки.Добавить("СрокИсполненияПроцессаЧасы", ОписаниеТипаЧисло);
		Действия.Колонки.Добавить("СрокИсполненияПроцессаМинуты", ОписаниеТипаЧисло);
		Действия.Колонки.Добавить("СостояниеПроцесса");
		
		СрокиИсполненияПроцессовКлиентСерверКОРП.
			ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
				Действия, ЭлементыСхемы, КэшДанныхДействий);
				
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ВариантОтображенияСроков = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
		Для Каждого Действие Из Действия Цикл
			
			ЭтапXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMComplexBusinessProcessStage");
			
			ЭтапXDTO.stageID = Строка(Действие.Идентификатор);
			ЭтапXDTO.executed = Ложь;
			Если Не ЗначениеЗаполнено(Действие.ШаблонПроцесса) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(Действие.Процесс) Тогда
				ЭтапXDTO.businessProcess = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьБизнесПроцесс(
					Узел, ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Действие.Процесс));
				ЭтапXDTO.executed = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие.Процесс, "Завершен");
			КонецЕсли;
			МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие.ШаблонПроцесса);
			РеквизитыШаблона = МенеджерШаблона.РеквизитыЭтапаДляВычисляемыхПолей(Действие.ШаблонПроцесса);
			ЭтапXDTO.participants = МенеджерШаблона.ПолучитьСтроковоеПредставлениеИсполнителей(РеквизитыШаблона);
			ШаблонXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
			ШаблонXDTO.name = Строка(Действие.ШаблонПроцесса);
			ШаблонXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Действие.ШаблонПроцесса);
			ЭтапXDTO.template = ШаблонXDTO;
			ЭтапXDTO.duration = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				Действие.СрокИсполненияПроцесса, Действие.СрокИсполненияПроцессаДни, 
				Действие.СрокИсполненияПроцессаЧасы, Действие.СрокИсполненияПроцессаМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, ВариантОтображенияСроков);
			
			Ответ.stages.Добавить(ЭтапXDTO);
			
		КонецЦикла;
			
	Иначе
	
		// Особенности комплексных процессов.
		Ответ.routingType = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessRoutingType");
		Ответ.routingType.name = Строка(СсылкаНаБизнесПроцесс.ВариантМаршрутизации);
		Ответ.routingType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.ВариантМаршрутизации);
		
		Для каждого Этап из СсылкаНаБизнесПроцесс.Этапы Цикл
			ЭтапXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMComplexBusinessProcessStage");
			ЭтапXDTO.stageID = Строка(Этап.ИдентификаторЭтапа);
			ЭтапXDTO.participants = Этап.ИсполнителиЭтапаСтрокой;
			ЭтапXDTO.stagePredecessors = Этап.ПредшественникиЭтапаСтрокой;
			ЭтапXDTO.executed = Этап.ЗадачаВыполнена;
			Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс) Тогда
				ЭтапXDTO.businessProcess = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьБизнесПроцесс(
					Узел, ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Этап.ЗапущенныйБизнесПроцесс));
			КонецЕсли;
			ЭтапXDTO.predecessorsUseOption = Этап.ПредшественникиВариантИспользования;
			ЭтапXDTO.unconditionalPassageExecuted = Этап.БезусловныйПереходКСледующемуБылВыполнен;
			Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса) Тогда
				ШаблонXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
				ШаблонXDTO.name = Этап.ШаблонБизнесПроцесса.Наименование;
				ШаблонXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Этап.ШаблонБизнесПроцесса);
				ЭтапXDTO.template = ШаблонXDTO;
				
				Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Этап.ШаблонБизнесПроцесса);
				ДлительностьСтрокой = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
					Длительность.СрокИсполненияПроцессаДни,
					Длительность.СрокИсполненияПроцессаЧасы,
					Длительность.СрокИсполненияПроцессаМинуты);
				ЭтапXDTO.duration = ДлительностьСтрокой;
			КонецЕсли;
			Ответ.stages.Добавить(ЭтапXDTO);
		КонецЦикла;
		
		Для каждого Предшественник из СсылкаНаБизнесПроцесс.ПредшественникиЭтапов Цикл
			ПредшественникXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMComplexBusinessProcessStagePredecessor");
			ПредшественникXDTO.followerID = Строка(Предшественник.ИдентификаторПоследователя);
			Если ЗначениеЗаполнено(Предшественник.ИдентификаторПредшественника) Тогда
				ПредшественникXDTO.predecessorID = Строка(Предшественник.ИдентификаторПредшественника);
			КонецЕсли;
			Если ЗначениеЗаполнено(Предшественник.УсловиеПерехода) Тогда
				УсловиеПереходаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRoutingCondition");
				УсловиеПереходаXDTO.name = Строка(Предшественник.УсловиеПерехода);
				УсловиеПереходаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Предшественник.УсловиеПерехода);
				ПредшественникXDTO.passageCondition = УсловиеПереходаXDTO;
			КонецЕсли;
			ПредшественникXDTO.passageExecuted = Предшественник.УсловныйПереходБылВыполнен;
			Если ЗначениеЗаполнено(Предшественник.УсловиеРассмотрения) Тогда
				УсловиеРассмотренияXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPredecessorsStageConsiderationCondition");
				УсловиеРассмотренияXDTO.name = Строка(Предшественник.УсловиеРассмотрения);
				УсловиеРассмотренияXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Предшественник.УсловиеРассмотрения);
				ПредшественникXDTO.considerationCondition = УсловиеРассмотренияXDTO;
			КонецЕсли;
			Ответ.predecessors.Добавить(ПредшественникXDTO);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

// Записывает процесс "Приглашение" Документооборота по объекту XDTO DMBusinessProcessInvitation
// Вызывается из ОбработкаЗапросовXDTOБизнесПереопределяемый.ЗаписатьБизнесПроцесс
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessInvitation
//
// Возвращаемое значение:
//   БизнесПроцессСсылка.Приглашение - ссылка на записанный бизнес-процесс
//
Функция ЗаписатьБППриглашение(Объект, СоздатьНовый) Экспорт
	
	БПОбъект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьОбъектБизнесПроцесс("Приглашение", Объект, СоздатьНовый);
	
	// Запись шапки.
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	БПОбъект.ДатаНачалаМероприятия = Объект.activityBegin;
	БПОбъект.ДатаОкончанияМероприятия = Объект.activityEnd;
	БПОбъект.МестоПроведения = Объект.activityVenue;
	
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьСрокОбработкиРезультата(БПОбъект, Объект);
	
	Если СоздатьНовый Тогда
		БПОбъект.КоличествоИтераций = 1;
	КонецЕсли;
	
	// Исполнители.
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		// Общие данные исполнителя.
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		Если Не Исполнитель.Установлено("dueDateSpecificationOption")
			И СоздатьНовый
			И Объект.Установлено("dueDate") Тогда
			НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			НоваяСтрока.СрокИсполнения = Объект.dueDate;
		КонецЕсли;
		// Специфика исполнителя в Приглашении.
		НоваяСтрока.ЯвкаОбязательна = Исполнитель.attendanceCompulsory;
	КонецЦикла;
	
	// Рассчитаем общий срок исполнения процесса.
	Если СоздатьНовый Тогда
		СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса(БПОбъект);
	Иначе
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(
			БПОбъект, БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться);
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = БПОбъект.НомерИтерации;
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиПриглашения(
			БПОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	// Запись объекта.
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает комплексный процесс Документооборота по объекту XDTO DMComplexBusinessProcess
// Вызывается из ОбработкаЗапросовXDTOБизнесПереопределяемый.ЗаписатьБизнесПроцесс
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMComplexBusinessProcess
//
// Возвращаемое значение:
//   БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на записанный бизнес-процесс
//
Функция ЗаписатьБПКомплексныйПроцесс(Объект, СоздатьНовый) Экспорт
	
	БПОбъект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьОбъектБизнесПроцесс("КомплексныйПроцесс", Объект, СоздатьНовый);
	
	// Запись шапки.
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	Схема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БПОбъект.Шаблон, "Схема");
	Если ЗначениеЗаполнено(Схема) Тогда
		
		// Предметы задач.
		Если СоздатьНовый Тогда
			
			ИсходныеПредметы = БПОбъект.Предметы.Выгрузить();
			БПОбъект.Предметы.Очистить();
			
			ДанныеЗаполнения = Новый Структура("Шаблон", БПОбъект.Шаблон);
			БПОбъект.Заполнить(ДанныеЗаполнения);
		
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ИсходныеПредметы);
			
		КонецЕсли;
		
		// Контролер.
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьЗначениеКонтролера(БПОбъект, Объект);
		
		Если Объект.Установлено("author") Тогда
			БПОбъект.Автор = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.author.objectId);
		КонецЕсли;
	
	Иначе
	
		// Контролер.
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьЗначениеКонтролера(БПОбъект, Объект);
	
		БПОбъект.ВариантМаршрутизации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.routingType.objectId);
		
		// Этапы.
		БПОбъект.Этапы.Очистить();
		Для каждого ЭтапXDTO из Объект.stages Цикл
			Этап = БПОбъект.Этапы.Добавить();
			Этап.ИдентификаторЭтапа = Новый УникальныйИдентификатор(ЭтапXDTO.stageID);
			Этап.ИсполнителиЭтапаСтрокой = ЭтапXDTO.participants;
			Этап.ПредшественникиЭтапаСтрокой = ЭтапXDTO.stagePredecessors;
			Если ЭтапXDTO.Установлено("businessProcess") Тогда
				Этап.ЗапущенныйБизнесПроцесс = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЭтапXDTO.businessProcess.objectId);
			КонецЕсли;
			Если ЭтапXDTO.Установлено("template") Тогда
				Этап.ШаблонБизнесПроцесса = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЭтапXDTO.template.objectID);
				// Обновим важность в шаблонах этапов.
				ВажностьЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап.ШаблонБизнесПроцесса, "Важность");
				Если ВажностьЭтапа <> БПОбъект.Важность Тогда
					ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
					ШаблонОбъект.Важность = БПОбъект.Важность;
					ШаблонОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			Если ЭтапXDTO.Установлено("predecessorsUseOption") Тогда
				Этап.ПредшественникиВариантИспользования = ЭтапXDTO.predecessorsUseOption;
			КонецЕсли;
			Если ЭтапXDTO.Установлено("unconditionalPassageExecuted") Тогда
				Этап.БезусловныйПереходКСледующемуБылВыполнен = ЭтапXDTO.unconditionalPassageExecuted;
			КонецЕсли;
			Этап.ЗадачаВыполнена = ЭтапXDTO.executed;
			
		КонецЦикла;
		
		// Предшественники.
		БПОбъект.ПредшественникиЭтапов.Очистить();
		Для каждого ПредшественникXDTO из Объект.predecessors Цикл
			Предшественник =  БПОбъект.ПредшественникиЭтапов.Добавить();
	        Предшественник.ИдентификаторПоследователя = Новый УникальныйИдентификатор(ПредшественникXDTO.followerID);
			Если ПредшественникXDTO.Установлено("predecessorID") Тогда
				Предшественник.ИдентификаторПредшественника = Новый УникальныйИдентификатор(ПредшественникXDTO.predecessorID);
			КонецЕсли;
			Если БПОбъект.Предметы.Количество() > 0 Тогда
				Если ПредшественникXDTO.Установлено("passageCondition") Тогда
					Предшественник.УсловиеПерехода = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ПредшественникXDTO.passageCondition.objectID);
					Предшественник.ИмяПредметаУсловия = БПОбъект.Предметы[0].ИмяПредмета;
				КонецЕсли;
			КонецЕсли;
			Предшественник.УсловныйПереходБылВыполнен = ПредшественникXDTO.passageExecuted;
			Если ПредшественникXDTO.Установлено("considerationCondition") Тогда
				Предшественник.УсловиеРассмотрения =  ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ПредшественникXDTO.considerationCondition.objectID);
			КонецЕсли;
		КонецЦикла;
		
		// Предметы задач.
		Если СоздатьНовый Тогда
			ИсходныеПредметы = БПОбъект.Предметы.Выгрузить();
			БПОбъект.Предметы.Очистить();
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ИсходныеПредметы);
		КонецЕсли;
		
	КонецЕсли;
	
	// Рассчитаем общий срок исполнения процесса.
	Если СоздатьНовый
		И Не ЗначениеЗаполнено(БПОбъект.СрокИсполненияПроцесса) Тогда
		СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса(БПОбъект);
	КонецЕсли;
	
	// Запись объекта.
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Принимает переданные задачи к исполнению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAcceptTasksRequest
// 
// Возвращаемое значение:
//   ОбъектXDTO типа DMOK или DMError
//
Функция ПринятьЗадачиКИсполнению(Сообщение) Экспорт
	
	мЗадачи = Новый Массив;
	
	Попытка
		
		Для каждого ЗадачаXDTO из Сообщение.tasks Цикл
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectId);
			мЗадачи.Добавить(Ссылка.Ссылка);
		КонецЦикла;
		
		БизнесПроцессыИЗадачиСервер.ПринятьЗадачиКИсполнению(мЗадачи);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOK");
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при принятии задачи к исполнению'; en = 'Error accepting task'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;

КонецФункции

// Дополнительная обработка получения шаблона процесса
// Вызывается из ОбработкаЗапросовXDTOПереопределяемый.ПолучитьШаблоныБизнесПроцесса
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessTemplatesRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetBusinessProcessTemplatesResponse
// 
Функция ПолучитьШаблоныБизнесПроцесса(Сообщение) Экспорт

	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetBusinessProcessTemplatesResponse");
	
	Тип = Сообщение.businessProcessType;
	
	Предмет = Неопределено;
	Если Сообщение.Установлено("businessProcessTargetId") Тогда
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTargetId);
	КонецЕсли;
	
	МассивШаблонов = Новый Массив;
	
	Если Тип = "DMComplexBusinessProcess" Тогда
		БПОбъект = БизнесПроцессы.КомплексныйПроцесс.СоздатьБизнесПроцесс();
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
		КонецЕсли;
		МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(Предмет, "ШаблоныКомплексныхБизнесПроцессов", Ложь);
			
	ИначеЕсли Тип = "DMBusinessProcessInvitation" Тогда
		БПОбъект = БизнесПроцессы.Приглашение.СоздатьБизнесПроцесс();
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
		КонецЕсли;
		МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(Предмет, "ШаблоныПриглашения", Ложь);
		
	КонецЕсли;
		
		
	Для Каждого Шаблон Из МассивШаблонов Цикл
		ОбъектШаблонXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessTemplate");
		ОбъектШаблонXDTO.name = Шаблон.Наименование;
		ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Шаблон.Ссылка);
		Ответ.BusinessProcessTemplates.Добавить(ОбъектШаблонXDTO);
	КонецЦикла;
	
	Возврат Ответ;

КонецФункции

// Получает вида мероприятия по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор вида мероприятия.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeetingType.
//
Функция ПолучитьВидМероприятия(Узел, ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеВидаМероприятия(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении вида мероприятия'; en = 'Error retrieving event type'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает мероприятие по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор мероприятия.
//   НаборКолонок - Массив - массив имен колонок к получению, или
//                - Неопределено - признак необходимости получить все колонки.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeeting.
//
Функция ПолучитьМероприятие(Узел, ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеМероприятия(Объект, Ссылка, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении мероприятия'; en = 'Error retrieving event'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает пункт протокола мероприятия по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор пункта протокола мероприятия.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeetingMinutesItem.
//
Функция ПолучитьПунктПротоколаМероприятия(Узел, ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеПунктаПротоколаМероприятия(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении пункта протокола мероприятия'; en = 'Error retrieving meeting minutes item'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает тему обсуждения по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор темы обсуждения.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMForumThread.
//
Функция ПолучитьТемуОбсуждения(Узел, ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеТемыОбсуждения(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении темы обсуждения'; en = 'Error getting forum thread'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает сообщение обсуждения по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор сообщения обсуждения.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMForumMessage.
//
Функция ПолучитьСообщениеОбсуждения(Узел, ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеСообщенияОбсуждения(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении сообщения обсуждения'; en = 'Error getting forum message'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает бронь по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор брони.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPremisesReservation.
//
Функция ПолучитьБронь(Узел, ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеБрони(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении брони'; en = 'Error getting reservation'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает уведомление программы по указанному идентификатору.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС.
//   ОбъектИд - ОбъектXDTO типа DMObjectId - идентификатор уведомления.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMApplicationNotification.
//
Функция ПолучитьУведомлениеПрограммы(Узел, ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеУведомленияПрограммы(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении уведомления программы'; en = 'Error getting program notification'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Читает штрихкоды объекта по запросу DMRetrieveBarcodesRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRetrieveBarcodesRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMRetrieveBarcodesResponse
//
Функция ПрочитатьШтрихкодыОбъекта(Сообщение)
	
	Если Сообщение.objectId.type = "DMIncomingDocument" Тогда
		Менеджер = Справочники.ВходящиеДокументы;
	ИначеЕсли Сообщение.objectId.type = "DMInternalDocument" Тогда
		Менеджер = Справочники.ВнутренниеДокументы;
	ИначеЕсли Сообщение.objectId.type = "DMOutgoingDocument" Тогда
		Менеджер = Справочники.ИсходящиеДокументы;
	ИначеЕсли Сообщение.objectId.type = "DMFile" Тогда
		Менеджер = Справочники.Файлы;
	Иначе
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = Сообщение.objectId.type;
		Ошибка.description = НСтр("ru = 'Штрихкоды для объектов этого типа не поддерживаются'; en = 'Barcodes for objects of this type are not supported'");
		Возврат Ошибка;
	КонецЕсли;
	Попытка
		Владелец = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Сообщение.objectId.id));
	Исключение
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = Сообщение.objectId.id;
		Ошибка.description = НСтр("ru = 'Неверен формат идентификатора объекта'; en = 'Invalid object identifier format'");
		Возврат Ошибка;
	КонецПопытки;
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRetrieveBarcodesResponse");
	ШтрихкодыОбъекта = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectBarcodes");
	ШтрихкодыОбъекта.objectId = Сообщение.objectId;
	
	ЗапросШтрихкоды = Новый Запрос(
		"ВЫБРАТЬ
		|	Штрихкоды.ВнутреннийШтрихкод,
		|	Штрихкоды.Код
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец");
	ЗапросШтрихкоды.УстановитьПараметр("Владелец", Владелец);		
	ВыборкаШтрихкоды = ЗапросШтрихкоды.Выполнить().Выбрать();
	Пока ВыборкаШтрихкоды.Следующий() Цикл
		Штрихкод = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBarcode");
		Штрихкод.internal = ВыборкаШтрихкоды.ВнутреннийШтрихкод;
		Штрихкод.barcodeData = ВыборкаШтрихкоды.Код;
		ШтрихкодыОбъекта.barcodes.Добавить(Штрихкод);
	КонецЦикла;
	
	Ответ.objectBarcodes = ШтрихкодыОбъекта;
	Возврат Ответ;
	
КонецФункции

// Записывает штрихкоды объекта по запросу DMUpdateBarcodesRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMUpdateBarcodesRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUpdateBarcodesResponse
//
Функция ЗаписатьШтрихкодыОбъекта(Сообщение)
	
	ШтрихкодыОбъекта = Сообщение.objectBarcodes;
	Если ШтрихкодыОбъекта.objectId.type = "DMIncomingDocument" Тогда
		Менеджер = Справочники.ВходящиеДокументы;
	ИначеЕсли ШтрихкодыОбъекта.objectId.type = "DMInternalDocument" Тогда
		Менеджер = Справочники.ВнутренниеДокументы;
	ИначеЕсли ШтрихкодыОбъекта.objectId.type = "DMOutgoingDocument" Тогда
		Менеджер = Справочники.ИсходящиеДокументы;
	ИначеЕсли ШтрихкодыОбъекта.objectId.type = "DMFile" Тогда
		Менеджер = Справочники.Файлы;
	Иначе
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = ШтрихкодыОбъекта.objectId.type;
		Ошибка.description = НСтр("ru = 'Штрихкоды для объектов этого типа не поддерживаются'; en = 'Barcodes for objects of this type are not supported'");
		Возврат Ошибка;
	КонецЕсли;
	Попытка
		Владелец = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ШтрихкодыОбъекта.objectId.id));
	Исключение
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = ШтрихкодыОбъекта.objectId.id;
		Ошибка.description = НСтр("ru = 'Неверен формат идентификатора объекта'; en = 'Invalid object identifier format'");
		Возврат Ошибка;
	КонецПопытки;
	
	// Штрихкоды, которые следует добавить к уже существующим в базе.
	ШтрихкодыКДобавлению = Новый ТаблицаЗначений;
	ШтрихкодыКДобавлению.Колонки.Добавить("ВнутреннийШтрихкод");
	ШтрихкодыКДобавлению.Колонки.Добавить("Код");
	Для каждого Штрихкод из ШтрихкодыОбъекта.barcodes Цикл
		ШтрихкодКДобавлению = ШтрихкодыКДобавлению.Добавить();
		ШтрихкодКДобавлению.ВнутреннийШтрихкод = Штрихкод.internal;
		ШтрихкодКДобавлению.Код = Штрихкод.barcodeData;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		// Выберем уже существующие штрихкоды и удалим лишнее.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Штрихкоды.ВнутреннийШтрихкод,
			|	Штрихкоды.Код
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска = Новый Структура("ВнутреннийШтрихкод, Код", Выборка.ВнутреннийШтрихкод, Выборка.Код);
			НайденныеСтроки = ШтрихкодыКДобавлению.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				Запись.Владелец = Владелец;
				Запись.ВнутреннийШтрихкод = Выборка.ВнутреннийШтрихкод;
				Запись.Код = Выборка.Код;
				Запись.Удалить();
			Иначе
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					ШтрихкодыКДобавлению.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ШтрихкодКДобавлению из ШтрихкодыКДобавлению Цикл
			Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			Запись.Владелец = Владелец;
			Запись.ВнутреннийШтрихкод = ШтрихкодКДобавлению.ВнутреннийШтрихкод;
			Запись.Код = ШтрихкодКДобавлению.Код;
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUpdateBarcodesResponse");
		Возврат Ответ;
		
	Исключение
		
		ОтменитьТранзакцию();
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи штрихкодов'; en = 'Error saving barcodes'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Ищет объект по штрихкоду по запросу DMFindByBarcodeRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMFindByBarcodeRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMFindByBarcodeResponse
//
Функция НайтиОбъектПоШтрихкоду(Сообщение)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFindByBarcodeResponse");
	
	ЗапросВладелец = Новый Запрос(
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Код = &Код");
	ЗапросВладелец.УстановитьПараметр("Код", Сообщение.barcodeData);
	ВыборкаВладелец = ЗапросВладелец.Выполнить().Выбрать();
	Пока ВыборкаВладелец.Следующий() Цикл
		
		Владелец = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
		Владелец.id = Строка(ВыборкаВладелец.Владелец.УникальныйИдентификатор());
		Если ТипЗнч(ВыборкаВладелец.Владелец) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			Владелец.type = "DMIncomingDocument";
		ИначеЕсли ТипЗнч(ВыборкаВладелец.Владелец) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			Владелец.type = "DMInternalDocument";
		ИначеЕсли ТипЗнч(ВыборкаВладелец.Владелец) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			Владелец.type = "DMOutgoingDocument";
		ИначеЕсли ТипЗнч(ВыборкаВладелец.Владелец) = Тип("СправочникСсылка.Файлы") Тогда
			Владелец.type = "DMFile";
		Иначе 
			Владелец.type = "";
		КонецЕсли;
		
		Ответ.objects.Добавить(Владелец);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Заполняет объект XDTO по данным вида мероприятия.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMMeetingType.
//   ВидМероприятия - СправочникСсылка.ВидыМероприятий.
//
Процедура ПолучитьДанныеВидаМероприятия(ОбъектXDTO, ВидМероприятия)
	
	ПротокольноеМероприятие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидМероприятия,
		"ПротокольноеМероприятие");
	
	ОбъектXDTO.withMinutes = ПротокольноеМероприятие;
	
КонецПроцедуры

// Заполняет объект XDTO по данным мероприятия.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMMeeting.
//   Мероприятие - СправочникСсылка.Мероприятия.
//
Процедура ПолучитьДанныеМероприятия(ОбъектXDTO, Мероприятие,  НаборКолонок = Неопределено)
	
	МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
	
	ВидXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingType");
	ВидXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(МероприятиеОбъект.ВидМероприятия);
	ВидXDTO.name = Строка(МероприятиеОбъект.ВидМероприятия);
	
	ОбъектXDTO.type = ВидXDTO;
	
	ДанныеМероприятия = Новый Структура;
	ДанныеМероприятия.Вставить("description", МероприятиеОбъект.Описание);
	ДанныеМероприятия.Вставить("startDate",
		?(ЗначениеЗаполнено( МероприятиеОбъект.ДатаНачалаФакт),
			МероприятиеОбъект.ДатаНачалаФакт,
			МероприятиеОбъект.ДатаНачала));
	ДанныеМероприятия.Вставить("endDate",
		?(ЗначениеЗаполнено( МероприятиеОбъект.ДатаОкончанияФакт),
			МероприятиеОбъект.ДатаОкончанияФакт,
			МероприятиеОбъект.ДатаОкончания));
	ДанныеМероприятия.Вставить("place", МероприятиеОбъект.МестоПроведения);
	ДанныеМероприятия.Вставить("accessLevel", МероприятиеОбъект.ГрифДоступа);
	ДанныеМероприятия.Вставить("organization", МероприятиеОбъект.Организация);
	ДанныеМероприятия.Вставить("project", МероприятиеОбъект.Проект);
	ДанныеМероприятия.Вставить("calledBy", МероприятиеОбъект.Организатор);
	
	Если ТипЗнч(МероприятиеОбъект.Председатель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МероприятиеОбъект.Председатель,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеМероприятия.Вставить("chairPerson", РеквизитыРоли.Владелец);
		ДанныеМероприятия.Вставить("chairPersonMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеМероприятия.Вставить("chairPersonSecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеМероприятия.Вставить("chairPerson", МероприятиеОбъект.Председатель);
		ДанныеМероприятия.Вставить("chairPersonMainAddressingObject", Неопределено);
		ДанныеМероприятия.Вставить("chairPersonSecondaryAddressingObject", Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(МероприятиеОбъект.Секретарь) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МероприятиеОбъект.Секретарь,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеМероприятия.Вставить("secretary", РеквизитыРоли.Владелец);
		ДанныеМероприятия.Вставить("secretaryMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеМероприятия.Вставить("secretarySecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеМероприятия.Вставить("secretary", МероприятиеОбъект.Секретарь);
		ДанныеМероприятия.Вставить("secretaryMainAddressingObject", Неопределено);
		ДанныеМероприятия.Вставить("secretarySecondaryAddressingObject", Неопределено);
	КонецЕсли;
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты документа.
	Для Каждого Реквизит Из ДанныеМероприятия Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Получим состояния.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("statuses")) <> Неопределено Тогда 
		
		Состояния = УправлениеМероприятиями.ПолучитьВсеСостоянияМероприятия(Мероприятие);
		Для Каждого Состояние Из Состояния Цикл
			
			СостояниеXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingStatus");
			СостояниеXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Состояние);
			СостояниеXDTO.name = Строка(Состояние);
			
			ОбъектXDTO.statuses.Добавить(СостояниеXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
		
	// Получим программу.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("agenda")) <> Неопределено Тогда 
		
		Для Каждого ПунктПрограммы Из МероприятиеОбъект.Программа Цикл
			
			ПунктПрограммыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingAgendaItem");
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПунктПрограммыXDTO, 
				"number", ПунктПрограммы.НомерПункта);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПунктПрограммыXDTO, 
				"description", ПунктПрограммы.Содержание);
				
			Если ТипЗнч(ПунктПрограммы.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПунктПрограммыXDTO, 
					"user", ПунктПрограммы.Исполнитель);
			ИначеЕсли ТипЗнч(ПунктПрограммы.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПрограммы.Исполнитель,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПунктПрограммыXDTO, 
					"role", РеквизитыРоли.Владелец);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПунктПрограммыXDTO, 
					"mainAddressingItem", РеквизитыРоли.ОсновнойОбъектАдресации);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПунктПрограммыXDTO, 
					"secondaryAddressingItem", РеквизитыРоли.ДополнительныйОбъектАдресации);
			Конецесли;
				
			ОбъектXDTO.agenda.Добавить(ПунктПрограммыXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим участников.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("attendees")) <> Неопределено Тогда 
		
		Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
		
		Для Каждого Участник Из Участники Цикл
			
			УчастникXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingAttendee");
			
			Если ТипЗнч(Участник.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(УчастникXDTO, 
					"user", Участник.Исполнитель);
			ИначеЕсли ТипЗнч(Участник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Участник.Исполнитель,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(УчастникXDTO, 
					"role", РеквизитыРоли.Владелец);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(УчастникXDTO, 
					"mainAddressingItem", РеквизитыРоли.ОсновнойОбъектАдресации);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(УчастникXDTO, 
					"secondaryAddressingItem", РеквизитыРоли.ДополнительныйОбъектАдресации);
			Конецесли;
				
			УчастникXDTO.obligatory = Участник.ЯвкаОбязательна;
			УчастникXDTO.absent = Участник.Отсутствовал;
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(УчастникXDTO, 
				"invitationStatus", Участник.СостояниеПриглашения);
				
				
			ОбъектXDTO.attendees.Добавить(УчастникXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим файлы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
		
		НаборКолонокФайлов = Новый Массив;
		ЗаполнитьКолонкиСпискаФайловМероприятия(НаборКолонокФайлов);
		
		МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Мероприятие, Ложь);
		
		МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет объект XDTO по данным пункта протокола мероприятия.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMMeetingMinutesItem.
//   ПунктПротокола - СправочникСсылка.ПротоколыМероприятий.
//
Процедура ПолучитьДанныеПунктаПротоколаМероприятия(ОбъектXDTO, ПунктПротокола)
	
	ПунктПротоколаОбъект = ПунктПротокола.ПолучитьОбъект();
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"meeting", ПунктПротоколаОбъект.Владелец);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"agendaItemNumber", ПунктПротоколаОбъект.НомерПунктаПрограммы);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"proposed", ПунктПротоколаОбъект.Слушали);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"discussed", ПунктПротоколаОбъект.Выступили);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"decided", ПунктПротоколаОбъект.Решили);
		
	Для Каждого Исполнитель Из ПунктПротоколаОбъект.Исполнители Цикл
		
		ИсполнительXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingActionItem");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
			"action", Исполнитель.НаименованиеЗадачи);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
			"description", Исполнитель.Описание);
		Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
				"user", Исполнитель.Исполнитель);
		ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Исполнитель.Исполнитель,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
				"role", РеквизитыРоли.Владелец);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
				"mainAddressingItem", РеквизитыРоли.ОсновнойОбъектАдресации);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
				"secondaryAddressingItem", РеквизитыРоли.ДополнительныйОбъектАдресации);
		КонецЕсли;
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ИсполнительXDTO, 
			"dueDate", Исполнитель.СрокИсполнения);
			
	КонецЦикла;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"businessProcess", ПунктПротоколаОбъект.Исполнение);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"dueDate", ПунктПротоколаОбъект.СрокИсполненияПроцесса);
		
	Если ТипЗнч(ПунктПротоколаОбъект.Ответственный) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПротоколаОбъект.Ответственный,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"responsible", РеквизитыРоли.Владелец);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"responsibleMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"responsibleSecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"responsible", ПунктПротоколаОбъект.Ответственный);
	КонецЕсли;
			
	Если ТипЗнч(ПунктПротоколаОбъект.Проверяющий) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПротоколаОбъект.Проверяющий,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"verifier", РеквизитыРоли.Владелец);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"verifierMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"verifierSecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"verifier", ПунктПротоколаОбъект.Проверяющий);
	КонецЕсли;
		
	Если ТипЗнч(ПунктПротоколаОбъект.Контролер) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПротоколаОбъект.Контролер,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"controller", РеквизитыРоли.Владелец);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"controllerMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"controllerSecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
			"controller", ПунктПротоколаОбъект.Контролер);
	КонецЕсли;
		
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"routingType", ПунктПротоколаОбъект.ВариантИсполнения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"status", ПунктПротоколаОбъект.СостояниеИсполнения);
		
КонецПроцедуры

// Заполняет набор имен колонок, описывающих файлы мероприятия.
//
// Параметры:
//   НаборКолонокФайлов - Массив - неявно возвращаемое значение, заполняемый массив.
//
Процедура ЗаполнитьКолонкиСпискаФайловМероприятия(НаборКолонокФайлов)
	
	НаборКолонокФайлов.Добавить("objectId");
	НаборКолонокФайлов.Добавить("scannedOriginal");
	НаборКолонокФайлов.Добавить("deletionMark");
	
	НаборКолонокФайлов.Добавить("signed");
	НаборКолонокФайлов.Добавить("name");
	НаборКолонокФайлов.Добавить("size");
	НаборКолонокФайлов.Добавить("creationDate");
	НаборКолонокФайлов.Добавить("modificationDateUniversal");
	НаборКолонокФайлов.Добавить("author");
	НаборКолонокФайлов.Добавить("extension");
	НаборКолонокФайлов.Добавить("description");
	НаборКолонокФайлов.Добавить("editing");
	НаборКолонокФайлов.Добавить("encrypted");
	
	НаборКолонокФайлов.Добавить("signatures.author");
	НаборКолонокФайлов.Добавить("signatures.date");
	НаборКолонокФайлов.Добавить("signatures.comment");
	НаборКолонокФайлов.Добавить("signatures.signature");
	НаборКолонокФайлов.Добавить("signatures.thumbprint");
	НаборКолонокФайлов.Добавить("signatures.signer");
	НаборКолонокФайлов.Добавить("signatures.certificate");
	НаборКолонокФайлов.Добавить("signatures.signatureFileName");
	
КонецПроцедуры

// Заполняет объект XDTO по данным темы обсуждения.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMForumThread.
//   ТемаОбсуждения - СправочникСсылка.ТемыОбсуждений.
//
Процедура ПолучитьДанныеТемыОбсуждения(ОбъектXDTO, ТемаОбсуждения)
	
	ТемаОбсужденияОбъект = ТемаОбсуждения.ПолучитьОбъект();
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"author", ТемаОбсужденияОбъект.Автор);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"creationDate", ТемаОбсужденияОбъект.ДатаСоздания);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"document", ТемаОбсужденияОбъект.Документ);
		
КонецПроцедуры

// Заполняет объект XDTO по данным сообщения обсуждения.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMForumMessage.
//   СообщениеОбсуждения - СправочникСсылка.СообщенияОбсуждений.
//
Процедура ПолучитьДанныеСообщенияОбсуждения(ОбъектXDTO, СообщениеОбсуждения)
	
	СообщениеОбсужденияОбъект = СообщениеОбсуждения.ПолучитьОбъект();
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"author", СообщениеОбсужденияОбъект.Автор);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"thread", СообщениеОбсужденияОбъект.ВладелецСообщения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"creationDate", СообщениеОбсужденияОбъект.ДатаСоздания);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"modificationDate", СообщениеОбсужденияОбъект.ДатаИзменения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"number", СообщениеОбсужденияОбъект.НомерСообщения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"text", СообщениеОбсужденияОбъект.ТекстСообщения);
		
КонецПроцедуры

// Заполняет объект XDTO по данным брони.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMPremisesReservation.
//   Бронь - ДокументСсылка.Бронь.
//
Процедура ПолучитьДанныеБрони(ОбъектXDTO, Бронь)
	
	БроньОбъект = Бронь.ПолучитьОбъект();
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"author", БроньОбъект.Автор);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"startDate", БроньОбъект.ДатаНачала);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"endDate", БроньОбъект.ДатаОкончания);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"premises", БроньОбъект.Помещение);
		
КонецПроцедуры

// Заполняет объект XDTO по данным уведомления программы.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMApplicationNotification.
//   УведомлениеПрограммы - СправочникСсылка.УведомленияПрограммы.
//
Процедура ПолучитьДанныеУведомленияПрограммы(ОбъектXDTO, УведомлениеПрограммы)
	
	УведомлениеПрограммыОбъект = УведомлениеПрограммы.ПолучитьОбъект();
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"user", УведомлениеПрограммыОбъект.Пользователь);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"date", УведомлениеПрограммыОбъект.Дата);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, 
		"description", УведомлениеПрограммыОбъект.Описание);
		
КонецПроцедуры

#КонецОбласти
