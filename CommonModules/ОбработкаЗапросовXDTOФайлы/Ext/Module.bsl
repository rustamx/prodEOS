////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, работа с файлами
// Реализует функционал веб-сервиса DMService в части работы с файлами
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает папку файлов документооборота для внешнего объекта
//
// Параметры:
//   ИДВнешнегоОбъекта - Строка - идентификатор внешнего объекта
//   ТипВнешнегоОбъекта - Строка - имя типа XDTO внешнего объекта
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов - папка для хранения файлов объекта, или
//   Неопределено - если папка не найдена
//
Функция ПолучитьПапкуФайловДОПоВнешнемуОбъекту(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросКРегистру = Новый Запрос;
	ЗапросКРегистру.Текст =
		"ВЫБРАТЬ
		|	СсылкаНаПапкуФайловДО
		|ИЗ
		|	РегистрСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем
		|ГДЕ
		|	ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта
		|	И ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СсылкаНаПапкуФайловДО
		|ИЗ
		|	РегистрСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем
		|ГДЕ
		|	ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта
		|	И ТипВнешнегоОбъекта = """"";
	ЗапросКРегистру.УстановитьПараметр("ИДВнешнегоОбъекта",ИДВнешнегоОбъекта);
	ЗапросКРегистру.УстановитьПараметр("ТипВнешнегоОбъекта",ТипВнешнегоОбъекта);
	ВыборкаРегистра = ЗапросКРегистру.Выполнить().Выбрать();
	
	Если ВыборкаРегистра.Следующий() Тогда
		Возврат ВыборкаРегистра.СсылкаНаПапкуФайловДО;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Записывает в РС связь папки файлов со внешним объектом
//
// Параметры:
//   ИДВнешнегоОбъекта - Строка - идентификатор внешнего объекта
//   ТипВнешнегоОбъекта - Строка - имя типа XDTO внешнего объекта
//   СсылкаНаПапкуФайловДО - СправочникСсылка.ПапкиФайлов - папка для хранения файлов объекта
//
Процедура ЗаписатьПапкуФайлаДляВнешнегоОбъекта(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаПапкуФайловДО) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ИДВнешнегоОбъекта.Установить(ИДВнешнегоОбъекта);
	НаборЗаписей.Отбор.ТипВнешнегоОбъекта.Установить(ТипВнешнегоОбъекта);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ИДВнешнегоОбъекта = ИДВнешнегоОбъекта;
	НоваяЗапись.ТипВнешнегоОбъекта = ТипВнешнегоОбъекта;
	НоваяЗапись.СсылкаНаПапкуФайловДО = СсылкаНаПапкуФайловДО;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает список файлов в папке-владельце (внешний объект)
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetFileListRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetFileListResponse или DMError
//
Функция ПолучитьСписокФайлов(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetFileListResponse");
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Для Каждого ВнешнийОбъект Из Сообщение.externalObjects Цикл
			
			ТаблицаФайлов = Новый ТаблицаЗначений;
			ТаблицаФайлов.Колонки.Добавить("Имя");
			ТаблицаФайлов.Колонки.Добавить("Ссылка");
			
			МассивОбъектовДО = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(Узел,
				ВнешнийОбъект.id,
				ВнешнийОбъект.type);
		
			Для Каждого Ссылка из МассивОбъектовДО Цикл
				НоваяСтрока = ТаблицаФайлов.Добавить();
				НоваяСтрока.Ссылка = Ссылка;
				НоваяСтрока.Имя = Строка(Ссылка);
			КонецЦикла;
			
			// Сортировка по имени
			ТаблицаФайлов.Сортировать("Имя Возр");  
			
			МассивОбъектовДО.Очистить();
			Для Каждого Строка из ТаблицаФайлов Цикл
				Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
					МассивОбъектовДО.Добавить(Строка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			МассивФайлов = ЗаполнитьСписокФайлов(МассивОбъектовДО, Сообщение.ColumnSet);
			ЗаполнитьСписокФайловИзМассива(Ответ, МассивФайлов, Сообщение.ColumnSet, ВнешнийОбъект);
		
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка файлов'; en = 'Error retrieving list of files'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Получает объект XDTO, соответствующий файлу, по переданному идентификатору
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла
//   НаборКолонок - Массив - набор имен реквизитов файла к получению
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMFile
//
Функция ПолучитьКарточкуФайла(ИдентификаторФайла, НаборКолонок) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторФайла);
	ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(УникальныйИдентификатор);
	// проверить что не пуста 
	Если НЕ ЗначениеЗаполнено(ФайлСсылка.ТекущаяВерсия) Тогда
		ВызватьИсключение "Файл не найден";
	КонецЕсли;
	
	ОбъектDMFile = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");

	ФайлСтруктура = ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок);
	ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСтруктура, НаборКолонок);
	
	Возврат ОбъектDMFile;
	
КонецФункции	

// Получает объект XDTO, соответствующий версии файла, по переданному идентификатору
//
// Параметры:
//   ИдентификаторВерсии - Строка - идентификатор версии файла
//   НаборКолонок - Массив - набор имен реквизитов версии файла к получению
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMFileVersion
//
Функция ПолучитьВерсиюФайла(ИдентификаторВерсии, НаборКолонок) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторВерсии);
	ВерсияСсылка = Справочники.ВерсииФайлов.ПолучитьСсылку(УникальныйИдентификатор);
	
	ОбъектDMFileVersion = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFileVersion");
	СтруктураВерсии = ЗаполнитьСтруктуруВерсииФайла(ВерсияСсылка, НаборКолонок);
	ЗаполнитьXDTOВерсииФайла(ОбъектDMFileVersion, СтруктураВерсии, НаборКолонок);
	
	Возврат ОбъектDMFileVersion;
	
КонецФункции	

// Заполняет список файлов из массива структур, содержащих их реквизиты.
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetFileListResponse, неявно возвращаемое значение.
//   МассивФайлов - Массив - массива структур, содержащих реквизиты файлов.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению.
//   ВнешнийОбъект - ОбъектXDTO - внешний объект-владелец.
//
Процедура ЗаполнитьСписокФайловИзМассива(Ответ, МассивФайлов, НаборКолонок, ВнешнийОбъект = Неопределено) Экспорт
	
	Для Каждого ФайлСтруктура Из МассивФайлов Цикл
		
		ОбъектDMFile = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
		ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСтруктура, НаборКолонок);
		
		Если ОбъектDMFile.Установлено("owner")
			И ВнешнийОбъект <> Неопределено Тогда
			
			ВнешнийОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject");
			ВнешнийОбъектXDTO.id = ВнешнийОбъект.id;
			ВнешнийОбъектXDTO.type = ВнешнийОбъект.type;
			ВнешнийОбъектXDTO.name = "";
			ОбъектDMFile.owner.externalObject = ВнешнийОбъектXDTO;
			
		КонецЕсли;
		
		Ответ.files.Добавить(ОбъектDMFile);
		
	КонецЦикла;
	
	
КонецПроцедуры

// Заполняет список файлов из таблицы файлов шаблона документа.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, наследующий DMDocument, и подлежащий заполнению.
//   ФайлыШаблона - ТаблицаЗначений - таблица файлов шаблона с колонками:
//     Наименование - Строка.
//     ПолныйПуть - Строка.
//     ИндексКартинки - Число.
//     Расширение - Строка.
//     ШаблонОснованиеДляСоздания - СправочникСсылка.Файла.
//     ДобавленИзШаблона - Булево.
//
Процедура ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона) Экспорт
	
	НаборКолонок = Новый Массив;
	
	Для Каждого ФайлШаблона Из ФайлыШаблона Цикл
		
		ОбъектDMFile = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
		
		ФайлСтруктура = Новый Структура;
		ФайлСтруктура.Вставить("Ссылка", Неопределено);
		ФайлСтруктура.Вставить("Наименование", ФайлШаблона.Наименование);
		ФайлСтруктура.Вставить("ТекущаяВерсияРасширение", ФайлШаблона.Расширение);
		ФайлСтруктура.Вставить("ШаблонОснованиеДляСоздания", ФайлШаблона.ШаблонОснованиеДляСоздания);
		
		ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСтруктура, НаборКолонок);
		
		ОбъектXDTO.files.Добавить(ОбъектDMFile);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив структур с реквизитами файлов по массиву ссылок на файлы
//
// Параметры:
//   МассивОбъектовДО - Массив - содержит элементы типа СправочникСсылка.Файлы
//   НаборКолонок - Массив - содержит имена реквизитов к получению
//
// Возвращаемое значение:
//   Массив - содержит элементы типа 
//     * Структура, ключи которой - имена реквизитов файла, а значения - значения этих реквизитов.
//
Функция ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонок) Экспорт
	
	МассивФайлов = Новый Массив;
	
	Для Каждого ФайлСсылка Из МассивОбъектовДО Цикл
		
		РеквизитыФайла = ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок);	
		МассивФайлов.Добавить(РеквизитыФайла);	
		
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции	

// Дополняет объект Документооборота сведениями о подписях из объекта XDTO
//
// Параметры:
//   signatures - СписокXDTO объектов типа DMSignature
//   СсылкаОбъектаД8 - СправочникСсылка.Файлы
//
// Возвращаемое значение:
//   Нет.
//
Функция ЗанестиИнформациюОПодписяхОбъекта(signatures, СсылкаОбъектаД8) Экспорт
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого ПодписьСтруктура Из signatures Цикл
	
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("ПодписанныйОбъект", СсылкаОбъектаД8);
		
		СвойстваПодписи = Новый Структура;
		
		СвойстваПодписи.Вставить("Подпись", ПодписьСтруктура.signature);
		СвойстваПодписи.Вставить("Отпечаток", ПодписьСтруктура.thumbprint);
		СвойстваПодписи.Вставить("ДатаПодписи", ПодписьСтруктура.date);
		СвойстваПодписи.Вставить("Комментарий", ПодписьСтруктура.comment);
		СвойстваПодписи.Вставить("КомуВыданСертификат", ПодписьСтруктура.author);
		СвойстваПодписи.Вставить("Сертификат", ПодписьСтруктура.certificate);
		Если ПодписьСтруктура.Установлено("signer") И ПодписьСтруктура.signer <> Неопределено Тогда
			УстановившийПодпись = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ПодписьСтруктура.signer.objectId);
		Иначе
			УстановившийПодпись = Пользователи.ТекущийПользователь();
		КонецЕсли;
		СвойстваПодписи.Вставить("УстановившийПодпись", УстановившийПодпись);
		
		ДанныеПодписи.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(СсылкаОбъектаД8) Тогда
		ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаОбъектаД8, "ТекущаяВерсия");
		РаботаСЭП.УдалитьПодписиОбъекта(ТекущаяВерсия);
	Иначе
		РаботаСЭП.УдалитьПодписиОбъекта(СсылкаОбъектаД8);
	КонецЕсли;
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу);
	
КонецФункции

// Создает файл Документооборота по файлу на диске
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddLinkedFileRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddLinkedFileResponse или DMError
//
Функция ДобавитьФайлСДиска(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddLinkedFileResponse");
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		ПапкаСсылка = ПолучитьПапкуДляХраненияФайлов(Сообщение.rootFolderId,
			Сообщение.file.externalObject.type, Сообщение.file.externalObject.id, Сообщение.file.externalObject.name);
			
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Сообщение.file.binaryData);
		АдресВременногоХранилищаТекста = "";
		
		Если Сообщение.file.Установлено("text") Тогда
			АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(Сообщение.file.text);
		КонецЕсли;
		
		// Создадим карточку Файла в БД
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
		СведенияОФайле.ИмяБезРасширения = Сообщение.file.name;
		СведенияОФайле.РасширениеБезТочки = Сообщение.file.extension;
		СведенияОФайле.Размер = Сообщение.file.size;
		СведенияОФайле.ВремяИзменения = Сообщение.file.modificationDate;
		СведенияОФайле.ВремяИзмененияУниверсальное = Сообщение.file.modificationDateUniversal;
		
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ПапкаСсылка, СведенияОФайле);
			
		Если Сообщение.file.signatures.Количество() > 0 Тогда
			ЗанестиИнформациюОПодписяхОбъекта(Сообщение.file.signatures, ФайлСсылка);
		КонецЕсли;
			
		ОбработкаЗапросовXDTO.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
			Узел, Сообщение.file.externalObject.id, Сообщение.file.externalObject.type, ФайлСсылка);
			
		Ответ.file = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		Ответ.file.name = Строка(ФайлСсылка); 
		Ответ.file.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
		Ответ.file.objectId.id = Строка(ФайлСсылка.УникальныйИдентификатор()); 
		Ответ.file.objectId.type = "DMFile";
		
		ЗаписатьПапкуФайлаДляВнешнегоОбъекта(Сообщение.file.externalObject.id, Сообщение.file.externalObject.type, ПапкаСсылка);
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при добавлении файла с диска'; en = 'Error when adding file from disk'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Получает массив структур, описывающих подпапки указанной папки первого уровня
//
// Параметры:
//   ИдентификаторКорневойПапки - Строка - идентификатор родительской папки
//
// Возвращаемое значение:
//   Массив - содержит элементы типа Структура:
//     * Идентификатор - Строка - идентификатор подпапки
//     * Наименование - Строка - наименование подпапки
//
Функция ПолучитьСписокПапок(ИдентификаторКорневойПапки) Экспорт
	
	СсылкаПапки = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИдентификаторКорневойПапки) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторКорневойПапки);
		СсылкаПапки = Справочники.ПапкиФайлов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиФайлов.Ссылка КАК Ссылка,
		|	ПапкиФайлов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Родитель = &Ссылка
		|	И ПапкиФайлов.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	МассивПапок = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПапки = Новый Структура("УникальныйИдентификатор, Наименование", 
			Выборка.Ссылка.УникальныйИдентификатор(), Выборка.Наименование);
		МассивПапок.Добавить(СтруктураПапки);	
	КонецЦикла;
	
	Возврат МассивПапок;
	
КонецФункции	

// Вызывается при удалении папки файлов, чтобы очистить регистр ПапкиХраненияФайловОбъектовИнтегрированныхСистем
//
// Параметры:
//   Источник - СправочникОбъект.ПапкиФайлов - удаляемая папка
//   Отказ - Булево
//
Процедура ПриУдаленииПапкиФайловПередУдалением(Источник, Отказ) Экспорт
	
	Отбор = Новый Структура("СсылкаНаПапкуФайловДО", Источник.Ссылка);
	ВыборкаРегистра = РегистрыСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем.Выбрать(Отбор);
	
	ИДВнешнегоОбъекта = Неопределено;
	ТипВнешнегоОбъекта = Неопределено;
	Если ВыборкаРегистра.Следующий() Тогда
		ИДВнешнегоОбъекта = ВыборкаРегистра.ИДВнешнегоОбъекта;
		ТипВнешнегоОбъекта = ВыборкаРегистра.ТипВнешнегоОбъекта;
	Иначе
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИДВнешнегоОбъекта.Установить(ИДВнешнегоОбъекта);
	НаборЗаписей.Отбор.ТипВнешнегоОбъекта.Установить(ТипВнешнегоОбъекта);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет файл Документооборота двоичными или текстовыми данными из объекта XDTO
//
// Параметры:
//   ФайлДО - СправочникФайлы.Ссылка - обновляемый файл
//   ФайлXDTO - ОбъектXDTO типа DMFile - источник данных заполнения
//
Процедура ОбновитьДвоичныеДанныеФайла(ФайлДО, ФайлXDTO) Экспорт
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
	АдресВременногоХранилищаТекста = "";
	
	ТекстНеИзвлеченНаКлиенте = Истина;
	
	Если ФайлXDTO.Установлено("text") Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		ТекстовыйФайл.Записать(ФайлXDTO.text);
		ТекстовыйФайл.Закрыть();
		
		ДвоичныеДанныеТекста = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВременногоХранилищаТекста = ПоместитьВоВременноеХранилище(ДвоичныеДанныеТекста);
		ТекстНеИзвлеченНаКлиенте = Ложь;
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлДО);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.ВремяИзменения = ФайлXDTO.modificationDate;
	СведенияОФайле.ВремяИзмененияУниверсальное = ФайлXDTO.modificationDateUniversal;
	СведенияОФайле.Размер = ФайлXDTO.size;
	СведенияОФайле.ИмяБезРасширения = Строка(ФайлДО);
	СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	
	Если ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		РаботаСФайламиВызовСервера.СохранитьИзмененияФайла(
			ФайлДО,
			СведенияОФайле,
			Истина, "", "", Ложь);
			
	Иначе // попытаемся захватить файл, затем сохранить изменения и освободить его
	
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			ВызватьИсключение СтрокаОшибки;
		КонецЕсли;
		
		СтрокаОшибки = "";
		ДатаЗаема = ТекущаяДатаСеанса();
		Если Не РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ДатаЗаема) Тогда 
			ВызватьИсключение СтрокаОшибки;
		КонецЕсли;
		
		РаботаСФайламиВызовСервера.СохранитьИзмененияИОсвободитьФайл(
			ДанныеФайла,
			СведенияОФайле,
			Истина, "", "");
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет и записывает файл Документооборота по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMFile
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMFile, заполненный сведениями о записанном файле, или DMError
//
Функция ИзменитьФайл(Узел, Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		
		ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка.ТекущаяВерсия);
		ЧислоПодписейПосле = Объект.signatures.Количество();
		
		Если Объект.Установлено("binaryData") Тогда
			ОбновитьДвоичныеДанныеФайла(Ссылка, Объект);
		Иначе	
			
			Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда // удаляем подписи перед изменением карточки файла
				ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
			
			НаименованиеДоЗаписи = Ссылка.Наименование;
			ОписаниеДоЗаписи 	 = Ссылка.Описание;
			
			Наименование = "";
			Описание = "";
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Наименование, 	Объект, "name");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Описание, 		Объект, "description");
			
			Если НаименованиеДоЗаписи <> Наименование ИЛИ ОписаниеДоЗаписи <> Описание
				ИЛИ ОбработкаЗапросовXDTO.ДополнительныеРеквизитыИзменены(Узел, Ссылка, Объект)
				ИЛИ Объект.Установлено("activeVersion") Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Ссылка);
				ФайлОбъект = Ссылка.ПолучитьОбъект();
				
				Если ЗначениеЗаполнено(Наименование) Тогда
					
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФайлОбъект.ПолноеНаименование, 	Объект, "name");
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФайлОбъект.Наименование, 		Объект, "name");
				
					ТипХраненияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлОбъект.ТекущаяВерсия, "ТипХраненияФайла");
					
					// Возможно, требуется изменить имя файла в томе не диске.
					Если НаименованиеДоЗаписи <> ФайлОбъект.Наименование Тогда
						Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
							РаботаСФайламиВызовСервера.ПереименоватьФайлВерсииНаДиске(ФайлОбъект.ТекущаяВерсия, НаименованиеДоЗаписи, ФайлОбъект.Наименование);
							ФайлОбъект.Прочитать();
							ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФайлОбъект.ПолноеНаименование, 	Объект, "name");
							ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФайлОбъект.Наименование, 		Объект, "name");
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФайлОбъект.Описание, 	Объект, "description");
				
				// Возможно, необходима смена текущей версии.
				Если Объект.Установлено("activeVersion") Тогда
					Если Не ФайлОбъект.Редактирует.Пустая() Тогда
						Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
						Ошибка.subject = НСтр("ru = 'Ошибка при записи файла'; en = 'Error saving file'");
						Ошибка.description = НСтр("ru = 'Смена активной версии разрешена только для не занятых файлов!'; en = 'Changing active version is only allowed for files not locked for editing!'");
						РазблокироватьДанныеДляРедактирования(Ссылка);
						Возврат Ошибка;
					КонецЕсли;
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ФайлОбъект.ТекущаяВерсия, 	Объект, "activeVersion");
				КонецЕсли;
				
				ТекстСообщения = "";
				Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ФайлОбъект, ТекстСообщения) Тогда 
					Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
					Ошибка.subject = НСтр("ru = 'Ошибка при записи файла'; en = 'Error saving file'");
					Ошибка.description = ТекстСообщения;
					РазблокироватьДанныеДляРедактирования(Ссылка);
					Возврат Ошибка;
				КонецЕсли;
				
				ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Узел, ФайлОбъект, Объект);
				
				ФайлОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(Ссылка);
				
				// Смена активной версии требует записи самой версии, чтобы отработали все подписки.
				Если Объект.Установлено("activeVersion") Тогда
					ВерсияОбъект = ФайлОбъект.ТекущаяВерсия.ПолучитьОбъект();
					ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.ТекущаяВерсия);
					ВерсияОбъект.Записать();
					РазблокироватьДанныеДляРедактирования(ФайлОбъект.ТекущаяВерсия);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
				ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Установлено("scannedOriginal") Тогда
			Делопроизводство.СохранитьСведенияОбОригиналеФайла(Ссылка,,Объект.scannedOriginal);
		КонецЕсли;
		
		НаборКолонок = Новый Массив;
		
		НаборКолонок.Добавить("objectId");
		НаборКолонок.Добавить("signed");
		НаборКолонок.Добавить("name");
		НаборКолонок.Добавить("size");
		НаборКолонок.Добавить("creationDate");
		НаборКолонок.Добавить("modificationDateUniversal");
		НаборКолонок.Добавить("author");
		НаборКолонок.Добавить("extension");
		НаборКолонок.Добавить("description");
		НаборКолонок.Добавить("editing");
		НаборКолонок.Добавить("encrypted");
		НаборКолонок.Добавить("scannedOriginal");
		НаборКолонок.Добавить("activeVersion");
		
		Возврат ПолучитьКарточкуФайла(Объект.objectId.id, НаборКолонок);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи файла'; en = 'Error saving file'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции	

// Добавляет в Документооборот файл по данным объекта XDTO. В сообщении передаются
// двоичные данные из ИС или ссылка на файл-шаблон в ДО.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddFileRequest с заполненным template или binaryData.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddFileResponse или DMError.
//
Функция ДобавитьФайлВДокумент(Сообщение) Экспорт
	
	Попытка 
		
		Если Сообщение.file.Установлено("template")
			И Не Сообщение.file.Установлено("binaryData") Тогда
			
			Возврат ДобавитьФайлВДокументИзШаблона(Сообщение);
			
		ИначеЕсли Сообщение.file.Установлено("binaryData") Тогда
			
			Возврат ДобавитьФайлВДокументИзДвоичныхДанных(Сообщение);
			
		Иначе
			
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при добавлении файла'; en = 'Error when adding file'");
			Ошибка.description = НСтр("ru = 'Не заполнен ни шаблон, ни двоичные данные файла'; en = 'Neither template nor binary file data are specified'");
			Возврат Ошибка;
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при добавлении файла'; en = 'Error when adding file'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Занимает указанный файл на редактирование и, если указано свойством columnSet, получает его данные.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект типа DMLockFileRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMLockFileResponse или DMError.
//
Функция ЗанятьФайл(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ИдентификаторФайла = Сообщение.objectId.id;
		ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторФайла));
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка,, ИдентификаторКлиента); // возможно исключение
		ТекстСообщенияОбОшибке = "";
		ДатаЗаема = Сообщение.lockDate; // дата должна быть передана: часовой пояс клиента неизвестен
		
		// Проверим, не захвачен ли файл другим пользователем.
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) 
			И ДанныеФайла.Редактирует <> Пользователи.ТекущийПользователь() Тогда
			
			ТекстСообщенияОбОшибке = СтрШаблон(
				НСтр("ru = 'Файл уже занят пользователем ""%1""'; en = 'File is already in use by user ""%1""'"),
				ДанныеФайла.Редактирует);
				
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при занятии файла'; en = 'Error when locking file'");
			Ошибка.description = ТекстСообщенияОбОшибке;
			
			ОтменитьТранзакцию();
			Возврат Ошибка;
			
		КонецЕсли;
		
		// Проверим, не захвачен ли файл тем же пользователем с другого компьютера.
		Если ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
			И ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
			
			ТекстСообщенияОбОшибке = СтрШаблон(
				НСтр("ru = 'Файл ""%1.%2"" занят вами с другого компьютера (%3).
				|Выполните ""Закончить редактирование"" с компьютера %4
				|или отмените редактирование (сделанные вами изменения будут потеряны).';
				|en = 'You have locked for edit file ""%1.%2"" from another computer (%3). 
				|Perform ""Finish editing"" from computer %4. 
				|or cancel editing (changes you have made will be lost).'"), 
				ДанныеФайла.ПолноеНаименованиеВерсии,
				ДанныеФайла.Расширение,
				ДанныеФайла.ИмяДругогоКомпьютера,
				ДанныеФайла.ИмяДругогоКомпьютера);
				
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при занятии файла'; en = 'Error when locking file'");
			Ошибка.description = ТекстСообщенияОбОшибке;
			
			ОтменитьТранзакцию();
			Возврат Ошибка;
			
		КонецЕсли;
		
		// Проверим, не запрещает ли состояние владельца редактирование файла.
		Если Константы.ИспользоватьСостоянияДокументов.Получить() 
			И Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить() 
			И Не РольДоступна("ПолныеПрава") Тогда 
			
			Если ТипЗнч(ДанныеФайла.Владелец) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда 
				ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
			ИначеЕсли ТипЗнч(ДанныеФайла.Владелец) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда 
				ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
			ИначеЕсли ТипЗнч(ДанныеФайла.Владелец) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда 
				ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
			Иначе
				ТипДокумента = Неопределено;
			КонецЕсли;
			
			Если ТипДокумента <> Неопределено Тогда
				
				ИменаПолейИКоманд = 
					Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности(ТипДокумента);
					
				Если ИменаПолейИКоманд.Найти("editfile", "ИменаDMService") = Неопределено Тогда
						
					ТекстСообщенияОбОшибке = 
						НСтр("ru = 'Для текущего состояния документа запрещено изменение файлов.'; en = 'You cannot modifiy files for the current state of the document'");
						
					Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
					Ошибка.subject = НСтр("ru = 'Ошибка при занятии файла'; en = 'Error when locking file'");
					Ошибка.description = ТекстСообщенияОбОшибке;
					
					ОтменитьТранзакцию();
					Возврат Ошибка;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, ТекстСообщенияОбОшибке, ДатаЗаема, ИдентификаторКлиента) Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMLockFileResponse");
			Если Сообщение.Установлено("columnSet") Тогда
				НаборКолонок = Сообщение.columnSet;
				ОбъектDMFile = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
				ФайлСтруктура = ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок);
				ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСтруктура, НаборКолонок);
				Ответ.object = ОбъектDMFile;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			Возврат Ответ;
			
		Иначе
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при занятии файла'; en = 'Error when locking file'");
			Ошибка.description = ТекстСообщенияОбОшибке;
			
			ОтменитьТранзакцию();
			Возврат Ошибка;
			
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при занятии файла'; en = 'Error when locking file'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		ОтменитьТранзакцию();
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Освобождает занятый файл.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект типа DMUnlockFileRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUnlockFileResponse или DMError.
//
Функция ОсвободитьФайл(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ИдентификаторФайла = Сообщение.objectId.id;
		ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторФайла));
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка,, ИдентификаторКлиента); // возможно исключение
		
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда 
			МожноОсвободитьФайл = Истина;
			
		ИначеЕсли ДанныеФайла.Редактирует.Пустая() Тогда
			ТекстСообщенияОбОшибке = НСтр("ru = 'Нельзя освободить файл, так как он никем не занят.'; en = 'Unable to unlock the file because it is not locked.'");
			МожноОсвободитьФайл = Ложь;
			
		Иначе // занят кем-то другим
			Если Пользователи.ЭтоПолноправныйПользователь() Тогда
				МожноОсвободитьФайл = Истина;
			Иначе
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя освободить файл, так как он занят пользователем ""%1"".'; en = 'Unable to unlock the file because it is locked by user ""%1"".'"),
					Строка(ДанныеФайла.Редактирует));
				МожноОсвободитьФайл = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	
		Если МожноОсвободитьФайл Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайл(ДанныеФайла, ИдентификаторКлиента);
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUnlockFileResponse");
			Если Сообщение.Установлено("columnSet") Тогда
				НаборКолонок = Сообщение.columnSet;
				ОбъектDMFile = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
				ФайлСтруктура = ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок);
				ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСтруктура, НаборКолонок);
				Ответ.object = ОбъектDMFile;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			Возврат Ответ;
			
		Иначе
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при освобождении файла'; en = 'Error when releasing file'");
			Ошибка.description = ТекстСообщенияОбОшибке;
			
			ОтменитьТранзакцию();
			Возврат Ошибка;
			
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при освобождении файла'; en = 'Error when releasing file'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		ОтменитьТранзакцию();
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает сведения о редактировании файла текущим пользователем.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект типа DMGetFileEditingInfoRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetFileEditingInfoResponse или DMError.
//
Функция ПолучитьСведенияОРедактированииФайла(Сообщение) Экспорт
	
	Попытка
		
		// Ради экономии вызовов запрашивать можно сведения и о версии, и о файле.
		// В последнем случае возвращаются сведения о текущей версии; она же указывается в ответе.
		Если Сообщение.objectId.type = "DMFile" Тогда
			Файл = Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(
				Сообщение.objectId.id));
			Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
			Если Не ЗначениеЗаполнено(Версия) Тогда
				Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
				Ошибка.subject = НСтр("ru = 'Ошибка при получении сведений о редактировании файла'; en = 'Error retrieving information of file editing'");
				Инфо = НСтр("ru = 'Файл не найден'; en = 'File not found'");
				Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
				Возврат Ошибка;
			КонецЕсли;
			
		ИначеЕсли Сообщение.objectId.type = "DMFileVersion" Тогда
			Версия = Справочники.ВерсииФайлов.ПолучитьСсылку(Новый УникальныйИдентификатор(
				Сообщение.objectId.id));
				
		Иначе // может быть передан объект произвольного типа: выдадим понятное исключение
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при получении сведений о редактировании файла'; en = 'Error retrieving information of file editing'");
			Инфо = НСтр("ru = 'Сведения о редактировании можно получить только для файла или для версии файла'; en = 'Information on editing can be retrieved only for file or file version'");
			Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
			Возврат Ошибка;
			
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetFileEditingInfoResponse");
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Идентификатор = Строка(ИдентификаторКлиента) + "_" + Строка(ТекущийПользователь.УникальныйИдентификатор());
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сведения.Путь КАК Путь,
			|	Сведения.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
			|	Сведения.НаЧтение КАК НаЧтение,
			|	Сведения.ВРабочемКаталогеВладельца КАК ВРабочемКаталогеВладельца,
			|	Версии.Ссылка КАК Версия,
			|	Версии.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
			|	Версии.Размер КАК Размер,
			|	Версии.Владелец.ВладелецФайла КАК ВладелецФайла
			|ИЗ
			|	Справочник.ВерсииФайлов КАК Версии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК Сведения
			|		ПО Версии.Ссылка = Сведения.Версия
			|			И (Сведения.Идентификатор = &Идентификатор)
			|ГДЕ
			|	Версии.Ссылка = &Версия");
		Запрос.УстановитьПараметр("Версия", Версия);
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			Сведения = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFileEditingInfo");
			
			// Получим рекомендуемый каталог для сохранения.
			Каталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Выборка.ВладелецФайла);
			Если ЗначениеЗаполнено(Каталог) Тогда
				Сведения.inOwnersFolder = Истина;
			Иначе
				Каталог = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя(ИдентификаторКлиента);
				Сведения.inOwnersFolder = Ложь;
			КонецЕсли;
			Если Каталог = Неопределено Тогда
				Каталог = "";
			КонецЕсли;
			Сведения.folder = Каталог;
			
			Если Выборка.Путь = NULL Тогда // файла нет на диске
				Сведения.saved = Ложь;
				
			Иначе // файл есть на диске
				Сведения.saved = Истина;
				Сведения.saveDate = Выборка.ДатаПомещенияВРабочийКаталог;
				Сведения.readOnly = Выборка.НаЧтение;
				Сведения.modificationDateUniversal = Выборка.ДатаМодификацииУниверсальная;
				Сведения.size = Выборка.Размер;
				Если Выборка.ВРабочемКаталогеВладельца Тогда
					Сведения.inOwnersFolder = Истина;
					Сведения.fullPath = Выборка.Путь;
				Иначе // добавим к пути имя каталога
					Сведения.inOwnersFolder = Ложь;
					Сведения.fullPath = Каталог + Выборка.Путь;
				КонецЕсли;
				
			КонецЕсли;
			
			Ответ.info = Сведения;
			Ответ.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
			Ответ.objectId.id = Строка(Выборка.Версия.УникальныйИдентификатор());
			Ответ.objectId.type = "DMFileVersion";
			
		Иначе // указанная версия не существует (например, удалена) или недоступна по RLS
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при получении сведений о редактировании файла'; en = 'Error retrieving information of file editing'");
			Инфо = НСтр("ru = 'Версия не найдена'; en = 'Version not found'");
			Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
			Возврат Ошибка;
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении сведений о редактировании файла'; en = 'Error retrieving information of file editing'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Записывает сведения сведения о редактировании файла текущим пользователем.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект типа DMUpdateFileEditingInfoRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUpdateFileEditingInfoResponse или DMError.
//
Функция ЗаписатьСведенияОРедактированииФайла(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Версия = Справочники.ВерсииФайлов.ПолучитьСсылку(Новый УникальныйИдентификатор(
			Сообщение.objectId.id));
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUpdateFileEditingInfoResponse");
		
		Запись = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьМенеджерЗаписи();
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Идентификатор = Строка(ИдентификаторКлиента) + "_" + Строка(ТекущийПользователь.УникальныйИдентификатор());
		
		Запись.Версия = Версия;
		Запись.Идентификатор = Идентификатор;
		Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
		Запись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
		
		Если Сообщение.info.saved Тогда
			Запись.Размер = Сообщение.info.size;
			Запись.ДатаПомещенияВРабочийКаталог = Сообщение.info.saveDate;
			Запись.НаЧтение = Сообщение.info.readOnly;
			Если Сообщение.info.inOwnersFolder Тогда
				Запись.ВРабочемКаталогеВладельца = Истина;
				Запись.Путь = Сообщение.info.fullPath;
			Иначе
				Каталог = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя(ИдентификаторКлиента);
				Если Каталог = Неопределено Тогда
					Каталог = "";
				КонецЕсли;
				ПолныйПуть = Сообщение.info.fullPath;
				Если Лев(ПолныйПуть, СтрДлина(Каталог)) = Каталог Тогда
					Запись.Путь = Сред(ПолныйПуть, СтрДлина(Каталог) + 1);
				Иначе
					Запись.Путь = ПолныйПуть;
				КонецЕсли;
			КонецЕсли;
			Запись.Записать();
		Иначе
			Запись.Удалить();
		КонецЕсли;
		
		Возврат Ответ;
			
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи сведений о редактировании файла'; en = 'Error saving information of file editing'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет поля указанного файла данными его владельца.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAutoFillRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAutoFillResponse или DMError.
//
Функция ЗаполнитьПоляФайлаДаннымиВладельца(Сообщение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов") Тогда
		ВызватьИсключение НСтр("ru = 'В настройках 1С:Документооборота отключено автозаполнение файлов.'; en = 'Automatic filling of files is turned off in 1C:Document management settings'");
	КонецЕсли;
		
	Файл = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.file.objectId);
	Если Файл = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Указанный файл не найден в 1С:Документообороте.'; en = 'The specified file is not found in the 1C:Document Management'");
	КонецЕсли;
	
	Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	
	РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
		Ложь,
		Файл,
		Истина,,
		Владелец);
		
	Если РезультатЗаполнения.Результат Тогда
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAutoFillResponse");
		Возврат Ответ;
	Иначе
		ВызватьИсключение РезультатЗаполнения.ОписаниеОшибки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заменяет символы \ / : * ? "" < > |   на пробелы
//
Процедура ОчиститьСтрокуОтСимволовЗапрещенныхВФайловойСистеме(Текст)
	
	Текст = СтрЗаменить(Текст, "\", " ");
	Текст = СтрЗаменить(Текст, "/", " ");
	Текст = СтрЗаменить(Текст, ":", " ");
	Текст = СтрЗаменить(Текст, "*", " ");
	Текст = СтрЗаменить(Текст, "?", " ");
	Текст = СтрЗаменить(Текст, "|", " ");
	Текст = СтрЗаменить(Текст, """", " ");
	Текст = СтрЗаменить(Текст, "<", " ");
	Текст = СтрЗаменить(Текст, ">", " ");
	
КонецПроцедуры

// Получает существующую или создает новую папку файлов в подкаталоге вида 
// "КорневаяПапка"-"Документ._ДемоЗаказПокупателя"-"Заказ ААА (10e387b0-3a94-11e0-bc2f-e0cb4ed5f5c8)"
//
// Параметры:
//   ИдентификаторКорневойПапки - Строка - идентификатор корневой папки 
//   ТипВладельца - Строка - полное имя типа владельца и одновременно наименование папки типа
//   ИдентификаторВладельца - Строка - идентификатор владельца
//   ИмяВладельца - Строка - наименование владельца
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов - ссылка на найденную или созданную папку
//
Функция ПолучитьПапкуДляХраненияФайлов(ИдентификаторКорневойПапки, 
	ТипВладельца, ИдентификаторВладельца, ИмяВладельца) Экспорт
	
	ПапкаХранения = ПолучитьПапкуФайловДОПоВнешнемуОбъекту(ИдентификаторВладельца, ТипВладельца);
	Если ПапкаХранения <> Неопределено Тогда
		Возврат ПапкаХранения;
	КонецЕсли;
	
	ИдентификаторПапки = Новый УникальныйИдентификатор(ИдентификаторКорневойПапки);
	РодительскаяПапка = Справочники.ПапкиФайлов.ПолучитьСсылку(ИдентификаторПапки);
	
	Если РодительскаяПапка = Неопределено ИЛИ РодительскаяПапка.Пустая() Тогда
		ВызватьИсключение "Родительская папка не найдена.";
	КонецЕсли;
	
	ИмяПапкиТипа = ТипВладельца;
	ОчиститьСтрокуОтСимволовЗапрещенныхВФайловойСистеме(ИмяПапкиТипа);
	ПапкаТипа = Справочники.ПапкиФайлов.НайтиПоНаименованию(ИмяПапкиТипа, , РодительскаяПапка);
	Если ПапкаТипа = Неопределено ИЛИ ПапкаТипа.Пустая() Тогда
		ПапкаОбъект = Справочники.ПапкиФайлов.СоздатьЭлемент();
		ПапкаОбъект.Наименование = ИмяПапкиТипа;
		ПапкаОбъект.Родитель = РодительскаяПапка;
		ПапкаОбъект.Записать();
		ПапкаТипа = ПапкаОбъект.Ссылка;
	КонецЕсли;
	
	МаксимальнаяДлинаИмениПапки = 150;
	ИмяПапкиВладельца = ИмяВладельца + " (" + ИдентификаторВладельца + ")";
	Если СтрДлина(ИмяПапкиВладельца) > МаксимальнаяДлинаИмениПапки Тогда
		ДлинаДляИмени = МаксимальнаяДлинаИмениПапки - СтрДлина(ИдентификаторВладельца) - 3;
		ИмяПапкиВладельца = Лев(ИмяВладельца, ДлинаДляИмени) + " (" + ИдентификаторВладельца + ")";
	КонецЕсли;
	
	ОчиститьСтрокуОтСимволовЗапрещенныхВФайловойСистеме(ИмяПапкиВладельца);
	ПапкаВладельца = Справочники.ПапкиФайлов.НайтиПоНаименованию(ИмяПапкиВладельца, , ПапкаТипа);
	Если ПапкаВладельца = Неопределено ИЛИ ПапкаВладельца.Пустая() Тогда
		ПапкаОбъект = Справочники.ПапкиФайлов.СоздатьЭлемент();
		ПапкаОбъект.Наименование = ИмяПапкиВладельца;
		ПапкаОбъект.Родитель = ПапкаТипа;
		ПапкаОбъект.Записать();
		ПапкаВладельца = ПапкаОбъект.Ссылка;
	КонецЕсли;
	
	Возврат ПапкаВладельца;
	
КонецФункции	

// Получает объект XDTO, соответствующий файлу, по переданной структуре
//
// Параметры:
//   ОбъектDMFile - ОбъектXDTO типа DMFile - заполняемый объект, неявно возвращаемое значение
//   ФайлСтруктура - Структура - значения реквизитов, источник данных заполнения
//   НаборКолонок - Массив - набор имен реквизитов к заполнению
//
Процедура ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСтруктура, НаборКолонок)
	
	ОбъектDMFile.name = ФайлСтруктура.Наименование;
	ОбъектDMFile.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
	ОбъектDMFile.objectId.type = "DMFile";
	
	Если ЗначениеЗаполнено(ФайлСтруктура.Ссылка) Тогда
		
		ОбъектDMFile.objectId.id = Строка(ФайлСтруктура.Ссылка.УникальныйИдентификатор()); 
	
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ФайлСтруктура.Ссылка, ОбъектDMFile);
		
	Иначе
		
		ОбъектDMFile.objectId.id = "";
		
	КонецЕсли;
	
	
	ИменаПолейПодписей = Новый Массив;
	ПрефиксПодписи = "signatures.";
	
	Для Каждого ИмяКолонки Из НаборКолонок Цикл
		
		Если Найти(ИмяКолонки, ПрефиксПодписи) <> 0 Тогда
			ИмяРеквизитаПодписи = Сред(ИмяКолонки, СтрДлина(ПрефиксПодписи) + 1);
			ИменаПолейПодписей.Добавить(ИмяРеквизитаПодписи);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ФайлСтруктура Цикл
		
		Если КлючИЗначение.Ключ = "ПодписанЭП" Тогда
			ОбъектDMFile.signed = ФайлСтруктура.ПодписанЭП;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ТекущаяВерсияРасширение" Тогда
			ОбъектDMFile.extension = ФайлСтруктура.ТекущаяВерсияРасширение;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Описание" Тогда
			ОбъектDMFile.description = ФайлСтруктура.Описание;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ТекущаяВерсияРазмер" Тогда
			ОбъектDMFile.size = ФайлСтруктура.ТекущаяВерсияРазмер;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаСоздания" Тогда
			ОбъектDMFile.creationDate = ФайлСтруктура.ДатаСоздания;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаМодификацииУниверсальная" Тогда
			ОбъектDMFile.modificationDateUniversal = ФайлСтруктура.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ТекущаяВерсияДатаМодификацииФайла" Тогда
			ОбъектDMFile.modificationDate = ФайлСтруктура.ТекущаяВерсияДатаМодификацииФайла;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Зашифрован" Тогда
			ОбъектDMFile.encrypted = ФайлСтруктура.Зашифрован;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Редактирует" Тогда
			Если ФайлСтруктура.Редактирует.Пустая() Тогда
				ОбъектDMFile.editing = Ложь;
			Иначе
				ОбъектDMFile.editing = Истина;
				ОбъектDMFile.editingUser = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
				ОбъектDMFile.editingUser.name = Строка(ФайлСтруктура.Редактирует); 
				ОбъектDMFile.editingUser.objectId = ОбработкаЗапросовXDTO.
					ПолучитьObjectIDПоСсылке(ФайлСтруктура.Редактирует);
			КонецЕсли;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаЗаема" Тогда
			ОбъектDMFile.lockDate  = ФайлСтруктура.ДатаЗаема;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ВладелецФайла" Тогда
			ОбъектDMFile.owner = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
			ОбъектDMFile.owner.name = Строка(ФайлСтруктура.ВладелецФайла); 
			ОбъектDMFile.owner.objectId = 
				ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФайлСтруктура.ВладелецФайла);
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ШаблонОснованиеДляСоздания" Тогда
			ОбъектDMFile.template = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
			ОбъектDMFile.template.name = Строка(ФайлСтруктура.ШаблонОснованиеДляСоздания); 
			ОбъектDMFile.template.objectId = 
				ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФайлСтруктура.ШаблонОснованиеДляСоздания);
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Автор" Тогда
			ОбъектDMFile.author = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
			ОбъектDMFile.author.name = Строка(ФайлСтруктура.Автор); 
			ОбъектDMFile.author.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
			ОбъектDMFile.author.objectId.id = Строка(ФайлСтруктура.Автор.УникальныйИдентификатор()); 
			ОбъектDMFile.author.objectId.type = "DMUser";
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ЯвляетсяОригиналом" Тогда
			ОбъектDMFile.scannedOriginal  = ФайлСтруктура.ЯвляетсяОригиналом;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ТекущаяВерсия" Тогда
			ОбъектDMFile.activeVersion = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFileVersion");
			ОбъектDMFile.activeVersion.name = Строка(ФайлСтруктура.ТекущаяВерсия); 
			ОбъектDMFile.activeVersion.objectId = ОбработкаЗапросовXDTO.
				ПолучитьObjectIDПоСсылке(ФайлСтруктура.ТекущаяВерсия);
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ПометкаУдаления" Тогда
			ОбъектDMFile.deletionMark = ФайлСтруктура.ПометкаУдаления;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДвоичныеДанные" Тогда
			ОбъектDMFile.binaryData = ФайлСтруктура.ДвоичныеДанные;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Подписи" И ИменаПолейПодписей.Количество() <> 0 Тогда
			// тут цикл по подписям
			
			Для Каждого Подпись Из ФайлСтруктура.Подписи Цикл
				
				ПодписьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSignature");
				
				Для Каждого КлючИЗначениеПодписи Из Подпись Цикл
					
					Если КлючИЗначениеПодписи.Ключ = "КомуВыданСертификат" Тогда
						ПодписьXDTO.author = Подпись.КомуВыданСертификат;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "ДатаПодписи" Тогда
						ПодписьXDTO.date = Подпись.ДатаПодписи;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Комментарий" Тогда
						ПодписьXDTO.comment = Подпись.Комментарий;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Подпись" Тогда
						ПодписьXDTO.signature = Подпись.Подпись;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Отпечаток" Тогда
						ПодписьXDTO.thumbprint = Подпись.Отпечаток;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Сертификат" Тогда
						ПодписьXDTO.certificate = Подпись.Сертификат;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "ИмяФайлаПодписи" Тогда
						ПодписьXDTO.signatureFileName = Подпись.ИмяФайлаПодписи;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "УстановившийПодпись" Тогда
						ПодписьXDTO.signer = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
						ПодписьXDTO.signer.name = Строка(Подпись.УстановившийПодпись); 
						ПодписьXDTO.signer.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
						ПодписьXDTO.signer.objectId.id = Строка(Подпись.УстановившийПодпись.УникальныйИдентификатор()); 
						ПодписьXDTO.signer.objectId.type = "DMUser";
					КонецЕсли;
					
				КонецЦикла;
				
				ОбъектDMFile.signatures.Добавить(ПодписьXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру данными файла
//
// Параметры:
//   ФайлСсылка - СправочникСсылка.Файлы - файл, данные которого подлежат получению
//   НаборКолонок - Массив - массив имен реквизитов к получению
//
// Возвращаемое значение:
//   Структура, ключи которой - имена реквизитов файла, а значения - значения этих реквизитов
//
Функция ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("editing", "Редактирует");
	СтруктураРеквизитов.Вставить("editingUser", "Редактирует");
	СтруктураРеквизитов.Вставить("modificationDate", "ТекущаяВерсияДатаМодификацииФайла");
	СтруктураРеквизитов.Вставить("signed", "ПодписанЭП");
	СтруктураРеквизитов.Вставить("size", "ТекущаяВерсияРазмер");
	СтруктураРеквизитов.Вставить("creationDate", "ДатаСоздания");
	СтруктураРеквизитов.Вставить("author", "Автор");
	СтруктураРеквизитов.Вставить("extension", "ТекущаяВерсияРасширение");
	СтруктураРеквизитов.Вставить("description", "Описание");
	СтруктураРеквизитов.Вставить("encrypted", "Зашифрован");
	СтруктураРеквизитов.Вставить("lockDate", "ДатаЗаема");
	СтруктураРеквизитов.Вставить("owner", "ВладелецФайла");
	СтруктураРеквизитов.Вставить("activeVersion", "ТекущаяВерсия");
	СтруктураРеквизитов.Вставить("deletionMark", "ПометкаУдаления");
	СтруктураРеквизитов.Вставить("template", "ШаблонОснованиеДляСоздания");
	
	ИменаРеквизитов = "";
	Разделитель = "";
	ПолучатьДвоичныеДанные = Ложь;
	ПолучатьЯвляетсяОригиналом = Ложь;
	ПолучатьТекущуюВерсию = Ложь;
	ПолучатьРеквизитыВерсии = Ложь;
	
	Для каждого КлючИЗначение из СтруктураРеквизитов Цикл
		Для каждого ИмяКолонки из НаборКолонок Цикл
			ПолучатьДвоичныеДанные = ПолучатьДвоичныеДанные или (ИмяКолонки = "binaryData");
			ПолучатьЯвляетсяОригиналом = ПолучатьЯвляетсяОригиналом или (ИмяКолонки = "scannedOriginal");
			ПолучатьТекущуюВерсию = ПолучатьТекущуюВерсию или (ИмяКолонки = "activeVersion");
			ПолучатьРеквизитыВерсии = ПолучатьРеквизитыВерсии или (ИмяКолонки = "modificationDateUniversal");
			Если ИмяКолонки = КлючИЗначение.Ключ Тогда
				ИменаРеквизитов = ИменаРеквизитов + Разделитель + КлючИЗначение.Значение;
				Разделитель = ", ";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовПодписи = Новый Структура;
	СтруктураРеквизитовПодписи.Вставить("author", "КомуВыданСертификат");
	СтруктураРеквизитовПодписи.Вставить("date", "ДатаПодписи");
	СтруктураРеквизитовПодписи.Вставить("comment", "Комментарий");
	СтруктураРеквизитовПодписи.Вставить("signature", "Подпись");
	СтруктураРеквизитовПодписи.Вставить("thumbprint", "Отпечаток");
	СтруктураРеквизитовПодписи.Вставить("signer", "УстановившийПодпись");
	СтруктураРеквизитовПодписи.Вставить("certificate", "Сертификат");
	СтруктураРеквизитовПодписи.Вставить("signatureFileName", "ИмяФайлаПодписи");
	
	РеквизитыПодписей = ""; Разделитель = "";
	Для каждого КлючИЗначение из СтруктураРеквизитовПодписи Цикл
		Для каждого ИмяКолонки из НаборКолонок Цикл
			Если ИмяКолонки = "signatures." + КлючИЗначение.Ключ Тогда
				РеквизитыПодписей = РеквизитыПодписей + Разделитель + КлючИЗначение.Значение;
				Разделитель = ", ";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РеквизитыФайла = Новый Структура;
	
	ИменаРеквизитов = ИменаРеквизитов + ?(ПустаяСтрока(ИменаРеквизитов),"",", ") + "Ссылка, Наименование"; // нужны всегда
	
	Если НЕ ПустаяСтрока(ИменаРеквизитов) Тогда
		
		// Некоторые свойства можно получить лишь из версии, но не из самого файла.
		Если (НЕ ПустаяСтрока(РеквизитыПодписей) ИЛИ ПолучатьДвоичныеДанные ИЛИ ПолучатьРеквизитыВерсии)
			И НЕ ПолучатьТекущуюВерсию Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", " + "ТекущаяВерсия";
		КонецЕсли;
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, ИменаРеквизитов);
		
		Если ПолучатьРеквизитыВерсии Тогда
			РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ТекущаяВерсия, "ДатаМодификацииУниверсальная");
			Для Каждого КлючИЗначение Из РеквизитыВерсии Цикл
				РеквизитыФайла.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение подписей.
		Если НЕ ПустаяСтрока(РеквизитыПодписей) Тогда
			
			Подписи = Новый Массив;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	" + РеквизитыПодписей + "
			               |ИЗ
			               |	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			               |ГДЕ
			               |	ЭлектронныеПодписи.Объект = &ОбъектСсылка";
			
			Запрос.Параметры.Вставить("ОбъектСсылка", РеквизитыФайла.ТекущаяВерсия);
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаЗапроса.Следующий() Цикл
				
				РеквизитыПодписи = Новый Структура(РеквизитыПодписей);
				ЗаполнитьЗначенияСвойств(РеквизитыПодписи, ВыборкаЗапроса);
				
				Если РеквизитыПодписи.Свойство("Подпись") Тогда
					РеквизитыПодписи.Подпись = ВыборкаЗапроса.Подпись.Получить(); // получаем двоичные данные
				КонецЕсли;
				
				Если РеквизитыПодписи.Свойство("Сертификат") Тогда
					РеквизитыПодписи.Сертификат = ВыборкаЗапроса.Сертификат.Получить(); // получаем двоичные данные
				КонецЕсли;
				
				Подписи.Добавить(РеквизитыПодписи);
				
			КонецЦикла;
			
			РеквизитыФайла.Вставить("Подписи", Подписи);
			
		КонецЕсли;
		
		// Получение сведений о файле.
		Если ПолучатьЯвляетсяОригиналом Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЯвляетсяОригиналом
				|ИЗ 
				|	РегистрСведений.СведенияОФайлах
				|ГДЕ
				|	Файл = &Файл
				|");
			Запрос.УстановитьПараметр("Файл", ФайлСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РеквизитыФайла.Вставить("ЯвляетсяОригиналом", Выборка.ЯвляетсяОригиналом);
			Иначе
				РеквизитыФайла.Вставить("ЯвляетсяОригиналом", Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		// Получение собственно файла.
		Если ПолучатьДвоичныеДанные Тогда
			
			Если РеквизитыФайла.ТекущаяВерсия.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(РеквизитыФайла.ТекущаяВерсия);
				ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
				
				РеквизитыФайла.Вставить("ДвоичныеДанные", ДвоичныеДанныеФайла);
				
			Иначе
				
				ВерсияСсылка = РеквизитыФайла.ТекущаяВерсия;
				
				Если НЕ ВерсияСсылка.Том.Пустая() Тогда
					ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
					Попытка
						РеквизитыФайла.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ПолныйПуть));
					Исключение
						СообщениеОбОшибке = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
							ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
						
						ВызватьИсключение СообщениеОбОшибке;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			РаботаСФайламиВызовСервера.ЗаписатьОбращениеКВерсииФайла(РеквизитыФайла.ТекущаяВерсия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыФайла;
	
КонецФункции

// Получает объект XDTO, соответствующий файлу, по переданной структуре
//
// Параметры:
//   ОбъектDMFileVersion - ОбъектXDTO типа DMFileVersion - заполняемый объект, неявно возвращаемое значение
//   СтруктураВерсии - Структура - значения реквизитов, источник данных заполнения
//   НаборКолонок - Массив - набор имен реквизитов к заполнению
//
Процедура ЗаполнитьXDTOВерсииФайла(ОбъектDMFileVersion, СтруктураВерсии, НаборКолонок)

	//  Обязательное поле
	ОбъектDMFileVersion.name = СтруктураВерсии.Наименование; 
	ОбъектDMFileVersion.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
	ОбъектDMFileVersion.objectId.id = Строка(СтруктураВерсии.Ссылка.УникальныйИдентификатор()); 
	ОбъектDMFileVersion.objectId.type = "DMFileVersion";
	
	ИменаПолейПодписей = Новый Массив;
	ПрефиксПодписи = "signatures.";
	
	Для Каждого ИмяКолонки Из НаборКолонок Цикл
		
		Если Найти(ИмяКолонки, ПрефиксПодписи) <> 0 Тогда
			ИмяРеквизитаПодписи = Сред(ИмяКолонки, СтрДлина(ПрефиксПодписи) + 1);
			ИменаПолейПодписей.Добавить(ИмяРеквизитаПодписи);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураВерсии Цикл
		
		Если КлючИЗначение.Ключ = "ПодписанЭП" Тогда
			ОбъектDMFileVersion.signed = СтруктураВерсии.ПодписанЭП;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Расширение" Тогда
			ОбъектDMFileVersion.extension  = СтруктураВерсии.Расширение;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Размер" Тогда
			ОбъектDMFileVersion.size = СтруктураВерсии.Размер;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаСоздания" Тогда
			ОбъектDMFileVersion.creationDate = СтруктураВерсии.ДатаСоздания;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаМодификацииУниверсальная" Тогда
			ОбъектDMFileVersion.modificationDateUniversal = СтруктураВерсии.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Зашифрован" Тогда
			ОбъектDMFileVersion.encrypted = СтруктураВерсии.Зашифрован;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Владелец" Тогда
			ОбъектDMFileVersion.owner = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
			ОбъектDMFileVersion.owner.name = Строка(СтруктураВерсии.Владелец); 
			ОбъектDMFileVersion.owner.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтруктураВерсии.Владелец);
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Автор" Тогда
			ОбъектDMFileVersion.author = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
			ОбъектDMFileVersion.author.name = Строка(СтруктураВерсии.Автор); 
			ОбъектDMFileVersion.author.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
			ОбъектDMFileVersion.author.objectId.id = Строка(СтруктураВерсии.Автор.УникальныйИдентификатор()); 
			ОбъектDMFileVersion.author.objectId.type = "DMUser";
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ПометкаУдаления" Тогда
			ОбъектDMFileVersion.deletionMark = СтруктураВерсии.ПометкаУдаления;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДвоичныеДанные" Тогда
			ОбъектDMFileVersion.binaryData = СтруктураВерсии.ДвоичныеДанные;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Подписи" И ИменаПолейПодписей.Количество() <> 0 Тогда
			
			Для Каждого Подпись Из СтруктураВерсии.Подписи Цикл
				
				ПодписьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSignature");
				
				Для Каждого КлючИЗначениеПодписи Из Подпись Цикл
					
					Если КлючИЗначениеПодписи.Ключ = "КомуВыданСертификат" Тогда
						ПодписьXDTO.author = Подпись.КомуВыданСертификат;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "ДатаПодписи" Тогда
						ПодписьXDTO.date = Подпись.ДатаПодписи;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Комментарий" Тогда
						ПодписьXDTO.comment = Подпись.Комментарий;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Подпись" Тогда
						ПодписьXDTO.signature = Подпись.Подпись;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Отпечаток" Тогда
						ПодписьXDTO.thumbprint = Подпись.Отпечаток;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "Сертификат" Тогда
						ПодписьXDTO.certificate = Подпись.Сертификат;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "ИмяФайлаПодписи" Тогда
						ПодписьXDTO.signatureFileName = Подпись.ИмяФайлаПодписи;
					КонецЕсли;
					
					Если КлючИЗначениеПодписи.Ключ = "УстановившийПодпись" Тогда
						ПодписьXDTO.signer = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
						ПодписьXDTO.signer.name = Строка(Подпись.УстановившийПодпись); 
						ПодписьXDTO.signer.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
						ПодписьXDTO.signer.objectId.id = Строка(Подпись.УстановившийПодпись.УникальныйИдентификатор()); 
						ПодписьXDTO.signer.objectId.type = "DMUser";
					КонецЕсли;
					
				КонецЦикла;
				
				ОбъектDMFileVersion.signatures.Добавить(ПодписьXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру данными версии файла
//
// Параметры:
//   ВерсияСсылка - СправочникСсылка.ВерсииФайлов - версия, данные которой подлежат получению
//   НаборКолонок - Массив - массив имен реквизитов к получению
//
// Возвращаемое значение:
//   Структура, ключи которой - имена реквизитов версии файла, а значения - значения этих реквизитов
//
Функция ЗаполнитьСтруктуруВерсииФайла(ВерсияСсылка, НаборКолонок)
	
	ИменаРеквизитов = "";
	РеквизитыПодписей = "";
	ПрефиксПодписи = "signatures.";
	
	ПолучатьДвоичныеДанные = Ложь;
	
	Для Каждого ИмяКолонки Из НаборКолонок Цикл
		
		Если Найти(ИмяКолонки, ПрефиксПодписи) <> 0 Тогда
			
			ИмяРеквизитаПодписи = Сред(ИмяКолонки, СтрДлина(ПрефиксПодписи) + 1);
			ИмяРеквизитаПодписиДляЗапроса = "";
			
			Если ИмяРеквизитаПодписи = "author" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "КомуВыданСертификат";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "date" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "ДатаПодписи";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "comment" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "Комментарий";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "signature" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "Подпись";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "thumbprint" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "Отпечаток";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "signer" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "УстановившийПодпись";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "certificate" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "Сертификат";
			КонецЕсли;
			
			Если ИмяРеквизитаПодписи = "signatureFileName" Тогда
				ИмяРеквизитаПодписиДляЗапроса = "ИмяФайлаПодписи";
			КонецЕсли;
						
			Если НЕ ПустаяСтрока(ИмяРеквизитаПодписиДляЗапроса) Тогда
				
				Если НЕ ПустаяСтрока(РеквизитыПодписей) Тогда
					РеквизитыПодписей = РеквизитыПодписей + ", ";
				КонецЕсли;
				
				РеквизитыПодписей = РеквизитыПодписей + ИмяРеквизитаПодписиДляЗапроса;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИмяКолонки = "binaryData" Тогда
			ПолучатьДвоичныеДанные = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИменаРеквизитов) Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", ";
		КонецЕсли;
		
		Если ИмяКолонки = "modificationDateUniversal" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "ДатаМодификацииУниверсальная";
		КонецЕсли;
		
		Если ИмяКолонки = "signed" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "ПодписанЭП";
		КонецЕсли;
		
		Если ИмяКолонки = "size" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "Размер";
		КонецЕсли;
		
		Если ИмяКолонки = "creationDate" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "ДатаСоздания";
		КонецЕсли;
		
		Если ИмяКолонки = "author" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "Автор";
		КонецЕсли;
		
		Если ИмяКолонки = "extension" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "Расширение";
		КонецЕсли;
		
		Если ИмяКолонки = "encrypted" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "Зашифрован";
		КонецЕсли;
		
		Если ИмяКолонки = "owner" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "Владелец";
		КонецЕсли;
		
		Если ИмяКолонки = "deletionMark" Тогда
			ИменаРеквизитов = ИменаРеквизитов + "ПометкаУдаления";
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыВерсии = Новый Структура;
	
	ИменаРеквизитов = ИменаРеквизитов + ?(ПустаяСтрока(ИменаРеквизитов),"",", ") + "Ссылка, Наименование"; // нужны всегда
	
	Если НЕ ПустаяСтрока(ИменаРеквизитов) Тогда
		
		Если ПолучатьДвоичныеДанные Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", " + "ТипХраненияФайла";
		КонецЕсли;
		
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылка, ИменаРеквизитов);
		
		// заполнение подписей
		Если НЕ ПустаяСтрока(РеквизитыПодписей) Тогда
			
			Подписи = Новый Массив;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	" + РеквизитыПодписей + "
			               |ИЗ
			               |	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			               |ГДЕ
			               |	ЭлектронныеПодписи.Объект = &ОбъектСсылка";
						 
			Запрос.Параметры.Вставить("ОбъектСсылка", ВерсияСсылка);
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаЗапроса.Следующий() Цикл
				
				РеквизитыПодписи = Новый Структура(РеквизитыПодписей);
				ЗаполнитьЗначенияСвойств(РеквизитыПодписи, ВыборкаЗапроса);
				
				Если РеквизитыПодписи.Свойство("Подпись") Тогда
					РеквизитыПодписи.Подпись = ВыборкаЗапроса.Подпись.Получить(); // получаем двоичные данные
				КонецЕсли;
				
				Если РеквизитыПодписи.Свойство("Сертификат") Тогда
					РеквизитыПодписи.Сертификат = ВыборкаЗапроса.Сертификат.Получить(); // получаем двоичные данные
				КонецЕсли;
				
				Подписи.Добавить(РеквизитыПодписи);
				
			КонецЦикла;
			
			РеквизитыВерсии.Вставить("Подписи", Подписи);
			
		КонецЕсли;
		
		
		// получение собственно файла
		Если ПолучатьДвоичныеДанные Тогда
			
			Если РеквизитыВерсии.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
				ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
				
				РеквизитыВерсии.Вставить("ДвоичныеДанные", ДвоичныеДанныеФайла);
				
			Иначе
				
				Если НЕ ВерсияСсылка.Том.Пустая() Тогда
					ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
					Попытка
						РеквизитыВерсии.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ПолныйПуть));
					Исключение
						СообщениеОбОшибке = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
							ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
						
						ВызватьИсключение СообщениеОбОшибке;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			РаботаСФайламиВызовСервера.ЗаписатьОбращениеКВерсииФайла(ВерсияСсылка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат РеквизитыВерсии;
		
КонецФункции	

// Добавляет в документ файл по двоичным данным из объекта XDTO.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddFileRequest с заполненным file.binaryData.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddFileResponse или DMError.
//
Функция ДобавитьФайлВДокументИзДвоичныхДанных(Сообщение)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddFileResponse");
	
	ВладелецСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.owner.objectId);
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Сообщение.file.binaryData);
	
	Если Сообщение.file.Установлено("text") Тогда
		АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(Сообщение.file.Text);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	// При интерактивном добавлении печатной формы может понадобиться найти существующий файл по имени
	// без учета расширения и создать новую версию вместо безусловного создания нового файла.
	ФайлСсылка = Неопределено;
	Если Сообщение.Установлено("tryToUpdate")
		И Сообщение.tryToUpdate Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
			|	Ссылка
			|ИЗ
			|	Справочник.Файлы
			|ГДЕ
			|	ВладелецФайла = &ВладелецФайла
			|	И НЕ ПометкаУдаления
			|	И Наименование = &Наименование
			|	И ХранитьВерсии
			|");
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецСсылка);
		Запрос.УстановитьПараметр("Наименование", Сообщение.file.name);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФайлСсылка = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	СведенияОФайле.ВремяИзменения = Сообщение.file.modificationDate;
	СведенияОФайле.ВремяИзмененияУниверсальное = Сообщение.file.modificationDateUniversal;
	СведенияОФайле.Размер = Сообщение.file.size;
	СведенияОФайле.ИмяБезРасширения = Сообщение.file.name;
	СведенияОФайле.РасширениеБезТочки = Сообщение.file.extension;
	
	Если ФайлСсылка = Неопределено Тогда // создадим новый файл
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ВладелецСсылка,
			СведенияОФайле);
	
	Иначе // обновим существующий
		РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
			ФайлСсылка,
			СведенияОФайле);
	
	КонецЕсли;
		
	Если Сообщение.file.signatures.Количество() > 0 Тогда
		ЗанестиИнформациюОПодписяхОбъекта(Сообщение.file.signatures, ФайлСсылка);
	КонецЕсли;
	Если Сообщение.file.Установлено("scannedOriginal") Тогда
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(ФайлСсылка,,Сообщение.file.scannedOriginal);
	КонецЕсли;
		
	Ответ.file = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	Ответ.file.name = Строка(ФайлСсылка); 
	Ответ.file.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
	Ответ.file.objectId.id = Строка(ФайлСсылка.УникальныйИдентификатор()); 
	Ответ.file.objectId.type = "DMFile";
	
	Возврат Ответ;
	
КонецФункции

// Добавляет в документ файл по файлу-шаблону.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddFileRequest с заполненным file.template.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddFileResponse или DMError.
//
Функция ДобавитьФайлВДокументИзШаблона(Сообщение)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddFileResponse");
	
	ВладелецСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.owner.objectId);
	
	Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.file.template.objectId);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.ИмяБезРасширения = Сообщение.file.name;
	СведенияОФайле.ХранитьВерсии = Истина;
	
	Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецСсылка, СведенияОФайле);
	
	РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);
	
	Если Не Источник.ТекущаяВерсия.Пустая() Тогда
		
		ВерсияИсточник = Источник.ТекущаяВерсия;
		
		ХранилищеФайла = Неопределено;
		Если Источник.ТекущаяВерсия.ТипХраненияФайла 
			= Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			ХранилищеФайла = РаботаСФайламиВызовСервера.
				ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияИсточник);
				
		КонецЕсли;
			
		ХранилищеТекста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВерсияИсточник,
			"ТекстХранилище");
		
		СведенияОФайле.Размер = ВерсияИсточник.Размер;
		СведенияОФайле.РасширениеБезТочки = ВерсияИсточник.Расширение;
		СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
		СведенияОФайле.АдресВременногоХранилищаТекста = ВерсияИсточник.ТекстХранилище;
		СведенияОФайле.СсылкаНаВерсиюИсточник = ВерсияИсточник;
		СведенияОФайле.ВремяИзменения = ВерсияИсточник.ДатаМодификацииФайла;
		СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияИсточник.ДатаМодификацииУниверсальная;

		Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
		
		РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ХранилищеТекста);
		
		ПриемникОбъект = Приемник.ПолучитьОбъект();
		ПриемникОбъект.ШаблонОснованиеДляСоздания = Источник;
		ПриемникОбъект.Записать();
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов")
			И СтрНайти(".docx|.doc|.odt", "." + НРег(ПриемникОбъект.ТекущаяВерсияРасширение)) <> 0 Тогда
			
			АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Ложь,
				Приемник,
				Истина,,
				ВладелецСсылка);
				
		КонецЕсли;
		
	КонецЕсли;
		
	Ответ.file = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	Ответ.file.name = Строка(Приемник); 
	Ответ.file.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
	Ответ.file.objectId.id = Строка(Приемник.УникальныйИдентификатор()); 
	Ответ.file.objectId.type = "DMFile";
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти
