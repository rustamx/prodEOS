////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНЕШНИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// обработка одного элемента при обмене  - отправка
//
Процедура ПриОтправкеДанныхФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза = Ложь) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
	 ИЛИ ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ХранимыеФайлыВерсий") Тогда
		
		Если Не СозданиеНачальногоОбраза Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоФайл = Ложь;
	ЭтоФайл = ФайловыеФункцииПереопределяемый.ЭтоЭлементФайл(ЭлементДанных);
	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		Если СозданиеНачальногоОбраза Тогда
			
			Если НЕ ЭлементДанных.Том.Пустая() И Не ЭлементДанных.ФайлУдален Тогда
				
				ИмяКаталогаФайлов = ХранилищеОбщихНастроекЗагрузитьВПривилегированномРежиме("ОбменФайлами", "ВременныйКаталог");
				
				ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу;
				УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
				
				НовыйПутьФайла = ФайловыеФункцииПереопределяемый.УстановитьИмяФайлаПриОтправкеДанныхФайла(ЭлементДанных, 
					ИмяКаталогаФайлов, УникальныйИдентификатор);
				
				ФайловыеФункции.СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла);
				
			КонецЕсли;
			
		Иначе // обычный обмен - СозданиеНачальногоОбраза = Ложь
			
			Если НЕ ЭлементДанных.Том.Пустая() И Не ЭлементДанных.ФайлУдален Тогда
				// если файл в томе - поместим его в ФайлХранилище, и поменяем ЭлементДанных.ТипХраненияФайла на ВИнформационнойБазе
				
				ЭлементДанных.ФайлХранилище = ФайловыеФункции.ПоместитьДвоичныеДанныеВХранилище(ЭлементДанных.Том, 
					ЭлементДанных.ПутьКФайлу, ЭлементДанных.Ссылка.УникальныйИдентификатор());
				ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				ЭлементДанных.ПутьКФайлу = "";
				ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не СозданиеНачальногоОбраза Тогда
			ФайловыеФункцииПереопределяемый.ВыполнитьДополнительнуюОбработкуПриОтправкеДанных(ЭлементДанных);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// обработка одного элемента при обмене   - прием
//
Процедура ПриПолученииДанныхФайла(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрещенКЗагрузке = Ложь;
	ФайловыеФункцииПереопределяемый.ЭлементЗапрещенКЗагрузке(ЭлементДанных, ПолучениеЭлемента, ЗапрещенКЗагрузке);
	Если ЗапрещенКЗагрузке Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФайл = ФайловыеФункцииПереопределяемый.ЭтоЭлементФайл(ЭлементДанных);
	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлементДанных.ЭтоНовый() Тогда // изменен уже существующий элемент
		
		// файл был на томе - удалим его - т.к. при обмене придет новый
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.Ссылка, "ТипХраненияФайла") = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			Том = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.Ссылка, "Том");
			ПутьКФайлу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.Ссылка, "ПутьКФайлу");
			
			ПрежнийПутьНаТоме = ФайловыеФункции.ПолныйПутьТома(Том) + ПутьКФайлу;
			ФайловыеФункции.УдалитьФайлыНаСервере(ЭлементДанных.Ссылка, ПрежнийПутьНаТоме);
		КонецЕсли;
	КонецЕсли;
	
	// при обмене сюда приходит только ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе
	//  если тип хранения базы-приемника такой же (в базе) - ничего не делаем
	//   а вот если в базе приемнике - тип хранения в томах - то разместим на диске
	Если ФайловыеФункции.ПолучитьТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске
		И Не ЭлементДанных.ФайлУдален Тогда
		// тип отличается от типа по умолчанию для данной базы - поменяем
		
		ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
		ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
		
		Если ЭлементДанных.ЭтоНовый() Тогда // добавлен новый элемент
			
			ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		
		Иначе    
			
			// по обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах
			//  - из ФайлХранилище размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске
			
			ВремяИзменения		= ЭлементДанных.ДатаМодификацииУниверсальная;
			РазмерФайла			= ЭлементДанных.Размер;
			ИмяБезРасширения	= ЭлементДанных.Наименование;
			Расширение			= ЭлементДанных.Расширение;
			Зашифрован			= ЭлементДанных.Зашифрован;
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункцииПереопределяемый.ДобавитьНаДискПриПолученииДанныхФайла(
				ЭлементДанных, ДвоичныеДанные,
				ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, 
				ИмяБезРасширения, Расширение, РазмерФайла, Зашифрован);
			
			ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
			ЭлементДанных.Том		 = СсылкаНаТом;
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			
		КонецЕсли;
		
	Иначе
		ФайловыеФункцииПереопределяемый.ВыполнитьДополнительнуюОбработкуПриПолученииДанных(ЭлементДанных);
	КонецЕсли;
	
КонецПроцедуры

// Передает с клиента на сервер для записи и записывает в привилегированном режиме
Функция ХранилищеОбщихНастроекЗагрузитьВПривилегированномРежиме(
	КлючОбъекта, 
	КлючНастроек = Неопределено, 
	ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, 
	ИмяПользователя = Неопределено) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);
	
	Если (Результат = Неопределено) И (ЗначениеПоУмолчанию <> Неопределено) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


