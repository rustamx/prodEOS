
////////////////////////////////////////////////////////////////////////////////
// Обзор задач вызов сервера: Содержит процедуры по формированию HTML представления задач.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текст HTML для показа обзора задачи
//
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//   Строка - текст HTML
//
Функция ПолучитьОбзорЗадачи(Знач Задача) Экспорт
	
	HTMLТекст = ОбзорЗадачВызовСервераПереопределяемый.ПолучитьОбзорЗадачи(Задача);
	Если ЗначениеЗаполнено(HTMLТекст) Тогда 
		Возврат HTMLТекст;
	КонецЕсли;
	
	// Формируем основное представление процесса
	HTMLТекст = "<html>
	|<head>
	|<style type=""text/css"">
	|	body {
	|		overflow:    auto;
	|		margin-top:  2px;
	|		margin-left: 2px;
	|		margin-right: 2px;
	|		font-family: Arial; 
	|		font-size:   10pt;}
	|	table {
	|		width:       100%;
	|		font-family: Arial; 
	|		font-size:   10pt;
	|		border: 0px solid;}
	|	td {vertical-align: top;}
	| 	a:link {
	|		color: #006699; text-decoration: none;}
	|	a:visited {
	|		color: #006699; text-decoration: none;}
	|	a:hover {
	|		color: #006699; text-decoration: underline;}
	|	p {
	|		margin-top: 7px;}
	|	img {border: 0px;}
	|</style>
	|<body>";
	
	СостояниеВыполненияЗадачи = РегистрыСведений.ЗадачиДляВыполнения.СостояниеВыполненияЗадачи(Задача.Ссылка);
	
	// Состояние процесса и результат выполнения задачи
	Если Задача.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		ПричинаПрерывания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Задача.Ссылка, "БизнесПроцесс.ПричинаПрерывания");
		
		Если ПустаяСтрока(ПричинаПрерывания) Тогда
			ПричинаПрерывания = НСтр("ru = 'Задача прервана'; en = 'Task is terminated'");	
		Иначе			
			ПричинаПрерывания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Задача прервана: %1'; en = 'Task is terminated: %1'"),
			ПричинаПрерывания);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<table bgcolor=#F0F0F0><tr>";
		HTMLТекст = HTMLТекст + "<td width=20>";
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
			HTMLТекст, БиблиотекаКартинок.ЗнакПрерванПроцесс, "ПоказатьПричинуПрерыванияПроцесса");
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td>";
		HTMLТекст = HTMLТекст + СтрШаблон(
			"<A href=ПоказатьПричинуПрерыванияПроцесса>%1</A>",
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПричинаПрерывания));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr></table>";
		
		HTMLТекст = HTMLТекст + "<p>";
		
	ИначеЕсли Задача.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		
		HTMLТекст = HTMLТекст + "<table bgcolor=#F0F0F0><tr>";
		HTMLТекст = HTMLТекст + "<td width=20> ";
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.ЗнакПауза);
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td>";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НСтр("ru = 'Задача остановлена'; en = 'Task is stopped'"), "");
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr></table>";
		
		HTMLТекст = HTMLТекст + "<p>";
		
	ИначеЕсли СостояниеВыполненияЗадачи.СостояниеВыполнения = Перечисления.СостоянияЗадачДляВыполнения.ВыполнениеОтменено Тогда
		
		HTMLТекст = HTMLТекст + "<table bgcolor=#F0F0F0><tr>";
		HTMLТекст = HTMLТекст + "<td width=20>";
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
			HTMLТекст, БиблиотекаКартинок.Предупреждение, "ПоказатьПричинуОтменыВыполнения");
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td>";
		
		ПричинаОтменыВыполненияHTML = "";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			ПричинаОтменыВыполненияHTML,
			СостояниеВыполненияЗадачи.ПричинаОтменыВыполнения,
			"FF0000");
		
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=ПоказатьПричинуОтменыВыполнения>%1</A>", ПричинаОтменыВыполненияHTML);
		
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr></table>";
		
		HTMLТекст = HTMLТекст + "<p>";
		
	ИначеЕсли СостояниеВыполненияЗадачи.СостояниеВыполнения = Перечисления.СостоянияЗадачДляВыполнения.ГотоваКВыполнению Тогда
		
		HTMLТекст = HTMLТекст + "<table bgcolor=#F0F0F0><tr>";
		HTMLТекст = HTMLТекст + "<td width=20> ";
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.СтартБизнесПроцесса);
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td>";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст,
			НСтр("ru = 'Задача находится в очереди для выполнения. Выполнение задачи произойдет автоматически в ближайшее время.'; en = 'The task is queued for execution. Execution will happen automatically soon.'"), "");
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr></table>";
		
		HTMLТекст = HTMLТекст + "<p>";
		
	ИначеЕсли Задача.Выполнена Тогда
		
		МетаданныеПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Задача.БизнесПроцесс);
		ПредставлениеРезультатаЗадачи = МетаданныеПроцесса.ПредставлениеРезультатаЗадачи(Задача);
		
		РезультатВыполненияЗадачи = РегистрыСведений.
			РезультатыВыполненияПроцессовИЗадач.РезультатВыполненияПоОбъекту(Задача.Ссылка);
			
		Если РезультатВыполненияЗадачи = 
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				
			Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Положительный;
			ЦветТекста = "#008000";
		ИначеЕсли РезультатВыполненияЗадачи = 
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			
			Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Отрицательный;
			ЦветТекста = "#B22222";
		ИначеЕсли РезультатВыполненияЗадачи = Перечисления.
			ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
			
			Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_ПоложительныйСЗамечаниями;
			ЦветТекста = "#008000";
		Иначе
			Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
			ЦветТекста = "";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<table bgcolor=#F0F0F0><tr>";
		
		HTMLТекст = HTMLТекст + "<td width=20>";
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td>";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеРезультатаЗадачи, ЦветТекста);
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr></table>";
		
		HTMLТекст = HTMLТекст + "<p>";
		
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<table><tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	// Наименование
	HTMLТекст = HTMLТекст + "<B>";
	ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Задача.Наименование, "");
	HTMLТекст = HTMLТекст + "<br>";
	HTMLТекст = HTMLТекст + "</B>";
	
	ПредметДокумент = ПолучитьОсновнойПредметДокумент(Задача.Предметы);
	Если ЗначениеЗаполнено(ПредметДокумент) Тогда
		
		ОбзорПредмета = ПолучитьОбзорПредметаЗадачи(ПредметДокумент);
		Если Не ПустаяСтрока(ОбзорПредмета) Тогда
			HTMLТекст = HTMLТекст + "<p>" + ОбзорПредмета + "</p>";
		КонецЕсли;	
			
	КонецЕсли;		
	
	// Описание
	Если ЗначениеЗаполнено(Задача.Описание) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		
		ОписаниеЗадачиHTML = "";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(ОписаниеЗадачиHTML, "", Задача.Описание);
		
		ОписаниеЗадачиHTML = СтрЗаменить(ОписаниеЗадачиHTML, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
		ОписаниеЗадачиHTML = СтрЗаменить(ОписаниеЗадачиHTML, Символы.ПС, "<br>");
		
		HTMLТекст = HTMLТекст + ОписаниеЗадачиHTML;
		
	КонецЕсли;
	
	// Важность
	Если Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		Важность = НСтр("ru = 'Высокая'; en = 'High'");
	ИначеЕсли Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
		Важность = НСтр("ru = 'Обычная'; en = 'Normal'");
	ИначеЕсли Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		Важность = НСтр("ru = 'Низкая'; en = 'Low'");
	КонецЕсли;
	HTMLТекст = HTMLТекст + "<p>";
	ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Важность: '; en = 'Importance: '"), Важность);
	
	// Исполнитель
	HTMLТекст = HTMLТекст + "<p>";
	ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Кому:'; en = 'To:'"));
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ИсполнителиЗадачПользователя = БизнесПроцессыИЗадачиСервер.
		ИсполнителиЗадачПользователя(ТекущийПользователь);
		
	// Признак ролевой/делегированной задачи
	ЗадачаДелегированаТекущемуПользователю = 
		РегистрыСведений.ИсполнителиРолейИДелегаты.ИсполнительЯвляетсяДелегатом(
			Задача.ТекущийИсполнитель,
			ТекущийПользователь,
			"ПроцессыИЗадачи");
	
	Если ЗадачаДелегированаТекущемуПользователю Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.ДелегированнаяЗадача);
		HTMLТекст = HTMLТекст + " ";
	ИначеЕсли ТипЗнч(Задача.ТекущийИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.РолеваяЗадача);
		HTMLТекст = HTMLТекст + " ";
	КонецЕсли;
	
	Если НЕ Задача.Исполнитель.Пустая() Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Задача.Исполнитель, "");
	Иначе
		ИсполнительСтрокой = Строка(Задача.РольИсполнителя);
		HTMLТекст = HTMLТекст + СтрШаблон(
			"<A href=v8doc:%1>%2</A>",
			ПолучитьНавигационнуюСсылку(Задача.РольИсполнителя),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Строка(ИсполнительСтрокой)));
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<br>";
	
	// Срок
	Если ЗначениеЗаполнено(Задача.СрокИсполнения) Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок:'; en = 'Due date:'"));
		ФормаДаты = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
			"ДФ='dd.MM.yyyy HH:mm'", "ДФ='dd.MM.yyyy'");
			
		Если ТипЗнч(Задача.БизнесПроцесс) <> 
			Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
			И Не Задача.Выполнена
			И ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач") Тогда
			
			HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<A href=%1> %2</A>",
				"ИзменитьСрокВыполнения",
				Формат(Задача.СрокИсполнения, ФормаДаты));
		Иначе
			HTMLТекст = HTMLТекст + " " + Формат(Задача.СрокИсполнения, ФормаДаты);
		КонецЕсли;
			
		HTMLТекст = HTMLТекст + "<br>";
	КонецЕсли;
	
	// Автор
	ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Автор:'; en = 'Author:'"), Задача.Автор);
	
	// Контроль
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Контролеры = РаботаСБизнесПроцессамиВызовСервера.КонтролерыЗадачи(Задача, Не Задача.Выполнена);
		
		КонтролерыСтрокой = СтрСоединить(Контролеры, ", ");
		
		Если Задача.Выполнена Тогда
			ПодписьКонтролера = НСтр("ru = 'Контролеры: '; en = 'Monitored by: '");
		Иначе
			КоличествоКонтролеров = Контролеры.Количество();
			Если КоличествоКонтролеров = 1 Тогда
				ПодписьКонтролера = НСтр("ru = 'Контролирует: '; en = 'Monitored by: '");
			ИначеЕсли КоличествоКонтролеров > 1 Тогда
				ПодписьКонтролера = НСтр("ru = 'Контролируют: '; en = 'Monitored by: '");
			КонецЕсли;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, ПодписьКонтролера);
		HTMLТекст = HTMLТекст + СтрШаблон(
			"<A href=ОткрытьКарточкуКонтроля>%1</A>", 
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(КонтролерыСтрокой));
		HTMLТекст = HTMLТекст + "<br>";
		
	КонецЕсли;
	
	// История выполнения
	ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		Задача.БизнесПроцесс);
	Если ЗначениеЗаполнено(ИсторияВыполнения) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + "<B>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСТР("ru = 'История выполнения:'; en = 'Execution history:'"));
		HTMLТекст = HTMLТекст + "</B>";
		HTMLТекст = HTMLТекст + "<br>";
		
		ИсторияВыполненияHTML = "";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(ИсторияВыполненияHTML, "", ИсторияВыполнения);
		ИсторияВыполненияHTML = СтрЗаменить(ИсторияВыполненияHTML, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
		ИсторияВыполненияHTML = СтрЗаменить(ИсторияВыполненияHTML, Символы.ПС, "<br>");
		
		HTMLТекст = HTMLТекст + ИсторияВыполненияHTML;
		
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "</td>";
	
	HTMLТекст = HTMLТекст + "</tr></table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает текст HTML для показа обзора задачи
//
// Параметры:
//   РеквизитыЗадачи - Структура - реквизиты задачи:
//      Ссылка
//      БизнесПроцесс
//      БизнесПроцессВедущаяЗадача
//      Описание
//      Наименование
//      ТочкаМаршрута
//      Выполнена
//      РезультатВыполнения
//      Исполнитель
//      РольИсполнителя
//      НомерИтерацииЗадачи
//
// Возвращаемое значение:
//   Строка - текст HTML
//
Функция ПолучитьОбзорЗадачиДляСпискаЗадачиМне(Знач РеквизитыЗадачи) Экспорт
	
	HTMLТекст = ОбзорЗадачВызовСервераПереопределяемый.ПолучитьОбзорЗадачиДляСпискаЗадачиМне(РеквизитыЗадачи);
	Если ЗначениеЗаполнено(HTMLТекст) Тогда 
		Возврат HTMLТекст;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СтрокаПолноеОписаниеЗадачи = РеквизитыЗадачи.Описание;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) Тогда
		ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
			РеквизитыЗадачи.БизнесПроцесс);
		
		Если Не ПустаяСтрока(ИсторияВыполнения) Тогда
			СтрокаПолноеОписаниеЗадачи = 
				СтрокаПолноеОписаниеЗадачи
				+ ?(ЗначениеЗаполнено(СтрокаПолноеОписаниеЗадачи),
					"" + Символы.ПС + Символы.ПС, "")
				+ НСТР("ru = 'История выполнения:'; en = 'Execution history:'")
				+ Символы.ПС 
				+ "------------------------------------"
				+ Символы.ПС 
				+ ИсторияВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	ТекстHTML = "<html>
	 |<head>  	  	
	 | <style>
	 |  h1 {	 
	 |   font-size: 10pt;	 
	 |	 font-family:Arial; 
	 |  } 
	 |  p {
	 |   font-size: 10pt;	 
	 |	 font-family:Arial; 
	 |  }
	 |	BODY {
	 |	 margin: 0px; 
	 |	 padding: 3px;   	 
	 |	}
	 | </style>	 
	 |</head>
	 |<body scroll=auto>";

	// Отображаем Кому в мини-карточке, если задача делегирована либо назначена роли.
	ОписаниеИсполнителя = "";
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		Если РеквизитыЗадачи.Исполнитель <> ТекущийПользователь Тогда
			ОписаниеИсполнителя = Строка(РеквизитыЗадачи.Исполнитель);
		КонецЕсли;
	Иначе
		ОписаниеИсполнителя = Строка(РеквизитыЗадачи.РольИсполнителя);
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "<h1>";
	НаименованиеЗадачиHTML = "";
	ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(НаименованиеЗадачиHTML, "", РеквизитыЗадачи.Наименование);
	НаименованиеЗадачиHTML = СтрЗаменить(НаименованиеЗадачиHTML, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
	НаименованиеЗадачиHTML = СтрЗаменить(НаименованиеЗадачиHTML, Символы.ПС, "<br>");
	ТекстHTML = ТекстHTML + НаименованиеЗадачиHTML;
	ТекстHTML = ТекстHTML + "</h1>";
	
	Если ЗначениеЗаполнено(ОписаниеИсполнителя) Тогда
		ТекстHTML = ТекстHTML + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(ТекстHTML, НСТР("ru = 'Кому: '; en = 'To: '"), ОписаниеИсполнителя);
		ТекстHTML = ТекстHTML + "</p>";
	КонецЕсли;
	
	Если РеквизитыЗадачи.НомерИтерацииЗадачи > 0 Тогда
		ТекстHTML = ТекстHTML + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(ТекстHTML, НСТР("ru = 'Цикл: '; en = 'Cycle: '"), РеквизитыЗадачи.НомерИтерацииЗадачи);
		ТекстHTML = ТекстHTML + "</p>";
	КонецЕсли;
	
	Если РеквизитыЗадачи.Свойство("ПредметДокумент") Тогда
		ОбзорПредмета = ПолучитьОбзорПредметаЗадачи(РеквизитыЗадачи.ПредметДокумент);
		Если Не ПустаяСтрока(ОбзорПредмета) Тогда
			ТекстHTML = ТекстHTML + "<p>" + ОбзорПредмета + "</p>";
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаПолноеОписаниеЗадачи) Тогда
		ПолноеОписаниеЗадачиHTML = "";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(ПолноеОписаниеЗадачиHTML, "", СтрокаПолноеОписаниеЗадачи);
		ПолноеОписаниеЗадачиHTML = СтрЗаменить(ПолноеОписаниеЗадачиHTML, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
		ПолноеОписаниеЗадачиHTML = СтрЗаменить(ПолноеОписаниеЗадачиHTML, Символы.ПС, "<br>");
		ТекстHTML = ТекстHTML + "<p>" + ПолноеОписаниеЗадачиHTML + "</p>";
	Иначе
		ТекстHTML = ТекстHTML + "<p><FONT color=""#C0C0C0"">"
			+ НСтр("ru = 'У задачи нет описания.'; en = 'No task details.'") + "</FONT></p>";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</body></html>";
	
	Возврат ТекстHTML;

КонецФункции

Процедура ДобавитьСтрокуHTML(ТекстHTML, ИмяПоля, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ТекстHTML = ТекстHTML + "<tr><td valign=""top""><b>" + ИмяПоля + ": </b></td><td valign=""top"">" + Значение + "</td></tr>";	
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает текст HTML для показа важных реквизитов предмета задачи (если предмет один, и это документ)
//
// Параметры:
//   ПредметДокумент - ссылка на предмет - документ
//
// Возвращаемое значение:
//   Строка - текст HTML
//
Функция ПолучитьОбзорПредметаЗадачи(ПредметДокумент) Экспорт
	
	HTMLТекст = ОбзорЗадачВызовСервераПереопределяемый.ПолучитьОбзорПредметаЗадачи(ПредметДокумент);
	Если ЗначениеЗаполнено(HTMLТекст) Тогда 
		Возврат HTMLТекст;
	КонецЕсли;
	
	HTMLТекст = "";
	
	Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ПредметДокумент).Чтение Тогда
		Возврат HTMLТекст;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ОбзорСпискаДокументов.ПолучитьЗапросДляДокумента(ПредметДокумент);

	Запрос.УстановитьПараметр("ТекущийДокумент", ПредметДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбзорСпискаДокументов.ДобавитьВHTMLОсновныеДанныеОбзора(HTMLТекст, Выборка);	
	
	ЧислоВПереписке = ЧислоОбъектовВПереписке(ПредметДокумент);
	Если ЧислоВПереписке > 1 Тогда
		
		HTMLТекст = HTMLТекст 
			+ СтрШаблон("<A href=""ПоказатьПерепискуПоДокументу:%1"">", 
				ПредметДокумент.Метаданные().Имя
				+ "?ref=" + Строка(ПредметДокумент.УникальныйИдентификатор())) 
			+ СтрШаблон(НСтр("ru = 'Переписка по документу: <b>%1</b>'; en = 'Correspondence by document: <b>%1</b>'"), 
				ЧислоВПереписке)
			+  "</A>";
		HTMLТекст = HTMLТекст + "<br>";
		
	КонецЕсли;	
	
	Возврат HTMLТекст;
	
КонецФункции

Функция ЧислоОбъектовВПереписке(Предмет)
	
	Дерево = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	Дерево.Колонки.Добавить("Ссылка", ДопустимыеТипы);
	
	Дерево.Колонки.Добавить("ДатаРегистрации", 
		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));

	Дерево.Колонки.Добавить("ДатаСоздания", 
		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Дерево.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("РегистрационныйНомер", Новый ОписаниеТипов("Строка"));
	
	Дерево.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	Дерево.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
	
	Если ЗначениеЗаполнено(Предмет) Тогда
	
		// Для Внутренних документов - все как в форме ИсторияПереписки
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			Если ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы)
				И ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы) Тогда
				
				Делопроизводство.ЗаполнитьДерево(Дерево, Предмет);
				
				ЧислоОбъектовПереписки = НайтиЧислоЭлементов(Дерево.Строки);
				Возврат ЧислоОбъектовПереписки + 1; // добавляем сам документ
				
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы")
			ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда			
			
			Дерево.Строки.Очистить();
			КорневоеПисьмо = ВстроеннаяПочтаСервер.ПолучитьКорневоеПисьмо(Предмет);
			ВыведенныеПисьма = Новый Массив;
			Делопроизводство.ДобавитьПисьмоВДерево(Дерево.Строки, КорневоеПисьмо, Предмет, ВыведенныеПисьма);
			
			ЧислоОбъектовПереписки = НайтиЧислоЭлементов(Дерево.Строки);
			Возврат ЧислоОбъектовПереписки;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат 0;
		
КонецФункции

Функция НайтиЧислоЭлементов(Строки)
	
	ЧислоСтрок = Строки.Количество();
	Для Каждого Строка Из Строки Цикл
		ЧислоСтрок = ЧислоСтрок + НайтиЧислоЭлементов(Строка.Строки);
	КонецЦикла;	
	
	Возврат ЧислоСтрок;
	
КонецФункции

// Получает ссылку на документ по строке уникального идентификатора документа.
//
// Параметры:
//   ПрефиксДок - Строка - префикс, например "ВнутренниеДокументы"
//   Идентификатор - Строка - уникальный идентификатор документа
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка вх исх внутр документ
Функция ПолучитьСсылкуДокументаПоИдентификатору(ПрефиксДок, Идентификатор) Экспорт
	
	Ссылка = Неопределено;
	
	Если ПрефиксДок = "ВнутренниеДокументы" Тогда
		Ссылка = Справочники.ВнутренниеДокументы.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	ИначеЕсли ПрефиксДок = "ВходящиеДокументы" Тогда
		Ссылка = Справочники.ВходящиеДокументы.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	ИначеЕсли ПрефиксДок = "ИсходящиеДокументы" Тогда
		Ссылка = Справочники.ИсходящиеДокументы.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	КонецЕсли;	
	
	Возврат Ссылка;
	
КонецФункции

// Получает ссылку на документ - если основной предмет один, и это документ
//
// Параметры:
//   Предметы - табличная часть Предметы от задачи или процесса
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка вх исх внутр документ или Неопределено
Функция ПолучитьОсновнойПредметДокумент(Предметы) Экспорт
	
	Если Предметы.Количество() = 1 Тогда
		
		ПредметСтрока = Предметы[0];
		
		Предмет = ПредметСтрока.Предмет;
		Если ЗначениеЗаполнено(Предмет) И ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда			
			Возврат Предмет;
		КонецЕсли;	
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Документ = Неопределено;
	ЧислоОсновныхПредметов = 0;
	
	Для Каждого ПредметСтрока Из Предметы Цикл
		
		Если ПредметСтрока.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
			
			ЧислоОсновныхПредметов = ЧислоОсновныхПредметов + 1;
			
			Предмет = ПредметСтрока.Предмет;
			Если ЗначениеЗаполнено(Предмет) И ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда			
				Документ = Предмет;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ЧислоОсновныхПредметов = 1  Тогда
		Возврат Документ;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

#КонецОбласти
