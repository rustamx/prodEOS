
////////////////////////////////////////////////////////////////////////////////
// Сроки исполнения процессов клиент сервер КОРП: содержит процедуры и функции по работе
// со сроками процессов в редакциях КОРП/ДГУ.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выделяем из в путях схемы последовательности действий,
// удаляя лишние элементы.
//
// Параметры:
//  Пути - Массив - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПутиСхемыКомплексногоПроцесса.
//  ПараметрыДействий - ТабличнаяЧасть, ТаблицаЗначений - таблица ПредшественникиЭлементовСхемы схемы.
//
Процедура ВыделитьПоследовательностиДействийВПутях(Пути, ПараметрыДействий) Экспорт
	
	// Сформируем кэш строк параметров действий.
	КэшПараметровДействий = Новый Соответствие;
	Для Каждого ПараметрыДействия Из ПараметрыДействий Цикл
		КэшПараметровДействий.Вставить(ПараметрыДействия.Имя, ПараметрыДействия);
	КонецЦикла;
	
	// Обойдем все пути и удалим все элементы кроме действий.
	// Если в пути нет действий, то его тоже удаляем.
	ИндексПути = Пути.Количество() - 1;
	Пока ИндексПути >= 0 Цикл
		
		Путь = Пути[ИндексПути];
		
		ИндексЭлемента = Путь.Количество() - 1;
		
		Пока ИндексЭлемента >= 0 Цикл
			
			ИмяЭлемента = Путь[ИндексЭлемента];
			Если КэшПараметровДействий.Получить(ИмяЭлемента) = Неопределено Тогда
				Путь.Удалить(ИндексЭлемента);
			КонецЕсли;
			
			ИндексЭлемента = ИндексЭлемента - 1;
		КонецЦикла;
		
		Если Путь.Количество() = 0 Тогда
			Пути.Удалить(ИндексПути);
		КонецЕсли;
		
		ИндексПути = ИндексПути - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет сроки в стороке таблицы параметров действий с доп. полями сроков по
// данным в кэше.
//
// Параметры:
//  ПараметрыДействия - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции - строка таблицы ПараметрыДействия схемы
//                      с доп. полями сроков (СрокИсполненияПроцесса, СрокИсполненияПроцессаДни,
//                      СрокИсполненияПроцессаЧасы, СрокИсполненияПроцессаМинуты) и полем состояния процесса
//                      (СостояниеПроцесса).
//  ПараметрыЭлемента - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции - строка таблицы ЭлементыСхемы схемы.
//  КэшДанныхДействий - Структура - см. РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий.
//  ПроцессыСхемыДляПрерывания - СписокЗначений - список процессов действий схемы, помеченных к прерыванию.
//
Процедура ЗаполнитьСрокиВПараметрахДействияСхемыКомплексногоПроцесса(
	ПараметрыДействия, ПараметрыЭлемента, КэшДанныхДействий,
	ПроцессыСхемыДляПрерывания) Экспорт
	
	СостояниеПроцесса = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка");
	Если ЗначениеЗаполнено(ПараметрыДействия.Процесс) Тогда
		ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВКэше(
			ПараметрыДействия.Процесс, КэшДанныхДействий);
		СостояниеПроцесса = ДанныеПроцесса.СостояниеПроцесса;
	КонецЕсли;
	
	Действие = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СсылкаНаДействиеСхемы(
		ПараметрыДействия, ПараметрыЭлемента, СостояниеПроцесса, ПроцессыСхемыДляПрерывания);
		
	Если ЗначениеЗаполнено(Действие) Тогда
		ДанныеДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВКэше(
			Действие, КэшДанныхДействий);
		ЗаполнитьЗначенияСвойств(ПараметрыДействия, ДанныеДействия,, "СостояниеПроцесса");
	КонецЕсли;
	
	ПараметрыДействия.СостояниеПроцесса = СостояниеПроцесса;
	
КонецПроцедуры

// Заполняет сроки в таблице параметров действий с доп. полями сроков по
// данным в кэше.
//
// Параметры:
//  ПараметрыДействий - ТабличнаяЧасть, ДанныеФормыКоллекция - таблица ПараметрыДействия схемы
//                      с доп. полями сроков (СрокИсполненияПроцесса, СрокИсполненияПроцессаДни,
//                      СрокИсполненияПроцессаЧасы, СрокИсполненияПроцессаМинуты) и полем состояния процесса
//                      (СостояниеПроцесса).
//  ПараметрыЭлементов - ТабличнаяЧасть, ДанныеФормыКоллекция - таблица ЭлементыСхемы схемы.
//  КэшДанныхДействий - Структура - см. РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий.
//  ПроцессыСхемыДляПрерывания - СписокЗначений - список процессов действий схемы, помеченных к прерыванию.
//
Процедура ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
	ПараметрыДействий, ПараметрыЭлементов, КэшДанныхДействий,
	ПроцессыСхемыДляПрерывания = Неопределено) Экспорт
	
	Если ПроцессыСхемыДляПрерывания = Неопределено Тогда
		ПроцессыСхемыДляПрерывания = Новый СписокЗначений;
	КонецЕсли;
	
	// Сформируем кэш таблицы элементов.
	КэшПараметровЭлементов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ПараметрыЭлементов Цикл
		КэшПараметровЭлементов.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого ПараметрыДействия Из ПараметрыДействий Цикл
		ПараметрыЭлемента = КэшПараметровЭлементов.Получить(ПараметрыДействия.Имя);
		ЗаполнитьСрокиВПараметрахДействияСхемыКомплексногоПроцесса(
			ПараметрыДействия, ПараметрыЭлемента, КэшДанныхДействий, ПроцессыСхемыДляПрерывания);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пути и строки, замыкающие цикл по таблице Предшественники.
//
// Параметры:
//  Предшественники - Массив - таблица предшественников.
//   * Структура
//      ** Предшественник - УникальныйИдентификатор - идентификатор предшественника
//      ** Последователь - УникальныйИдентификатор - идентификатор последователя
//
// Возвращаемое значение:
//  Пути - Массив - массив путей. Каждый путь представляет собой массив идентификаторов.
//  СтрокиПредшественниковЗамыкающиеЦикл - Массив - строки из таблицы Предшественники,
//                                         которые замыкают пути.
//
Функция ПараметрыПутей(Предшественники) Экспорт
	
	// Начинаем построение пути от начала всех действий.
	ТекущийЭтап = УникальныйИдентификаторПустой();
	
	ТаблицаПутей = Новый Массив;
	
	Путь = Новый Массив;
	Путь.Добавить(ТекущийЭтап);
	
	СтрТаблицыПутей = СтрокаТаблицыПутей(ТекущийЭтап, Путь);
	ТаблицаПутей.Добавить(СтрТаблицыПутей);
	
	СтрокиПредшественниковЗамыкающиеЦикл = Новый Массив;
	
	ДобавитьПоследователейВПуть(
		ТаблицаПутей,
		Предшественники,
		ТекущийЭтап,
		СтрокиПредшественниковЗамыкающиеЦикл);
	
	Пути = Новый Массив;
	Для Каждого СтрТаблицы Из ТаблицаПутей Цикл
		Пути.Добавить(СтрТаблицы.Путь);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Пути", Пути);
	Результат.Вставить("СтрокиПредшественниковЗамыкающиеЦикл", СтрокиПредшественниковЗамыкающиеЦикл);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_КарточкиПроцессовИШаблонов

// Возвращает смещение даты отсчета определенное в карточке процесса/шаблона.
// Смещение определяется по настройке отложенного старта.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
// Возвращаемое значение:
//  Дата - возвращается для карточки процесса.
//  Число - смещение в секундах для шаблона процессов или комплексного процесса без даты отсчета.
//
Функция СмещенияДатыОтсчетаВКарточке(Форма) Экспорт
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		// Смещение в секундах
		Смещение = Форма.ОтложенныйСтартДни * 86400 + Форма.ОтложенныйСтартЧасы * 3600;
	Иначе
		
		Смещение = Дата(1,1,1);
		
		Если ЗначениеЗаполнено(Форма.НастройкаСтарта) Тогда
			Смещение = Форма.НастройкаСтарта.ДатаОтложенногоСтарта;
			Смещение = Смещение - Секунда(Смещение);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
			
			#Если Сервер Тогда
				ТекущаяДата = ТекущаяДатаСеанса();
			#Иначе
				ТекущаяДата = ТекущаяДата();
			#КонецЕсли
			
			ТекущаяДата = ТекущаяДата - Секунда(ТекущаяДата);
			
			Если ТекущаяДата < Смещение Тогда
				Смещение = Смещение - ТекущаяДата;
			Иначе
				Смещение = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Смещение;
	
КонецФункции

// Возвращает дату отсчета для текущего действия по форме комплексного процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФормы - форма комплексного процесса/шаблона.
//
// Возвращаемое значение:
//  Дата - дата отсчета для действия.
//
Функция ДатаОтсчетаДействияКомплексногоПроцессаВФорме(Форма) Экспорт
	
	ДатаОтсчета = Дата(1,1,1);
	
	Если Форма.ИспользоватьСхемуПроцесса Тогда
		
		ИмяТекущегоДействия = Форма.ИмяТекущегоЭлементаСхемыПроцесса;
		
		Если Не ЗначениеЗаполнено(ИмяТекущегоДействия) Тогда
			Возврат ДатаОтсчета;
		КонецЕсли;
		
		ПараметрыДействий = Форма.СхемаКомплексногоПроцесса.ПараметрыДействий;
		ЭлементыСхемы = Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы;
		ПредшественникиЭлементовСхемы = Форма.СхемаКомплексногоПроцесса.ПредшественникиЭлементовСхемы;
		
		// Сформируем кэш строк параметров действий.
		КэшПараметровДействий = Новый Соответствие;
		Для Каждого ПараметрыДействия Из ПараметрыДействий Цикл
			КэшПараметровДействий.Вставить(ПараметрыДействия.Имя, ПараметрыДействия);
		КонецЦикла;
		
		// Если текущего элемента не является действием, то возвращаем пустую дату.
		Если КэшПараметровДействий.Получить(ИмяТекущегоДействия) = Неопределено Тогда
			Возврат ДатаОтсчета;
		КонецЕсли;
		
		// Получаем имя элемент старта, его нет на схеме, то возвращаем пустую дату.
		Отбор = Новый Структура;
		Отбор.Вставить("Тип", 
			ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Старт"));
		НайденныеЭлементы = ЭлементыСхемы.НайтиСтроки(Отбор);
		Если НайденныеЭлементы = Неопределено Тогда
			Возврат ДатаОтсчета;
		КонецЕсли;
		ИмяЭлементаСтарта = НайденныеЭлементы[0].Имя;
		
		// Получаем все пути схемы.
		ПутиСхемы = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПутиСхемыКомплексногоПроцесса(
			ИмяЭлементаСтарта, ПредшественникиЭлементовСхемы);
		
		// Выделяем последовательности действий в путях схемы.
		СрокиИсполненияПроцессовКлиентСерверКОРП.ВыделитьПоследовательностиДействийВПутях(
			ПутиСхемы, ПараметрыДействий);
		
		// Определяем в каждом пути предшественника текущего действия и берем максимальный срок
		// из всех предшественников.
		Для Каждого Путь Из ПутиСхемы Цикл
			
			ИндексТекущегоДействия = Путь.Найти(ИмяТекущегоДействия);
			
			Если ИндексТекущегоДействия = Неопределено Или ИндексТекущегоДействия = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПредыдущегоДействия = Путь[ИндексТекущегоДействия - 1];
			
			ПараметрыПредыдущегоДействия = КэшПараметровДействий.Получить(ИмяПредыдущегоДействия);
			
			ДатаОтсчета = Макс(ДатаОтсчета, ПараметрыПредыдущегоДействия.СрокИсполненияПроцесса);
			
		КонецЦикла;
		
	Иначе
	
		Если Форма.Элементы.Этапы.ТекущиеДанные = Неопределено Тогда
			Возврат ДатаОтсчета;
		КонецЕсли;
		
		Этапы = Форма.Объект.Этапы;
		ПредшественникиЭтапов = Форма.Объект.ПредшественникиЭтапов;
		ИдентификаторЭтапа = Форма.Элементы.Этапы.ТекущиеДанные.ИдентификаторЭтапа;
		
		// Определим строки таблицы предшественников, замыкающие циклы.
		ТаблицаДляОпределенияПараметровПутей = Новый Массив;
		Для Каждого СтрПредшественникЭтапов Из ПредшественникиЭтапов Цикл
			СтрокаТаблицыПредшественниковЗамыкающихЦиклы = СтрокаТаблицыПредшественниковЗамыкающихЦиклы(
				СтрПредшественникЭтапов.ИдентификаторПредшественника,
				СтрПредшественникЭтапов.ИдентификаторПоследователя);
				
			ТаблицаДляОпределенияПараметровПутей.Добавить(СтрокаТаблицыПредшественниковЗамыкающихЦиклы);
		КонецЦикла;
		ПараметрыПутей = ПараметрыПутей(ТаблицаДляОпределенияПараметровПутей);
		СтрокиПредшественниковЗамыкающиеЦикл = ПараметрыПутей.СтрокиПредшественниковЗамыкающиеЦикл;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторПоследователя", ИдентификаторЭтапа);
		
		НайденныеПредшественники = ПредшественникиЭтапов.НайтиСтроки(Отбор);
		
		// Определим дату отсчета по предшественниками
		Для Каждого СтрПредшественник Из НайденныеПредшественники Цикл
			
			// Если текущая строка замыкает цикл, то пропускаем ее.
			ЭтоСтрокаЗамыкающаяЦикл = Ложь;
			ИндексПоследнейСтроки = СтрокиПредшественниковЗамыкающиеЦикл.Количество() - 1;
			Для ИндексСтроки = 0 По ИндексПоследнейСтроки Цикл
				СтрокаПредшественниковЗамыкающиеЦикл = СтрокиПредшественниковЗамыкающиеЦикл[ИндексСтроки];
				Если СтрПредшественник.ИдентификаторПоследователя = 
						СтрокаПредшественниковЗамыкающиеЦикл.Последователь
					И СтрПредшественник.ИдентификаторПредшественника = 
						СтрокаПредшественниковЗамыкающиеЦикл.Предшественник Тогда
					
					ЭтоСтрокаЗамыкающаяЦикл = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоСтрокаЗамыкающаяЦикл Тогда
				СтрокиПредшественниковЗамыкающиеЦикл.Удалить(ИндексСтроки);
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторЭтапа", СтрПредшественник.ИдентификаторПредшественника);
			НайденныеСроки = Этапы.НайтиСтроки(Отбор);
			
			Для Каждого НайденныйСрок Из НайденныеСроки Цикл
				ДатаОтсчета = Макс(ДатаОтсчета, НайденныйСрок.СрокИсполненияПроцесса);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Определим дату отсчета по карточке комплексного процесса,
	// если нет предшественников.
	Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
	
		ДатаОтсчета = Форма.ДатаОтсчетаДляРасчетаСроков;
		
		Смещение = СмещенияДатыОтсчетаВКарточке(Форма);
		Если ЗначениеЗаполнено(Смещение) Тогда
			Если ТипЗнч(Смещение) = Тип("Число") Тогда
				ДатаОтсчета = ДатаОтсчета + Смещение;
			Иначе
				ДатаОтсчета = Макс(ДатаОтсчета, Смещение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОтсчета;
	
КонецФункции

// Возвращает дату отсчета для нового действия комплексного процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФормы - форма комплексного процесса/шаблона.
//
// Возвращаемое значение:
//  Дата - дата отсчета для действия.
//
Функция ДатаОтсчетаНовогоДействияКомплексногоПроцессаВФорме(Форма) Экспорт
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	ДатаОтсчета = Дата(1,1,1);
	
	Если Форма.Объект.ВариантМаршрутизации = ВариантыМаршуртизацииЗадач.Последовательно Тогда
		ДатаОтсчета = Форма.Объект.СрокИсполненияПроцесса;
	ИначеЕсли Форма.Объект.ВариантМаршрутизации = ВариантыМаршуртизацииЗадач.Смешанно Тогда
		
		ИндексПоследнегоЭтапа = Форма.Объект.Этапы.Количество() - 1;
		
		Если ИндексПоследнегоЭтапа >= 0 Тогда
			ДатаОтсчета = Форма.Объект.Этапы[ИндексПоследнегоЭтапа].СрокИсполненияПроцесса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		
		Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(Форма);
		
		Если ТипЗнч(Смещение) = Тип("Число") Тогда
			Смещение = Форма.ДатаОтсчетаДляРасчетаСроков + Смещение;
		КонецЕсли;
		
		ДатаОтсчета = Макс(Смещение, Форма.ДатаОтсчетаДляРасчетаСроков);
	КонецЕсли;
	
	Возврат ДатаОтсчета;
	
КонецФункции

// Заполняет представление сроков исполнения в форме комплексного процесса/шаблона.
//
// Параметры:
//  Форма - Управляемая Форма - формы комплексного процесса/шаблона.
//
Процедура ЗаполнитьПредставлениеСроковИсполненияВФормеКомплексногоПроцесса(Форма) Экспорт
	
	ПоказатьТочныеСроки = ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
	ПоказатьОтносительныеСроки = ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);
	
	Если Форма.ИспользоватьСхемуПроцесса Тогда
		
		ПроцессыСхемыДляПрерывания = Новый СписокЗначений;
		Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
			ПроцессыСхемыДляПрерывания = Форма.ПроцессыСхемыДляПрерывания;
		КонецЕсли;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставленияДействийВСхемеПроцесса(
			Форма.Схема,
			Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
			Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
			Форма.КэшДанныхДействий,
			Форма.ИспользоватьВремяВСрокахЗадач,
			ПоказатьТочныеСроки,
			ПоказатьОтносительныеСроки,
			ПроцессыСхемыДляПрерывания);
		
	Иначе
		Для Каждого Этап Из Форма.Объект.Этапы Цикл
			
			Дата = Дата(1,1,1);
			Дни = 0;
			Часы = 0;
			Минуты = 0;
			
			Если ПоказатьОтносительныеСроки Тогда
				Дни = Этап.СрокИсполненияПроцессаДни;
				Часы = Этап.СрокИсполненияПроцессаЧасы;
				Минуты = Этап.СрокИсполненияПроцессаМинуты;
			КонецЕсли;
			
			Если ПоказатьТочныеСроки Тогда
				Дата = Этап.СрокИсполненияПроцесса;
			КонецЕсли;
			
			СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
				Этап.СрокИсполненияПроцессаПредставление,
				Дата, Дни, Часы, Минуты,
				Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		КонецЦикла;
	КонецЕсли;
	
	Дата = Дата(1,1,1);
	Дни = 0;
	Часы = 0;
	Минуты = 0;
	
	Если ПоказатьОтносительныеСроки Тогда
		Дни = Форма.СрокИсполненияПроцессаДни;
		Часы = Форма.СрокИсполненияПроцессаЧасы;
		Минуты = Форма.СрокИсполненияПроцессаМинуты;
	КонецЕсли;
	
	Если ПоказатьТочныеСроки Тогда
		Дата = Форма.Объект.СрокИсполненияПроцесса;
	КонецЕсли;
	
	ПредставлениеСрокаИсполнения = "";
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
		ПредставлениеСрокаИсполнения,
		Дата, Дни, Часы, Минуты,
		Форма.ИспользоватьДатуИВремяВСрокахЗадач);
		
	Если КомандаРасчетаСрокаДоступна(Форма) Тогда
		
		СтрокиПредставленияСрока = Новый Массив;
		СтрокиПредставленияСрока.Добавить(ПредставлениеСрокаИсполнения);
		СтрокиПредставленияСрока.Добавить(" (");
		
		СтрокиПредставленияСрока.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'рассчитать'; en = 'calculate'"),,,, "Рассчитать"));
		
		СтрокиПредставленияСрока.Добавить(")");
		
		ПредставлениеСрокаИсполнения = Новый ФорматированнаяСтрока(СтрокиПредставленияСрока);
		
	КонецЕсли;
	
	Форма.СрокИсполненияПроцессаПредставление = ПредставлениеСрокаИсполнения;
	
КонецПроцедуры

// Возвращает доступность команды расчета срока для карточки
// комплексного процесса/шаблона.
//
// Параметры:
//  форма - УправляемаяФорма - карточка комплексного процесса/шаблона.
//
// Возвращаемое значение:
//  Булево
//
Функция КомандаРасчетаСрокаДоступна(Форма) Экспорт
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		Доступность = Не ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона)
			И Не ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков);
	Иначе
		Доступность = Не Форма.Объект.Стартован
			И Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен")
			И Не Форма.Объект.ПометкаУдаления
			И ЗначениеЗаполнено(Форма.Объект.Шаблон)
			И Не ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача)
			И Не ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков);
	КонецЕсли;
	
	Возврат Доступность;
	
КонецФункции

// Определяет необходимость отображения относительных сроков
// в карточке комплексного процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - Карточка процесса/служебного шаблона.
//
// Возвращаемое значение:
//  Булево - Возвращает Истину, если нужно показывать относительные сроки, иначе - Ложь.
//
Функция ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма) Экспорт
	
	ПоказатьОтносительныеСроки = Ложь;
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		ПоказатьОтносительныеСроки = Не ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона)
			Или Форма.ЭтоДействиеШаблонаКомплексногоПроцесса
			Или (Форма.ЭтоДействиеКомплексногоПроцессаПоШаблону И Не Форма.КомплексныйПроцессСтартован);
	Иначе
		ПоказатьОтносительныеСроки = Не ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача)
			И ЗначениеЗаполнено(Форма.Объект.Шаблон)
			И Не Форма.Объект.ПометкаУдаления
			И Не Форма.Объект.Стартован
			И Форма.Объект.Состояние = 
				ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен");
	КонецЕсли;
	
	Возврат ПоказатьОтносительныеСроки;
	
КонецФункции

// Определяет необходимость отображения точных сроков
// в карточке комплексного процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - Карточка процесса/служебного шаблона.
//
// Возвращаемое значение:
//  Булево - Возвращает Истину, если нужно показывать точные сроки, иначе - Ложь.
//
Функция ПоказатьТочныеСрокиВКомплексномПроцессе(Форма) Экспорт
	
	Возврат ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков);
	
КонецФункции

// Обновляет признак истекшего срока для процесса
//
// Параметры:
//  СрокИсполнения - Дата - срок исполнения процесса.
//  ДатаЗаверешения - Дата - дата завершения процесса.
//  СрокИсполненияИстек - Булево - признак истекшего срока.
//
Процедура ОбновитьПризнакИстекшегоСрокаПроцесса(
	СрокИсполнения, ДатаЗаверешения, СрокИсполненияИстек) Экспорт
	
	СрокИсполненияИстек = Ложь;
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИсполнения = ТекущаяДата();
	
	Если ЗначениеЗаполнено(ДатаЗаверешения) Тогда
		ДатаИсполнения = ДатаЗаверешения;
	КонецЕсли;
	
	ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
	
	Если СрокИсполнения < ДатаИсполнения Тогда
		СрокИсполненияИстек = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет последователей в путь и заполняет строки таблицы предшественников
// замыкающих цикл.
// Процедура рекурсивная. Используется в функции ПараметрыПутей.
//
Процедура ДобавитьПоследователейВПуть(
	ТаблицаПутей, Предшественники, ТекущийЭтап, СтрокиПредшественниковЗамыкающиеЦикл)
	
	Для Каждого СтрТаблицыПутей Из ТаблицаПутей Цикл
		Если СтрТаблицыПутей.ТекущийЭтапПути = ТекущийЭтап Тогда
			ПутьТекущегоЭтапа = СтрТаблицыПутей;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИсходныйПуть = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПутьТекущегоЭтапа.Путь);
	
	Последователи = Новый Массив;
	
	Для Каждого СтрПредшественник Из Предшественники Цикл
		Если СтрПредшественник.Предшественник = ТекущийЭтап Тогда
			Последователи.Добавить(СтрПредшественник);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВПервыйПуть = Истина;
	
	Для Каждого СтрПоследователь Из Последователи Цикл
		
		Если ИсходныйПуть.Найти(СтрПоследователь.Последователь) <> Неопределено Тогда
			
			СтрТаблицыПредшественниковЗамыкающиеЦикл = СтрокаТаблицыПредшественниковЗамыкающихЦиклы(
				СтрПоследователь.Предшественник, СтрПоследователь.Последователь);
			
			СтрокиПредшественниковЗамыкающиеЦикл.Добавить(СтрТаблицыПредшественниковЗамыкающиеЦикл);
			Продолжить;
		КонецЕсли;
		
		Если ДобавитьВПервыйПуть Тогда
			ПутьТекущегоЭтапа.ТекущийЭтапПути = СтрПоследователь.Последователь;
			ПутьТекущегоЭтапа.Путь.Добавить(СтрПоследователь.Последователь);
			ДобавитьВПервыйПуть = Ложь;
		Иначе
			НовыйПуть = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсходныйПуть);
			НовыйПуть.Добавить(СтрПоследователь.Последователь);
			
			СтрТаблицыПутей = СтрокаТаблицыПутей(СтрПоследователь.Последователь, НовыйПуть);
			ТаблицаПутей.Добавить(СтрТаблицыПутей);
		КонецЕсли;
		
		ДобавитьПоследователейВПуть(
			ТаблицаПутей,
			Предшественники,
			СтрПоследователь.Последователь,
			СтрокиПредшественниковЗамыкающиеЦикл);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку таблицы путей.
//
// Параметры:
//  ТекущийЭтапПути - УникальныйИдентификатор - идентификатор текущего этапа пути.
//  Путь - массив - путь из идентификаторов.
//
// Возвращаемое значение:
//  Структура
//   * ТекущийЭтапПути - УникальныйИдентификатор - идентификатор текущего этапа пути.
//   * Путь - Массив - путь из идентификаторов.
//
Функция СтрокаТаблицыПутей(ТекущийЭтапПути, Путь)
	
	СтрТаблицы = Новый Структура;
	СтрТаблицы.Вставить("ТекущийЭтапПути", ТекущийЭтапПути);
	СтрТаблицы.Вставить("Путь", Путь);
	
	Возврат СтрТаблицы;
	
КонецФункции

// Возвращает строку таблицы предшественников замыкающих цикл.
//
// Параметры:
//  Предшественник - УникальныйИдентификатор - идентификатор предшественника.
//  Последователь - УникальныйИдентификатор - идентификатор последователя.
//
// Возвращаемое значение:
//  Структура
//   * Предшественник - УникальныйИдентификатор - идентификатор предшественника.
//   * Последователь - УникальныйИдентификатор - идентификатор последователя.
//
Функция СтрокаТаблицыПредшественниковЗамыкающихЦиклы(Предшественник, Последователь)
	
	СтрТаблицы = Новый Структура;
	СтрТаблицы.Вставить("Предшественник", Предшественник);
	СтрТаблицы.Вставить("Последователь", Последователь);
	
	Возврат СтрТаблицы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КарточкиПроцессовИШаблонов

// Возвращает структуру параметров для настройки доступности
// элемента управления сроком.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессовКлиентСервер.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессовКлиентСервер.
//
// Возвращаемое значение:
//  Структура
//   * ДоступностьПоШаблону - Булево - настройка доступности реквизита по шаблону процесса.
//   * ВестиУчетПереносаСроков - Булево - значение одноименной настройки программы.
//   * ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Функция ПараметрыДоступностиЭлементаУправления() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДоступностьПоШаблону");
	Параметры.Вставить("ВестиУчетПереносаСроков");
	Параметры.Вставить("ЗаявкаНаПереносСрока");
	
	Возврат Параметры;
	
КонецФункции

// Настраивает возможность изменения значения элемента управления сроком.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессовКлиентСервер.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессовКлиентСервер.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса.
//  ЭлементУправленияСроком - ПолеФормы - поле формы управления сроком.
//  РеквизитПредставлениеСрока - Строка - реквизит содержащий представление срока.
//  ПараметрыДоступности - Структура - см. функцию ПараметрыДоступностиЭлементаУправления.
//
Процедура НастроитьЭлементУправленияСроком(Форма,
	ЭлементУправленияСроком,
	РеквизитПредставлениеСрока,
	ПараметрыДоступности) Экспорт
	
	ДоступностьПоШаблону = ПараметрыДоступности.ДоступностьПоШаблону;
	ВестиУчетПереносаСроков = ПараметрыДоступности.ВестиУчетПереносаСроков;
	ЗаявкаНаПереносСрока = ПараметрыДоступности.ЗаявкаНаПереносСрока;
	
	// Устанавливаем значения по умолчанию (включаем доступность всех полей)
	ЭлементУправленияСроком.ТолькоПросмотр = Ложь;
	
	// Устанвавливаем заначение в зависимости от параметров формы
	Если Форма.ТолькоПросмотр Тогда
		// Если форма процесса недоступна для изменения, тогда не даем менять сроки.
		ЭлементУправленияСроком.ТолькоПросмотр = Истина;
	ИначеЕсли ВестиУчетПереносаСроков = Истина И ЗначениеЗаполнено(ЗаявкаНаПереносСрока) Тогда
		// Если включен учет переносов сроков и есть заявка на перенос срока, тогда изменение разрешено.
	ИначеЕсли ДоступностьПоШаблону = Ложь И ЗначениеЗаполнено(РеквизитПредставлениеСрока) Тогда
		// Если изменение запрещено по шаблону и сроки заполнены, тогда запрещаем менять.
		ЭлементУправленияСроком.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
