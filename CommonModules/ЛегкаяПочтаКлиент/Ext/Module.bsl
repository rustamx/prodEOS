/////////////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА И ПОЛУЧЕНИЯ ПИСЕМ

// Отправляет сообщение
//
// Параметры:
// - Сообщение (Структура)
//
Процедура Отправить(ОписаниеОповещения, ПараметрыОтправки) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	Сообщение = ПараметрыОтправкиПочтовогоСообщенияВызовСервера.СформироватьСтруктуруПочтовогоСообщения(
		ПараметрыОтправки,
		УникальныйИдентификатор);
	Если ПараметрыОтправки.Шифровать Тогда
		ПараметрыОтправкиПочтовогоСообщенияКлиент.ЗашифроватьВложения(ПараметрыОтправки, Сообщение, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ОтправитьПослеШифрования(ОписаниеОповещения, ПараметрыОтправки, Сообщение);
	
КонецПроцедуры

// Продолжение отправки
Процедура ОтправитьПослеШифрования(ОписаниеОповещения, ПараметрыОтправки, Сообщение) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОбработчика.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	ПараметрыОбработчика.Вставить("Сообщение", Сообщение);
	ОписаниеОповещенияФормы = Новый ОписаниеОповещения(
		"ОтправитьПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	КодВозврата = Ложь;
	ВидПочтовогоКлиента = ПараметрыОтправкиПочтовогоСообщения.ПолучитьВидПочтовогоКлиента(ПараметрыОтправки);
	Если ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта") Тогда
		Пароль = ПараметрыОтправкиПочтовогоСообщения.ПолучитьПароль(ОписаниеОповещенияФормы.ДополнительныеПараметры.ПараметрыОтправки);
		Если ПустаяСтрока(Пароль) Тогда
			ОткрытьФорму(
				"ОбщаяФорма.ВводПароляУчетнойЗаписиПочты",,,,,,
				ОписаниеОповещенияФормы,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияФормы, Пароль);
		Возврат;
		
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		ПрофильИнфо = ПараметрыОтправкиПочтовогоСообщения.ПолучитьСтруктуруПрофиля(ПараметрыОтправки);
		КодВозврата = ЛегкаяПочтаКлиент.ОтправитьПочта(Сообщение, ПрофильИнфо);
		
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		КодВозврата = ЛегкаяПочтаКлиент.ОткрытьФормуСообщенияMSOutlook(Сообщение);
		
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.TheBat") Тогда
		ПрофильИнфо = ПараметрыОтправкиПочтовогоСообщения.ПолучитьСтруктуруПрофиля(ПараметрыОтправки);
		КодВозврата = ЛегкаяПочтаКлиент.ОткрытьФормуСообщенияTheBat(
			Сообщение,
			ПрофильИнфо);
		
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MozillaThunderbird") Тогда
		ПрофильИнфо = ПараметрыОтправкиПочтовогоСообщения.ПолучитьСтруктуруПрофиля(ПараметрыОтправки);
		КодВозврата = ЛегкаяПочтаКлиент.ОткрытьФормуСообщенияMozillaThunderbird(
			Сообщение,
			ПрофильИнфо);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид почтового клиента'; en = 'Incorrect type of email client'");
	КонецЕсли;
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("КодВозврата", КодВозврата);
	ПараметрыВозврата.Вставить("СообщениеОбОшибке", "");
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПараметрыВозврата);
	
КонецПроцедуры

// Продолжение отправки
Процедура ОтправитьПродолжение(Пароль, Параметры) Экспорт
	
	Если ТипЗнч(Пароль) <> Тип("Строка") Или ПустаяСтрока(Пароль) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьПароль(Параметры.ПараметрыОтправки, Пароль);
				
	Пароль = ПараметрыОтправкиПочтовогоСообщения.ПолучитьПароль(Параметры.ПараметрыОтправки);
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	УчетнаяЗапись = ПараметрыОтправкиПочтовогоСообщения.ПолучитьПрофиль(Параметры.ПараметрыОтправки);
	СообщениеОбОшибке = "";
	КодВозврата = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
		Параметры.Сообщение,
		УчетнаяЗапись,
		Пароль,
		СообщениеОбОшибке);
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("КодВозврата", КодВозврата);
	ПараметрыВозврата.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ПараметрыВозврата);
	
КонецПроцедуры

// Загружает сообщения, используя почтового клиента, указанного в настройках загрузки
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
//
Процедура Получить(ПараметрыЗагрузки, ОписаниеОповещения) Экспорт
	
	ВидПочтовогоКлиента = ПараметрыЗагрузки.НастройкиПрофилейДляЗагрузки.Профиль.ВидПочтовогоКлиента;
	Если ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта") Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		ОписаниеОповещенияФормы = Новый ОписаниеОповещения(
			"ПолучитьПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если ПустаяСтрока(ПараметрыЗагрузки.НастройкиПрофилейДляЗагрузки.Профиль.Пароль) Тогда
			ОткрытьФорму(
				"ОбщаяФорма.ВводПароляУчетнойЗаписиПочты",,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		Результат = ЛегкаяПочтаСервер.ПолучитьИнтернетПочта(ПараметрыЗагрузки);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Возврат;
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		Результат = ЛегкаяПочтаКлиент.ПолучитьПочта(ПараметрыЗагрузки);
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		Результат = ЛегкаяПочтаКлиент.ПолучитьMSOutlook(ПараметрыЗагрузки);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

// Продолжение получения
Процедура ПолучитьПродолжение(Пароль, Параметры) Экспорт
	
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		Если Не ПустаяСтрока(Пароль) Тогда
			Параметры.ПараметрыЗагрузки.Вставить("ПарольУчетнойЗаписиПочты", Пароль);
			Результат = ЛегкаяПочтаСервер.ПолучитьИнтернетПочта(Параметры.ПараметрыЗагрузки);
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// ПОЧТА

// Возвращает массив структур с содержанием писем с помощью встроенного объекта 1С "ПочтовоеСообщение"
//
// Параметры:
// - ПараметрыЗагрузки (Структура)
//   - Профиль (Строка)
//   - НепрочитанныеСообщения (Булево)
//   - Конверты (Булево)
//
Функция ПолучитьПочта(ПараметрыЗагрузки) Экспорт
	
	ПрофильMAPI = ПараметрыЗагрузки.НастройкиПрофилейДляЗагрузки.Профиль.Данные.Профиль;
	НепрочитанныеСообщения = ПараметрыЗагрузки.НепрочитанныеСообщения;
	Конверты = Ложь;
	УникальныйИдентификатор = ПараметрыЗагрузки.УникальныйИдентификатор;

	ОбъектПочта = Новый Почта;
	ОбъектПочта.Подключиться(ПрофильMAPI);
	
	Результат = Новый Массив;
	
	Письма = ОбъектПочта.Выбрать(НепрочитанныеСообщения, Конверты);
	Для каждого Письмо Из Письма Цикл
		Если ТипЗнч(Письмо.Отправитель) = Тип("Строка") Тогда
			Отправитель = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Отправитель);
			Если Найти(Отправитель, "SMTP:") = 1 Тогда
				Отправитель = Сред(Отправитель, 6);
			КонецЕсли;
		Иначе // ПочтовыйАдрес
			Адрес = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Отправитель.Адрес);
			Пользователь = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Отправитель.Пользователь);
			Отправитель = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Пользователь,
				Адрес);
		КонецЕсли;
		
		Сообщение = ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения();
		
		Сообщение.УникальныйИдентификатор = УникальныйИдентификатор;
		Сообщение.Тема = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Тема);
		Сообщение.Текст = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Текст);
		Сообщение.ДатаПолучения = Письмо.ДатаПолучения;
		Сообщение.ДатаОтправки = Письмо.ДатаПолучения;
		Сообщение.Отправитель = Отправитель;
		Сообщение.НеПрочтено = Письмо.НеПрочтено;
		
		Для каждого Получатель Из Письмо.Получатели Цикл
			АдресПолучателя = УдалитьИзАдресаЭлектроннойПочтыПриставкуSMTP(Получатель);
			ЛегкаяПочтаКлиентСервер.ДобавитьПолучателя(Сообщение, "Кому", АдресПолучателя);
		КонецЦикла;
		
		Для каждого Копия Из Письмо.Копии Цикл
			АдресПолучателя = УдалитьИзАдресаЭлектроннойПочтыПриставкуSMTP(Копия);
			ЛегкаяПочтаКлиентСервер.ДобавитьПолучателя(Сообщение, "Копия", АдресПолучателя);
		КонецЦикла;
		
		Для каждого СлепаяКопия Из Письмо.СлепыеКопии Цикл
			АдресПолучателя = УдалитьИзАдресаЭлектроннойПочтыПриставкуSMTP(СлепаяКопия);
			ЛегкаяПочтаКлиентСервер.ДобавитьПолучателя(Сообщение, "СкрытаяКопия", АдресПолучателя);
		КонецЦикла;
		
		Если Не Конверты Тогда
			Для каждого Вложение Из Письмо.Вложения Цикл
				ИмяФайла = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Вложение.Наименование);
				ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ИмяФайла);
				ПолноеИмяФайла = ПолучитьПолноеИмяВременногоФайла(ИмяФайла);
				Вложение.Данные.Записать(ПолноеИмяФайла);
				ЛегкаяПочтаКлиентСервер.ДобавитьВложениеФайлНаДиске(
					Сообщение,
					ПолноеИмяФайла,
					ИмяФайла,
					ИмяФайла);
			КонецЦикла;
		КонецЕсли;
		
		Сообщение.Идентификатор = ПолучитьИдентификаторПочта(
			Сообщение.Отправитель,
			Сообщение.ДатаПолучения,
			Сообщение.Тема);
		
		Результат.Добавить(Сообщение);
		
	КонецЦикла;
	
	ОбъектПочта.Отключиться();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторПочта(Отправитель, ДатаПолучения, Заголовок)
	
	Возврат "" + Отправитель + "|" + ДатаПолучения + "|" + Заголовок;
	
КонецФункции

// Помечает сообщения как прочтенные
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
// - СерверныеИдентификаторыСообщений (Массив)
//   - Элемент (Строка)
//
Функция ПометитьКакПрочтенныеПочта(
	ПараметрыЗагрузки,
	СерверныеИдентификаторыСообщений) Экспорт
	
	ПрофильMAPI = ПараметрыЗагрузки.НастройкиПрофилейДляЗагрузки.Профиль.Данные.Профиль;
	ОбъектПочта = Новый Почта;
	ОбъектПочта.Подключиться(ПрофильMAPI);
	НепрочитанныеСообщения = Истина;
	Конверты = Истина;
	Письма = ОбъектПочта.Выбрать(НепрочитанныеСообщения, Конверты);
	Для каждого Письмо Из Письма Цикл
		Если ТипЗнч(Письмо.Отправитель) = Тип("Строка") Тогда
			Отправитель = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Отправитель);
			Если Найти(Отправитель, "SMTP:") = 1 Тогда
				Отправитель = Сред(Отправитель, 6);
			КонецЕсли;
		Иначе // ПочтовыйАдрес
			Отправитель = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Отправитель.Адрес + " <" + Письмо.Отправитель.Пользователь + ">");
		КонецЕсли;
		
		Идентификатор = ПолучитьИдентификаторПочта(
			Отправитель,
			Письмо.ДатаПолучения,
			РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Тема));
		Если СерверныеИдентификаторыСообщений.Найти(Идентификатор) <> Неопределено Тогда
			Письмо.Непрочтено = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Помечает сообщения как непрочтенные
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
// - СерверныеИдентификаторыСообщений (Массив)
//   - Элемент (Строка)
//
Функция ПометитьКакНепрочтенныеПочта(
	ПараметрыЗагрузки,
	СерверныеИдентификаторыСообщений) Экспорт
	
	ПрофильMAPI = ПараметрыЗагрузки.НастройкиПрофилейДляЗагрузки.Профиль.Данные.Профиль;
	ОбъектПочта = Новый Почта;
	ОбъектПочта.Подключиться(ПрофильMAPI);
	НепрочитанныеСообщения = Ложь;
	Конверты = Истина;
	Письма = ОбъектПочта.Выбрать(НепрочитанныеСообщения, Конверты);
	Для каждого Письмо Из Письма Цикл
		Если ТипЗнч(Письмо.Отправитель) = Тип("Строка") Тогда
			Отправитель = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Отправитель);
			Если Найти(Отправитель, "SMTP:") = 1 Тогда
				Отправитель = Сред(Отправитель, 6);
			КонецЕсли;
		Иначе // ПочтовыйАдрес
			ОтправительАдрес = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Строка(Письмо.Отправитель.Адрес));
			ОтправительОтображаемоеИмя = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Строка(Письмо.Отправитель.Пользователь));
			Отправитель = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				ОтправительОтображаемоеИмя,
				ОтправительАдрес);
		КонецЕсли;
		
		Идентификатор = ПолучитьИдентификаторПочта(
			Отправитель,
			Письмо.ДатаПолучения,
			РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Письмо.Тема));
		Если СерверныеИдентификаторыСообщений.Найти(Идентификатор) <> Неопределено Тогда
			Письмо.Непрочтено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Принимает ПочтовыйАдрес (ПочтовыйАдрес)
// Возвращает Результат (Строка)
//
Функция УдалитьИзАдресаЭлектроннойПочтыПриставкуSMTP(ПочтовыйАдрес)
	
	Результат = ПочтовыйАдрес.Адрес;
	Если Найти(Результат, "SMTP:") = 1 Тогда
		Результат = Сред(Результат, 6);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Отправляет сообщение, используя встроенный объект 1С "Почта"
//
// Параметры:
// - Сообщение (Структура)
//
Функция ОтправитьПочта(Сообщение, СтруктураПрофиля) Экспорт
	
	ПочтовоеСообщение = Новый ПочтовоеСообщение;
	
	Для каждого Получатель Из Сообщение.Получатели Цикл
		ПочтовоеСообщение.Получатели.Добавить(Получатель);
	КонецЦикла;
	Для каждого Получатель Из Сообщение.Копии Цикл
		ПочтовоеСообщение.Копии.Добавить(Получатель);
	КонецЦикла;
	Для каждого Получатель Из Сообщение.СлепыеКопии Цикл
		ПочтовоеСообщение.СлепыеКопии.Добавить(Получатель);
	КонецЦикла;
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.Адрес);
		ПочтовоеСообщение.Вложения.Добавить(ДвоичныеДанные, Вложение.ИмяФайла);
	КонецЦикла;
	
	ПочтовоеСообщение.Отправитель = СтруктураПрофиля.Данные.Отправитель;
	ПочтовоеСообщение.Тема = Сообщение.Тема;
	ПочтовоеСообщение.Текст = Сообщение.Текст;
	
	ОбъектПочта = Новый Почта;
	ПрофильMAPI = СтруктураПрофиля.Данные.Профиль;
	ОбъектПочта.Подключиться(ПрофильMAPI);
	ОбъектПочта.Послать(ПочтовоеСообщение, Ложь);
	ОбъектПочта.Отключиться();
	
	Возврат Истина;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// THE BAT

// Открывает форму сообщения внутри почтового клиента TheBat!
//
// Параметры:
// - Сообщение (Структура)
//
Функция ОткрытьФормуСообщенияTheBat(Сообщение, СтруктураПрофиля) Экспорт
	
	ПараметрыПодключения = СтруктураПрофиля.Данные;
	
	ПараметрыКоманднойСтроки = Новый Структура;
	ПараметрыКоманднойСтроки.Вставить("PATH", ПараметрыПодключения.PATH);
	ПараметрыКоманднойСтроки.Вставить("USER", ПараметрыПодключения.USER);
	ПараметрыКоманднойСтроки.Вставить("PASSWORD", ПараметрыПодключения.PASSWORD);
	ПараметрыКоманднойСтроки.Вставить("SUBJECT", Сообщение.Тема);
	
	Шаблон = "";
	Для каждого Получатель Из Сообщение.Получатели Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Шаблон, Символы.ПС, "%TO=""" + Получатель + """");
	КонецЦикла;
	Для каждого Получатель Из Сообщение.Копии Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Шаблон, Символы.ПС, "%CC=""" + Получатель + """");
	КонецЦикла;
	Для каждого Получатель Из Сообщение.СлепыеКопии Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Шаблон, Символы.ПС, "%BCC=""" + Получатель + """");
	КонецЦикла;
	
	Если Сообщение.Важность = 2 Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Шаблон, Символы.ПС, "%PRIORITY=""H""");
	КонецЕсли;
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(Сообщение.Текст, Символы.ПС, Шаблон);
	
	АдресФайлаСодержания = ПоместитьСодержаниеВоВременныйФайл(Сообщение);
	Если ПустаяСтрока(АдресФайлаСодержания) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыКоманднойСтроки.Вставить("TEXT", АдресФайлаСодержания);
	
	ВременныйКаталог = ПоместитьВложенияВоВременныйКаталог(Сообщение);
	Если ПустаяСтрока(ВременныйКаталог) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыКоманднойСтроки.Вставить("ATTACH", ВременныйКаталог + "\*.*");
	
	КомандаСтр =
	"%PATH%\TheBat.exe /MAIL;
	|USER=""%USER%"";
	|PASSWORD=""%PASSWORD%"";
	|SUBJECT=""%SUBJECT%"";
	|TEMPLATE=""%TEXT%"";
	|ATTACH=""%ATTACH%""";
	
	КомандаСтр = СтрЗаменить(КомандаСтр, "%PATH%", ПараметрыКоманднойСтроки.PATH);
	КомандаСтр = СтрЗаменить(КомандаСтр, "%USER%", ПараметрыКоманднойСтроки.USER);
	КомандаСтр = СтрЗаменить(КомандаСтр, "%PASSWORD%", ПараметрыКоманднойСтроки.PASSWORD);
	КомандаСтр = СтрЗаменить(КомандаСтр, "%SUBJECT%", ПараметрыКоманднойСтроки.SUBJECT);
	КомандаСтр = СтрЗаменить(КомандаСтр, "%TEXT%", ПараметрыКоманднойСтроки.TEXT);
	КомандаСтр = СтрЗаменить(КомандаСтр, "%ATTACH%", ПараметрыКоманднойСтроки.ATTACH);
	КомандаСтр = СтрЗаменить(КомандаСтр, Символы.ПС, "");	
	
	ЗапуститьПриложение(КомандаСтр);
	
	Возврат Истина;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// Mozilla Thunderbird

// Открывает форму сообщения внутри почтового клиента Mozilla Thunderbird
//
// Параметры:
// - Сообщение (Структура)
//
Функция ОткрытьФормуСообщенияMozillaThunderbird(Сообщение, СтруктураПрофиля) Экспорт
	
	ПараметрыПодключения = СтруктураПрофиля.Данные;
	ПутьКПриложению = ПараметрыПодключения.PATH;
	
	КомандаСтр = ВКавычках(ПутьКПриложению + "\thunderbird.exe");
	ДобавитьЗначениеКСтрокеЧерезРазделитель(КомандаСтр, " ", "-compose");
	
	Кому = ""; Копии = ""; СкрытыеКопии = "";
	
	Для каждого Получатель Из Сообщение.Получатели Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Кому, ",", Получатель);
	КонецЦикла;
	Для каждого Получатель Из Сообщение.Копии Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Копии, ",", Получатель);
	КонецЦикла;
	Для каждого Получатель Из Сообщение.СлепыеКопии Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(СкрытыеКопии, ",", Получатель);
	КонецЦикла;
	
	Параметры = "";
	Если Не ПустаяСтрока(Кому) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Параметры, ",", "to='" + Кому + "'");
	КонецЕсли;
	Если Не ПустаяСтрока(Копии) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Параметры, ",", "cc='" + Копии + "'");
	КонецЕсли;
	Если Не ПустаяСтрока(СкрытыеКопии) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Параметры, ",", "bcc='" + СкрытыеКопии + "'");
	КонецЕсли;
	
	Тема = СтрЗаменить(Сообщение.Тема,"'","");
	Если Не ПустаяСтрока(Тема) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Параметры, ",", "subject='" + Тема+ "'");
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() > 0 Тогда
		ВременныйКаталог = ПоместитьВложенияВоВременныйКаталог(Сообщение);
		Если ПустаяСтрока(ВременныйКаталог) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Файлы = НайтиФайлы(ВременныйКаталог,"*.*");
		СписокФайлов = "";
		Для каждого Файл Из Файлы Цикл
			ДобавитьЗначениеКСтрокеЧерезРазделитель(СписокФайлов, ",", ВКавычках(Файл.ПолноеИмя));
		КонецЦикла;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Параметры, ",", "attachment='" + СписокФайлов+ "'");
	КонецЕсли;
	
	Текст = СтрЗаменить(Сообщение.Текст,"'","");
	Текст = СтрЗаменить(Текст,"""","""""");
	Если Не ПустаяСтрока(Текст) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Параметры, ",", "body='" + Текст+ "'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(КомандаСтр, " ", Параметры);
	КонецЕсли;
	
	ЗапуститьПриложение(КомандаСтр);
	
	Возврат Истина;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// MS OUTLOOK

// Возвращает папку MSOutlook имеющую переданный путь или Неопределено, если не найдена.
//
Функция ПолучитьПапкуMSOutlook(Знач Путь) Экспорт
	
	Попытка
		Application = Новый COMОбъект("Outlook.Application");
		Folder = Application.GetNamespace("MAPI");
		Если Найти(Путь, "\\") = 1 Тогда
			Путь = Сред(Путь, 3);
		КонецЕсли;
		Пока Не ПустаяСтрока(Путь) Цикл
			Поз = Найти(Путь, "\");
			Если Поз = 0 Тогда
				ИмяПапки = Путь;
				Путь = "";
			Иначе
				ИмяПапки = Лев(Путь, Поз - 1);
				Путь = Сред(Путь, Поз + 1);
			КонецЕсли;
			Folder = Folder.Folders.Item(ИмяПапки);
		КонецЦикла;
		Возврат Folder;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Получает почтовые сообщения с помощью объекта "Outlook.Application".
// Результат (Массив)
// - Элемент (Структура) - Сообщение
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
//   - Папка (Строка)
//   - ЗагружатьСДаты (ДатаИВремя)
//   - УникальныйИдентификатор (УникальныйИдентификатор)
//
Функция ПолучитьMSOutlook(ПараметрыЗагрузки) Экспорт
	Перем ПериодЗагрузки;
	
	Результат = Новый Массив;
	
	УникальныйИдентификатор = ПараметрыЗагрузки.УникальныйИдентификатор;
	НепрочитанныеСообщения = ПараметрыЗагрузки.НепрочитанныеСообщения;
	Путь = ПараметрыЗагрузки.НастройкиПрофилейДляЗагрузки.Профиль.Данные.Путь;
	ПериодЗагрузки = "";
	Если ПараметрыЗагрузки.Свойство("ПериодЗагрузки") Тогда
		ПериодЗагрузки = ПараметрыЗагрузки.ПериодЗагрузки;
	КонецЕсли;
	
	Folder = ПолучитьПапкуMSOutlook(Путь);
	Если Folder = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Папка %1 не найдена'; en = 'The folder %1 not found'"),
			Путь);
	КонецЕсли;
	
	ДатаСтр = "";
	Если Не ПустаяСтрока(ПериодЗагрузки) Тогда
		ДатаСтр = ЛегкаяПочтаКлиентСервер.ПолучитьДатуПоПериодуЗагрузки(ПериодЗагрузки);
	КонецЕсли;
	
	Restrict = "";
	Если Не ПустаяСтрока(ДатаСтр) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Restrict, " And ", "[ReceivedTime] > '" + ДатаСтр + "'");
	КонецЕсли;
	Если НепрочитанныеСообщения Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Restrict, " And ", "[UnRead] = True");
	КонецЕсли;
	Если Не ПустаяСтрока(Restrict) Тогда
		Items = Folder.Items.Restrict(Restrict);
	Иначе
		Items = Folder.Items;
	КонецЕсли;
	
	Для каждого Item Из Items Цикл
		Если Item.Class <> 43 Тогда // OlObjectClass.olMail
			Продолжить;
		КонецЕсли;
		
		СтруктураСообщения = ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения();
		
		СтруктураСообщения.УникальныйИдентификатор = УникальныйИдентификатор;
		СтруктураСообщения.Тема = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Item.Subject);
		СтруктураСообщения.Текст = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Item.Body);
		Если Item.BodyFormat = 2 Тогда // OlBodyFormat.olFormatHTML
			СтруктураСообщения.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
			СтруктураСообщения.ТекстHTML = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Item.HTMLBody);
			ИдентификаторыКартинокHTML = ПолучитьИдентификаторыКартинок(СтруктураСообщения.ТекстHTML);
		КонецЕсли;
		
		ИмяОтправителя = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Item.SenderName);
		АдресЭлектроннойПочтыОтправителя = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Item.SenderEmailAddress);
		СтруктураСообщения.Отправитель = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
			ИмяОтправителя,
			АдресЭлектроннойПочтыОтправителя);
		
		СтруктураСообщения.Кому = СформироватьСтрокуПолучателейMSOutlook(Item.Recipients);
		
		Если Item.Importance = 0 Тогда // OlImportance.olImportanceLow
			СтруктураСообщения.Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Низкая");
		ИначеЕсли Item.Importance = 2 Тогда // OlImportance.olImportanceHigh
			СтруктураСообщения.Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая");
		Иначе
			СтруктураСообщения.Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Обычная");
		КонецЕсли;
		
		СтруктураСообщения.ДатаОтправки = Item.SentOn;
		СтруктураСообщения.ДатаПолучения = Item.ReceivedTime;
		СтруктураСообщения.Идентификатор = Item.EntryID;
		СтруктураСообщения.ОбратныйАдрес = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Item.ReplyRecipientNames);
		СтруктураСообщения.Размер = Item.Size;
		//СтруктураСообщения.НеПрочитано = Item.UnRead;
		
		Для каждого Attachment Из Item.Attachments Цикл
			AttachmentType = Attachment.Type;
			Если AttachmentType = 6 Тогда // OlAttachmentType.olOLE
				Продолжить;
			КонецЕсли;
			FileName = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Attachment.FileName);
			DisplayName = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Attachment.DisplayName);
			
			ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла(FileName);
			Attachment.SaveAsFile(ПолноеИмяВременногоФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяВременногоФайла);
			Наименование = DisplayName;
			ИмяФайла = FileName;
			
			Если СтруктураСообщения.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
				ИдентификаторКартинки = НайтиИдентификаторКартинки(ИдентификаторыКартинокHTML, ИмяФайла);
				Если Не ПустаяСтрока(ИдентификаторКартинки) Тогда
					// Это картинка.
					ЛегкаяПочтаКлиентСервер.ДобавитьКартинкуФайлНаДиске(
						СтруктураСообщения,
						ПолноеИмяВременногоФайла,
						FileName,
						ИдентификаторКартинки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Это обычное вложение.
			ЛегкаяПочтаКлиентСервер.ДобавитьВложениеФайлНаДиске(
				СтруктураСообщения,
				ПолноеИмяВременногоФайла,
				ИмяФайла,
				ИмяФайла);
			
		КонецЦикла;
		
		Результат.Добавить(СтруктураСообщения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиИдентификаторКартинки(ИдентификаторыКартинокHTML, ИмяФайла)
	
	Для каждого ИдентификаторКартинки Из ИдентификаторыКартинокHTML Цикл
		Если Найти(ИдентификаторКартинки, "cid:" + ИмяФайла + "@") > 0 Тогда
			Возврат ИдентификаторКартинки;
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

Функция ПолучитьИдентификаторыКартинок(ТекстHTML)
	
	Результат = Новый Массив;
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	Ссылки = ДокументHTML.Картинки;
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		Результат.Добавить(Картинка.Источник);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСтрокуПолучателейMSOutlook(Recipients)
	
	Результат = "";
	Для каждого Recipient Из Recipients Цикл
		Если ПустаяСтрока(Recipient.Name) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, "; ", Recipient.Address);
		Иначе
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, "; ", Recipient.Name + " <" + Recipient.Address + ">");
		КонецЕсли;
	КонецЦикла;
	Возврат РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Результат);
	
КонецФункции

// Открывает форму письма в программе MSOutlook
//
// Параметры:
// - Сообщение (Структура)
//
Функция ОткрытьФормуСообщенияMSOutlook(Сообщение) Экспорт
	
	Попытка
		Application = Новый COMОбъект("Outlook.Application");
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	MailItem = Application.CreateItem(0); // OlItemType.olMailItem
	
	Кому = "";
	Для каждого Получатель Из Сообщение.Получатели Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Кому, "; ", Получатель);
	КонецЦикла;
	MailItem.To = Кому;
	
	Копия = "";
	Для каждого Получатель Из Сообщение.Копии Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Копия, "; ", Получатель);
	КонецЦикла;
	MailItem.CC = Копия;
	
	СлепаяКопия = "";
	Для каждого Получатель Из Сообщение.СлепыеКопии Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(СлепаяКопия, "; ", Получатель);
	КонецЦикла;
	MailItem.BCC = СлепаяКопия;
	
	MailItem.Subject = Сообщение.Тема;
	MailItem.Body = Сообщение.Текст;
	
	ВременныйКаталог = ПоместитьВложенияВоВременныйКаталог(Сообщение);
	Если ПустаяСтрока(ВременныйКаталог) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файлы = НайтиФайлы(ВременныйКаталог,"*.*");
	Для каждого Файл Из Файлы Цикл
		MailItem.Attachments.Add(Файл.ПолноеИмя, 1, 1, Файл.Имя); // OlAttachmentType.olByValue
	КонецЦикла;
	
	MailItem.Importance = ?(Сообщение.Важность = 2, 2, 1); // OlImportance.olImportanceHigh, OlImportance.olImportanceNormal
	
	Попытка
		Результат = Вычислить("MailItem.Display(Ложь)");
	Исключение
		// MSOutlook генерирует исключение при выполнении метода MailItem.Display, но карточку открывает.
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Удаляет сообщения с клиентской программы MSOutlook
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
// - СерверныеИдентификаторыСообщений (Массив)
//   - Элемент (Строка)
//
Функция УдалитьСообщенияMSOutlook(
	НастройкаЗагрузкиЭлектроннойПочты,
	СерверныеИдентификаторыСообщений) Экспорт
	
	Application = Новый COMОбъект("Outlook.Application");
	Для каждого СерверныйИдентификатор Из СерверныеИдентификаторыСообщений Цикл
		Item = Application.Session.GetItemFromID(СерверныйИдентификатор);
		Item.Delete();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Помечает сообщения как прочтенные
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
// - СерверныеИдентификаторыСообщений (Массив)
//   - Элемент (Строка)
//
Функция ПометитьКакПрочтенныеMSOutlook(
	ПараметрыЗагрузки,
	СерверныеИдентификаторыСообщений) Экспорт
	
	Application = Новый COMОбъект("Outlook.Application");
	Для каждого СерверныйИдентификатор Из СерверныеИдентификаторыСообщений Цикл
		Item = Application.Session.GetItemFromID(СерверныйИдентификатор);
		Попытка
			Item.UnRead = 0;
		Исключение
			// Тут всегда возникает исключение, но действие выполняется правильно.
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Помечает сообщения как непрочтенные
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
// - СерверныеИдентификаторыСообщений (Массив)
//   - Элемент (Строка)
//
Функция ПометитьКакНепрочтенныеMSOutlook(
	ПараметрыЗагрузки,
	СерверныеИдентификаторыСообщений) Экспорт
	
	Application = Новый COMОбъект("Outlook.Application");
	Для каждого СерверныйИдентификатор Из СерверныеИдентификаторыСообщений Цикл
		Item = Application.Session.GetItemFromID(СерверныйИдентификатор);
		Попытка
			Item.UnRead = 1;
		Исключение
			// Тут всегда возникает исключение, но действие выполняется правильно.
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

Функция ПолучитьПолноеИмяВременногоФайла(ИмяФайла)
	
	Возврат ПолучитьИмяВременногоКаталога() + "\" + ИмяФайла;
	
КонецФункции

Функция ПолучитьИмяВременногоКаталога()
	
	#Если ВебКлиент Тогда
		Возврат "";
	#Иначе
		ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ИмяВременногоКаталога);
		Возврат ИмяВременногоКаталога;
	#КонецЕсли
	
КонецФункции

// Сохраняет вложения сообщения во временный каталог.
// Возвращает имя временного каталога. При ошибке вызывает исключение.
//
// Параметры:
// - Сообщение (Структура)
//
Функция ПоместитьВложенияВоВременныйКаталог(Сообщение) Экспорт
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоКаталога();
	Если ПустаяСтрока(ИмяВременногоКаталога) Тогда
		Возврат "";
	КонецЕсли;
		
	Для каждого Вложение Из Сообщение.Вложения Цикл
		Значение = ПолучитьИзВременногоХранилища(Вложение.Адрес);
		Если Значение = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'; en = 'Failed to get file. Perhaps it was deleted.'");
			Возврат "";
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = Значение;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'; en = 'Failed to get file. Perhaps it was deleted.'");
			Возврат "";
		КонецЕсли;
		
		ПолноеИмяВременногоФайла = ИмяВременногоКаталога + "\" + Вложение.ИмяФайла;
		Если ПустаяСтрока(ПолноеИмяВременногоФайла) Тогда
			Возврат "";
		КонецЕсли;
		
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	КонецЦикла;
	
	Возврат ИмяВременногоКаталога;
	
КонецФункции

// Сохраняет тело сообщение в файл "Содержание.txt" во временном каталоге.
// Возвращает полное имя файла.
//
// Параметры:
// - Сообщение (Структура)
//
Функция ПоместитьСодержаниеВоВременныйФайл(Сообщение) Экспорт
	
	ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла("Содержание.txt");
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяВременногоФайла, КодировкаТекста.UTF16);
	ЗаписьТекста.Записать(Сообщение.Текст);
	ЗаписьТекста.Закрыть();
	Возврат ПолноеИмяВременногоФайла;
	
КонецФункции


// Удаляет сообщения с сервера
//
// Параметры:
// - НастройкаЗагрузкиЭлектроннойПочты (Структура)
// - СерверныеИдентификаторыСообщений (Массив) Элемент (Строка)
// 
Функция УдалитьСообщения(НастройкаЗагрузкиЭлектроннойПочты, СерверныеИдентификаторыСообщений) Экспорт
	
	Профиль = НастройкаЗагрузкиЭлектроннойПочты.НастройкиПрофилейДляЗагрузки.Профиль.Профиль;
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта");
	Иначе
		ДанныеПрофиля = ЛегкаяПочтаКлиентСервер.ПолучитьПрофильДляЗагрузки(Профиль);
		ВидПочтовогоКлиента = ДанныеПрофиля.ВидПочтовогоКлиента;
	КонецЕсли;
	
	Если ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта") Тогда
		УчетнаяЗапись = НастройкаЗагрузкиЭлектроннойПочты.НастройкиПрофилейДляЗагрузки.Профиль.Профиль;
		Пароль = НастройкаЗагрузкиЭлектроннойПочты.НастройкиПрофилейДляЗагрузки.Профиль.Пароль;
		Если ПустаяСтрока(Пароль) Тогда
			Пароль = НастройкаЗагрузкиЭлектроннойПочты.ПарольУчетнойЗаписиПочты;
		КонецЕсли;
		
		Результат = ЛегкаяПочтаСервер.УдалитьСообщенияИнтернетПочта(
			УчетнаяЗапись,
			Пароль,
			СерверныеИдентификаторыСообщений);
		
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Нет возможности удалять сообщения на сервере с помощью клиента Почта.'; en = 'There is no possibility to delete messages on the server using MAPI.'"));
		Результат = Ложь;
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		Результат = ЛегкаяПочтаКлиент.УдалитьСообщенияMSOutlook(
			НастройкаЗагрузкиЭлектроннойПочты,
			СерверныеИдентификаторыСообщений);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помечает письма как прочтенные
//
Функция ПометитьКакПрочтенные(НастройкаЗагрузкиЭлектроннойПочты, СерверныеИдентификаторыСообщений) Экспорт
	
	Профиль = НастройкаЗагрузкиЭлектроннойПочты.НастройкиПрофилейДляЗагрузки.Профиль.Профиль;
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта");
	Иначе
		ДанныеПрофиля = ЛегкаяПочтаКлиентСервер.ПолучитьПрофильДляЗагрузки(Профиль);
		ВидПочтовогоКлиента = ДанныеПрофиля.ВидПочтовогоКлиента;
	КонецЕсли;
	
	Если ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Сервис недоступен.'; en = 'Service is unavailable.'"));
		Результат = Ложь;
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		Результат = ЛегкаяПочтаКлиент.ПометитьКакПрочтенныеПочта(
			НастройкаЗагрузкиЭлектроннойПочты,
			СерверныеИдентификаторыСообщений);
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		Результат = ЛегкаяПочтаКлиент.ПометитьКакПрочтенныеMSOutlook(
			НастройкаЗагрузкиЭлектроннойПочты,
			СерверныеИдентификаторыСообщений);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помечает письма как непрочтенные
//
Функция ПометитьКакНепрочтенные(НастройкаЗагрузкиЭлектроннойПочты, СерверныеИдентификаторыСообщений) Экспорт
	
	Профиль = НастройкаЗагрузкиЭлектроннойПочты.НастройкиПрофилейДляЗагрузки.Профиль.Профиль;
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта");
	Иначе
		ДанныеПрофиля = ЛегкаяПочтаКлиентСервер.ПолучитьПрофильДляЗагрузки(Профиль);
		ВидПочтовогоКлиента = ДанныеПрофиля.ВидПочтовогоКлиента;
	КонецЕсли;
	
	Если ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Сервис недоступен.'; en = 'Service is unavailable.'"));
		Результат = Ложь;
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		Результат = ЛегкаяПочтаКлиент.ПометитьКакНепрочтенныеПочта(
			НастройкаЗагрузкиЭлектроннойПочты,
			СерверныеИдентификаторыСообщений);
	ИначеЕсли ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		Результат = ЛегкаяПочтаКлиент.ПометитьКакНепрочтенныеMSOutlook(
			НастройкаЗагрузкиЭлектроннойПочты,
			СерверныеИдентификаторыСообщений);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Открывает форму редактирования профиля в зависимости от вида почтового клиента
//
// Параметры:
// - Профиль (Строка, СправочникСсылка.УчетныеЗаписиЭлектроннойПочты)
// - УникальныйИдентификатор (УникальныйИдентификатор)
//
Процедура РедактироватьПрофильОтправки(Профиль, УникальныйИдентификатор, ОписаниеОповещения) Экспорт
	
	Если Профиль.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		ОткрытьФорму(
			"Обработка.НастройкаПочты.Форма.ОтправкаПочта",
			Профиль,
			УникальныйИдентификатор,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли Профиль.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		ОткрытьФорму(
			"Обработка.НастройкаПочты.Форма.ОтправкаMSOutlook",
			Профиль,
			УникальныйИдентификатор,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли Профиль.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.TheBat") Тогда
		ОткрытьФорму(
			"Обработка.НастройкаПочты.Форма.ОтправкаTheBat",
			Профиль,
			УникальныйИдентификатор,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли Профиль.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MozillaThunderbird") Тогда	
		ОткрытьФорму(
			"Обработка.НастройкаПочты.Форма.ОтправкаMozillaThunderbird",
			Профиль,
			УникальныйИдентификатор,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования профиля в зависимости от вида почтового клиента
//
// Параметры:
// - Профиль (Строка, СправочникСсылка.УчетныеЗаписиЭлектроннойПочты)
// - УникальныйИдентификатор (УникальныйИдентификатор)
//
Процедура РедактироватьПрофильЗагрузки(Профиль, УникальныйИдентификатор, ОписаниеОповещения) Экспорт
	
	Если Профиль.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта") Тогда
		ОткрытьФорму(
			"Обработка.НастройкаПочты.Форма.ЗагрузкаПочта",
			Профиль,
			УникальныйИдентификатор,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли Профиль.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
			
		#Если НЕ ВебКлиент Тогда			
		ОткрытьФорму(
			"Обработка.НастройкаПочты.Форма.ЗагрузкаMSOutlook",
			Профиль,
			УникальныйИдентификатор,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		#Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В веб клиенте загрузка из Microsoft Outlook не поддерживается.'; en = 'Loading from Microsoft Outlook is not supported in Web client.'"));
		#КонецЕсли	
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указан вид почтового клиента.'; en = 'Email client type is not specified.'");
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции

// Возвращает признак того что профиль относится к внешнему почтовому клиенту
//
// Параметры:
//
// СтруктураПрофиля (Структура)
// - ВидПочтовогоКлиента (ПеречислениеСсылка.ВидыПочтовыхКлиентов)
//
Функция ЭтоПрофильВнешнегоПочтовогоКлиента(СтруктураПрофиля) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураПрофиля) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат (СтруктураПрофиля.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook")
		Или СтруктураПрофиля.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.TheBat")
		Или СтруктураПрофиля.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MozillaThunderbird"));
		
КонецФункции

// Возвращает признак того что профиль относится к внутреннему почтовому клиенту
//
// Параметры:
//
// СтруктураПрофиля (Структура)
// - ВидПочтовогоКлиента (ПеречислениеСсылка.ВидыПочтовыхКлиентов)
//
Функция ЭтоПрофильВнутреннегоПочтовогоКлиента(СтруктураПрофиля) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураПрофиля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураПрофиля.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта")
		Или СтруктураПрофиля.ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.Почта");

КонецФункции


