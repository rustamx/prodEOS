//Осуществляет поиск категории в дереве категорий
//Параметры:КоллекцияКатегорийОдногоУровня - список категорий одного уровня дерева
//			ИскомаяКатегория - категория, которую необходимо найти
//			Индекс = значение индекса найденной категории в дереве. Если категория не найдена, 
//						значение параметра не изменяется.
Процедура НайтиКатегориюВДеревеПоСсылке(КоллекцияКатегорийОдногоУровня, ИскомаяКатегория, Индекс) Экспорт
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Категория Из КоллекцияКатегорийОдногоУровня Цикл
		Если Категория.Ссылка = ИскомаяКатегория Тогда
			Индекс = Категория.ПолучитьИдентификатор();
		Иначе
			НайтиКатегориюВДеревеПоСсылке(Категория.ПолучитьЭлементы(), ИскомаяКатегория, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Выполняет поиск в дереве категорий по наименованию 
//Параметры:КоллекцияКатегорийОдногоУровня - список категорий одного уровня дерева
//			ИскомаяКатегория - категория, которую необходимо найти
//			Индекс = значение индекса найденной категории в дереве. Если категория не найдена, 
//						значение параметра не изменяется.
Процедура НайтиКатегориюВДеревеПоНаименованию(КоллекцияКатегорийОдногоУровня, ИскомаяКатегория, Индекс) Экспорт
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Категория Из КоллекцияКатегорийОдногоУровня Цикл
		Если Найти(НРег(Категория.Наименование), НРег(ИскомаяКатегория)) > 0 Тогда
			Индекс = Категория.ПолучитьИдентификатор();
		Иначе
			НайтиКатегориюВДеревеПоНаименованию(Категория.ПолучитьЭлементы(), ИскомаяКатегория, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Формирует заголовок для вкладки "Категории"
//Параметры:СписокКатегорий - список категорий
//Возвращает - Строку, которая устанавливается в качестве заголовка вкладки
Функция ПолучитьЗаголовокВкладкиКатегории(СписокКатегорий) Экспорт
	
	Если СписокКатегорий.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Категории'; en = 'Categories'")	
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Категории (%1)'; en = 'Categories (%1)'"),
					СписокКатегорий.Количество());
	
КонецФункции

//Устанавливает в дереве текущую строку
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево категорий
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево категорий
//			ТекущаяКатегория - категория, которую необходимо выделить в дереве 
Процедура УстановитьТекущуюКатегориюВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущаяКатегория) Экспорт
	
	Если ТекущаяКатегория <> Неопределено И
		НЕ ТекущаяКатегория.Пустая() Тогда
		Индекс = -1;
		РаботаСКатегориямиДанныхКлиентСервер.НайтиКатегориюВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущаяКатегория, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в дереве текущую строку
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево категорий
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево категорий
//			ТекущаяКатегория - категория, которую необходимо выделить в дереве
Процедура УстановитьТекущуюКатегориюВДеревеПоНаименованию(ДеревоЭлемент, ДеревоРеквизит, ТекущаяКатегория) Экспорт
	
	Индекс = -1;
	РаботаСКатегориямиДанныхКлиентСервер.НайтиКатегориюВДеревеПоНаименованию(ДеревоРеквизит.ПолучитьЭлементы(), ТекущаяКатегория, Индекс);
	Если Индекс > -1 Тогда
		ДеревоЭлемент.ТекущаяСтрока = Индекс;
	КонецЕсли;

КонецПроцедуры

//Отключает в динамическом списке использование параметров, связанных с категориями 
//Параметры:Список - динамический список с документами или файлами
//			МаксимальноеКоличествоПараметров - максимальное количество категорий, которые могут быть одновременно выбраны 
Процедура ОтключитьКатегорииКакПараметры(Список, МаксимальноеКоличествоПараметров) Экспорт
	
	Для НомерПараметра = 1 По МаксимальноеКоличествоПараметров Цикл			
		ИмяПараметраИ = "КатегорияИ" + Строка(НомерПараметра);
		ИмяПараметраИИ = "КатегорияИИ" + Строка(НомерПараметра);
		ПараметрИ = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметраИ));
		ПараметрИИ = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметраИИ));
		Если ПараметрИ <> Неопределено И ПараметрИ.Использование Тогда
			ПараметрИ.Использование = Ложь;
		КонецЕсли;
		Если ПараметрИИ <> Неопределено И ПараметрИИ.Использование Тогда
			ПараметрИИ.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Параметры = Новый Массив;
	Параметры.Добавить("НаличиеКатегорий");
	Параметры.Добавить("КатегорияИЛИ");
	Параметры.Добавить("КатегорияИИЛИ");
	
	Для Каждого ИмяПараметра Из Параметры Цикл
		Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра)); 
		Если Параметр <> Неопределено Тогда
			Параметр.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//Формирует список выбранных элементов дерева категорий
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево категорий
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево категорий
//			СписокВыбранныхКатегорий - список, который содержит раскрытые элементы дерева категорий
Процедура ПолучитьМассивВыбранныхКатегорий(МассивСтрокОдногоУровня, СписокВыбранныхКатегорий) Экспорт
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		Если СтрокаОдногоУровня.Выбрана <> Неопределено
			И СтрокаОдногоУровня.Выбрана Тогда
			СписокВыбранныхКатегорий.Добавить(СтрокаОдногоУровня.Ссылка);
		КонецЕсли;
		ПолучитьМассивВыбранныхКатегорий(СтрокаОдногоУровня.ПолучитьЭлементы(), СписокВыбранныхКатегорий);
	КонецЦикла;
	
КонецПроцедуры

//Выполняет копирование данных из одного списка в другой
Процедура СкопироватьСписок(Источник, Приемник) Экспорт
	
	Приемник.Очистить();
	Для Каждого ЭлементИсточника Из Источник Цикл
		Приемник.Добавить(ЭлементИсточника.Значение);	
	КонецЦикла;
	
КонецПроцедуры

