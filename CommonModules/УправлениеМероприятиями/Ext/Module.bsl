////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с мероприятиями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает актуальные состояния мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояния которого будут получены.
//
// Возвращаемое значение:
//  Массив - Массив состояний мероприятия.
//
Функция ПолучитьВсеСостоянияМероприятия(Мероприятие) Экспорт
	
	МассивСостояний = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат МассивСостояний;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятий.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
	|ГДЕ
	|	СостоянияМероприятий.Мероприятие = &Мероприятие";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивСостояний;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Состояние");
	
КонецФункции

// Получает актуальное состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет получено.
//  Тип - Строка - Тип состояния мероприятия, которое необходимо получить.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияМероприятий - Состояние мероприятия указанного типа.
//
Функция ПолучитьСостояниеМероприятия(Мероприятие, Тип) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Перечисления.СостоянияМероприятий.ПустаяСсылка();
	КонецЕсли;	
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	МассивСостояний = ПолучитьВсеСостоянияМероприятия(Мероприятие);
	
	Для Каждого Состояние Из МассивСостояний Цикл
		Если СоответствиеСостояний.Получить(Состояние) = Тип Тогда 
			Возврат Состояние;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Перечисления.СостоянияМероприятий.ПустаяСсылка();
	
КонецФункции

// Получает актуальное состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет получено.
//  Тип - Строка - Тип состояния мероприятия, которое необходимо получить.
//
// Возвращаемое значение:
//  Структура - Состояние мероприятия указанного типа.
//   * Состояние - ПеречислениеСсылка.СостоянияМероприятий - Значение состояния мероприятия.
//   * ДатаУстановки - Дата - Дата установки состояния мероприятия.
//   * Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи, - Кем было установлено состояние.
//
Функция ПолучитьСтруктуруСостоянияМероприятия(Мероприятие, Тип) Экспорт
	
	СтруктураСостояния = Новый Структура;
	СтруктураСостояния.Вставить("Состояние", Перечисления.СостоянияМероприятий.ПустаяСсылка());
	СтруктураСостояния.Вставить("ДатаУстановки", '00010101');
	СтруктураСостояния.Вставить("Установил", Неопределено);
	СтруктураСостояния.Вставить("Тип", Тип);
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат СтруктураСостояния;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятий.Состояние КАК Состояние,
	|	СостоянияМероприятий.Установил КАК Установил,
	|	МАКСИМУМ(ИсторияСостоянийМероприятий.Период) КАК ДатаУстановки
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийМероприятий КАК ИсторияСостоянийМероприятий
	|		ПО СостоянияМероприятий.Мероприятие = ИсторияСостоянийМероприятий.Мероприятие
	|			И СостоянияМероприятий.Состояние = ИсторияСостоянийМероприятий.Состояние
	|			И СостоянияМероприятий.Установил = ИсторияСостоянийМероприятий.Установил
	|ГДЕ
	|	СостоянияМероприятий.Мероприятие = &Мероприятие
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияМероприятий.Состояние,
	|	СостоянияМероприятий.Установил";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаСостояний Цикл
		Если СоответствиеСостояний.Получить(Строка.Состояние) = Тип Тогда 
			ЗаполнитьЗначенияСвойств(СтруктураСостояния, Строка);
			Возврат СтруктураСостояния;
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСостояния;
	
КонецФункции

// Получает кто установил состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет получено.
//  Состояния - Массив - Состояния, установка которых интересует.
//
// Возвращаемое значение:
//  Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи - Кто установил состояние.
//
Функция ПолучитьУстановилСостояниеМероприятия(Мероприятие, Состояния) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСостоянийМероприятий.Установил КАК Установил
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийМероприятий КАК ИсторияСостоянийМероприятий
		|ГДЕ
		|	ИсторияСостоянийМероприятий.Мероприятие = &Мероприятие
		|	И ИсторияСостоянийМероприятий.Состояние В(&Состояния)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияСостоянийМероприятий.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Установил;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет установлено.
//  Период - Дата - Момент времени установки состояния.
//  Состояние - ПеречислениеСсылка.СостоянияМероприятий - Состояние, которое будет установлено.
//  Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи - Объект, который устанавливает состояние.
//
Процедура ЗаписатьСостояниеМероприятия(Мероприятие, Период, Состояние, Установил) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// история
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийМероприятий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Записать();
	
	// состояние
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	ТекущееСостояние = ПолучитьСостояниеМероприятия(Мероприятие, СоответствиеСостояний.Получить(Состояние));
	
	МенеджерЗаписи = РегистрыСведений.СостоянияМероприятий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = ТекущееСостояние;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Очищает состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет очищено.
//  НачальноеСостояние - ПеречислениеСсылка.СостоянияМероприятий - Состояние, которое будет очищено.
//
Процедура ОчиститьСостояниеМероприятия(Мероприятие, НачальноеСостояние) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияМероприятий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = НачальноеСостояние;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Удаляет все состояния мероприятия, установленные объектом Установил.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого удаляются.
//  Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи - Объект, который устанавливал состояния.
//
Процедура УдалитьСостоянияМероприятия(Мероприятие, Установил) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// история
	Набор = РегистрыСведений.ИсторияСостоянийМероприятий.СоздатьНаборЗаписей();
	Набор.Отбор.Мероприятие.Установить(Мероприятие);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	// состояния
	Набор = РегистрыСведений.СостоянияМероприятий.СоздатьНаборЗаписей();
	Набор.Отбор.Мероприятие.Установить(Мероприятие);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
КонецПроцедуры	

// Возвращает ключ актуального состояния документа.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого будет получен ключ состояния.
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи - Ключ записи состояния мероприятия.
//
Функция ПолучитьКлючСостоянияМероприятия(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятийСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий.СрезПоследних(, Мероприятие = &Мероприятие) КАК СостоянияМероприятийСрезПоследних";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат РегистрыСведений.СостоянияМероприятий.СоздатьКлючЗаписи( Новый Структура("Период, Мероприятие", Выборка.Период, Мероприятие) );
	
КонецФункции

// Возвращает Истина, если переданное значение является мероприятием, с учетом
// функциональной опции ИспользоватьУправлениеМероприятиями.
//
// Параметры:
//  Объект - СправочникСсылка.Мероприятия - Проверяемый объект.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлен объект, 
//                если он является мероприятием.
//
// Возвращаемое значение:
//  Булево - Признак того является ли объект мероприятием.
//
Функция ЭтоМероприятие(Объект, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Мероприятия") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Мероприятие = Объект;
	Возврат Истина;
	
КонецФункции	

// Возвращает Истина, если переданное значение является мероприятием (протоколом, программой).
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                материалом которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоМатериалМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Возврат ЭтоПротоколМероприятия(Документ, Мероприятие) 
		Или ЭтоПрограммаМероприятия(Документ, Мероприятие);
	
КонецФункции	

// Возвращает Истина, если переданное значение является протоколом мероприятия.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                протоколом которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоПротоколМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.МатериалПротокол = &Протокол
	|	И (НЕ Мероприятия.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Протокол", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Мероприятие = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если переданное значение является программой мероприятия.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                программой которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоПрограммаМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.МатериалПрограмма = &Программа
	|	И (НЕ Мероприятия.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Программа", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Мероприятие = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Возвращает следующее мероприятие.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого необходимо получить
//                следующее мероприятие.состояние которого будет получено.
//
// Возвращаемое значение:
//  СправочникСсылка.Мероприятия - Следующее мероприятие.
//
Функция ПолучитьСледующееМероприятие(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда 
		Возврат Справочники.Мероприятия.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.ПредыдущееМероприятие = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Мероприятия.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

// Возвращает участников мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого необходимо получить участников.
//  ИсключитьКонтрагентов - Булево - Признак необходимости исключения контрагентов из списка участников.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Участники мероприятия.
//   * Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, участник которого указан в строке.
//   * Исполнитель - СправочникСсылка.Контрагенты, СправочникСсылка.ЛичныеАдресаты,
//                   СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи,
//                   СправочникСсылка.КонтактныеЛица - Участник мероприятия.
//   * ЯвкаОбязательна - Булево - Признак обязательной явки участника.
//   * Отсутствовал - Булево - Признак того что участник отсутствовал.
//   * СостояниеПриглашения - ПеречислениеСсылка.СостоянияПриглашения - Состояние приглашения участника.
//   * Порядок - Число - Порядок сортировки участников.
//
Функция ПолучитьУчастниковМероприятия(Мероприятие, ИсключитьКонтрагентов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
	НаборЗаписей.Прочитать();
	
	Записи = НаборЗаписей.Выгрузить();
	
	Если ИсключитьКонтрагентов Тогда 
		КоличествоЗаписей = Записи.Количество();
		Для Инд = 1 По КоличествоЗаписей Цикл
			Запись = Записи[КоличествоЗаписей-Инд];
			Если ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
					Или ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
				Продолжить;
			КонецЕсли;
			Записи.Удалить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Записи.Сортировать("Порядок");
	
	Возврат Записи;
	
КонецФункции	

// Устанавливает состояние мероприятия из бизнес-процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс, из которого устанавливается состояние мероприятия.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута, из которой устанавливается
//                  состояние мероприятия.Текстовое описание параметра процедуры (функции).
//
Процедура УстановитьСостояниеМероприятияИзБизнесПроцесса(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат;
	КонецЕсли;	
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БизнесПроцесс,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Состояние = Неопределено;
		Мероприятие = Неопределено;
		ПунктПротокола = Неопределено;
		СостояниеПунктаПротокола = Неопределено;
		
		Если ЭтоМероприятие(Предмет) Тогда 
			Мероприятие = Предмет;
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПровестиМероприятие" Тогда
						Состояние = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПодготовитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколГотовиться;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПровестиМероприятие" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПодготовитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол" Тогда 
						Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПротоколСогласован;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол" Тогда 
						Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
						КонецЕсли;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму" Тогда 
						Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПрограммаНеУтверждена;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПрограммаУтверждена;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Старт Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ОзнакомитьСМатериалами" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Завершение Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ОзнакомитьСМатериалами" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились;
					КонецЕсли;	
						
				КонецЕсли;
				
			КонецЕсли;	
			
			
		ИначеЕсли ЭтоПротоколМероприятия(Предмет, Мероприятие) Тогда 
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда 	
					Состояние = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
					Иначе	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколСогласован;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
					Иначе	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоПунктПротоколаМероприятия(Предмет, ПунктПротокола) Тогда
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПунктПротокола" Тогда
						СостояниеПунктаПротокола = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении;
					КонецЕсли;
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПунктПротокола" Тогда
						СостояниеПунктаПротокола = Перечисления.СостоянияПротоколовМероприятий.Исполнен;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Состояние <> Неопределено Или СостояниеПунктаПротокола <> Неопределено Тогда 
			
			БизнесПроцессСсылка = УправлениеДоступомДокументооборот.ПолучитьСсылкуОбъекта(БизнесПроцесс);
			
			Если Состояние <> Неопределено Тогда
				ЗаписатьСостояниеМероприятия(
					Мероприятие,
					ТекущаяДата(),
					Состояние,
					БизнесПроцессСсылка);
			КонецЕсли;
			
			Если СостояниеПунктаПротокола <> Неопределено Тогда
				ЗаписатьСостояниеПунктаПротоколаМероприятияИзБизнесПроцесса(
					ПунктПротокола,
					ТекущаяДата(),
					СостояниеПунктаПротокола,
					БизнесПроцессСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет бизнес-процесс по мероприятию
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Заполняемый бизнес-процесс.
//  ДанныеЗаполнения - Структура, СправочникСсылка.ВнутренниеДокументы - Данные, по которым
//                     будет заполнен бизнес-процесс.
//
Процедура ЗаполнитьБизнесПроцессПоМероприятию(БизнесПроцесс, ДанныеЗаполнения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат;
	КонецЕсли;
	
	Мероприятие = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОперацияМероприятия") Тогда 
		
		Мероприятие = ДанныеЗаполнения.Мероприятие;
		ОперацияМероприятия = ДанныеЗаполнения.ОперацияМероприятия;
		
		Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);

			БизнесПроцесс.ЭтапОбработкиПредмета = ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "ЗапроситьМатериалы" Тогда 
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Предоставить материалы по мероприятию ""%1""'; en = 'Provide materials for the event ""%1""'"), Строка(Мероприятие));
				Исполнители = Мероприятие.Программа.ВыгрузитьКолонку("Исполнитель");
				
				Для Каждого Исполнитель Из Исполнители Цикл
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.Исполнитель = Исполнитель;
					НоваяСтрока.СрокИсполнения = Мероприятие.ДатаНачала;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
						Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЦикла;
				
				Если БизнесПроцесс.Исполнители.Количество() = 0 Тогда
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.СрокИсполнения = Мероприятие.ДатаНачала;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
						Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ИсполнитьПротокол" Тогда 	
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Исполнить протокол мероприятия ""%1""'; en = 'Perform minutes of the meeting ""%1""'"), Строка(Мероприятие));
				Протокол = ПолучитьПротоколМероприятия(Мероприятие);
				Для Каждого Строка Из Протокол Цикл
					
					Если Не ЗначениеЗаполнено(Строка.Ответственный) Тогда 
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.Исполнитель = Строка.Ответственный;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполненияПроцесса;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
						Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
					НоваяСтрока.Описание = Строка.Решили;
					
				КонецЦикла;
				
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ИсполнитьПунктПротокола" Тогда
				
				ПунктПротокола = ДанныеЗаполнения.ПунктПротокола;
				ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, ПунктПротокола.Ссылка);
				
				ПроектМероприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Мероприятие, "Проект");
				БизнесПроцесс.Проект = ПроектМероприятия;
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru = 'Исполнить п. %1 протокола мероприятия ""%2""'; en = 'Perform minute item № %1 of the meeting ""%2""'"),
					ПунктПротокола.НомерПунктаПротокола,
					Мероприятие);
				БизнесПроцесс.Описание = ПунктПротокола.Решили;
				ЗаполнитьЗначенияСвойств(БизнесПроцесс, ПунктПротокола,
					"ВариантИсполнения, 
					|Контролер,
					|Проверяющий,
					|ВариантУстановкиСрокаОбработкиРезультатов,
					|СрокОбработкиРезультатов,
					|СрокОбработкиРезультатовДни,
					|СрокОбработкиРезультатовЧасы,
					|СрокОбработкиРезультатовМинуты,
					|СрокИсполненияПроцесса, КоличествоИтераций");
				
				Для Каждого Исполнитель Из ПунктПротокола.Исполнители Цикл
					НовыйИсполнитель = БизнесПроцесс.Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИсполнитель, Исполнитель);
				КонецЦикла;
				
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ПровестиМероприятие" Тогда 
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Провести мероприятие ""%1""'; en = 'Hold event ""%1""'"), Строка(Мероприятие));
				НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = Мероприятие.Председатель;
				НоваяСтрока.СрокИсполнения = Мероприятие.ДатаОкончания;
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				БизнесПроцесс.Проверяющий = Неопределено;
				
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ПодготовитьПротокол" Тогда 	
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подготовить протокол мероприятия ""%1""'; en = 'Prepare minutes of the meeting ""%1""'"), Строка(Мероприятие));
				НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = Мероприятие.Секретарь;
				
			КонецЕсли;	
			
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			
			БизнесПроцесс.ЭтапОбработкиПредмета = ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "ОзнакомитьСМатериалами" Тогда 
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ознакомиться с материалами по мероприятию ""%1""'; en = 'Examine the materials of the event ""%1""'"), Строка(Мероприятие));
				
				Участники = ПолучитьУчастниковМероприятия(Мероприятие, Истина);
				Для Каждого Строка Из Участники Цикл
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.Исполнитель = Строка.Исполнитель;
					НоваяСтрока.СрокИсполнения = Мероприятие.ДатаНачала;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
						Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЦикла;
				
				Если БизнесПроцесс.Исполнители.Количество() = 0 Тогда
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.СрокИсполнения = Мероприятие.ДатаНачала;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
						Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 

			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, ДанныеЗаполнения.Мероприятие);
			
			БизнесПроцесс.ЭтапОбработкиПредмета = ДанныеЗаполнения.ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "СогласоватьПротокол" Тогда 	
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Согласовать протокол мероприятия ""%1""'; en = 'Approve minutes of the meeting ""%1""'"), Строка(Мероприятие));
				
				Участники = ПолучитьУчастниковМероприятия(Мероприятие, Истина);
				БизнесПроцесс.Исполнители.Загрузить(Участники);
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, ДанныеЗаполнения.Мероприятие);
			
			БизнесПроцесс.ЭтапОбработкиПредмета = ДанныеЗаполнения.ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "УтвердитьПротокол" Тогда 
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Утвердить протокол мероприятия ""%1""'; en = 'Confirm minutes of the meeting ""%1""'"), Строка(Мероприятие));
				БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "УтвердитьПрограмму" Тогда 	
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Утвердить программу мероприятия ""%1""'; en = 'Confirm agenda of the event ""%1""'"), Строка(Мероприятие));
				БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			КонецЕсли;	
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПротоколМероприятия(ДанныеЗаполнения, Мероприятие) Тогда 
		
		Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Согласовать протокол мероприятия ""%1""'; en = 'Approve minutes of the meeting ""%1""'"), Строка(Мероприятие));
			Участники = ПолучитьУчастниковМероприятия(Мероприятие, Истина);
			БизнесПроцесс.Исполнители.Загрузить(Участники);
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Утвердить протокол мероприятия ""%1""'; en = 'Confirm minutes of the meeting ""%1""'"), Строка(Мероприятие));
			БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исполнить протокол мероприятия ""%1""'; en = 'Perform minutes of the meeting ""%1""'"), Строка(Мероприятие));
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПрограммаМероприятия(ДанныеЗаполнения, Мероприятие) Тогда 
		
		Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Утвердить программу мероприятия ""%1""'; en = 'Confirm agenda of the event ""%1""'"), Строка(Мероприятие));
			БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Меняет папку для массива мероприятий на новую.
//
// Параметры:
//  МассивМероприятий - Массив - Мероприятия, у которых необходимо изменить папку.
//  НоваяПапка - СправочникСсылка.ПапкиМероприятий - Новая папка мероприятий.
//
// Возвращаемое значение:
//  Булево - Успешное изменение папки мероприятий.
//
Функция ИзменитьПапкуМероприятий(МассивМероприятий, НоваяПапка) Экспорт
	
	// Не указана новая папка
	Если Не ЗначениеЗаполнено(НоваяПапка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Нет элементов в массиве
	Если МассивМероприятий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Папка не изменилась
	Если МассивМероприятий[0].Папка = НоваяПапка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка прав мероприятий
	Для Каждого МероприятиеСсылка Из МассивМероприятий Цикл
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(МероприятиеСсылка).Изменение Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права на изменение мероприятия ""%1"".'; en = 'Not enough permissions to change event ""%1"".'"),
				Строка(МероприятиеСсылка));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого МероприятиеСсылка Из МассивМероприятий Цикл
			ЗаблокироватьДанныеДляРедактирования(МероприятиеСсылка);
			МероприятиеОбъект = МероприятиеСсылка.ПолучитьОбъект();
			МероприятиеОбъект.Папка = НоваяПапка;
			МероприятиеОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// По части наименования формирует список для выбора участника мероприятия.
//
// Параметры:
//  Текст - часть наименования, по которому выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораУчастника(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	Пользователи.Ссылка КАК Ссылка,
	|	СведенияОПользователяхДокументооборот.Подразделение КАК Пояснение1,
	|	СведенияОПользователяхДокументооборот.Должность КАК Пояснение2
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
	|		ПО Пользователи.Ссылка = СведенияОПользователяхДокументооборот.Пользователь
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &Текст
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ПолныеРоли.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ПолныеРоли КАК ПолныеРоли
	|ГДЕ
	|	ПолныеРоли.Владелец.Наименование ПОДОБНО &Текст
	|	И ПолныеРоли.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	Контрагенты.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &Текст
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Владелец,
	|	NULL
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Наименование ПОДОБНО &Текст
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ЛичныеАдресаты.Ссылка КАК ЛичныеАдресатыСсылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
	|ГДЕ
	|	ЛичныеАдресаты.Наименование ПОДОБНО &Текст
	|	И ЛичныеАдресаты.Пользователь = &Пользователь
	|	И ЛичныеАдресаты.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Пояснение1)
			И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
			ТекстПояснения = СтрШаблон(" (%1, %2)",
				Выборка.Пояснение1,
				Выборка.Пояснение2);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
			ТекстПояснения = СтрШаблон(" (%1)",
				Выборка.Пояснение1);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
			ТекстПояснения = СтрШаблон(" (%1)",
				Выборка.Пояснение2);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
			Строка(Выборка.Ссылка), 
			Новый ФорматированнаяСтрока(ТекстПояснения,, WebЦвета.Серый));
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// По части наименования формирует список для выбора места проведения.
//
// Параметры:
//  Параметры - Параметры получения данных.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты.
//
Функция СформироватьДанныеВыбораМестаПроведения(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Строка") ТОгда
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Отбор", Неопределено);
		ПараметрыВыбора.Вставить("СтрокаПоиска", Параметры);
		ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", Неопределено);
		ПараметрыВыбора.Вставить("СпособПоискаСтроки", Неопределено);
		ПараметрыВыбора.Вставить("ПолнотекстовыйПоиск", Неопределено);
	Иначе
		ПараметрыВыбора = Параметры
	КонецЕсли;
	
	ДанныеВыбора = Справочники.ТерриторииИПомещения.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает имя элемента состояния мероприятия по состоянию мероприятия.
//
// Параметры:
//  Состояние - Перечисления.СостоянияМероприятий - Состояние мероприятия, тип которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - Имя элемента состояния мероприятия.
//
Функция ПолучитьИмяЭлементаСостояния(Состояние) Экспорт
	
	ТипСостояния = ПолучитьТипСостояния(Состояние);
	СоответствиеИменТиповСостояний = ПолучитьСоответствиеИменТиповСостояний();
	ИмяЭлемента = СоответствиеИменТиповСостояний.Получить(ТипСостояния);
	
	Возврат ИмяЭлемента;
	
КонецФункции

// Возвращает мероприятия пользователя за определенный промежуток времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получать мероприятия.
//  ДатаОкончания - Дата - По какую дату следует получать мероприятия.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, мероприятия которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица мероприятий пользователя.
//
Функция ПолучитьМероприятияПользователя(ДатаНачала, ДатаОкончания, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникМероприятия.Ссылка,
		|	СправочникМероприятия.ДатаНачала,
		|	СправочникМероприятия.ДатаОкончания,
		|	СправочникМероприятия.Представление
		|ИЗ
		|	Справочник.Мероприятия КАК СправочникМероприятия
		|ГДЕ
		|	СправочникМероприятия.ПометкаУдаления = ЛОЖЬ
		|	И 1 В
		|			(ВЫБРАТЬ
		|				1
		|			ИЗ
		|				РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|			ГДЕ
		|				СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|				И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|	И (&Участник В
		|				(ВЫБРАТЬ
		|					УчастникиМероприятия.Исполнитель
		|				ИЗ
		|					РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|				ГДЕ
		|					УчастникиМероприятия.Мероприятие = СправочникМероприятия.Ссылка)
		|			ИЛИ &Участник = СправочникМероприятия.Организатор
		|			ИЛИ &Участник = СправочникМероприятия.Председатель
		|			ИЛИ &Участник = СправочникМероприятия.Секретарь)
		|	И СправочникМероприятия.ДатаНачала < &ДатаОкончания
		|	И СправочникМероприятия.ДатаОкончания > &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Участник", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает персональную настройку мероприятий текущего пользователя по ключу.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ЯвкаОбязательнаПоУмолчанию" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиМероприятий",
			"ЯвкаОбязательнаПоУмолчанию",
			Ложь);
		
	ИначеЕсли Настройка = "ВопросУказатьПроверяющегоБольшеНеСпрашивать" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиМероприятий",
			"ВопросУказатьПроверяющегоБольшеНеСпрашивать",
			Ложь);
		
	ИначеЕсли Настройка = "ВопросУказатьПроверяющегоВариантОтвета" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиМероприятий",
			"ВопросУказатьПроверяющегоВариантОтвета",
			Истина);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка мероприятий: ""%1""'; en = 'Incorrect event settings: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку мероприятий текущего пользователя.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ЯвкаОбязательнаПоУмолчанию" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки мероприятий: ""%1""'; en = 'Incorrect event settings value: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиМероприятий",
			"ЯвкаОбязательнаПоУмолчанию",
			Значение);
		
	ИначеЕсли Настройка = "ВопросУказатьПроверяющегоБольшеНеСпрашивать" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки мероприятий: ""%1""'; en = 'Incorrect event settings value: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиМероприятий",
			"ВопросУказатьПроверяющегоБольшеНеСпрашивать",
			Значение);
		
	ИначеЕсли Настройка = "ВопросУказатьПроверяющегоВариантОтвета" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки мероприятий: ""%1""'; en = 'Incorrect event settings value: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиМероприятий",
			"ВопросУказатьПроверяющегоВариантОтвета",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка мероприятий: ""%1""'; en = 'Incorrect event settings: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет чтение данных протокола мероприятия из пунктов протокола.
//
// Параметры:
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
Процедура ВывестиПротоколМероприятия(Протокол) Экспорт
	
	ПунктыПротокола = Протокол.Выгрузить(, "ПунктПротокола").ВыгрузитьКолонку("ПунктПротокола");
	
	// Чтение данных протокола.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПротоколыМероприятий.Ссылка,
		|	ПротоколыМероприятий.Выступили,
		|	ПротоколыМероприятий.Ответственный,
		|	ПротоколыМероприятий.Решили,
		|	ПротоколыМероприятий.Слушали,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса КАК СрокИсполнения,
		|	ПротоколыМероприятий.СостояниеИсполнения,
		|	ПротоколыМероприятий.Исполнение,
		|	ПротоколыМероприятий.Исполнители.(
		|		Исполнитель
		|	)
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|ГДЕ
		|	ПротоколыМероприятий.Ссылка В(&ПунктыПротокола)";

	Запрос.УстановитьПараметр("ПунктыПротокола", ПунктыПротокола);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("ПунктПротокола", Выборка.Ссылка);
		СтрокиПунктаПротокола = Протокол.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиПунктаПротокола.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПунктаПротокола = СтрокиПунктаПротокола[0];
		ЗаполнитьЗначенияСвойств(СтрокаПунктаПротокола, Выборка, , "Исполнители");
		
		ВыборкаИсполнители = Выборка.Исполнители.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			НоваяСтрокаИсполнитель = СтрокаПунктаПротокола.Исполнители.Добавить();
			НоваяСтрокаИсполнитель.Исполнитель = ВыборкаИсполнители.Исполнитель;
		КонецЦикла;
		
	КонецЦикла;
	
	// Расчет номеров пунктов протокола мероприятия.
	УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(Протокол);
	
КонецПроцедуры

// Заполнить список выбора номера пункта программы.
//
// Параметры:
//  СписокВыбора - СписокЗначений - Список выбора.
//  Программа - ДанныеФормыКоллекция - Программа.
//
Процедура ЗаполнитьСписокВыбораНомераПунктаПрограммы(СписокВыбора, Программа) Экспорт
	
	СписокВыбора.Очистить();
	Для Каждого Строка Из Программа Цикл
		
		МаксимальнаяДлинаТекста = 70;
		ПредставлениеСодержания = Строка.Содержание;
		Если СтрДлина(ПредставлениеСодержания) > МаксимальнаяДлинаТекста Тогда
			ПредставлениеСодержания = Лев(ПредставлениеСодержания, МаксимальнаяДлинаТекста - 3) + "...";
		КонецЕсли;
		
		СписокВыбора.Добавить(
			Строка.НомерПункта,
			"N " + Строка(Строка.НомерПункта) + " " + ПредставлениеСодержания);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет протокол мероприятия на основании программы.
// Если протокол уже заполнен, то он будет очищен.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротокол(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		// Очистка протокола.
		МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
		МероприятиеОбъект.Заблокировать();
		МероприятиеОбъект.Протокол.Очистить();
		МероприятиеОбъект.Записать();
		МероприятиеОбъект.Разблокировать();
		
		// Заполнение протокола.
		ДанныеЗаполнения = Новый Структура("Владелец", Мероприятие);
		Для Каждого Строка Из МероприятиеОбъект.Программа Цикл
			
			Если Не Строка.ТребуетПринятияРешения Тогда 
				Продолжить;
			КонецЕсли;
			
			ПунктПротоколаОбъект = Справочники.ПротоколыМероприятий.СоздатьЭлемент();
			
			ПунктПротоколаОбъект.Заполнить(ДанныеЗаполнения);
			ПунктПротоколаОбъект.НомерПунктаПрограммы = Строка.НомерПункта;
			ПунктПротоколаОбъект.Слушали = УправлениеМероприятиямиКлиентСервер.СформироватьТекстСлушали(Строка);
			
			ПунктПротоколаОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет протокол мероприятия на основании протокола предыдущего мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротоколНаОснованииПредыдущего(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		// Очистка программы и протокола.
		МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
		МероприятиеОбъект.Заблокировать();
		МероприятиеОбъект.Протокол.Очистить();
		МероприятиеОбъект.Программа.Очистить();
		
		// Заполнение программы.
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МероприятиеОбъект.ПредыдущееМероприятие,
			"Программа, Протокол");
		Программа = Результат.Программа.Выгрузить();
		Для Каждого Строка Из Программа Цикл
			НоваяСтрока = МероприятиеОбъект.Программа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "ВремяФакт");
		КонецЦикла;
		УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(МероприятиеОбъект);
		МероприятиеОбъект.Записать();
		МероприятиеОбъект.Разблокировать();
		
		// Заполнение протокола.
		Протокол = Результат.Протокол.Выгрузить();
		ДанныеЗаполнения = Новый Структура("Владелец", Мероприятие);
		Для Каждого Строка Из Протокол Цикл
			ПунктПротоколаОбъект = Строка.ПунктПротокола.Скопировать();
			ПунктПротоколаОбъект.Владелец = Неопределено;
			ПунктПротоколаОбъект.Заполнить(ДанныеЗаполнения);
			ПунктПротоколаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Направляет протокол мероприятия на исполнение.
//
// Параметры:
//  ПараметрыИсполнения - Структура - Параметры исполнения протокола.
//
Процедура НаправитьПротоколМероприятияНаИсполнение(ПараметрыИсполнения) Экспорт
	
	ПраваПоОбъекту =
		ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ПараметрыИсполнения.Мероприятие);
	Если Не ПраваПоОбъекту.Изменение Тогда
		ТекстИсключения =
			НСтр("ru = 'Недостаточно прав доступа для направления протокола мероприятия на исполнение.'; en = 'Insufficient permissions to send minutes item for performance.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Если необходимо запустить исполнение по всем пунктам,
		// то прерываем исполнение тех пунктов, которые уже находятся на исполнении.
		Если ПараметрыИсполнения.ПоВсемПунктам Тогда
			ПрерватьИсполнениеПротокола(ПараметрыИсполнения.Мероприятие,
				НСтр("ru = 'Операция ""Исполнить протокол..."". Направление протокола мероприятия на исполнение повторно.'; en = 'Operation ""Perform meeting minutes..."". Sending meeting minutes for performance again.'"));
		КонецЕсли;
		
		ПротоколМероприятия = ПолучитьПротоколМероприятия(ПараметрыИсполнения.Мероприятие);
		Для Каждого ПунктПротокола Из ПротоколМероприятия Цикл
			СформироватьИсполнение(ПунктПротокола, ПротоколМероприятия);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет состояние исполнения протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятие - Мероприятие.
//  ПараметрыИсполнения - Структура - Параметры исполнения протокола.
//
// Возвращаемое значение:
//  Строка - Состояние исполнения протокола.
//
Функция ОпределитьСостояниеИсполненияПротокола(Мероприятие, ПараметрыИсполнения) Экспорт
	
	Протокол = ПолучитьПротоколМероприятия(Мероприятие);
	УправлениеМероприятиямиКлиентСервер.ОпределитьСостояниеИсполненияПротокола(Протокол, ПараметрыИсполнения);
	
КонецФункции

// Останавливает исполнение по всем пунктам протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ОстановитьИсполнениеПротокола(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПротоколМероприятия = ПолучитьПротоколМероприятия(Мероприятие);
		Для Каждого ПунктПротокола Из ПротоколМероприятия Цикл
			
			Если ПунктПротокола.СостояниеИсполнения <> Перечисления.СостоянияПротоколовМероприятий.НаИсполнении Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПунктПротокола.Исполнение) Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыИсполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПротокола.Исполнение, "Завершен, Состояние");
			Если РеквизитыИсполнения.Завершен Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыИсполнения.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
				Продолжить;
			КонецЕсли;
			
			БизнесПроцессыИЗадачиВызовСервера.ОстановитьБизнесПроцесс(ПунктПротокола.Исполнение);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Продолжает исполнение по всем пунктам протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ПродолжитьИсполнениеПротокола(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПротоколМероприятия = ПолучитьПротоколМероприятия(Мероприятие);
		Для Каждого ПунктПротокола Из ПротоколМероприятия Цикл
			
			Если ПунктПротокола.СостояниеИсполнения <> Перечисления.СостоянияПротоколовМероприятий.НаИсполнении Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПунктПротокола.Исполнение) Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыИсполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПротокола.Исполнение, "Завершен, Состояние");
			Если РеквизитыИсполнения.Завершен Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыИсполнения.Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
				Продолжить;
			КонецЕсли;
			
			БизнесПроцессыИЗадачиВызовСервера.СделатьАктивнымБизнесПроцесс(ПунктПротокола.Исполнение);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Прерывает исполнение по всем пунктам протокола мероприятия.
//
// Параметры:
//  Мероприятие			 - СправочникСсылка.Мероприятия	 - Мероприятие.
//  ПричинаПрерывания	 - Строка						 - Описание причины прерывания.
//
Процедура ПрерватьИсполнениеПротокола(Мероприятие, ПричинаПрерывания) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ПротоколМероприятия = ПолучитьПротоколМероприятия(Мероприятие);
		Для Каждого ПунктПротокола Из ПротоколМероприятия Цикл
			
			Если ПунктПротокола.СостояниеИсполнения <> Перечисления.СостоянияПротоколовМероприятий.НаИсполнении Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПунктПротокола.Исполнение) Тогда
				ЗаписатьСостояниеПунктаПротоколаМероприятия(
					ПунктПротокола.Ссылка,
					ТекущаяДата(),
					Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение,
					ТекущийПользователь,
					Неопределено);
				Продолжить;
			КонецЕсли;
			
			РеквизитыИсполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПротокола.Исполнение, "Завершен, Состояние");
			Если РеквизитыИсполнения.Завершен Тогда
				ЗаписатьСостояниеПунктаПротоколаМероприятия(
					ПунктПротокола.Ссылка,
					ТекущаяДата(),
					Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение,
					ТекущийПользователь,
					Неопределено);
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыИсполнения.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				ЗаписатьСостояниеПунктаПротоколаМероприятия(
					ПунктПротокола.Ссылка,
					ТекущаяДата(),
					Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение,
					ТекущийПользователь,
					Неопределено);
				Продолжить;
			КонецЕсли;
			
			БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(ПунктПротокола.Исполнение, ПричинаПрерывания);
			ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(ПунктПротокола.Исполнение);
			
			ЗаписатьСостояниеПунктаПротоколаМероприятия(
				ПунктПротокола.Ссылка,
				ТекущаяДата(),
				Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение,
				ТекущийПользователь,
				Неопределено);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, является ли процесс исполнением пункта протокола мероприятия.
//
// Параметры:
//  Процесс			 - БизнесПроцессСсылка.Исполнение		 - Проверяемый процесс.
//  ПунктПротокола	 - СправочникСсылка.ПротоколыМероприятий - Пункт протокола.
// 
// Возвращаемое значение:
//  Булево - Признак того что это процесс исполнения по пункту протокола мероприятия.
//
Функция ЭтоПроцессПоПунктуПротокола(Процесс, ПунктПротокола) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПротоколыМероприятий.Ссылка
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|ГДЕ
		|	ПротоколыМероприятий.Исполнение = &Исполнение
		|	И ПротоколыМероприятий.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Исполнение", Процесс);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ПунктПротокола = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// По части наименования формирует список для выбора организатора мероприятия.
//
// Параметры:
//  Параметры - Параметры автоподбора.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораОрганизатора(Параметры) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	ДанныеВыбораПользователи = Справочники.Пользователи.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораКонтрагенты = Справочники.Контрагенты.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
	
	Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораКонтрагенты Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Получаем таблицу протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Протокол мероприятия.
//
Функция ПолучитьПротоколМероприятия(Мероприятие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МероприятияПротокол.Ссылка КАК Мероприятие,
		|	МероприятияПротокол.НомерСтроки КАК НомерСтроки,
		|	ПротоколыМероприятий.Ответственный,
		|	ПротоколыМероприятий.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
		|	ПротоколыМероприятий.Слушали,
		|	ПротоколыМероприятий.Выступили,
		|	ПротоколыМероприятий.Решили,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса,
		|	ПротоколыМероприятий.Проверяющий,
		|	ПротоколыМероприятий.ВариантУстановкиСрокаОбработкиРезультатов,
		|	ПротоколыМероприятий.СрокОбработкиРезультатов,
		|	ПротоколыМероприятий.СрокОбработкиРезультатовДни,
		|	ПротоколыМероприятий.СрокОбработкиРезультатовЧасы,
		|	ПротоколыМероприятий.СрокОбработкиРезультатовМинуты,
		|	ПротоколыМероприятий.Контролер,
		|	ПротоколыМероприятий.ВариантИсполнения,
		|	ПротоколыМероприятий.Исполнители.(
		|		Ссылка,
		|		НомерСтроки,
		|		Исполнитель,
		|		НаименованиеЗадачи,
		|		Описание,
		|		Ответственный,
		|		ПорядокИсполнения,
		|		СрокИсполнения,
		|		СрокИсполненияДни,
		|		СрокИсполненияЧасы,
		|		СрокИсполненияМинуты,
		|		ВариантУстановкиСрокаИсполнения
		|	),
		|	ПротоколыМероприятий.СостояниеИсполнения,
		|	ПротоколыМероприятий.Ссылка,
		|	ПротоколыМероприятий.Исполнение,
		|	ПротоколыМероприятий.КоличествоИтераций
		|ИЗ
		|	Справочник.Мероприятия.Протокол КАК МероприятияПротокол
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ПО МероприятияПротокол.ПунктПротокола = ПротоколыМероприятий.Ссылка
		|ГДЕ
		|	МероприятияПротокол.Ссылка = &Мероприятие
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПунктаПрограммы,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет права участников процесса на предметы.
//
// Параметры
//  Процесс - БизнесПроцессСсылка, БизнесПроцессОбъект - Процесс.
//  Предметы - Массив - Предметы без автоматического заполнения рабочей группы.
//  ПользователиДляПроверки - ТаблицаЗначений - Пользователи соответствующие участникам процесса для проверки
//              прав на предметы, см. Мультипредметность.ПользователиДляПроверкиПрав().
//
Функция ПроверитьПраваУчастниковПроцессаНаФайлыПредметов(Процесс, Предметы, ПользователиДляПроверки) Экспорт
	
	УчастникиБезПрав = Неопределено;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		ЭтапОбработкиПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "ЭтапОбработкиПредмета");
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессОбъект.Исполнение") Тогда
		ЭтапОбработкиПредмета = Процесс.ЭтапОбработкиПредмета;
	Иначе
		ЭтапОбработкиПредмета = "";
	КонецЕсли;
	
	Если ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда
		
		УчастникиБезПрав = Новый ТаблицаЗначений;
		УчастникиБезПрав.Колонки.Добавить("Участник");
		УчастникиБезПрав.Колонки.Добавить("Предмет");
		
		Мероприятия = Новый Массив;
		Для Каждого Предмет Из Предметы Цикл
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
				Мероприятия.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		
		ПраваНаФайлы = Справочники.Мероприятия.ПолучитьПраваНаФайлы(
			Мероприятия,
			ПользователиДляПроверки.ВыгрузитьКолонку("Участник"));
		Для Каждого Мероприятие Из Мероприятия Цикл
			Для Каждого СтрокаПользователь Из ПользователиДляПроверки Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("ОбъектДоступа", Мероприятие);
				Отбор.Вставить("Пользователь", СтрокаПользователь.Участник);
				Отбор.Вставить("Изменение", Истина);
				
				НайденныеПрава = ПраваНаФайлы.НайтиСтроки(Отбор);
				Если НайденныеПрава.Количество() = 0 Тогда
					НовыйУчастникБезПрав = УчастникиБезПрав.Добавить();
					НовыйУчастникБезПрав.Участник = СтрокаПользователь.Участник;
					НовыйУчастникБезПрав.Предмет = Мероприятие;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УчастникиБезПрав;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает соответствие имен элементов типов состояний мероприятий.
//
// Возвращаемое значение:
//  Соответствие - Соответствие состояний имен типов состояний мероприятий.
//
Функция ПолучитьСоответствиеИменТиповСостояний()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("СостояниеМероприятия", "Мероприятия");
	Соответствие.Вставить("СостояниеПриглашений", "Приглашений");
	Соответствие.Вставить("СостояниеПрограммы", "Программы");
	Соответствие.Вставить("СостояниеМатериаловВыступающих", "МатериаловВыступающих");
	Соответствие.Вставить("СостояниеПротокола", "Протокола");
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает тип состояния мероприятия по состоянию мероприятия.
//
// Параметры:
//  Состояние - Перечисления.СостоянияМероприятий - Состояние мероприятия, тип которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - Тип состояния мероприятия.
//
Функция ПолучитьТипСостояния(Состояние)
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	ТипСостояния = СоответствиеСостояний.Получить(Состояние);
	
	Возврат ТипСостояния;
	
КонецФункции

// Добавляет предмет-мероприятие к бизнес-процессу.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс, к которому добавляем мероприятие.
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, которое добавляем в бизнес-процесс.
//
Процедура ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие)

	Строка = БизнесПроцесс.Предметы.Добавить();
	Строка.РольПредмета = Перечисления.РолиПредметов.Основной;
	Строка.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
		Мероприятие);
	Строка.Предмет = Мероприятие;
	
	ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(БизнесПроцесс.Ссылка);
	
	Для Каждого Действие Из ДействияПроцесса Цикл
		НоваяСтрока = БизнесПроцесс.ПредметыЗадач.Добавить();
		НоваяСтрока.ИмяПредмета = Строка.ИмяПредмета;
		НоваяСтрока.ТочкаМаршрута = Действие;
	КонецЦикла;
	
КонецПроцедуры

// Формирует по пункту протокола исполнение и стартует его.
//
// Параметры:
//  ПунктПротокола - СтрокаТаблицыЗначений - Пункт протокола.
//  ПротоколМероприятия - ТаблицаЗначений - Протокол мероприятия.
//
Процедура СформироватьИсполнение(ПунктПротокола, ПротоколМероприятия)
	
	// Если по пункту не требуется исполнение, то исполнение формировать не следует.
	Если ПунктПротокола.СостояниеИсполнения <>
			Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение Тогда
		Возврат;
	КонецЕсли;
	
	// Если исполнители не указаны, то считаем что ответственный является исполнителем.
	Если ПунктПротокола.Исполнители.Количество() = 0 Тогда
		// Если нет исполнителей и нет ответственного то пункт протокола не запускаем на исполнение.
		Если Не ЗначениеЗаполнено(ПунктПротокола.Ответственный) Тогда
			Возврат;
		КонецЕсли;
		
		НовыйИсполнитель = ПунктПротокола.Исполнители.Добавить();
		НовыйИсполнитель.Исполнитель = ПунктПротокола.Ответственный;
		НовыйИсполнитель.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		НовыйИсполнитель.СрокИсполнения = ПунктПротокола.СрокИсполненияПроцесса;
	КонецЕсли;
	
	// Рассчитываем номер пункта протокола на момент запуск исполнения.
	НомерПунктаПротокола = УправлениеМероприятиямиКлиентСервер.ПолучитьНомерПунктаСтрокиПротокола(
		ПунктПротокола, ПротоколМероприятия);
	СтруктураПунктаПротокола = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ПунктПротокола);
	СтруктураПунктаПротокола.Вставить("НомерПунктаПротокола", НомерПунктаПротокола);
	
	// Запускаем процесс исполнения по пункту протокола.
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Мероприятие", ПунктПротокола.Мероприятие);
	ДанныеЗаполнения.Вставить("ПунктПротокола", СтруктураПунктаПротокола);
	ДанныеЗаполнения.Вставить("ОперацияМероприятия", "ИсполнитьПунктПротокола");
	
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Заполнить(ДанныеЗаполнения);
	ИсполнениеОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	ИсполнениеОбъект.Записать();
	ИсполнениеОбъект.Старт();
	
	ПараметрыЗаписи = Новый Структура("Старт", Истина);
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(ИсполнениеОбъект.Ссылка, Истина);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ИсполнениеОбъект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(
		ИсполнениеОбъект.Ссылка, ПараметрыЗаписи);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(ИсполнениеОбъект.Ссылка);
	ИсторияРаботыПользователя.Добавить(ИсполнениеОбъект.Ссылка);
	
КонецПроцедуры

// Устанавливает состояние пункта протокола мероприятия из бизнес-процесса.
//
// Параметры:
//  ПунктПротокола - СправочникСсылка.ПротоколыМероприятий - Пункт протокола, состояние которого будет установлено.
//  Период - Дата - Момент времени установки состояния.
//  Состояние - ПеречислениеСсылка.СостоянияПротоколовМероприятий - Состояние, которое будет установлено.
//  Установил - БизнесПроцессСсылка - Объект, который устанавливает состояние.
//
Процедура ЗаписатьСостояниеПунктаПротоколаМероприятияИзБизнесПроцесса(ПунктПротокола, Период, Состояние, Установил)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьСостояниеПунктаПротоколаМероприятия(ПунктПротокола, Период, Состояние, Установил, Установил);
	
КонецПроцедуры

// Устанавливает состояние пункта протокола мероприятия.
//
// Параметры:
//  ПунктПротокола	 - СправочникСсылка.ПротоколыМероприятий		 - Пункт протокола, состояние которого будет установлено.
//  Период			 - Дата											 - Момент времени установки состояния.
//  Состояние		 - ПеречислениеСсылка.СостоянияПротоколовМероприятий - Состояние, которое будет установлено.
//  Установил		 - БизнесПроцессСсылка, СправочникСсылка.Пользователи	 - Объект, который устанавливает состояние.
//  Исполнение		 - БизнесПроцессСсылка.Исполнение					 - Процесс, в котором происходит исполнение пункта протокола.
//
Процедура ЗаписатьСостояниеПунктаПротоколаМероприятия(ПунктПротокола, Период, Состояние,
	Установил, Исполнение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Состояние пункта протокола.
	ПунктПротоколаОбъект = ПунктПротокола.ПолучитьОбъект();
	ПунктПротоколаОбъект.СостояниеИсполнения = Состояние;
	ПунктПротоколаОбъект.СостояниеИсполненияУстановил = Установил;
	ПунктПротоколаОбъект.Исполнение = Исполнение;
	ПунктПротоколаОбъект.Записать();
	
КонецПроцедуры

// Возвращает Истина, если переданное значение является пунктом протокола мероприятия, с учетом
// функциональной опции ИспользоватьУправлениеМероприятиями.
//
// Параметры:
//  Объект - Произвольный - Проверяемый объект.
//  ПунктПротокола - СправочникСсылка.ПротоколыМероприятий - Параметр, в который будет установлен объект, 
//                если он является пунктом протокола мероприятия.
//
// Возвращаемое значение:
//  Булево - Признак того является ли объект пунктом протокола мероприятия.
//
Функция ЭтоПунктПротоколаМероприятия(Объект, ПунктПротокола = Неопределено)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПунктПротокола = Объект;
	Возврат Истина;
	
КонецФункции

#КонецОбласти
