
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для обработки ТекущиеДела
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет виджеты формы Текущие дела
//
// Параметры:
//   Форма - УправляемаяФорма с виджетами
//   Виджеты - Массив - массив ссылок на виджеты, которые следует заполнить.
//
Процедура ЗаполнитьВиджетыТекущихДел(Форма, Виджеты = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ИндексВиджета", "");
	Параметры.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Параметры.Вставить("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	HTMLПредставлениеПустогоВиджета = HTMLПредставлениеПустогоВиджета();
	
	ДоступныеВиджеты = Справочники.Виджеты.ДоступныеВиджеты();
	
	КоличествоСтрок = 3;
	КоличествоСтолбцов = 4;
	
	Для ИндексСтроки = 1 По КоличествоСтрок Цикл
		
		Для ИндексСтолбца = 1 По КоличествоСтолбцов Цикл
			
			ИндексВиджета = "" + ИндексСтроки + "_" + ИндексСтолбца;
			
			ТекущийВиджет = Форма["Виджет" + ИндексВиджета];
			
			Если ЗначениеЗаполнено(Виджеты)
				И Виджеты.Найти(ТекущийВиджет) = Неопределено Тогда
				
				Продолжить;
			КонецЕсли;
			
			Форма["HTML" + ИндексВиджета] = "";
			Форма.Элементы["HTML" + ИндексВиджета].Видимость = Истина;
			Форма.Элементы["ГруппаДиаграмма" + ИндексВиджета].Видимость = Ложь;
			
			Параметры.ИндексВиджета = ИндексВиджета;
			
			Если Не ЗначениеЗаполнено(ТекущийВиджет)
				Или ДоступныеВиджеты.Найти(ТекущийВиджет) = Неопределено Тогда
				
				Форма["HTML" + ИндексВиджета] = HTMLПредставлениеПустогоВиджета;
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.МоиЗадачи Тогда
				ЗаполнитьВиджетМоиЗадачи(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.ЗадачиОтдела Тогда
				ЗаполнитьВиджетЗадачиОтдела(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.МоиДокументы Тогда
				ЗаполнитьВиджетМоиДокументы(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.СВД Тогда
				ЗаполнитьВиджетСВД(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.МоиФайлы Тогда
				ЗаполнитьВиджетМоиФайлы(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Почта Тогда
				ЗаполнитьВиджетПочта(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Мероприятия Тогда
				ЗаполнитьВиджетМероприятия(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Календарь Тогда
				ЗаполнитьВиджетКалендарь(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Форум Тогда
				ЗаполнитьВиджетФорум(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Контроль Тогда
				ЗаполнитьВиджетКонтроль(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.ЕжедневныеОтчеты Тогда
				ЗаполнитьВиджетЕжедневныеОтчеты(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.МоиДела Тогда
				ЗаполнитьВиджетМоиДела(Параметры);
			Иначе
				Форма["HTML" + ИндексВиджета] = HTMLПредставлениеПустогоВиджета;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает настройки виджета
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты
//
// Возвращаемое значение:
//   Структура - параметры виджета, содержимое структуры соответствует
//               возвращаемому значению функцией ТекущиеДелаКлиентСервер.СтруктураВиджетаФормы
//
Функция НастройкиВиджета(Виджет) Экспорт
	
	Результат = ТекущиеДелаДокументооборотКлиентСервер.СтруктураВиджетаФормы();
	
	Результат.Показатели = ПоказателиВиджета(Виджет);
	
	Если Виджет = Справочники.Виджеты.Почта Тогда
		Результат.ПапкиПисем = РегистрыСведений.ПапкиПисемТекущихДел.ВыбранныеПапкиПользователя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает настройки виджета формы.
//
// Параметры:
//   ИмяВиджетаФормы - Строка - имя виджета в форме (соответствует имени реквизита форма, содержащего виджет).
//   Настройки - Структура - настройки виджета, состав структуры соответствует возвращаемому значению
//                           функции ТекущиеДелаКлиентСервер.СтруктураВиджетаФормы
//
Процедура ЗаписатьНастройкиВиджетаФормы(ИмяВиджетаФормы, Настройки) Экспорт
	
	НачатьТранзакцию();
	
	НастройкиТекущихДел = Новый Структура(ИмяВиджетаФормы, Настройки.Виджет);
	РегистрыСведений.НастройкиТекущихДел.ЗаписатьНастройки(НастройкиТекущихДел);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Для Каждого СтрПоказательВиджета Из Настройки.Показатели Цикл
		ЗаписьНастройки = РегистрыСведений.ПороговыеЗначенияПоказателейВиджетов.СоздатьМенеджерЗаписи();
		ЗаписьНастройки.Пользователь = ТекущийПользователь;
		ЗаписьНастройки.Показатель = СтрПоказательВиджета.Показатель;
		ЗаписьНастройки.Значение = СтрПоказательВиджета.ПороговоеЗначение;
		ЗаписьНастройки.Записать();
	КонецЦикла;
	
	Если Настройки.Виджет = Справочники.Виджеты.Почта Тогда
		РегистрыСведений.ПапкиПисемТекущихДел.СохранитьВыбранныеПапкиПользователя(
			ТекущийПользователь, Настройки.ПапкиПисем);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает ссылку на ежедневный отчет по дате.
//
// Параметры:
//   ДатаОтчета - Дата
//
// Возвращаемое значение:
//   ДокументСсылка.ЕжедневныйОтчет
//
Функция ПолучитьЕжедневныйОтчетНаДату(ДатаОтчета) Экспорт
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &ТекущийПользователь
		|	И НЕ ЕжедневныйОтчет.ПометкаУдаления
		|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = &Период";

	Запрос.УстановитьПараметр("Период", НачалоДня(ДатаОтчета));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Результат =  Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик регламентного задания РасчетПоказателейРаботыПользователей.
// Предназначен для накопления истории значений показателей пользователя. 
// История значений показателей используется в качестве исходных данных 
// для графика загруженности пользователя на рабочем столе.
// 
Процедура РасчетПоказателейРаботыПользователей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользователиДляРасчета = 
		РегистрыСведений.НастройкиТекущихДел.ПользователиСПризнакомОтображенияГрафикаНагрузки();
		
	Если ПользователиДляРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РассчитатьПоказателиПочтыДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиЗадачДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиКалендаряДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиМероприятийДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиКонтроляДляПользователей(ПользователиДляРасчета);
	
КонецПроцедуры

// Заполняет кэш картинок формы Текущие дела.
//
Процедура ЗаполнитьКэшКартинокФормыТекущиеДела(Форма) Экспорт
	
	КэшКартинок = Новый Структура;
	КэшКартинок.Вставить("ШестерёнкаПлоская", БиблиотекаКартинок.ШестерёнкаПлоская);
	КэшКартинок.Вставить("БизнесПроцесс", БиблиотекаКартинок.БизнесПроцесс);
	КэшКартинок.Вставить("НаписатьПисьмо", БиблиотекаКартинок.НаписатьПисьмо);
	КэшКартинок.Вставить("КартинкаКонтроль16", БиблиотекаКартинок.КартинкаКонтроль16);
	
	Форма.КэшКартинок = КэшКартинок;
	
КонецПроцедуры

// Заполняет кэш значений формы Текущие дела.
//
Процедура ЗаполнитьКэшЗначенийФормыТекущиеДела(Форма) Экспорт
	
	Форма.КэшЗначений = Новый Структура;
	
	Форма.КэшЗначений.Вставить(
		"ЧтениеВходящихДокументов",
		ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы));
	
	Форма.КэшЗначений.Вставить(
		"ЧтениеИсходящихДокументов",
		ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает показатели виджета
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты
//
// Возвращаемое значение:
//   - Массив
//      - СправочникСсылка.ПоказателиВиджетов
//
Функция ПоказателиВиджета(Виджет)
	
	ПоказателиВиджета = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Виджет) Тогда
		Возврат ПоказателиВиджета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиВиджетов.Ссылка КАК Показатель,
		|	ПоказателиВиджетов.ИмяПредопределенныхДанных КАК ИмяПоказателя,
		|	ЕСТЬNULL(ПороговыеЗначенияПоказателейВиджетов.Значение, ПоказателиВиджетов.ПороговоеЗначение) КАК ПороговоеЗначение
		|ИЗ
		|	Справочник.ПоказателиВиджетов КАК ПоказателиВиджетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПороговыеЗначенияПоказателейВиджетов КАК ПороговыеЗначенияПоказателейВиджетов
		|		ПО (ПороговыеЗначенияПоказателейВиджетов.Показатель = ПоказателиВиджетов.Ссылка)
		|			И (ПороговыеЗначенияПоказателейВиджетов.Пользователь = &Пользователь)
		|ГДЕ
		|	ПоказателиВиджетов.Виджет = &Виджет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиВиджетов.Порядок";
	
	Запрос.УстановитьПараметр("Виджет", Виджет);
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрПоказательВиджета Из ТаблицаПоказателей Цикл
		Показатель = ТекущиеДелаДокументооборотКлиентСервер.СтруктураПоказателяВиджета();
		ЗаполнитьЗначенияСвойств(Показатель, СтрПоказательВиджета);
		ПоказателиВиджета.Добавить(Показатель);
	КонецЦикла;
	
	Возврат ПоказателиВиджета;
	
КонецФункции

// Возвращает картинку соответствующую значению перечисления ЦветаРабочегоКалендаря.
//
// Параметры:
//   Цвет - ПеречислениеСсылка.ЦветаРабочегоКалендаря
//
// Возвращаемое значение:
//   Картинка
//
Функция КартинкаЦветаСобытияКалендаря(Цвет)
	
	Картинка = Новый Картинка;
	
	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый Тогда
		Картинка = БиблиотекаКартинок.ЦветЖелтый;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый Тогда
		Картинка = БиблиотекаКартинок.ЦветЗеленый;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный Тогда
		Картинка = БиблиотекаКартинок.ЦветКрасный;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый Тогда
		Картинка = БиблиотекаКартинок.ЦветОранжевый;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий Тогда
		Картинка = БиблиотекаКартинок.ЦветСиний;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормированиеHTMLПредставленияВиджета

// Возвращает html - представление пустого виджета.
//
// Возвращаемое значение:
//   Строка - текст html
//
Функция HTMLПредставлениеПустогоВиджета()
	
	HTMLТекст = "<html><head>"
		+ СтильHTMLДляПустогоВиджета()
		+ "<body><table height=""100%"">"
		+ "<tr height=""50%""><td/></tr>"
		+ "<tr align=""center""><td>";
	HTMLТекст = HTMLТекст + "<div class=""visibility_img"">";
	ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.Плюс64, "НастройкаВиджета");
	HTMLТекст = HTMLТекст + "</div>";
	HTMLТекст = HTMLТекст
		+ "</td></tr>"
		+ "<tr height=""50%""><td/></tr>"
		+ "</table></body></html>";
		
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает html представление виджета.
//
// Параметры:
//   Заголовок - Строка - html текст заголовка виджета.
//   Подвал - Строка - html текст подвала виджета.
//   ТелоВиджета - Строка - html текст тела виджета.
//   ФонаВиджета - Строка - цвет фона виджета в виде шестнадцатеричного значения.
//   ЦветРамкиТаблицы - Строка - цвет рамок таблиц в виджете, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка - html представление виджета.
//
Функция HTMLПредставлениеВиджета(
		Заголовок = "", Подвал = "", ТелоВиджета, ФонаВиджета, ЦветРамкиТаблицы)
	
	HTMLТекст = "<html><head>"
		+ СтильHTML(ЦветРамкиТаблицы)
		+ "<body bgcolor=" + ФонаВиджета + ">";
		
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr><td>";
	
	HTMLТекст = HTMLТекст + "<table class=""title"">";
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td class=""menu"">";
	ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
		HTMLТекст, БиблиотекаКартинок.ТекущиеДелаМеню, "МенюВиджета");
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "<td class=""title"">";
	HTMLТекст = HTMLТекст + "<p>";
	HTMLТекст = HTMLТекст + Заголовок;
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "<td class=""menu"">";
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "<p>";
	HTMLТекст = HTMLТекст + "<tr class=""height100""><td>";
	HTMLТекст = HTMLТекст + ТелоВиджета;
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "<tr><td>";
	
	HTMLТекст = HTMLТекст + "<table>";
	HTMLТекст = HTMLТекст + "<tr>";
	
	HTMLТекст = HTMLТекст + "<td width=""5"">";
	HTMLТекст = HTMLТекст + "</td>";
	
	HTMLТекст = HTMLТекст + "<td height=""18"">";
	HTMLТекст = HTMLТекст + Подвал;
	HTMLТекст = HTMLТекст + "</td>";
	
	HTMLТекст = HTMLТекст + "</tr>";
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает html представление заголовка виджета.
//
// Параметры:
//   Заголовок - Строка
//   Значение - Число - число отображаемое в заголовке виджета.
//   Ссылка - Строка - навигационная ссылка на объект или форму.
//   ЦветЗаголовка - Строка - цвет заголовка виджета в виде шестнадцатеричного значения.
//   ЦветЗначения - Строка - цвет значения заголовка виджета в виде шестнадцатеричного значения.
//
Функция ЗаголовокВиджета(Заголовок, Значение, Ссылка, ЦветЗаголовка, ЦветЗначения)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Разделитель = ":";
		ПредставлениеЗначенияВЗаголовке = Значение;
	Иначе
		Разделитель = "";
		ПредставлениеЗначенияВЗаголовке = "";
	КонецЕсли;
	
	Если Найти(Ссылка, "e1cib") Тогда
		v8doc = "v8doc:";
	Иначе
		v8doc = "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=%1%2><FONT class=""PT12"" color=%3><B>%4%5&nbsp;<FONT color=%6>%7</B></FONT></FONT></A>",
		v8doc,
		Ссылка,
		ЦветЗаголовка,
		СтрЗаменить(Заголовок, " ", "&nbsp;"),
		Разделитель,
		ЦветЗначения,
		ПредставлениеЗначенияВЗаголовке);
		
КонецФункции

// Возвращает html представление тела виджета в виде 2х или 3х областей с показателями.
//
// Параметры:
//   Показатели - Массив
//     - Структура - содержимое соответствует возвращаемому значению функции СтруктураПоказателя.
//
// Возвращаемое значение:
//   Строка - html представление тела виджета
//
Функция ТелоВиджетаОбластями(Показатели)
	
	classCSS = """frame1""";
	Если Показатели.Количество() = 3 Тогда
		classCSS = """frame2""";
	КонецЕсли;
	
	ТекстHTML = "<table>";
	ТекстHTML = ТекстHTML + "<tr class=""middle"">";
	
	Для Каждого СтрПоказатель Из Показатели Цикл
		
		ТекстHTML = ТекстHTML + "<td class=""middle"">";
		ТекстHTML = ТекстHTML + "<table class=" + classCSS + ">";
		ТекстHTML = ТекстHTML + "<tr class=""middle""><td class=""frame"" bgcolor = ""white"">";
		
		Если Найти(СтрПоказатель.Ссылка, "e1cib") Тогда
			v8doc = "v8doc:";
		Иначе
			v8doc = "";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<A href=%1%2><FONT class=""PT20"" color=""%3""><B>%4</B></FONT></A>",
				v8doc,
				СтрПоказатель.Ссылка,
				СтрПоказатель.ЦветЗначения,
				СтрПоказатель.Значение);
		
		ТекстHTML = ТекстHTML + "</td></tr>";
		ТекстHTML = ТекстHTML + "<tr class=""middle""><td height = ""1"">";
		ТекстHTML = ТекстHTML + "<p>";
		
		ТекстHTML = ТекстHTML + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<A href=%1%2><FONT class=""PT8"" color=""%3"">%4</FONT></A>",
				v8doc,
				СтрПоказатель.Ссылка,
				СтрПоказатель.ЦветЗаголовка,
				СтрЗаменить(СтрПоказатель.Заголовок, " ", "&nbsp;"));
		ТекстHTML = ТекстHTML + "</td></tr>";
		ТекстHTML = ТекстHTML + "</table>";
		ТекстHTML = ТекстHTML + "</td>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "</tr>";
	ТекстHTML = ТекстHTML + "</table>";
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает максимальное количество строк для виджета
// в виде списка с показателями.
//
Функция МаксимальноеКоличествоСтрокВВиджете()
	
	МаксимальноеКоличествоСтрок = 4;
	
	Возврат МаксимальноеКоличествоСтрок;
	
КонецФункции

// Возвращает html представление тела виджета в виде списка с показателями.
//
// Параметры:
//   Показатели - Массив
//     - Структура - содержимое соответствует возвращаемому значению функции СтруктураПоказателяДляСписка.
//   ПоказыватьКартинки - Булево - включает отображение колонки с картинкой для показателя
//   ПоказыватьКомментарий - Булево - включает отображение колонки с комментарием для показателя
//
// Возвращаемое значение:
//   Строка - html представление тела виджета
//
Функция ТелоВиджетаСписком(Показатели, ПоказыватьКартинки = Ложь, ПоказыватьКомментарий = Ложь)
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	ВыведеноСтрок = 0;
	
	ТекстHTML = "<table class=""list"">";
	
	Для Каждого СтрПоказатель Из Показатели Цикл
		
		Если ВыведеноСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "<tr>";
		
		ТекстHTML = ТекстHTML + "<td width=""3""></td>";
		
		Если ПоказыватьКартинки Тогда
			ТекстHTML = ТекстHTML + "<td width=""1"">";
			ТекстHTML = ТекстHTML + СтрПоказатель.Картинка;
			ТекстHTML = ТекстHTML + "</td>";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "<td>";
		
		Если Найти(СтрПоказатель.Ссылка, "e1cib") Тогда
			v8doc = "v8doc:";
		Иначе
			v8doc = "";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=%1%2><FONT color=""%3"">%4</FONT></A>",
			v8doc,
			СтрПоказатель.Ссылка,
			ЦветТекста_Обычный,
			СтрПоказатель.Значение);
		ТекстHTML = ТекстHTML + "</td>";
		
		Если ПоказыватьКомментарий Тогда
			ТекстHTML = ТекстHTML + "<td width=""1"">";
			ТекстHTML = ТекстHTML + СтрПоказатель.Комментарий;
			ТекстHTML = ТекстHTML + "</td>";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "<td width=""3""></td>";
		ТекстHTML = ТекстHTML + "</tr>";
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Если ВыведеноСтрок < МаксимальноеКоличествоСтрок Тогда
		ТекстHTML = ТекстHTML + "<tr class=""height100""><td/></tr>";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</table>";
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает подвал для виджета в виде списка с показателями.
// Если количество показателей больше максимального допустимого, то
// выводить картинка с 3-мя точками.
//
// Параметры:
//   КоличествоПоказателей - Число
//   Ссылка - Строка - ссылка под картинкой
//
Функция ПодвалВиджетаСписком(КоличествоПоказателей, Ссылка)
	
	ПодвалВиджета = "";
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	
	Если КоличествоПоказателей > МаксимальноеКоличествоСтрок Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
			ПодвалВиджета, БиблиотекаКартинок.ТриТочки, Ссылка);
	КонецЕсли;
	
	Возврат ПодвалВиджета;
	
КонецФункции

// Возвращает html представление тела виджета c текстом по центру.
//
// Параметры:
//   Текст - Строка
//
// Возвращаемое значение:
//   Строка - html представление тела виджета
//
Функция ТелоВиджетаТекстомПоЦентру(Текст)
	
	Возврат "<table><tr class=""middle""><td>"
		+ Текст
		+ "</td></tr></table>";
		
КонецФункции

// Возвращает представление значения строкой с учетом допустимой длины.
//
// Параметры:
//   Значение - Строка
//   ДопустимаяДлинаЗначения - Число
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеЗначения(Значение, ДопустимаяДлинаЗначения)
	
	ПредставлениеЗначения = Значение;
	
	Если СтрДлина(ПредставлениеЗначения) > ДопустимаяДлинаЗначения Тогда
		ПредставлениеЗначения = Лев(ПредставлениеЗначения, ДопустимаяДлинаЗначения - 3) + "...";
	КонецЕсли;
	
	Возврат СтрЗаменить(ПредставлениеЗначения, " ", "&nbsp;");
	
КонецФункции

// Возвращает структуру показателя.
//
// Возвращаемое значение:
//   Структура
//     Заголовок - Строка
//     ЦветЗаголовка - Строка
//     Значение - Число
//     ЦветЗначения - Строка
//     Ссылка - Неопределено
//
Функция СтруктураПоказателя()
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("Заголовок", "");
	СтруктураПоказателя.Вставить("ИмяПоказателя", "");
	СтруктураПоказателя.Вставить("ЦветЗаголовка", "");
	СтруктураПоказателя.Вставить("Значение", 0);
	СтруктураПоказателя.Вставить("ЦветЗначения", "");
	СтруктураПоказателя.Вставить("Ссылка", Неопределено);
	
	Возврат СтруктураПоказателя;
	
КонецФункции

// Возвращает структуру показателя для списка показателей
//
// Возвращаемое значение:
//   Структура
//     Картинка - Строка
//     Значение - Строка
//     Ссылка - Число
//     Комментарий - Строка
//
Функция СтруктураПоказателяДляСписка()
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("Картинка", "");
	СтруктураПоказателя.Вставить("Значение", "");
	СтруктураПоказателя.Вставить("Ссылка", "");
	СтруктураПоказателя.Вставить("Комментарий", "");
	
	Возврат СтруктураПоказателя;
	
КонецФункции

// Возвращает стиль CSS для формирования html представлений виджетов.
//
// Параметры:
//   ЦветРамкиТаблицы - Строка - цвет рамки класса "td.frame", в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка - стиль CSS
//
Функция СтильHTML(ЦветРамкиТаблицы)
	
	Возврат
		"<style type=""text/css"">
		|	body {
		|		overflow:    hidden;
		|		margin-top:  0px;
		|		margin-bottom: 0px;
		|		margin-left: 0px;
		|		margin-right: 0px;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		}
		|	table {
		|		width: 100%;
		|		height: 100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	table.frame1 {
		|		width: 97px;
		|		height: 85px;
		|		border-collapse: collapse;
		|		text-align: center;
		|		padding: 0%;
		|		}
		|	table.frame2 {
		|		width: 65px;
		|		height: 85px;
		|		border-collapse: collapse;
		|		text-align: center;
		|		padding: 0%;
		|		}
		|	table.list {
		|		width: 100%;
		|		height: 100%;
		|		font-family: Arial;
		|		font-size:   13px;
		|		border: 0px solid;
		|		padding-left: 50;
		|		padding-right: 50;
		|		}
		|	table.title {
		|		width: 100%;
		|		height: 1px;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	tr.middle {
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	tr.height100 {
		|		height: 100%;
		|		}
		|	td {vertical-align: top;}
		|	td. {vertical-align: top;}
		|	td.middle {
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	td.frame {
		|		border: 1px solid " + ЦветРамкиТаблицы + ";
		|		border-bottom: double " + ЦветРамкиТаблицы + ";
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	td.menu {
		|		width: 10%;
		|		vertical-align: top;
		|		}
		|	td.title {
		|		width: 80%;
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	FONT.PT8 {font-size: 8pt;}
		|	FONT.PT12 {font-size: 12pt;}
		|	FONT.PT20 {font-size: 20pt;}
		|	a:link {color: #006699; text-decoration: none;}
		|	a:visited {color: #006699; text-decoration: none;}
		|	a:hover {color: #006699; text-decoration: underline;}
		|	p {margin-top: 7px;}
		|	img {border: 0px;}
		|</style>";
	
КонецФункции

// Возвращает стиль CSS для пустого html представлений виджетов.
//
// Возвращаемое значение:
//   Строка - стиль CSS
//
Функция СтильHTMLДляПустогоВиджета()
	
	Возврат
		"<style type=""text/css"">
		|	body {
		|		overflow:    hidden;
		|		margin-top:  0px;
		|		margin-bottom: 0px;
		|		margin-left: 0px;
		|		margin-right: 0px;
		|		font-family: Arial;
		|		}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	img {border: 0px;}
		|	p {margin-top: 7px;}
		|	.visibility_img{visibility:hidden;}
		|</style>";
	
КонецФункции

// Возвращает цвета для html представлений виджетов по индексу виджета.
//
// Параметры:
//   ИндексВиджета - Строка - индекс виджета в форме.
//
Функция ЦветаВиджета(ИндексВиджета)
	
	ЦветаВиджета = Новый Структура;
	ЦветаВиджета.Вставить("ЦветФона", "");
	ЦветаВиджета.Вставить("ЦветРамкиТаблицы", "");
	ЦветаВиджета.Вставить("ЦветПодписи", "");
	
	Если ИндексВиджета = "1_1" Или ИндексВиджета = "2_2" Или ИндексВиджета = "3_4" Тогда
		ЦветаВиджета.ЦветФона = "#E7EFFE";
		ЦветаВиджета.ЦветРамкиТаблицы = "#AEB4C0";
		ЦветаВиджета.ЦветПодписи = "868CA3";
	ИначеЕсли ИндексВиджета = "1_2" Или ИндексВиджета = "2_4" Или ИндексВиджета = "3_1" Тогда
		ЦветаВиджета.ЦветФона = "#FEF5CB";
		ЦветаВиджета.ЦветРамкиТаблицы = "C0B99A";
		ЦветаВиджета.ЦветПодписи = "9D9882";
	ИначеЕсли ИндексВиджета = "1_3" Или ИндексВиджета = "2_1" Или ИндексВиджета = "3_3" Тогда
		ЦветаВиджета.ЦветФона = "#F1FFC7";
		ЦветаВиджета.ЦветРамкиТаблицы = "B6C196";
		ЦветаВиджета.ЦветПодписи = "969E80";
	ИначеЕсли ИндексВиджета = "1_4" Или ИндексВиджета = "2_3" Или ИндексВиджета = "3_2" Тогда
		ЦветаВиджета.ЦветФона = "#FCFFBB";
		ЦветаВиджета.ЦветРамкиТаблицы = "BFC18E";
		ЦветаВиджета.ЦветПодписи = "9C9E79";
	КонецЕсли;
	
	Возврат ЦветаВиджета;
	
КонецФункции

// Возвращает цвет обычного текста виджета, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка
//
Функция ЦветТекста_Обычный()
	
	Возврат "#505050";
	
КонецФункции

// Возвращает цвет текста просроченных данных виджета, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка
//
Функция ЦветТекста_ПросроченныеДанные()
	
	Возврат "#EB2903";
	
КонецФункции

// Возвращает структуру ссылок для областей виджета. Ссылки передаются параметрами.
//
// Параметры:
//   СсылкаОбластиВиджета - Строка - ссылка для всего виджета.
//   СсылкаОбластиПоказателя1 - Строка - ссылка для области показателя 1.
//   СсылкаОбластиПоказателя2 - Строка - ссылка для области показателя 2.
//   СсылкаОбластиПоказателя3 - Строка - ссылка для области показателя 3.
//
Функция СтруктураСсылокОбластейВиджета(
	СсылкаОбластиВиджета = "",
	СсылкаОбластиПоказателя1 = "",
	СсылкаОбластиПоказателя2 = "",
	СсылкаОбластиПоказателя3 = "") Экспорт
	
	СтруктураСсылокОбластейВиджета = Новый Структура;
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиВиджета", СсылкаОбластиВиджета);
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиПоказателя1", СсылкаОбластиПоказателя1);
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиПоказателя2", СсылкаОбластиПоказателя2);
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиПоказателя3", СсылкаОбластиПоказателя3);
	
	Возврат СтруктураСсылокОбластейВиджета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗаполнениеВиджетов

// Заполняет виджет Мои задачи в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//                  - Исполнители - Массив - массив исполнителей задач, от имени которых текущих пользователь может выполнять задачи.
//
Процедура ЗаполнитьВиджетМоиЗадачи(Параметры)
	
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом {
	Если Не ПравоДоступа("Чтение", Метаданные.Задачи.ЗадачаИсполнителя) Тогда
		Параметры.Форма.Элементы["HTML" + Параметры.ИндексВиджета].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом }
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК МоиЗадачи,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК МоиЗадачи_НеПринятые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|						И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК МоиЗадачи_Просроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначенияПоказателей = Новый Массив;
	
	МоиЗадачи = СтруктураПоказателя();
	МоиЗадачи.Заголовок = НСтр("ru = 'Задачи мне'; en = 'Tasks to me'");
	МоиЗадачи.ЦветЗаголовка = ЦветТекста_Обычный;
	МоиЗадачи.Значение = Выборка.МоиЗадачи;
	МоиЗадачи.Ссылка = "МоиЗадачи";
	МоиЗадачи.ИмяПоказателя = "МоиЗадачи";
	ЗначенияПоказателей.Добавить(МоиЗадачи);
	
	МоиЗадачи_НеПринятые = СтруктураПоказателя();
	МоиЗадачи_НеПринятые.Заголовок = НСтр("ru = 'Не принято'; en = 'Not accepted'");
	МоиЗадачи_НеПринятые.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиЗадачи_НеПринятые.Значение = Выборка.МоиЗадачи_НеПринятые;
	МоиЗадачи_НеПринятые.Ссылка = "МоиЗадачи_НеПринятые";
	МоиЗадачи_НеПринятые.ИмяПоказателя = "МоиЗадачи_НеПринятые";
	ЗначенияПоказателей.Добавить(МоиЗадачи_НеПринятые);
	
	МоиЗадачи_Просроченные = СтруктураПоказателя();
	МоиЗадачи_Просроченные.Заголовок = НСтр("ru = 'Просрочено'; en = 'Overdue'");
	МоиЗадачи_Просроченные.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиЗадачи_Просроченные.Значение = Выборка.МоиЗадачи_Просроченные;
	МоиЗадачи_Просроченные.Ссылка = "МоиЗадачи_Просроченные";
	МоиЗадачи_Просроченные.ИмяПоказателя = "МоиЗадачи_Просроченные";
	ЗначенияПоказателей.Добавить(МоиЗадачи_Просроченные);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.МоиЗадачи, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		МоиЗадачи.Заголовок,
		МоиЗадачи.Значение,
		МоиЗадачи.Ссылка,
		МоиЗадачи.ЦветЗаголовка,
		МоиЗадачи.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(МоиЗадачи_НеПринятые);
	Показатели.Добавить(МоиЗадачи_Просроченные);
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		МоиЗадачи.Ссылка,
		МоиЗадачи_НеПринятые.Ссылка,
		МоиЗадачи_Просроченные.Ссылка);
	
КонецПроцедуры

// Заполняет виджет Задачи отдела в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//                  - Исполнители - Массив - массив исполнителей задач, от имени которых текущих пользователь может выполнять задачи.
//
Процедура ЗаполнитьВиджетЗадачиОтдела(Параметры)
	
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом {
	Если Не ПравоДоступа("Чтение", Метаданные.Задачи.ЗадачаИсполнителя) Тогда
		Параметры.Форма.Элементы["HTML" + Параметры.ИндексВиджета].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом }
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	
	// Получим руководителей, чьи полномочия выполняет текущий пользователь.
	Руководители = Справочники.ДелегированиеПрав.СписокДелегирующих(ТекущийПользователь);
	Руководители.Добавить(ТекущийПользователь);
	
	// Получим подчиненных пользователей.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ПОМЕСТИТЬ ПодчиненныеПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				СтруктураПредприятия.Ссылка
		|			ИЗ
		|				Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|			ГДЕ
		|				СтруктураПредприятия.Руководитель В (&Руководители))
		|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОПользователяхДокументооборот.Пользователь
		|ИЗ
		|	ПодчиненныеПодразделения КАК ПодчиненныеПодразделения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|			ПО СведенияОПользователяхДокументооборот.Пользователь = Пользователи.Ссылка
		|		ПО ПодчиненныеПодразделения.Ссылка = СведенияОПользователяхДокументооборот.Подразделение
		|ГДЕ
		|	Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Руководители", Руководители);
	ПодчиненныеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	// Получим количествевенные показатели задач отдела.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь
		|ПОМЕСТИТЬ ПодчиненныеИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ПодчиненныеПользователи)
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиОтдела,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиОтдела_НеПринятые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиОтдела_Просроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеИсполнителиЗадач КАК ПодчиненныеИсполнителиЗадач
		|		ПО ЗадачаЗадачаИсполнителя.ТекущийИсполнитель = ПодчиненныеИсполнителиЗадач.РольПользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)";
		
	Запрос.УстановитьПараметр("ПодчиненныеПользователи", ПодчиненныеПользователи);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущийПользователь", Параметры.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначенияПоказателей = Новый Массив;
	
	ЗадачиОтдела = СтруктураПоказателя();
	ЗадачиОтдела.Заголовок = НСтр("ru = 'Задачи отдела'; en = 'Tasks of department'");
	ЗадачиОтдела.ЦветЗаголовка = ЦветТекста_Обычный;
	ЗадачиОтдела.Значение = Выборка.ЗадачиОтдела;
	ЗадачиОтдела.Ссылка = "ЗадачиОтдела";
	ЗадачиОтдела.ИмяПоказателя = "ЗадачиОтдела";
	ЗначенияПоказателей.Добавить(ЗадачиОтдела);
	
	ЗадачиОтдела_НеПринятые = СтруктураПоказателя();
	ЗадачиОтдела_НеПринятые.Заголовок = НСтр("ru = 'Не принято'; en = 'Not accepted'");
	ЗадачиОтдела_НеПринятые.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	ЗадачиОтдела_НеПринятые.Значение = Выборка.ЗадачиОтдела_НеПринятые;
	ЗадачиОтдела_НеПринятые.Ссылка = "ЗадачиОтдела_НеПринятые";
	ЗадачиОтдела_НеПринятые.ИмяПоказателя = "ЗадачиОтдела_НеПринятые";
	ЗначенияПоказателей.Добавить(ЗадачиОтдела_НеПринятые);
	
	ЗадачиОтдела_Просроченные = СтруктураПоказателя();
	ЗадачиОтдела_Просроченные.Заголовок = НСтр("ru = 'Просрочено'; en = 'Overdue'");
	ЗадачиОтдела_Просроченные.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	ЗадачиОтдела_Просроченные.Значение = Выборка.ЗадачиОтдела_Просроченные;
	ЗадачиОтдела_Просроченные.Ссылка = "ЗадачиОтдела_Просроченные";
	ЗадачиОтдела_Просроченные.ИмяПоказателя = "ЗадачиОтдела_Просроченные";
	ЗначенияПоказателей.Добавить(ЗадачиОтдела_Просроченные);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.ЗадачиОтдела, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		ЗадачиОтдела.Заголовок,
		ЗадачиОтдела.Значение,
		ЗадачиОтдела.Ссылка,
		ЗадачиОтдела.ЦветЗаголовка,
		ЗадачиОтдела.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(ЗадачиОтдела_НеПринятые);
	Показатели.Добавить(ЗадачиОтдела_Просроченные);
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
		
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		ЗадачиОтдела.Ссылка,
		ЗадачиОтдела_НеПринятые.Ссылка,
		ЗадачиОтдела_Просроченные.Ссылка);
	
КонецПроцедуры

// Заполняет виджет Мои документы в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетМоиДокументы(Параметры)
	
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом {
	Если Не ПравоДоступа("Чтение", Метаданные.Задачи.ЗадачаИсполнителя) Тогда
		Параметры.Форма.Элементы["HTML" + Параметры.ИндексВиджета].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом }
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	ДоступныИсходящиеДокументы = ПравоДоступа("Просмотр", Метаданные.Справочники.ИсходящиеДокументы);
	ДоступныВнутренниеДокументы = ПравоДоступа("Просмотр", Метаданные.Справочники.ВнутренниеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоиДокументы.Документ КАК Документ
		|ПОМЕСТИТЬ ПросроченныеДокументыБезГруппировки
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|		ПО МоиДокументы.Документ = ТекущиеСостоянияДокументов.Документ
		|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
		|ГДЕ
		|	НЕ МоиДокументы.Документ.ПометкаУдаления
		|	И МоиДокументы.Пользователь = &ТекущийПользователь
		|	И НЕ МоиДокументы.Документ ССЫЛКА Справочник.ИсходящиеДокументы
		|	И МоиДокументы.Документ.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И МоиДокументы.Документ.СрокИсполнения < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|	И ТекущиеСостоянияДокументов.Состояние ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МоиДокументы.Документ
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадачи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|			ПО ПредметыЗадачи.Ссылка = ЗадачаИсполнителя.Ссылка
		|		ПО МоиДокументы.Документ = ПредметыЗадачи.Предмет
		|ГДЕ
		|	НЕ МоиДокументы.Документ.ПометкаУдаления
		|	И МоиДокументы.Пользователь = &ТекущийПользователь
		|	И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне)
		|	И ЗадачаИсполнителя.Исполнитель = &ТекущийПользователь
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МоиДокументы.Документ
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадачи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|			ПО ПредметыЗадачи.Ссылка = ЗадачаИсполнителя.Ссылка
		|		ПО МоиДокументы.Документ = ПредметыЗадачи.Предмет
		|ГДЕ
		|	НЕ МоиДокументы.Документ.ПометкаУдаления
		|	И МоиДокументы.Пользователь = &ТекущийПользователь
		|	И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня)
		|	И ЗадачаИсполнителя.Автор = &ТекущийПользователь
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПросроченныеДокументыБезГруппировки.Документ) КАК Количество
		|ИЗ
		|	ПросроченныеДокументыБезГруппировки КАК ПросроченныеДокументыБезГруппировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МоиДокументы.Документ) КАК Количество
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|ГДЕ
		|	НЕ МоиДокументы.Документ.ПометкаУдаления
		|	И МоиДокументы.Пользователь = &ТекущийПользователь";
		
	Если ДоступныИсходящиеДокументы Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МоиДокументы.Документ
			|ПОМЕСТИТЬ ДокументыБезОтветаБезГруппировки
			|ИЗ
			|	РегистрСведений.МоиДокументы КАК МоиДокументы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|			ПО ИсходящиеДокументы.Ссылка = СвязиДокументов.Документ
			|				И (СвязиДокументов.СвязанныйДокумент ССЫЛКА Справочник.ВходящиеДокументы)
			|				И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет))
			|		ПО МоиДокументы.Документ = ИсходящиеДокументы.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
			|		ПО (МоиДокументы.Документ = ИсходящиеДокументыПолучатели.Ссылка
			|				И ИсходящиеДокументыПолучатели.Отправлен)
			|ГДЕ
			|	(МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента)
			|			ИЛИ МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент))
			|	И МоиДокументы.Пользователь = &ТекущийПользователь
			|	И НЕ ИсходящиеДокументы.ПометкаУдаления
			|	И ИсходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|	И ИсходящиеДокументы.СрокИсполнения < &ТекущаяДата
			|	И СвязиДокументов.СвязанныйДокумент ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыБезОтветаБезГруппировки.Документ) КАК Количество
			|ИЗ
			|	ДокументыБезОтветаБезГруппировки КАК ДокументыБезОтветаБезГруппировки";
	КонецЕсли;
	
	Если ДоступныВнутренниеДокументы Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВнутренниеДокументы.Ссылка КАК Документ
			|ПОМЕСТИТЬ ДокументыСИстекающимиСрокамиДействияИлиИсполнения
			|ИЗ
			|	РегистрСведений.МоиДокументы КАК МоиДокументы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|		ПО МоиДокументы.Документ = ВнутренниеДокументы.Ссылка
			|ГДЕ
			|	(МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента)
			|			ИЛИ МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент))
			|	И МоиДокументы.Пользователь = &ТекущийПользователь
			|	И ВнутренниеДокументы.ДатаОкончанияДействия >= &ТекущаяДата
			|	И ВнутренниеДокументы.ДатаОкончанияДействия <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
			|	И НЕ ВнутренниеДокументы.ПометкаУдаления
			|	И НЕ ВнутренниеДокументы.НеДействует
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВнутренниеДокументы.Ссылка
			|ИЗ
			|	РегистрСведений.МоиДокументы КАК МоиДокументы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
			|			ПО ВнутренниеДокументы.Ссылка = ТекущиеСостоянияДокументов.Документ
			|				И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
			|		ПО МоиДокументы.Документ = ВнутренниеДокументы.Ссылка
			|ГДЕ
			|	(МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента)
			|			ИЛИ МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент))
			|	И МоиДокументы.Пользователь = &ТекущийПользователь
			|	И ВнутренниеДокументы.СрокИсполнения >= &ТекущаяДата
			|	И ВнутренниеДокументы.СрокИсполнения <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
			|	И НЕ ВнутренниеДокументы.ПометкаУдаления
			|	И НЕ ВнутренниеДокументы.НеДействует
			|	И ТекущиеСостоянияДокументов.Состояние ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыСИстекающимиСрокамиДействияИлиИсполнения.Документ) КАК Количество
			|ИЗ
			|	ДокументыСИстекающимиСрокамиДействияИлиИсполнения КАК ДокументыСИстекающимиСрокамиДействияИлиИсполнения";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ЗначенияПоказателей = Новый Массив;
	
	ИндексЗапросРезультата = 1;
	Выборка = Результаты[ИндексЗапросРезультата].Выбрать();
	Выборка.Следующий();
	МоиДокументы_Просроченные = СтруктураПоказателя();
	МоиДокументы_Просроченные.Заголовок = НСтр("ru = 'Просрочено'; en = 'Overdue'");
	МоиДокументы_Просроченные.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиДокументы_Просроченные.Значение = Выборка.Количество;
	МоиДокументы_Просроченные.Ссылка = "МоиДокументы_Просроченные";
	МоиДокументы_Просроченные.ИмяПоказателя = "МоиДокументы_Просроченные";
	ЗначенияПоказателей.Добавить(МоиДокументы_Просроченные);
	
	ИндексЗапросРезультата = ИндексЗапросРезультата + 1;
	Выборка = Результаты[ИндексЗапросРезультата].Выбрать();
	Выборка.Следующий();
	ЗначениеМоиДокументы = СтруктураПоказателя();
	ЗначениеМоиДокументы.Заголовок = НСтр("ru = 'Мои документы'; en = 'My documents'");
	ЗначениеМоиДокументы.ЦветЗаголовка = ЦветТекста_Обычный;
	ЗначениеМоиДокументы.Значение = Выборка.Количество;
	ЗначениеМоиДокументы.Ссылка = "МоиДокументы";
	ЗначениеМоиДокументы.ИмяПоказателя = "МоиДокументы";
	ЗначенияПоказателей.Добавить(ЗначениеМоиДокументы);
	
	МоиДокументы_ВходящиеБезОтвета = СтруктураПоказателя();
	МоиДокументы_ВходящиеБезОтвета.Заголовок = НСтр("ru = 'Без ответа'; en = 'Unanswered'");
	МоиДокументы_ВходящиеБезОтвета.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	Если ДоступныИсходящиеДокументы Тогда
		ИндексЗапросРезультата = ИндексЗапросРезультата + 2;
		Выборка = Результаты[ИндексЗапросРезультата].Выбрать();
		Выборка.Следующий();
		МоиДокументы_ВходящиеБезОтвета.Значение = Выборка.Количество;
	КонецЕсли;
	МоиДокументы_ВходящиеБезОтвета.Ссылка = "МоиДокументы_ВходящиеБезОтвета";
	МоиДокументы_ВходящиеБезОтвета.ИмяПоказателя = "МоиДокументы_ВходящиеБезОтвета";
	ЗначенияПоказателей.Добавить(МоиДокументы_ВходящиеБезОтвета);
	
	МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения = СтруктураПоказателя();
	МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения.Заголовок = НСтр("ru = 'Истекают'; en = 'Expiring'");
	МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	Если ДоступныВнутренниеДокументы Тогда
		ИндексЗапросРезультата = ИндексЗапросРезультата + 2;
		Выборка = Результаты[ИндексЗапросРезультата].Выбрать();
		Выборка.Следующий();
		МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения.Значение = Выборка.Количество;
	КонецЕсли;
	МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения.Ссылка = 
		"МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения";
	МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения.ИмяПоказателя = 
		"МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения";
	ЗначенияПоказателей.Добавить(МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.МоиДокументы, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		ЗначениеМоиДокументы.Заголовок,
		ЗначениеМоиДокументы.Значение,
		ЗначениеМоиДокументы.Ссылка,
		ЗначениеМоиДокументы.ЦветЗаголовка,
		ЗначениеМоиДокументы.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(МоиДокументы_Просроченные);
	Показатели.Добавить(МоиДокументы_ВходящиеБезОтвета);
	Показатели.Добавить(МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения);
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		ЗначениеМоиДокументы.Ссылка,
		МоиДокументы_Просроченные.Ссылка,
		МоиДокументы_ВходящиеБезОтвета.Ссылка,
		МоиДокументы_ВнутренниеСИстекающимСрокомДействия_Исполнения.Ссылка);
	
КонецПроцедуры

// Заполняет виджет СВД в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетСВД(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК СВД_ЗагруженныеНаПроверку,
		|	0 КАК СВД_СОшибкой,
		|	0 КАК СВД_ГотовыеКОтправке
		|ПОМЕСТИТЬ ПоказателиСВД
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроверкаЗагруженныхДанных КАК ПроверкаЗагруженныхДанных
		|		ПО ВходящиеДокументы.Ссылка = ПроверкаЗагруженныхДанных.Объект
		|ГДЕ
		|	НЕ ВходящиеДокументы.ПометкаУдаления
		|	И ПроверкаЗагруженныхДанных.Проверен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	КОЛИЧЕСТВО(*),
		|	0
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ИсходящиеДокументы.Ссылка = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	(ИсходящиеДокументы.Ответственный = &ТекущийПользователь
		|			ИЛИ ИсходящиеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И ИсходящиеДокументы.Подготовил = &ТекущийПользователь)
		|	И НЕ ИсходящиеДокументы.ПометкаУдаления
		|	И КешИнформацииОбОбъектах.СостояниеСВД = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Ошибка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	КОЛИЧЕСТВО(ИсходящиеДокументы.Ссылка)
		|ИЗ
		|	Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ПО (ИсходящиеДокументы.Ссылка = ИсходящиеДокументыПолучатели.Ссылка)
		|ГДЕ
		|	ИсходящиеДокументы.ГотовКОтправке = ИСТИНА
		|	И ИсходящиеДокументы.ПометкаУдаления = ЛОЖЬ
		|	И ИсходящиеДокументыПолучатели.СпособОтправки = ЗНАЧЕНИЕ(Справочник.СпособыДоставки.СВД)
		|	И ИсходящиеДокументыПолучатели.Отправлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ПоказателиСВД.СВД_ЗагруженныеНаПроверку) КАК СВД_ЗагруженныеНаПроверку,
		|	СУММА(ПоказателиСВД.СВД_СОшибкой) КАК СВД_СОшибкой,
		|	СУММА(ПоказателиСВД.СВД_ГотовыеКОтправке) КАК СВД_ГотовыеКОтправке
		|ИЗ
		|	ПоказателиСВД КАК ПоказателиСВД";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначенияПоказателей = Новый Массив;
	
	ДокументыСВД = СтруктураПоказателя();
	ДокументыСВД.Заголовок = НСтр("ru = 'СВД'; en = 'EDES'");
	ДокументыСВД.ЦветЗаголовка = ЦветТекста_Обычный;
	ДокументыСВД.Ссылка = "СВД";
	
	СВД_ГотовыеКОтправке = СтруктураПоказателя();
	СВД_ГотовыеКОтправке.Заголовок = НСтр("ru = 'К отправке'; en = 'To send'");
	СВД_ГотовыеКОтправке.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	СВД_ГотовыеКОтправке.Значение = Выборка.СВД_ГотовыеКОтправке;
	СВД_ГотовыеКОтправке.Ссылка = "СВД_ГотовыеКОтправке";
	СВД_ГотовыеКОтправке.ИмяПоказателя = "СВД_ГотовыеКОтправке";
	ЗначенияПоказателей.Добавить(СВД_ГотовыеКОтправке);
	
	СВД_ЗагруженныеНаПроверку = СтруктураПоказателя();
	СВД_ЗагруженныеНаПроверку.Заголовок = НСтр("ru = 'На проверку'; en = 'For verification'");
	СВД_ЗагруженныеНаПроверку.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	СВД_ЗагруженныеНаПроверку.Значение = Выборка.СВД_ЗагруженныеНаПроверку;
	СВД_ЗагруженныеНаПроверку.Ссылка = "СВД_ЗагруженныеНаПроверку";
	СВД_ЗагруженныеНаПроверку.ИмяПоказателя = "СВД_ЗагруженныеНаПроверку";
	ЗначенияПоказателей.Добавить(СВД_ЗагруженныеНаПроверку);
	
	СВД_СОшибкой = СтруктураПоказателя();
	СВД_СОшибкой.Заголовок = НСтр("ru = 'С ошибкой'; en = 'With error'");
	СВД_СОшибкой.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	СВД_СОшибкой.Значение = Выборка.СВД_СОшибкой;
	СВД_СОшибкой.Ссылка = "СВД_СОшибкой";
	СВД_СОшибкой.ИмяПоказателя = "СВД_СОшибкой";
	ЗначенияПоказателей.Добавить(СВД_СОшибкой);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.СВД, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		ДокументыСВД.Заголовок,
		"",
		ДокументыСВД.Ссылка,
		ДокументыСВД.ЦветЗаголовка,
		ДокументыСВД.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(СВД_ГотовыеКОтправке);
	Показатели.Добавить(СВД_ЗагруженныеНаПроверку);
	Показатели.Добавить(СВД_СОшибкой);
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		ДокументыСВД.Ссылка,
		СВД_ГотовыеКОтправке.Ссылка,
		СВД_ЗагруженныеНаПроверку.Ссылка,
		СВД_СОшибкой.Ссылка);
	
КонецПроцедуры

// Заполняет виджет Мои файлы в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетМоиФайлы(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
		|		ПО Файлы.ТекущаяВерсия = ФайлыВРабочемКаталогеКомпьютера.Версия
		|			И (ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор)
		|			И (ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ)
		|ГДЕ
		|	Файлы.Редактирует = &ТекущийПользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоРедактируемыхФайлов = Выборка.Количество();
	
	СтрокиСписка = Новый Массив;
	
	ДопустимаяДлинаЗначения = 28;
	
	Пока Выборка.Следующий() Цикл
		СтрСписка = СтруктураПоказателяДляСписка();
		СтрСписка.Значение = ПредставлениеЗначения(Строка(Выборка.Ссылка), ДопустимаяДлинаЗначения);
		СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		
		СтрокиСписка.Добавить(СтрСписка);
	КонецЦикла;
	
	КоличествоСтрок = СтрокиСписка.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка);
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'Нет файлов
			|на редактировании';
			|en = 'No files
			|being edited'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	Показатели = ПоказателиВиджета(Справочники.Виджеты.МоиФайлы);
	
	ЦветЗначения = ЦветТекста_Обычный;
	
	Если Показатели[0].ИмяПоказателя = "МоиФайлы_РедактируемыеФайлы" 
		И Показатели[0].ПороговоеЗначение < КоличествоРедактируемыхФайлов Тогда
		
		ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	КонецЕсли;
	
	СсылкаНаЗаголовок = "МоиФайлы_РедактируемыеФайлы";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Я редактирую'; en = 'Edited by me'"),
		КоличествоРедактируемыхФайлов,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "МоиФайлы_РедактируемыеФайлы");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
	
КонецПроцедуры

// Заполняет виджет Почта в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетПочта(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	ПороговоеЗначениеДляЗаголовка = 0;
	ПороговоеЗначениеДляУчетнойЗаписи = 0;
	Показатели = ПоказателиВиджета(Справочники.Виджеты.Почта);
	Для Каждого СтрПоказатель Из Показатели Цикл
		Если Стрпоказатель.ИмяПоказателя = "Почта" Тогда
			ПороговоеЗначениеДляЗаголовка = СтрПоказатель.ПороговоеЗначение;
		ИначеЕсли Стрпоказатель.ИмяПоказателя = "Почта_УчетнаяЗапись" Тогда
			ПороговоеЗначениеДляУчетнойЗаписи = СтрПоказатель.ПороговоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеПисьма.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВходящиеПисьма.Ссылка КАК Письмо
		|ИЗ
		|	РегистрСведений.ПапкиПисемТекущихДел КАК ПапкиПисемТекущихДел
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящиеПисьма
		|		ПО ПапкиПисемТекущихДел.Папка = ВходящиеПисьма.Папка
		|			И (ПапкиПисемТекущихДел.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (ВходящиеПисьма.Ссылка = СведенияОПрочтении.Объект)
		|			И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
		|	И НЕ ВходящиеПисьма.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВходящиеПисьма.УчетнаяЗапись.Наименование
		|ИТОГИ
		|	КОЛИЧЕСТВО(Ссылка)
		|ПО
		|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбщееКоличествоНепрочитанныхПисем = 0;
	
	СтрокиСписка = Новый Массив;
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	КоличествоСтрок = 0;
	
	Если Выборка.Количество() > 1 Тогда
		
		ДопустимаяДлинаЗначения = 22;
		
		Пока Выборка.Следующий() Цикл
			
			Если КоличествоСтрок < МаксимальноеКоличествоСтрок Тогда
				ПредставлениеЗначения = ПредставлениеЗначения(
					Строка(Выборка.УчетнаяЗапись), ДопустимаяДлинаЗначения);
					
				ЦветЗначения = ЦветТекста_Обычный;
				Если ПороговоеЗначениеДляУчетнойЗаписи < Выборка.Письмо Тогда
					ЦветЗначения = ЦветТекста_ПросроченныеДанные;
				КонецЕсли;
				
				ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: <B><FONT color=""%2"">%3</FONT></B>'; en = '%1: <B><FONT color=""%2"">%3</FONT></B>'"),
					ПредставлениеЗначения,
					ЦветЗначения,
					Выборка.Письмо);
				
				СтрСписка = СтруктураПоказателяДляСписка();
				
				СтрСписка.Значение = ПредставлениеЗначения;
				
				СтрСписка.Ссылка = "Почта";
				
				СтрокиСписка.Добавить(СтрСписка);
			КонецЕсли;
			
			ОбщееКоличествоНепрочитанныхПисем = ОбщееКоличествоНепрочитанныхПисем + Выборка.Письмо;
			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
	Иначе
		Выборка.Следующий();
		ВыборкаПисем = Выборка.Выбрать();
		ОбщееКоличествоНепрочитанныхПисем = ВыборкаПисем.Количество();
		
		ДопустимаяДлинаЗначения = 25;
		
		Пока ВыборкаПисем.Следующий() Цикл
			СтрСписка = СтруктураПоказателяДляСписка();
			СтрСписка.Картинка = "";
			ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
				СтрСписка.Картинка, БиблиотекаКартинок.НепрочтенноеПисьмо);
			СтрСписка.Значение = ПредставлениеЗначения(
				Строка(ВыборкаПисем.Письмо), ДопустимаяДлинаЗначения);
			СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(ВыборкаПисем.Письмо);
			
			СтрокиСписка.Добавить(СтрСписка);
			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокиСписка.Количество() > 0 Тогда
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, Истина);
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'Нет новых писем'; en = 'No new emails'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	ЦветЗначения = ЦветТекста_Обычный;
	Если ПороговоеЗначениеДляЗаголовка < ОбщееКоличествоНепрочитанныхПисем Тогда
		ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	КонецЕсли;
	
	СсылкаНаЗаголовок = "Почта";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Почта'; en = 'Email'"),
		ОбщееКоличествоНепрочитанныхПисем,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "Почта");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
	
КонецПроцедуры

// Заполняет виджет Мероприятия в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетМероприятия(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиМероприятия.Мероприятие КАК Мероприятие
		|ПОМЕСТИТЬ МероприятияПользователя
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|ГДЕ
		|	УчастникиМероприятия.Исполнитель = &ТекущийПользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	(Мероприятия.Организатор = &ТекущийПользователь
		|			ИЛИ Мероприятия.Председатель = &ТекущийПользователь
		|			ИЛИ Мероприятия.Секретарь = &ТекущийПользователь
		|			ИЛИ Мероприятия.Подготовил = &ТекущийПользователь
		|			ИЛИ Мероприятия.Куратор = &ТекущийПользователь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Ссылка КАК Мероприятие,
		|	Мероприятия.ДатаНачала
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МероприятияПользователя КАК МероприятияПользователя
		|		ПО Мероприятия.Ссылка = МероприятияПользователя.Мероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|		ПО Мероприятия.Ссылка = СостоянияМероприятий.Мероприятие
		|ГДЕ
		|	Мероприятия.ДатаОкончания >= &ТекущаяДата
		|	И Мероприятия.ДатаНачала <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
		|	И НЕ Мероприятия.ПометкаУдаления
		|	И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Мероприятия.ДатаНачала";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДопустимаяДлинаЗначения = 23;
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	КоличествоСтрок = 0;
	
	СтрокиСписка = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтрСписка = СтруктураПоказателяДляСписка();
		СтрСписка.Значение = ПредставлениеЗначения(
			Строка(Выборка.Мероприятие), ДопустимаяДлинаЗначения);
		СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(Выборка.Мероприятие);
		СтрСписка.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			Формат(Выборка.ДатаНачала, "ДФ=dd.MM"));
		
		СтрокиСписка.Добавить(СтрСписка);
		
		КоличествоСтрок = КоличествоСтрок + 1;
	КонецЦикла;
	
	КоличествоМероприятийВБлижайшийМесяц = Выборка.Количество();
	
	Если СтрокиСписка.Количество() > 0 Тогда
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка,,Истина);
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'В ближайшее время
			|нет мероприятий';
			|en = 'No events any
			|time soon'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	Показатели = ПоказателиВиджета(Справочники.Виджеты.Мероприятия);
	
	ЦветЗначения = ЦветТекста_Обычный;
	Если Показатели[0].ИмяПоказателя = "Мероприятия" 
		И Показатели[0].ПороговоеЗначение < КоличествоСтрок Тогда
		
		ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	КонецЕсли;
	
	СсылкаНаЗаголовок = "Мероприятия";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Мероприятия'; en = 'Events'"),
		КоличествоМероприятийВБлижайшийМесяц,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "Мероприятия");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
	
КонецПроцедуры

// Заполняет виджет Календарь в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетКалендарь(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	
	ТаблицаСобытий = РаботаСРабочимКалендаремСервер.ПолучитьСобытияПользователя(
		ТекущаяДата,
		ДобавитьМесяц(ТекущаяДата, 1),
		ТекущийПользователь,
		Ложь);
	
	КоличествоСтрок = 0;
	ПоказыватьКартинки = Ложь;
	ДопустимаяДлинаЗначения = 23;
	Для Каждого СтрСобытий Из ТаблицаСобытий Цикл
		
		Если СтрСобытий.Цвет <> Перечисления.ЦветаРабочегоКалендаря.Нет Тогда
			ПоказыватьКартинки = Истина;
			ДопустимаяДлинаЗначения = 20;
			Прервать;
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок + 1;
		Если КоличествоСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрок = 0;
	СтрокиСписка = Новый Массив;
	Для Каждого СтрСобытий Из ТаблицаСобытий Цикл
		
		СтрСписка = СтруктураПоказателяДляСписка();
		
		Описание = СтрПолучитьСтроку(СтрСобытий.Наименование, 1);
		СтрСписка.Значение = ПредставлениеЗначения(
			Описание, ДопустимаяДлинаЗначения);
			
		СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(СтрСобытий.Ссылка);
		
		Если ПоказыватьКартинки Тогда
			КартинкаСобытия = КартинкаЦветаСобытияКалендаря(СтрСобытий.Цвет);
			Если КартинкаСобытия.Вид <> ВидКартинки.Пустая Тогда
				ОбзорОбъектовКлиентСервер.ДобавитьКартинку(СтрСписка.Картинка, КартинкаСобытия);
			КонецЕсли;
		КонецЕсли;
		
		СтрСписка.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			Формат(СтрСобытий.ДатаНачала, "ДФ=dd.MM"));
		
		СтрокиСписка.Добавить(СтрСписка);
		
		КоличествоСтрок = КоличествоСтрок + 1;
		Если КоличествоСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСобытий = ТаблицаСобытий.Количество();
	
	Если СтрокиСписка.Количество() > 0 Тогда
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, ПоказыватьКартинки, Истина);
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'В ближайшее время
			|нет событий';
			|en = 'No events any
			|time soon'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	Показатели = ПоказателиВиджета(Справочники.Виджеты.Календарь);
	
	ЦветЗначения = ЦветТекста_Обычный;
	Если Показатели[0].ИмяПоказателя = "Календарь" 
		И Показатели[0].ПороговоеЗначение < КоличествоСобытий Тогда
		
		ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	КонецЕсли;
	
	СсылкаНаЗаголовок = "Календарь";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Календарь'; en = 'Calendar'"),
		КоличествоСобытий,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "Календарь");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
	
КонецПроцедуры

// Заполняет виджет Форум в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетФорум(Параметры)
	
	// ТСК Близнюк С.И.; 09.11.2018; task#1634{
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.ТемыОбсуждений) Тогда
		Параметры.Форма.Элементы["HTML" + Параметры.ИндексВиджета].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// ТСК Близнюк С.И.; 09.11.2018; task#1634}
		
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияОбсуждений.Ссылка
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК МоиТемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|			ПО СообщенияОбсуждений.Ссылка = СведенияОПрочтении.Объект
		|				И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|		ПО СообщенияОбсуждений.ВладелецСообщения = МоиТемы.Ссылка
		|			И СообщенияОбсуждений.Автор <> &ТекущийПользователь
		|			И СообщенияОбсуждений.ПометкаУдаления = ЛОЖЬ
		|			
		|ГДЕ
		|	МоиТемы.Автор = &ТекущийПользователь
		|	И ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СообщенияОбсуждений.Ссылка
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК МоиСообщения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|			ПО СообщенияОбсуждений.Ссылка = СведенияОПрочтении.Объект
		|				И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|		ПО СообщенияОбсуждений.Родитель = МоиСообщения.Ссылка
		|			И СообщенияОбсуждений.Автор <> &ТекущийПользователь
		|			И СообщенияОбсуждений.ПометкаУдаления = ЛОЖЬ
		|ГДЕ
		|	МоиСообщения.Автор = &ТекущийПользователь
		|	И ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ";
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	НовыеОтветы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ТемыСообщений.Ссылка) КАК Форум
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК ТемыСообщений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО ТемыСообщений.Ссылка = СведенияОПрочтении.Объект
		|			И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
		|	И ТемыСообщений.ПометкаУдаления = ЛОЖЬ
		|	И ТемыСообщений.ЭтоГруппа = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(СообщенияОбсуждений.Ссылка) КАК Форум_НовыеОтветыНаСообщенияПользователя
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|ГДЕ
		|	СообщенияОбсуждений.Ссылка В (&НовыеОтветы)";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("НовыеОтветы", НовыеОтветы);
	
	Результаты = Запрос.ВыполнитьПакет();
	ЗначенияПоказателей = Новый Массив;
	
	ВыборкаФорум = Результаты[0].Выбрать();
	ВыборкаФорум.Следующий();
	Форум = СтруктураПоказателя();
	Форум.Заголовок = НСтр("ru = 'Форум'; en = 'Forum'");
	Форум.ЦветЗаголовка = ЦветТекста_Обычный;
	Форум.Значение = ВыборкаФорум.Форум;
	Форум.Ссылка = "Форум";
	Форум.ИмяПоказателя = "Форум";
	ЗначенияПоказателей.Добавить(Форум);
	
	ВыборкаНовыеОтветы = Результаты[1].Выбрать();
	ВыборкаНовыеОтветы.Следующий();
	Форум_НовыеОтветыНаСообщенияПользователя = СтруктураПоказателя();
	Форум_НовыеОтветыНаСообщенияПользователя.Заголовок = НСтр("ru = 'Новые ответы'; en = 'New replies'");
	Форум_НовыеОтветыНаСообщенияПользователя.ЦветЗаголовка = ЦветТекста_Обычный;
	Форум_НовыеОтветыНаСообщенияПользователя.Значение = ВыборкаНовыеОтветы.Форум_НовыеОтветыНаСообщенияПользователя;
	Форум_НовыеОтветыНаСообщенияПользователя.Ссылка = "Форум_НовыеОтветыНаСообщенияПользователя";
	Форум_НовыеОтветыНаСообщенияПользователя.ИмяПоказателя = "Форум_НовыеОтветыНаСообщенияПользователя";
	ЗначенияПоказателей.Добавить(Форум_НовыеОтветыНаСообщенияПользователя);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.Форум, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		Форум.Заголовок,
		Форум.Значение,
		Форум.Ссылка,
		Форум.ЦветЗаголовка,
		Форум.ЦветЗначения);
		
	Если ВыборкаНовыеОтветы.Форум_НовыеОтветыНаСообщенияПользователя > 0 Тогда
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<a href=%1><FONT color=""%2"">%3:%4</FONT><B><FONT color=""%5"">%6</FONT></B></a>",
			Форум_НовыеОтветыНаСообщенияПользователя.Ссылка,
			Форум_НовыеОтветыНаСообщенияПользователя.ЦветЗаголовка,
			СтрЗаменить(Форум_НовыеОтветыНаСообщенияПользователя.Заголовок, " ", "&nbsp;"),
			"&nbsp;",
			Форум_НовыеОтветыНаСообщенияПользователя.ЦветЗначения,
			Форум_НовыеОтветыНаСообщенияПользователя.Значение);
			
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	Иначе
		
		ТекстНовыеОтветы = НСтр("ru = 'Новых ответов
			|на мои сообщения нет';
			|en = 'No new replies
			|to my forum messages'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		Форум.Ссылка);
	
КонецПроцедуры

// Заполняет виджет Контроль в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетКонтроль(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 

		"ВЫБРАТЬ
		|	ИсполнителиРолейИДелегаты.РольПользователь
		|ПОМЕСТИТЬ Контролеры
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контроль.Ссылка,
		|	Контроль.СрокИсполнения,
		|	Контроль.Предмет
		|ПОМЕСТИТЬ ТекущиеКонтрольныеКарточки
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контролеры КАК Контролеры
		|		ПО Контроль.Контролер = Контролеры.РольПользователь
		|ГДЕ
		|	Контроль.ПоставленНаКонтроль
		|	И Контроль.СнятСКонтроля = ЛОЖЬ
		|	И Контроль.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Контроль
		|ИЗ
		|	ТекущиеКонтрольныеКарточки КАК ТекущиеКонтрольныеКарточки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Контроль_Просрочено
		|ИЗ
		|	ТекущиеКонтрольныеКарточки КАК ТекущиеКонтрольныеКарточки
		|ГДЕ
		|	ТекущиеКонтрольныеКарточки.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И НАЧАЛОПЕРИОДА(ТекущиеКонтрольныеКарточки.СрокИсполнения, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 4
		|	ТекущиеКонтрольныеКарточки.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТекущиеКонтрольныеКарточки.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет,
		|	ЕСТЬNULL(ВеткиПереписки.КорневоеПисьмо, ТекущиеКонтрольныеКарточки.Предмет) КАК Предмет
		|ИЗ
		|	ТекущиеКонтрольныеКарточки КАК ТекущиеКонтрольныеКарточки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВеткиПереписки КАК ВеткиПереписки
		|		ПО ТекущиеКонтрольныеКарточки.Предмет = ВеткиПереписки.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	ТекущиеКонтрольныеКарточки.СрокИсполнения";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ЗначенияПоказателей = Новый Массив;
	
	Выборка = Результаты[2].Выбрать();
	Выборка.Следующий();
	Контроль_ЗаголовокВиджета = СтруктураПоказателя();
	Контроль_ЗаголовокВиджета.Заголовок = НСтр("ru = 'Контроль'; en = 'Monitoring'");
	Контроль_ЗаголовокВиджета.ЦветЗаголовка = ЦветТекста_Обычный;
	Контроль_ЗаголовокВиджета.Значение = Выборка.Контроль;
	Контроль_ЗаголовокВиджета.Ссылка = "Контроль";
	Контроль_ЗаголовокВиджета.ИмяПоказателя = "Контроль";
	ЗначенияПоказателей.Добавить(Контроль_ЗаголовокВиджета);
	
	Выборка = Результаты[3].Выбрать();
	Выборка.Следующий();
	Контроль_Просрочено = СтруктураПоказателя();
	Контроль_Просрочено.Заголовок = НСтр("ru = 'Просрочено'; en = 'Overdue'");
	Контроль_Просрочено.ЦветЗаголовка = ЦветТекста_Обычный;
	Контроль_Просрочено.Значение = Выборка.Контроль_Просрочено;
	Контроль_Просрочено.Ссылка = "Контроль_Просрочено";
	Контроль_Просрочено.ИмяПоказателя = "Контроль_Просрочено";
	ЗначенияПоказателей.Добавить(Контроль_Просрочено);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.Контроль, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		Контроль_ЗаголовокВиджета.Заголовок,
		Контроль_ЗаголовокВиджета.Значение,
		Контроль_ЗаголовокВиджета.Ссылка,
		Контроль_ЗаголовокВиджета.ЦветЗаголовка,
		Контроль_ЗаголовокВиджета.ЦветЗначения);
		
	СтрокиСписка = Новый Массив;
	КоличествоДобавленныхСтрок = 0;
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	
	Если Выборка.Контроль_Просрочено > 0 Тогда
		СтрСписка = СтруктураПоказателяДляСписка();
		СтрСписка.Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1: <B><FONT color=""%2"">%3</FONT></B>",
			Контроль_Просрочено.Заголовок,
			Контроль_Просрочено.ЦветЗначения,
			Контроль_Просрочено.Значение);
		СтрСписка.Ссылка = Контроль_Просрочено.Ссылка;
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
			СтрСписка.Картинка, БиблиотекаКартинок.КартинкаКонтрольПросрочено16);
			
		СтрокиСписка.Добавить(СтрСписка);
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
	КонецЕсли;
	
	ДопустимаяДлинаЗначения = 26;
	Выборка = Результаты[4].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСписка = СтруктураПоказателяДляСписка();
		СтрСписка.Значение = ПредставлениеЗначения(
			Строка(?(ЗначениеЗаполнено(Выборка.Предмет), Выборка.Предмет, Выборка.Ссылка)),
			ДопустимаяДлинаЗначения);
		СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
			СтрСписка.Картинка, БиблиотекаКартинок.КартинкаНаКонтроле16);
		
		СтрокиСписка.Добавить(СтрСписка);
		КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
		
		Если КоличествоДобавленныхСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоВыведенныхСтрок = СтрокиСписка.Количество();
	
	Если КоличествоВыведенныхСтрок > 0 Тогда
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, Истина);
	Иначе
		
		ТекстНетОбъектовНаКонтроле = НСтр("ru = 'Нет ничего для контроля'; en = 'Nothing to monitor'");
		ТекстНетОбъектовНаКонтроле = СтрЗаменить(ТекстНетОбъектовНаКонтроле, " ", "&nbsp;");
		
		ТекстНетОбъектовНаКонтроле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНетОбъектовНаКонтроле);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНетОбъектовНаКонтроле);
	КонецЕсли;
	
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоВыведенныхСтрок, "Контроль");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		Контроль_ЗаголовокВиджета.Ссылка);
	
КонецПроцедуры

// Заполняет виджет Ежедневные отчеты в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетЕжедневныеОтчеты(Параметры)
	
	Форма = Параметры.Форма;
	
	Форма.Элементы["ГруппаДиаграмма" + Параметры.ИндексВиджета].Видимость = Истина;
	Форма.Элементы["HTML" + Параметры.ИндексВиджета].Видимость = Ложь;
	
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом {
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ФактическиеТрудозатраты) Тогда
		Форма.Элементы["ГруппаДиаграмма" + Параметры.ИндексВиджета].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом }
	
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	УчетВремениДиаграмма = Форма["Диаграмма" + ИндексВиджета];
	УчетВремениДиаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаСНакоплением;
	УчетВремениДиаграмма.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) КАК Период,
		|	СУММА(ФактическиеТрудозатраты.Длительность) КАК СуммарнаяДлительность
		|ПОМЕСТИТЬ ТрудозатратыПоДням
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.ДатаДобавления >= &НачалоНедели
		|	И ФактическиеТрудозатраты.ДатаДобавления <= &КонецНедели
		|	И ФактическиеТрудозатраты.Пользователь = &ТекущийПользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) КАК Период,
		|	РАЗНОСТЬДАТ(ЕжедневныйОтчет.НачалоДня, ЕжедневныйОтчет.ОкончаниеДня, СЕКУНДА) КАК ДлительностьДня,
		|	Время.СуммарнаяДлительность КАК Учтено
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрудозатратыПоДням КАК Время
		|		ПО (Время.Период = НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ))
		|ГДЕ
		|	ЕжедневныйОтчет.Дата >= &НачалоНедели
		|	И ЕжедневныйОтчет.Дата <= &КонецНедели
		|	И ЕжедневныйОтчет.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели(ТекущаяДата) - 2 * 86400);
	Запрос.УстановитьПараметр("КонецНедели", КонецНедели(ТекущаяДата));
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	УчетВремениДиаграмма.Обновление = Ложь;
	УчетВремениДиаграмма.ОтображатьЛегенду = Ложь;
	УчетВремениДиаграмма.ОтображатьЗаголовок = Ложь;
	УчетВремениДиаграмма.МинимальноеЗначение = 0;
	УчетВремениДиаграмма.МаксимальноеЗначение = 10;	
	УчетВремениДиаграмма.АвтоМаксимальноеЗначение = Ложь;
	УчетВремениДиаграмма.АвтоМинимальноеЗначение = Ложь;
	
	УчетВремениДиаграмма.ОбластьПостроения.Верх = 0;
	УчетВремениДиаграмма.ОбластьПостроения.Лево = 0;
	УчетВремениДиаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	УчетВремениДиаграмма.ОбластьПостроения.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	УчетВремениДиаграмма.КоличествоСерий = 3;
	УчетВремениДиаграмма.Серии[0].Цвет = ЦветаСтиля.ИнформационнаяНадпись;
	УчетВремениДиаграмма.Серии[0].Текст = "Учтено";
	
	УчетВремениДиаграмма.Серии[1].Цвет = WebЦвета.ГолубойСоСтальнымОттенком;
	УчетВремениДиаграмма.Серии[1].Текст = "Осталось";
	
	УчетВремениДиаграмма.Серии[2].Цвет = WebЦвета.ГолубойСКраснымОттенком;
	УчетВремениДиаграмма.Серии[1].Текст = НСтр("ru = 'Нет отчета'; en = 'No report'");
		
	ОбщийИтог = 0;
	
	НачалоОтсчета = НачалоНедели(ТекущаяДата) - 2 * 86400;
	
	// Заполнение точек графика
	УчетВремениДиаграмма.КоличествоТочек = 9;
	Для Сч = 0 По 8 Цикл
		
		ВременныйПериод = НачалоОтсчета + Сч * 86400;
		УчетВремениДиаграмма.Точки[Сч].Текст = НРег(Формат(ВременныйПериод, "ДФ=ddd"));
		УчетВремениДиаграмма.УстановитьЗначение(
			Сч, 
			0, 
			0,
			ВременныйПериод);
			
		УчетВремениДиаграмма.УстановитьЗначение(
			Сч, 
			2, 
			10,
			ВременныйПериод,
			НСтр("ru = 'Нет отчета'; en = 'No report'"));
		
	КонецЦикла;
	
	// Заполнение значений графика
	Пока Выборка.Следующий() Цикл
	
		ИндексТочки = (Выборка.Период - НачалоОтсчета)/86400;

		ДлительностьДня = ?(Выборка.ДлительностьДня = NULL, 0, Выборка.ДлительностьДня);
		Учтено = ?(Выборка.Учтено = NULL, 0, Выборка.Учтено);
		ОсталосьУчесть = ДлительностьДня - Учтено;
		ОсталосьУчесть = ?(ОсталосьУчесть < 0, 0, ОсталосьУчесть);
		
		ПодсказкаДляУчтено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Учтено %1'; en = 'Recorded %1'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(Учтено));
		
		УчетВремениДиаграмма.УстановитьЗначение(
			ИндексТочки, 
			0, 
			Окр(Учтено / 3600, 1),
			Выборка.Период,
			ПодсказкаДляУчтено);

		ПодсказкаДляОсталосьУчесть = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Осталось %1'; en = 'Left %1'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ОсталосьУчесть));
			
		УчетВремениДиаграмма.УстановитьЗначение(
			ИндексТочки, 
			1, 
			Окр(ОсталосьУчесть / 3600, 1),
			Выборка.Период,
			ПодсказкаДляОсталосьУчесть);
			
		УчетВремениДиаграмма.УстановитьЗначение(ИндексТочки, 2, 0);
			
		ОбщийИтог = ОбщийИтог + Учтено + ОсталосьУчесть;
		
	КонецЦикла;
	
	УчетВремениДиаграмма.Обновление = Истина;
	
	УчетВремениДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	Форма.Элементы["ПодписьПодДиаграммой" + Параметры.ИндексВиджета].Заголовок = 
		НСтр("ru = 'Ежедневные отчеты'; en = 'Daily work reports'");
		
	Форма["СсылкиОбластей" + Параметры.ИндексВиджета] = СтруктураСсылокОбластейВиджета();
	
КонецПроцедуры

// Заполняет виджет Мои дела в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетМоиДела(Параметры)
	
	Форма = Параметры.Форма;
	
	Форма.Элементы["ГруппаДиаграмма" + Параметры.ИндексВиджета].Видимость = Истина;
	Форма.Элементы["HTML" + Параметры.ИндексВиджета].Видимость = Ложь;
	
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	ГрафикНагрузкиДиаграмма = Форма["Диаграмма" + ИндексВиджета];
	ГрафикНагрузкиДиаграмма.ТипДиаграммы = ТипДиаграммы.График;
	ГрафикНагрузкиДиаграмма.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.Период, ДЕНЬ) КАК Период,
		|	СРЕДНЕЕ(ЗначенияПоказателей.Количество) КАК Количество
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейРаботыПользователя КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.Пользователь = &ТекущийПользователь
		|	И ЗначенияПоказателей.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.Период, ДЕНЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)";

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата) - 30 * 86400);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата));
	
	Результат = Запрос.Выполнить();
	
	ГрафикНагрузкиДиаграмма.Обновление = Ложь;
	
	ГрафикНагрузкиДиаграмма.ОтображатьЛегенду = Ложь;
	ГрафикНагрузкиДиаграмма.ОтображатьЗаголовок = Ложь;
	
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.Верх = 0;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.Лево = 0;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.ОриентацияМеток = 
		ОриентацияМетокДиаграммы.Горизонтально;
		
	ГрафикНагрузкиДиаграмма.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	
	ГрафикНагрузкиДиаграмма.КоличествоСерий = 1;	
	ГрафикНагрузкиДиаграмма.Серии[0].Цвет = ЦветаСтиля.ИнформационнаяНадпись;
	ГрафикНагрузкиДиаграмма.Серии[0].Текст = "";
	ГрафикНагрузкиДиаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
		
	КоличествоТочек = 0;
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоТочек = КоличествоТочек + 1;

		ГрафикНагрузкиДиаграмма.КоличествоТочек = КоличествоТочек;
		ГрафикНагрузкиДиаграмма.Точки[КоличествоТочек - 1].Текст = "";

		КоличествоОбъектов = ?(Выборка.Количество = NULL, 0, Выборка.Количество);
		КоличествоОбъектов = Окр(КоличествоОбъектов);
		
		ПодсказкаДляЗначения = Формат(Выборка.Период, "ДЛФ=DD") 
			+ " - " + Строка(КоличествоОбъектов);

		ГрафикНагрузкиДиаграмма.УстановитьЗначение(
			КоличествоТочек - 1, 
			0, 
			КоличествоОбъектов,,
			ПодсказкаДляЗначения);
		
	КонецЦикла;
	
	ГрафикНагрузкиДиаграмма.Обновление = Истина;
	
	ГрафикНагрузкиДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	Форма.Элементы["ПодписьПодДиаграммой" + Параметры.ИндексВиджета].Заголовок =
		НСтр("ru = 'Мои дела (за месяц)'; en = 'My duties (for month)'");
	
	Форма["СсылкиОбластей" + Параметры.ИндексВиджета] = СтруктураСсылокОбластейВиджета();
	
КонецПроцедуры

// Устанавливает цвет значениям показателей виджета в соответствии
// с настроенными пороговыми значениями показателей.
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты
//   ЗначенияПоказателей - Массив
//     - Структура - структура показателя, соответствует возвращаемому значению функции СтруктураПоказателя().
//
Процедура УстановитьЦветЗначениямПоказателей(Виджет, ЗначенияПоказателей)
	
	ПоказателиВиджета = ПоказателиВиджета(Виджет);
	
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	
	Для Каждого Показатель Из ПоказателиВиджета Цикл
		Для Каждого ЗначениеПоказателя Из ЗначенияПоказателей Цикл
			Если Показатель.ИмяПоказателя = ЗначениеПоказателя.ИмяПоказателя Тогда
				Если Показатель.ПороговоеЗначение < ЗначениеПоказателя.Значение Тогда
					ЗначениеПоказателя.ЦветЗначения = ЦветТекста_ПросроченныеДанные;
				Иначе
					ЗначениеПоказателя.ЦветЗначения = ЦветТекста_Обычный;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РасчетПоказателейРаботыПользователей

Процедура РассчитатьПоказателиПочтыДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту");
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИспользованиеПочты.Пользователь
			|ИЗ
			|	РегистрСведений.ИспользованиеПочты КАК ИспользованиеПочты
			|ГДЕ
			|	ИспользованиеПочты.НастройкаИспользоватьВстроеннуюПочту
			|	И ИспользованиеПочты.Пользователь В(&Пользователи)";

		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		
		ПользователиСПочтой = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		Если ПользователиСПочтой.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПисемТекущихДел.Пользователь КАК Пользователь,
			|	ПапкиПисемТекущихДел.Папка КАК Папка
			|ПОМЕСТИТЬ ПапкиПользователей
			|ИЗ
			|	РегистрСведений.ПапкиПисемТекущихДел КАК ПапкиПисемТекущихДел
			|ГДЕ
			|	ПапкиПисемТекущихДел.Пользователь В(&Пользователи)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Папка,
			|	Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПользователей.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ПапкиПользователей КАК ПапкиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящиеПисьма
			|		ПО ПапкиПользователей.Папка = ВходящиеПисьма.Папка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
			|		ПО (ВходящиеПисьма.Ссылка = СведенияОПрочтении.Объект)
			|			И (СведенияОПрочтении.Пользователь = ПапкиПользователей.Пользователь)
			|ГДЕ
			|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
			|	И НЕ ВходящиеПисьма.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПапкиПользователей.Пользователь";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиСПочтой);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, Перечисления.ТипыПоказателейРаботы.НепрочитанныеПисьма);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'; en = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура РассчитатьПоказателиЗадачДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");		
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Пользователь
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ПользователиДляРасчета)
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ИсполнителиЗадач.Исполнитель = ЗадачаИсполнителя.ТекущийИсполнитель
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО (ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача)
			|ГДЕ
			|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
			|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
			|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсполнителиЗадач.Пользователь";
		
		Запрос.УстановитьПараметр("ПользователиДляРасчета", ПользователиДляРасчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, 
			Перечисления.ТипыПоказателейРаботы.АктивныеЗадачи); 
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'; en = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

Процедура РассчитатьПоказателиКалендаряДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");		
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
			|ГДЕ
			|	ЗаписиРабочегоКалендаря.Пользователь В(&Пользователи)
			|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
			|	И ЗаписиРабочегоКалендаря.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И ЗаписиРабочегоКалендаря.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаписиРабочегоКалендаря.Пользователь";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, 
			Перечисления.ТипыПоказателейРаботы.ЗаписиКалендаря); 
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'; en = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры	

Процедура РассчитатьПоказателиМероприятийДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями");
		
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УчастникиМероприятия.Исполнитель КАК Пользователь,
			|	УчастникиМероприятия.Мероприятие КАК Мероприятие
			|ПОМЕСТИТЬ ПользователиМероприятия
			|ИЗ
			|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
			|ГДЕ
			|	УчастникиМероприятия.Исполнитель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Организатор,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Организатор В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Председатель,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Председатель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Секретарь,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Секретарь В(&Пользователи)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиМероприятия.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ПользователиМероприятия КАК ПользователиМероприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК СправочникМероприятия
			|		ПО ПользователиМероприятия.Мероприятие = СправочникМероприятия.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
			|		ПО (СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
			|			И (СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка)
			|ГДЕ
			|	СправочникМероприятия.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И СправочникМероприятия.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И НЕ СправочникМероприятия.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПользователиМероприятия.Пользователь";
			
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка,
			Перечисления.ТипыПоказателейРаботы.Мероприятия); 

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'; en = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

Процедура РассчитатьПоказателиКонтроляДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
		
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Пользователь
			|ПОМЕСТИТЬ Контролеры
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ПользователиДляРасчета)
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контролеры.Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контролеры КАК Контролеры
			|		ПО Контроль.Контролер = Контролеры.Исполнитель
			|ГДЕ
			|	Контроль.ПоставленНаКонтроль
			|	И НЕ Контроль.ПометкаУдаления
			|	И НЕ Контроль.СнятСКонтроля
			|
			|СГРУППИРОВАТЬ ПО
			|	Контролеры.Пользователь";
			
		Запрос.УстановитьПараметр("ПользователиДляРасчета", ПользователиДляРасчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка,
			Перечисления.ТипыПоказателейРаботы.НаКонтроле); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'; en = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
