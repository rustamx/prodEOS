// Открывает форму выбора дела
Процедура ВыбратьДело(ЭлементДело, Параметры) Экспорт
	
	ПараметрыФормы = Параметры;
	ПараметрыФормы.Вставить("РежимВыбора", "ИзКарточкиДокумента");
	
	ОткрытьФорму("Справочник.ДелаХраненияДокументов.ФормаВыбора", ПараметрыФормы, ЭлементДело);
	
КонецПроцедуры	

// Открывает форму выбора получателя
Процедура ВыбратьПолучателя(ЭлементПолучатель, РеквизитПолучатель) Экспорт
	
	ПараметрыФормы = Новый Структура("Получатель", РеквизитПолучатель);
	ОткрытьФорму("ОбщаяФорма.ВыборКонтрагентаКонтактноеЛицо", ПараметрыФормы, ЭлементПолучатель);
	
КонецПроцедуры	

// Выполняет проверки перед закрытием документа 
Процедура ПередЗакрытиемДокумента(Объект, Отказ, ФормаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("СообщениеВопрос", 		НСтр("ru = 'Закрыть карточку?'; en = 'Close the form?'"));
	ПараметрыФормы.Вставить("СообщениеЗаголовок", 	НСтр("ru = 'Некоторые файлы заняты вами для редактирования:'; en = 'Some files are locked by you for editing:'"));
	ПараметрыФормы.Вставить("Заголовок", 			Строка(Объект.Ссылка));
	ПараметрыФормы.Вставить("ВладелецФайла", 		Объект.Ссылка);
	ПараметрыФормы.Вставить("Редактирует", 			ТекущийПользователь);
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ФормаДокумента", ФормаДокумента);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВопросаОЗакрытииФормыДокументаПриЗанятыхФайлах", 
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
				
	РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
	Если ПараметрыФормы.КоличествоЗанятыхФайлов > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗавершениеВопросаОЗакрытииФормыДокументаПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Параметры.ФормаДокумента.ЗакрытьФормуПриНаличииЗанятыхФайлов = Истина;
		Параметры.ФормаДокумента.Закрыть();
	Иначе
		Параметры.ФормаДокумента.ЗакрытьФормуПриНаличииЗанятыхФайлов = Ложь;
		Если ТипЗнч(Параметры.ФормаДокумента.Объект.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			Параметры.ФормаДокумента.ЗакрытьНезарегистрированныйДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму предупреждения при регистрации документа
Процедура ПредупредитьПриРегистрации(ОписаниеОповещения) Экспорт
	
	ПоказыватьПредупреждениеПриРегистрации = 
		ДелопроизводствоКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСДокументами().ПоказыватьПредупреждениеПриРегистрации;
		
	Если ПоказыватьПредупреждениеПриРегистрации = Истина Тогда 
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОтветаНаВопрос = Новый ОписаниеОповещения(
			"ПредупредитьПриРегистрацииПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриРегистрации",,,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры	

Процедура ПредупредитьПриРегистрацииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	
КонецПроцедуры

// Открывает форму предупреждения при перерегистрации документа
Функция ПредупредитьПриПеререгистрации(ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияПриЗакрытииВопроса = Новый ОписаниеОповещения(
		"ПредупредитьПриПеререгистрацииПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Документ будет перерегистрирован. Продолжить?'; en = 'The document will be registered again. Continue?'");
	ПоказатьВопрос(ОписаниеОповещенияПриЗакрытииВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецФункции

Процедура ПредупредитьПриПеререгистрацииПродолжение(Ответ, Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ = КодВозвратаДиалога.Да);	
	
КонецПроцедуры

// Открывает форму записи журнала передачи документа
Процедура ОткрытьКарточкуПередачиДокумента(Документ, ВладелецФормы) Экспорт
	
	Количество = Делопроизводство.КоличествоКомуПереданДокумент(Документ);
	
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		ПараметрыФормы = Новый Структура("ПоказатьДержателяДокумента", Документ);
		ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.ФормаЗаписи", ПараметрыФормы, ВладелецФормы);
	Иначе
		ПараметрыФормы = Новый Структура("ПоказатьДержателейДокумента", Документ);
		ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.Форма.ФормаСпискаДокумента", ПараметрыФормы, ВладелецФормы);
	КонецЕсли;	
	
КонецПроцедуры	

// Показывает форму вопроса с возможностью сохранения ответа в персональные настройки
// Параметры:
//		ЭлементВладелец - элемент формы, который будет владельцем открываемой формы с вопросом
//		Заголовок вопроса - заголовок для формы вопроса
//		ТекстВопроса - формулировка вопроса
//		КлючПерсональнойНастройкиПоказаВопроса - ключ персональной настройки, хранящей флаг необходимости показа формы
//		ИмяПерсональнойНастройкиПоказаВопроса - имя персональной настройки, хранящей флаг необходимости показа формы
//		СписокДоступныхВариантов - список доступных вариантов ответов на вопрос
//		ВариантОтветаПоУмолчанию - вариант ответа, который будет помечен как вариант ответа по умолчанию
// Возвращает:
//		Значение типа КодВозвратаДиалога
Процедура ПоказатьРасширеннуюФормуВопроса(
	ЭлементВладелец,
	ЗаголовокВопроса,
	ТекстВопроса,
	КлючПерсональнойНастройкиПоказаВопроса,
	ИмяПерсональнойНастройкиПоказаВопроса,
	СписокДоступныхВариантов,
	ВариантОтветаПоУмолчанию = "Да",
	ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокВопроса);
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыФормы.Вставить("СписокДоступныхВариантов", СписокДоступныхВариантов);
	ПараметрыФормы.Вставить("КлючПерсональнойНастройки", КлючПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ИмяПерсональнойНастройки", ИмяПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ВариантОтветаПоУмолчанию", ВариантОтветаПоУмолчанию);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПоказатьРасширеннуюФормуВопросаПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	ПоказыватьФормуВопроса = Делопроизводство.ПолучитьНастройкуПользователя(КлючПерсональнойНастройкиПоказаВопроса,
		ИмяПерсональнойНастройкиПоказаВопроса);
	
	Если ТипЗнч(ПоказыватьФормуВопроса) = Тип("Булево") И НЕ ПоказыватьФормуВопроса Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Неопределено);
	Иначе 
		ОткрытьФорму(
			"ОбщаяФорма.РасширенныйВопрос", 
			ПараметрыФормы, 
			ЭлементВладелец,,,,
			ОписаниеОповещенияОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьРасширеннуюФормуВопросаПродолжение(Ответ, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ответ) Или Ответ = Ложь Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ); 
		Возврат;
	КонецЕсли;
	
	ЗначениеДляВозврата = Неопределено;
	
	Если Ответ = НСтр("ru = 'Да'; en = 'Yes'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Да;
	ИначеЕсли Ответ = НСтр("ru = 'Нет'; en = 'No'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Нет;
	ИначеЕсли Ответ = НСтр("ru = 'ОК'; en = 'OK'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.ОК;
	ИначеЕсли Ответ = НСтр("ru = 'Отмена'; en = 'Cancel'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Отмена;
	ИначеЕсли Ответ = НСтр("ru = 'Повторить'; en = 'Retry'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Повторить;
	ИначеЕсли Ответ = НСтр("ru = 'Прервать'; en = 'Abort'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Прервать;
	ИначеЕсли Ответ = НСтр("ru = 'Пропустить'; en = 'Ignore'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Пропустить;
	ИначеЕсли Ответ = НСтр("ru = 'Таймаут'; en = 'Timeout'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Таймаут;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ЗначениеДляВозврата);
	
КонецПроцедуры

// Копирует файл из временного хранилища на клиента и открывает его для просмотра
//
Процедура ОткрытьФайлИзВременногоХранилища(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось подключить расширение работы с файлами.'; en = 'Failed to employ the extension for work with files.'"));
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'; en = 'Failed to get file. Perhaps it was deleted.'"));
		Возврат;
	КонецЕсли;
	
	ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла(ИмяФайла);
	Если ПустаяСтрока(ПолноеИмяВременногоФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось создать временный файл.'; en = 'Could not create a temporary file.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать временный файл.
			|%1';
			|en = 'Unable to write temporary file.
			|%1'"),
			СообщениеОбОшибке));
		Возврат;
	КонецПопытки;	
	
	ОткрытьФайлНаДиске(ПолноеИмяВременногоФайла, ИмяФайла);
	
КонецПроцедуры

Процедура ОткрытьФайлНаДиске(ПолноеИмяФайла, ИмяФайла) Экспорт
	
	Попытка
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
	Исключение
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл %1
				|%2';
				|en = 'Could not open file %1
				|%2'"),
			ИмяФайла,
			ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'; en = 'Extension for work with files is not loaded!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

Функция ПолучитьПолноеИмяВременногоФайла(ИмяФайла) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат "";
	#Иначе
		Возврат ПолучитьИмяВременногоКаталога() + "\" + ИмяФайла;
	#КонецЕсли
	
КонецФункции

#Если Не ВебКлиент Тогда
Функция ПолучитьИмяВременногоКаталога()
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяВременногоКаталога);
	Возврат ИмяВременногоКаталога;
	
КонецФункции
#КонецЕсли

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоХранилища(Форма, АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоХранилищаЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоХранилищаЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		
		ИмяБезРасширения = ПараметрыВыполнения.ИмяФайла;
		Расширение = "";
		МассивСтрок = СтрРазделить(ПараметрыВыполнения.ИмяФайла, ".", Ложь);
		Если МассивСтрок.Количество() >= 2 Тогда
			ИмяБезРасширения = МассивСтрок[0];
			Расширение = МассивСтрок[МассивСтрок.Количество()-1];
		КонецЕсли;	
		
		РазмерФайла = 0;
		#Если Не ВебКлиент Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыВыполнения.АдресВоВременномХранилище);
			РазмерФайла = ДвоичныеДанные.Размер();
		#КонецЕсли	
		
		СведенияОФайле.ВремяИзменения = ТекущаяДата();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
		СведенияОФайле.АдресВременногоХранилищаФайла = ПараметрыВыполнения.АдресВоВременномХранилище;
		СведенияОФайле.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		СведенияОФайле.РасширениеБезТочки = Расширение;
		СведенияОФайле.Размер = РазмерФайла;
		СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
		
		Файл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			Папка,
			СведенияОФайле);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Создан файл:'; en = 'File created:'"), 
			ПолучитьНавигационнуюСсылку(Файл),
			Строка(Файл),
			БиблиотекаКартинок.Информация32);
			
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'; en = 'Failed to save the file.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоФайлаНаДиске(Форма, ПолноеИмяФайла, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоФайлаНаДискеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоФайлаНаДискеЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		Файл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПараметрыВыполнения.ПолноеИмяФайла,
			Папка,
			ПараметрыВыполнения.Форма,
			Ложь, //НеОткрыватьКарточкуПослеСозданияИзФайла
			ПараметрыВыполнения.ИмяФайла);
		
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'; en = 'Failed to save the file.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

Функция ВыбратьПапку(ОбработчикРезультата)

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("ВыбратьПапкуЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора",,,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура ВыбратьПапкуЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Папка = Результат;
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Папка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура НайтиСтрокуДереваПоСсылке(Ссылка, Дерево, Идентификатор) Экспорт 
	
	Если Идентификатор <> Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка.Ссылка = Ссылка Тогда 
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
		
		НайтиСтрокуДереваПоСсылке(Ссылка, Строка, Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВвестиСтрокуСЗаголовком(Значение, Заголовок = "", Надпись = "", Длина = 0, ОписаниеОповещения) Экспорт 
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения(
		"ВвестиСтрокуСЗаголовкомПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Значение", Значение);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("Надпись", Надпись);
	ПараметрыФормы.Вставить("Длина", Длина);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводСтрокиСЗаголовком", 
		ПараметрыФормы,,,,,
		ОписаниеОповещенияОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
КонецПроцедуры

Процедура ВвестиСтрокуСЗаголовкомПродолжение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") И ЗначениеЗаполнено(Результат) Тогда 
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;		
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	
КонецПроцедуры

// Определить значение параметра по переданной строке 
//
// Параметры
//  Текст				– строка – строка, в которой осуществляется поиск значения
//  ТекстПоиска	 		- строка - строка, для которой ищется значение
//
// Возвращаемое значение:
//   СтрокаКоличество   – строка - строковое представление значения
//
Функция ОпределитьЗначениеПараметраВСтроке(Текст, ТекстПоиска)
	
	СтрокаКоличество = "";
	ДлинаТекстаПоиска = СтрДлина(ТекстПоиска) + 1;
	НачальнаяПозиция = Найти(Текст,ТекстПоиска) + ДлинаТекстаПоиска;
	
	Для НомСимвола = НачальнаяПозиция По СтрДлина(Текст) Цикл
			
		Если Сред(Текст, НомСимвола, 1) = "," Тогда
			Если НачальнаяПозиция = НомСимвола Тогда
				СтрокаКоличество = "0";
			КонецЕсли;	
			Прервать;
		КонецЕсли;
		
		СтрокаКоличество = СтрокаКоличество + Сред(Текст, НомСимвола, 1);
		
	КонецЦикла;
	
	Если ДлинаТекстаПоиска > 0 И Не ЗначениеЗаполнено(СтрокаКоличество) Тогда
		СтрокаКоличество = "0";
	КонецЕсли;	
	
    Возврат СтрокаКоличество;
	
КонецФункции	

// Определяет состав документа по переданной строке
// Параметры:
//		ДокументСсылка  - УправляемаяФорма Входящего, Исходящего или Внутреннего документа  - форма документа, для которого определяется состав
//		СоставСтрока    - Строка - строка определения состава
//		НачальныйСостав - Строка - предыдущий вариант состава
//
// Возвращаемое значение:
//   - Структура – структура с составом документа и отказом, в случае ошибки
//
Функция ПолучитьСоставДокумента(ДокументСсылка, СоставСтрока, НачальныйСостав) Экспорт
	
	Если Не ЗначениеЗаполнено(СоставСтрока) Тогда
		ДокументСсылка.КоличествоЛистов = 0;
		ДокументСсылка.КоличествоПриложений = 0;
		ДокументСсылка.КоличествоЭкземпляров = 0;
		ДокументСсылка.ЛистовВПриложениях = 0;	    
		НачальныйСостав = Неопределено;
		Возврат Новый Структура("Отказ, Состав", Ложь, НачальныйСостав);
	КонецЕсли;	
	
	ИтКоличествоЛистов = 0;
	ИтКоличествоПриложений = 0;
	ИтКоличествоЭкземпляров = 0;
	ИтЛистовВПриложениях = 0;

	Текст = НРег(СоставСтрока);	
	Если Найти(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'")) > 0 Тогда
		КоличествоЛистовВПриложениях =  ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'"));		
		
		Попытка
			Количество = Число(КоличествоЛистовВПриложениях);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов в приложениях ""%1""'; en = 'Invalid value for number of sheets in annexes ""%1""'"), КоличествоЛистовВПриложениях));
			СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтЛистовВПриложениях = Количество;
		
		Если Найти(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'") + " " + КоличествоЛистовВПриложениях) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'") + " " + КоличествоЛистовВПриложениях, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'"), "");
		КонецЕсли;	

	Иначе
		ИтЛистовВПриложениях = 0;
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'листов'; en = 'sheets'")) > 0 Тогда
		КоличествоЛистов =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'листов'; en = 'sheets'"));		
		
		Попытка
			Количество = Число(КоличествоЛистов);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов ""%1""'; en = 'Invalid value of number of sheets ""%1""'"), КоличествоЛистов));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока);
		КонецПопытки;	
			
		ИтКоличествоЛистов = Количество;
		
		Если Найти(Текст, НСтр("ru = 'листов'; en = 'sheets'") + " " + КоличествоЛистов) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'; en = 'sheets'") + " " + КоличествоЛистов, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'; en = 'sheets'"), "");
		КонецЕсли;	
	Иначе
		ИтКоличествоЛистов = 0;	
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'экземпляров'; en = 'instances'")) > 0 Тогда
		КоличествоЭкземпляров =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'экземпляров'; en = 'instances'"));		
		
		Попытка
			Количество = Число(КоличествоЭкземпляров);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества экземпляров ""%1""'; en = 'Invalid value for number of  issues ""%1""'"), КоличествоЭкземпляров));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтКоличествоЭкземпляров = Количество;
		
		Если Найти(Текст, НСтр("ru = 'экземпляров'; en = 'instances'") + " " + КоличествоЭкземпляров)>0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'; en = 'instances'") + " " + КоличествоЭкземпляров, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'; en = 'instances'"), "");
		КонецЕсли;

	Иначе
		ИтКоличествоЭкземпляров = 0;		
	КонецЕсли;	
	
	Если ИтКоличествоЭкземпляров < 1 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества экземпляров ""%1""'; en = 'Invalid value for number of  issues ""%1""'"), ИтКоличествоЭкземпляров));
		СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
    КонецЕсли;

	Если ИтКоличествоЛистов < 1 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов ""%1""'; en = 'Invalid value of number of sheets ""%1""'"), ИтКоличествоЛистов));
		СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
	КонецЕсли;
	
	Если Найти(НРег(Текст), НСтр("ru = 'приложений'; en = 'annexes'")) > 0 Тогда
		
		КоличествоПриложений =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'приложений'; en = 'annexes'"));		
		
		Попытка
			Количество = Число(КоличествоПриложений);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества приложений ""%1""'; en = 'Invalid value for number of annexes ""%1""'"), КоличествоПриложений));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтКоличествоПриложений = Количество;
		
		Если Найти(Текст, НСтр("ru = 'приложений'; en = 'annexes'") + " " + КоличествоПриложений) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'; en = 'annexes'") + " " + КоличествоПриложений, "");		
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'; en = 'annexes'"), "");
		КонецЕсли;	
	Иначе
		ИтКоличествоПриложений = 0;	
	КонецЕсли;
	Текст = СтрЗаменить(Текст, ",", "");
	
	Если ЗначениеЗаполнено(СокрЛП(Текст)) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Введено некорректное значение состава документа ""%1""'; en = 'Entered incorrect value for the document contents, ""%1""'"), СокрЛП(Текст)));
				СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
	КонецЕсли;
	
	ДокументСсылка.КоличествоЛистов = ИтКоличествоЛистов;
	ДокументСсылка.КоличествоПриложений = ИтКоличествоПриложений;
	ДокументСсылка.КоличествоЭкземпляров = ИтКоличествоЭкземпляров;
	ДокументСсылка.ЛистовВПриложениях = ИтЛистовВПриложениях;
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(ДокументСсылка);

	Возврат Новый Структура("Отказ, Состав", Ложь, СоставСтрока);
	
КонецФункции

// Проверяет тип параметра на принадлежность к типу измерения «Документ» регистра сведений «СвязиДокументов»
//
// Параметры
//  ОбъектОснование		– Любая ссылка – объект, на основании которого создается связь
//  СвязуемыйОбъект		– Любая ссылка – объект, который проверяем на возможность создания связи
//
// Возвращаемое значение:
//   Булево - Истина, если объект является одним из проверяемых типов данных
//
Функция ДокументыМожноСвязать(ОбъектОснование, СвязуемыйОбъект) Экспорт
	
	Если ОбъектОснование <> СвязуемыйОбъект
		И (ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ВнутренниеДокументы")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ВходящиеДокументы")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ИсходящиеДокументы")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныВходящихДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.Файлы")) Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

// Обновляет данные одного файла в строке списка в карточке документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
Процедура ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал = Ложь, ОтметитьЗахваченныеФайлы = Ложь) Экспорт 
	
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтруктураДанных = Делопроизводство.ПолучитьДанныеФайлаДляСписка(
				Файл, ЗаполнитьПризнакОригинал, ОтметитьЗахваченныеФайлы);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает нажатие на HTML поле "Обзор" 
//
Процедура ОбработатьНажатиеНаПолеОбзор(Объект, НавигационнаяСсылкаПоля, Параметры) Экспорт 
	
	Если Найти(НавигационнаяСсылкаПоля, "message") > 0 Тогда 	
		
		АдресПочты = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "message", ""));
		
		Если Параметры.Свойство("ЭтоСписок") И Параметры.ЭтоСписок Тогда
			РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты
				,,,,,, Объект);
		Иначе 
			РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты
				,,,,,, Объект.Ссылка);
		КонецЕсли;
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "period") > 0 Тогда 
		
		ИзменитьСрокДействияДокумента(Объект, Параметры);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "status") > 0  Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДляПросмотра", Параметры.ЗапретитьРучноеИзменениеСостоянияДокументов);
		
		Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Объект.Ссылка) Тогда
			ПараметрыФормы.Вставить("ИспользоватьПодписание", Параметры.ЭтаФорма.ИспользоватьПодписание);
		КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, Параметры.ЭтаФорма,,,,
			Параметры.ОписаниеОбработатьСтатус, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "dossier") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.Дело);
		ОткрытьФорму("Справочник.ДелаХраненияДокументов.Форма.ФормаЭлемента", ПараметрыФормы, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "holder") > 0 Тогда 	
		
		ОткрытьКарточкуПередачиДокумента(Объект.Ссылка, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "storage") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Параметры.МестоХранения);
		ОткрытьФорму("Справочник.МестаХраненияДел.Форма.ФормаЭлемента", ПараметрыФормы, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "site") > 0 Тогда 	
		
		АдресСсылки = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "site", ""));
		УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", АдресСсылки, 
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница"));
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "contactpersons") > 0 Тогда 	
		
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКЛ", Объект, Истина);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "calendar") > 0 Тогда 	
		
		РаботаСРабочимКалендаремКлиент.ПоказатьКалендарьПользователя(Объект.Ссылка);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "room") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.Помещение);
		ОткрытьФорму("Справочник.ТерриторииИПомещения.ФормаОбъекта", ПараметрыФормы, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "phase") > 0 Тогда 
		
		Попытка
			Параметры.ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Параметры.ЭтаФорма.Элементы.ГруппаЭтапы;
		Исключение
		КонецПопытки;
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
	КонецЕсли;
	
КонецПроцедуры

//Открывает форму для изменения срока действия документа
//
Процедура ИзменитьСрокДействияДокумента(Объект, Параметры) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
	ПараметрыФормы.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
	ПараметрыФормы.Вставить("Бессрочный", Объект.Бессрочный);
	ПараметрыФормы.Вставить("ПорядокПродления", Объект.ПорядокПродления);
	ПараметрыФормы.Вставить("Пользователь", Параметры.ТекущийПользователь);
	ПараметрыФормы.Вставить("ДокументИсточникИзменения", Параметры.СрокДействияДокументИсточникИзменения);
	ПараметрыФормы.Вставить("Комментарий", Параметры.СрокДействияКомментарий);
	
	Если Параметры.Свойство("НеИзменятьСрокДействия") Тогда 
		ПараметрыФормы.Вставить("НеИзменятьСрокДействия", Параметры.НеИзменятьСрокДействия);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ИзменениеСрокаДействия",
		ПараметрыФормы, 
		Параметры.ЭтаФорма,,,,
		Параметры.ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Обработчик команды "ПометитьНаУдаление" таблицы Файлы в карточке документа
//
// Параметры
//   Форма                - УправляемаяФорма - форма документа, в котором файлы помечаются на удаление
//   ОбработчикОповещения - ОписаниеОповещения - обработчик, в который необходимо
//     передать массив обрабатываемых файлов.
//   ЭтоСписок            - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ПометитьФайлыДокументаНаУдаление(Форма, ОписаниеОповещения, ЭтоСписок = Ложь) Экспорт
	
	ПометкаУдаления = Ложь; НаименованиеФайла = ""; ПодписанЭП = Ложь;
	МассивФайлов = Новый Массив;
	
	Если ЭтоСписок Тогда 
		Если Форма.ИмяФормы = "РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы" Тогда 
			ИмяСписка = "Файлы";
		Иначе 
			ИмяСписка = "ФайлыДокумента";
		КонецЕсли;
	Иначе
		Попытка
			Если Форма.Элементы.Обзор.Видимость Тогда 
				ИмяСписка = "Файлы";
			Иначе 
				ИмяСписка = "ФайлыСоздание";
			КонецЕсли;
		Исключение
			ИмяСписка = "Файлы";
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого ВыбраннаяСтрока Из Форма.Элементы[ИмяСписка].ВыделенныеСтроки Цикл
		ДанныеСтроки = Форма.Элементы[ИмяСписка].ДанныеСтроки(ВыбраннаяСтрока);
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		НаименованиеФайла = ДанныеСтроки.Наименование;
		
		Если Не ПометкаУдаления Тогда 
			ПометкаУдаления = ДанныеСтроки.ПометкаУдаления;
		КонецЕсли;
		Если Не ПодписанЭП Тогда
			ПодписанЭП = ДанныеСтроки.ПодписанЭП;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоФайлов = МассивФайлов.Количество();
	
	Если КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоФайлов > 1 Тогда 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = НСтр("ru = 'Пометить выделенные файлы на удаление?'; en = 'Mark selected files for deletion?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных файлов пометку на удаление?'; en = 'Remove deletion mark from the selected files?'");
		КонецЕсли;
	Иначе 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
				НаименованиеФайла);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
				НаименованиеФайла);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПометкаУдаления", ПометкаУдаления);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПодписанЭП", ПодписанЭП);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Оповещает динамические списки об изменении объекта, в том числе динамические списки 
// регистров ДанныеВходящихДокументов, ДанныеИсходящихДокументов, ДанныеВнутреннихДокументов
//
// Параметры
//    Объект - ссылка на входящий, исходящий, внутренний документ - 
//             объект, об изменении которого нужно оповестить
//
Процедура ОповеститьОбИзмененииОбъекта(Объект) Экспорт 
	
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Объект) Тогда 
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДанныеВходящихДокументов"));
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Объект) Тогда 
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДанныеИсходящихДокументов"));
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Объект) Тогда 	
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДанныеВнутреннихДокументов"));
	Иначе
		ОповеститьОбИзменении(Объект);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает массив имен файлов ("Приказ.doc" - т.е. без полного пути) занятые внешними программами
Функция ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов) Экспорт
	
	МассивФайловВозврата = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;
	
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		
		Если Не ФайлыСтрока.РедактируетТекущийПользователь
			Или Не ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
		Если Файл.Существует() Тогда
			
			ИмяРасширение = Файл.Имя;
			Файл = Неопределено;
			
			ПутьКИсходномуФайлу = ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
			
			Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
				
				МассивФайловВозврата.Добавить(ИмяРасширение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивФайловВозврата;
	
КонецФункции

// Помещает захваченные файлы в хранилище. Не измененные освобождает.
Процедура ПоместитьИзмененияФайлов(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, НеОсвобождатьЗанятыеWordФайлы = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;	
		
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		Если Не ФайлыСтрока.РедактируетТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлИзменен = Ложь;
		
		Если ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
			
			Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
			Если Файл.Существует() Тогда
				
				УниверсальноеВремяИзмененияНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
				РазмерНаДиске = Файл.Размер();
				Файл = Неопределено;
				
				ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
				Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
					Продолжить;
				КонецЕсли;
				
				Если УниверсальноеВремяИзмененияНаДиске > ФайлыСтрока.ДатаМодификацииУниверсальнаяВБазе
					Или РазмерНаДиске <> ФайлыСтрока.Размер Тогда
					
					ФайлИзменен = Истина;
					
					ПараметрыВыполнения = Новый Структура;
					ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
					ПараметрыВыполнения.Вставить("ПараметрКоманды", ФайлыСтрока.Ссылка);
					
					Обработчик = Новый ОписаниеОповещения("ПоместитьИзмененияВложенийЗавершение", 
						ЭтотОбъект, ПараметрыВыполнения);
					ПараметрыОбработчика = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
						Обработчик, ФайлыСтрока.Ссылка, УникальныйИдентификатор);
					ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию", Истина);
					ПараметрыОбработчика.Вставить("ХранитьВерсии", Истина);
					ПараметрыОбработчика.Вставить("ПоказыватьОповещение", Ложь);
					
					ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
					
					РаботаСФайламиКлиент.ЗакончитьРедактирование(ПараметрыОбработчика);
					
					Оповестить("Запись_Файл", 
						Новый Структура("Событие, Файл, Владелец, ЕстьЗанятыеФайлы, ИдентификаторРодительскойФормы", 
							"ДанныеФайлаИзменены", 
							ФайлыСтрока.Ссылка, 
							Ссылка, 
							Неопределено,
							Неопределено),
						ФайлыСтрока.Ссылка);
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
		Если Не ФайлИзменен Тогда
			ЗанятыеНеИзмененныеФайлы.Добавить(ФайлыСтрока.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗанятыеНеИзмененныеФайлы.Количество() <> 0 Тогда
		
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(
			,
			ЗанятыеНеИзмененныеФайлы, Истина);
			
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОповеститьОбИзмененииОбъекта.
Процедура ПоместитьИзмененияВложенийЗавершение(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Оповестить("ФайлыПомещены");
	
КонецПроцедуры	

// По имени файла открывает его приложением
//
// Параметры
//  ПолноеИмяФайла -Строка - имя файла, который нужно открыть.
//
Процедура ОткрытьФайлПриложением(ПолноеИмяФайла) Экспорт 
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;
	
	// Открыть Файл
	Попытка
		
		СисИнфо = Новый СистемнаяИнформация;
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяОткрываемогоФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
		КонецЕсли;
		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'; en = 'Description=""%1""'"),
				Инфо.Описание));
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив перетаскиваемых файлов, в котором содержатся только скан-копии оригиналов. 
// Параметры
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - содержит перетаскиваемое значение, тип действия и возможные действия при перетаскивании
//  Состояние               - Строка - строковое представление текущего состояния документа
//  ТекстПредупреждения     - Строка - строковое предупреждения, в случае ошибки или отсутствия файлов оригиналов
//
// Возвращаемое значение
//  ФайлыОригиналы - Массив - массив перетаскиваемых значений.
//
Функция ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(ПараметрыПеретаскивания, Состояние, ТекстПредупреждения) Экспорт 
	
	ФайлыОригиналы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") 
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ПараметрыПеретаскивания.Значение.Расширение) Тогда 
			ФайлыОригиналы.Добавить(ПараметрыПеретаскивания.Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ПараметрыПеретаскивания.Значение.Расширение) Тогда 
			ФайлыОригиналы.Добавить(ПараметрыПеретаскивания.Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 Тогда 
			Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
				Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
					Если Не ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
						ТекстПредупреждения = Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'; en = 'Select for import only files, not directories.'");
						ФайлыОригиналы = Новый Массив;
						Прервать;
						
					ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ФайлПринятый.Расширение) Тогда 
						ФайлыОригиналы.Добавить(ФайлПринятый);
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
				
				Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
					Расширение = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
						ФайлПринятый, "ТекущаяВерсияРасширение");
					
					Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение) Тогда 
						ФайлыОригиналы.Добавить(ФайлПринятый);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстПредупреждения) И ФайлыОригиналы.Количество() = 0 Тогда 
		ТекстПредупреждения = СтрШаблон(Нстр("ru = 'Среди перетаскиваемых файлов нет скан-копий оригиналов.
			|В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа.';
			|en = 'There are no scanned copies of the original documents among the dropped files.
			|Only copies of the originals are permitted in current state ""%1"".'"),
			Состояние);
	КонецЕсли;
	
	Возврат ФайлыОригиналы;
	
КонецФункции


