// Формирует список для выбора стороны.
//
// Параметры:
//  Параметры - структура, по которой выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораСтороны(Знач Параметры) Экспорт 

	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Если Параметры.Свойство("НомерСтрокиСтороны")
		И Параметры.НомерСтрокиСтороны > 1 Тогда
		
			ДанныеВыбораКонтрагенты = Справочники.Контрагенты.ПолучитьДанныеВыбора(Параметры);
			ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
			
			Для Каждого ЭлементДанные Из ДанныеВыбораКонтрагенты Цикл
				ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
			КонецЦикла;
			
			Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
				ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
			КонецЦикла;
			
	КонецЕсли;
		
	ДанныеВыбораОрганизации = Справочники.Организации.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораПользователи = Справочники.Пользователи.ПолучитьДанныеВыбора(Параметры);
	
	Для Каждого ЭлементДанные Из ДанныеВыбораОрганизации Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	
	Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;

КонецФункции

// Формирует список для выбора контактных лиц стороны.
//
// Параметры:
//  Параметры - структура, по которой выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораКонтактногоЛицаСтороны(Знач Параметры) Экспорт

	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Сторона = Неопределено;
	Параметры.Свойство("Сторона", Сторона);
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Сторона) Тогда
		ДанныеВыбораПользователи = Справочники.Пользователи.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(Сторона) Тогда
			Параметры.Отбор.Вставить("Владелец", Сторона);
		КонецЕсли;
		
		ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	КонецЕсли;

	Возврат ДанныеВыбора;

КонецФункции 

// Формирует список для выбора ответственного поставившего подпись.
//
// Параметры:
//  Параметры - структура, по которой выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораПодписал(Знач Параметры) Экспорт

	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Сторона = Неопределено;
	Параметры.Свойство("Сторона", Сторона);
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Сторона) Тогда
		ДанныеВыбораПользователи = Справочники.Пользователи.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	
	Иначе
		Если ЗначениеЗаполнено(Сторона) Тогда
			Параметры.Отбор.Вставить("Владелец", Сторона);
		КонецЕсли;
		ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	КонецЕсли;
		
	Если ДанныеВыбора.Количество() = 0 Тогда
		ПредставлениеПроизвольнойСтроки = Новый ФорматированнаяСтрока(
			Параметры.СтрокаПоиска, 
			Новый ФорматированнаяСтрока(НСтр("ru = ' (Подписант)'; en = ' (Signer)'"),
				, WebЦвета.Серый)
			);
		
		ДанныеВыбора.Добавить(Параметры.СтрокаПоиска, ПредставлениеПроизвольнойСтроки);
	КонецЕсли;
	
	Возврат ДанныеВыбора;

КонецФункции

// Устанавливает условное оформление для таблицы сторон.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//  Организация - СправочникСсылка.Организация - значение для отбора.
//	ИзШаблона - флаг определяющий из какой формы вызвана процедура
//
Процедура УстановитьУсловноеСторон(УсловноеОформление, Знач Организация, ИзВидаДокумент = Ложь) Экспорт

	Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		Если ЭлементУО.Представление = "ОсновнаяОрганизация" Тогда
			ЭлементОтбораДанных = ЭлементУО.Отбор.Элементы[0];
			Если ЭлементОтбораДанных.ПравоеЗначение <> Организация Тогда;
				ЭлементОтбораДанных.ПравоеЗначение = Организация;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтОсновнойОрганизации, , , Истина));
	ЭлементУО.Представление = "ОсновнаяОрганизация";
	
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Если ИзВидаДокумент Тогда
    	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблонДокумента.Стороны.Сторона");
	Иначе
		ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Стороны.Сторона");
	КонецЕсли;
    ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементУсловия.ПравоеЗначение = Организация;
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Стороны");
	
КонецПроцедуры

// Определяет подписан ли документ в зависимости от варианта подписания.
//
// Параметры:
//  Стороны - ТаблицаЗначений - Стороны подписывающие документ.
//  ВариантПодписания - Перечисление ВариантыПодписания - вариант подписания вида документа
//
// Возвращаемое значение:
//  Булева - Флаг подписи.
//
Функция ДокументПодписанСторонами(Знач Стороны, Знач ВариантПодписания) Экспорт

	Результат = Ложь;
	
	Если Стороны.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	МыПодписалиДокумент = Истина;
	КонтрагентыПодписалиДокумент = Истина;
	
	Для каждого СтрокаСтороны Из Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона)
			И Не СтрокаСтороны.Подписан Тогда
				МыПодписалиДокумент = Ложь;
		ИначеЕсли РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона)
			И Не СтрокаСтороны.Подписан Тогда
				КонтрагентыПодписалиДокумент = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается Тогда
		Результат = Ложь;
	ИначеЕсли ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоМы Тогда
		Результат = МыПодписалиДокумент;
	ИначеЕсли ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоКонтрагенты Тогда
		Результат = КонтрагентыПодписалиДокумент;
	ИначеЕсли ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты Тогда
		Результат = КонтрагентыПодписалиДокумент И МыПодписалиДокумент; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает флаг подписи в регистр данных документов.
//
// Параметры:
//  Документ - Справочник.ВнутренниеДокументы - документ по которому записываются данные.
//  ПодписанВсеми - Булево - значение флага
//
Процедура ЗаписатьФлагПодписиДокумента(Документ, ПодписанВсеми) Экспорт 

	Делопроизводство.ЗаписатьДанныеДокумента(Документ, "ПодписанВсеми", ПодписанВсеми);

КонецПроцедуры

// Обработка проверки таблицы сторон
//
// Параметры:
//  СправочникОбъект - Справочник.ВнутренниеДокументы,
//						Справочник.ШаблоныВнутреннихДокументов объект к проверке. 
//  Отказ - Булево - флаг отказа.
//
Процедура ПроверитьЗаполнениеСторон(СправочникОбъект, Отказ) Экспорт 
	
	Стороны = СправочникОбъект.Стороны; 
	
	Если Стороны.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указано ни одной стороны документа'; en = 'No parties are specified for the document'"),,
				"Стороны", "Объект", Отказ);
		Возврат;
	КонецЕсли;	
	
	ЕстьОрганизация = Ложь;
	ПерваяИзСторонОрганизация = Ложь;
	
	КоличествоОрганизаций = 0;
	Для Каждого СтрокаСторон Из Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСторон.Сторона) Тогда
			ЕстьОрганизация = Истина;
			КоличествоОрганизаций = КоличествоОрганизаций + 1;	
		КонецЕсли; 
	КонецЦикла;
	
	Если Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Стороны[0].Сторона)
		И ЗначениеЗаполнено(Стороны[0].Сторона) Тогда
			ПерваяИзСторонОрганизация = Истина;
	КонецЕсли;
	
	Если Не ПерваяИзСторонОрганизация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В таблице сторон в первой строке должна присутствовать ""основная организация""'; en = 'Table of sides must contain the ""Main company"" at the first row'"),,
				"Стороны[0].Сторона", "Объект", Отказ);
	КонецЕсли;	
	
КонецПроцедуры

// Копирует контрагентов из табличной части Стороны в табличную часть Контрагенты
//
// Параметры:
//  Контрагенты - ТаблицаЗначений - таблица контрагентов.
//  Стороны - ТаблицаЗначений - таблица сторон.
//  ЭтоДокумент - Булево - идентификатор вызовы из документа, для копирования доп. поля
//
Процедура ПеренестиКонтрагентовИзСторон(Контрагенты, Стороны, ЭтоДокумент = Ложь) Экспорт
	
	Контрагенты.Очистить();
	
	Для Каждого СтрокаСтороны Из Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) Тогда
			СтрокаКонтрагентов = Контрагенты.Добавить();
			СтрокаКонтрагентов.Контрагент = СтрокаСтороны.Сторона;
			СтрокаКонтрагентов.КонтактноеЛицо = СтрокаСтороны.КонтактноеЛицо;
			Если ЭтоДокумент Тогда
				СтрокаКонтрагентов.ПодписалОтКонтрагента = СтрокаСтороны.Подписал;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает организацию из табличной части Стороны
//
// Параметры:
//  Организация - Справочник.Организации - таблица контрагентов.
//  Стороны - ТаблицаЗначений - таблица сторон.
//
Процедура ПеренестиОрганизациюИзСторон(Организация, Знач Стороны) Экспорт 
	
	Если Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Стороны[0].Сторона) Тогда
		Организация = Стороны[0].Сторона;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает реквизит утвердил из табличной части Стороны
//
// Параметры:
//  Утвердил - Справочник.Пользователи - таблица Пользователи.
//  Стороны - ТаблицаЗначений - таблица сторон.
//
Процедура ПеренестиУтвердилИзСторон(Утвердил, Знач Стороны) Экспорт 

	Если Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Стороны[0].Сторона) Тогда
			Утвердил = Стороны[0].Подписал;
	КонецЕсли;

КонецПроцедуры

// Заполняет поля формы табличной части объекта "Стороны" шаблона или документа
// Параметры:
//  Форма - форма шаблона или внутреннего документа
//
Процедура ЗаполнитьТаблицуСторон(Форма) Экспорт 
	
	Если Не Форма.ВестиУчетСторон Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Для Каждого Строка Из Объект.Стороны Цикл
		
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Строка.Сторона) Тогда
			Строка.ИндексКартинкиСтороны = 1;
			Если ЗначениеЗаполнено(Строка.Сторона)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Строка.Сторона, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
				Строка.КонтрагентЯвляетсяФизЛицом = Истина;
			Иначе 
				Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
			КонецЕсли;
		
		ИначеЕсли РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Строка.Сторона) Тогда
			Строка.ИндексКартинкиСтороны = 2;
			Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
		Иначе
			Строка.ИндексКартинкиСтороны = 0;
			Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает массив подписантов по указанной таблице сторон
//
// Параметры:
//  Стороны - табличная часть сторон документа ВнутренниеДокументы
//
Функция ПодписантыСторонДокумента(Стороны) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Стороны) = Тип("РезультатЗапроса") Тогда
		Стороны = Стороны.Выгрузить();
	КонецЕсли;
	
	Для Каждого СторонаДокумента Из Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СторонаДокумента.Сторона)
			И ЗначениеЗаполнено(СторонаДокумента.Подписал) Тогда
				Результат.Добавить(СторонаДокумента.Подписал);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПодписанияДокумента(Документ) Экспорт

	ВозвращаемоеЗначение = Новый Структура; Результат = Ложь; ТекстОшибки = "";
	
	РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ВидДокумента,
		"ВестиУчетСторон, ИспользоватьПодписание, ВариантПодписания");
	
	Если РеквизитыВидаДокумента.ВестиУчетСторон Тогда
		
		Если РеквизитыВидаДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты
			Или РеквизитыВидаДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоМы Тогда
			
				Для каждого СторонаДокумента Из Документ.Стороны Цикл
					Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СторонаДокумента.Сторона)
						И СторонаДокумента.Подписан Тогда
						
						ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Документ ""%1"" уже подписан ответственным лицом ""%2"".'; en = '""%1"" document is already signed by responsible person (""%2"").'"),
							Строка(Документ),
							СторонаДокумента.Подписал);
						Результат = Истина;
						
						Прервать;
					КонецЕсли;
				
				КонецЦикла;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" не подписывается ответственным лицом с нашей стороны.'; en = '""%1"" document is not intended for signing by our party.'"),
				Строка(Документ));
			ТекстОшибки = ТекстОшибки;
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли РеквизитыВидаДокумента.ИспользоватьПодписание
		И Документ.РезультатПодписания = Перечисления.РезультатыПодписания.Подписан Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" уже подписан ответственным лицом.'; en = '""%1"" document is already signed by the responsible person.'"),
				Строка(Документ));
			ТекстОшибки = ТекстОшибки;
			Результат = Истина;
		
	КонецЕсли;

	ВозвращаемоеЗначение.Вставить("ТекстОшибки", ТекстОшибки);
	ВозвращаемоеЗначение.Вставить("ДокументПодписан", Результат);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОпределитьСостояниеПодписи(Документ) Экспорт
	
	РезультатыПодписания = Перечисления.СостоянияДокументов.Отклонен;
	
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Документ) Тогда 
		РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ВидДокумента, "ВестиУчетСторон, ВариантПодписания");
		
		Если РеквизитыВидаДокумента.ВестиУчетСторон = Истина Тогда
			ДокументПодписан = ДокументПодписанСторонами(Документ.Стороны, РеквизитыВидаДокумента.ВариантПодписания);
			Если ДокументПодписан = Истина Тогда
				РезультатыПодписания = Перечисления.СостоянияДокументов.Подписан;
			Иначе
				РезультатыПодписания = Перечисления.СостоянияДокументов.НаПодписании;
			КонецЕсли;
		Иначе
			РезультатыПодписания = Перечисления.СостоянияДокументов.Подписан;
		КонецЕсли;
	// ТСК Корнюшенков А.Ю. 29.06.2018 {
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Документ.Метаданные()) Тогда 
		РезультатыПодписания = Перечисления.СостоянияДокументов.Подписан;
	// ТСК Корнюшенков А.Ю. 29.06.2018 } 	
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Процесс ""Подписания"" не может быть использован для ""%1"". Используйте для этого процесс ""Утверждения"".
                                          |Обратитесь к администратору для настроек.';
                                          |en = '""Signing"" process cannot be used for ""%1"". Use ""Confirmation"" process for the purpose.
                                          |Contact the administrator for the proper configuration.'"),
			Строка(Документ));
	КонецЕсли;

	Возврат РезультатыПодписания;
	
КонецФункции

// Выполняет обработку подписей при начале нового процесса утверждения
//
// Параметры:
//  БизнесПроцесс - Ссылка на бизнес-процесс
//
Процедура ОбработатьПодписиПриНачалеПроцесса(БизнесПроцесс) Экспорт

	Если Не БизнесПроцесс.ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		БизнесПроцесс, ТипыДокументов, Истина);

	Для Каждого Документ Из Предметы Цикл
		ДобавитьПодписантаПоБизнесПроцессу(Документ, БизнесПроцесс);
		
	КонецЦикла;

КонецПроцедуры

// Добавляет подписантов по данным процесса
//
// Параметры:
//  Документ - Ссылка на внутренний документ
//  БизнесПроцесс - Ссылка на бизнес-процесс
//
Процедура ДобавитьПодписантаПоБизнесПроцессу(Документ, БизнесПроцесс) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) 
		Или Не ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Документ) Тогда
			Возврат;
	КонецЕсли;
	
	РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ВидДокумента, "ВестиУчетСторон, ИспользоватьПодписание");
	
	Если РеквизитыВидаДокумента.ВестиУчетСторон = Истина Тогда
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		Для Каждого СтрокаСтороны Из ДокументОбъект.Стороны Цикл
			Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона) Тогда
				СтрокаСтороны.Подписал = БизнесПроцесс.Исполнитель;
				СтрокаСтороны.Установил = БизнесПроцесс.Автор;
				ДокументОбъект.Записать();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РеквизитыВидаДокумента.ИспользоватьПодписание = Истина Тогда
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.Подписал = БизнесПроцесс.Исполнитель;
		ДокументОбъект.УстановилПодпись = БизнесПроцесс.Автор;
		ДокументОбъект.ДатаУстановкиПодписи = ТекущаяДатаСеанса();
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку подписи при выполнении задачи подписания процесса утверждение
//
// Параметры:
//  БизнесПроцесс - Ссылка на бизнес-процесс
//  Документ - Ссылка на внутренний документ
//  Задача - Задача процесса
//
Процедура ОбработатьПодписаниеПриВыполненииЗадачи(БизнесПроцесс, Документ, Задача, РезультатУтверждения) Экспорт
	
	Если Не БизнесПроцесс.ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(Документ);
	ДокументОбъект = Документ.ПолучитьОбъект();
	РаботаСРабочимиГруппами.ОтключитьПерезаписьРабочейГруппыПредметаПроцесса(ДокументОбъект);
	
	Если РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
		РезультатыПодписания = Перечисления.РезультатыПодписания.Подписан;
	Иначе
		РезультатыПодписания = Перечисления.РезультатыПодписания.Отклонен;
	КонецЕсли;
	
	ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ВидДокумента, "ВестиУчетСторон");
	Если ВестиУчетСторон = Истина Тогда
		
		Для Каждого СтрокаСторона Из ДокументОбъект.Стороны Цикл
			Если ЗначениеЗаполнено(СтрокаСторона.Сторона)
				И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСторона.Сторона) Тогда
				Если РезультатыПодписания = Перечисления.РезультатыПодписания.Подписан
					И Не СтрокаСторона.Подписан Тогда
						СтрокаСторона.Подписал = Задача.Исполнитель;
						СтрокаСторона.ДатаПодписи = ТекущаяДатаСеанса();
						СтрокаСторона.Подписан = Истина;
						СтрокаСторона.Комментарий = Задача.РезультатВыполнения;
						Прервать;
				ИначеЕсли РезультатыПодписания = Перечисления.РезультатыПодписания.Отклонен Тогда
					СтрокаСторона.ДатаПодписи = '00010101';
					СтрокаСторона.Подписан = Ложь;
					СтрокаСторона.Комментарий = Задача.РезультатВыполнения;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДокументОбъект.Подписал = Задача.Исполнитель;
		ДокументОбъект.ДатаПодписания = ТекущаяДатаСеанса();
		ДокументОбъект.РезультатПодписания = РезультатыПодписания;
		ДокументОбъект.КомментарийПодписи = Задача.РезультатВыполнения;
	КонецЕсли;
	
	ДокументОбъект.Записать();
	
КонецПроцедуры


