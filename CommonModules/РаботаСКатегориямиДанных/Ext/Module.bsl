//Формирует полный путь к категории в дереве в направлении Вершина\...->...\ЭлементДерева
//Параметры:Категория - ссылка на искомый объект Категория
//Возвращает:Строка с путем к категории
Функция ПолучитьПолныйПутьКатегорииДанных(Категория) Экспорт
	
	Попытка
		ПолныйПуть = Строка(Категория);
		ТекКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Категория, "Родитель");
		
		Пока ЗначениеЗаполнено(ТекКатегория) Цикл
			Если НЕ ТекКатегория = Справочники.КатегорииДанных.ВсеКатегории Тогда
				ПолныйПуть = Строка(ТекКатегория) + "\" + ПолныйПуть;
				Попытка
					Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекКатегория, "Родитель");
					
					Если ЗначениеЗаполнено(Родитель) Тогда
						ТекКатегория = Родитель;
					КонецЕсли;
				Исключение
					Прервать;
				КонецПопытки;	
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат ПолныйПуть;
	КонецПопытки;
	
	Возврат ПолныйПуть;
	
КонецФункции

//Формирует дерево категорий, которое далее можно разместить на форме
//Параметры:
//			Дерево - Объект типа ДеревоЗначений
//			ПерсональныеКатегории - признак того, какие категории подлежат выборке - персональные или общие.
//									Если не указан, то выбираются все категории
//			ДобавлятьПолныйПуть - флаг, показывающий необходимость добавлять в дерево полные наименования категорий
//			ТипОбъектов - значение из перечисления ТипыОбъектов
//Возвращает:Объект типа ДеревоЗначений
Функция ПостроитьДеревоКатегорий(Дерево, 
	ПерсональныеКатегории = Неопределено, 
	ДобавлятьПолныйПуть = Ложь, 
	ТипОбъектов = Неопределено,
	СчитатьОбъекты = Истина,
	ВключатьЭлементБезКатегорий = Истина) Экспорт
	
	Дерево.Строки.Очистить();

	//Получение имени типа объектов
	Если ТипОбъектов <> Неопределено Тогда
		ИндексЗначенияПеречисления = Перечисления.ТипыОбъектов.Индекс(ТипОбъектов);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КатегорииДанных.Ссылка,
		|	ВЫБОР
		|		КОГДА (НЕ КатегорииДанных.ПометкаУдаления)
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ИндексКартинки,
		|	КатегорииДанных.Наименование КАК Наименование,
		|	КатегорииДанных.Персональная,
		|	ЛОЖЬ КАК Выбрана,
		|	КатегорииДанных.Родитель,
		|	КатегорииДанных.ПометкаУдаления
		|ИЗ
		|	Справочник.КатегорииДанных КАК КатегорииДанных
		|ГДЕ
		|	(КатегорииДанных.Персональная = &ПерсональныеКатегории
		|			ИЛИ (НЕ &ИспользоватьФильтрПоПерсональным)
		|			ИЛИ КатегорииДанных.Ссылка = &ВсеКатегории)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КатегорииДанных.Ссылка ИЕРАРХИЯ";
		
	Если ПерсональныеКатегории = Неопределено Тогда
		Запрос.УстановитьПараметр("ПерсональныеКатегории", Истина);
		Запрос.УстановитьПараметр("ИспользоватьФильтрПоПерсональным", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПерсональныеКатегории", ПерсональныеКатегории);
		Запрос.УстановитьПараметр("ИспользоватьФильтрПоПерсональным", Истина);
	КонецЕсли; 
	Запрос.УстановитьПараметр("ВсеКатегории", Справочники.КатегорииДанных.ВсеКатегории);
	
    Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка = Справочники.КатегорииДанных.ВсеКатегории Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Родитель.Пустая()
			ИЛИ ВыборкаДетальныеЗаписи.Родитель = Справочники.КатегорииДанных.ВсеКатегории Тогда
			Строка = Дерево.Строки.Добавить();
		Иначе
			Ветвь = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.Родитель, "Ссылка", Истина);
			Если Ветвь = Неопределено Тогда
				Строка = Дерево.Строки.Добавить();
			Иначе
				Строка = Ветвь.Строки.Добавить();
			КонецЕсли;
			
		КонецЕсли;	
		
		КоличествоОбъектов = 0;		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование + ?(КоличествоОбъектов = 0, "", " (" + КоличествоОбъектов + ")");
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.Персональная = ВыборкаДетальныеЗаписи.Персональная;
		Строка.Выбрана = Ложь;
		Строка.ПометкаУдаления = ВыборкаДетальныеЗаписи.ПометкаУдаления;
		
		Если ВыборкаДетальныеЗаписи.Ссылка = Справочники.КатегорииДанных.ВсеКатегории Тогда 
			Строка.ИндексКартинки = 1;
		Иначе
			Строка.ИндексКартинки = ВыборкаДетальныеЗаписи.ИндексКартинки; 
		КонецЕсли;
		
		Если ДобавлятьПолныйПуть Тогда
			Строка.ПолноеНаименование = ПолучитьПолныйПутьКатегорииДанных(ВыборкаДетальныеЗаписи.Ссылка);	
		КонецЕсли;
		
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Наименование", Истина);
	
	Если ПерсональныеКатегории = Неопределено И ВключатьЭлементБезКатегорий Тогда
		СтрокаБезКатегорий = Дерево.Строки.Вставить(0);
		СтрокаБезКатегорий.Наименование = "Без категорий";
		СтрокаБезКатегорий.Ссылка = Неопределено;
		СтрокаБезКатегорий.ИндексКартинки = 0;
		СтрокаБезКатегорий.Персональная = Неопределено;
		СтрокаБезКатегорий.Выбрана = Неопределено;
		
		Если ДобавлятьПолныйПуть Тогда
			СтрокаБезКатегорий.ПолноеНаименование = "Без категорий"
		КонецЕсли;	
		
		Если ТипОбъектов <> Неопределено И СчитатьОбъекты Тогда
			КоличествоОбъектов = 0;
			СтрокаБезКатегорий.Наименование = СтрокаБезКатегорий.Наименование + ?(КоличествоОбъектов = 0, "", " (" + КоличествоОбъектов + ")");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

//Помещает одиночное значение в параметры динамического списка
//Параметры:Список - реквизит формы, содержащий динамический список документов или файлов
//			СУчетомПодкатегорий - флаг, показывающий необходимость учета подкатегорий указанной категории
//			МаксКолвоВыбранныхКатегорий - максимальное количество категорий, которые могут быть выбраны одновременно 
//			Категория - ссылка на категорию, которая помещается в параметры
Процедура ЗначениеКатегорииВЗапросСписка(Список, СУчетомПодкатегорий, МаксимальноеКоличествоПараметров, Категория) Экспорт
	
	КатегорияИЛИ = Новый Массив();
	КатегорияИИЛИ = Новый Массив();
	РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, МаксимальноеКоличествоПараметров);
	Если СУчетомПодкатегорий Тогда
		КатегорияИИЛИ.Добавить(Категория);
		Список.Параметры.УстановитьЗначениеПараметра("КатегорияИИЛИ", КатегорияИИЛИ);
	Иначе
		КатегорияИЛИ.Добавить(Категория);
		Список.Параметры.УстановитьЗначениеПараметра("КатегорияИЛИ", КатегорияИЛИ);
	КонецЕсли;	
	
КонецПроцедуры

//Помещает список категорий в параметры динамического списка
//Параметры:Список - реквизит формы, содержащий динамический список документов или файлов
//			ОтборДанных - вид отбора данных: "ПоВсем" или "ПоЛюбойИз"
//			СУчетомПодкатегорий - флаг, показывающий необходимость учета подкатегорий указанной категории
//			МаксКолвоВыбранныхКатегорий - максимальное количество категорий, которые могут быть выбраны одновременно 
//			ВыбранныеКатегории - массив категорий, который помещается в параметры
Процедура СписокКатегорийВЗапросСписка(
	Список, 
	МаксКолвоВыбранныхКатегорий, 
	ВыбранныеКатегории,
	ОтборДанных = "ПоВсем",
	СУчетомПодкатегорий = Истина) Экспорт

	НомерПараметра = 1;
	КатегорияИЛИ = Новый Массив();
	КатегорияИИЛИ = Новый Массив();
	РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, МаксКолвоВыбранныхКатегорий);
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	
	Для каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если КоличествоВыбранныхКатегорий > 1 И ВыбраннаяКатегория.Пометка 
			ИЛИ КоличествоВыбранныхКатегорий = 1 Тогда
			Если СУчетомПодкатегорий Тогда
				Если ОтборДанных = "ПоВсем" Тогда 
					ИмяПараметра = "КатегорияИИ" + Строка(НомерПараметра);
					НайденныйПараметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
					Если НайденныйПараметр <> Неопределено Тогда
						Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ВыбраннаяКатегория.Значение);
					КонецЕсли;
				Иначе
					КатегорияИИЛИ.Добавить(ВыбраннаяКатегория.Значение);
					Список.Параметры.УстановитьЗначениеПараметра("КатегорияИИЛИ", КатегорияИИЛИ);
				КонецЕсли;
			Иначе
				Если ОтборДанных = "ПоВсем" Тогда             
					ИмяПараметра = "КатегорияИ" + Строка(НомерПараметра);
					НайденныйПараметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
					Если НайденныйПараметр <> Неопределено Тогда
						Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ВыбраннаяКатегория.Значение);
					КонецЕсли;
				Иначе
					КатегорияИЛИ.Добавить(ВыбраннаяКатегория.Значение);
					Список.Параметры.УстановитьЗначениеПараметра("КатегорияИЛИ", КатегорияИЛИ);
				КонецЕсли;
			КонецЕсли;
			НомерПараметра = НомерПараметра + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Получает количество объектов, категорированных указанной категорией
//Параметры:Категория - ссылка на категорию
//Возвращает:Структура(СИерархией, БезИерархии). 
//				СИерархией - количество объектов, категорированных подкатегориями указанной категории
//				БезИерархии - количество объектов, категорированных только указанной категорией
Функция КоличествоОбъектовКатегории(Категория) Экспорт
	
	РезультатБезИерархии = 0;
	РезультатСИерархией = 0;
	
	//количество объектов категории
	ТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СведенияОКатегорияхДанных.ОбъектДанных КАК СсылкаНаОбъект
				|ИЗ РегистрСведений.КатегорииОбъектов КАК СведенияОКатегорияхДанных
				|ГДЕ                             
				|	СведенияОКатегорияхДанных.КатегорияДанных = &Категория";
			
	ЗапросКоличества = Новый Запрос();
	ЗапросКоличества.Текст = ТекстЗапроса;
	ЗапросКоличества.УстановитьПараметр("Категория", Категория);
	Выборка = ЗапросКоличества.Выполнить().Выбрать();
	РезультатБезИерархии = Выборка.Количество();
	
	//Количество объектов в подкатегориях 
	Запрос = Новый Запрос;
			
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОКатегорияхДанных.ОбъектДанных КАК СсылкаНаОбъект
		|ИЗ РегистрСведений.КатегорииОбъектов КАК СведенияОКатегорияхДанных
		|ГДЕ                             
		|	СведенияОКатегорияхДанных.КатегорияДанных В ИЕРАРХИИ (&Категория)
		|	И СведенияОКатегорияхДанных.КатегорияДанных <> &Категория";
			
	ЗапросКоличества = Новый Запрос();
	ЗапросКоличества.Текст = ТекстЗапроса;
	ЗапросКоличества.УстановитьПараметр("Категория", Категория);
	Выборка = ЗапросКоличества.Выполнить().Выбрать();
	РезультатСИерархией = Выборка.Количество();
	
	Возврат Новый Структура("СИерархией, БезИерархии", РезультатСИерархией, РезультатБезИерархии);
	
КонецФункции

//Выполняет категоризацию объектов по правилам автоматической категоризации
Процедура ВыполнитьАвтоматическуюКатегоризацию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьКатегорииБезУказанияАвторстваПрисвоения();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПравилаАвтоматическойКатегоризацииДанных.Ссылка
	               |ИЗ
	               |	Справочник.ПравилаАвтоматическойКатегоризацииДанных КАК ПравилаАвтоматическойКатегоризацииДанных
				   |ГДЕ ПравилаАвтоматическойКатегоризацииДанных.ПометкаУдаления = ЛОЖЬ
				   |	И ПравилаАвтоматическойКатегоризацииДанных.Используется = ИСТИНА";

	ЗапросНаПравила = Новый Запрос;
	ЗапросНаПравила.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросНаПравила.Выполнить().Выбрать();
	//Перебор по правилам автоматической категоризации
	Пока РезультатЗапроса.Следующий() Цикл
		ПравилоАК = РезультатЗапроса.Ссылка; 		
				
		//Поместим в кэш "МассивОбъектовДляПравила" список объектов, еще не обработанных данным правилом 
		МассивОбъектовДляПравила = Новый Массив;
		Для Каждого ТипОбъекта Из ПравилоАК.ТипыОбъектов Цикл
			ЗапросНаОбъекты = Новый Запрос;
			ВнутреннееСоединение = "";
			Если СтрЗаменить(Строка(ТипОбъекта.ТипДанных), " ", "") = "Файлы" Тогда
				ВнутреннееСоединение = " ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиФайлов КАК Папки
										|ПО Объекты.ВладелецФайла = Папки.Ссылка ";
			КонецЕсли;
			
			ЗапросНаОбъекты.Текст = 
				"ВЫБРАТЬ
				|	Объекты.Ссылка,
				|	Подзапрос.ОбъектДанных
				|ИЗ
				|	Справочник." + СтрЗаменить(Строка(ТипОбъекта.ТипДанных), " ", "") + " КАК Объекты
				|		ЛЕВОЕ СОЕДИНЕНИЕ
				|			(ВЫБРАТЬ
				|				Регистр.ОбъектДанных
				|			ИЗ
				|				РегистрСведений.КатегорииОбъектов КАК Регистр
				|			ГДЕ
				|				Регистр.Автор = &Правило
				|				И Регистр.НазначениеКатегорииПроверено = ЛОЖЬ) КАК Подзапрос
				|			ПО Объекты.Ссылка = Подзапрос.ОбъектДанных "
				+ ВнутреннееСоединение +
				" ГДЕ
				|	Подзапрос.ОбъектДанных ЕСТЬ NULL";
			
			ЗапросНаОбъекты.УстановитьПараметр("Правило", ПравилоАК);
			
			Результат = ЗапросНаОбъекты.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				МассивОбъектовДляПравила.Добавить(Результат.Ссылка);
			КонецЦикла;
		КонецЦикла;
		
		//Перебор по условиям в правиле автоматической категоризации
		Для Каждого УсловиеКатегоризации Из ПравилоАК.Условия Цикл
			Если УсловиеКатегоризации.ВидУсловия = Перечисления.ВидыУсловийПравилАвтоматическойКатегоризации.КлючевыеСлова Тогда				
				МассивСтрокПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеКатегоризации.Выражение, Символы.ПС);
				РезультатПоискаПодстроки = Новый Массив;				
				Для Каждого Объект Из МассивОбъектовДляПравила Цикл
					ВыполнитьПоискТекстаВРеквизитахОбъекта(Объект, МассивСтрокПоиска, РезультатПоискаПодстроки);
				КонецЦикла;
				
				Для Каждого Ссылка Из РезультатПоискаПодстроки Цикл
					УстановитьКатегориюУОбъекта(ПравилоАК, ПравилоАК.Категория, Ссылка);
					
				КонецЦикла;
			ИначеЕсли УсловиеКатегоризации.ВидУсловия = Перечисления.ВидыУсловийПравилАвтоматическойКатегоризации.ВычисляемоеВыражение Тогда
				Для Каждого Ссылка Из МассивОбъектовДляПравила Цикл
					РезультатВыполненияВыражения = ВыполнитьПроверкуВыраженияВУсловии(Ссылка, УсловиеКатегоризации.Выражение);	
					Если ТипЗнч(РезультатВыполненияВыражения) = Тип("Булево")
						И РезультатВыполненияВыражения = Истина Тогда
						
						УстановитьКатегориюУОбъекта(ПравилоАК, ПравилоАК.Категория, Ссылка);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;			

КонецПроцедуры

//Удаляет их регистра сведений записи, у которых пустая ссылка Автор. Пустые ссылки появляются при сохранении объекта.
//Если есть правило автоматической категоризации, которое назначает данную категорию объекту, то в поле автор в ходе
//автоматической категоризации подставится ссылка на данное правило
Процедура УдалитьКатегорииБезУказанияАвторстваПрисвоения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииОбъектов.ОбъектДанных,
		|	КатегорииОбъектов.КатегорияДанных
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Автор = &Неопределено
		|	ИЛИ КатегорииОбъектов.Автор = &Пустая";

	Запрос.УстановитьПараметр("Неопределено", Неопределено);
	Запрос.УстановитьПараметр("Пустая", Справочники.ПравилаАвтозаполненияФайлов.ПустаяСсылка());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьОКатегории = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
		ЗаписьОКатегории.ОбъектДанных = ВыборкаДетальныеЗаписи.ОбъектДанных;
		ЗаписьОКатегории.КатегорияДанных = ВыборкаДетальныеЗаписи.КатегорияДанных;
		ЗаписьОКатегории.Прочитать();
		Если ЗаписьОКатегории.Выбран() Тогда
			ЗаписьОКатегории.Удалить();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

//Назначает категорию объекту
//Параметры:Автор - Пользователь либо Правило автоматической категоризации
//			Категория - ссылка на категорию, которая присваивается объекту
//			Объект - ссылка на объект одного из типов: Файл, Внутренний документ, Входящий документ, Исходящий документ
Процедура УстановитьКатегориюУОбъекта(Автор, Категория, Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ФактКатегоризацииУстановлен = Ложь;
	НеобходимоОбновитьОбъект = Ложь;
	ЗаписьОКатегории = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
	ЗаписьОКатегории.ОбъектДанных = Объект;
	ЗаписьОКатегории.КатегорияДанных = Категория;
	ЗаписьОКатегории.Прочитать();
	Если НЕ ЗаписьОКатегории.Выбран() Тогда
		ЗаписьОКатегории.ОбъектДанных = Объект;
		ЗаписьОКатегории.КатегорияДанных = Категория;
		ЗаписьОКатегории.Автор = Автор;
		ЗаписьОКатегории.НазначениеКатегорииПроверено = Категория.Персональная;
		ЗаписьОКатегории.ДатаКатегоризации = ТекущаяДатаСеанса();
		ЗаписьОКатегории.Записать();
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗаписьОКатегории.Автор) 
		ИЛИ ТипЗнч(ЗаписьОКатегории.Автор) <> Тип("СправочникСсылка.ПравилаАвтоматическойКатегоризацииДанных") Тогда
		ЗаписьОКатегории.Автор = Автор;
		ЗаписьОКатегории.НазначениеКатегорииПроверено = Категория.Персональная;
		ЗаписьОКатегории.ДатаКатегоризации = ТекущаяДатаСеанса();
		ЗаписьОКатегории.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив категорий объекта
//
Функция ПолучитьКатегорииОбъекта(Объект) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КатегорииОбъектов.КатегорияДанных КАК КатегорияДанных
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.ОбъектДанных = &ОбъектДанных");
	Запрос.УстановитьПараметр("ОбъектДанных", Объект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияДанных");
	
КонецФункции

// Назначает список категорий объекту
// Параметры:
// СписокКатегорий - ДанныеФормыКоллекция - список категорий, который присваивается объекту
// Объект - Файл, Внутренний документ, Входящий документ, Исходящий документ
//
Процедура ЗаписатьСписокКатегорийУОбъекта(СписокКатегорий, Объект) Экспорт
	
	Если СписокКатегорий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Категории = Новый Массив;
	Для Каждого ЭлементКоллекции Из СписокКатегорий Цикл
		Категории.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекДата = ТекущаяДатаСеанса();
	РольДоступнаПолныеПрава = РольДоступна(Метаданные.Роли.ПолныеПрава);
	РольДоступнаДобавлениеИзменениеОбщихКатегорий = РольДоступна(Метаданные.Роли.ДобавлениеИзменениеОбщихКатегорий);
	МожноИзменятьОбщиеКатегории = РольДоступнаПолныеПрава ИЛИ РольДоступнаДобавлениеИзменениеОбщихКатегорий;
	
	ЗапросРазрешенные = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КатегорияДанных КАК КатегорияДанных
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов
		|ГДЕ
		|	ОбъектДанных = &Объект
		|	И НЕ КатегорияДанных.Наименование ЕСТЬ NULL
		|");
	ЗапросРазрешенные.УстановитьПараметр("Объект", Объект);
	РазрешенныеКатегории = ЗапросРазрешенные.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияДанных");
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.ОбъектДанных.Установить(Объект);
	Набор.Прочитать();
	Записи = Набор.Выгрузить();
	ЗаписиДляУдаления = Новый Массив;
	Для каждого Запись Из Записи Цикл
		Если Категории.Найти(Запись.КатегорияДанных) = Неопределено Тогда
			// надо удалить категорию если есть на то права
			Если РольДоступнаПолныеПрава Тогда
				// можем все
				ЗаписиДляУдаления.Добавить(Запись);
			ИначеЕсли РольДоступнаДобавлениеИзменениеОбщихКатегорий Тогда
				// удаляем только разрешенные
				Если РазрешенныеКатегории.Найти(Запись.КатегорияДанных) <> Неопределено Тогда
					ЗаписиДляУдаления.Добавить(Запись);
				КонецЕсли;
			ИначеЕсли НЕ Запись.КатегорияДанных.Персональная Тогда
				// можем удалять общую категорию
				ЗаписиДляУдаления.Добавить(Запись);
			ИначеЕсли Запись.КатегорияДанных.Персональная И Запись.КатегорияДанных.Автор = ТекущийПользователь Тогда
				// можем удалять свою персональную категорию
				ЗаписиДляУдаления.Добавить(Запись);
			Иначе
				Продолжить;
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для удаления категории ""%1""'; en = 'Not enough permissions to delete category ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Строка(Запись.КатегорияДанных));
				Сообщить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиДляУдаления Цикл
		Комментарий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Категория: %1'; en = 'Category: %1'"),
			ВКавычках(ПолучитьПолныйПутьКатегорииДанных(Запись.КатегорияДанных)));
		ЗарегистрироватьУдалениеИзКатегории(Запись.КатегорияДанных, Объект, Комментарий);
		Записи.Удалить(Запись);
	КонецЦикла;
	
	Для каждого КатегорияДанных Из Категории Цикл
		Если Записи.Найти(КатегорияДанных, "КатегорияДанных") = Неопределено Тогда
			НоваяЗапись = Записи.Добавить();
			НоваяЗапись.ОбъектДанных = Объект;
			НоваяЗапись.КатегорияДанных = КатегорияДанных;
			НоваяЗапись.Автор = ТекущийПользователь;
			НоваяЗапись.ДатаКатегоризации = ТекДата;
			НоваяЗапись.НазначениеКатегорииПроверено = КатегорияДанных.Персональная;
			
			Комментарий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Категория: %1'; en = 'Category: %1'"),
				ВКавычках(ПолучитьПолныйПутьКатегорииДанных(КатегорияДанных)));
			ЗарегистрироватьДобавлениеВКатегорию(КатегорияДанных, Объект, Комментарий);
			
		КонецЕсли;
	КонецЦикла;
	// сбросим признак проверки общих категорий
	Для каждого Запись Из Записи Цикл
		Запись.НазначениеКатегорииПроверено = Запись.КатегорияДанных.Персональная;
	КонецЦикла;	
	Набор.Загрузить(Записи);
	Набор.Записать(Истина);
	
КонецПроцедуры

//Выполняет поиск текста среди значений реквизитов объекта
//Параметры:Объект - ссылка на объект, в котором производится поиск
//			МассивСтрок - массив строк, которые ищутся
//			РезультатПоискаПодстроки - массив объектов
Процедура ВыполнитьПоискТекстаВРеквизитахОбъекта(Объект, МассивСтрок, РезультатПоискаПодстроки)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденоСовпадение = Ложь;
	Для Каждого ПодстрокаПоиска Из МассивСтрок Цикл
		Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
			ЗначениеРеквизита = НРег(Строка(Объект[Реквизит.Имя]));
			Если Найти(ЗначениеРеквизита, НРег(ПодстрокаПоиска)) > 0 Тогда
				НайденоСовпадение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСовпадение Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтандартныйРеквизит Из Объект.Метаданные().СтандартныеРеквизиты Цикл
			ЗначениеРеквизита = НРег(Строка(Объект[Реквизит.Имя]));
			Если Найти(ЗначениеРеквизита, НРег(ПодстрокаПоиска)) > 0 Тогда
				НайденоСовпадение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
			ТекстВХранилищеТекста = Объект.ТекстХранилище.Получить();
			Если Найти(НРег(ТекстВХранилищеТекста), НРег(ПодстрокаПоиска)) > 0 Тогда
				НайденоСовпадение = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденоСовпадение Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
		
	Если НайденоСовпадение Тогда
		Если РезультатПоискаПодстроки.Найти(Объект) = Неопределено Тогда
			Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") И
				ТипЗнч(Объект.ВладелецФайла) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
				РезультатПоискаПодстроки.Добавить(Объект.ВладелецФайла);
			Иначе
				РезультатПоискаПодстроки.Добавить(Объект);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВнутренниеДокументы")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.ВходящиеДокументы")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &Владелец";

		Запрос.УстановитьПараметр("Владелец", Объект);

		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьПоискТекстаВРеквизитахОбъекта(Выборка.Ссылка, МассивСтрок, РезультатПоискаПодстроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Выполняет проверку выражения на внутреннем языке
//Параметры:Источник - ссылка на объект, подвергаемый проверке.
//			Выражение - выражение на внутреннем языке
//Возвращает:Результат выполнения выражения на внутреннем языке - Истина Или Ложь
//			 Текст с описанием ошибки, если при выполнении выражения произошла ошибка
Функция ВыполнитьПроверкуВыраженияВУсловии(Источник, Выражение)
	
	Перем Результат;
	Попытка
		УстановитьБезопасныйРежим(Истина);
		Выполнить(Выражение);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Категории данных.Выполнение автоматической категоризации'; en = 'Data categories.Performing automatic categorization'", Метаданные.ОсновнойЯзык.КодЯзыка),
	    	УровеньЖурналаРегистрации.Ошибка,,,
	    	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = "Ошибка (" + ИнформацияОбОшибке().Описание + ")";
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		Результат = "Ошибка (Не сформировано значение переменной ""Результат"")";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Удаляет указанную категорию у указанного объекта
//Параметры:Категория - ссылка на категорию
//			Объект - ссылка на объект
Процедура УдалитьКатегориюУОбъекта(Категория, Объект) Экспорт
	
	ЗаписьОКатегории = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
	ЗаписьОКатегории.ОбъектДанных = Объект;
	ЗаписьОКатегории.КатегорияДанных = Категория;
	ЗаписьОКатегории.Удалить();
	
КонецПроцедуры

//Выполняет проверку применимости правила автоматической категоризации для конкретного объекта 
//Параметры:Правило - правило автоматической категоризации
//			Объект - ссылка на объект одного из типов: Файл, Внутренний документ, Входящий документ, Исходящий документ
//Возвращает: массив структур (Условие, РезультатПроверкиУсловия), где Условие - значение поля Выражения в условии правила,
//	РезультатПроверкиУсловия - Истина, Ложь либо строка с описанием ошибки, произошедшей при проверке правила
Функция ВыполнитьПроверкуПрименимостиПравилаАвтоКатегоризацииНаОбъекте(Правило, ОбъектСсылка) Экспорт
	
	РезультатыПроверкиПравила = Новый Массив;

	Для Каждого Условие Из Правило.Условия Цикл
		Если Условие.ВидУсловия = Перечисления.ВидыУсловийПравилАвтоматическойКатегоризации.ВычисляемоеВыражение Тогда
			Результат = ВыполнитьПроверкуВыраженияВУсловии(ОбъектСсылка, Условие.Выражение);	
		ИначеЕсли Условие.ВидУсловия = Перечисления.ВидыУсловийПравилАвтоматическойКатегоризации.КлючевыеСлова Тогда
			МассивСтрокПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Условие.Выражение, Символы.ПС);
			РезультатПоискаПодстроки = Новый Массив;
			ВыполнитьПоискТекстаВРеквизитахОбъекта(ОбъектСсылка, МассивСтрокПоиска, РезультатПоискаПодстроки);
			Результат = Ложь;
			Для Каждого Ссылка Из РезультатПоискаПодстроки Цикл
				Если Ссылка = ОбъектСсылка Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеПроверкиУсловия = Новый Структура("Условие, РезультатПроверкиУсловия", Условие.Выражение, Результат);
		РезультатыПроверкиПравила.Добавить(ДанныеПроверкиУсловия);
	КонецЦикла;
	Возврат РезультатыПроверкиПравила;
	
КонецФункции

//Получает список категорий у объекта
//Параметры:Объект - ссылка на объект
//Возвращает:массив структур (Категория, Установил, ПолноеНаименование), 
//	где Категория - ссылка на категорию, 
//		Установил - ссылка на пользователя либо правило автоматической категоризации, установившее категорию
//		Полное наименование - строка, содержащая полное имя категории в дереве категорий
Функция ПолучитьСписокКатегорийОбъекта(Объект, ПолучатьПолноеНаименование = Истина) Экспорт
	
	СписокКатегорийОбъекта = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КатегорииДанных.Ссылка КАК КатегорияДанных,
		|	КатегорииОбъектов.Автор
		|ИЗ
		|	Справочник.КатегорииДанных КАК КатегорииДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|		ПО КатегорииДанных.Ссылка = КатегорииОбъектов.КатегорияДанных
		|			И (КатегорииОбъектов.ОбъектДанных = &ОбъектДанных)";

	Запрос.УстановитьПараметр("ОбъектДанных", Объект);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИнфоКатегории = Новый Структура;
		ИнфоКатегории.Вставить("Категория", ВыборкаДетальныеЗаписи.КатегорияДанных);
		ИнфоКатегории.Вставить("Установил", ВыборкаДетальныеЗаписи.Автор);
		Если ПолучатьПолноеНаименование Тогда
			ИнфоКатегории.Вставить("ПолноеНаименование", ПолучитьПолныйПутьКатегорииДанных(ВыборкаДетальныеЗаписи.КатегорияДанных));
		КонецЕсли;
		СписокКатегорийОбъекта.Добавить(ИнфоКатегории);
	КонецЦикла;
	
	Возврат СписокКатегорийОбъекта;
	
КонецФункции

//Получает признак того, что у объекта есть категории, присвоенные одним из правил автоматической категоризации
//Параметры: Объект - ссылка на проверяемый объект типа Входящий, Исходящий, Внутренний, Файл
Функция ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДанных.Установить(Объект);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Если ТипЗнч(Запись.Автор) = Тип("СправочникСсылка.ПравилаАвтоматическойКатегоризацииДанных")
			И НЕ Запись.Автор.Пустая() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Вычисляет, выполнена ли проверка установки категории у объекта
Функция ПолучитьФлагПроверкиКатегорийОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДанных.Установить(Объект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ Запись.НазначениеКатегорииПроверено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

//Устанавливает пустую ссылку в поле Автор регистра КатегорииОбъектов для всех записей, добавленных
//правилами автоматической категоризации. 
//Таким образом снимается признак того, что объект обрабатывался правилами.
//
//Параметры: Объект - ссылка на объект типа Внутренний, Входящий, Исходящий, Файл
Процедура СнятьПризнакОбработкиОбъектаПравилами(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииОбъектов.ОбъектДанных,
		|	КатегорииОбъектов.КатегорияДанных
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.ОбъектДанных = &ОбъектДанных";

	Запрос.УстановитьПараметр("ОбъектДанных", Объект);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьОКатегории = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
		ЗаписьОКатегории.ОбъектДанных = ВыборкаДетальныеЗаписи.ОбъектДанных;
		ЗаписьОКатегории.КатегорияДанных = ВыборкаДетальныеЗаписи.КатегорияДанных;
		ЗаписьОКатегории.Прочитать();
		Если ЗаписьОКатегории.Выбран()
			И ТипЗнч(ЗаписьОКатегории.Автор) = Тип("СправочникСсылка.ПравилаАвтоматическойКатегоризацииДанных") Тогда
			ЗаписьОКатегории.Автор = Справочники.ПравилаАвтоматическойКатегоризацииДанных.ПустаяСсылка();
			ЗаписьОКатегории.Записать();
		КонецЕсли;
	КонецЦикла;

		
КонецПроцедуры

//Загружает данные о категориях на форму объекта при ее открытии
//Вызывается из процедуры ПриСозданииНаСервере формы объекта
//Параметры:
//			Элементы - коллекция элементов формы
//			Объект - объект данных формы
//			СписокКатегорийДанных - таблица значений СписокКатегорийДанных формы
//			ИспользоватьАвтоматическуюКатегоризацию - флаг, показывающий, использовать автоматическую категоризацию или нет
//			Параметры - параметры открытия формы
Процедура ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанных, ИспользоватьАвтоматическуюКатегоризацию, Параметры) Экспорт
	
	ЗагрузитьДанныеОКатегорияхПоСсылке(Объект.Ссылка, СписокКатегорийДанных, ИспользоватьАвтоматическуюКатегоризацию, Параметры);
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
КонецПроцедуры

//Загружает данные о категориях по ссылке - не из формы объекта
//Вызывается из процедуры ПриСозданииНаСервере формы объекта
//Параметры:
//			ОбъектСсылка - ссылка на объект данных
//			СписокКатегорийДанных - таблица значений СписокКатегорийДанных формы
//			ИспользоватьАвтоматическуюКатегоризацию - флаг, показывающий, использовать автоматическую категоризацию или нет
//			Параметры - параметры открытия формы
Процедура ЗагрузитьДанныеОКатегорияхПоСсылке(ОбъектСсылка, СписокКатегорийДанных, ИспользоватьАвтоматическуюКатегоризацию, Параметры) Экспорт
	
	СписокКатегорийОбъекта = ПолучитьСписокКатегорийОбъекта(ОбъектСсылка);
	Для Каждого ИнфоОКатегории Из СписокКатегорийОбъекта Цикл
		Строка = СписокКатегорийДанных.Добавить();
		Строка.ПолноеНаименование = ИнфоОКатегории.ПолноеНаименование;
		Строка.Значение = ИнфоОКатегории.Категория;
	КонецЦикла;
		
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	
	Если ОбъектСсылка.Пустая() Тогда
		Если Параметры.Свойство("СписокКатегорий")
			И Параметры.СписокКатегорий <> Неопределено Тогда
			Для Каждого Категория Из Параметры.СписокКатегорий Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Значение;
				НоваяСтрока.ПолноеНаименование = ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		ИначеЕсли Параметры.Свойство("ОднаКатегория")
			И Параметры.ОднаКатегория <> Неопределено Тогда
			НоваяСтрока = СписокКатегорийДанных.Добавить();
			НоваяСтрока.Значение =  Параметры.ОднаКатегория;
			НоваяСтрока.ПолноеНаименование = ПолучитьПолныйПутьКатегорииДанных(Параметры.ОднаКатегория);							
		КонецЕсли;
		Если Параметры.Свойство("ШаблонДокумента")
			И (ТипЗнч(Параметры.ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
			ИЛИ ТипЗнч(Параметры.ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныВходящихДокументов")
			ИЛИ ТипЗнч(Параметры.ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")) Тогда
			Для Каждого КатегорияИзШаблона Из Параметры.ШаблонДокумента.Категории Цикл
				Если НЕ ПроверитьДоступККатегорииУТекущегоПользователя(КатегорияИзШаблона.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Если СписокКатегорийДанных.Найти(КатегорияИзШаблона.Значение, "Значение") = Неопределено Тогда
					НоваяСтрока = СписокКатегорийДанных.Добавить();
					НоваяСтрока.Значение =  КатегорияИзШаблона.Значение;
					НоваяСтрока.ПолноеНаименование = ПолучитьПолныйПутьКатегорииДанных(КатегорияИзШаблона.Значение);							
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДоступККатегорииУТекущегоПользователя(Категория)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Категории.Ссылка
		|ИЗ Справочник.КатегорииДанных КАК Категории
		|ГДЕ
		|	Категории.Ссылка = &Категория";
	Запрос.УстановитьПараметр("Категория", Категория);
	КоличествоДоступныхОбъектов = Запрос.Выполнить().Выбрать().Количество();
	
	Возврат КоличествоДоступныхОбъектов = 1;
	
КонецФункции
	
//Присваивает категорию каждому из объектов в списке, если у объекта еще нет такой категории
//Параметры:
//			Объекты - массив ссылок на объекты типа Вн, Вх, Исх документ или Файл
//			Категория - ссылка на категорию
Процедура ПрисвоитьКатегориюМассивуОбъектов(Объекты, Категория) Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Для Каждого Объект Из Объекты Цикл
		СписокКатегорий = ПолучитьСписокКатегорийОбъекта(Объект);
		Найдена = Ложь;
		Для Каждого ИнфоОКатегории Из СписокКатегорий Цикл
			Если ИнфоОКатегории.Категория = Категория Тогда
				Найдена = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдена Тогда
			УстановитьКатегориюУОбъекта(ТекущийПользователь,
				Категория, 
				Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает пометку удаления у категории (по всей глубине иерархии), если отметка не поставлена, либо снимает отметку удаления, 
//	если отметка не установлена.
//Параметры:
//			Категория - ссылка на категорию
Процедура УстановитьСнятьПометкуУдаленияУКатегории(Категория) Экспорт
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Категория, "Персональная")
		И НЕ РольДоступна("ДобавлениеИзменениеОбщихКатегорий")
		И НЕ РольДоступна("ПолныеПрава") Тогда
		ТекстСообщения = НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'; en = 'User does not have enough permissions to execute the operation on the database.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	КатегорияОбъект = Категория.ПолучитьОбъект();
	
	Если КатегорияОбъект.ПометкаУдаления = Ложь Тогда
		КатегорияОбъект.УстановитьПометкуУдаления(Истина, Ложь);
	Иначе
		КатегорияОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

//Получает список категорий объекта и список категорий, помеченных для удаления
//Из списка помеченных для удаления удаляет те категории, на удаление которых у пользователя нет прав.
//Параметры:
//			СписокКатегорийДанных - ТаблицаЗначений со списком категорий
//				-Значение : ссылка на категорию
//			ВыделенныеСтроки - массив выделенных строк в списке категорий объекта
//Возвращает:
//			Список выделенных строк, из которого удалены строки, на удаление которых у текущего пользователя нет прав
Функция ФильтроватьСписокКатегорийДляУдаления(СсылкаНаОбъект, Знач СписокКатегорийДанных, Знач ВыделенныеСтроки) Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокКатегорийДанных.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ЗаписьОКатегории = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
		ЗаписьОКатегории.ОбъектДанных = СсылкаНаОбъект;
		ЗаписьОКатегории.КатегорияДанных = ДанныеСтроки.Значение;
		ЗаписьОКатегории.Прочитать();
		Если ЗаписьОКатегории.Выбран() Тогда
			Если НЕ РольДоступна(Метаданные.Роли.ДобавлениеИзменениеОбщихКатегорий)
				И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава)
				И ЗначениеЗаполнено(ЗаписьОКатегории.Автор)
				И (ТипЗнч(ЗаписьОКатегории.Автор) = Тип("СправочникСсылка.ПравилаАвтоматическойКатегоризацииДанных")
					ИЛИ ЗаписьОКатегории.Автор <> ТекущийПользователь) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недостаточно прав для удаления категории ""%1"".'; en = 'Not enough permissions to delete category ""%1"".'"),
					ДанныеСтроки.Значение);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Если РольДоступна(Метаданные.Роли.ДобавлениеИзменениеОбщихКатегорий)
				Или РольДоступна(Метаданные.Роли.ПолныеПрава) 
				Или (ЗаписьОКатегории.КатегорияДанных.Персональная И ЗаписьОКатегории.КатегорияДанных.Автор = ТекущийПользователь)
				Или НЕ ЗаписьОКатегории.КатегорияДанных.Персональная Тогда
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недостаточно прав для удаления категории ""%1"".'; en = 'Not enough permissions to delete category ""%1"".'"),
					ДанныеСтроки.Значение);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			МассивСтрокДляУдаления.Добавить(ВыделеннаяСтрока);
		Иначе
			МассивСтрокДляУдаления.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтрокДляУдаления;
	
КонецФункции

//Проверяет, что список доступа у дочерних категорий не шире по сравнению с родительскими.
Процедура ПроверитьДоступПоИерархииКатегорий(знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииДанных.Ссылка
		|ИЗ
		|	Справочник.КатегорииДанных КАК КатегорииДанных
		|ГДЕ
		|	КатегорииДанных.Ссылка В ИЕРАРХИИ(&Ссылка)";

	Запрос.УстановитьПараметр("Ссылка", Объект);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для Каждого СтрокаРезультата Из РезультатЗапроса.Строки Цикл
		Объект = СтрокаРезультата.Ссылка;
		ОбъектКатегорияРодитель = Объект.Родитель;
		Если НЕ ЗначениеЗаполнено(ОбъектКатегорияРодитель) Тогда
			Возврат;
		КонецЕсли;
		
		Пока ОбъектКатегорияРодитель <> Справочники.КатегорииДанных.ВсеКатегории Цикл
			
			ПустойСписокДоступаТекущейКатегории = Ложь;
			ПустойСписокДоступаПустойСписокДоступаРодителя = Ложь;
			СписокПользователейТекущейКатегории = ПолучитьПолныйСписокДоступаКатегории(Объект, ПустойСписокДоступаТекущейКатегории);
			СписокПользователейРодителя = ПолучитьПолныйСписокДоступаКатегории(ОбъектКатегорияРодитель, ПустойСписокДоступаПустойСписокДоступаРодителя);
			
			Если НЕ ПустойСписокДоступаПустойСписокДоступаРодителя 
				И ПустойСписокДоступаТекущейКатегории Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Список доступа категории ""%1"" пуст.
						|В списке доступа родительской категории ""%2"" указаны пользователи.
						|Необходимо указать пользователей в списке доступа категории ""%1"".';
						|en = 'Access list of category ""%1"" is empty.
						|There are users in the list of parent category ""%2"".
						|It is necessary to add users to access list of category ""%1"".'"),
				Объект.Наименование,
				ОбъектКатегорияРодитель.Наименование);
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			СписокПользователей = СравнитьСпискиПользователей(СписокПользователейТекущейКатегории, СписокПользователейРодителя);
			Если ЗначениеЗаполнено(СписокПользователей) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Следующие пользователи из списка доступа категории ""%1""
						|отсутствуют в списке доступа родительской категории ""%2"":
						|%3';
						|en = 'The following users from access list of category ""%1""
						|are absent from the list of parent category ""%2"":
						|%3'"),
					Объект.Наименование,
					ОбъектКатегорияРодитель.Наименование,
					СписокПользователей);
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			ОбъектКатегорияРодитель = ОбъектКатегорияРодитель.Родитель;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
Функция ПолучитьПолныйСписокДоступаКатегории(Категория, ПустойСписокДоступа = Ложь) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПользователейСпискаДоступа = Новый Массив;
	
	Если Категория.Доступ.Количество() = 0 Тогда
		ПустойСписокДоступа = Истина;
		Возврат РаботаСПользователями.ПолучитьПользователейРабочейГруппы(Справочники.РабочиеГруппы.ВсеПользователи);	
	КонецЕсли;
	
	Для Каждого ЭлементДоступа Из Категория.Доступ Цикл
		Если ТипЗнч(ЭлементДоступа.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Если МассивПользователейСпискаДоступа.Найти(ЭлементДоступа.Пользователь) = Неопределено Тогда
				МассивПользователейСпискаДоступа.Добавить(ЭлементДоступа.Пользователь);
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЭлементДоступа.Пользователь) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			СписокПользователейГруппы = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(ЭлементДоступа.Пользователь);	
			Для Каждого ПользовательИзГруппы Из СписокПользователейГруппы Цикл
				Если МассивПользователейСпискаДоступа.Найти(ПользовательИзГруппы) = Неопределено Тогда
					МассивПользователейСпискаДоступа.Добавить(ПользовательИзГруппы);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	Возврат МассивПользователейСпискаДоступа;
	
КонецФункции

//Осуществляет проверку того, ограничен ли список доступа у категории
Функция ПроверитьОграниченностьДоступаКатегории(Категория) Экспорт
	
	Результат = Ложь;
	СписокДоступаКатегории = ПолучитьПолныйСписокДоступаКатегории(Категория);
	СписокВсехПользователей = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(Справочники.РабочиеГруппы.ВсеПользователи);
	РезультатПроверки = СравнитьСпискиПользователей(СписокВсехПользователей, СписокДоступаКатегории);
	Результат = ЗначениеЗаполнено(РезультатПроверки);
	Возврат Результат;
	
КонецФункции

Функция СравнитьСпискиПользователей(СписокПользователейВложенный, СписокПользователейОбъемлющий)
	
	СписокПользователей = "";
	Для Каждого ПользовательРодителя Из СписокПользователейОбъемлющий Цикл 
		НайденныйПользователь = СписокПользователейВложенный.Найти(ПользовательРодителя);
		Если НайденныйПользователь <> Неопределено Тогда
			СписокПользователейВложенный.Удалить(НайденныйПользователь);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПользователейВложенный.Количество() > 0 Тогда
		Для Каждого Пользователь Из СписокПользователейВложенный Цикл
			СписокПользователей = СписокПользователей + Строка(Пользователь) + Символы.ВК;	
		КонецЦикла;
	КонецЕсли;

	Возврат СписокПользователей;
	
КонецФункции

// Делает запись бизнес-события добавления в категорию
// Категория - категория
// Объект - любая ссылка
// Комментарий - строка
Процедура ЗарегистрироватьДобавлениеВКатегорию(Категория, Объект, Комментарий) Экспорт
	
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ВидСобытия = Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию;
	
	ПараметрыСобытия = Новый Структура("Объект, Комментарий", Объект, Комментарий);

	// тут формируем КонтекстСобытия (XML)	
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();  
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);  
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыСобытия, НазначениеТипаXML.Явное);  
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
		
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Категория, ВидСобытия, КонтекстСобытия, Автор);
	
КонецПроцедуры	

// Делает запись бизнес-события удаления из категории
// Категория - категория
// Объект - любая ссылка
// Комментарий - строка
Процедура ЗарегистрироватьУдалениеИзКатегории(Категория, Объект, Комментарий) Экспорт
	
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ВидСобытия = Справочники.ВидыБизнесСобытий.УдалениеИзКатегории;
	
	ПараметрыСобытия = Новый Структура("Объект, Комментарий", Объект, Комментарий);

	// тут формируем КонтекстСобытия (XML)	
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();  
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);  
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыСобытия, НазначениеТипаXML.Явное);  
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
		
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Категория, ВидСобытия, КонтекстСобытия, Автор);
	
КонецПроцедуры	

// Обработчик подписи КатегорияПриЗаписи
Процедура ПриЗаписиКатегории(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.Количество() <> 0 Тогда
		
		Для НомерЗаписи = 0 По Источник.Количество() - 1 Цикл
			
			ОбъектДанных = Источник.Получить(НомерЗаписи).ОбъектДанных;
			
			РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
				ОбъектДанных, "ЕстьКатегории", Истина); 
						
		КонецЦикла;
		
	Иначе // удаление
		
		ОбъектДанных = Источник.Отбор.ОбъектДанных.Значение;
		
		Если ОбъектДанных <> Неопределено И НЕ ОбъектИмеетКатегории(ОбъектДанных.Ссылка) Тогда
			
			РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
				ОбъектДанных, "ЕстьКатегории", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет, что к объекту с файлами присоединен по крайней мере один файл
//
Функция ОбъектИмеетКатегории(ОбъектСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СписокКатегорийОбъекта = ПолучитьСписокКатегорийОбъекта(ОбъектСсылка);
	Возврат СписокКатегорийОбъекта.Количество() <> 0;
	
КонецФункции

// Заполняет регистр КешИнформацииОбОбъектах при обновлении базы
Процедура ЗаполнитьРегистрКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КатегорииОбъектов.ОбъектДанных КАК ОбъектДанных
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектДанных = Выборка.ОбъектДанных;
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
			ОбъектДанных, "ЕстьКатегории", Истина);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСписокКатегорийУМассиваОбъектов(СписокКатегорий, МассивОбъектов) Экспорт
	
	Для Каждого Объект Из МассивОбъектов Цикл
		ЗаписатьСписокКатегорийУОбъекта(СписокКатегорий, Объект);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьПараметрыДереваКатегорийВСпискахДокументов(
	        КлючОбъектаНастроек,
			СписокРаскрытыхКатегорий,
			ТекущаяКатегория,
			ВыбранныеКатегории,
			ОтборДанных,
			СУчетомПодкатегорий,
			ПоказыватьСписокОтмеченных) Экспорт 
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъектаНастроек, "ОткрытыеКатегории", СписокРаскрытыхКатегорий);	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъектаНастроек, "ТекущаяКатегория", ТекущаяКатегория);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъектаНастроек, "ВыбранныеКатегории", ВыбранныеКатегории);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъектаНастроек, "ОтборДанных", ОтборДанных);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъектаНастроек, "СУчетомПодкатегорий", СУчетомПодкатегорий);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъектаНастроек, "ПоказыватьСписокОтмеченных", ПоказыватьСписокОтмеченных);
	
КонецПроцедуры


