
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль МультипредметностьКОРП: сервер, внешнее соединение
//
// Содержит процедуры и функции обработки объектов и механизмов, 
// поддерживающих мультипредметность в редакциях КОРП/ДГУ.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс_ПроверкаПравНаПредметы

// Проверяет права участников процессов на предметы.
// В случае отсутствия прав, отправляет уведомление автору процессу.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  АвторПроцесса - СправочникСсылка.Пользователи - автор процесса.
//
Процедура ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(ПроцессОбъект, АвторПроцесса) Экспорт
	
	Отказ = Ложь;
	ПроцессОбъект.ПроверитьПраваУчастниковПроцессаНаПредметы(ПроцессОбъект, Отказ, Ложь);
	
	Если Отказ Тогда
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		
		ТекстУведомления = НСтр("ru = 'Не все участники процесса имеют права на предметы:
			|%1';
			|en = 'Не все участники процесса имеют права на предметы:
			|%1'");
			
		ТекстСообщений = "";
		Разделитель = "";
			
		Для Каждого Сообщение Из Сообщения Цикл
			ТекстСообщений = ТекстСообщений
				+ Разделитель
				+ Сообщение.Текст;
				
			Разделитель = "" + Символы.ПС + Символы.ПС;
		КонецЦикла;
		
		ТекстУведомления = СтрШаблон(ТекстУведомления, ТекстСообщений);
		
		РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
			ТекстУведомления,
			АвторПроцесса,
			ПроцессОбъект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные действия в регистре сведений ПредметыИУчастникиДействийКомплексныхПроцессов.
//
// Параметры:
//  Действие - СправочникОбъект.<ИмяШаблонаПроцесса>
//             СправочникСсылка.<ИмяШаблонаПроцесса> - действие комплексного процесса.
//
Процедура ОбновитьКэшПредметовИУчастниковДействияКомплексныхПроцессов(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Действие)) Тогда
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Действие, "ПометкаУдаления, ВладелецШаблона, КомплексныйПроцесс, Ссылка");
	Иначе
		РеквизитыДействия = Действие;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыДействия.КомплексныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитыДействия.ПометкаУдаления Тогда
		
		ДобавитьЗаписиПоДействию = Ложь;
		
	ИначеЕсли Не ОбщегоНазначения.СсылкаСуществует(РеквизитыДействия.КомплексныйПроцесс) Тогда
		
		ДобавитьЗаписиПоДействию = Истина;
		
	Иначе
		
		ДобавитьЗаписиПоДействию = Ложь;
		
		ТекущееДействие = РеквизитыДействия.Ссылка;
		ТекущийВладелец = РеквизитыДействия.ВладелецШаблона;
		Пока ТекущийВладелец <> РеквизитыДействия.КомплексныйПроцесс Цикл
			ТекущееДействие = ТекущийВладелец;
			ТекущийВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийВладелец, "ВладелецШаблона");
		КонецЦикла;
		
		Схема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДействия.КомплексныйПроцесс, "Схема");
		
		Если ЗначениеЗаполнено(Схема) Тогда
			ТекстЗапрос = 
				"ВЫБРАТЬ
				|	СхемыКомплексныхПроцессовПараметрыДействий.Процесс КАК ЗапущенныйБизнесПроцесс
				|ИЗ
				|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов КАК СхемыКомплексныхПроцессов
				|		ПО СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = СхемыКомплексныхПроцессов.Ссылка
				|ГДЕ
				|	СхемыКомплексныхПроцессов.ВладелецСхемы = &КомплексныйПроцесс
				|	И СхемыКомплексныхПроцессовПараметрыДействий.ШаблонПроцесса = &ШаблонБизнесПроцесса";
		Иначе
			ТекстЗапрос = 
				"ВЫБРАТЬ
				|	КомплексныйПроцессЭтапы.ЗапущенныйБизнесПроцесс
				|ИЗ
				|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
				|ГДЕ
				|	КомплексныйПроцессЭтапы.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса
				|	И КомплексныйПроцессЭтапы.Ссылка = &КомплексныйПроцесс";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапрос;
		Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", ТекущееДействие);
		Запрос.УстановитьПараметр("КомплексныйПроцесс", РеквизитыДействия.КомплексныйПроцесс);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0
			Или Выборка.Следующий()
				И Не ЗначениеЗаполнено(Выборка.ЗапущенныйБизнесПроцесс) Тогда
			
			ДобавитьЗаписиПоДействию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавитьЗаписиПоДействию Тогда
		РегистрыСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.
			ДобавитьЗаписиПоДействию(Действие);
	Иначе
		РегистрыСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.
			УдалитьЗаписиДействия(РеквизитыДействия.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет данные действия комплексного процесса из регистра сведений ПредметыИУчастникиДействийКомплексныхПроцессов.
//
// Параметры:
//  Действие - СправочникСсылка.<ИмяШаблонаПроцесса> - действие комплексного процесса.
//
Процедура УдалитьДействиеКомплексногоПроцессаИзКэшаПредметовИУчастников(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.УдалитьЗаписиДействия(Действие);
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		
		ПодчиненныеДействия = Новый Массив;
		
		ПолучитьДействияКомплексногоПроцесса(Действие, ПодчиненныеДействия);
		
		Для Каждого ПодчиненноеДействие Из ПодчиненныеДействия Цикл
			РегистрыСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.
				УдалитьЗаписиДействия(ПодчиненноеДействие);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПроверкаПравНаПредметы

// Обработчик подписки ОбновлениеПредметовИУчастниковДействийКомплексногоПроцесса
//
Процедура ОбновлениеПредметовИУчастниковДействийКомплексногоПроцессаПриЗаписи(
	Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <>
			"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов" Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбновитьКэшПредметовИУчастниковДействияКомплексныхПроцессов(Источник);
	
КонецПроцедуры

// Помещает все действия комплексного процесса в массив.
// Рекурсивная процедура.
//
// Параметры:
//  КомплексныйПроцесс - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов - комплексный процесс.
//  Действия - Массив
//   * СправочникСсылка.<ИмяШаблонаПроцесса> - действие комплексного процесса. В этот параметр является результатом
//                                             выполнения процедуры.
//
Процедура ПолучитьДействияКомплексногоПроцесса(КомплексныйПроцесс, Действия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Схема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомплексныйПроцесс, "Схема");
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(Схема) Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СхемыКомплексныхПроцессовПараметрыДействий.ШаблонПроцесса КАК ШаблонБизнесПроцесса
			|ИЗ
			|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
			|ГДЕ
			|	СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = &Схема";
		Запрос.УстановитьПараметр("Схема", Схема);
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &КомплексныйПроцесс";
		Запрос.УстановитьПараметр("КомплексныйПроцесс", КомплексныйПроцесс);
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ШаблонБизнесПроцесса) Тогда
			Продолжить;
		КонецЕсли;
		
		Действия.Добавить(Выборка.ШаблонБизнесПроцесса);
		
		Если ТипЗнч(Выборка.ШаблонБизнесПроцесса) =
			Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			
			ПолучитьДействияКомплексногоПроцесса(Выборка.ШаблонБизнесПроцесса, Действия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
