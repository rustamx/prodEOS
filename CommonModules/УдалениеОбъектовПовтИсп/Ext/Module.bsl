
Функция ВсеТипыРегистровСведений() Экспорт
	
	ИменаРегистровПоТипамКлючей = Новый Соответствие;
	
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		Тип = Тип("РегистрСведенийКлючЗаписи." + Регистр.Имя);
		ИменаРегистровПоТипамКлючей.Вставить(Тип, Регистр.Имя);
	КонецЦикла;
	
	Возврат ИменаРегистровПоТипамКлючей;
	
КонецФункции

// Возвращает значение, по которому будут отсортированы удаляемые элементы перед началом удаления
//
// Параметры:
//  ТипЭлемента - Строка - полное имя метаданных объекта
//
// Возвращаемое значение:
//  Число - приоритет удаления элемента
//
Функция ПорядокУдаленияЭлемента(ТипЭлемента) Экспорт
	
	Результат = 0;
	
	Если ТипЭлемента = "Справочник.ДескрипторыДоступаОбъектов"
		Или ТипЭлемента = "Справочник.ДескрипторыДоступаРегистров" Тогда
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, которая содержит 
//  тексты запросов для получения подчиненных элементов и вид иерархии
// 
Функция ПараметрыДляПоискаПодчиненных(ПолноеИмя) Экспорт
	
	Результат = Новый Структура(
		"ВидИерархии, ЗапросПоИерархии, ЗапросПоВладельцу",
		Неопределено, Неопределено, Неопределено);
	
	Иерархический = Ложь;
	ВидИерархии = Неопределено;
	ЯвляетсяВладельцем = Ложь;
	Подчиненные = Новый Массив;
	
	МетаданныеЭлемента = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	ВидЭлемента = Лев(ПолноеИмя, Найти(ПолноеИмя, ".") - 1);
	
	Если ВидЭлемента = "Справочник"
		Или ВидЭлемента = "ПланВидовХарактеристик"
		Или ВидЭлемента = "ПланОбмена"
		Или ВидЭлемента = "ПланСчетов"
		Или ВидЭлемента = "ПланВидовРасчета" Тогда
		
		Если ВидЭлемента = "Справочник" Или ВидЭлемента = "ПланВидовХарактеристик" Тогда
			Иерархический = МетаданныеЭлемента.Иерархический;
		КонецЕсли;
		
		Если ВидЭлемента = "Справочник" Тогда
			ВидИерархии = МетаданныеЭлемента.ВидИерархии;
		КонецЕсли;
		
		МетаданныеСправочников = Метаданные.Справочники;
		Для Каждого Справочник Из МетаданныеСправочников Цикл
			Если Справочник.Владельцы.Содержит(МетаданныеЭлемента) Тогда
				
				ЯвляетсяВладельцем = Истина;
				Подчиненные.Добавить(Справочник.ПолноеИмя());
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Иерархический Тогда
		
		ЗапросПоИерархии = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка
			|ИЗ
			|	%ПолноеИмя% КАК ТаблицаСправочника
			|ГДЕ
			|	ТаблицаСправочника.Ссылка В ИЕРАРХИИ(&УдаляемыйЭлемент)");
			
		ЗапросПоИерархии.Текст = СтрЗаменить(ЗапросПоИерархии.Текст, "%ПолноеИмя%", ПолноеИмя);
		Результат.ВидИерархии = ВидИерархии;
		Результат.ЗапросПоИерархии = ЗапросПоИерархии;
		
	КонецЕсли;
	
	Если ЯвляетсяВладельцем Тогда
		
		ЗапросПоВладельцу = Новый Запрос;
		
		ШаблонТекста = 
			"ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка
			|ИЗ
			|	%ПолноеИмя% КАК ТаблицаСправочника
			|ГДЕ
			|	ТаблицаСправочника.Владелец = &УдаляемыйЭлемент";
		
		Для Каждого ИмяПодчиненного Из Подчиненные Цикл
			
			ЗапросПоВладельцу.Текст = ЗапросПоВладельцу.Текст +
				?(ЗапросПоВладельцу.Текст = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС)
				+ СтрЗаменить(ШаблонТекста, "%ПолноеИмя%", ИмяПодчиненного);
				
		КонецЦикла;
		
		Результат.ЗапросПоВладельцу = ЗапросПоВладельцу;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


