////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мониторинг процессов".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания "Мониторинг процессов".
//
Процедура МониторингПроцессов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.МониторингПроцессов);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМониторингПроцессов") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнитьРасчетПоказателейПроцессовЗаТекущийПериод();
	ВыполнитьРасчетПоказателейПроцессовЗаПрошлыеПериоды();
	
КонецПроцедуры

// Выполняет обновление показателей по умолчанию для текущего пользователя.
//
Процедура ОбновитьПоказателиПоУмолчанию() Экспорт
	
	ДатаНастройкиПоказателейПоУмолчанию =
		ПолучитьПерсональнуюНастройку("ДатаНастройкиПоказателейПоУмолчанию");
	Если ЗначениеЗаполнено(ДатаНастройкиПоказателейПоУмолчанию) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбновлениеПоказателейПоУмолчанию(ПользователиКлиентСервер.ТекущийПользователь());
	
	УстановитьПерсональнуюНастройку("ДатаНастройкиПоказателейПоУмолчанию", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Возвращает персональную настройку текущего пользователя по ключу.
//
// Параметры:
//  КлючНастройки - Строка - Ключ настройки.
// 
// Возвращаемое значение:
//  Любой - Значение настройки.
//
Функция ПолучитьПерсональнуюНастройку(КлючНастройки) Экспорт
	
	Если КлючНастройки = "ДатаНастройкиПоказателейПоУмолчанию" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"МониторингПроцессов",
			"ДатаНастройкиПоказателейПоУмолчанию",
			Дата(1,1,1));
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная настройка мониторинга процессов: ""%1""'; en = 'Incorrect settings of process monitoring: ""%1""'"),
			КлючНастройки);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку текущего пользователя.
//
// Параметры:
//  КлючНастройки - Строка - Ключ настройки.
//  Значение - Любой - Значение настройки.
//
Процедура УстановитьПерсональнуюНастройку(КлючНастройки, Значение) Экспорт
	
	Если КлючНастройки = "ДатаНастройкиПоказателейПоУмолчанию" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки мониторинга процессов: ""%1""'; en = 'Incorrect value of process monitoring settings: ""%1""'"),
				КлючНастройки);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"МониторингПроцессов",
			"ДатаНастройкиПоказателейПоУмолчанию",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная настройка мониторинга процессов: ""%1""'; en = 'Incorrect settings of process monitoring: ""%1""'"),
			КлючНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление показателей процессов в списке.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - Содержит настройки условного оформления формы.
//  ВариантФормы - Строка - Вариант формы.
//
Процедура УстановитьУсловноеОформление(УсловноеОформление, ВариантФормы) Экспорт
	
	// Отслеживаемые показатели.
	Если ВариантФормы <> "МоиПоказатели" Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Поля = Элемент.Поля.Элементы;
		Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
		Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеЗначения");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АктивнаПодписка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
			Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	КонецЕсли;
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеЗначения");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
	// Положительная динамика - цвет.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИзменения");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоложительнаяДинамика);
	
	// Положительная динамика - символ.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "▲");
	
	// Нейтральная динамика - цвет.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИзменения");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НейтральнаяДинамика);
	
	// Нейтральная динамика - символ.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "—");
	
	// Отрицательная динамика - цвет.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИзменения");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтрицательнаяДинамика);
	
	// Отрицательная динамика - символ.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДинамикаПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "▼");
	
	// Не рассчитано значение показателя.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеЗначения");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "—");
	
	// Не рассчитано изменение показателя.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИзменения");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеИзменения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "—");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает имя события журнала регистрации.
//
// Возвращаемое значение:
//  Строка - Событие журнала регистрации.
//
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Мониторинг процессов'; en = 'Process monitoring'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Выполняет обновление показателей по умолчанию для указанного пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого обновляются показатели по умолчанию.
//
Процедура ВыполнитьОбновлениеПоказателейПоУмолчанию(Пользователь)
	
	// Определяем состав библиотечных показателей.
	Основания = ОснованияБиблиотечныхПоказателейПользователя(Пользователь);
	БиблиотечныеПоказатели =
		Справочники.ПоказателиПроцессов.СоставБиблиотечныхПоказателей(Основания);
	Если БиблиотечныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Исключаем те показатели, по которым уже созданы автоматические показатели.
	// При этом учитываем помеченные на удаление показатели.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоказателиПроцессов.ХешАвтоматическогоПоказателя КАК ХешАвтоматическогоПоказателя
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|ГДЕ
		|	ПоказателиПроцессов.Автор = &Автор
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Автор", ПользователиКлиентСервер.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ХешАвтоматическогоПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = БиблиотечныеПоказатели.Найти(
			Выборка.ХешАвтоматическогоПоказателя, "ХешПоказателя");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		БиблиотечныеПоказатели.Удалить(НайденнаяСтрока);
		
	КонецЦикла;
	
	// Создаем библиотечные показатели.
	Для Каждого БиблиотечныйПоказатель Из БиблиотечныеПоказатели Цикл
		Справочники.ПоказателиПроцессов.ДобавитьАвтоматическийПоказатель(
			БиблиотечныйПоказатель.ВариантРасчета,
			БиблиотечныйПоказатель.НастройкиОтбора);
	КонецЦикла;
	
КонецПроцедуры

// Определяет состав оснований библиотечных показателей для пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого обновляются показатели по умолчанию.
//
// Возвращаемое значение:
//  Массив - Массив оснований библиотечных показателей.
//
Функция ОснованияБиблиотечныхПоказателейПользователя(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныИсполнения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсполнения КАК ШаблоныИсполнения
		|ГДЕ
		|	ШаблоныИсполнения.Ответственный = &Пользователь
		|	И ШаблоныИсполнения.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныИсполнения.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныИсполнения.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныКомплексныхБизнесПроцессов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|ГДЕ
		|	ШаблоныКомплексныхБизнесПроцессов.Ответственный = &Пользователь
		|	И ШаблоныКомплексныхБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныКомплексныхБизнесПроцессов.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныКомплексныхБизнесПроцессов.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныОзнакомления.Ссылка
		|ИЗ
		|	Справочник.ШаблоныОзнакомления КАК ШаблоныОзнакомления
		|ГДЕ
		|	ШаблоныОзнакомления.Ответственный = &Пользователь
		|	И ШаблоныОзнакомления.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныОзнакомления.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныОзнакомления.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныПоручения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныПоручения КАК ШаблоныПоручения
		|ГДЕ
		|	ШаблоныПоручения.Ответственный = &Пользователь
		|	И ШаблоныПоручения.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныПоручения.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныПоручения.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныПриглашения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныПриглашения КАК ШаблоныПриглашения
		|ГДЕ
		|	ШаблоныПриглашения.Ответственный = &Пользователь
		|	И ШаблоныПриглашения.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныПриглашения.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныПриглашения.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныРассмотрения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныРассмотрения КАК ШаблоныРассмотрения
		|ГДЕ
		|	ШаблоныРассмотрения.Ответственный = &Пользователь
		|	И ШаблоныРассмотрения.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныРассмотрения.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныРассмотрения.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныРегистрации.Ссылка
		|ИЗ
		|	Справочник.ШаблоныРегистрации КАК ШаблоныРегистрации
		|ГДЕ
		|	ШаблоныРегистрации.Ответственный = &Пользователь
		|	И ШаблоныРегистрации.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныРегистрации.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныРегистрации.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСогласования.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСогласования КАК ШаблоныСогласования
		|ГДЕ
		|	ШаблоныСогласования.Ответственный = &Пользователь
		|	И ШаблоныСогласования.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныСогласования.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныСогласования.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСоставныхБизнесПроцессов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
		|ГДЕ
		|	ШаблоныСоставныхБизнесПроцессов.Ответственный = &Пользователь
		|	И ШаблоныСоставныхБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныСоставныхБизнесПроцессов.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныСоставныхБизнесПроцессов.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныУтверждения.Ссылка
		|ИЗ
		|	Справочник.ШаблоныУтверждения КАК ШаблоныУтверждения
		|ГДЕ
		|	ШаблоныУтверждения.Ответственный = &Пользователь
		|	И ШаблоныУтверждения.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныУтверждения.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныУтверждения.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Руководитель = &Пользователь
		|	И Проекты.ПометкаУдаления = ЛОЖЬ
		|	И Проекты.ЭтоГруппа = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Руководитель = &Пользователь
		|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Выполняет расчета показателей процессов за текущий период.
//
Процедура ВыполнитьРасчетПоказателейПроцессовЗаТекущийПериод()
	
	ДатаРасчета = ТекущаяДатаСеанса();
	
	// Актуальный период.
	Показатели = ПоказателиПроцессовДляРасчетаЗаАктуальныеПериоды(ДатаРасчета);
	ВыполнитьРасчетПоказателейПроцессов(Показатели);
	
	// За полный период.
	Показатели = ПоказателиПроцессовДляРасчетаЗаПолныеПериоды();
	ВыполнитьРасчетПоказателейПроцессов(Показатели);
	
	// Произвольный период.
	Показатели = ПоказателиПроцессовДляРасчетаЗаПроизвольныеПериоды(ДатаРасчета);
	ВыполнитьРасчетПоказателейПроцессов(Показатели);
	
КонецПроцедуры

// Выполняет расчета показателей процессов.
//
// Параметры:
//  Показатели - ТаблицаЗначений - Текстовое описание параметра процедуры.
//
Процедура ВыполнитьРасчетПоказателейПроцессов(Показатели)
	
	ОбработанныеПоказатели = Новый Массив;
	Для Каждого Показатель Из Показатели Цикл
		
		Если ОбработанныеПоказатели.Найти(Показатель.ХешНастроекОтбора) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Для расчета выбираем показатели с одинаковыми настройками отбора.
		ПараметрыОтбора = Новый Структура("ХешНастроекОтбора", Показатель.ХешНастроекОтбора);
		ПоказателиКРасчету = Показатели.НайтиСтроки(ПараметрыОтбора);
		Попытка
			РассчитатьПоказатели(ПоказателиКРасчету, Показатель.ДатаРасчета, Истина);
		Исключение
			ШаблонТекстаОшибки = НСтр("ru = 'Не удалось выполнить расчет показателя %1 (%2):
				|%3';
				|en = 'Could not calculate metric %1 (%2):
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(
				ШаблонТекстаОшибки,
				Показатель.Ссылка,
				ПолучитьНавигационнуюСсылку(Показатель.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
		КонецПопытки;
		
		ОбработанныеПоказатели.Добавить(Показатель.ХешНастроекОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчета показателей процессов за прошлые периоды.
//
Процедура ВыполнитьРасчетПоказателейПроцессовЗаПрошлыеПериоды()
	
	// Расчет показателей
	Показатели = ПоказателиПроцессовДляРасчетаЗаПрошлыеПериоды();
	
	РассчитыватьС = Дата(1, 1, 1);
	РассчитыватьПо = НачалоДня(ТекущаяДатаСеанса());
	Для Каждого Показатель Из Показатели Цикл
		РассчитыватьС = Макс(РассчитыватьС, Показатель.ДатаРасчета);
		РассчитыватьПо = Мин(РассчитыватьПо, Показатель.ДатаПересчета);
	КонецЦикла;
	Если Не ЗначениеЗаполнено(РассчитыватьС) Тогда
		Возврат;
	КонецЕсли;
	
	// Рассчитываем начиная с даты расчета, по дату пересчета, каждый раз уменьшая дату расчета на час.
	ДатаРасчета = РассчитыватьС;
	ОбработанныеПоказатели = Новый Массив;
	Пока ДатаРасчета >= РассчитыватьПо Цикл
		
		ОбработанныеПоказатели.Очистить();
		
		ПараметрыОтбора = Новый Структура("ДатаРасчета", ДатаРасчета);
		ПоказателиКРасчетуНаДату = Показатели.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Показатель Из ПоказателиКРасчетуНаДату Цикл
			
			Если ОбработанныеПоказатели.Найти(Показатель.ХешНастроекОтбора) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Для расчета выбираем показатели с одинаковыми настройками отбора.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ХешНастроекОтбора", Показатель.ХешНастроекОтбора);
			ПараметрыОтбора.Вставить("ДатаРасчета", ДатаРасчета);
			ПоказателиКРасчету = Показатели.НайтиСтроки(ПараметрыОтбора);
			Попытка
				РассчитатьПоказатели(ПоказателиКРасчету, ДатаРасчета, Ложь);
				Для Каждого ПоказательКРасчету Из ПоказателиКРасчету Цикл
					НоваяДатаРасчета =
						Перечисления.ПериодыРасчетаПоказателейПроцессов.ПредыдущаяДатаРасчета(
							ПоказательКРасчету.ПериодРасчета,
							ПоказательКРасчету.ДатаРасчета,
							ПоказательКРасчету.ПериодЗамеров);
					Если НоваяДатаРасчета >= ПоказательКРасчету.ДатаПересчета Тогда
						ПоказательКРасчету.ДатаРасчета = НоваяДатаРасчета;
					КонецЕсли;
				КонецЦикла;
			Исключение
				ШаблонТекстаОшибки = НСтр("ru = 'Не удалось выполнить расчет показателя %1 (%2):
					|%3';
					|en = 'Could not calculate metric %1 (%2):
					|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстОшибки = СтрШаблон(
					ШаблонТекстаОшибки,
					Показатель.Ссылка,
					ПолучитьНавигационнуюСсылку(Показатель.Ссылка),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстОшибки);
			КонецПопытки;
			
			ОбработанныеПоказатели.Добавить(Показатель.ХешНастроекОтбора);
			
		КонецЦикла;
		
		ДатаРасчета = ДатаРасчета - 3600; // Следующий расчет производим для предыдущего часа.
		
	КонецЦикла;
	
	// Удаление рассчитанных показателей
	Показатели = ПоказателиПроцессовДляРасчетаЗаПрошлыеПериоды();
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.ДатаРасчета > Показатель.ДатаПересчета Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.ОчередьПересчетаПоказателейПроцессов.Удалить(
			Показатель.Ссылка, Показатель.ВерсияДанных);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу показателей процессов для расчета за актуальные периоды.
//
// Параметры:
//  ДатаРасчета - Дата - Дата, на которую рассчитывается показатель.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Показатели процессов для расчета.
//
Функция ПоказателиПроцессовДляРасчетаЗаАктуальныеПериоды(ДатаРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.ПоказателиПроцессов"));
	Показатели.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ВариантРасчета", Новый ОписаниеТипов("Структура"));
	Показатели.Колонки.Добавить("ХешНастроекОтбора", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ХешВариантаРасчета", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка КАК Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета КАК ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета КАК СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора КАК ХешНастроекОтбора,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.Актуальный)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И РАЗНОСТЬДАТ(ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, МИНУТА) >= ПоказателиПроцессов.ПериодЗамеров * 60
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.ПоДням)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И РАЗНОСТЬДАТ(ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, МИНУТА) >= ПоказателиПроцессов.ПериодЗамеров * 60";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаРасчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПоказатель = Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПоказатель, Выборка);
		
		ВариантРасчета = Справочники.ПоказателиПроцессов.ВариантРасчета();
		ЗаполнитьЗначенияСвойств(ВариантРасчета, Выборка);
		НовыйПоказатель.ВариантРасчета = ВариантРасчета;
		
		НовыйПоказатель.ХешВариантаРасчета =
			Справочники.ПоказателиПроцессов.ХешВариантаРасчета(ВариантРасчета);
		НовыйПоказатель.ДатаРасчета = ДатаРасчета;
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает таблицу показателей процессов для расчета за полные периоды.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Показатели процессов для расчета.
//
Функция ПоказателиПроцессовДляРасчетаЗаПолныеПериоды()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.ПоказателиПроцессов"));
	Показатели.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ВариантРасчета", Новый ОписаниеТипов("Структура"));
	Показатели.Колонки.Добавить("ХешНастроекОтбора", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ХешВариантаРасчета", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка КАК Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета КАК ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета КАК СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора КАК ХешНастроекОтбора,
		|	&ДатаРасчетаДень КАК ДатаРасчета,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.День)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) < &ДатаРасчетаДень
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора,
		|	&ДатаРасчетаНеделя,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.Неделя)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) < &ДатаРасчетаНеделя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора,
		|	&ДатаРасчетаМесяц,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.Месяц)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) < &ДатаРасчетаМесяц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора,
		|	&ДатаРасчетаКвартал,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.Квартал)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) < &ДатаРасчетаКвартал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора,
		|	&ДатаРасчетаГод,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.Год)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ЗначенияПоказателейПроцессовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) < &ДатаРасчетаГод";
	
	СтандартныйПериод = Новый СтандартныйПериод;
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Вчера;
	Запрос.УстановитьПараметр("ДатаРасчетаДень", СтандартныйПериод.ДатаНачала);
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя;
	Запрос.УстановитьПараметр("ДатаРасчетаНеделя", СтандартныйПериод.ДатаНачала);
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	Запрос.УстановитьПараметр("ДатаРасчетаМесяц", СтандартныйПериод.ДатаНачала);
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал;
	Запрос.УстановитьПараметр("ДатаРасчетаКвартал", СтандартныйПериод.ДатаНачала);
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГод;
	Запрос.УстановитьПараметр("ДатаРасчетаГод", СтандартныйПериод.ДатаНачала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПоказатель = Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПоказатель, Выборка);
		
		ВариантРасчета = Справочники.ПоказателиПроцессов.ВариантРасчета();
		ЗаполнитьЗначенияСвойств(ВариантРасчета, Выборка);
		НовыйПоказатель.ВариантРасчета = ВариантРасчета;
		
		НовыйПоказатель.ХешВариантаРасчета =
			Справочники.ПоказателиПроцессов.ХешВариантаРасчета(ВариантРасчета);
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает таблицу показателей процессов для расчета за актуальные периоды.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Показатели процессов для расчета.
//
Функция ПоказателиПроцессовДляРасчетаЗаПроизвольныеПериоды(ДатаРасчета)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.ПоказателиПроцессов"));
	Показатели.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ВариантРасчета", Новый ОписаниеТипов("Структура"));
	Показатели.Колонки.Добавить("ХешНастроекОтбора", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ХешВариантаРасчета", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиПроцессов.Ссылка КАК Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета КАК ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета КАК СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора КАК ХешНастроекОтбора,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПоследних КАК ЗначенияПоказателейПроцессовСрезПоследних
		|		ПО ПоказателиПроцессов.Ссылка = ЗначенияПоказателейПроцессовСрезПоследних.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|		ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|			И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|ГДЕ
		|	ПоказателиПроцессов.ПериодРасчета = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаПоказателейПроцессов.Произвольный)
		|	И ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЗначенияПоказателейПроцессовСрезПоследних.Значение ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПоказатель = Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПоказатель, Выборка);
		
		ВариантРасчета = Справочники.ПоказателиПроцессов.ВариантРасчета();
		ЗаполнитьЗначенияСвойств(ВариантРасчета, Выборка);
		НовыйПоказатель.ВариантРасчета = ВариантРасчета;
		
		НовыйПоказатель.ХешВариантаРасчета =
			Справочники.ПоказателиПроцессов.ХешВариантаРасчета(ВариантРасчета);
		НовыйПоказатель.ДатаРасчета = ДатаРасчета;
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает таблицу показателей процессов для расчета за прошлые периоды.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Показатели процессов для расчета.
//
Функция ПоказателиПроцессовДляРасчетаЗаПрошлыеПериоды()
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.ПоказателиПроцессов"));
	Показатели.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ВариантРасчета", Новый ОписаниеТипов("Структура"));
	Показатели.Колонки.Добавить("ХешНастроекОтбора", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ХешВариантаРасчета", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ПериодЗамеров", Новый ОписаниеТипов("Число"));
	Показатели.Колонки.Добавить("ДатаПересчета", Новый ОписаниеТипов("Дата"));
	Показатели.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	Показатели.Колонки.Добавить("ПериодРасчета",
		Новый ОписаниеТипов("ПеречислениеСсылка.ПериодыРасчетаПоказателейПроцессов"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьПересчетаПоказателейПроцессов.ПоказательПроцесса КАК Ссылка,
		|	ПоказателиПроцессов.ДанныеДляРасчета КАК ДанныеДляРасчета,
		|	ПоказателиПроцессов.СпособРасчета КАК СпособРасчета,
		|	ПоказателиПроцессов.ХешНастроекОтбора КАК ХешНастроекОтбора,
		|	ПоказателиПроцессов.ПериодЗамеров КАК ПериодЗамеров,
		|	ПоказателиПроцессов.ПериодРасчета КАК ПериодРасчета,
		|	ОчередьПересчетаПоказателейПроцессов.ДатаПересчета КАК ДатаПересчета,
		|	ЗначенияПоказателейПроцессовСрезПервых.Период КАК ДатаРасчета,
		|	ПоказателиПроцессов.ВерсияДанных
		|ИЗ
		|	РегистрСведений.ОчередьПересчетаПоказателейПроцессов КАК ОчередьПересчетаПоказателейПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПроцессов.СрезПервых КАК ЗначенияПоказателейПроцессовСрезПервых
		|		ПО ОчередьПересчетаПоказателейПроцессов.ПоказательПроцесса = ЗначенияПоказателейПроцессовСрезПервых.ПоказательПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаПоказателиПроцессов КАК ПодпискиНаПоказателиПроцессов
		|			ПО ПоказателиПроцессов.Ссылка = ПодпискиНаПоказателиПроцессов.ПоказательПроцесса
		|				И (ПодпискиНаПоказателиПроцессов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|				И (ПодпискиНаПоказателиПроцессов.Активна = ИСТИНА)
		|		ПО ОчередьПересчетаПоказателейПроцессов.ПоказательПроцесса = ПоказателиПроцессов.Ссылка
		|ГДЕ
		|	ПоказателиПроцессов.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПоказатель = Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПоказатель, Выборка);
		
		ВариантРасчета = Справочники.ПоказателиПроцессов.ВариантРасчета();
		ЗаполнитьЗначенияСвойств(ВариантРасчета, Выборка);
		НовыйПоказатель.ВариантРасчета = ВариантРасчета;
		
		НовыйПоказатель.ХешВариантаРасчета =
			Справочники.ПоказателиПроцессов.ХешВариантаРасчета(ВариантРасчета);
		
		НовыйПоказатель.ДатаРасчета =
			Перечисления.ПериодыРасчетаПоказателейПроцессов.ПредыдущаяДатаРасчета(
				НовыйПоказатель.ПериодРасчета,
				НовыйПоказатель.ДатаРасчета,
				НовыйПоказатель.ПериодЗамеров);
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Рассчитывает переданные показатели.
//
// Параметры:
//  Показатели - Массив - Массив показателей для расчета.
//  ДатаРасчета - Дата - Дата, на которую рассчитывается показатель.
//  ТекущийПериод - Булево - Расчет выполняется для текущего периода.
//
Процедура РассчитатьПоказатели(Показатели, ДатаРасчета, ТекущийПериод)
	
	Если Показатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СхемаЗапроса = СхемаЗапросаНовый();
	СхемаЗапросаСПодчиненными = СхемаЗапросаНовый();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Настройки отбора
	ПоказательОбъект = Показатели[0].Ссылка.ПолучитьОбъект();
	НастройкиОтбора = ПоказательОбъект.НастройкиОтбора();
	ПрименитьНастройкиОтбора(Запрос, СхемаЗапроса, НастройкиОтбора, ДатаРасчета);
	
	// Варианты расчета
	ОбработанныеВариантРасчета = Новый Массив;
	ВариантыРасчета = Новый Массив;
	Для Каждого Показатель Из Показатели Цикл
		Если ОбработанныеВариантРасчета.Найти(Показатель.ХешВариантаРасчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеВариантРасчета.Добавить(Показатель.ХешВариантаРасчета);
		ПрименитьВариантРасчета(СхемаЗапроса, Показатель.ВариантРасчета, НастройкиОтбора);
		ПрименитьВариантРасчетаСПодчиненными(
			СхемаЗапросаСПодчиненными,
			Показатель.ВариантРасчета,
			НастройкиОтбора);
	КонецЦикла;
	
	// Запрос по подчиненным процессам.
	Если Не ПустаяСтрока(СхемаЗапросаПолучитьТекстЗапроса(СхемаЗапросаСПодчиненными)) Тогда
		ВыполнитьЗапросСПодчиненными(
			СхемаЗапросаСПодчиненными,
			МенеджерВременныхТаблиц,
			НастройкиОтбора,
			ДатаРасчета);
		ЗапросУничтожения = ПакетЗапросовДобавить(
			СхемаЗапроса,
			Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросУничтожения.ИмяТаблицы = "ДанныеДляРасчетаСПодчиненными";
	КонецЕсли;
	
	// Выполнение запроса
	Запрос.Текст = СхемаЗапросаПолучитьТекстЗапроса(СхемаЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Для Каждого Показатель Из Показатели Цикл
		ЗначениеПоказателя = Выборка[ПсевдонимВариантРасчета(Показатель.ВариантРасчета)];
		РегистрыСведений.ЗначенияПоказателейПроцессов.Добавить(
			Показатель.Ссылка,
			ЗначениеПоказателя,
			ДатаРасчета,
			ТекущийПериод,
			Показатель.ВерсияДанных);
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Выполняет запрос с подчиненными процессами.
//
// Параметры:
//  СхемаЗапросаСПодчиненными - СхемаЗапроса - Схема запроса с подчиненными.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//  НастройкиОтбора - Структура - Настройки отбора. См. Справочники.ПоказателиПроцессов.НастройкиОтбора().
//  ДатаРасчета - Дата - Дата, на которую рассчитывается показатель.
//
Процедура ВыполнитьЗапросСПодчиненными(СхемаЗапросаСПодчиненными, МенеджерВременныхТаблиц,
	НастройкиОтбора, ДатаРасчета)
	
	// Выбираем процессы в соответствии с настройками отбора, помещаем во временную таблицу ДанныеДляРасчета.
	Запрос = Новый Запрос;
	СхемаЗапроса = СхемаЗапросаНовый();
	ПрименитьНастройкиОтбора(Запрос, СхемаЗапроса, НастройкиОтбора, ДатаРасчета);
	Запрос.Текст = СхемаЗапросаПолучитьТекстЗапроса(СхемаЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Выбираем все дочерние процессы.
	ЕстьДочерниеПроцессы = Истина;
	КоличествоЗапросовДочернихПроцессов = 0;
	Пока ЕстьДочерниеПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ
			|	ДанныеДляРасчета.Ссылка КАК Ссылка,
			|	ДанныеДляРасчета.%3 КАК Процесс,
			|	ДанныеДляРасчета.%4 КАК ОсновнойПроцесс
			|ПОМЕСТИТЬ ДанныеДляРасчета%2
			|ИЗ
			|	ДанныеДляРасчета%1 КАК ДанныеДляРасчета
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ДанныеДляРасчета.Ссылка,
			|	ДочерниеБизнесПроцессы.ДочернийПроцесс,
			|	ВЫБОР
			|		КОГДА ДочерниеБизнесПроцессы.СвязующаяЗадача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) ТОГДА ДочерниеБизнесПроцессы.РодительскийПроцесс
			|		ИНАЧЕ ДочерниеБизнесПроцессы.ДочернийПроцесс
			|	КОНЕЦ
			|ИЗ
			|	ДанныеДляРасчета%1 КАК ДанныеДляРасчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
			|		ПО ДанныеДляРасчета.%3 = ДочерниеБизнесПроцессы.РодительскийПроцесс
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДляРасчета.%3) КАК КоличествоСтарыеДанныеДляРасчета
			|ИЗ
			|	ДанныеДляРасчета%1 КАК ДанныеДляРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДляРасчета.Процесс) КАК КоличествоНовыеДанныеДляРасчета
			|ИЗ
			|	ДанныеДляРасчета%2 КАК ДанныеДляРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ДанныеДляРасчета%1",
			Формат(КоличествоЗапросовДочернихПроцессов, "ЧГ=0"),
			Формат(КоличествоЗапросовДочернихПроцессов + 1, "ЧГ=0"),
			?(КоличествоЗапросовДочернихПроцессов = 0, "Ссылка", "Процесс"),
			?(КоличествоЗапросовДочернихПроцессов = 0, "Ссылка", "ОсновнойПроцесс"));
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		НаборРезультатов = Запрос.ВыполнитьПакет();
		
		// Старые данные
		КоличествоСтарыеДанныеДляРасчета = 0;
		Результат = НаборРезультатов[1];
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			КоличествоСтарыеДанныеДляРасчета = Выборка.КоличествоСтарыеДанныеДляРасчета;
		КонецЕсли;
		
		// Новые данные
		КоличествоНовыеДанныеДляРасчета = 0;
		Результат = НаборРезультатов[2];
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			КоличествоНовыеДанныеДляРасчета = Выборка.КоличествоНовыеДанныеДляРасчета;
		КонецЕсли;
		
		КоличествоЗапросовДочернихПроцессов = КоличествоЗапросовДочернихПроцессов + 1;
		ЕстьДочерниеПроцессы = КоличествоСтарыеДанныеДляРасчета < КоличествоНовыеДанныеДляРасчета;
		
	КонецЦикла;
	
	// Формируем временную таблицу ПроцессыСПодчиненными.
	Запрос = Новый Запрос;
	Запрос.Текст =СтрШаблон(
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.Ссылка КАК Ссылка,
		|	ДанныеДляРасчета.Процесс КАК Процесс,
		|	ДанныеДляРасчета.ОсновнойПроцесс КАК ОсновнойПроцесс
		|ПОМЕСТИТЬ ПроцессыСПодчиненными
		|ИЗ
		|	ДанныеДляРасчета%1 КАК ДанныеДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеДляРасчета%1",
		КоличествоЗапросовДочернихПроцессов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить();
	
	// Формируем временную таблицу ДанныеДляРасчетаСПодчиненными.
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапросаПолучитьТекстЗапроса(СхемаЗапросаСПодчиненными);
	Запрос.УстановитьПараметр("ПериодНачало",
		Перечисления.ПериодыРасчетаПоказателейПроцессов.НачалоПериода(
			НастройкиОтбора,
			ДатаРасчета));
	Запрос.УстановитьПараметр("ПериодОкончание",
		Перечисления.ПериодыРасчетаПоказателейПроцессов.ОкончаниеПериода(
			НастройкиОтбора,
			ДатаРасчета));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Настраивает параметры запроса и схему запроса в соответствии с настройками отбора.
//
// Параметры:
//  Запрос - Запрос - Запрос.
//  СхемаЗапроса - СхемаЗапроса - Схема запроса.
//  НастройкиОтбора - Структура - Настройки отбора. См. Справочники.ПоказателиПроцессов.НастройкиОтбора().
//  ДатаРасчета - Дата - Дата, на которую рассчитывается показатель.
//
Процедура ПрименитьНастройкиОтбора(Запрос, СхемаЗапроса, НастройкиОтбора, ДатаРасчета)
	
	ЗапросДанныеДляРасчета = СхемаЗапроса.ПакетЗапросов[0];
	ЗапросДанныеДляРасчета.ТаблицаДляПомещения = "ДанныеДляРасчета";
	
	Запрос.УстановитьПараметр("ТекущаяДата",
		Перечисления.ПериодыРасчетаПоказателейПроцессов.ДатаПериода(
			НастройкиОтбора,
			ДатаРасчета));
	Запрос.УстановитьПараметр("ПериодНачало",
		Перечисления.ПериодыРасчетаПоказателейПроцессов.НачалоПериода(
			НастройкиОтбора,
			ДатаРасчета));
	Запрос.УстановитьПараметр("ПериодОкончание",
		Перечисления.ПериодыРасчетаПоказателейПроцессов.ОкончаниеПериода(
			НастройкиОтбора,
			ДатаРасчета));
	
	ИндексВариантОтбора = 0;
	Для Каждого ВариантОтбора Из НастройкиОтбора.НаборВариантовОтбора Цикл
		
		ОператорыВариантаОтбора = Новый Массив;
		
		// Тип процесса
		Если ЗначениеЗаполнено(ВариантОтбора.ТипПроцесса) Тогда
			ОператорВыбратьСхемыЗапроса = ЗапросДанныеДляРасчета.Операторы[0];
			Если ОператорВыбратьСхемыЗапроса.Источники.Количество() <> 0 Тогда
				ОператорВыбратьСхемыЗапроса = ОператорыДобавить(ЗапросДанныеДляРасчета);
			КонецЕсли;
			ИсточникиДобавить(ОператорВыбратьСхемыЗапроса, ИмяИсточника(ВариантОтбора.ТипПроцесса));
			ОператорыВариантаОтбора.Добавить(ОператорВыбратьСхемыЗапроса);
		Иначе
			Для Каждого ТипПроцесса Из Перечисления.ТипыПроцессовПоказателейПроцессов Цикл
				ОператорВыбратьСхемыЗапроса = ЗапросДанныеДляРасчета.Операторы[0];
				Если ОператорВыбратьСхемыЗапроса.Источники.Количество() <> 0 Тогда
					ОператорВыбратьСхемыЗапроса = ОператорыДобавить(ЗапросДанныеДляРасчета);
				КонецЕсли;
				ИсточникиДобавить(ОператорВыбратьСхемыЗапроса, ИмяИсточника(ТипПроцесса));
				ОператорыВариантаОтбора.Добавить(ОператорВыбратьСхемыЗапроса);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ОператорВыбратьСхемыЗапроса Из ОператорыВариантаОтбора Цикл
			
			ИсточникСхемыЗапроса = ОператорВыбратьСхемыЗапроса.Источники[0];
			ПсевдонимИсточника = ИсточникСхемыЗапроса.Источник.Псевдоним;
			
			// Ссылка
			ВыражениеВыбираемогоПоля = СтрШаблон("%1.Ссылка", ПсевдонимИсточника);
			ВыбираемыеПоляДобавить(ОператорВыбратьСхемыЗапроса, ВыражениеВыбираемогоПоля, "Ссылка");
			
			// Период
			Условие = СтрШаблон(
				"%1.ДатаНачала <= &ПериодОкончание
				|И (%1.ДатаЗавершения >= &ПериодНачало ИЛИ %1.ДатаЗавершения = ДАТАВРЕМЯ(1,1,1))",
				ПсевдонимИсточника);
			ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
			
			// Шаблон
			Если ЗначениеЗаполнено(ВариантОтбора.Шаблон) Тогда
				ИмяПараметра = "Шаблон" + Формат(ИндексВариантОтбора, "ЧН=0; ЧГ=0");
				Условие = СтрШаблон("%1.Шаблон = &%2", ПсевдонимИсточника, ИмяПараметра);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
				Запрос.УстановитьПараметр(ИмяПараметра, ВариантОтбора.Шаблон);
			КонецЕсли;
			
			// Тип предмета
			Если ЗначениеЗаполнено(ВариантОтбора.ТипПредмета) Тогда
				ИмяТипаПредмета = ИмяТипаПредмета(ВариантОтбора.ТипПредмета);
				Условие = СтрШаблон("%1.Предметы.Предмет ССЫЛКА %2", ПсевдонимИсточника, ИмяТипаПредмета);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
			КонецЕсли;
			
			// Вид предмета
			Если ЗначениеЗаполнено(ВариантОтбора.ВидПредмета) Тогда
				ИмяПараметра = "ВидПредмета" + Формат(ИндексВариантОтбора, "ЧН=0; ЧГ=0");
				РеквизитВидаПредмета = РеквизитВидаПредмета(ВариантОтбора.ВидПредмета);
				Условие = СтрШаблон(
					"%1.Предметы.Предмет.%2 = &%3",
					ПсевдонимИсточника,
					РеквизитВидаПредмета,
					ИмяПараметра);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
				Запрос.УстановитьПараметр(ИмяПараметра, ВариантОтбора.ВидПредмета);
			КонецЕсли;
			
			// Ответственный
			Если ЗначениеЗаполнено(ВариантОтбора.Ответственный) Тогда
				ИмяПараметра = "Ответственный" + Формат(ИндексВариантОтбора, "ЧН=0; ЧГ=0");
				Условие = СтрШаблон("%1.Предметы.Предмет.Ответственный В (&%2)",
					ПсевдонимИсточника,
					ИмяПараметра);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
				Запрос.УстановитьПараметр(ИмяПараметра, РазвернутьОтветственных(ВариантОтбора.Ответственный));
			КонецЕсли;
			
			// Проект
			Если ЗначениеЗаполнено(ВариантОтбора.Проект) Тогда
				ИмяПараметра = "Проект" + Формат(ИндексВариантОтбора, "ЧН=0; ЧГ=0");
				Условие = СтрШаблон("%1.Проект = &%2", ПсевдонимИсточника, ИмяПараметра);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
				Запрос.УстановитьПараметр(ИмяПараметра, ВариантОтбора.Проект);
			КонецЕсли;
			
			// Этап обработки предмета
			Если ЗначениеЗаполнено(ВариантОтбора.ЭтапОбработкиПредмета) Тогда
				ИмяПараметра = "ЭтапОбработкиПредмета" + Формат(ИндексВариантОтбора, "ЧН=0; ЧГ=0");
				Условие = СтрШаблон("%1.ЭтапОбработкиПредмета = &%2", ПсевдонимИсточника, ИмяПараметра);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
				Запрос.УстановитьПараметр(ИмяПараметра, ВариантОтбора.ЭтапОбработкиПредмета);
			КонецЕсли;
			
			// Пометка удаления
			Условие = СтрШаблон("%1.ПометкаУдаления = ЛОЖЬ", ПсевдонимИсточника);
			ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
			
			// Стартован
			Условие = СтрШаблон("%1.Стартован = ИСТИНА", ПсевдонимИсточника);
			ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
			
			// Активен
			Условие = СтрШаблон("%1.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)",
				ПсевдонимИсточника);
			ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
			
			// Актуальный период - только не завершенные процессы
			Если НастройкиОтбора.ПериодРасчета =
					Перечисления.ПериодыРасчетаПоказателейПроцессов.Актуальный Тогда
				Условие = СтрШаблон(
					"%1.ДатаЗавершения > &ПериодОкончание ИЛИ %1.ДатаЗавершения = ДАТАВРЕМЯ(1,1,1)",
					ПсевдонимИсточника);
				ОператорВыбратьСхемыЗапроса.Отбор.Добавить(Условие);
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексВариантОтбора = ИндексВариантОтбора + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Настраивает схему запроса в соответствии с вариантом расчета.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - Схема запроса.
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//  НастройкиОтбора - Структура - Настройки отбора. См. Справочники.ПоказателиПроцессов.НастройкиОтбора().
//
Процедура ПрименитьВариантРасчета(СхемаЗапроса, ВариантРасчета, НастройкиОтбора)
	
	Если СхемаЗапроса.ПакетЗапросов.Количество() = 1 Тогда
		ПакетЗапросовДобавить(СхемаЗапроса);
	КонецЕсли;
	
	// Данные для расчета.
	ЗапросДанныеДляРасчета = СхемаЗапроса.ПакетЗапросов[0];
	Для Каждого ОператорВыбратьСхемыЗапроса Из ЗапросДанныеДляРасчета.Операторы Цикл
		
		ИсточникСхемыЗапроса = ОператорВыбратьСхемыЗапроса.Источники[0];
		
		Для Каждого СтруктураВыбираемогоПоля Из СтруктурыВыбираемыхПолей(ИсточникСхемыЗапроса, ВариантРасчета) Цикл
			ВыбираемыеПоляДобавить(
				ОператорВыбратьСхемыЗапроса,
				СтруктураВыбираемогоПоля.Выражение,
				СтруктураВыбираемогоПоля.Псевдоним);
		КонецЦикла;
		
		ДобавитьОсобуюЛогикуВариантРасчета(
			ЗапросДанныеДляРасчета,
			ОператорВыбратьСхемыЗапроса,
			ВариантРасчета,
			НастройкиОтбора);
		
	КонецЦикла;
	
	// Расчет данных.
	ЗапросРасчетДанных = СхемаЗапроса.ПакетЗапросов[1];
	ОператорВыбратьСхемыЗапроса = ЗапросРасчетДанных.Операторы[0];
	ИсточникиДобавить(ОператорВыбратьСхемыЗапроса, "ДанныеДляРасчета");
	
	ВыбираемыеПоляДобавить(
		ОператорВыбратьСхемыЗапроса,
		ВыражениеРасчета(ВариантРасчета),
		ПсевдонимВариантРасчета(ВариантРасчета));
	
КонецПроцедуры

// Заполняет временные таблицы при необходимости.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - Схема запроса.
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//  НастройкиОтбора - Структура - Настройки отбора. См. Справочники.ПоказателиПроцессов.НастройкиОтбора().
//
Процедура ПрименитьВариантРасчетаСПодчиненными(СхемаЗапроса, ВариантРасчета, НастройкиОтбора)
	
	Если ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ФактическиеТрудозатратыСПодчиненными Тогда
		
		ИнициализироватьЗапросСПодчиненными(СхемаЗапроса);
		ЗапросДанныеДляРасчета = СхемаЗапроса.ПакетЗапросов[0];
		ОператорВыбратьСхемыЗапроса = ЗапросДанныеДляРасчета.Операторы[0];
		ОсновнойИсточник = ОператорВыбратьСхемыЗапроса.Источники[0];
		
		// Источники - фактические трудозатраты процессов.
		ИсточникСуществует = Ложь;
		ИсточникЗадачиПроцесса = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"Задача.ЗадачаИсполнителя",
			"ЗадачиПроцесса",
			ИсточникСуществует);
		Если ИсточникСуществует Тогда
			// Уже выполняли добавление особой логики.
			Возврат;
		КонецЕсли;
		
		ИсточникФактическиеТрудозатратыПроцесса = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"РегистрСведений.ФактическиеТрудозатраты",
			"ФактическиеТрудозатратыПроцесса");
		
		// Соединения.
		УсловиеСоединения = СтрШаблон(
			"%1.Процесс = %2.БизнесПроцесс",
			ОсновнойИсточник.Источник.Псевдоним,
			ИсточникЗадачиПроцесса.Источник.Псевдоним);
		СоединенияДобавить(
			ОсновнойИсточник,
			ИсточникЗадачиПроцесса.Источник.Псевдоним,
			УсловиеСоединения);
		
		УсловиеСоединения = СтрШаблон("%1.Ссылка = %2.Источник
				|И %2.ДатаДобавления >= &ПериодНачало
				|И %2.ДатаДобавления <= &ПериодОкончание
				|И НЕ %2.Удалена",
			ИсточникЗадачиПроцесса.Источник.Псевдоним,
			ИсточникФактическиеТрудозатратыПроцесса.Источник.Псевдоним);
		СоединенияДобавить(
			ИсточникЗадачиПроцесса,
			ИсточникФактическиеТрудозатратыПроцесса.Источник.Псевдоним,
			УсловиеСоединения);
		
		// Расчет выражений.
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"ЕСТЬNULL(СУММА(%1.Длительность), 0)",
			ИсточникФактическиеТрудозатратыПроцесса.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"ФактическиеТрудозатратыСПодчиненными");
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессСПодчиненными Тогда
		
		ИнициализироватьЗапросСПодчиненными(СхемаЗапроса);
		ЗапросДанныеДляРасчета = СхемаЗапроса.ПакетЗапросов[0];
		ОператорВыбратьСхемыЗапроса = ЗапросДанныеДляРасчета.Операторы[0];
		ОсновнойИсточник = ОператорВыбратьСхемыЗапроса.Источники[0];
		
		// Расчет выражений.
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %1.ОсновнойПроцесс), 0)",
			ОсновнойИсточник.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"ПроцессСПодчиненными");
			
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию схемы запроса с подчиненными.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - Схема запроса с подчиненными.
//
Процедура ИнициализироватьЗапросСПодчиненными(СхемаЗапроса)
	
	Если Не ПустаяСтрока(СхемаЗапросаПолучитьТекстЗапроса(СхемаЗапроса)) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса.ПакетЗапросов.Очистить();
	
	ЗапросДанныеДляРасчета = ПакетЗапросовДобавить(СхемаЗапроса);
	ЗапросДанныеДляРасчета.ТаблицаДляПомещения = "ДанныеДляРасчетаСПодчиненными";
	ОператорВыбора = ЗапросДанныеДляРасчета.Операторы[0];
	ИсточникиДобавить(ОператорВыбора, "ПроцессыСПодчиненными", "ДанныеДляРасчета");
	ВыбираемыеПоляДобавить(ОператорВыбора, "ДанныеДляРасчета.Ссылка", "Ссылка");
	
	ЗапросУничтожить = ПакетЗапросовДобавить(СхемаЗапроса, Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтожить.ИмяТаблицы = "ПроцессыСПодчиненными";
	
КонецПроцедуры

// Получает структуры выбираемые поля.
//
// Параметры:
//  ИсточникСхемыЗапроса - ИсточникСхемыЗапроса - Источник схемы запроса.
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//
// Возвращаемое значение:
//  Массив - Структуры выбираемых полей.
//
Функция СтруктурыВыбираемыхПолей(ИсточникСхемыЗапроса, ВариантРасчета)
	
	Если Не ЗначениеЗаполнено(ВариантРасчета.ДанныеДляРасчета) Тогда
		ТекстОшибки = НСтр("ru = 'Не указаны данные для расчета.'; en = 'Data for calculation are not specified.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПсевдонимИсточника = ИсточникСхемыЗапроса.Источник.Псевдоним;
	ТаблицаИсточника = ИсточникСхемыЗапроса.Источник.ИмяТаблицы;
	
	ТребуетсяОсобыйСрокИсполнения = Ложь;
	
	СтруктурыВыбираемыхПолей = Новый Массив;
	Если ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ДлительностьПроцесса Тогда
		
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"ДатаНачала");
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"ДатаЗавершения");
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"Завершен");
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессПросрочен Тогда
		
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"ДатаЗавершения");
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"Завершен");
		
		Если Не ОсобыйСрокИсполнения(ТаблицаИсточника) Тогда
			ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
				СтруктурыВыбираемыхПолей,
				ПсевдонимИсточника,
				"СрокИсполненияПроцесса");
		Иначе
			ТребуетсяОсобыйСрокИсполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ВремяПросрочки Тогда
		
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"ДатаЗавершения");
		ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
			СтруктурыВыбираемыхПолей,
			ПсевдонимИсточника,
			"Завершен");
		
		Если Не ОсобыйСрокИсполнения(ТаблицаИсточника) Тогда
			ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(
				СтруктурыВыбираемыхПолей,
				ПсевдонимИсточника,
				"СрокИсполненияПроцесса");
		Иначе
			ТребуетсяОсобыйСрокИсполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессАктивен Тогда
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершен Тогда
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
		Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенУспешно Тогда
		
		СтруктураВыбираемогоПоля = СтруктураВыбираемогоПоля();
		Если ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Согласование) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.Согласовано)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			
		ИначеЕсли ТаблицаИсточника =
			ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Утверждение) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатУтверждения = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.Утверждено)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Регистрация) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатРегистрации = ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.Зарегистрировано)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Приглашение) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатПриглашения = ЗНАЧЕНИЕ(Перечисление.РезультатыПриглашения.Принято)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			
		Иначе
			СтруктураВыбираемогоПоля.Выражение = "%1.Завершен";
			
		КонецЕсли;
		СтруктураВыбираемогоПоля.Выражение = СтрШаблон(
			СтруктураВыбираемогоПоля.Выражение,
			ПсевдонимИсточника);
		СтруктураВыбираемогоПоля.Псевдоним = "ЗавершенУспешно";
		СтруктурыВыбираемыхПолей.Добавить(СтруктураВыбираемогоПоля);
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенСЗамечаниями Тогда
		
		СтруктураВыбираемогоПоля = СтруктураВыбираемогоПоля();
		Если ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Согласование) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.СогласованоСЗамечаниями)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			СтруктураВыбираемогоПоля.Выражение = СтрШаблон(
				СтруктураВыбираемогоПоля.Выражение,
				ПсевдонимИсточника);
			
		Иначе
			СтруктураВыбираемогоПоля.Выражение = "ЛОЖЬ";
			
		КонецЕсли;
		СтруктураВыбираемогоПоля.Псевдоним = "ЗавершенСЗамечаниями";
		СтруктурыВыбираемыхПолей.Добавить(СтруктураВыбираемогоПоля);
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенНеуспешно Тогда
		
		СтруктураВыбираемогоПоля = СтруктураВыбираемогоПоля();
		Если ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Согласование) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			СтруктураВыбираемогоПоля.Выражение =
				СтрШаблон(СтруктураВыбираемогоПоля.Выражение, ПсевдонимИсточника);
			
		ИначеЕсли ТаблицаИсточника =
			ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Утверждение) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатУтверждения = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.НеУтверждено)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			СтруктураВыбираемогоПоля.Выражение =
				СтрШаблон(СтруктураВыбираемогоПоля.Выражение, ПсевдонимИсточника);
			
		ИначеЕсли ТаблицаИсточника =
			ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Регистрация) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатРегистрации = ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.НеЗарегистрировано)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			СтруктураВыбираемогоПоля.Выражение =
				СтрШаблон(СтруктураВыбираемогоПоля.Выражение, ПсевдонимИсточника);
			
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Приглашение) Тогда
			СтруктураВыбираемогоПоля.Выражение =
				"ВЫБОР
				|		КОГДА %1.РезультатПриглашения = ЗНАЧЕНИЕ(Перечисление.РезультатыПриглашения.НеПринято)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ";
			СтруктураВыбираемогоПоля.Выражение =
				СтрШаблон(СтруктураВыбираемогоПоля.Выражение, ПсевдонимИсточника);
			
		Иначе
			СтруктураВыбираемогоПоля.Выражение = "ЛОЖЬ";
			
		КонецЕсли;
		СтруктураВыбираемогоПоля.Псевдоним = "ЗавершенНеуспешно";
		СтруктурыВыбираемыхПолей.Добавить(СтруктураВыбираемогоПоля);
		
	КонецЕсли;
	
	// Особый срок исполнения для процессов РешениеВопросовВыполненияЗадач.
	Если ТребуетсяОсобыйСрокИсполнения Тогда
		СтруктураВыбираемогоПоля.Выражение = "ДАТАВРЕМЯ(1, 1, 1)";
		СтруктураВыбираемогоПоля.Псевдоним = "СрокИсполненияПроцесса";
		СтруктурыВыбираемыхПолей.Добавить(СтруктураВыбираемогоПоля);
	КонецЕсли;
	
	// Завершен в текущем периоде.
	Если ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессАктивен
		Или ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершен
		Или ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенУспешно
		Или ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенСЗамечаниями
		Или ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенНеуспешно Тогда
		
		СтруктураВыбираемогоПоля = СтруктураВыбираемогоПоля();
		СтруктураВыбираемогоПоля.Выражение =
			"ВЫБОР
			|		КОГДА %1.Завершен И %1.ДатаЗавершения <= &ТекущаяДата
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		СтруктураВыбираемогоПоля.Выражение = СтрШаблон(
			СтруктураВыбираемогоПоля.Выражение,
			ПсевдонимИсточника);
		СтруктураВыбираемогоПоля.Псевдоним = "ЗавершенНаДатуРасчета";
		СтруктурыВыбираемыхПолей.Добавить(СтруктураВыбираемогоПоля);
		
	КонецЕсли;
	
	Возврат СтруктурыВыбираемыхПолей;
	
КонецФункции

// Добавляет в массив структуру стандартного выбираемого поля.
//
// Параметры:
//  СтруктурыВыбираемыхПолей - Массив - Структуры выбираемых полей.
//
Процедура ДобавитьСтандартнуюСтруктуруВыбираемогоПоля(СтруктурыВыбираемыхПолей, ПсевдонимИсточника,
	ИмяРеквизита)
	
	СтруктураВыбираемогоПоля = СтруктураВыбираемогоПоля();
	СтруктураВыбираемогоПоля.Выражение = СтрШаблон("%1.%2", ПсевдонимИсточника, ИмяРеквизита);
	СтруктураВыбираемогоПоля.Псевдоним = ИмяРеквизита;
	СтруктурыВыбираемыхПолей.Добавить(СтруктураВыбираемогоПоля);
	
КонецПроцедуры

// Формирует структуру выбираемого поля.
//
// Возвращаемое значение:
//  Структура - Структура выбираемого поля.
//   * Выражение - Строка - Выражение выбираемого поля.
//   * Представление - Строка - Представление выбираемого поля.
//
Функция СтруктураВыбираемогоПоля()
	
	Возврат Новый Структура("Выражение, Псевдоним");
	
КонецФункции

// Проверяет, рассчитывается ли для данного источника срок исполнения особым образом.
//
// Параметры:
//  ПсевдонимИсточника - Строка - Псевдоним источника.
//
// Возвращаемое значение:
//  Булево - Срок исполнения рассчитывается особым образом.
//
Функция ОсобыйСрокИсполнения(ПсевдонимИсточника)
	
	ИмяТаблицыРешениеВопросовВыполненияЗадач = 
		ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.РешениеВопросовВыполненияЗадач);
	
	ОсобыйСрокИсполнения =
		(ПсевдонимИсточника = ИмяТаблицыРешениеВопросовВыполненияЗадач);
	
	Возврат ОсобыйСрокИсполнения;
	
КонецФункции

// Формирует выражение расчета данного варианта расчета.
//
// Параметры:
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//
// Возвращаемое значение:
//  Строка - Текст запроса расчета.
//
Функция ВыражениеРасчета(ВариантРасчета)
	
	Если Не ЗначениеЗаполнено(ВариантРасчета.ДанныеДляРасчета) Тогда
		ТекстОшибки = НСтр("ru = 'Не указаны данные для расчета.'; en = 'Data for calculation are not specified.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантРасчета.СпособРасчета) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан способ расчета.'; en = 'Сalculation method is not specified.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ДлительностьПроцесса Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.Завершен
			|			ТОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.ДатаНачала, ДанныеДляРасчета.ДатаЗавершения, СЕКУНДА)
			|		ИНАЧЕ РАЗНОСТЬДАТ(ДанныеДляРасчета.ДатаНачала, &ТекущаяДата, СЕКУНДА)
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессПросрочен Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ДанныеДляРасчета.Завершен
			|					ТОГДА ВЫБОР
			|							КОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.СрокИсполненияПроцесса, ДанныеДляРасчета.ДатаЗавершения, СЕКУНДА) > 0
			|								ТОГДА 1
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.СрокИсполненияПроцесса, &ТекущаяДата, СЕКУНДА) > 0
			|							ТОГДА 1
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ВремяПросрочки Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.СрокИсполненияПроцесса = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ДанныеДляРасчета.Завершен
			|					ТОГДА ВЫБОР
			|							КОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.СрокИсполненияПроцесса, ДанныеДляРасчета.ДатаЗавершения, СЕКУНДА) > 0
			|								ТОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.СрокИсполненияПроцесса, ДанныеДляРасчета.ДатаЗавершения, СЕКУНДА)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.СрокИсполненияПроцесса, &ТекущаяДата, СЕКУНДА) > 0
			|							ТОГДА РАЗНОСТЬДАТ(ДанныеДляРасчета.СрокИсполненияПроцесса, &ТекущаяДата, СЕКУНДА)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.Процесс Тогда
		ВыражениеРасчета = "1";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессСПодчиненными Тогда
		ВыражениеРасчета = "ДанныеДляРасчета.ПроцессСПодчиненными";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ФактическиеТрудозатраты Тогда
		ВыражениеРасчета = 
			"ДанныеДляРасчета.ФактическиеТрудозатратыПроцессов + ДанныеДляРасчета.ФактическиеТрудозатратыЭтаповПроцессов";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ФактическиеТрудозатратыСПодчиненными Тогда
		ВыражениеРасчета = 
			"ДанныеДляРасчета.ФактическиеТрудозатратыСПодчиненными";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессАктивен Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА НЕ ДанныеДляРасчета.ЗавершенНаДатуРасчета
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершен Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.ЗавершенНаДатуРасчета
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенУспешно Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.ЗавершенНаДатуРасчета И ДанныеДляРасчета.ЗавершенУспешно
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенСЗамечаниями Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.ЗавершенНаДатуРасчета И ДанныеДляРасчета.ЗавершенСЗамечаниями
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессЗавершенНеуспешно Тогда
		ВыражениеРасчета = 
			"ВЫБОР
			|		КОГДА ДанныеДляРасчета.ЗавершенНаДатуРасчета И ДанныеДляРасчета.ЗавершенНеуспешно
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.КоличествоИтераций Тогда
		ВыражениеРасчета = "ДанныеДляРасчета.КоличествоИтераций";
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.КоличествоУчастников Тогда
		ВыражениеРасчета = "ДанныеДляРасчета.КоличествоУчастников";
		
	КонецЕсли;
	
	ВыражениеРасчета = СтрШаблон(
		"ЕСТЬNULL(%1(%2), 0)",
		АгрегатнаяФункция(ВариантРасчета),
		ВыражениеРасчета);
	
	Возврат ВыражениеРасчета;
	
КонецФункции

// Возвращает агрегатную функцию варианта расчета.
//
// Параметры:
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//
// Возвращаемое значение:
//  Строка - Агрегатная функция варианта расчета.
//
Функция АгрегатнаяФункция(ВариантРасчета)
	
	Если Не ЗначениеЗаполнено(ВариантРасчета.СпособРасчета) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан способ расчета.'; en = 'Сalculation method is not specified.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СпособРасчета = ВариантРасчета.СпособРасчета;
	Если СпособРасчета = Перечисления.СпособыРасчетаПоказателейПроцессов.Количество Тогда
		СпособРасчета = Перечисления.СпособыРасчетаПоказателейПроцессов.Сумма;
	КонецЕсли;
	
	Возврат ВРег(СпособРасчета);
	
КонецФункции

// Возвращает псевдоним варианта расчета.
//
// Параметры:
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//
// Возвращаемое значение:
//  Строка - Псевдоним варианта расчета.
//
Функция ПсевдонимВариантРасчета(ВариантРасчета)
	
	ПсевдонимВариантРасчета =
		Строка(ВариантРасчета.СпособРасчета) + " " + Строка(ВариантРасчета.ДанныеДляРасчета);
	ПсевдонимВариантРасчета = ТРегБезПробелов(ПсевдонимВариантРасчета); 
	
	Возврат ПсевдонимВариантРасчета;
	
КонецФункции

// Добавляет в оператор запроса особую логику варианта расчета.
//
// Параметры:
//  ЗапросДанныеДляРасчета - ЗапросВыбораСхемыЗапроса - Запрос выбора данных для расчета.
//  ОператорВыбратьСхемыЗапроса - ОператорВыбратьСхемыЗапроса - Оператор выбрать схемы запроса.
//  ВариантРасчета - Структура - Вариант расчета. См. Справочники.ПоказателиПроцессов.ВариантРасчета().
//  НастройкиОтбора - Структура - Настройки отбора. См. Справочники.ПоказателиПроцессов.НастройкиОтбора().
//
Процедура ДобавитьОсобуюЛогикуВариантРасчета(ЗапросДанныеДляРасчета, ОператорВыбратьСхемыЗапроса, ВариантРасчета, НастройкиОтбора)
	
	Если ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ФактическиеТрудозатраты Тогда
		
		// Источники.
		ОсновнойИсточник = ОператорВыбратьСхемыЗапроса.Источники[0];
		
		// Источники - фактические трудозатраты процессов.
		ИсточникСуществует = Ложь;
		ИсточникЗадачиПроцесса = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"Задача.ЗадачаИсполнителя",
			"ЗадачиПроцесса",
			ИсточникСуществует);
		Если ИсточникСуществует Тогда
			// Уже выполняли добавление особой логики.
			Возврат;
		КонецЕсли;
		
		ИсточникФактическиеТрудозатратыПроцесса = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"РегистрСведений.ФактическиеТрудозатраты",
			"ФактическиеТрудозатратыПроцесса");
	
		// Источники - фактические трудозатраты дочерних процессов.
		ИсточникЭтапыПроцессов = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"РегистрСведений.ДочерниеБизнесПроцессы",
			"ЭтапыПроцессов");
		ИсточникЗадачиЭтаповПроцессов = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"Задача.ЗадачаИсполнителя",
			"ЗадачиЭтаповПроцессов");
		ИсточникФактическиеТрудозатратыЭтаповПроцессов = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"РегистрСведений.ФактическиеТрудозатраты",
			"ФактическиеТрудозатратыЭтаповПроцессов");
		
		// Соединения - фактические трудозатраты процессов.
		УсловиеСоединения = СтрШаблон(
			"%1.Ссылка = %2.БизнесПроцесс",
			ОсновнойИсточник.Источник.Псевдоним,
			ИсточникЗадачиПроцесса.Источник.Псевдоним);
		СоединенияДобавить(
			ОсновнойИсточник,
			ИсточникЗадачиПроцесса.Источник.Псевдоним,
			УсловиеСоединения);
		
		УсловиеСоединения = СтрШаблон("%1.Ссылка = %2.Источник
				|И %2.ДатаДобавления >= &ПериодНачало
				|И %2.ДатаДобавления <= &ПериодОкончание
				|И НЕ %2.Удалена",
			ИсточникЗадачиПроцесса.Источник.Псевдоним,
			ИсточникФактическиеТрудозатратыПроцесса.Источник.Псевдоним);
		СоединенияДобавить(
			ИсточникЗадачиПроцесса,
			ИсточникФактическиеТрудозатратыПроцесса.Источник.Псевдоним,
			УсловиеСоединения);
		
		// Соединения - фактические трудозатраты дочерних процессов.
		УсловиеСоединения = СтрШаблон(
			"%1.Ссылка = %2.РодительскийПроцесс
			|И %2.СвязующаяЗадача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)",
			ОсновнойИсточник.Источник.Псевдоним,
			ИсточникЭтапыПроцессов.Источник.Псевдоним);
		СоединенияДобавить(
			ОсновнойИсточник,
			ИсточникЭтапыПроцессов.Источник.Псевдоним,
			УсловиеСоединения);
		
		УсловиеСоединения = СтрШаблон(
			"%1.ДочернийПроцесс = %2.БизнесПроцесс",
			ИсточникЭтапыПроцессов.Источник.Псевдоним,
			ИсточникЗадачиЭтаповПроцессов.Источник.Псевдоним);
		СоединенияДобавить(
			ИсточникЭтапыПроцессов,
			ИсточникЗадачиЭтаповПроцессов.Источник.Псевдоним,
			УсловиеСоединения);
		
		УсловиеСоединения = СтрШаблон(
			"%1.Ссылка = %2.Источник
			|И %2.ДатаДобавления >= &ПериодНачало
			|И %2.ДатаДобавления <= &ПериодОкончание
			|И НЕ %2.Удалена",
			ИсточникЗадачиЭтаповПроцессов.Источник.Псевдоним,
			ИсточникФактическиеТрудозатратыЭтаповПроцессов.Источник.Псевдоним);
		СоединенияДобавить(
			ИсточникЗадачиЭтаповПроцессов,
			ИсточникФактическиеТрудозатратыЭтаповПроцессов.Источник.Псевдоним,
			УсловиеСоединения);
		
		// Расчет выражений.
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"ЕСТЬNULL(СУММА(%1.Длительность), 0)",
			ИсточникФактическиеТрудозатратыПроцесса.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"ФактическиеТрудозатратыПроцессов");
		
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"ЕСТЬNULL(СУММА(%1.Длительность), 0)",
			ИсточникФактическиеТрудозатратыЭтаповПроцессов.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"ФактическиеТрудозатратыЭтаповПроцессов");
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ФактическиеТрудозатратыСПодчиненными Тогда
		
		ИсточникДанныеДляРасчетаСПодчиненными = ИсточникиДобавитьДанныеДляРасчетаСПодчиненными(
			ОператорВыбратьСхемыЗапроса);
		
		// Расчет выражений.
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"%1.ФактическиеТрудозатратыСПодчиненными",
			ИсточникДанныеДляРасчетаСПодчиненными.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"ФактическиеТрудозатратыСПодчиненными");
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.ПроцессСПодчиненными Тогда
		
		ИсточникДанныеДляРасчетаСПодчиненными = ИсточникиДобавитьДанныеДляРасчетаСПодчиненными(
			ОператорВыбратьСхемыЗапроса);
		
		// Расчет выражений.
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"%1.ПроцессСПодчиненными",
			ИсточникДанныеДляРасчетаСПодчиненными.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"ПроцессСПодчиненными");
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.КоличествоИтераций Тогда
		
		// Источники.
		ОсновнойИсточник = ОператорВыбратьСхемыЗапроса.Источники[0];
		
		ТаблицаИсточника = ОсновнойИсточник.Источник.ИмяТаблицы;
		Если ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Исполнение) Тогда
			ИмяВложеннойТаблицы = "РезультатыИсполнения";
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Поручение) Тогда
			ИмяВложеннойТаблицы = "РезультатыПроверки";
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Приглашение) Тогда
			ИмяВложеннойТаблицы = "РезультатыПриглашения";
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Регистрация) Тогда
			ИмяВложеннойТаблицы = "РезультатыРегистрации";
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.РешениеВопросовВыполненияЗадач) Тогда
			ИмяВложеннойТаблицы = "ЦиклыРассмотрения";
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Согласование) Тогда
			ИмяВложеннойТаблицы = "РезультатыСогласования";
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Утверждение) Тогда
			ИмяВложеннойТаблицы = "РезультатыУтверждения";
		Иначе
			ВыбираемыеПоляДобавить(
				ОператорВыбратьСхемыЗапроса,
				"1",
				"КоличествоИтераций");
			Возврат;
		КонецЕсли;
		ИмяВложеннойТаблицы = СтрШаблон("%1.%2", ТаблицаИсточника, ИмяВложеннойТаблицы);
		
		ИсточникСуществует = Ложь;
		ИсточникМаксКоличествоИтераций = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			ИмяВложеннойТаблицы,
			"МаксКоличествоИтераций",
			ИсточникСуществует);
		Если ИсточникСуществует Тогда
			// Уже выполняли добавление особой логики.
			Возврат;
		КонецЕсли;
		
		// Соединения.
		УсловиеСоединения = СтрШаблон(
			"%1.Ссылка = %2.Ссылка",
			ОсновнойИсточник.Источник.Псевдоним,
			ИсточникМаксКоличествоИтераций.Источник.Псевдоним);
		СоединенияДобавить(
			ОсновнойИсточник,
			ИсточникМаксКоличествоИтераций.Источник.Псевдоним,
			УсловиеСоединения);
		
		// Расчет выражений.
		Если ТаблицаИсточника = ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Исполнение)
			Или ТаблицаИсточника = ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Приглашение)
			Или ТаблицаИсточника = ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Регистрация)
			Или ТаблицаИсточника = ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Согласование)
			Или ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Утверждение) Тогда
			ВыражениеВыбираемогоПоля = СтрШаблон(
				"ЕСТЬNULL(МАКСИМУМ(%1.НомерИтерации), 0)",
				ИсточникМаксКоличествоИтераций.Источник.Псевдоним);
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.Поручение) Тогда
			ВыражениеВыбираемогоПоля = СтрШаблон(
				"ЕСТЬNULL(КОЛИЧЕСТВО(%1.ЗадачаИсполнителя), 0)",
				ИсточникМаксКоличествоИтераций.Источник.Псевдоним);
		ИначеЕсли ТаблицаИсточника =
				ИмяИсточника(Перечисления.ТипыПроцессовПоказателейПроцессов.РешениеВопросовВыполненияЗадач) Тогда
			ВыражениеВыбираемогоПоля = СтрШаблон(
				"ЕСТЬNULL(МАКСИМУМ(%1.Цикл), 0)",
				ИсточникМаксКоличествоИтераций.Источник.Псевдоним);
		КонецЕсли;
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"КоличествоИтераций");
		
	ИначеЕсли ВариантРасчета.ДанныеДляРасчета =
			Перечисления.ДанныеДляРасчетаПоказателейПроцессов.КоличествоУчастников Тогда
		
		// Источники.
		ОсновнойИсточник = ОператорВыбратьСхемыЗапроса.Источники[0];
		
		ИсточникСуществует = Ложь;
		ИсточникУчастникиПроцессов = ИсточникиДобавить(
			ОператорВыбратьСхемыЗапроса,
			"РегистрСведений.УчастникиПроцессов",
			"КоличествоУчастникиПроцессов",
			ИсточникСуществует);
		Если ИсточникСуществует Тогда
			// Уже выполняли добавление особой логики.
			Возврат;
		КонецЕсли;
		
		// Соединения.
		УсловиеСоединения = СтрШаблон(
			"%1.Ссылка = %2.Процесс",
			ОсновнойИсточник.Источник.Псевдоним,
			ИсточникУчастникиПроцессов.Источник.Псевдоним);
		СоединенияДобавить(
			ОсновнойИсточник,
			ИсточникУчастникиПроцессов.Источник.Псевдоним,
			УсловиеСоединения);
		
		// Расчет выражений.
		ВыражениеВыбираемогоПоля = СтрШаблон(
			"ЕСТЬNULL(КОЛИЧЕСТВО(%1.Процесс), 0)",
			ИсточникУчастникиПроцессов.Источник.Псевдоним);
		ВыбираемыеПоляДобавить(
			ОператорВыбратьСхемыЗапроса,
			ВыражениеВыбираемогоПоля,
			"КоличествоУчастников");
		
	КонецЕсли;
	
КонецПроцедуры


// Возвращает источник данных для расчета с подчиненными из схемы запроса.
//
// Параметры:
//  ОператорВыбратьСхемыЗапроса - ОператорВыбратьСхемыЗапроса - Оператор выбрать схемы запроса.
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Текстовое описание содержания возвращаемого значения функции.
//
Функция ИсточникиДобавитьДанныеДляРасчетаСПодчиненными(ОператорВыбратьСхемыЗапроса)
	
	ОсновнойИсточник = ОператорВыбратьСхемыЗапроса.Источники[0];
	
	ИсточникСуществует = Ложь;
	ИсточникДанныеДляРасчетаСПодчиненными = ИсточникиДобавить(
		ОператорВыбратьСхемыЗапроса,
		"ДанныеДляРасчетаСПодчиненными",
		"ДанныеДляРасчетаСПодчиненными",
		ИсточникСуществует);
	Если ИсточникСуществует Тогда
		// Уже выполняли добавление особой логики.
		Возврат ИсточникДанныеДляРасчетаСПодчиненными;
	КонецЕсли;
	
	УсловиеСоединения = СтрШаблон(
		"%1.Ссылка = %2.Ссылка",
		ОсновнойИсточник.Источник.Псевдоним,
		ИсточникДанныеДляРасчетаСПодчиненными.Источник.Псевдоним);
	СоединенияДобавить(
		ОсновнойИсточник,
		ИсточникДанныеДляРасчетаСПодчиненными.Источник.Псевдоним,
		УсловиеСоединения);
	
	Возврат ИсточникДанныеДляРасчетаСПодчиненными;
	
КонецФункции

// Преобразует строку в титульный регистр без пробелов.
//
// Параметры:
//  Строка - Строка - Обрабатываемая строка.
//
// Возвращаемое значение:
//  Строка - Строка в титульном регистре без пробелов.
//
Функция ТРегБезПробелов(Знач Строка)
	
	Строка = ТРег(Строка);
	Строка = СтрЗаменить(Строка, " ", "");
	
	Возврат Строка;
	
КонецФункции

// Ищет источник в операторе выбора схемы запроса по имени таблицы.
//
// Параметры:
//  ОператорВыбратьСхемыЗапроса - ОператорВыбратьСхемыЗапроса - Оператор выбора схемы запроса.
//  ИмяТаблицы - Строка - Имя таблицы.
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Найденный источник.
//
Функция НайтиИсточникПоПсевдониму(ОператорВыбратьСхемыЗапроса, Псевдоним)
	
	НайденныйИсточникСхемыЗапроса= Неопределено;
	Для Каждого ИсточникСхемыЗапроса Из ОператорВыбратьСхемыЗапроса.Источники Цикл
		Если ИсточникСхемыЗапроса.Источник.Псевдоним = Псевдоним Тогда
			НайденныйИсточникСхемыЗапроса = ИсточникСхемыЗапроса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйИсточникСхемыЗапроса;
	
КонецФункции

// Ищет источник в операторе выбора схемы запроса по имени таблицы.
//
// Параметры:
//  ОператорВыбратьСхемыЗапроса - ОператорВыбратьСхемыЗапроса - Оператор выбора схемы запроса.
//  ИмяТаблицы - Строка - Имя таблицы.
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Найденный источник.
//
Функция НайтиИсточникПоИмени(ОператорВыбратьСхемыЗапроса, Имя)
	
	НайденныйИсточникСхемыЗапроса= Неопределено;
	Для Каждого ИсточникСхемыЗапроса Из ОператорВыбратьСхемыЗапроса.Источники Цикл
		Если ИсточникСхемыЗапроса.Источник.ИмяТаблицы = Имя Тогда
			НайденныйИсточникСхемыЗапроса = ИсточникСхемыЗапроса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйИсточникСхемыЗапроса;
	
КонецФункции

// Формирует имя таблицы источника по типу процесса.
//
// Параметры:
//  ТипПроцесса - ПеречислениеСсылка.ТипыПроцессовПоказателейПроцессов - Тип процесса.
//
// Возвращаемое значение:
//  Строка - Имя источника для данного типа процесса.
//
Функция ИмяИсточника(ТипПроцесса)
	
	ИмяИсточника = "";
	
	Если ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Исполнение Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Исполнение.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.КомплексныйПроцесс Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.КомплексныйПроцесс.Имя;
	ИначеЕсли ТипПроцесса =
			Перечисления.ТипыПроцессовПоказателейПроцессов.ОбработкаВнутреннегоДокумента Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.ОбработкаВнутреннегоДокумента.Имя;
	ИначеЕсли ТипПроцесса =
			Перечисления.ТипыПроцессовПоказателейПроцессов.ОбработкаВходящегоДокумента Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.ОбработкаВходящегоДокумента.Имя;
	ИначеЕсли ТипПроцесса =
			Перечисления.ТипыПроцессовПоказателейПроцессов.ОбработкаИсходящегоДокумента Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.ОбработкаИсходящегоДокумента.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Ознакомление Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Ознакомление.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Поручение Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Поручение.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Приглашение Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Приглашение.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Рассмотрение Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Рассмотрение.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Регистрация Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Регистрация.Имя;
	ИначеЕсли ТипПроцесса =
			Перечисления.ТипыПроцессовПоказателейПроцессов.РешениеВопросовВыполненияЗадач Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.РешениеВопросовВыполненияЗадач.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Согласование Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Согласование.Имя;
	ИначеЕсли ТипПроцесса = Перечисления.ТипыПроцессовПоказателейПроцессов.Утверждение Тогда
		ИмяМетаданного = Метаданные.БизнесПроцессы.Утверждение.Имя;
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный тип процесса.'; en = 'Unknown process type.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ИмяИсточника = СтрШаблон("БизнесПроцесс.%1", ТРегБезПробелов(ТипПроцесса));
	
	Возврат ИмяИсточника;
	
КонецФункции

// Формирует имя типа предмета.
//
// Параметры:
//  ТипПредмета - ПеречислениеСсылка.ТипыПредметовПоказателейПроцессов - Тип предмета.
//
// Возвращаемое значение:
//  Строка - Имя типа предмета.
//
Функция ИмяТипаПредмета(ТипПредмета)
	
	ИмяТипаПредмета = "";
	Если ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.Брони Тогда
		ИмяБазовогоТипа = "Документ";
		ИмяМетаданного = Метаданные.Документы.Бронь.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ВходящиеПисьма Тогда
		ИмяБазовогоТипа = "Документ";
		ИмяМетаданного = Метаданные.Документы.ВходящееПисьмо.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ИсходящиеПисьма Тогда
		ИмяБазовогоТипа = "Документ";
		ИмяМетаданного = Метаданные.Документы.ИсходящееПисьмо.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ВнутренниеДокументы Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.ВнутренниеДокументы.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ВходящиеДокументы Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.ВходящиеДокументы.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ИсходящиеДокументы Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.ИсходящиеДокументы.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.Контрагенты Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.Контрагенты.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.Мероприятия Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.Мероприятия.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ПроектныеЗадачи Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.ПроектныеЗадачи.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.Проекты Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.Проекты.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ПротоколыМероприятий Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.ПротоколыМероприятий.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.ТемыОбсуждений Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.ТемыОбсуждений.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.УведомленияПрограммы Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.УведомленияПрограммы.Имя;
	ИначеЕсли ТипПредмета = Перечисления.ТипыПредметовПоказателейПроцессов.Файлы Тогда
		ИмяБазовогоТипа = "Справочник";
		ИмяМетаданного = Метаданные.Справочники.Файлы.Имя;
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный тип предмета.'; en = 'Unknown subject type.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ИмяТипаПредмета = СтрШаблон("%1.%2", ИмяБазовогоТипа, ИмяМетаданного);
	
	Возврат ИмяТипаПредмета;
	
КонецФункции

// Разворачивает ответственного в массив ответственных.
//
// Параметры:
//  Ответственный - СправочникСсылка.Пользователи, СправочникСсылка.СтруктураПредприятия,
//                  СправочникСсылка.РабочиеГруппы - Ответственный.
//
// Возвращаемое значение:
//  Массив - Развернутый список ответственных.
//
Функция РазвернутьОтветственных(Ответственный)
	
	ВсеОтветственные = Новый Массив;
	
	ТипОтветственного = ТипЗнч(Ответственный);
	Если ТипОтветственного = Тип("СправочникСсылка.Пользователи") Тогда
		ВсеОтветственные.Добавить(Ответственный);
	ИначеЕсли ТипОтветственного = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ВсеОтветственные =
			РаботаСПользователями.ПолучитьПользователейПодразделения(Ответственный, Ложь);
	ИначеЕсли ТипОтветственного = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		ВсеОтветственные =
			РаботаСПользователями.ПолучитьПользователейРабочейГруппы(Ответственный, Ложь);
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный ответственный.'; en = 'Unknown responsible.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ВсеОтветственные;
	
КонецФункции

// Возвращает реквизита вида предмета.
//
// Параметры:
//  ВидПредмета - СправочникСсылка.ВидыВходящихДокументов, СправочникСсылка.ВидыИсходящихДокументов,
//                СправочникСсылка.ВидыВнутреннихДокументов, СправочникСсылка.ВидыМероприятий - Вид предмета.
//
// Возвращаемое значение:
//  Строка - Реквизит вида предмета.
//
Функция РеквизитВидаПредмета(ВидПредмета)
	
	РеквизитВидаПредмета = "";
	
	ТипВидаПредмета = ТипЗнч(ВидПредмета);
	Если ТипВидаПредмета = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
		Или ТипВидаПредмета = Тип("СправочникСсылка.ВидыВходящихДокументов")
		Или ТипВидаПредмета = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		РеквизитВидаПредмета = "ВидДокумента";
	ИначеЕсли ТипВидаПредмета = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		РеквизитВидаПредмета = "ВидМероприятия";
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный вид предмета.'; en = 'Unknown subject type.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат РеквизитВидаПредмета;
	
КонецФункции

#Область СхемаЗапроса

// Формирует новую структуру схемы запроса.
//
// Возвращаемое значение:
//  Структура - Схема запроса.
//
Функция СхемаЗапросаНовый()
	
	СхемаЗапроса = Новый Структура;
	СхемаЗапроса.Вставить("ПакетЗапросов", Новый Массив);
	ПакетЗапросовДобавить(СхемаЗапроса);
	
	Возврат СхемаЗапроса;
	
КонецФункции

// Формирует текст запроса по схеме запроса.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - Схема запроса.
//
// Возвращаемое значение:
//  Текст - Текст запроса.
//
Функция СхемаЗапросаПолучитьТекстЗапроса(СхемаЗапроса)
	
	ТекстЗапроса = Новый Массив;
	
	ПервыйЗапрос = Истина;
	Для Каждого ЗапросСхемыЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если Не ПервыйЗапрос Тогда
			ТекстЗапроса.Добавить(ОбщегоНазначения.РазделительПакетаЗапросов());
		КонецЕсли;
		
		Если ЗапросСхемыЗапроса.Тип = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			ПервыйОператор = Истина;
			Для Каждого Оператор Из ЗапросСхемыЗапроса.Операторы Цикл
				
				Если Оператор.ВыбираемыеПоля.Количество() = 0
					И Оператор.Источники.Количество() = 0
					И Оператор.Отбор.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ПервыйОператор Тогда
					ТекстЗапроса.Добавить(
						"
						|ОБЪЕДИНИТЬ ВСЕ
						|");
				КонецЕсли;
				
				// ВЫБРАТЬ
				ТекстЗапроса.Добавить("ВЫБРАТЬ");
				СодержитАгрегатнуюФункцию = Ложь;
				ВыбираемыеПоля = Новый Массив;
				Для Каждого ВыбираемоеПоле Из Оператор.ВыбираемыеПоля Цикл
					ВыбираемыеПоля.Добавить(
						СтрШаблон("	%1 КАК %2", ВыбираемоеПоле.Выражение, ВыбираемоеПоле.Псевдоним));
					СодержитАгрегатнуюФункцию =
						СодержитАгрегатнуюФункцию Или СодержитАгрегатнуюФункцию(ВыбираемоеПоле.Выражение);
				КонецЦикла;
				ТекстЗапроса.Добавить(СтрСоединить(ВыбираемыеПоля, "," + Символы.ПС));
				
				// ПОМЕСТИТЬ
				Если ПервыйОператор И ЗначениеЗаполнено(ЗапросСхемыЗапроса.ТаблицаДляПомещения) Тогда
					ТекстЗапроса.Добавить(СтрШаблон("ПОМЕСТИТЬ %1", ЗапросСхемыЗапроса.ТаблицаДляПомещения));
				КонецЕсли;
				
				// ИЗ
				ТекстЗапроса.Добавить("ИЗ");
				Источники = Новый Соответствие;
				ЗависимыеИсточники = Новый Массив;
				КорневыеИсточники = Новый Массив;
				Для Каждого Источник Из Оператор.Источники Цикл
					Источники.Вставить(Источник.Источник.Псевдоним, Источник);
					Если ЗависимыеИсточники.Найти(Источник.Источник.Псевдоним) = Неопределено Тогда
						КорневыеИсточники.Добавить(Источник.Источник.Псевдоним);
					КонецЕсли;
					Для Каждого Соединение Из Источник.Соединения Цикл
						Индекс = КорневыеИсточники.Найти(Соединение.Источник);
						Если Индекс <> Неопределено Тогда
							КорневыеИсточники.Удалить(Индекс);
						КонецЕсли;
						Если ЗависимыеИсточники.Найти(Соединение.Источник) = Неопределено Тогда
							ЗависимыеИсточники.Добавить(Соединение.Источник);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				ТекстИсточники = Новый Массив;
				Для Каждого КорневойИсточник Из КорневыеИсточники Цикл
					Источник = Источники[КорневойИсточник];
					ТекстИсточника = Новый Массив;
					ТекстИсточника.Добавить(
						СтрШаблон(
							"	%1 КАК %2",
							Источник.Источник.ИмяТаблицы,
							Источник.Источник.Псевдоним));
					ДобавитьСоединенияИсточника(ТекстИсточника, Источники, Источник, 0);
					ТекстИсточники.Добавить(СтрСоединить(ТекстИсточника, Символы.ПС));
				КонецЦикла;
				ТекстЗапроса.Добавить(СтрСоединить(ТекстИсточники, "," + Символы.ПС));
				
				// ГДЕ
				Если Оператор.Отбор.Количество() <> 0 Тогда
					ТекстЗапроса.Добавить("ГДЕ");
					Отбор = Новый Массив;
					Для Каждого ВыражениеОтбора Из Оператор.Отбор Цикл
						Отбор.Добавить(СтрШаблон("	(%1)", ВыражениеОтбора));
					КонецЦикла;
					ТекстЗапроса.Добавить(СтрСоединить(Отбор, Символы.ПС + "	И"));
				КонецЕсли;
				
				// СГРУППИРОВАТЬ ПО
				Если СодержитАгрегатнуюФункцию Тогда
					Группировка = Новый Массив;
					Для Каждого ВыбираемоеПоле Из Оператор.ВыбираемыеПоля Цикл
						Если СодержитАгрегатнуюФункцию(ВыбираемоеПоле.Выражение) Тогда
							Продолжить;
						КонецЕсли;
						Группировка.Добавить(СтрШаблон("	%1", ВыбираемоеПоле.Выражение));
					КонецЦикла;
					Если Группировка.Количество() <> 0 Тогда
						ТекстЗапроса.Добавить("");
						ТекстЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
						ТекстЗапроса.Добавить(СтрСоединить(Группировка, "," + Символы.ПС));
					КонецЕсли;
				КонецЕсли;
				
				ПервыйОператор = Ложь;
				
			КонецЦикла;
			
		ИначеЕсли ЗапросСхемыЗапроса.Тип = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			
			// УНИЧТОЖИТЬ
			ТекстЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ЗапросСхемыЗапроса.ИмяТаблицы));
			
		КонецЕсли;
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстЗапроса, Символы.ПС);
	
КонецФункции

// Добавляет запрос в пакет запросов.
//
// Параметры:
//  ПакетЗапросов - Массив - Пакет запросов.
//
// Возвращаемое значение:
//  Структура - Запроса нужного типа.
//
Функция ПакетЗапросовДобавить(СхемаЗапроса, Знач Тип = Неопределено)
	
	Если Тип = Неопределено Тогда
		Тип = Тип("ЗапросВыбораСхемыЗапроса");
	КонецЕсли;
	
	ЗапросСхемыЗапроса = Неопределено;
	Если Тип = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		ЗапросСхемыЗапроса = ЗапросВыбораНовый();
	ИначеЕсли Тип = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ЗапросСхемыЗапроса = ЗапросУничтоженияНовый();
	КонецЕсли;
	
	Если ЗапросСхемыЗапроса <> Неопределено Тогда
		СхемаЗапроса.ПакетЗапросов.Добавить(ЗапросСхемыЗапроса);
	КонецЕсли;
	
	Возврат ЗапросСхемыЗапроса;
	
КонецФункции

// Формирует новую структуру запроса выбора схемы запроса.
//
// Возвращаемое значение:
//  Структура - Запрос выбора.
//
Функция ЗапросВыбораНовый()
	
	ЗапросВыбора = Новый Структура;
	ЗапросВыбора.Вставить("Тип", Тип("ЗапросВыбораСхемыЗапроса"));
	ЗапросВыбора.Вставить("ТаблицаДляПомещения");
	ЗапросВыбора.Вставить("Операторы", Новый Массив);
	ОператорыДобавить(ЗапросВыбора);
	
	Возврат ЗапросВыбора;
	
КонецФункции

// Формирует новую структуру запроса уничтожения таблицы схемы запроса.
//
// Возвращаемое значение:
//  Структура - Запрос уничтожения таблицы.
//
Функция ЗапросУничтоженияНовый()
	
	ЗапросУничтожения = Новый Структура;
	ЗапросУничтожения.Вставить("Тип", Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтожения.Вставить("ИмяТаблицы");
	
	Возврат ЗапросУничтожения;
	
КонецФункции

// Формирует новую структуру оператора выбора схемы запроса.
//
// Возвращаемое значение:
//  Структура - Оператор выбора.
//
Функция ОператорВыбратьНовый()
	
	ОператорВыбрать = Новый Структура;
	ОператорВыбрать.Вставить("ВыбираемыеПоля", Новый Массив);
	ОператорВыбрать.Вставить("Источники", Новый Массив);
	ОператорВыбрать.Вставить("Отбор", Новый Массив);
	
	Возврат ОператорВыбрать;
	
КонецФункции

// Формирует новую структуру описания источника схемы запроса.
//
// Возвращаемое значение:
//  Структура - Описание источника.
//
Функция ОписаниеИсточникаНовый()
	
	Источник = Новый Структура;
	Источник.Вставить("Псевдоним");
	Источник.Вставить("ИмяТаблицы");
	
	Возврат Источник;
	
КонецФункции

// Формирует новую структуру источника схемы запроса.
//
// Возвращаемое значение:
//  Структура - Источник.
//
Функция ИсточникНовый()
	
	Источник = Новый Структура;
	Источник.Вставить("Источник");
	Источник.Вставить("Соединения", Новый Массив);
	
	Возврат Источник;
	
КонецФункции

// Формирует псевдоним из имени таблицы.
//
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы.
//
// Возвращаемое значение:
//  Тип - Текстовое описание содержания возвращаемого значения функции.
//
Функция ПсевдонимИзИмениТаблицы(ИмяТаблицы)
	
	ЧастиИмени = СтрРазделить(ИмяТаблицы, ".");
	
	Возврат ЧастиИмени[ЧастиИмени.Количество() - 1];
	
КонецФункции

// Добавляет источник в оператор выбора схемы запроса. Если источник уже есть - возвращает его.
//
// Параметры:
//  ОператорВыбратьСхемыЗапроса - ОператорВыбратьСхемыЗапроса - Оператор выбрать схемы запроса.
//  Имя - Строка - Имя источника.
//  Псевдоним - Строка - Псевдоним источника.
//  ВременнаяТаблица - Булево - Добавляемый источник является временной таблицей
//  ИсточникСуществует - Булево - Устанавливаемый флаг, обозначающий что был найден существующий источник.
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Источник схемы запроса.
//
Функция ИсточникиДобавить(ОператорВыбрать, ИмяТаблицы, Псевдоним = Неопределено, ИсточникСуществует = Ложь)
	
	Если Псевдоним <> Неопределено Тогда
		Источник = НайтиИсточникПоПсевдониму(ОператорВыбрать, Псевдоним);
	Иначе
		Источник = НайтиИсточникПоИмени(ОператорВыбрать, ИмяТаблицы);
	КонецЕсли;
	Если Источник <> Неопределено Тогда
		ИсточникСуществует = Истина;
		Возврат Источник;
	КонецЕсли;
	
	Источник = ИсточникНовый();
	Источник.Источник = ОписаниеИсточникаНовый();
	Источник.Источник.ИмяТаблицы = ИмяТаблицы;
	Источник.Источник.Псевдоним =
		?(ЗначениеЗаполнено(Псевдоним), Псевдоним, ПсевдонимИзИмениТаблицы(ИмяТаблицы));
	ОператорВыбрать.Источники.Добавить(Источник);
	
	Возврат Источник;
	
КонецФункции

// Добавляет соединение.
//
// Параметры:
//  ОсновнойИсточник - Структура - Источник.
//  Источник - Строка - Псевдоним источника, с которым требуется создать связь.
//  Условие - Строка - Условие связи двух источников.
// 
// Возвращаемое значение:
//  Булево - Признак успешного добавления.
//
Функция СоединенияДобавить(ОсновнойИсточник, Источник, Условие)
	
	СоединениеИсточника = СоединениеИсточникаНовый();
	СоединениеИсточника.Источник = Источник;
	СоединениеИсточника.Условие = Условие;
	ОсновнойИсточник.Соединения.Добавить(СоединениеИсточника);
	
	Возврат Истина;
	
КонецФункции

// Формирует новую структуру соединения источника схемы запроса.
//
// Возвращаемое значение:
//  Структура - Соединение источника.
//
Функция СоединениеИсточникаНовый()
	
	СоединениеИсточника = Новый Структура;
	СоединениеИсточника.Вставить("Источник");
	СоединениеИсточника.Вставить("Условие");
	
	Возврат СоединениеИсточника;
	
КонецФункции

// Добавляет новый оператор выбора в операторы выбора схема запроса.
//
// Параметры:
//  ЗапросСхемыЗапроса - Структура - Запрос схемы запроса.
//
// Возвращаемое значение:
//  Структура - Оператор выбора.
//
Функция ОператорыДобавить(ЗапросСхемыЗапроса)
	
	ОператорВыбрать = ОператорВыбратьНовый();
	ЗапросСхемыЗапроса.Операторы.Добавить(ОператорВыбрать);
	
	Возврат ОператорВыбрать;
	
КонецФункции

// Добавляет выбираемое поле.
//
// Параметры:
//  ОператорВыбрать - Структура - Оператор выбрать схемы запроса.
//  Выражение - Строка - Выражение поля.
//  Псевдоним - Строка - Псевдоним поля.
//
Процедура ВыбираемыеПоляДобавить(ОператорВыбрать, Выражение, Псевдоним)
	
	Для Каждого ВыбираемоеПоле Из ОператорВыбрать.ВыбираемыеПоля Цикл
		Если ВыбираемоеПоле.Псевдоним = Псевдоним Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Поле = ПолеНовый();
	Поле.Выражение = Выражение;
	Поле.Псевдоним = Псевдоним;
	
	ОператорВыбрать.ВыбираемыеПоля.Добавить(Поле);
	
КонецПроцедуры

// Формирует новое поле схемы запроса.
//
// Возвращаемое значение:
//  Структура - Поле схемы запроса.
//
Функция ПолеНовый()
	
	Выражение = Новый Структура;
	Выражение.Вставить("Выражение");
	Выражение.Вставить("Псевдоним");
	
	Возврат Выражение;
	
КонецФункции

// Добавляет соединения источника к тексту запроса источников.
//
// Параметры:
//  ТекстИсточники - Массив - Текст запроса.
//  Источники - Соответствие - Доступные источники.
//  Источник - Структура - Источник, соединения которого добавляются.
//  УровеньВложенности - Число - Уровень вложенности соединения.
//
Процедура ДобавитьСоединенияИсточника(ТекстИсточники, Источники, Источник, УровеньВложенности)
	
	Если УровеньВложенности > 10 Тогда
		ВызватьИсключение НСтр("ru = 'Превышен уровень вложенности соединения в запросе.'; en = 'Nesting level of joins exceeded in the connection query.'");
	КонецЕсли;
	
	Для Каждого Соединение Из Источник.Соединения Цикл
		ТекущийИсточник = Источники[Соединение.Источник];
		ТекстИсточники.Добавить(
			СтрШаблон(
				"%1ЛЕВОЕ СОЕДИНЕНИЕ %2 КАК %3",
				ОтступЗапроса(УровеньВложенности + 2),
				ТекущийИсточник.Источник.ИмяТаблицы,
				ТекущийИсточник.Источник.Псевдоним));
		ДобавитьСоединенияИсточника(ТекстИсточники, Источники, ТекущийИсточник, УровеньВложенности + 1);
		ТекстИсточники.Добавить(
			СтрШаблон(
				"%1ПО (%2)",
				ОтступЗапроса(УровеньВложенности + 2),
				Соединение.Условие));
	КонецЦикла;
	
КонецПроцедуры

// Формирует отступ запроса.
//
// Параметры:
//  РазмерОтступа - Число - Размер формируемого отступа.
// 
// Возвращаемое значение:
//  Строка - Сформированный отступ.
//
Функция ОтступЗапроса(РазмерОтступа)
	
	ОтступЗапроса = Новый Массив;
	
	Для Индекс = 1 По РазмерОтступа Цикл
		ОтступЗапроса.Добавить(Символы.Таб);
	КонецЦикла;
	
	Возврат СтрСоединить(ОтступЗапроса);
	
КонецФункции

// Проверяет, содержит ли выражение агрегатную функцию.
//
// Параметры:
//  Выражение - Строка - Проверяемое выражение.
//
// Возвращаемое значение:
//  Булево - Содержит агрегатную функцию.
//
Функция СодержитАгрегатнуюФункцию(Выражение)
	
	Возврат СтрНайти(Выражение, "СУММА") <> 0
		Или СтрНайти(Выражение, "МИНИМУМ") <> 0
		Или СтрНайти(Выражение, "МАКСИМУМ") <> 0
		Или СтрНайти(Выражение, "СРЕДНЕЕ") <> 0
		Или СтрНайти(Выражение, "КОЛИЧЕСТВО") <> 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти
