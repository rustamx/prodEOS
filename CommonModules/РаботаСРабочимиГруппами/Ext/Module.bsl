
/////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С РАБОЧЕЙ ГРУППОЙ ДОКУМЕНТА

// Перезаписывает участников рабочей группы документа
// Перезаписывает документ
//
// Параметры:
// Ссылка (любая ссылка, которая может хранится в измерении Объект РС РабочиеГруппы)
// Участники (ТаблицаЗначений)
// - Участник (СправочникСсылка.Пользователи, СправочникСсылка.РабочиеГруппы, СправочникСсылка.ПолныеРоли)
// ОбновитьПраваДоступа (Булево). Указывает на необходимость обновления прав доступа
// АвторИзменений - Пользователь - пользователь, который запрашивает изменение РГ.
// ЗаполнятьКолонкуИзменение - Булево - 
// 		признак необходимости автоматического заполнения колонки Изменение для добавленных строк.
//
Процедура ПерезаписатьРабочуюГруппуОбъекта(
			Ссылка,
			Знач Участники,
			ОбновитьПраваДоступа,
			АвторИзменений = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Участники.Свернуть("Участник", "Изменение");
	
	// Проверка отличий.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Было.Участник,
		|	Было.Изменение
		|ПОМЕСТИТЬ Было
		|ИЗ
		|	&Было КАК Было
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Стало.Участник,
		|	Стало.Изменение
		|ПОМЕСТИТЬ Стало
		|ИЗ
		|	&Стало КАК Стало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Было.Участник КАК УчастникБыл,
		|	Было.Изменение КАК ИзмененоБыло,
		|	Стало.Участник КАК УчастникСтал,
		|	Стало.Изменение КАК ИзмененоСтало
		|ИЗ
		|	Было КАК Было
		|		ПОЛНОЕ СОЕДИНЕНИЕ Стало КАК Стало
		|		ПО Было.Участник = Стало.Участник
		|ГДЕ
		|	(Было.Участник ЕСТЬ NULL 
		|			ИЛИ Стало.Участник ЕСТЬ NULL 
		|			ИЛИ Было.Изменение <> Стало.Изменение)";
		
	ТекущаяРабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Ссылка);
	Запрос.УстановитьПараметр("Было", ТекущаяРабочаяГруппа);
	Запрос.УстановитьПараметр("Стало", Участники);
	РезультатПроверкиОтличий = Запрос.Выполнить();
	
	Если РезультатПроверкиОтличий.Пустой() Тогда
		// Запись не требуется.
		Возврат;
	КонецЕсли;
	
	// Проверка прав.
	ПроверитьПраваПередЗаписьюРабочейГруппы(Ссылка, Участники, АвторИзменений);
	
	// Запишем изменения рабочей группы в протокол пользователя и проверим сам факт того, что группа изменилась.
	ИзмененияДобавлено = "";
	ИзмененияИзменено = "";
	ИзмененияУдалено = "";
	
	Выборка = РезультатПроверкиОтличий.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если (ЗначениеЗаполнено(Выборка.УчастникБыл)
			И ЗначениеЗаполнено(Выборка.УчастникСтал))
			И Не Выборка.ИзмененоБыло = Выборка.ИзмененоСтало Тогда

			ИзмененияИзменено = ИзмененияИзменено
				+ СтрШаблон(
					НСтр("ru = 'Изменено: %1, Изменение = %2 => %3, %4'; en = 'Changed: %1, Change = %2 => %3, %4'"),
					Строка(Выборка.УчастникБыл),
					Выборка.ИзмененоБыло,
					Выборка.ИзмененоСтало,
					ПолучитьНавигационнуюСсылку(Выборка.УчастникБыл))
				+ Символы.ПС;

		ИначеЕсли ЗначениеЗаполнено(Выборка.УчастникБыл) 
			И Не ЗначениеЗаполнено(Выборка.УчастникСтал) Тогда

			ИзмененияУдалено = ИзмененияУдалено
				+ СтрШаблон(
					НСтр("ru = 'Удалено: %1, Изменение = %2, %3'; en = 'Deleted: %1, Change = %2, %3'"),
					Строка(Выборка.УчастникБыл),
					Выборка.ИзмененоБыло,
					ПолучитьНавигационнуюСсылку(Выборка.УчастникБыл))
				+ Символы.ПС;

		ИначеЕсли ЗначениеЗаполнено(Выборка.УчастникСтал) 
			И Не ЗначениеЗаполнено(Выборка.УчастникБыл) Тогда

			ИзмененияДобавлено = ИзмененияДобавлено
				+ СтрШаблон(
					НСтр("ru = 'Добавлено: %1, Изменение = %2, %3'; en = 'Added: %1, Change = %2, %3'"),
					Строка(Выборка.УчастникСтал),
					Выборка.ИзмененоСтало,
					ПолучитьНавигационнуюСсылку(Выборка.УчастникСтал))
				+ Символы.ПС;

		КонецЕсли;

	КонецЦикла;

	// Запись рабочей группы.
	Попытка
		
		НачатьТранзакцию();
		
		НеобходимоПротоколироватьИзменения = Метаданные.БизнесПроцессы.Найти(Ссылка.Метаданные()) = Неопределено;
		Если НеобходимоПротоколироватьИзменения Тогда
			
			ПротоколированиеРаботыПользователей.ЗаписатьИзменениеРабочейГруппы(
				Ссылка, 
				СтрШаблон("%1%2%3", ИзмененияДобавлено, ИзмененияИзменено, ИзмененияУдалено));
			
		КонецЕсли;
		
		РегистрыСведений.РабочиеГруппы.ЗаписатьНаборПоОбъекту(Ссылка, Участники, ОбновитьПраваДоступа);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Перезаписывает рабочие группы предметов бизнес-процесса
//
// Параметры:
//	 - БизнесПроцессОбъект - БизнесПроцессОбъект - бизнес процесс объект для которого производится
//							  запись рабочих групп.
//	 - Предметы - Массив - массив предметов бизнес-процесса.
//
Процедура ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(БизнесПроцессОбъект, Предметы) Экспорт
	
	Если ТипЗнч(Предметы) <> Тип("Массив")
		ИЛИ Предметы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МетаданныеБизнесПроцессов = Метаданные.БизнесПроцессы;
	
	МассивТиповБизнесПроцессов = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцеса ИЗ МетаданныеБизнесПроцессов Цикл
		МассивТиповБизнесПроцессов.Добавить(Тип("БизнесПроцессОбъект." + МетаданныеБизнесПроцеса.Имя));
	КонецЦикла;
	
	ТипБизнесПроцесса = ТипЗнч(БизнесПроцессОбъект);
	
	Если МассивТиповБизнесПроцессов.Найти(ТипБизнесПроцесса) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерБизнесПроцесса = БизнесПроцессы[БизнесПроцессОбъект.Метаданные().Имя];
	
	Если НЕ МенеджерБизнесПроцесса.ЕстьМетодДобавитьУчастниковВТаблицу() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Предмет Из Предметы Цикл
		
		// Формирование рабочей группы перед проверкой прав
		Если ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Предмет) Тогда
			
			РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьПустуюТаблицуУчастников();
			МенеджерБизнесПроцесса.ДобавитьУчастниковВТаблицу(РабочаяГруппа, БизнесПроцессОбъект);
			
			Попытка
				
				РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
					Предмет, РабочаяГруппа, Истина, Истина);
					
			Исключение
				
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(Предмет);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает перезапись рабочей группы предмета процесса.
//
// Параметры:
//  Предмет - СправочникОбъект.ИсходящиеДокументы,
//            СправочникОбъект.ВнутренниеДокументы - предмет, при записи которого отключается перезапись рабочей группы.
//
Процедура ОтключитьПерезаписьРабочейГруппыПредметаПроцесса(Предмет) Экспорт
	
	Предмет.ДополнительныеСвойства.Вставить("ПерезаписьРабочейГруппыПредметаПроцессаОтключена", Истина);
	
КонецПроцедуры

// Определяет признак отключения перезаписи рабочей группы предмета процесса.
//
// Параметры:
//  Предмет - СправочникОбъект.ИсходящиеДокументы,
//            СправочникОбъект.ВнутренниеДокументы - предмет, при записи которого может быть
//                                                   отключена перезапись рабочей группы.
//
Функция ПерезаписьРабочейГруппыПредметаПроцессаОтключена(Предмет) Экспорт
	
	Если Предмет.ДополнительныеСвойства.Свойство(
			"ПерезаписьРабочейГруппыПредметаПроцессаОтключена")
		И Предмет.ДополнительныеСвойства.ПерезаписьРабочейГруппыПредметаПроцессаОтключена Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет обработку исключения, возникшего при перезаписи рабочей группы
// предмета процесса.
//
// Если исключение возникает в сеансе пользователя, то процедура прерывает выполнение
// программного кода, иначе пишется запись в журнал регистрации и выполнение продолжается.
//
Процедура ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(Предмет) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи")
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда
		
		НаименованиеОбъекта = НСтр("ru = 'проекта'; en = 'of process'");
	Иначе
		НаименованиеОбъекта = НСтр("ru = 'предмета'; en = 'of subject'");
	КонецЕсли;
	
	ТекстИсключения = НСтр("ru = 'Не удалось обновить рабочую группу %1 ""%2"" по следующей причине:
		|
		|%3';
		|en = 'Failed to update working group %1 ""%2"" because: 
		|%3'");
		
	ТекстИсключения = СтрШаблон(ТекстИсключения,
		НаименованиеОбъекта, Строка(Предмет), ИнформацияОбОшибке().Описание);
		
	Если РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		// Если исключение возникает в фоновом задании, то в журнал регистрации пишется ошибка
		// и работа кода не прерывается.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Перезапись рабочей группы предмета процесса'; en = 'Overwriting working group of project subject'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстИсключения);
	Иначе
		// Иначе вызывается исключение.
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа.
//
// Параметры:
// Объект (СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.ВнутренниеДокументы и др.)
// Участники (ТаблицаЗначений)
// - Участник (СправочникСсылка.Пользователи, СправочникСсылка.РабочиеГруппы, СправочникСсылка.ПолныеРоли)
// ОбновитьПраваДоступа - если установлен, то будет вызвано обновление прав доступа для указанного предмета
// 
Процедура ДобавитьУчастниковВРабочуюГруппуОбъекта(
			Объект, Участники, ОбновитьПраваДоступа = Истина, ЗаполнятьКолонкуИзменение = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЗаполнятьКолонкуИзменение Тогда
			ЗаполнитьКолонкуИзменениеПоСтандартнымПравам(Объект, Участники);
		КонецЕсли;
		
		ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект);
		Для Каждого УчастникиСтрока Из Участники Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
		КонецЦикла;
		
		ПерезаписатьРабочуюГруппуОбъекта(Объект, ТаблицаНабора, ОбновитьПраваДоступа);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа из источника
//
// Параметры:
// Документ (СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.ВнутренниеДокументы)
// Источник (СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.ВнутренниеДокументы, БизнесПроцессСсылка)
// 
Процедура ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
			Документ, Источник, ЗаписатьДокумент = Истина, ЗаполнятьКолонкуИзменение = Ложь) Экспорт
	
	Если Документ = Неопределено Или Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник);
	ДобавитьУчастниковВРабочуюГруппуОбъекта(
		Документ, ТаблицаУчастников, ЗаписатьДокумент, ЗаполнятьКолонкуИзменение);
	
КонецПроцедуры

Процедура ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, ДокументСсылка)
	
	ШаблонЗапросаБизнесПроцессы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БизнесПроцессПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ВидБизнесПроцесса].Предметы КАК БизнесПроцессПредметы
		|ГДЕ
		|	БизнесПроцессПредметы.Предмет = &Предмет";
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.Проекты") Тогда
		ШаблонЗапросаБизнесПроцессы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ВидБизнесПроцесса] КАК БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.[ВидБизнесПроцесса].Предметы КАК БизнесПроцессПредметы
		|		ПО БизнесПроцесс.Ссылка = БизнесПроцессПредметы.Ссылка
		|ГДЕ
		|	(БизнесПроцесс.Проект = &Предмет
		|			ИЛИ БизнесПроцессПредметы.Предмет = &Предмет
		|			ИЛИ БизнесПроцессПредметы.Предмет В
		|				(ВЫБРАТЬ
		|					ПроектныеЗадачи.Ссылка
		|				ИЗ
		|					Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|				ГДЕ
		|					ПроектныеЗадачи.Владелец = &Предмет))"
	КонецЕсли;
	
	Для каждого МетаданныеБизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		ТекстЗапросаБизнесПроцессы = СтрЗаменить(ШаблонЗапросаБизнесПроцессы, "[ВидБизнесПроцесса]", МетаданныеБизнесПроцесс.Имя);
		Запрос = Новый Запрос(ТекстЗапросаБизнесПроцессы);
		Запрос.Параметры.Вставить("Предмет", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет рабочую группу
//
Процедура ПерезаполнитьРабочуюГруппуДокумента(Документ, ЗаписатьДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Документ);
	ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, Документ);
	ДобавитьУчастниковВРабочуюГруппуОбъекта(Документ, ТаблицаУчастников, ЗаписатьДокумент, Истина);
	
КонецПроцедуры

// Перезаполняет рабочую группу в форме документа
//
Процедура ПерезаполнитьРабочуюГруппуНаФорме(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	
	ТипИсточника = ТипЗнч(Форма.Объект.Ссылка);
	ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
	ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
	Попытка
		ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
	Исключение
		// Метода может не быть.
	КонецПопытки;
	Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
		Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаУчастников, Форма.Объект);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Форма.Объект.Ссылка) Тогда
		ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, Форма.Объект.Ссылка);
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ЗаполнитьКолонкуИзменениеПоСтандартнымПравам(
		Форма.Объект.Ссылка, ТаблицаУчастников);
	
	Форма.РабочаяГруппаТаблица.Очистить();
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Добавляет в набор участников рабочей группы переданного источника
Процедура ДобавитьУчастниковИзИсточника(ТаблицаНабора, Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
		ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
		ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
		Попытка
			ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
		Исключение
			// Метода может не быть.
		КонецПопытки;
		Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
			Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаНабора, Источник);
		КонецЕсли;
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
		ИмяБизнесПроцесса = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
		ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
		Попытка
			ЕстьМетодДобавитьУчастниковВТаблицу = БизнесПроцессы[ИмяБизнесПроцесса].ЕстьМетодДобавитьУчастниковВТаблицу();
		Исключение
			// Метода может не быть.
		КонецПопытки;
		Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
			БизнесПроцессы[ИмяБизнесПроцесса].ДобавитьУчастниковВТаблицу(ТаблицаНабора, Источник);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНабора.Свернуть("Участник", "Изменение");
	
КонецПроцедуры

// Добавляет участника в переданную таблицу.
// Параметр СтрокаДобавленаАвтоматически определяет признак того, что нужно скорректировать
//  реквизит "Изменение" в соответсвии со стандартными правами.
// 
Процедура ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			Участник,
			Изменение = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПользователиДокументооборот.ЭтоКонтейнер(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Отбор.Вставить("Изменение", Изменение);
	
	Если ТаблицаНабора.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаНабора.Добавить();
	СтрокаТаблицы.Участник = Участник;
	СтрокаТаблицы.Изменение = Изменение;
	
КонецПроцедуры

Процедура ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
	ТаблицаНабора,
	БизнесПроцесс,
	ИмяТабличнойЧасти) Экспорт
	
	Для Каждого ИсполнителиСтрока Из БизнесПроцесс[ИмяТабличнойЧасти] Цикл
		
		Если Не ЗначениеЗаполнено(ИсполнителиСтрока.Исполнитель)
			Или ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("Строка") Тогда
			
			Продолжить;
		КонецЕсли;
		
		УсловиеУчастника = Новый Структура("Условие", Неопределено);
		ЗаполнитьЗначенияСвойств(УсловиеУчастника, ИсполнителиСтрока);
		Если ЗначениеЗаполнено(УсловиеУчастника.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, ИсполнителиСтрока.Исполнитель);
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный исполнитель.'; en = 'Incorrect performer.'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРабочуюГруппуДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Документ);
	
КонецФункции

// Добавляет участника рабочей группы на форму шаблона.
//
Процедура ФормаШаблонаДобавитьУчастника(
	Форма,
	РабочаяГруппаТаблица,
	Участник)
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Если РабочаяГруппаТаблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = РабочаяГруппаТаблица.Добавить();
	СтрокаТаблицы.Участник = Участник;
	УстановитьРеквизитыУсловногоОформления(СтрокаТаблицы);
	
КонецПроцедуры

// Добавляет участника рабочей группы на форму документа, исключая дубликаты.
// 
// Параметры:
//   Форма - УправляемаяФорма - форма документа.
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка с данными участника.
//
Процедура ФормаДокументаДобавитьУчастника(Форма, СтрокаУчастника)
	
	Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", СтрокаУчастника.Участник);
	Отбор.Вставить("Изменение", СтрокаУчастника.Изменение);
	Если Форма.РабочаяГруппаТаблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.РабочаяГруппаТаблица.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаУчастника);
	УстановитьРеквизитыУсловногоОформления(СтрокаТаблицы);
	
КонецПроцедуры

// Добавляет участников рабочей группы на форму документа.
// 
// Параметры:
//   Форма - УправляемаяФорма - форма документа.
//   РабочаяГруппаТаблица - ТаблицаЗначений - таблица с данными участников.
//
Процедура ФормаДокументаДобавитьУчастников(Форма, РабочаяГруппаТаблица) Экспорт
	
	Для каждого РабочаяГруппаТаблицаСтрока Из РабочаяГруппаТаблица Цикл
		ФормаДокументаДобавитьУчастника(Форма, РабочаяГруппаТаблицаСтрока);
	КонецЦикла;
	
	Форма.КоличествоУчастниковРабочейГруппы = Форма.РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Обработка настройки рабочей группы при создания формы документа
// Вызывается из процедур документов ПриСозданииНаСервере
//
Процедура ДокументПриСозданииНаСервере(Форма) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		
		Если Форма.Элементы.Найти("ГруппаРабочаяГруппа") <> Неопределено Тогда 
			Форма.Элементы.ГруппаРабочаяГруппа.Видимость = Ложь;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы)
			Или ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы) Тогда
			Если Форма.Элементы.Найти("РабочаяГруппаДокумента") <> Неопределено Тогда
				Форма.Элементы.РабочаяГруппаДокумента.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	Если Не ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы)
		И Не ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы) Тогда 
		ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма);
		ДокументПриИзмененииВидаДокумента(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы
// Устанавливает параметры спика рабочей группы,
// устанавливает реквизит формы КоличествоУчастниковРабочейГруппы
// устанавливает условное оформление списка рабочей группы
// Вызывается из процедур документов ПриЧтенииНаСервере
//
Процедура ДокументПриЧтенииНаСервере(Форма) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		ОбновитьДополнительныеРеквизитыУчастников(Форма.ШаблонДокумента.РабочаяГруппаДокумента);
		СсылкаНаОбъект = Форма.ШаблонДокумента.Ссылка;
	Иначе 
		Если ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы) Тогда
			ОбновитьДополнительныеРеквизитыУчастников(Форма.Объект.РабочаяГруппаДокумента);
		КонецЕсли;
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	Форма.РабочаяГруппаТаблица.Очистить();
	ФормаДокументаДобавитьУчастников(Форма, ПолучитьРабочуюГруппуДокумента(СсылкаНаОбъект));
	Форма.РабочаяГруппаТаблица.Сортировать("Иконка, ЭтоРоль Убыв, Участник");
	Форма.Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Форма.Объект) Тогда
		ОтобразитьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы
Процедура ОбъектПередЗаписьюНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		СсылкаНаОбъект = Форма.ШаблонДокумента.Ссылка;
	Иначе 
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СсылкаНаОбъект) Тогда
			Если ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(СсылкаНаОбъект) Тогда
				
				// Для не новых документов добавляем новых участников по документу.
				ПредыдущиеУчастники = ПолучитьПустуюТаблицуУчастников();
				ДобавитьУчастниковИзИсточника(ПредыдущиеУчастники, СсылкаНаОбъект);
				
				ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
				ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Форма.Объект);
				
				Отбор = Новый Структура(
					"Участник, Изменение");
				УдаляемыеСтроки = Новый Массив;
				Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
					ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
					НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
					КонецЕсли;
				КонецЦикла;
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					ТаблицаУчастников.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				ЗаполнитьКолонкуИзменениеПоСтандартнымПравам(СсылкаНаОбъект, ТаблицаУчастников);
				ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
				
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗаписи.Вставить("ЭтоНовый", Ложь);
	Иначе
		ПараметрыЗаписи.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппа", Форма.РабочаяГруппаТаблица.Выгрузить());
	
КонецПроцедуры

// Обработчик события формы
Процедура ОбъектПослеЗаписиНаСервере(Форма, ПараметрыЗаписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		СсылкаНаОбъект = Форма.ШаблонДокумента.Ссылка;
	Иначе 
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаНаОбъект);
	Форма.ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = Форма.ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	ДокументПриЧтенииНаСервере(Форма);
	
КонецПроцедуры

// Обработчик события формы
Процедура ДокументПриИзмененииВидаДокумента(Форма) Экспорт
	
	ОтобразитьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма);
	ОбеспечитьУсловиеОбязательногоЗаполненияРабочейГруппы(Форма);
	
КонецПроцедуры

// Обработчик события формы ОбработкаВыбора шаблона документа
//
Процедура ШаблонОбработкаВыбора(Форма, ВыбранноеЗначение, РабочаяГруппаТаблица, РабочаяГруппаЭлемент) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение.РольИсполнителя;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		РабочаяГруппаТаблица.Очистить();
		Для каждого РабочаяГруппаСтрока Из ВыбранноеЗначение Цикл
			ФормаШаблонаДобавитьУчастника(
				Форма,
				РабочаяГруппаТаблица,
				РабочаяГруппаСтрока.Исполнитель);
		КонецЦикла;
		Форма.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение[0].Значение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		Для Индекс = 1 по ВыбранноеЗначение.Количество() - 1 Цикл
			ФормаШаблонаДобавитьУчастника(
				Форма,
				РабочаяГруппаТаблица,
				ВыбранноеЗначение[Индекс].Значение);
			Форма.Модифицированность = Истина;
		КонецЦикла;	
	Иначе
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы шаблона документа ПриСозданииНаСервере
//
Процедура ШаблонПриСозданииНаСервере(Форма) Экспорт
	
	ШаблонУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление списка рабочей группы в форме шаблона документа
//
Процедура ШаблонУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма)
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		ПолеЭтоРоль = Новый ПолеКомпоновкиДанных("ШаблонДокумента.РабочаяГруппаДокумента.ЭтоРоль");
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("ШаблонДокумента.РабочаяГруппаДокумента.ПометкаУдаления");
		ПолеНедействителен = Новый ПолеКомпоновкиДанных("ШаблонДокумента.РабочаяГруппаДокумента.Недействителен");
		ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РабочаяГруппаДокументаУчастник");
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы) Тогда 
		ПолеЭтоРоль = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппаДокумента.ЭтоРоль");
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппаДокумента.ПометкаУдаления");
		ПолеНедействителен = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппаДокумента.Недействителен");
		ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РабочаяГруппаДокументаУчастник");
	Иначе
		ПолеЭтоРоль = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ЭтоРоль");
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ПометкаУдаления");
		ПолеНедействителен = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.Недействителен");
		ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	КонецЕсли;
	
	// Роль.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = ПолеЭтоРоль;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = ОформляемоеПоле;
	
	// Пометка удаления.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныйОбъектЦвет);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = ПолеПометкаУдаления;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = ОформляемоеПоле;
	
	// Недействительность.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = ПолеНедействителен;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = ОформляемоеПоле;
	
КонецПроцедуры

// Устанавливает условное оформление списка рабочей группы в форме документа
//
Процедура ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма) Экспорт
	
	// Роль.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ЭтоРоль");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
	// Пометка удаления.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныйОбъектЦвет);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ПометкаУдаления");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
	// Недействительность.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.Недействителен");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
КонецПроцедуры

// Обновляет дополнительные реквизиты участников, отсутствующие в данных объекта.
//
// Параметры:
//   РабочаяГруппа - ДанныеФормыКоллекция - обновляемая рабочая группа, должна
//     содержать свойства Участник, ПометкаУдаления, Недействителен.
//
Процедура ОбновитьДополнительныеРеквизитыУчастников(РабочаяГруппа)
	
	Если РабочаяГруппа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчастникиПользователи = Новый Массив;
	УчастникиРабочиеГруппы = Новый Массив;
	УчастникиПолныеРоли = Новый Массив;
	УчастникиСтруктураПредприятия = Новый Массив;
	Для Каждого Строка Из РабочаяГруппа Цикл
		Строка.ПометкаУдаления = Ложь;
		Строка.Недействителен = Ложь;
		Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			УчастникиПользователи.Добавить(Строка.Участник);
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			УчастникиРабочиеГруппы.Добавить(Строка.Участник);
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			УчастникиПолныеРоли.Добавить(Строка.Участник);
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			УчастникиСтруктураПредприятия.Добавить(Строка.Участник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	Участники.Недействителен КАК Недействителен
		|ИЗ
		|	Справочник.Пользователи КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&Пользователи)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	Участники.Недействительна КАК Недействителен
		|ИЗ
		|	Справочник.РабочиеГруппы КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&РабочиеГруппы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	ЛОЖЬ КАК Недействителен
		|ИЗ
		|	Справочник.ПолныеРоли КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&ПолныеРоли)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	ЛОЖЬ КАК Недействителен
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&СтруктураПредприятия)
		|");
	Запрос.УстановитьПараметр("Пользователи", УчастникиПользователи);
	Запрос.УстановитьПараметр("РабочиеГруппы", УчастникиРабочиеГруппы);
	Запрос.УстановитьПараметр("ПолныеРоли", УчастникиПолныеРоли);
	Запрос.УстановитьПараметр("СтруктураПредприятия", УчастникиСтруктураПредприятия);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из РабочаяГруппа Цикл
		СтрокаРезультат = Результат.Найти(Строка.Участник);
		Если СтрокаРезультат <> Неопределено Тогда
			Строка.ПометкаУдаления = СтрокаРезультат.ПометкаУдаления;
			Строка.Недействителен = СтрокаРезультат.Недействителен;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в строке реквизиты, необходимые для условного оформления
//
Процедура УстановитьРеквизитыУсловногоОформления(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЭтоРоль = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Если ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ТекущиеДанные.Иконка = 1;
			ТекущиеДанные.ЭтоРоль = Истина;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			ТекущиеДанные.Иконка = 3;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("Строка") Тогда
			ТекущиеДанные.Иконка = 4;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников из шаблона в таблицу.
//
Процедура ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма)
	
	ШаблонДокумента = Форма.Объект.Шаблон;
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РабочаяГруппаСтрока Из ШаблонДокумента.РабочаяГруппаДокумента Цикл
		
		Если Не ЗначениеЗаполнено(РабочаяГруппаСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("Строка") Тогда
			
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				РабочаяГруппаСтрока.Участник,
				Форма.Объект);
				
			Если ЗначениеАвтоподстановки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.РабочиеГруппы")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.СтруктураПредприятия")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
					ЗначениеАвтоподстановки,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
				
				ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
					ЗначениеАвтоподстановки.РольИсполнителя,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда 
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					
					Если ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.Пользователи")
					 Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.РабочиеГруппы")
					 Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.СтруктураПредприятия")
					 Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
						
						ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент,
							РабочаяГруппаСтрока.Изменение);
						
					ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура") Тогда 
						
						ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
							ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
							РабочаяГруппаСтрока.Изменение);
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'; en = 'Auto-substitution function returned an incorrect value of working group member.'");
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'; en = 'Auto-substitution function returned an incorrect value of working group member.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.Пользователи")
			  Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			  Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			
			ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение);
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			ДобавитьУчастникаВТаблицуНабора(
				ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'В шаблоне некорректно задан участник рабочей группы.'; en = 'Working group member is specified incorrectly in the template.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа из шаблона
//
Процедура ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(Форма) Экспорт
	
	ШаблонДокумента = Форма.Объект.Шаблон;
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем таблицу участников рабочей группы с учетом автоподстановок
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма);
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	
КонецПроцедуры

// Возвращает признак автоматического заполнения состава участников рабочей группы
// Параметры:
// Объект - ссылка или объект справочника ВнутренниеДокументы, ВходящиеДокументы, ИсходящиеДокументы
// 
Функция ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Владелец.ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|Владелец.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И РеквизитыОбъекта.ВладелецВидПроектаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ВладелецЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
			
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ПроектныеЗадачи") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Владелец,
			"ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И РеквизитыОбъекта.ВидПроектаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ЭтоГруппа,
			|ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И Не РеквизитыОбъекта.ЭтоГруппа
			И РеквизитыОбъекта.ВидПроектаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидПроекта, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
			
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И Не Объект.ЭтоГруппа
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ЭтоГруппа,
			|ВидМероприятия.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат Не РеквизитыОбъекта.ЭтоГруппа
			И РеквизитыОбъекта.ВидМероприятияАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Мероприятия") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидМероприятия, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
			
		Возврат Не Объект.ЭтоГруппа
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов")
			И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
			
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВходящиеДокументы") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидДокумента, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов")
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
			И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
			
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидДокумента, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов")
			И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидДокумента, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов")
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом {
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Объект) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект,
				"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы");
			
			Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
				И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина;
		Иначе
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.ВидДокумента,
				"АвтоматическиВестиСоставУчастниковРабочейГруппы");
			
			Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
				И РеквизитыОбъекта.АвтоматическиВестиСоставУчастниковРабочейГруппы = Истина;
		КонецЕсли;
		
	// ТСК Талько Э.Г.; 09.06.2018; Управление доступом }
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак "Необходимо отобразить на форме флаг запрета автоматического
// добавления участников рабочей группы"
// Параметрыы:
// Документ (СправочникСсылка.ВходящиеДокументы, СправочникОбъект.ВходящиеДокументы,
// СправочникСсылка.ВнутренниеДокументы, СправочникОбъект.ВнутренниеДокументы,
// СправочникСсылка.ИсходящиеДокументы, СправочникОбъект.ИсходящиеДокументы)
//
Функция ОтображатьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Документ)
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда 
		Возврат Документ.ВидМероприятия.АвтоматическиВестиСоставУчастниковРабочейГруппы;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Документ.ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыДокументов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документ.ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы;
	
КонецФункции

// Возвращает настройку ОбязательноеЗаполнениеРабочихГруппДокументов
//
Функция ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		Возврат ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыПроектов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда
			Возврат Ложь;
		КонецЕсли;	
		Возврат ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов") Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов;
	
КонецФункции

// Отображает в карточке документа или флаг запрета автоматического добавления участников
// рабочей группы или информационную надпись, в зависимости от настройки вида документа
//
Процедура ОтобразитьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма) Экспорт
	
	ОтображатьФлаг = ОтображатьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма.Объект);
	Форма.Элементы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы.Видимость = ОтображатьФлаг;
	
КонецПроцедуры

// При необходимости добавляет в рабочую группу документа ТекущегоПользователя
// Только для новых документов
//
Процедура ОбеспечитьУсловиеОбязательногоЗаполненияРабочейГруппы(Форма)
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Форма.Объект.ВидМероприятия) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Форма.Объект.ВидПроекта) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Форма.Объект.ВидДокумента) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.РабочаяГруппаТаблица.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Участник = ПараметрыСеанса.ТекущийПользователь;
	РабочаяГруппаТаблицаСтрока = Форма.РабочаяГруппаТаблица.Добавить();
	РабочаяГруппаТаблицаСтрока.Участник = Участник;
	РабочаяГруппаТаблицаСтрока.Изменение = Истина;
	УстановитьРеквизитыУсловногоОформления(РабочаяГруппаТаблицаСтрока);
	Форма.КоличествоУчастниковРабочейГруппы = Форма.РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры

// Возвращает пустую таблицу участников рабочей группы
Функция ПолучитьПустуюТаблицуУчастников() Экспорт
	
	Возврат РегистрыСведений.РабочиеГруппы.ПолучитьПустуюТаблицуУчастников();
	
КонецФункции

Процедура ПроверитьПраваПередЗаписьюРабочейГруппы(Ссылка, Участники, АвторИзменений) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(Ссылка);
	ТипыОбъектовИспользующихДескрипторы =
		ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующихДоступПоДескрипторам();
	
	Если ТипыОбъектовИспользующихДескрипторы.Найти(ТипСсылки) = Неопределено
		Или ТипСсылки = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		Возврат;
	КонецЕсли;
	
	//// Проверка прав автора изменений на изменение объекта.
	//Если ТипЗнч(АвторИзменений) = Тип("СправочникСсылка.Пользователи") Тогда
	//	
	//	ПраваАвтора = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Ссылка, АвторИзменений);
	//	Если Не ПраваАвтора.Изменение Тогда
	//		
	//		ТекстОшибки = СтрШаблон(
	//			НСтр("ru = 'Пользователь %1 не имеет права на изменение объекта.
	//				|Изменение рабочей группы запрещено.';
	//				|en = 'User %1 have no permission to change the object.
	//				|Changing of the working group is forbidden.'"),
	//			АвторИзменений);
	//		
	//		ВызватьИсключение ТекстОшибки;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	// Проверка на то, что рабочая группа не выходит за рамки общих настроек доступа.
	Если Константы.ПроверятьСоответствиеРабочихГруппОбщимНастройкам.Получить() Тогда
		
		// Отбор контейнеров, в которых есть пользователи.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиВКонтейнерах.Контейнер
			|ИЗ
			|	РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
			|ГДЕ
			|	ПользователиВКонтейнерах.Контейнер В (&ВсеКонтейнерыДляПроверки)");
			
		Запрос.УстановитьПараметр("ВсеКонтейнерыДляПроверки", Участники.ВыгрузитьКолонку("Участник"));
		КонтейнерыСПользователями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
		
		// Получение прав.
		СтандартныеПрава =
			РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.ПолучитьСтандартныеПраваКонтейнеровПоОбъекту(
				Ссылка, КонтейнерыСПользователями);
		
		// Если стандратные права не используются, проверка не нужна.
		Если СтандартныеПрава <> Неопределено Тогда
			Для Каждого СтрУчастика Из Участники Цикл
				
				Если КонтейнерыСПользователями.Найти(СтрУчастика.Участник) = Неопределено Тогда
					// Права пустых контейнеров проверять не нужно.
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока = СтандартныеПрава.Найти(СтрУчастика.Участник, "Контейнер");
				Если НайденнаяСтрока = Неопределено
					Или Не НайденнаяСтрока.Чтение
					Или НайденнаяСтрока.Изменение < СтрУчастика.Изменение Тогда
					
					Если ТипЗнч(СтрУчастика.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
						ТекстИсключения = НСтр("ru = 'Нарушение общих настроек доступа при расширении рабочей группы.
							|Пользователю %1 нельзя назначить доступ ""%2"".';
							|en = 'Breach of the general access settings when extending the working group.
							|User %1 cannot obtain access to ""%2"".'");
					Иначе
						ТекстИсключения = НСтр("ru = 'Нарушение общих настроек доступа при расширении рабочей группы.
							|Не всем пользователям ""%1"" можно назначить доступ ""%2"".';
							|en = 'Breach of the general access settings when extending the working group.
							|Not all users ""%1"" can obtain access to ""%2"".'");
					КонецЕсли;
					
					ПояснениеПроОбщиеНастройки = НСтр("ru = 'Проверьте политики доступа'; en = 'Check access policies'");
					Если Ссылка.Метаданные().Реквизиты.Найти("Папка") <> Неопределено Тогда
						ПояснениеПроОбщиеНастройки = ПояснениеПроОбщиеНастройки
							+ " " + НСтр("ru = 'и настройки прав папки'; en = 'and permissions for folder'");
					КонецЕсли;
					
					Право = ?(СтрУчастика.Изменение, "Изменение", "Чтение");
					ПолныйТекстИсключения = СтрШаблон(ТекстИсключения, СтрУчастика.Участник, Право)
						+ Символы.ПС + ПояснениеПроОбщиеНастройки + ".";
					
					ВызватьИсключение ПолныйТекстИсключения;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонку "Изменение" переданной таблицы участников рабочей группы.
//
Процедура ЗаполнитьКолонкуИзменениеПоСтандартнымПравам(Ссылка, Знач Участники) Экспорт
	
	ВсеКонтейнеры = Участники.ВыгрузитьКолонку("Участник");
	ВсеКонтейнеры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеКонтейнеры);
	
	СтандартныеПрава = 
		РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.ПолучитьСтандартныеПраваКонтейнеровПоОбъекту(
			Ссылка, ВсеКонтейнеры);
	
	Если СтандартныеПрава = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПрав Из СтандартныеПрава Цикл
		
		Если СтрокаПрав.Изменение Тогда
			СтрокиРГ = Участники.НайтиСтроки(Новый Структура("Участник", СтрокаПрав.Контейнер));
			Для Каждого СтрокаРГ Из СтрокиРГ Цикл
				СтрокаРГ.Изменение = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ

// Обработчик подписки РабочиеГруппыБизнесПроцессыПередЗаписью
//
Процедура РабочиеГруппыБизнесПроцессыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <>
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоНовый = Источник.ЭтоНовый();
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	
	СтартПроцесса = Ложь;
	Если Не ЭтоНовый Тогда
		СтартПроцесса = Не ОбщегоНазначенияДокументооборот.
			ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Источник.Ссылка, "Стартован")
			И Источник.Стартован;
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СтартПроцесса", СтартПроцесса);
	
	Если Не ЭтоНовый Тогда
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ПредыдущиеПредметы = Мультипредметность.ПолучитьПредметыПроцесса(Источник.Ссылка);
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
			ПредыдущийПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Проект");
			Если Источник.Проект <> ПредыдущийПроект Тогда
				Если ЗначениеЗаполнено(ПредыдущийПроект) Тогда
					Источник.ДополнительныеСвойства.Вставить("ПредыдущийПроект", ПредыдущийПроект);
				КонецЕсли;
			Иначе 
				// Формирование списка старых участников рабочей группы 
				ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
				Источник.ДополнительныеСвойства.Вставить("ПредыдущиеУчастники", ТаблицаУчастников);	
			КонецЕсли;
		КонецЕсли;
		
		Если Мультипредметность.ИзмененыПредметыПроцесса(Источник) Тогда
			Источник.ДополнительныеСвойства.Вставить("ПредыдущиеПредметы", ПредыдущиеПредметы);
		Иначе
			// Формирование списка старых участников рабочей группы 
			ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
			Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеУчастники") Тогда
				Источник.ДополнительныеСвойства.ПредыдущиеУчастники = ТаблицаУчастников;
			Иначе
				Источник.ДополнительныеСвойства.Вставить("ПредыдущиеУчастники", ТаблицаУчастников);
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыБизнесПроцессыПриЗаписи
//
Процедура РабочиеГруппыБизнесПроцессыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <>
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Источник);
	
	// Для нового бизнес-процесса в рабочую группу добавляем всех участников бизнес-процесса
	Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		// Обновление прав всех ведущих и главных процессов
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		ОбновитьРабочиеГруппыРодительскихПроцессов(Источник.Ссылка, ТаблицаУчастников);
		
	ИначеЕсли Источник.ДополнительныеСвойства.СтартПроцесса Тогда
		
		Для Каждого Предмет Из Предметы Цикл 
			
			Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Предмет) Тогда
				// если предмет - проектная задача, то заполняется рабочая группа ее проекта
				ПредметДляОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец");
			Иначе
				ПредметДляОбработки = Предмет;
			КонецЕсли;
			
			Попытка
				ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
					ПредметДляОбработки, Источник.Ссылка,, Истина);
			Исключение
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(ПредметДляОбработки);
			КонецПопытки;
			
		КонецЦикла;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
			И ЗначениеЗаполнено(Источник.Проект) Тогда
			
			Попытка
				ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Проект, Источник.Ссылка,, Истина);
			Исключение
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(Источник.Проект);
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		ПредыдущиеПредметы = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеПредметы") Тогда
			ПредыдущиеПредметы = Источник.ДополнительныеСвойства.ПредыдущиеПредметы;
		КонецЕсли;
		
		ПредыдущийПроект = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущийПроект") Тогда
			ПредыдущийПроект = Источник.ДополнительныеСвойства.ПредыдущийПроект;
		КонецЕсли;

		// Формирование списка отличий старой рабочей группы от новой.
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеУчастники") Тогда
			ПредыдущиеУчастники = Источник.ДополнительныеСвойства.ПредыдущиеУчастники;
			Отбор = Новый Структура("Участник");
			УдаляемыеСтроки = Новый Массив;
			Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
				НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
				КонецЕсли;
			КонецЦикла;
			Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ТаблицаУчастников.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение рабочих групп, если у процесса изменился предмет или проект
					
		// Если предмет изменился, в рабочую группу добавляем всех участников бизнес-процесса.
		Если Предметы.Количество() > 0 И ПредыдущиеПредметы <> Неопределено Тогда
			Для Каждого Предмет Из Предметы Цикл 
				
				Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Предмет) Тогда
					// Если предмет - проектная задача, то заполняется рабочая группа ее проекта
					ПредметДляОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец");
				Иначе
					ПредметДляОбработки = Предмет;
				КонецЕсли;
				
				Попытка
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
						ПредметДляОбработки, Источник.Ссылка,, Истина);
				Исключение
					ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(ПредметДляОбработки);
				КонецПопытки;
				
			КонецЦикла;
			
		Иначе // предмет не изменился
			Для Каждого Предмет Из Предметы Цикл 
				Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Предмет) Тогда
					// Если предмет - проектная задача, то заполняется рабочая группа ее проекта
					ПредметДляОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец");
				Иначе
					ПредметДляОбработки = Предмет;
				КонецЕсли;
				
				Попытка
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
						ПредметДляОбработки, ТаблицаУчастников,, Истина);
				Исключение
					ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(ПредметДляОбработки);
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
		
		// Если проект изменился, в рабочую группу добавляем всех участников бизнес-процесса.
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И ЗначениеЗаполнено(Источник.Проект) Тогда
			
			Попытка
				Если ПредыдущийПроект <> Источник.Проект Тогда
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Проект, Источник.Ссылка,, Истина);
				Иначе // проект не изменился
					ДобавитьУчастниковВРабочуюГруппуОбъекта(Источник.Проект, ТаблицаУчастников,, Истина);
				КонецЕсли;
			Исключение
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(Источник.Проект);
			КонецПопытки;
			
		КонецЕсли;
		
		// Обновление прав всех ведущих и главных процессов
		ОбновитьРабочиеГруппыРодительскихПроцессов(Источник.Ссылка, ТаблицаУчастников);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление рабочих групп всех родительских процессов
Процедура ОбновитьРабочиеГруппыРодительскихПроцессов(Процесс, ТаблицаУчастников) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс)
		Или Не ЗначениеЗаполнено(ТаблицаУчастников) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление ведущего процесса
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "ВедущаяЗадача");
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		РодительскийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		Если ЗначениеЗаполнено(РодительскийПроцесс) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(РодительскийПроцесс);
			ТаблицаНабора.Индексы.Добавить("Участник");
			
			СтруктураПоиска = Новый Структура("Участник");
			ЕстьДобавленныеСтроки = Ложь;
			
			Для Каждого УчастникиСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, УчастникиСтрока);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьДобавленныеСтроки = Истина;
					ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				
				ПерезаписатьРабочуюГруппуОбъекта(
					РодительскийПроцесс, 
					ТаблицаНабора, 
					Ложь); // Обновить права
					
				// Рекурсивный вызов	
				ОбновитьРабочиеГруппыРодительскихПроцессов(РодительскийПроцесс, ТаблицаУчастников);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// Обновление главного процесса
	Если ЗначениеЗаполнено(Процесс.ГлавнаяЗадача) Тогда
		РодительскийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс.ГлавнаяЗадача, "БизнесПроцесс");
		Если ЗначениеЗаполнено(РодительскийПроцесс) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(РодительскийПроцесс);
			ТаблицаНабора.Индексы.Добавить("Участник");
			
			СтруктураПоиска = Новый Структура("Участник");
			ЕстьДобавленныеСтроки = Ложь;
			
			Для каждого УчастникиСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, УчастникиСтрока);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьДобавленныеСтроки = Истина;
					ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				
				ПерезаписатьРабочуюГруппуОбъекта(
					РодительскийПроцесс, 
					ТаблицаНабора, 
					Ложь); // Обновить права
				
				// Рекурсивный вызов
				ОбновитьРабочиеГруппыРодительскихПроцессов(РодительскийПроцесс, ТаблицаУчастников);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчие подписки РабочиеГруппыВидыДокументовПередЗаписью
//
Процедура РабочиеГруппыВидыДокументовПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ОбязательноеЗаполнениеРабочихГруппДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Источник.Ссылка,
		"ОбязательноеЗаполнениеРабочихГруппДокументов");
	Если ПредыдущееЗначение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаполнитьРабочиеГруппы", Истина);
	
КонецПроцедуры

// Обработка подписки РабочиеГруппыВидыДокументовПриЗаписи
//
Процедура РабочиеГруппыВидыДокументовПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗаполнитьРабочиеГруппы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.ЗаполнитьРабочиеГруппы Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВидДокументаПриУстановкеОбязательногоЗаполненияРабочихГруппДокументов(Источник.Ссылка);
	Исключение
		Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ
Процедура ВидДокументаПриУстановкеОбязательногоЗаполненияРабочихГруппДокументов(ВидДокумента)
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вид документа.'; en = 'Incorrect document type.'");
	КонецЕсли;
	
	ТекстЗапросаДокументы =
		"ВЫБРАТЬ
		|	Документы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.[Вид] КАК Документы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|	ПО Документы.Ссылка = РабочиеГруппы.Объект
		|ГДЕ
		|	РабочиеГруппы.Объект ЕСТЬ NULL
		|	И Документы.[ИмяРеквизитаВид] = &ВидДокумента";
		
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "ВнутренниеДокументы");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидДокумента");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "ВходящиеДокументы");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидДокумента");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "ИсходящиеДокументы");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидДокумента");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "Мероприятия");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидМероприятия");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыПроектов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "Проекты");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидПроекта");		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид документа.'; en = 'Incorrect document type.'");
	КонецЕсли;
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапросаДокументы);
		Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПерезаполнитьРабочуюГруппуДокумента(Выборка.Ссылка, Истина);
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


