
#Область ПрограммныйИнтерфейс

// Выводит диалог выбора варианта редактирования маршрута комплексного процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//  ОповещениеПослеВыбора - ОписаниеОповещения - описание оповещения, которое будет
//                          вызвано после выбора варианта редактирования маршрута.
//
Процедура ВыбратьВариантРедактированияМаршрута(Форма, ОповещениеПослеВыбора) Экспорт
	
	// В веб клиенте отключаем возможность выбора варианта настройки, т.к.
	// часть полей элементов графической схемы не доступно.
	// По умолчанию новые комплексные процессы и шаблоны настраиваются
	// при помощи таблицы действий.
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка)
		Или Форма.ИспользоватьСхемуПроцесса
		Или Форма.Объект.Этапы.Количество() > 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	ПараметрыОповещения.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьВыборВариантРедактированияМаршрута", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.ВыборВариантаНастройкиКомплексногоПроцесса",,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение процедуры ВыбратьВариантРедактированияМаршрута.
//
Процедура ЗавершитьВыборВариантРедактированияМаршрута(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОповещениеПослеВыбора = ДополнительныеПараметры.ОповещениеПослеВыбора;
	
	Если Результат = Неопределено Тогда
		Форма.Закрыть();
	ИначеЕсли Результат <> "Схема" Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьСхемуПроцесса = Истина;
	
	ИнициализироватьСхемуПроцесса(Форма);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастроитьЭлементыРедактированияМаршрута(Форма);
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеВыбора);
	
КонецПроцедуры

// Выполняет запись нового шаблона (служебного шаблона) комплексного процесса
// перед интерактивным добавлением подчиненных действий.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка шаблона комплексного процесса..
//
// Возвращаемое значение:
//  Булево - возвращает Ложь, если в ходе записи возникли ошибки, иначе - Истина.
//
Функция ЗаписатьНовыйШаблонПередДобавлениемДействия(Форма) Экспорт
	
	// Отключаем проверку заполнения при первой записи шаблона, т.к. при интерактивном добавлении он
	// еще не сохранен в вышестоящем владельце, и если в заполнении текущего шаблона есть ошибки,
	// то будет невозможно сохранить его владельца.
	// Это сделано для того, чтобы была возможность добавить действие в новый шаблон.
	// Для добавления действия требуется записанный в базу владелец.
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("НеПроверятьЗаполнение", Истина);
	Возврат Форма.Записать(ПараметрыЗаписи);
	
КонецФункции

// Выполняет запись нового комплексного процесса перед интерактивным добавлением
// подчиненных действий.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса.
//
// Возвращаемое значение:
//  Булево - возвращает Ложь, если в ходе записи возникли ошибки, иначе - Истина.
//
Функция ЗаписатьНовыйПроцессПередДобавлениемДействия(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Форма.Записать();
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_СхемаПроцесса

// Выполняет инициализацию схемы в карточке процесса/шаблона.
// Предназначено для вызова из обработчика ПриОткрытии.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//
Процедура ИнициализироватьСхемуПроцесса(Форма) Экспорт
	
	Если Не Форма.ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	// Не выполняем инициализацию схемы в веб клиенте, т.к.
	// часть полей элементов графической схемы не доступно.
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшНаименованийСоединительныхЛиний(Форма);
	
	// Если процесс/шаблон не записан и схема пуста, заполняем ее по умолчанию.
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И Форма.Схема.ЭлементыГрафическойСхемы.Количество() = 0 Тогда
		
		Форма.Схема = 
			РаботаСКомплекснымиБизнесПроцессамиВызовСервера.ГрафическаяСхемаПроцессаПоУмолчанию();
		
		ОбновитьДанныеСхемыКомплексногоПроцесса(Форма);
		
		Форма.ИзмененаСхемаПроцесса = Истина;
		Форма.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные схемы в процессе.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура ОбновитьДанныеСхемыКомплексногоПроцесса(Форма) Экспорт
	
	// Не обновляем данные схемы в веб клиенте, т.к. недоступны некоторые свойства.
	// Данная проверка добавлена на случай, если пользователю все же удастся изменить схему.
	// По умолчанию схема на веб клиенте должна быть доступна только для просмотра.
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДобавленныхЭлементов = ОбработатьДобавлениеНовыхЭлементовВСхемуПроцесса(Форма);
	РезультатУдаления = ОбработатьУдалениеЭлементовИзСхемы(Форма);
	
	ПоказатьТочныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
	
	ПоказатьОтносительныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);
	
	ПроцессыДляПревания = Новый СписокЗначений;
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		ПроцессыДляПревания = Форма.ПроцессыСхемыДляПрерывания;
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставленияДействийВСхемеПроцесса(
		Форма.Схема,
		Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
		Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
		Форма.КэшДанныхДействий,
		Форма.ИспользоватьВремяВСрокахЗадач,
		ПоказатьТочныеСроки,
		ПоказатьОтносительныеСроки,
		ПроцессыДляПревания);
	
	ВосстановитьНаименованияСоединительныхЛиний(Форма);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьСвязиЭлементовСхемыПроцесса(
		Форма.СхемаКомплексногоПроцесса, Форма.Схема);
	
	// Если был добавлен только один элемент, и он является действием/вложенным процессом
	// или обработкой, то запускаем настройку элемента.
	Если КоличествоДобавленныхЭлементов = 1 И РезультатУдаления.КоличествоУдаленныхЭлементов = 0
		И Форма.Элементы.Схема.ТекущийЭлемент <> Неопределено Тогда
		
		ТипЭлемента = ТипЗнч(Форма.Элементы.Схема.ТекущийЭлемент);
		
		Если ТипЭлемента = Тип("ЭлементГрафическойСхемыДействие")
			Или ТипЭлемента = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
			
			НетНастроек = Ложь;
			Для Каждого ПараметрыДействия Из Форма.СхемаКомплексногоПроцесса.ПараметрыДействий Цикл
				
				Если ПараметрыДействия.Имя <> Форма.Элементы.Схема.ТекущийЭлемент.Имя Тогда
					Продолжить;
				КонецЕсли;
				
				НетНастроек = (Не ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса)
					И Не ЗначениеЗаполнено(ПараметрыДействия.Процесс));
				
				Прервать;
				
			КонецЦикла;
			
			Если НетНастроек Тогда
				НастроитьЭлементСхемыДействие(Форма);
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыОбработка") Тогда
			
			НетНастроек = Ложь;
			Для Каждого ПараметрыОбработки Из Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок Цикл
				
				Если ПараметрыОбработки.Имя <> Форма.Элементы.Схема.ТекущийЭлемент.Имя Тогда
					Продолжить;
				КонецЕсли;
				
				НетНастроек = Не ЗначениеЗаполнено(ПараметрыОбработки.ИдентификаторСкрипта);
				
				Прервать;
				
			КонецЦикла;
			
			Если НетНастроек Тогда
				НастроитьЭлементСхемыОбработка(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ИзмененаСхемаПроцесса = Истина;
	
	Форма.Модифицированность = Истина;
	
	// Показываем предупреждение о исключенных незавершенных действиях из комплексного процесса.
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		И РезультатУдаления.ИсключенныеДействия.Количество() > 0 Тогда
		
		НеЗавершенныеДействия = Новый СписокЗначений;
		
		Для Каждого ИсключенноеДействие Из РезультатУдаления.ИсключенныеДействия Цикл
			
			ДанныеДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВКэше(
				ИсключенноеДействие, Форма.КэшДанныхДействий);
			
			Если ДанныеДействия.ПроцессЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.ПроцессыСхемыДляПрерывания.НайтиПоЗначению(ИсключенноеДействие) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НеЗавершенныеДействия.Добавить(ИсключенноеДействие);
			
			// Добавляем исключенные незавершенные действия в реквизит формы ИсключенныеДействия.
			Форма.ПроцессыСхемыДляПрерывания.Добавить(ИсключенноеДействие);
			
		КонецЦикла;
		
		Если НеЗавершенныеДействия.Количество() > 0 Тогда
	
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить(
				"ИсключенныеДействия", НеЗавершенныеДействия);
		
			ОткрытьФорму("Справочник.СхемыКомплексныхПроцессов.Форма.ПредупреждениеОПрерыванииДействияСхемы",
				ПараметрыФормы,
				Форма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет имя текущего элемента схемы в карточке процесса
// и помещает его в переменную ИмяТекущегоЭлементаСхемыПроцесса.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура ОпределитьИмяТекущегоЭлементаПриАктивизацииСхемы(Форма) Экспорт
	
	Форма.ИмяТекущегоЭлементаСхемыПроцесса = "";
	Если Форма.Элементы.Схема.ТекущийЭлемент <> Неопределено Тогда
		Форма.ИмяТекущегоЭлементаСхемыПроцесса = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Определяет имя текущего элемента схемы в карточке процесса
// и помещает его в переменную ИмяТекущегоЭлементаСхемыПроцесса.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура ОпределитьИмяТекущегоЭлементаПриИзмененииСхемы(Форма) Экспорт
	
	Если Форма.ИмяТекущегоЭлементаСхемыПроцесса <> ""
		Или Форма.Элементы.Схема.ТекущийЭлемент = Неопределено Тогда
			
		Возврат;
	КонецЕсли;
	
	Форма.ИмяТекущегоЭлементаСхемыПроцесса = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
	
КонецПроцедуры

// Изменяет имя элемента схемы процесса в данных схемы.
// Изменяются таблицы:
//  СхемаКомплексногоПроцесса.ЭлементыСхемы,
//  СхемаКомплексногоПроцесса.ПредшественникиЭлементовСхемы,
//  СхемаКомплексногоПроцесса.ПараметрыДействий,
//  СхемаКомплексногоПроцесса.ПараметрыУсловий,
//  СхемаКомплексногоПроцесса.ПараметрыОбработок
//
// Параметры
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура ИзменитьИмяЭлементаСхемыПроцесса(Форма) Экспорт
	
	Если Форма.Элементы.Схема.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Схема.ТекущийЭлемент.Имя = Форма.ИмяТекущегоЭлементаСхемыПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	ТипЭлементаГрафическойСхемы = ТипЗнч(Форма.Элементы.Схема.ТекущийЭлемент);
	
	Если ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
		
		НаименованиеСоединительнойЛинии = НаименованиеСоединительнойЛинииВКэше(
			Форма, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
		
		ДобавитьНаименованиеСоединительнойЛинииВКэш(
			Форма,
			Форма.Элементы.Схема.ТекущийЭлемент.Имя,
			НаименованиеСоединительнойЛинии);
		
	КонецЕсли;
	
	ТипЭлементаСхемы = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ТипЭлементаСхемы(ТипЭлементаГрафическойСхемы);
	
	Если ТипЭлементаСхемы <> Неопределено Тогда
	
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", Форма.ИмяТекущегоЭлементаСхемыПроцесса);
	
		НайденныеСтроки = Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
		КонецЦикла;
	
		НайденныеСтроки = Форма.СхемаКомплексногоПроцесса.ПредшественникиЭлементовСхемы.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
		КонецЦикла;
	
		Если ТипЭлементаСхемы = ПредопределенноеЗначение(
				"Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Действие")
			
			Или ТипЭлементаСхемы = ПредопределенноеЗначение(
				"Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс") Тогда
		
			НайденныеСтроки = Форма.СхемаКомплексногоПроцесса.ПараметрыДействий.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
			КонецЦикла;
		КонецЕсли;
	
		Если ТипЭлементаСхемы = ПредопределенноеЗначение(
			"Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Условие") Тогда
		
			НайденныеСтроки = Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
			КонецЦикла;
			
			ПереименоватьУсловиеВКэше(
				Форма.КэшНастроекУсловий,
				Форма.ИмяТекущегоЭлементаСхемыПроцесса,
				Форма.Элементы.Схема.ТекущийЭлемент.Имя);
		КонецЕсли;
		
		Если ТипЭлементаСхемы = ПредопределенноеЗначение(
			"Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Обработка") Тогда
		
			НайденныеСтроки = Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
			КонецЦикла;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПредшественника", Форма.ИмяТекущегоЭлементаСхемыПроцесса);
		
		НайденныеСтроки = Форма.СхемаКомплексногоПроцесса.ПредшественникиЭлементовСхемы.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ИмяПредшественника = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ИмяТекущегоЭлементаСхемыПроцесса = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
	
КонецПроцедуры

// Открывает интерфейс настройки текущего элемента.
//
// Параметры
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//  ОписаниеОповещениеПослеНастройки - ОписаниеОповещение - Описание оповещения которое будет выполнено после настройки.
//                                     Если не указано, то ничего не выполняется.
//
Процедура НастроитьЭлементСхемы(Форма, ОписаниеОповещениеПослеНастройки = Неопределено) Экспорт
	
	Если Форма.Элементы.Схема.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(Форма.Элементы.Схема.ТекущийЭлемент);
	
	Если ТипЭлемента = Тип("ЭлементГрафическойСхемыДействие")
		Или ТипЭлемента = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
		
		НастроитьЭлементСхемыДействие(Форма);
		
	ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыУсловие") Тогда
		
		НастроитьЭлементСхемыУсловие(Форма, ОписаниеОповещениеПослеНастройки);
		
	ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыОбработка") Тогда
		
		НастроитьЭлементСхемыОбработка(Форма, ОписаниеОповещениеПослеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Действия

// Открывает карточку процесса действия.
//
// Параметры:
//  Форма - Карточка комплексного процесса процесса.
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс действия.
//  ЭлементПройден - Булево - Признак пройденного элемента.
//
Процедура ОткрытьПроцессДействия(Форма, Процесс, ЭлементПройден = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Процесс);
	
	Если Не ЭлементПройден Тогда
		ПараметрыФормы.Вставить("ЗаявкаНаПереносСрока", Форма.ЗаявкаНаПереносСрока);
	КонецЕсли;
	
	ИмяФормыДляОткрытия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыДействияСхемы(
		Форма, Процесс);
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает карточку шаблона действия.
//
// Параметры:
//  Форма - Карточка комплексного процесса/шаблона.
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса - шаблон действия.
//
Процедура ОткрытьШаблонДействия(Форма, Шаблон) Экспорт
	
	ИмяФормыДляОткрытия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыДействияСхемы(
		Форма, Шаблон);
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ИмяФормыДляОткрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Шаблон);
	
	Если ЭтоШаблон Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	Иначе
		Если ЗначениеЗаполнено(Форма.Объект.Автор) Тогда
			ПараметрыФормы.Вставить(
				"ТолькоПросмотр",
				Не Форма.ДоступностьПоШаблону И ЗначениеЗаполнено(Форма.Объект.Шаблон));
		КонецЕсли;
	КонецЕсли;
	
	Предметы = Новый Массив;
	Для Каждого СтрокаПредмет Из Форма.Объект.Предметы Цикл
		Предметы.Добавить(СтрокаПредмет.Предмет);
	КонецЦикла;
	Если Предметы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ПредметыПроцесса", Предметы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаДействияКомплексногоПроцессаВФорме(Форма);
		ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, Форма);
	
КонецПроцедуры

// Настраивает доступность команд в контекстном меню схемы.
//
// Параметры
//  Форма - УправляемаяФорма - карточка процесса.
//
Процедура НастроитьДоступностьКомандНастройкиЭлементов(Форма) Экспорт
	
	Форма.Элементы.СхемаКонтекстноеМенюОткрытьПроцессДействияСхемы.Доступность = Ложь;
	Форма.Элементы.СхемаКонтекстноеМенюОткрытьШаблонДействияСхемы.Доступность = Ложь;
	Форма.Элементы.СхемаКонтекстноеМенюПрерватьДействиеСхемы.Доступность = Ложь;
	Форма.Элементы.СхемаКонтекстноеМенюПрерватьДействиеСхемы.Пометка = Ложь;
	Форма.Элементы.СхемаКонтекстноеМенюТекущаяПозицияСхемы.Доступность = Ложь;
	Форма.Элементы.СхемаКонтекстноеМенюТекущаяПозицияСхемы.Пометка = Ложь;
	
	Если Не ЗначениеЗаполнено(Форма.ИмяТекущегоЭлементаСхемыПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаДоступнаДляРедактирования = Не Форма.ТолькоПросмотр;
	
	Если СхемаДоступнаДляРедактирования Тогда
		
		Если Форма.Объект.Стартован
			И Форма.Объект.Состояние = 
				ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен") Тогда
			
			СхемаДоступнаДляРедактирования = Ложь
		ИначеЕсли Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы.Количество() > 0 Тогда
			
			СхемаДоступнаДляРедактирования = Форма.ДоступностьПоШаблону;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СхемаДоступнаДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЭлементаСхемы = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаЭлементаСхемы(
		Форма.СхемаКомплексногоПроцесса, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
		
	Если СтрокаЭлементаСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьКомандыОткрытияКарточкиДействия = Ложь;
	ПоказатьКомандуПрерывания = Ложь;
	
	Если СтрокаЭлементаСхемы.Тип = ПредопределенноеЗначение(
			"Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Действие")
		
		Или СтрокаЭлементаСхемы.Тип = ПредопределенноеЗначение(
			"Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс") Тогда
		
		СтрокаПараметровДействий = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаПараметровДействий(
				Форма.СхемаКомплексногоПроцесса, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
		
		Если СтрокаПараметровДействий <> Неопределено
			И ЗначениеЗаполнено(СтрокаПараметровДействий.Процесс)
			И ЗначениеЗаполнено(СтрокаПараметровДействий.ШаблонПроцесса) Тогда
			
			ПоказатьКомандыОткрытияКарточкиДействия = Истина;
			
			Если ЗначениеЗаполнено(СтрокаПараметровДействий.Процесс) Тогда
				ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВКэше(
					СтрокаПараметровДействий.Процесс, Форма.КэшДанныхДействий);
				
				Если ДанныеПроцесса.СостояниеПроцесса <> 
						ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Прерван")
					
					И Не ДанныеПроцесса.ПроцессЗавершен Тогда
					
					ПоказатьКомандуПрерывания = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказатьКомандыОткрытияКарточкиДействия Тогда
		Форма.Элементы.СхемаКонтекстноеМенюОткрытьПроцессДействияСхемы.Доступность = Истина;
		Форма.Элементы.СхемаКонтекстноеМенюОткрытьШаблонДействияСхемы.Доступность = Истина;
	КонецЕсли;
	
	Если ПоказатьКомандуПрерывания Тогда
		Форма.Элементы.СхемаКонтекстноеМенюПрерватьДействиеСхемы.Доступность = Истина;
		Форма.Элементы.СхемаКонтекстноеМенюПрерватьДействиеСхемы.Пометка = 
			(Форма.ПроцессыСхемыДляПрерывания.НайтиПоЗначению(СтрокаПараметровДействий.Процесс) <> Неопределено);
	КонецЕсли;
	
	Форма.Элементы.СхемаКонтекстноеМенюТекущаяПозицияСхемы.Доступность = Истина;
	Форма.Элементы.СхемаКонтекстноеМенюТекущаяПозицияСхемы.Пометка = СтрокаЭлементаСхемы.Текущий;
	Если ПоказатьКомандуПрерывания Тогда
		Форма.Элементы.СхемаКонтекстноеМенюТекущаяПозицияСхемы.Доступность = 
			Форма.Элементы.СхемаКонтекстноеМенюПрерватьДействиеСхемы.Пометка;
	Иначе
		Форма.Элементы.СхемаКонтекстноеМенюТекущаяПозицияСхемы.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет признак прерывания для действия схемы в карточке процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса.
//
Процедура ОбновитьПризнакПрерыванияДляДействияСхемы(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установка/снятие пометки прерывания недоступно в веб-клиенте.'; en = 'Setting and removing of deletion marks is not possible while using Web client.'"));
		Возврат;
	КонецЕсли;
	
	СтрокаПараметровДействий = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаПараметровДействий(
			Форма.СхемаКомплексногоПроцесса, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
	Если СтрокаПараметровДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаПараметровДействий.Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЭлементаСхемы = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаЭлементаСхемы(
		Форма.СхемаКомплексногоПроцесса, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
	Если СтрокаЭлементаСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеКПрерыванию = Форма.ПроцессыСхемыДляПрерывания.НайтиПоЗначению(СтрокаПараметровДействий.Процесс);
	
	Если ДействиеКПрерыванию = Неопределено Тогда
		
		Форма.ПроцессыСхемыДляПрерывания.Добавить(СтрокаПараметровДействий.Процесс);
		СтрокаЭлементаСхемы.Текущий = Ложь;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьОтметкуПройденногоЭлементаВСхеме(
			Форма.Схема, Форма.ИмяТекущегоЭлементаСхемыПроцесса, Ложь);
		
		ТекстПредупреждения = НСтр("ru = 'Действие будет прервано при следующей записи процесса.
			|Для отмены снимите пометку прерывания.';
			|en = 'The action will be terminated upon the next saving of the process. 
			|To cancel this remove the termination mark.'");
			
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		Форма.ПроцессыСхемыДляПрерывания.Удалить(ДействиеКПрерыванию);
		СтрокаЭлементаСхемы.Текущий = Истина;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьОтметкуТекущегоЭлементаВСхеме(
			Форма.Схема, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	Форма.ИзмененаСхемаПроцесса = Истина;
	
	СрокиИсполненияПроцессовКлиентСерверКОРП.ЗаполнитьСрокиВПараметрахДействияСхемыКомплексногоПроцесса(
		СтрокаПараметровДействий,
		СтрокаЭлементаСхемы,
		Форма.КэшДанныхДействий,
		Форма.ПроцессыСхемыДляПрерывания);
	
	ПоказатьТочныеСроки = СрокиИсполненияПроцессовКлиентСерверКОРП.
		ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
		
	ПоказатьОтносительныеСроки = СрокиИсполненияПроцессовКлиентСерверКОРП.
		ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеДействияВСхемеПроцесса(
		Форма.Схема,
		СтрокаПараметровДействий,
		СтрокаЭлементаСхемы,
		Форма.КэшДанныхДействий,
		Форма.ПроцессыСхемыДляПрерывания,
		Форма.ИспользоватьДатуИВремяВСрокахЗадач,
		ПоказатьТочныеСроки,
		ПоказатьОтносительныеСроки);
	
	НастроитьДоступностьКомандНастройкиЭлементов(Форма);
	
КонецПроцедуры

// Обновляет признак текущего элемента в схеме карточки процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса.
//
Процедура ОбновитьПризнакТекущегоЭлементаСхемы(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установка/снятие текущей позиции недоступно в веб-клиенте.'; en = 'Setting and removing of current position is not possible while using Web client.'"));
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаЭлементаСхемы(
		Форма.СхемаКомплексногоПроцесса, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
	Если ЭлементСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы.Текущий = Не ЭлементСхемы.Текущий;
	
	Если ЭлементСхемы.Текущий Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьОтметкуТекущегоЭлементаВСхеме(
			Форма.Схема, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьОтметкуПройденногоЭлементаВСхеме(
			Форма.Схема, Форма.ИмяТекущегоЭлементаСхемыПроцесса, ЭлементСхемы.Пройден);
	КонецЕсли;
	
	Форма.ИзмененаСхемаПроцесса = Истина;
	Форма.Модифицированность = Истина;
	
	Если ЭлементСхемы.Тип = 
			ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Действие")
		
		Или ЭлементСхемы.Тип = 
			ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс") Тогда
	
		ПараметрыДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаПараметровДействий(
			Форма.СхемаКомплексногоПроцесса, Форма.ИмяТекущегоЭлементаСхемыПроцесса);
		Если ПараметрыДействия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СрокиИсполненияПроцессовКлиентСерверКОРП.ЗаполнитьСрокиВПараметрахДействияСхемыКомплексногоПроцесса(
			ПараметрыДействия,
			ЭлементСхемы,
			Форма.КэшДанныхДействий,
			Форма.ПроцессыСхемыДляПрерывания);
		
		ПоказатьТочныеСроки = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
			
		ПоказатьОтносительныеСроки = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеДействияВСхемеПроцесса(
			Форма.Схема,
			ПараметрыДействия,
			ЭлементСхемы,
			Форма.КэшДанныхДействий,
			Форма.ПроцессыСхемыДляПрерывания,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач,
			ПоказатьТочныеСроки,
			ПоказатьОтносительныеСроки);
		
	КонецЕсли;
	
	НастроитьДоступностьКомандНастройкиЭлементов(Форма);
	
КонецПроцедуры

// Открывает диалог ввода причины прерывания процессов схемы.
// Предназначена для вызова из обработчика ПередЗаписью карточки процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса.
//  Отказ - Булево - стандартный реквизит обработчика ПередЗаписью формы процесса.
//  ПараметрыЗаписи - Структура - ПараметрыЗаписи - стандартный реквизит обработчика ПередЗаписью формы процесса.
//
Процедура ВвестиПричинуПрерыванияПроцессовСхемы(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если Не Форма.ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ПроцессыСхемыДляПрерывания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПричинаПрерыванияПроцессовСхемы") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьВыполнениеПослеВводаПричинуПрерыванияПроцессовСхемы",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроцессыСхемыДляПрерывания", Форма.ПроцессыСхемыДляПрерывания);
	
	ОткрытьФорму("Справочник.СхемыКомплексныхПроцессов.Форма.ЗапросПричиныПрерыванияПроцессовСхемы",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ВвестиПричинуПрерыванияПроцессовСхемы.
//
Процедура ПродолжитьВыполнениеПослеВводаПричинуПрерыванияПроцессовСхемы(
	ПричинаПрерыванияПроцессовСхемы, ДополнительныеПараметры) Экспорт
	
	Если ПричинаПрерыванияПроцессовСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	
	ПараметрыЗаписи.Вставить("ПричинаПрерыванияПроцессовСхемы", ПричинаПрерыванияПроцессовСхемы);
	
	Форма.Записать(ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьФормуПослеЗаписи")
		И ПараметрыЗаписи.ЗакрытьФормуПослеЗаписи Тогда
		
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СхемаПроцесса

// Обрабатывает добавление новые элементы в схему процесса.
// В качестве результата возвращает количество добавленных элементов.
//
// Заполняются таблицы:
//  Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
//  Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
//  Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий,
//  Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок,
// Переменные:
//  КэшНаименованийСоединительныхЛиний
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
// Возвращаемое значение:
//  Число - количество добавленных элементов
//
Функция ОбработатьДобавлениеНовыхЭлементовВСхемуПроцесса(Форма)
	
	КэшИменЭлементов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы Цикл
		КэшИменЭлементов.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Имя);
	КонецЦикла;
	
	КоличествоДобавленныхЭлементов = 0;
	
	ЭтоСхемаШаблона = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Для Каждого ЭлементГрафическойСхемы Из Форма.Схема.ЭлементыГрафическойСхемы Цикл
		
		ТипЭлементаГрафическойСхемы = ТипЗнч(ЭлементГрафическойСхемы);
		
		// Соединительные линии только добавлем к кэш.
		Если ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			
			Если НаименованиеСоединительнойЛинииВКэше(Форма, ЭлементГрафическойСхемы.Имя) = Неопределено Тогда
				ДобавитьНаименованиеСоединительнойЛинииВКэш(
					Форма,
					ЭлементГрафическойСхемы.Имя,
					ЭлементГрафическойСхемы.Наименование);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Пропускаем элемент, если он есть в процессе.
		Если КэшИменЭлементов.Получить(ЭлементГрафическойСхемы.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоДобавленныхЭлементов = КоличествоДобавленныхЭлементов + 1;
		
		ТипЭлементаСхемы = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ТипЭлементаСхемы(ТипЭлементаГрафическойСхемы);
		
		Если ТипЭлементаСхемы <> Неопределено Тогда
			
			// Добавляем элемент, если он поддерживается.
			ЭлементСхемыПроцесса = Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы.Добавить();
			ЭлементСхемыПроцесса.Имя = ЭлементГрафическойСхемы.Имя;
			ЭлементСхемыПроцесса.Тип = ТипЭлементаСхемы;
			
			КэшИменЭлементов.Вставить(ЭлементГрафическойСхемы.Имя, ЭлементГрафическойСхемы.Имя);
			
			Если Не ЭтоСхемаШаблона И ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыСтарт") Тогда
				
				// Для процессов, все новые элементы старта делаем текущими.
				ЭлементСхемыПроцесса.Текущий = Истина;
				ЭлементГрафическойСхемы.Рамка = 
					РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.РамкаТекущегоЭлемента();
				
			ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")
				Или ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыДействие") Тогда
				
				// Для действий и вложенных процессов дополнительно добавляется запись
				// в таблицу СхемаКомплексногоПроцесса.ПараметрыДействий.
				ПараметрыДействия = Форма.СхемаКомплексногоПроцесса.ПараметрыДействий.Добавить();
				ПараметрыДействия.Имя = ЭлементГрафическойСхемы.Имя;
				ПараметрыДействия.Наименование = ЭлементГрафическойСхемы.Наименование;
				ПараметрыДействия.Идентификатор = Новый УникальныйИдентификатор;
				
			ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыУсловие") Тогда
				
				// Для новых условий добавляется запись в таблицу СхемаКомплексногоПроцесса.ПараметрыУсловий.
				ПараметрыУсловия = Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий.Добавить();
				ПараметрыУсловия.Имя = ЭлементГрафическойСхемы.Имя;
				
				// Добавление компановщика условия в кэш.
				ДобавитьНастройкиУсловияВКэш(Форма.КэшНастроекУсловий, ЭлементГрафическойСхемы.Имя);
				
			ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыОбработка") Тогда
				
				// Для новых обработок добавляем запись в таблицу ПараметрыОбработок
				ПараметрыОбработки = Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок.Добавить();
				ПараметрыОбработки.Имя = ЭлементГрафическойСхемы.Имя;
				
			КонецЕсли;
			
		Иначе
			// Выделяем не поддерживаемые элементы.
			УстановитьОформлениеНеподдерживаемогоЭлемента(ЭлементГрафическойСхемы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоДобавленныхЭлементов;
	
КонецФункции

// Обрабатывает удаление элементов из схемы.
//
// Удаляются лишние элементы из таблиц:
//  СхемаКомплексногоПроцесса.ЭлементыСхемы,
//  СхемаКомплексногоПроцесса.ПараметрыДействий,
//  СхемаКомплексногоПроцесса.ПараметрыУсловий,
//  СхемаКомплексногоПроцесса.ПараметрыОбработок
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
// Возвращаемое значение:
//  Структура
//   * КоличествоУдаленныхЭлементов - Число - количество удаленных элементов.
//   * ИсключенныеДействия - Массив - массив исключенных из схемы действий.
//
Функция ОбработатьУдалениеЭлементовИзСхемы(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоУдаленныхЭлементов", 0);
	Результат.Вставить("ИсключенныеДействия", Новый Массив);
	
	Индекс = Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы.Количество() - 1;
	
	КэшСтрокТаблицыПараметрыДействий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыДействий Цикл
		КэшСтрокТаблицыПараметрыДействий.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
	КонецЦикла;
	
	КэшСтрокТаблицыПараметрыУсловий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий Цикл
		КэшСтрокТаблицыПараметрыУсловий.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
	КонецЦикла;
	
	КэшСтрокТаблицыПараметрыОбработок = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок Цикл
		КэшСтрокТаблицыПараметрыОбработок.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
	КонецЦикла;
	
	ЭтоСхемаШаблона = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Пока Индекс >= 0 Цикл
		
		ЭлементСхемы = Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы[Индекс];
		
		УдалитьЭлементСхемы = Ложь;
		Если Форма.Схема.ЭлементыГрафическойСхемы.Найти(ЭлементСхемы.Имя) = Неопределено Тогда
			УдалитьЭлементСхемы = Истина;
		КонецЕсли;
		
		Если УдалитьЭлементСхемы Тогда
			
			Если ЭлементСхемы.Тип = 
					ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс")
					
				Или ЭлементСхемы.Тип = 
					ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Действие") Тогда
				
				СтрокаПараметров = КэшСтрокТаблицыПараметрыДействий.Получить(ЭлементСхемы.Имя);
				Если СтрокаПараметров <> Неопределено Тогда
					
					// Удалим строки текущего действия из таблицы Объект.ПредметыЗадач.
					Если ЗначениеЗаполнено(СтрокаПараметров.ШаблонПроцесса) Тогда
						Отбор = Новый Структура;
						Отбор.Вставить("ИдентификаторЭтапа", СтрокаПараметров.Идентификатор);
						СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Отбор);
						Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
							Форма.Объект.ПредметыЗадач.Удалить(СтрокаКУдалению);
						КонецЦикла;
					КонецЕсли;
					
					// Удалим строки текущего действий из дерева формы ТочкиМаршрута
					Если ЭтоСхемаШаблона Тогда
						ЭлементыДерева = Форма.ТочкиМаршрута.ПолучитьЭлементы();
						Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
							Если ЭлементДерева.ИдентификаторЭтапа = СтрокаПараметров.Идентификатор Тогда
								ЭлементыДерева.Удалить(ЭлементДерева);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					// Удалим действие из настроек условий
					Для Каждого НастройкаУсловия Из Форма.КэшНастроекУсловий Цикл
						
						Если НастройкаУсловия.Значение = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						УдалитьОтборСДействиемИзУсловийСхемы(
							НастройкаУсловия.Значение.Отбор.Элементы,
							ЭлементСхемы.Имя);
							
					КонецЦикла;
					
					// Для действий и вложенных процессов удаляем записи из таблицы СхемаКомплексногоПроцесса.ПараметрыДействий.
					Форма.СхемаКомплексногоПроцесса.ПараметрыДействий.Удалить(СтрокаПараметров);
					КэшСтрокТаблицыПараметрыДействий.Удалить(ЭлементСхемы.Имя);
					
					// Добавляем процесс, удаленного элемента-действия в список исключенных.
					Если ЗначениеЗаполнено(СтрокаПараметров.Процесс) Тогда
						Результат.ИсключенныеДействия.Добавить(СтрокаПараметров.Процесс);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементСхемы.Тип = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Условие") Тогда
				
				// Для условий удаляем записи из таблицы СхемаКомплексногоПроцесса.ПараметрыУсловий.
				СтрокаПараметров = КэшСтрокТаблицыПараметрыУсловий.Получить(ЭлементСхемы.Имя);
				Если СтрокаПараметров <> Неопределено Тогда
					Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий.Удалить(СтрокаПараметров);
					КэшСтрокТаблицыПараметрыУсловий.Удалить(ЭлементСхемы.Имя);
				КонецЕсли;
				
				// Удаление компоновщика условия.
				УдалитьНастройкиУсловияИзКэша(Форма.КэшНастроекУсловий, ЭлементСхемы.Имя);
				
			ИначеЕсли ЭлементСхемы.Тип = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Обработка") Тогда
				
				// Для условий удаляем записи из таблицы СхемаКомплексногоПроцесса.ПараметрыОбработок.
				СтрокаПараметров = КэшСтрокТаблицыПараметрыОбработок.Получить(ЭлементСхемы.Имя);
				Если СтрокаПараметров <> Неопределено Тогда
					Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок.Удалить(СтрокаПараметров);
					КэшСтрокТаблицыПараметрыОбработок.Удалить(ЭлементСхемы.Имя);
				КонецЕсли;
				
			КонецЕсли;
			
			// Удаляем элемент из таблицы элементов карты.
			Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы.Удалить(ЭлементСхемы);
			
			Результат.КоличествоУдаленныхЭлементов = Результат.КоличествоУдаленныхЭлементов + 1;
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	УдалитьИзКэшаНесуществующиеСоединительныеЛинии(Форма);
	
	Возврат Результат;
	
КонецФункции

// Удаляет элементы отбора с указанным действием предмета из условий схемы.
// Рекурсивная процедура.
//
// Параметры:
//  ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы отбора.
//  Действие - Строка - имя действия.
//
Процедура УдалитьОтборСДействиемИзУсловийСхемы(ЭлементыОтбора, Действие) Экспорт
	
	ПолеУсловиеПоРезультатамВыполненияДействий = 
		Новый ПолеКомпоновкиДанных("УсловиеПоРезультатамВыполненияДействий");
	
	ИндексЭлемента = ЭлементыОтбора.Количество() - 1;
	
	Пока ИндексЭлемента >= 0 Цикл
		
		ЭлементОтбора = ЭлементыОтбора[ИндексЭлемента];
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ПолеУсловиеПоРезультатамВыполненияДействий
				И ЭлементОтбора.ПравоеЗначение.Действие = Действие Тогда
				
				ЭлементыОтбора.Удалить(ЭлементОтбора)
			КонецЕсли;
		Иначе
			УдалитьОтборСДействиемИзУсловийСхемы(ЭлементОтбора.Элементы, Действие);
		КонецЕсли;
		
		ИндексЭлемента = ИндексЭлемента - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Восстанавливает наименование соединительных линий в схеме процесса.
// В схеме процессов нельзя менять наименования соединительных линий.
// Это нужно для корректной работы условий. Ветка условия определяется по
// наименованию соединительной линии.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура ВосстановитьНаименованияСоединительныхЛиний(Форма)
	
	Если Форма.КэшНаименованийСоединительныхЛиний = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементГрафическойСхемы Из Форма.Схема.ЭлементыГрафическойСхемы Цикл
		
		Если ТипЗнч(ЭлементГрафическойСхемы) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеВКэше = НаименованиеСоединительнойЛинииВКэше(Форма, ЭлементГрафическойСхемы.Имя);
		
		Если ЭлементГрафическойСхемы.Наименование <> НаименованиеВКэше Тогда
			ЭлементГрафическойСхемы.Наименование = НаименованиеВКэше;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Настраивает оформление неподдерживаемого элемента схемы процесса.
//
// Параметры
//  ЭлементКарты - ЭлементГрафическойСхемыВыборВарианта,
//                 ЭлементГрафическойСхемыОбработка - элемент графической схемы.
//
Процедура УстановитьОформлениеНеподдерживаемогоЭлемента(ЭлементГрафическойСхемы)
	
	ЭлементГрафическойСхемы.ЦветФона = WebЦвета.Белый;
	ЭлементГрафическойСхемы.Картинка = БиблиотекаКартинок.Предупреждение32;
	ЭлементГрафическойСхемы.ПоложениеКартинки = ПоложениеКартинкиЭлементаГрафическойСхемы.Центр;
	
КонецПроцедуры

// Возвращает Истину, если элемент схемы имеет наименование по умолчанию.
//
// Параметры:
//  ЭлементСхемы - ЭлементГрафическойСхемы<ТипЭлемента>
//
// Возвращаемое значение:
//  Булево
//
Функция УЭлементаНаименованиеПоУмолчанию(ЭлементСхемы)
	
	ИмяЭлемента = НРег(ЭлементСхемы.Имя);
	НаименованиеЭлемента = СтрЗаменить(ЭлементСхемы.Наименование, " ", "");
	НаименованиеЭлемента = НРег(НаименованиеЭлемента);
	
	Возврат ИмяЭлемента = НаименованиеЭлемента;
	
КонецФункции

#Область Действия

// Инициирует настройку действия по текущему элементу схемы комплексного процесса.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура НастроитьЭлементСхемыДействие(Форма)
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Если ЭтоШаблон Тогда
		Если Не ЗаписатьНовыйШаблонПередДобавлениемДействия(Форма) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ЗаписатьНовыйПроцессПередДобавлениемДействия(Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяЭлемента = Форма.Элементы.Схема.ТекущийЭлемент.Имя;
	
	ПараметрыДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаПараметровДействий(
		Форма.СхемаКомплексногоПроцесса, ИмяЭлемента);
	
	ПараметрыЭлемента = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаЭлементаСхемы(
		Форма.СхемаКомплексногоПроцесса, ИмяЭлемента);
	
	СостояниеПроцесса = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыДействия.Процесс) Тогда
		СостояниеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВКэше(
			ПараметрыДействия.Процесс, Форма.КэшДанныхДействий).СостояниеПроцесса;
	КонецЕсли;
	
	ПроцессыСхемыДляПрерывания = Новый СписокЗначений;
	Если Не ЭтоШаблон Тогда
		ПроцессыСхемыДляПрерывания = Форма.ПроцессыСхемыДляПрерывания;
	КонецЕсли;
	
	Действие = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СсылкаНаДействиеСхемы(
		ПараметрыДействия, ПараметрыЭлемента, СостояниеПроцесса, ПроцессыСхемыДляПрерывания);
	
	Если ЗначениеЗаполнено(Действие) Тогда
	
		Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Действие) Тогда
			ОткрытьШаблонДействия(Форма, Действие);
		Иначе
			ОткрытьПроцессДействия(Форма, Действие, ПараметрыЭлемента.Пройден);
		КонецЕсли;
		
	Иначе // Настройка пустого элемента схемы (действия).
		
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Настройка новых действий схемы в веб-клиенте недоступна.'; en = 'Setting up new diagram elements is not possible while using Web client.'"));
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			
			ПараметрыФормы.Вставить("ВладелецШаблона", Форма.Объект.Ссылка);
			
			Если ЭтоШаблон Тогда
				ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор действия для элемента схемы шаблона процесса'; en = 'Select action for process template diagram element'"));
			Иначе
				ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор действия для элемента схемы процесса'; en = 'Select action for process diagram element'"));
			КонецЕсли;
			
			ПараметрыФормы.Вставить("Предметы", Форма.Объект.Предметы);
			ПараметрыФормы.Вставить("ТипЭлементаСхемыПроцесса", ПараметрыЭлемента.Тип);
			
			Если Не УЭлементаНаименованиеПоУмолчанию(Форма.Элементы.Схема.ТекущийЭлемент) Тогда
				
				НаименованиеЭлемента = Форма.Элементы.Схема.ТекущийЭлемент.Наименование;
				
				ПараметрыФормы.Вставить("НаименованиеДействия", СтрПолучитьСтроку(НаименованиеЭлемента, 1));
				
				ОписаниеДействия = СтрЗаменить(НаименованиеЭлемента, ПараметрыФормы.НаименованиеДействия, "");
				ПараметрыФормы.Вставить("ОписаниеДействия", ОписаниеДействия);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
				ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
					ДатаОтсчетаДействияКомплексногоПроцессаВФорме(Форма);
				ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
			КонецЕсли;
			
			ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы, Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Условия

// Открывает форму настройки условия.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//  ОписаниеОповещениеПослеНастройки - ОписаниеОповещение - Описание оповещения которое будет выполнено после настройки.
//                                     Если не указано, то ничего не выполняется.
//
Процедура НастроитьЭлементСхемыУсловие(Форма, ОписаниеОповещениеПослеНастройки)
	
	ЭлементУсловие = Форма.Элементы.Схема.ТекущийЭлемент;
	
	ИмяУсловия = ЭлементУсловие.Имя;
	
	ТипУсловия = Неопределено;
	Для Каждого ПараметрыУсловия Из Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий Цикл
		Если ПараметрыУсловия.Имя = ИмяУсловия Тогда
			ТипУсловия = ПараметрыУсловия.ТипУсловия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиУсловия = НастройкиУсловияИзКэша(Форма.КэшНастроекУсловий, ИмяУсловия);
	
	КэшПараметровДействий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыДействий Цикл
		КэшПараметровДействий.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
	КонецЦикла;
	
	КэшЭлементовСхемы = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы Цикл
		КэшЭлементовСхемы.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
	КонецЦикла;
	
	ПроцессыДляПревания = Новый СписокЗначений;
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		ПроцессыДляПревания = Форма.ПроцессыСхемыДляПрерывания;
	КонецЕсли;
	
	ДействияПредшествующиеУсловию = Новый Массив;
	ПолучитьДействияПредшествующиеЭлементу(
		ДействияПредшествующиеУсловию,
		ИмяУсловия,
		Форма.СхемаКомплексногоПроцесса.ПредшественникиЭлементовСхемы,
		КэшПараметровДействий,
		КэшЭлементовСхемы,
		ПроцессыДляПревания);
	
	Параметрыформа = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		// Изменение условий схемы в веб-клиенте недоступна.
		Параметрыформа.Вставить("ТолькоПросмотр", Истина);
	Иначе
		Параметрыформа.Вставить("ТолькоПросмотр", Форма.Элементы.Схема.ТолькоПросмотр);
		Параметрыформа.Вставить("Наименование", ЭлементУсловие.Наименование);
	КонецЕсли;
	
	Параметрыформа.Вставить("НастройкиУсловия", НастройкиУсловия);
	Параметрыформа.Вставить("Предметы", Форма.Объект.Предметы);
	Параметрыформа.Вставить("Действия", ДействияПредшествующиеУсловию);
	Параметрыформа.Вставить("ТипУсловия", ТипУсловия);
	Параметрыформа.Вставить("Схема", Форма.СхемаКомплексногоПроцесса.Ссылка);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ОписаниеОповещениеПослеНастройки", ОписаниеОповещениеПослеНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьНастройкуЭлементаСхемыУсловие", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.СхемыКомплексныхПроцессов.Форма.НастройкаУсловия",
		Параметрыформа,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры НастроитьЭлементСхемыУсловие
//
Процедура ЗавершитьНастройкуЭлементаСхемыУсловие(РезультатНастройки, Параметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	ОписаниеОповещениеПослеНастройки = Параметры.ОписаниеОповещениеПослеНастройки;
	
	Форма.Схема.ЭлементыГрафическойСхемы.Найти(Форма.Элементы.Схема.ТекущийЭлемент.Имя).Наименование =
		РезультатНастройки.Наименование;
	
	ДобавитьНастройкиУсловияВКэш(
		Форма.КэшНастроекУсловий,
		Форма.Элементы.Схема.ТекущийЭлемент.Имя,
		РезультатНастройки.НастройкиУсловия);
	
	// Обновим тип условия
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыУсловий Цикл
		Если СтрокаТаблицы.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя Тогда
			СтрокаТаблицы.ТипУсловия = РезультатНастройки.ТипУсловия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ИзмененаСхемаПроцесса = Истина;
	
	Форма.Модифицированность = Истина;
	
	Форма.ВосстановитьФокусТекущегоЭлементаСхемыПроцессаОтложенно();
	
	Если ОписаниеОповещениеПослеНастройки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещениеПослеНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет предшествующие действия для элемента.
// Рекурсивная процедура.
//
// Параметры:
//  ДействияПредшественники - Массив - этот параметр помещаются предшественники
//                                     (см. функцию СтруктураПараметровДействия) элемента.
//  ИмяЭлемента - Строка - имя текущего элемента схемы.
//  ПредшественникиЭлементовСхемы - ТабличнаяЧасть - таблица ПредшественникиЭлементовСхемы схемы.
//  КэшПараметровДействий - Соответствие - Соответствие имен и строк таблицы ПараметрыДействий схемы.
//  КэшЭлементовСхемы - Соответствие - Соответствие имен и строк таблицы ЭлементыСхемы схемы.
//  ПроцессыДляПрерывания - СписокЗначений - список процессов, помеченных на схеме в карточке процесса к прерыванию.
//
Процедура ПолучитьДействияПредшествующиеЭлементу(
	ДействияПредшественники, ИмяЭлемента, ПредшественникиЭлементовСхемы,
	КэшПараметровДействий, КэшЭлементовСхемы, ПроцессыДляПрерывания)
	
	Отбор = Новый Структура("Имя", ИмяЭлемента);
	
	ПредшественникиЭлемента = ПредшественникиЭлементовСхемы.НайтиСтроки(Отбор);
	
	Для Каждого ПредшественникЭлемента Из ПредшественникиЭлемента Цикл
		
		ПараметрыДействия = КэшПараметровДействий.Получить(
			ПредшественникЭлемента.ИмяПредшественника);
		
		ПараметрыЭлемента = КэшЭлементовСхемы.Получить(
			ПредшественникЭлемента.ИмяПредшественника);
		
		Если ПараметрыДействия <> Неопределено И ПараметрыЭлемента <> Неопределено Тогда
			
			Действие = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СсылкаНаДействиеСхемы(
				ПараметрыДействия,
				ПараметрыЭлемента,
				ПараметрыДействия.СостояниеПроцесса,
				ПроцессыДляПрерывания);
			
			СтруктураПараметровДействия = СтруктураПараметровДействия();
			ЗаполнитьЗначенияСвойств(СтруктураПараметровДействия, ПараметрыДействия);
			СтруктураПараметровДействия.Действие = Действие;
			ДействияПредшественники.Добавить(СтруктураПараметровДействия);
			
			Продолжить;
		КонецЕсли;
		
		ПолучитьДействияПредшествующиеЭлементу(
			ДействияПредшественники,
			ПредшественникЭлемента.ИмяПредшественника,
			ПредшественникиЭлементовСхемы,
			КэшПараметровДействий,
			КэшЭлементовСхемы,
			ПроцессыДляПрерывания);
	КонецЦикла;
	
КонецПроцедуры

// Формирует и возвращает структуру параметров действий.
//
// Возвращаемое значение:
//  Структура
//   * Имя
//   * Наименование
//   * Действие
//
Функция СтруктураПараметровДействия()
	
	СтруктураПараметров = Новый Структура(
		"Имя,
		|Наименование,
		|Действие");
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область Обработки

// Открывает форму настройки обработки.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//  ОписаниеОповещениеПослеНастройки - ОписаниеОповещение - Описание оповещения которое будет выполнено после настройки.
//                                     Если не указано, то ничего не выполняется.
//
Процедура НастроитьЭлементСхемыОбработка(Форма, ОписаниеОповещениеПослеНастройки = Неопределено)
	
	ЭлементОбработка = Форма.Элементы.Схема.ТекущийЭлемент;
	
	ИмяОбработки = ЭлементОбработка.Имя;
	
	ПараметрыОбработки = Неопределено;
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок Цикл
		Если СтрокаТаблицы.Имя = ИмяОбработки Тогда
			ПараметрыОбработки = СтрокаТаблицы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		// Изменение условий схемы в веб-клиенте недоступна.
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	Иначе
		ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
		ПараметрыФормы.Вставить("Наименование", ЭлементОбработка.Наименование);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИдентификаторСкрипта", ПараметрыОбработки.ИдентификаторСкрипта);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Обработка'; en = 'Processor'"));
	ПараметрыФормы.Вставить("Схема", Форма.Объект.Схема);
	
	СкриптПоУмолчанию = 
		"// Пример записи состояния документа по результату утверждения.
		|// Если документ не согласован, но утвержден, то устанавливается состояние Согласовано.
		|//
		|//ПараметрыДействийСхемы = Справочники.СхемыКомплексныхПроцессов.ПараметрыДействийСхемы(Процесс.Схема);
		|//
		|//ПараметрыСогласования = ПараметрыДействийСхемы.Найти(""Действие1"");
		|//ПараметрыУтверждения = ПараметрыДействийСхемы.Найти(""Действие2"");
		|//
		|//РезультатСогласования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСогласования.Процесс, ""РезультатСогласования"");
		|//РезультатУтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУтверждения.Процесс, ""РезультатУтверждения"");
		|//
		|//СостояниеСогласования = Перечисления.СостоянияДокументов.НеСогласован;
		|//
		|//Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
		|//	СостояниеСогласования = Перечисления.СостоянияДокументов.Согласован;
		|//	УстановилСостояние = ПараметрыСогласования.Процесс;
		|//ИначеЕсли РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
		|//	СостояниеСогласования = Перечисления.СостоянияДокументов.Согласован;
		|//	УстановилСостояние = ПараметрыУтверждения.Процесс;
		|//КонецЕсли;
		|//
		|//Делопроизводство.ЗаписатьСостояниеДокумента(
		|//	Процесс.Предметы[0].Предмет, 
		|//	ТекущаяДата(), 
		|//	СостояниеСогласования,
		|//	УстановилСостояние);";
	
	ПараметрыФормы.Вставить("СкриптПоУмолчанию", СкриптПоУмолчанию);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ОписаниеОповещениеПослеНастройки", ОписаниеОповещениеПослеНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьНастройкуЭлементаСхемыОбработка", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму(
		"Справочник.СхемыКомплексныхПроцессов.Форма.РедактированиеСкриптаСхемы",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение процедуры НастроитьЭлементСхемыОбработка.
//
Процедура ЗавершитьНастройкуЭлементаСхемыОбработка(РезультатНастройки, Параметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	ОписаниеОповещениеПослеНастройки = Параметры.ОписаниеОповещениеПослеНастройки;
	
	Форма.Схема.ЭлементыГрафическойСхемы.Найти(Форма.Элементы.Схема.ТекущийЭлемент.Имя).Наименование =
		РезультатНастройки.Наименование;
	
	// Обновим параметры обработки
	Для Каждого СтрокаТаблицы Из Форма.СхемаКомплексногоПроцесса.ПараметрыОбработок Цикл
		Если СтрокаТаблицы.Имя = Форма.Элементы.Схема.ТекущийЭлемент.Имя Тогда
			СтрокаТаблицы.ИдентификаторСкрипта = РезультатНастройки.ИдентификаторСкрипта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ИзмененаСхемаПроцесса = Истина;
	
	Форма.Модифицированность = Истина;
	
	Форма.ВосстановитьФокусТекущегоЭлементаСхемыПроцессаОтложенно();
	
	Если ОписаниеОповещениеПослеНастройки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещениеПослеНастройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КэшНастроекУсловий
// Работа с кэшем настроек условий (реквизит формы КэшНастроекУсловий).

// Добавляет настройки условия в КэшНастроекУсловий.
//
// Параметры:
//  КэшНастроекУсловий - Структура - см. РаботаСКомплекснымиБизнесПроцессамиСервер.ИнициализироватьКэшНастроекУсловий
//  ИмяУсловия - Строка - имя элемента схемы условия.
//  НастройкиУсловий - НастройкиКомпоновкиДанных - настройки условия.
//
Процедура ДобавитьНастройкиУсловияВКэш(
	КэшНастроекУсловий, ИмяУсловия, НастройкиУсловия = Неопределено)
	
	КэшНастроекУсловий.Вставить(ИмяУсловия, НастройкиУсловия);
	
КонецПроцедуры

// Удаляет настройки условия из КэшНастроекУсловий.
//
// Параметры:
//  КэшНастроекУсловий - Структура - см. РаботаСКомплекснымиБизнесПроцессамиСервер.ИнициализироватьКэшНастроекУсловий
//  ИмяУсловия - Строка - имя элемента схемы условия.
//
Процедура УдалитьНастройкиУсловияИзКэша(КэшНастроекУсловий, ИмяУсловия)
	
	КэшНастроекУсловий.Удалить(ИмяУсловия);
	
КонецПроцедуры

// Меняет имя условия в кэше настроек.
// Используется в случае изменения имени элемента (условия) графической схемы.
//
// Параметры:
//  КэшНастроекУсловий - Структура - см. РаботаСКомплекснымиБизнесПроцессамиСервер.ИнициализироватьКэшНастроекУсловий
//  ПредыдущееИмя - Строка - предыдущее имя условия
//  НовоеИмя - Строка - новое имя.
//
Процедура ПереименоватьУсловиеВКэше(КэшНастроекУсловий, ПредыдущееИмя, НовоеИмя) Экспорт
	
	НастройкиУсловия = КэшНастроекУсловий[ПредыдущееИмя];
	
	КэшНастроекУсловий.Удалить(ПредыдущееИмя);
	КэшНастроекУсловий.Вставить(НовоеИмя, НастройкиУсловия);
	
КонецПроцедуры

// Возвращает настройки условия из КэшНастроекУсловий.
//
// Параметры:
//  КэшНастроекУсловий - Структура - см. РаботаСКомплекснымиБизнесПроцессамиСервер.ИнициализироватьКэшНастроекУсловий
//  ИмяУсловия - имя элемента условия.
//
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных - настройки условия.
//
Функция НастройкиУсловияИзКэша(КэшНастроекУсловий, ИмяУсловия) Экспорт
	
	Возврат КэшНастроекУсловий[ИмяУсловия];
	
КонецФункции

#КонецОбласти

#Область КэшНаименованийСоединительныхЛиний
// Работа с кэшем наименований соединительных линий
// (переменная формы КэшНаименованийСоединительныхЛиний).

// Заполняет кэш наименований соединительных линий.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура ЗаполнитьКэшНаименованийСоединительныхЛиний(Форма)
	
	Если Форма.КэшНаименованийСоединительныхЛиний = Неопределено Тогда
		Форма.КэшНаименованийСоединительныхЛиний = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ЭлементГрафическойСхемы Из Форма.Схема.ЭлементыГрафическойСхемы Цикл
		
		Если ТипЗнч(ЭлементГрафическойСхемы) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьНаименованиеСоединительнойЛинииВКэш(
			Форма,
			ЭлементГрафическойСхемы.Имя,
			ЭлементГрафическойСхемы.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет отсутствующие линии из кэша.
//
// Параменты:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//
Процедура УдалитьИзКэшаНесуществующиеСоединительныеЛинии(Форма)
	
	ЛинииУКдалению = Новый Массив;
	Для Каждого СоединительнаяЛиния Из Форма.КэшНаименованийСоединительныхЛиний Цикл
		Если Форма.Схема.ЭлементыГрафическойСхемы.Найти(СоединительнаяЛиния.Ключ) = Неопределено Тогда
			ЛинииУКдалению.Добавить(СоединительнаяЛиния);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЛинияУКдалению Из ЛинииУКдалению Цикл
		Форма.КэшНаименованийСоединительныхЛиний.Удалить(ЛинияУКдалению.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет наименование соединительной линии в кэш.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//  Имя - Строка - имя соединительной линии в графической схеме.
//  Наименование - Строка - наименование соединительной линии.
//
Процедура ДобавитьНаименованиеСоединительнойЛинииВКэш(Форма, Имя, Наименование)
	
	Форма.КэшНаименованийСоединительныхЛиний.Вставить(Имя, Наименование);
	
КонецПроцедуры

// Получает наименование соединительной линии из кэша.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона.
//  Имя - Строка - имя соединительной линии в графической схеме.
//
// Возвращаемое значение:
//  Строка - имя соединительной линии в графической схеме.
//
Функция НаименованиеСоединительнойЛинииВКэше(Форма, Имя)
	
	Результат = Неопределено;
	
	Если Форма.КэшНаименованийСоединительныхЛиний = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Форма.КэшНаименованийСоединительныхЛиний[Имя];
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Проверяет, что у этапа есть предшественники
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - уникальный идентификатор этапа в объекте
// Возвращает:
//	Истина, если у этапа есть предшественники
//	Ложь, если у этапа нет предшественников
Функция УЭтапаЕстьПредшественники(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПредставлениеЭтапа(Знач Объект, ИдентификаторЭтапа)
	
	Если ИдентификаторЭтапа = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Возврат НСтр("ru = 'При старте процесса'; en = 'Upon process start'");
	Иначе
		ПараметрыОтбора = Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа);
		МассивНайденных = Объект.Этапы.НайтиСтроки(ПараметрыОтбора);
		Если МассивНайденных.Количество() > 0 Тогда
			НайденныйЭтап = МассивНайденных[0];
			Возврат Строка(Объект.Этапы.Индекс(НайденныйЭтап) + 1);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

Функция ЭтапУдален(Знач Объект, ИдентификаторЭтапа)
	
	Для Каждого ЭтапПроцесса Из Объект.Этапы Цикл
		Если ЭтапПроцесса.ИдентификаторЭтапа = ИдентификаторЭтапа И ЭтапПроцесса.Удален Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает предшественников у этапа комплексного процесса или шаблона комплексного процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого устанавливаются предшественники
//	СписокПредшественников - список значений
// 	 Значение - структура
//		ИдентификаторПредшественника - идентификатор этапа-предшественника
//		УсловиеПерехода - УсловиеМаршрутизации
//		УсловиеРассмотрения - УсловияРассмотренияПредшественниковЭтапа
Процедура УстановитьПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа, СписокПредшественников) Экспорт
	
	УдалитьВсехПредшественниковЭтапа(Объект, ИдентификаторЭтапа);
	
	Для каждого Предшественник Из СписокПредшественников Цикл
		НовыйПредшественник = Объект.ПредшественникиЭтапов.Добавить();
		НовыйПредшественник.ИдентификаторПоследователя = ИдентификаторЭтапа;
		НовыйПредшественник.ИдентификаторПредшественника = Предшественник.Значение.ИдентификаторПредшественника;
		НовыйПредшественник.УсловиеПерехода = Предшественник.Значение.УсловиеПерехода;
		НовыйПредшественник.УсловиеРассмотрения = Предшественник.Значение.УсловиеРассмотрения;
		НовыйПредшественник.ИмяПредметаУсловия = Предшественник.Значение.ИмяПредметаУсловия;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет записи обо всех предшественниках этапа процесса или шаблона процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого удаляются записи о предшественниках
Процедура УдалитьВсехПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Пока УЭтапаЕстьПредшественники(Объект, ИдентификаторЭтапа) Цикл
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Объект.ПредшественникиЭтапов.Удалить(Предшественник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму выбора типа процесса при настройке действия процесса или шаблона процесса
// Параметры:
//	ИдентификаторЭтапа - уникальный идентификатор этапа в процессе или шаблоне процесса
//	ВладелецФормы - элемент владелец открываемой формы
//	ВладелецДействия - ссылка на процесс или шаблон процесса, в котором настраивается действие
//	Предмет - ссылка на предмет процесса
Процедура ОткрытьФормуВыбораДействияЭтапа(
	ИдентификаторЭтапа,
	ВладелецФормы,
	ВладелецДействия,
	Предметы,
	ДатаОтсчетаДляРасчетаСроков = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("ВладелецШаблона", ВладелецДействия);
	Если ТипЗнч(ВладелецДействия) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Добавление действия в комплексный процесс'; en = 'Adding action to composite process'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Добавление действия в шаблон комплексного процесса'; en = 'Adding action to composite process template'"));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Предметы", Предметы);
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляРасчетаСроков);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму настройки предшественников этапа
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ДанныеЭтапа - структура
//		ИдентификаторЭтапа - уникальный идентификатор этапа, для которого настраиваются предшественники
//		ПредшественникиВариантИспользования - строка
Процедура ОткрытьФормуНастройкиПредшественниковЭтапа(Знач Объект, ДанныеЭтапа, Элемент) Экспорт
		
	ВсеЭтапы = Новый СписокЗначений;
	Для Каждого Этап Из Объект.Этапы Цикл
		ДанныеОдногоЭтапа = Новый Структура;
		ДанныеОдногоЭтапа.Вставить("ИдентификаторЭтапа", Этап.ИдентификаторЭтапа);
		ДанныеОдногоЭтапа.Вставить("ЗадачаЭтапа", Этап.ЗадачаЭтапа);
		ДанныеОдногоЭтапа.Вставить("НомерЭтапа", ПолучитьПредставлениеЭтапа(Объект, Этап.ИдентификаторЭтапа));
		ДанныеОдногоЭтапа.Вставить("ШаблонБизнесПроцесса", Этап.ШаблонБизнесПроцесса);
		ДанныеОдногоЭтапа.Вставить("Удален", Этап.Удален);
		ВсеЭтапы.Добавить(ДанныеОдногоЭтапа);
	КонецЦикла;
	
	ПредшественникиЭтапа = Новый СписокЗначений;
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			ДанныеПредшественника = Новый Структура;
			ДанныеПредшественника.Вставить("ИдентификаторПредшественника", Предшественник.ИдентификаторПредшественника);
			Данныепредшественника.Вставить("УсловиеПерехода", Предшественник.УсловиеПерехода);
			ДанныеПредшественника.Вставить("УсловиеРассмотрения", Предшественник.УсловиеРассмотрения);
			ДанныеПредшественника.Вставить("ИмяПредметаУсловия", Предшественник.ИмяПредметаУсловия);
			ПредшественникиЭтапа.Добавить(ДанныеПредшественника);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Этапы", ВсеЭтапы);
	ПараметрыФормы.Вставить("Предшественники", ПредшественникиЭтапа);
	ПараметрыФормы.Вставить("ПредшественникиВариантИспользования", ДанныеЭтапа.ПредшественникиВариантИспользования);
	ПараметрыФормы.Вставить("ИдентификаторТекущегоЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("ВладелецЭтапа", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИменаПредметов", МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект));
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыФормы.Вставить(
			"ДоступностьПоШаблону", 
			Элемент.ДоступностьПоШаблону И Не Элемент.Элементы.ЭтапыПредшественникиЭтапаСтрокой.ТолькоПросмотр);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПредшественниковЭтапаКомплексногоПроцесса", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Вычисляет строковое представление предшественников для всех этапов
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
Процедура ВычислитьОписаниеПредшественников(Объект) Экспорт
	
	Для Каждого ЭтапОбъекта Из Объект.Этапы Цикл
		ЭтапОбъекта.ПредшественникиЭтапаСтрокой = "";	
	КонецЦикла;
	
	Для Каждого ЭтапОбъекта Из Объект.Этапы Цикл	
		ИдентификаторЭтапа = ЭтапОбъекта.ИдентификаторЭтапа;
		СтрокаРезультат = "";
		СтрокаСвязка = " " + НСтр("ru = 'и'; en = 'and'") + " ";
		Если ЭтапОбъекта.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
			СтрокаСвязка = " " + НСтр("ru = 'или'; en = 'or'") + " ";
		КонецЕсли;
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл			
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Если ЭтапУдален(Объект, Предшественник.ИдентификаторПредшественника) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПростоеУсловие = "";
				Если ЗначениеЗаполнено(Предшественник.УсловиеРассмотрения) 
					И Предшественник.ИдентификаторПредшественника <> УникальныйИдентификаторПустой() Тогда
					
					Для Каждого ЭтапПредшественник Из Объект.Этапы Цикл
						Если ЭтапПредшественник.ИдентификаторЭтапа = Предшественник.ИдентификаторПредшественника Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '; en = 'After completion '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не согласовано '; en = 'If not approved '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано '; en = 'If approved '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано без замечаний'; en = 'If approved without reservations'");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано с замечаниями'; en = 'If approved with reservations'");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '; en = 'After completion '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не утверждено '; en = 'If not confirmed '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если утверждено '; en = 'If confirmed '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '; en = 'After completion '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не зарегистрировано '; en = 'If not registered '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если зарегистрировано '; en = 'If registered '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '; en = 'After completion '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не принято '; en = 'If not accepted '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято '; en = 'If accepted '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято обязательными '; en = 'If accepted by the mandatory '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято всеми '; en = 'If accepted by everyone '");
						КонецЕсли;
					Иначе
						СтрокаПростоеУсловие = НСтр("ru = 'После завершения '; en = 'After completion '");
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаРезультат) Тогда
					СтрокаРезультат = СтрокаРезультат + СтрокаСвязка + НРег(СтрокаПростоеУсловие) + ПолучитьПредставлениеЭтапа(Объект, Предшественник.ИдентификаторПредшественника);
				Иначе
					СтрокаРезультат = СтрокаПростоеУсловие + ПолучитьПредставлениеЭтапа(Объект, Предшественник.ИдентификаторПредшественника);
				КонецЕсли;
				Если ЗначениеЗаполнено(Предшественник.УсловиеПерехода) Тогда
					СтрокаРезультат = СтрокаРезультат + НСтр("ru = ', если '; en = ', if '") + Строка(Предшественник.ИмяПредметаУсловия) + "." + НРег(Строка(Предшественник.УсловиеПерехода)) + ",";
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		ЭтапОбъекта.ПредшественникиЭтапаСтрокой = СтрокаРезультат;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет оповещение о создании действия в процессе или шаблоне процесса
// Параметры:
//	Форма - форма, с которой выполняется оповещение
Процедура ОповеститьПослеЗаписиНастройкиДействия(Форма) Экспорт
		
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ШаблонБП", Форма.Объект.Ссылка);
	ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Объект.ВладелецШаблона);
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Владелец);
	КонецЕсли;
	
	МассивПредметов = Новый Массив;
	
	Попытка
		Для Каждого Строка Из Форма.ИсходныеИменаПредметов Цикл
			СтрокаПредмета = Форма.Объект.Предметы.НайтиПоИдентификатору(Строка.ИндексСтроки);
			Если СтрокаПредмета <> Неопределено Тогда
				СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = Строка.ИсходноеИмяПредмета;
			КонецЕсли;
		КонецЦикла;
	Исключение
		// Реквизита может не быть
	КонецПопытки;
		
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		СтруктураПредмета = Новый Структура;
		СтруктураПредмета.Вставить("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
		СтруктураПредмета.Вставить("Предмет",СтрокаПредмета.Предмет);
		СтруктураПредмета.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
		СтруктураПредмета.Вставить("ИмяПредметаОснование", СтрокаПредмета.ИмяПредметаОснование);
		СтруктураПредмета.Вставить("ШаблонОснование", СтрокаПредмета.ШаблонОснование);
		СтруктураПредмета.Вставить("ИсходноеИмяПредмета", СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса);
		МассивПредметов.Добавить(СтруктураПредмета);
	КонецЦикла;
	
	ПараметрыОповещения.Вставить("Предметы", МассивПредметов);
	
	Оповестить("СозданиеДействия", ПараметрыОповещения, Форма);
	
	Форма.Прочитать();
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Форма.Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Форма.Объект);
	
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = СтрокаПредмета.ИмяПредмета;
	КонецЦикла;
	
КонецПроцедуры

// Общий обработчик события "Перед записью" на карточке шаблона процесса
Процедура ФормаНастройкиДействияПередЗаписью(Форма, Отказ) Экспорт
	
	Если Форма.Объект.ШаблонВКомплексномПроцессе Тогда
			
		ОчиститьСообщения();
		
		Если Форма.Элементы.Найти("Важность") <> Неопределено И НЕ ЗначениеЗаполнено(Форма.Объект.Важность) Тогда
			Текст = НСтр("ru = 'Поле ""Важность"" не заполнено'; en = 'Field ""Importance"" is not filled in'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Важность",, Отказ);
		КонецЕсли;
		
		ТребуетсяПроверкаЗаполненияИсполнителейДействия = 
			РаботаСКомплекснымиБизнесПроцессамиВызовСервера.ТребуетсяПроверкаЗаполненияИсполнителейДействия(
				Форма.Объект.Ссылка, Форма.Объект.ВладелецШаблона, Форма.Объект.КомплексныйПроцесс);
		
		Если ТребуетсяПроверкаЗаполненияИсполнителейДействия Тогда	
			Если Форма.Элементы.Найти("Исполнители") <> Неопределено Тогда
				Если Форма.Объект.Исполнители.Количество() = 0 Тогда
					Текст = НСтр("ru = 'Не указаны исполнители'; en = 'Performers not specified'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Исполнители",, Отказ);
				КонецЕсли;  
			КонецЕсли;
			Если Форма.Элементы.Найти("Исполнители") = Неопределено 
				И Форма.Элементы.Найти("Исполнитель") <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
					Текст = НСтр("ru = 'Поле ""Исполнитель"" не заполнено'; en = 'Field ""Performer"" is not filled in'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Исполнитель",,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.НаименованиеБизнесПроцесса) Тогда
			Форма.Объект.Наименование = Строка(ТипЗнч(Форма.Объект.Ссылка));
		Иначе
			Форма.Объект.Наименование = Форма.Объект.НаименованиеБизнесПроцесса;
		КонецЕсли;
		
		Попытка
			Форма.ИсходныеИменаПредметов.Очистить();
			Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
				НоваяСтрока = Форма.ИсходныеИменаПредметов.Добавить();
				НоваяСтрока.ИндексСтроки = СтрокаПредмета.ПолучитьИдентификатор();
				НоваяСтрока.ИсходноеИмяПредмета = СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса;
			КонецЦикла;
		Исключение
			// Реквизита может не быть
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры




