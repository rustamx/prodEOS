////////////////////////////////////////////////////////////////////////////////////////////////////
// Создание \ изменение записей исполнения и контроля
//  
////////////////////////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Возвращает все карточки контроля с учетом прав доступа
// (в том числе карточки подчиненных процессов)
//
// Параметры
//    Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//
// Возвращаемое значение
//    Массив - карточек контроля по предмету
//
Функция КарточкиКонтроляПоПредмету(Предмет) Экспорт 
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет) Тогда 
		ПредметКонтроля = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Предмет);
	Иначе
		ПредметКонтроля = Предмет;
	КонецЕсли;
	
	ТекстЗапросаПоПроцессам = "";
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		Если Не БизнесПроцесс.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.СодержитТип(ТипЗнч(ПредметКонтроля)) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаПоПроцессам = ТекстЗапросаПоПроцессам +
			"ВЫБРАТЬ" + ?(ТекстЗапросаПоПроцессам = "", " РАЗРЕШЕННЫЕ " , "") + "
			|	Ссылка
			|		" + ?(ТекстЗапросаПоПроцессам = "", " ПОМЕСТИТЬ ПодчиненныеПроцессы " , "") + "
			|ИЗ
			|	БизнесПроцесс." + БизнесПроцесс.Имя + ".Предметы
			|ГДЕ 
			|	Предмет = &Предмет И РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
	КонецЦикла;	
	
	Если ТекстЗапросаПоПроцессам = "" Тогда 
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет = &Предмет
			|	И НЕ Контроль.ПометкаУдаления";
		
	Иначе
		
		ТекстЗапросаПоПроцессам = Лев(ТекстЗапросаПоПроцессам, СтрДлина(ТекстЗапросаПоПроцессам)-16);
		ТекстЗапросаПоПроцессам = ТекстЗапросаПоПроцессам + ";";
		
		ТекстЗапроса = ТекстЗапросаПоПроцессам + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеПроцессы КАК ПодчиненныеПроцессы
			|		ПО Контроль.Предмет = ПодчиненныеПроцессы.Ссылка
			|ГДЕ
			|	НЕ Контроль.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет = &Предмет
			|	И НЕ Контроль.ПометкаУдаления";
			
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", ПредметКонтроля);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	   
КонецФункции

// Возвращает все карточки контроля по предмету в привилегированном режиме
// (в том числе карточки подчиненных процессов)
//
// Параметры
//    Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//
// Возвращаемое значение
//    Массив - всех карточек контроля по предмету
//
Функция ВсеКарточкиКонтроляПоПредмету(Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат КарточкиКонтроляПоПредмету(Предмет);
	
КонецФункции	

// Создает карточку контроля по бизнес-процессу Исполнение, Поручение, Комплексный процесс
//
// Параметры
//    БизнесПроцесс - БизнесПроцессОбъект - бизнес-процесс основание контроля
//
Процедура СоздатьКарточкуКонтроляПоПроцессу(БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не БизнесПроцесс.Стартован Тогда 
		Возврат;
	КонецЕсли;
	
	// проверка, что карточка уже есть
	ВсеКарточкиКонтроля = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Контроль КАК Контроль
	|ГДЕ
	|	Контроль.Ссылка В(&ВсеКарточкиКонтроля)
	|	И Контроль.Контролер = &Контролер
	|	И Контроль.ПоставленНаКонтроль
	|	И НЕ Контроль.СнятСКонтроля";
	
	Запрос.УстановитьПараметр("ВсеКарточкиКонтроля", ВсеКарточкиКонтроля);
	Запрос.УстановитьПараметр("Контролер", БизнесПроцесс.Контролер);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	НовыйЭлемент = Справочники.Контроль.СоздатьЭлемент();
	НовыйЭлемент.Контролер = БизнесПроцесс.Контролер;
	НовыйЭлемент.Заполнить(БизнесПроцесс.Ссылка);
	НовыйЭлемент.Записать();
	
КонецПроцедуры	

// Находит карточку контроля по предмету и контролеру
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//  Контролер - СправочникСсылка.Пользователи, СправочникСсылка.ПолныеРоли  - проверяемый контролер.
//
// Возвращаемое значение
//    Ссылка - Справочник.Контроль - если по анализируемым параметрам найдена контрольная карточка,
//	 		 - Неопределено, в противном случае
//
Функция НайтиКарточкуКонтроляПоПредметуИКонтролеру(Предмет, 
	Контролер, 
	ПометкаУдаления = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Предмет
		|	И Контроль.Контролер = &Контролер
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля";
		
	Если ПометкаУдаления <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Контроль.ПометкаУдаления = &ПометкаУдаления ";
		Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	КонецЕсли;		
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Контролер", Контролер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создает строку контроля по задаче исполнителя
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - основание для создания строки контроля
//
Процедура СоздатьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача.Исполнитель)
		И Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	Если БизнесПроцесс = Неопределено Тогда 
		БизнесПроцесс = Задача.БизнесПроцесс;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
	
		НоваяСтрока = КонтрольОбъект.Исполнители.Добавить();
		НоваяСтрока.Источник = Задача.Ссылка;
	
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
			НоваяСтрока.Исполнитель = Задача.Исполнитель;
		Иначе
			НоваяСтрока.Исполнитель = Задача.РольИсполнителя;
		КонецЕсли;	
			
		КонтрольОбъект.Записать();
	КонецЦикла;	
	
	// обновление карточки контроля комплексного процесса
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ВедущаяЗадача");
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда 
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		СоздатьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры	

// Обновляет строку контроля по задаче исполнителя
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - основание контроля
//
Процедура ЗаполнитьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача.Исполнитель)
		И Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда 
		Возврат;
	КонецЕсли;
	
	Если БизнесПроцесс = Неопределено Тогда 
		БизнесПроцесс = Задача.БизнесПроцесс;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		НайденнаяСтрока = КонтрольОбъект.Исполнители.Найти(Задача.Ссылка, "Источник");
		Если НайденнаяСтрока = Неопределено Тогда 
			Для Каждого Строка Из КонтрольОбъект.Исполнители Цикл
				Если ЗначениеЗаполнено(Строка.Источник) Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") И Строка.Исполнитель = Задача.Исполнитель Тогда 
				 	НайденнаяСтрока = Строка;
					Прервать;
				ИначеЕсли ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") 
					И Строка.Исполнитель = Задача.РольИсполнителя Тогда
					НайденнаяСтрока = Строка;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
		Если НайденнаяСтрока = Неопределено Тогда 
			Если ТипЗнч(КонтрольОбъект.Контролер) = Тип("СправочникСсылка.Пользователи") И КонтрольОбъект.Контролер = Задача.Исполнитель Тогда 
				Продолжить;
			ИначеЕсли ТипЗнч(КонтрольОбъект.Контролер) = Тип("СправочникСсылка.ПолныеРоли")
				И КонтрольОбъект.Контролер = Задача.РольИсполнителя Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = КонтрольОбъект.Исполнители.Добавить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
			НайденнаяСтрока.Исполнитель = Задача.Исполнитель;
		Иначе
			НайденнаяСтрока.Исполнитель = Задача.РольИсполнителя;
		КонецЕсли;	
		
		НайденнаяСтрока.Источник = Задача.Ссылка;
		НайденнаяСтрока.Исполнено = Задача.Выполнена;
		НайденнаяСтрока.ДатаИсполнения = Задача.ДатаИсполнения;
		
		КонтрольОбъект.Записать();
	КонецЦикла;
	
	// обновление карточки контроля комплексного процесса
	Если БизнесПроцесс = Задача.БизнесПроцесс Тогда 
	
		ВедущиеПроцессы = Новый Массив;
		ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ВедущаяЗадача");
		Пока ЗначениеЗаполнено(ВедущаяЗадача) Цикл
			ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			ВедущиеПроцессы.Добавить(ВедущийПроцесс);
			ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийПроцесс, "ВедущаяЗадача");
		КонецЦикла;	
	
		Для Каждого ВедущийПроцесс Из ВедущиеПроцессы Цикл
			ЗаполнитьСтрокуКонтроляПоЗадаче(Задача, ВедущийПроцесс);
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Обновляет карточку контроля по задаче исполнителя
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - основание контроля
//
Процедура ЗаполнитьКонтрольПоЗадаче(Задача) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача.Исполнитель)
		И Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда 
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(Задача.Ссылка);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		Если КонтрольОбъект.Исполнители.Количество() > 0 Тогда 
			НайденнаяСтрока = КонтрольОбъект.Исполнители[0];
		Иначе
			НайденнаяСтрока = КонтрольОбъект.Исполнители.Добавить();
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
			НайденнаяСтрока.Исполнитель = Задача.Исполнитель;
		Иначе
			НайденнаяСтрока.Исполнитель = Задача.РольИсполнителя;
		КонецЕсли;	
		
		НайденнаяСтрока.Источник = Задача.Ссылка;
		НайденнаяСтрока.Исполнено = Задача.Выполнена;
		НайденнаяСтрока.ДатаИсполнения = Задача.ДатаИсполнения;
		
		Если Задача.ДополнительныеСвойства.Свойство("СтарыйСрокИсполнения") Тогда 
			СтарыйСрокИсполнения = Задача.ДополнительныеСвойства.СтарыйСрокИсполнения;
			Если НачалоДня(СтарыйСрокИсполнения) = КонтрольОбъект.СрокИсполнения
			   И НачалоДня(Задача.СрокИсполнения) <> КонтрольОбъект.СрокИсполнения Тогда 
				КонтрольОбъект.СрокИсполнения = Задача.СрокИсполнения;
			КонецЕсли;	
		КонецЕсли;	
		
		КонтрольОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удаляет или создает строку контроля по задаче исполнителя
//
// Параметры:
//  Задача  - ЗадачаОбъект.ЗадачаИсполнителя - основание контроля
//  Отметка - Булево - значение свойства ПометкаУдаления. 
//
Процедура ОтметитьУдалениеСтрокиКонтроляПоЗадаче(Задача, Отметка, БизнесПроцесс = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если БизнесПроцесс = Неопределено Тогда 
		БизнесПроцесс = Задача.БизнесПроцесс;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		Если Отметка Тогда 
			КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
			НайденнаяСтрока = КонтрольОбъект.Исполнители.Найти(Задача.Ссылка, "Источник");
			Если НайденнаяСтрока <> Неопределено Тогда 
				КонтрольОбъект.Исполнители.Удалить(НайденнаяСтрока);
				КонтрольОбъект.Записать();
			КонецЕсли;
		Иначе
			СоздатьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	// обновление карточки контроля комплексного процесса
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ВедущаяЗадача");
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда 
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		ОтметитьУдалениеСтрокиКонтроляПоЗадаче(Задача, Отметка, БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры	

// Изменяет реквизит Источник в строке контрольной карточки
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//  СтарыйИсточник - Строка.ЗадачаИсполнителя
//  НовыйИсточник - ЗадачаСсылка
Процедура УстановитьНовыйИсточникВСтрокеКонтроля(Предмет, СтарыйИсточник, НовыйИсточник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйИсточник) Тогда 
		Возврат;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		НайденнаяСтрока = КонтрольОбъект.Исполнители.Найти(СтарыйИсточник, "Источник");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.Источник = НовыйИсточник;
			НайденнаяСтрока.Проконтролировано = Ложь;
			НайденнаяСтрока.ДатаКонтроля = '00010101';
			Если Не ЗначениеЗаполнено(НовыйИсточник) Тогда 
				НайденнаяСтрока.Исполнено = Ложь;
				НайденнаяСтрока.ДатаИсполнения = '00010101';
			КонецЕсли;
			КонтрольОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Изменяет реквизит Источник в строке контрольной карточки
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//  СтруктураИсполнитель - Структура - структура с ключом Исполнитель.
//  НовыйИсточник - ЗадачаСсылка
Процедура УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Предмет, СтруктураИсполнитель, НовыйИсточник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроляПоПредмету = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		НайденнаяСтрока = Неопределено;
		НайтиСтрокуКонтроляПоИсполнителю(КонтрольОбъект, СтруктураИсполнитель, НайденнаяСтрока);
		Если НайденнаяСтрока = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Источник) Тогда 
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.Источник = НовыйИсточник;
		НайденнаяСтрока.Проконтролировано = Ложь;
		НайденнаяСтрока.ДатаКонтроля = '00010101';
		
		Если Не ЗначениеЗаполнено(НовыйИсточник) Тогда 
			НайденнаяСтрока.Исполнено = Ложь;
			НайденнаяСтрока.ДатаИсполнения = '00010101';
		КонецЕсли;	
		
		КонтрольОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры	

// Устанавливает видимость, подсказку, картинку для кнопки контроля в письме
// Параметры
//  Форма  - УправляемаяФорма - форма карточки письма.
//
Процедура УстановитьСвойстваКнопкиКонтроляПисьма(Форма) Экспорт 
	
	Объект = Форма.Объект;
	Письмо = Форма.Объект.Ссылка;
	ЭлементКонтроль = Форма.Команды.Контроль;
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Форма.Элементы.Контроль.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВеткаПереписки = Неопределено;
	Если ЗначениеЗаполнено(Письмо) Тогда 
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Письмо);
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ИсходящееПисьмо") 
			И ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда 
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Объект.ПисьмоОснование);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВеткаПереписки) Тогда 
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаКонтроль24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Не стоит на контроле'; en = 'Not monitored'");
		Возврат;
	КонецЕсли;	
	
	СведенияОКонтроле = ПолучитьСведенияОКонтроле(ВеткаПереписки);
	Если Не ЗначениеЗаполнено(СведенияОКонтроле.СостояниеКонтроля) Тогда 
		
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаКонтроль24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Не стоит на контроле'; en = 'Not monitored'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроля Тогда 
	
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаСнятоСКонтроля24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Снято с контроля'; en = 'Monitoring stopped'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтроле Тогда 
	
		Если ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполнения) И ТекущаяДата > СведенияОКонтроле.СрокИсполнения Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаКонтрольПросрочено24;
		Иначе	
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаНаКонтроле24;
		КонецЕсли;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'На контроле'; en = 'Monitored'");
	
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтролеНесколько Тогда 
		
		Если Не ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполнения) Или СведенияОКонтроле.СрокИсполнения >= ТекущаяДата Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.НаКонтролеНесколько24;
		ИначеЕсли Не ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполненияОбщий) Или СведенияОКонтроле.СрокИсполненияОбщий >= ТекущаяДата Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.НаКонтролеНесколькоСмешанно24;
		Иначе
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.НаКонтролеНесколькоПросрочено24;
		КонецЕсли;	
		ЭлементКонтроль.Подсказка = НСтр("ru = 'На контроле (несколько)'; en = 'Monitored (several)'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроляНесколько Тогда 
		
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.СнятСКонтроляНесколько24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Снят с контроля (несколько)'; en = 'Monitoring stopped (several)'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.СмешанноНесколько Тогда 	
		
		Если Не ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполнения) Или СведенияОКонтроле.СрокИсполнения >= ТекущаяДата Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.СнятСКонтроляСмешанноНеПросрочено24;
		Иначе
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.СнятСКонтроляСмешанноПросрочено24;
		КонецЕсли;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'На контроле и снят с контроля'; en = 'Monitoring state'");
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает Состояние контроля и Срок исполнения из данных контрольных карточек
// (не учитываются карточки подчиненных процессов)
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//
// Возвращаемое значение
//    Структура - содержит в себе Состояние контроля и Срок исполнения
//
Функция ПолучитьСведенияОКонтроле(Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контроль.Ссылка,
		|	Контроль.СнятСКонтроля,
		|	Контроль.ПоставленНаКонтроль,
		|	Контроль.СрокИсполнения
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.Предмет = &Предмет";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда 
		
		СрокИсполнения = '00010101';
		СрокИсполненияОбщий = '00010101';
		СостояниеКонтроля = Перечисления.СостоянияКонтроля.ПустаяСсылка();
		
	ИначеЕсли Результат.Количество() = 1 Тогда 
		
		СрокИсполнения = Результат[0].СрокИсполнения;
		СрокИсполненияОбщий = СрокИсполнения;
		Если Результат[0].СнятСКонтроля Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроля;
		Иначе
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтроле;
		КонецЕсли;	
		
	Иначе
		
		Если Результат.Найти(Истина, "СнятСКонтроля") <> Неопределено
			И Результат.Найти(Ложь, "СнятСКонтроля") <> Неопределено Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СмешанноНесколько;
		ИначеЕсли Результат.Найти(Истина, "СнятСКонтроля") <> Неопределено Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроляНесколько;
		Иначе	
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтролеНесколько;
		КонецЕсли;	
		
		СрокИсполненияКеш = '39990101';
		СрокИсполненияОбщийКеш = '00010101';
		ЕстьПустойСрок = Ложь;
		Для Каждого Строка Из Результат Цикл 
			Если Строка.СнятСКонтроля Тогда 
				Продолжить;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Строка.СрокИсполнения) И Строка.СрокИсполнения < СрокИсполненияКеш Тогда 
				СрокИсполненияКеш = Строка.СрокИсполнения;
			КонецЕсли;
			Если Строка.СрокИсполнения > СрокИсполненияОбщийКеш Тогда 
				СрокИсполненияОбщийКеш = Строка.СрокИсполнения;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
				ЕстьПустойСрок = Истина;
			КонецЕсли;	
		КонецЦикла;	
		Если СрокИсполненияКеш = '39990101' Тогда 
			СрокИсполненияКеш = '00010101';
		КонецЕсли;	
		Если ЕстьПустойСрок Тогда 
			СрокИсполненияОбщийКеш = '00010101';
		КонецЕсли;
		
	КонецЕсли;	
	
	Результат = Новый Структура("СостояниеКонтроля, СрокИсполнения, СрокИсполненияОбщий",
		СостояниеКонтроля, СрокИсполнения, СрокИсполненияОбщий);
	
	Возврат Результат;
	
КонецФункции	

// Возвращает Состояние контроля и Срок исполнения из кеша
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//
// Возвращаемое значение
//    Структура - содержит в себе Состояние контроля и Срок исполнения
//
Функция ПолучитьСведенияОКонтролеИзКеша(Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("СостояниеКонтроля, СрокИсполнения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КешИнформацииОбОбъектах.СостояниеКонтроля,
		|	КешИнформацииОбОбъектах.СрокИсполнения
		|ИЗ
		|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|ГДЕ
		|	КешИнформацииОбОбъектах.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Заполняет список контролеров в карточке контроля
//
// Параметры:
//  Контролеры - список значений - заполняемый список контролеров
//  ЭлементКонтролер - поле формы - контролер объекта
//
Процедура ЗаполнитьСписокКонтролеров(Контролеры, ЭлементКонтролер, ЭлементКонтролерБезПользовательскойВидимости) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СправочникКонтроль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль");
	ЕстьДелегированные = Ложь;
	ЕстьПодчиненные = Ложь;
	ЕстьРоли = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &СправочникКонтроль
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("СправочникКонтроль", СправочникКонтроль);
	ОбластиДелегирования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДелегированиеПрав.ОтКого
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|		ПО ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
		|ГДЕ
		|	ДелегированиеПрав.Кому = &ТекущийПользователь
		|	И ДелегированиеПрав.Действует
		|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ЕстьДелегированные = Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Контролеры.Добавить(Выборка.ОтКого);
	КонецЦикла;	
	
	// добавление подчиненных
	Если РаботаСПользователями.ЭтоРуководитель(ТекущийПользователь)
		И Константы.ДобавлятьРуководителямДоступПодчиненных.Получить() Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодчиненностьСотрудников.Подчиненный
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &ТекущийПользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|		ПО (ПодчиненностьСотрудников.Подчиненный = ИсполнителиЗадач.Исполнитель)
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &ТекущийПользователь";
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			ЕстьПодчиненные = Истина;
		КонецЕсли;	
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Контролеры.Добавить(Выборка.Подчиненный);
		КонецЦикла;
		
	КонецЕсли;
	
	// добавление ролей
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|		ПО (ДелегированиеПрав.ОтКого = ИсполнителиЗадач.Исполнитель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|		ПО (ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка)
		|ГДЕ
		|	ДелегированиеПрав.Кому = &ТекущийПользователь
		|	И ДелегированиеПрав.Действует
		|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ЕстьРоли = Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Контролеры.Добавить(Выборка.РольИсполнителя);
	КонецЦикла;	
	
	Если (Контролеры.Количество() = 0) Или 
		(ЕстьПодчиненные И Не ЕстьДелегированные И Не ЕстьРоли) Тогда 
		ЭлементКонтролер.Видимость = Ложь;
		ЭлементКонтролерБезПользовательскойВидимости.Видимость = Истина;
	КонецЕсли;	
		
	Если Контролеры.НайтиПоЗначению(ТекущийПользователь) = Неопределено Тогда 
		Контролеры.Добавить(ТекущийПользователь);
	КонецЕсли;	
		
	Контролеры.СортироватьПоЗначению();
	
КонецПроцедуры	

// Обработка команды Контроль
Процедура ОбработкаКомандыКонтроль(Знач Предмет, ИмяФормы, ПараметрыФормы) Экспорт 

	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет) Тогда 
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Предмет);
	КонецЕсли;	
	
	ВсеКарточки = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Результат = Контроль.КарточкиКонтроляПоПредмету(Предмет);
	
	Если ВсеКарточки.Количество() > Результат.Количество() Тогда 
		
		Если ВсеКарточки.Количество() = 1 Тогда 
			ИмяФормы = "Справочник.Контроль.Форма.НедоступнаяКарточка";
			ПараметрыФормы = Новый Структура("Ключ, Предмет", ВсеКарточки[0].Ссылка, Предмет);
		Иначе	
			ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
			ПараметрыФормы = Новый Структура("Предмет", Предмет);
		КонецЕсли;	
		
	ИначеЕсли Результат.Количество() > 1 Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 И Результат[0].СнятСКонтроля Тогда 	
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И ТипЗнч(Результат[0].Контролер) = Тип("СправочникСсылка.Пользователи") 
		И Результат[0].Контролер <> ПользователиКлиентСервер.ТекущийПользователь() Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет)
		И Результат[0].Предмет <> Предмет Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет)
		И Результат[0].Предмет <> ВеткаПереписки Тогда 	
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.ФормаЭлемента";
		ПараметрыФормы = Новый Структура("Ключ", Результат[0].Ссылка);	
		
	Иначе
		
		ИмяФормы = "Справочник.Контроль.Форма.ФормаНового";
		ПараметрыФормы = Новый Структура("Основание", Предмет);
		
	КонецЕсли;	
	
КонецПроцедуры

// Находит строчку в карточке контроля по адресату
//
// Параметры:
//  КарточкаКонтроля     - СправочникОбъект.Контроль - элемент справочника контроль
//  Адресат              - АдресатСсылка - ссылка на АдресатаПочтовыхСообщений
//  ВозврНайденнаяСтрока - строка таблицы Исполнители
//
Процедура НайтиСтрокуКонтроляПоАдресату(КарточкаКонтроля, Адресат, ВозврНайденнаяСтрока) Экспорт 
	
	АдресАдресата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
	
	ВозврНайденнаяСтрока = Неопределено;
	Для Каждого Строка Из КарточкаКонтроля.Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда 
			АдресИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Исполнитель, "Адрес");
			Если АдресИсполнителя = АдресАдресата Тогда 
				ВозврНайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Находит строчку в карточке контроля по исполнителю
//
// Параметры:
//  КарточкаКонтроля     - Справочник.Контроль - элемент справочника контроль
//  СтруктураИсполнитель - Структура - структура с ключом Исполнитель.
//  ВозврНайденнаяСтрока - строка таблицы Исполнители
//
Процедура НайтиСтрокуКонтроляПоИсполнителю(КарточкаКонтроля, СтруктураИсполнитель, ВозврНайденнаяСтрока) Экспорт 
	
	ВозврНайденнаяСтрока = Неопределено;
	
	Для Каждого Строка Из КарточкаКонтроля.Исполнители Цикл
		Если ТипЗнч(СтруктураИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
			Если Строка.Исполнитель = СтруктураИсполнитель.Исполнитель Тогда
				ВозврНайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				Если Строка.Исполнитель = СтруктураИсполнитель.Исполнитель Тогда
					ВозврНайденнаяСтрока = Строка;
					Прервать;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Строка.Источник) И ТипЗнч(Строка.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
				ДанныеИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Источник,
					"РольИсполнителя");
				Если ДанныеИсточника.РольИсполнителя = СтруктураИсполнитель.Исполнитель Тогда
					ВозврНайденнаяСтрока = Строка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление предмета контроля
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - анализируемый предмет
//
// Возвращаемое значение
//    ПредставлениеПредмета - Строка - содержит в себе наименование и тип предмета
//
Функция СформироватьПредставлениеПредмета(Предмет) Экспорт 
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат "";
	КонецЕсли;	
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
		Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "КорневоеПисьмо");
	Иначе
		Объект = Предмет;
 	КонецЕсли;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект) Тогда 
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Тема");
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Наименование");
	Иначе
		Наименование = Строка(Объект);
 	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Метаданные().ПредставлениеОбъекта) Тогда 
		ПредставлениеОбъекта = Объект.Метаданные().ПредставлениеОбъекта; 
	Иначе 	
		ПредставлениеОбъекта = Объект.Метаданные().Синоним;
	КонецЕсли;
		
	ПредставлениеПредмета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
		Наименование, ПредставлениеОбъекта);
		
	Возврат ПредставлениеПредмета;

КонецФункции

// Проверяет что предмет уже поставлен на контроль указанным контролером
//
// Параметры:
//  Предмет          - Ссылка на предмет справочника Контроль - анализируемый предмет
//  Контролер        - ПользовательСсылка  - проверяемый контролер
//  КарточкаКонтроля - Справочник.Контроль - элемент справочника контроль
//
// Возвращаемое значение
//    Булево - Истина, если предмет уже поставлен на контроль указанным контролером
//
Функция ПредметНаКонтролеУКонтролера(Предмет, Контролер, КарточкаКонтроля) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.Предмет = &Предмет
		|	И Контроль.Контролер = &Контролер
		|	И Контроль.Ссылка <> &КарточкаКонтроля";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Контролер", Контролер);
	Запрос.УстановитьПараметр("КарточкаКонтроля", КарточкаКонтроля);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Записывает в реквизит Источник строки контрольной карточки
// ссылку на последнее письмо в переписке
//
// Параметры:
//  ВеткаПереписки - Справочник.ВеткиПереписки - элемент справочника ветки переписки
//  Письмо         - Документ.ИсходящееПисьмо
//                 - Документ.ВходящееПисьмо - отмечаемое письмо
//
Процедура ОтметитьПоследнееПисьмоВКонтрольнойКарточке(ВеткаПереписки, Письмо) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Предмет
		|	И НЕ Контроль.ПометкаУдаления
		|	И НЕ Контроль.СнятСКонтроля";
	
	Запрос.УстановитьПараметр("Предмет", ВеткаПереписки);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	МассивАдресатов = Новый Массив;
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда 
		МассивАдресатов.Добавить(Письмо.ОтправительАдресат);
	Иначе
		Для Каждого Строка Из Письмо.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;	
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрольОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого Адресат Из МассивАдресатов Цикл
			НайденнаяСтрока = Неопределено;
			Контроль.НайтиСтрокуКонтроляПоАдресату(КонтрольОбъект, Адресат, НайденнаяСтрока);
			Если НайденнаяСтрока = Неопределено Тогда 
				НайденнаяСтрока = КонтрольОбъект.Исполнители.Добавить();
				НайденнаяСтрока.Исполнитель = Адресат;
			КонецЕсли;	
			Если НайденнаяСтрока.Проконтролировано Тогда 
				Продолжить;
			КонецЕсли;
			НайденнаяСтрока.Источник = Письмо;
		КонецЦикла;	
		КонтрольОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

// Обновляет карточку контроля по процессу с контролером
// вызывается при записи процесса
//
// Параметры:
//  Объект - СправочникОбъект.Контроль - элемент справочника Контроль
//
Процедура ПриЗаписиПроцессаСКонтролером(Объект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = Объект.Ссылка;
	Стартован = Объект.Стартован;
	ПометкаУдаления = Объект.ПометкаУдаления;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	Контролер = Объект.Контролер;
	СрокИсполненияПроцесса = Объект.СрокИсполненияПроцесса;
	СостояниеБизнесПроцесса = Объект.Состояние;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") И Стартован Тогда 
		
		Если Не ДополнительныеСвойства.БылСтартован Тогда 
			
			Контроль.СоздатьКарточкуКонтроляПоПроцессу(Объект);
			
		ИначеЕсли ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда 	
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, 
				ДополнительныеСвойства.ПредыдущаяПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЕсли;	
			
		ИначеЕсли СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда 
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, Ложь);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.СнятСКонтроля = Истина;
				КарточкаКонтроляОбъект.ДатаСнятияСКонтроля = ТекущаяДата();
				
				Для Каждого Строка Из КарточкаКонтроляОбъект.Исполнители Цикл
					Если Не Строка.Проконтролировано Тогда 
						Строка.Проконтролировано = Истина;
						Строка.ДатаКонтроля = ТекущаяДата();
					КонецЕсли;
				КонецЦикла;
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДополнительныеСвойства.СтарыйКонтролер) И ЗначениеЗаполнено(Контролер) Тогда 
			
			Контроль.СоздатьКарточкуКонтроляПоПроцессу(Объект);
			
		ИначеЕсли ЗначениеЗаполнено(ДополнительныеСвойства.СтарыйКонтролер) И Не ЗначениеЗаполнено(Контролер) Тогда 	
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				ДополнительныеСвойства.СтарыйКонтролер, 
				ПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.СтарыйКонтролер <> Контролер Тогда 	
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				ДополнительныеСвойства.СтарыйКонтролер, 
				ПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.Контролер = Контролер;
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.Свойство("СтарыйСрокИсполненияПроцесса")
			И ДополнительныеСвойства.СтарыйСрокИсполненияПроцесса <> СрокИсполненияПроцесса Тогда
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, 
				ДополнительныеСвойства.ПредыдущаяПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.СрокИсполнения = СрокИсполненияПроцесса;
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Добавляет контролеров по предмету в переданную таблицу
// для последующей записи в рабочую группу
//
// Параметры:
//  ТаблицаНабора - таблица значений - для записи в рабочую группу
//  Предмет       - Ссылка на предмет справочника Контроль - анализируемый предмет
//
Процедура ДобавитьКонтролеровВТаблицу(ТаблицаНабора, Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Или 
		Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроля = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Для Каждого КарточкаКонтроля Из КарточкиКонтроля Цикл
		РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КарточкаКонтроля,
			"Контролер");
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			РеквизитыКонтроля.Контролер);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет что предмет является процессом с реквизитом Контролер
//
// Параметры:
//  Предмет          - Ссылка на предмет справочника Контроль - анализируемый предмет
//
// Возвращаемое значение
//    Булево - Истина, если предмет является процессом с реквизитом Контролер
//
Функция ЭтоПроцессСКонтролером(Предмет) Экспорт 
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.Исполнение")
		Или ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.Поручение");
		
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
