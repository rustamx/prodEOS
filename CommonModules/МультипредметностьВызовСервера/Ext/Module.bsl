////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль МультипредметностьВызовСервера: сервер, вызов сервера
//
// Содержит процедуры и функции, обрабатываемые на сервере при вызове с клиента.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Ищет ссылку на элемент справочника ИменаПредметов по наименованию.
// Если не находит элемент, то создает его.
// Возвращает ссылку на найденное (созданное) имя предмета.
//
Функция ПолучитьСсылкуНаИмяПредмета(Наименование = Неопределено) Экспорт
	
	Если Наименование = Неопределено Тогда
		Наименование = НСтр("ru='Предмет'; en = 'Subject'");
	ИначеЕсли ПустаяСтрока(Наименование) Тогда
		Возврат Справочники.ИменаПредметов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаПредметов.Ссылка
		|ИЗ
		|	Справочник.ИменаПредметов КАК ИменаПредметов
		|ГДЕ
		|	ИменаПредметов.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Элемент = Справочники.ИменаПредметов.СоздатьЭлемент();
		Элемент.Наименование = Наименование;
		Элемент.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ИмяПредмета = Элемент.Ссылка;
	Иначе
		ИмяПредмета = Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат ИмяПредмета;
	
КонецФункции

// Возвращает ссылку на имя предмета по ссылке на предмет
//
Функция ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет, ИсходныеИменаПредметов = Неопределено) Экспорт
	
	МетаданныеПредмета = Предмет.Метаданные();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПредмета.ПолноеИмя());

	Попытка 
		СтрокаИмениПредмета = Менеджер.ПолучитьИмяПредметаПоУмолчанию(Предмет);
	Исключение
		СтрокаИмениПредмета = МетаданныеПредмета.ПредставлениеОбъекта;
		Если ПустаяСтрока(СтрокаИмениПредмета) Тогда
			СтрокаИмениПредмета = МетаданныеПредмета.Имя;
		КонецЕсли;
	КонецПопытки;
	
	Если ИсходныеИменаПредметов <> Неопределено Тогда
		МаксимальноеИмя = "";
		МаксимальныйНомерИмени = 0;
		Для Каждого ТекущееИмяПредмета Из ИсходныеИменаПредметов Цикл
			СтрокаТекущегоИмениПредмета = Строка(ТекущееИмяПредмета);
			Если Найти(СтрокаТекущегоИмениПредмета, СтрокаИмениПредмета) <> 0 Тогда
				Номер = СокрЛП(СтрЗаменить(СтрокаТекущегоИмениПредмета, СтрокаИмениПредмета,""));
				
				Если ПустаяСтрока(Номер) Тогда
					НомерТекущегоИмени = 0;
				Иначе
					Попытка
						НомерТекущегоИмени = Число(Номер);
					Исключение
						// Если оставшаяся часть имени не является числом,
						// то это другое имя предмета - прекращаем текущую итерацию.
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				Если НомерТекущегоИмени >= МаксимальныйНомерИмени Тогда
					МаксимальныйНомерИмени = НомерТекущегоИмени;
					МаксимальноеИмя = СтрокаТекущегоИмениПредмета;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Если Не ПустаяСтрока(МаксимальноеИмя) Тогда
			ЧисловаяЧасть = "0";
			ПозицияСимвола = 0;
			Пока СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧисловаяЧасть) Цикл 
				ЧисловаяЧасть = Прав(МаксимальноеИмя, ПозицияСимвола + 1);
				ПозицияСимвола = ПозицияСимвола + 1;
			КонецЦикла;
			Если ПозицияСимвола > 1 Тогда 
				ЧисловаяЧасть = Прав(МаксимальноеИмя, ПозицияСимвола);
			Иначе
				ЧисловаяЧасть = "0";
			КонецЕсли;
			СтрокаИмениПредмета = СтрокаИмениПредмета + " " + Формат(Число(ЧисловаяЧасть) + ?(Число(ЧисловаяЧасть) = 0, 2, 1), "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЕсли;
	ИмяПредмета = ПолучитьСсылкуНаИмяПредмета(СтрокаИмениПредмета);

	Возврат ИмяПредмета
	
КонецФункции

// Ищет корневой БП для задачи, устанавливает ему предмет,
// текущая форма задачи разблокируется, чтоб не мешать обновлению задач в дереве
//
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача из которой изменяется предмет.
//   ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы задачи.
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя изменяемого предмета.
//   Предмет - Ссылка на предмет.
//   Удаление - Булево - принимает значение Истина, если происходит удаление предмета из задачи. 
//
Процедура ИзменитьПредметКорневогоБизнесПроцесса(
	Задача, ИдентификаторФормы, ИмяПредмета, Предмет, Удаление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Предмет) И Не Удаление Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача, "БизнесПроцесс, ТочкаМаршрута, БизнесПроцесс.ВедущаяЗадача");
	
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	ВедущаяЗадача = РеквизитыЗадачи.БизнесПроцессВедущаяЗадача;
	
	РазблокироватьДанныеДляРедактирования(Задача, ИдентификаторФормы);
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		БП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Мультипредметность.ЗаписатьЗаполняемыйПредметКомплексногоПроцесса(
				БП, ИмяПредмета, Предмет, БизнесПроцесс, ТочкаМаршрута, Удаление);
		КонецЕсли;
	КонецЕсли;
	
	Мультипредметность.ЗаписатьПредметБизнесПроцесса(
		БизнесПроцесс, ИмяПредмета, Предмет, БизнесПроцесс, ТочкаМаршрута, Удаление);
	
КонецПроцедуры

// Ищет корневой БП для задачи, устанавливает ему предметы
//
Процедура ИзменитьПредметыКорневогоБизнесПроцесса(Задача, ИдентификаторФормы, Предметы, Удаление) Экспорт
	
	НачатьТранзакцию();
	
	Для Каждого СтрПредмет Из Предметы Цикл
		ИзменитьПредметКорневогоБизнесПроцесса(
			Задача, ИдентификаторФормы, СтрПредмет.ИмяПредмета, СтрПредмет.Предмет, Удаление);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает массив шаблонов по переданному массиву предметов
//
Функция ПолучитьШаблоныПоПредметам(Предметы, Тип, ТолькоНастроенные = Истина) Экспорт
	
	ШаблоныПоПредметам = Новый Массив;
	
	Если Предметы.Количество() = 0 Тогда 
		Возврат ШаблоныПоПредметам;
	КонецЕсли;
	
	ПредметыДокументы = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
			Или ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") 
			Или ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ПредметыДокументы.Добавить(Предмет);
		КонецЕсли;
	КонецЦикла;
	   
	Если ПредметыДокументы.Количество() = 0 Тогда    
		Возврат ШаблоныПоПредметам;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); // Если какая-то из таблиц не доступна, запрос не сработает.
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеДанные.ВидДокумента,
		|	ВсеДанные.Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВнутренниеДокументы.ВидДокумента КАК ВидДокумента,
		|		ВнутренниеДокументы.Организация КАК Организация
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВходящиеДокументы.ВидДокумента,
		|		ВходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|	ГДЕ
		|		ВходящиеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсходящиеДокументы.ВидДокумента,
		|		ИсходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|	ГДЕ
		|		ИсходящиеДокументы.Ссылка В(&ПредметыДокументы)) КАК ВсеДанные";
	
	
	Запрос.УстановитьПараметр("ПредметыДокументы", ПредметыДокументы);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ВидыДокументов = Результат.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	Организация = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	
	МассивВидовДокументаПолный = Новый Массив;
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		
		МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
		Для Каждого ВидДокументаМассива Из МассивВидовДокумента Цикл
			МассивВидовДокументаПолный.Добавить(ВидДокументаМассива);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Если Тип = "ШаблоныИсполнения" 
		Или Тип = "ШаблоныОзнакомления"
		Или Тип = "ШаблоныПоручения"
		Или Тип = "ШаблоныРассмотрения"
		Или Тип = "ШаблоныРегистрации"
		Или Тип = "ШаблоныСогласования"
		Или Тип = "ШаблоныУтверждения"
		Или Тип = "ШаблоныПриглашения"
		Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда 
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон
			|ИЗ
			|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
			|ГДЕ
			|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидДокумента)
			|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
			|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник." + Тип + ")";
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон
			|ИЗ
			|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
			|ГДЕ
			|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидДокумента)
			|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
			|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник.ШаблоныСоставныхБизнесПроцессов)
			|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ТипШаблона = &ТипШаблона";
		Запрос.УстановитьПараметр("ТипШаблона", Тип);
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ВидДокумента", МассивВидовДокументаПолный);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организация) ";
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Организация = Новый Массив;
			Организация.Добавить(Справочники.Организации.ПустаяСсылка());
			
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не ТолькоНастроенные И Результат.Пустой() Тогда
		
		Если Тип = "ШаблоныИсполнения" 
			Или Тип = "ШаблоныОзнакомления"
			Или Тип = "ШаблоныПоручения"
			Или Тип = "ШаблоныРассмотрения"
			Или Тип = "ШаблоныРегистрации"
			Или Тип = "ШаблоныСогласования"
			Или Тип = "ШаблоныУтверждения"
			Или Тип = "ШаблоныПриглашения"
			Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Шаблоны.Ссылка КАК Шаблон
				|ИЗ
				|	Справочник." + Тип + " КАК Шаблоны
				|ГДЕ
				|	0 В
				|			(ВЫБРАТЬ
				|				КОЛИЧЕСТВО(*)
				|			ИЗ
				|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
				|			ГДЕ
				|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ШаблоныСоставныхБизнесПроцессов.Ссылка КАК Шаблон
				|ИЗ
				|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
				|ГДЕ
				|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = &ТипШаблона
				|	И 0 В
				|			(ВЫБРАТЬ
				|				КОЛИЧЕСТВО(*)
				|			ИЗ
				|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
				|			ГДЕ
				|				НастройкаШаблонов.ШаблонБизнесПроцесса = ШаблоныСоставныхБизнесПроцессов.Ссылка)";
			
			Запрос.УстановитьПараметр("ТипШаблона", Тип);
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка =  Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблоныПоПредметам.Добавить(Выборка.Шаблон);
	КонецЦикла;
	
	Возврат ШаблоныПоПредметам;
	
КонецФункции

// Возвращает список типов предметов процесса
//
Функция ПолучитьСписокТиповПредметовПроцесса(ПроцессСсылка, РольПредмета = Неопределено) Экспорт
	
	Если РольПредмета = Перечисления.РолиПредметов.Основной Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроцессСсылка);
		СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(
			Менеджер.ПолучитьТипыОсновныхПредметов());
	Иначе
		СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(
			ПроцессСсылка.Метаданные().ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы());
	КонецЕсли;
	
	Возврат СписокТипов;

КонецФункции

// Возвращает список типов предметов процесса в зависимости от установленного ограничения типа в шаблоне
//
Функция ПолучитьОграничениеТиповИмениПредметаШаблона(ШаблонПроцесса, ИмяПредмета) Экспорт
	
	ВыборкаПредметов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонПроцесса, "Предметы");
	Предметы = ВыборкаПредметов.Выгрузить();
	
	СтрокиПредмета = Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",ИмяПредмета));
	
	СписокТипов = Новый СписокЗначений;
	Если СтрокиПредмета.Количество() <> 0 Тогда
		Предмет = СтрокиПредмета[0].Предмет;
		Если ТипЗнч(Предмет) <> Тип("Неопределено") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Предмет));
			СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// Заполняет данные выбора для автоподбора текста значения имени предмета
//
Процедура ПолучитьДанныеДляАвтоподбораИмениПредмета(ДанныеВыбора, Текст, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаПредметов.Ссылка
		|ИЗ
		|	Справочник.ИменаПредметов КАК ИменаПредметов
		|ГДЕ
		|	ИменаПредметов.Наименование ПОДОБНО ""%"" + &Наименование + ""%""";
	Запрос.УстановитьПараметр("Наименование", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру массивов структур по запросу данных табличных частей объекта
//
Функция ПолучитьЗначенияТабличныхРеквизитовДляКлиента(Ссылка, Реквизиты) Экспорт
	
	СтруктураВозврата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
	Для Каждого Элемент Из СтруктураВозврата Цикл
		МассивДанных = Новый Массив;
		ТаблицаДанных = Элемент.Значение.Выгрузить();
		Для Каждого Строка Из ТаблицаДанных Цикл
			СтруктураКолонок = Новый Структура;
			Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
				СтруктураКолонок.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
			КонецЦикла;
			МассивДанных.Добавить(СтруктураКолонок);
		КонецЦикла;
			
		СтруктураВозврата[Элемент.Ключ] = МассивДанных;
	КонецЦикла;

	Возврат СтруктураВозврата;
	
КонецФункции

// Вызывается при обработке оповещения "СозданФайл" в формах задач процессов и
// добавляет предмет в задачу и родительский процесс.
//
Процедура ОбработатьДобавлениеПредметаЗадачи(Задача, Процесс, Предмет, УникальныйИдентификатор) Экспорт
	
	МассивИменПредметов = ПолучитьМассивИменПредметовПоСсылкеНаПроцесс(Процесс);
	
	ИменаПредметов = Новый СписокЗначений;
	ИменаПредметов.ЗагрузитьЗначения(МассивИменПредметов);
	
	ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет, ИменаПредметов);
	
	МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
		Задача,
		УникальныйИдентификатор,
		ИмяПредмета,
		Предмет, 
		Ложь);
		
КонецПроцедуры

// Возвращает массив видов существующих предметов процесса
//
Функция ПолучитьМассивИменПредметовПоСсылкеНаПроцесс(Процесс) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПредметыПроцесса.ИмяПредмета
		|ИЗ
		|	БизнесПроцесс.%1.Предметы КАК ПредметыПроцесса
		| ГДЕ ПредметыПроцесса.Ссылка = &Процесс";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%1", Процесс.Метаданные().Имя);
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("ИмяПредмета");
	КонецЕсли;
	
КонецФункции

// Обрабатывает шаблоны этапов комплексного процесса, добавляет предмет в шаблоны и в предметы задач шаблонов
//
Процедура ДобавитьПредметВШаблоныПроцесса(ВладелецШаблонов, ШаблоныЭтапов, Знач ПредметыЗадач, СтрокаПредмета) Экспорт
		
	МассивТипов = Новый Массив;
	Для Каждого Шаблон Из ШаблоныЭтапов Цикл
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТипШаблона = ТипЗнч(Шаблон);
			Если МассивТипов.Найти(ТипШаблона) = Неопределено Тогда
				МассивТипов.Добавить(ТипШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	Если ТипыШаблонов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	Шаблон.Ссылка,
			|	Шаблон.Код,
			|	ВЫБОР
			|		КОГДА ПредметыШаблона.ИмяПредмета = &ИмяПредмета
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПредметДоступен
			|ИЗ
			|	%Таблица% Как Шаблон 
			|	ЛЕВОЕ СОЕДИНЕНИЕ %Таблица%.Предметы КАК ПредметыШаблона 
			|		ПО Шаблон.Ссылка = ПредметыШаблона.Ссылка И ПредметыШаблона.ИмяПредмета = &ИмяПредмета
			|ГДЕ 
			|	Шаблон.ШаблонВКомплексномПроцессе
			|	И Шаблон.Ссылка В (&ШаблоныЭтапов)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
		
	КонецЦикла;
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецШаблона", ВладелецШаблонов);
	Запрос.УстановитьПараметр("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
	Запрос.УстановитьПараметр("ШаблоныЭтапов", ШаблоныЭтапов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеРолей = Новый Соответствие;
		
	Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
		ПустойПредмет = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Ссылка.Метаданные().ПолноеИмя()).ПустаяСсылка();
	Иначе
		ПустойПредмет = СтрокаПредмета.Предмет;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПредметДоступен Тогда 
			Продолжить;
		КонецЕсли;
		
		ДобавитьПредметВШаблон(Выборка.Ссылка, ПредметыЗадач, СтрокаПредмета, СоответствиеДействий, СоответствиеРолей, ПустойПредмет);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает шаблоны этапов комплексного процесса, удаляет предмет из шаблонов по виду предмета
//
Процедура УдалитьПредметИзШаблоновПроцесса(ВладелецШаблонов, ШаблоныЭтапов, ИмяПредмета) Экспорт
	
	МассивТипов = Новый Массив;
	Для Каждого Шаблон Из ШаблоныЭтапов Цикл
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТипШаблона = ТипЗнч(Шаблон);
			Если МассивТипов.Найти(ТипШаблона) = Неопределено Тогда
				МассивТипов.Добавить(ТипШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	Если ТипыШаблонов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	ПредметыШаблона.Ссылка,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ПредметыШаблона.ИмяПредмета = &ИмяПредмета
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредметДоступен
			|ИЗ
			|	%Таблица%.Предметы КАК ПредметыШаблона
			|ГДЕ
			|	ПредметыШаблона.Ссылка.ШаблонВКомплексномПроцессе
			|	И ПредметыШаблона.Ссылка В (&ШаблоныЭтапов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПредметыШаблона.Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецШаблона", ВладелецШаблонов);
	Запрос.УстановитьПараметр("ИмяПредмета", ИмяПредмета);
	Запрос.УстановитьПараметр("ШаблоныЭтапов", ШаблоныЭтапов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Исполнитель,Проверяющий,Контролер");
	ИмяПредметаСтрокой = Строка(ИмяПредмета);
		
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ПредметДоступен Тогда 
			Продолжить;
		КонецЕсли;
		
		УдалитьПредметИзШаблона(Выборка.Ссылка, ИмяПредмета, ПроверяемыеРеквизиты, ИмяПредметаСтрокой);
		
	КонецЦикла;
	
	
КонецПроцедуры

// Обрабатывает шаблоны этапов комплексного процесса, заменяет вид предметов этапов
//
Процедура ЗаменитьИмяПредметаВШаблонахПроцесса(ВладелецШаблонов, ШаблоныЭтапов, ИсходноеИмяПредмета, ИмяПредмета) Экспорт
	
	МассивТипов = Новый Массив;
	Для Каждого Шаблон Из ШаблоныЭтапов Цикл
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТипШаблона = ТипЗнч(Шаблон);
			Если МассивТипов.Найти(ТипШаблона) = Неопределено Тогда
				МассивТипов.Добавить(ТипШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	Если ТипыШаблонов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	ПредметыШаблона.Ссылка
			|ИЗ
			|	%Таблица%.Предметы КАК ПредметыШаблона
			|ГДЕ
			|	ПредметыШаблона.Ссылка.ШаблонВКомплексномПроцессе
			|	И ПредметыШаблона.ИмяПредмета = &ИсходноеИмяПредмета
			|	И ПредметыШаблона.Ссылка В (&ШаблоныЭтапов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПредметыШаблона.Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсходноеИмяПредмета", ИсходноеИмяПредмета);
	Запрос.УстановитьПараметр("ШаблоныЭтапов", ШаблоныЭтапов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Исполнитель,Проверяющий,Контролер");
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("Исполнитель", "Исполнители");
		
	СтароеЗначениеСтрокой = Строка(ИсходноеИмяПредмета);
	НовоеЗначениеСтрокой = Строка(ИмяПредмета);
	
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ИзменяемыеСтроки = ШаблонОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИсходноеИмяПредмета));
		ИмяПредметаСуществует = ШаблонОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредмета)).Количество() > 0;
		Для Каждого Строка Из ИзменяемыеСтроки Цикл
			Если ИмяПредметаСуществует Тогда
				ШаблонОбъект.Предметы.Удалить(Строка);
			Иначе
				Строка.ИмяПредмета = ИмяПредмета;
			КонецЕсли;
		КонецЦикла;
		
		ИзменяемыеСтроки = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", ИсходноеИмяПредмета));
		ИмяПредметаСуществует = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредмета)).Количество() > 0;
		Для Каждого Строка Из ИзменяемыеСтроки Цикл
			Если ИмяПредметаСуществует Тогда
				ШаблонОбъект.ПредметыЗадач.Удалить(Строка);
			Иначе
				Строка.ИмяПредмета = ИмяПредмета;
			КонецЕсли;
		КонецЦикла;
		
		ИзменяемыеСтроки = ШаблонОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредметаОснование", ИсходноеИмяПредмета));
		Для Каждого Строка Из ИзменяемыеСтроки Цикл
			Строка.ИмяПредметаОснование = ИмяПредмета;
		КонецЦикла;
		
		ШаблонМетаданные = Выборка.Ссылка.Метаданные();
		
		Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
			Если ШаблонМетаданные.Реквизиты.Найти(Реквизит) <> Неопределено Тогда
				Если ТипЗнч(ШаблонОбъект[Реквизит]) = Тип("Строка") И Найти(ШаблонОбъект[Реквизит] + ".", СтароеЗначениеСтрокой + ".") = 1 Тогда
					ШаблонОбъект[Реквизит] = СтрЗаменить(ШаблонОбъект[Реквизит], СтароеЗначениеСтрокой, НовоеЗначениеСтрокой);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементСоответствия Из СоответствиеТаблиц Цикл
			Если ШаблонМетаданные.ТабличныеЧасти.Найти(ЭлементСоответствия.Значение) <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект[ЭлементСоответствия.Значение] Цикл
					Если ТипЗнч(Строка[ЭлементСоответствия.Ключ]) = Тип("Строка") 
					   И Найти(Строка[ЭлементСоответствия.Ключ] + ".", СтароеЗначениеСтрокой + ".") = 1 Тогда
							Строка[ЭлементСоответствия.Ключ] = СтрЗаменить(Строка[ЭлементСоответствия.Ключ], СтароеЗначениеСтрокой, НовоеЗначениеСтрокой);
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЦикла;
		
		Если ШаблонМетаданные.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
			Если ШаблонМетаданные.ТабличныеЧасти.Исполнители.Реквизиты.Найти("Условие") <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект.Исполнители Цикл
					Если Строка.ИмяПредметаУсловия = ИсходноеИмяПредмета Тогда
						Строка.ИмяПредметаУсловия = ИмяПредмета;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ШаблонОбъект.Ссылка) Тогда
			
			ШаблоныДействий = Новый Массив;
			
			Если ЗначениеЗаполнено(ШаблонОбъект.Схема) Тогда
				
				СхемаОбъект = ШаблонОбъект.Схема.ПолучитьОбъект();
				
				ЗаменитьИмяПредметаВУсловияхСхемыКомплексногоПроцесса(
					СхемаОбъект, ИсходноеИмяПредмета, ИмяПредмета);
				
				СхемаОбъект.Записать();
				
				Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
					Если ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
						ШаблоныДействий.Добавить(ПараметрыДействия.ШаблонПроцесса);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Если ШаблонМетаданные.ТабличныеЧасти.Найти("ПредшественникиЭтапов") <> Неопределено Тогда
					Для Каждого Строка Из ШаблонОбъект.ПредшественникиЭтапов Цикл
						Если Строка.ИмяПредметаУсловия = ИсходноеИмяПредмета Тогда
							Строка.ИмяПредметаУсловия = ИмяПредмета;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого СтрокаШаблона Из ШаблонОбъект.Этапы Цикл
					ШаблоныДействий.Добавить(СтрокаШаблона.ШаблонБизнесПроцесса);
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаменитьИмяПредметаВШаблонахПроцесса(ШаблонОбъект.Ссылка, ШаблоныДействий, ИсходноеИмяПредмета, ИмяПредмета)
			
		КонецЕсли;
		
		ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
			"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
		
	КонецЦикла;
	
КонецПроцедуры

// Заменяет имя предмета в условиях схемы комплексного процесса/шаблона.
//
// Параметры:
//  Схема - СправочникОбъект.СхемыКомплексныхПроцессов - объект схемы.
//  ИсходноеИмяПредмета - СправочникСсылка.ИменаПредметов - исходное имя предмета.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - новое имя предмета.
//
Процедура ЗаменитьИмяПредметаВУсловияхСхемыКомплексногоПроцесса(
	Схема, ИсходноеИмяПредмета, ИмяПредмета)
	
	Для Каждого ПараметрыУсловия Из Схема.ПараметрыУсловий Цикл
		
		Настройки = ПараметрыУсловия.НастройкиУсловия.Получить();
		
		МультипредметностьКлиентСервер.ЗаменитьИмяПредметаВУсловииСхемыПроцесса(
			Настройки.Отбор.Элементы, ИсходноеИмяПредмета, ИмяПредмета);
			
		ПараметрыУсловия.НастройкиУсловия = Новый ХранилищеЗначения(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает шаблоны этапа комплексного процесса (КП) по предметы у предметам задач КП
//
Процедура ОбновитьШаблоныПодДаннымПредметовЗадач(ВладелецШаблонов, ШаблоныЭтапов, Знач ПредметыЗадач, Знач СтрокаПредмета, РолиПредметовЭтапов = Неопределено) Экспорт
	
	МассивТипов = Новый Массив;
	Для Каждого Шаблон Из ШаблоныЭтапов Цикл
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТипШаблона = ТипЗнч(Шаблон);
			Если МассивТипов.Найти(ТипШаблона) = Неопределено Тогда
				МассивТипов.Добавить(ТипШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	Если ТипыШаблонов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ
			|	Шаблон.Ссылка,
			|	ВЫБОР
			|		КОГДА ПредметыШаблона.ИмяПредмета = &ИмяПредмета
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПредметДоступен
			|ИЗ
			|	%Таблица% Как Шаблон 
			|	ЛЕВОЕ СОЕДИНЕНИЕ %Таблица%.Предметы КАК ПредметыШаблона 
			|		ПО Шаблон.Ссылка = ПредметыШаблона.Ссылка И ПредметыШаблона.ИмяПредмета = &ИмяПредмета
			|ГДЕ 
			|	Шаблон.Ссылка В (&ШаблоныЭтапов)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
	Запрос.УстановитьПараметр("ШаблоныЭтапов", ШаблоныЭтапов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеРолей = Новый Соответствие;
		
	Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
		ПустойПредмет = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Ссылка.Метаданные().ПолноеИмя()).ПустаяСсылка();
	Иначе
		ПустойПредмет = СтрокаПредмета.Предмет;
	КонецЕсли;
	
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Исполнитель,Проверяющий,Контролер");
	ИмяПредметаСтрокой = Строка(СтрокаПредмета.ИмяПредмета);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокиПредметаШаблона = ПредметыЗадач.НайтиСтроки(Новый Структура("ШаблонБизнесПроцесса, ИмяПредмета", Выборка.Ссылка, СтрокаПредмета.ИмяПредмета));
		Если СтрокиПредметаШаблона.Количество() = 0 И Выборка.ПредметДоступен = Ложь Тогда
			Продолжить;
		ИначеЕсли СтрокиПредметаШаблона.Количество() = 0 И Выборка.ПредметДоступен = Истина Тогда
			УдалитьПредметИзШаблона(Выборка.Ссылка, СтрокаПредмета.ИмяПредмета, ПроверяемыеРеквизиты, ИмяПредметаСтрокой);
		ИначеЕсли СтрокиПредметаШаблона.Количество() > 0 И Выборка.ПредметДоступен = Ложь Тогда
			ДобавитьПредметВШаблон(Выборка.Ссылка, ПредметыЗадач, СтрокаПредмета, СоответствиеДействий, СоответствиеРолей, ПустойПредмет);
		ИначеЕсли СтрокиПредметаШаблона.Количество() > 0 И Выборка.ПредметДоступен = Истина Тогда
			Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Выборка.Ссылка) Тогда
				ОбновитьПредметВШаблоне(Выборка.Ссылка, ПредметыЗадач, СтрокаПредмета);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РолиПредметовЭтапов = Новый Массив;
	СхемаВладельцаШаблонов = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ВладелецШаблонов, "Схема");
	
	ТаблицаРолейПредметовЭтапов = Мультипредметность.ПолучитьРолиПредметовДействийКомплексногоПроцесса(
		ВладелецШаблонов, СхемаВладельцаШаблонов);
	
	Для Каждого Строка Из ТаблицаРолейПредметовЭтапов Цикл
		Структура = Новый Структура("ШаблонБизнесПроцесса, ИмяПредмета, РольПредмета");
		ЗаполнитьЗначенияСвойств(Структура, Строка);
		РолиПредметовЭтапов.Добавить(Структура);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие имен предметов предметам шаблона процесса
//
Функция ПолучитьИменаПредметовШаблона(Шаблон) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныИсполнения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныОзнакомления"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныПоручения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныРассмотрения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныРегистрации"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныСогласования"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныУтверждения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныПриглашения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов"));
	
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	ТекстЗапроса = "";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	ИмяПредмета КАК ИмяПредмета,
			|	Предмет КАК Предмет
			|ИЗ
			| %Таблица%.Предметы КАК ПредметыШаблона 
			|ГДЕ 
			|	ПредметыШаблона.Ссылка = &ШаблонСсылка";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ШаблонСсылка", Шаблон);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Соответствие;
	Иначе
		СоответствиеПредметов = Новый Соответствие;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеПредметов.Вставить(Выборка.ИмяПредмета, Выборка.Предмет);
		КонецЦикла;
		Возврат СоответствиеПредметов;
	КонецЕсли;
	
КонецФункции

// Вызывается при закрытии формы процесса, помечает на удаление файлы процесса, не входящие в процесс.
//
Процедура ПроцессПриЗакрытииНаСервере(ПроцессСсылка) Экспорт
	
	// Удалим файлы процесса, не входящие в процесс
	ТаблицаПроцесса = ПроцессСсылка.Метаданные().ПолноеИмя();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ %ТаблицаПроцесса%.Предметы КАК Предметы
		|		ПО Файлы.Ссылка = Предметы.Предмет
		|			И (Предметы.Ссылка = &ПроцессСсылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ПроцессСсылка
		|	И Предметы.Предмет ЕСТЬ NULL 
		|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаПроцесса%",ТаблицаПроцесса); 
		
	Запрос.УстановитьПараметр("ПроцессСсылка", ПроцессСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
			ФайлОбъект.Редактирует = Неопределено;
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ФайлОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
		
	
КонецПроцедуры

Функция ПолучитьПредметыПроцесса(
	ПроцессСсылка, ТолькоЗаполненные = Ложь, Основные = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	ПредметыПроцесса = Мультипредметность.ПолучитьПредметыПроцесса(ПроцессСсылка, ТолькоЗаполненные, Основные);
	
	Для Каждого СтрПредмет Из ПредметыПроцесса Цикл
		Результат.Добавить(СтрПредмет.Предмет);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Удаляет предмет по виду предмета из шаблона
//
Процедура УдалитьПредметИзШаблона(Шаблон, ИмяПредмета, ПроверяемыеРеквизиты, ИмяПредметаСтрокой)
	
	ШаблонОбъект = Шаблон.ПолучитьОбъект();
	
	УдаляемыеСтроки = ШаблонОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредмета));
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		ШаблонОбъект.Предметы.Удалить(Строка);
	КонецЦикла;
	УдаляемыеСтроки = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредмета));
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		ШаблонОбъект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	ОчищаемыеСтроки = ШаблонОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредметаОснование", ИмяПредмета));
	Для Каждого Строка Из ОчищаемыеСтроки Цикл
		Строка.ИмяПредметаОснование = Неопределено;
	КонецЦикла;
	
	ШаблонМетаданные = Шаблон.Метаданные();
	
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если ШаблонМетаданные.Реквизиты.Найти(Реквизит) <> Неопределено Тогда
			Если ТипЗнч(ШаблонОбъект[Реквизит]) = Тип("Строка") Тогда
				Если Найти(ШаблонОбъект[Реквизит] + ".", ИмяПредметаСтрокой + ".") = 1 Тогда
					ШаблонОбъект[Реквизит] = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ШаблонМетаданные.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из ШаблонОбъект.Исполнители Цикл
			Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И Найти(Строка.Исполнитель + ".", ИмяПредметаСтрокой + ".") = 1 Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			ШаблонОбъект.Исполнители.Удалить(Строка);
		КонецЦикла;
		Если ШаблонМетаданные.ТабличныеЧасти.Исполнители.Реквизиты.Найти("Условие") <> Неопределено Тогда
			Для Каждого Строка Из ШаблонОбъект.Исполнители Цикл
				Если Строка.ИмяПредметаУсловия = ИмяПредмета Тогда
					Строка.ИмяПредметаУсловия = Неопределено;
					Строка.Условие = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ШаблонОбъект.Ссылка) Тогда
		
		ШаблоныДействий = Новый Массив;
		
		Если ЗначениеЗаполнено(ШаблонОбъект.Схема) Тогда
			
			СхемаОбъект = ШаблонОбъект.Схема.ПолучитьОбъект();
			УдалитьУсловияСхемыКомплексногоПроцессаСИменемПредмета(СхемаОбъект, ИмяПредмета);
			СхемаОбъект.Записать();
			
			Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
				Если ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
					ШаблоныДействий.Добавить(ПараметрыДействия.ШаблонПроцесса);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если ШаблонМетаданные.ТабличныеЧасти.Найти("ПредшественникиЭтапов") <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект.ПредшественникиЭтапов Цикл
					Если Строка.ИмяПредметаУсловия = ИмяПредмета Тогда
						Строка.ИмяПредметаУсловия = Неопределено;
						Строка.УсловиеПерехода = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ШаблоныДействий = Новый Массив;
			Для Каждого СтрокаЭтапа Из ШаблонОбъект.Этапы Цикл
				ШаблоныДействий.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаПредмета = Новый Структура;
		СтрокаПредмета.Вставить("ИмяПредмета", ИмяПредмета);
		СтрокаПредмета.Вставить("Предмет", Неопределено);
		
		ОбновитьШаблоныПодДаннымПредметовЗадач(ШаблонОбъект.Ссылка, ШаблоныДействий, 
			ШаблонОбъект.ПредметыЗадач, СтрокаПредмета);
	КонецЕсли;
	
	ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
		"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
	
КонецПроцедуры

// Удаляет настройки условий схемы комплексного процесса с имя предмета.
//
// Параметры:
//  Схема - СправочникОбъект.СхемыКомплексныхПроцессов - объект схемы.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета.
//
Процедура УдалитьУсловияСхемыКомплексногоПроцессаСИменемПредмета(Схема, ИмяПредмета)
	
	Для Каждого ПараметрыУсловия Из Схема.ПараметрыУсловий Цикл
		
		Настройки = ПараметрыУсловия.НастройкиУсловия.Получить();
		
		МультипредметностьКлиентСервер.УдалитьОтборСИменемПредметаИзУсловийСхемы(
			Настройки.Отбор.Элементы, ИмяПредмета);
			
		ПараметрыУсловия.НастройкиУсловия = Новый ХранилищеЗначения(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет предмет в шаблон
//
Процедура ДобавитьПредметВШаблон(Шаблон, ПредметыЗадач, СтрокаПредмета, СоответствиеДействий, СоответствиеРолей, ПустойПредмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Шаблон);
	ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Шаблон);
	
	ШаблонОбъект = Шаблон.ПолучитьОбъект();
	
	ДоступныеРоли = СоответствиеРолей.Получить(ПроцессСсылка);
	Если ДоступныеРоли = Неопределено Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПроцессСсылка.Метаданные().ПолноеИмя());
		ДоступныеРоли = Менеджер.ПолучитьДоступныеРолиПредметов();
		СоответствиеРолей.Вставить(ПроцессСсылка, ДоступныеРоли);
	КонецЕсли;
	
	НоваяСтрока = ШаблонОбъект.Предметы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредмета);
	НоваяСтрока.Предмет = ПустойПредмет;
	
	Если ДоступныеРоли.Найти(СтрокаПредмета.РольПредмета) = Неопределено Тогда
		НоваяСтрока.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
		НоваяСтрока.ИмяПредметаОснование = Неопределено;
		НоваяСтрока.ШаблонОснование = Неопределено;
	КонецЕсли;
	
	ПредметыЗадачШаблона = ПредметыЗадач.НайтиСтроки(
		Новый Структура("ИмяПредмета, ШаблонБизнесПроцесса", СтрокаПредмета.ИмяПредмета, Шаблон));
	
	Для Каждого Строка Из ПредметыЗадачШаблона Цикл
		НоваяСтрока = ШаблонОбъект.ПредметыЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Если ЭтоКомплексныйПроцесс Тогда
		
		ШаблоныДействий = Новый Массив;
		Если ЗначениеЗаполнено(ШаблонОбъект.Схема) Тогда
			ПараметрыДействий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ШаблонОбъект.Схема, "ПараметрыДействий").Выгрузить();
			Для Каждого ПараметрыДействия Из ПараметрыДействий Цикл
				Если ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
					ШаблоныДействий.Добавить(ПараметрыДействия.ШаблонПроцесса);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаЭтапа Из ШаблонОбъект.Этапы Цикл
				ШаблоныДействий.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
			КонецЦикла;
		КонецЕсли;
		
		ДействияПроцесса = СоответствиеДействий.Получить(Шаблон);
		Если ДействияПроцесса = Неопределено Тогда
			ДействияПроцесса = Мультипредметность.ПолучитьДействияКомплексногоПроцесса(ШаблонОбъект);
			СоответствиеДействий.Вставить(Шаблон, ДействияПроцесса);
		КонецЕсли;
		
		Для Каждого ДействиеПроцесса Из ДействияПроцесса Цикл
			СтрокаПредметаЗадач = ШаблонОбъект.ПредметыЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадач, ДействиеПроцесса);
			СтрокаПредметаЗадач.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
		КонецЦикла;
		
		ОбновитьШаблоныПодДаннымПредметовЗадач(ШаблонОбъект.Ссылка, ШаблоныДействий, 
			ШаблонОбъект.ПредметыЗадач, СтрокаПредмета);
	КонецЕсли;
	
	ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
		"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
	
КонецПроцедуры

// Обновляет предметы задач шаблона по переданной таблице предметов задач
//
Процедура ОбновитьПредметВШаблоне(Шаблон, ПредметыЗадач, СтрокаПредмета)
	
	ШаблонОбъект = Шаблон.ПолучитьОбъект();
	
	ПредметыЗадачШаблона = ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета, ШаблонБизнесПроцесса", 
		СтрокаПредмета.ИмяПредмета, Шаблон));
	
	ИсходныеПредметыЗадачШаблона = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(
		Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета));
	
	Для Каждого Строка Из ИсходныеПредметыЗадачШаблона Цикл
		ШаблонОбъект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из ПредметыЗадачШаблона Цикл
		НоваяСтрока = ШаблонОбъект.ПредметыЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
		"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
	
КонецПроцедуры


