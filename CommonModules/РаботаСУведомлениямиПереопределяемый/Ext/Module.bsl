////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Фомирует список бизнес-событий, по которым необходим группировать уведомления.
//
// Параметры:
//  ВидыСобытий - Массив - Сформированные типовые виды событий для группировки.
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
// Возвращаемое значение:
//  Массив - Виды бизнес-событий для группировки.
//
Процедура ВидыСобытийДляГруппировки(ВидыСобытий, ПолучательУведомления, СпособУведомления) Экспорт
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
			ПолучательУведомления,
			Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
		Если ВключеноВыполнениеЗадачПоПочте Тогда
			Индекс = ВидыСобытий.Найти(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
			Если Индекс <> Неопределено Тогда
				ВидыСобытий.Удалить(Индекс);
			КонецЕсли;
			Индекс = ВидыСобытий.Найти(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
			Если Индекс <> Неопределено Тогда
				ВидыСобытий.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов переопределяемого метода для возможной корректировки состава вида событий для группировки.
	ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления);
	
КонецПроцедуры

// Заполняет таблицу доступных уведомлений с учетом функциональных опций.
//
// Параметры:
//  ДоступныеУведомления - ТаблицаЗначений - Доступные уведомления.
//
Функция ДоступныеУведомления(ДоступныеУведомления) Экспорт
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		
		// Выполнение моей задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Выполнение моей задачи'; en = 'My task has been performed'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Перенаправление моей задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Перенаправление моей задачи'; en = 'Forwarding of my task'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Остановка и прерывание процессов.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса;
		СтрокаУведомления.Представление = НСтр("ru = 'Остановка и прерывание процессов'; en = 'Process stop and termination'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Выполнение задач по почте.
		СтрокаУведомления = ДоступныеУведомления.Найти(Справочники.ВидыБизнесСобытий.СозданиеЗадачи, "ВидСобытия");
		Если СтрокаУведомления <> Неопределено Тогда
			ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
			ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте;
			ДополнительнаяНастройка.Представление = НСтр("ru = 'Использовать выполнение задач по почте'; en = 'Use task execution by email'");
			СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда
		
		// Появление ответа в форуме.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения;
		СтрокаУведомления.Представление = НСтр("ru = 'Появление ответа в форуме'; en = 'New forum reply'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		
		// Создание отсутствия.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия;
		СтрокаУведомления.Представление = НСтр("ru = 'Создание отсутствия'; en = 'Absence create'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение отсутствия.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия;
		СтрокаУведомления.Представление = НСтр("ru = 'Изменение отсутствия'; en = 'Absence change'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	// Уведомления программы.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы;
	СтрокаУведомления.Представление = НСтр("ru = 'Уведомления программы'; en = 'Application notifications'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		
		// Уведомление о просроченном контроле.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль;
		СтрокаУведомления.Представление = НСтр("ru = 'Просрочен контрольный срок'; en = 'Deadline is overdue'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля;
		СтрокаУведомления.Представление = НСтр("ru = 'Приближение контрольного срока'; en = 'Monitoring due date is approaching'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМониторингПроцессов") Тогда
		
		Если ПравоДоступа("Просмотр", Метаданные.Справочники.ПоказателиПроцессов) Тогда
			
			// Уведомление об изменении занчения показателя процессов.
			СтрокаУведомления = ДоступныеУведомления.Добавить();
			СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса;
			СтрокаУведомления.Представление = НСтр("ru = 'Изменение значения показателя процесса'; en = 'Process metric value has changed'");
			СтрокаУведомления.ДоступнаПодписка = Истина;
			СтрокаУведомления.ДоступнаЧастота = Ложь;
			СтрокаУведомления.ДоступенСрок = Ложь;
			
			// Процентное изменение показателя.
			ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
			ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ПроцентноеИзменение;
			ДополнительнаяНастройка.Представление = НСтр("ru = 'Процентное изменение показателя'; en = 'Metric has been changed by a percent'");
			СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		
		// Создание записи календаря.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря;
		СтрокаУведомления.Представление = НСтр("ru = 'Новая запись календаря'; en = 'New calendar entry'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		
		// Создание брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Создание брони'; en = 'Reservation create'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Изменение брони'; en = 'Reservation change'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеТочки") Тогда
		
		// Уведомление о просроченном контроле.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка;
		СтрокаУведомления.Представление = НСтр("ru = 'Просрочена контрольная точка'; en = 'Milestone is overdue'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки;
		СтрокаУведомления.Представление = НСтр("ru = 'Приближение контрольной точки'; en = 'Milestone is approaching'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки;
		СтрокаУведомления.Представление = НСтр("ru = 'Просрочена оценка контрольной точки'; en = 'Milestone estimation is overdue'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(
	Задача,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'; en = 'not specified'", КодЯзыка);
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтрШаблон("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
		
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ТребуетсяДобавитьДополнительноеОписание = Истина;
	Если ДополнительныеДанныеПоОбъекту <> Неопределено
		И ДополнительныеДанныеПоОбъекту.Получить(Задача) <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеДанныеПоОбъекту.Получить(Задача).ра_БылИсполнитель) 
		И ЗначениеЗаполнено(ДополнительныеДанныеПоОбъекту.Получить(Задача).ра_СталИсполнитель) Тогда 
		
		БылИсполнитель = ДополнительныеДанныеПоОбъекту.Получить(Задача).ра_БылИсполнитель;
		СталИсполнитель = ДополнительныеДанныеПоОбъекту.Получить(Задача).ра_СталИсполнитель;
		ЭскалацияРуководителю = ДополнительныеДанныеПоОбъекту.Получить(Задача).ра_ЭскалацияРуководителю;
		
		Если ЭскалацияРуководителю Тогда 
			// ТСК Близнюк С.И.; 23.11.2018; task#1791{
			//ПредставлениеЗадачи = СтрШаблон(НСтр("ru = '<b>Не выполнена задача</b> ""%1""'; en = '<b>Failed task</b> ""%1""'", КодЯзыка), Задача.Ссылка);
			ПредставлениеЗадачи = СтрШаблон(НСтр("ru = '<b>Не выполнена задача</b> ""%1""'; en = '<b>Failed task</b> ""%1""'", КодЯзыка), Задачи.ЗадачаИсполнителя.ПредставлениеЗадачи(Задача.Ссылка, КодЯзыка));
			// ТСК Близнюк С.И.; 23.11.2018; task#1791}
			ТребуетсяДобавитьДополнительноеОписание = Ложь;	
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда 
			// ТСК Близнюк С.И.; 23.11.2018; task#1791{
			//ПредставлениеЗадачи = СтрШаблон(НСтр("ru = '<b>Перенаправлена моя задача</b> ""%1"" сотруднику ""%2""'; en = '<b>Redirected my task</b> ""%1"" to the employee ""%2""'", КодЯзыка), Задача.Ссылка, СталИсполнитель);
			ПредставлениеЗадачи = СтрШаблон(НСтр("ru = '<b>Перенаправлена моя задача</b> ""%1"" сотруднику ""%2""'; en = '<b>Redirected my task</b> ""%1"" to the employee ""%2""'", КодЯзыка), Задачи.ЗадачаИсполнителя.ПредставлениеЗадачи(Задача.Ссылка, КодЯзыка), СталИсполнитель);
			// ТСК Близнюк С.И.; 23.11.2018; task#1791}
			ТребуетсяДобавитьДополнительноеОписание = Ложь;
		Иначе 	
			// ТСК Близнюк С.И.; 23.11.2018; task#1791{
			//ПредставлениеЗадачи = СтрШаблон(НСтр("ru = '<b>Вам перенаправлена задача</b> ""%1"" от сотрудника ""%2""'; en = 'Task redirected to you ""%1"" from the employee ""%2""'", КодЯзыка), Задача.Ссылка, БылИсполнитель);
			ПредставлениеЗадачи = СтрШаблон(НСтр("ru = '<b>Вам перенаправлена задача</b> ""%1"" от сотрудника ""%2""'; en = 'Task redirected to you ""%1"" from the employee ""%2""'", КодЯзыка), Задачи.ЗадачаИсполнителя.ПредставлениеЗадачи(Задача.Ссылка, КодЯзыка), БылИсполнитель);
			// ТСК Близнюк С.И.; 23.11.2018; task#1791}
		КонецЕсли;	
	Иначе
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Задача'; en = 'Task'", КодЯзыка),
			// ТСК Близнюк С.И.; 23.11.2018; task#1791{
			//Задача.Ссылка);	
			Задачи.ЗадачаИсполнителя.ПредставлениеЗадачи(Задача.Ссылка, КодЯзыка));
			// ТСК Близнюк С.И.; 23.11.2018; task#1791}
	КонецЕсли;	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 }
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс)
		И РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Задача.БизнесПроцесс) Тогда
		
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		Если БизнесПроцессОбъект <> Неопределено Тогда
			
			ОписаниеУведомленияЗадачиПоБизнесПроцессу =
				БизнесПроцессОбъект.ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыка);
			
			Если ЗначениеЗаполнено(ОписаниеУведомленияЗадачиПоБизнесПроцессу) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеЗадачи,
					Символы.ПС,
					ОписаниеУведомленияЗадачиПоБизнесПроцессу);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
			Задача.Исполнитель,
			Задача.СрокИсполнения,
			ВидСобытия,
			КодЯзыка);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание)
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
			И ТребуетсяДобавитьДополнительноеОписание
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
			Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеЗадачи,
				Символы.ПС,
				ДополнительноеОписание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Описание'; en = 'Details'", КодЯзыка),
			Задача.Описание);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Крайний срок'; en = 'Due date'", КодЯзыка),
		Формат(Задача.СрокИсполнения, ФорматДаты));
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Исполнитель'; en = 'Performer'", КодЯзыка),
		Задача.Исполнитель);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Роль'; en = 'Role'", КодЯзыка),
		Задача.РольИсполнителя);
	
	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) И Задача.Выполнена Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Выполнено'; en = 'Executed'", КодЯзыка),
			Формат(Задача.ДатаИсполнения, ФорматДаты));
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Комментарий'; en = 'Comment'", КодЯзыка),
		Задача.РезультатВыполнения);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Автор'; en = 'Author'", КодЯзыка),
		Задача.Автор);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	Если Предметы.Количество() = 1 Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Предмет'; en = 'Subject'", КодЯзыка),
			Строка(Предметы[0].Предмет));
	ИначеЕсли Предметы.Количество() > 1 Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Предметы'; en = 'Subjects'", КодЯзыка),
			МультипредметностьКлиентСервер.ПредметыСтрокой(Предметы));
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеЗадачи,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Задача));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление объекта.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание, ДополнительныеДанныеПоОбъекту = Неопределено) Экспорт
	
	ПредставлениеОбъекта = СформироватьПредставлениеОбъектаПереопределяемый(
		Объект,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;
	
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеСообщения(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка,
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
			ДополнительныеДанныеПоОбъекту
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
			);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контроль") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеКонтрольнойКарточки(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Отсутствие") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеОтсутствия(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Бронь") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеБрони(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПоказателиПроцессов") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеПоказателяПроцесса(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗаписиКалендаря(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Объект) Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеПроцесса(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеУведомленияПрограммы(Объект, ДополнительноеОписание, КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтрольныеТочки") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеКонтрольнойТочки(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта
	
КонецФункции

// Формирует текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	) Экспорт
	
	ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			
			ДополнительноеОписание = ОбъектыУведомления.Количество();
			
			ПредставлениеОбъекта = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
				ОбъектУведомления,
				ВидСобытия,
				ПолучательУведомления,
				ДополнительноеОписание);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ТекстУведомления,
				Символы.ПС + Символы.ПС,
				ПредставлениеОбъекта);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	) Экспорт
	
	ТекстУведомления = СформироватьТекстУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
			ПолучательУведомления,
			Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
		Если ВключеноВыполнениеЗадачПоПочте Тогда
			Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
				Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
				ТекстУведомления = ВыполнениеЗадачПоПочтеСервер.СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
					ОбъектУведомления, ПолучательУведомления);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоPush Тогда
		ПредставлениеОбъекта = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
			ОбъектУведомления,
			ВидСобытия,
			ПолучательУведомления,
			ДополнительноеОписание);
		ТекстУведомления = 
			СтрШаблон(
				НСтр("ru = 'Событие: %1'; en = 'Business event: %1'", РаботаСУведомлениями.КодЯзыка(ПолучательУведомления)),
				ВидСобытия)
			+ Символы.ПС
			+ ПредставлениеОбъекта;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ТекстУведомления = ДополнительноеОписание;
		КонецЕсли;
		
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
		// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	 	//Если ЗначениеЗаполнено(ОбъектУведомления) И СпособУведомления <> Перечисления.СпособыУведомления.Окном Тогда
		//	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		//		ТекстУведомления,
		//		НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
		//		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления));
		//КонецЕсли;
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 ]
				
		Если Не ЗначениеЗаполнено(ТекстУведомления) Тогда
			ТекстУведомления = НСтр("ru = 'Уведомление 1С Документооборот'; en = '1C:Document management notification'", КодЯзыка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	) Экспорт
	
	ТемаУведомления = СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ПредставлениеОбъектаПодписки = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в мероприятии ""%1""'; en = 'in event ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеОбъектаПодписки) Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новый файл ""%1"" %2'; en = 'New file ""%1"" %2'", КодЯзыка),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые файлы (%1) %2'; en = 'New files (%1) %2'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПодписки.Ссылка, "ВладелецСообщения");
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в теме ""%1""'; en = 'in thread ""%1""'", КодЯзыка),
				ТемаСообщения);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в теме ""%1""'; en = 'in thread ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		Иначе
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в обсуждении ""%1""'; en = 'in thread ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		КонецЕсли;
		ТемаУведомления = СтрШаблон(
			НСтр("ru = 'Новое сообщение %1'; en = 'New message %1'", КодЯзыка),
			ПредставлениеОбъектаПодписки);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Контролер, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка,
				Истина);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подошел срок контроля (%1)'; en = 'Monitoring due date is approaching (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Контролер, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка,
				Истина);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Истекли сроки контроля (%1)'; en = 'Monitoring is overdue (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача прервана ""%1""'; en = 'Task has been terminated ""%1""'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс прерван ""%1""'; en = 'Process has been terminated ""%1""'", КодЯзыка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи прерваны (%1)'; en = 'Tasks have been terminated (%1)'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы прерваны (%1)'; en = 'Processes (%1) has been terminated'", КодЯзыка);
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача остановлена ""%1""'; en = 'Task has been stopped ""%1""'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс остановлен ""%1""'; en = 'Process has been stopped ""%1""'", КодЯзыка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи остановлены (%1)'; en = 'Tasks have been stopped (%1)'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы остановлены (%1)'; en = 'Processes (%1) has been stopped'", КодЯзыка);
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача возобновлена ""%1""'; en = 'Task has been resumed ""%1""'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс возобновлен ""%1""'; en = 'Process has been resumed ""%1""'", КодЯзыка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи возобновлены (%1)'; en = 'Tasks have been resumed (%1)'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы возобновлены (%1)'; en = 'Processes (%1) has been resumed'", КодЯзыка);
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		ТемаУведомления = НСтр("ru = 'Уведомление 1С Документооборот'; en = '1C:Document management notification'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новая запись в календаре пользователя ""%1""'; en = 'New entry in user''s calendar ""%1""'", КодЯзыка),
					ОбъектПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые записи (%1) в календаре пользователя ""%2""'; en = 'New entries (%1) in user''s calendar ""%2""'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ОбъектПодписки);
			КонецЕсли;
		Иначе
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новая запись календаря ""%1""'; en = 'New calendar entry ""%1""'", КодЯзыка),
					ОбъектУведомления);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые записи календаря (%1)'; en = 'New calendar entries (%1)'", КодЯзыка),
					КоличествоОбъектовУведомления);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Ответственный,
				ОбъектУведомления.ПлановыйСрок,
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Просрочены контрольные точки (%1)'; en = 'Overdue milestones (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Ответственный,
				ОбъектУведомления.ПлановыйСрок,
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подошел срок контрольных точек (%1)'; en = 'Milestone is approaching (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Обновите недельную оценку контрольной точки: %1'; en = 'Update week milestone estimation: %1'", КодЯзыка),
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Обновите недельные оценки контрольных точек (%1)'; en = 'Update week milestones estimations (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
	) Экспорт
	
	ТемаУведомления = СформироватьТемуУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание,
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
			ПолучательУведомления,
			Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
		Если ВключеноВыполнениеЗадачПоПочте Тогда
			Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
				Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
				ТемаУведомления =
					ВыполнениеЗадачПоПочтеСервер.СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
						ОбъектУведомления,
						ПолучательУведомления);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);
		Иначе
			КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
			ТемаУведомления = НСтр("ru = 'Уведомление 1С Документооборот'; en = '1C:Document management notification'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
		Если СтрНачинаетсяС(ДополнительноеОписание, НСтр("ru = 'Автоперенаправление'; en = 'Autoforwarding'", КодЯзыка)) Тогда
			ТемаУведомления = СтрШаблон(
				"%1 ""%2""",
				НСтр("ru = 'Автоперенаправление моей задачи'; en = 'Autoforwarding of my task'", КодЯзыка),
				ОбъектУведомления);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ВидСобытия,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Переопределено = Истина;
		
		// Группировка уведомлений по предмету / теме / сообщению.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на предметы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений")
				Или ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на темы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ПредметОбсуждения = Уведомление.ОбъектПодписки.Документ; 
			Если ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено  Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на сообщения.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ТемаОбсуждения = Уведомление.ОбъектПодписки.ВладелецСообщения;
			Уведомление.ОбъектПодписки = ТемаОбсуждения;
			ПредметОбсуждения = ТемаОбсуждения.Документ;
			Если ОбъектыПодписки.Найти(ТемаОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(ТемаОбсуждения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		Переопределено = Истина;
		
		// Группировка по процессу.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на процессы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если Не РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на задачи.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			Процесс = Уведомление.ОбъектПодписки.БизнесПроцесс;
			Если ОбъектыПодписки.Найти(Процесс) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль
		Или ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки Тогда
		
		Переопределено = Истина;
		
		// Группировка по событию.
		РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря Тогда
		
		// Группировка по событию и объекту подписки.
		РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоОбъектуПодписки(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Формирует уведомления по событиям без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоСобытиям(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоСобытиямПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ОбработанныеВидыБизнесСобытий,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Возврат Переопределено;
	
КонецФункции

// Формирует файлы уведомления по событию с группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	Файлы = СформироватьФайлыУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Формирует файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	Файлы = СформироватьФайлыУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
		ПолучательУведомления,
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
	Если ВключеноВыполнениеЗадачПоПочте Тогда
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
			Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			Файлы = ВыполнениеЗадачПоПочтеСервер.СформироватьФайлыУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
				ОбъектУведомления, ПолучательУведомления);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Позволяет скорректировать виды событий, по которым следует группировать уведомления.
// В массиве ВидыСобытий поступают уже полностью сформированные типовые виды событий для группировки.
//
// Параметры:
//  ВидыСобытий - Массив - Сформированные типовые виды событий для группировки.
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
Процедура ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления)
	
	// Пример. Не группировать уведомления о новой задаче. Для Великановой не группировать уведомления по почте.
	//Индекс = ВидыСобытий.Найти(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	//Если Индекс <> Неопределено Тогда
	//	ВидыСобытий.Удалить(Индекс);
	//КонецЕсли;
	//
	//Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
	//	Если СтрНайти(ПолучательУведомления, "Великанова") Тогда
	//		ВидыСобытий.Очистить();
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

// Формирует текстовое представление брони.
//
// Параметры:
//  Бронь - ДокументСсылка.Бронь - Бронь, по которой формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление брони.
//
Функция СформироватьПредставлениеБрони(
	Бронь,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеОбъекта = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Бронь'; en = 'Reservation'", КодЯзыка),
		Бронь.Ссылка);
	Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		БроньОбъект = Бронь.Ссылка.ПолучитьОбъект();
		ПредставлениеПовторения = БроньОбъект.ПолучитьПредставлениеПовторения();
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			НСтр("ru = 'Повторять'; en = 'Repeat'", КодЯзыка),
			ПредставлениеПовторения);
	КонецЕсли;
	Если Бронь.ПометкаУдаления Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			"",
			НСтр("ru = 'Бронь помечена на удаление.'; en = 'Reservation is marked for deletion.'", КодЯзыка));
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Автор'; en = 'Author'", КодЯзыка),
		Бронь.Автор);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Количество человек'; en = 'Number of people'", КодЯзыка),
		Бронь.КоличествоЧеловек);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Техническое обеспечение'; en = 'Technical support'", КодЯзыка),
		Бронь.ТехническоеОбеспечение);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Хозяйственное обеспечение'; en = 'Supply'", КодЯзыка),
		Бронь.ХозяйственноеОбеспечение);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Комментарий'; en = 'Comment'", КодЯзыка),
		Бронь.Комментарий);
		
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеОбъекта,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Бронь));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текстовое представление записи рабочего календаря.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись рабочего календаря.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий,
//               ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление записи рабочего календаря.
//
Функция СформироватьПредставлениеЗаписиКалендаря(
	ЗаписьКалендаря,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	Представление = "";
	
	РеквизитыЗаписиКалендаря = Справочники.ЗаписиРабочегоКалендаря.РеквизитыЗаписиКалендаря(ЗаписьКалендаря);
	
	// Заголовок и пользователь.
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		,
		РеквизитыЗаписиКалендаря.Наименование,
		РеквизитыЗаписиКалендаря.Автор);
	
	// Дата
	ПредставлениеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПредставлениеДаты(
		РеквизитыЗаписиКалендаря.ДатаНачала,
		РеквизитыЗаписиКалендаря.ДатаОкончания, 
		РеквизитыЗаписиКалендаря.ВесьДень);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		,
		ПредставлениеДаты);
	
	// Повторение
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		НСтр("ru = 'Повторять'; en = 'Repeat'", КодЯзыка), 
		РеквизитыЗаписиКалендаря.Повторять);
	
	// Описание
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		,
		РеквизитыЗаписиКалендаря.Описание);
	
	// Вид мероприятия и место проведения.
	Если ТипЗнч(РеквизитыЗаписиКалендаря.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗаписиКалендаря.Предмет, "ВидМероприятия, МестоПроведения");
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			Представление,
			НСтр("ru = 'Вид мероприятия'; en = 'Event type'", КодЯзыка), 
			РеквизитыМероприятия.ВидМероприятия);
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			Представление,
			НСтр("ru = 'Место проведения'; en = 'Location'", КодЯзыка), 
			РеквизитыМероприятия.МестоПроведения);
		
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//НавигационнаяСсылка = РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ЗаписьКалендаря);
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	Представление,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка), 
	//	НавигационнаяСсылка);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат Представление;
	
КонецФункции

// Формирует текстовое представление карточки контроля.
//
// Параметры:
//  КарточкаКонтроля - СправочникСсылка.Контроль - Контрольная карточка, по которой формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление контрольной карточки.
//
Функция СформироватьПредставлениеКонтрольнойКарточки(
	КарточкаКонтроля,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	НадписьНеУказанСрок = НСтр("ru = 'не указан'; en = 'not specified'", КодЯзыка);
	ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	
	ПредставлениеКонтроля = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Контрольная карточка'; en = 'Monitoring form'", КодЯзыка),
		КарточкаКонтроля.Ссылка);
	Если ЗначениеЗаполнено(ДополнительноеОписание) И ДополнительноеОписание > 1 Тогда 
		ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
			КарточкаКонтроля.Контролер,
			КарточкаКонтроля.СрокИсполнения,
			ВидСобытия,
			КодЯзыка,
			Истина);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеКонтроля,
			Символы.ПС,
			ПредставлениеСрока);
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Описание'; en = 'Details'", КодЯзыка),
		КарточкаКонтроля.Описание);
	
	Если ЗначениеЗаполнено(КарточкаКонтроля.Предмет) Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеКонтроля,
			НСтр("ru = 'Предмет'; en = 'Subject'", КодЯзыка),
			Контроль.СформироватьПредставлениеПредмета(КарточкаКонтроля.Предмет));
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Срок контроля'; en = 'Due date'", КодЯзыка),
		Формат(КарточкаКонтроля.СрокИсполнения, ФорматДаты));
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Кого контролировать'; en = 'Whom to monitor'", КодЯзыка),
		КарточкаКонтроля.ИсполнителиСтрокой);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Контролер'; en = 'Monitor'", КодЯзыка),
		КарточкаКонтроля.Контролер);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеКонтроля,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(КарточкаКонтроля));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеКонтроля;
	
КонецФункции

// Формирует текстовое представление контрольной точки.
//
// Параметры:
//  КонтрольнаяТочка - СправочникСсылка.КонтрольныеТочки - Контрольная точки, по которой формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление контрольной карточки.
//
Функция СформироватьПредставлениеКонтрольнойТочки(
	КонтрольнаяТочка,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	НадписьНеУказанСрок = НСтр("ru = 'не указан'; en = 'not specified'", КодЯзыка);
	ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	
	ПредставлениеКонтрольнойТочки = "";
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда
		
		ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
			КонтрольнаяТочка.Ответственный,
			КонтрольнаяТочка.ПлановыйСрок,
			ВидСобытия,
			КодЯзыка);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеКонтрольнойТочки,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтрольнойТочки,
		НСтр("ru = 'Контрольная карточка'; en = 'Monitoring form'", КодЯзыка),
		Символы.ПС + КонтрольнаяТочка.Описание);
		
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеКонтрольнойТочки,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(КонтрольнаяТочка));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеКонтрольнойТочки;
	
КонецФункции

// Позволяет скорректировать формирование текстового представления объекта для уведомления.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъектаПереопределяемый(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание)
	
	ПредставлениеОбъекта = "";
	
	// Пример. Новое представление текст описания файла во всех уведомлениях по файлу.
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
	//	ПредставлениеОбъекта = СтрШаблон(
	//		НСтр("ru = 'Файл <a href=""%4""><b>%1</b> (%2, %3)</a>'", КодЯзыка),
	//		Объект,
	//		Объект.ТекущаяВерсияАвтор,
	//		Объект.ТекущаяВерсияДатаСоздания,
	//		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Объект));
	//КонецЕсли;
	
	Возврат ПредставлениеОбъекта;
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		и ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "СрокИсполнения, ра_ОписаниеДействияRU, ра_ОписаниеДействияEN");
		
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		НадписьНеУказанСрок = НСтр("ru = 'не указан'; en = 'not specified'", КодЯзыка);
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ФорматДаты = СтрШаблон("ДФ=dd.MM.yyyy; ДП='%1'", НадписьНеУказанСрок);
		Иначе
			ФорматДаты = СтрШаблон("ДФ=dd.MM.yyyy; ДП='%1'", НадписьНеУказанСрок);
		КонецЕсли;
		
		Если КодЯзыка = "en" Тогда
			ПредставлениеДействия = РеквизитыЗадачи.ра_ОписаниеДействияEN;
		Иначе
			ПредставлениеДействия = РеквизитыЗадачи.ра_ОписаниеДействияRU;		
		КонецЕсли;	
		
		Если не ЗначениеЗаполнено(ПредставлениеДействия) Тогда 
			Возврат ПредставлениеОбъекта;
		КонецЕсли;	
		
		РезультатЗапросаПредметы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Предметы.Предмет");
		Если РезультатЗапросаПредметы.Пустой() Тогда 
			Возврат "";
		КонецЕсли;	
		
		Предметы = РезультатЗапросаПредметы.Выгрузить().ВыгрузитьКолонку("Предмет");
		
		ПредставлениеПредметов = "";
		Если КодЯзыка = "en" Тогда 
			ПредставлениеПредметов = МультипредметностьПереопределяемый.ПредметыСтрокойАнгл(Объект.Предметы);	
		Иначе 
			ПредставлениеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы);	
		КонецЕсли;	
		
		ПредставлениеОбъекта = ПредставлениеДействия + " " + ПредставлениеПредметов + " ";
		
		ПредставлениеОбъекта = ПредставлениеОбъекта + НСтр("ru = 'Cрок:'; en = 'Date:'", КодЯзыка) + " " + Формат(РеквизитыЗадачи.СрокИсполнения, ФорматДаты);
		    			
	КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текстовое представление отсутствия.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия.
//
Функция СформироватьПредставлениеОтсутствия(
	Отсутствие,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеОтсутствия = Отсутствия.ПолучитьПредставлениеОтсутствияДляТекстаПисьма(Отсутствие);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОтсутствия,
		НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка), 
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Отсутствие));
	
	Возврат ПредставлениеОтсутствия;
	
КонецФункции

// Формирует текстовое представление показателя процесса.
//
// Параметры:
//  ПоказательПроцесса - СправочникСсылка.ПоказателиПроцессов - Показатель процесса, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление показателя процесса.
//
Функция СформироватьПредставлениеПоказателяПроцесса(
	ПоказательПроцесса,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка) Экспорт
	
	ПредставлениеОбъекта = "";
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса Тогда
		ТекущиеДанные = РегистрыСведений.ЗначенияПоказателейПроцессов.ТекущиеДанные(ПоказательПроцесса);
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДинамикаПоказателя <> 0 Тогда
			ПредставлениеДинамики = 
				?(ТекущиеДанные.ДинамикаПоказателя = 1,
					НСтр("ru = 'выросло'; en = 'increased'", КодЯзыка),
					НСтр("ru = 'снизилось'; en = 'decreased'", КодЯзыка));
			ПредставлениеОбъекта = СтрШаблон(
				НСтр("ru = 'Значение показателя ""%1"" <b>%2</b> на <b>%3%%</b> и составляет <b>%4</b>.'; en = 'Metric ""%1"" value <b>%2</b> by <b>%3%%</b> and now is <b>%4</b>.'", КодЯзыка),
				Строка(ПоказательПроцесса),
				ПредставлениеДинамики,
				ТекущиеДанные.ИзменениеПроцент,
				ТекущиеДанные.ПредставлениеЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			НСтр("ru = 'Показатель процесса'; en = 'Process metric'", КодЯзыка),
			ПоказательПроцесса.Ссылка);
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеОбъекта,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ПоказательПроцесса));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
			
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текстовое представление бизнес-процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка - Бизнес-процесс, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление бизнес-процесса.
//
Функция СформироватьПредставлениеПроцесса(
	Процесс,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеПроцесса = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеПроцесса,
		ТипЗнч(Процесс.Ссылка),
		Процесс.Ссылка);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеПроцесса,
			НСтр("ru = 'Причина прерывания'; en = 'Termination reason'", КодЯзыка),
			Процесс.ПричинаПрерывания);
	КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеПроцесса,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Процесс));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
		
	Возврат ПредставлениеПроцесса;
	
КонецФункции

// Формирует текстовое представление сообщения.
//
// Параметры:
//  Сообщение - СправочникСсылка.СообщенияОбсуждений - Сообщение, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление сообщения
//
Функция СформироватьПредставлениеСообщения(
	Сообщение,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеСообщения = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Сообщение'; en = 'Message'", КодЯзыка),
		Сообщение.ТекстСообщения);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Тема'; en = 'Forum thread'", КодЯзыка),
		Сообщение.ВладелецСообщения);
	Если ЗначениеЗаполнено(Сообщение.ВладелецСообщения) Тогда
		ТемаСообщения = Сообщение.ВладелецСообщения;
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеСообщения,
			НСтр("ru = 'Предмет обсуждения'; en = 'Related document of the forum thread'", КодЯзыка),
			ТемаСообщения.Документ, ТипЗнч(ТемаСообщения.Документ));
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Автор'; en = 'Author'", КодЯзыка),
		Сообщение.Автор);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Дата'; en = 'Date'", КодЯзыка),
		Сообщение.ДатаСоздания);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеСообщения,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка), 
	//	РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Сообщение));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
			
	Возврат ПредставлениеСообщения;
	
КонецФункции

// Формирует текстовое представление уведомления программы.
// 
// Параметры:
//  Объект - ЛюбаяСсылка - Объект уведомления программы.
//  Описание - Строка - Описание уедомления.
//
// Возвращаемое значение:
//  Строка - Текстовое представление уведомления программы.
//
Функция СформироватьПредставлениеУведомленияПрограммы(
	Объект,
	Описание,
	КодЯзыка)
	
	ПредставлениеУведомления = "";
	
	НавигационнаяСсылкаНаОбъектУведомления = "";
	Если Объект <> Неопределено Тогда
		НавигационнаяСсылкаНаОбъектУведомления =
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Объект);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеУведомления,
		,
		Описание);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеУведомления,
	//	НСтр("ru = 'Ссылка на объект уведомления'; en = 'Notification object reference'", КодЯзыка),
	//	НавигационнаяСсылкаНаОбъектУведомления);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеУведомления;
	
КонецФункции

// Позволяет скорректировать текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	)
	
	ТекстУведомления = "";
	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	Если ДополнительныеДанныеПоОбъекту = Неопределено Тогда 
		Возврат ТекстУведомления;
	КонецЕсли;	
		
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	
	// Пример. Новый разделитель между текстами уведомлений при группировке.
	Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
		Иначе
			ДополнительноеОписание = Неопределено;
		КонецЕсли;
		
		ПредставлениеОбъекта = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
			ОбъектУведомления,
			ВидСобытия,
			ПолучательУведомления,
			ДополнительноеОписание,
			ДополнительныеДанныеПоОбъекту);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстУведомления,
			"<hr>",
			ПредставлениеОбъекта);
		
	КонецЦикла;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Позволяет скорректировать текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	)
	
	ТекстУведомления = "";
	
	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьПредставлениеОбъекта(
		ОбъектПодписки,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);	
	
	// Пример. Новый текст уведомления о новой задаче (без группировки).
	// Требуется использовать вместе с примером из ВидыСобытийДляГруппировкиПереопределяемый,
	// чтобы отключить группирвоку уведомлений.
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
	//	
	//	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУведомления, "СрокИсполнения, Наименование");
	//	НеУказанПредставление = НСтр("ru = 'Не указан'", КодЯзыка);
	//	ФорматнаяСтрока = СтрШаблон("ДФ='dd.MM.yyyy HH:mm'; ДП='%1'", НеУказанПредставление);
	//	ПредставлениеСрока = Формат(РеквизитыЗадачи.СрокИсполнения, ФорматнаяСтрока);
	//	
	//	ТекстСсылокВыполненияЗадачи = "";
	//	ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
	//		ПолучательУведомления,
	//		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
	//	Если ВключеноВыполнениеЗадачПоПочте Тогда
	//		СсылкиОтветов = ВыполнениеЗадачПоПочтеСервер.ПолучитьОтветыВВидеСсылокMailto(ОбъектУведомления);
	//		ТекстСсылокВыполненияЗадачи = СсылкиОтветов.Текст;
	//	КонецЕсли;
	//	
	//	ТекстУведомления = СтрШаблон(
	//		НСтр("ru = 'Уважаемый (ая) %1!
	//			|
	//			|Вам поступила задача ""%2"".
	//			|Крайний срок исполнения задачи: %3.
	//			|Вы можетее перейти к задаче, нажав на ссылку: <a href=""%4"">Перейти к выполнению задачу</a>
	//			|%5
	//			|
	//			|С уважением,
	//			|Сервис уведомлений 1С:Документооборот'", КодЯзыка),
	//		ПолучательУведомления,
	//		РеквизитыЗадачи.Наименование,
	//		ПредставлениеСрока,
	//		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления),
	//		ТекстСсылокВыполненияЗадачи);
	//	
	//КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Позволяет скорректировать тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	)
	
	ТемаУведомления = "";
	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	// в случае перенаправления задачи изменить тему оповещения 
	Если ДополнительныеДанныеПоОбъекту =  Неопределено Тогда 
		Возврат ТемаУведомления;
	КонецЕсли;	
	
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			СтруктураИсполнителей = ДополнительныеДанныеПоОбъекту.Получить(ОбъектУведомления);
			БылИсполнитель = "";
			Если СтруктураИсполнителей = Неопределено Тогда 
				Возврат ТемаУведомления;
			КонецЕсли;	
				
			БылИсполнитель = СтруктураИсполнителей.ра_БылИсполнитель;		
			Если не ЗначениеЗаполнено(БылИсполнитель) Тогда 
				Возврат ТемаУведомления;
			КонецЕсли;	
			
			ЭтоПеренаправлениеНаРуководителя = СтруктураИсполнителей.ра_ЭскалацияРуководителю;
			
			Если ЭтоПеренаправлениеНаРуководителя Тогда 
				ТемаУведомления = СтрШаблон(НСтр("ru = 'Не выполнена задача ""%1""'; en = 'Failed task ""%1""'", КодЯзыка), ОбъектУведомления.Ссылка);
			Иначе
				ТемаУведомления = СтрШаблон(НСтр("ru = 'Вам перенаправлена задача ""%1"" от сотрудника ""%2""'; en = 'Task redirected to you ""%1"" from the employee ""%2""'", КодЯзыка), ОбъектУведомления.Ссылка, БылИсполнитель);
			КонецЕсли;	
		Иначе
			
			МассивНовыхЗадач = Новый Массив;
			МассивПеренаправленныхЗадач = Новый Массив;
			Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл 
				
				Если ДополнительныеДанныеПоОбъекту.Получить(ОбъектУведомления) = Неопределено Тогда 
					МассивНовыхЗадач.Добавить(ОбъектУведомления);
					Продолжить;
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(ДополнительныеДанныеПоОбъекту.Получить(ОбъектУведомления).ра_БылИсполнитель) Тогда 
					МассивНовыхЗадач.Добавить(ОбъектУведомления);
					Продолжить;
				КонецЕсли;	
				
				// все проверки пройдены, это задача перенаправлена от другого исполнителя
				МассивПеренаправленныхЗадач.Добавить(ОбъектУведомления);
				
			КонецЦикла;	
			
			Если МассивНовыхЗадач.Количество() <> 0 
				и МассивПеренаправленныхЗадач.Количество() <> 0 Тогда 
				ТемаУведомления = СтрШаблон(НСтр("ru = 'Поступили задачи (%1), из которых (%2) перенаправлены от других исполнителей'; en = 'Received tasks (%1) of which are redirected (%2) from other performers'", КодЯзыка), МассивНовыхЗадач.Количество() + МассивПеренаправленныхЗадач.Количество(), МассивПеренаправленныхЗадач.Количество());
			ИначеЕсли МассивНовыхЗадач.Количество() <> 0 Тогда 
				ТемаУведомления = СтрШаблон(НСтр("ru = 'Поступили задачи (%1)'; en = 'Received tasks (%1)'", КодЯзыка), МассивНовыхЗадач.Количество());
			ИначеЕсли МассивПеренаправленныхЗадач.Количество() <> 0 Тогда 
				ТемаУведомления = СтрШаблон(НСтр("ru = 'Перенаправлены задачи (%1) от других исполнителей'; en = 'Received tasks (%1) from other performers'", КодЯзыка), МассивПеренаправленныхЗадач.Количество());
			КонецЕсли;	
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Перенаправлена задача ""%1""'; en = 'Task ""%1"" has been forwarded'", КодЯзыка),
				ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Задачи перенаправлены (%1)'; en = 'Tasks have been forwarded (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	КонецЕсли;	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 }
	
	
	
	// Пример. Новая тема уведомления о новых файлах (с группировкой).
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
	//	
	//	ТемаУведомления = "";
	//	Если ОбъектыУведомления.Количество() = 1 Тогда
	//		ОбъектУведомления = ОбъектыУведомления[0];
	//		ТемаУведомления = СтрШаблон(
	//			НСтр("ru = 'Создан новый файл ""%1""'", КодЯзыка),
	//			ОбъектУведомления.Ссылка);
	//	Иначе
	//		КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
	//		ТемаУведомления = СтрШаблон(
	//			НСтр("ru = 'Созданы новые файлы (%1)'", КодЯзыка),
	//			КоличествоОбъектовУведомления);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Позволяет скорректировать тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
	)
	
	ТемаУведомления = "";
	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи
		И ДополнительныеДанныеПоОбъекту <> Неопределено
		И ДополнительныеДанныеПоОбъекту.Получить(ОбъектПодписки) <> Неопределено Тогда 
		
		Если ДополнительныеДанныеПоОбъекту.Получить(ОбъектПодписки).ра_ЭскалацияРуководителю Тогда 
			
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Не выполнена задача ""%1""'; en = 'Failed task ""%1""'", КодЯзыка), ОбъектУведомления);
			
		Иначе	
		
			СталИсполнитель = ДополнительныеДанныеПоОбъекту.Получить(ОбъектПодписки).ра_СталИсполнитель;
			
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Перенаправлена моя задача ""%1"" сотруднику ""%2""'; en = 'Redirected my task ""%1"" to the employee ""%2""'", КодЯзыка), ОбъектУведомления, СталИсполнитель);
			
		КонецЕсли;	
			
	КонецЕсли;	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 }
	
	//ПредставлениеОбъектаУведомления = Строка(ОбъектУведомления);
	//ТемаУведомления = СтрШаблон("%1 ""%2""", ПредставлениеВидаСобытия, ПредставлениеОбъектаУведомления);
	
	// Пример. Новая тема уведомления о новой задаче (без группировки).
	// Требуется использовать вместе с примером из ВидыСобытийДляГруппировкиПереопределяемый,
	// чтобы отключить группирвоку уведомлений.
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
	//	НаименованиеЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУведомления, "Наименование");
	//	ТемаУведомления = СтрШаблон(
	//		НСтр("ru = 'Вам поступила задача ""%1""'", КодЯзыка),
	//		НаименованиеЗадачи);
	//КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Позволяет скорректировать формирование уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления)
	
	Переопределено = Ложь;
	
	// Пример. Уведомление о создании файла группировать не по объекту подписки, а только по событию.
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
	//	
	//	Переопределено = Истина;
	//	
	//	// Группировка по событию и объекту подписки.
	//	РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоСобытию(
	//		ПолучательУведомления,
	//		СпособУведомления,
	//		ВидСобытия,
	//		Уведомления,
	//		СформированныеУведомления);
	//	
	//КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Позволяет скорректировать формирование уведомления по событию без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоСобытиямПереопределяемый(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Переопределено = Ложь;
	
	// Пример. Для пользователя Великанова все не сгруппированные уведомления объединять в одно письмо.
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если СтрНайти(ПолучательУведомления, "Великанова") Тогда
	//	
	//	Переопределено = Истина;
	//	
	//	Отбор = Новый Структура();
	//	Отбор.Вставить("Пользователь", ПолучательУведомления);
	//	Отбор.Вставить("СпособУведомления", СпособУведомления);
	//	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	//	
	//	ТекстУведомления = Новый Массив;
	//	УведомленияПодписки = Новый Массив;
	//	
	//	Для Каждого Уведомление Из УведомленияПользователя Цикл
	//		
	//		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоСобытию(
	//			Уведомление.ОбъектПодписки, 
	//			Уведомление.ВидСобытия, 
	//			Уведомление.Объект,
	//			ПолучательУведомления,
	//			Уведомление.ТекстУведомления);
	//		
	//		ТекстУведомления.Добавить(
	//			СтрШаблон(
	//				"<b>%1</b>
	//				|%2",
	//				ДанныеУведомления.ТемаУведомления,
	//				ДанныеУведомления.ТекстУведомления));
	//		РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
	//		
	//	КонецЦикла;
	//	
	//	ТекстУведомления = СтрСоединить(ТекстУведомления, "<hr>");
	//	
	//	СформированноеУведомление = СформированныеУведомления.Добавить();
	//	СформированноеУведомление.ТемаУведомления = НСтр("ru = 'Новые события в Документообороте'", КодЯзыка);
	//	СформированноеУведомление.ТекстУведомления = ТекстУведомления;
	//	СформированноеУведомление.Файлы = Новый Массив;
	//	СформированноеУведомление.Пользователь = ПолучательУведомления;
	//	СформированноеУведомление.СпособУведомления = СпособУведомления;
	//	СформированноеУведомление.Уведомления = УведомленияПодписки;
	//	
	//КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Позволяет скорректировать файлы уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	Файлы = Неопределено;
	
	// Пример. В уведомление о создании файла прикладывать файлы (с группировкой).
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
	//	
	//	Файлы = Новый Массив;
	//	Для Каждого Файл Из ОбъектыУведомления Цикл
	//		
	//		ИмяСРасширением = Файл.ПолноеНаименование;
	//		Если ЗначениеЗаполнено(Файл.ТекущаяВерсияРасширение) Тогда
	//			ИмяСРасширением = ИмяСРасширением + "." + Файл.ТекущаяВерсияРасширение;
	//		КонецЕсли;
	//		
	//		МаксимальныйРазмерВложений = 20 * 1024 * 1024; // 20 МБ
	//		
	//		ТекущийРазмерВложений = 0;
	//		ТекущийРазмерВложений = ТекущийРазмерВложений + Файл.ТекущаяВерсияРазмер;
	//		Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
	//			СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
	//			СтруктураФайла.Ссылка = Файл;
	//			СтруктураФайла.ИмяФайла = ИмяСРасширением;
	//			Файлы.Добавить(СтруктураФайла);
	//		Иначе
	//			Прервать;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Позволяет скорректировать файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	Файлы = Неопределено;
	
	// Пример. В уведомление об изменении файла прикладывать файл (без группировки).
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеФайла Тогда
	//	
	//	Файлы = Новый Массив;
	//	
	//	Файл = ОбъектУведомления;
	//	
	//	ИмяСРасширением = Файл.ПолноеНаименование; 
	//	Если ЗначениеЗаполнено(Файл.ТекущаяВерсияРасширение) Тогда
	//		ИмяСРасширением = ИмяСРасширением + "." + Файл.ТекущаяВерсияРасширение;
	//	КонецЕсли;
	//	
	//	МаксимальныйРазмерВложений = 20 * 1024 * 1024; // 20 МБ
	//	
	//	ТекущийРазмерВложений = 0;
	//	ТекущийРазмерВложений = ТекущийРазмерВложений + Файл.ТекущаяВерсияРазмер;
	//	Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
	//		СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
	//		СтруктураФайла.Ссылка = Файл;
	//		СтруктураФайла.ИмяФайла = ИмяСРасширением;
	//		Файлы.Добавить(СтруктураФайла);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
Функция ПолучитьДополнительныхОповещаемыхИсполнителей(Задача, ТекущийИсполнитель) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСобытийЗадач.ра_БылИсполнитель КАК Оповещаемый
		|ИЗ
		|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|ГДЕ
		|	ИсторияСобытийЗадач.Задача = &Задача
		|	И ИсторияСобытийЗадач.Событие = &Событие
		|	И ИсторияСобытийЗадач.ра_БылИсполнитель <> &ТекущийИсполнитель
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсторияСобытийЗадач.ра_СталИсполнитель
		|ИЗ
		|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|ГДЕ
		|	ИсторияСобытийЗадач.Задача = &Задача
		|	И ИсторияСобытийЗадач.Событие = &Событие
		|	И ИсторияСобытийЗадач.ра_СталИсполнитель <> &ТекущийИсполнитель";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Событие", Перечисления.ВидыСобытийЗадач.Перенаправлена);
	Запрос.УстановитьПараметр("ТекущийИсполнитель", ТекущийИсполнитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Оповещаемый");
	
КонецФункции	
// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 

#КонецОбласти
