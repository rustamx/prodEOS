////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, переопределяемый
// Реализует расширяемый функционал веб-сервиса DMService
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает исходящее письмо из объекта XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOk или DMError 
//
Функция СоздатьИсходящееПисьмо(Сообщение) Экспорт
	
	Попытка 
		
		Письмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
		Письмо.Дата = ТекущаяДатаСеанса();
		Объект = Сообщение.object;
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеИсходящегоПисьма(Узел, Письмо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
				
		Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMOK");
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании исходящего письма'; en = 'Error creating outgoing email'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает новое письмо по запросу DMGetNewEMailRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewEMailRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetNewEMailResponse
//
Функция ПолучитьНовоеПисьмо(Сообщение) Экспорт
	
	Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetNewEMailResponse");
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Тип = Сообщение.type;
	
	Предмет = Неопределено;
	Если Сообщение.Установлено("targetID") Тогда
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.targetID);
	КонецЕсли;
	
	ПисьмоОбъект = Документы.ИсходящееПисьмо.СоздатьДокумент();
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") 
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПисьмоОбъект.Предмет = Предмет;
	КонецЕсли;
	
	ПисьмоОбъект.Заполнить(Предмет);
	
	// Установка учетной записи
	Если Не ЗначениеЗаполнено(ПисьмоОбъект.УчетнаяЗапись) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	УчетныеЗаписи.Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписи
			|ГДЕ
			|	УчетныеЗаписи.Пользователь = &Пользователь
			|	И Ссылка.ИспользоватьДляОтправки 
			|	И Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
			|");
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПисьмоОбъект.УчетнаяЗапись = Выборка.Ссылка;
		КонецЕсли;
	Иначе // не вводим пользователей в заблуждение, подставляя учетную запись, которую уже нельзя применить
		Если Не ПисьмоОбъект.УчетнаяЗапись.ИспользоватьДляОтправки
			Или ПисьмоОбъект.УчетнаяЗапись.ВариантИспользования <> Перечисления.ВариантыИспользованияПочты.Встроенная
			Или ПисьмоОбъект.УчетнаяЗапись.ОтветственныеЗаОбработкуПисем.Найти(ТекущийПользователь) = Неопределено Тогда
			ПисьмоОбъект.УчетнаяЗапись = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоКонтрагент(Предмет) Тогда
		СписокПочтовыхАдресов = ПолучитьСписокПочтовыхАдресовКонтрагента(Предмет);
		
		Для каждого Элемент Из СписокПочтовыхАдресов Цикл
			НовыйПолучатель = ПисьмоОбъект.ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Элемент.Значение.Адрес,
				Элемент.Значение.ОтображаемоеИмя);
		КонецЦикла;
			
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет) Тогда 
		
		ПредставлениеФайла = Строка(Предмет) + " (" + Предмет.Метаданные().ПредставлениеОбъекта + ")";
		ПисьмоОбъект.Тема = ПредставлениеФайла;
		
	КонецЕсли;
	
	ПисьмоXDTO = ПолучитьДанныеИсходящегоПисьма(Узел, ПисьмоОбъект, Предмет);
	
	ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	Кодировка = ПисьмоОбъект.Кодировка;
	ТипОтвета = Перечисления.ТипыОтвета.ПустаяСсылка();
	
	ПисьмоXDTO.body = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
		Предмет, ТипТекста, Кодировка, ТипОтвета);
		
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
		Файлы = Новый Массив;
		Файлы.Добавить(Предмет);
		ПисьмоXDTO.body = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
			Файлы, ТипТекста, Кодировка, ТипОтвета);
	КонецЕсли;
			
	Ответ.Object = ПисьмоXDTO;
	
	Возврат Ответ;
	
КонецФункции

// Создает новое ответное письмо по запросу DMGetIncomingEMailAnswerRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetIncomingEMailAnswerRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetIncomingEMailAnswerResponse
//
Функция ПолучитьОтветНаВходящееПисьмо(Сообщение) Экспорт
	
	Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetIncomingEMailAnswerResponse");
	
	Тип = Сообщение.type;
	
	ПисьмоОбъект = Документы.ИсходящееПисьмо.СоздатьДокумент();
	Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.targetID);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Письмо",Предмет);
	
	Если ВРег(Сообщение.answerType) = ВРег("reply") Тогда
		ДанныеЗаполнения.Вставить("Команда","Ответить");
		ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо;
	ИначеЕсли  ВРег(Сообщение.answerType) = ВРег("replyToAll") Тогда
		ДанныеЗаполнения.Вставить("Команда","ОтветитьВсем");
		ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо;
	ИначеЕсли  ВРег(Сообщение.answerType) = ВРег("transfer") Тогда
		ДанныеЗаполнения.Вставить("Команда","Переслать");
		ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма;
	Иначе
		Возврат Ответ;
	КонецЕсли;
	
	ПисьмоОбъект.Заполнить(ДанныеЗаполнения);
	
	ПисьмоXDTO =  ПолучитьДанныеИсходящегоПисьма(Узел, ПисьмоОбъект);
	
	ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	Кодировка = ПисьмоОбъект.Кодировка;
	
	ПисьмоXDTO.body = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
		Предмет, ТипТекста, Кодировка,ТипОтвета);
		
	Ответ.Object = ПисьмоXDTO;
	
	Возврат Ответ;
	
КонецФункции

// Создает новое исходящее письмо письмо по запросу DMGetOutgoingEMailForwardRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetOutgoingEMailForwardRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetOutgoingEMailForwardResponse
//
Функция ПолучитьИсходящееПисьмоДляПересылки(Сообщение) Экспорт
	
	Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetOutgoingEMailForwardResponse");
	
	Тип = Сообщение.type;
	
	ПисьмоОбъект = Документы.ИсходящееПисьмо.СоздатьДокумент();
	Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.targetID);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Письмо",Предмет);
	ДанныеЗаполнения.Вставить("Команда","Переслать");
	ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма;
	
	ПисьмоОбъект.Заполнить(ДанныеЗаполнения);
	
	ПисьмоXDTO =  ПолучитьДанныеИсходящегоПисьма(Узел, ПисьмоОбъект);
	
	ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	Кодировка = ПисьмоОбъект.Кодировка;
	
	ПисьмоXDTO.body = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
		Предмет, ТипТекста, Кодировка, ТипОтвета);
		
	Ответ.Object = ПисьмоXDTO;
	
	Возврат Ответ;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий электронному письму любого направления
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   ОбъектИд - ОбъектXDTO типа DMObjectId, описывающий письмо
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingEMail или DMOutgoingEMail 
//
Функция ПолучитьДанныеПисьма(Узел, ОбъектИд) Экспорт
	
	СсылкаНаПисьмо = Неопределено;
	СсылкаНаПисьмо = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПисьмо)
		ИЛИ СсылкаНаПисьмо.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбъектИд.type = "DMOutgoingEMail" Тогда
		Ответ = ПолучитьДанныеИсходящегоПисьма(Узел, СсылкаНаПисьмо);
		
	ИначеЕсли ОбъектИд.type = "DMIncomingEMail" Тогда
		Ответ = ПолучитьДанныеВходящегоПисьма(Узел, СсылкаНаПисьмо);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает дерево писем по запросу DMGetCorrespondenceTreeRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetCorrespondenceTreeRequest 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetCorrespondenceTreeResponse или DMError 
//
Функция ПолучитьДеревоПисем(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetCorrespondenceTreeResponse");
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		МассивОбъектовДляОтбора = Новый Массив;
		
		Для Каждого ВнешнийОбъект Из Сообщение.query.externalTarget Цикл
			МассивВнутреннихОбъектов = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(
				Узел, ВнешнийОбъект.id, ВнешнийОбъект.type);
			Для Каждого ВнутреннийОбъект Из МассивВнутреннихОбъектов Цикл
				Если МассивОбъектовДляОтбора.Найти(ВнутреннийОбъект) = Неопределено 
					И ВнутреннийОбъект <> Неопределено И НЕ ВнутреннийОбъект.Ссылка.Пустая() Тогда
					МассивОбъектовДляОтбора.Добавить(ВнутреннийОбъект.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ВнутреннийОбъект Из Сообщение.query.target Цикл
			Если ЗначениеЗаполнено(ВнутреннийОбъект.objectId.id) Тогда
				Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ВнутреннийОбъект.Objectid);
				МассивОбъектовДляОтбора.Добавить(Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Элемент Из МассивОбъектовДляОтбора Цикл
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЗаполнитьПерепискуСКонтрагентом(Ответ.followers, Элемент);
			Иначе
				ВыведенныеПисьма = Новый Массив;
				ДобавитьПисьмоВДерево(Ответ.followers, Элемент, ВыведенныеПисьма);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка писем'; en = 'Error retrieving list of emails'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает ответ на запрос DMGetAddressBookRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetAddressBookRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetAddressBookResponse или DMError
//
Функция ПолучитьАдреснуюКнигу(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetAddressBookResponse");
	
		Если ВРег(Сообщение.addressBookType) = ВРег("usersList") Тогда
			ЗаполнитьПользователейСписком(Ответ);
		ИначеЕсли  ВРег(Сообщение.addressBookType) = ВРег("usersInFolders") Тогда
			ЗаполнитьПользователейВГруппах(Ответ, Сообщение.parentID);
		ИначеЕсли  ВРег(Сообщение.addressBookType) = ВРег("usersInSubdivisions") Тогда
			ЗаполнитьПользователейВПодразделениях(Ответ, Сообщение.parentID);
		ИначеЕсли  ВРег(Сообщение.addressBookType) = ВРег("personalRecipients") Тогда
			ЗаполнитьЛичныеАдресаты(Ответ, Сообщение.parentID);
		ИначеЕсли  ВРег(Сообщение.addressBookType) = ВРег("correspondents") Тогда
			ЗаполнитьКонтрагентов(Ответ, Сообщение.parentID);
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении адресной книги'; en = 'Error retrieving address book'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает ответ на запрос DMGetRecipientsListByNameRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetRecipientsListByNameRequest 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetRecipientsListByNameResponse или DMError
//
Функция ПолучитьСписокПолучателейПоИмени(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetRecipientsListByNameResponse");
		
		СтрокаЗапроса = Сообщение.query;
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(СтрокаЗапроса, ТекущийПользователь, Истина);
		
		Для каждого ЗначениеВыбора из ДанныеВыбора Цикл
			Ответ.items.Добавить(Строка(ЗначениеВыбора.Значение.Адресат));
		КонецЦикла;
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении адресной книги'; en = 'Error retrieving address book'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу значений, содержащую список электронных адресов по типу объектов.
//
// Параметры:
//   ТипОбъектов - Строка - тип объекта, например, "Контрагенты".
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица адресов с колонками:
//     * Ссылка - ссылка на владельца КИ.
//     * Представление - представление записи КИ.
//
Функция ПолучитьЭлектронныеАдреса(ТипОбъектов, ВидКонтактнойИнформации)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	Справочник."+ ТипОбъектов + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Ссылка");
		Результат.Колонки.Добавить("Представление");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет ответ на запрос DMGetAddressBookRequest списком пользователей.
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetAddressBookResponse, неявно возвращаемое значение
//   РодительID - Строка - идентификатор подразделения в справочнике СтруктураПредприятия 
//
Процедура ЗаполнитьПользователейВПодразделениях(Ответ, РодительID)
	
	Родитель = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(Строка(РодительID)) Тогда
		Родитель = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(РодительID));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Ссылка,
		|	Данные.Наименование КАК Наименование,
		|	Данные.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	(ВЫБРАТЬ
		|		СправочникСтруктураПредприятия.Ссылка КАК Ссылка,
		|		СправочникСтруктураПредприятия.Наименование КАК Наименование,
		|		ИСТИНА КАК ЭтоГруппа
		|	ИЗ
		|		Справочник.СтруктураПредприятия КАК СправочникСтруктураПредприятия
		|	ГДЕ
		|		СправочникСтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
		|		И СправочникСтруктураПредприятия.Родитель = &Родитель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ИсполнителиЗадач.РольИсполнителя,
		|		ИсполнителиЗадач.РольИсполнителя.Владелец.Наименование,
		|		ЛОЖЬ
		|	ИЗ
		|		РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|			ПО ИсполнителиЗадач.Исполнитель = СведенияОПользователяхДокументооборот.Пользователь
		|				И (СведенияОПользователяхДокументооборот.Подразделение = &Родитель)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СведенияОПользователяхДокументооборот.Пользователь,
		|		СведенияОПользователяхДокументооборот.Пользователь.ПредставлениеВПерепискеСРангом,
		|		ЛОЖЬ
		|	ИЗ
		|		РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	ГДЕ
		|		СведенияОПользователяхДокументооборот.Подразделение = &Родитель
		|		И НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен) КАК Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа УБЫВ,
		|	Наименование";
		
	Запрос.УстановитьПараметр("Родитель",Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлектронныеАдресаРоли = ПолучитьЭлектронныеАдреса("РолиИсполнителей",Справочники.ВидыКонтактнойИнформации.EmailРоли);
	ЭлектронныеАдресаПользователя = ПолучитьЭлектронныеАдреса("Пользователи",Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddressBookItem");
		
		Если Выборка.ЭтоГруппа Тогда
			ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSubdivision");
			ОбъектXDTO.name = Выборка.Наименование;
			ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
			ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеПодразделения(Выборка.Ссылка, ОбъектXDTO);
		Иначе
			СтрокиАдресов = ЭлектронныеАдресаРоли.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
			Если СтрокиАдресов.Количество() = 0 Тогда
				СтрокиАдресов = ЭлектронныеАдресаПользователя.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
				Если СтрокиАдресов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для каждого СтрокаАдреса из СтрокиАдресов Цикл
				ЭлементXDTO.addresses.Добавить(СтрокаАдреса.Адрес);
			КонецЦикла;
			
			ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
			ОбъектXDTO.name = Выборка.Наименование;
			ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		КонецЕсли;
		
		ЭлементXDTO.object = ОбъектXDTO;
		ЭлементXDTO.isFolder = Выборка.ЭтоГруппа;
		Ответ.items.Добавить(ЭлементXDTO);
		
	КонецЦикла;
			
КонецПроцедуры

// Заполняет ответ на запрос DMGetAddressBookRequest деревом пользователей по рабочим группам.
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetAddressBookResponse, неявно возвращаемое значение
//
Процедура ЗаполнитьПользователейСписком(Ответ)
	
	ВыборкаТаблица = ПользователиСерверПовтИсп.ПолучитьПользователейСписком();
	
	ЭлектронныеАдресаРоли = ПолучитьЭлектронныеАдреса("РолиИсполнителей",Справочники.ВидыКонтактнойИнформации.EmailРоли);
	ЭлектронныеАдресаПользователя = ПолучитьЭлектронныеАдреса("Пользователи",Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
	Для Каждого Выборка Из ВыборкаТаблица Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddressBookItem");
		
		СтрокиАдресов = ЭлектронныеАдресаРоли.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
		Если СтрокиАдресов.Количество() = 0 Тогда
			СтрокиАдресов = ЭлектронныеАдресаПользователя.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
			Если СтрокиАдресов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтрокаАдреса из СтрокиАдресов Цикл
			СтрокаXDTO.addresses.Добавить(СтрокаАдреса.Адрес);
		КонецЦикла;
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ОбъектXDTO.name = Выборка.Наименование;
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.isFolder = Ложь;
		Ответ.items.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ответ на запрос DMGetAddressBookRequest деревом пользователей по рабочим группам.
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetAddressBookResponse, неявно возвращаемое значение
//   РодительID - Строка - идентификатор группы в справочнике РабочиеГруппы 
//
Процедура ЗаполнитьПользователейВГруппах(Ответ, РодительID)
	
	Запрос = Новый Запрос;
	
	Родитель = Справочники.РабочиеГруппы.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Строка(РодительID)) Тогда
		Родитель = Справочники.РабочиеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор(РодительID));
	КонецЕсли;
	
	Если РодительID = Строка(Справочники.РабочиеГруппы.ВсеПользователи.УникальныйИдентификатор()) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Данные.Ссылка,
			|	Данные.Наименование КАК Наименование,
			|	Данные.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	(ВЫБРАТЬ
			|		Пользователи.Ссылка КАК Ссылка,
			|		Пользователи.ПредставлениеВПерепискеСРангом КАК Наименование,
			|		ЛОЖЬ КАК ЭтоГруппа
			|	ИЗ
			|		Справочник.Пользователи КАК Пользователи
			|	ГДЕ
			|		НЕ Пользователи.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ИсполнителиЗадач.РольИсполнителя,
			|		ИсполнителиЗадач.РольИсполнителя.Наименование,
			|		ЛОЖЬ
			|	ИЗ
			|		РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|	ГДЕ
			|		НЕ ИсполнителиЗадач.РольИсполнителя.ПометкаУдаления) КАК Данные
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа УБЫВ,
			|	Наименование";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Данные.Ссылка,
			|	Данные.Наименование КАК Наименование,
			|	Данные.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	(ВЫБРАТЬ
			|		РабочиеГруппы.Ссылка КАК Ссылка,
			|		РабочиеГруппы.Наименование КАК Наименование,
			|		ИСТИНА КАК ЭтоГруппа
			|	ИЗ
			|		Справочник.РабочиеГруппы КАК РабочиеГруппы
			|	ГДЕ
			|		РабочиеГруппы.ПометкаУдаления = ЛОЖЬ
			|		И РабочиеГруппы.Родитель = &Родитель
			|		И РабочиеГруппы.Ссылка <> ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РабочиеГруппыСостав.Пользователь,
			|		РабочиеГруппыСостав.Пользователь.ПредставлениеВПерепискеСРангом,
			|		ЛОЖЬ
			|	ИЗ
			|		Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
			|	ГДЕ
			|		РабочиеГруппыСостав.Ссылка = &Родитель
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ИсполнителиЗадач.РольИсполнителя,
			|		ИсполнителиЗадач.РольИсполнителя.Наименование,
			|		ЛОЖЬ
			|	ИЗ
			|		РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
			|			ПО ИсполнителиЗадач.Исполнитель = РабочиеГруппыСостав.Пользователь
			|				И (РабочиеГруппыСостав.Ссылка = &Родитель)) КАК Данные
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа УБЫВ,
			|	Наименование";
	КонецЕсли;
		
		
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		ЭлементXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddressBookItem");
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ОбъектXDTO.name = Справочники.РабочиеГруппы.ВсеПользователи.Наименование;
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
		ОбъектXDTO.objectID.id = Строка(Справочники.РабочиеГруппы.ВсеПользователи.УникальныйИдентификатор());
		ОбъектXDTO.objectID.type = "DMObject";
		ЭлементXDTO.object = ОбъектXDTO;
		ЭлементXDTO.isFolder = Истина;
		Ответ.items.Добавить(ЭлементXDTO);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Родитель",Родитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлектронныеАдресаРоли = ПолучитьЭлектронныеАдреса("РолиИсполнителей",Справочники.ВидыКонтактнойИнформации.EmailРоли);
	ЭлектронныеАдресаПользователя = ПолучитьЭлектронныеАдреса("Пользователи",Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddressBookItem");
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			СтрокиАдресов = ЭлектронныеАдресаРоли.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
			Если СтрокиАдресов.Количество() = 0 Тогда
				СтрокиАдресов = ЭлектронныеАдресаПользователя.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
				Если СтрокиАдресов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для каждого СтрокаАдреса из СтрокиАдресов Цикл
				ЭлементXDTO.addresses.Добавить(СтрокаАдреса.Адрес);
			КонецЦикла;
		КонецЕсли;
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ОбъектXDTO.name = Выборка.Наименование;
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		
		ЭлементXDTO.object = ОбъектXDTO;
		ЭлементXDTO.isFolder = Выборка.ЭтоГруппа;
		Ответ.items.Добавить(ЭлементXDTO);
		
	КонецЦикла;
			
	
КонецПроцедуры

// Заполняет ответ на запрос DMGetAddressBookRequest деревом контрагентов
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetAddressBookResponse, неявно возвращаемое значение
//   РодительID - Строка - идентификатор группы в справочнике Контрагенты 
//
Процедура ЗаполнитьКонтрагентов(Ответ, РодительID)
	
	Запрос = Новый Запрос;
	
	Родитель = Справочники.Контрагенты.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Строка(РодительID)) Тогда
		Родитель = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(РодительID));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникКонтрагенты.Ссылка,
	|	СправочникКонтрагенты.Наименование КАК Наименование,
	|	СправочникКонтрагенты.ЭтоГруппа
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты
	|ГДЕ
	|	НЕ СправочникКонтрагенты.ПометкаУдаления
	|	И СправочникКонтрагенты.Родитель = &Родитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлектронныеАдреса = ПолучитьЭлектронныеАдреса("Контрагенты",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);

	Пока Выборка.Следующий() Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddressBookItem");
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			СтрокиАдресов = ЭлектронныеАдреса.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
			Если СтрокиАдресов.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Для каждого СтрокаАдреса из СтрокиАдресов Цикл
					СтрокаXDTO.addresses.Добавить(СтрокаАдреса.Адрес);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ОбъектXDTO.name = Выборка.Наименование;
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.isFolder = Выборка.ЭтоГруппа;
		Ответ.items.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ответ на запрос DMGetAddressBookRequest деревом личных адресатов
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetAddressBookResponse, неявно возвращаемое значение
//   РодительID - Строка - идентификатор группы в справочнике ГруппыЛичныхАдресатов 
//
Процедура ЗаполнитьЛичныеАдресаты(Ответ, РодительID)
	
	Запрос = Новый Запрос;
	
	Родитель = Справочники.ГруппыЛичныхАдресатов.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Строка(РодительID)) Тогда
		Родитель = Справочники.ГруппыЛичныхАдресатов.ПолучитьСсылку(Новый УникальныйИдентификатор(РодительID));
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Ссылка,
		|	Данные.Наименование КАК Наименование,
		|	Данные.ЭтоГруппа КАК ЭтоГруппа,
		|	Данные.КонтактнаяИнформация.(
		|		Тип,
		|		АдресЭП
		|	)
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛичныеАдресаты.Ссылка КАК Ссылка,
		|		ЛичныеАдресаты.Наименование КАК Наименование,
		|		ЛОЖЬ КАК ЭтоГруппа,
		|		ЛичныеАдресаты.КонтактнаяИнформация.(
		|			Тип КАК Тип,
		|			АдресЭП КАК АдресЭП
		|		) КАК КонтактнаяИнформация
		|	ИЗ
		|		Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|	ГДЕ
		|		(&ПометкаУдаления = НЕОПРЕДЕЛЕНО
		|				ИЛИ НЕ ЕСТЬNULL(ЛичныеАдресаты.ПометкаУдаления, ЛОЖЬ))
		|		И ЛичныеАдресаты.Группа = &Родитель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СправочникГруппыЛичныхАдресатов.Ссылка,
		|		СправочникГруппыЛичныхАдресатов.Наименование,
		|		ИСТИНА,
		|		ПУСТАЯТАБЛИЦА.(, )
		|	ИЗ
		|		Справочник.ГруппыЛичныхАдресатов КАК СправочникГруппыЛичныхАдресатов
		|	ГДЕ
		|		(&ПометкаУдаления = НЕОПРЕДЕЛЕНО
		|				ИЛИ НЕ ЕСТЬNULL(СправочникГруппыЛичныхАдресатов.ПометкаУдаления, ЛОЖЬ))
		|		И СправочникГруппыЛичныхАдресатов.Родитель = &Родитель) КАК Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа УБЫВ,
		|	Наименование";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddressBookItem");
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			Для Каждого СтрокаКонтактнойИнформации Из Выборка.КонтактнаяИнформация.Выгрузить() Цикл
				Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					ЭлементXDTO.addresses.Добавить(СтрокаКонтактнойИнформации.АдресЭП);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ОбъектXDTO.name = Выборка.Наименование;
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		
		ЭлементXDTO.object = ОбъектXDTO;
		ЭлементXDTO.isFolder = Выборка.ЭтоГруппа;
		Ответ.items.Добавить(ЭлементXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает новое исходящее письмо, сформированное по данным объекта XDTO, и записывает его файлы
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   Письмо - ДокументОбъект.ИсходящееПисьмо
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingEMail
//   Ошибка - ОбъектXDTO типа DMError, неявно возвращаемое значение
//
// Возвращаемое значение:
//   Булево - Истина, если письмо записано успешно, и Ложь в противном случае
// 
Функция ЗаписатьДанныеИсходящегоПисьма(Узел, Письмо, ОбъектXDTO, Ошибка)
	
	Письмо.Заблокировать();
	ЗаполнитьДанныеИсходящегоПисьма(Узел, Письмо, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Письмо, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи исходящего письма'; en = 'Error saving outgoing email'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		Письмо.Записать();
		Если Письмо.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
			СвязиДокументов.УстановитьСвязь(Письмо.Ссылка, Неопределено,
				Письмо.ПисьмоОснование, Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
		ИначеЕсли Письмо.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
			СвязиДокументов.УстановитьСвязь(Письмо.Ссылка, Неопределено,
				Письмо.ПисьмоОснование,  Справочники.ТипыСвязей.ПересылкаПисьма);
		КонецЕсли;
		
		// добавление файлов в письмо
		Для Каждого Файл Из ОбъектXDTO.files Цикл
			Если ЗначениеЗаполнено(Файл.objectID.id) Тогда
				ИсходныйФайл = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Файл.objectID);
				ФайлСсылка = РаботаСФайламиВызовСервера.СкопироватьФайл(ИсходныйФайл, Письмо.Ссылка);
			Иначе
				АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Файл.binaryData);
				АдресВременногоХранилищаТекста = "";
						

				// Создадим карточку Файла в БД
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
				СведенияОФайле.ИмяБезРасширения = Файл.name;
				СведенияОФайле.РасширениеБезТочки = Файл.extension;
				СведенияОФайле.Размер = Файл.size;
				СведенияОФайле.ВремяИзменения = Файл.modificationDate;
				СведенияОФайле.ВремяИзмененияУниверсальное = Файл.modificationDateUniversal;
				
				ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Письмо.Ссылка, СведенияОФайле);
					
			КонецЕсли;
		КонецЦикла;
		Письмо.Записать();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции

// Возвращает список адресов электронной почты указанного контрагента
//
// Параметры:
//   Контрагент - СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//   СписокЗначений с элементами:
//     * Значение - Структура, описывающая адрес:
//         * Адрес - адрес электронной почты
//         * Контакт - ссылка на контрагента
//         * ОтображаемоеИмя - представление контрагента
//     * Представление - пользовательское представление адреса
//
Функция ПолучитьСписокПочтовыхАдресовКонтрагента(Контрагент)
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыКонтактнаяИнформация.Представление,
		|	КонтрагентыКонтактнаяИнформация.Ссылка,
		|	КонтрагентыКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)");
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			ПредставлениеАдреса = Выборка.Представление + ВКавычках(Выборка.Вид, "(", ")");
			СтруктураАдреса = Новый Структура("Адрес, Контакт, ОтображаемоеИмя");
			СтруктураАдреса.Адрес = Выборка.Представление;
			СтруктураАдреса.Контакт = Контрагент;
			СтруктураАдреса.ОтображаемоеИмя = Строка(Контрагент);
			Результат.Добавить(СтруктураАдреса, ПредставлениеАдреса, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает заполненный объект DMOutgoingEMail по ссылке на исходящее письмо
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   СсылкаНаПисьмо - ДокументСсылка.ИсходящееПисьмо
//   Предмет - ЛюбаяСсылка - ссылка на предмет письма
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingEMail
//
Функция ПолучитьДанныеИсходящегоПисьма(Узел, СсылкаНаПисьмо, Предмет = Неопределено)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingEMail");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаПисьмо.Ссылка);
	ПередатьОбщиеРеквизитыПисьма(Узел, СсылкаНаПисьмо, Ответ, Предмет);
	Если ЗначениеЗаполнено(СсылкаНаПисьмо.УчетнаяЗапись) Тогда
		Ответ.senderAddress = Строка(СсылкаНаПисьмо.УчетнаяЗапись.ИмяПользователя) + 
			" <" + СсылкаНаПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты + ">";
	Иначе
		Ответ.senderAddress = "";
	КонецЕсли;
	Ответ.blindCourtesyCopyRecipients = ПолучитьПредставлениеАдресатов(СсылкаНаПисьмо.ПолучателиСкрытыхКопий);
	Ответ.readyToBeSent = СсылкаНаПисьмо.ПодготовленоКОтправке;
	Ответ.sent = ЗначениеЗаполнено(СсылкаНаПисьмо.ДатаОтправки);
	
	Если ЗначениеЗаполнено(СсылкаНаПисьмо.ТипОтвета) Тогда
		ТипОтветаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMEMailAnswerType");
		ТипОтветаXDTO.name = Строка(СсылкаНаПисьмо.ТипОтвета);
		ТипОтветаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаПисьмо.ТипОтвета);
		Ответ.answerType = ТипОтветаXDTO;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПисьмо.ПисьмоОснование) Тогда
		ПисьмоОснованиеXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ПисьмоОснованиеXDTO.name = Строка(СсылкаНаПисьмо.ПисьмоОснование);
		ПисьмоОснованиеXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаПисьмо.ПисьмоОснование);
		Ответ.baseObject = ПисьмоОснованиеXDTO;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект DMIncomingEMail по ссылке на входящее письмо
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   СсылкаНаПисьмо - ДокументСсылка.ВходящееПисьмо
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingEMail
//
Функция ПолучитьДанныеВходящегоПисьма(Узел, СсылкаНаПисьмо)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingEMail");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаПисьмо.Ссылка);
	ПередатьОбщиеРеквизитыПисьма(Узел, СсылкаНаПисьмо, Ответ);
	Ответ.senderAddress = Строка(СсылкаНаПисьмо.ОтправительАдресат);

	Возврат Ответ;
	
КонецФункции

// Заполняет реквизиты, общие для входящих и исходящих писем
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   СсылкаНаПисьмо - ДокументСсылка.<...>Письмо
//   Ответ - ОбъектXDTO типа DMIncomingEMail или DMOutgoingEMail
//   Предмет - ЛюбаяСсылка - ссылка на предмет
//
Процедура ПередатьОбщиеРеквизитыПисьма(Узел, СсылкаНаПисьмо, Ответ, Предмет = Неопределено)
	
	Ответ.name = Строка(СсылкаНаПисьмо);
	Ответ.subject = СсылкаНаПисьмо.Тема;
	Ответ.creationDate = СсылкаНаПисьмо.Дата;
	Ответ.recipients = ПолучитьПредставлениеАдресатов(СсылкаНаПисьмо.ПолучателиПисьма);
	Ответ.courtesyCopyRecipients = ПолучитьПредставлениеАдресатов(СсылкаНаПисьмо.ПолучателиКопий);
	
	Важность = ОбработкаЗапросовXDTO.СоздатьОбъект("DMEMailImportance");
	Важность.name = Строка(СсылкаНаПисьмо.Важность);
	Важность.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаПисьмо.Важность);
	Ответ.importance = Важность;
	
	Если СсылкаНаПисьмо.Предмет <> Неопределено Тогда
		
		ПредметXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ПредметXDTO.name = Строка(СсылкаНаПисьмо.Предмет);
		ПредметXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаПисьмо.Предмет);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
			СсылкаНаПисьмо.Предмет,
			ПредметXDTO);
		
		Ответ.target = ПредметXDTO;
	КонецЕсли;
	
	// Не нужно получать представление для новых исходящих писем, которые редактируются как простой текст.
	Если ТипЗнч(СсылкаНаПисьмо) <> Тип("ДокументОбъект.ИсходящееПисьмо") Тогда
		Ответ.body = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
				СсылкаНаПисьмо, Новый УникальныйИдентификатор, Ложь);
	КонецЕсли;
			
	Если ТипЗнч(СсылкаНаПисьмо) = Тип("ДокументСсылка.ИсходящееПисьмо") 
		ИЛИ ТипЗнч(СсылкаНаПисьмо) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВладелецФайла",СсылкаНаПисьмо.Ссылка);
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Если ТипЗнч(СсылкаНаПисьмо.Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(СсылкаНаПисьмо.Предмет);
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) 
			Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет)
			Или ДелопроизводствоКлиентСервер.ЭтоКонтрагент(Предмет) Тогда
			
			МассивОбъектов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Предмет);
			
			Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Предмет) 
				Или  ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Предмет) Тогда
	
				ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Предмет, Справочники.ТипыСвязей.ПредметПереписки);
				Если ЗначениеЗаполнено(ПредметПереписки) Тогда
					ЗаполнитьПредметПисьма(Узел, Ответ, ПредметПереписки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
		Если МассивОбъектов = Неопределено Тогда
			МассивОбъектов = Новый Массив;;
		КонецЕсли;
		
		МассивОбъектов.Добавить(Предмет);
	КонецЕсли;
	
	Если МассивОбъектов <> Неопределено Тогда
		НаборКолонокФайлов = Новый Массив;
		НаборКолонокФайлов.Добавить("objectId");
		НаборКолонокФайлов.Добавить("name");
		НаборКолонокФайлов.Добавить("size");
		НаборКолонокФайлов.Добавить("modificationDateUniversal");
		НаборКолонокФайлов.Добавить("extension");
		
		МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектов, НаборКолонокФайлов);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(Ответ, МассивФайлов, НаборКолонокФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку адресатов, разделенных ";" в виде "Адресат <АдресАдресата>"
//
// Параметры:
//   ТаблицаПолучателей - ТаблицаЗначений с колонкой Адресат
//
// Возвращаемое значение:
//   Строка, содержащая перечень представлений адресатов
//
Функция ПолучитьПредставлениеАдресатов(ТаблицаПолучателей)
	
	СтрокаКВозврату = "";
	Для каждого Получатель Из ТаблицаПолучателей Цикл
		СтруктураАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Получатель.Адресат, Истина);
		СтрокаКВозврату = 
			СтрокаКВозврату + 
			СтруктураАдресата.Представление +
			"; ";
		
	КонецЦикла;
	
	Возврат СтрокаКВозврату;
	
КонецФункции

// Заполняет данные исходящего письма по объекту XDTO
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   Письмо - ДокументОбъект.ИсходящееПисьмо, неявно возвращаемый параметр
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingEMail
//
Процедура ЗаполнитьДанныеИсходящегоПисьма(Узел, Письмо, ОбъектXDTO) 
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Письмо.Автор = ТекущийПользователь;
	
	Письмо.Важность = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.importance.objectID);
	Письмо.ПодготовленоКОтправке = ОбъектXDTO.readyToBeSent;
	
	Письмо.ЕстьВложения = ОбъектXDTO.files.Количество() > 0;
	Письмо.ОтправительКонтакт = ТекущийПользователь;
	
	Текст = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Текст, ОбъектXDTO, "body"); 
	Письмо.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, Письмо.Тема, ОбъектXDTO, "subject");
	
	Если ОбъектXDTO.Установлено("target") Тогда
		Письмо.Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.target.objectID);
	КонецЕсли;
	Если ОбъектXDTO.Установлено("baseObject") Тогда
		Письмо.ПисьмоОснование = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.baseObject.objectID);
	КонецЕсли;
	Если ОбъектXDTO.Установлено("answerType") Тогда
		Письмо.ТипОтвета = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.answerType.objectID);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.senderAddress) Тогда
		
		// Поиск учетной записи по адресу
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УчетныеЗаписиЭлектроннойПочты.Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
			|		ПО УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка = УчетныеЗаписиЭлектроннойПочты.Ссылка
			|ГДЕ
			|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
			|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь
			|	И УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)";
		АдресЭлектроннойПочты = ОбъектXDTO.senderAddress;
		Если Найти(АдресЭлектроннойПочты,"<") <> 0 Тогда
			АдресЭлектроннойПочты = Сред(АдресЭлектроннойПочты, Найти(АдресЭлектроннойПочты,"<")+1);
			АдресЭлектроннойПочты = СтрЗаменить(АдресЭлектроннойПочты,">","");
		КонецЕсли;
		Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Письмо.УчетнаяЗапись = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено подходящей учетной записи для отправки через адрес ""%1""'; en = 'Not suitable email account found to send via address ""%1""'"),
				ОбъектXDTO.senderAddress);
			ВызватьИсключение (Текст);
		КонецЕсли;
	КонецЕсли;
	
	Получатели = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбъектXDTO.recipients, ";", Истина);
	ПолучателиКопии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбъектXDTO.courtesyCopyRecipients, ";", Истина);
	ПолучателиСкрытойКопии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбъектXDTO.blindCourtesyCopyRecipients, ";", Истина);
	Для каждого Строка Из Получатели Цикл
		
		Строка = СокрЛП(Строка);
		Попытка
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка);
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка);
			Иначе
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Строка.Представление, Строка);
			КонецЕсли;

			НоваяСтрока = Письмо.ПолучателиПисьма.Добавить();
			НоваяСтрока.Адресат = Адресат;
		Исключение
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан некорректный адрес получателя: %1'; en = 'Incorrect recipient address: %1'"),
				Строка);
			ВызватьИсключение(Текст);
		КонецПопытки;
		
	КонецЦикла;
	
	Письмо.ПолучателиПисьмаСтрокой = ТаблицаПолучателейВСтроку(Письмо.ПолучателиПисьма);
	
	Для каждого Строка Из ПолучателиКопии Цикл
		
		Строка = СокрЛП(Строка);
		Попытка
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка);
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка);
			Иначе
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Строка.Представление, Строка);
			КонецЕсли;
			
			НоваяСтрока = Письмо.ПолучателиКопий.Добавить();
			НоваяСтрока.Адресат = Адресат;
		Исключение
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан некорректный адрес получателя копии: %1'; en = 'Incorrect copy recipient address: %1'"),
				Строка);
			ВызватьИсключение(Текст);
		КонецПопытки;
		
	КонецЦикла;
	
	Для каждого Строка Из ПолучателиСкрытойКопии Цикл
		
		Строка = СокрЛП(Строка);
		Попытка
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка);
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка);
			Иначе
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(Строка.Представление, Строка);
			КонецЕсли;
			
			НоваяСтрока = Письмо.ПолучателиСкрытыхКопий.Добавить();
			НоваяСтрока.Адресат = Адресат;
		Исключение
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан некорректный адрес получателя скрытой копии: %1'; en = 'Incorrect hidden copy recipient address: %1'"),
				Строка);
			ВызватьИсключение(Текст);
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует табличную часть получателей письма в строку с разделителем ","
//
// Параметры:
//   ТаблицаПолучателей - ТаблицаЗначений с колонкой Адресат
//
// Возвращаемое значение:
//   Строка, содержащая перечень представлений адресатов
//
Функция ТаблицаПолучателейВСтроку(Знач ТаблицаПолучателей, Знач ПолучателиКопий = Неопределено)
	
	Если ТаблицаПолучателей.Количество() = 0 И ПолучателиКопий = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаКВозврату = "";
	Для Каждого Получатель Из ТаблицаПолучателей Цикл
		
		Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Получатель.Адресат).Представление;
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			СтрокаКВозврату,
			", ",
			Представление);
			
	КонецЦикла;
	
	Если ПустаяСтрока(СтрокаКВозврату) И ПолучателиКопий <> Неопределено Тогда
		
		Для Каждого Получатель Из ПолучателиКопий Цикл
			
			Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Получатель.Адресат).Представление;
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				СтрокаКВозврату,
				", ",
				Представление);
				
			КонецЦикла;
			
	КонецЕсли;	
	
	Возврат СтрокаКВозврату;
	
КонецФункции

// Заполняет предмет письма XDTO по переданной ссылке на предмет
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы
//   Ответ - ОбъектXDTO типа DMIncomingEMail или DMOutgoingEMail
//   СсылкаНаПредмет - ЛюбаяСсылка - ссылка на предмет
//
Процедура ЗаполнитьПредметПисьма(Узел, ПисьмоXDTO, СсылкаНаПредмет)
	
	ПредметXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	ПредметXDTO.name = Строка(СсылкаНаПредмет);
	ПредметXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаПредмет);
	
	ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Узел,
		СсылкаНаПредмет,
		ПредметXDTO);
	
	ПисьмоXDTO.target = ПредметXDTO;
	
КонецПроцедуры

// Добавляет письмо в дерево переписки
//    
// Параметры:
//   СтрокиXDTO - СписокXDTO, неявно возвращаемое значение
//   Письмо - Произвольный - объект для добавления
//   ВыведенныеПисьма - массив уже добавленных объектов, неявно возвращаемое значение
//
Процедура ДобавитьПисьмоВДерево(СтрокиXDTO, Письмо, ВыведенныеПисьма)
	
	Если ВыведенныеПисьма.Найти(Письмо) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыведенныеПисьма.Добавить(Письмо);
	
	СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondenceFollower");
	ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеФайла(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.ДатаСоздания;
		СтрокаXDTO.creationDate = Письмо.ДатаСоздания;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеДокумента(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.ДатаРегистрации;
		СтрокаXDTO.creationDate = Письмо.ДатаСоздания;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеДокумента(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.ДатаРегистрации;
		СтрокаXDTO.creationDate = Письмо.ДатаСоздания;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name =  ПолучитьПредставлениеДокумента(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.ДатаРегистрации;
		СтрокаXDTO.creationDate = Письмо.ДатаСоздания;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Письмо.ОтправительАдресат).Представление;
		СтрокаXDTO.date = Письмо.Дата;
		СтрокаXDTO.creationDate = Письмо.Дата;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = Письмо.ПолучателиПисьмаСтрокой;
		СтрокаXDTO.date = Письмо.Дата;
		СтрокаXDTO.creationDate = Письмо.Дата;
		СтрокаXDTO.sent = ЗначениеЗаполнено(Письмо.ДатаОтправки);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеОбъекта(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.ДатаНачала;
		СтрокаXDTO.creationDate = Письмо.ДатаНачала;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеОбъекта(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Письмо);
		СтрокаXDTO.date = ДанныеПроектнойЗадачи.НачалоФакт;
		СтрокаXDTO.creationDate = ДанныеПроектнойЗадачи.НачалоФакт;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроект(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеОбъекта(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.ДатаПоследнейЗагрузкиИзВнешнегоФайла;
		СтрокаXDTO.creationDate = Письмо.ДатаПоследнейЗагрузкиИзВнешнегоФайла;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоЗадачаИсполнителя(Письмо) Тогда
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Письмо);
		ОбъектXDTO.name = ПолучитьПредставлениеОбъекта(Письмо);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Письмо.Дата;
		СтрокаXDTO.creationDate = Письмо.Дата;
	КонецЕсли;
	
	СтрокиXDTO.Добавить(СтрокаXDTO);
	
	ЗаполнитьПодчиненныеДокументы(СтрокаXDTO, Письмо, ВыведенныеПисьма);
	
КонецПроцедуры

// Получает представление документа для дерева переписки
//
// Параметры:
//   Документ - СправочникСсылка.<...>Документы - документ, чье представление нужно получить
//
// Возвращаемое значение:
//   Строка - представление документа
//
Функция ПолучитьПредставлениеДокумента(Документ)
	
	Возврат Документ.Заголовок + " " + ВКавычках(Документ.Метаданные().ПредставлениеОбъекта, "(", ")")
	
КонецФункции

// Получает представление объекта для дерева переписки
//
// Параметры:
//   Объект - Произвольный - объект, чье представление нужно получить
//
// Возвращаемое значение:
//   Строка - представление объекта
//
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Возврат Строка(Объект) + " " + ВКавычках(Объект.Метаданные().ПредставлениеОбъекта, "(", ")")
	
КонецФункции

// Получает представление файла для дерева переписки
//
// Параметры:
//   Файл - СправочникСсылка.Файлы - файл, чье представление нужно получить
//
// Возвращаемое значение:
//   Строка - представление файла
//
Функция ПолучитьПредставлениеФайла(Файл)
	
	Возврат Файл.ПолноеНаименование + " " + ВКавычках(Файл.Метаданные().ПредставлениеОбъекта, "(", ")")
	
КонецФункции

// Заполняет добавляет и заполняет строки XDTO дерева переписки по данным писем
//
// Параметры:
//   СтрокиXDTO - СписокXDTO - список, подлежащий дополнению, неявно возвращаемое значение
//   Родитель - Произвольный - объект, переписку по которому следует добавить
//   ВыведенныеПисьма - Массив - уже добавленные письма, неявно возвращаемое значение
//
Процедура ЗаполнитьПодчиненныеДокументы(СтрокиXDTO, Родитель, ВыведенныеПисьма)
	
	ПодчиненныеПисьма = Новый Массив;
	ВстроеннаяПочтаСервер.ПолучитьПодчиненныеПисьма(Родитель, ПодчиненныеПисьма);
	Для каждого ПодчиненноеПисьмо Из ПодчиненныеПисьма Цикл
		ДобавитьПисьмоВДерево(СтрокиXDTO.followers, ПодчиненноеПисьмо, ВыведенныеПисьма);
	КонецЦикла;
	
	КорневыеПисьмаПоПредмету = ВстроеннаяПочтаСервер.ПолучитьКорневыеПисьмаПоПредмету(Родитель);
	Для каждого КорневоеПисьмо Из КорневыеПисьмаПоПредмету Цикл
		ДобавитьПисьмоВДерево(СтрокиXDTO.followers, КорневоеПисьмо, ВыведенныеПисьма);
	КонецЦикла;

КонецПроцедуры

// Заполняет переписку с указанным контрагентом
//
// Параметры:
//   СтрокиXDTO - СписокXDTO - список документов для заполнения, неявно возвращаемый параметр
//   Контрагент - СправочникСсылка.Контрагенты
//
Процедура ЗаполнитьПерепискуСКонтрагентом(СтрокиXDTO, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийДокумент.Ссылка КАК Ссылка,
	|	ВходящийДокумент.ДатаРегистрации,
	|	ВходящийДокумент.РегистрационныйНомер,
	|	ВходящийДокумент.Заголовок
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
	|		ПО (СвязьВОтветНа.Документ = ВходящийДокумент.Ссылка)
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
	|		ПО (СвязьПредметПереписки.Документ = ВходящийДокумент.Ссылка)
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|ГДЕ
	|	ВходящийДокумент.Отправитель = &Контрагент
	|	И СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
	|	И СвязьПредметПереписки.СвязанныйДокумент ЕСТЬ NULL 
	|	И НЕ ВходящийДокумент.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящийДокумент.Ссылка,
	|	ИсходящийДокумент.ДатаРегистрации,
	|	ИсходящийДокумент.РегистрационныйНомер,
	|	ИсходящийДокумент.Заголовок
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
	|		ПО (СвязьВОтветНа.Документ = ИсходящийДокумент.Ссылка)
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
	|		ПО (СвязьПредметПереписки.Документ = ИсходящийДокумент.Ссылка)
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|ГДЕ
	|	&Контрагент В
	|			(ВЫБРАТЬ
	|				ИсходящийДокументПолучатели.Получатель
	|			ИЗ
	|				Справочник.ИсходящиеДокументы.Получатели КАК ИсходящийДокументПолучатели
	|			ГДЕ
	|				ИсходящийДокументПолучатели.Ссылка = ИсходящийДокумент.Ссылка)
	|	И СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
	|	И СвязьПредметПереписки.СвязанныйДокумент ЕСТЬ NULL 
	|	И НЕ ИсходящийДокумент.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязьПредметПереписки.СвязанныйДокумент,
	|	ЕСТЬNULL(ОбщиеРеквизитыПредметаПереписки.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|	ЕСТЬNULL(ОбщиеРеквизитыПредметаПереписки.РегистрационныйНомер, """"),
	|	ЕСТЬNULL(ОбщиеРеквизитыПредметаПереписки.Заголовок, """")
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
	|		ПО ВходящиеДокументы.Ссылка = СвязьПредметПереписки.Документ
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыПредметаПереписки
	|		ПО (ОбщиеРеквизитыПредметаПереписки.Документ = СвязьПредметПереписки.СвязанныйДокумент)
	|ГДЕ
	|	ВходящиеДокументы.Отправитель = &Контрагент
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязьПредметПереписки.СвязанныйДокумент,
	|	ЕСТЬNULL(ОбщиеРеквизитыПредметаПереписки.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|	ЕСТЬNULL(ОбщиеРеквизитыПредметаПереписки.РегистрационныйНомер, """"),
	|	ЕСТЬNULL(ОбщиеРеквизитыПредметаПереписки.Заголовок, """")
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
	|		ПО ИсходящиеДокументы.Ссылка = СвязьПредметПереписки.Документ
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыПредметаПереписки
	|		ПО (ОбщиеРеквизитыПредметаПереписки.Документ = СвязьПредметПереписки.СвязанныйДокумент)
	|ГДЕ
	|	&Контрагент В
	|			(ВЫБРАТЬ
	|				ИсходящийДокументПолучатели.Получатель
	|			ИЗ
	|				Справочник.ИсходящиеДокументы.Получатели КАК ИсходящийДокументПолучатели
	|			ГДЕ
	|				ИсходящийДокументПолучатели.Ссылка = ИсходящиеДокументы.Ссылка)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТаблДокументов = Запрос.Выполнить().Выгрузить();
	ТаблДокументов.Сортировать("ДатаРегистрации");
	
	Для Каждого Строка Из ТаблДокументов Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondenceFollower");
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Строка.Ссылка);
		ОбъектXDTO.name = ПолучитьПредставлениеДокумента(Строка.Ссылка);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Строка.ДатаРегистрации;
		СтрокаXDTO.creationDate = Строка.ДатаРегистрации;
		СтрокаXDTO.regNumber = Строка.РегистрационныйНомер;
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			Если Строка.Ссылка.Получатели.Найти(Истина, "Отправлен") <> Неопределено Тогда 
				СтрокаXDTO.sent = Истина;
			Иначе
				СтрокаXDTO.sent = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПодчиненныеДокументыПоКонтрагенту(СтрокаXDTO.followers, Строка);
		
		СтрокиXDTO.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет подчиненные строки к документам переписки с Контрагентом
//
// Параметры:
//   СтрокиXDTO - СписокXDTO - список документов для заполнения, неявно возвращаемый параметр
//   Строка - Строка выборки документов с реквизитом Ссылка
//
Процедура ЗаполнитьПодчиненныеДокументыПоКонтрагенту(СтрокиXDTO, СтрокаДерева)
	
	Ссылка = СтрокаДерева.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящиеДокументы.Ссылка КАК Ссылка,
		|	ИсходящиеДокументы.Заголовок КАК Заголовок,
		|	ИсходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ИсходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	1 КАК ИндексКартинки
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО (СвязьВОтветНа.Документ = ИсходящиеДокументы.Ссылка)
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйДокумент = &Ссылка
		|	И (НЕ ИсходящиеДокументы.ПометкаУдаления)";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеДокументы.Ссылка КАК Ссылка,
		|	ВходящиеДокументы.Заголовок КАК Заголовок,
		|	ВходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ВходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	0 КАК ИндексКартинки
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО (СвязьВОтветНа.Документ = ВходящиеДокументы.Ссылка)
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйДокумент = &Ссылка
		|	И (НЕ ВходящиеДокументы.ПометкаУдаления)";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящиеДокументы.Ссылка КАК Ссылка,
		|	ИсходящиеДокументы.Заголовок КАК Заголовок,
		|	ИсходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ИсходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	1 КАК ИндексКартинки
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО (СвязьВОтветНа.Документ = ИсходящиеДокументы.Ссылка)
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
		|		ПО (СвязьПредметПереписки.Документ = ИсходящиеДокументы.Ссылка)
		|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|ГДЕ
		|	СвязьПредметПереписки.СвязанныйДокумент = &Ссылка
		|	И СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
		|	И (НЕ ИсходящиеДокументы.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка,
		|	ВходящиеДокументы.Заголовок,
		|	ВходящиеДокументы.РегистрационныйНомер,
		|	ВходящиеДокументы.ДатаРегистрации,
		|	0
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО (СвязьВОтветНа.Документ = ВходящиеДокументы.Ссылка)
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
		|		ПО (СвязьПредметПереписки.Документ = ВходящиеДокументы.Ссылка)
		|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|ГДЕ
		|	СвязьПредметПереписки.СвязанныйДокумент = &Ссылка
		|	И СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
		|	И (НЕ ВходящиеДокументы.ПометкаУдаления)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondenceFollower");
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	
		ОбъектXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		ОбъектXDTO.name = ПолучитьПредставлениеДокумента(Выборка.Ссылка);
		СтрокаXDTO.object = ОбъектXDTO;
		СтрокаXDTO.recipients = "";
		СтрокаXDTO.date = Выборка.ДатаРегистрации;
		СтрокаXDTO.regNumber = Выборка.РегистрационныйНомер;
		СтрокаXDTO.creationDate = Выборка.ДатаРегистрации;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы")  Тогда
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"Отправитель, Подписал");
			СтрокаXDTO.sent = ПолучитьПризнакОтправлен(
				Выборка.Ссылка, СтруктураРеквизитов.Отправитель, СтруктураРеквизитов.Подписал);
		КонецЕсли;
		
		ЗаполнитьПодчиненныеДокументыПоКонтрагенту(СтрокаXDTO.followers, Выборка);
		
		СтрокиXDTO.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, отправлен ли документ указанному получателю и адресату
//
// Параметры:
//   ИсходящийДокумент - СправочникСсылка.ИсходящиеДокументы
//   Получатель - СправочникСсылка.Контрагенты
//   Адресат - СправочникСсылка.КонтактныеЛица
//
// Возвращаемое значение:
//   Булево - Истина, если получатель присутствует в перечне получателей
//
Функция ПолучитьПризнакОтправлен(ИсходящийДокумент, Получатель, Адресат)
	
	Отправлен = Ложь;
	
	ПараметрыОтбора = Новый Структура("Получатель", Получатель);
	НайденныеСтроки = ИсходящийДокумент.Получатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 1 Тогда 
		Отправлен =	НайденныеСтроки[0].Отправлен;
	Иначе
		ПараметрыОтбора = Новый Структура("Получатель, Адресат", Получатель, Адресат);
		НайденныеСтроки = ИсходящийДокумент.Получатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда 
			Отправлен = НайденныеСтроки[0].Отправлен;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отправлен;
	
КонецФункции

#КонецОбласти
