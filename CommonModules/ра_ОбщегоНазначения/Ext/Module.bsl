////////////////////////////////////////////////////////////////////////////////
// Подсистема ЕОСК.
// Серверные процедуры и функции общего назначения
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаПолученияДанныхВыбора

Процедура ДобавитьУсловияОтбораПоПараметрам(Параметры, Оператор) Экспорт
	
	Если Не Параметры.Свойство("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗнач из Параметры.Отбор Цикл
		
		ПсевдонимТаблицы = НайтиПсевдонимТаблицыПоПолю(КлючИЗнач.Ключ, Оператор);
		Если ПсевдонимТаблицы <> Неопределено Тогда
			
			ТипПоляСравнения = ТипЗнч(КлючИЗнач.Значение);
			Если ТипПоляСравнения = Тип("ФиксированныйМассив") 
				или ТипПоляСравнения = Тип("Массив") 
				или ТипПоляСравнения = Тип("СписокЗначений") Тогда
				Оператор.Отбор.Добавить(СтрШаблон("%2.%1 В(&%1)", КлючИЗнач.Ключ, ПсевдонимТаблицы));
			Иначе
				Оператор.Отбор.Добавить(СтрШаблон("%2.%1 = &%1", КлючИЗнач.Ключ, ПсевдонимТаблицы));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Параметры.Свойство("ВыборГруппИЭлементов") Тогда
		
		Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			
			ПсевдонимТаблицы = НайтиПсевдонимТаблицыПоПолю("ЭтоГруппа", Оператор);
			Если ПсевдонимТаблицы <> Неопределено Тогда
				Оператор.Отбор.Добавить(СтрШаблон("%2.%1 = Ложь", "ЭтоГруппа", ПсевдонимТаблицы));	
			КонецЕсли;
			
		ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
			
			ПсевдонимТаблицы = НайтиПсевдонимТаблицыПоПолю("ЭтоГруппа", Оператор);
			Если ПсевдонимТаблицы <> Неопределено Тогда
				Оператор.Отбор.Добавить(СтрШаблон("%2.%1 = Истина", "ЭтоГруппа", ПсевдонимТаблицы));	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВыбораПоЗапросу(ДанныеВыбора, Параметры, Запрос, ПоляВводаПоСтроке, ДополнениеПредставления = "") Экспорт
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаПоиска       = СокрП(НРег(Параметры.СтрокаПоиска));
	ДлинаСтрокиПоиска  = СтрДлина(Параметры.СтрокаПоиска);
	СпособПоискаСтроки = Параметры.СпособПоискаСтроки;
	
	Шрифт = Новый Шрифт(,,Истина);
	Цвет  = Новый Цвет(0, 164, 17);
	
	МассивДополнения = СтрРазделить(СтрЗаменить(ДополнениеПредставления, " ",""), ",");
	
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		ПозицияНачала = 0;
		Для каждого ИмяПоля из ПоляВводаПоСтроке Цикл
			
			ЗначениеПоля = Выборка[ИмяПоля];
			Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
				ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=");
				Если ЗначениеПоля <> СтрЗаменить(СтрокаПоиска, " ","") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Параметры.СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.Начало Тогда
				Если НРег(Лев(ЗначениеПоля, ДлинаСтрокиПоиска)) = СтрокаПоиска Тогда
					ПозицияНачала = 1;
				КонецЕсли;
			Иначе
				ПозицияНачала = СтрНайти(НРег(ЗначениеПоля), СтрокаПоиска);
			КонецЕсли;
			
			Если ПозицияНачала <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ПозицияНачала = 0 Тогда
			
			ТекстПредставления = СокрП(Выборка.Ссылка);
			
		Иначе
			
			ИндексДополнения = Неопределено;
			Для Сч = 0 по МассивДополнения.ВГраница() Цикл
				
				Если МассивДополнения[Сч] <> ИмяПоля Тогда
					ИндексДополнения = Сч;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			ТекстПредставления = Новый ФорматированнаяСтрока(
											Лев(ЗначениеПоля, ПозицияНачала - 1),
											Новый ФорматированнаяСтрока(Сред(ЗначениеПоля, ПозицияНачала, СтрДлина(СтрокаПоиска)), Шрифт, Цвет),
											Сред(ЗначениеПоля, ПозицияНачала + СтрДлина(СтрокаПоиска)),
											?(ИндексДополнения <> Неопределено, " (" + Выборка[МассивДополнения[ИндексДополнения]] + ")", ""));
				
		КонецЕсли;
										
		ЗначениеСписка = Новый Структура;
		ЗначениеСписка.Вставить("Значение",           Выборка.Ссылка);
		ЗначениеСписка.Вставить("ПометкаУдаления",    Выборка.ПометкаУдаления);
		
		ДанныеВыбора.Добавить(ЗначениеСписка, ?(ПустаяСтрока(ТекстПредставления), "<>", ТекстПредставления));

	КонецЦикла;
			
КонецПроцедуры

Функция ЗапросДанныхВыбораПоТексту(Текст, Параметры, ПоляВводаПоСтроке) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Текст);
	
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	Оператор     = ПакетЗапроса.Операторы[0];
	
	ДобавитьУсловияОтбораПоПараметрам(Параметры, Оператор);
		
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		
		СпособПоискаСтроки = Неопределено;
		Если Не Параметры.Свойство("СпособПоискаСтроки", СпособПоискаСтроки) Тогда
			СпособПоискаСтроки = Метаданные.СвойстваОбъектов.СпособПоискаСтрокиПриВводеПоСтроке.Начало;	
		КонецЕсли;
		
		Оператор.КоличествоПолучаемыхЗаписей = 10;
		Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда 
			Оператор.Отбор.Добавить(ПолучитьУсловиеПоиска(Оператор, ПоляВводаПоСтроке, СпособПоискаСтроки, Параметры.СтрокаПоиска));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПакетЗапроса.Порядок.Количество() Тогда
		Псевдоним = НайтиПсевдонимТаблицыПоПолю("Ссылка", Оператор);
		Если Псевдоним <> Неопределено Тогда
			ПакетЗапроса.Порядок.Добавить(СтрШаблон("%1.Ссылка", Псевдоним));
			ПакетЗапроса.Автопорядок = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат ПолучитьЗапросПоСхемеЗапроса(СхемаЗапроса, Параметры);	
	
КонецФункции

Функция НайтиПолеТаблицыПоПолю(Поле, Оператор) Экспорт
	
	Для каждого ИсточникЗапроса из Оператор.Источники Цикл
		
		НайденноеПоле = ИсточникЗапроса.Источник.ДоступныеПоля.Найти(Поле);
		Если НайденноеПоле <> Неопределено Тогда
			Возврат Новый Структура("Поле, Источник", НайденноеПоле, ИсточникЗапроса.Источник);
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция НайтиПсевдонимТаблицыПоПолю(Поле, Оператор) Экспорт
	
	Для каждого ИсточникЗапроса из Оператор.Источники Цикл
		
		НайденноеПоле = ИсточникЗапроса.Источник.ДоступныеПоля.Найти(Поле);
		Если НайденноеПоле <> Неопределено Тогда
			Возврат ИсточникЗапроса.Источник.Псевдоним;
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция ПолеДоступно(Поле, Оператор) Экспорт
	
	Возврат НайтиПсевдонимТаблицыПоПолю(Поле, Оператор) <> Неопределено;
	
КонецФункции

Функция ПолучитьДополнениеПредставления(МетаданныеОбъекта) Экспорт
	
	МассивПолей = Новый Массив;
	Если МетаданныеОбъекта.ДлинаНаименования <> 0 Тогда
		МассивПолей.Добавить("Наименование");
	КонецЕсли;
	Если МассивПолей.Количество() = 0 и МетаданныеОбъекта.ДлинаКода <> 0 Тогда
		МассивПолей.Добавить("Код");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПолей, ",");
	
КонецФункции

Функция ПолучитьЗапросПоСхемеЗапроса(СхемаЗапроса, Параметры) Экспорт
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	
	Если Не Параметры.Свойство("Отбор") Тогда
		Возврат Запрос;
	КонецЕсли;
	
	Для каждого КлючИЗнач из Параметры.Отбор Цикл
		Запрос.УстановитьПараметр(КлючИЗнач.Ключ, КлючИЗнач.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьПоляВводаПоСтроке(МетаданныеОбъекта) Экспорт
	
	ПоляПоиска = Новый Массив;
	Для каждого Поле из МетаданныеОбъекта.ВводПоСтроке Цикл
		ПоляПоиска.Добавить(Поле.Имя);
	КонецЦикла;
	
	Возврат ПоляПоиска;
	
КонецФункции

// Выполняет заполнение данных выбора аналогично платформенному механизму
// Параметры:
//	МенеджерДанных          - менеджер объектов
//	ДанныеВыбора            - список значений,переменная, в которую будут заполнены данные выбора
//  Параметры               - структура, параметры данных выбора
//  СтандартнаяОбработка    - признак платформенной обработки, в процедуре будет установлена в Ложь
//	ПоляВводаПоСтроке       - массив полей, по которым будет осуществляться подбор. Если не указан выбор будет по полям, указанным в метаданных
//	ДополнениеПредставления - строка, перечень полей, которые будут выводиться в качестве представления найденного значения,
//							  по-умолчанию представление <Поле поиска> (Наименование), если найдено в поле поиска
//  						  Наименование (Код), если найдено в Наименовании, Код (Наименование), если найдено в коде
//
Процедура ПолучитьСтандартныеДанныеВыбора(МенеджерДанных, ДанныеВыбора, Параметры, СтандартнаяОбработка, ПоляВводаПоСтроке = Неопределено, ДополнениеПредставления = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерДанных));
	
	Если ПоляВводаПоСтроке = Неопределено Тогда
		ПоляВводаПоСтроке = ПолучитьПоляВводаПоСтроке(МетаданныеОбъекта);
	КонецЕсли;
	
	Если ДополнениеПредставления = Неопределено Тогда
		ДополнениеПредставления = ПолучитьДополнениеПредставления(МетаданныеОбъекта);
	КонецЕсли;
	
	СхемаЗапроса = СтандартнаяСхемаЗапросаДанныхВыбора(МетаданныеОбъекта, ДанныеВыбора, Параметры, ПоляВводаПоСтроке);
	
	Запрос = ПолучитьЗапросПоСхемеЗапроса(СхемаЗапроса, Параметры);
	
	ЗаполнитьДанныеВыбораПоЗапросу(ДанныеВыбора, Параметры, Запрос, ПоляВводаПоСтроке, ДополнениеПредставления);
	
КонецПроцедуры

Функция ПолучитьСхемуЗапросаДанныхВыбора(МетаданныеОбъекта, ПоляВводаПоСтроке = Неопределено) Экспорт
	
	Если ПоляВводаПоСтроке = Неопределено Тогда
		ПоляВводаПоСтроке = ПолучитьПоляВводаПоСтроке(МетаданныеОбъекта);
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса; 
	
	Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Оператор.Источники.Добавить(МетаданныеОбъекта.ПолноеИмя()).Источник.Псевдоним = "Т";
	
	Оператор.ВыбираемыеПоля.Добавить("Ссылка");
	Оператор.ВыбираемыеПоля.Добавить("ПометкаУдаления");
	
	Если МетаданныеОбъекта.ДлинаКода <> 0 Тогда
		Оператор.ВыбираемыеПоля.Добавить("Код");
	КонецЕсли;
	Если МетаданныеОбъекта.ДлинаНаименования <> 0 Тогда
		Оператор.ВыбираемыеПоля.Добавить("Наименование");
	КонецЕсли;
	
	Для каждого Поле из ПоляВводаПоСтроке Цикл
		
		Если Поле = "Код"
			или Поле = "Наименование" Тогда
			Продолжить;
		КонецЕсли;
		
		Оператор.ВыбираемыеПоля.Добавить(Поле);
		
	КонецЦикла;

	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ПакетЗапроса.Порядок.Добавить("Ссылка");
	ПакетЗапроса.Автопорядок = Истина;

	Возврат СхемаЗапроса;
	
КонецФункции

Функция ПолучитьУсловиеПоиска(Оператор, ПоляВводаПоСтроке, СпособПоискаСтроки, Знач СтрокаПоиска) Экспорт
	
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", """""");
	СтрокаШаблон = ?(СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.Начало, "%1.%2 ПОДОБНО ""%%%3""", "%1.%2 ПОДОБНО ""%%%3%%""");
	
	СтрокаПоискаЧисло = СтрЗаменить(СтрокаПоиска, " ","");
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоиска) Тогда
		СтрокаШаблонЧисло = "%1.%2 = %3";
	КонецЕсли;
	
	МассивСтрокПоиска = Новый Массив;
	Для каждого ИмяПоля из ПоляВводаПоСтроке Цикл
		СтруктураПолеТаблицы = НайтиПолеТаблицыПоПолю(ИмяПоля, Оператор);
		Если СтруктураПолеТаблицы = Неопределено Тогда
			Продолжить;
		ИначеЕсли СтруктураПолеТаблицы.Поле.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			МассивСтрокПоиска.Добавить(СтрШаблон(СтрокаШаблон, СтруктураПолеТаблицы.Источник.Псевдоним, ИмяПоля, СтрокаПоиска));
		ИначеЕсли СтрокаШаблонЧисло <> Неопределено
			и СтруктураПолеТаблицы.Поле.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			МассивСтрокПоиска.Добавить(СтрШаблон(СтрокаШаблонЧисло, СтруктураПолеТаблицы.Источник.Псевдоним, ИмяПоля, СтрокаПоиска));
		КонецЕсли;
	КонецЦикла;
	
	Возврат "(" + СтрСоединить(МассивСтрокПоиска, " ИЛИ ") + ")";
	
КонецФункции

Функция СтандартнаяСхемаЗапросаДанныхВыбора(МетаданныеОбъекта, ДанныеВыбора, Параметры, ПоляВводаПоСтроке = Неопределено) Экспорт
	
	Если ПоляВводаПоСтроке = Неопределено Тогда
		ПоляВводаПоСтроке = ПолучитьПоляВводаПоСтроке(МетаданныеОбъекта);
	КонецЕсли;
	
	СхемаЗапроса = ПолучитьСхемуЗапросаДанныхВыбора(МетаданныеОбъекта, ПоляВводаПоСтроке);
	 
	Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	ДобавитьУсловияОтбораПоПараметрам(Параметры, Оператор);
		
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		
		СпособПоискаСтроки = Неопределено;
		Если Не Параметры.Свойство("СпособПоискаСтроки", СпособПоискаСтроки) Тогда
			СпособПоискаСтроки = МетаданныеОбъекта.СпособПоискаСтрокиПриВводеПоСтроке;	
		КонецЕсли;
		
		Оператор.КоличествоПолучаемыхЗаписей = 10;
		
		Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда 
			Оператор.Отбор.Добавить(ПолучитьУсловиеПоиска(Оператор, ПоляВводаПоСтроке, СпособПоискаСтроки, Параметры.СтрокаПоиска));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СхемаЗапроса;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура ОбновитьОсновныеДескрипторыДоступа(МассивПользователей = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументыКачества = Новый Массив;
	ДокументыКачества.Добавить("ra_Nesootvetstvie");
	ДокументыКачества.Добавить("ra_ZayavkaNaKontrolnuyuOperaciyu");
	ДокументыКачества.Добавить("ra_ZayavkaNaOcenkuSootvetstviya");
	
	ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа();
	ПодразделенияИспользуются = ОтключенныеРазрезы.Найти(ПланыВидовХарактеристик.ВидыДоступа.Подразделения) = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", МассивПользователей);
	Запрос.УстановитьПараметр("Предмет", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ВнутренниеДокументы"));
	Запрос.УстановитьПараметр("ОтключенныеРазрезы", ОтключенныеРазрезы);
	Запрос.УстановитьПараметр("ПодразделенияИспользуются", ПодразделенияИспользуются);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Подразделение КАК ЗначениеДоступа,
	|	ВЫБОР Пользователи.Недействителен
	|		КОГДА ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недействителен,
	|	0 КАК ТипДескриптора
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ И %1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	ПользователиПодразделения.Подразделение,
	|	ВЫБОР Пользователи.Недействителен
	|		КОГДА ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	4
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.ра_Подразделения КАК ПользователиПодразделения
	|		ПО Пользователи.Ссылка = ПользователиПодразделения.Ссылка
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ И %1
	|	И &ПодразделенияИспользуются
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	ВидыДоступа.Ссылка,
	|	ВЫБОР Пользователи.Недействителен
	|		КОГДА ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	4
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ И %1
	|	И ВидыДоступа.Ссылка В(&ОтключенныеРазрезы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Пользователь КАК Пользователь,
	|	Данные.ЗначениеДоступа КАК ЗначениеДоступа,
	|	Данные.Недействителен КАК Недействителен,
	|	ЗНАЧЕНИЕ(Справочник.УровниДоступа.Редактирование) КАК УровеньДоступа
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.ТипДескриптора = 0";
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ?(МассивПользователей = Неопределено, "ИСТИНА", "Пользователи.Ссылка В(&Ссылки)"));
	
	// Общие разрешения.
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РазрешенияДоступаОбщие.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		
		Если Не Выборка.Недействителен Тогда
			Если ПодразделенияИспользуются Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Локальные администраторы.
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Предмет КАК Предмет,
	|	Данные.Пользователь КАК Пользователь,
	|	ЗНАЧЕНИЕ(Справочник.КоллекцииЗначенийДоступа.ПустаяСсылка) КАК КоллекцияЗначенийДоступа,
	|	ЗНАЧЕНИЕ(Справочник.УровниДоступа.ЧтениеБезОграничения) КАК УровеньДоступа,
	|	Данные.Недействителен КАК Недействителен
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.ТипДескриптора = 4
	|	И Данные.Недействителен = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Предмет КАК Предмет,
	|	Данные.Пользователь КАК Пользователь,
	|	Данные.ЗначениеДоступа КАК ЗначениеДоступа
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.ТипДескриптора = 4
	|	И Данные.Недействителен = 0";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РазрешенияДляЛА = РезультатЗапроса[0].Выгрузить();
	РазрешенияДляЛАРазвернутые = РезультатЗапроса[1].Выгрузить();
	РазрешенияДляЛАРазвернутые.Индексы.Добавить("Пользователь");
	
	Для Каждого Стр Из РазрешенияДляЛА Цикл
		ЗначенияДоступаКоллекции = Новый Массив;
		Для Каждого СтрокаЗначения Из РазрешенияДляЛАРазвернутые.НайтиСтроки(Новый Структура("Пользователь", Стр.Пользователь)) Цикл
			ЗначенияДоступаКоллекции.Добавить(СтрокаЗначения.ЗначениеДоступа);
		КонецЦикла;
		
		Если ЗначенияДоступаКоллекции.Количество() Тогда
			Стр.КоллекцияЗначенийДоступа = Справочники.КоллекцииЗначенийДоступа.ПолучитьКоллекцию(ЗначенияДоступаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	// Поиск отличий и запись.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РазрешенияДляЛА.Предмет КАК Предмет,
	|	РазрешенияДляЛА.КоллекцияЗначенийДоступа,
	|	РазрешенияДляЛА.Пользователь,
	|	РазрешенияДляЛА.УровеньДоступа
	|ПОМЕСТИТЬ РазрешенияДляЛАБезГруппировки
	|ИЗ
	|	&РазрешенияДляЛА КАК РазрешенияДляЛА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Предмет,
	|	ВложенныйЗапрос.КоллекцияЗначенийДоступа,
	|	ВложенныйЗапрос.Пользователь,
	|	УровниДоступа.Ссылка КАК УровеньДоступа
	|ПОМЕСТИТЬ РазрешенияНовые
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазрешенияДляЛАБезГруппировки.Предмет КАК Предмет,
	|		РазрешенияДляЛАБезГруппировки.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
	|		РазрешенияДляЛАБезГруппировки.Пользователь КАК Пользователь,
	|		МАКСИМУМ(УровниДоступа.Приоритет) КАК ПриоритетУровняДоступа
	|	ИЗ
	|		РазрешенияДляЛАБезГруппировки КАК РазрешенияДляЛАБезГруппировки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
	|			ПО РазрешенияДляЛАБезГруппировки.УровеньДоступа = УровниДоступа.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РазрешенияДляЛАБезГруппировки.КоллекцияЗначенийДоступа,
	|		РазрешенияДляЛАБезГруппировки.Пользователь,
	|		РазрешенияДляЛАБезГруппировки.Предмет) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УровниДоступа КАК УровниДоступа
	|		ПО ВложенныйЗапрос.ПриоритетУровняДоступа = УровниДоступа.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Предмет,
	|	ВложенныйЗапрос.КоллекцияЗначенийДоступа,
	|	ВложенныйЗапрос.Пользователь,
	|	ВложенныйЗапрос.УровеньДоступа,
	|	ВложенныйЗапрос.Добавить
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазрешенияНовые.Предмет КАК Предмет,
	|		РазрешенияНовые.КоллекцияЗначенийДоступа КАК КоллекцияЗначенийДоступа,
	|		РазрешенияНовые.Пользователь КАК Пользователь,
	|		РазрешенияНовые.УровеньДоступа КАК УровеньДоступа,
	|		ИСТИНА КАК Добавить
	|	ИЗ
	|		РазрешенияНовые КАК РазрешенияНовые
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияСтарые
	|			ПО РазрешенияНовые.Предмет = РазрешенияСтарые.Предмет
	|				И РазрешенияНовые.КоллекцияЗначенийДоступа = РазрешенияСтарые.КоллекцияЗначенийДоступа
	|				И РазрешенияНовые.Пользователь = РазрешенияСтарые.Пользователь
	|				И РазрешенияНовые.УровеньДоступа = РазрешенияСтарые.УровеньДоступа
	|	ГДЕ
	|		РазрешенияСтарые.Предмет ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазрешенияСтарые.Предмет,
	|		РазрешенияСтарые.КоллекцияЗначенийДоступа,
	|		РазрешенияСтарые.Пользователь,
	|		РазрешенияСтарые.УровеньДоступа,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияСтарые
	|			ЛЕВОЕ СОЕДИНЕНИЕ РазрешенияНовые КАК РазрешенияНовые
	|			ПО РазрешенияСтарые.Предмет = РазрешенияНовые.Предмет
	|				И РазрешенияСтарые.КоллекцияЗначенийДоступа = РазрешенияНовые.КоллекцияЗначенийДоступа
	|				И РазрешенияСтарые.Пользователь = РазрешенияНовые.Пользователь
	|				И РазрешенияСтарые.УровеньДоступа = РазрешенияНовые.УровеньДоступа
	|	ГДЕ
	|		РазрешенияНовые.Предмет ЕСТЬ NULL И %1) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Добавить";
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ?(МассивПользователей = Неопределено, "ИСТИНА", "РазрешенияСтарые.Пользователь В(&Ссылки)"));
	
	Запрос.УстановитьПараметр("РазрешенияДляЛА", РазрешенияДляЛА);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.РазрешенияДляЛокальныхАдминистраторов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если Выборка.Добавить Тогда
			Запись.Записать();
		Иначе
			Запись.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// Дескрипторы.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Пользователь КАК Пользователь,
	|	Данные.ЗначениеДоступа КАК Подразделение,
	|	Данные.Недействителен КАК Недействителен,
	|	Данные.ТипДескриптора = 0 КАК ОсновнойДескриптор,
	|	Данные.ТипДескриптора = 4 КАК ДескрипторЛА
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.ЗначениеДоступа ССЫЛКА Справочник.СтруктураПредприятия
	|ИТОГИ
	|	МАКСИМУМ(Недействителен),
	|	МАКСИМУМ(ОсновнойДескриптор),
	|	МАКСИМУМ(ДескрипторЛА)
	|ПО
	|	Подразделение";
	
	Набор = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
	
	Дескрипторы = Новый Соответствие;
	ДескрипторыПоПользователям = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ТаблицаДескрипторов = Набор.ВыгрузитьКолонки();
		
		Если Не Выборка.Недействителен Тогда
			Для каждого Документ Из ДокументыКачества Цикл
				ОписаниеОбъекта = Новый Структура;
				ОписаниеОбъекта.Вставить("Ссылка", Документы[Документ].ПустаяСсылка());
				ОписаниеОбъекта.Вставить("ВидДокумента", Справочники.ВидыВнутреннихДокументов[Документ]);
				ОписаниеОбъекта.Вставить("Подразделение", Выборка.Подразделение);
				
				Если Выборка.ОсновнойДескриптор Тогда
					ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОписаниеОбъекта, ТаблицаДескрипторов);
				КонецЕсли;
				
				Если Выборка.ДескрипторЛА Тогда
					ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаДляЛокальныхАдминистраторов(ОписаниеОбъекта, ТаблицаДескрипторов);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаДескрипторы Из ТаблицаДескрипторов Цикл
			Дескрипторы.Вставить(СтрокаДескрипторы.Дескриптор, Истина);
		КонецЦикла;
		
		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ДескрипторыПоПользователям[ВыборкаДетали.Пользователь] = Неопределено Тогда
				ДескрипторыПоПользователям[ВыборкаДетали.Пользователь] = Набор.ВыгрузитьКолонки();
			КонецЕсли;
			Для каждого СтрокаДескрипторы Из ТаблицаДескрипторов Цикл
				ЗаполнитьЗначенияСвойств(ДескрипторыПоПользователям[ВыборкаДетали.Пользователь].Добавить(), СтрокаДескрипторы);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаДанных Из Дескрипторы Цикл
		Справочники.ДескрипторыДоступаОбъектов.РассчитатьПрава(СтрокаДанных.Ключ);
	КонецЦикла;
	
	Для каждого СтрокаДанных Из ДескрипторыПоПользователям Цикл
		РегистрыСведений.ДескрипторыДляОбъектов.Сохранить(СтрокаДанных.Значение, СтрокаДанных.Ключ, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаписатьРабочиеГруппыОбъектов(Ссылка, ОбновитьПраваДоступа) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Ссылка.Метаданные().ПолноеИмя());
	
	РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	Менеджер.ДобавитьУчастниковРабочейГруппыВНабор(РабочаяГруппа, Ссылка);
	
	Для каждого Документ Из Менеджер.ПроизводныеДокументы(Ссылка) Цикл
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			Документ,
			РабочаяГруппа,
			Ложь, // ОбновитьПраваДоступа
			Пользователи.ТекущийПользователь());
	КонецЦикла;
	
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		Ссылка,
		РабочаяГруппа,
		ОбновитьПраваДоступа,
		Пользователи.ТекущийПользователь());
	
КонецПроцедуры

Процедура ПереопределитьДескрипторыЗависимыхОбъектов(Ссылка) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Ссылка.Метаданные().ПолноеИмя());
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_Nesootvetstvie")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
		Для каждого Документ Из Менеджер.ПроизводныеДокументы(Ссылка) Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Документ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЕстьНеЗавершенныеБизнесПроцессыПоДокументу(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплексныйПроцессПредметы.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.КомплексныйПроцесс.Предметы КАК КомплексныйПроцессПредметы
	|ГДЕ
	|	КомплексныйПроцессПредметы.Предмет = &Предмет
	|	И НЕ КомплексныйПроцессПредметы.Ссылка.Завершен
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплексныйПроцессПредметы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизошедшиеБизнесСобытия.Источник
	|ИЗ
	|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
	|ГДЕ
	|	ПроизошедшиеБизнесСобытия.Источник = &Предмет
	|	И НЕ ПроизошедшиеБизнесСобытия.Обработано";
	
	Запрос.УстановитьПараметр("Предмет", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции	

Функция ЕстьБизнесПроцессыПоДокументу(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ознакомление.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.Ознакомление.Предметы КАК Ознакомление
	|ГДЕ
	|	Ознакомление.Предмет = &Предмет
	|
	|СГРУППИРОВАТЬ ПО
	|	Ознакомление.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизошедшиеБизнесСобытия.Источник
	|ИЗ
	|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
	|ГДЕ
	|	ПроизошедшиеБизнесСобытия.Источник = &Предмет
	|	И НЕ ПроизошедшиеБизнесСобытия.Обработано";
	
	Запрос.УстановитьПараметр("Предмет", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция КоличествоРабочихДней(ДатаНачала, ДатаОкончания) Экспорт
		
	РабочихДней = 0; 
	
	КоличествоДней = (ДатаОкончания - ДатаНачала) / 86400 + 1;
	
	Для Сч = 1 По КоличествоДней Цикл
		ДеньНедели = ДеньНедели(ДатаНачала + Сч * 86400);
		Если ДеньНедели < 6 Тогда
			РабочихДней = РабочихДней + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РабочихДней;
		
КонецФункции

Процедура ОбработатьПустоеПредставление(Представление) Экспорт
	
	Если Представление = "" Тогда
		Представление = "<>";	
	КонецЕсли;
	
КонецПроцедуры

Функция ОсновнаяСсылка(Ссылка) Экспорт
	
	Если ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Ссылка, "УправлениеНесоответствиями") Тогда
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_Nesootvetstvie") Тогда
			Возврат Ссылка;
		Иначе
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Nesootvetstvie");
		КонецЕсли;
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Ссылка, "ОценкаСоответствия") Тогда
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_ZayavkaNaOcenkuSootvetstviya3") Тогда
			Возврат Ссылка;
		Иначе
			Возврат Ссылка;
		КонецЕсли;
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Ссылка, "УдалитьОценкаСоответствия1") Тогда
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_ZayavkaNaOcenkuSootvetstviya") Тогда
			Возврат Ссылка;
		Иначе
			Возврат Ссылка;
		КонецЕсли;
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Ссылка, "УдалитьОценкаСоответствия2") Тогда
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_ZayavkaNaOcenkuSootvetstviya2") Тогда
			Возврат Ссылка;
		Иначе
			Возврат Ссылка;
		КонецЕсли;
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Ссылка, "КонтрольныеОперации") Тогда
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Тогда
			Возврат Ссылка;
		Иначе
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ZayavkaNaKontrolnuyuOperaciyu");
		КонецЕсли;
	Иначе
		Возврат Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивКолонокТаблицыИзВыраженияСкрипта(Скрипт, ра_СлужебныйПараметрДляТЗ) Экспорт
	
	Результат = Новый Массив;
	ФактическийВладелецФайла = Неопределено;
	
	РезультатОбработки = "";
	Попытка
		Выполнить(Скрипт);
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(РезультатОбработки) = Тип("Структура") Тогда
		Если РезультатОбработки.Свойство("ИмяТЗ") И РезультатОбработки.Свойство("ТЗ") Тогда
			Для Каждого КолонкаТЗ ИЗ РезультатОбработки.ТЗ.Колонки Цикл
				СтруктураКолонки = Новый Структура;
				СтруктураКолонки.Вставить("Имя", РезультатОбработки.ИмяТЗ + "_" + КолонкаТЗ.Имя);
				СтруктураКолонки.Вставить("Заголовок", КолонкаТЗ.Имя);
				
				Результат.Добавить(СтруктураКолонки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекущийПользовательИсполнительИлиДелегат(Исполнитель, Предмет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Предмет", Предмет);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.Пользователь = &Исполнитель) КАК ИсполнительДелегат
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоставСубъектовПравДоступа.Пользователь КАК Пользователь
	|	ИЗ
	|		РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
	|	ГДЕ
	|		СоставСубъектовПравДоступа.ПользовательОснование = &ТекущийПользователь
	|		И СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.ДелегированиеПрав
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИсторияСобытийЗадач.ра_БылИсполнитель
	|	ИЗ
	|		РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|			ПО ИсторияСобытийЗадач.Задача = ЗадачаИсполнителяПредметы.Ссылка
	|	ГДЕ
	|		ЗадачаИсполнителяПредметы.Предмет = &Предмет
	|		И ИсторияСобытийЗадач.ра_СталИсполнитель = &ТекущийПользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ТекущийПользователь) КАК Таблица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИсполнительДелегат;
	
КонецФункции

// Создает структуру со свойствами, как колонки переданного результата запроса
// и устанавливает этим свойствам значения выборки.
// 
// Параметры:
//  ЭлементВыборки - ЭлементВыборки.
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция ЭлементВыборкиВСтруктуру(ЭлементВыборки, РезультатЗапроса) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Структура.Вставить(Колонка.Имя, ЭлементВыборки[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ЭтоВыполнениеЭтапаПринятияУоНДопустившейОрганизацией(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеБизнесПроцессов.ОсновнойПредмет КАК Предмет,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.ОсновнойПредмет КАК Документ.ra_Uvedomlenie).Nesootvetstvie КАК Nesootvetstvie,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.ОсновнойПредмет КАК Документ.ra_Uvedomlenie).Nesootvetstvie.VyyavivshayaOrganizaciya КАК VyyavivshayaOrganizaciya,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.ОсновнойПредмет КАК Документ.ra_Uvedomlenie).OrganizaciyaOtpravitel КАК OrganizaciyaOtpravitel,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.ОсновнойПредмет КАК Документ.ra_Uvedomlenie).OrganizaciyaPoluchatel КАК OrganizaciyaPoluchatel,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.ОсновнойПредмет КАК Документ.ra_Uvedomlenie).OtvetstvennyjZaKachestvoOtpravitel КАК OtvetstvennyjZaKachestvoOtpravitel,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.ОсновнойПредмет КАК Документ.ra_Uvedomlenie).OtvetstvennyjZaKachestvoPoluchatel КАК OtvetstvennyjZaKachestvoPoluchatel,
	|	ИСТИНА КАК ЭтапПринятияУоН
	|ИЗ
	|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
	|ГДЕ
	|	(ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.Согласование)) = &БизнесПроцесс
	|	И ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.Согласование).ra_EtapPrinyatiyaUvedomleniya";
	Запрос.УстановитьПараметр("БизнесПроцесс", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс"));
	
	СтруктураРезультат = Новый Структура("ЭтапПринятияУоН, Предмет", Ложь, Неопределено);
	СтруктураРезультат.Вставить("OrganizaciyaOtpravitel", Неопределено);
	СтруктураРезультат.Вставить("OrganizaciyaPoluchatel", Неопределено);
	СтруктураРезультат.Вставить("OtvetstvennyjZaKachestvoOtpravitel", Неопределено);
	СтруктураРезультат.Вставить("OtvetstvennyjZaKachestvoPoluchatel", Неопределено);
	СтруктураРезультат.Вставить("VyyavivshayaOrganizaciya", Неопределено);
	СтруктураРезультат.Вставить("Nesootvetstvie", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Несоответствие

Функция ДатаЗакрытияНесоответствия(Несоответствие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияСостоянийДокументов.Период КАК Период
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов КАК ИсторияСостоянийДокументов
	|ГДЕ
	|	ВЫРАЗИТЬ(ИсторияСостоянийДокументов.Документ КАК Документ.ra_ItogovyjOtchetONesootvetstvii).Nesootvetstvie = &Несоответствие
	|	И ИсторияСостоянийДокументов.Состояние = &Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	Запрос.УстановитьПараметр("Состояние",      Перечисления.СостоянияДокументов.ra_Утвержден);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Период;
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

Функция ДатаУстраненияНесоответствия(Несоответствие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияСостоянийДокументов.Период КАК Период
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов КАК ИсторияСостоянийДокументов
	|ГДЕ
	|	ВЫРАЗИТЬ(ИсторияСостоянийДокументов.Документ КАК Документ.ra_AktObUstraneniiNesootvetstviya).Nesootvetstvie = &Несоответствие
	|	И ИсторияСостоянийДокументов.Состояние = &Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	
	Запрос.УстановитьПараметр("Несоответствие", Несоответствие);
	Запрос.УстановитьПараметр("Состояние",      Перечисления.СостоянияДокументов.ra_Утвержден);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Период;
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Печать

// Процедура заполнения команд печати документов ЕОС
//
// Параметры:
//  КомандыПечати  - <ТаблицаЗначений>
//                 
//  ВидДокумента  - <Справочник.ВидыВнутреннихДокументов>
//
Процедура ВыполнитьЗаполнениеКомандПечатиДокументаЕОС(КомандыПечати, СтруктураПараметров) Экспорт

	Если СтруктураПараметров = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ТаблицаФайлов = СформироватьТаблицуФайловПечатныхФормЕОС(СтруктураПараметров);
	Для каждого СтрокаФайла из ТаблицаФайлов цикл
		// Напечатать файлы
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.ВнутренниеДокументы";
		КомандаПечати.Идентификатор = "НапечататьФайлы";
		//КомандаПечати.Представление = НСтр("ru = 'Напечатать файлы'; en = 'Print files'");
		КомандаПечати.Представление = СтрокаФайла.Наименование;
		КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.НапечататьФайлы";
		КомандаПечати.ра_ШаблонФайла = СтрокаФайла.Ссылка;
	КонецЦикла;

КонецПроцедуры

// Формирует таблицу печатных форм для данного вида внутреннего документа
//
// Параметры:
//   СтруктураПараметров  - ВидДокумента,Площадка,ВидКонтрольнойОперации,ВидОбъектаНесоответствия
//
// Возвращаемое значение:
//   ТаблицаЗначений - Поля: Ссылка, Наименование
//
Функция СформироватьТаблицуФайловПечатныхФормЕОС(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // RLS
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДокумента", СтруктураПараметров.ВидДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ШаблоныВнутреннихДокументов.Ссылка КАК Шаблон,
	|	ВЫБОР
	|		КОГДА &ВидОбъектаНесоответствия = ШаблоныВнутреннихДокументов.ra_VidObektaNesootvetstviya
	|				И &Проект = ШаблоныВнутреннихДокументов.Проект
	|			ТОГДА 0
	|		КОГДА &ВидОбъектаНесоответствия = ШаблоныВнутреннихДокументов.ra_VidObektaNesootvetstviya
	|				И &Проект <> ШаблоныВнутреннихДокументов.Проект
	|			ТОГДА 1
	|		КОГДА &ВидОбъектаНесоответствия <> ШаблоныВнутреннихДокументов.ra_VidObektaNesootvetstviya
	|				И &Проект = ШаблоныВнутреннихДокументов.Проект
	|			ТОГДА 1
	|		КОГДА &ВидОбъектаНесоответствия <> ШаблоныВнутреннихДокументов.ra_VidObektaNesootvetstviya
	|				И &Проект <> ШаблоныВнутреннихДокументов.Проект
	|			ТОГДА 3
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Шаблоны
	|ИЗ
	|	Справочник.ШаблоныВнутреннихДокументов КАК ШаблоныВнутреннихДокументов
	|ГДЕ
	|	ШаблоныВнутреннихДокументов.ВидДокумента = &ВидДокумента
	|	И ШаблоныВнутреннихДокументов.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныВнутреннихДокументов.ra_VidObektaNesootvetstviya В (&ВидОбъектаНесоответствия, ЗНАЧЕНИЕ(Перечисление.ra_VidyPredmetovNesootvetstviya.ПустаяСсылка))
	|	И ШаблоныВнутреннихДокументов.Проект В (&Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|	И ШаблоныВнутреннихДокументов.ra_OblastPrimeneniya В (&ОбластьПрименения, ЗНАЧЕНИЕ(Справочник.ra_OblastiPrimeneniya.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Наименование КАК Наименование
	|ИЗ
	|	ВТ_Шаблоны КАК ВТ_Шаблоны
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ВТ_Шаблоны.Шаблон = Файлы.ВладелецФайла
	|ГДЕ
	|	Файлы.ТекущаяВерсияРасширение <> ""mxl""
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		
	Если ЗначениеЗаполнено(СтруктураПараметров.ВидОбъектаНесоответствия) тогда
		Запрос.УстановитьПараметр("ВидОбъектаНесоответствия", СтруктураПараметров.ВидОбъектаНесоответствия);
	Иначе
		Запрос.УстановитьПараметр("ВидОбъектаНесоответствия", Перечисления.ra_VidyPredmetovNesootvetstviya.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Проект) Тогда
		Запрос.УстановитьПараметр("Проект", СтруктураПараметров.Проект);
	Иначе
		Запрос.УстановитьПараметр("Проект", Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбластьПрименения) Тогда
		Запрос.УстановитьПараметр("ОбластьПрименения", СтруктураПараметров.ОбластьПрименения);
	Иначе
		Запрос.УстановитьПараметр("ОбластьПрименения", Справочники.ra_OblastiPrimeneniya.ПустаяСсылка());
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("ОсновнойФайл") Тогда
		Запрос.Текст = Запрос.Текст + " И Файлы.ра_ОсновнойФайл = ИСТИНА";
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтруктураПараметровДляПечатныхФормЕОС(Объект) Экспорт
	
	РеквизитВидДокументаНайден = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидДокумента");
	РеквизитНесоответствиеНайден = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Nesootvetstvie");
	ЭтоНесоответствие = ТипЗнч(Объект) = Тип("ДокументСсылка.ra_Nesootvetstvie");
				
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидДокумента", Неопределено);
	СтруктураПараметров.Вставить("ВидОбъектаНесоответствия", Неопределено);
	СтруктураПараметров.Вставить("Проект", Неопределено);
	СтруктураПараметров.Вставить("ОбластьПрименения", Неопределено);
	
	Если РеквизитВидДокументаНайден Тогда
		СтруктураПараметров.Вставить("ВидДокумента", Объект.ВидДокумента);
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВидОбъектаНесоответствия", "VidObektaNesootvetstviya");
	Реквизиты.Вставить("Проект", "Proekt");
				
	Если РеквизитНесоответствиеНайден Тогда		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Nesootvetstvie, Реквизиты);
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, РеквизитыОбъекта);
	ИначеЕсли ЭтоНесоответствие Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, Реквизиты);
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, РеквизитыОбъекта);				
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ra_RezultatKontrolnoyOperacii") Тогда
		
		ОбластьПрименения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект, "ZayavkaNaKontrolnuyuOperaciyu.KontrolnoeMeropriyatie.OblastPrimeneniya");
		
		СтруктураПараметров.Вставить("ОбластьПрименения", ОбластьПрименения);
			
	КонецЕсли;
			
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

Процедура ДокументыКачестваПередЗаписью(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка,
			"ПометкаУдаления");
	Иначе
		ПредыдущиеЗначенияРеквизитов = Новый Структура(
			"ПометкаУдаления",
			Ложь);
	КонецЕсли;
	
	// Пометка на удаление приложенных файлов.
	Если Объект.ПометкаУдаления <> ПредыдущиеЗначенияРеквизитов.ПометкаУдаления Тогда
		Если Объект.ПометкаУдаления Тогда
			Объект.ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
		
		Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Удаление Тогда
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Объект.Ссылка, Объект.ПометкаУдаления);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'У вас нет права ""Пометка на удаление"" документа ""%1"".'; en = 'You have no permissions to mark for deletion document ""%1"".'"),
				Строка(Объект.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение вида документа
	ЗаполнитьВидДокумента(Объект);
	
	// Обработка рабочей группы
	СсылкаОбъекта = Объект.Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = Объект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Документы[Объект.Метаданные().Имя].ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Определение дескрипторов для проверки прав при записи рабочей группы.
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Объект);
	КонецЕсли;
	
	Если Не РаботаСРабочимиГруппами.ПерезаписьРабочейГруппыПредметаПроцессаОтключена(Объект) Тогда
		// Подготовка рабочей группы
		РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		
		// Добавление автоматических участников из самого объекта
		Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Объект) Тогда
			НовыеУчастникиРГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
			Объект.ДобавитьУчастниковРабочейГруппыВНабор(НовыеУчастникиРГ);
			РаботаСРабочимиГруппами.ЗаполнитьКолонкуИзменениеПоСтандартнымПравам(СсылкаОбъекта, НовыеУчастникиРГ);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НовыеУчастникиРГ, РабочаяГруппа);
		КонецЕсли;
		
		// Обработка обязательного заполнения рабочих групп 
		Если РабочаяГруппа.Количество() = 0 Тогда
			Если РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента) Тогда
				Строка = РабочаяГруппа.Добавить();
				Строка.Участник = ПользователиКлиентСервер.ТекущийПользователь();
				Строка.Изменение = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Запись итоговой рабочей группы
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			СсылкаОбъекта,
			РабочаяГруппа,
			Ложь,	//ОбновитьПраваДоступа
			Пользователи.ТекущийПользователь());
		
		// Установка необходимости обновления прав доступа
		Объект.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПраваНаДобавлениеДокументов(ОбъектМетаданных) Экспорт
	
	Если НЕ ПравоДоступа("Добавление", ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Предмет", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВнутренниеДокументы));
	Запрос.УстановитьПараметр("ЗначениеДоступа", Справочники.ВидыВнутреннихДокументов[ОбъектМетаданных.Имя]);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(РазрешенияДоступа.Добавление), ИСТИНА) КАК Добавление
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазрешенияДоступаИсключительные.УровеньДоступа.Добавление КАК Добавление
	|	ИЗ
	|		РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК КоллекцииЗначенийДоступаЗначенияДоступа
	|			ПО РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа = КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка
	|	ГДЕ
	|		КоллекцииЗначенийДоступаЗначенияДоступа.Значение В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов), &ЗначениеДоступа)
	|		И РазрешенияДоступаИсключительные.Пользователь = &Пользователь
	|		И РазрешенияДоступаИсключительные.Предмет = &Предмет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазрешенияДляЛокальныхАдминистраторов.УровеньДоступа.Добавление
	|	ИЗ
	|		РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияДляЛокальныхАдминистраторов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК КоллекцииЗначенийДоступаЗначенияДоступа
	|			ПО РазрешенияДляЛокальныхАдминистраторов.КоллекцияЗначенийДоступа = КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка
	|	ГДЕ
	|		КоллекцииЗначенийДоступаЗначенияДоступа.Значение В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов), &ЗначениеДоступа)
	|		И РазрешенияДляЛокальныхАдминистраторов.Пользователь = &Пользователь
	|		И РазрешенияДляЛокальныхАдминистраторов.Предмет = &Предмет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазрешенияДоступаОбщие.УровеньДоступа.Добавление
	|	ИЗ
	|		РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияДоступаОбщие
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК КоллекцииЗначенийДоступаЗначенияДоступа
	|				ПО РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа = КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка
	|					И (КоллекцииЗначенийДоступаЗначенияДоступа.Значение В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов), &ЗначениеДоступа))
	|			ПО РазрешенияДоступаОбщие.Пользователь = РазрешенияДоступаИсключительные.Пользователь
	|				И (РазрешенияДоступаИсключительные.Предмет = &Предмет)
	|	ГДЕ
	|		РазрешенияДоступаОбщие.Пользователь = &Пользователь
	|		И РазрешенияДоступаОбщие.ЗначениеДоступа = &ЗначениеДоступа
	|		И РазрешенияДоступаИсключительные.Пользователь ЕСТЬ NULL) КАК РазрешенияДоступа";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Добавление;
	
КонецФункции

Процедура ЗаполнитьВидДокумента(Объект) Экспорт
	
	ИмяМетаданных = Объект.Метаданные().Имя;
	
	ВидВнутреннегоДокумента = Справочники.ВидыВнутреннихДокументов[ИмяМетаданных];
	
	Если Объект.ВидДокумента <> ВидВнутреннегоДокумента Тогда
		Объект.ВидДокумента = ВидВнутреннегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиСогласующие(Объект, Отказ) Экспорт
	
	Для каждого Строка Из Объект.Soglasuyushchie.НайтиСтроки(Новый Структура("Polzovatel", Справочники.Пользователи.ПустаяСсылка())) Цикл
		Объект.Soglasuyushchie.Удалить(Строка);
	КонецЦикла;
	
	Ошибки = Новый Массив;
	
	Если Объект.Soglasuyushchie.Найти(Истина, "EtapPodpisaniya") = Неопределено Тогда
		Ошибки.Добавить(НСтр("ru='Не указан ни один подписант в документе.'; en = 'Responsible persons for signing of the document have not been specified.'"));
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиМаршрутыСогласования" 14.09.2018 {
	// согласующие необязательны для заполенния, т.к. в бизнес-процессах сработает правило эскалации	 
	//Если Объект.Soglasuyushchie.Найти(Истина, "EtapSoglasovanie") = Неопределено Тогда
	//	Ошибки.Добавить(НСтр("ru='Не указан ни один согласующий в документе.'; en = 'Responsible persons for approval of the document have not been specified.'"));
	//КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиМаршрутыСогласования" 14.09.2018 }
	
	ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция КнигаExcelПоНесоответствиям(МассивОбъектов) Экспорт
	
	ТабличныеДокументы = Новый СписокЗначений;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("ra_Nesootvetstvie");
	МассивИмен.Добавить("ra_AktObUstraneniiNesootvetstviya");
	МассивИмен.Добавить("ra_ItogovyjOtchetONesootvetstvii");
	МассивИмен.Добавить("ra_KorrektiruyushcheeDejstvie");
	МассивИмен.Добавить("ra_OcenkaZnachimosti");
	МассивИмен.Добавить("ra_OtchetONesootvetstviiCHast1");
	МассивИмен.Добавить("ra_OtchetONesootvetstviiCHast2");
	МассивИмен.Добавить("ra_OtchetONesootvetstviiCHast3");
	МассивИмен.Добавить("ra_PreduprezhdayushcheeDejstvie");
	МассивИмен.Добавить("ra_Uvedomlenie");
	МассивИмен.Добавить("ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya");
		
	Для Каждого ИмяДокумента Из МассивИмен Цикл
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Документ." + ИмяДокумента + "
		|ГДЕ
		|	" + ?(ИмяДокумента = "ra_Nesootvetstvie", "Ссылка", "Nesootvetstvie") + " В(&МассивОбъектов)");
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		СинонимДокумента = Метаданные.Документы[ИмяДокумента].Синоним;
		ТабличныеДокументы.Добавить(ра_ОбменДанными.СформироватьТабличныйДокументИзЗапроса(Запрос), СинонимДокумента);
	КонецЦикла;
	
	Возврат ТабличныеДокументы;	
	
КонецФункции

// ТСК Близнюк С.И.; 08.10.2018; task#1371{
// Процедура проверки уникальности реквизита
//
// Параметры:
//  Объект  - СправочникОбъект, и т.д. - объект базы данных
//
//	ИмяПроверяемогоРеквизита - Строка - Содержит имя проверяемого реквизита
//
//	ОграничивающиеРеквизиты - Массив - массив имен реквизитов ограничивающих выборку для проверки уникальности проверяемого реквизита
//
Процедура ПроверитьУникальностьРеквизита(Объект, ИмяПроверяемогоРеквизита, ОграничивающиеРеквизиты = Неопределено) Экспорт
	
	ЗначениеПроверяемогоРеквизита = Объект[ИмяПроверяемогоРеквизита];
	Если НЕ ЗначениеЗаполнено(ЗначениеПроверяемогоРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		ИмяТаблицы = "Справочник." + ИмяОбъекта; 
	Иначе
		ВызватьИсключение НСтр("ru = 'Не найдена таблица базы данных.'; en = 'Database table not found.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Таблица.Ссылка КАК Ссылка
	               |ИЗ
	               |	" + ИмяТаблицы + " КАК Таблица
				   |ГДЕ
		           |	Таблица.Ссылка <> &Ссылка
				   |	И Таблица." + ИмяПроверяемогоРеквизита + " = &" + ИмяПроверяемогоРеквизита + "";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр(ИмяПроверяемогоРеквизита, ЗначениеПроверяемогоРеквизита);
	
	ТекстОграничения = "";
	СинонимОграничения = "";
	Если ОграничивающиеРеквизиты <> Неопределено Тогда
		Для Каждого ИмяОграничивающегоРеквизита Из ОграничивающиеРеквизиты Цикл
			ТекстОграничения = "
		               |	И Таблица." + ИмяОграничивающегоРеквизита + " = &" + ИмяОграничивающегоРеквизита +"";
			
			Запрос.УстановитьПараметр(ИмяОграничивающегоРеквизита, Объект[ИмяОграничивающегоРеквизита]);
			СинонимОграничения = СинонимОграничения + ?(СинонимОграничения = "", "", ", ") + ИмяОграничивающегоРеквизита + " = " + Объект[ИмяОграничивающегоРеквизита];
		КонецЦикла;	
	КонецЕсли;
	СинонимОграничения = ?(СинонимОграничения = "", "", СинонимОграничения + ".");
	
	Запрос.Текст = Запрос.Текст + ТекстОграничения;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ИмяПроверяемогоРеквизита = "Наименование" Тогда //Стандартые реквизиты
			Синоним = МетаданныеОбъекта.СтандартныеРеквизиты[ИмяПроверяемогоРеквизита].Представление();
		Иначе
			Синоним = МетаданныеОбъекта.Реквизиты[ИмяПроверяемогоРеквизита].Синоним;
		КонецЕсли;
		Если Синоним = "" Тогда
			Синоним = ИмяПроверяемогоРеквизита;
		КонецЕсли; 
		
		ВызватьИсключение НСтр("ru = 'Нельзя записать объект. В базе данных уже есть объект с совпадающим значением свойства " + Синоним + " = " + ЗначениеПроверяемогоРеквизита + ". " + СинонимОграничения + "'; 
							   |en = 'You cannot write an object. In the database there is already an object with a matching property value " + Синоним + " = " + ЗначениеПроверяемогоРеквизита + ". " + СинонимОграничения + "'");
	КонецЦикла;
		
КонецПроцедуры
// ТСК Близнюк С.И.; 08.10.2018; task#1371}

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
