////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ПО РАБОТЕ С ИНСТРУКЦИЯМИ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает соответствия форм с предметами инструкций
//
Функция СоответствияФормИПредметовИнструкций() Экспорт
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("Справочник.СертификатыЭП.Форма.ВыборСертификатаДляПодписания", Справочники.ПредметыИнструкций.ЭлектроннаяПодпись);
	
	Соответствие.Вставить("Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента", Справочники.ПредметыИнструкций.ВнутренниеДокументы);
	Соответствие.Вставить("Справочник.ВходящиеДокументы.Форма.ФормаЭлемента", Справочники.ПредметыИнструкций.ВходящиеДокументы);
	Соответствие.Вставить("Справочник.ИсходящиеДокументы.Форма.ФормаЭлемента", Справочники.ПредметыИнструкций.ИсходящиеДокументы);
	
	Соответствие.Вставить("Справочник.ДелаХраненияДокументов.Форма.ФормаЭлемента", Справочники.ПредметыИнструкций.Дела);
	
	Соответствие.Вставить("Справочник.НоменклатураДел.Форма.ФормаЭлемента", Справочники.ПредметыИнструкций.НоменклатураДел);
	
	Соответствие.Вставить("Документ.ЕжедневныйОтчет.Форма.ФормаДокумента", Справочники.ПредметыИнструкций.ЕжедневныйОтчет);
	
	Соответствие.Вставить("РегистрСведений.ЖурналПередачиДокументов.Форма.ФормаЗаписи", Справочники.ПредметыИнструкций.ЖурналПередачи);
	
	Соответствие.Вставить("БизнесПроцесс.Исполнение.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессИсполнениеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Исполнение.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Исполнение.Форма.ФормаЗадачиКонтролера", Справочники.ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаКонтролера);
	Соответствие.Вставить("БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаОтветственногоИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Исполнение.Форма.ФормаЗадачиПроверяющего", Справочники.ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаПроверяющего);
	
	Соответствие.Вставить("БизнесПроцесс.КомплексныйПроцесс.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.КомплексныйПроцессКарточка);
	Соответствие.Вставить("БизнесПроцесс.КомплексныйПроцесс.Форма.ФормаЗадачиКонтролера", Справочники.ПредметыИнструкций.ЗадачиКомплексногоПроцессаЗадачаКонтролера);
	
	Соответствие.Вставить("БизнесПроцесс.ОбработкаВнутреннегоДокумента.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессОбработкаВнутреннегоДокументаКарточка);
	
	Соответствие.Вставить("БизнесПроцесс.ОбработкаВходящегоДокумента.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессОбработкаВходящегоДокументаКарточка);
	
	Соответствие.Вставить("БизнесПроцесс.ОбработкаИсходящегоДокумента.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессОбработкаИсходящегоДокументаКарточка);
	
	Соответствие.Вставить("БизнесПроцесс.Ознакомление.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессОзнакомлениеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Ознакомление.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаОзнакомлениеЗадачаИсполнителя);
	
	Соответствие.Вставить("БизнесПроцесс.Поручение.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессПоручениеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Поручение.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаПоручениеЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Поручение.Форма.ФормаЗадачиКонтролера", Справочники.ПредметыИнструкций.ЗадачиПроцессаПоручениеЗадачаКонтролера);
	Соответствие.Вставить("БизнесПроцесс.Поручение.Форма.ФормаЗадачиПроверяющего", Справочники.ПредметыИнструкций.ЗадачиПроцессаПоручениеЗадачаПроверяющего);
	
	Соответствие.Вставить("БизнесПроцесс.Приглашение.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессПриглашениеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Приглашение.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаПриглашениеЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОзнакомиться", Справочники.ПредметыИнструкций.ЗадачиПроцессаПриглашениеЗадачаОзнакомления);
	Соответствие.Вставить("БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОповестить", Справочники.ПредметыИнструкций.ЗадачиПроцессаПриглашениеЗадачаОповещения);
	
	Соответствие.Вставить("БизнесПроцесс.Рассмотрение.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессРассмотрениеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаРассмотрениеЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиОзнакомиться", Справочники.ПредметыИнструкций.ЗадачиПроцессаРассмотрениеЗадачаОзнакомления);
	
	Соответствие.Вставить("БизнесПроцесс.Регистрация.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессРегистрацияКарточка);
	Соответствие.Вставить("БизнесПроцесс.Регистрация.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаРегистрацияЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Регистрация.Форма.ФормаЗадачиОзнакомиться", Справочники.ПредметыИнструкций.ЗадачиПроцессаРегистрацияЗадачаОзнакомления);
	
	Соответствие.Вставить("БизнесПроцесс.Согласование.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессСогласованиеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаСогласованиеЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться", Справочники.ПредметыИнструкций.ЗадачиПроцессаСогласованиеЗадачаОзнакомления);
	
	Соответствие.Вставить("БизнесПроцесс.Утверждение.Форма.ФормаБизнесПроцесса", Справочники.ПредметыИнструкций.ПроцессУтверждениеКарточка);
	Соответствие.Вставить("БизнесПроцесс.Утверждение.Форма.ФормаЗадачиИсполнителя", Справочники.ПредметыИнструкций.ЗадачиПроцессаУтверждениеЗадачаИсполнителя);
	Соответствие.Вставить("БизнесПроцесс.Утверждение.Форма.ФормаЗадачиОзнакомиться", Справочники.ПредметыИнструкций.ЗадачиПроцессаУтверждениеЗадачаОзнакомления);
	
	Возврат Соответствие;
	
КонецФункции

// Формирует массив предметов инструкций с описаниями для указанной формы.
//
Процедура ПредметыИнструкцийСоответствующиеФорме(Предметы, ЭтаФорма) Экспорт
	
	Предметы = Новый Массив;
	
	ИмяФормы = ЭтаФорма.ИмяФормы;
	
	СоответствияФормИПредметов = СоответствияФормИПредметовИнструкций();
	
	Предмет = СоответствияФормИПредметов.Получить(ИмяФормы);
	
	Если Предмет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыИнструкций = Справочники.ПредметыИнструкций;
	
	Если Предмет = ПредметыИнструкций.ВнутренниеДокументы
		ИЛИ Предмет = ПредметыИнструкций.ВходящиеДокументы
		ИЛИ Предмет = ПредметыИнструкций.ИсходящиеДокументы Тогда
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(Предмет);
		ЗаполнитьХарактеристикиПредметаПоРеквизитамДокумента(ОписаниеПредмета, ЭтаФорма.Объект);
		Предметы.Добавить(ОписаниеПредмета);
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(ПредметыИнструкций.Документы);
		Предметы.Добавить(ОписаниеПредмета);
		
	ИначеЕсли Предмет = ПредметыИнструкций.ПроцессИсполнениеКарточка
		ИЛИ Предмет = ПредметыИнструкций.КомплексныйПроцессКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессОбработкаВнутреннегоДокументаКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессОбработкаВходящегоДокументаКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессОбработкаИсходящегоДокументаКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессОзнакомлениеКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессПоручениеКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессПриглашениеКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессРассмотрениеКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессРегистрацияКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессСогласованиеКарточка
		ИЛИ Предмет = ПредметыИнструкций.ПроцессУтверждениеКарточка Тогда
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(Предмет);
		ЗаполнитьХарактеристикиПредметаПоРеквизитамПроцесса(ОписаниеПредмета, ЭтаФорма.Объект, ЭтаФорма);
		Предметы.Добавить(ОписаниеПредмета);
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(ПредметыИнструкций.Процессы);
		Предметы.Добавить(ОписаниеПредмета);
		
	ИначеЕсли Предмет = ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаКонтролера
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаОтветственногоИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаИсполненияЗадачаПроверяющего
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиКомплексногоПроцессаЗадачаКонтролера
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаОзнакомлениеЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаПоручениеЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаПоручениеЗадачаКонтролера
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаПоручениеЗадачаПроверяющего
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаПриглашениеЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаПриглашениеЗадачаОзнакомления
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаПриглашениеЗадачаОповещения
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаРассмотрениеЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаРассмотрениеЗадачаОзнакомления
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаРегистрацияЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаРегистрацияЗадачаОзнакомления
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаСогласованиеЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаСогласованиеЗадачаОзнакомления
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаУтверждениеЗадачаИсполнителя
		ИЛИ Предмет = ПредметыИнструкций.ЗадачиПроцессаУтверждениеЗадачаОзнакомления Тогда
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(Предмет);
		Предметы.Добавить(ОписаниеПредмета);
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(ПредметыИнструкций.Задачи);
		Предметы.Добавить(ОписаниеПредмета);
		
		ЗаполнитьПредметыИнструкцийПоПредметамЗадачи(Предметы, ЭтаФорма.Объект.Предметы);
		
	Иначе
		
		ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(Предмет);
		Предметы.Добавить(ОписаниеПредмета);
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру описания предмета по реквизитам документа
//
// Параметры:
//  ОписаниеПредмета - Структура
//  Документ         - Ссылка на внутренний / входящий / исходящий документ.
//
Процедура ЗаполнитьХарактеристикиПредметаПоРеквизитамДокумента(ОписаниеПредмета, Документ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ОписаниеПредмета.Вставить("Организация", Документ.Организация);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
		ОписаниеПредмета.Вставить("ВидДокумента", Документ.ВидДокумента);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		ОписаниеПредмета.Вставить("ГрифДоступа", Документ.ГрифДоступа);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ОписаниеПредмета.Вставить("ВопросДеятельности", Документ.ВопросДеятельности);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда
		Если Документ.Ссылка.Пустая() Тогда
			ОписаниеПредмета.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументов.Проект);
		Иначе
			ОписаниеПредмета.Вставить("СостояниеДокумента", ПолучитьПоследнееСостояниеДокумента(Документ.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПредмета.Вставить("ШаблонДокумента", Документ.Шаблон);
	
КонецПроцедуры

// Дополняет структуру описания предмета по реквизитам документа
//
// Параметры:
//  ОписаниеПредмета - Структура
//  Документ         - Ссылка на внутренний / входящий / исходящий документ.
//  ЭтаФорма         -
//
Процедура ЗаполнитьХарактеристикиПредметаПоРеквизитамПроцесса(ОписаниеПредмета, Процесс, ЭтаФорма = Неопределено) Экспорт
	
	ОписаниеПредмета.Вставить("ШаблонПроцесса", Процесс.Шаблон);
	
КонецПроцедуры

// Возвращает последнее состояние документа. Если у документа больше одного состояния и
// последним состоянием является Проект, тогда возвращается состояние, установленное до него.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//             СправочникСсылка.ВходящиеДокументы
//             СправочникСсылка.ИсходящиеДокументы - 
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументов
//
Функция ПолучитьПоследнееСостояниеДокумента(Документ)
	
	// Если для документа определено одно состояние, тогда возвращаем его.
	МассивСостояний = Делопроизводство.ПолучитьВсеСостоянияДокумента(Документ).ВыгрузитьКолонку("Состояние");
	Если МассивСостояний.Количество() = 0 Тогда
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	ИначеЕсли МассивСостояний.Количество() = 1 Тогда 
		Возврат МассивСостояний[0]; 
	КонецЕсли;
	
	// Определяем последнее установленное состояние.
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияДокументов.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийДокументов КАК СостоянияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|		ПО СостоянияДокументов.Состояние = ТекущиеСостоянияДокументов.Состояние
		|			И СостоянияДокументов.Документ = ТекущиеСостоянияДокументов.Документ
		|ГДЕ
		|	СостоянияДокументов.Документ = &Документ
		|	И СостоянияДокументов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Проект)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияДокументов.Период УБЫВ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Состояние; 
	
КонецФункции

// Дополняет массив предметов инструкций предметами процесса
//
// Параметры:
//  Предметы         - Массив - Массив описаний предметов инструкций
//  ПредметыПроцесса - Табличная часть объекта задачи
//
Процедура ЗаполнитьПредметыИнструкцийПоПредметамЗадачи(Предметы, ПредметыЗадачи) Экспорт
	
	ПредметыДляОбработки = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ ПредметыЗадачи Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредметыДляОбработки.Добавить(ТекСтрока.Предмет);
	КонецЦикла;
	
	Если Не ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		ПользователиДляПроверкиПрав = Новый Массив;
		ПользователиДляПроверкиПрав.Добавить(ПользователиКлиентСервер.ТекущийПользователь());
		ПраваНаПредметы = ДокументооборотПраваДоступа.ПолучитьПраваПользователейПоОбъектам(
			ПредметыДляОбработки, Истина, ПользователиДляПроверкиПрав);
		ПредметыДляОбработки = ПраваНаПредметы.ВыгрузитьКолонку("ОбъектДоступа");
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ ПредметыДляОбработки Цикл
		Если ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(
				Справочники.ПредметыИнструкций.ВнутренниеДокументы);
			ЗаполнитьХарактеристикиПредметаПоРеквизитамДокумента(ОписаниеПредмета, ТекСтрока);
			Предметы.Добавить(ОписаниеПредмета);
			
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			
			ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(
				Справочники.ПредметыИнструкций.ВходящиеДокументы);
			ЗаполнитьХарактеристикиПредметаПоРеквизитамДокумента(ОписаниеПредмета, ТекСтрока);
			Предметы.Добавить(ОписаниеПредмета);
			
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			
			ОписаниеПредмета = РаботаСИнструкциями.ОписаниеПредметаИнструкции(
				Справочники.ПредметыИнструкций.ИсходящиеДокументы);
			ЗаполнитьХарактеристикиПредметаПоРеквизитамДокумента(ОписаниеПредмета, ТекСтрока);
			Предметы.Добавить(ОписаниеПредмета);
			
		КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
