
////////////////////////////////////////////////////////////////////////////////
// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер: содержит процедуры работы с комплексными
//													процессами на сервере.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Удаляет шаблон действия в комплексном процессе или шаблоне комплексного процесса
// Параметры:
//	ШаблонБизнесПроцесса - ссылка на удаляемый шаблон процесса
Процедура УдалитьШаблонДействияЭтапаПроцесса(ШаблонБизнесПроцесса) Экспорт
	
	Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ШаблонБизнесПроцесса).Удаление Тогда
		Текст = НСтр("ru = 'Недостаточно прав для удаления действия комплексного процесса'; en = 'Not enough permissions to delete the action of the composite process'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
		ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонБизнесПроцесса, "ВладелецШаблона");
		ШаблонОбъект = ШаблонБизнесПроцесса.ПолучитьОбъект();
		ШаблонОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик печати
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаКомплексногоПроцесса";
	// Запомним номер строки с которой начали выводить текущий документ
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Макет = ПолучитьОбщийМакет("КарточкаКомплексногоПроцесса");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьОбщаяШапка = Макет.ПолучитьОбласть("ОбщаяШапка");
	ОбластьДанныеПроцесса = Макет.ПолучитьОбласть("ДанныеПроцесса");
	ОбластьЭтапыШапка = Макет.ПолучитьОбласть("ЭтапыШапка");
	ОбластьЭтапыСтрока = Макет.ПолучитьОбласть("ЭтапыСтрока");
	ОбластьДействияСхемыШапка = Макет.ПолучитьОбласть("ДействияСхемыШапка");
	ОбластьДействияСхемыСтрока = Макет.ПолучитьОбласть("ДействияСхемыСтрока");
	ОбластьСхемаПроцессаШапка = Макет.ПолучитьОбласть("СхемаПроцессаШапка");
	ОбъектПечати = МассивОбъектов;	
	
	ОбластьЗаголовок.Параметры.Заголовок = ОбъектПечати.Наименование;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

	ОбластьОбщаяШапка.Параметры.НаименованиеЗадачи = ОбъектПечати.Наименование;
	ОбластьОбщаяШапка.Параметры.Описание = ОбъектПечати.Описание;
	ОбластьОбщаяШапка.Параметры.Контролер = ОбъектПечати.Контролер;
	ОбластьОбщаяШапка.Параметры.Важность = ОбъектПечати.Важность;
	ТабличныйДокумент.Вывести(ОбластьОбщаяШапка);
	
	Если ТипЗнч(ОбъектПечати) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ОбластьДанныеПроцесса.Параметры.ДатаПроцесса = ОбъектПечати.Дата;
		ОбластьДанныеПроцесса.Параметры.Запущен = ОбъектПечати.Стартован;
		ОбластьДанныеПроцесса.Параметры.Завершен  = ОбъектПечати.Завершен;
		ОбластьДанныеПроцесса.Параметры.ДатаЗавершения = ОбъектПечати.ДатаЗавершения;
		ТабличныйДокумент.Вывести(ОбластьДанныеПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПечати.Схема) Тогда
		
		// Получаем реквизиты схемы и графическую схему.
		РеквизитыСхемы = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ОбъектПечати.Схема, "Схема, ЭлементыСхемы, ПараметрыДействий");
		
		ГрафическаяСхема = РеквизитыСхемы.Схема.Получить();
		ГрафическаяСхема.ИспользоватьСетку = Ложь;
		
		ПараметрыДействий = РеквизитыСхемы.ПараметрыДействий.Выгрузить();
		ПараметрыЭлементов = РеквизитыСхемы.ЭлементыСхемы.Выгрузить();
		КэшДанныхДействий = КэшДанныхДействий(ПараметрыДействий);
		
		// Добавляем и заполняем колонки со сроками.
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Дата"));
		ОписаниеТипаДата = Новый ОписаниеТипов(МассивТипов);
		
		ПараметрыДействий.Колонки.Добавить("СрокИсполненияПроцесса", ОписаниеТипаДата);
		ПараметрыДействий.Колонки.Добавить("СрокИсполненияПроцессаДни", ОписаниеТипаЧисло);
		ПараметрыДействий.Колонки.Добавить("СрокИсполненияПроцессаЧасы", ОписаниеТипаЧисло);
		ПараметрыДействий.Колонки.Добавить("СрокИсполненияПроцессаМинуты", ОписаниеТипаЧисло);
		ПараметрыДействий.Колонки.Добавить("СостояниеПроцесса");
		
		СрокиИсполненияПроцессовКлиентСерверКОРП.
			ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
				ПараметрыДействий, ПараметрыЭлементов, КэшДанныхДействий);
		
		// Получим признак использования времени в сроках.
		ИспользоватьДатуИВремяВСрокахЗадач = 
			ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
		// Получим признаки расчета точных и относительных сроков.
		КомплексныйПроцесс = Неопределено;
		Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			
			ВладелецВерхнегоУровня = 
				РаботаСКомплекснымиБизнесПроцессамиСервер.ВладелецВерхнегоУровня(ОбъектПечати);
			
			Если ЗначениеЗаполнено(ВладелецВерхнегоУровня)
				И ТипЗнч(ВладелецВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				
				КомплексныйПроцесс = ВладелецВерхнегоУровня;
				
			КонецЕсли;
		Иначе
			КомплексныйПроцесс = ОбъектПечати;
		КонецЕсли;
		Если ЗначениеЗаполнено(КомплексныйПроцесс) Тогда
			
			РеквизитыКомплексногоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомплексныйПроцесс, "Стартован, Шаблон");
			
			Если Не РеквизитыКомплексногоПроцесса.Стартован
				И ЗначениеЗаполнено(РеквизитыКомплексногоПроцесса.Шаблон) Тогда
				
				ПоказатьТочныеСроки = Ложь;
				ПоказатьОтносительныеСроки = Истина;
			Иначе
				ПоказатьТочныеСроки = Истина;
				ПоказатьОтносительныеСроки = Ложь;
			КонецЕсли;
			
		Иначе
			ПоказатьТочныеСроки = Ложь;
			ПоказатьОтносительныеСроки = Истина;
		КонецЕсли;
		
		// Формируем кэш параметров элементов.
		КэшПараметровЭлементов = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ПараметрыЭлементов Цикл
			КэшПараметровЭлементов.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьДействияСхемыШапка);
		
		НомерСтроки = 1;
		
		Для Каждого ПараметрыДействия Из ПараметрыДействий Цикл
			
			ОбластьДействияСхемыСтрока.Параметры.Номер = НомерСтроки;
			
			ПараметрыЭлемента = КэшПараметровЭлементов.Получить(ПараметрыДействия.Имя);
			
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
				ОбновитьПредставлениеДействияВСхемеПроцесса(
					ГрафическаяСхема,
					ПараметрыДействия,
					ПараметрыЭлемента,
					КэшДанныхДействий,
					Новый СписокЗначений,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ПоказатьТочныеСроки,
					ПоказатьОтносительныеСроки);
			
			Действие = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СсылкаНаДействиеСхемы(
				ПараметрыДействия, ПараметрыЭлемента, ПараметрыДействия.СостояниеПроцесса, Новый СписокЗначений);
			
			ОписаниеДействия = "";
			ИсполнителиДействия = "";
			СрокИсполненияДействия = "";
			
			Если ЗначениеЗаполнено(Действие) Тогда
				
				ДанныеДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВКэше(
					Действие, КэшДанныхДействий);
					
				ОписаниеДействия = ДанныеДействия.Описание;
				ИсполнителиДействия = ДанныеДействия.Исполнители;
				
				СтруктураСроков = Новый Структура;
				СтруктураСроков.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
				СтруктураСроков.Вставить("СрокИсполненияПроцессаДни", 0);
				СтруктураСроков.Вставить("СрокИсполненияПроцессаЧасы", 0);
				СтруктураСроков.Вставить("СрокИсполненияПроцессаМинуты", 0);
				
				Если ПоказатьТочныеСроки Или ПоказатьОтносительныеСроки Тогда
					ИсключенныеСвойства = "";
					Если Не ПоказатьТочныеСроки Тогда
						ИсключенныеСвойства = "СрокИсполненияПроцесса";
					КонецЕсли;
					Если Не ПоказатьОтносительныеСроки Тогда
						ИсключенныеСвойства = ИсключенныеСвойства
						+ "СрокИсполненияПроцессаДни, СрокИсполненияПроцессаЧасы, СрокИсполненияПроцессаМинуты";
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураСроков, ПараметрыДействия,, ИсключенныеСвойства);
					
				Если ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцесса)
					Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаДни)
					Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаЧасы)
					Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаМинуты) Тогда
					
					СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
						СрокИсполненияДействия,
						СтруктураСроков.СрокИсполненияПроцесса,
						СтруктураСроков.СрокИсполненияПроцессаДни,
						СтруктураСроков.СрокИсполненияПроцессаЧасы,
						СтруктураСроков.СрокИсполненияПроцессаМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач);
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьДействияСхемыСтрока.Параметры.ОписаниеДействия = ОписаниеДействия;
			ОбластьДействияСхемыСтрока.Параметры.ИсполнителиДействия = ИсполнителиДействия;
			ОбластьДействияСхемыСтрока.Параметры.Срок = СрокИсполненияДействия;
			
			ТабличныйДокумент.Вывести(ОбластьДействияСхемыСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьСхемаПроцессаШапка);
		КартинкаГрафическойСхемы = ГрафическаяСхема.ПолучитьКартинку(,, ФорматКартинки.PNG);
		ТабличныйДокументСКартинкой = Новый ТабличныйДокумент;
		Рисунок = ТабличныйДокументСКартинкой.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Картинка = КартинкаГрафическойСхемы;
		Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		Рисунок.Лево = 5;
		Рисунок.Ширина = 655;
		Рисунок.Высота = 100;
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		ТабличныйДокумент.Вывести(ТабличныйДокументСКартинкой);
		
	Иначе
	
		ТабличныйДокумент.Вывести(ОбластьЭтапыШапка);
		
		Для Каждого Этап Из ОбъектПечати.Этапы Цикл
			
			СтрокаСрок = "";
			Попытка
				ДлительностьЭтапа = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
					Этап.ШаблонБизнесПроцесса, Этап.ШаблонБизнесПроцесса.СрокОтложенногоСтарта);
					
				СтрокаСрок = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
					ДлительностьЭтапа.СрокИсполненияПроцессаДни,
					ДлительностьЭтапа.СрокИсполненияПроцессаЧасы,
					ДлительностьЭтапа.СрокИсполненияПроцессаМинуты);
			Исключение
				СтрокаСрок = "";		
			КонецПопытки;
			ОбластьЭтапыСтрока.Параметры.Номер = Этап.НомерСтроки;
			Если Найти(ОбластьЭтапыСтрока.Параметры.ИмяЭтапа, "-") > 0
				И СтрДлина(ОбластьЭтапыСтрока.Параметры.ИмяЭтапа) = 36 Тогда
				ОбластьЭтапыСтрока.Параметры.ИмяЭтапа = Этап.ШаблонБизнесПроцесса.Метаданные().Синоним;
			Иначе
				ОбластьЭтапыСтрока.Параметры.ИмяЭтапа = Этап.ШаблонБизнесПроцесса.Наименование;
			КонецЕсли;
			Если Этап.ШаблонБизнесПроцесса.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
				ОбластьЭтапыСтрока.Параметры.ОписаниеЭтапа = Этап.ШаблонБизнесПроцесса.Описание;
			КонецЕсли;
			ОбластьЭтапыСтрока.Параметры.Срок = СтрокаСрок;
			ОбластьЭтапыСтрока.Параметры.ИсполнителиЭтапа = Этап.ИсполнителиЭтапаСтрокой;
			ОбластьЭтапыСтрока.Параметры.ПредшественникиЭтапа = Этап.ПредшественникиЭтапаСтрокой;
			ТабличныйДокумент.Вывести(ОбластьЭтапыСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	// В табличном документе зададим имя области в которую был 
	// выведен объект. Нужно для возможности печати по-комплектно.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОбъектПечати);
		
	Возврат ТабличныйДокумент;
	
КонецФункции

// Общие действия при создании формы шаблона процесса (любого). Выполняет инициализацию 
// и настройку внешнего вида формы в зависимости от того, настраивается ли действие комплексного процесса
// или работа ведется с общими шаблонами бизнес-процессов.
// Параметры:
//	Форма - форма элемента шаблона бизнес-процесса
//	ЗаголовокФормы - строка, заголовок формы
Процедура КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(Знач Форма, ЗаголовокФормы) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Параметры.ВладелецШаблона) Тогда
		Форма.Объект.ВладелецШаблона = Форма.Параметры.ВладелецШаблона;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			Или ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Форма.Владелец = Форма.Параметры.ВладелецШаблона;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецШаблонаВерхнегоУровня = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ВладелецВерхнегоУровня(Форма.Объект);
	
	ВКомплексномПроцессе = Ложь;
	ВШаблонеКомплексногоПроцесса = Ложь;
	Форма.Объект.ШаблонВКомплексномПроцессе = Ложь;
	Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ВКомплексномПроцессе = Истина;
		Форма.Объект.ШаблонВКомплексномПроцессе = Истина;
	КонецЕсли;
	Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		ВШаблонеКомплексногоПроцесса = Истина;
		Форма.Объект.ШаблонВКомплексномПроцессе = Истина;
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Форма.Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Форма.ИспользоватьАвтоподстановки = Истина;
	
	// Инициализация карточки, если шаблон используется в комплексном процессе
	Если ВКомплексномПроцессе
		И НЕ ЗначениеЗаполнено(Форма.Объект.Автор)
		И Форма.Объект.Ссылка.Пустая() Тогда
		
		Форма.Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если ВКомплексномПроцессе Или ВШаблонеКомплексногоПроцесса Тогда
		
		Если ВШаблонеКомплексногоПроцесса Тогда
			
			Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Ответственный;
			Если Форма.Элементы.Найти("Исполнитель") <> Неопределено Тогда
				Форма.Элементы.Исполнитель.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Проверяющий") <> Неопределено Тогда
				Форма.Элементы.Проверяющий.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Контролер") <> Неопределено Тогда
				Форма.Элементы.Контролер.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Важность") <> Неопределено Тогда
				Форма.Элементы.Важность.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			
			Форма.ЭтоДействиеШаблонаКомплексногоПроцесса = Истина;
			
		Иначе
			
			Если ТипЗнч(Форма.Объект.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Автор;
			Иначе
				Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Ответственный;
			КонецЕсли;
			Если Форма.Элементы.Найти("Важность") <> Неопределено Тогда
				Форма.Элементы.Важность.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
				Форма.Элементы.ДобавлятьНаименованиеПредмета.Видимость = Ложь;
				
				Если Форма.Объект.Ссылка.Пустая() Тогда
					Форма.Объект.ДобавлятьНаименованиеПредмета = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если Форма.Элементы.Найти("ИсполнителиИспользоватьУсловия") <> Неопределено Тогда
				Форма.Элементы.ИсполнителиИспользоватьУсловия.Видимость = Ложь;
			КонецЕсли;
			
			// Включение кнопок выбора для механизма "шаблоны текста" 
			Форма.Элементы.НаименованиеБизнесПроцесса.КнопкаВыбора = Истина;
			
			Если Форма.Элементы.Найти("Описание") <> Неопределено Тогда
				Форма.Элементы.Описание.КнопкаВыбора = Истина;
			КонецЕсли;
			
		КонецЕсли;
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		// Настройка использования автоподстановок
		Форма.ИспользоватьАвтоподстановки = Ложь;
		Если ВШаблонеКомплексногоПроцесса
			И НЕ ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона.ВладелецШаблона) Тогда
			Форма.ИспользоватьАвтоподстановки = Истина;
		КонецЕсли;
		
		// Установка заголовка формы. Если шаблон используется в
		//	комплексном процессе, то заголовок устанавливается вручную.
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = ЗаголовокФормы;
		
		Если ВКомплексномПроцессе И ЗначениеЗаполнено(ВладелецШаблонаВерхнегоУровня) Тогда
			
			ОбъектВладелецШаблонаВерхнегоУровня = ВладелецШаблонаВерхнегоУровня.ПолучитьОбъект();
			
			Если ОбъектВладелецШаблонаВерхнегоУровня.Завершен
				ИЛИ (Форма.Параметры.Свойство("ТолькоПросмотр") И Форма.Параметры.ТолькоПросмотр = Истина)
				ИЛИ НЕ ШаблоныБизнесПроцессов.ДоступностьПоШаблону(ОбъектВладелецШаблонаВерхнегоУровня) Тогда
				
				Форма.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если Форма.Параметры.Свойство("НаименованиеДействия")
				И ЗначениеЗаполнено(Форма.Параметры.НаименованиеДействия) Тогда
				
				Форма.Объект.НаименованиеБизнесПроцесса = Форма.Параметры.НаименованиеДействия;
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(ОбъектВладелецШаблонаВерхнегоУровня.Предметы, Истина, Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				Если ЗначениеЗаполнено(СтрокаПредметов) И Форма.Объект.Ссылка.Пустая() Тогда
					Форма.Объект.НаименованиеБизнесПроцесса = 
						СокрЛП(Форма.Объект.НаименованиеБизнесПроцесса) + " " + СтрокаПредметов;
				КонецЕсли;
			КонецЕсли;
			
			Если Форма.Параметры.Свойство("ОписаниеДействия")
				И ЗначениеЗаполнено(Форма.Параметры.ОписаниеДействия) Тогда
				
				Форма.Объект.Описание = Форма.Параметры.ОписаниеДействия;
			КонецЕсли;
			
			Форма.КомплексныйПроцессСтартован = ОбъектВладелецШаблонаВерхнегоУровня.Стартован;
			Форма.КомплексныйПроцессЗавершен = ОбъектВладелецШаблонаВерхнегоУровня.Завершен;
			Форма.КомплексныйПроцессПомеченНаУдаление = ОбъектВладелецШаблонаВерхнегоУровня.ПометкаУдаления;
			Форма.СостояниеКомплексногоПроцесса = ОбъектВладелецШаблонаВерхнегоУровня.Состояние;
			
			Форма.ЭтоДействиеКомплексногоПроцесса = Истина;
			Форма.ЭтоДействиеКомплексногоПроцессаПоШаблону = 
				ЗначениеЗаполнено(ОбъектВладелецШаблонаВерхнегоУровня.Шаблон);
			
		КонецЕсли;
	КонецЕсли;

	// Установка видимости разделов формы, если шаблон используется в комплексном процессе
	Форма.Элементы.СтраницаОШаблоне.Видимость = НЕ Форма.Объект.ШаблонВКомплексномПроцессе;
	
	Если Форма.Параметры.Свойство("ПредметыПроцесса") Тогда
		Форма.Предметы.ЗагрузитьЗначения(Форма.Параметры.ПредметыПроцесса);
		Если ДоступностьПоШаблону(Форма) = Истина Тогда
			Форма.ТолькоПросмотр = Ложь;				
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
			Форма.Элементы.Предметы.ТолькоПросмотр = Истина;
			Если Форма.Элементы.Найти("Добавить") <> Неопределено Тогда
				Форма.Элементы.Добавить.Доступность = Ложь;
				Для Каждого Элемент Из Форма.Элементы.Добавить.ПодчиненныеЭлементы Цикл
					Элемент.Доступность = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Форма.Элементы.Найти("ПредметыИзменитьПредмет") <> Неопределено Тогда
			Форма.Элементы.ПредметыИзменитьПредмет.Доступность = Ложь;
		КонецЕсли;
		
		Если Форма.Элементы.Найти("ПредметыЗадач") <> Неопределено Тогда
			Форма.Элементы.ПредметыЗадач.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Применяет настройки действия комплексного процесса или шаблона комплексного процесса
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
//	ИдентификаторЭтапа - уникальный идентификатор действия, для которого устанавливаются настройки
//	ПараметрыОповещения - структура, содержащая параметры действия
//		ШаблонБП - ссылка на шаблон бизнес-процесса
//		ВладелецШаблона - ссылка на комплексный процесс или шаблон комплексного процесса
// Возвращает:
//	УникальныйИдентификатор - идентификатор действия, для которого были применены настройки
Функция ПрименитьНастройкиДействия(Форма, ПараметрыОповещения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(ПараметрыОповещения) <> Тип("Структура") Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск настроек действия в табличной части
	Шаблон = ПараметрыОповещения.ШаблонБП;
	ИдентификаторЭтапа = Неопределено;
	РабочийЭтап = Неопределено;
	Для Каждого Этап Из Форма.Объект.Этапы Цикл
		Если Этап.ШаблонБизнесПроцесса = Шаблон Тогда
			ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
			РабочийЭтап = Этап;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Настройки действия не найдены - создается новая запись
	Если ИдентификаторЭтапа = Неопределено Тогда
		РабочийЭтап = Форма.Объект.Этапы.Добавить();
		РабочийЭтап.ИдентификаторЭтапа = Новый УникальныйИдентификатор();
		РабочийЭтап.ПредшественникиВариантИспользования = "ВсеПредшественники";
		
		Если Форма.Объект.Этапы.Количество() = 1 Тогда
			// Если добавляется первое действие, то его предшественник - старт процесса
			НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
			НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
			НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
		ИначеЕсли Форма.Объект.Этапы.Количество() > 1 Тогда
			// Если все действия выполняются параллельно, то в предшественники записывается старт процесса
			Если Форма.Объект.ВариантМаршрутизации = 
				Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда  
				
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
				
			// Если все действия выполняются по очереди последовательно, каждый этап является предшественником
			//	следующего.
			ИначеЕсли Форма.Объект.ВариантМаршрутизации = 
				Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
				
				КоличествоЭтапов = Форма.Объект.Этапы.Количество();
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = 
					Форма.Объект.Этапы[КоличествоЭтапов-2].ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.УсловиеРассмотрения = 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
					
			// Если в комплексном процессе используется смешанная маршрутизация, то в предшественники
			// записывается действие, расположенной в таблице действий перед добавленным действием.
			Иначе
				КоличествоЭтапов = Форма.Объект.Этапы.Количество();
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = 
					Форма.Объект.Этапы[КоличествоЭтапов - 2].ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.УсловиеРассмотрения = 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;	
			
			КонецЕсли;
		КонецЕсли;
		
		// Установка текущей строки списка действий на только что добавленную настройку
		ИндексЭтапа = Форма.Объект.Этапы.Индекс(РабочийЭтап);
		Форма.Элементы.Этапы.ТекущаяСтрока = ИндексЭтапа;
	КонецЕсли;
	
	Если РабочийЭтап = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Шаблон.ВладелецШаблона) Тогда
		ШаблонДляВставки = Шаблон.ПолучитьОбъект().Скопировать();
		ШаблонДляВставки.ВладелецШаблона = ПараметрыОповещения.ВладелецШаблона;
		РабочийШаблон = ШаблонДляВставки.Ссылка;
	Иначе
		РабочийШаблон = Шаблон;
	КонецЕсли;
	
	РабочийЭтап.ШаблонБизнесПроцесса = РабочийШаблон;
	
	Если РабочийШаблон.ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая
		ИЛИ РабочийШаблон.ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		ШаблонДляВставкиОбъект = РабочийЭтап.ШаблонБизнесПроцесса.ПолучитьОбъект();
		ШаблонДляВставкиОбъект.Важность = РабочийШаблон.ВладелецШаблона.Важность;
		ШаблонДляВставкиОбъект.Записать();
	КонецЕсли;
	
	Предметы = Неопределено;
	ПараметрыОповещения.Свойство("Предметы", Предметы);
	
	ОбновитьПредметыПоНастроенномуДействию(
		Форма,
		РабочийЭтап.ШаблонБизнесПроцесса,
		Предметы,
		РабочийЭтап.ИдентификаторЭтапа);
	
	Модифицированность = Истина;
	ЗаполнитьВычисляемыеПоляЭтапов(Форма);
	Возврат РабочийЭтап.ИдентификаторЭтапа;
		
КонецФункции

// Заполняет вычисляемые текстовые поля списка действий комплексного процесса на форме
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
Процедура ЗаполнитьВычисляемыеПоляЭтапов(Форма, РассчитыватьСрок = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого РабочийЭтап Из Форма.Объект.Этапы Цикл
		
		РабочийШаблон = РабочийЭтап.ШаблонБизнесПроцесса;
		
		Если Не ЗначениеЗаполнено(РабочийШаблон) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РабочийШаблон);
		РеквизитыШаблона = МенеджерШаблона.РеквизитыЭтапаДляВычисляемыхПолей(РабочийШаблон);
		
		ИмяТипа = "";
		Попытка
			ИмяПроцесса = МенеджерШаблона.ИмяПроцесса(РабочийШаблон);
			ИмяТипа = МенеджерШаблона.СинонимПроцесса(ИмяПроцесса, РеквизитыШаблона) + ": ";
			
		Исключение
			//в модуле менеджера процесса не определена функция ИмяПроцесса()
		КонецПопытки;
		
		РабочийЭтап.ЗадачаЭтапа = ИмяТипа + РеквизитыШаблона.НаименованиеБизнесПроцесса;
		
		РабочийЭтап.ИсходныйШаблон = РеквизитыШаблона.ИсходныйШаблон;
		
		Если РеквизитыШаблона.Свойство("Описание") Тогда
			РабочийЭтап.ОписаниеДействия = РеквизитыШаблона.Описание;
			РабочийЭтап.ЕстьОписание = СтрДлина(РабочийЭтап.ОписаниеДействия) > 0;
		КонецЕсли;
		
		РабочийЭтап.Важность = 1;
		Если РеквизитыШаблона.Свойство("Важность") Тогда
			Если РеквизитыШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
				РабочийЭтап.Важность = 2;
			ИначеЕсли РеквизитыШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
				РабочийЭтап.Важность = 1;
			ИначеЕсли РеквизитыШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
				РабочийЭтап.Важность = 0;
			КонецЕсли;
		КонецЕсли;
		
		ТипОбъекта = ТипЗнч(Форма.Объект.Ссылка);
		
		РабочийЭтап.ИсполнителиЭтапаСтрокой = 
			МенеджерШаблона.ПолучитьСтроковоеПредставлениеИсполнителей(РеквизитыШаблона);
		
		Если ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			РабочийЭтап.ИсполнителиПредставление = РабочийЭтап.ИсполнителиЭтапаСтрокой;
		КонецЕсли;
		
		
		Если ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
			И ЗначениеЗаполнено(РабочийЭтап.ЗапущенныйБизнесПроцесс) 
			И Не РабочийЭтап.ЗадачаВыполнена Тогда
			
			ТипЗапущенныйБизнесПроцесс = ТипЗнч(РабочийЭтап.ЗапущенныйБизнесПроцесс);
		
			Если ТипЗапущенныйБизнесПроцесс <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
				И ТипЗапущенныйБизнесПроцесс <> Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
				И ТипЗапущенныйБизнесПроцесс <> Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
				И ТипЗапущенныйБизнесПроцесс <> Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
				
				МассивЗадач = РаботаСБизнесПроцессами.ПолучитьМассивЗадачПоБизнесПроцессу(
					РабочийЭтап.ЗапущенныйБизнесПроцесс,
					Истина);
				
				РабочийЭтап.ИсполнителиПредставление = "";
				Для Каждого Задача Из МассивЗадач Цикл
					
					РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Задача.Ссылка, "Исполнитель, РольИсполнителя");
					
					Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
						РабочийЭтап.ИсполнителиПредставление = 
							РабочийЭтап.ИсполнителиПредставление + Строка(РеквизитыЗадачи.Исполнитель) + "; ";
					ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
						РабочийЭтап.ИсполнителиПредставление = 
							РабочийЭтап.ИсполнителиПредставление + Строка(РеквизитыЗадачи.РольИсполнителя) + "; ";
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВариантМаршрутизацииПриИзменении(Форма.Объект, Форма.ЭтапыКУдалению);
	
КонецПроцедуры

// Обработчик события переключения варианта маршрутизации комплексного процесса.
// Переключает внешний вид списка действий комплексного процесса.
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
Процедура ВариантМаршрутизацииПриИзменении(Объект, ЭтапыКУдалению) Экспорт
	
	ЭтоПроцесс = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ЭтоПроцесс = Истина;
	КонецЕсли;
	
	ПредшественникиЭтаповДоИзменения = Объект.ПредшественникиЭтапов.Выгрузить();
	ОтборПоВыполненнымУсловнымПереходам = Новый Структура;
	ОтборПоВыполненнымУсловнымПереходам.Вставить("ИдентификаторПоследователя", УникальныйИдентификаторПустой());
	ОтборПоВыполненнымУсловнымПереходам.Вставить("ИдентификаторПредшественника", УникальныйИдентификаторПустой());
	Если ЭтоПроцесс Тогда
		ОтборПоВыполненнымУсловнымПереходам.Вставить("УсловныйПереходБылВыполнен", Истина);
	КонецЕсли;
	
	Если Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		// У каждого этапа предшественником устанавливается старт процесса
		Объект.ПредшественникиЭтапов.Очистить();
		Для Каждого Этап Из Объект.Этапы Цикл
			НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
			НоваяСтрока.ИдентификаторПоследователя = Этап.ИдентификаторЭтапа;
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
			
			Если ЭтоПроцесс Тогда
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока,,
					"УсловныйПереходБылВыполнен");
				НоваяСтрока.УсловныйПереходБылВыполнен = ПредшественникиЭтаповДоИзменения.
					НайтиСтроки(ОтборПоВыполненнымУсловнымПереходам).Количество() > 0;
			Иначе
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		// Предшественники очищаются - этапы будут выполняться в порядке очереди
		Объект.ПредшественникиЭтапов.Очистить();
		КоличествоЭтапов = Объект.Этапы.Количество();
		Для Счетчик = 0 по Объект.Этапы.Количество() - 1 Цикл
			НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
			НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
			НовыйПредшественникПодобран = Ложь;
			Для Индекс = 1 по Счетчик Цикл
				ДействительныйИндекс = Счетчик - Индекс;
				ЭтапЕстьСредиУдаленных = Ложь;
				Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
					Если ЭтапКУдалению.Значение.ИдентификаторЭтапа = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа Тогда
						ЭтапЕстьСредиУдаленных = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭтапЕстьСредиУдаленных Тогда
					НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;	
					НовыйПредшественникПодобран = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НовыйПредшественникПодобран Тогда
				НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();	
			КонецЕсли;
			НоваяСтрока.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
			
			Если ЭтоПроцесс Тогда
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока,,
					"УсловныйПереходБылВыполнен");
				НоваяСтрока.УсловныйПереходБылВыполнен = ПредшественникиЭтаповДоИзменения.
					НайтиСтроки(ОтборПоВыполненнымУсловнымПереходам).Количество() > 0;
			Иначе
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление этапа в процессе или шаблоне процесса
// Параметры:
//	Форма - форма, на которой выполняется удаление
//	НаименованиеЗадачи - наименование задачи удаляемого этапа
//	ИдентификаторЭтапа - уникальный идентификатор удаляемого этапа
// Возвращает:
//	Истина - удаление выполнено
//	Ложь - удаление не выполнено
Функция УдалитьЭтап(Форма, НаименованиеЗадачи, ИдентификаторЭтапа) Экспорт
		
	СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	СтрокиКУдалению = Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.ДействияПроцесса.Удалить(Строка);
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ТочкиМаршрута") <> Неопределено Тогда
		ТочкиМаршрута = Форма.ТочкиМаршрута.ПолучитьЭлементы();
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из ТочкиМаршрута Цикл
			Если Строка.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			ТочкиМаршрута.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Этап Из Форма.Объект.Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			УдалитьВсехПредшественниковЭтапа(Форма.Объект, ИдентификаторЭтапа);
			Пока ЭтапЕстьСредиПредшественников(Форма.Объект, ИдентификаторЭтапа) Цикл
				Для Каждого Предшественник Из Форма.Объект.ПредшественникиЭтапов Цикл
					Если Предшественник.ИдентификаторПредшественника = ИдентификаторЭтапа Тогда
						Форма.Объект.ПредшественникиЭтапов.Удалить(Предшественник);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			//Удаление шаблона бизнес-процесса
			РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьШаблонДействияЭтапаПроцесса(Этап.ШаблонБизнесПроцесса);
			Форма.Объект.Этапы.Удалить(Этап);
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Проверяет, является ли задача ведущей.
//
// Параметры:
//  Задача  - ЗадачаСсылка.ЗадачаИсполнителя - проверяемая задача
//
// Возвращаемое значение:
//   Булево   - принимает значение Истина, если задача ведущая.
//
Функция ЭтоВедущаяЗадача(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &СвязующаяЗадача";
	Запрос.УстановитьПараметр("СвязующаяЗадача", Задача);
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает корневого владельца служебного шаблона находящегося в иерархии
// комплексного процесса или шаблона комплексного процесса.
//
// Параметры:
//  Действие - СправочникОбъект.<ИмяШаблонаПроцесса>,
//             СправочникСсылка.<ИмяШаблонаПроцесса>,
//             ДанныеФормыСтруктура - служебный шаблон.
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//  БизнесПроцессСсылка.КомплексныйПроцесс,
//  Неопределено - корневой владелец служебного шаблона.
//                 Принимает значение Неопределено, если у шаблона нет владельца.
//
Функция ВладелецВерхнегоУровня(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Действие)) Тогда
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Действие, "ВладелецШаблона, КомплексныйПроцесс");
	Иначе
		РеквизитыДействия = Действие;
	КонецЕсли;
	
	ВладелецШаблона = РеквизитыДействия.ВладелецШаблона;
	КомплексныйПроцесс = РеквизитыДействия.КомплексныйПроцесс;
	
	ТипКомплексныйПроцесс = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");
	
	ПредыдущийВладелец = Неопределено;
	
	Пока ЗначениеЗаполнено(ВладелецШаблона) Цикл
		
		Если ТипЗнч(ВладелецШаблона) = ТипКомплексныйПроцесс Тогда
			Возврат ВладелецШаблона;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КомплексныйПроцесс)
			И ТипЗнч(КомплексныйПроцесс) = ТипКомплексныйПроцесс Тогда
			
			Возврат КомплексныйПроцесс;
		КонецЕсли;
		
		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецШаблона, "ВладелецШаблона, КомплексныйПроцесс");
			
		
		ПредыдущийВладелец = ВладелецШаблона;
		
		ВладелецШаблона = РеквизитыВладельца.ВладелецШаблона;
		КомплексныйПроцесс = РеквизитыВладельца.КомплексныйПроцесс;
		
	КонецЦикла;
	
	Возврат ПредыдущийВладелец;
	
КонецФункции

// Определяет, является ли шаблон действие комплексного процесса.
//
// Параметры:
//  Действие - СправочникОбъект.<ИмяШаблонаПроцесса>,
//             СправочникСсылка.<ИмяШаблонаПроцесса>,
//             ДанныеФормыСтруктура - служебный шаблон.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДействиеКомплексногоПроцесса(Действие) Экспорт
	
	ВладелецВерхнегоУровня = ВладелецВерхнегоУровня(Действие);
	
	КомплексныйПроцессДействия = Неопределено;
	Если ТипЗнч(ВладелецВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		КомплексныйПроцессДействия = ВладелецВерхнегоУровня;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(КомплексныйПроцессДействия);
	
КонецФункции

// Обновляет порядок сортировки этапов процесса/шаблона.
//
// Параметры:
//  Объект - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//           БизнесПроцессОбъект.КомплексныйПроцесс - объект комплексного процесса или шаблона.
//
Процедура ОбновитьПорядокСортировкиЭтапов(Объект) Экспорт
	
	Если Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно
		Или Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		
		ПорядковыйНомерЭтапа = 1;
		
		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			СтрокаТаблицы.ПорядокСортировки = ПорядковыйНомерЭтапа;
			ПорядковыйНомерЭтапа = ПорядковыйНомерЭтапа + 1;
		КонецЦикла;
		
	Иначе
	
		КэшСтрокЭтапов = Новый Соответствие;
		
		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			СтрокаТаблицы.ПорядокСортировки = 0;
			КэшСтрокЭтапов.Вставить(СтрокаТаблицы.ИдентификаторЭтапа, СтрокаТаблицы);
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторПредшественника", УникальныйИдентификаторПустой());
		
		ПервыеЭтапы = Объект.ПредшественникиЭтапов.НайтиСтроки(Отбор);
		
		ПорядковыйНомерЭтапа = 0;
		
		Для Каждого СтрокаТаблицы Из ПервыеЭтапы Цикл
			
			ПорядковыйНомерЭтапа = ПорядковыйНомерЭтапа + 1;
			
			СтрокаПервогоЭтапа = КэшСтрокЭтапов.Получить(СтрокаТаблицы.ИдентификаторПоследователя);
			СтрокаПервогоЭтапа.ПорядокСортировки = ПорядковыйНомерЭтапа;
			
			ОбновитьПорядокСортировкиПоследователейЭтапа(
				Объект,
				СтрокаПервогоЭтапа.ИдентификаторЭтапа,
				ПорядковыйНомерЭтапа,
				КэшСтрокЭтапов);
			
		КонецЦикла;
		
		// Заполняем порядок сортировки для этапов, не попавших ни в один путь.
		// Это нужно, чтобы не было действий с пустым порядком.
		// Пустой порядок является условием завершения отложенного обработчика обновления
		// порядка сортировки.
		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПорядокСортировки) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.ПорядокСортировки = 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак использования фоновой маршрутизации комплексных процессов.
//
// Возвращаемое значение:
//  Булево - принимает значение Истина, если используется фоновая маршрутизация.
//
Функция ИспользоватьФоновуюМаршрутизацию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если включена синхронизация данных и в плане обмена Полный имеется 2 и более узла,
	// то используется фоновая маршрутизация.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Полный.Ссылка
			|ИЗ
			|	ПланОбмена.Полный КАК Полный
			|ГДЕ
			|	Полный.ПометкаУдаления = ЛОЖЬ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 2 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если включена настройка ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов и
	// база не файловая, тогда используется фоновая маршрутизация.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов")
		И Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_СхемаПроцесса

// Выполняет инициализацию схемы в карточке процесса/шаблона.
// Предназначено для вызова из обработчика ПриСозданииНаСервере.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//  Объект - ДанныеФормыСтруктура,
//           БизнессПроцессОбъект.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов - объект комплексного процесса/шаблона.
//
Процедура ИнициализироватьСхемуПроцесса(Форма, Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьКэшДанныхДействий(Форма);
	
	ИнициализироватьКэшНастроекУсловий(Форма);
	
	Если ЗначениеЗаполнено(Объект.Схема) Тогда
		
		// Установим признак использования схемы в карточке процесса шаблона.
		Форма.ИспользоватьСхемуПроцесса = Истина;
		
		// Загрузим объект схемы процесса в реквизит карточки.
		СхемаКомплексногоПроцесса = Объект.Схема.ПолучитьОбъект();
		ЗначениеВДанныеФормы(СхемаКомплексногоПроцесса, Форма.СхемаКомплексногоПроцесса);
		
		// Получаем схему.
		Форма.Схема = СхемаКомплексногоПроцесса.Схема.Получить();
		
		// Заполнение кэша данных действий
		Форма.КэшДанныхДействий = КэшДанныхДействий(СхемаКомплексногоПроцесса.ПараметрыДействий);
		
		СрокиИсполненияПроцессовКлиентСерверКОРП.
			ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
				Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
				Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
				Форма.КэшДанныхДействий);
		
		// Заполним кэш настроек условий в карточки.
		// В кэш загружаются настройки условий, которые в схеме упакованы в хранилище значений.
		ЗаполнитьКэшНастроекУсловийИзПараметров(
			СхемаКомплексногоПроцесса.ПараметрыУсловий, Форма.КэшНастроекУсловий);
		
		// Заполним описание действий в схеме процесса.
		ПоказатьТочныеСроки = 
			СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
		
		ПоказатьОтносительныеСроки = 
			СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);
		
		ПроцессыСхемыДляПрерывания = Новый СписокЗначений;
		Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
			ПроцессыСхемыДляПрерывания = Форма.ПроцессыСхемыДляПрерывания;
		КонецЕсли;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставленияДействийВСхемеПроцесса(
			Форма.Схема,
			Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
			Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
			Форма.КэшДанныхДействий,
			Форма.ИспользоватьВремяВСрокахЗадач,
			ПоказатьТочныеСроки,
			ПоказатьОтносительныеСроки,
			ПроцессыСхемыДляПрерывания);
		
	КонецЕсли;
	
КонецПроцедуры

// Помещает ссылку на новую схему в объект комплексного процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//  Объект - БизнессПроцессОбъект.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов - объект комплексного процесса/шаблона.
//
Процедура ПоместитьСсылкуНаНовуюСхемуВОбъект(Форма, Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если схема еще не сохранена в базе, то сформируем для нее ссылку
	// и присвоим ее текущегому процессу/шаблону.
	
	Если Не Форма.ИспользоватьСхемуПроцесса
		Или ЗначениеЗаполнено(Объект.Схема) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ИзмененаСхемаПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаСхему = Справочники.СхемыКомплексныхПроцессов.ПолучитьСсылку(Новый УникальныйИдентификатор);
	Объект.Схема = СсылкаНаСхему;
	
КонецПроцедуры

// Возвращает объект схемы из данных формы.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//  ВладелецСхемы - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                  БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на владельца схемы.
//
// Возвращаемое значение:
//  СправочникОбъект.СхемыКомплексныхПроцессов
//
Функция ОбъектСхемыИзДанныхФормы(Форма, ВладелецСхемы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Форма.ИспользоватьСхемуПроцесса Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Форма.ИзмененаСхемаПроцесса
		И ЗначениеЗаполнено(Форма.СхемаКомплексногоПроцесса.Ссылка) Тогда
		
		Возврат Форма.СхемаКомплексногоПроцесса.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	СхемаОбъект = ДанныеФормыВЗначение(
		Форма.СхемаКомплексногоПроцесса, Тип("СправочникОбъект.СхемыКомплексныхПроцессов"));
	
	// Присвоем ранее сформированную ссылку, если схема еще ниразу не сохранялась.
	Если Не ЗначениеЗаполнено(СхемаОбъект.Ссылка) Тогда
		СхемаОбъект.УстановитьСсылкуНового(Форма.Объект.Схема);
	КонецЕсли;
	
	СхемаОбъект.ВладелецСхемы = ВладелецСхемы;
	
	СхемаОбъект.Схема = Новый ХранилищеЗначения(Форма.Схема);
	
	// Поместим настройки условий в схему комплексного процесса из кэша.
	ПоместитьНастройкиУсловийИзКэшаВПараметры(
		СхемаОбъект.ПараметрыУсловий,
		Форма.КэшНастроекУсловий);
	
	Возврат СхемаОбъект;
	
КонецФункции

// Записывает схему процесса из карточки комплексного процесса/шаблона.
// Выполняет непосредственную запись данных схемы в базу.
//
// Параметры:
//  Отказ - Булево - Признак ошибки записи схемы процесса.
//  ТекущийОбъект - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//                  БизнесПроцессОбъект.КомплексныйПроцесс - объект процесса/шаблона.
//  ПараметрыЗаписи - Структура - параметры записи обработчика ПриЗаписиНаСервере.
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//
Процедура ЗаписатьСхемуИзФормы(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Форма.ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Если Не ЭтоШаблон Тогда
		ВладелецСхемы = ТекущийОбъект.СсылкаНаПроцесс();
	Иначе
		ВладелецСхемы = ТекущийОбъект.СсылкаНаШаблон();
	КонецЕсли;
	
	ВерсияДанныхСхемы = Форма.СхемаКомплексногоПроцесса.ВерсияДанных;
	
	// Записываем схему, если она изменена.
	Если Форма.ИзмененаСхемаПроцесса Тогда
		
		// Получаем объект схемы из данных формы.
		СхемаОбъект = ОбъектСхемыИзДанныхФормы(Форма, ВладелецСхемы);
		
		// Помещаем в схему дополнительные параметры для прерывания процессов,
		// если такие есть.
		Если Не ЭтоШаблон И Форма.ПроцессыСхемыДляПрерывания.Количество() > 0 Тогда
			
			СхемаОбъект.ДополнительныеСвойства.Вставить(
				"ПроцессыСхемыДляПрерывания", Форма.ПроцессыСхемыДляПрерывания);
			
			Если ПараметрыЗаписи.Свойство("ПричинаПрерыванияПроцессовСхемы") Тогда
				СхемаОбъект.ДополнительныеСвойства.Вставить(
					"ПричинаПрерыванияПроцессовСхемы", ПараметрыЗаписи.ПричинаПрерыванияПроцессовСхемы);
			КонецЕсли;
			
		КонецЕсли;
		
		СхемаОбъект.Записать();
		
		ВерсияДанныхСхемы = СхемаОбъект.ВерсияДанных;
		
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ВерсияДанныхСхемы", ВерсияДанныхСхемы);
	
КонецПроцедуры

// Загружает записанную схему в карточку процесса/шаблона, после записи.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона
//  ПараметрыЗаписи - Структура - параметры записи обработчика ПриЗаписиНаСервере.
//
Процедура ЗагрузитьСхемуВФормуПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Форма.ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	// Выходим из процедуры, если схемы не была изменена в карточке шаблона
	// перед записью.
	Если ЭтоШаблон И Не Форма.ИзмененаСхемаПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	СхемаОбъект = Форма.Объект.Схема.ПолучитьОбъект();
	
	ИзмениласьВерсияДанныхСхемы = (ПараметрыЗаписи.ВерсияДанныхСхемы <> СхемаОбъект.ВерсияДанных);
	
	// Выходим из процедуры, если схемы не была изменена в карточке процесса
	// перед записью и не менялась при его записи.
	// Схема может меняться при записи процесса, если происходит его продолжение,
	// после остановки.
	Если Не ЭтоШаблон
		И Не Форма.ИзмененаСхемаПроцесса
		И Не ИзмениласьВерсияДанныхСхемы Тогда
		
		Возврат;
	КонецЕсли;
	
	// Обновим объект схемы в форме.
	ЗначениеВДанныеФормы(СхемаОбъект, Форма.СхемаКомплексногоПроцесса);
	
	// Если при записи схемы прерывались процессы, то перезаполним их кэш данных.
	Если Не ЭтоШаблон И Форма.ПроцессыСхемыДляПрерывания.Количество() > 0 Тогда
		
		Для Каждого ПрерванныйПроцесс Из Форма.ПроцессыСхемыДляПрерывания Цикл
			РаботаСКомплекснымиБизнесПроцессамиВызовСервера.ОбновитьДанныеДействияВКэше(
				ПрерванныйПроцесс.Значение, Форма.КэшДанныхДействий);
		КонецЦикла;
		
		Форма.ПроцессыСхемыДляПрерывания.Очистить();
	КонецЕсли;
	
	// Если при записи процесса изменилась версия данных схемы
	// (это возможно при продолжении процесса после остановки),
	// то дополнительно читаем графическую схему в форму, обновляем кэш данных действий
	// и условий, обновляем описание действий в схеме.
	Если ИзмениласьВерсияДанныхСхемы Тогда
		
		Форма.Схема = СхемаОбъект.Схема.Получить();
		
		Форма.КэшДанныхДействий = КэшДанныхДействий(СхемаОбъект.ПараметрыДействий);
		
		ЗаполнитьКэшНастроекУсловийИзПараметров(
			СхемаОбъект.ПараметрыУсловий, Форма.КэшНастроекУсловий);
		
	КонецЕсли;
	
	// Заполняем сроки в параметрах действий, т.к. они есть только в данных формы
	// и теряются после загрузки схемы.
	СрокиИсполненияПроцессовКлиентСерверКОРП.
		ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
			Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
			Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
			Форма.КэшДанныхДействий);
	
	// Заполняем описание действий в схеме процесса.
	ПоказатьТочныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
	
	ПоказатьОтносительныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставленияДействийВСхемеПроцесса(
		Форма.Схема,
		Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
		Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
		Форма.КэшДанныхДействий,
		Форма.ИспользоватьВремяВСрокахЗадач,
		ПоказатьТочныеСроки,
		ПоказатьОтносительныеСроки);
	
	// Сбрасываем флаг изменения схемы.
	Форма.ИзмененаСхемаПроцесса = Ложь;
	
КонецПроцедуры

// Возвращает возможные результаты выполнения действий комплексных процессов.
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Тип - тип процесса.
//   * Значение - СписокЗначений - список возможных вариантов выполнения действия.
//      ** Перечисления.РезультатыВыполненияДействийКомплексныхПроцессов
//
Функция РезультатыВыполненияДействий() Экспорт
	
	РезультатыВыполнения = Новый Соответствие;
	
	ПеречислениеРезультатов = Перечисления.РезультатыВыполненияДействийКомплексныхПроцессов;
	РезультатыПоУмолчанию = Новый СписокЗначений;
	
	РезультатыПоУмолчанию.Добавить(ПеречислениеРезультатов.ЗавершеноСЛюбымРезультатом);
	РезультатыПоУмолчанию.Добавить(ПеречислениеРезультатов.Отрицательно);
	РезультатыПоУмолчанию.Добавить(ПеречислениеРезультатов.Положительно);
	РезультатыПоУмолчанию.Добавить(ПеречислениеРезультатов.ПоложительноБезЗамечаний);
	РезультатыПоУмолчанию.Добавить(ПеречислениеРезультатов.ПоложительноСЗамечаниями);
	
	РезультатыВыполнения.Вставить(Тип("Неопределено"), РезультатыПоУмолчанию);
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	ОписаниеТиповДействий = Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип;
	
	Для Каждого МетаданныеПроцесса Из МетаданныеПроцессов Цикл
		
		ИмяПроцесса = МетаданныеПроцесса.Имя;
		
		ТипПроцесса = Тип("БизнесПроцессСсылка." + ИмяПроцесса);
		
		Если Не ОписаниеТиповДействий.СодержитТип(ТипПроцесса) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПроцесса.ПолноеИмя());
		РезультатыВыполненияПроцесса = МенеджерПроцесса.РезультатыВыполненияДействияКомплексногоПроцесса();
		РезультатыВыполнения.Вставить(ТипПроцесса, РезультатыВыполненияПроцесса);
		
	КонецЦикла;
	
	Возврат РезультатыВыполнения;
	
КонецФункции

#Область Действия

// Заполняет таблицу ФормыДействийСхемы в карточке процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона.
//
Процедура ЗаполнитьФормыДействийСхемы(Форма) Экспорт
	
	ТипыДействий = Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип.Типы();
	
	Для Каждого ТипДействия Из ТипыДействий Цикл
		СтрокаТаблицы = Форма.ФормыДействийСхемы.Добавить();
		СтрокаТаблицы.ТипДействия = ТипДействия;
		СтрокаТаблицы.ИмяФормы = Метаданные.НайтиПоТипу(ТипДействия).ПолноеИмя() + ".ФормаОбъекта";
	КонецЦикла;
	
	ТипыДействий = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип.Типы();
	
	Для Каждого ТипДействия Из ТипыДействий Цикл
		СтрокаТаблицы = Форма.ФормыДействийСхемы.Добавить();
		СтрокаТаблицы.ТипДействия = ТипДействия;
		СтрокаТаблицы.ИмяФормы = Метаданные.НайтиПоТипу(ТипДействия).ПолноеИмя() + ".ФормаОбъекта";
	КонецЦикла;
	
КонецПроцедуры

// Завершает настройку действия для текущего элемента схемы процесса.
// Вспомогательная процедура. Предназначена для вызова из карточки комплексного процесса/шаблона.
//
// Возвращает ссылку на шаблон процесса (действия) и его форму, если владельцем является шаблон
// комплексного процесса, либо шаблон находится в комплексном процессе и требует дополнительной настройки.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона.
//  ИмяДействия - Строка - Имя элемента действия в схеме процесса.
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцессая - ссылка на действие комплексного процесса.
//  Предметы - Массив - массив структур с полями:
//    ИмяПредмета, Предмет, РольПредмета, ИмяПредметаОснование, ШаблонОснование, ИсходноеИмяПредмета (может отсутствовать).
//
// Возвращаемое значение:
//  Структура:
//   * Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцессая - ссылка на действие комплексного процесса.
//   * ИмяФормыДляОткрытия - Строка - путь к форме шаблона процесса.
//
Функция ЗавершитьНастройкуЭлементаСхемыДействия(Форма, ИмяДействия, ШаблонПроцесса, Предметы) Экспорт
	
	ПараметрыНовогоШаблона = Новый Структура;
	ПараметрыНовогоШаблона.Вставить("Шаблон");
	ПараметрыНовогоШаблона.Вставить("ИмяФормыДляОткрытия");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецШаблонаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонПроцесса, "ВладелецШаблона");
	
	ПараметрыДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаПараметровДействий(
		Форма.СхемаКомплексногоПроцесса, ИмяДействия);
	
	Если ЗначениеЗаполнено(ВладелецШаблонаПроцесса) Тогда
		// Обновление параметров действия после интерактивной настройки шаблона процесса.
		
		Если Форма.Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая
			Или Форма.Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
			
			ОбъектШаблонаПроцесса = ШаблонПроцесса.ПолучитьОбъект();
			ОбъектШаблонаПроцесса.Важность = Форма.Объект.Важность;
			
			ШаблоныБизнесПроцессов.ЗаписатьШаблон(
				ОбъектШаблонаПроцесса, "ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
			
		КонецЕсли;
		
		ПараметрыДействия.ШаблонПроцесса = ШаблонПроцесса;
		
		ОбновитьПредметыПоНастроенномуДействию(
			Форма,
			ПараметрыДействия.ШаблонПроцесса,
			Предметы,
			ПараметрыДействия.Идентификатор);
		
	Иначе // Обновление параметров действия после выбора независимого шаблона для действия.
		
		ВернутьПараметрыШаблона = Ложь;
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			// Если шаблон добавляется в комплексный процесс, то в шаблон загржаются предметы
			// комплексного процесса и происходит вычисление автоподстановок.
			
			ИмяПроцесса = Справочники[ШаблонПроцесса.Метаданные().Имя].ИмяПроцесса(ШаблонПроцесса);
			БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
			
			БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
			БизнесПроцессОбъект.Автор = Форма.Объект.Автор;
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонПроцесса, БизнесПроцессОбъект);
			
			Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
				БизнесПроцессОбъект.ЗаполнитьДействияПоШаблону(ШаблонПроцесса);
			КонецЕсли;
			
			Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Форма.Объект.Предметы);
			
			БизнесПроцессОбъект.ЗаполнитьПоШаблону(ШаблонПроцесса);
			
			ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
			
			ОбъектШаблонаПроцесса = ШаблонДляВставки.ПолучитьОбъект();
			
			// Проверим заполнение обязательных полей шаблона.
			// Если все обязательные поля заполнены, то обновляем предметы задач в процессе,
			// иначе возвращаем параметры шаблона для открытия карточки шаблона.
			Если ОбъектШаблонаПроцесса.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта().Количество() = 0 Тогда
				
				ОбновитьПредметыПоНастроенномуДействию(
					Форма,
					ШаблонДляВставки,
					Неопределено,
					ПараметрыДействия.Идентификатор);
			Иначе
				ВернутьПараметрыШаблона = Истина;
			КонецЕсли;
			
		Иначе
			ОбъектШаблонаПроцесса = ШаблонПроцесса.Скопировать();
			ВернутьПараметрыШаблона = Истина;
		КонецЕсли;
		
		ОбъектШаблонаПроцесса.ВладелецШаблона = Форма.Объект.Ссылка;
		ОбъектШаблонаПроцесса.ШаблонВКомплексномПроцессе = Истина;
		
		Если Форма.Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая
			Или Форма.Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
			
			ОбъектШаблонаПроцесса.Важность = Форма.Объект.Важность;
		КонецЕсли;
		
		ШаблоныБизнесПроцессов.ЗаписатьШаблон(
			ОбъектШаблонаПроцесса, "ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
		
		ПараметрыДействия.ШаблонПроцесса = ОбъектШаблонаПроцесса.Ссылка;
		
		Если ВернутьПараметрыШаблона Тогда
			ПараметрыНовогоШаблона.Шаблон = ПараметрыДействия.ШаблонПроцесса;
			ПараметрыНовогоШаблона.ИмяФормыДляОткрытия = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыДействияСхемы(
					Форма, ПараметрыДействия.ШаблонПроцесса);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиВызовСервера.ОбновитьДанныеДействияВКэше(
		ПараметрыДействия.ШаблонПроцесса, Форма.КэшДанныхДействий);
	
	ПроцессыСхемыДляПрерывания = Новый СписокЗначений;
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		ПроцессыСхемыДляПрерывания = Форма.ПроцессыСхемыДляПрерывания;
	КонецЕсли;
	
	ПараметрыЭлемента = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтрокаЭлементаСхемы(
		Форма.СхемаКомплексногоПроцесса, ИмяДействия);
	
	СрокиИсполненияПроцессовКлиентСерверКОРП.
		ЗаполнитьСрокиВПараметрахДействияСхемыКомплексногоПроцесса(
			ПараметрыДействия,
			ПараметрыЭлемента,
			Форма.КэшДанныхДействий,
			ПроцессыСхемыДляПрерывания);
	
	ПоказатьТочныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);

	ПоказатьОтносительныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьОтносительныеСрокиВКомплексномПроцессе(Форма);

	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставленияДействийВСхемеПроцесса(
		Форма.Схема,
		Форма.СхемаКомплексногоПроцесса.ПараметрыДействий,
		Форма.СхемаКомплексногоПроцесса.ЭлементыСхемы,
		Форма.КэшДанныхДействий,
		Форма.ИспользоватьВремяВСрокахЗадач,
		ПоказатьТочныеСроки,
		ПоказатьОтносительныеСроки,
		ПроцессыСхемыДляПрерывания);
	
	Форма.ИзмененаСхемаПроцесса = Истина;
	
	Форма.Модифицированность = Истина;
	
	Возврат ПараметрыНовогоШаблона;
	
КонецФункции

#КонецОбласти

#Область КэшДанныхДействий

// Инициализирует кэш данных действий условий (реквизит формы КэшДанныхДействий).
// Реквизит КэшДанныхДействий является структурой, в которой ключ определяется по ссылке
// на подчиненный процесс/шаблон функцией 
// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяКлючаВКэшеДанныхДействий,
// а значение является структура, соответствующая результату функции
// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона/схемы.
//
Процедура ИнициализироватьКэшДанныхДействий(Форма) Экспорт
	
	Если Форма.КэшДанныхДействий = Неопределено Тогда
		Форма.КэшДанныхДействий = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает кэш данных действий процесса.
//
// Параметры:
//  ПараметрыДействий - ТаблицаЗначений, ТабличнаяЧасть - параметры действий процесса.
//
// Возвращаемое значение:
//  Структура
//   * Ключ - Строка - см. функциию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяКлючаВКэшеДанныхДействий
//   * Значение - Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция КэшДанныхДействий(ПараметрыДействий) Экспорт
	
	КэшДанныхДействий = Новый Структура;
	
	Если ТипЗнч(ПараметрыДействий) = Тип("ТаблицаЗначений") Тогда
		ТаблицаПараметрыДействий = ПараметрыДействий.СкопироватьКолонки();
	Иначе
		ТаблицаПараметрыДействий = ПараметрыДействий.ВыгрузитьКолонки();
	КонецЕсли;
	
	ТипыПроцессов = Новый Массив;
	ТипыШаблоновПроцессов = Новый Массив;
	
	Для Каждого СтрокаТаблица Из ПараметрыДействий Цикл
		
		ДобавитьСтрокуВЗапрос = Истина;
		
		Если ЗначениеЗаполнено(СтрокаТаблица.Процесс) Тогда
			ТипПроцесса = ТипЗнч(СтрокаТаблица.Процесс);
			Если ТипыПроцессов.Найти(ТипПроцесса) = Неопределено Тогда
				ТипыПроцессов.Добавить(ТипПроцесса);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблица.ШаблонПроцесса) Тогда
			ТипШаблонаПроцесса = ТипЗнч(СтрокаТаблица.ШаблонПроцесса);
			Если ТипыШаблоновПроцессов.Найти(ТипШаблонаПроцесса) = Неопределено Тогда
				ТипыШаблоновПроцессов.Добавить(ТипШаблонаПроцесса);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаПараметрыДействий.Добавить(), СтрокаТаблица);
		
	КонецЦикла;
	
	Для Каждого ТипДействия Из ТипыПроцессов Цикл
		
		ИмяПроцесса = Метаданные.НайтиПоТипу(ТипДействия).Имя;
		
		МенеджерПроцесса = БизнесПроцессы[ИмяПроцесса];
		
		ВыборкаДанныхДействий = МенеджерПроцесса.ВыборкаДанныхДействий(ТаблицаПараметрыДействий);
		
		Пока ВыборкаДанныхДействий.Следующий() Цикл
			Данные = МенеджерПроцесса.ДанныеДействия(ВыборкаДанныхДействий);
			
			ПоместитьДанныеДействияВКэш(ВыборкаДанныхДействий.Ссылка, Данные, КэшДанныхДействий);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТипШаблонаДействия Из ТипыШаблоновПроцессов Цикл
		
		ИмяШаблона = Метаданные.НайтиПоТипу(ТипШаблонаДействия).Имя;
		
		МенеджерШаблона = Справочники[ИмяШаблона];
		
		ВыборкаДанныхДействий = МенеджерШаблона.ВыборкаДанныхДействий(ТаблицаПараметрыДействий);
		
		Пока ВыборкаДанныхДействий.Следующий() Цикл
			Данные = МенеджерШаблона.ДанныеДействия(ВыборкаДанныхДействий);
			
			ПоместитьДанныеДействияВКэш(ВыборкаДанныхДействий.Ссылка, Данные, КэшДанныхДействий);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КэшДанныхДействий;
	
КонецФункции

// Добавляет исполнителя действия в массив.
//
// Параметры:
//  Исполнители - Массив - массив всех исполнителей.
//  Исполнитель - СправочникСсылка.Пользователи, СправочникСсылка.ПолныеРоли.
//
Процедура ДобавитьИсполнителяПроцессаВМассив(Исполнители, Исполнитель) Экспорт
	
	Если ЗначениеЗаполнено(Исполнитель)
		И Исполнители.Найти(Исполнитель) = Неопределено Тогда
		
		Исполнители.Добавить(Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление исполнителей действия.
//
// Параметры:
//  Исполнители - Массив - исполнители процесса (пользователи, роли).
//
// Возвращаемое значение:
//  Строка
//
Функция ИсполнителиСтрокой(Исполнители) Экспорт
	
	ИсполнителиСтрокой = "";
	
	КоличествоВсех = Исполнители.Количество();
	
	КоличествоОтображаемыхИмен = КоличествоВсех;
	Если КоличествоВсех > 3 Тогда
		КоличествоОтображаемыхИмен = 3;
	КонецЕсли;
	
	Разделитель = "";
	
	Для ИндексИсполнителя = 0 По КоличествоОтображаемыхИмен - 1 Цикл
		
		ИмяИсполнителя = Строка(Исполнители[ИндексИсполнителя]);
		
		ИсполнителиСтрокой = ИсполнителиСтрокой
			+ Разделитель
			+ ИмяИсполнителя;
			
		Разделитель = ", ";
		
	КонецЦикла;
	
	Если КоличествоОтображаемыхИмен <> КоличествоВсех Тогда
		
		ПредставлениеЕще = СтрШаблон(
			НСтр("ru = ' и другие (всего %1)'; en = ' and others (%1 total)'"),
			КоличествоВсех);
		
		ИсполнителиСтрокой = ИсполнителиСтрокой + ПредставлениеЕще;
		
	КонецЕсли;
	
	Возврат ИсполнителиСтрокой;
	
КонецФункции

// Помещает данные действия в кэш.
//
// Параметры:
//  ПроцессШаблон - БизнесПроцессСсылка, СправочникСсылка - процесс или шаблон действия.
//  Данные - Структура - данные процесса/шаблона. см. функцию
//                       РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия.
//  КэшДанныхДействий - Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.КэшДанныхДействий.
//
Процедура ПоместитьДанныеДействияВКэш(ПроцессШаблон, Данные, КэшДанныхДействий) Экспорт
	
	ИмяКлючаВКэше = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяКлючаВКэшеДанныхДействий(ПроцессШаблон);
	
	КэшДанныхДействий.Вставить(ИмяКлючаВКэше, Данные);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик подписки на события ЗадачаКомплексногоПроцессаПриВыполнении
//
Процедура ЗадачаКомплексногоПроцессаПриВыполнении(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрутаВложенныйПроцесс = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс;
	
	// Если текущая задача не является ведущей задачей действий комплексных процессов,
	// то выходим из процедуры.
	Если Источник.ТочкаМаршрута <> ТочкаМаршрутаВложенныйПроцесс Тогда
		Возврат;
	КонецЕсли;
	
	// Получим дочерние процессы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &СвязующаяЗадача";
	Запрос.УстановитьПараметр("СвязующаяЗадача", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если нет дочерних процессов выходим из процедуры.
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Если используется фоновая маршрутизация, тогда добавляем процесс в очередь для обработки,
	// иначе продолжаем выполнение процесса в текущем сеансе.
	Если ИспользоватьФоновуюМаршрутизацию() Тогда
		РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.ДобавитьПроцесс(
			Источник.БизнесПроцесс,
			Выборка.ДочернийПроцесс);
	Иначе
	
		КомплексныйПроцессОбъект = Источник.БизнесПроцесс.ПолучитьОбъект();
			
		Если ЗначениеЗаполнено(КомплексныйПроцессОбъект.Схема) Тогда
			КомплексныйПроцессОбъект.ПродолжитьВыполнениеПроцессаПоСхеме(Выборка.ДочернийПроцесс);
		Иначе
			НовыеПроцессы = Новый Массив();
			КомплексныйПроцессОбъект.СтартоватьНовыеДействия(
				НовыеПроцессы, 
				ТочкаМаршрутаВложенныйПроцесс, 
				Истина, 
				Выборка.ДочернийПроцесс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания ФоноваяМаршрутизацияКомплексныхПроцессов
//
Процедура ФоноваяМаршрутизацияКомплексныхПроцессов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если Не ИспользоватьФоновуюМаршрутизацию() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзелОбмена = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьМаршрутизацииКомплексныхПроцессов.КомплексныйПроцесс,
		|	ОчередьМаршрутизацииКомплексныхПроцессов.ЗавершившеесяДействие,
		|	ОчередьМаршрутизацииКомплексныхПроцессов.КоличествоПопытокОбработки
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьМаршрутизацииКомплексныхПроцессов КАК ОчередьМаршрутизацииКомплексныхПроцессов
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ОчередьМаршрутизацииКомплексныхПроцессов.КомплексныйПроцесс
		|ГДЕ
		|	ОчередьМаршрутизацииКомплексныхПроцессов.КоличествоПопытокОбработки < 3
		|	И ДанныеБизнесПроцессов.УзелОбмена = &ЭтотУзелОбмена
		|	И ДанныеБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьМаршрутизацииКомплексныхПроцессов.МоментВремени";
		
	Запрос.УстановитьПараметр("ЭтотУзелОбмена", ЭтотУзелОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.КомплексныйПроцесс);
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			КомплексныйПроцессОбъект = Выборка.КомплексныйПроцесс.ПолучитьОбъект();
			
			АвторКомплексногоПроцесса =
				РаботаСБизнесПроцессами.АвторПроцессаЗадачи(КомплексныйПроцессОбъект);
			
			// Проверка прав участников процесса на предметы
			МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(
				КомплексныйПроцессОбъект, АвторКомплексногоПроцесса);
			
			Если ЗначениеЗаполнено(КомплексныйПроцессОбъект.Схема) Тогда
				КомплексныйПроцессОбъект.ПродолжитьВыполнениеПроцессаПоСхеме(Выборка.ЗавершившеесяДействие);
			Иначе
				
				НовыеПроцессы = Новый Массив;
				
				КомплексныйПроцессОбъект.СтартоватьНовыеДействия(
					НовыеПроцессы, 
					БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс, 
					Истина, 
					Выборка.ЗавершившеесяДействие);
				
			КонецЕсли;
			
			РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.УдалитьПроцесс(
				Выборка.КомплексныйПроцесс, Выборка.ЗавершившеесяДействие, Истина);
			
			РазблокироватьДанныеДляРедактирования(Выборка.КомплексныйПроцесс);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если Выборка.КоличествоПопытокОбработки = 2 Тогда
				
				ТекстУведомления = НСтр(
					"ru = 'При фоновой маршрутизации процесса ""%1"" произошла ошибка:
					|%2';
					|en = 'During backgound routing of process ""%1"" occurred an error:
					|%2'");
				
				ТекстУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстУведомления,
					Выборка.КомплексныйПроцесс,
					ОписаниеОшибки);
				
				АвторКомплексногоПроцесса = 
					РаботаСБизнесПроцессами.АвторПроцессаЗадачи(Выборка.КомплексныйПроцесс);
				
				РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
					ТекстУведомления,
					АвторКомплексногоПроцесса,
					Выборка.КомплексныйПроцесс);
					
			КонецЕсли;
			
			РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.
				ДобавитьИнформациюОНеудачнойОбработкеПроцесса(Выборка.КомплексныйПроцесс,
				Выборка.ЗавершившеесяДействие,
				ОписаниеОшибки);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет порядок сортировки последователей этапа комплексного процесса/шаблона.
//
// Рекурсивная процедура. Предназначена для вызова из ОбновитьПорядокСортировкиЭтапов.
//
// Параметры:
//  Объект - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//           БизнесПроцессОбъект.КомплексныйПроцесс - объект комплексного процесса или шаблона.
//  ИдентификаторЭтапа - УникальныйИдентификатор - идентификатор этапа.
//  ПорядковыйНомерЭтапа - Число - порядковый номер этапа.
//  КэшСтрокЭтапов - Соответсвие - кэш строк табличной части Этапы.
//
Процедура ОбновитьПорядокСортировкиПоследователейЭтапа(
	Объект, ИдентификаторЭтапа, ПорядковыйНомерЭтапа, КэшСтрокЭтапов)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторПредшественника", ИдентификаторЭтапа);
	
	Последователи = Объект.ПредшественникиЭтапов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из Последователи Цикл
		
		ЭтапПоследователь = КэшСтрокЭтапов.Получить(СтрокаТаблицы.ИдентификаторПоследователя);
		
		Если ЗначениеЗаполнено(ЭтапПоследователь.ПорядокСортировки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядковыйНомерЭтапа = ПорядковыйНомерЭтапа + 1;
		
		ЭтапПоследователь.ПорядокСортировки = ПорядковыйНомерЭтапа;
		
		ОбновитьПорядокСортировкиПоследователейЭтапа(
			Объект,
			ЭтапПоследователь.ИдентификаторЭтапа,
			ПорядковыйНомерЭтапа,
			КэшСтрокЭтапов);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбновитьПредметыПоНастроенномуДействию(Форма, Шаблон, Предметы, ИдентификаторДействия)
	
	ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Шаблон);
	ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПроцессСсылка.Метаданные().ПолноеИмя());
	ДоступныеРоли = Менеджер.ПолучитьДоступныеРолиПредметов();
	Если ДоступныеРоли.Найти(Перечисления.РолиПредметов.Заполняемый) = Неопределено Тогда
		ДоступноЗаполнение = Ложь;
	Иначе
		ДоступноЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предметы) Тогда
		ПредметыШаблона = Предметы;
	Иначе
		ПредметыШаблона = Мультипредметность.ПолучитьПредметыШаблона(Шаблон);
	КонецЕсли;
	
	ШаблоныЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из Форма.Объект.Этапы Цикл
		ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
	КонецЦикла;
	
	Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
		Если Не ЗначениеЗаполнено(СтрокаПредмета.ИсходноеИмяПредмета)
			Или СтрокаПредмета.ИсходноеИмяПредмета = СтрокаПредмета.ИмяПредмета Тогда
			
			Если Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета)).Количество() = 0 Тогда
				НоваяСтрока = Неопределено;
				МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Форма, Форма.Объект, СтрокаПредмета, НоваяСтрока);
				СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета",СтрокаПредмета.ИмяПредмета));
				Для Каждого Строка Из СтрокиКУдалению Цикл
					Форма.Объект.ПредметыЗадач.Удалить(Строка);
				КонецЦикла;                                                                              
				МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(НоваяСтрока);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПредмета.ИсходноеИмяПредмета) И СтрокаПредмета.ИсходноеИмяПредмета <> СтрокаПредмета.ИмяПредмета Тогда
			СтрокиПредметаДляИзменения = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИсходноеИмяПредмета));
			Если СтрокиПредметаДляИзменения.Количество() > 0 Тогда
				СтрокиДубли = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета));
				Если СтрокиДубли.Количество() > 0 Тогда
					Форма.Объект.Предметы.Удалить(СтрокиПредметаДляИзменения[0]); 
					УдаляемыеСтроки = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИсходноеИмяПредмета));
					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						Форма.Объект.ПредметыЗадач.Удалить(УдаляемаяСтрока);
					КонецЦикла;
					МультипредметностьВызовСервера.УдалитьПредметИзШаблоновПроцесса(Форма.Объект.Ссылка, ШаблоныЭтапов, СтрокаПредмета.ИсходноеИмяПредмета);
				Иначе
					Если ЗначениеЗаполнено(СтрокиПредметаДляИзменения[0].Предмет) Тогда
						ИсходныйПредмет = СтрокиПредметаДляИзменения[0].Предмет;
					Иначе
						ИсходныйПредмет = Неопределено;
					КонецЕсли;
					МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Форма, Форма.Объект, СтрокаПредмета, СтрокиПредметаДляИзменения[0]);
					Если ЗначениеЗаполнено(ИсходныйПредмет) Тогда
						СтрокиПредметаДляИзменения[0].Предмет = ИсходныйПредмет;
						МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(СтрокиПредметаДляИзменения[0], Форма.Объект.ПредметыЗадач, Истина);
					Иначе
						МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(СтрокиПредметаДляИзменения[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПредметыЗадачШаблона = Мультипредметность.ПолучитьПредметыЗадачШаблона(Шаблон);
	СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ИдентификаторДействия));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	
	Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Шаблон) Тогда
		Если Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса",
			ИдентификаторДействия, Шаблон)).Количество() = 0 Тогда
			НоваяСтрока = Форма.ДействияПроцесса.Добавить();
			НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
			НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
			НоваяСтрока.ТочкаМаршрута = Неопределено;
			НоваяСтрока.ДоступноЗаполнение = Ложь;
		КонецЕсли;
		// Перезаполним строки предметов задач в соответствие с данными этапа
		Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
			СтрокиПредмета = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",СтрокаПредмета.ИмяПредмета));
			Если СтрокиПредмета.Количество() > 0 Тогда
				НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
				НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
				НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
				НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
			КонецЕсли;
		КонецЦикла;
	Иначе
			
		Для Каждого ДействиеПроцесса Из ДействияПроцесса Цикл
			Если Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ТочкаМаршрута", 
				ИдентификаторДействия, Шаблон, ДействиеПроцесса)).Количество() = 0 Тогда
				НоваяСтрока = Форма.ДействияПроцесса.Добавить();
				НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
				НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
				НоваяСтрока.ТочкаМаршрута = ДействиеПроцесса;
				НоваяСтрока.ДоступноЗаполнение = ДоступноЗаполнение;
			КонецЕсли;
			
			// Перезаполним строки предметов задач в соответствие с данными этапа
			Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
				СтрокиЭтапаШаблона = ПредметыЗадачШаблона.НайтиСтроки(Новый Структура(
					"ИмяПредмета, ТочкаМаршрута", СтрокаПредмета.ИмяПредмета, ДействиеПроцесса));
				Если СтрокиЭтапаШаблона.Количество() > 0 Тогда
					НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
					НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
					НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
					НоваяСтрока.ТочкаМаршрута = ДействиеПроцесса;
					НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
					НоваяСтрока.ОбязательноеЗаполнение = СтрокиЭтапаШаблона[0].ОбязательноеЗаполнение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Добавим предметы для точки маршртура "Контролировать"
	Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
		Отбор = Новый Структура("ИмяПредмета, ТочкаМаршрута", СтрокаПредмета.ИмяПредмета, 
			БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер);
			
		Если Форма.Объект.ПредметыЗадач.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
			НоваяСтрока.ТочкаМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер;
			НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
		КонецЕсли;
	КонецЦикла;
	
	// Обновим шаблоны этапов по таблице предметы задач
	ИтоговыеРолиПредметовЭтапов = Новый Массив;
	
	Для Каждого СтрокаПредмет Из Форма.Объект.Предметы Цикл
		
		СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
		ЗаполнитьЗначенияСвойств(СтруктураПредмета, СтрокаПредмет);
		
		РолиПредметовЭтапов = Новый Массив;
		
		МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
			Форма.Объект.Ссылка,
			ШаблоныЭтапов,
			Форма.Объект.ПредметыЗадач,
			СтруктураПредмета,
			РолиПредметовЭтапов);
		
		ИтоговыеРолиПредметовЭтапов = РолиПредметовЭтапов;
		
	КонецЦикла;
	
	Форма.РолиПредметовЭтапов.Очистить();
	Для Каждого Строка Из ИтоговыеРолиПредметовЭтапов Цикл
		НоваяСтрока = Форма.РолиПредметовЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступностьПоШаблону(Форма) 
	
	Шаблон = Форма.Объект.ИсходныйШаблон;
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДокументы = Новый Массив;
	Для Каждого Предмет Из Форма.Предметы Цикл
		Если ТипыДокументов.Найти(ТипЗнч(Предмет.Значение)) <> Неопределено Тогда
			ПредметыДокументы.Добавить(Предмет.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредметыДокументы.Количество() = 0 Тогда    
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВсеДанные.ВидДокумента,
		|	ВсеДанные.Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВнутренниеДокументы.ВидДокумента КАК ВидДокумента,
		|		ВнутренниеДокументы.Организация КАК Организация
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВходящиеДокументы.ВидДокумента,
		|		ВходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|	ГДЕ
		|		ВходящиеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсходящиеДокументы.ВидДокумента,
		|		ИсходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|	ГДЕ
		|		ИсходящиеДокументы.Ссылка В(&ПредметыДокументы)) КАК ВсеДанные";
	
	Запрос.УстановитьПараметр("ПредметыДокументы", ПредметыДокументы);
	
	Результат = Запрос.Выполнить();
	
	ВидыДокументов = Результат.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	
	МассивВидовДокументаПолный = Новый Массив;
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		
		МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
		Для Каждого ВидДокументаМассива Из МассивВидовДокумента Цикл
			МассивВидовДокументаПолный.Добавить(ВидДокументаМассива);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидыДокументов)
	|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон";
	
	Запрос.УстановитьПараметр("ВидыДокументов", МассивВидовДокументаПолный);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Организации = Новый Массив;
			Организации.Добавить(Справочники.Организации.ПустаяСсылка());
			Запрос.УстановитьПараметр("Организации", Организации);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьЗапрещеноИзменение = Ложь;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗапрещеноИзменение Тогда 
			ЕстьЗапрещеноИзменение = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьЗапрещеноИзменение Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции	

Функция ЭтапЕстьСредиПредшественников(Знач Объект, ИдентификаторЭтапа)
	
	Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПредшественника = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
		
КонецФункции

// Удаляет записи обо всех предшественниках этапа процесса или шаблона процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого удаляются записи о предшественниках
Процедура УдалитьВсехПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа)
	
	Пока УЭтапаЕстьПредшественники(Объект, ИдентификаторЭтапа) Цикл
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Объект.ПредшественникиЭтапов.Удалить(Предшественник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что у этапа есть предшественники
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - уникальный идентификатор этапа в объекте
// Возвращает:
//	Истина, если у этапа есть предшественники
//	Ложь, если у этапа нет предшественников
Функция УЭтапаЕстьПредшественники(Знач Объект, ИдентификаторЭтапа)
	
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СхемаПроцесса

#Область КэшНастроекУсловий
// Работа с кэшем настроек условий (реквизит формы КэшНастроекУсловий).

// Инициализирует кэш настроек условий (реквизит формы КэшНастроекУсловий).
// Реквизит КэшНастроекУсловий является структурой, в которой ключ соответствует имени
// элемента условия в схеме процесс, а значение соответствует настройке условия (НастройкиКомпоновкиДанных).
//
// Параметры:
//  Форма - УправляемаяФорма - карточка комплексного процесса/шаблона.
//
Процедура ИнициализироватьКэшНастроекУсловий(Форма)
	
	Если Форма.КэшНастроекУсловий = Неопределено Тогда
		Форма.КэшНастроекУсловий = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит формы КэшНастроекУсловий из таблицы СхемаКомплексногоПроцесса.ПараметрыУсловий.
//
// Параметры:
//  ПараметрыУсловий – ТабличнаяЧасть - таблица СхемаКомплексногоПроцесса.ПараметрыУсловий
//   * Имя - Строка - имя элемента схемы.
//   * НастройкиУсловий - ХранилищеЗначений - настройки условия в хранилище значений.
//  КэшНастроекУсловий - Структура - см. ИнициализироватьКэшНастроекУсловий
//
Процедура ЗаполнитьКэшНастроекУсловийИзПараметров(ПараметрыУсловий, КэшНастроекУсловий)
	
	КэшНастроекУсловий.Очистить();
	
	Для Каждого СтрокаУсловие Из ПараметрыУсловий Цикл
		КэшНастроекУсловий.Вставить(СтрокаУсловие.Имя, СтрокаУсловие.НастройкиУсловия.Получить());
	КонецЦикла;
	
КонецПроцедуры

// Переносит настройки условий из реквизита формы КэшНастроекУсловий в
// таблицу СхемаКомплексногоПроцесса.ПараметрыУсловий.
//
// Параметры:
//  ПараметрыУсловий – ТабличнаяЧасть - таблица СхемаКомплексногоПроцесса.ПараметрыУсловий
//   * Имя - Строка - имя элемента схемы.
//   * НастройкиУсловий - ХранилищеЗначений - настройки условия в хранилище значений.
//  КэшНастроекУсловий - Структура - см. ИнициализироватьКэшНастроекУсловий
//
Процедура ПоместитьНастройкиУсловийИзКэшаВПараметры(ПараметрыУсловий, КэшНастроекУсловий)
	
	Для Каждого СтрокаУсловие Из ПараметрыУсловий Цикл
		СтрокаУсловие.НастройкиУсловия = Новый ХранилищеЗначения(КэшНастроекУсловий[СтрокаУсловие.Имя]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
