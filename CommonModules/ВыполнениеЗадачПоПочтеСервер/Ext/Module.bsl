////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для работы механизма выполнения задач по почте
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания ВыполнениеЗадачПоПочте.
// Предназначен для обработки писем пришедших в качестве ответов на уведомление
// о новой задаче на адрес системной учетной записи.
// 
Процедура ВыполнитьЗадачиПоПочте() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыполнениеЗадачПоПочте);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ОчиститьРегистрОтУстаревшихЗаписей();
	
	Попытка
		ПараметрыЗагрузкиПочтовыхСообщений = Неопределено;
		Сообщения = ПолучитьВходящиеСообщенияСистемнойУчетнойЗаписи(
						ПараметрыЗагрузкиПочтовыхСообщений);
		
		Если ТипЗнч(Сообщения) <> Тип("Массив") Тогда
			Возврат;
		КонецЕсли;
		
		МассивСообщенийКУдалению = Новый Массив;
		
		Для каждого Сообщение Из Сообщения Цикл
			Если ОбработатьСообщениеОВыполненииЗадачи(Сообщение) Тогда
				МассивСообщенийКУдалению.Добавить(Сообщение.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСообщенийКУдалению.Количество() > 0 Тогда
			УдалитьСообщенияОВыполненииЗадач(
				МассивСообщенийКУдалению, ПараметрыЗагрузкиПочтовыхСообщений);
		КонецЕсли;
		
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ВыполнениеЗадачПоПочте'; en = 'ВыполнениеЗадачПоПочте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует текст уведомления по задаче, текст включает всю необходимую информацию
// для возможности выполнения задачи при ответе на уведомление.
//
Функция СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
			ЗадачаСсылка,
			ПолучательУведомления) Экспорт
	
	// Получение файлов предметов задачи
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачаСсылка);
	
	ДоступныеПредметы = Новый Массив;
	
	Для каждого Предмет Из Предметы Цикл
		Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
				Предмет, ПолучательУведомления).Чтение Тогда
				
			ДоступныеПредметы.Добавить(Предмет);
		КонецЕсли;
	КонецЦикла;
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	ФайлыНеПопавшиеВУведомления = " ";
	
	Если ЗначениеЗаполнено(ДоступныеПредметы) Тогда
		МаксимальныйРазмерВложений = 
			Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Получить() * 1024 * 1024;
			
		ТекущийРазмерВложений = 0;
		
		ТаблицаФайлов = ПолучитьФайлыПредметов(ДоступныеПредметы);
		
		Если ЗначениеЗаполнено(ТаблицаФайлов) Тогда
			Для каждого СтрокаФайла из ТаблицаФайлов Цикл
				ТекущийРазмерВложений = ТекущийРазмерВложений + СтрокаФайла.ТекущаяВерсияРазмер;
			
				Если ТекущийРазмерВложений > МаксимальныйРазмерВложений Тогда
					Если ЗначениеЗаполнено(ФайлыНеПопавшиеВУведомления) Тогда
						ФайлыНеПопавшиеВУведомления = ФайлыНеПопавшиеВУведомления + Символы.ПС;
					КонецЕсли;
					ФайлыНеПопавшиеВУведомления = ФайлыНеПопавшиеВУведомления + " - " 
						+ СтрокаФайла.ИмяФайла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлыНеПопавшиеВУведомления) Тогда
			ФайлыНеПопавшиеВУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
					|Общий размер вложений превысил допустимый максимум.
					|Список файлов, которые не попали в уведомление:
					|%1
					|';
					|en = 'Total attachment size is too big. 
					|Some files are not present in the notification: 
					|%1'", КодЯзыкаПолучателя),
				ФайлыНеПопавшиеВУведомления);
		КонецЕсли;
	КонецЕсли;
	
	СсылкиОтветов = ПолучитьОтветыВВидеСсылокMailto(ЗадачаСсылка, ПолучательУведомления);
	
	Если СсылкиОтветов.КоличествоОтветов > 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на одну из ссылок.'; en = 'Do not reply to this email. To execute the task click one of the links in this email.'",
				КодЯзыкаПолучателя);
	ИначеЕсли СсылкиОтветов.КоличествоОтветов = 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на ссылку.'; en = 'Do not reply to this email. To execute the task click the link in this email.'",
			КодЯзыкаПолучателя);
	КонецЕсли;
	
	ПредставлениеЗадачи = РаботаСУведомлениямиПереопределяемый.СформироватьПредставлениеЗадачи(
		ЗадачаСсылка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		ПолучательУведомления,
		"");
		
	ПерваяСтрокаПредставления = СтрПолучитьСтроку(ПредставлениеЗадачи,1);
	
	ОстальнаяЧастьПредставления = СтрЗаменить(
		ПредставлениеЗадачи,
		ПерваяСтрокаПредставления + "
			|",
		"");
	
	Результат = "%1
		|%2
		|
		|%3
		|
		|%4
		|
		|<B>%5</B>";
		
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Результат,
		ПерваяСтрокаПредставления,
		ОстальнаяЧастьПредставления,
		ФайлыНеПопавшиеВУведомления,
		Комментарий,
		СсылкиОтветов.Текст);
		
	Возврат Результат;
		
КонецФункции

// Формирует тему уведомления по задаче.
//
Функция СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
		ЗадачаСсылка,
		ПолучательУведомления) Экспорт
		
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1: %2", НСтр("ru = 'Задача'; en = 'Task'", КодЯзыкаПолучателя), ЗадачаСсылка);
	
	Возврат Результат;
	
КонецФункции

// Формирует файлы уведомления по задаче.
//
Функция СформироватьФайлыУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
			ЗадачаСсылка,
			ПолучательУведомления) Экспорт
	
	Файлы = Новый Массив;
	
	// Получение файлов предметов задачи
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачаСсылка);
	
	ДоступныеПредметы = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
				Предмет, ПолучательУведомления).Чтение Тогда
				
			ДоступныеПредметы.Добавить(Предмет);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДоступныеПредметы) Тогда
		
		МаксимальныйРазмерВложений = 
			Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Получить() * 1024 * 1024;
		
		ТекущийРазмерВложений = 0;
		
		ТаблицаФайлов = ПолучитьФайлыПредметов(ДоступныеПредметы);
		
		Если ЗначениеЗаполнено(ТаблицаФайлов) Тогда
			Для Каждого СтрокаФайла из ТаблицаФайлов Цикл
				ТекущийРазмерВложений = ТекущийРазмерВложений + СтрокаФайла.ТекущаяВерсияРазмер;
				Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
					СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
					ЗаполнитьЗначенияСвойств(СтруктураФайла, СтрокаФайла);
					Файлы.Добавить(СтруктураФайла);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Возвращает структуру с настройками по умолчанию механизма выполнения задач по почте
//
// Возвращаемое значение:
//  Структура:
//   МаксимальныйРазмерВложенийВУведомленииНовойЗадачи - Число
//   СрокХраненияПротоколовВыполненияЗадачПоПочте - Число
//
Функция ПолучитьНастройкиПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МаксимальныйРазмерВложенийВУведомленииНовойЗадачи", 10);
	Результат.Вставить("СрокХраненияПротоколовВыполненияЗадачПоПочте", 7);
	
	Возврат Результат;
	
КонецФункции

// Формирует уведомление и помещает его в очередь на отправку по задаче
Функция СформироватьУведомлениеПоЗадаче(Задача) Экспорт
	
	Результат = Ложь;
	
	Если ПроверитьДоступностьФормированияУведомлений(Задача) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
			Задача,
			Задача);
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет доступность исполнения процедуры СформироватьУведомлениеПоЗадаче
Функция ПроверитьДоступностьФормированияУведомлений(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача,
		"Выполнена, ТекущийИсполнитель");
		
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.ТекущийИсполнитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь = &РольПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")";
		
	Запрос.УстановитьПараметр("РольПользователь", РеквизитыЗадачи.ТекущийИсполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УИсполнителяВключеноВыполнениеЗадачПоПочте = Ложь;
	
	Пока Выборка.Следующий() Цикл
		УИсполнителяВключеноВыполнениеЗадачПоПочте = 
			РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				Выборка.Исполнитель,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			
		Если УИсполнителяВключеноВыполнениеЗадачПоПочте Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УИсполнителяВключеноВыполнениеЗадачПоПочте;
	
КонецФункции

// Формирует текст ссылок MailTo для ответов на задачу.
//
Функция ПолучитьОтветыВВидеСсылокMailto(ЗадачаСсылка, Получатель) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("КоличествоОтветов", 0);
	
	ВариантыОтветовДляВыполненияЗадачи = ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка);
	
	ВозможныеВариантыВыполнения = ВариантыОтветовДляВыполненияЗадачи.СписокВариантовОтветов;
	
	Результат.КоличествоОтветов = ВозможныеВариантыВыполнения.Количество();
		
	АдресЭлектроннойПочты =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
			"АдресЭлектроннойПочты");
			
	УИЗадачи = Строка(ЗадачаСсылка.УникальныйИдентификатор());
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(Получатель);
	
	Разделитель = "";
	
	Для Каждого ВариантОтвета Из ВозможныеВариантыВыполнения Цикл
		
		РезультатОтвета = ПолучитьЧисловойИдентификаторВариантаОтвета(ВариантОтвета.Значение);
		
		КомментарийКИсполнению = "";
		
		Если ВариантыОтветовДляВыполненияЗадачи.ИспользоватьКомментарий Тогда
			КомментарийКИсполнению = 
				НСтр("ru = '1. Приложите файлы, если нужно.
				|2. Впишите ваш комментарий по выполнению задачи.
				|
				|Комментарий:';
				|en = '1. Attach files if needed.
				|2. Enter your comment for the task.
				|
				|Comment:'", КодЯзыкаПолучателя);
		КонецЕсли;
		
		ТекстОтвета = НСтр("ru = '%1
			|
			|________________________________________________
			|Это служебная информация, необходимая для выполнения задачи.
			|Не удаляйте и не изменяйте ее!
			|
			|*Задача:%2
			|*Ответ:%3
			|
			|';
			|en = '%1
			|
			|________________________________________________
			|This is a service infromation needed to execute the task.
			|Please do not delete or change it!
			|
			|*Task:%2
			|*Reply:%3'", КодЯзыкаПолучателя);
			
		ТекстОтвета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОтвета,
			КомментарийКИсполнению,
			УИЗадачи,
			РезультатОтвета);
			
		СсылкаНаОтвет = ВстроеннаяПочтаКлиентСервер.СформироватьСсылкуMailto(
			АдресЭлектроннойПочты,,,
			ВариантОтвета.Представление + ": " + Строка(ЗадачаСсылка),
			ТекстОтвета,
			ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"),
			ВариантОтвета.Представление + "...");
			
		Результат.Текст = Результат.Текст + Разделитель + СсылкаНаОтвет;
		
		Разделитель = " / ";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив входящих сообщений пришедших на адрес системной учетной записи.
//
Функция ПолучитьВходящиеСообщенияСистемнойУчетнойЗаписи(ПараметрыЗагрузкиПочтовыхСообщений)
	
	ПараметрыЗагрузкиПочтовыхСообщений = 
		ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений();
		
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
		"НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
		"УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	ДоступныеПрофили = 
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили;
		
	ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено;
	
	СистемнаяУчетнаяЗапись = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Для каждого СтруктураПрофиля Из ДоступныеПрофили Цикл
		Если СтруктураПрофиля.Профиль = СистемнаяУчетнаяЗапись Тогда
			
			ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = 
				СтруктураПрофиля;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЛегкаяПочтаСервер.ПолучитьИнтернетПочта(ПараметрыЗагрузкиПочтовыхСообщений);
	КонецЕсли;
	
КонецФункции

// Удаляет сообщение из почтового ящика системной учетной записи
//
Процедура УдалитьСообщенияОВыполненииЗадач(
			СерверныеИдентификаторыСообщений, ПараметрыЗагрузкиПочтовыхСообщений)
	
	Пароль = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Пароль;
	
	Результат = ЛегкаяПочтаСервер.УдалитьСообщенияИнтернетПочта(
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
		Пароль,
		СерверныеИдентификаторыСообщений);
	
КонецПроцедуры

// Обрабатывает сообщение о выполнении задачи.
// При успешной обработке возвращает истину. В случае возникновения ошибки
// во время обработки возвращает ложь. 
// В тексте сообщения производит поиск ответа для выполнения задачи.
// При обнаружении ответа, выполняет задачу с указанным ответом.
// Результат обработки записывает в регистр сведений ПротоколВыполненияЗадачПоПочте.
//
// Параметры:
//  Сообщение - Структура - структура сообщения.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьСообщениеОВыполненииЗадачи(Сообщение)
	
	НачатьТранзакцию();
	
	ЗадачаСсылка = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
	
	Попытка
		
		ПараметрыОтправителя = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Сообщение.Отправитель);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ НайденныеПользователиПоАдресу
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.АдресЭП ПОДОБНО ""%"" + &АдресЭП + ""%""
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СпособыУведомленияПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
			|ГДЕ
			|	СпособыУведомленияПользователей.ДанныеСпособа ПОДОБНО ""%"" + &АдресЭП + ""%""
			|	И СпособыУведомленияПользователей.СпособУведомления = ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.ПоПочте)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НайденныеПользователиПоАдресу.Пользователь
			|ИЗ
			|	НайденныеПользователиПоАдресу КАК НайденныеПользователиПоАдресу
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО НайденныеПользователиПоАдресу.Пользователь = Пользователи.Ссылка
			|ГДЕ
			|	Пользователи.ПометкаУдаления = ЛОЖЬ
			|	И Пользователи.Служебный = ЛОЖЬ
			|	И Пользователи.Недействителен = ЛОЖЬ";
			
		Запрос.УстановитьПараметр("АдресЭП", ПараметрыОтправителя.Адрес);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИсполнительЗадачиПоЭлАдресу = Выборка.Пользователь;
			КодЯзыкаИсполнителя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ИсполнительЗадачиПоЭлАдресу);
		Иначе
			ИсполнительЗадачиПоЭлАдресу = Неопределено;
			КодЯзыкаИсполнителя = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		КонецЕсли;
		
		ИдентификаторыЗадачи = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(
			Сообщение,
			НСтр( "ru = '*Задача:'; en = '*Task:'", КодЯзыкаИсполнителя),
			36);
			
		ИдентификаторыОтвета = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(
			Сообщение,
			НСтр( "ru = '*Ответ:'; en = '*Reply:'", КодЯзыкаИсполнителя),
			1);
		
		Если ИдентификаторыЗадачи.Количество() = 0 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторЗадачи,,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторЗадачи,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
			
		Если ИдентификаторыЗадачи.Количество() > 1 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовЗадачи,,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовЗадачи,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ЗадачаПоИдентификатору = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ИдентификаторыЗадачи[0]));
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ЗадачаПоИдентификатору);
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена,,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ЗадачаСсылка = ЗадачаПоИдентификатору;
		
		Если ИдентификаторыОтвета.Количество() = 0 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если ИдентификаторыОтвета.Количество() > 1 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовОтвета,,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ВариантВыполненияЗадачи =
			ПолучитьВариантВыполнениеЗадачиПоПоЧисловомуИдентификатору(ИдентификаторыОтвета[0]);
		
		Если ВариантВыполненияЗадачи = Неопределено Тогда
					
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.РезультатВыполненияЗадачиПоПочте.ОтветНеНайден,,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ОтветНеНайден,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
			
		Если НЕ ПроверитьСоответсвиеРезультатВыполненияИЗадачи(
			ЗадачаСсылка,
			ВариантВыполненияЗадачи) Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачеНеСоответствуетЗначениеОтвета,,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачеНеСоответствуетЗначениеОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если Выборка.Количество() > 1 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей,,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		ИначеЕсли Выборка.Количество() = 0 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи,,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка,
			"ТекущийИсполнитель,
			|Выполнена,
			|СостояниеБизнесПроцесса,
			|ПометкаУдаления");
		
		ИсполнительЗадачи = РеквизитыЗадачи.ТекущийИсполнитель;
		ФактическийИсполнительЗадачи = Справочники.Пользователи.ПустаяСсылка();
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь = &РольПользователь
			|	И ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ИсполнительЗадачи
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")";
			
		Запрос.УстановитьПараметр("РольПользователь", РеквизитыЗадачи.ТекущийИсполнитель);
		
		Запрос.УстановитьПараметр("ИсполнительЗадачи", ИсполнительЗадачиПоЭлАдресу);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
				
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыЗадачи.ТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ФактическийИсполнительЗадач = Константы.ФактическийИсполнительЗадач.Получить();
			Если ФактическийИсполнительЗадач = Перечисления.ФактическийИсполнительЗадач.ТекущийПользователь
				Или ФактическийИсполнительЗадач = Перечисления.ФактическийИсполнительЗадач.ВыборПриИсполненииЗадачи Тогда
				
				ФактическийИсполнительЗадачи = ИсполнительЗадачиПоЭлАдресу;
			КонецЕсли;
			
		Иначе
			
			ИсполнительЗадачи = ИсполнительЗадачиПоЭлАдресу;
			
		КонецЕсли;
		
		Если РеквизитыЗадачи.Выполнена = Истина
			Или РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
			Или РеквизитыЗадачи.ПометкаУдаления Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеАктивна,,
				ЗадачаСсылка);
			
		Иначе
			
			ТекстОкончанияКомментария = НСтр("ru = '________________________________________________'; en = '________________________________________________'",
				КодЯзыкаИсполнителя);
			НачальнаяПозицияКомментария = 1;
			КонечнаяПозицияКомментария = Найти(Сообщение.Текст, ТекстОкончанияКомментария);
			КоличествоСимволов = КонечнаяПозицияКомментария - НачальнаяПозицияКомментария;
			КомментарийВСообщении = Сред(Сообщение.Текст, НачальнаяПозицияКомментария, КоличествоСимволов);
			
			КомментарийВСообщении = СокрЛП(КомментарийВСообщении);
			
			КомментарийВСообщении = КомментарийВСообщении + ?(ЗначениеЗаполнено(КомментарийВСообщении), "
				|", "") + НСтр("ru = 'Задача исполнена по почте.'; en = 'Task has been executed via email.'",
				КодЯзыкаИсполнителя);
			
			Параметры = Новый Структура;
			Параметры.Вставить("ВариантВыполнения", ВариантВыполненияЗадачи);
			Параметры.Вставить("Комментарий", КомментарийВСообщении);
			Параметры.Вставить("ИсполнительЗадачиПоПочте", ИсполнительЗадачи);
			
			Если ЗначениеЗаполнено(ФактическийИсполнительЗадачи) Тогда
				Параметры.Вставить("ФактическийИсполнительЗадачи", ФактическийИсполнительЗадачи);
			КонецЕсли;
			
			ОбработатьВложенияВСообщении(ЗадачаСсылка, Сообщение);
			
			РезультатПроверки = БизнесПроцессыИЗадачиСервер.ПроверитьУсловияЗапретаВыполнения(ЗадачаСсылка, Параметры);
			Если РезультатПроверки.ЗапретВыполнения Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					РезультатПроверки.ТекстПредупреждения,
					ЗадачаСсылка);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя,
					РезультатПроверки.ТекстПредупреждения);
				
				ЗафиксироватьТранзакцию();
				
				Возврат Истина;
				
			КонецЕсли;
			
			ВыполнениеЗадачСервер.ВыполнитьЗадачуПоПочте(ЗадачаСсылка, Параметры);
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, 
				Перечисления.РезультатВыполненияЗадачиПоПочте.Выполнена,
				Строка(ВариантВыполненияЗадачи) + ". " + КомментарийВСообщении,
				ЗадачаСсылка);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Возврат Истина;
		
	Исключение
		ОтменитьТранзакцию();
		РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение, 
			Перечисления.РезультатВыполненияЗадачиПоПочте.Ошибка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЗадачаСсылка);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьВариантВыполнениеЗадачиПоПоЧисловомуИдентификатору(НомерРезультата)
	
	Если НомерРезультата = "1" Тогда
		ВариантВыполненияЗадачи =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	ИначеЕсли НомерРезультата = "2" Тогда
		ВариантВыполненияЗадачи =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	ИначеЕсли НомерРезультата = "3" Тогда
		ВариантВыполненияЗадачи =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
	Иначе
		ВариантВыполненияЗадачи = Неопределено;
	КонецЕсли;
	
	Возврат ВариантВыполненияЗадачи;
	
КонецФункции

Функция ПолучитьЧисловойИдентификаторВариантаОтвета(ВариантОтвета)
	
	РезультатОтвета = "0";
	
	Если ВариантОтвета =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
		
		РезультатОтвета = "1";
		
	ИначеЕсли ВариантОтвета =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
		
		РезультатОтвета = "2";
		
	ИначеЕсли ВариантОтвета =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
		
		РезультатОтвета = "3";
		
	КонецЕсли;
	
	Возврат РезультатОтвета;
	
КонецФункции

Функция ПроверитьСоответсвиеРезультатВыполненияИЗадачи(ЗадачаСсылка, РезультатОтвета)
	
	Результат = Истина;
	
	ВозможныеВариантыВыполнения = ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка);
	
	Если ВозможныеВариантыВыполнения.СписокВариантовОтветов.НайтиПоЗначению(
			РезультатОтвета) = Неопределено Тогда
			
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаСсылка, "БизнесПроцесс, ТочкаМаршрута");
		
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
		СтруктураРеквизитов.БизнесПроцесс);
	
	ВозможныеВариантыВыполнения =
		МенеджерПроцесса.ВариантыОтветовДляВыполненияЗадачиПоПочте(
			ЗадачаСсылка,
			СтруктураРеквизитов.БизнесПроцесс,
			СтруктураРеквизитов.ТочкаМаршрута);
		
	Возврат ВозможныеВариантыВыполнения;
	
КонецФункции

// Возвращает строку в тексте сообщения после строки ЗаголовокПоля.
// 
Функция ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, ЗаголовокПоля, ДлинаСтроки)
	
	Результат = Новый Массив;
	
	ТекстСообщения = Сообщение.Текст;
	
	НомерВхождения = 1;
	
	Пока НомерВхождения > 0 Цикл
		
		Позиция = СтрНайти(ТекстСообщения, ЗаголовокПоля,,, НомерВхождения);
		
		Если Позиция <> 0 Тогда
			Результат.Добавить(Сред(ТекстСообщения, Позиция + СтрДлина(ЗаголовокПоля), ДлинаСтроки));
			НомерВхождения = НомерВхождения + 1;
		Иначе
			НомерВхождения = -1; // Прекращение поиска - выход из цикла.
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает вложения в сообщении.
// Если вложения в сообщении отличаются от файлов предмета задачи, 
// то прикрепляет вложения к бизнес-процессу задачи как вспомогательные 
// предметы.
//
Процедура ОбработатьВложенияВСообщении(ЗадачаСсылка, Сообщение)
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Вложения) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ЗадачаСсылка, "БизнесПроцесс");
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(Вложение.ИмяФайла);
		
		ВремяИзменения = ТекущаяДатаСеанса();
		ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(
		ВремяИзменения);
		
		Комментарий = "Файл получен при исполнении задачи по почте.
			|Задача: " + ЗадачаСсылка + "
			|Адрес отправителя: " + Сообщение.Отправитель;
			
		// Создадим карточку Файла в БД
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = Вложение.Адрес;
		СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
		СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
		СведенияОФайле.Размер = Вложение.Размер;
		СведенияОФайле.ВремяИзменения = ВремяИзменения;
		СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		СведенияОФайле.Комментарий = Комментарий;
		
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(РеквизитыЗадачи.БизнесПроцесс, СведенияОФайле);
			
		ТекущиеИменаПредметов =
		МультипредметностьВызовСервера.ПолучитьМассивИменПредметовПоСсылкеНаПроцесс(
		РеквизитыЗадачи.БизнесПроцесс);
		ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
		ФайлСсылка, ТекущиеИменаПредметов);
		
		Мультипредметность.ЗаписатьПредметБизнесПроцесса(
		РеквизитыЗадачи.БизнесПроцесс, 
		ИмяПредмета,
		ФайлСсылка);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтправитьУведомлениеОбОшибке(Сообщение,
	РезультатВыполненияЗадачиПоПочте,
	Задача,
	КодЯзыка,
	Описание = "")
	
	Если ТипЗнч(РезультатВыполненияЗадачиПоПочте) <>
		Тип("ПеречислениеСсылка.РезультатВыполненияЗадачиПоПочте") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Сообщение) <> Тип("Структура")
		ИЛИ НЕ Сообщение.Свойство("Отправитель") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;
	КонецЕсли;
	
	ТемаУведомления = НСтр("ru = 'Ошибка исполнения задачи по почте: '; en = 'Execution of tasks by email error: '", КодЯзыка);
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ТемаУведомления = ТемаУведомления + Строка(Задача);
	КонецЕсли;
	
	Если РезультатВыполненияЗадачиПоПочте =
		Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Не найдена задача в базе данных.
			|Обратитесь к автору задачи или администратору.';
			|en = 'Error processing task execution email. 
			|Task is not found in the infobase 
			|Please contact your administrator.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей
		ИЛИ РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|По вашему адресу не удалось определить исполнителя задачи.
			|Обратитесь к администратору.';
			|en = 'Error processing task execution email. 
			|Failed to define task performer by your email address. 
			|Please contact your administrator.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель Тогда
			
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Для задачи определен другой исполнитель.
			|Обратитесь к автору задачи.';
			|en = 'Error processing task execution email. 
			|Another performer is defined for the task. 
			|Please contact your administrator.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения Тогда
			
		ТекстУведомления =
			НСтр("ru = 'Письмо об исполнении задачи не было обработано.'; en = 'Task execution email has not been processed.'", КодЯзыка)
			+ Символы.ПС
			+ Описание;
			
	Иначе
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Возможно в вашем письме (ответе) отсутствовал текст служебной информации
			|или ответное письмо было сформировано не по ссылкам в уведомлении.
			|Попробуйте исполнить задачу еще раз.';
			|en = 'Error processing task execution email. 
			|Service information is missing or reply was not formed by mailto links. 
			|Try to perform task once again.'", КодЯзыка);
		
	КонецЕсли;
	
	ПоляЗаголовка = Новый Массив;
	
	Для Каждого Заголовок ИЗ Сообщение.ПоляЗаголовка Цикл
		Если Заголовок.Имя = "Message-Id" Тогда
			ЗаголовокInReplyTo = Почта.СформироватьСтруктуруПоляЗаголовка(
				"In-Reply-To",
				Заголовок.Значение,
				СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
			ПоляЗаголовка.Добавить(ЗаголовокInReplyTo);
		КонецЕсли;
	КонецЦикла;
	
	ОтправитьУведомление(
		ТемаУведомления,
		ТекстУведомления,
		Сообщение.Отправитель,
		Новый Массив,
		ПоляЗаголовка);
	
	
КонецПроцедуры

Процедура ОтправитьУведомление(ТемаУведомления,
	ТекстУведомления,
	Получатель,
	МассивВложений,
	ПоляЗаголовка)
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаУведомления);
	ПараметрыПисьма.Вставить("Текст", ТекстУведомления);
	ПараметрыПисьма.Вставить("Кому", Получатель);
	ПараметрыПисьма.Вставить("Вложения", МассивВложений);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст);
	ПараметрыПисьма.Вставить("ПоляЗаголовка", ПоляЗаголовка);
	
	ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма);
	
КонецПроцедуры

// Возвращает таблицу значений с файлами указанных предметов
//
Функция ПолучитьФайлыПредметов(Предметы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение КАК ИмяФайла,
		|	Файлы.ТекущаяВерсияРазмер,
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В(&ВладелецФайла)
		|	И НЕ Файлы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение,
		|	Файлы.ТекущаяВерсияРазмер,
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&ВладелецФайла)
		|	И НЕ Файлы.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВладелецФайла", Предметы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции


#КонецОбласти
