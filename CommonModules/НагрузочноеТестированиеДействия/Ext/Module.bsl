////////////////////////////////////////////////////////////////////////////////
// НагрузочноеТестированиеДействия:
//  Содержит код действий, из которых формируются сценарии тестирования.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму.
// 
// ПараметрыШага:
//  * ИмяФормы - Строка - Имя открываемой формы.
//    ПараметрыФормы - Структура - Параметры открываемой формы.
//    ЗакрытьОткрытуюФорму - Булево - Принудительное закрытие ранее открытой формы (по умолчанию Ложь).
//
Функция Действие_ОткрытьФорму() Экспорт
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ИмяФормы") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах шага не указано имя открываемой формы.'; en = 'Opened form name is not specified in step parameters.'"));
	КонецЕсли;
	
	Форма = НайтиФормуПоИмени(ПараметрыШага.ИмяФормы);
	Если Форма <> Неопределено Тогда
		Если ПараметрыШага.Свойство("ЗакрытьОткрытуюФорму")
			И ПараметрыШага.ЗакрытьОткрытуюФорму Тогда
			Форма.Закрыть();
		Иначе
			Возврат ПродолжитьВыполнениеСценария();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ПараметрыШага.Свойство("Параметры") И ТипЗнч(ПараметрыШага.Параметры) = Тип("Структура") Тогда
		ПараметрыФормы = ПараметрыШага.Параметры;
	КонецЕсли;
	
	ОткрытьФорму(ПараметрыШага.ИмяФормы, ПараметрыФормы);
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Выполняет команду открытой формы.
//
// ПараметрыШага:
//  * ИмяФормы - Строка - Имя ранее открытой формы.
//    Реквизиты - Соответствие - Соответствия реквизитов формы и их значений.
//        Реквизиты будут заполнены перед вызовом команды.
//  * ИмяКоманды - Строка - Имя экспортной функции формы с префиксом "ТЦ".
//        При передаче имени команды префикс "ТЦ" указывать не нужно.
//
Функция Действие_ВыполнитьКомандуФормы() Экспорт
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ИмяФормы") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах шага не указано имя открытой формы.'; en = 'Open form name is not specified in step parameters.'"));
	КонецЕсли;
	
	Форма = НайтиФормуПоИмени(ПараметрыШага.ИмяФормы);
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			СтрШаблон(НСтр("ru = 'Форма %1 не найдена среди открытых.'; en = 'Form %1 not found among the opened ones.'"), ПараметрыШага.ИмяФормы));
	КонецЕсли;
	
	Если ПараметрыШага.Свойство("Реквизиты") Тогда
		ЗаполнитьРеквизитыФормы(Форма, ПараметрыШага.Реквизиты);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ИмяКоманды") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах не указано имя выполняемой команды формы.'; en = 'Executed command name is not specified in step parameters.'"));
	КонецЕсли;
	
	Результат = Вычислить("Форма.ТЦ" + ПараметрыШага.ИмяКоманды + "()");
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Заполняет реквизиты формы и объекта формы.
//
// ПараметрыШага:
//  * ИмяФормы - Строка - Имя формы, в которой необходимо заполнить реквизиты.
//    Реквизиты - Соответствие - Соответствия реквизитов формы / объекта формы и их значений.
//        Для реквизитов объекта формы необходимо в имени реквизита добавлять префикс "Объект.".
//        По умолчанию заполненные значения реквизитов не перезаписываются.
//        Для перезаписи значения реквизита необходимо к имени реквизита добавлять постфикс "*".
//    ПерезаписьРеквизитов - Булево - Перезаписывает уже заполненные реквизиты формы (по умолчанию Ложь).
//
Функция Действие_ЗаполнитьРеквизитыФормы() Экспорт
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ИмяФормы") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах шага не указано имя открытой формы.'; en = 'Open form name is not specified in step parameters.'"));
	КонецЕсли;
	
	Форма = НайтиФормуПоИмени(ПараметрыШага.ИмяФормы);
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			СтрШаблон(НСтр("ru = 'Форма %1 не найдена среди открытых.'; en = 'Form %1 not found among the opened ones.'"), ПараметрыШага.ИмяФормы));
	КонецЕсли;
	
	Если ПараметрыШага.Свойство("Реквизиты") Тогда
		ЗаполнитьРеквизитыФормы(Форма, ПараметрыШага.Реквизиты);
	КонецЕсли;
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Закрывает форму.
// 
// ПараметрыШага:
//  * ИмяФормы - Строка - Имя закрываемой формы.
//
Функция Действие_ЗакрытьФорму() Экспорт
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ИмяФормы") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах шага не указано имя закрываемой формы.'; en = 'Closed form name is not specified in step parameters.'"));
	КонецЕсли;
	
	Форма = НайтиФормуПоИмени(ПараметрыШага.ИмяФормы);
	
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			СтрШаблон(НСтр("ru = 'Форма %1 не найдена среди открытых.'; en = 'Form %1 not found among the opened ones.'"), ПараметрыШага.ИмяФормы));
	КонецЕсли;
	
	Форма.Закрыть();
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Устанавливает курсор на папку в дереве папок списка внутренних документов.
//
// ПараметрыШага:
//    Папка - СправочникСсылка.ПапкиВнутреннихДокументов - Папка, к которой нужно перейти.
//
Функция Действие_ВыбратьПапкуВнутреннегоДокумента() Экспорт
	
	Форма = НайтиФормуПоИмени("Справочник.ВнутренниеДокументы.Форма.ФормаСпискаСПапками");
	
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'Не найдена форма списка внутренних документов.'; en = 'Not found the form of internal document list.'"));
	КонецЕсли;
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если ЗначениеЗаполнено(ПараметрыШага) 
		И ПараметрыШага.Свойство("Папка") 
		И ТипЗнч(ПараметрыШага.Папка) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		
		Форма.Элементы.Папки.ТекущаяСтрока = ПараметрыШага.Папка;
		
	КонецЕсли;
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Устанавливает курсор на шаблон в дереве шаблонов при создании внутреннего,
// входящего или исходящего документа.
//
// ПараметрыШага:
//    Шаблон - СправочникСсылка.ШаблоныВнутреннихДокументов
//             СправочникСсылка.ШаблоныВходящихДокументов
//             СправочникСсылка.ШаблоныИсходящихДокументов - Шаблон документа,
//        к которому нужно перейти.
//
Функция Действие_ВыбратьШаблонДокумента() Экспорт
	
	Форма = НайтиФормуПоИмени("ОбщаяФорма.СозданиеДокументаПоШаблону");
	
	Если Форма = Неопределено Тогда
		// Если нет шаблонов, то сразу открывается форма создания документа.
		Возврат ПродолжитьВыполнениеСценария();
	КонецЕсли;
	
	ВсеШаблоны = Новый Массив;
	
	Шаблоны = Форма.СписокШаблонов.ПолучитьЭлементы();
	Если Шаблоны[0].ЭтоГруппа Тогда
		Для Каждого Шаблон Из Шаблоны Цикл
			Если СтрНачинаетсяС(Шаблон.Представление, "Все") Тогда
				Шаблоны = Шаблон.ПолучитьЭлементы();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	ТекущаяСтрока = 0;
	
	Если ЗначениеЗаполнено(ПараметрыШага) 
		И ПараметрыШага.Свойство("Шаблон") Тогда
		
		Для Каждого Шаблон Из Шаблоны Цикл
			Если Шаблон.КомандаСсылка = ПараметрыШага.Шаблон Тогда
				ТекущаяСтрока = Шаблон.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		ИндексЭлемента = ГСЧ.СлучайноеЧисло(0, Шаблоны.Количество() - 1);
		ТекущаяСтрока = Шаблоны[ИндексЭлемента].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Форма.Элементы.СписокШаблонов.ТекущаяСтрока = ТекущаяСтрока;
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Устанавливает курсор на шаблон в дереве шаблонов в форме создания бизнес процесса.
//
// ПараметрыШага:
//    Шаблон - СправочникСсылка.Шаблоны... - Шаблон процесса, к которому нужно перейти.
//    ВыборИзРекомендованных - Булево - Выбор шаблона из рекомендованных (по умолчанию Истина).
//        Если Ложь или отсутствуют рекомендованные шаблоны, то шаблоны выбираются из Новых.
//
Функция Действие_ВыбратьШаблонБизнесПроцесса() Экспорт
	
	Форма = НайтиФормуПоИмени("ОбщаяФорма.СозданиеБизнесПроцесса");
	
	Если Форма = Неопределено Тогда
		// Если нет шаблонов, то сразу открывается форма создания документа.
		Возврат ПродолжитьВыполнениеСценария();
	КонецЕсли;
	
	РекомендованныеШаблоны = Новый Массив;
	НовыеПроцессы = Новый Массив;
	
	Шаблоны = Форма.ДеревоШаблонов.ПолучитьЭлементы();
	Для Каждого Шаблон Из Шаблоны Цикл
		// При смене имен узлов первого уровня в дереве процессов, необходимо сменить их и здесь.
		Если СтрНачинаетсяС(Шаблон.Наименование, "Рекомендованные шаблоны") Тогда
			РекомендованныеШаблоны = Шаблон.ПолучитьЭлементы();
		ИначеЕсли СтрНачинаетсяС(Шаблон.Наименование, "Новые процессы") Тогда
			НовыеПроцессы = Шаблон.ПолучитьЭлементы();
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	ВыборИзРекомендованных = (ПараметрыШага.Свойство("ВыборИзРекомендованных")
		И ПараметрыШага.ВыборИзРекомендованных
		И РекомендованныеШаблоны.Количество() > 0);
	
	Если ЗначениеЗаполнено(ПараметрыШага) 
		И ПараметрыШага.Свойство("Шаблон") 
		И ЗначениеЗаполнено(ПараметрыШага.Шаблон) Тогда
		
		Если ВыборИзРекомендованных Тогда
			Для Каждого Шаблон Из РекомендованныеШаблоны Цикл
				Если Шаблон.ШаблонСсылка = ПараметрыШага.Шаблон Тогда
					ТекущаяСтрока = Шаблон.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого Шаблон Из НовыеПроцессы Цикл
				Если Шаблон.ШаблонСсылка = ПараметрыШага.Шаблон Тогда
					ТекущаяСтрока = Шаблон.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		
		Если ВыборИзРекомендованных Тогда
			ИндексПроцесса = ГСЧ.СлучайноеЧисло(0, РекомендованныеШаблоны.Количество() - 1);
			ТекущаяСтрока = РекомендованныеШаблоны[ИндексПроцесса].ПолучитьИдентификатор();
		Иначе
			ИндексПроцесса = ГСЧ.СлучайноеЧисло(0, НовыеПроцессы.Количество() - 1);
			ТекущаяСтрока = НовыеПроцессы[ИндексПроцесса].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ДеревоШаблонов.ТекущаяСтрока = ТекущаяСтрока;
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Стартует процесс.
//
// ПараметрыШага:
//  * ИмяПроцесса - Строка - Имя процесса.
//
Функция Действие_СтартоватьПроцесс() Экспорт
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ИмяПроцесса") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах шага не указано имя процесса.'; en = 'Process name is not specified in step parameters.'"));
	КонецЕсли;
	
	ИмяФормы = СтрШаблон("БизнесПроцесс.%1.Форма.ФормаБизнесПроцесса", ПараметрыШага.ИмяПроцесса);
	Форма = НайтиФормуПоИмени(ИмяФормы);
	
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			СтрШаблон(НСтр("ru = 'Форма %1 не найдена среди открытых.'; en = 'Form %1 not found among the opened ones.'"), ИмяФормы));
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	Если ЗначениеЗаполнено(Форма.НастройкаСтарта)
		И ЗначениеЗаполнено(Форма.НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
		ПараметрыЗаписи.Вставить("ОтложенныйСтартПроцесса", Истина);
	ИначеЕсли Форма.СтартоватьФоново Тогда
		ПараметрыЗаписи.Вставить("ФоновыйСтартПроцесса", Истина);
	Иначе
		ПараметрыЗаписи.Вставить("Старт", Истина);
	КонецЕсли;
	Форма.Записать(ПараметрыЗаписи);
	Форма.Закрыть();
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Устанавливает курсор на точку маршрута в моих задачах.
//
// ПараметрыШага:
//  * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута.
//
Функция Действие_ВыбратьТочкуМаршрута() Экспорт
	
	ПараметрыШага = НагрузочноеТестированиеКлиент.ПолучитьПараметрыТекущегоШагаСценария();
	
	Если Не ЗначениеЗаполнено(ПараметрыШага) Или Не ПараметрыШага.Свойство("ТочкаМаршрута") Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'В параметрах шага не указана точка маршрута.'; en = 'Route point is not specified in step parameters.'"));
	КонецЕсли;
	
	Форма = НайтиФормуПоИмени("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне");
	
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'Не найдена форма моих задач.'; en = 'Not found the form of my tasks.'"));
	КонецЕсли;
	
	ТекущаяСтрока = -1;
	
	ТочкиМаршрута = Форма.ЗадачиМнеТочкиМаршрута;
	Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
		Если ТочкаМаршрута.ТочкаМаршрута = ПараметрыШага.ТочкаМаршрута Тогда
			ТекущаяСтрока = ТочкаМаршрута.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтрока = -1 Тогда
		Форма.Закрыть();
		Возврат ЗавершитьТекущийСценарий();
	КонецЕсли;
	
	Форма.Элементы.ЗадачиМнеТочкиМаршрута.ТекущаяСтрока = ТекущаяСтрока;
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

// Принимает первую задачу в списке моих задач к исполнению.
//
Функция Действие_ПринятьПервуюЗадачуКИсполнению() Экспорт
	
	Форма = НайтиФормуПоИмени("Задача.ЗадачаИсполнителя.Форма.ЗадачиМне");
	
	Если Форма = Неопределено Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой(
			НСтр("ru = 'Не найдена форма моих задач.'; en = 'Not found the form of my tasks.'"));
	КонецЕсли;
	
	ТекущаяЗадача = Форма.ЗадачиМнеТекущаяЗадача;
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Возврат ЗавершитьВыполнениеСценарияСОшибкой();
	КонецЕсли;
	
	ПринятаКИсполнению = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		ТекущаяЗадача, "ПринятаКИсполнению");
	Если Не ПринятаКИсполнению Тогда
		Форма.РезультатВыполнения = НСтр("ru = 'Комментарий'; en = 'Comment'");
		Форма.ТЦПринятьКИсполнению();
	КонецЕсли;
	
	Возврат ПродолжитьВыполнениеСценария();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Ищет форму среди открытых форм.
//
// Параметры:
//  ИмяФормы - Строка - Имя формы, которую необходимо найти.
// 
// Возвращаемое значение:
//  УправляемаяФорма или Неопределено - 
//
Функция НайтиФормуПоИмени(ИмяФормы)
	
	СписокОкон = ПолучитьОкна();
	
	Для Каждого ТекущееОкно Из СписокОкон Цикл
		
		Если ТекущееОкно.Содержимое.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяФорма Из ТекущееОкно.Содержимое Цикл
			Если ТекущаяФорма.ИмяФормы = ИмяФормы Тогда
				Возврат ТекущаяФорма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнет реквзиты формы и объекта формы.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, реквизиты которой необходимо заполнить.
//  Реквизиты - Соответствие - Реквизиты формы.
//
Процедура ЗаполнитьРеквизитыФормы(Форма, Реквизиты)
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		ЗначениеРеквизита = Реквизит.Значение;
		
		ЭтоРеквизитОбъекта = СтрНачинаетсяС(ИмяРеквизита, "Объект.");
		Если ЭтоРеквизитОбъекта Тогда
			ИмяРеквизита = Сред(ИмяРеквизита, 8);
		КонецЕсли;
		
		ПерезаписьЗначения = СтрЗаканчиваетсяНа(ИмяРеквизита, "*");
		Если ПерезаписьЗначения Тогда
			ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "*", "");
		КонецЕсли;
		
		Если ЭтоРеквизитОбъекта Тогда
			
			Если ЗначениеЗаполнено(Форма.Объект[ИмяРеквизита])
				И Не ПерезаписьЗначения Тогда
				
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из ЗначениеРеквизита Цикл
					НоваяСтрока = Форма.Объект[ИмяРеквизита].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				КонецЦикла;
			Иначе
				Форма.Объект[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) И Не ПерезаписьЗначения Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из ЗначениеРеквизита Цикл
					НоваяСтрока = Форма[ИмяРеквизита].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				КонецЦикла;
			Иначе
				Форма[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение успешного выполнения текущего шага сценария.
// 
// Возвращаемое значение:
//  Булево - Истина.
//
Функция ПродолжитьВыполнениеСценария()
	
	Возврат Истина;
	
КонецФункции

// Завершает выполнение текущего сценария и переходит к выполнению следующего.
// 
// Возвращаемое значение:
//  Булево - Истина.
//
Функция ЗавершитьТекущийСценарий()
	
	НТИндексТекущегоСценария = НТИндексТекущегоСценария + 1;
	Сценарий = НагрузочноеТестированиеКлиент.ПолучитьТекущийСценарий();
	НагрузочноеТестированиеКлиент.ЗапуститьВыполнениеСценария(Сценарий);
	Возврат Истина;
	
КонецФункции

// Завершает выполнение сценария с выводом ошибки.
//
// Параметры:
//  ТекстОшибки - Строка - Текст ошибки.
// 
// Возвращаемое значение:
//  Булево - Ложь.
//
Функция ЗавершитьВыполнениеСценарияСОшибкой(ТекстОшибки = Неопределено)
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
