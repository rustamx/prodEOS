
#Область ПрограммныйИнтерфейс

// Переключает вид просмотра в списках документов.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой расположен список.
//
Процедура УстановитьПараметрыСписка(Форма) Экспорт 
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	ВидПросмотра = Форма.ВидПросмотра;
	
	Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда 
		
		КлючеваяОперация = "ВнутренниеДокументыВыполнениеКомандыОтборПоПапке";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		
		Если ЗначениеЗаполнено(Элементы.Папки.ТекущаяСтрока) Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("Папка", 
				Элементы.Папки.ТекущаяСтрока);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("Папка"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов") Тогда 
		
		Если ЗначениеЗаполнено(Элементы.ВидыДокументов.ТекущаяСтрока) Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", 
				Элементы.ВидыДокументов.ТекущаяСтрока);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("ВидДокумента"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности") Тогда 
		
		Если ЗначениеЗаполнено(Элементы.ВопросыДеятельности.ТекущаяСтрока) Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("ВопросДеятельности", 
				Элементы.ВопросыДеятельности.ТекущаяСтрока);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("ВопросДеятельности"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам") Тогда 
		
		Если ЗначениеЗаполнено(Элементы.Контрагенты.ТекущаяСтрока) Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("Контрагент", 
				Элементы.Контрагенты.ТекущаяСтрока);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("Контрагент"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам") Тогда 
		
		Если ЗначениеЗаполнено(Элементы.Проекты.ТекущаяСтрока) Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("Проект", 
				Элементы.Проекты.ТекущаяСтрока);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("Проект"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;		
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда 
		
		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("НоменклатураДел", 
				ТекущиеДанные.Ссылка);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("НоменклатураДел"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда 
		
		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("Дело", 
				ТекущиеДанные.Ссылка);
		Иначе
			Параметр = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("Дело"));
			Если Параметр <> Неопределено И Параметр.Использование Тогда 
				Параметр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Выполняет обработку перехода в списках документов.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой расположен список.
//   ОбъектПерехода - СправочникСсылка.ВнутренниеДокументы, 
//					  СправочникСсылка.ВходящиеДокументы, 
//					  СправочникСсылка.ИсходящиеДокументы
//					  - объект, на который нужно спозиционироваться в списке.
//   СтандартнаяОбработка - признак стандартной обработки.
//
Процедура ОбработкаПерехода(Форма, ОбъектПерехода, СтандартнаяОбработка) Экспорт 
	
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	ВидПросмотра = Форма.ВидПросмотра;
	
	Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		Возврат;
	КонецЕсли;	
		
	СтандартнаяОбработка = Ложь;
	
	Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Форма.ТекущаяПапка = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ОбъектПерехода, "Папка");
		Элементы.Папки.ТекущаяСтрока = Форма.ТекущаяПапка;
		
		Список.Параметры.УстановитьЗначениеПараметра("Папка", 
			Элементы.Папки.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов") Тогда
		
		Форма.ТекущийВидДокумента = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ОбъектПерехода, "ВидДокумента");
		Элементы.ВидыДокументов.ТекущаяСтрока = Форма.ТекущийВидДокумента;
		
		Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", 
			Элементы.ВидыДокументов.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности") Тогда
		
		Форма.ТекущийВопросДеятельности = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ОбъектПерехода, "ВопросДеятельности");
		Элементы.ВопросыДеятельности.ТекущаяСтрока = Форма.ТекущийВопросДеятельности;
		
		Список.Параметры.УстановитьЗначениеПараметра("ВопросДеятельности", 
			Элементы.ВопросыДеятельности.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам") Тогда
		
		Форма.ТекущийПроект = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ОбъектПерехода, "Проект");
		Элементы.Проекты.ТекущаяСтрока = Форма.ТекущийПроект;
		Форма.ТолькоМоиПроекты = Ложь;
		
		Список.Параметры.УстановитьЗначениеПараметра("Проект", 
			Элементы.Проекты.ТекущаяСтрока);	
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам") Тогда
		
		Форма.ТекущийКонтрагент = РаботаСоСпискамиДокументов.ПолучитьКонтрагента(ОбъектПерехода);
			
		Элементы.Контрагенты.ТекущаяСтрока = Форма.ТекущийКонтрагент;
		Список.Параметры.УстановитьЗначениеПараметра("Контрагент", 
			Элементы.Контрагенты.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(ОбъектПерехода, 
			"НоменклатураДел, НоменклатураДел.Год, Дело, Дело.НоменклатураДел, Дело.НоменклатураДел.Год, Организация");
			
		Если ЗначениеЗаполнено(РеквизитыОбъекта.НоменклатураДел) Тогда 
			Форма.ТекущаяНоменклатураДел = РеквизитыОбъекта.НоменклатураДел;
			Форма.ГодНоменклатурыДел = РеквизитыОбъекта.НоменклатураДелГод;
		Иначе		
			Форма.ТекущаяНоменклатураДел = РеквизитыОбъекта.ДелоНоменклатураДел;
			Форма.ГодНоменклатурыДел = РеквизитыОбъекта.ДелоНоменклатураДелГод;
		КонецЕсли;	
		Форма.ОрганизацияНоменклатурыДел = РеквизитыОбъекта.Организация;
		
		Форма.ЗаполнитьДеревоНоменклатурыДел();
		
		Элементы.СписокНоменклатураДел.ТекущаяСтрока = Форма.ТекущаяНоменклатураДел;
		Список.Параметры.УстановитьЗначениеПараметра("НоменклатураДел", 
			Форма.ТекущаяНоменклатураДел);
		
		Для Каждого ЭлементДерева Из Форма.НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если Форма.ТекущаяНоменклатураДел <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(
				Форма.ТекущаяНоменклатураДел, Форма.НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				Форма.ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(ОбъектПерехода, 
			"Дело, Дело.НоменклатураДел.Год, Организация");
		
		Форма.ТекущееДелоТом = РеквизитыОбъекта.Дело;
		Форма.ГодНоменклатурыДел = РеквизитыОбъекта.ДелоНоменклатураДелГод;
		Форма.ОрганизацияНоменклатурыДел = РеквизитыОбъекта.Организация;
		
		Форма.ЗаполнитьДеревоДелТомов();
		
		Элементы.ДелаТома.ТекущаяСтрока = Форма.ТекущееДелоТом;
		Список.Параметры.УстановитьЗначениеПараметра("Дело", Форма.ТекущееДелоТом);
		
		Для Каждого ЭлементДерева Из Форма.ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если Форма.ТекущееДелоТом <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(
				Форма.ТекущееДелоТом, Форма.ДелаТома, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				Форма.ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(ОбъектПерехода);
	Элементы.Список.ТекущаяСтрока = КлючЗаписи;
	
КонецПроцедуры

// Возвращает значения заполнения при создании документа из списка
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой расположен список.
//
// Возвращаемое значение:
//   Структура - значения заполнения.
//
Функция ПолучитьЗначенияЗаполненияПоВидуПросмотра(Форма) Экспорт 
	
	Элементы = Форма.Элементы;
	ВидПросмотра = Форма.ВидПросмотра;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Если ЗначениеЗаполнено(Элементы.Папки.ТекущаяСтрока) Тогда
			ЗначенияЗаполнения.Вставить("Папка", Элементы.Папки.ТекущаяСтрока);
		КонецЕсли;
	
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов") Тогда
		
		ТекущиеДанные = Элементы.ВидыДокументов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("ВидДокумента", ТекущиеДанные.Ссылка);
		КонецЕсли;
	
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности") Тогда
	
		ТекущиеДанные = Элементы.ВопросыДеятельности.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("ВопросДеятельности", ТекущиеДанные.Ссылка);
		КонецЕсли;
	
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам") Тогда
	
		ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам") Тогда
	
		ТекущиеДанные = Элементы.Проекты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("Проект", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда
		
		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.НоменклатураДел") Тогда 
			ЗначенияЗаполнения.Вставить("НоменклатураДел", ТекущиеДанные.Ссылка);
		КонецЕсли;
	
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда
	
		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
			ЗначенияЗаполнения.Вставить("Дело", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

// Выполняет установку/снятие пометки на удаление в списках документов.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой расположен список.
//
Процедура ВыполнитьУстановкуПометкиУдаления(Форма, ИмяСписка = "Список") Экспорт
	
	Элементы = Форма.Элементы;
	
	ВыбранныеДокументы = ПолучитьВыбранныеДокументы(Элементы[ИмяСписка]);
	Если ВыбранныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//ТекущиеДанные = Элементы[ИмяСписка].ТекущиеДанные;
	ТекущиеДанные = ПолучитьДанныеТекущейСтрокиСписка(Элементы[ИмяСписка], Элементы[ИмяСписка].ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
	ТекущееПредставление = ТекущиеДанные.Наименование;
	ТекущийДокумент = ТекущиеДанные.Ссылка;
	
	Если ВыбранныеДокументы.Количество() = 1 Тогда
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'"),
				ТекущиеДанные.Наименование);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
				ТекущиеДанные.Наименование);
		КонецЕсли;
	Иначе
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с выделенных элементов (%1 шт) пометку на удаление?'; en = 'Remove the mark for deletion from selected items (%1)?'"),
				ВыбранныеДокументы.Количество());
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить выделенные элементы (%1 шт) на удаление?'; en = 'Mark selected items (%1) for deletion?'"),
				ВыбранныеДокументы.Количество());
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ВыбранныеДокументы", ВыбранныеДокументы);
	ПараметрыОбработчика.Вставить("ТекущаяПометкаУдаления", ТекущаяПометкаУдаления);
	ПараметрыОбработчика.Вставить("ТекущееПредставление", ТекущееПредставление);
	ПараметрыОбработчика.Вставить("ТекущийДокумент", ТекущийДокумент);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ИмяСписка", ИмяСписка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьДокументамПометкуУдаленияЗавершение", 
		ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Продолжает установку/снятие пометки на удаление.
//
// Параметры:
//   Результат - КодВозвратаДиалога - если Да, то устанавливаем или снимаем пометку.
//   ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для продолжения:
//     ВыбранныеДокументы - Массив - документов.
//     ТекущаяПометкаУдаления - Булево - текущий признак пометки на удаление.
//     ТекущееПредставление - Строка - представление исходного документа.
//     ТекущийДокумент - СправочникСсылка - исходный документ.
//     Форма - УправляемаяФорма - форма, в которой расположен список.
//
Процедура УстановитьДокументамПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВыбранныеДокументы = ДополнительныеПараметры.ВыбранныеДокументы;
	КоличествоДокументов = ВыбранныеДокументы.Количество();
	ТекущаяПометкаУдаления = ДополнительныеПараметры.ТекущаяПометкаУдаления;
	ТекущееПредставление = ДополнительныеПараметры.ТекущееПредставление;
	ТекущийДокумент = ДополнительныеПараметры.ТекущийДокумент;
	Форма = ДополнительныеПараметры.Форма;
	
	РаботаСоСпискамиДокументов.УстановитьДокументамПометкуУдаленияСервер(ВыбранныеДокументы,
		Не ТекущаяПометкаУдаления);
		
	Если ДополнительныеПараметры.Свойство("ИмяСписка") Тогда 
		Форма.Элементы[ДополнительныеПараметры.ИмяСписка].Обновить();
	Иначе 
		Форма.Элементы.Список.Обновить();
	КонецЕсли;
	
	Если ТекущаяПометкаУдаления Тогда
		Если КоличествоДокументов = 1 Тогда 
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Пометка на удаление снята'; en = 'Mark for deletion removed'"),
				ПолучитьНавигационнуюСсылку(ТекущийДокумент),
				ТекущееПредставление,
				БиблиотекаКартинок.Информация32);
		Иначе		
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометка на удаление успешно снята (%1).'; en = 'Mark for deletion removed (%1).'"),
				КоличествоДокументов));
		КонецЕсли;
	Иначе
		Если КоличествоДокументов = 1 Тогда 
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Пометка на удаление установлена'; en = 'Deletion mark set'"),
				ПолучитьНавигационнуюСсылку(ТекущийДокумент),
				ТекущееПредставление,
				БиблиотекаКартинок.Информация32);
		Иначе		
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометка на удаление успешно установлена (%1).'; en = 'Deletion mark set successfully (%1).'"),
				КоличествоДокументов));
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив выбранных в списке документов.
//
// Параметры:
//   Список - ЭлементыФормы - коллекция элементов управляемой формы.
//
// Возвращаемое значение:
//   Массив - выбранных значений.
//
Функция ПолучитьВыбранныеДокументы(Список) Экспорт
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ПолучитьДанныеТекущейСтрокиСписка(Список, Строка);
		Если ДанныеСтроки <> Неопределено Тогда
			ДокументСсылка = ДанныеСтроки.Ссылка;
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ДокументСсылка) Тогда
				Результат.Добавить(ДокументСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ТекущиеДанные = ПолучитьДанныеТекущейСтрокиСписка(Список, Список.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ДокументСсылка = ТекущиеДанные.Ссылка;
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ДокументСсылка) Тогда
				Результат.Добавить(ДокументСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные строки списка.
//
// Параметры:
//   Список - ЭлементыФормы - коллекция элементов управляемой формы.
//   Строка - Произвольный - идентификатор текущей строки таблицы.
//
// Возвращаемое значение:
//   ДанныеФормыСтруктура / ДанныеФормыЭлементКоллекции / ДанныеФормыЭлементДерева или Неопределено.
//
Функция ПолучитьДанныеТекущейСтрокиСписка(Список, Строка) Экспорт
		
	Если Строка = Неопределено Или ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Список.ДанныеСтроки(Строка);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
