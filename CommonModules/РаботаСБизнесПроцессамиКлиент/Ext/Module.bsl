
////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес-процессами клиент
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс_ПомощникСозданияПроцессов

// Открывает форму помощника создания основных процессов.
//
// Может быть переопределена в СрокиИсполненияПроцессовПереопределяемый.ПриОткрытииПомощникаСозданияОсновныхПроцессов
//
// Параметры:
//   ТипыПроцессов - Массив, Строка - типы процессов, которые следует отображать в помощнике создания процессов.
//                                    Наименования типов соответствуют наименованию процессов в конфигураторе.
//                                    Если необходимо отображать только один тип процессов, тогда его можно передать
//                                    в виде строки в данный параметр, если несколько - тогда массив строк.
//   Предмет - Массив или СправочникСсылка.ВнутренниеДокументы и т.д. - ссылка или массив ссылок на предметы, на основании
//                                                                      которых следует создать процесс.
//   ФормаВладелец - УправляемаяФорма - форма объекта или списка с предметами.
//   ТипФормы - Строка - тип формы владельца, принимает значения "ФормаСписка" и "ФормаОбъекта".
//
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(
	ТипыПроцессов, Предмет, ФормаВладелец, ТипФормы = "ФормаОбъекта") Экспорт
	
	СтандартнаяОбработка = Истина;
	РаботаСБизнесПроцессамиКлиентПереопределяемый.ПриОткрытииПомощникаСозданияОсновныхПроцессов(
		ТипыПроцессов, Предмет, ФормаВладелец, ТипФормы, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТипПредмета = ТипЗнч(Предмет);
	ТипМассив = Тип("Массив");
	
	Если Предмет = Неопределено
		Или (ТипПредмета = ТипМассив И Предмет.Количество() = 0) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'; en = 'Cannot execute the command for the specified object!'"));
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТипыПроцессов", ТипыПроцессов);
	ДопПараметры.Вставить("Предмет", Предмет);
	ДопПараметры.Вставить("ФормаВладелец", ФормаВладелец);
	ДопПараметры.Вставить("ТипФормы", ТипФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПомощникСозданияОсновныхПроцессовЗавершение", ЭтотОбъект, ДопПараметры);
	
	Если ТипФормы = "ФормаОбъекта" И Не ЗначениеЗаполнено(Предмет) Тогда // Выполняется для новых объектов.
		
		НименованиеДействия = "";
			
		Если ТипПредмета = Тип("СправочникСсылка.Пользователи") Тогда
			Если ТипыПроцессов = "Исполнение" Тогда
				НименованиеДействия = НСтр("ru = '""Исполнение""'; en = '""Performance""'");
			ИначеЕсли ТипыПроцессов = "Ознакомление" Тогда
				НименованиеДействия = НСтр("ru = '""Ознакомление""'; en = '""Examination""'");
			КонецЕсли;
		Иначе
			Если ТипЗнч(ТипыПроцессов) = ТипМассив
				Или ТипыПроцессов = "ОбработкаВнутреннегоДокумента"
				Или ТипыПроцессов = "ОбработкаВходящегоДокумента"
				Или ТипыПроцессов = "ОбработкаИсходящегоДокумента" Тогда
				
				НименованиеДействия = НСтр("ru = '""В обработку""'; en = '""For processing""'");
			ИначеЕсли ТипыПроцессов = "Исполнение" Тогда
				НименованиеДействия = НСтр("ru = '""На исполнение""'; en = '""For performance""'");
			ИначеЕсли ТипыПроцессов = "Ознакомление" Тогда
				НименованиеДействия = НСтр("ru = '""На ознакомление""'; en = '""For examination""'");
			ИначеЕсли ТипыПроцессов = "Рассмотрение" Тогда
				НименованиеДействия = НСтр("ru = '""На рассмотрение""'; en = '""For review""'");
			ИначеЕсли ТипыПроцессов = "Регистрация" Тогда
				НименованиеДействия = НСтр("ru = '""На регистрацию""'; en = '""For registration""'");
			ИначеЕсли ТипыПроцессов = "Согласование" Тогда
				НименованиеДействия = НСтр("ru = '""На согласование""'; en = '""For approval""'");
			ИначеЕсли ТипыПроцессов = "Утверждение" Тогда
				НименованиеДействия = НСтр("ru = '""На утверждение""'; en = '""For confirmation""'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия %1 возможно только после записи данных.
			|Данные будут записаны.';
			|en = 'The data is not saved yet.
			|Executing action %1 is possible only after the data is saved.
			|The data will be saved.'");
			
		ТекстВопроса = СтрШаблон(ТекстВопроса, НименованиеДействия);
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'ОК'; en = 'OK'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Отмена'; en = 'Cancel'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса);
		
		Возврат;
	КонецЕсли;
	
	// Запись объекта, если он существует и был изменен в карточке.
	Если ТипФормы = "ФормаОбъекта"
		И ТипПредмета <> ТипМассив
		И ЗначениеЗаполнено(Предмет)
		И ФормаВладелец.Модифицированность Тогда
		
		Если Не ФормаВладелец.Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	
КонецПроцедуры

// Завершение ОткрытьПомощникСозданияОсновныхПроцессов.
//
// Может быть переопределена в СрокиИсполненияПроцессовПереопределяемый.ПриОткрытииПомощникаСозданияОсновныхПроцессовЗавершение
//
Процедура ОткрытьПомощникСозданияОсновныхПроцессовЗавершение(Результат, ДопПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	РаботаСБизнесПроцессамиКлиентПереопределяемый.ПриОткрытииПомощникаСозданияОсновныхПроцессовЗавершение(
		Результат, ДопПараметры, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТипыПроцессов = ДопПараметры.ТипыПроцессов;
	Предмет = ДопПараметры.Предмет;
	ФормаВладелец = ДопПараметры.ФормаВладелец;
	ТипФормы = ДопПараметры.ТипФормы;
	
	ТипМассив = Тип("Массив");
	ТипПредмета = ТипЗнч(Предмет);
	
	Если Результат = Истина
		И ТипФормы = "ФормаОбъекта"
		И ТипПредмета <> ТипМассив Тогда
		
		Если Не ФормаВладелец.ПроверитьЗаполнение()
			Или Не ФормаВладелец.Записать() Тогда
			
			Возврат;
		КонецЕсли;
		
		Предмет = ФормаВладелец.Объект.Ссылка;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Предметы = Предмет;
	Если Не ТипПредмета = Тип("Массив")
		И Не ТипПредмета = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Предметы = Новый Массив;
		Предметы.Добавить(Предмет);
	КонецЕсли;
	ПараметрыФормы.Вставить("Предметы", Предметы);
	
	ПараметрыФормы.Вставить("ТипыПроцессов", ТипыПроцессов);
	
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ФормаПроцесса

// Выполняет обработку оповещения в форме бизнес процесса.
// процедура предназначена для вызова из форм объектов бизнес-процессов
//
Процедура ОбработкаОповещенияФормаБизнесПроцесса(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	Если ИмяСобытия = "БизнесПроцессИзменен" И Источник <> Форма Тогда
		Если Параметр = Форма.Объект.Ссылка
			ИЛИ (ТипЗнч(Параметр) = Тип("Массив")
				И Параметр.Найти(Форма.Объект.Ссылка) <> Неопределено) Тогда
			
			Попытка
				Форма.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(Истина);
			Исключение
				// У формы может и не быть процедуры ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса.
				Форма.Прочитать();
			КонецПопытки;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СтартПроцессаПослеВопроса"
		И Параметр.ИдентификаторФормы = Форма.УникальныйИдентификатор Тогда
		
		Если Параметр.ПараметрыЗаписиПроцесса.Свойство(
			"ИзменениеОтложенногоПроцесса") Тогда
			
			Если Форма.Записать(Параметр.ПараметрыЗаписиПроцесса)
				И Параметр.ПараметрыЗаписиПроцесса.Свойство(
					"ЗакрытьФормуПослеЗаписи") Тогда
				
				Форма.Закрыть();
			КонецЕсли;
			
		ИначеЕсли Параметр.ПараметрыЗаписиПроцесса.Свойство(
			"ИзменениеСостоянияПроцесса") Тогда
			
			Если Форма.Записать(Параметр.ПараметрыЗаписиПроцесса) Тогда
			
				ПоказатьОповещениеПользователя(
					Параметр.ПараметрыЗаписиПроцесса.
						СообщениеПриИзмененииСостоянияПроцесса,
					ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
					Строка(Форма.Объект.Ссылка),
					БиблиотекаКартинок.Информация32);
					ОповеститьОбИзменении(Форма.Объект.Ссылка);
				ОповеститьОбИзменении(Форма.Объект.Ссылка);
				
			КонецЕсли;
			
		Иначе
			Если Форма.Записать(Параметр.ПараметрыЗаписиПроцесса)
				И Параметр.ПараметрыЗаписиПроцесса.Свойство(
					"ЗакрытьФормуПослеЗаписи") Тогда
				
				Форма.Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтартПроцессовКлиент.ДекорацияОписаниеОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки, Форма);
	
КонецПроцедуры

// Показывает оповещение после записи процесса из карточки.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса.
//
Процедура ПоказатьОповещениеПослеЗаписиПроцесса(Форма, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт
		Или ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса") И ПараметрыЗаписи.ФоновыйСтартПроцесса
		Или ПараметрыЗаписи.Свойство("ОтложенныйСтартПроцесса") И ПараметрыЗаписи.ОтложенныйСтартПроцесса Тогда
		
		ТекстОпопвещения = НСтр("ru = 'Старт'; en = 'Start'");
	Иначе
		ТекстОпопвещения = НСтр("ru = 'Изменение:'; en = 'Changed:'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		ТекстОпопвещения,
		ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
		Строка(Форма.Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_КоличествоИтераций

// Обработчик ПриИзменении поля КоличествоИтераций в карточке процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//
Процедура КоличествоИтерацийПриИзменении(Форма) Экспорт
	
	Форма.ОбновитьСрокиИсполненияОтложенно("КоличествоИтераций");
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_УчастникПроцесса

// Обработчик ПриИзменении поля участника процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ОписаниеОповещения - описание оповещения, которое следует выполнить в этой процедуры.
//
Процедура УчастникПриИзменении(Форма, ОписаниеОповещения = Неопределено) Экспорт
	
	Попытка
		Форма.ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	Исключение
	КонецПопытки;
	
	Форма.Модифицированность = Истина;
	
	Если ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриИзменении поля участника со сроком исполнения процесса/шаблона.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//
Процедура УчастникСоСрокомИсполненияПриИзменении(Форма, Участник) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("Участник", Участник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьСтрокиИсполненияПриИзмененииУчастника", ЭтотОбъект, ДопПараметры);
	
	УчастникПриИзменении(Форма, ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры УчастникСоСрокомИсполненияПриИзменении
Процедура ОбновитьСтрокиИсполненияПриИзмененииУчастника(Результат , ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	Участник = ДопПараметры.Участник;
	
	Форма.ОбновитьСрокиИсполненияОтложенно(Участник);
	
КонецПроцедуры

// Обработчик НачалоВыбора поля участника процесса/шаблона.
//
// Параметры:
//  Элемент - ПолеФормы - поле участника в карточке процесса/шаблона.
//  ВыбранноеЗначение - СправочникСсылка.Пользователи,
//                      СправочникСсылка.ПолныеРоли,
//                      Строка - выбранный участник.
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//  ОписаниеОповещения - описание оповещения, которое следует выполнить после этого обработчика.
//
Процедура УчастникНачалоВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма,
	Участник = "", ОписаниеОповещения = Неопределено) Экспорт
	
	Попытка
		ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	Исключение
		ЭтоШаблон = Ложь;
	КонецПопытки;
	
	Если ЭтоШаблон Тогда
		РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаДляШаблонаПроцесса(
			Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма, Участник, ОписаниеОповещения);
	Иначе
		РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаПроцесса(
			Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма, Участник, ОписаниеОповещения);
	КонецЕсли;
		
КонецПроцедуры

// Обработчик НачалоВыбора поля участника со сроком исполнения процесса/шаблона.
//
// Параметры:
//  Элемент - ПолеФормы - поле участника в карточке процесса/шаблона.
//  ВыбранноеЗначение - СправочникСсылка.Пользователи,
//                      СправочникСсылка.ПолныеРоли,
//                      Строка - выбранный участник.
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//
Процедура УчастникСоСрокомИсполненияНачалоВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма,
	Участник = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("Участник", Участник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВыбораУчастникСоСрокомИсполнения", ЭтотОбъект, ДопПараметры);
		
	УчастникНачалоВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма, Участник, ОписаниеОповещения);
		
КонецПроцедуры

// Продолжение процедуры УчастникСоСрокомИсполненияНачалоВыбора.
Процедура ЗавершениеВыбораУчастникСоСрокомИсполнения(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	Участник = ДопПараметры.Участник;
	СтандартнаяОбработка = Ложь;
	
	УчастникОбработкаВыбора(СтандартнаяОбработка);
	
	Форма.ОбновитьСрокиИсполненияОтложенно(Участник);
	
КонецПроцедуры

// Обработчик Очистка поля участника процесса/шаблона.
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки очистки.
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//
Процедура УчастникОчистка(СтандартнаяОбработка, Форма, Участник) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма.Объект[Участник] = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
КонецПроцедуры

// Обработчик Очистка поля участника со сроком исполнения процесса/шаблона.
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки очистки.
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//
Процедура УчастникСоСрокомИсполненияОчистка(СтандартнаяОбработка, Форма, Участник) Экспорт
	
	УчастникОчистка(СтандартнаяОбработка, Форма, Участник);
	
	Форма.ОбновитьСрокиИсполненияОтложенно(Участник);
	
КонецПроцедуры

// Обработчик Очистка поля участника процесса/шаблона.
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки открытия.
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//
Процедура УчастникОткрытие(СтандартнаяОбработка, Форма, Участник) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Форма.Объект[Участник]) Тогда
		ПоказатьЗначение(, Форма.Объект[Участник]);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ОбработкаВыбора поля участника процесса/шаблона.
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки выбора.
//
Процедура УчастникОбработкаВыбора(СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Истина;
	
КонецПроцедуры

// Обработчик АвтоПодбор поля участника процесса/шаблона.
//
// Параметры:
//  Текст - Строка - Строка текста, введенная в поле
//  ДанныеВыбора - СписокЗначений - В этот список следует поместить данные для выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки автоподбора.
//
Процедура УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ОкончаниеВводаТекста поля участника процесса/шаблона.
//
// Параметры:
//  Текст - Строка - Строка текста, введенная в поле
//  ДанныеВыбора - СписокЗначений - В этот список следует поместить данные для выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки автоподбора.
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  Участник - строка - наименование реквизита участника в процессе (Например, Исполнитель, Проверяющий, Автор).
//
Процедура УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Форма, Участник) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	Иначе
		Форма.Объект[Участник] = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТаблицаИсполнители

// Вызывает диалог подбора исполнителей для процесса Исполнения
// с последующим помщением выбранных исполнителей в процесс.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы.
//
Процедура ПодобратьИсполнителей(Форма, ЭлементТаблица, РеквизитТаблица) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ЭлементТаблица", ЭлементТаблица);
	ДопПараметры.Вставить("РеквизитТаблица", РеквизитТаблица);
	
	ОписаниеОповещенияОбработкиВыбора = Новый ОписаниеОповещения(
		"ЗавершитьПодборИсполнителейДляПроцессов", ЭтотОбъект, ДопПараметры);
	
	ЭтоШаблонПроцесса = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Если ЭтоШаблонПроцесса Тогда
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляШаблоновПроцессов(
			Форма, ОписаниеОповещенияОбработкиВыбора);
	Иначе
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляПроцессов(
			Форма, РеквизитТаблица, ОписаниеОповещенияОбработкиВыбора);
	КонецЕсли;
	
КонецПроцедуры

// см. ПодобратьИсполнителей
Процедура ЗавершитьПодборИсполнителейДляПроцессов(
	ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ЭлементТаблица = ДопПараметры.ЭлементТаблица;
	РеквизитТаблица = ДопПараметры.РеквизитТаблица;
	
	КоличествоСтрок = РеквизитТаблица.Количество();
	
	ИспользоватьДатуИВремяВСрокахЗадач = Форма.ИспользоватьДатуИВремяВСрокахЗадач;
	
	// удаление пропавших строк
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = РеквизитТаблица[КоличествоСтрок - Инд];
		
		УдалитьИсполнителя = (ВыбранныеИсполнители.Найти(Строка.Исполнитель) = Неопределено);
		
		Если УдалитьИсполнителя Тогда
			РеквизитТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ИндексИзмененнойСтроки = РеквизитТаблица.Количество();
	
	// добавление новых строк
	Для Каждого ВыбранныйАдресат Из ВыбранныеИсполнители Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", ВыбранныйАдресат);
		
		НайденныеСтроки = РеквизитТаблица.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрокаИсполнитель = РеквизитТаблица.Добавить();
			НоваяСтрокаИсполнитель.Исполнитель = ВыбранныйАдресат;
			
			СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокВНовойСтрокеТаблицыИсполнители(
				НоваяСтрокаИсполнитель,
				РеквизитТаблица,
				Неопределено,
				ИспользоватьДатуИВремяВСрокахЗадач);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Проставляет порядок исполнения у исполнителей в зависимости от выбранного варианта исполнения
//
// Параметры:
//   Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//   ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач
//   ПредыдущийВариантИсполнения -  ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - предыдущий вариант исполнения задач
//   ТаблицаИсполнители - ДанныеФормыКоллекция - таблици исполнители в форме
//   ИмяРеквизитаПорядокИсполнения - Строка - Имя реквизита ПорядокИсполнения в таблице исполнителей.
//
Процедура ПриИзмененииВариантаИсполнения(Форма,
	ВариантИсполнения,
	ПредыдущийВариантИсполнения,
	ТаблицаИсполнители,
	ИмяРеквизитаПорядокИсполнения = "ПорядокИсполнения") Экспорт
	
	Если ВариантИсполнения = ПредыдущийВариантИсполнения Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаИсполнители.Количество() = 0 Тогда
		ПредыдущийВариантИсполнения = ВариантИсполнения;
		Возврат;
	КонецЕсли;
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	ВариантыПорядкаВыполненияЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
	
	Если ВариантИсполнения = ВариантыМаршуртизацииЗадач.Смешанно Тогда
		Для Каждого Строка Из ТаблицаИсполнители Цикл
			Если ПредыдущийВариантИсполнения = ВариантыМаршуртизацииЗадач.Последовательно Тогда
				Строка[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
			ИначеЕсли ПредыдущийВариантИсполнения = ВариантыМаршуртизацииЗадач.Параллельно Тогда
				Строка[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ВместеСПредыдущим;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВариантИсполнения = ВариантыМаршуртизацииЗадач.Параллельно Тогда
		Для Каждого Строка Из ТаблицаИсполнители Цикл
			Строка[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ВместеСПредыдущим;
		КонецЦикла;
	ИначеЕсли ВариантИсполнения = ВариантыМаршуртизацииЗадач.Последовательно Тогда
		Для Каждого Строка Из ТаблицаИсполнители Цикл
			Строка[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
		КонецЦикла;
	КонецЕсли;
	
	ПредыдущийВариантИсполнения = ВариантИсполнения;
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ТаблицаИсполнители);
	
	ИндексПервойСтроки = 0;
	Если ТаблицаИсполнители[0].Свойство("Ответственный")
		И ТаблицаИсполнители[0].Ответственный Тогда
		
		ИндексПервойСтроки = 1;
	КонецЕсли;
	
	СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
		ТаблицаИсполнители, ТаблицаИсполнители[ИндексПервойСтроки], ВариантИсполнения);
	
	Форма.ЗаполнитьПредставлениеСроковИсполнения();
	
	Форма.ОбновитьСрокиИсполненияОтложенно("ВариантИсполнения");
	
КонецПроцедуры

// Обработчик события выбора таблицы исполнителей
Процедура ИсполнителиВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ИсполнителиОписаниеУсловия") <> Неопределено
		И Поле = Форма.Элементы.ИсполнителиОписаниеУсловия Тогда
		
		ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Форма.Объект);
		
		МультипредметностьКлиент.УстановкаУсловияМаршрутизации(
			ИменаПредметов, Элемент, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки таблицы исполнителей
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблицей Исполнители.
//  ЭлементПредставлениеСрока - Полеформы - элемент представление срока исполнения в таблице Исполнители.
//  ДоступностьПоШаблону - Булево - принимает Истину, если процесс не ограничен соответствующей настройкой
//                                  доступности в шаблоне.
//  ВестиУчетПереносаСроков - Булево - значение настройки ведения учета переноса срока.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Процедура ИсполнителиПриАктивизацииСтроки(
	Форма,
	ЭлементИсполнители,
	ЭлементПредставлениеСрока,
	ДоступностьПоШаблону = Неопределено,
	ВестиУчетПереносаСроков = Неопределено,
	ЗаявкаНаПереносСрока = Неопределено) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДоступности = 
		СрокиИсполненияПроцессовКлиентСервер.ПараметрыДоступностиЭлементаУправления();
	ПараметрыДоступности.ДоступностьПоШаблону = ДоступностьПоШаблону;
	ПараметрыДоступности.ВестиУчетПереносаСроков = ВестиУчетПереносаСроков;
	ПараметрыДоступности.ЗаявкаНаПереносСрока = ЗаявкаНаПереносСрока;
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		Форма,
		ЭлементПредставлениеСрока,
		ТекущиеДанные.СрокИсполненияПредставление,
		ПараметрыДоступности);
	
КонецПроцедуры

// Обработчик события начала редактирования таблицы исполнителей
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  НоваяСтрока - Булево - Признак новой строки в таблице ЭлементИсполнители
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//  ВариантМаршрутизацииЗадач - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач
//  ИмяРеквизитаПорядокИсполнения - Строка - имя реквизита ПорядокИсполнения в таблице Исполнители.
//
Процедура ИсполнителиПриНачалеРедактирования(
	Форма,
	НоваяСтрока,
	ЭлементИсполнители,
	РеквизитИсполнители,
	ВариантМаршрутизацииЗадач = Неопределено,
	ИмяРеквизитаПорядокИсполнения = Неопределено) Экспорт
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
		Если ЗначениеЗаполнено(ИмяРеквизитаПорядокИсполнения) Тогда
			
			ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
			ВариантыПорядкаВыполненияЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
			
			Если ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Смешанно Тогда
				ИндексСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
				Если ИндексСтроки > 0 Тогда
					ДанныеПредыдущейСтроки = РеквизитИсполнители[ИндексСтроки - 1];
					ТекущиеДанные[ИмяРеквизитаПорядокИсполнения] = ДанныеПредыдущейСтроки[ИмяРеквизитаПорядокИсполнения];
				Иначе
					ТекущиеДанные[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
				КонецЕсли;
			ИначеЕсли ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Последовательно Тогда
				ТекущиеДанные[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
			Иначе
				ТекущиеДанные[ИмяРеквизитаПорядокИсполнения] = ВариантыПорядкаВыполненияЗадач.ВместеСПредыдущим;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма.Элементы.Найти("ИсполнителиОписаниеУсловия") <> Неопределено Тогда
			ТекущиеДанные.ОписаниеУсловия = МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
				ТекущиеДанные.ИмяПредметаУсловия, ТекущиеДанные.Условие);
		КонецЕсли;
		
		СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокВНовойСтрокеТаблицыИсполнители(
			ТекущиеДанные,
			РеквизитИсполнители,
			ВариантМаршрутизацииЗадач,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		Если ЗначениеЗаполнено(ИмяРеквизитаПорядокИсполнения) Тогда
			РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
			ОбновитьДоступностьКомандПеремещения(Форма, ЭлементИсполнители, РеквизитИсполнители);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при окончании редактирования в таблице исполнителей
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  НоваяСтрока - Булево - Признак новой строки в таблице ЭлементИсполнители
//  ОтменаРедактирования - Булево - Признак отмены рекдактирования строки в таблице ЭлементИсполнители.
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//
Процедура ИсполнителиПриОкончанииРедактирования(
	Форма, НоваяСтрока, ОтменаРедактирования, ЭлементИсполнители, РеквизитИсполнители) Экспорт
	
	ВыполнитьОбновлениеСроков = Ложь;
	ИндексИзмененнойСтроки = РеквизитИсполнители.Количество();
	
	Если ОтменаРедактирования Тогда
		ВыполнитьОбновлениеСроков = Истина;
	ИначеЕсли НоваяСтрока Тогда
		
		ВариантыУстановкиСрокаИсполнения = 
			СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
			
		ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
		
		Если ТекущиеДанные.ВариантУстановкиСрокаИсполнения = 
			ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок
				И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения) Тогда
			
			ВыполнитьОбновлениеСроков = Истина;
		ИначеЕсли ТекущиеДанные.ВариантУстановкиСрокаИсполнения = 
			ВариантыУстановкиСрокаИсполнения.ТочныйСрок
				И (ТекущиеДанные.СрокИсполненияДни = 0
					Или ТекущиеДанные.СрокИсполненияЧасы = 0
					Или ТекущиеДанные.СрокИсполненияМинуты = 0) Тогда
			
			ВыполнитьОбновлениеСроков = Истина;
		КонецЕсли;
		
		ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	КонецЕсли;
	
	Если ВыполнитьОбновлениеСроков Тогда
		Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события после удаления в таблице исполнителей
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//
Процедура ИсполнителиПослеУдаления(Форма, РеквизитИсполнители) Экспорт
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Количество();
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Обработчик события при изменении исполнителя
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//
Процедура ИсполнительПриИзменении(Форма, ЭлементИсполнители, РеквизитИсполнители) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	
	Форма.Модифицированность = Истина;
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Обработчик события НачалоВыбора исполнителя
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//
Процедура ИсполнительНачалоВыбора(Форма, СтандартнаяОбработка,
	ЭлементИсполнители, РеквизитИсполнители) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Стартован = Ложь;
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, ".ФормаБизнесПроцесса")
		И Форма.Объект.Свойство("Стартован") Тогда
		
		Стартован = Форма.Объект.Стартован;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Или Стартован Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ЭлементИсполнители", ЭлементИсполнители);
		ПараметрыОповещения.Вставить("РеквизитИсполнители", РеквизитИсполнители);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеВыбораИсполнителя", ЭтотОбъект, ПараметрыОповещения);
		
		Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
			РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляШаблонаПроцесса(
				Форма, ЭлементИсполнители, ОписаниеОповещения);
		Иначе
			РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляПроцесса(
				Форма, ЭлементИсполнители, ОписаниеОповещения);
		КонецЕсли;
	Иначе
		ПодобратьИсполнителей(Форма, ЭлементИсполнители, РеквизитИсполнители);
	КонецЕсли;
	
КонецПроцедуры

// см. процедуры ИсполнительНачалоВыбора,
//               ИсполнительИсполненияНачалоВыбора,
//               ИсполнительСогласованияНачалоВыбора
Процедура ЗавершениеВыбораИсполнителя(Результат, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ЭлементИсполнители = ПараметрыОповещения.ЭлементИсполнители;
	РеквизитИсполнители = ПараметрыОповещения.РеквизитИсполнители;
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Обработчик события очистки поля исполнитель
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//
Процедура ИсполнительОчистка(СтандартнаяОбработка, ЭлементИсполнители) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора поля исполнитель
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  ВыбранноеЗначение - СправочниСсылка.Пользователи,
//                      СправочниСсылка.ПолныеРоли,
//                      Строка - исполнитель процесса/шаблона или автоподстановка.
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//
Процедура ИсполнительОбработкаВыбора(Форма, ВыбранноеЗначение, ЭлементИсполнители) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ВыбранноеЗначение;
		
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события АвтоПодбор поля исполнитель
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  Текст - Введенный текст
//  ДанныеВыбора - СправочниСсылка.Пользователи,
//                 СправочниСсылка.ПолныеРоли,
//                 Строка - исполнитель процесса/шаблона или автоподстановка.
//  СтандартнаяОбработка - Булево - признак стандартной обработки авто подбора.
//
Процедура ИсполнительАвтоПодбор(
	Форма, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ЭтоШаблонПроцесса = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
		
		Если ЭтоШаблонПроцесса Тогда
			
			ИменаПредметовДляФункций = 
				МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Форма.Объект);
				
			ДополнениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(
				Текст, ДополнениеТипа, ИменаПредметовДляФункций);
			
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста поля исполнитель
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  Текст - Введенный текст
//  ДанныеВыбора - СправочниСсылка.Пользователи,
//                 СправочниСсылка.ПолныеРоли,
//                 Строка - исполнитель процесса/шаблона или автоподстановка.
//  СтандартнаяОбработка - Булево - признак стандартной обработки авто подбора.
//
Процедура ИсполнительОкончаниеВводаТекста(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		ЭтоШаблонПроцесса = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
		
		Если ЭтоШаблонПроцесса Тогда
			
			ИменаПредметовДляФункций = 
				МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Форма.Объект);
			
			ДополнениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(
				Текст, ДополнениеТипа, ИменаПредметовДляФункций);
			
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриИзменении у поля ПорядокИсполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//
Процедура ПорядокИсполненияПриИзмененииТаблицыИсполнители(Форма, ЭлементИсполнители, РеквизитИсполнители) Экспорт
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	
	// Сроки исполнения процессов
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Устанавливает доступность команд ПереместитьВверх и ПереместитьВниз в зависимости от
// положения строки.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса, шаблона процесса
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблицей Исполнители.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с таблицей Исполнителей.
//
Процедура ОбновитьДоступностьКомандПеремещения(Форма, ЭлементИсполнители, РеквизитИсполнители) Экспорт
	
	Форма.Элементы.ПереместитьВверх.Доступность = Ложь;
	Форма.Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если Форма.ТолькоПросмотр
		Или Не ЭлементИсполнители.ИзменятьПорядокСтрок Тогда
		
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = РеквизитИсполнители.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НомерСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные) + 1;
	
	Если НомерСтроки >= 2 Тогда
		Форма.Элементы.ПереместитьВверх.Доступность = Истина;
	КонецЕсли;
	
	Если НомерСтроки = 1 И КоличествоИсполнителей > 1
		Или НомерСтроки > 1 И НомерСтроки < КоличествоИсполнителей Тогда
		
		Форма.Элементы.ПереместитьВниз.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТаблицаИсполнители_ПроцессИсполенние

// Вызывает диалог подбора исполнителей для процесса Исполнения
// с последующим помещением выбранных исполнителей в процесс.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//
Процедура ПодобратьИсполнителейИсполнения(Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения) Экспорт
	
	ЭтоШаблонПроцесса = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(
		Форма.Объект.Ссылка);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ЭлементИсполнители", ЭлементИсполнители);
	ДопПараметры.Вставить("РеквизитИсполнители", РеквизитИсполнители);
	ДопПараметры.Вставить("ЭтоШаблонПроцесса", ЭтоШаблонПроцесса);
	ДопПараметры.Вставить("ВариантИсполнения", ВариантИсполнения);
	
	ОписаниеОповещенияОбработкиВыбора = Новый ОписаниеОповещения(
		"ЗавершитьПодборИсполнителейИсполнения", ЭтотОбъект, ДопПараметры);
		
	Если ЭтоШаблонПроцесса Тогда
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляШаблоновПроцессов(
			Форма, ОписаниеОповещенияОбработкиВыбора, Ложь);
	Иначе
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляПроцессов(
			Форма, РеквизитИсполнители, ОписаниеОповещенияОбработкиВыбора, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// см. ПодобратьИсполнителейИсполнения
Процедура ЗавершитьПодборИсполнителейИсполнения(
	ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ЭлементИсполнители = ДопПараметры.ЭлементИсполнители;
	РеквизитИсполнители = ДопПараметры.РеквизитИсполнители;
	ЭтоШаблонПроцесса = ДопПараметры.ЭтоШаблонПроцесса;
	ВариантИсполнения = ДопПараметры.ВариантИсполнения;
	
	КоличествоСтрок = РеквизитИсполнители.Количество();
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	ВариантыПорядкаВыполненияЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
	
	// удаление пропавших строк из таблицы Исполнители.
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = РеквизитИсполнители[КоличествоСтрок - Инд];
		
		УдалитьИсполнителя = Истина;
		
		Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
			Если Строка.Исполнитель = ВыбранныйИсполнитель Тогда
				
				УдалитьИсполнителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УдалитьИсполнителя Тогда
			РеквизитИсполнители.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ИндексИзмененнойСтроки = РеквизитИсполнители.Количество();
	
	// Обработка выбранных контактов
	Для Каждого ВыбранныйАдресат1 Из ВыбранныеИсполнители Цикл
		
		//Находим количество дублей для выбранного адресата.
		КоличествоВхождений = 0;
		Для Каждого ВыбранныйАдресат2 Из ВыбранныеИсполнители Цикл
			Если ВыбранныйАдресат1 = ВыбранныйАдресат2 Тогда
				
				КоличествоВхождений = КоличествоВхождений + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Ищем выбранный контакт в таблице Исполнители
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Исполнитель", ВыбранныйАдресат1);
		НайденныеСтроки = РеквизитИсполнители.НайтиСтроки(СтруктураДляПоиска);
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		
		// Если выбранный контакт встречается в списке выбранных больше, чем
		// в таблице Исполнители, тогда добавляем недостающих конец списка.
		Если КоличествоВхождений > КоличествоНайденныхСтрок Тогда
			
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				НоваяСтрокаИсполнитель = РеквизитИсполнители.Добавить();
				НоваяСтрокаИсполнитель.Исполнитель = ВыбранныйАдресат1;
				
				Если ВариантИсполнения = ВариантыМаршуртизацииЗадач.Последовательно Тогда
					НоваяСтрокаИсполнитель.ПорядокИсполнения = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
				Иначе
					НоваяСтрокаИсполнитель.ПорядокИсполнения = ВариантыПорядкаВыполненияЗадач.ВместеСПредыдущим;
				КонецЕсли;
				
				Если ЭтоШаблонПроцесса Тогда
					НоваяСтрокаИсполнитель.ОписаниеУсловия = МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
						НоваяСтрокаИсполнитель.ИмяПредметаУсловия, НоваяСтрокаИсполнитель.Условие);
				КонецЕсли;
				
				СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокВНовойСтрокеТаблицыИсполнители(
					НоваяСтрокаИсполнитель,
					РеквизитИсполнители,
					ВариантИсполнения,
					Форма.ИспользоватьДатуИВремяВСрокахЗадач);
				
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок + 1;
			КонецЦикла;
			
		// Если выбранный контакт встречается в списке выбранных меньше, чем
		// в таблице Исполнители, тогда удаляем лишние строки с конца списка.
		ИначеЕсли КоличествоВхождений < КоличествоНайденныхСтрок Тогда
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				РеквизитИсполнители.Удалить(НайденныеСтроки[КоличествоНайденныхСтрок - 1]);
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок - 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
		Форма, ЭлементИсполнители, РеквизитИсполнители);
	
	Форма.Модифицированность = Истина;
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Выполняет перемещение исполнителя вверх/вниз в таблице
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//  Смещение - Число - значение на которое необходимо исполнителя (1 или -1).
//
Процедура ПереместитьИсполнителяПроцессаИсполнения(
	Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения, Смещение) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'; en = 'Moving is not possible. Only the first performer in the list can be the responsible one.'");
	
	НомерСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные) + 1;
	
	Если Смещение > 0 Тогда
		Если НомерСтроки = РеквизитИсполнители.Количество() Тогда
			Возврат;
		КонецЕсли;
		Если НомерСтроки = 1
			И ТекущиеДанные.Ответственный Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
	Иначе
		Если НомерСтроки = 1 Тогда
			Возврат;
		КонецЕсли;
		Если НомерСтроки = 2
			И РеквизитИсполнители[0].Ответственный Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитИсполнители.Сдвинуть(НомерСтроки - 1, Смещение);
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
	
	Форма.Модифицированность = Истина;
	
	СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
		РеквизитИсполнители, ТекущиеДанные, ВариантИсполнения);
		
	Форма.ЗаполнитьПредставлениеСроковИсполнения();
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
		Форма, ЭлементИсполнители, РеквизитИсполнители);
		
	ИндексИзмененнойСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные);
	Если Смещение > 0 Тогда
		ИндексИзмененнойСтроки = ИндексИзмененнойСтроки - 1;
	КонецЕсли;
		
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Устанавливает или снимает отметку с ответственного исполнителя
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//
Процедура НазначитьОтветственным(
	Форма,
	ЭлементИсполнители,
	РеквизитИсполнители,
	ВариантИсполнения) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Номер строки получаем по индекс, т.к. РеквизитТаблица может
	// не иметь поля НомерСтроки.
	НомерТекущейСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные) + 1;
	
	Если НомерТекущейСтроки > 1 И Не ТекущиеДанные.Ответственный Тогда
		Текст = НСтр("ru = 'Ответственным может быть назначен только первый исполнитель в списке.'; en = 'Only the first performer in the list can be set as the responsible one.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из РеквизитИсполнители Цикл
		
		НомерСтроки = РеквизитИсполнители.Индекс(Строка) + 1;
		
		Если НомерСтроки = НомерТекущейСтроки Тогда
			Строка.Ответственный = Не Строка.Ответственный;
		ИначеЕсли Строка.Ответственный Тогда
			Строка.Ответственный = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Форма.Модифицированность = Истина;
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	Если Не ТекущиеДанные.Ответственный
		И РеквизитИсполнители.Количество() > 1
		И ВариантИсполнения = ВариантыМаршуртизацииЗадач.Параллельно Тогда
		
		СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
			РеквизитИсполнители, ТекущиеДанные, ВариантИсполнения);
		
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
		Форма, ЭлементИсполнители, РеквизитИсполнители);
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители");
	
	ОчиститьСообщения();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ВариантИсполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//  ТаблицаИсполнители - ДанныеФормыКоллекция - реквизит формы.
//
Процедура ВариантИсполненияПриИзмененииПроцессаИсполнения(
	Форма, ЭлементИсполнители,
	ВариантИсполнения, ПредыдущийВариантИсполнения, ТаблицаИсполнители) Экспорт
	
	ПриИзмененииВариантаИсполнения(
		Форма,
		ВариантИсполнения,
		ПредыдущийВариантИсполнения,
		ТаблицаИсполнители);
	
	Форма.УстановитьДоступность();
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
		Форма, ЭлементИсполнители, ТаблицаИсполнители);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки таблицы исполнителей процесса Исполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблица.
//  ЭлементУправленияСроком - ПолеФормы - элемент управления сроком исполнения участника.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы с исполнителями.
//  ДоступностьПоШаблону - Булево - принимает Истину, если процесс не ограничен соответствующей настройкой
//                                  доступности в шаблоне.
//  ВестиУчетПереносаСроков - Булево - значение настройки ведения учета переноса срока.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Процедура ИсполнителиИсполненияПриАктивизацииСтроки(
	Форма, ЭлементИсполнители, ЭлементУправленияСроком, РеквизитТаблица,
	ДоступностьПоШаблону = Неопределено,
	ВестиУчетПереносаСроков = Неопределено,
	ЗаявкаНаПереносСрока = Неопределено) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИсполнителиПриАктивизацииСтроки(
		Форма,
		ЭлементИсполнители,
		ЭлементУправленияСроком,
		ДоступностьПоШаблону,
		ВестиУчетПереносаСроков,
		ЗаявкаНаПереносСрока);
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
		Форма, ЭлементИсполнители, РеквизитТаблица);
	
КонецПроцедуры

// Обработчик события после удаления в таблице исполнителей процесса Исполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблица.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с исполнителями.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//
Процедура ИсполнителиИсполненияПослеУдаления(
	Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения) Экспорт
	
	Если РеквизитИсполнители.Количество() = 1
		И РеквизитИсполнители[0].Ответственный Тогда
		
		НазначитьОтветственным(
			Форма,
			ЭлементИсполнители,
			РеквизитИсполнители,
			ВариантИсполнения);
	Иначе
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитИсполнители);
		
		ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
			Форма, ЭлементИсполнители, РеквизитИсполнители);
			
		ИсполнителиПослеУдаления(Форма, РеквизитИсполнители);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик НачалоВыбора у поля Исполнитель процесса Исполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблица.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с исполнителями.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//
Процедура ИсполнительИсполненияНачалоВыбора(Форма, СтандартнаяОбработка,
	ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Стартован = Ложь;
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, ".ФормаБизнесПроцесса")
		И Форма.Объект.Свойство("Стартован") Тогда
		
		Стартован = Форма.Объект.Стартован;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Или Стартован Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ЭлементИсполнители", ЭлементИсполнители);
		ПараметрыОповещения.Вставить("РеквизитИсполнители", РеквизитИсполнители);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеВыбораИсполнителя", ЭтотОбъект, ПараметрыОповещения);
		
		Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
			РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляШаблонаПроцесса(
				Форма, ЭлементИсполнители, ОписаниеОповещения);
		Иначе
			РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляПроцесса(
				Форма, ЭлементИсполнители, ОписаниеОповещения);
		КонецЕсли;
	Иначе
		ПодобратьИсполнителейИсполнения(
			Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет доступность команд перемещения и назначения ответственного в карточке
// процесса/шаблона
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы с исполнителями.
//
Процедура ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным(
	Форма, ЭлементТаблица, РеквизитТаблица) Экспорт
	
	Форма.Элементы.ПереместитьВверх.Доступность = Ложь;
	Форма.Элементы.ПереместитьВниз.Доступность = Ложь;
	Форма.Элементы.НазначитьОтветственным.Доступность = Ложь;
	
	Если Не ЭлементТаблица.ИзменятьПорядокСтрок Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.НазначитьОтветственным.Пометка = Ложь;
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = РеквизитТаблица.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитТаблица[0].Ответственный Тогда
		ВерхняяГраница = 2;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 3;
	Иначе
		ВерхняяГраница = 1;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 2;
	КонецЕсли;
	
	НижняяГраница = КоличествоИсполнителей;
	
	// Номер строки получаем по индекс, т.к. РеквизитТаблица может
	// не иметь поля НомерСтроки.
	НомерСтроки = РеквизитТаблица.Индекс(ТекущиеДанные) + 1;
	
	Если КоличествоИсполнителей >= МинимальноеЧислоИсполнителейДляИзмененияПорядка Тогда
		
		Если НомерСтроки < ВерхняяГраница Тогда
			// ничего не делаем
		ИначеЕсли НомерСтроки = ВерхняяГраница Тогда
			Форма.Элементы.ПереместитьВниз.Доступность = Истина;
		ИначеЕсли НомерСтроки = НижняяГраница Тогда
			Форма.Элементы.ПереместитьВверх.Доступность = Истина;
		Иначе
			Форма.Элементы.ПереместитьВверх.Доступность = Истина;
			Форма.Элементы.ПереместитьВниз.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Стартован = Ложь;
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, ".ФормаБизнесПроцесса")
		И Форма.Объект.Свойство("Стартован") Тогда
		
		Стартован = Форма.Объект.Стартован;
	КонецЕсли;
	
	Форма.Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Форма.Элементы.НазначитьОтветственным.Доступность = 
		НомерСтроки = 1 
		И КоличествоИсполнителей > 1
		И Не Стартован;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТаблицаИсполнители_ПроцессСогласования

// Вызывает диалог подбора исполнителей для процесса Согласования
// с последующим помещением выбранных исполнителей в процесс.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблицы с исполнителями.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы с исполнителями.
//
Процедура ПодобратьИсполнителейСогласования(Форма, ЭлементТаблица, РеквизитТаблица) Экспорт
	
	ЭтоШаблонПроцесса = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ЭлементТаблица", ЭлементТаблица);
	ДопПараметры.Вставить("РеквизитТаблица", РеквизитТаблица);
	ДопПараметры.Вставить("ЭтоШаблонПроцесса", ЭтоШаблонПроцесса);
	
	ОписаниеОповещенияОбработкиВыбора = Новый ОписаниеОповещения(
		"ЗавершитьПодборИсполнителейСогласования", ЭтотОбъект, ДопПараметры);
	
	Если ЭтоШаблонПроцесса Тогда
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляШаблоновПроцессов(
			Форма, ОписаниеОповещенияОбработкиВыбора);
	Иначе
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляПроцессов(
			Форма, РеквизитТаблица, ОписаниеОповещенияОбработкиВыбора);
	КонецЕсли;
	
КонецПроцедуры

// см. ПодобратьИсполнителейСогласования
Процедура ЗавершитьПодборИсполнителейСогласования(
	ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ЭлементТаблица = ДопПараметры.ЭлементТаблица;
	РеквизитТаблица = ДопПараметры.РеквизитТаблица;
	ЭтоШаблонПроцесса = ДопПараметры.ЭтоШаблонПроцесса;
	
	КоличествоСтрок = РеквизитТаблица.Количество();
	
	ВариантыМаршуртизацииЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыМаршуртизацииЗадач();
	
	ВариантыПорядкаВыполненияЗадач = РаботаСБизнесПроцессамиКлиентСервер.ВариантыПорядкаВыполненияЗадач();
	
	ВариантМаршрутизацииЗадач = 
		РаботаСБизнесПроцессамиКлиентСервер.ВариантМаршрутизацииЗадач(Форма.Объект);
		
	ИспользоватьДатуИВремяВСрокахЗадач = Форма.ИспользоватьДатуИВремяВСрокахЗадач;
	
	// удаление пропавших строк
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = РеквизитТаблица[КоличествоСтрок - Инд];
		
		УдалитьИсполнителя = Истина;
		
		Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
			Если Строка.Исполнитель = ВыбранныйИсполнитель Тогда
				
				УдалитьИсполнителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УдалитьИсполнителя Тогда
			РеквизитТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ИндексИзмененнойСтроки = РеквизитТаблица.Количество();
	
	// добавление новых строк
	Для Каждого ВыбранныйАдресат Из ВыбранныеИсполнители Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", ВыбранныйАдресат);
		
		НайденныеСтроки = РеквизитТаблица.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрокаИсполнитель = РеквизитТаблица.Добавить();
			НоваяСтрокаИсполнитель.Исполнитель = ВыбранныйАдресат;
			
			Если ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Смешанно Тогда
				ИндексСтроки = РеквизитТаблица.Индекс(НоваяСтрокаИсполнитель);
				Если ИндексСтроки > 0 Тогда
					ПредыдущаяСтрока = РеквизитТаблица[ИндексСтроки - 1];
					НоваяСтрокаИсполнитель.ПорядокСогласования = ПредыдущаяСтрока.ПорядокСогласования;
				Иначе
					НоваяСтрокаИсполнитель.ПорядокСогласования = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
				КонецЕсли;
			ИначеЕсли ВариантМаршрутизацииЗадач = ВариантыМаршуртизацииЗадач.Последовательно Тогда
				НоваяСтрокаИсполнитель.ПорядокСогласования = ВариантыПорядкаВыполненияЗадач.ПослеПредыдущего;
			Иначе
				НоваяСтрокаИсполнитель.ПорядокСогласования = ВариантыПорядкаВыполненияЗадач.ВместеСПредыдущим;
			КонецЕсли;
			
			СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокВНовойСтрокеТаблицыИсполнители(
					НоваяСтрокаИсполнитель, РеквизитТаблица, ВариантМаршрутизацииЗадач, ИспользоватьДатуИВремяВСрокахЗадач);
			
			Если ЭтоШаблонПроцесса Тогда
				НоваяСтрокаИсполнитель.ОписаниеУсловия = МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
					НоваяСтрокаИсполнитель.ИмяПредметаУсловия, НоваяСтрокаИсполнитель.Условие);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитТаблица);
	
	ОбновитьДоступностьКомандПеремещения(Форма, ЭлементТаблица, РеквизитТаблица);
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Выполняет перемещение исполнителя в таблице
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ЭлементТаблица - ТаблицаФормы - элемент управления таблица.
//  РеквизитТаблица - ДанныеФормыКоллекция - реквизит формы.
//  Смещение - Число - значение, на которое необходимо исполнителя (1 или -1).
//
Процедура ПереместитьИсполнителяПроцессаСогласования(
	Форма, ЭлементТаблица, РеквизитТаблица, Смещение) Экспорт
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Смещение > 0 Тогда
		Если ТекущиеДанные.НомерСтроки = РеквизитТаблица.Количество() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.НомерСтроки = 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитТаблица.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, Смещение); 
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитТаблица);
	
	Форма.Модифицированность = Истина;
	
	ВариантМаршрутизацииЗадач = 
		РаботаСБизнесПроцессамиКлиентСервер.ВариантМаршрутизацииЗадач(Форма.Объект);
	
	СрокиИсполненияПроцессовКлиент.ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(
		РеквизитТаблица, ТекущиеДанные, ВариантМаршрутизацииЗадач);
		
	Форма.ЗаполнитьПредставлениеСроковИсполнения();
	
	ОбновитьДоступностьКомандПеремещения(Форма, ЭлементТаблица, РеквизитТаблица);
	
	ИндексИзмененнойСтроки = РеквизитТаблица.Индекс(ТекущиеДанные);
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Исполнители", ИндексИзмененнойСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ВариантСогласования
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//
Процедура ВариантСогласованияПриИзменении(Форма) Экспорт
	
	ПриИзмененииВариантаИсполнения(
		Форма,
		Форма.Объект.ВариантСогласования,
		Форма.ПредыдущийВариантСогласования,
		Форма.Объект.Исполнители,
		"ПорядокСогласования");
	
	Форма.УстановитьДоступность();
	
	ОбновитьДоступностьКомандПеремещения(Форма, Форма.Элементы.Исполнители, Форма.Объект.Исполнители);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки таблицы исполнителей процесса Согласования
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  ДоступностьПоШаблону - Булево - принимает Истину, если процесс не ограничен соответствующей настройкой
//                                  доступности в шаблоне.
//  ВестиУчетПереносаСроков - Булево - значение настройки ведения учета переноса срока.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//
Процедура ИсполнителиСогласованияПриАктивизацииСтроки(
	Форма,
	ДоступностьПоШаблону = Неопределено,
	ВестиУчетПереносаСроков = Неопределено,
	ЗаявкаНаПереносСрока = Неопределено) Экспорт
	
	ИсполнителиПриАктивизацииСтроки(
		Форма,
		Форма.Элементы.Исполнители,
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление,
		ДоступностьПоШаблону,
		ВестиУчетПереносаСроков,
		ЗаявкаНаПереносСрока);
	
	ОбновитьДоступностьКомандПеремещения(Форма, Форма.Элементы.Исполнители, Форма.Объект.Исполнители);
	
КонецПроцедуры

// Обработчик события после удаления в таблице исполнителей процесса Исполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//
Процедура ИсполнителиСогласованияПослеУдаления(Форма) Экспорт
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Форма.Объект.Исполнители);
	ОбновитьДоступностьКомандПеремещения(Форма, Форма.Элементы.Исполнители, Форма.Объект.Исполнители);
	ИсполнителиПослеУдаления(Форма, Форма.Объект.Исполнители);
	
КонецПроцедуры

// Обработчик НачалоВыбора у поля Исполнитель процесса Исполнения
//
// Параметры:
//  Форма - УправляемаяФорма - карточка процесса/шаблона
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблица.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы с исполнителями.
//
Процедура ИсполнительСогласованияНачалоВыбора(
	Форма, СтандартнаяОбработка, ЭлементИсполнители, РеквизитИсполнители) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Стартован = Ложь;
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, ".ФормаБизнесПроцесса")
		И Форма.Объект.Свойство("Стартован") Тогда
		
		Стартован = Форма.Объект.Стартован;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.Исполнители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Или Стартован Тогда 
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ЭлементИсполнители", ЭлементИсполнители);
		ПараметрыОповещения.Вставить("РеквизитИсполнители", РеквизитИсполнители);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеВыбораИсполнителя", ЭтотОбъект, ПараметрыОповещения);
		
		Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
			РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляШаблонаПроцесса(
				Форма, ЭлементИсполнители, ОписаниеОповещения);
		Иначе
			РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляПроцесса(
				Форма, ЭлементИсполнители, ОписаниеОповещения);
		КонецЕсли;
	Иначе
		ПодобратьИсполнителейСогласования(Форма, ЭлементИсполнители, РеквизитИсполнители);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Автор

Процедура АвторСоСрокомИсполненияПриИзменении(Форма, Элемент) Экспорт
	
	Форма.ОбновитьСрокиИсполненияОтложенно("Автор");
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТрудозатратыУчастниковПроцесса

Функция СтруктураСтрокиТрудозатратУчастникаПроцесса(РольВПроцессе, ПолеТрудозатрат, Трудозатраты,
	Участник = Неопределено, Шаг = 0, НомерСтроки = 0) Экспорт
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("РольВПроцессе", РольВПроцессе);
	СтруктураСтроки.Вставить("ПолеТрудозатрат", ПолеТрудозатрат);
	СтруктураСтроки.Вставить("Шаг", Шаг);
	СтруктураСтроки.Вставить("Участник", Участник);
	СтруктураСтроки.Вставить("Трудозатраты", Трудозатраты);
	СтруктураСтроки.Вставить("НомерСтроки", НомерСтроки);
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Открывает форму настройки трудозатрат для участников процесса.
//
// Параметры:
//   Форма - УправляемаяФорма - форма процесса
//   ТолькоПросмотр - Булево - если Истина, то форма открывается только для просмотра.
//                             Необязательный параметр.
//   ЕдиницаИзмеренияТрудозатрат - ПеречислениеСсылка.ЕдиницыТрудозатрат.
//   Настройка - Структура
//     ТрудозатратыПланИсполнителя - Число - плановые трудозатраты исполнителя. Необязательное свойство.
//     Заголовок_ТрудозатратыПланИсполнителя - Строка - заголовок для поля ТрудозатратыПланИсполнителя в форме.
//                                                      Необязательное свойство.
//     ИсполнительСтрокой - Строка - исполнитель строкой. Необязательное свойство.
//     ТрудозатратыПланПроверяющего - Число - плановые трудозатраты проверяющего. Необязательное свойство.
//     ПроверяющийСтрокой - Строка - проверяющий строкой. Необязательное свойство.
//     ТрудозатратыПланКонтролера - Число - плановые трудозатраты контролера. Необязательное свойство.
//     КонтролерСтрокой - Строка - контролер строкой. Необязательное свойство.
//     ТрудозатратыПланАвтора - Число - плановые трудозатраты автора. Необязательное свойство.
//     АвторСтрокой - Строка - автор строкой. Необязательное свойство.
//     Исполнители - Массив - плановые трудозатраты нескольких исполнителей. Необязательное свойство.
//        Структура
//           НомерСтроки
//           Исполнитель
//           ТрудозатратыПланИсполнителя
//           Шаг
//     Заголовок_Исполнители_Исполнитель - Строка - заголовок для поля Исполнитель в таблице Исполнители.
//                                                  Необязательное свойство.
//
Процедура НастроитьТрудозатратУчастниковПроцесса(Форма, Настройки) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Настройки", Настройки);
	ДопПараметры.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОписаниеТрудозатратНажатие_Продолжение", РаботаСБизнесПроцессамиКлиент, ДопПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаТрудозатратУчастниковПроцесса",
		Настройки,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие_Продолжение(Участники, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Участники) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	ИмяРеквизитаОбъекта = "Объект";
	Если Параметры.Настройки.Свойство("ИмяРеквизитаОбъекта") Тогда
		ИмяРеквизитаОбъекта = Параметры.Настройки.ИмяРеквизитаОбъекта;
	КонецЕсли;
	
	ИмяТаблицыИсполнители = "Исполнители";
	Если Параметры.Настройки.Свойство("ИмяТаблицыИсполнители") Тогда
		ИмяТаблицыИсполнители = Параметры.Настройки.ИмяТаблицыИсполнители;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаОбъекта) Тогда
		Объект = Форма[ИмяРеквизитаОбъекта];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Для Каждого СтрУчастник ИЗ Участники Цикл
		
		Если ЗначениеЗаполнено(СтрУчастник.НомерСтроки) Тогда
			ТаблицаИсполнителей = Объект[ИмяТаблицыИсполнители];
			СтрИсполнитель = ТаблицаИсполнителей[СтрУчастник.НомерСтроки - 1];
			СтрИсполнитель[СтрУчастник.ПолеТрудозатрат] = СтрУчастник.Трудозатраты;
			Продолжить;
		КонецЕсли;
		
		Объект[СтрУчастник.ПолеТрудозатрат] = СтрУчастник.Трудозатраты;
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	Оповестить("ОбновитьТрудозатратыУчастниковПроцесса",, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РаботаСДеревомПроцессовИЗадач

// Разворачивает дерево процессов и задач.
//
// Параметры:
//   Форма - УправляемаяФорма - форма с деревом процессов и задач.
//
Процедура РазвернутьДеревоПроцессовИЗадач(Форма) Экспорт
	
	ЭлементыДерева = Форма.ДеревоЗадач.ПолучитьЭлементы();
	
	Для каждого Строка ИЗ ЭлементыДерева Цикл
		Форма.Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработки оповещений для форм содержащих
// дерево процессов и задач.
//
Процедура ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	Если (ИмяСобытия = "ЗадачаИзменена" И Источник <> Форма)
		Или ИмяСобытия = "БизнесПроцессИзменен"
		Или (ИмяСобытия = "ИзменилсяФлаг" И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя"))
		Или (ИмяСобытия = "ЗаписьКонтроля" И ЗначениеЗаполнено(Параметр.Предмет))
		Или (ИмяСобытия = "Перенаправление_ЗадачаИсполнителя") Тогда
		
		Форма.ОбновитьДеревоПроцессовЗадач();
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события ПриАктивизацииСтроки для дерева процессов и задач.
//
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент, Форма) Экспорт
	
	Если Форма.Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Форма.ТекущаяСтрокаВДереве = Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события Выбор для дерева процессов и задач.
//
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ДеревоЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Форма.Элементы.ДеревоЗадач.ТекущаяСтрока;
		СтрокаТаблицы = Форма.ДеревоЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьТекущуюСтрокуДереваЗадач(Форма);
	
КонецПроцедуры

// Процедура обработки события ПередНачаломИзменения для дерева процессов и задач.
//
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, Форма) Экспорт
	
	Отказ = Истина;
	
	ОткрытьТекущуюСтрокуДереваЗадач(Форма);
	
КонецПроцедуры

// Процедура обработки события Выбор для списка активных задач.
//
Процедура СписокАктивныхЗадачВыбор(
	Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.СписокАктивныхЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Форма.Элементы.СписокАктивныхЗадач.ТекущаяСтрока;
		СтрокаТаблицы = Форма.СписокАктивныхЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуСпискаАктивныхЗадач(Форма);
	
КонецПроцедуры

// Процедура обработки события ПриАктивизацииСтроки для списка активных задач.
//
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, Форма) Экспорт
	
	Если Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные <> Неопределено Тогда
		
		Форма.ТекущаяСтрокаВСпискеАктивныхЗадач = 
			Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события ПередНачаломИзменения для списка активных задач.
//
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ, Форма) Экспорт
	
	Отказ = Истина;
	
	ОткрытьЗадачуСпискаАктивныхЗадач(Форма);
	
КонецПроцедуры

// Устанавливает флаг для текущей задаче в таблице.
//
// Параметры:
//   Форма - УправляемаяФорма
//   Флаг - ПеречислениеСсылка.ФлагиОбъектов
//   ИмяТаблицы - Строка - имя таблицы с задачами в форме.
//
Процедура УстановитьФлаги(Форма, Флаг, ИмяТаблицы = "") Экспорт
	
	ВыделенныеСтроки = Новый Массив;
	
	ТаблицаФормы = Форма.Элементы[ИмяТаблицы];
	
	МассивВыделенныхСтрок = ТаблицаФормы.ВыделенныеСтроки;
	Для Каждого Стр Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = Форма[ИмяТаблицы].НайтиПоИдентификатору(Стр);
		ВыделенныеСтроки.Добавить(СтрокаДерева.Ссылка);
	КонецЦикла;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

// Находит и устанавливает текущей строкой в дереве "процессов и задач", в списке активных задач,
// процесс или задачу, по которых была открыта форма иерархии процессов и задач.
//
// Параметры:
//   Предмет - процесс или задача по которых была открыта форма иерархии процессов и задач.
//    - БизнесПроцессСсылка
//    - ЗадачаСсылка.ЗадачаИсполнителя
//   Форма - УправляемаяФорма - форма с списком активных задач.
//
Процедура ПерейтиКТекущемуОбъекту(Предмет, Форма) Экспорт
	
	Форма.ТекущаяСтрокаВДереве = Предмет;
	Форма.ТекущаяСтрокаВСпискеАктивныхЗадач = Предмет;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(Форма.ДеревоЗадач.ПолучитьЭлементы(), Форма);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтрокуВСпискеАктивныхЗадач(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ФормаЗадачиПроцесса

// Открывает диалог изменения даты выполнения задачи из карточки задачи.
//
// Параметры:
//   Форма - УправляемаяФорма - карточка задачи
//
Процедура ИзменитьДатуВыполнения(Форма) Экспорт
	
	Если Не РаботаСБизнесПроцессамиВызовСервера.ИзменятьЗаданияЗаднимЧислом() Тогда
		Форма.Элементы.ИзменитьДатуВыполнения.Доступность = Ложь;
		
		ТекстПредупреждения = НСтр("ru = 'Настройка ""Разрешить изменение даты исполнения задач"" отключена.
			|Обратитесь к администратору.';
			|en = 'Option ""Allow changes to task due dates"" is disabled.
			|Contact the administrator.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаИсполнения", Форма.Объект.ДатаИсполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Продолжение_ИзменитьДатуВыполнения", ЭтотОбъект, Форма);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.РедактированиеДатыВыполнения",
		ПараметрыФормы,Форма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура Продолжение_ИзменитьДатуВыполнения(Результат, Форма) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Объект.ДатаИсполнения = Результат;
	
	Если Форма.ТолькоПросмотр Тогда
		РаботаСБизнесПроцессамиВызовСервера.ИзменитьДатуВыполненияЗадачи(Форма.Объект.Ссылка, Результат);
		Форма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог выбор исполнителя задачи, если текущий пользователь
// отличается от исполнителя.
//
// Параметры:
//   Форма - УправляемаяФорма - форма с командой выполнения задачи.
//   ИсполнительЗадачи - СправочникСсылка.Пользователи - исполнитель, указанный в задаче.
//   ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь
//   ФактическийИсполнительЗадачи - СправочникСсылка.Пользователи - фактический, если он определен.
//   ОписаниеОповещения - описание оповещения для продолжения выполнения задачи.
//
Процедура ВыбратьИсполнителяЗадачи(Форма, ИсполнительЗадачи, ТекущийПользователь,
	ФактическийИсполнительЗадачи, ОписаниеОповещения) Экспорт
	
	Если ЗначениеЗаполнено(ИсполнительЗадачи)
		И ИсполнительЗадачи <> ТекущийПользователь
		И Не ЗначениеЗаполнено(ФактическийИсполнительЗадачи) Тогда
		
		Если Форма.ФактическийИсполнительЗадач = ПредопределенноеЗначение(
			"Перечисление.ФактическийИсполнительЗадач.ВыборПриИсполненииЗадачи") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИсполнительЗадачи", ИсполнительЗадачи);
			
			ОткрытьФорму("ОбщаяФорма.ВыборИсполнителяЗадачи",
				ПараметрыФормы, Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		ИначеЕсли Форма.ФактическийИсполнительЗадач = ПредопределенноеЗначение(
			"Перечисление.ФактическийИсполнительЗадач.ТекущийПользователь") Тогда
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ТекущийПользователь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИсполнительЗадачи);
	
КонецПроцедуры

// Открывает диалог выбора шаблона текста - из формы бизнес-процесса
//
// Параметры:
//   Форма - УправляемаяФорма - форма с командой выполнения задачи.
//   ТипПоля - Строка - "Наименование"  или "Описание" 
//   Область -  Перечисление.ОбластиПримененияШаблоновТекстов
//
Процедура ВыбратьШаблонТекстаРеализация(Форма, ТипПоля, Область) Экспорт
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона наименования'; en = 'Select description template'");
	ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон наименования'; en = 'Description template'");
	ИмяОбработчика = "НаименованиеНачалоВыбораПродолжение";
	
	Если ТипПоля = "Описание" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона описания'; en = 'Select details template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон описания'; en = 'Details template'");
		ИмяОбработчика = "ОписаниеНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "РезультатВыполнения" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона комментария'; en = 'Select comment template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон комментария'; en = 'Comment template'");
		ИмяОбработчика = "РезультатВыполненияНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "РезультатВыполненияЗадачиМне" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона комментария'; en = 'Select comment template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон комментария'; en = 'Comment template'");
		ИмяОбработчика = "РезультатВыполненияЗадачиМнеНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "НаименованиеОзнакомления" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона наименования'; en = 'Select description template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон наименования'; en = 'Description template'");
		ИмяОбработчика = "НаименованиеОзнакомленияНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "ОписаниеОзнакомления" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона описания'; en = 'Select details template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон описания'; en = 'Details template'");
		ИмяОбработчика = "ОписаниеОзнакомленияНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "НаименованиеИсполнение" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона наименования'; en = 'Select description template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон наименования'; en = 'Description template'");
		ИмяОбработчика = "НаименованиеИсполнениеНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "ОписаниеИсполнение" Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона описания'; en = 'Select details template'");
		ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон описания'; en = 'Details template'");
		ИмяОбработчика = "ОписаниеИсполнениеНачалоВыбораПродолжение";
	ИначеЕсли ТипПоля = "НаименованиеБизнесПроцесса" Тогда
        ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона наименования'; en = 'Select description template'");
        ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон наименования'; en = 'Description template'");
		ИмяОбработчика = "НаименованиеБизнесПроцессаНачалоВыбораПродолжение";
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок, ЗаголовокФормыСоздания", 
		Область,
		ЗаголовокФормыВыбора,
		ЗаголовокФормыСоздания);
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		ИмяОбработчика,
		ЭтотОбъект,
		ДопПараметры);
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.Объект.Наименование = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура НаименованиеБизнесПроцессаНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.Объект.НаименованиеБизнесПроцесса = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОписаниеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.Объект.Описание = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура РезультатВыполненияНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.Объект.РезультатВыполнения = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура РезультатВыполненияЗадачиМнеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.РезультатВыполнения = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура НаименованиеОзнакомленияНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.НаименованиеОзнакомления = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОписаниеОзнакомленияНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.ОписаниеОзнакомления = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура НаименованиеИсполнениеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.НаименованиеИсполнения = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОписаниеИсполнениеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Форма.ОписаниеИсполнения = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
        Форма.Модифицированность = Истина;    
	КонецЕсли;	
		
КонецПроцедуры	

// Выполняет проверку условий запрета выполнения задач.
//
// Параметры:
//  Задача - ЗадачаСсылка - Задача.
//  ЕстьУсловияЗапретаВыполнения - Булево - Есть условия запрета выполнения.
// 
// Возвращаемое значение:
//  Булево - Запрет выполнения.
//
Функция ЗапретВыполнения(Задача, ЕстьУсловияЗапретаВыполнения = Истина) Экспорт
	
	ЗапретВыполнения = Ложь;
	
	Если ЕстьУсловияЗапретаВыполнения Тогда
		РезультатПроверки = РаботаСБизнесПроцессамиВызовСервера.ПроверитьУсловияЗапретаВыполнения(Задача);
		Если РезультатПроверки.ЗапретВыполнения Тогда
			ЗапретВыполнения = Истина;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Задача", Задача);
			ПараметрыФормы.Вставить("ТекстПредупреждения", РезультатПроверки.ФорматированныйТекстПредупреждения);
			ОткрытьФорму("ОбщаяФорма.ЗапретВыполнения", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗапретВыполнения;
	
КонецФункции

// Выполняет проверку условий запрета выполнения задачи ознакомления с результатом приглашения.
//
// Параметры:
//  Задача - ЗадачаСсылка - Задача.
//  РезультатПриглашения - ПеречислениеСсылка.ОбщиеРезультатыПриглашения - Результат приглашения.
//  ЕстьУсловияЗапретаВыполнения - Булево - Есть условия запрета выполнения.
// 
// Возвращаемое значение:
//  Булево - Запрет выполнения.
//
Функция ЗапретВыполненияПриглашениеПовторить(Задача, РезультатПриглашения, ЕстьУсловияЗапретаВыполнения = Истина) Экспорт
	
	ЗапретВыполнения = Ложь;
	
	Если РезультатПриглашения = ПредопределенноеЗначение("Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда
		Возврат ЗапретВыполнения;
	КонецЕсли;
	
	ЗапретВыполнения = ЗапретВыполнения(Задача, ЕстьУсловияЗапретаВыполнения);
	
	Возврат ЗапретВыполнения;
	
КонецФункции

// Выполняет проверку условий запрета выполнения задач.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
// 
// Возвращаемое значение:
//  Булево - Запрет выполнения.
//
Функция ЗапретВыполненияИзФормы(Форма) Экспорт
	
	Возврат ЗапретВыполнения(Форма.Объект.Ссылка, Форма.ЕстьУсловияЗапретаВыполнения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверки перед стартом бизнес-процесса
Процедура ПередСтартомБизнесПроцесса(
	Объект, 
	Отказ,
	ИдентификаторФормыПроцесса,
	ПараметрыЗаписиПроцесса) Экспорт
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	
	Если Предметы.Количество() > 0 Тогда
		
		Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			// Если при старте процесса пользователь еще не отвечал на вопрос о старте с незарегистрированными документами или 
			// он ответил отрицательно на один из следующих за этим вопросов, будет задач вопрос о старте при занятых файлах у документов.
			Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриНезарегистрированныхДокументах") Тогда
				
				ПараметрыОбработчикаОповещения = Новый Структура;
				ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
				ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписиПроцесса);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВопросаОСтартеПриНезарегистрированныхДокументах", 
					ЭтотОбъект,
					ПараметрыОбработчикаОповещения);
				
				НезарегистрированныеПредметы = Новый Массив;
				Для каждого Предмет из Предметы Цикл
					Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
						РегистрационныйНомер = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер");
						Если ПустаяСтрока(РегистрационныйНомер) Тогда
							НезарегистрированныеПредметы.Добавить(Предмет);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отправить'; en = 'Submit'"));
				Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'; en = 'Cancel'"));
				
				Если НезарегистрированныеПредметы.Количество() = 1 Тогда
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ ""%1"" не зарегистрирован. 
						|Отправить на рассмотрение?';
						|en = 'Document ""%1"" is not registered. 
						|Send for reviewal?'"), Предмет);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет, НСТР("ru = 'Запуск процесса'; en = 'Process start'"));
					Отказ = Истина;
					Возврат;
				ИначеЕсли НезарегистрированныеПредметы.Количество() > 1 Тогда
					СтрокаПредметов = "";
					Для каждого Предмет из НезарегистрированныеПредметы Цикл
						СтрокаПредметов = СтрокаПредметов + Символы.ПС + Строка(Предмет)
					КонецЦикла;
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документы %1 не зарегистрированы. 
						|Отправить на рассмотрение?';
						|en = 'Documents %1 are not registered. 
						|Send for reviewal?'"), СтрокаПредметов);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет, НСТР("ru = 'Запуск процесса'; en = 'Process start'"));
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивДокументов = Новый Массив;
		МассивЗанятыхФайлов = Новый Массив;
		
		Для каждого Предмет из Предметы Цикл
			Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
				МассивДокументов.Добавить(Предмет);
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				Редактирует = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "Редактирует");
				Если ЗначениеЗаполнено(Редактирует) Тогда
					МассивЗанятыхФайлов.Добавить(Предмет);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если при старте процесса пользователь еще не отвечал на вопрос о старте с занятыми файлами документов или 
		// он ответил отрицательно на один из следующих за этим вопросов, будет задан вопрос о старте при занятых файлах у документов.
		Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриЗанятыхФайлахДокументов") Тогда
			Если МассивДокументов.Количество() > 0 Тогда
				
				СообщениеВопрос = НСтр("ru = 'Выполнить запуск процесса?'; en = 'Start the process?'");
				СообщениеЗаголовок = НСтр("ru = 'Некоторые файлы приложенных документов заняты для редактирования:'; en = 'Some files of the attached documents are locked for editing:'");
				Заголовок = НСтр("ru = 'Запуск процесса'; en = 'Process start'");
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СообщениеВопрос", СообщениеЗаголовок);
				ПараметрыФормы.Вставить("СообщениеЗаголовок", СообщениеЗаголовок);
				ПараметрыФормы.Вставить("Заголовок", Заголовок);
				ПараметрыФормы.Вставить("ВладелецФайла", МассивДокументов);
				ПараметрыФормы.Вставить("ТекстКнопкиЗакончитьИЗакрыть", НСтр("ru = 'Закончить редактирование и выполнить'; en = 'Finish editing and execute'"));
				ПараметрыФормы.Вставить("ТекстКнопкиЗакрыть", НСтр("ru = 'Выполнить'; en = 'Execute'"));
				
				ПараметрыОбработчикаОповещения = Новый Структура;
				ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
				ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписиПроцесса);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВопросаОСтартеПриЗанятыхФайлахДокументов", 
					ЭтотОбъект,
					ПараметрыОбработчикаОповещения);
				// Открываем диалог с занятыми файлами документов и прерываем процесс записи процесса.
				// Процесс записи будет начат заново, когда пользователь ответ утвердительно.
				// В этом случае вопрос уже не будет задан повторно.
				РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
				Если ПараметрыФормы.КоличествоЗанятыхФайлов > 0 Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если при старте процесса пользователь еще не отвечал на вопрос о старте при занятых файлах или 
		// он ответил отрицательно на один из следующих за этим вопросов, будет задач вопрос о старте при занятых файлах.
		Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриЗанятыхФайлах") Тогда
			Если МассивЗанятыхФайлов.Количество() > 0 Тогда
				
				ПараметрыОбработчикаОповещения = Новый Структура;
				ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
				ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписиПроцесса);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВопросаОСтартеПриЗанятыхФайлах", 
					ЭтотОбъект,
					ПараметрыОбработчикаОповещения);
					
				ТекстВопроса = НСтр("ru = 'Некоторые приложенные файлы заняты для редактирования. Выполнить запуск процесса?'; en = 'Some of the attached files are locked for editing. Start the process?'");
				Если МассивЗанятыхФайлов = 1 Тогда
					ТекстВопроса = НСтр("ru = 'Приложенный файл занят для редактирования. Выполнить запуск процесса?'; en = 'An attached file is locked for editing. Start the process?'");
				КонецЕсли;
				
				// Открываем диалог с вопросом и прерываем процесс записи процесса.
				// Процесс записи будет начат заново, когда пользователь ответ утвердительно.
				// В этом случае вопрос уже не будет задан повторно.
				ПоказатьВопрос(
					ОписаниеОповещения,
					ТекстВопроса,
					РежимДиалогаВопрос.ДаНет,,
					КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Запуск процесса'; en = 'Process start'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриОшибкахВПроектах") Тогда
		РаботаСПроектамиКлиент.ПередСтартомБизнесПроцесса(Объект, Отказ, ПараметрыЗаписиПроцесса, ИдентификаторФормыПроцесса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаОСтартеПриНезарегистрированныхДокументах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил утвердительно, то информируем форму процесса о том,
		//	что запуск может быть возобновлен.
		Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриНезарегистрированныхДокументах", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеВопросаОСтартеПриЗанятыхФайлахДокументов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил утвердительно, то информируем форму процесса о том,
		//	что запуск может быть возобновлен.
		Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриЗанятыхФайлахДокументов", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеВопросаОСтартеПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил утвердительно, то информируем форму процесса о том,
		//	что запуск может быть возобновлен.
		Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриЗанятыхФайлах", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	Иначе
		Параметры.ПараметрыЗаписиПроцесса.Удалить("СтартоватьПриНезарегистрированныхДокументах");
		Параметры.ПараметрыЗаписиПроцесса.Удалить("СтартоватьПриЗанятыхФайлахДокументов");
		Параметры.ПараметрыЗаписиПроцесса.Удалить("СтартоватьПриЗанятыхФайлах");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет открытие карточки "Исполнителя", если он установлен
Процедура ОткрытьИсполнителя(Исполнитель) Экспорт
	
	Если Не Исполнитель.Пустая() Тогда
		ПоказатьЗначение(, Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеЗанятыхФайлов(Объект, ОписаниеОповещения) Экспорт
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	
	Если Предметы.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		Возврат Истина;
	КонецЕсли;
	
	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	
	МассивДокументов = Новый Массив;
	МассивЗанятыхФайлов = Новый Массив;
	
	Для каждого Предмет из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			МассивДокументов.Добавить(Предмет);
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			Редактирует = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "Редактирует");
			Если ЗначениеЗаполнено(Редактирует) Тогда
				МассивЗанятыхФайлов.Добавить(Предмет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("МассивЗанятыхФайлов", МассивЗанятыхФайлов);
	ПараметрыОбработчикаОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросОВыполненииПриЗанятыхФайлах", 
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	Если МассивДокументов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СообщениеВопрос", НСтр("ru = 'Выполнить задачу?'; en = 'Execute the task?'"));
		ПараметрыФормы.Вставить("СообщениеЗаголовок", НСтр("ru = 'Некоторые файлы приложенных документов заняты для редактирования:'; en = 'Some files of the attached documents are locked for editing:'"));
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выполнение задачи'; en = 'Task execution'"));
		ПараметрыФормы.Вставить("ТекстКнопкиЗакончитьИЗакрыть", НСтр("ru = 'Закончить редактирование и выполнить'; en = 'Finish editing and execute'"));
		ПараметрыФормы.Вставить("ТекстКнопкиЗакрыть", НСтр("ru = 'Выполнить'; en = 'Execute'"));
		ПараметрыФормы.Вставить("ВладелецФайла", МассивДокументов);
		ПараметрыФормы.Вставить("Редактирует", ТекущийПользователь);
		
		РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
		
		Если ПараметрыФормы.КоличествоЗанятыхФайлов = 0 Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецФункции

Процедура ВопросОВыполненииПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	Если Параметры.МассивЗанятыхФайлов.Количество() > 0 Тогда
		Если Параметры.МассивЗанятыхФайлов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Приложенный файл занят для редактирования. Выполнить задачу?'; en = 'An attached file is locked for editing. Execute the task?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Некоторые приложенные файлы заняты для редактирования. Выполнить задачу?'; en = 'Some of the attached files are locked for editing. Execute the task?'");
		КонецЕсли;
		
		ПоказатьВопрос(
			Параметры.ОписаниеОповещения,
			ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет, , 
			КодВозвратаДиалога.Нет, 
			НСТР("ru = 'Выполнение задачи'; en = 'Task execution'"));
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		ПоказатьПредупреждение( ,
			НСтр("ru = 'Невозможно установить главную задачу процессу, входящему в составной или комплексный процесс.'; en = 'In is not possible to assign the head task to a process that belongs to a compound or a composite process.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КромеЗадачБизнесПроцесса", Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъектаПродолжение", ЭтотОбъект, Форма);
		
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаВыбора", ПараметрыФормы,
		Форма.Элементы.ГлавнаяЗадача,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъектаПродолжение(ВыбранноеЗначение, Форма) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Форма.Объект.ГлавнаяЗадача = ВыбранноеЗначение;
		Форма.Элементы.ГлавнаяЗадача.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает указанную строку текущей в дереве приложений в карточке задачи
Процедура УстановитьТекущуюСтрокуВДеревеПриложений(Форма, ЭлементыДерева, ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве = Неопределено) Экспорт
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Форма.Элементы.ДеревоПриложений.Развернуть(Элемент.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;

	ЧислоСтрокДерева = ЭлементыДерева.Количество();
	ТекущаяСтрокаДерева = -1;
	
	Для каждого Эл Из ЭлементыДерева Цикл
		
		ТекущаяСтрокаДерева = ТекущаяСтрокаДерева + 1;
		
		Если Эл.Ссылка = ТекущаяСсылкаВДереве Или (ЗначениеЗаполнено(Эл.ИмяПредмета) И Эл.ИмяПредмета = ТекущееИмяПредметаВДереве) Тогда
			Форма.Элементы.ДеревоПриложений.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
			Возврат;
		Иначе
			УстановитьТекущуюСтрокуВДеревеПриложений(
				Форма,
				Эл.ПолучитьЭлементы(),
				ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве);
		КонецЕсли;
			 
	КонецЦикла;
	
	Если ТекущаяСтрокаДерева >= 0 И Не ЗначениеЗаполнено(Форма.Элементы.ДеревоПриложений.ТекущаяСтрока) Тогда
		Если ТипЗнч(Эл.ПолучитьРодителя()) <> Тип("ДанныеФормыЭлементДерева") Тогда
			Форма.Элементы.ДеревоПриложений.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команд работы с файлами в карточке задачи
Процедура УстановитьДоступностьКомандРаботыСФайлами(Форма, Приложения, ЧислоПредметов = Неопределено) Экспорт

	ОткрытьКарточкуДоступность = Истина;
	ОткрытьДляПросмотраДоступность = Истина;
	РедактироватьДоступность = Истина;
	ЗакончитьРедактированиеДоступность = Истина;
	УдалитьПредметДоступность = Истина;
	СохранитьКакДоступность = Истина;
	
	Если ЧислоПредметов = Неопределено Тогда
		Если Форма.ИмяФормы = "Задача.ЗадачаИсполнителя.Форма.ЗадачиМне" Тогда
			ЧислоПредметов = Форма.ДеревоПриложений.ПолучитьЭлементы().Количество();
		Иначе
			Попытка
				ЧислоПредметов = Форма.Объект.Предметы.Количество();
			Исключение
				// Если в форме нет реквизита Объект, то ничего не делаем.
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ОбщаяДоступность = (ЧислоПредметов > 0);
	
	Если Приложения.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Приложения.ТекущиеДанные.Ссылка;
		
		КоличествоВыделенныхСтрок = Приложения.ВыделенныеСтроки.Количество() = 1;
		
		Если КоличествоВыделенныхСтрок = 1
			И Не Приложения.ТекущиеДанные.ДоступноУдаление Тогда
			УдалитьПредметДоступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
			
			Если Приложения.ТекущиеДанные.РедактируетДругойПользователь
				ИЛИ Приложения.ТекущиеДанные.ПодписанЭП Тогда
				РедактироватьДоступность = Ложь;
			КонецЕсли;
			
			Если Не Приложения.ТекущиеДанные.РедактируетТекущийПользователь
				ИЛИ Приложения.ТекущиеДанные.ПодписанЭП Тогда
				ЗакончитьРедактированиеДоступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			ОткрытьДляПросмотраДоступность = Ложь;
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			
		КонецЕсли;
		
		Если КоличествоВыделенныхСтрок = 1 И Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ОткрытьДляПросмотраДоступность = Ложь;
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			УдалитьПредметДоступность = Ложь;
			СохранитьКакДоступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюОткрытьКарточку") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Доступность =
			ОбщаяДоступность И ОткрытьКарточкуДоступность;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюСохранитьКак") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность =
			ОбщаяДоступность И СохранитьКакДоступность;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюОткрытьДляПросмотра") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьДляПросмотра.Доступность =
			ОбщаяДоступность И ОткрытьДляПросмотраДоступность;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюРедактировать") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность =
			ОбщаяДоступность И РедактироватьДоступность;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность =
			ОбщаяДоступность И ЗакончитьРедактированиеДоступность;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюУдалитьПредмет") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюУдалитьПредмет.Доступность =
			ОбщаяДоступность И УдалитьПредметДоступность;
	КонецЕсли;
	
КонецПроцедуры

// Обработка команды "Закончить редактирование" в карточке задачи
Процедура ЗакончитьРедактированиеТекущегоФайла(Форма, Приложения, ЧислоПредметов = Неопределено) Экспорт
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
	
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Приложения", Приложения);
		ПараметрыОбработчика.Вставить("ЧислоПредметов", ЧислоПредметов);
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандРаботыСФайламиПослеРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
			Приложения.ТекущиеДанные.Ссылка, 
			Форма.УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = Приложения.ТекущиеДанные.ХранитьВерсии;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Приложения.ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОбновленияФайла.Редактирует = Приложения.ТекущиеДанные.Редактирует;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'; en = 'Select file.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка команды "Редактировать" в карточке задачи
Процедура РедактироватьТекущийФайл(Форма, Приложения, ЧислоПредметов = Неопределено) Экспорт
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Приложения", Приложения);
		ПараметрыОбработчика.Вставить("ЧислоПредметов", ЧислоПредметов);
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандРаботыСФайламиПослеРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Приложения.ТекущиеДанные.Ссылка);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'; en = 'Select file.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандРаботыСФайламиПослеРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКомандРаботыСФайлами(ПараметрыВыполнения.Форма, ПараметрыВыполнения.Приложения, 
		ПараметрыВыполнения.ЧислоПредметов);	
	
КонецПроцедуры

// Обработка события Выбор у дерева приложений в карточке задачи
Процедура ДеревоПриложенийВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Форма.Элементы.ДеревоПриложений.ТекущиеДанные;
		ТекущаяСтрока = ТекущиеДанные.Ссылка;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
			
			КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
			Если КакОткрывать = "ОткрыватьКарточку" Тогда
				ПоказатьЗначение(, ТекущаяСтрока);
				Возврат;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				ТекущаяСтрока,
				Неопределено,
				Форма.УникальныйИдентификатор);
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
			ПараметрыОбработчика.Вставить("Форма", Форма);
			ПараметрыОбработчика.Вставить("Элемент", Элемент);
			Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
			
			РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность);
			
		Иначе
			
			ПоказатьЗначение(, ТекущаяСтрока);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("ОбновитьКоманды", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоманды(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКомандРаботыСФайлами(ПараметрыВыполнения.Форма, ПараметрыВыполнения.Элемент);
	
КонецПроцедуры

// Обработка команды Просмотреть в  дереве приложений в карточке задачи
Процедура ОткрытьТекущийФайлДляПросмотра(Форма, Приложения) Экспорт
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Приложения.ТекущиеДанные.Ссылка,
			Неопределено,
			Форма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'; en = 'Select file.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка команды Сохранить как в дереве приложений в карточке задачи
Процедура СохранитьТекущийФайл(Форма, Приложения) Экспорт
	
	Если Приложения.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Приложения.ТекущиеДанные.Ссылка;
	Если Приложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Приложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Приложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 1 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, Форма.УникальныйИдентификатор);
		ИначеЕсли СписокФайловДляВыгрузки.Количество() = 1 Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(СписокФайловДляВыгрузки[0].Значение, Неопределено, Форма.УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, Форма.УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'; en = 'Select file.'"));
		КонецЕсли;
	Иначе
		Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущаяСсылка, Неопределено, Форма.УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, Форма.УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'; en = 'Select file.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Помечает/снимает пометку удаления с бизнес-процессов. В случае если у пользователя нет прав, то
// генерируется исключение.
//
// Параметры:
//	 - СсылкаНаОбъект - УправляемаяФорма - форма объекта из которой следует выполнить действие.
//
Процедура ПометитьНаУдалениеБизнесПроцесс(ФормаОбъекта) Экспорт
	
	Если ТипЗнч(ФормаОбъекта) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаРеквизита = Новый Структура;
	СтруктураПоискаРеквизита.Вставить("Объект", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРеквизита, ФормаОбъекта);
	
	Если ТипЗнч(СтруктураПоискаРеквизита.Объект) <> Тип("ДанныеФормыСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаРеквизита.Очистить();
	СтруктураПоискаРеквизита.Вставить("Ссылка", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРеквизита, ФормаОбъекта.Объект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПоискаРеквизита.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаРеквизита.Очистить();
	СтруктураПоискаРеквизита.Вставить("ПометкаУдаления", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРеквизита, ФормаОбъекта.Объект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПоискаРеквизита.ПометкаУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаОбъекта.Модифицированность Тогда
		
		Если ФормаОбъекта.Объект.ПометкаУдаления Тогда
			ТекстВопроса =
				НСтр("ru = 'Для снятия отметки удаления необходимо записать внесенные вами изменения. Записать данные?'; en = 'To remove the deletion mark it is necessary to save the changes you have made. Save the data?'");
		Иначе
			ТекстВопроса =
				НСтр("ru = 'Для установки отметки удаления необходимо записать внесенные вами изменения. Записать данные?'; en = 'To set the deletion mark it is necessary to save the changes you have made. Save the data?'");
		КонецЕсли;
		
	Иначе
		
		ФормаОбъекта.ЗаблокироватьДанныеФормыДляРедактирования();
		
		Если ФормаОбъекта.Объект.ПометкаУдаления Тогда
			ТекстВопросФормат =
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1""?'");
		Иначе
			ТекстВопросФормат =
				НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'");
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстВопросФормат,
			Строка(ФормаОбъекта.Объект.Ссылка));
		
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПометитьНаУдалениеБизнесПроцессЗавершение", ЭтотОбъект, ФормаОбъекта);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеБизнесПроцессЗавершение(Ответ, ФормаОбъекта) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаОбъекта.Модифицированность Тогда
		ФормаОбъекта.Записать();
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.ПометитьНаУдалениеБизнесПроцесс(
		ФормаОбъекта.Объект.Ссылка);
		
	Оповестить("БизнесПроцессИзменен", ФормаОбъекта.Объект.Ссылка);
	
	ОповеститьОбИзменении(ФормаОбъекта.Объект.Ссылка);
	
КонецПроцедуры

// Обработка команды ЗаписатьИЗакрыть в форме процесса
Процедура ЗаписатьИЗакрыть(Команда, Форма) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
	
	Если Форма.Записать(ПараметрыЗаписи) Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Общие функции и процедуры для механизма бизнес-процесса "Исполнение"

// Возвращает структуру с доступными действиями для строки таблицы
//
// Параметры:
//   СтрокаТаблицы - текущие данные динамического списка
//
// Возвращаемое значение:
//   Структура - доступные действия над процессом текущей строки
//      Остановить - Булево - признак того что текущий процесс можно остановить
//      Продолжить - Булево - признак того что текущий процесс можно продолжить (сделать активным)
//
Функция ДоступныеДействияПоИзменениюСостоянияПроцесса(СтрокаТаблицы) Экспорт
	
	ДоступныеДействия = Новый Структура;
	ДоступныеДействия.Вставить("Остановить", Ложь);
	ДоступныеДействия.Вставить("Продолжить", Ложь);
	
	Если СтрокаТаблицы.Завершен
		ИЛИ НЕ СтрокаТаблицы.Стартован
		ИЛИ СтрокаТаблицы.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка")
		ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ВедущаяЗадача) Тогда
		
		ДоступныеДействия.Остановить = Ложь;
		ДоступныеДействия.Продолжить = Ложь;
		
	ИначеЕсли СтрокаТаблицы.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен") Тогда
			
		ДоступныеДействия.Остановить = Истина;
		ДоступныеДействия.Продолжить = Ложь;
		
	ИначеЕсли СтрокаТаблицы.Состояние = 
		ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		
		ДоступныеДействия.Остановить = Ложь;
		ДоступныеДействия.Продолжить = Истина;
		
	КонецЕсли;
	
	Возврат ДоступныеДействия;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКнопокИзмененияСостоянияПроцессов(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ДоступныеДействия = Новый Структура;
		ДоступныеДействия.Вставить("Остановить", Истина);
		ДоступныеДействия.Вставить("Продолжить", Истина);
		
	Иначе
		ДоступныеДействия = 
			ДоступныеДействияПоИзменениюСостоянияПроцесса(ТекущиеДанные);
	КонецЕсли;
	
	Форма.Элементы.СписокОстановить.Доступность = ДоступныеДействия.Остановить;
	Форма.Элементы.СписокПродолжитьБизнесПроцесс.Доступность = ДоступныеДействия.Продолжить;
	
	Форма.Элементы.СписокКонтекстноеМенюОстановить.Доступность = ДоступныеДействия.Остановить;
	Форма.Элементы.СписокКонтекстноеМенюПродолжитьБизнесПроцесс.Доступность = ДоступныеДействия.Продолжить;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПроцессовИЗадач

// Открывает процесс или задачу соответствующую текущей строке дерева процессов и задач.
//
// Параметры:
//   Форма - УправляемаяФорма - форма с деревом процессов и задач.
//
Процедура ОткрытьТекущуюСтрокуДереваЗадач(Форма)
	
	Если Форма.Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка) = 
				Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			БизнесПроцессыИЗадачиКлиент.
				ОткрытьФормуВыполненияЗадачи(Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		Иначе
			ПоказатьЗначение(, Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Открывает текущую задачу списка СписокАктивныхЗадач
//
// Параметры:
//   Форма - УправляемаяФорма - форма с списком активных задач.
//
Процедура ОткрытьЗадачуСпискаАктивныхЗадач(Форма)
	
	Если Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти
