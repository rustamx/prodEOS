////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура обновляет отображение текущей записи календаря в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура ОбновитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	ТекущаяЗаписьВПериодеОтображения = ВПериодеОтображенияПланировщика(
		Планировщик,
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	
	Если Не ТекущаяЗаписьВПериодеОтображения Тогда
		РаботаСРабочимКалендаремСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	Иначе
		ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения);
		ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает текущую запись календаря в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//  Ссылка - СправочникСсылка.ЗаписиРабочегоКалендаря - Ссылка.
//  ДатаНачала - Дата - Дата начала.
//  ДатаОкончания - Дата - Дата окончания.
//
Процедура ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Формирует структуру элемента текущей записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементТекущейЗаписиКалендаря(ДатаНачала, ДатаОкончания) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЭлементЗаписиКалендаря.ДатаНачала = ДатаНачала;
	ЭлементЗаписиКалендаря.ДатаОкончания = ДатаОкончания;
	ЭлементЗаписиКалендаря.ЭтоТекущаяЗапись = Истина;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Устанавливает шкалу времени планировщика в соответсвии с персональными настройками.
//
Процедура УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		ШкалаВремениЧас.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениЧас.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
		ШкалаВремениМинута.Формат = "";
		ШкалаВремениМинута.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениМинута.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ddd, d MMM yyyy'";
		ШкалаВремени.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремени.ЦветФона = Новый Цвет();
		
	КонецЕсли;
	
КонецПроцедуры

// Применяет настройки отображения планировщика.
//
Процедура ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьВремяС = НастройкиОтображения.ОтображатьВремяС;
	ОтображатьВремяПо = НастройкиОтображения.ОтображатьВремяПо;
	
	// Заполнение текущих периодов отображения
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
		
	КонецЦикла;
	
	// Рассчет отображаемых часов
	Если НастройкиОтображения.ОтображатьСкрытыеЭлементы Тогда
		Для Каждого Событие Из Планировщик.Элементы Цикл
			
			Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Событие.Значение.ВесьДень Тогда
				Продолжить;
			КонецЕсли;
			
			// Определяем час начала и окончания.
			// Если окончание приходится на начало дня - то час окончания 24.
			ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
			ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
			
			// Определяем минимальное время для отображения.
			// Час начала берем как есть.
			// Час окончания берем предыдущий.
			МинВремя = Мин(ЧасНачала, Макс(ЧасОкончания - 1, 0));
			Если МинВремя < ОтображатьВремяС Тогда
				ОтображатьВремяС = МинВремя;
			КонецЕсли;
			
			// Определеяем максимальное время для отображения.
			// Час начала берем следующий.
			// Час окончания берем как есть, если час окончания приходится на начало часа, иначе следующий.
			СмещениеЧасаОкончания = ?(Событие.Конец = НачалоЧаса(Событие.Конец), 0, 1);
			МаксВремя = Макс(Мин(ЧасНачала + 1, 24), Мин(ЧасОкончания + СмещениеЧасаОкончания, 24));
			ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
			Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
				ОтображатьВремяПо = 24 - МаксВремя;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Настройки общие для всех периодов отображения
	Планировщик.ОтображениеВремениЭлементов = НастройкиОтображения.НастройкаОтображениеВремениЭлементов;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
	
	// Фон календаря.
	ДобавитьФонКалендаря(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
	// Настройки специфичные для периода отображения
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		// Планировщик по часам
		Планировщик.ОтображатьТекущуюДату = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ЦветФона = Новый Цвет();
		
		// Планировщик по дням
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		
	КонецЕсли;
	
	// Шкала времени
	УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения);
	
	// Измерение Пользователь
	Планировщик.Измерения.Очистить();
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		Если НастройкиОтображения.Пользователи.Количество() > 1 Тогда
			ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Пользователь");
			Для Каждого Пользователь Из НастройкиОтображения.Пользователи Цикл
				ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(Пользователь);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли НастройкиОтображения.ОтображатьЗанятость Тогда
		ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Пользователь");
		ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить("Общее");
		Для Каждого Пользователь Из НастройкиОтображения.Пользователи Цикл
			ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(Пользователь);
		КонецЦикла;
	КонецЕсли;
	
	// Выделение текущего дня.
	ДобавитьФонТекущегоДня(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
КонецПроцедуры

// Корректирует дату начала и окончания события с учетом настройки "Весь день" и пустых дат.
Процедура СкорректироватьДатуНачалаИОкончания(
	ДатаНачала,
	ДатаОкончания,
	ВесьДень,
	НачальноеЗначениеДатаНачала = Неопределено,
	НачальноеЗначениеДатаОкончания = Неопределено,
	СохранятьДлительностьПриПереносеДатыОкончания = Ложь,
	ИзменилсяВесьДень = Ложь,
	СохранятьДлительностьПриПереносеДатыНачалаВПределахДня = Истина,
	ДлительностьСобытияПоУмолчанию = 3600,
	ИзменятьДатуНачалаИОкончания = Истина) Экспорт
	
	// Очистка времени
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени начала
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
		И ДатаНачала <> НачальноеЗначениеДатаНачала
		И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаОкончания = ДатаНачала;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени окончания
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
		И ДатаОкончания <> НачальноеЗначениеДатаОкончания
		И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ДатаОкончания;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	Если ИзменятьДатуНачалаИОкончания Тогда
		
		// Сохранение длительность при переносе дата начала.
		Если СохранятьДлительностьПриПереносеДатыНачалаВПределахДня Тогда
			Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
				И ДатаНачала <> НачальноеЗначениеДатаНачала
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаОкончания = ДатаНачала + НачальнаяДлительность;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
				И НачалоДня(ДатаНачала) <> НачалоДня(НачальноеЗначениеДатаНачала)
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаОкончания = ДатаНачала + НачальнаяДлительность;
			КонецЕсли;
		КонецЕсли;
		
		Если ВесьДень Тогда
			
			Если ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = КонецДня(ДатаНачала);
			ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаНачала = НачалоДня(ДатаОкончания);
			КонецЕсли;
			
			Если ДатаНачала <> НачалоДня(ДатаНачала) Тогда
				ДатаНачала = НачалоДня(ДатаНачала);
			КонецЕсли;
			
			Если ДатаОкончания <> КонецДня(ДатаОкончания) Тогда
				ДатаОкончания = КонецДня(ДатаОкончания);
			КонецЕсли;
			
		Иначе
			
			Если ИзменилсяВесьДень Тогда
				ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
			ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
			ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				Если ДатаОкончания = НачалоДня(ДатаОкончания) Тогда
					ДатаНачала = НачалоДня(ДатаОкончания);
					ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
				Иначе
					ДатаНачала = ДатаОкончания - ДлительностьСобытияПоУмолчанию;
				КонецЕсли;
			ИначеЕсли СохранятьДлительностьПриПереносеДатыОкончания
				И ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
				И ДатаОкончания <> НачальноеЗначениеДатаОкончания
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаНачала = ДатаОкончания - НачальнаяДлительность;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачальноеЗначениеДатаНачала = ДатаНачала;
	НачальноеЗначениеДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

// Возвращает дату приведенную к началу периода отображения календаря
Функция ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
			ДатаНачалаПериода = НачалоДня(Дата) - 2 * 86400; // 86400 - число секунд в сутках
		Иначе
			ДатаНачалаПериода = НачалоДня(Дата);
		КонецЕсли;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	КонецЕсли;
	
	Возврат ДатаНачалаПериода;
	
КонецФункции

// Возвращает дату приведенную к концу периода отображения календаря
Функция ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата) + 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 6 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 2 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаОкончанияПериода = (НачалоДня(Дата) - 1) + 604800; // 604800 - число секунд в неделе
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции

// Возвращает дату приведенную к началу следующего периода отображения календаря
Функция ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаСледующегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаСледующегоПериода = КонецДня(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаСледующегоПериода = КонецНедели(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаСледующегоПериода = КонецМесяца(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаСледующегоПериода;
	
КонецФункции

// Возвращает дату приведенную к началу предыдущего периода отображения календаря
Функция ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПредыдущегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(НачалоДня(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(НачалоНедели(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоМесяца(НачалоМесяца(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата) - 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПредыдущегоПериода;
	
КонецФункции

// Приводит переданную дату к началу получаса
Функция НачалоПолучаса(Дата) Экспорт
	
	НачалоПолучаса = НачалоЧаса(Дата);
	
	Если Дата - НачалоПолучаса >= 1800 Тогда
		
		НачалоПолучаса = НачалоПолучаса + 1800;
		
	КонецЕсли;
	
	Возврат НачалоПолучаса;
	
КонецФункции

// Приводит переданную дату к концу получаса
Функция КонецПолучаса(Дата) Экспорт
	
	Если Дата = НачалоЧаса(Дата) ИЛИ Дата = (НачалоЧаса(Дата) + 1800) Тогда
		Возврат Дата;
	КонецЕсли;
	
	КонецПолучаса = КонецЧаса(Дата) + 1;
	
	Если КонецПолучаса - Дата > 1800 Тогда
		
		КонецПолучаса = КонецПолучаса - 1800;
		
	КонецЕсли;
	
	Возврат КонецПолучаса;
	
КонецФункции

// Возвращает массив времен по часам внутри дня
Функция ПолучитьМассивВремен() Экспорт
	
	МассивВремен = Новый Массив;
	
	Дата = Дата(1,1,2);
	
	Для Итератор = 1 По 24 Цикл
		МассивВремен.Добавить(Формат(Дата, "ДФ = 'HH:mm'"));
		Дата = Дата + 3600;
	КонецЦикла;
	
	Возврат МассивВремен;
	
КонецФункции

// Преобразует переданную к дате и время текстом к дате и времени
Функция ПреобразоватьТекстКДате(Дата, Знач ТекстВремя) Экспорт
	
	ТекстВремя = СтрЗаменить(ТекстВремя, " ", "0");
	ДлинаТекстаВремени = СтрДлина(ТекстВремя);
	
	Если ДлинаТекстаВремени = 0 ИЛИ ДлинаТекстаВремени > 5 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	ТекстВремяВФормате = Неопределено;
	
	Если КодСимвола(ПервыйСимвол) = КодСимвола("0") ИЛИ КодСимвола(ПервыйСимвол) = КодСимвола("1") Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ложь);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола("2")Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Истина);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) >= КодСимвола("3") И КодСимвола(ПервыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = "0" + ПервыйСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "00";
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПервыйСимвол) Тогда
		
		ТекстВремяВФормате = "0000";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВремя) Тогда
		ТекстВремяВФормате = Неопределено;
	КонецЕсли;
	
	Если ТекстВремяВФормате = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстВремяВФормате = "00010101" + ТекстВремяВФормате + "00";
	Время = Дата(ТекстВремяВФормате);
	Результат = НачалоДня(Дата) + Час(Время) * 3600 + Минута(Время) * 60;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает развернутость событий весь день в календаре
Процедура УстановитьРазвернутостьСобытийВесьДень(Календарь, СвернутьСобытияВесьДеньВКалендаре) Экспорт
	
	Попытка
		
		Если СвернутьСобытияВесьДеньВКалендаре Тогда
			Календарь.Область("ПодписьСобытияВсегоДня").Видимость = Истина;
			Календарь.Область("СобытияВсегоДня").Видимость = Ложь;
		Иначе
			Календарь.Область("ПодписьСобытияВсегоДня").Видимость = Ложь;
			Календарь.Область("СобытияВсегоДня").Видимость = Истина;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Возвращает текстовое представление повторения
Функция ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Не повторять'; en = 'Do not repeat'");
		Возврат ПредставлениеПовторения;
		
	ИначеЕсли НастройкиПовторения.ИнтервалПовторения > 1 Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения);
		ПредставлениеПовторения = СтрШаблон(НСтр("ru = 'Каждые %1 %2'; en = 'Every %1 %2'"),
				НастройкиПовторения.ИнтервалПовторения,
				ПредставлениеЕдиницыИзмеренияИнтервалаПовторения);
				
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый день'; en = 'Every day'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждую неделю'; en = 'Every week'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый месяц'; en = 'Every month'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый год'; en = 'Every year'");
		
	КонецЕсли;
	
	СимволТире = " – ";
	Если НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		Если НастройкиПовторения.ПовторениеПоДнямНедели[1]
			И НастройкиПовторения.ПовторениеПоДнямНедели[2]
			И НастройкиПовторения.ПовторениеПоДнямНедели[3]
			И НастройкиПовторения.ПовторениеПоДнямНедели[4]
			И НастройкиПовторения.ПовторениеПоДнямНедели[5]
			И НастройкиПовторения.ПовторениеПоДнямНедели[6]
			И НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + НСтр("ru = 'во все дни'; en = 'on all days'");
			
		ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНедели[1]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[2]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[3]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[4]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[5]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[6]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеДнейНедели = "";
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[1] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в понедельник'; en = 'on Monday'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[2] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'во вторник'; en = 'on Tuesday'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[3] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в среду'; en = 'on Wednesday'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[4] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в четверг'; en = 'on Thursday'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[5] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в пятницу'; en = 'on Friday'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[6] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в субботу'; en = 'on Saturday'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в воскресенье'; en = 'on Sunday'"));
			КонецЕсли;
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДнейНедели;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		Если ЗначениеЗаполнено(НастройкиПовторения.ПовторениеПоДнямМесяца) Тогда
			
			ПредставлениеДняМесяца = СтрШаблон(НСтр("ru = '%1-го числа'; en = 'on %1 day of the month'"),
				НастройкиПовторения.ПовторениеПоДнямМесяца);
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняМесяца;
			
		Иначе
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 1 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'понедельник'; en = 'monday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'; en = 'last'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 2 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'вторник'; en = 'tuesday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'; en = 'last'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 3 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'среда'; en = 'wednesday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'; en = 'last'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 4 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'четверг'; en = 'thursday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'; en = 'last'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 5 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'пятница'; en = 'friday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'; en = 'last'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 6 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'суббота'; en = 'saturday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'; en = 'last'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 7 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'воскресенье'; en = 'sunday'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последнее'; en = 'last'");
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения <> -1 Тогда
				ПредставлениеПорядкаДняНеделиМесяца =
					Строка(НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения);
			КонецЕсли;
			
			ПредставлениеДняНеделиМесяца = СтрШаблон(НСтр("ru = '%1 %2'; en = '%1 %2'"),
				ПредставлениеПорядкаДняНеделиМесяца,
				ПредставлениеДняНедели);
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняНеделиМесяца;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		МесяцДень = Дата(1,НастройкиПовторения.ПовторениеПоМесяцам, НастройкиПовторения.ПовторениеПоДнямМесяца);
		ПредставлениеДняГода = Формат(МесяцДень, "ДФ='d MMMM'");
		
		ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняГода;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПовторения.КоличествоПовторов) 
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ПослеЧислаПовторов") Тогда
		
		ПредставлениеРаз = НСтр("ru = 'раз'; en = 'times'") + "," + НСтр("ru = 'раза'; en = 'times'") + "," + НСтр("ru = 'раз'; en = 'times'");
		ПредставлениеКоличестваПовторов = 
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				НастройкиПовторения.КоличествоПовторов, ПредставлениеРаз);
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеКоличестваПовторов;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиПовторения.ДатаОкончанияПовторения)
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ДоДаты") Тогда
		
		ПредставлениеДо = СтрШаблон(НСтр("ru = 'до %1'; en = 'until %1'"),
			Формат(НастройкиПовторения.ДатаОкончанияПовторения, "ДЛФ=DD"));
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеДо;
		
	КонецЕсли;
	
	Возврат ПредставлениеПовторения;
	
КонецФункции

// Возвращает текстовое представление единицы измерения интервала повторения
Функция ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеДней = НСтр("ru = 'день'; en = 'day'") + "," + НСтр("ru = 'дня'; en = 'days'") + "," + НСтр("ru = 'дней'; en = 'days'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеДней);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеНедель = НСтр("ru = 'неделя'; en = 'week'") + "," + НСтр("ru = 'недели'; en = 'weeks'") + "," + НСтр("ru = 'недель'; en = 'weeks'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеНедель);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеМесяцев = НСтр("ru = 'месяц'; en = 'month'") + "," + НСтр("ru = 'месяца'; en = 'months'") + "," + НСтр("ru = 'месяцев'; en = 'months'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеМесяцев);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеЛет = НСтр("ru = 'год'; en = 'year'") + "," + НСтр("ru = 'года'; en = 'year'") + "," + НСтр("ru = 'лет'; en = 'years'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеЛет);
		
	КонецЕсли;
	
	Возврат ПредставлениеЕдиницыИзмеренияИнтервалаПовторения;
	
КонецФункции

// Возвращает структуру настройки повторения
Функция ПолучитьСтруктуруНастройкиПовторения(
	ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
	КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
	ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам) Экспорт
	
	НастройкиПовторения = Новый Структура;
	НастройкиПовторения.Вставить("ЧастотаПовторения", ЧастотаПовторения);
	НастройкиПовторения.Вставить("ИнтервалПовторения", ИнтервалПовторения);
	НастройкиПовторения.Вставить("ПравилоОкончанияПовторения", ПравилоОкончанияПовторения);
	НастройкиПовторения.Вставить("КоличествоПовторов", КоличествоПовторов);
	НастройкиПовторения.Вставить("ДатаОкончанияПовторения", ДатаОкончанияПовторения);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНедели", ПовторениеПоДнямНедели);
	НастройкиПовторения.Вставить("ПовторениеПоДнямМесяца", ПовторениеПоДнямМесяца);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНеделиВМесяце", ПовторениеПоДнямНеделиВМесяце);
	НастройкиПовторения.Вставить("ПовторениеПоМесяцам", ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

// Возвращает день недели в месяце
Функция ПолучитьДеньНеделиВМесяце(Дата, СУчетомПоследнего = Истина) Экспорт
	
	ДеньНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
	
	ДеньНеделиВМесяце.ДеньНедели = ДеньНедели(Дата);
	
	НомерНеделиСНачалаМесяца = Цел((Дата - (НачалоМесяца(Дата))) / 604800) + 1; // 604800 - число секунд в неделе
	ДеньНеделиВМесяце.НомерВхождения = НомерНеделиСНачалаМесяца;
	
	Если СУчетомПоследнего Тогда
		НомерНеделиСКонцаМесяца = Цел((КонецМесяца(Дата) - Дата) / 604800) + 1; // 604800 - число секунд в неделе
		Если НомерНеделиСКонцаМесяца = 1 Тогда
			ДеньНеделиВМесяце.НомерВхождения = -1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДеньНеделиВМесяце;
	
КонецФункции

// Возвращает пустое HTML представление
Функция ПолучитьПустоеHTMLПредставление() Экспорт
	
	Возврат "<html><body scroll=auto></body></html>";
	
КонецФункции

// Возвращает первую непустую строку
Функция ВыделитьПервуюСтрокуОписания(Описание) Экспорт
	
	Результат = СокрЛ(Описание);
	Результат = СтрПолучитьСтроку(Результат, 1);
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание без первой строки.
//
// Параметры:
//  Описание - Строка - Обрабатываемое описание.
//
// Возвращаемое значение:
//  Строка - Описание без первой строки.
//
Функция ВыделитьОписаниеБезПервойСтроки(Описание) Экспорт
	
	Результат = СокрЛП(Описание);
	Результат = СтрРазделить(Результат, Символы.ПС);
	Если Результат.Количество() <> 0 Тогда
		Результат.Удалить(0);
	КонецЕсли;
	Результат = СтрСоединить(Результат, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

// Возвращает промежуток времени строкой
Функция ПолучитьПромежутокВремениСтрокой(ВремяНачала, ВремяОкончания, ДеньНедели = Неопределено) Экспорт
	
	ПромежутокВремениСтрокой = "";
	
	Если ДеньНедели <> Неопределено Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ПромежутокВремениСтрокой, " ",
			ТРег(ПолучитьДеньНеделиСтрокой(ДеньНедели)));
	КонецЕсли;
	
	ВремяНачалаСтрокой = Формат(ВремяНачала, "ДФ=ЧЧ:мм; ДП=00:00");
	Если ВремяОкончания <> Дата("00010101235959") Тогда
		ВремяОкончанияСтрокой = Формат(ВремяОкончания, "ДФ=ЧЧ:мм; ДП=00:00");
	Иначе
		ВремяОкончанияСтрокой = "00:00";
	КонецЕсли;
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(ПромежутокВремениСтрокой, " ",
		ВремяНачалаСтрокой + " - " + ВремяОкончанияСтрокой);
	
	Возврат ПромежутокВремениСтрокой;
	
КонецФункции

// Возвращает день недели строкой
Функция ПолучитьДеньНеделиСтрокой(ДеньНедели) Экспорт
	
	ДатаДняНедели = Дата(1,1,2 + ДеньНедели); // Дата(1,1,3) - понедельник
	Возврат Формат(ДатаДняНедели,"ДФ=дддд");
	
КонецФункции

// Заменяет повторное вхождение символа на одиночное
Функция СократитьПовторноеВхождениеСимвола(Текст, Символ) Экспорт
	
	ВременныйТекст = Текст;
	
	ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	Пока ПозицияДвойногоСимвола <> 0 Цикл
		ВременныйТекст = СтрЗаменить(ВременныйТекст, Символ + Символ, Символ);
		ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	КонецЦикла;
	
	Возврат ВременныйТекст;
	
КонецФункции

// Проверяет образуют ли переданные даты корректный период календаря
Функция ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Экспорт
	
	Возврат ЗначениеЗаполнено(ДатаНачала)
		И ЗначениеЗаполнено(ДатаОкончания)
		И ДатаНачала < ДатаОкончания;
	
КонецФункции

// Формирует представление даты записи календаря
Функция ПолучитьПредставлениеДаты(ДатаНачала, ДатаОкончания, ВесьДень) Экспорт
	
	ПредставлениеДаты = "";
	
	ТекстВремя = Формат(ДатаНачала, "ДФ=ЧЧ:мм") + " - " + Формат(ДатаОкончания, "ДФ=ЧЧ:мм");
	ТекстДата = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	
	Если ВесьДень Тогда
		ТекстДатаНачала = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг'");
		ТекстДатаОкончания = Формат(ДатаОкончания, "ДФ='дддд, д ММММ гггг'");
	Иначе
		ТекстДатаНачала = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
		ТекстДатаОкончания = Формат(ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	КонецЕсли;
	
	Если НачалоДня(ДатаНачала) - НачалоДня(ДатаОкончания) <> 0 Тогда
		ПредставлениеДаты = ТекстДатаНачала + " - " + ТекстДатаОкончания;
	ИначеЕсли ВесьДень Тогда
		ПредставлениеДаты = ТекстДата;
	Иначе
		ПредставлениеДаты = ТекстДата + ", " + ТекстВремя;
	КонецЕсли;
	
	Возврат ТРег(ПредставлениеДаты);
	
КонецФункции

// Формирует структуру времени
Функция СформироватьВремя(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ВесьДень = Неопределено) Экспорт
	
	Время = Новый Структура("ДатаНачала, ДатаОкончания, ВесьДень");
	Время.ДатаНачала = ДатаНачала;
	Время.ДатаОкончания = ДатаОкончания;
	Время.ВесьДень = ВесьДень;
	
	Возврат Время;
	
КонецФункции

// Получает индекс цвета в коллекции КоллекцияЦветов.
//
// Параметры:
//  Цвет - ПеречислениеСсылка.ЦветаРабочегоКалендаря - Цвет, индекс которого необходимо получить.
//
// Возвращаемое значение:
//  Число - Индекс цвета в коллекции.
//
Функция ПолучитьИндексЦвета(Цвет) Экспорт
	
	ИндексЦвета = 0;
	
	Если Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет") Тогда
		ИндексЦвета = 0;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ИндексЦвета = 1;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ИндексЦвета = 2;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ИндексЦвета = 3;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ИндексЦвета = 4;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ИндексЦвета = 5;
	КонецЕсли;
	
	Возврат ИндексЦвета;
	
КонецФункции

// Возвращает период отображения с учетом настроек отображения.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//
Функция ПолучитьПериодОтображения(НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ВыделенныеДаты.Количество() > 1 Тогда
		Если НастройкиОтображения.ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень");
		Иначе
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		КонецЕсли;
	Иначе
		ПериодОтображения = НастройкиОтображения.ПериодОтображения;
	КонецЕсли;
	
	Возврат ПериодОтображения;
	
КонецФункции

// Возвращает выделенные даты в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - Выделеныне даты.
//
Функция ПолучитьВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции

// Возвращает необходимость отображения занятости в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Булево - Необходимость отображения занятости в планировщике.
//
Функция ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	
	ОтобразитьЗанятостьВДне =
		(НастройкиОтображения.ОтображатьЗанятость
			И ((ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели"))))
		Или НастройкиОтображения.ОтображатьОбщуюЗанятость;
	
	Возврат ОтобразитьЗанятостьВДне;
	
КонецФункции

// Возвращает общую дату начала.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаНачалаОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаНачалаОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаНачалаОбщая = Неопределено Тогда
			ДатаНачалаОбщая = ОтображаемаяДатаНачала;
		Иначе
			ДатаНачалаОбщая = Мин(ДатаНачалаОбщая, ОтображаемаяДатаНачала);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаНачалаОбщая;
	
КонецФункции

// Возвращает общую дату окончания.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаОкончанияОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаОкончанияОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаОкончанияОбщая = Неопределено Тогда
			ДатаОкончанияОбщая = ОтображаемаяДатаОкончания;
		Иначе
			ДатаОкончанияОбщая = Макс(ДатаОкончанияОбщая, ОтображаемаяДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОкончанияОбщая;
	
КонецФункции

// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЗаполнитьЗначенияСвойств(ЭлементЗаписиКалендаря, ЗаписьКалендаря);
	
	Если ЗаписьКалендаря.ТипЗаписиКалендаря
			= ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
		ЭлементЗаписиКалендаря.ВидЭлемента =
			ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся");
	КонецЕсли;
	ЭлементЗаписиКалендаря.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачала;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Проверяет что переданное значение является элементов записи календаря.
//
// Параметры:
//  ЭлементЗаписиКалендаря - Структура - Проверяемое значение
//
// Возвращаемое значение:
//  Булево - Переданное значение является элементом записи календаря.
//
Функция ЭтоЭлементЗаписиКалендаря(ЭлементЗаписиКалендаря) Экспорт
	
	Если ТипЗнч(ЭлементЗаписиКалендаря) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементЗаписиКалендаря.Свойство("Ссылка")
		И ЭлементЗаписиКалендаря.Свойство("ДатаНачала")
		И ЭлементЗаписиКалендаря.Свойство("ДатаОкончания")
		И ЭлементЗаписиКалендаря.Свойство("ВесьДень")
		И ЭлементЗаписиКалендаря.Свойство("ТипЗаписиКалендаря")
		И ЭлементЗаписиКалендаря.Свойство("ПометкаУдаления")
		И ЭлементЗаписиКалендаря.Свойство("Пользователь")
		И ЭлементЗаписиКалендаря.Свойство("ВидЭлемента")
		И ЭлементЗаписиКалендаря.Свойство("ДатаНачалаИсходная")
		И ЭлементЗаписиКалендаря.Свойство("УникальныйИдентификатор");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает второй символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ограничение)
	
	ВторойСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("9") И НЕ Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("3") И Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "0" + ТекстВремяВФормате;
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВторойСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "000";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает третий символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ТретийСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ТретийСимвол) >= КодСимвола("0") И КодСимвола(ТретийСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ТретийСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ТретийСимвол) >= КодСимвола("6") И КодСимвола(ТретийСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ТретийСимвол;
		
	ИначеЕсли КодСимвола(ТретийСимвол) = КодСимвола(":") Тогда
		
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТретийСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает четвертый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ЧетвертыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ЧетвертыйСимвол) >= КодСимвола("0") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ЧетвертыйСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ЧетвертыйСимвол) >= КодСимвола("6") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ЧетвертыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ЧетвертыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает пятый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ПятыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ПятыйСимвол) >= КодСимвола("0") И КодСимвола(ПятыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ПятыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПятыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляем в интервалы фона фон текущего дня.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонТекущегоДня(ИнтервалыФона, НастройкиОтображения)
	
	ИнтервалыФонаТекущегоДня = Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня = Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня.Добавить(
		СформироватьВремяИнтервалаФона(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата())));
	
	Пока ВозможныеИнтервалыФонаТекущегоДня.Количество() <> 0 Цикл
		
		ВозможыйИнтервалФона = ВозможныеИнтервалыФонаТекущегоДня[0];
		
		ЕстьПересечения = Ложь;
		Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
			
			// Интервал фона пустой.
			Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона до текущего дня.
			Если ИнтервалФона.Конец <= ВозможыйИнтервалФона.Начало Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона после текущего дня.
			Если ИнтервалФона.Начало >= ВозможыйИнтервалФона.Конец Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПересечения = Истина;
			
			// Интервал фона покрывает текущий день.
			Если ИнтервалФона.Начало <= ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец >= ВозможыйИнтервалФона.Конец Тогда
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает начало текущего дня.
			Если ИнтервалФона.Начало <= ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможыйИнтервалФона.Конец));
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает конец текущего дня.
			Если ИнтервалФона.Начало > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможыйИнтервалФона.Конец
				И ИнтервалФона.Конец >= ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможыйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
			// Интервал фона входит в текущий день.
			Если ИнтервалФона.Начало > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможыйИнтервалФона.Конец
				И ИнтервалФона.Конец > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможыйИнтервалФона.Конец));
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможыйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьПересечения Тогда
			ИнтервалыФонаТекущегоДня.Добавить(ВозможыйИнтервалФона);
		КонецЕсли;
		
		ВозможныеИнтервалыФонаТекущегоДня.Удалить(0);
		
	КонецЦикла;
	
	Для Каждого ИнтервалФона Из ИнтервалыФонаТекущегоДня Цикл
		ФонТекущегоДня = ИнтервалыФона.Добавить(
			ИнтервалФона.Начало, ИнтервалФона.Конец);
		ФонТекущегоДня.Цвет = НастройкиОтображения.ЦветФонаТекущегоДня;
	КонецЦикла;
	
КонецПроцедуры

// Добавляем в интервалы фона фон календаря.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонКалендаря(ИнтервалыФона, НастройкиОтображения)
	
	Если НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаОбщая = ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	Если ДатаНачалаОбщая = Неопределено Или ДатаОкончанияОбщая = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
		
		// Интервал фона пустой.
		Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя
			И ИнтервалФона.Начало = ДатаНачалаОбщая
			И ИнтервалФона.Конец = ДатаОкончанияОбщая Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ФонПланировщика = ИнтервалыФона.Добавить(ДатаНачалаОбщая, ДатаОкончанияОбщая);
	ФонПланировщика.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя;
	
КонецПроцедуры

// Формирует структуру времени интервала фона.
//
// Параметры:
//  Начало	 - Дата	 - Начало времени интервала фона.
//  Конец	 - Дата	 - Конец времени интервала фона.
// 
// Возвращаемое значение:
//  Структура - Структура времени интервала фона.
//
Функция СформироватьВремяИнтервалаФона(Начало, Конец)
	
	Время = Новый Структура("Начало, Конец");
	Время.Начало = Начало;
	Время.Конец = Конец;
	
	Возврат Время;
	
КонецФункции

// Проверяет, что переданный период находится в периоде отображения планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  ДатаНачала - Дата - Дата начала.
//  ДатаОкончания - Дата - Дата окончания.
//
// Возвращаемое значение:
//  Булево - Период в периоде отображения планировщика.
//
Функция ВПериодеОтображенияПланировщика(Планировщик, ДатаНачала, ДатаОкончания)
	
	ВПериодеОтображенияПланировщика = ДатаНачала >= Планировщик.НачалоПериодаОтображения
		И ДатаОкончания <= Планировщик.КонецПериодаОтображения;
	
	Возврат ВПериодеОтображенияПланировщика;
	
КонецФункции

// Добавляет элемент текущей записи в планировщик.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	Если НастройкиОтображения.ТекущаяЗаписьВесьДень Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.Значение = СформироватьЭлементТекущейЗаписиКалендаря(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.ЦветФона = НастройкиОтображения.ЦветКалендаряТекущаяЗапись;
	ЭлементПланировщика.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = НастройкиОтображения.ЦветРамкиТекущаяЗапись;
	ЭлементПланировщика.Текст = НСтр("ru = 'Текущая запись календаря'; en = 'Current calendar entry'");
	
КонецПроцедуры

// Формирует структуру элемента записи календаря.
// 
// Возвращаемое значение:
//  Структура - Элемент записи календаря.
//
Функция НовыйЭлементЗаписиКалендаря()
	
	ЭлементЗаписиКалендаря = Новый Структура;
	
	ЭлементЗаписиКалендаря.Вставить("Ссылка",
		ПредопределенноеЗначение("Справочник.ЗаписиРабочегоКалендаря.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачала", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ДатаОкончания", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ВесьДень", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ТипЗаписиКалендаря",
		ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.Событие"));
	ЭлементЗаписиКалендаря.Вставить("ПометкаУдаления", Ложь);
	ЭлементЗаписиКалендаря.Вставить("Пользователь",
		ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("Предмет", Неопределено);
	ЭлементЗаписиКалендаря.Вставить("Связанная", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ЭтоТекущаяЗапись", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ВидЭлемента",
		ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Удаляет элемент текущей записи из планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ЭлементПланировщика = Планировщик.Элементы[КоличествоЭлементов - Индекс];
		Если ЭлементПланировщика.Значение.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка 
			Или ЭлементПланировщика.Значение.ЭтоТекущаяЗапись Тогда
			Планировщик.Элементы.Удалить(ЭлементПланировщика);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
