
#Область ПрограммныйИнтерфейс

// Возвращает структуру, содержащую персональные настройки работы с файлами.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПоказыватьЗанятыеФайлыПриЗавершенииРаботы        - Булево - Существует, только если внедрена подсистема Работа с файлами.
//    * СпрашиватьРежимРедактированияПриОткрытииФайла    - Булево - Существует, только если внедрена подсистема Работа с файлами.
//    * ПоказыватьКолонкуРазмер                          - Булево - Существует, только если внедрена подсистема Работа с файлами.
//    * ДействиеПоДвойномуЩелчкуМыши                     - Строка - Существует, только если внедрена подсистема Работа с файлами.
//    * СпособСравненияВерсийФайлов                      - Строка - Существует, только если внедрена подсистема Работа с файлами.
//    * ГрафическиеСхемыРасширение                       - Строка - 
//    * ГрафическиеСхемыСпособОткрытия                   - ПеречислениеСсылка.СпособыОткрытияФайлаНаПросмотр -
//    * ТекстовыеФайлыРасширение                         - Строка - 
//    * ТекстовыеФайлыСпособОткрытия                     - ПеречислениеСсылка.СпособыОткрытияФайлаНаПросмотр -
//    * МаксимальныйРазмерЛокальногоКэшаФайлов           - Число - 
//    * ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов    - Булево - 
//    * ПоказыватьИнформациюЧтоФайлНеБылИзменен          - Булево - 
//    * ПоказыватьПодсказкиПриРедактированииФайлов       - Булево - 
//    * ПутьКЛокальномуКэшуФайлов                        - Строка - 
//    * ЭтоПолноправныйПользователь                      - Булево - 
//    * УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования - Булево - .
//
Функция НастройкиРаботыСФайлами() Экспорт
	
	Возврат ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
КонецФункции

// Сохраняет настройки работы с файлами.
//
// Параметры:
//  НастройкиРаботыСФайлами - Структура настроек работы с файлами с их значениями.
//                            В качестве ключа настройки возможно указывать строки с именем настроек:
//                                 ПоказыватьИнформациюЧтоФайлНеБылИзменен,
//                                 ПоказыватьЗанятыеФайлыПриЗавершенииРаботы,
//                                 ПоказыватьКолонкуРазмер,
//                                 ТекстовыеФайлыРасширение,
//                                 ТекстовыеФайлыСпособОткрытия,
//                                 ГрафическиеСхемыРасширение,
//                                 ПоказыватьПодсказкиПриРедактированииФайлов,
//                                 СпрашиватьРежимРедактированияПриОткрытииФайла,
//                                 СпособСравненияВерсийФайлов,
//                                 ДействиеПоДвойномуЩелчкуМыши,
//                                 ГрафическиеСхемыСпособОткрытия.
//
Процедура СохранитьНастройкиРаботыСФайлами(НастройкиРаботыСФайлами) Экспорт
	
	КлючиОбъектовНастроекРаботыСФайлами = КлючиОбъектовНастроекРаботыСФайлами();
	
	Для Каждого Настройка Из НастройкиРаботыСФайлами Цикл
		
		КлючОбъектаНастройки = КлючиОбъектовНастроекРаботыСФайлами[Настройка.Ключ];
		Если КлючОбъектаНастройки <> Неопределено Тогда
			Если СтрНачинаетсяС(КлючОбъектаНастройки, "НастройкиОткрытияФайлов\") Тогда
				ТипФайловНастройки = СтрЗаменить(КлючОбъектаНастройки, "НастройкиОткрытияФайлов\", "");
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастройки,
					СтрЗаменить(Настройка.Ключ, ТипФайловНастройки, ""), Настройка.Значение);
			Иначе
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастройки, Настройка.Ключ, Настройка.Значение);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает путь к рабочему каталогу пользователя в настройках и параметре сеанса
//
Функция ПолучитьСтарыйПутьКРабочемуКаталогуПользователя() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
КонецФункции

// Получает путь к рабочему каталогу пользователя в настройках и параметре сеанса
//
// Параметры:
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
// 
Функция ПолучитьПутьКРабочемуКаталогуПользователя(ИдентификаторКлиента = Неопределено) Экспорт
	
	Если ИдентификаторКлиента = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	КонецЕсли;
	
	Путь =  ХранилищеОбщихНастроек.Загрузить(
		"ЛокальныйКэшФайлов/ПутьКЛокальномуКэшуФайлов", 
		ИдентификаторКлиента);
		
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Путь = ПолучитьСтарыйПутьКРабочемуКаталогуПользователя();
		УстановитьПутьКРабочемуКаталогуПользователя(Путь, ИдентификаторКлиента);
	КонецЕсли;	
	
	Возврат Путь;
	
КонецФункции

// Устанавливает путь к рабочему каталогу пользователя в настройках и параметре сеанса
//
// Параметры:
//  Путь - Строка - путь к рабочему каталогу
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
// 
Процедура УстановитьПутьКРабочемуКаталогуПользователя(Путь, ИдентификаторКлиента = Неопределено) Экспорт
	
	Если ИдентификаторКлиента = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить(
		"ЛокальныйКэшФайлов/ПутьКЛокальномуКэшуФайлов", 
		ИдентификаторКлиента, 
		Путь);
	
КонецПроцедуры

// Устанавливает путь к рабочему каталогу пользователя в настройках и параметре сеанса
//
// Параметры:
//  Путь - Строка - путь к рабочему каталогу
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
// 
Процедура УстановитьПутьКРабочемуКаталогуПользователяИОбновитьПовторноИспользуемыеЗначения(
	Путь, ИдентификаторКлиента = Неопределено) Экспорт
	
	УстановитьПутьКРабочемуКаталогуПользователя(Путь, ИдентификаторКлиента);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Извлекает текст из файлов на диске
Процедура ИзвлечениеТекста() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	Если НЕ ЭтоПлатформаWindows() Тогда
		Возврат; // извлечение текста работает только под Windows
	КонецЕсли;
	
	ИмяСРасширениемФайла = "";
	
	Попытка	
		
		ЗаписьЖурналаРегистрации("Файлы.Извлечение текста", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное извлечение текста'; en = 'Started routine text extraction'"));
			
		ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
		Если ИзвлекатьТекстыФайловНаСервере = Истина Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = 			
			 "ВЫБРАТЬ ПЕРВЫЕ 100
			 |	ВерсииФайлов.Ссылка КАК Ссылка,
			 |	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
			 |	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
			 |	ВерсииФайлов.ФайлУдален КАК ФайлУдален,
			 |	ВерсииФайлов.Размер КАК Размер
			 |ИЗ
			 |	Справочник.ВерсииФайлов КАК ВерсииФайлов
			 |ГДЕ
			 |	(ВерсииФайлов.СтатусИзвлеченияТекста = &Статус
			 |			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
			 |	И ВерсииФайлов.Зашифрован = &Зашифрован
			 |	И НЕ ТИПЗНАЧЕНИЯ(ВерсииФайлов.Владелец.ВладелецФайла) = ТИП(Справочник.СерверныеСообщенияСВД)
			 |	И НЕ ТИПЗНАЧЕНИЯ(ВерсииФайлов.Владелец.ВладелецФайла) = ТИП(Документ.ВходящееСообщениеСВД)
			 |	И НЕ ТИПЗНАЧЕНИЯ(ВерсииФайлов.Владелец.ВладелецФайла) = ТИП(Документ.ИсходящееСообщениеСВД)";
			
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
			Запрос.УстановитьПараметр("Зашифрован", Ложь);
			
			Результат = Запрос.Выполнить();
			ТаблицаВыгрузки = Результат.Выгрузить();
			
			Для Каждого Строка Из ТаблицаВыгрузки Цикл
				
				ТекущаяВерсия = Строка.Ссылка.ПолучитьОбъект();
				
				ИмяСРасширениемФайла = ТекущаяВерсия.ПолноеНаименование  + "." + ТекущаяВерсия.Расширение;
				
				ИмяФайлаСПутем = "";
				ТипХраненияФайла = Строка.ТипХраненияФайла;
				
				Текст = "";
				
				Попытка
					
					Если Строка.ФайлУдален Тогда
						
						ТекущаяВерсия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
						
					Иначе
						
						ИмяФайлаСПутем = ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(Строка.Ссылка);
						
						Если ИмяФайлаСПутем <> "" Тогда
							
							// Извлекаем текст из файла
							
							Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(Строка.Ссылка);
							
							Отказ = Ложь;
							Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(ИмяФайлаСПутем, Отказ, Кодировка);
							
							Если Отказ = Ложь Тогда
								ТекущаяВерсия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
							Иначе
								ТекущаяВерсия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
							КонецЕсли;
							
						КонецЕсли;
						
						Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
							УдалитьФайлы(ИмяФайлаСПутем);
						КонецЕсли;

						ТекущаяВерсия.ИзвлеченныйТекст = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
						ФайловыеФункции.СформироватьРеквизитТекстХранилище(ТекущаяВерсия);
						
					КонецЕсли;

					ФайлЗаблокирован = Ложь;
					
					Файл = ТекущаяВерсия.Владелец;
					Если Файл.ТекущаяВерсия = Строка.Ссылка Тогда
						Попытка
							ЗаблокироватьДанныеДляРедактирования(Файл);
							ФайлЗаблокирован = Истина;
						Исключение
							// Ничего не сообщаем, обрабатываем следующий объект ВерсииФайлов
							// Заблокированные файлы будут обработаны в следующий раз.
							Продолжить; 
						КонецПопытки;
					КонецЕсли;
					
					НачатьТранзакцию();
					Попытка
						ТекущаяВерсия.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
						ТекущаяВерсия.Записать();

						Если Файл.ТекущаяВерсия = Строка.Ссылка Тогда
							ФайлОбъект = Файл.ПолучитьОбъект();
							ФайлОбъект.ТекстХранилище = ТекущаяВерсия.ТекстХранилище;
							ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
							ФайлОбъект.ДополнительныеСвойства.Вставить("ОтключитьРегистрациюДляОбменаСИнтегрированнымиСистемами", Истина);
							ФайлОбъект.Записать();
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
						
						Если ФайлЗаблокирован Тогда
							РазблокироватьДанныеДляРедактирования(Файл);
						КонецЕсли;
						
					Исключение
						ОтменитьТранзакцию();
						
						Если ФайлЗаблокирован Тогда
							РазблокироватьДанныеДляРедактирования(Файл);
						КонецЕсли;
						
						ВызватьИсключение;
					КонецПопытки;
					
				Исключение
					
					ОписаниеОшибкиИнфо = ОписаниеОшибки();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											 НСтр("ru = 'Во время регламентного извлечения текста из файла ""%1"" произошла неизвестная ошибка.'; en = 'During routine of extracting text from file ""%1"" an unknown error has occurred.'"), 
											 ИмяСРасширениемФайла);
					ТекстСообщения = ТекстСообщения + Строка(ОписаниеОшибкиИнфо);
					
					РезультатИзвлечения = "ИзвлечьНеУдалось";
					ЗаписьОшибкиИзвлечения(Строка.Ссылка, РезультатИзвлечения, ТекстСообщения);
					
					Продолжить;	
					
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Файлы.Извлечение текста", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено регламентное извлечение текста'; en = 'Finished routine text extraction'"));
	Исключение

		ОписаниеОшибкиИнфо = ОписаниеОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								 НСтр("ru = 'Во время регламентного извлечения текста из файла ""%1"" произошла неизвестная ошибка.'; en = 'During routine of extracting text from file ""%1"" an unknown error has occurred.'"), 
								 ИмяСРасширениемФайла);
		ТекстСообщения = ТекстСообщения + Строка(ОписаниеОшибкиИнфо);
		
		ЗаписьЖурналаРегистрации("Файлы.Извлечение текста", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
			
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаписьОшибкиИзвлечения(ФайлИлиВерсияФайла, РезультатИзвлечения, ТекстСообщения)
	
	ЗаписатьРезультатИзвлеченияТекста(ФайлИлиВерсияФайла, РезультатИзвлечения, "");
	
	ЗаписьЖурналаРегистрации("Извлечение текста", 
		УровеньЖурналаРегистрации.Ошибка, , ,
		ТекстСообщения);
	
КонецПроцедуры	

// Обработчик регламентного задания Распознавание
Процедура Распознавание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	Если ТипПлатформыСервера <> ТипПлатформы.Windows_x86 И ТипПлатформыСервера <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат;  // Распознавание работает только под Windows
	КонецЕсли;	
	
	ИспользоватьРаспознавание = Константы.ИспользоватьРаспознавание.Получить();
	Если ИспользоватьРаспознавание = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("Распознавание изображений", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное распознавание изображений'; en = 'Started routine image recognition'"));
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 			
	 	"ВЫБРАТЬ ПЕРВЫЕ 100
	 	|	ВерсииФайлов.Ссылка КАК Ссылка,
	 	|	ВерсииФайлов.СтатусРаспознаванияТекста,
	 	|	ВерсииФайлов.ФайлУдален
	 	|ИЗ
	 	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	 	|ГДЕ
	 	|	ВерсииФайлов.СтатусРаспознаванияТекста = &Статус
	 	|	И ВерсииФайлов.Зашифрован = &Зашифрован";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать);
	Запрос.УстановитьПараметр("Зашифрован", Ложь);
	
	Результат = Запрос.Выполнить();
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаВыгрузки Цикл
		
		ВерсияСсылка = Строка.Ссылка;
		ОписаниеОшибки = "";
		РаспознанныйТекст = "";
		
		Попытка
			
			СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
			ФайлСсылка = ВерсияСсылка.Владелец;
			Если ФайлСсылка.ТекущаяВерсия = ВерсияСсылка Тогда
				СтратегияРаспознавания = ВерсияСсылка.Владелец.СтратегияРаспознавания;
			КонецЕсли;	
			
			ЭтоРегламентноеЗадание = Истина;
			СтрокаВозврата = "";
			
			Если Строка.ФайлУдален Тогда
				
				ЗаписатьНеуспешноеРаспознавание(ВерсияСсылка);
				Продолжить;
				
			Иначе	
				
				Попытка
					СтрокаВозврата = РаботаСФайламиВызовСервера.РаспознатьВерсию(ВерсияСсылка, ОписаниеОшибки, РаспознанныйТекст, Неопределено, ЭтоРегламентноеЗадание);
				Исключение
					
					ЗаписатьНеуспешноеРаспознавание(ВерсияСсылка);
					ВызватьИсключение;
					
				КонецПопытки;	
				
			КонецЕсли;	
			
			
			Если СтрокаВозврата = "Успешно" Тогда
				
				ОписаниеСтратегии = "";
				
				Если СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз Тогда
					ОписаниеСтратегии = НСтр("ru = 'Распознанный текст помещен в текстовый образ.'; en = 'The recognized text is placed in the text image.'");
				ИначеЕсли  СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюHTML Тогда
					ОписаниеСтратегии = НСтр("ru = 'Создана новая версия в формате HTML.'; en = 'Created a new version in HTML format.'");	
				ИначеЕсли  СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюTXT Тогда
					ОписаниеСтратегии = НСтр("ru = 'Создана новая версия в формате TXT.'; en = 'Created a new version in TXT format.'");	
				ИначеЕсли  СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлHTML Тогда
					ОписаниеСтратегии = НСтр("ru = 'Создан новый файл в формате HTML.'; en = 'Created a new file in HTML format.'");	
				ИначеЕсли  СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлTXT Тогда
					ОписаниеСтратегии = НСтр("ru = 'Создан новый файл в формате TXT.'; en = 'Created a new file in TXT format.'");	
				КонецЕсли;
				
				ИмяИРасширениеФайла = ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1"" успешно распознан. %2'; en = 'The file ""%1"" was successfully recognized. %2'"),
					ИмяИРасширениеФайла, ОписаниеСтратегии);
				
				ЗаписьЖурналаРегистрации("Распознавание изображений", 
					УровеньЖурналаРегистрации.Информация, , ,
					ТекстСообщения);
					
			ИначеЕсли СтрокаВозврата = "Ошибка" Тогда
					
				ИмяИРасширениеФайла = ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение;
					
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При распознавании файла ""%1"" произошла ошибка: %2'; en = 'While recognizing file ""%1"" an error occurred: %2'"),
					ИмяИРасширениеФайла, ОписаниеОшибки);
				
				ЗаписьЖурналаРегистрации("Распознавание изображений", 
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
			КонецЕсли;
			
		Исключение
			ОписаниеОшибкиИнфо = ОписаниеОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									 НСтр("ru = 'Во время регламентного распознавания изображений версии ""%1"" произошла неизвестная ошибка.'; en = 'During the routine image recognition of version ""%1"" an unknown error has occurred.'"), 
									 ВерсияСсылка);
			ТекстСообщения = ТекстСообщения + Строка(ОписаниеОшибкиИнфо);
			
			ЗаписьЖурналаРегистрации("Распознавание изображений", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Распознавание изображений", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное распознавание изображений'; en = 'Finished routine image recognition'"));

КонецПроцедуры

Процедура ЗаписатьНеуспешноеРаспознавание(ВерсияСсылка)
	
	ЗаблокироватьДанныеДляРедактирования(ВерсияСсылка);
	ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
	ВерсияОбъект.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеРаспознано;
	ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	ВерсияОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ВерсияСсылка);
	
КонецПроцедуры	

// заполняет синтетический реквизит ТекстХранилище на основе ИзвлеченныйТекст и РаспознанныйТекст
Процедура СформироватьРеквизитТекстХранилище(ВерсияОбъект) Экспорт
	
	ИзвлеченныйТекст = ВерсияОбъект.ИзвлеченныйТекст.Получить();
	РаспознанныйТекст = ВерсияОбъект.РаспознанныйТекст.Получить();
	
	ТекстХранилище = Строка(ИзвлеченныйТекст);
	
	Если НЕ ПустаяСтрока(Строка(РаспознанныйТекст)) Тогда
		
		Если НЕ ПустаяСтрока(ТекстХранилище) Тогда
			ТекстХранилище = ТекстХранилище + " " + Символы.ВК + Символы.ПС;
		КонецЕсли;	
		
		ТекстХранилище = ТекстХранилище + Строка(РаспознанныйТекст);
		
	КонецЕсли;	
	
	ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(ТекстХранилище);
	
КонецПроцедуры	

// Получает строку из временного хранилища (передача с клиента на сервер,
// делается через временное хранилище)
//
Функция ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста) Экспорт
	
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТекста).Записать(ИмяВременногоФайла);
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Текст;
	
КонецФункции

// Возвращает максимальный размер файла
//
Функция ПолучитьМаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает максимальный размер файла.
//
// Возвращаемое значение:
//  Число - целое число байт.
//
Функция МаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает значение константы ИзвлекатьТекстыФайловНаСервере
Функция ИзвлекатьТекстыФайловНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows
Функция ЭтоПлатформаWindows() Экспорт
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
	 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста
Процедура ЗаписатьРезультатИзвлеченияТекста(ФайлИлиВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста) Экспорт
	
	ФайлИлиВерсияОбъект = ФайлИлиВерсияСсылка.ПолучитьОбъект();
	ФайлИлиВерсияОбъект.Заблокировать();
	
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Текст = "";
	Иначе
		Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ФайлИлиВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	Если РезультатИзвлечения = "НеИзвлечен" Тогда
		ФайлИлиВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
		ФайлИлиВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
		ФайлИлиВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;
	
	ФайловыеФункцииПереопределяемый.ЗаписатьИзвлеченныйТекст(ФайлИлиВерсияОбъект);
	
КонецПроцедуры

// Возвращает ЗапрещатьЗагрузкуФайловПоРасширению
Функция ПолучитьЗапретЗагрузкиФайловПоРасширению() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапретЗагрузкиФайловПоРасширению = Константы.ЗапрещатьЗагрузкуФайловПоРасширению.Получить();
	Возврат ЗапретЗагрузкиФайловПоРасширению;
	
КонецФункции

// Возвращает СписокЗапрещенныхРасширений
Функция ПолучитьСписокЗапрещенныхРасширений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	Возврат СписокЗапрещенныхРасширений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с томами файлов

// Выбирает группу томов по условиям
// Параметры
// ВерсияСсылка - ссылка не версию файла
Функция ВыбратьГруппуТомовДляРазмещенияВерсии(ВерсияСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаРазмещенияФайловВТомах.ГруппаТомов,
		|	ПравилаРазмещенияФайловВТомах.Условие,
		|	ПравилаРазмещенияФайловВТомах.Порядок КАК Порядок
		|ИЗ
		|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
		|ГДЕ
		|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	ТаблицаПравил = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыбратьГруппуТомовДляРазмещенияВерсииИзТаблицыПравил(ВерсияСсылка, ТаблицаПравил);
	
КонецФункции

// Выбирает группу томов по условиям из таблицы правил
// Параметры
// ВерсияСсылка - ссылка не версию файла
// ТаблицаПравил - таблица значений с полями Условие и ГруппаТомов
Функция ВыбратьГруппуТомовДляРазмещенияВерсииИзТаблицыПравил(ВерсияСсылка, ТаблицаПравил) Экспорт
	
	Для Каждого Правило Из ТаблицаПравил Цикл
		
		Результат = ПроверитьУсловиеВРежимеКонструктора(ВерсияСсылка, Правило.Условие.Получить());
		Если Результат = Истина Тогда
			Возврат Правило.ГруппаТомов;
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецФункции

// Получает список томов в группе томов
Функция ПолучитьСписокТомовВГруппе(ГруппаТомов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ
		|	И ТомаХраненияФайлов.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТомаХраненияФайлов.ПорядокЗаполнения";

	Запрос.УстановитьПараметр("Родитель", ГруппаТомов);
	ТаблицаТомов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТомов;
	
КонецФункции	

// Проверяет условие СКД
Функция ПроверитьУсловиеВРежимеКонструктора(Предмет, Настройки, ЕстьПараметры = Истина)
	
	СхемаКомпоновкиДанных = Справочники.ПравилаРазмещенияФайловВТомах.ПолучитьМакет("Версии");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если ЕстьПараметры Тогда
		ПараметрПредмет = Компоновщик.Настройки.ПараметрыДанных.Элементы[0];
		ПараметрПредмет.Значение = Предмет.Ссылка;
		ПараметрПредмет.Использование = Истина;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ТаблицаРезультата = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
		
КонецФункции

// Возвращает строку, сгенерированную случайным образом
Функция ПолучитьСлучайнуюДобавкуИмениФайла()
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСтрока = Строка(УникальныйИдентификатор);
	
	Возврат УникальныйИдентификаторСтрока;
	
КонецФункции	

// Добавляет файл в один из томов (где есть свободное место)
//
Процедура ДобавитьНаДиск(
		ДвоичныеДанные,
		ПутьКФайлуВТоме,
		СсылкаНаТом,
		ВремяИзмененияУниверсальное,
		НомерВерсии,
		ИмяБезРасширения,
		Расширение,
		РазмерФайла = 0,
		Зашифрован = Ложь,
		ДатаДляРазмещенияВТоме = Неопределено,
		ВерсияСсылка = Неопределено) Экспорт

	СсылкаНаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
	ОписаниеВсехОшибок = ""; // здесь соберем ошибки со всех томов
	
	ТаблицаТомов = Новый ТаблицаЗначений;
	
	Если Не РаботаСФайламиВызовСервера.ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТомаХраненияФайлов.Ссылка
			|ИЗ
			|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
			|ГДЕ
			|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ
			|	И ТомаХраненияФайлов.ЭтоГруппа = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТомаХраненияФайлов.ПорядокЗаполнения";

		ТаблицаТомов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаТомов.Количество() = 0 Тогда
			ВызватьИсключение(НСтр("ru = 'Нет ни одного тома для размещения файла.'; en = 'There is no volume for the file placement.'"));
		КонецЕсли;
		
	Иначе // размещение по условиям
		
		ГруппаТомов = ВыбратьГруппуТомовДляРазмещенияВерсии(ВерсияСсылка);
		ТаблицаТомов = ПолучитьСписокТомовВГруппе(ГруппаТомов);
		
		Если ТаблицаТомов.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В группе томов ""%1"" нет ни одного тома для размещения файла'; en = 'Volume group ""%1"" has no volumes for file placement'"),
				Строка(ГруппаТомов));
			
			ВызватьИсключение(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТома Из ТаблицаТомов Цикл
		
		СсылкаНаТом = СтрокаТома.Ссылка;
		
		ПутьКТому = ПолныйПутьТома(СсылкаНаТом);
		
		Дата = ТекущаяДатаСеанса();
		Если ДатаДляРазмещенияВТоме <> Неопределено Тогда
			Дата = ДатаДляРазмещенияВТоме;
		КонецЕсли;	
		ПутьДня = Формат(Дата, "ДФ=ггггММдд") + ПолучитьРазделительПути();
		
		// Добавляем слэш в конце, если его нет
		ПутьКТому = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКТому, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
		
		МаксимальнаяДлинаПолногоПути = 253; // 260-7 - 7 оставляем на \A1 \B2 и пр.
		ДопустимаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКТому)
			- СтрДлина(Расширение) - СтрДлина(Строка(НомерВерсии)) - СтрДлина(ПутьДня);
			
		Если Зашифрован Тогда
			ДопустимаяДлинаИмениФайла = ДопустимаяДлинаИмениФайла - 4;
		КонецЕсли;	
			
		ИмяБезРасширенияПроверенное = СокрЛП(ИмяБезРасширения);
		ИмяБезРасширенияПроверенное = 
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяБезРасширенияПроверенное, "");
			
		ИмяБезРасширенияУрезанное = ИмяБезРасширенияПроверенное;	
		
		СлучайнаяДобавкаИмениФайла = ПолучитьСлучайнуюДобавкуИмениФайла();
		ДлинаПрибавки = СтрДлина(СлучайнаяДобавкаИмениФайла) + 1;
		ДобавитьУникальныйИдентификатор = Истина;
		Если ДлинаПрибавки >= ДопустимаяДлинаИмениФайла Тогда
			ДобавитьУникальныйИдентификатор = Ложь;
		Иначе	
			ДопустимаяДлинаИмениФайла = ДопустимаяДлинаИмениФайла - ДлинаПрибавки;
		КонецЕсли;	
		
		Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
			ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
		КонецЕсли;
		Если ДобавитьУникальныйИдентификатор Тогда
			ИмяБезРасширенияУрезанное = ИмяБезРасширенияУрезанное + "_" + СлучайнаяДобавкаИмениФайла;
		КонецЕсли;	
		
		// Имя файла для хранения на диске формировать следующим образом
		// - имя файла.номер версии.расширение файла
		Если ПустаяСтрока(НомерВерсии) Тогда
			ИмяФайла = ИмяБезРасширенияУрезанное + "." + Расширение;
		Иначе
			ИмяФайла = ИмяБезРасширенияУрезанное + "." + НомерВерсии + "." + Расширение;
		КонецЕсли;
		
		Если Зашифрован Тогда
			ИмяФайла = ИмяФайла + "." + "p7m";
		КонецЕсли;	
		
		Попытка
			
			// Если МаксимальныйРазмер = 0 - нет ограничения на размер файлов на томе
			Если СсылкаНаТом.МаксимальныйРазмер <> 0 Тогда
				ТекущийРазмерВБайтах = ФайловыеФункцииПовтИсп.ПодсчитатьРазмерФайловНаТоме(СсылкаНаТом.Ссылка); 
				НовыйРазмерВБайтах = ТекущийРазмерВБайтах + РазмерФайла;
				НовыйРазмер = НовыйРазмерВБайтах / (1024 * 1024);
				
				Если НовыйРазмер > СсылкаНаТом.МаксимальныйРазмер Тогда
					СтрокаОшибки 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Превышен максимальный размер тома (%1 Мб)!'; en = 'Maximum size of the volume (%1 Mb) is exceeded !'"),
						СсылкаНаТом.МаксимальныйРазмер);
					ВызватьИсключение(СтрокаОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ПутьКТому = ПутьКТому + ПутьДня;
			
			ИмяФайлаСПутем = ФайловыеФункцииКлиентСервер.ПолучитьУникальноеИмяСПутем(ПутьКТому, ИмяФайла, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
			
			Если ПустаяСтрока(ИмяФайлаСПутем) Тогда // не смогли добавить файл
				
				УникальныйИдентификатор = Новый УникальныйИдентификатор;
				УникальныйИдентификаторСтрока = Строка(УникальныйИдентификатор);
				ИмяФайла = СтрЗаменить(ИмяФайла, ИмяБезРасширенияУрезанное, УникальныйИдентификаторСтрока);
				// повторно получаем
				ИмяФайлаСПутем = ФайловыеФункцииКлиентСервер.ПолучитьУникальноеИмяСПутем(ПутьКТому, ИмяФайла, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
				Если ПустаяСтрока(ИмяФайлаСПутем) Тогда // не смогли добавить файл
					
					СтрокаОшибки 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить полное имя файла для размещения на томе (файл ""%1"").'; en = 'Failed to get the fully qualified name of the file to be placed on a volume (file ""%1"").'"),
						ИмяФайла);
					
					ВызватьИсключение(СтрокаОшибки);
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			ПолноеИмяФайлаСПутем = ПутьКТому + ИмяФайлаСПутем;
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные.Записать(ПолноеИмяФайлаСПутем);
			ИначеЕсли ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда // считаем, что иначе это путь к файлу на диске
				КопироватьФайл(ДвоичныеДанные, ПолноеИмяФайлаСПутем);
			Иначе
				СтрокаИсключения = НСтр("ru = 'Неверный тип данных для добавления на том'; en = 'Invalid data type for placing to volume'");
				ВызватьИсключение(СтрокаИсключения);
			КонецЕсли;
			
			// Установим время изменения файла таким, как оно стоит в текущей версии
			ФайлНаДиске = Новый Файл(ПолноеИмяФайлаСПутем);
			ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ВремяИзмененияУниверсальное);
			ФайлНаДиске.УстановитьТолькоЧтение(Истина);
			
			ПутьКФайлуВТоме = ПутьДня + ИмяФайлаСПутем;
			
			Возврат; // закончили - выйдем из процедуры
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если ОписаниеВсехОшибок <> "" Тогда
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			ШаблонОписанияОшибки =
				НСтр("ru = 'Ошибка при добавлении файла ""%1""
				           |в том ""%2"" (%3):
				           |""%4"".';
				           |en = 'Error while adding a file ""%1"" to volume ""%2"" (%3):
				           |""%4"".'");
						   
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписанияОшибки,
					ИмяФайла,
					Строка(СсылкаНаТом),
					ПутьКТому,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			Если СсылкаНаТом.ПолныйПутьLinux = СсылкаНаТом.ПолныйПутьWindows Тогда
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + Символы.ПС;
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + НСтр("ru = 'Настройте полный путь к тому.'; en = 'Configure the full path to volume.'");
			КонецЕсли;
			// надо переходить к следующему тому
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	// запись в журнал регистрации для администратора
	// здесь выдадим ошибки со всех томов
	СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось добавить файл ни в один из томов! Список ошибок: 
		|
		|%1';
		|en = 'Failed to add file to any volume! List of errors:
		|%1'"),
		ОписаниеВсехОшибок);
	ЗаписьЖурналаРегистрации("Добавление файла", УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
	
	// Сообщение обычному пользователю.
	СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось добавить файл:
		           |""%1.%2"".
		           |
		           |Обратитесь к администратору.';
		           |en = 'Failed to add the file: ""%1.%2"".
		           |
		           |Please contact your administrator.'"),
		ИмяБезРасширения, Расширение);
			 
	Если Пользователи.ЭтоПолноправныйПользователь(,,Ложь) Тогда
		СтрокаИсключения = СообщениеОбОшибке;	
	КонецЕсли;	 
			 
	ВызватьИсключение(СтрокаИсключения);

КонецПроцедуры // ДобавитьНаДиск()

// Возвращает полный путь тома - в зависимости от ОС
Функция ПолныйПутьТома(СсылкаНаТом) Экспорт
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат СсылкаНаТом.ПолныйПутьWindows;
	Иначе	
		Возврат СсылкаНаТом.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

// Есть ли хоть один том хранения файлов.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда существует хотя бы один работающий том.
//
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ
		|	И ТомаХраненияФайлов.ЭтоГруппа = ЛОЖЬ";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Получает тип хранения файлов
//
Функция ПолучитьХранитьФайлыВТомахНаДиске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	Возврат ХранитьФайлыВТомахНаДиске;
	
КонецФункции

// Возвращает количество файлов, хранящихся в томах.
//
Функция ПолучитьКоличествоФайловВТомах() Экспорт
	
	КоличествоФайловВТомах = ФайловыеФункцииПереопределяемый.ПолучитьКоличествоФайловВТомах();
	Возврат КоличествоФайловВТомах;
	
КонецФункции

// Возвращает тип платформы сервера
Функция ТипПлатформыСервера() Экспорт
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
КонецФункции	

// Получает хранение файлов в томах
//
Функция ПолучитьКонстантуХранитьФайлыВТомахНаДиске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	Возврат ХранитьФайлыВТомахНаДиске;
	
КонецФункции

// Получает тип хранения файлов как перечисление
//
Функция ПолучитьТипХраненияФайлов() Экспорт
	
	ХранитьФайлыВТомахНаДиске = ПолучитьКонстантуХранитьФайлыВТомахНаДиске();
	
	Если ХранитьФайлыВТомахНаДиске Тогда
		
		Если ЕстьТомаХраненияФайлов() Тогда
			Возврат Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		Иначе
			
			СообщениеОбОшибке = НСтр("ru = 'Включена настройка ""Хранить файлы в томах на диске"", но нет ни одного тома хранения файлов.'; en = 'Setting is enabled ""Store files on disk volumes"", but there is no file storage volume.'");
			ЗаписьЖурналаРегистрации("Добавление файла", УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			
			Возврат Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		КонецЕсли;		
		
	Иначе
		Возврат Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	КонецЕсли;	

КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Настройки

// Возвращает структуру, содержащую различные персональные настройки
// по работе с файлами
Функция ПолучитьПерсональныеНастройкиРаботыСФайлами() Экспорт
	
	Настройки = Новый Структура;
	ФайловыеФункцииПереопределяемый.ПолучитьПерсональныеНастройкиРаботыСФайлами(Настройки);
	ПолучитьПерсональныеНастройкиФайловыхФункций(Настройки);
	Возврат Настройки;
	
КонецФункции

// Устанавливает персональные настройки файловых функций
Процедура ПолучитьПерсональныеНастройкиФайловыхФункций(Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// МаксимальныйРазмерЛокальногоКэшаФайлов 
	МаксимальныйРазмерЛокальногоКэшаФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов");
	
	Если МаксимальныйРазмерЛокальногоКэшаФайлов = Неопределено Тогда
		МаксимальныйРазмерЛокальногоКэшаФайлов = 100*1024*1024; // 100 мб
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", МаксимальныйРазмерЛокальногоКэшаФайлов);
	КонецЕсли;
	
	Настройки.Вставить("МаксимальныйРазмерЛокальногоКэшаФайлов", МаксимальныйРазмерЛокальногоКэшаФайлов);
	
	// ПутьКЛокальномуКэшуФайлов
	ПутьКЛокальномуКэшуФайлов = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя();
	Настройки.Вставить("ПутьКЛокальномуКэшуФайлов", ПутьКЛокальномуКэшуФайлов);
	
	// УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования
	УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования");
	Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Неопределено Тогда
		УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
	КонецЕсли;
	Настройки.Вставить("УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования);
	
	// ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов
	ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов");
	Если ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Неопределено Тогда
		ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Ложь;
	КонецЕсли;
	Настройки.Вставить("ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов", ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов);
	
	// ИзвлекатьТекстыФайловНаСервере
	ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	Если ИзвлекатьТекстыФайловНаСервере = Неопределено Тогда
		ИзвлекатьТекстыФайловНаСервере = Ложь;
	КонецЕсли;
	Настройки.Вставить("ИзвлекатьТекстыФайловНаСервере", ИзвлекатьТекстыФайловНаСервере);
	
	// МаксимальныйРазмерФайла
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	Настройки.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	
	// ЗапрещатьЗагрузкуФайловПоРасширению
	ЗапрещатьЗагрузкуФайловПоРасширению = Константы.ЗапрещатьЗагрузкуФайловПоРасширению.Получить();
	Если ЗапрещатьЗагрузкуФайловПоРасширению = Неопределено Тогда
		ЗапрещатьЗагрузкуФайловПоРасширению = Ложь;
		Константы.ЗапрещатьЗагрузкуФайловПоРасширению.Установить(ЗапрещатьЗагрузкуФайловПоРасширению);
	КонецЕсли;
	Настройки.Вставить("ЗапретЗагрузкиФайловПоРасширению", ЗапрещатьЗагрузкуФайловПоРасширению);
	
	// СписокЗапрещенныхРасширений
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	Если СписокЗапрещенныхРасширений = Неопределено ИЛИ СписокЗапрещенныхРасширений = "" Тогда
		СписокЗапрещенныхРасширений = "COM EXE BAT CMD VBS VBE JS JSE WSF WSH SCR";
		Константы.СписокЗапрещенныхРасширений.Установить(СписокЗапрещенныхРасширений);
	КонецЕсли;
	Настройки.Вставить("СписокЗапрещенныхРасширений", СписокЗапрещенныхРасширений);
	
	// СписокРасширенийФайловOpenDocument
	СписокРасширенийФайловOpenDocument = Константы.СписокРасширенийФайловOpenDocument.Получить();
	Если ПустаяСтрока(СписокРасширенийФайловOpenDocument) Тогда
		СписокРасширенийФайловOpenDocument = "ODT OTT ODP OTP ODS OTS ODC OTC ODF OTF ODM OTH SDW STW SXW STC SXC SDC SDD STI";
		Константы.СписокРасширенийФайловOpenDocument.Установить(СписокРасширенийФайловOpenDocument);
	КонецЕсли;	
	Настройки.Вставить("СписокРасширенийФайловOpenDocument", СписокРасширенийФайловOpenDocument);
	
	// СписокРасширенийТекстовыхФайлов
	СписокРасширенийТекстовыхФайлов = Константы.СписокРасширенийТекстовыхФайлов.Получить();
	Если ПустаяСтрока(СписокРасширенийТекстовыхФайлов) Тогда
		СписокРасширенийТекстовыхФайлов = "TXT";
		Константы.СписокРасширенийТекстовыхФайлов.Установить(СписокРасширенийТекстовыхФайлов);
	КонецЕсли;	
	Настройки.Вставить("СписокРасширенийТекстовыхФайлов", СписокРасширенийТекстовыхФайлов);
	
	Настройки.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Настройки.Вставить("ИмяКонфигурации", Метаданные.Имя);
	
	// ПоказыватьПодсказкиПриРедактированииФайлов
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Если ПоказыватьПодсказкиПриРедактированииФайлов = Неопределено Тогда
		ПоказыватьПодсказкиПриРедактированииФайлов = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	
	// ОтпечатокЛичногоСертификатаДляШифрования
	ОтпечатокЛичногоСертификатаДляШифрования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭП", "ОтпечатокЛичногоСертификатаДляШифрования");
	Настройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
	
	// ПоказыватьИнформациюЧтоФайлНеБылИзменен
	ПоказыватьИнформациюЧтоФайлНеБылИзменен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьИнформациюЧтоФайлНеБылИзменен");
	Если ПоказыватьИнформациюЧтоФайлНеБылИзменен = Неопределено Тогда
		ПоказыватьИнформациюЧтоФайлНеБылИзменен = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьИнформациюЧтоФайлНеБылИзменен", ПоказыватьИнформациюЧтоФайлНеБылИзменен);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьИнформациюЧтоФайлНеБылИзменен", ПоказыватьИнформациюЧтоФайлНеБылИзменен);
	
	// Настройки открытия файлов
	ТекстовыеФайлыРасширение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов\ТекстовыеФайлы", 
		"Расширение", "TXT XML INI");
	ТекстовыеФайлыСпособОткрытия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов\ТекстовыеФайлы", 
		"СпособОткрытия", Перечисления.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе);
	
	ГрафическиеСхемыРасширение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов\ГрафическиеСхемы", 
		"Расширение", "GRS");
	ГрафическиеСхемыСпособОткрытия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов\ГрафическиеСхемы", 
		"СпособОткрытия", Перечисления.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе);
	
	Настройки.Вставить("ТекстовыеФайлыРасширение", ТекстовыеФайлыРасширение);
	Настройки.Вставить("ТекстовыеФайлыСпособОткрытия", ТекстовыеФайлыСпособОткрытия);
	Настройки.Вставить("ГрафическиеСхемыРасширение", ГрафическиеСхемыРасширение);
	Настройки.Вставить("ГрафическиеСхемыСпособОткрытия", ГрафическиеСхемыСпособОткрытия);
		
КонецПроцедуры

// При переименовании пользователя переносит его настройки - РабочийКаталог, ДействиеПоДвойномуЩелчкуМыши и пр
//
Процедура ПеренестиНастройкиПриСменеИмениПользователя(знач ИмяТекущее, знач ИмяУстанавливаемое) Экспорт
	
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	
	ФайловыеФункцииПереопределяемый.ПеренестиНастройкиПриСменеИмениПользователя(ИмяТекущее, ИмяУстанавливаемое);
	
КонецПроцедуры

// Переносит настройку (копирует в новое место, в старом удаляет)
//
Процедура ПеренестиНастройку(Объект, Настройка, ИмяТекущее, ИмяУстанавливаемое) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Значение = ХранилищеОбщихНастроек.Загрузить(Объект, Настройка, , ИмяТекущее);
	
	Если Значение <> Неопределено Тогда
		ХранилищеОбщихНастроек.Сохранить(Объект, Настройка, Значение, , ИмяУстанавливаемое);
		ХранилищеОбщихНастроек.Удалить(Объект, Настройка, ИмяТекущее);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные функции поддержки обмена файлами

// Служебная функция используется при создании начального образа
// Выполняется всегда на сервере
//
Процедура СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла) Экспорт
	
	Попытка
		// если файл в томе - скопируем его во временный каталог (при создании начального образа)
		КопироватьФайл(ПолныйПуть, НовыйПутьФайла);
		ФайлВременный = Новый Файл(НовыйПутьФайла);
		ФайлВременный.УстановитьТолькоЧтение(Ложь);
	Исключение
		// не регистрируется, возможно файл не найден
	КонецПопытки;
	
КонецПроцедуры

// Служебная функция используется для помещения двоичных данных файла в томе
// в хранилище значения
//
Функция ПоместитьДвоичныеДанныеВХранилище(Том, ПутьКФайлу, УникальныйИдентификатор) Экспорт
	
	ПолныйПуть = ПолныйПутьТома(Том) + ПутьКФайлу;
	УникальныйИдентификатор = УникальныйИдентификатор;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
	Возврат Новый ХранилищеЗначения(ДвоичныеДанные);
	
КонецФункции

// Служебная функции. Используется для удаления файла на сервере
// 
Процедура УдалитьФайлыНаСервере(Ссылка, ПрежнийПутьНаТоме, Комментарий = "") Экспорт
	
	ФайловыеФункции.УдалитьФайлСЛогированием(ПрежнийПутьНаТоме, "УдалитьФайлыНаСервере." + Комментарий);
	
КонецПроцедуры

// Служебная функции. Используется для удаления файла на сервере с логированием
// 
Процедура УдалитьФайлСЛогированием(ПолныйПутьНаТоме, Комментарий) Экспорт
	
	ФайлВременный = Новый Файл(ПолныйПутьНаТоме);
	Если ФайлВременный.Существует() И ФайлВременный.ЭтоФайл() Тогда
		
		Попытка
			ФайлВременный.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ПолныйПутьНаТоме);
			
			ПутьСПодкаталогом = ФайлВременный.Путь;
			Маска = ПолучитьМаскуВсеФайлы();
			МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, Маска);
			Если МассивФайловВКаталоге.Количество() = 0 Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
			
			Описание = ПолныйПутьНаТоме + ". Причина: " + Комментарий;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.УдалитьФайлСЛогированием'; en = 'Файлы.УдалитьФайлСЛогированием'"),
				УровеньЖурналаРегистрации.Информация,,,
				Описание);
			
		Исключение
				
			Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + Комментарий;	
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.УдалитьФайлСЛогированием'; en = 'Файлы.УдалитьФайлСЛогированием'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				Описание);
		КонецПопытки;	
		
	КонецЕсли;
	
КонецПроцедуры

// Получает СписокРасширенийФайловOpenDocument
//
Функция ПолучитьСписокРасширенийФайловOpenDocument() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СписокРасширенийФайловOpenDocument = Константы.СписокРасширенийФайловOpenDocument.Получить();
	Если ПустаяСтрока(СписокРасширенийФайловOpenDocument) Тогда
		СписокРасширенийФайловOpenDocument = "ODT OTT ODP OTP ODS OTS ODC OTC ODF OTF ODM OTH SDW STW SXW STC SXC SDC SDD STI";
	КонецЕсли;	
	Возврат СписокРасширенийФайловOpenDocument;
	
КонецФункции

// Получает СписокРасширенийТекстовыхФайлов
//
Функция ПолучитьСписокРасширенийТекстовыхФайлов() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	СписокРасширенийТекстовыхФайлов = Константы.СписокРасширенийТекстовыхФайлов.Получить();
	Если ПустаяСтрока(СписокРасширенийТекстовыхФайлов) Тогда
		СписокРасширенийТекстовыхФайлов = "TXT";
	КонецЕсли;	
	Возврат СписокРасширенийТекстовыхФайлов;

КонецФункции

// Вызывается при обмене данными для определения пути к файлу.
//
// Параметры
//   ЭлементДанных          - элемент данных, изменение которого зарегистрировано и который 
//                             должен быть помещен в сообщение обмена данными. 
//   ИмяКаталогаФайлов       - Строка - имя каталога к файлу. 
//   УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор файла.
//
// Возвращаемое значение:
//   Строка - путь к файлу.
//
//
Функция ИмяФайлаПриОтправкеДанныхФайла(ЭлементДанных, ИмяКаталогаФайлов, УникальныйИдентификатор) Экспорт
	
	Результат = Неопределено;
	ФайловыеФункцииПереопределяемый.УстановитьИмяФайлаПриОтправкеДанныхФайла(ЭлементДанных, ИмяКаталогаФайлов, 
		УникальныйИдентификатор, Результат);
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные функции

// Получает ссылки на объекты с файлами
Функция ПолучитьСсылкиНаОбъектыСФайлами(ПолноеИмяОМ) Экспорт
	
	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектСФайлами.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмяОМ] КАК ОбъектСФайлами
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
			|		ПО ОбъектСФайлами.Ссылка = Файлы.ВладелецФайла
			|ГДЕ
			|	Файлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
			|СГРУППИРОВАТЬ ПО
			|	ОбъектСФайлами.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОМ]", ПолноеИмяОМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает Истина, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Функция ЕстьХранимыеФайлы(ВнешнийОбъект) Экспорт
	
	Результат = Ложь;
	ФайловыеФункцииПереопределяемый.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	// РаботаСФайлами
	РаботаСФайламиВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	// Конец РаботаСФайлами
	
КонецПроцедуры

// Возвращает хранимые файлы к объекту ВнешнийОбъект
//
Функция ПолучитьХранимыеФайлы(ВнешнийОбъект) Экспорт
	
	МассивДанных = Новый Массив;
	ФайловыеФункцииПереопределяемый.ПолучитьХранимыеФайлы(ВнешнийОбъект, МассивДанных);
	Возврат МассивДанных;
	
КонецФункции

// Вычисляет кодировку 
Функция ОпределитьКодировкуВерсии(ВерсияСсылка, Расширение) Экспорт
	
	СписокРасширенийТекстовыхФайлов = ФайловыеФункцииПовтИсп.ПолучитьСписокРасширенийТекстовыхФайлов();
	
	Если ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(СписокРасширенийТекстовыхФайлов, Расширение) Тогда
		
		ИмяФайлаСПутем = ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ВерсияСсылка);
		
		Кодировка = ФайловыеФункцииКлиентСервер.ОпределитьКодировкуТекстовогоФайла(ИмяФайлаСПутем);
		
		ТипХраненияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСсылка, "ТипХраненияФайла");
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			УдалитьФайлы(ИмяФайлаСПутем);
		КонецЕсли;
		
		Возврат Кодировка;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Функции работы с ЭП

// Получает все подписи файла
//
// Параметры
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено Тогда
		//ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
		ПолноеИмяОбъектаСЭП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронныеЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
			|	ЭлектронныеЦифровыеПодписи.Подпись             КАК Подпись,
			|	ЭлектронныеЦифровыеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи
			|ИЗ
			|	[ПолноеИмяОбъектаСЭП].ЭлектронныеЦифровыеПодписи КАК ЭлектронныеЦифровыеПодписи
			|ГДЕ
			|	ЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭП]", ПолноеИмяОбъектаСЭП);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Иначе
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(СсылкаНаОбъект);
	КонецЕсли;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("АдресПодписи", АдресПодписи);
		СтруктураВозврата.Вставить("КомуВыданСертификат", ВыборкаЗапроса.КомуВыданСертификат);
		СтруктураВозврата.Вставить("ИмяФайлаПодписи", ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// записывает в журнал регистрации
Процедура ЗаписьЖурналаРегистрацииСервер(ТекстСообщения, Префикс) Экспорт
	
	ЗаписьЖурналаРегистрации(Префикс, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
КонецПроцедуры

// Вернет размер файлов на томе - в байтах
Функция ПодсчитатьРазмерФайловНаТоме(СсылкаТома) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	               |ИЗ
	               |	Справочник.ВерсииФайлов КАК Версии
	               |ГДЕ
	               |	Версии.Том = &Том";
	
	Запрос.Параметры.Вставить("Том", СсылкаТома);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.РазмерФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура СобратьСтатистикуКонфигурации() Экспорт
	
	
КонецПроцедуры

// Новый РС ФайлыВРабочемКаталогеКомпьютера

// Возвращает строку ИдентификаторКлиента_УникальныйИдентификаторПользователя
//
// Параметры:
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
// 
Функция ПолучитьСоставнойИдентификаторПользователя(ИдентификаторКлиента = Неопределено) Экспорт
	
	Если ИдентификаторКлиента = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	СоставнойИдентификатор = Строка(ИдентификаторКлиента) + "_" + Строка(ТекущийПользователь.УникальныйИдентификатор());
	Возврат СоставнойИдентификатор;
	
КонецФункции

// Возвращает есть ли записи в РС ФайлыВРабочемКаталогеКомпьютера для данного клиента
//
//  Возвращаемое значение:
//   Булево - Истина - если есть записи в РС ФайлыВРабочемКаталогеКомпьютера для данного клиента
//
Функция ЕстьЗаписиВРегистреФайлыВРабочемКаталоге() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ФайлыВРабочемКаталогеКомпьютера.Версия
	               |ИЗ
	               |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	               |ГДЕ
	               |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор";
				   
	Идентификатор = ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает есть ли записи в РС УдалитьРабочиеКаталогиФайлов для данного пользователя
//
//  Возвращаемое значение:
//   Булево - Истина - если есть записи в РС УдалитьРабочиеКаталогиФайлов для данного пользователя
//
Функция ЕстьЗаписиВРегистреУдалитьРабочиеКаталогиФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УдалитьРабочиеКаталогиФайлов.Папка
	               |ИЗ
	               |	РегистрСведений.УдалитьРабочиеКаталогиФайлов КАК УдалитьРабочиеКаталогиФайлов
	               |ГДЕ
	               |	УдалитьРабочиеКаталогиФайлов.Пользователь = &Пользователь";
				   
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает Истина, если есть запись в РС ФайлыВРабочемКаталогеКомпьютера для данной версии
// 
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
//
Функция ЕстьЗаписьДляТекущегоИдентификатора(Версия, ИдентификаторКлиента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ФайлыВРабочемКаталогеКомпьютера.ИмяКомпьютера КАК ИмяКомпьютера
	               |ИЗ
	               |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	               |ГДЕ
	               |	ФайлыВРабочемКаталогеКомпьютера.Версия = &Версия
	               |	И ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор
	               |	И ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ";
				   
	Идентификатор = ПолучитьСоставнойИдентификаторПользователя(ИдентификаторКлиента);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает Истина, если данная версия занята с другого компьютера
// 
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов
//  ИмяКомпьютера - Строка - возвращаемое значение
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
//
Функция ЕстьДанныеЗаемаСДругогоКомпьютера(Версия, ИмяКомпьютера, ИдентификаторКлиента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ФайлыВРабочемКаталогеКомпьютера.ИмяКомпьютера КАК ИмяКомпьютера
	               |ИЗ
	               |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	               |ГДЕ
	               |	ФайлыВРабочемКаталогеКомпьютера.Версия = &Версия
	               |	И ФайлыВРабочемКаталогеКомпьютера.Пользователь = &Пользователь
	               |	И ФайлыВРабочемКаталогеКомпьютера.Идентификатор <> &Идентификатор
	               |	И ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ";
				   
	Идентификатор = ПолучитьСоставнойИдентификаторПользователя(ИдентификаторКлиента);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ИмяКомпьютера = Выборка.ИмяКомпьютера;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

// Возвращает старые записи по пользователю из РС УдалитьФайлыВРабочемКаталоге
//
// Возвращаемое значение:
//  Массив структур с полями "Версия, Пользователь, Путь, Размер, ДатаПомещенияВРабочийКаталог, НаЧтение, ВРабочемКаталогеВладельца".
// 
Функция ПолучитьСтарыеЗаписиПоПользователюФайлыВРабочемКаталоге() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьФайлыВРабочемКаталоге.Версия,
	               |	УдалитьФайлыВРабочемКаталоге.Пользователь,
	               |	УдалитьФайлыВРабочемКаталоге.Путь,
	               |	УдалитьФайлыВРабочемКаталоге.Размер,
	               |	УдалитьФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог,
	               |	УдалитьФайлыВРабочемКаталоге.НаЧтение,
	               |	УдалитьФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца
	               |ИЗ
	               |	РегистрСведений.УдалитьФайлыВРабочемКаталоге КАК УдалитьФайлыВРабочемКаталоге
	               |ГДЕ
	               |	УдалитьФайлыВРабочемКаталоге.Пользователь = &Пользователь";
				   
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЗаписей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла = Новый Структура("Версия, Пользователь, Путь, Размер, ДатаПомещенияВРабочийКаталог, НаЧтение, ВРабочемКаталогеВладельца");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
		
		МассивЗаписей.Добавить(ДанныеФайла);
			
	КонецЦикла;
	
	Возврат МассивЗаписей;
	
КонецФункции	

// Заносит новые записи в РС ФайлыВРабочемКаталогеКомпьютера
// если требуется уточняет у пользователя и возвращает действие.
//
// Параметры:
//  МассивЗаписей - Массив структур с полями "Версия, Пользователь, Путь, Размер, ДатаПомещенияВРабочийКаталог, НаЧтение, ВРабочемКаталогеВладельца".
// 
Процедура ЗанестиНовыеЗаписиПоПользователюФайлыВРабочемКаталоге(МассивЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Идентификатор = ПолучитьСоставнойИдентификаторПользователя();
	
	ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	ТекущееЗначениеИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
	
	Для Каждого ДанныеФайла Из МассивЗаписей Цикл
		
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(ДанныеФайла.Версия);
		НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеФайла);
		НоваяЗапись.Идентификатор = Идентификатор;
		НоваяЗапись.ИмяКомпьютера = ТекущееЗначениеИмяКомпьютера;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;	

КонецПроцедуры


// Возвращает ключи объектов настроек работы с файлами.
// 
Функция КлючиОбъектовНастроекРаботыСФайлами()
	
	КлючиОбъектовНастроекРаботыСФайлами = Новый Соответствие;
	
	ФайловыеФункцииСлужебный.ПриСохраненииНастроекРаботыСФайлами(
		КлючиОбъектовНастроекРаботыСФайлами);
	
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ТекстовыеФайлыРасширение" ,      "НастройкиОткрытияФайлов\ТекстовыеФайлы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ТекстовыеФайлыСпособОткрытия" ,  "НастройкиОткрытияФайлов\ТекстовыеФайлы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ГрафическиеСхемыРасширение" ,    "НастройкиОткрытияФайлов\ГрафическиеСхемы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ГрафическиеСхемыСпособОткрытия" ,"НастройкиОткрытияФайлов\ГрафическиеСхемы");	
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов" ,"НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьИнформациюЧтоФайлНеБылИзменен" ,   "НастройкиПрограммы");
	
	Возврат КлючиОбъектовНастроекРаботыСФайлами;
	
КонецФункции

// Переносит старые записи по пользователю из РС УдалитьРабочиеКаталогиФайлов в РС РабочиеКаталогиФайловКомпьютера
//
Процедура ПеренестиСтарыеЗаписиПоПользователюФайлыВРабочемКаталоге() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьРабочиеКаталогиФайлов.Пользователь,
	               |	УдалитьРабочиеКаталогиФайлов.Папка,
	               |	УдалитьРабочиеКаталогиФайлов.Путь
	               |ИЗ
	               |	РегистрСведений.УдалитьРабочиеКаталогиФайлов КАК УдалитьРабочиеКаталогиФайлов
	               |ГДЕ
	               |	УдалитьРабочиеКаталогиФайлов.Пользователь = &Пользователь";
				   
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЗаписей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайловКомпьютера.СоздатьНаборЗаписей();
		
		Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();	
		
		НаборЗаписей.Отбор.Папка.Установить(Выборка.Папка);
		НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Папка = Выборка.Папка;
		НоваяЗапись.Пользователь = ТекущийПользователь;
		НоваяЗапись.Путь = Выборка.Путь;
		
		НоваяЗапись.Идентификатор = Идентификатор;
		ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
		НоваяЗапись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
		
		НаборЗаписей.Записать();
		
		// стираем старую запись
		НаборЗаписейСтарый = РегистрыСведений.УдалитьРабочиеКаталогиФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписейСтарый.Отбор.Папка.Установить(Выборка.Папка);
		НаборЗаписейСтарый.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		// не добавляем записи в набор - чтобы все стереть
		НаборЗаписейСтарый.Записать();
		
			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает старые записи по пользователю из РС ФайлыВРабочемКаталогеКомпьютера
//
// Возвращаемое значение:
//  Массив структур с полями "Версия, Пользователь, Путь, Размер, ДатаПомещенияВРабочийКаталог, НаЧтение, ВРабочемКаталогеВладельца".
// 
Функция ПолучитьУстаревшиеЗаписиПоПользователюФайлыВРабочемКаталоге() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФайлыВРабочемКаталогеКомпьютера.Версия,
	               |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор,
	               |	ФайлыВРабочемКаталогеКомпьютера.ВРабочемКаталогеВладельца,
	               |	ФайлыВРабочемКаталогеКомпьютера.ДатаОбращения,
	               |	ФайлыВРабочемКаталогеКомпьютера.ДатаПомещенияВРабочийКаталог,
	               |	ФайлыВРабочемКаталогеКомпьютера.ИмяКомпьютера,
	               |	ФайлыВРабочемКаталогеКомпьютера.НаЧтение,
	               |	ФайлыВРабочемКаталогеКомпьютера.Пользователь,
	               |	ФайлыВРабочемКаталогеКомпьютера.Путь,
	               |	ФайлыВРабочемКаталогеКомпьютера.Размер
	               |ИЗ
	               |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	               |ГДЕ
	               |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор
	               |	И ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ИСТИНА
	               |	И ФайлыВРабочемКаталогеКомпьютера.ДатаОбращения < &ДатаОбращения
	               |	И ФайлыВРабочемКаталогеКомпьютера.ВРабочемКаталогеВладельца = ЛОЖЬ";
				   
	Идентификатор = ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	ОчищатьПериодически 
		= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", 
			"ОчищатьПериодически", Ложь);
			
	ПериодХранения 
		= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", 
			"ПериодХранения", 1); //  в днях
			
	ДатаОбращения = ТекущаяДатаСеанса() - ПериодХранения * 86400;
	Запрос.УстановитьПараметр("ДатаОбращения", ДатаОбращения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЗаписей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла = Новый Структура("Версия, Путь");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
		
		МассивЗаписей.Добавить(ДанныеФайла);
			
	КонецЦикла;
	
	Возврат МассивЗаписей;
	
КонецФункции	

#КонецОбласти
