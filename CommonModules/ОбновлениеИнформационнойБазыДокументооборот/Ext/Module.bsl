////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации Документооборот
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ДокументооборотКОРПРусскийИАнглийскийИнтерфейс";
	Описание.Версия = "2.1.11.5";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьПраваПредопределенных";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "НастройкиВариантовОтчетовДокументооборот.ЗаполнитьНастройкиВариантовОтчетовДокументооборот";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииИсполнителиЗадач";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииСоставСубъектовПравДоступа";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.АдреснаяКнига.ОбновитьСпискиАвтоподстановок";
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПервыйЗапуск";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Пользователи.СоздатьАдминистратора";
	
	// Обработчики, выполняемые при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_4_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_5_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_6_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_6_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.7.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_7_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_10";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_11";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_12";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_13";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_14";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_15";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_17";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_18";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_19";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_21";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.24";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_24";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.25";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_25";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_28";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеДанныхПоБизнесПроцессам_2_0_1_29";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d030d62a-be18-49ec-b4ae-e5071511420d");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_30";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_31";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьУникальныеИдентификаторыИсполнителейПроцессовИсполнения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1e6ea86b-4970-4b8d-a364-d705e2a64483");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.33";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_33";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.34";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_1_34";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеНомераВРегистреДанныеБизнесПроцессов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3e0529db-157d-47bb-8d71-620d9d6189db");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеСрокаИсполненияВРегистреДанныеБизнесПроцессов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e99be00-b32d-48b5-9979-1e57c8d8f249");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_3_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_3_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_3_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ИсправлениеИерархииПроцессов_2_0_3_4";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4e9b631b-6499-4a8f-b16c-3b91e0f87ff7");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_4_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_4_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_6_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_6_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_6_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.7.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПереопределениеУстаревшихДескрипторовДоступа_2_0_7_2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("caa2ef3b-41f2-47f8-8288-3cc6919fead3");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_9_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.9.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_9_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.9.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_9_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.9.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_9_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.9.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_9_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.9.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновитьКонтрагентовВАдреснойКниге";
	Обработчик.Комментарий = НСтр("ru = 'Обновление адресной книги по контрагентам,
		|созданным загрузкой из других прикладных решений'; en = 'Address books update on counterparties, created a load from other application solutions'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e48c3dc-65f8-4184-a6bd-f3c93348c24f");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.10.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_10_1";
	
	Обработчик = Обработчики.Добавить(); // устарел
	Обработчик.Версия = "2.0.10.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресации";
	Обработчик.Комментарий = НСтр("ru = 'Реорганизует роли исполнителей.
		|Обязательна к выполнению перед обновлением на версию 2.1';
		|en = 'Reorganizes performer roles. 
		|It is mandatory before upgrading to version 2.1'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("66bcae93-d9b1-4be3-872d-3fd6bef65862");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.10.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_10_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.11.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_11_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.11.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("423736c1-7be4-439d-bb61-3a420cbc09c0");
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписковОтложенно";
	Обработчик.Комментарий = НСтр("ru = 'Добавление контактной информации в списки и отчеты.
		|Если в списках и отчетах добавить новые колонки с контактной информацией, то до завершения этой процедуры обработки они будут незаполненными.';
		|en = 'Adding contact information to lists and reports.
		|If you add a new column with contact information in lists and reports, then it will be blank until complete this procedure.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.12.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_12_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.12.2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("71448848-85c4-4c05-a90b-5c31b1a4198a");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.УдалитьДанныеОДескрипторахВизИРезолюций_2_0_12_2";
	Обработчик.Комментарий = НСтр("ru = 'Удаление дескрипторов доступа для виз и резолюций. В новой версии они не используются.'; en = 'Remove descriptors for endorsements and resolutions. In the new version they are not used.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.12.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_12_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.12.3";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fd4c31db-7b96-4475-b452-6780b04976e2");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьКомплексныйПроцессДляШаблоновПроцессов_2_0_12_3";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение нового реквизита шаблонов процессов ""Комплексный процесс"".'; en = 'Filltyping the ""Сomplex process"" attribute of process templates.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить(); // устарел
	Обработчик.Версия = "2.0.12.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииПриглашения";
	Обработчик.Комментарий = НСтр("ru = 'Реорганизует роли исполнителей для бизнес-процесса Приглашение'; en = 'Reorganize performer roles for Invitation process'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("202f19cf-643c-4f9e-814d-345066625913");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.13.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_13_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.13.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_13_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.13.4";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d720b513-5872-4d7d-ab16-b70816e87911");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ИсправлениеПорядкаДействийШаблоновСоставныхПроцессов_2_0_13_4";
	Обработчик.Комментарий = НСтр("ru = 'Исправление порядка действий в шаблонах процессов обработки внутренних/входящих/исходящих документов.'; en = 'Correction of the course of action in the treatment of internal process templates/incoming/outgoing documents.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить(); // устарел
	Обработчик.Версия = "2.0.14.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииДескрипторыДоступаОбъектов";
	Обработчик.Комментарий = НСтр("ru = 'Реорганизует роли исполнителей для дескрипторов доступа объектов'; en = 'Reorganize performer roles for object descriptors for permissions'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4197f9e-6a33-4607-9afa-71564657f96e");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.14.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_14_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.15.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_15_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.15.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_15_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.16.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_16_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.17.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_17_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.17.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("195e3167-faed-4485-ae1b-27bd8c575fd0");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПереопределениеДескрипторовСодержимогоПапок_2_0_17_1";
	Обработчик.Комментарий = НСтр("ru = 'Приведение дескрипторов содержимого папок к новой структуре.'; en = 'Bringing folder contents descriptors to the new structure.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.17.2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("614adae0-4f4a-4d5a-a29a-baeae545d0cc");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ИсправлениеПравСодержимогоПапок_2_0_17_2";
	Обработчик.Комментарий = НСтр("ru = 'Обновление прав объектов, которые хранятся в папках, не наследующих права дочерним.'; en = 'Permissions update on objects stored in folders that do not provide permissions for the subordinate ones.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.17.2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7d046827-fadc-4134-8877-d869ab0d3d55");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПереопределениеПравСодержимогоПапок_2_0_17_2";
	Обработчик.Комментарий = НСтр("ru = 'Обновление прав объектов, которые хранятся в папках, не наследующих права дочерним (ч. 2).'; en = 'Permissions update on objects stored in folders that do not provide permissions for the subordinate ones (p. 2).'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.17.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_17_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.17.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_17_4";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Создал"" в документах.'; en = 'Filling in attribute ""Created by"" in documents.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c39d2893-c8d4-40d5-b0ae-638d181ae21e");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.18.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_18_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_7";
	Обработчик.Комментарий = НСтр("ru = 'Установка признака ""Вести учет по организациям"" для видов внутренних документов.'; en = 'Setting of the sign ""Account for companies"" for the types of internal documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.9";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("332e58db-44c7-40b8-ba7c-3e2644e1d823");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.УдалитьДанныеОНеактуальныхДескрипторах_2_1_0_9";
	Обработчик.Комментарий = НСтр("ru = 'Удаление дескрипторов доступа для банковских счетов, контактных лиц контрагентов, номенклатуры дел.'; en = 'Remove handles access to bank accounts, contact persons, contractors, nomenclature of cases.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.10";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("332e58db-44c7-40b8-ba7c-3e2644e1d934");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьНомерСпособаАдресации_2_1_0_10";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита НомерСпособаАдресации у входящих писем.'; en = 'Filling NomerSposobaAdresacii props from incoming emails.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_11";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_12";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_13";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_14";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_15";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеДанныхДляПереходящиеДела_2_1_0_16";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данных для переходящих дел хранения документов.'; en = 'Filling in data for moving cases to store documents.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc723612-3ba4-42bd-b439-d60458b3e942");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_21";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОтказОтГруппПользователей_2_1_0_23";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.25";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_25";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.1";
	Обработчик.Процедура = "ЛокализацияКонфигурацииПереопределяемый.ПерейтиНаВерсию_2_1_1_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.4";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1b904a96-3a6b-11e5-288d-20cf30469c0b");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииПроцессыИЗадачиОтложенно";
	Обработчик.Комментарий = НСтр("ru = 'Реорганизация ролей с объектами адресации в завершенных процессах и задачах.'; en = 'Reorganizing performer roles in inactive processes and tasks.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.4";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6d328890-05c9-11e5-1083-20cf30469c0b");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииШаблоныПроцессовОтложенно";
	Обработчик.Комментарий = НСтр("ru = 'Реорганизация ролей с объектами адресации в служебных шаблонах завершенных комплексных процессов.'; en = 'Reorganizing performer roles in supplementary process templates for finished composite processes.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.5";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("61171df7-4fbe-4a1d-acef-1b3b17765d46");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновитьСрокиИсполненияОтложенноНеАктивныхОбъектов";
	Обработчик.Комментарий = НСтр("ru = 'Обновление сроков исполнения не активных процессов, шаблонов, протоколов мероприятий.'; en = 'Updating due dates for inactive processes, event minutes, templates.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_10";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_1_11";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_2_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_2_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_4_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_4_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_5_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_5_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_5_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_6_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_6_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.РеорганизацияРолейСОбъектамиАдресацииУчастникиПроцессов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("840a00b8-11db-11e6-80b8-9c5c8e4fb1cb");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение участников в регистре ""Участники процессов""'; en = 'Filling in participants in ""Process participants"" register'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеУнаследованныхИзмеренийРегистраУчастникиМероприятия";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("89a89276-e977-11e4-ff8b-20cf30469c0b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение унаследованных измерений в регистре ""Участники мероприятия""'; en = 'Filling in legacy dimensions in ""Event attendees"" register'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_6_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеСостоянийВПроцессах_2_1_6_6";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7b39f2e7-7250-431a-b564-8a1858009bd3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение состояний процессов'; en = 'Filling in process states'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_6_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеРеквизитаШаблонВДействияхКомплексногоПроцесса_2_1_6_7";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3ed5e112-eedf-40e7-8488-5368324cc91e");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Шаблон в процессах'; en = 'Filling in Шаблон attribute in process templates'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОчисткаРеквизитаИсходныйШаблонВШаблонахПроцессов_2_1_6_7";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("87c99a81-fe51-4dc8-9582-65197a63b40c");
	Обработчик.Комментарий = НСтр("ru = 'Очистка реквизита ИсходныйШаблон в шаблонах процессов.'; en = 'Clearing ИсходныйШаблон attribute in process templates'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.6.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеРеквизитаИсходныйШаблонВСлужебныхШаблонах_2_1_6_8";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("64839bc9-87a4-46bb-af3b-91084fc0d20c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ИсходныйШаблон в служебных шаблонах комплексных процессов. '; en = 'Filling in ИсходныйШаблон attribute in supplementary attributes of composite processes '");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_7_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_7_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеРеквизитаПодразделениеВПроектах_2_1_7_3";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("64839bc9-87a4-46bb-af3b-91084fc0d18c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Подразделение в справочнике Проекты. '; en = 'Filling in Подразделение attribute in Проекты catalog. '");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеРеквизитаПодразделениеВМероприятиях_2_1_7_4";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6fed56b9-3b8a-4bff-8693-a6ad31b664a2");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Подразделение в справочнике Мероприятия.'; en = 'Filling in Подразделение attribute in Мероприятия catalog.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_7_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновитьДокументыОрганизациейОтложенно";	
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Организация у документов'; en = 'Filling in Организация attribute in documents'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc723612-3ba4-42bd-b439-d60458b3e943");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_7_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеТабличнойЧастиСтороныШаблоновВнутреннихДокументов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bf26a408-3c85-4c02-ae0e-4b2f62751a2e");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение табличных частей ""Стороны"" шаблонов внутренних документов'; en = 'Filling in ""Стороны"" tabular sections in internal document templates.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеТабличнойЧастиСтороныВнутреннихДокументов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ae45b93-2429-4f53-b93f-bb883aaabfd6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение табличных частей ""Стороны"" внутренних документов'; en = 'Filling in ""Стороны"" tabular sections in internal documents.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_7_9";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеПорядкаСортировкиЭтаповКомплексныхПроцессов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4322d392-e8ff-4c9b-a711-60d39939bdcb");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение порядка сортировки этапов комплексных процессов.'; en = 'Filling in sort order of stages in composite processes.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеПорядкаСортировкиДействийСхемКомплексныхПроцессов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f50e8791-f4f1-473e-b958-48900d143b1e");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение порядка сортировки действий схем комплексных процессов.'; en = 'Filling in sort order of actions in composite process diagrams.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновитьПодразделениеПользователейОтложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Подразделение у пользователей'; en = 'Filling in Department attributes for users'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("259f54c0-57cf-4720-8bd5-83e238f15a70");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_9";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_10";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_11";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_8_12";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.11";
	Обработчик.Процедура = "ЛокализацияКонфигурацииПереопределяемый.ПерейтиНаВерсию_2_1_8_11";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.8.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеНаименованияСторон";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cebe6e99-50f2-4c26-8fab-2ac4c9c58f8a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение наименования сторон в документах и шаблонах документов.'; en = 'Filling in party descriptions in documents and templates.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_9_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.9.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_9_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.9.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_9_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.10.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_10_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.10.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьГрифыУтверждения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b2f2a49a-8bef-469e-882e-f9f835362fec");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение грифов утверждения в документах.'; en = 'Filling in confirmation stamps in documents'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.11.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_11_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.11.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_11_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.11.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_11_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.11.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_11_4";
	
	Возврат Обработчики;
	
КонецФункции

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт


КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсияИБ     - Строка - версия ИБ до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсияИБ        - Строка - версия ИБ после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков
//                                             обновления, сгруппированных по номеру версии.
//  Итерирование по выполненным обработчикам:
//		Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//	
//			Если Версия.Версия = "*" Тогда
//				группа обработчиков, которые выполняются всегда
//			Иначе
//				группа обработчиков, которые выполняются для определенной версии 
//			КонецЕсли;
//	
//			Для Каждого Обработчик Из Версия.Строки Цикл
//				...
//			КонецЦикла;
//	
//		КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево -	если Истина, то выводить форму с описанием 
//											обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт


КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений системы.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновлений.
//   
// См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт


КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	// Предыдущее имя конфигурации, с которой нужно выполнить переход.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	ПредыдущееИмяКонфигурации = Запрос.Выполнить().Выгрузить()[0].ИмяПодсистемы;
	
	ЛокализацияКонфигурацииПереопределяемый.ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики);
	
	Если ПредыдущееИмяКонфигурации = "ДокументооборотКОРП" Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПервыйЗапуск_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_2_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_3_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_1_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_2_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_4_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_2_1_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_5_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_5_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_6_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_8_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_0_13_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_2_1_0_3";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт


КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнения пустой ИБ.

// Обработчик первого запуска
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеКонтактнойИнформациейДокументооборот.КонтактнаяИнформацияОбновлениеИБ();
	
	// обновление с версии ПРОФ
	ПерейтиНаВерсию_КОРП_СВерсииПРОФ();
	
	// нумератор для входящих
	НумераторОбъект = Справочники.Нумераторы.ВходящиеДокументы.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		Нумерация.СформироватьПримерНомера(НумераторОбъект.ФорматНомера, НумераторОбъект.Пример, ""); 
		НумераторОбъект.Записать();
	КонецЕсли;	
	
	// нумератор для исходящих
	НумераторОбъект = Справочники.Нумераторы.ИсходящиеДокументы.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		Нумерация.СформироватьПримерНомера(НумераторОбъект.ФорматНомера, НумераторОбъект.Пример, ""); 
		НумераторОбъект.Записать();
	КонецЕсли;
	
	// нумератор для внутренних
	НумераторОбъект = Справочники.Нумераторы.ВнутренниеДокументы.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		Нумерация.СформироватьПримерНомера(НумераторОбъект.ФорматНомера, НумераторОбъект.Пример, ""); 
		НумераторОбъект.Записать();
	КонецЕсли;	
	
	// способы доставки
	СпособыДоставки = Новый СписокЗначений;
	СпособыДоставки.Добавить(НСтр("ru = 'Почта'; en = 'Mail'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Email'; en = 'Email'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Факс'; en = 'Fax'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Курьер'; en = 'Courier'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Фельдсвязь'; en = 'Govt. courier'"));
	
	Для Каждого СпособДоставки Из СпособыДоставки Цикл
		Если Справочники.СпособыДоставки.НайтиПоНаименованию(СпособДоставки.Значение).Пустая() Тогда
			СпособДоставкиОбъект = Справочники.СпособыДоставки.СоздатьЭлемент();
			СпособДоставкиОбъект.Наименование = СпособДоставки.Значение;
			СпособДоставкиОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	// функциональные опции
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	Константы.ИспользоватьХранилищеФайлов.Установить(Истина);
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	Константы.ИспользоватьНоменклатуруДел.Установить(Истина);
	Константы.ИспользоватьЖурналПередачиДокументов.Установить(Истина);
	Константы.ИспользоватьСоставДокументов.Установить(Истина);
	
	Константы.ИспользоватьВидыВходящихДокументов.Установить(Истина);
	Константы.ИспользоватьВидыИсходящихДокументов.Установить(Истина);
	Константы.ИспользоватьВидыВнутреннихДокументов.Установить(Истина);
	Константы.ИспользоватьВидыДокументов.Установить(Истина);
	
	Константы.ИспользоватьФайлыУВходящихДокументов.Установить(Истина);
	Константы.ИспользоватьФайлыУИсходящихДокументов.Установить(Истина);
	
	Константы.ИспользоватьСвязиДокументов.Установить(Истина);
	Константы.ИспользоватьРезолюцииВДокументах.Установить(Истина);
	
	Константы.ИзменятьЗаданияЗаднимЧислом.Установить(Истина);
	Константы.ИспользоватьПеренаправлениеЗадач.Установить(Истина);
	
	Константы.ИспользоватьСостоянияДокументов.Установить(Истина);
	Константы.ОграничиватьДоступностьПолейПоСостоянию.Установить(Истина);
	Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Установить(Истина);
	
	Константы.ИспользоватьСпискиРассылкиПоКонтрагентам.Установить(Истина);
	Константы.ИзменениеФайловMSWordТолькоНаСервере.Установить(Ложь);
	
	Константы.ИспользоватьАвтозаполнениеФайлов.Установить(Истина);
	Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	
	Константы.ИспользоватьВопросыВыполненияЗадач.Установить(Истина);
	Константы.ОчищатьДанныеДляПолнотекстовогоПоиска.Установить(Истина);
	
	Константы.ОсновнаяЕдиницаДлительности.Установить(Перечисления.ЕдиницыДлительности.Час);
	Константы.ОсновнаяЕдиницаТрудозатрат.Установить(Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас);
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = 20;
	Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Установить(МаксимальныйРазмерВнешнегоИсходящегоПисьма);
	
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(Истина);
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
	
	Константы.ПроверятьСоответствиеРабочихГруппОбщимНастройкам.Установить(Истина);
	
	Константы.ИспользоватьСервисСклоненияMorpher.Установить(Истина);
	
	Константы.ИспользоватьКонтрольныеТочки.Установить(Истина);
	
	// Начальное заполнение профилей групп доступа
	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили();
	
	// Профиль "Пользователи" назначается всем пользователям
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
	ПрофильПользователи = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	РегистрыСведений.ПолномочияПользователей.ДобавитьПолномочия(
		Справочники.РабочиеГруппы.ВсеПользователи, ПрофильПользователи);
	
	// Справочник "Организации"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// комментарии к предопределенным типам связи
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПолученОтвет, 		НСтр("ru = 'Ссылка на входящий документ, полученный в ответ на исходящий'; en = 'Link to incoming document received in response to the outgoing'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтправленОтвет, 		НСтр("ru = 'Ссылка на исходящий документ, отправленный в ответ на входящий'; en = 'Link to outgoing document sent in response to an incoming'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПовторноеОбращение, 	НСтр("ru = 'Cсылка из первичного на повторное обращение'; en = 'Relation from the primary appeal to a repeat one'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПервичноеОбращение, 	НСтр("ru = 'Cсылка из повторного на первичное обращение'; en = 'Relation from the repeat appeal to the primary one'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПредметПереписки, 	НСтр("ru = 'Cсылка из входящих и исходящих на предмет переписки'; en = 'Relation from incoming and outgoing for subject of correspondence'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПерепискаПоПредмету,	НСтр("ru = 'Ссылка на входящие и исходящие документы, при помощи которых ведется переписка по предмету'; en = 'Link to incoming and outgoing documents, through which correspondence on subject is ongoing'"));
	
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ВОтветНаПереадресованное, НСтр("ru = 'Cсылка на входящий документ, полученный при переадресации, в ответ на который отправляется ответ переадресовавшему'; en = 'Relation to the incoming document received during forwarding, in response to which the reply is sent to redirector'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтветПереадресовавшему, 	НСтр("ru = 'Ссылка на исходящий документ, отправленный в качестве ответа переадресовавшему'; en = 'Link to the outgoing document sent in response to redirector'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПереадресованДокументом, 	НСтр("ru = 'Cсылка из входящего на документ, который его переадресовал'; en = 'Relation from the incoming to document, which it forwarded'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПереадресацияДокумента, 	НСтр("ru = 'Ссылка из исходящего на документ, который он переадресовывает'; en = 'Link from outgoing to document that it redirects'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.Дубликат, 				НСтр("ru = 'Cсылка из основного обращения на дубликат'; en = 'Relation from the main appeal to its duplicate'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОсновноеОбращение, 		НСтр("ru = 'Cсылка из дубликата на основное обращение'; en = 'Relation from duplicate to the main treatment'"));

	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ДелаетНеДействующим, 		НСтр("ru = 'Cсылка из документа, который отменяет (расторгает) другие документы'; en = 'Relation from the document that revokes (cancels) other documents'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.НеДействуетВСоответствии, НСтр("ru = 'Ссылка из отмененного документа на тот, который его отменяет'; en = 'Link from canceled document to document, which it cancels'"));
	
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПолученВОтветНа, 	 НСтр("ru = 'Cсылка из входящего на документ, в ответ на который он получен'; en = 'Relation from the incoming to document, in response to which it has been received'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтправленВОтветНа, НСтр("ru = 'Cсылка из исходящего на документ, в ответ на который он отправлен'; en = 'Relation from the outgoing to the document, in response to which it has been sent'"));
	
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.НаОснованииПисьма, НСтр("ru = 'Cсылка из входящих, исходящих, внутренних документов и проектов на входящее или исходящее письмо'; en = 'Relation from incoming, outgoing, internal document or project to incoming or outgoing email'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПисьмоОснование,   НСтр("ru = 'Cсылка из входящего или исходящего письма на входящий, исходящий, внутренний документ или проект'; en = 'Relation from incoming or outgoing emails to incoming, outgoing, internal document or project'"));
	
	// Предмет переписки - Переписка по предмету 
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);

	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.Мероприятия.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.Мероприятия.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	// Первичное обращение - Повторное обращение	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПервичноеОбращение, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПовторноеОбращение, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// В ответ на - Получен ответ
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПолученВОтветНа, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПолученОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// В ответ на - Отправлен ответ	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОтправленВОтветНа, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ОтправленОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// ВОтветНаПереадресованное - ОтветПереадресовавшему
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ВОтветНаПереадресованное, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ОтветПереадресовавшему, 
		Перечисления.ХарактерСвязей.Единичная, 
		Истина);
		
	// ВОтветНаПереадресованное - ОтветПереадресовавшему
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПереадресованДокументом, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПереадресацияДокумента, 
		Перечисления.ХарактерСвязей.Единичная, 
		Истина);	
		
	// Дубликат - ОсновноеОбращение
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОсновноеОбращение, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.Дубликат, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// НеДействуетВСоответствии - ДелаетНеДействующим
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.НеДействуетВСоответствии, 
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ДелаетНеДействующим, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// В ответ на - Получен ответ
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПолученВОтветНа, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПолученОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// В ответ на - Отправлен ответ	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОтправленВОтветНа, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ОтправленОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// Входящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо отправлено в ответ на входящее
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ получен в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученВОтветНаПисьмо,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящее письмо отправлено в ответ на входящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ отправлен в ответ на входящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаДокумент,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Пересылка входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Пересылка исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Входящего письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);	
		
	// Исходящее письмо отправлено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтвет,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Мероприятия на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Мероприятия на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// заполнение валют по умолчанию
	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	СоздатьВалюту("643", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", КлассификаторТаблица);
	СоздатьВалюту("840", "доллар, доллара, долларов, м, цент, цента, центов, м, 2", КлассификаторТаблица);
	СоздатьВалюту("978", "евро, евро, евро, м, цент, цента, центов, м, 2", КлассификаторТаблица);
	
	СправочникСсылка = Справочники.Валюты.НайтиПоКоду("643"); // рубль
	Константы.ОсновнаяВалюта.Установить(СправочникСсылка);
	
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796"); // шт
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166"); // кг
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("778"); // упак
	
	// заполнение справочника ВидыБизнесСобытий
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента, НСтр("ru='Создание внутреннего документа'; en = 'Internal document create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеВходящегоДокумента, НСтр("ru='Создание входящего документа'; en = 'Incoming document create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеИсходящегоДокумента, НСтр("ru='Создание исходящего документа'; en = 'Outgoing document create'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента, НСтр("ru='Изменение внутреннего документа'; en = 'Internal document change'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента, НСтр("ru='Изменение входящего документа'; en = 'Incoming document change'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента, НСтр("ru='Изменение исходящего документа'; en = 'Outgoing document change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента, НСтр("ru='Регистрация внутреннего документа'; en = 'Registration of internal document'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента, НСтр("ru='Регистрация входящего документа'; en = 'Registration of incoming document'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента, НСтр("ru='Регистрация исходящего документа'; en = 'Registration of outgoing document'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента, НСтр("ru='Перерегистрация внутреннего документа'; en = 'Repeat registration of internal document'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента, НСтр("ru='Перерегистрация входящего документа'; en = 'Repeat registration of incoming document'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента, НСтр("ru='Перерегистрация исходящего документа'; en = 'Repeat registration of outgoing document'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.НазначениеОтветственного, НСтр("ru='Назначение ответственным за документ'; en = 'Appointed as responsible for a document'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса, НСтр("ru='Старт процесса'; en = 'Process start'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса, НСтр("ru='Завершение процесса'; en = 'Process completion'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса, НСтр("ru='Остановка процесса'; en = 'Stop process'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса, НСтр("ru='Возобновление процесса'; en = 'Process activation'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования, НСтр("ru='Захват файла для редактирования'; en = 'Locking file for editing'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОсвобождениеФайла, НСтр("ru='Освобождение файла'; en = 'Unlock file'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеФайла, НСтр("ru='Создание файла'; en = 'File create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеФайла, НСтр("ru='Изменение файла'; en = 'File change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеКонтрагента, НСтр("ru='Создание контрагента'; en = 'Creation of counterparty'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта, НСтр("ru='Изменение состава комплекта'; en = 'Set contents change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеЗадачи,			НСтр("ru='Создание задачи'; en = 'Task create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,	НСтр("ru='Перенаправление задачи'; en = 'Task forwarding'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалитьПросроченаЗадача,	НСтр("ru='Просрочена задача'; en = 'Task is overdue'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,			НСтр("ru='Задача выполнена'; en = 'Task is executed'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалитьПодошелСрокЗадачи,	НСтр("ru='Подошел срок задачи'; en = 'Task due date is approaching'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'; en = 'Event create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'; en = 'Event change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'; en = 'Project create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'; en = 'Project change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'; en = 'Project task create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'; en = 'Project task change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию, НСтр("ru='Добавление в категорию'; en = 'Add to category'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалениеИзКатегории, НСтр("ru='Удаление из категории'; en = 'Remove from category'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'; en = 'Event create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'; en = 'Event change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'; en = 'Project create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'; en = 'Project change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'; en = 'Project task create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'; en = 'Project task change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеСообщения, НСтр("ru='Создание сообщения'; en = 'Message create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, НСтр("ru='Прерывание процесса'; en = 'Process termination'"));	
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи, НСтр("ru='Отмена выполнения задачи'; en = 'Task execution cancelation'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеОтсутствия, НСтр("ru='Создание отсутствия'; en = 'Absence create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия, НСтр("ru='Изменение отсутствия'; en = 'Absence change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеБрони, НСтр("ru='Создание брони'; en = 'Reservation create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеБрони, НСтр("ru='Изменение брони'; en = 'Reservation change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса, НСтр("ru='Изменение значения показателя процесса'; en = 'Process metric change'"));
	
	ЗаполнитьВидыОтсутствий();
	
	Константы.СрокХраненияБизнесСобытий.Установить(7); // ставим срок хранения бизнес-событий - 7 дней
	
	// Связи документов.
	СвязиДокументов.ПерейтиНаВерсию_1_2_1_3();
	
	РаботаСФайламиВызовСервера.ИнициализироватьКонстантуХранитьФайлыВТомахНаДиске();
	
	// все тома хранения файлов переносим в группу "Группа по умолчанию"
	Группа = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию("Группа по умолчанию", Истина);
	Если Группа = Неопределено ИЛИ Группа = Справочники.ТомаХраненияФайлов.ПустаяСсылка() Тогда
		Группа = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
		Группа.Наименование = "Группа по умолчанию";
		Группа.Записать();
	КонецЕсли;
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2016Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2017Год();
	
	// обновление графиков работы
	Выборка = Справочники.ГрафикиРаботы.Выбрать();
	Пока Выборка.Следующий() Цикл
		ГрафикРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне = 8;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе = 40;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце = 20;
		КонецЕсли;
		ГрафикРаботыОбъект.Записать();
	КонецЦикла;
	
	// Заполнение предопределенных состояний документа в СВД
	Выборка = Справочники.ВидыСостоянийДокументовВСВД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 10;
			Состояние.НомерКартинкиВКоллекции = 1;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Отправлен Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 20;
			Состояние.НомерКартинкиВКоллекции = 2;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 30;
			Состояние.НомерКартинкиВКоллекции = 3;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 40;
			Состояние.НомерКартинкиВКоллекции = 4;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Ошибка Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 60;
			Состояние.НомерКартинкиВКоллекции = 6;
			Состояние.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИдентификаторТекущегоУзлаПолногоПланаОбмена();
	
	ВыполнитьКоррекциюЗадачИПроцессовПослеПереходаСПРОФНаКОРП();
	
	Константы.СрокХраненияПротоколаДоставкиПочты.Установить(30); // 30 дней
	
	Попытка
		ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем = Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Получить();
		Если ЗначениеЗаполнено(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем) Тогда 
			Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Установить(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем);
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		ВыполнятьОтправкуВОтдельномРегламентномЗадании = Истина;
		Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Установить(ВыполнятьОтправкуВОтдельномРегламентномЗадании);
	КонецЕсли;
	
	СоздатьВидПроекта(НСтр("ru = 'Общий'; en = 'Common'"), Ложь);
	
	// Начальное создание поставляемых областей делегирования
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Строка.ИмяПредопределенного;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
	// создание поставляемых настроек доступности
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Строка Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			НастройкаОбъект = Справочники.НастройкиДоступностиПоСостоянию.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(НастройкаДоступностиСсылка);
		Иначе // Обновление существующей настройки	 
			НастройкаОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		НастройкаОбъект.Наименование = Строка.Наименование;
		НастройкаОбъект.ТипДокумента = Строка.ТипДокумента;
		НастройкаОбъект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
		
		ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Строка.Роль);
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаОбъект.ТипДокумента, Строка.Роль);
		НастройкаОбъект.НастройкиДоступности.Очистить();
		НастройкаОбъект.НастройкиДоступности.Загрузить(НастройкиДоступности);
		
		НастройкаОбъект.Записать();
	КонецЦикла;	
	
	// Заполнение констант для формирования служебной информации при ответе и пересылке
	Константы.СокращатьИнформациюОПисьмеПриОтвете.Установить(Ложь);
	Константы.СокращатьИнформациюОПисьмеПриПересылке.Установить(Ложь);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете.Установить(Истина);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке.Установить(Истина);
	Константы.СокращатьПредставлениеАдресатов.Установить(Истина);
	Константы.ЧислоАдресатовДляКраткогоПредставления.Установить(30);
	Константы.СимволЦитированияВПереписке.Установить("> ");
	Константы.ВидЦитированияПриОтветеВФорматеHTML.Установить(Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса);
	
	// Загрузка типовых инструкций
	Константы.ИспользоватьИнструкции.Установить(Истина);
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	

	// Установить у системной учетной записи опцию "Использовать для легкой почты"
	СистемнаяУчетнаяЗаписьОбъект = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СистемнаяУчетнаяЗаписьОбъект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Легкая;
	СистемнаяУчетнаяЗаписьОбъект.Записать();
	
	// Установить настройки по умолчанию для механизма выполнения задач по почте
	НастройкиВыполненияЗадачПоПочте = ВыполнениеЗадачПоПочтеСервер.ПолучитьНастройкиПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(
		НастройкиВыполненияЗадачПоПочте.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(
		НастройкиВыполненияЗадачПоПочте.СрокХраненияПротоколовВыполненияЗадачПоПочте);
		
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'; en = 'Common topics'");
	РазделОбщиеТемыОбъект.Записать();
		
	// Заполнение признака проверки электронных адресов в видах КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И НЕ ВидыКонтактнойИнформации.ПроверятьКорректность");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.ПроверятьКорректность = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
	КонецЦикла;
	
	// Замена предопределенного значения ДругаяИнформацияОрганизации
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	// БЭД
	Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Установить(Истина);
	
	// Фоновая маршрутизация комплексных процессов
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Константы.ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов.Установить(Истина);
	КонецЕсли;
	
	Константы.ИспользоватьСхемыПомещений.Установить(Истина);
	
	Константы.ГрупповойРасчетПравДоступаРазмерПорции.Установить(100);
	
	Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Установить(Истина);
	
	// Заполнение показателей виджетов.
	Справочники.ПоказателиВиджетов.ЗаполнитьПоказатели();
	
	// Заполнение исполнителей задач.
	РеорганизацияРолейСОбъектамиАдресацииИсполнителиЗадач();
	
	// Заполнение адресной книги
	Справочники.АдреснаяКнига.ЗаполнитьАдреснуюКнигу();
	РегистрыСведений.ПоискВАдреснойКниге.ЗаполнитьСловаПоиска();
	
	// Заполнение настройки ФактическийИсполнительЗадач по умолчанию.
	Константы.ФактическийИсполнительЗадач.Установить(Перечисления.ФактическийИсполнительЗадач.ИсполнительЗадачи);
	
	// Заполнение справочника КлючевыеОперации
	ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций();
	
	// Дополнительные настройки мероприятий.
	Константы.ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия.Установить(Истина);
	
	Константы.ИспользоватьФоновоеВыполнениеЗадач.Установить(Истина);
	Константы.ИспользоватьФоновыйСтартПроцессов.Установить(Истина);
	
	// Отправка SMS.
	УстановитьНастройкиОтправкиSMS();
	
	// Способы уведомления.
	УстановитьСпособыУведомления();
	
	// Подписки на уведомления по умолчанию.
	РегистрыСведений.НастройкиУведомлений.ЗаполнитьПодпискиПоУмолчанию();
	
	// Начальное заполнение уровней доступа и разрешений.
	Справочники.УровниДоступа.ЗаполнитьРеквизитыПредопределенныхЭлементов();
	РегистрыСведений.РазрешенияДоступаОбщие.НачальноеЗаполнение();
	
	Обработки.РасчетПравДоступаПослеОбновления.УстановитьСостояние("Выполнено", Неопределено, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УровниКонтроля.Ссылка
	|ИЗ
	|	Справочник.УровниКонтроля КАК УровниКонтроля";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '1 (Стратегический)'; en = '1 (Strategic)'");
		НовыйУровень.Записать();
		
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '2 (Тактический)'; en = '2 (Tactical)'");
		НовыйУровень.Записать();
		
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '3 (Оперативный)'; en = '3 (Operational)'");
		НовыйУровень.Записать();
		
	КонецЕсли;	
	
	// Использование разрезов доступа.
	МенеджерЗначения = Константы.ИспользованиеРазрезовДоступа.СоздатьМенеджерЗначения();
	МенеджерЗначения.НачальноеЗаполнение();
	
	// Создание организации		
	Если Не Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда 
		
		КоличествоОрганизаций = Справочники.Организации.КоличествоОрганизаций();
		Организация = Справочники.Организации.ПустаяСсылка();
		
		Если КоличествоОрганизаций = 0 Тогда
			СоздатьОрганизацию();
		КонецЕсли;
		
	КонецЕсли;
	
	// Переопределяемое первоначальное заполнение информационной базы. Выполняется последним.
	ЛокализацияКонфигурацииПереопределяемый.ПервыйЗапуск();
	
КонецПроцедуры

Процедура ПервыйЗапуск_СПРОФНаКОРП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПерейтиНаВерсию_КОРП_СВерсииПРОФ();
	
	// функциональные опции
	Константы.ОсновнаяЕдиницаДлительности.Установить(Перечисления.ЕдиницыДлительности.Час);
	Константы.ОсновнаяЕдиницаТрудозатрат.Установить(Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас);
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = 20;
	Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Установить(МаксимальныйРазмерВнешнегоИсходящегоПисьма);
	
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(Истина);
	
	// начальное заполнение профилей групп доступа
	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили();
	
	// комментарии к предопределенным типам связи
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.НаОснованииПисьма, НСтр("ru = 'Cсылка из входящих, исходящих, внутренних документов и проектов на входящее или исходящее письмо'; en = 'Relation from incoming, outgoing, internal document or project to incoming or outgoing email'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПисьмоОснование,   НСтр("ru = 'Cсылка из входящего или исходящего письма на входящий, исходящий, внутренний документ или проект'; en = 'Relation from incoming or outgoing emails to incoming, outgoing, internal document or project'"));
	
	// Предмет переписки - Переписка по предмету 
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.Мероприятия.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.Мероприятия.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	// Входящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо отправлено в ответ на входящее
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ получен в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученВОтветНаПисьмо,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящее письмо отправлено в ответ на входящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ отправлен в ответ на входящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаДокумент,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Пересылка входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Пересылка исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Входящего письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);	
		
	// Исходящее письмо отправлено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтвет,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Мероприятия на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Мероприятия на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// заполнение справочника ВидыБизнесСобытий
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'; en = 'Event create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'; en = 'Event change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'; en = 'Project create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'; en = 'Project change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'; en = 'Project task create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'; en = 'Project tasks change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию, НСтр("ru='Добавление в категорию'; en = 'Add to category'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалениеИзКатегории, НСтр("ru='Удаление из категории'; en = 'Remove from category'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'; en = 'Event create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'; en = 'Event change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'; en = 'Project create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'; en = 'Project change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'; en = 'Project task create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'; en = 'Project tasks change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеСообщения, НСтр("ru='Создание сообщения'; en = 'Message create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, НСтр("ru='Прерывание процесса'; en = 'Process termination'"));	
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи, НСтр("ru='Отмена выполнения задачи'; en = 'Task execution cancelation'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеОтсутствия, НСтр("ru='Создание отсутствия'; en = 'Absence create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия, НСтр("ru='Изменение отсутствия'; en = 'Absence change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеБрони, НСтр("ru='Создание брони'; en = 'Reservation create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеБрони, НСтр("ru='Изменение брони'; en = 'Reservation change'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса, НСтр("ru='Изменение значения показателя процесса'; en = 'Process metric change'"));
	
	ЗаполнитьВидыОтсутствий();
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2016Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2017Год();
	
	// обновление графиков работы
	Выборка = Справочники.ГрафикиРаботы.Выбрать();
	Пока Выборка.Следующий() Цикл
		ГрафикРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне = 8;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе = 40;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце = 20;
		КонецЕсли;
		ГрафикРаботыОбъект.Записать();
	КонецЦикла;
	
	// Заполнение предопределенных состояний документа в СВД
	Выборка = Справочники.ВидыСостоянийДокументовВСВД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 10;
			Состояние.НомерКартинкиВКоллекции = 1;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Отправлен Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 20;
			Состояние.НомерКартинкиВКоллекции = 2;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 30;
			Состояние.НомерКартинкиВКоллекции = 3;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 40;
			Состояние.НомерКартинкиВКоллекции = 4;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Ошибка Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 60;
			Состояние.НомерКартинкиВКоллекции = 6;
			Состояние.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИдентификаторТекущегоУзлаПолногоПланаОбмена();
	
	ВыполнитьКоррекциюЗадачИПроцессовПослеПереходаСПРОФНаКОРП();
	
	Константы.СрокХраненияПротоколаДоставкиПочты.Установить(30); // 30 дней
	
	Попытка
		ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем = Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Получить();
		Если ЗначениеЗаполнено(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем) Тогда 
			Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Установить(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем);
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		ВыполнятьОтправкуВОтдельномРегламентномЗадании = Истина;
		Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Установить(ВыполнятьОтправкуВОтдельномРегламентномЗадании);
	КонецЕсли;
	
	СоздатьВидПроекта(НСтр("ru = 'Общий'; en = 'Common'"), Ложь);
	
	// Начальное создание поставляемых областей делегирования
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Строка.ИмяПредопределенного;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
	// создание поставляемых настроек доступности
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Строка Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			НастройкаОбъект = Справочники.НастройкиДоступностиПоСостоянию.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(НастройкаДоступностиСсылка);
		Иначе // Обновление существующей настройки	 
			НастройкаОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		НастройкаОбъект.Наименование = Строка.Наименование;
		НастройкаОбъект.ТипДокумента = Строка.ТипДокумента;
		НастройкаОбъект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
		
		ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Строка.Роль);
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаОбъект.ТипДокумента, Строка.Роль);
		НастройкаОбъект.НастройкиДоступности.Очистить();
		НастройкаОбъект.НастройкиДоступности.Загрузить(НастройкиДоступности);
		
		НастройкаОбъект.Записать();
	КонецЦикла;	
	
	// Заполнение констант для формирования служебной информации при ответе и пересылке
	Константы.СокращатьИнформациюОПисьмеПриОтвете.Установить(Ложь);
	Константы.СокращатьИнформациюОПисьмеПриПересылке.Установить(Ложь);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете.Установить(Истина);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке.Установить(Истина);
	Константы.СокращатьПредставлениеАдресатов.Установить(Истина);
	Константы.ЧислоАдресатовДляКраткогоПредставления.Установить(30);
	Константы.СимволЦитированияВПереписке.Установить("> ");
	Константы.ВидЦитированияПриОтветеВФорматеHTML.Установить(Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса);
	
	// Установить у системной учетной записи опцию "Использовать для легкой почты"
	СистемнаяУчетнаяЗаписьОбъект = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СистемнаяУчетнаяЗаписьОбъект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Легкая;
	СистемнаяУчетнаяЗаписьОбъект.Записать();
	
	// Установить настройки по умолчанию для механизма выполнения задач по почте
	НастройкиВыполненияЗадачПоПочте = ВыполнениеЗадачПоПочтеСервер.ПолучитьНастройкиПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(
		НастройкиВыполненияЗадачПоПочте.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(
		НастройкиВыполненияЗадачПоПочте.СрокХраненияПротоколовВыполненияЗадачПоПочте);
		
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'; en = 'Common topics'");
	РазделОбщиеТемыОбъект.Записать();
		
	// Заполнение признака проверки электронных адресов в видах КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И НЕ ВидыКонтактнойИнформации.ПроверятьКорректность");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.ПроверятьКорректность = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
	КонецЦикла;
	
	// Фоновая маршрутизация комплексных процессов
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Константы.ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов.Установить(Истина);
	КонецЕсли;
	
	// Заполнение показателей виджетов.
	Справочники.ПоказателиВиджетов.ЗаполнитьПоказатели();
	
	// Заполнение адресной книги
	Справочники.АдреснаяКнига.ЗаполнитьПредопределенныеРазделы();
	Справочники.АдреснаяКнига.ОбновитьСпискиАвтоподстановок();
	
	// Заполнение справочника КлючевыеОперации
	ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций();
	
	// Заполнение состояний
	СоответствиеСостояний = Делопроизводство.ПолучитьСоответствиеСостояний();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияСостоянийДокументов.Период КАК Период,
	|	ИсторияСостоянийДокументов.Документ,
	|	ИсторияСостоянийДокументов.Состояние,
	|	ИсторияСостоянийДокументов.Установил
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов КАК ИсторияСостоянийДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Период = Выборка.Период;
		Документ = Выборка.Документ;
		Состояние = Выборка.Состояние;
		Установил = Выборка.Установил;
		
		МенеджерЗаписи = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Состояние = Перечисления.СостоянияДокументов.ПустаяСсылка();
		МенеджерЗаписи.Удалить();
		
		// состояние
		ТекущееСостояние = Делопроизводство.ПолучитьСостояниеДокумента(Документ, СоответствиеСостояний.Получить(Состояние));
		
		МенеджерЗаписи = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Состояние = ТекущееСостояние;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Состояние = Состояние;
		МенеджерЗаписи.Установил = Установил;
		МенеджерЗаписи.ДатаУстановки = Период;
		МенеджерЗаписи.Записать();
		
		// представление 
		ПредставлениеСостояния = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ);
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Документ, "ПредставлениеСостояния", ПредставлениеСостояния);
			
	КонецЦикла;	
	
	// Дополнительные настройки мероприятий.
	Константы.ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия.Установить(Истина);
	
	Константы.ИспользоватьФоновоеВыполнениеЗадач.Установить(Истина);
	Константы.ИспользоватьФоновыйСтартПроцессов.Установить(Истина);
	
	// Подписки на уведомления по умолчанию.
	РегистрыСведений.НастройкиУведомлений.ЗаполнитьПодпискиПоУмолчанию();
	
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	// Использование разрезов доступа.
	РазрезыДоступа = Константы.ИспользованиеРазрезовДоступа.Получить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДоступа.Ссылка,
		|	ВидыДоступа.Наименование КАК Наименование
		|ИЗ
		|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
		|ГДЕ
		|	ВидыДоступа.Предопределенный
		|	И НЕ ВидыДоступа.Ссылка В (&ИмеющиесяРазрезы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
		
	РазрезыДоступа = РазрезыДоступа.Получить();		
	Запрос.УстановитьПараметр("ИмеющиесяРазрезы", РазрезыДоступа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РазрезыДоступа.Добавить(Выборка.Ссылка, Выборка.Наименование,
			Выборка.Ссылка <> ПланыВидовХарактеристик.ВидыДоступа.Подразделения);
		
	КонецЦикла;
	
	РазрезыДоступа.СортироватьПоПредставлению();
	Константы.ИспользованиеРазрезовДоступа.Установить(Новый ХранилищеЗначения(РазрезыДоступа));
	
	// БЭД
	Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Установить(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ.

Процедура ПерейтиНаВерсию_1_2_7_2_СПРОФНаКОРП() Экспорт
	
	// Заполнение шаблонов процессов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	МассивИменСправочников = Новый Массив;
	МассивИменСправочников.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	МассивИменСправочников.Добавить("ШаблоныПриглашения");
	
	ТекстЗапроса = "";
	ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	ШаблонПроцесса.Ссылка,
		|	%ПолеСИменемСправочника%
		|ИЗ
		|	Справочник.%ИмяСправочника% КАК ШаблонПроцесса
		|ГДЕ
		|	Выразить(ШаблонПроцесса.НаименованиеБизнесПроцесса КАК Строка(250)) = """"";
		
	Для Каждого ИмяСправочника из МассивИменСправочников Цикл
		
		ПолеСИменемСправочника = """" + ИмяСправочника + """" + ?(ТекстЗапроса = "", " КАК ИмяСправочника", "");
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "",
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|") + ШаблонТекстаЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСправочника%", ИмяСправочника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСИменемСправочника%", ПолеСИменемСправочника);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.НаименованиеБизнесПроцесса = ШаблоныБизнесПроцессов.НаименованиеПроцессаПоУмолчанию(
												Выборка.ИмяСправочника, Выборка.Ссылка);
		ШаблонОбъект.ДобавлятьНаименованиеПредмета = Истина;
		ШаблонОбъект.Записать();
	КонецЦикла;
    ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_7_3_СПРОФНаКОРП() Экспорт
	
	// Заполнение производственного календаря 2013
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2013Год();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_1_СПРОФНаКОРП() Экспорт
	
	// заполнение табл части Контрагенты
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Справочники.ВнутренниеДокументы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контрагент)
		 Или ЗначениеЗаполнено(Выборка.КонтактноеЛицо)
		 Или ЗначениеЗаполнено(Выборка.ПодписалОтКонтрагента) Тогда 

			Если Выборка.Контрагенты.Количество() = 0 Тогда 
				Документ = Выборка.ПолучитьОбъект();
				
				Строка = Документ.Контрагенты.Добавить();
				Строка.Контрагент = Документ.Контрагент;
				Строка.КонтактноеЛицо = Документ.КонтактноеЛицо;
				Строка.ПодписалОтКонтрагента = Документ.ПодписалОтКонтрагента;	
				
				Документ.ОбменДанными.Загрузка = Истина;
				Документ.Записать();
				
				КонтрагентыДляСписков = Делопроизводство.ПолучитьКонтрагентовДляСписков(
					Документ.Контрагенты.Выгрузить());
				РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
					Документ.Ссылка, "КонтрагентыДляСписков", КонтрагентыДляСписков);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	Выборка = Справочники.ШаблоныВнутреннихДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контрагент)
			Или ЗначениеЗаполнено(Выборка.КонтактноеЛицо) Тогда 
			
			Если Выборка.Контрагенты.Количество() = 0 Тогда 
				Шаблон = Выборка.ПолучитьОбъект();
				Строка = Шаблон.Контрагенты.Добавить();
				Строка.Контрагент = Шаблон.Контрагент;
				Строка.КонтактноеЛицо = Шаблон.КонтактноеЛицо;
				
				Шаблон.ОбменДанными.Загрузка = Истина;
				Шаблон.Записать(); 
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_2_СПРОФНаКОРП() Экспорт
	
	// настройки нумерации
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Если Метаданные.Справочники.ВидыВнутреннихДокументов.Реквизиты.Найти("УдалитьНумератор") <> Неопределено Тогда 
		
		Запрос = Новый Запрос; 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.УдалитьНумератор КАК Нумератор,
		|	ВидыВнутреннихДокументов.УдалитьСпособНумерации КАК СпособНумерации,
		|	ВидыВнутреннихДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыВходящихДокументов.УдалитьНумератор,
		|	ВидыВходящихДокументов.УдалитьСпособНумерации,
		|	ВидыВходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыИсходящихДокументов.УдалитьНумератор,
		|	ВидыИсходящихДокументов.УдалитьСпособНумерации,
		|	ВидыИсходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидДокумента = Выборка.ВидДокумента;
			МенеджерЗаписи.ТипДокумента = Нумерация.ПолучитьТипДокументаПоВиду(Выборка.ВидДокумента);
			МенеджерЗаписи.Нумератор = Выборка.Нумератор;
			МенеджерЗаписи.СпособНумерации = Выборка.СпособНумерации;
			МенеджерЗаписи.Записать();
		КонецЦикла;	
		
		Если Не Делопроизводство.ИспользоватьВидыВходящихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
		
		Если Не Делопроизводство.ИспользоватьВидыИсходящихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если Не Делопроизводство.ИспользоватьВидыВнутреннихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	
	// Заполнить главную задачу в регистре ДанныеБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Важность КАК Важность,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Состояние КАК Состояние,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	(ДанныеБизнесПроцессов.ГлавнаяЗадача = &ПустаяСсылка
		|				И ДанныеБизнесПроцессов.БизнесПроцесс.ГлавнаяЗадача <> &ПустаяСсылка
		|			ИЛИ ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
		|			ИЛИ ДанныеБизнесПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.ПустаяСсылка))";
	Запрос.УстановитьПараметр("ПустаяСсылка", Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс = Выборка.БизнесПроцесс;
		МенеджерЗаписи.Завершен = Выборка.Завершен;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ГлавнаяЗадача = Выборка.ГлавнаяЗадача;
		МенеджерЗаписи.Состояние = Выборка.Состояние;
		МенеджерЗаписи.Важность = Выборка.Важность;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Заполнить предметы, значения автоподстановки и условия в шаблонах процессов
	ЗаполнитьПредметыШаблоновПроцессов();
	
	// Добавление папок мероприятий в область делегирования - Мероприятия
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиМероприятий", "51c24c1c-4a25-4c32-9100-a6482eb3b00e");
	
	// Добавление области делигирования - Календарь
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		Если Строка.Идентификатор <> "57da031c-e234-423a-8a94-b2fb8cf5463d" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
			|ГДЕ
			|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление прав на использование напоминаний
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("ИспользованиеНапоминаний");
	Если ОбъектМетаданныхРоль <> Неопределено Тогда
		
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Добавление прав папок форума
	ЗаполнитьПраваПапкиФорума(ПредопределенноеЗначение("Справочник.ПапкиФорума.ТемыДокументов"));
	
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'; en = 'Common topics'");
	РазделОбщиеТемыОбъект.Записать();
	ЗаполнитьПраваПапкиФорума(РазделОбщиеТемыОбъект.Ссылка);
	
	// Добавление папок форума в область делегирования - Форум
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиФорума", "53a00d1c-e080-4d3a-8a9e-bfd68cf5463d");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_4_СПРОФНаКОРП() Экспорт
	
	// заполнение настройки доступности для поля ПредметПереписки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ИсходящиеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВыборкаОбъект.НастройкиДоступности.Найти(
				"ПредметПереписки", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды", "ВОтветНа");
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "ПредметПереписки";
			НоваяСтрока.Состояние = Строка.Состояние;
			НоваяСтрока.Доступность = Строка.Доступность;
		КонецЦикла;	
		ВыборкаОбъект.Записать();
		
	КонецЦикла;	
	
	// доступность поля СпособОтправки для Делопроизводителя
	НастрокаДоступности = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(Новый УникальныйИдентификатор("972ffd63-60eb-410b-b28c-13b42b446d94"));
	Если ЗначениеЗаполнено(НастрокаДоступности) Тогда 
		НастрокаДоступностиОбъект = НастрокаДоступности.ПолучитьОбъект();
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды, Состояние", "СпособОтправки", Перечисления.СостоянияДокументов.Зарегистрирован);
		НайденныеСтроки = НастрокаДоступностиОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			Если НайденнаяСтрока.Доступность <> 1 Тогда 
				НайденнаяСтрока.Доступность = 1;
				НастрокаДоступностиОбъект.Записать();
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// заполнение настроек для состояния НеЗарегистрирован
	Выборка = Справочники.НастройкиДоступностиПоСостоянию.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НастройкиДоступности.Найти(Перечисления.СостоянияДокументов.НеЗарегистрирован, 
			"Состояние") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		ВыборкаОбъект = Выборка.ПолучитьОбъект();
		
		Если ВыборкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
			ОтборСтрок = Новый Структура("Состояние", Перечисления.СостоянияДокументов.НаРегистрации);
		Иначе
			ОтборСтрок = Новый Структура("Состояние", Перечисления.СостоянияДокументов.НеСогласован);
		КонецЕсли;	
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.НеЗарегистрирован;
			НоваяСтрока.ИмяПоляКоманды = НайденнаяСтрока.ИмяПоляКоманды;
			НоваяСтрока.Доступность = НайденнаяСтрока.Доступность;
		КонецЦикла;	
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
	// Установка типа записи календаря, если он оказался незаполненным
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Справочники.ЗаписиРабочегоКалендаря.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ТипЗаписиКалендаря) Тогда 
			Объект = Выборка.ПолучитьОбъект();
			Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_3_2_1_СПРОФНаКОРП() Экспорт
	
	//Перенос значений из реквизита УдалитьЗадача в измерение Задача для записей
	//регистра сведений ПротоколВыполненияЗадачПоПочте.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколВыполненияЗадачПоПочте.Период,
		|	ПротоколВыполненияЗадачПоПочте.ИдентификаторСообщения,
		|	ПротоколВыполненияЗадачПоПочте.РезультатВыполнения,
		|	ПротоколВыполненияЗадачПоПочте.Задача
		|ИЗ
		|	РегистрСведений.ПротоколВыполненияЗадачПоПочте КАК ПротоколВыполненияЗадачПоПочте
		|ГДЕ
		|	ПротоколВыполненияЗадачПоПочте.УдалитьЗадача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ПротоколВыполненияЗадачПоПочте.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		Запись.Прочитать();
		Запись.Задача = Запись.УдалитьЗадача;
		Запись.УдалитьЗадача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		Запись.Записать();
		
	КонецЦикла;
	
	// заполнение настройки доступности для поля ДобавлениеОригиналов
	НастройкиДоступностиПоУмолчанию = 
		Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВыборкаОбъект.НастройкиДоступности.Найти(
				"ДобавлениеОригиналов", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		РольНастройки = "Пользователь";
		Для Каждого Строка Из НастройкиДоступностиПоУмолчанию цикл
			Если Строка.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор()) Тогда 
				РольНастройки = Строка.Роль;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды", "ДобавлениеФайлов");
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "ДобавлениеОригиналов";
			НоваяСтрока.Состояние = Строка.Состояние;
			Если НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.Зарегистрирован 
				И РольНастройки = "Пользователь" Тогда 
				НоваяСтрока.Доступность = 2; // нет
			Иначе	
				НоваяСтрока.Доступность = 1; // да
			КонецЕсли;	
		КонецЦикла;	
		ВыборкаОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_5_СПРОФНаКОРП() Экспорт
	
	// Добавление области делигирования - Контроль
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		Если Строка.Идентификатор <> "2fa99374-2682-4bf8-bc92-6ebe2b0e9e0e" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
			|ГДЕ
			|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьПрава", Истина);
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_4_4_1() Экспорт
	
	Если Метаданные.Справочники.ИсходящиеДокументы.Реквизиты.Найти("УдалитьПолучателиДляСписков") <> Неопределено  
	   И Метаданные.Справочники.ВнутренниеДокументы.Реквизиты.Найти("УдалитьКонтрагентыДляСписков") <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеДокументы.Ссылка,
		|	ИсходящиеДокументы.УдалитьПолучателиДляСписков КАК КонтрагентыДляСписков
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
		|		ПО ИсходящиеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеРеквизитыДокументов.КонтрагентыДляСписков, """") КАК СТРОКА(1000))) = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.УдалитьКонтрагентыДляСписков
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
		|		ПО ВнутренниеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеРеквизитыДокументов.КонтрагентыДляСписков, """") КАК СТРОКА(1000))) = """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
				Выборка.Ссылка, "КонтрагентыДляСписков", Выборка.КонтрагентыДляСписков);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_4_5_1() Экспорт
	
	// Заполнение реквизита ИмяМакетаТиповой справочника Инструкции.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ХешиТиповыхИнструкций = ХешиТиповыхИнструкций();
	Выборка = Справочники.Инструкции.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИнструкции = Выборка.Ссылка.ТекстИнструкции.Получить();
		ТекстТелаИнструкции = РаботаСИнструкциями.ТелоИнструкцииИзHTML(ТекстИнструкции);
		ХешДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешДанных.Добавить(ТекстТелаИнструкции);
		ХешИнструкции = Строка(ХешДанных.ХешСумма);
		ИмяМакетаТиповой = ХешиТиповыхИнструкций.Получить(ХешИнструкции);
		Если ИмяМакетаТиповой = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбъектИнструкции = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектИнструкции.ИмяМакетаТиповой = ИмяМакетаТиповой;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИнструкции);
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Обновляем типовые инструкции.
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_6_1() Экспорт
	
	// Добавление в настройки доступности по состоянию поля "Адресат" внутреннего документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВнутренниеДокументы)
	|	И НЕ ""Адресат"" В
	|				(ВЫБРАТЬ
	|					НастройкиДоступности.ИмяПоляКоманды
	|				ИЗ
	|					Справочник.НастройкиДоступностиПоСостоянию.НастройкиДоступности КАК НастройкиДоступности
	|				ГДЕ
	|					НастройкиДоступности.Ссылка = НастройкиДоступностиПоСостоянию.Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
			Новый Структура("ИмяПоляКоманды", "Подготовил"));
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "Адресат";
			НоваяСтрока.Состояние = Строка.Состояние;
			НоваяСтрока.Доступность = Строка.Доступность;
		КонецЦикла;		
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_6_2() Экспорт
	
	// Привязка поставляемых областей делегирования к предопределенным элементам
	ОписанияОбластей = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	ОписанияОбластейПоСсылкам = Новый Соответствие;
	СсылкиНаПредопределенныеОбласти = Новый Массив;
	
	Для Каждого ОписаниеОбласти Из ОписанияОбластей Цикл
		
		СсылкаНаОбласть = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОписаниеОбласти.Идентификатор));
			
		СсылкиНаПредопределенныеОбласти.Добавить(СсылкаНаОбласть);
		ОписанияОбластейПоСсылкам.Вставить(СсылкаНаОбласть, ОписаниеОбласти);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиДелегированияПрав.Ссылка,
		|	ОбластиДелегированияПрав.ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА ОбластиДелегированияПрав.Ссылка В (&ПредопределенныеОбласти)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПредопределенный
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	НЕ ОбластиДелегированияПрав.Предопределенный
		|	И (ОбластиДелегированияПрав.Ссылка В (&ПредопределенныеОбласти)
		|			ИЛИ НЕ ОбластиДелегированияПрав.ПометкаУдаления)");
		
	Запрос.УстановитьПараметр("ПредопределенныеОбласти", СсылкиНаПредопределенныеОбласти);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.ЭтоПредопределенный Тогда
			
			ОписаниеОбласти = ОписанияОбластейПоСсылкам.Получить(Выборка.Ссылка);
			ОбластьОбъект.ИмяПредопределенныхДанных = ОписаниеОбласти.ИмяПредопределенного;
			ОбластьОбъект.ПометкаУдаления = Ложь;
			
			ОбластьОбъект.Состав.Очистить();
			Для Каждого ПолноеИмя Из ОписаниеОбласти.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			
		Иначе
			ОбластьОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		ОбластьОбъект.Записать();
		
	КонецЦикла;
	
	// Добавление удаленных ранее предопределенных областей
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиДелегированияПрав.Ссылка
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Предопределенный");
		
	ПредопределенныеОбласти = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Эл Из ОписанияОбластейПоСсылкам Цикл
		Если ПредопределенныеОбласти.Найти(Эл.Ключ) = Неопределено Тогда
			
			ОписаниеОбласти = Эл.Значение;
			
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(Эл.Ключ);
			ОбластьОбъект.Наименование = ОписаниеОбласти.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = ОписаниеОбласти.ИмяПредопределенного;
			
			Для Каждого ПолноеИмя Из ОписаниеОбласти.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_7_1() Экспорт
	
	// Перенос реквизита Контрагент в табличную часть
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДокументы.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Контрагенты КАК ВнутренниеДокументыКонтрагенты
	|		ПО ВнутренниеДокументы.Ссылка = ВнутренниеДокументыКонтрагенты.Ссылка
	|ГДЕ
	|	ВнутренниеДокументы.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И ВнутренниеДокументыКонтрагенты.Контрагент ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Ссылка.ПолучитьОбъект();
				
		Строка = Документ.Контрагенты.Добавить();
		Строка.Контрагент = Документ.Контрагент;
		Строка.КонтактноеЛицо = Документ.КонтактноеЛицо;
		Строка.ПодписалОтКонтрагента = Документ.ПодписалОтКонтрагента;	
				
		Документ.ОбменДанными.Загрузка = Истина;
		Документ.Записать();
				
		КонтрагентыДляСписков = Делопроизводство.ПолучитьКонтрагентовДляСписков(
			Документ.Контрагенты.Выгрузить());
			
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Документ.Ссылка, "КонтрагентыДляСписков", КонтрагентыДляСписков);
	КонецЦикла;	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);			
	
	
	// Добавление прав на "Все функции" и "Сохранение данных пользователей"
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ДобавляемыеРоли = Новый Массив;
	ДобавляемыеРоли.Добавить(Метаданные.Роли.Найти("РежимВсеФункции"));
	ДобавляемыеРоли.Добавить(Метаданные.Роли.Найти("СохранениеДанныхПользователя"));
	
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(Профиль) Тогда 
		
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		
		Для Каждого МетаданныеРоли Из ДобавляемыеРоли Цикл
			
			Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
			
			Если ЗначениеЗаполнено(Роль) Тогда
				НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ПрофильОбъект.Роли.Добавить();
					НоваяСтрока.Роль = Роль;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение производственного календаря 2015
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_3() Экспорт
	
	// Добавление роли АдминистраторСистемы в профиль Администраторы,
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	МетаданныеРоли = Метаданные.Роли.АдминистраторСистемы;
	ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
	ПрофильОбъект = Справочники.ПрофилиГруппДоступа.Администратор.ПолучитьОбъект();
	
	Если ПрофильОбъект.Роли.Найти(ИдентификаторРоли, "Роль") = Неопределено Тогда 
		НоваяСтрока = ПрофильОбъект.Роли.Добавить();
		НоваяСтрока.Роль = ИдентификаторРоли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_1() Экспорт
	
	// Обновить настройки привязки шаблонов процессов к видам документов
	ЗапросНастройки = Новый Запрос;
	ЗапросНастройки.Текст = 
		"ВЫБРАТЬ
		|	НастройкаШаблоновБизнесПроцессов.ВидДокумента,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.Организация,
		|	НастройкаШаблоновБизнесПроцессов.Условие,
		|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение,
		|	НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск,
		|	НастройкаШаблоновБизнесПроцессов.ВидИнтерактивногоСобытия,
		|	НастройкаШаблоновБизнесПроцессов.СобытияАвтоСтарта
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов";
	ВыборкаНастройки = ЗапросНастройки.Выполнить().Выбрать();
	Пока ВыборкаНастройки.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		    "ВЫБРАТЬ
		    |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
		    |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия КАК ВидБизнесСобытия
		    |ИЗ
		    |	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		    |ГДЕ
		    |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса
		    |	И (ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия = &Организация
		    |			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
		    |	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия = &КлассИсточникаБизнесСобытия";
		 	 	 	
		Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", ВыборкаНастройки.ШаблонБизнесПроцесса);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			Запрос.УстановитьПараметр("Организация", ВыборкаНастройки.Организация);
		Иначе
			Запрос.УстановитьПараметр("Организация", Неопределено);
		КонецЕсли;
		Запрос.УстановитьПараметр("КлассИсточникаБизнесСобытия", ВыборкаНастройки.ВидДокумента);
		Таблица = Запрос.Выполнить().Выгрузить();
			
		ОписаниеСобытий = "";
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если ПустаяСтрока(ОписаниеСобытий) Тогда
				ОписаниеСобытий = Строка(СтрокаТаблицы.ВидБизнесСобытия);	
			Иначе
				ОписаниеСобытий = ОписаниеСобытий + ", " + Строка(СтрокаТаблицы.ВидБизнесСобытия);
			КонецЕсли;
		КонецЦикла;	

		МенеджерЗаписи = РегистрыСведений.НастройкаШаблоновБизнесПроцессов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаНастройки);
		МенеджерЗаписи.СобытияАвтоСтарта = ОписаниеСобытий;
		МенеджерЗаписи.Записать();
	
	КонецЦикла;
	
	// Перенос значения реквизита УдалитьОрганизация в реквизит Организация
	// табличной части УсловияОтображения справочника Инструкции.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УсловияОтображения.Ссылка КАК Ссылка,
		|	УсловияОтображения.НомерСтроки КАК НомерСтроки,
		|	УсловияОтображения.Ссылка.УдалитьОрганизация КАК УдалитьОрганизация
		|ИЗ
		|	Справочник.Инструкции.УсловияОтображения КАК УсловияОтображения
		|ГДЕ
		|	УсловияОтображения.Ссылка.УдалитьОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И УсловияОтображения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|ИТОГИ ПО
		|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	ОбъектИнструкции = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.НомерСтроки) Тогда
			Если ОбъектИнструкции <> Неопределено Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИнструкции);
			КонецЕсли;
			ОбъектИнструкции = Выборка.Ссылка.ПолучитьОбъект();
			Продолжить;
		КонецЕсли;
		Строка = ОбъектИнструкции.УсловияОтображения.Получить(Выборка.НомерСтроки - 1);
		Строка.Организация = Выборка.УдалитьОрганизация;
	КонецЦикла;
	Если ОбъектИнструкции <> Неопределено Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИнструкции);
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение папок и прав проектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ЭтоГруппа
	|	И Проекты.Родитель = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		НайденнаяПапка = Справочники.ПапкиПроектов.НайтиПоНаименованию(
			НСтр("ru = 'Общие проекты'; en = 'Common projects'"), Истина, Справочники.ПапкиПроектов.ПустаяСсылка());
			
		Если Не ЗначениеЗаполнено(НайденнаяПапка) Тогда 
			ПапкаОбщиеПроектыОбъект = Справочники.ПапкиПроектов.СоздатьЭлемент();
			ПапкаОбщиеПроектыОбъект.Наименование = НСтр("ru = 'Общие проекты'; en = 'Common projects'");
			ПапкаОбщиеПроектыОбъект.Записать();
			ЗаполнитьПраваПапкиПроектов(ПапкаОбщиеПроектыОбъект.Ссылка);
		Иначе
			ПапкаОбщиеПроектыОбъект = НайденнаяПапка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;	
	
	СозданныеПапки = Новый ТаблицаЗначений;
	СозданныеПапки.Колонки.Добавить("СтараяСсылка");
	СозданныеПапки.Колонки.Добавить("НоваяСсылка");
	
	Выборка = Справочники.Проекты.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Папка) Тогда 
			Продолжить;
		ИначеЕсли Выборка.ЭтоГруппа Тогда 
			
			Наименование = Выборка.Наименование; 
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда 
				Родитель = СозданныеПапки.Найти(Выборка.Родитель, "СтараяСсылка").НоваяСсылка;
			Иначе	
				Родитель = Справочники.ПапкиПроектов.ПустаяСсылка();
			КонецЕсли;	
			
			НайденнаяПапка = Справочники.ПапкиПроектов.НайтиПоНаименованию(Наименование, Истина, Родитель);
			Если ЗначениеЗаполнено(НайденнаяПапка) Тогда 
				НоваяПапкаОбъект = НайденнаяПапка.ПолучитьОбъект();
			Иначе
				НоваяПапкаОбъект = Справочники.ПапкиПроектов.СоздатьЭлемент();
			КонецЕсли;
			
			НоваяПапкаОбъект.Родитель = Родитель;
			НоваяПапкаОбъект.Наименование = Наименование;
			НоваяПапкаОбъект.Записать();
			
			ЗаполнитьПраваПапкиПроектов(НоваяПапкаОбъект.Ссылка);
			
			НоваяСтрока = СозданныеПапки.Добавить();
			НоваяСтрока.СтараяСсылка = Выборка.Ссылка;
			НоваяСтрока.НоваяСсылка = НоваяПапкаОбъект.Ссылка;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда 
				НоваяПапка = СозданныеПапки.Найти(Выборка.Родитель, "СтараяСсылка").НоваяСсылка;
			Иначе
				НоваяПапка = ПапкаОбщиеПроектыОбъект.Ссылка;
			КонецЕсли;
			
			Если Выборка.Папка <> НоваяПапка Тогда 
				ПроектОбъект = Выборка.ПолучитьОбъект();
				ПроектОбъект.Папка = НоваяПапка;
				ПроектОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление папок проектов в область делегирования - Проекты
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиПроектов", "df8dda2c-a4d3-4b2d-823f-74df41598a4f");
	
	// Заполнение нового справочника "Места хранения дел"
	Константы.ИспользоватьСхемыПомещений.Установить(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДелаХраненияДокументов.Ссылка,
		|	ДелаХраненияДокументов.УдалитьМестоХранения
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|ГДЕ
		|	НЕ ДелаХраненияДокументов.ПометкаУдаления
		|	И ПОДСТРОКА(ДелаХраненияДокументов.УдалитьМестоХранения, 0, 1) <> """"
		|	И ДелаХраненияДокументов.МестоХраненияДел = ЗНАЧЕНИЕ(Справочник.МестаХраненияДел.ПустаяСсылка)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		МестоХраненияДел = Справочники.МестаХраненияДел.НайтиПоНаименованию(Выборка.УдалитьМестоХранения, Истина);
		
		Если МестоХраненияДел.Пустая() Тогда 
			МестоХраненияДел = Справочники.МестаХраненияДел.СоздатьЭлемент();
			МестоХраненияДел.Наименование = Выборка.УдалитьМестоХранения;
			МестоХраненияДел.Записать();
		КонецЕсли;
		
		ДелоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДелоОбъект.МестоХраненияДел = МестоХраненияДел.Ссылка;
		ДелоОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_4() Экспорт
	
	// Перезаполнение текста списка сообщений обсуждений
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СообщенияОбсуждений.Ссылка
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.УстановитьТекстСписка();
		СообщениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_5() Экспорт
	
	// Заполнение нового справчоника Шаблоны текстов
	ЗапросШаблонов = Новый Запрос;
	ЗапросШаблонов.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныТекстов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
		|ГДЕ
		|	ШаблоныТекстов.Ссылка = &Ссылка";
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьШаблоныТекстовПисем.Ссылка КАК Ссылка,
		|	УдалитьШаблоныТекстовПисем.Шаблон КАК Шаблон,
		|	УдалитьШаблоныТекстовПисем.Владелец КАК Автор,
		|	УдалитьШаблоныТекстовПисем.Наименование
		|ИЗ
		|	Справочник.УдалитьШаблоныТекстовПисем КАК УдалитьШаблоныТекстовПисем
		|ГДЕ
		|	НЕ УдалитьШаблоныТекстовПисем.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Автор";
	
	ТекущийАвтор = Неопределено;
	ПодписьДляНовыхПисем = Неопределено;
	ПодписьПриОтветеИПересылке = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ИдентификаторСтарогоШаблона = Выборка.Ссылка.УникальныйИдентификатор();
			СсылкаШаблона = 
				Справочники.ШаблоныТекстов.ПолучитьСсылку(ИдентификаторСтарогоШаблона);
			
			ЗапросШаблонов.УстановитьПараметр("Ссылка", СсылкаШаблона);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ШаблоныТекстовОбъект = Справочники.ШаблоныТекстов.СоздатьЭлемент();
				ШаблоныТекстовОбъект.УстановитьСсылкуНового(СсылкаШаблона);
			Иначе 
				ШаблоныТекстовОбъект = СсылкаШаблона.ПолучитьОбъект();
				
				Если ШаблоныТекстовОбъект = Неопределено Тогда 
					ШаблоныТекстовОбъект = Справочники.ШаблоныТекстов.СоздатьЭлемент();
					ШаблоныТекстовОбъект.УстановитьСсылкуНового(СсылкаШаблона);
				КонецЕсли;
			КонецЕсли;
			
			ШаблоныТекстовОбъект.Шаблон = Выборка.Шаблон;
			ШаблоныТекстовОбъект.Наименование = Выборка.Наименование;
			ШаблоныТекстовОбъект.Автор = Выборка.Автор;
			ШаблоныТекстовОбъект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Почта;
			ШаблоныТекстовОбъект.ОбменДанными.Загрузка = Истина;
			ШаблоныТекстовОбъект.Записать();
			
			СвойстваПользователяИБ = Неопределено;
			Если Пользователи.ПрочитатьПользователяИБ(Выборка.Автор.ИдентификаторПользователяИБ, СвойстваПользователяИБ) Тогда
				Имя = СвойстваПользователяИБ.Имя;
				
				Если ТекущийАвтор <> Имя Тогда   
				
					ПодписьДляНовыхПисем = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВстроеннаяПочта",
						"ПодписьДляНовыхПисем",
						Неопределено,, Имя);
					ПодписьПриОтветеИПересылке = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВстроеннаяПочта",
						"ПодписьПриОтветеИПересылке",
						Неопределено,, Имя);
					ТекущийАвтор = Имя;
				КонецЕсли;
			Иначе 
				Продолжить;
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ПодписьДляНовыхПисем) И ЗначениеЗаполнено(ТекущийАвтор)
				И ПодписьДляНовыхПисем.Ссылка = Выборка.Ссылка Тогда 
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВстроеннаяПочта",
					"ПодписьДляНовыхПисем",
					ШаблоныТекстовОбъект.Ссылка,, ТекущийАвтор);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ПодписьПриОтветеИПересылке) И ЗначениеЗаполнено(ТекущийАвтор) 
				И ПодписьПриОтветеИПересылке.Ссылка = Выборка.Ссылка Тогда 
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВстроеннаяПочта",
					"ПодписьПриОтветеИПересылке",
					ШаблоныТекстовОбъект.Ссылка,, ТекущийАвтор);
			КонецЕсли;
		Исключение
			
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заполнение шаблоны текстов %1'; en = 'Filling template texts %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Выборка.Ссылка.Наименование),
				УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	// Добавление шаблонов текстов в область делегирования - Почта и Процессы
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ШаблоныТекстов", "59817e28-8acd-4f96-967f-4dc29cf7b94c");
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ШаблоныТекстов", "b0b32fc2-a0f8-4124-82f9-71e56b035570");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_6() Экспорт
	
	// заполнение ресурса РегистрационныйНомерИДата в регистре ОбщиеРеквизитыДокументов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеРеквизитыДокументов.Документ,
	|	ОбщиеРеквизитыДокументов.РегистрационныйНомер,
	|	ОбщиеРеквизитыДокументов.ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|ГДЕ
	|	ОбщиеРеквизитыДокументов.РегистрационныйНомерИДата = """"
	|	И ОбщиеРеквизитыДокументов.РегистрационныйНомер <> """"
	|	И ОбщиеРеквизитыДокументов.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрационныйНомерИДата = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'; en = '%1 of %2'"),
			СокрЛП(Выборка.РегистрационныйНомер),
			Формат(Выборка.ДатаРегистрации, "ДЛФ=D"));
			
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Выборка.Документ, "РегистрационныйНомерИДата", РегистрационныйНомерИДата);
	КонецЦикла;	
	
	// заполнение ресурса ИсходящийНомерИДата в регистре ОбщиеРеквизитыДокументов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеРеквизитыДокументов.Документ,
	|	ОбщиеРеквизитыДокументов.Документ.ИсходящийНомер КАК ИсходящийНомер,
	|	ОбщиеРеквизитыДокументов.Документ.ИсходящаяДата КАК ИсходящаяДата
	|ИЗ
	|	РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|ГДЕ
	|	ОбщиеРеквизитыДокументов.ИсходящийНомерИДата = """"
	|	И ТИПЗНАЧЕНИЯ(ОбщиеРеквизитыДокументов.Документ) = ТИП(Справочник.ВходящиеДокументы)
	|	И ОбщиеРеквизитыДокументов.Документ.ИсходящийНомер <> """"
	|	И ОбщиеРеквизитыДокументов.Документ.ИсходящаяДата <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИсходящийНомерИДата = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'; en = '%1 of %2'"),
			СокрЛП(Выборка.ИсходящийНомер),
			Формат(Выборка.ИсходящаяДата, "ДЛФ=D"));
			
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Выборка.Документ, "ИсходящийНомерИДата", ИсходящийНомерИДата);
	КонецЦикла;
	
	// заполнение ресурса ДатаСортировки в регистре ОбщиеРеквизитыДокументов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеРеквизитыДокументов.Документ,
	|	ОбщиеРеквизитыДокументов.Документ.ДатаРегистрации КАК ДатаРегистрации,
	|	ОбщиеРеквизитыДокументов.Документ.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|ГДЕ
	|	ОбщиеРеквизитыДокументов.ДатаСортировки = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаСортировки = ?(ЗначениеЗаполнено(Выборка.ДатаРегистрации), 
			Выборка.ДатаРегистрации, 
			Выборка.ДатаСоздания);
			
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Выборка.Документ, "ДатаСортировки", ДатаСортировки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_8() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.СайтКонтрагента;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_10() Экспорт
	
	// Перезаполнение текста списка сообщений обсуждений
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		РегистрыСведений.ДанныеМероприятий.ОбновитьДанныеМероприятия(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_11() Экспорт
	
	// Заполнение регистр сведений ПапкиПисемЧастоИспользуемые
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаПользователей Цикл
		
		Пользователь = Строка.Ссылка;
		МассивУчетныхЗаписей = ПолучитьУчетныеЗаписиПользователя(Пользователь);
		Если МассивУчетныхЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗапись = МассивУчетныхЗаписей[0];
		
		ВыбранныеПапки = Новый Массив;
		ПапкаВходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Входящие);
		ВыбранныеПапки.Добавить(ПапкаВходящие);	
		
		ПапкаИсходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Исходящие);
		ВыбранныеПапки.Добавить(ПапкаИсходящие);		
		
		ПапкаОтправленные = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Отправленные);
		ВыбранныеПапки.Добавить(ПапкаОтправленные);		
		
		ПапкаЧерновики = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Черновики);
		ВыбранныеПапки.Добавить(ПапкаЧерновики);		
		
		ПапкаКорзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Корзина);
		ВыбранныеПапки.Добавить(ПапкаКорзина);	
		
		НомерПоПорядку = 0;
		Для Каждого Папка Из ВыбранныеПапки Цикл
			
			Если ЗначениеЗаполнено(Папка) Тогда
			
				МенеджерЗаписи = РегистрыСведений.ПапкиПисемЧастоИспользуемые.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Папка = Папка;
				МенеджерЗаписи.Пользователь = Пользователь;
				МенеджерЗаписи.Порядок = НомерПоПорядку;
				МенеджерЗаписи.Записать();
				
				НомерПоПорядку = НомерПоПорядку + 1;
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	// Обновление реквизита "Пример" в справочнике "Нумераторы"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Нумераторы.Ссылка,
		|	Нумераторы.ФорматНомера
		|ИЗ
		|	Справочник.Нумераторы КАК Нумераторы
		|ГДЕ
		|	Нумераторы.Пример = """"";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Пример = ""; ОписаниеОшибки = "";
		
		Если Нумерация.СформироватьПримерНомера(Выборка.ФорматНомера, Пример, ОписаниеОшибки) Тогда 
			НумераторОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НумераторОбъект.Пример = Пример;
			НумераторОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Перенос сертификатов в новый справочник.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьСертификатыЭП.ПометкаУдаления,
		|	УдалитьСертификатыЭП.Наименование,
		|	УдалитьСертификатыЭП.ДатаОкончания,
		|	УдалитьСертификатыЭП.Назначение,
		|	УдалитьСертификатыЭП.Отпечаток,
		|	УдалитьСертификатыЭП.Пользователь,
		|	УдалитьСертификатыЭП.ФайлСертификата
		|ИЗ
		|	Справочник.УдалитьСертификатыЭП КАК УдалитьСертификатыЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК НовыйСправочник
		|		ПО УдалитьСертификатыЭП.Отпечаток = НовыйСправочник.Отпечаток
		|ГДЕ
		|	НовыйСправочник.Отпечаток ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ДвоичныеДанныеСертификата = Выборка.ФайлСертификата.Получить();
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			СвойстваСубъектаСертификата = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(Сертификат);
		Исключение
			// Пропускаем сертификаты, для которых отсутствуют двоичные данные.
			Продолжить;
		КонецПопытки;
		
		НовыйЭлемент = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование = СтруктураСертификата.Представление;
		НовыйЭлемент.Отпечаток = СтруктураСертификата.Отпечаток;
		НовыйЭлемент.КомуВыдан = СтруктураСертификата.КомуВыдан;
		НовыйЭлемент.КемВыдан = СтруктураСертификата.КемВыдан;
		НовыйЭлемент.ДействителенДо = СтруктураСертификата.ДействителенДо;
		НовыйЭлемент.Фирма = СвойстваСубъектаСертификата.Организация;
		НовыйЭлемент.Фамилия = СвойстваСубъектаСертификата.Фамилия;
		НовыйЭлемент.Имя = СвойстваСубъектаСертификата.Имя;
		НовыйЭлемент.Отчество = СвойстваСубъектаСертификата.Отчество;
		НовыйЭлемент.Должность = СвойстваСубъектаСертификата.Должность;
		НовыйЭлемент.Подписание = Сертификат.ИспользоватьДляПодписи;
		НовыйЭлемент.Шифрование = Сертификат.ИспользоватьДляШифрования;
		НовыйЭлемент.ДанныеСертификата = Выборка.ФайлСертификата;
		НовыйЭлемент.Отозван = Ложь;
		НовыйЭлемент.Пользователь = Выборка.Пользователь;
		НовыйЭлемент.ПользовательОповещенОСрокеДействия = Ложь;
		НовыйЭлемент.Добавил = ПользователиКлиентСервер.ТекущийПользователь();
		
		НовыйЭлемент.Записать();
		
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_12() Экспорт
	
	// Заполнение настроек метрик
	ЗаполнитьСвойстваПредопределенныхМетрик();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_13() Экспорт
	
	// Заполнение видов отсутствия
	ЗаполнитьВидыОтсутствий();
	
	// Создание видов бизнес-событий отсутствия
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеОтсутствия, НСтр("ru='Создание отсутствия'; en = 'Absence create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия, НСтр("ru='Изменение отсутствия'; en = 'Absence change'"));
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_14() Экспорт
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеБрони, НСтр("ru='Создание брони'; en = 'Reservation create'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеБрони, НСтр("ru='Изменение брони'; en = 'Reservation change'"));
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_15() Экспорт
	
	// Заполнение адресной книги
	Справочники.АдреснаяКнига.ЗаполнитьАдреснуюКнигу();
	РегистрыСведений.ПоискВАдреснойКниге.ЗаполнитьСловаПоиска();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_17() Экспорт
	
	// Обновление настроек шрифта почты
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	СтарыйШрифтПочты = Новый Шрифт("Microsoft Sans Serif", 10);
	
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		ШрифтОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ШрифтОтображения",
			,
			,
			ПользовательИБ.Имя);
			
		Если ШрифтОтображения = СтарыйШрифтПочты Тогда	
				
			ШрифтОтображения = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
			
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"ВстроеннаяПочта",
				"ШрифтОтображения",
				ШрифтОтображения,
				,
				ПользовательИБ.Имя);
				
		КонецЕсли;	
			
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_18() Экспорт
	
	// Заполнение настроек метрик
	ЗаполнитьСвойстваПредопределенныхМетрик();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_19() Экспорт
	
	// Заполнение наименования записей календаря
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьРабочегоКалендаряОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаписьРабочегоКалендаряОбъект.Наименование = СтрПолучитьСтроку(СокрЛ(ЗаписьРабочегоКалендаряОбъект.Описание), 1);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьРабочегоКалендаряОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_21() Экспорт
	
	// Заполнение регистра ИспользованиеШаблоновПроцессовВВидахДокументов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкаШаблоновБизнесПроцессов.ВидДокумента) КАК ЧислоВидовДокументов
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса";
		
	НаборЗаписей = РегистрыСведений.ИспользованиеШаблоновПроцессовВВидахДокументов.СоздатьНаборЗаписей();	
		
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.ШаблонПроцесса = Выборка.ШаблонБизнесПроцесса;
		Запись.ЧислоВидовДокументов = Выборка.ЧислоВидовДокументов;
		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_24() Экспорт
	
	// Заполнение пользователя броней
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Бронь.Ссылка
		|ИЗ
		|	Документ.Бронь КАК Бронь";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		БроньОбъект = Выборка.Ссылка.ПолучитьОбъект();
		БроньОбъект.Пользователь = БроньОбъект.Автор;
		БроньОбъект.ОбменДанными.Загрузка = Истина;
		БроньОбъект.Записать();
	КонецЦикла;
	
	Константы.ИспользоватьОбменЭД.Установить(Ложь);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_25() Экспорт
	
	// Заполнение показателей виджетов формы Текущие дела
	Справочники.ПоказателиВиджетов.ЗаполнитьПоказатели();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_28() Экспорт
	
	// Перенос используемых помещений.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Бронь.УдалитьПомещение Как Ссылка
		|ИЗ
		|	Документ.Бронь КАК Бронь";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьУстаревшееПомещение(Выборка.Ссылка);
	КонецЦикла;
	
	// Перенос остальных помещений.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьПомещения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УдалитьПомещения КАК УдалитьПомещения
		|ГДЕ
		|	УдалитьПомещения.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьУстаревшееПомещение(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеДанныхПоБизнесПроцессам_1_4_9_2(Параметры) Экспорт
	
	// Процедура нужна на случай обновления с 1.4.9 до 2.0.
	// В 1.4.9 данный обработчик обновления не завершается корректно из-за ошибки и учитывается
	// в механизме БСП как не завершенный.
	// Для отметке о корректном обновление Обработчик должен завершиться без ошибок.
	// В 2.0 исправленный код обработчика располагается в процедуре ЗаполнениеДанныхПоБизнесПроцессам_2_0_1_29.
	
КонецПроцедуры

// Заполняет регистр сведений ПредметыПроцессов и ресурсы НомерИтерации,
// ОсновнойПредмет, ДатаНачала записей в регистре сведений ДанныеБизнесПроцессов
//
Процедура ЗаполнениеДанныхПоБизнесПроцессам_2_0_1_29(Параметры) Экспорт
	
	КлючевоеСловоВЫБРАТЬ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|";
	КлючевоеСловоПОМЕСТИТЬ = "
		|ПОМЕСТИТЬ ПредметыПроцессов";
	КлючевоеСловоОБЪЕДИНИТЬ = "";
	
	ТекстЗапроса = "";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	Для Каждого МетаданныеПроцесса Из МетаданныеПроцессов Цикл
		
		ТекстЗапроса = ТекстЗапроса
			+ КлючевоеСловоОБЪЕДИНИТЬ
			+ КлючевоеСловоВЫБРАТЬ
			+ 
			"	Предметы.Ссылка,
			|	Предметы.НомерСтроки,
			|	Предметы.РольПредмета,
			|	Предметы.Предмет"
			+ КлючевоеСловоПОМЕСТИТЬ + "
			|ИЗ
			|	БизнесПроцесс." + МетаданныеПроцесса.Имя + ".Предметы КАК Предметы";
		
		КлючевоеСловоВЫБРАТЬ = "ВЫБРАТЬ
			|";
		КлючевоеСловоОБЪЕДИНИТЬ = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КлючевоеСловоПОМЕСТИТЬ = "";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
		+ "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен КАК Завершен,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.НомерИтерации КАК НомерИтерации,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.ДатаНачала КАК ДатаНачала,
		|	ПредметыПроцессов.НомерСтроки,
		|	ПредметыПроцессов.Предмет,
		|	ПредметыПроцессов.РольПредмета
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПредметыПроцессов КАК ПредметыПроцессов
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ПредметыПроцессов.Ссылка
		|ГДЕ
		|	ДанныеБизнесПроцессов.ОсновнойПредмет = НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредметыПроцессов.НомерСтроки
		|ИТОГИ ПО
		|	БизнесПроцесс";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПредметов = Выборка.Выбрать();
		ВыборкаПредметов.Следующий();
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеБизнесПроцессов");
			ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", ВыборкаПредметов.БизнесПроцесс);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = ВыборкаПредметов.БизнесПроцесс;
			Запись.Завершен = ВыборкаПредметов.Завершен;
			Запись.Прочитать();
			Запись.НомерИтерации = ВыборкаПредметов.НомерИтерации;
			Запись.ДатаНачала = ВыборкаПредметов.ДатаНачала;
			
			ОсновныеПредметы = Новый Массив;
			ВсеПредметы = Новый Массив;
			
			ОбходНеЗавершен = Истина;
			
			Пока ОбходНеЗавершен Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПредметов.НомерСтроки) Тогда
					Если ВыборкаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
						ОсновныеПредметы.Добавить(ВыборкаПредметов.Предмет);
					КонецЕсли;
					ВсеПредметы.Добавить(ВыборкаПредметов.Предмет);
				КонецЕсли;
				
				ОбходНеЗавершен = ВыборкаПредметов.Следующий();
				
			КонецЦикла;
			
			КоличествоОсновныхПредметов = ОсновныеПредметы.Количество();
			ОбщееКоличествоПредметов = ВсеПредметы.Количество();
			
			КоличествоПредметов = 0;
			
			Если КоличествоОсновныхПредметов = 1 Тогда
				Запись.ОсновнойПредмет = ОсновныеПредметы[0];
				КоличествоПредметов = 1;
			ИначеЕсли КоличествоОсновныхПредметов > 0 Тогда
				КоличествоПредметов = КоличествоОсновныхПредметов;
			ИначеЕсли ОбщееКоличествоПредметов = 1 Тогда
				Запись.ОсновнойПредмет = ВсеПредметы[0];
				КоличествоПредметов = 1;
			ИначеЕсли ОбщееКоличествоПредметов > 0 Тогда
				КоличествоПредметов = ОбщееКоличествоПредметов;
			КонецЕсли;
			
			Если КоличествоПредметов > 1 Тогда
				ПодписьПредмет = ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
					КоличествоПредметов,
					НСтр("ru = 'предмет'; en = 'subject'") + "," + НСтр("ru = 'предмета'; en = 'subject'") + "," + НСтр("ru = 'предметов'; en = 'subjects'"));
				
				Запись.ОсновнойПредмет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'; en = '%1 %2'"),
					КоличествоПредметов,
					ПодписьПредмет);
			ИначеЕсли КоличествоПредметов = 0 Или Не ЗначениеЗаполнено(Запись.ОсновнойПредмет) Тогда
				Запись.ОсновнойПредмет = НСтр("ru = 'Нет предметов'; en = 'No items'");
			КонецЕсли;
			
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_30() Экспорт
	
	// Удаление старых настроек текущих дел
	Набор = РегистрыСведений.НастройкиТекущихДел.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_31() Экспорт
	
	Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Установить(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_33() Экспорт
	
	// Заполнение в справочнике УсловияМаршрутизации поля ПредставлениеОтбора
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияМаршрутизации.Ссылка,
		|	УсловияМаршрутизации.ТипОбъекта,
		|	УсловияМаршрутизации.СпособЗаданияУсловия
		|ИЗ
		|	Справочник.УсловияМаршрутизации КАК УсловияМаршрутизации
		|ГДЕ
		|	УсловияМаршрутизации.СпособЗаданияУсловия <> ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияУсловия.НаВстроенномЯзыке)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УсловиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПредставлениеОтбора = "";
		
		Если УсловиеОбъект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		
			КомпоновщикУсловий = Новый КомпоновщикНастроекКомпоновкиДанных;
			
			СхемаКомпоновкиДанных = Справочники.УсловияМаршрутизации.ПолучитьМакет("Условия");
			
			Настройки = Выборка.Ссылка.НастройкаКомбинацииУсловий.Получить();
			Если Настройки = Неопределено Тогда
				Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			КонецЕсли;
			
			URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
			ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
			КомпоновщикУсловий.Инициализировать(ИсточникНастроек);
			КомпоновщикУсловий.ЗагрузитьНастройки(Настройки);
			
			ПредставлениеОтбора = Строка(КомпоновщикУсловий.Настройки.Отбор);
			
		ИначеЕсли УсловиеОбъект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда	
			
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			
			ИндексЗначенияПеречисления = Перечисления.ТипыОбъектов.Индекс(Выборка.ТипОбъекта);
			ИмяЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
			
			СхемаКомпоновкиДанных = Справочники.УсловияМаршрутизации.ПолучитьМакет(ИмяЗначенияПеречисления);
			
			Настройки = Выборка.Ссылка.НастройкаУсловия.Получить();
			Если Настройки = Неопределено Тогда
				Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			КонецЕсли;

			URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
			ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
			Компоновщик.Инициализировать(ИсточникНастроек);
			Компоновщик.ЗагрузитьНастройки(Настройки);
			
			ПредставлениеОтбора = Строка(Компоновщик.Настройки.Отбор);
			
		КонецЕсли;	
		
		ПредставлениеОтбора = СтрЗаменить(ПредставлениеОтбора, "( ", "(");
		ПредставлениеОтбора = СтрЗаменить(ПредставлениеОтбора, " )", ")");
		
		УсловиеОбъект.ПредставлениеОтбора = ПредставлениеОтбора;
		УсловиеОбъект.ОбменДанными.Загрузка = Истина;
		УсловиеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_1_34() Экспорт
	
	// Заполнение измерения Завершен регистра ДанныеБизнесПроцессов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Завершен <> ДанныеБизнесПроцессов.УдалитьЗавершен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс = Выборка.БизнесПроцесс;
		МенеджерЗаписи.Завершен = Выборка.Завершен;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Завершен = МенеджерЗаписи.УдалитьЗавершен;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Установка прав на папку Общие проекты
	НайденнаяПапка = Справочники.ПапкиПроектов.НайтиПоНаименованию(
		НСтр("ru = 'Общие проекты'; en = 'Common projects'"), Истина, Справочники.ПапкиПроектов.ПустаяСсылка());
	Если ЗначениеЗаполнено(НайденнаяПапка) Тогда 
		ЗаполнитьПраваПапкиПроектов(НайденнаяПапка);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_3_1() Экспорт
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если Не ЭтоФайловаяБаза Тогда
		ИзвлекатьТекстыФайловНаСервере = Истина;
		Константы.ИзвлекатьТекстыФайловНаСервере.Установить(ИзвлекатьТекстыФайловНаСервере);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_3_2() Экспорт
	
	// Добавление справочников в область делегирования - Документы и файлы
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ДелаХраненияДокументов", "65a19e5a-fd0a-4a24-93de-64cd98f60e8b");
	ВключитьМетаданноеВОбластьДелигирования("Справочник.НоменклатураДел", "65a19e5a-fd0a-4a24-93de-64cd98f60e8b");
	ВключитьМетаданноеВОбластьДелигирования("Справочник.МестаХраненияДел", "65a19e5a-fd0a-4a24-93de-64cd98f60e8b");
	
	// Коррекция правил автозаполнения файлов с учетом изменения реквизитов "ПолноеНаименование"
	// на "НаименованиеПолное" у справочников "Организации" и "Контрагенты".
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаАвтозаполненияФайлов.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ПравилаАвтозаполненияФайлов.ЗначениеЗамены, 0, 10) <> """"
		|			ТОГДА ПравилаАвтозаполненияФайлов.ЗначениеЗамены
		|		ИНАЧЕ ПравилаАвтозаполненияФайлов.ВыражениеОбработкиРезультатаЗамены
		|	КОНЕЦ КАК ВыражениеЗначениеЗамены
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов.ДанныеДляАвтозаполнения КАК ПравилаАвтозаполненияФайлов
		|ГДЕ
		|	(ПравилаАвтозаполненияФайлов.ЗначениеЗамены ПОДОБНО &Текст
		|			ИЛИ ПравилаАвтозаполненияФайлов.ВыражениеОбработкиРезультатаЗамены ПОДОБНО &Текст)");
		
	Текст = "%" + НСтр("ru = 'ПолноеНаименование'") + "%";
	Запрос.Параметры.Вставить("Текст", Текст);
	
	ЗначенияЗамены = Новый Соответствие;
	ЗначенияЗамены.Вставить("Контрагент|ПолноеНаименование",	"Контрагент|НаименованиеПолное");
	ЗначенияЗамены.Вставить("Контрагент.ПолноеНаименование",	"Контрагент.НаименованиеПолное");
	ЗначенияЗамены.Вставить("Организация|ПолноеНаименование",		"Организация|НаименованиеПолное");
	ЗначенияЗамены.Вставить("Организация.ПолноеНаименование",		"Организация.НаименованиеПолное");
	ЗначенияЗамены.Вставить("Отправитель|ПолноеНаименование",		"Отправитель|НаименованиеПолное");
	ЗначенияЗамены.Вставить("Отправитель.ПолноеНаименование",		"Отправитель.НаименованиеПолное");
	ЗначенияЗамены.Вставить("Получатель|ПолноеНаименование",		"Получатель|НаименованиеПолное");
	ЗначенияЗамены.Вставить("Получатель.ПолноеНаименование",		"Получатель.НаименованиеПолное");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыражениеЗначениеЗамены = Выборка.ВыражениеЗначениеЗамены;
		Для Каждого ЗначениеЗамены Из ЗначенияЗамены Цикл
			
			Если Найти(ВыражениеЗначениеЗамены, ЗначениеЗамены.Ключ) = 0 Тогда 
				Продолжить;
			КонецЕсли;	
			
			ПравилоАвтозаполненияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаАвтозаполнения Из ПравилоАвтозаполненияОбъект.ДанныеДляАвтозаполнения Цикл 
				Если ЗначениеЗаполнено(СтрокаАвтозаполнения.ЗначениеЗамены) 
					И СтрокаАвтозаполнения.ЗначениеЗамены = ВыражениеЗначениеЗамены Тогда 
					
					Пока Найти(СтрокаАвтозаполнения.ЗначениеЗамены, ЗначениеЗамены.Ключ) > 0 Цикл
						СтрокаАвтозаполнения.ЗначениеЗамены = СтрЗаменить(
							СтрокаАвтозаполнения.ЗначениеЗамены, ЗначениеЗамены.Ключ, ЗначениеЗамены.Значение);
					КонецЦикла;	
						
				ИначеЕсли ЗначениеЗаполнено(СтрокаАвтозаполнения.ВыражениеОбработкиРезультатаЗамены) 
					И СтрокаАвтозаполнения.ВыражениеОбработкиРезультатаЗамены = ВыражениеЗначениеЗамены Тогда 
					
					Пока Найти(СтрокаАвтозаполнения.ВыражениеОбработкиРезультатаЗамены, ЗначениеЗамены.Ключ) > 0 Цикл
						СтрокаАвтозаполнения.ВыражениеОбработкиРезультатаЗамены = СтрЗаменить(
							СтрокаАвтозаполнения.ВыражениеОбработкиРезультатаЗамены, ЗначениеЗамены.Ключ, ЗначениеЗамены.Значение);
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			ПравилоАвтозаполненияОбъект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
			
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_3_3() Экспорт
	
	ЗаполнитьСвойстваПредопределенныхМетрик();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_4_1() Экспорт
	
	// Заполнение способа ввода у броней.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Бронь.Ссылка
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.СпособСозданияБрони = ЗНАЧЕНИЕ(Перечисление.СпособыСозданияБрони.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		БроньОбъект = Выборка.Ссылка.ПолучитьОбъект();
		БроньОбъект.ОбменДанными.Загрузка = Истина;
		БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Вручную;
		БроньОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_4_2() Экспорт
	
	// Обновление представления пользователей в адресной книге
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_5_1() Экспорт
	
	// Установка значения константы ИспользоватьФоновыйСтартПроцессов по умолчанию.
	Константы.ИспользоватьФоновыйСтартПроцессов.Установить(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_5_2() Экспорт
	
	// Перенос дополнительных свойств мероприятий
	// из набора Удалить_Справочник_Мероприятия (ранее Справочник_Мероприятия)
	// в набор Справочник_Мероприятия_Общие.
	СтарыйНабор = "Удалить_Справочник_Мероприятия";
	НовыйНабор = "Справочник_Мероприятия_Общие";
	
	СтарыйНаборСсылка = Неопределено;
	
	Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяПредопределенныхДанных = СтарыйНабор Тогда 
			СтарыйНаборСсылка = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтарыйНаборСсылка <> Неопределено Тогда 
		
		НачатьТранзакцию();
		Попытка
			
			// Перенос дополнительных реквизитов и сведений в новый набор.
			СтарыйНаборОбъект = СтарыйНаборСсылка.ПолучитьОбъект();
			НовыйНаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений[НовыйНабор];
			
			Если СтарыйНаборОбъект.ДополнительныеРеквизиты.Количество() <> 0 Или
				СтарыйНаборОбъект.ДополнительныеСведения.Количество() <> 0 Тогда
				
				НовыйНаборОбъект = НовыйНаборСсылка.ПолучитьОбъект();
				
				Если НовыйНаборОбъект.ДополнительныеРеквизиты.Количество() = 0
					И НовыйНаборОбъект.ДополнительныеСведения.Количество() = 0 Тогда
					
					// Заполнение нового набора.
					НовыйНаборОбъект.ДополнительныеРеквизиты.Загрузить(СтарыйНаборОбъект.ДополнительныеРеквизиты.Выгрузить());
					НовыйНаборОбъект.ДополнительныеСведения.Загрузить(СтарыйНаборОбъект.ДополнительныеСведения.Выгрузить());
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборОбъект, Ложь, Истина);
					
					// Корректировка набора свойств у дополнительных реквизитов и сведений.
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ДополнительныеРеквизитыИСведения.Ссылка,
						|	ДополнительныеРеквизитыИСведения.Заголовок
						|ИЗ
						|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
						|ГДЕ
						|	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств";
					Запрос.УстановитьПараметр("НаборСвойств", СтарыйНаборСсылка);
					
					НаименованиеНабора = НовыйНаборОбъект.Наименование;
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						ОбъектДополнительныеРеквизитыИСведения = Выборка.Ссылка.ПолучитьОбъект();
						ОбъектДополнительныеРеквизитыИСведения.НаборСвойств = НовыйНаборСсылка;
						ОбъектДополнительныеРеквизитыИСведения.Наименование = Выборка.Заголовок + " (" + НаименованиеНабора + ")";
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектДополнительныеРеквизитыИСведения, Ложь, Истина);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Удаление старого набора.
			СтарыйНаборОбъект.Наименование = НСтр("ru = '(Удалить) Доп. свойства справочника ""Мероприятия""'; en = '(Delete) Add. properties of the ""Events"" catalog'");
			СтарыйНаборОбъект.ДополнительныеРеквизиты.Очистить();
			СтарыйНаборОбъект.ДополнительныеСведения.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйНаборОбъект, Ложь, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	// Заполнение наборов дополнительных свойств по видам мероприятий.
	Выборка = Справочники.ВидыМероприятий.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидМероприятияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидМероприятияОбъект, Ложь, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_5_3() Экспорт
	
	// Заполнение настройки ФактическийИсполнительЗадач по умолчанию.
	Константы.ФактическийИсполнительЗадач.Установить(Перечисления.ФактическийИсполнительЗадач.ИсполнительЗадачи);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_5_5() Экспорт
	
	ЗаполнитьДанныеВнутреннихДокументов();
	ЗаполнитьДанныеВходящихДокументов();
	ЗаполнитьДанныеИсходящихДокументов();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_5_6() Экспорт
	
	ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_6_2() Экспорт
	
	// Перенос протоколов из табличных частей справочника Мероприятия в справочник ПротоколыМероприятий.
	ПеренестиПротоколыИзТабличныхЧастейВСправочник();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_6_3() Экспорт
	
	// Заполнение настройки ИспользоватьПереадресациюВоВходящихДокументах по умолчанию.
	ЗаполнениеНастройкиИспользоватьПереадресациюВоВходящихДокументах();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_6_5() Экспорт
	
	// перенос роли РегистрацияВнутреннихДокументов в профиль Делопроизводители
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("РегистрацияВнутреннихДокументов");
	Если ОбъектМетаданныхРоль <> Неопределено Тогда
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
		
		Идентификатор = "eeb325ab-db51-11de-a544-00179ab398dc"; // идентификатор профиля Делопроизводители
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
				ПрофильОбъект.Записать();
				
				// обновление вида доступа
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ГруппыДоступа.Ссылка
				|ИЗ
				|	Справочник.ГруппыДоступа КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Профиль = &Профиль";
				Запрос.УстановитьПараметр("Профиль", Профиль);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ГруппаДоступаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					
					СтрокаВидыВнутренних = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов, "ВидДоступа");
					ЗначенияДоступаВидыВнутренних = ГруппаДоступаОбъект.ЗначенияДоступа.НайтиСтроки(
						Новый Структура("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов));
					
					Если СтрокаВидыВнутренних <> Неопределено // доступ запрещен для внутренних без исключений
						И Не СтрокаВидыВнутренних.ДоступРазрешен
						И ЗначенияДоступаВидыВнутренних.Количество() = 0 Тогда 
						
						СтрокаВидыВходящих  = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов, "ВидДоступа");
						СтрокаВидыИсходящих = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыИсходящихДокументов, "ВидДоступа");
						
						Если СтрокаВидыВходящих <> Неопределено И СтрокаВидыВходящих.ДоступРазрешен
						   И СтрокаВидыИсходящих <> Неопределено И СтрокаВидыИсходящих.ДоступРазрешен Тогда 
							
							СтрокаВидыВнутренних.ДоступРазрешен = Истина;
							ГруппаДоступаОбъект.Записать();
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
				
		КонецЕсли;
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока <> Неопределено Тогда 
				ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_8_1() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДокументы.Ссылка,
	|	ВнутренниеДокументы.Утвердил
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеВнутреннихДокументов КАК ДанныеВнутреннихДокументов
	|		ПО ВнутренниеДокументы.Ссылка = ДанныеВнутреннихДокументов.Документ
	|ГДЕ
	|	ВнутренниеДокументы.Утвердил <> ДанныеВнутреннихДокументов.Утвердил";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Делопроизводство.ЗаписатьДанныеДокумента(Выборка.Ссылка, "Утвердил", Выборка.Утвердил);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_8_2() Экспорт
	
	Константы.ИспользоватьФоновоеВыполнениеЗадач.Установить(Истина);
	ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_8_3() Экспорт
	
	РегистрыСведений.СоставыГруппПользователей.ОбновитьДанныеРегистра();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_8_4() Экспорт
	
	// Определяем УИДТекущегоУзла, если он не заполнен, то заполняем его.
	ЭтотУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена("Полный");
	Узел = ЭтотУзел.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(Узел.ИдентификаторУзла) Тогда
		ИдентификаторТекущегоУзла = Новый УникальныйИдентификатор;
		Узел.ИдентификаторУзла = ИдентификаторТекущегоУзла;
		Узел.Записать();
	Иначе
		ИдентификаторТекущегоУзла = Узел.ИдентификаторУзла;
	КонецЕсли;
	
	ЗаполнитьУзелОбменаВПроцессах(ИдентификаторТекущегоУзла);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_8_5() Экспорт
	
	// Предмет переписки - Переписка по предмету
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.Мероприятия.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.Мероприятия.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_8_6() Экспорт
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Идентификатор = "eeb325aa-db51-11de-a544-00179ab398dc"; // идентификатор профиля "Работа с входящими и исходящими документами"
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(Профиль) Тогда 
		
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов;
		
		НужноЗаписать = Ложь;
		
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Роль.РаботаСВнутреннимиДокументами");
		НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Роль.ЧтениеВидовВнутреннихДокументов");
		НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
			НужноЗаписать = Истина;
		КонецЕсли;
		
		НайденнаяСтрока = ПрофильОбъект.ВидыДоступа.Найти(ВидДоступа, "ВидДоступа");
		Пока НайденнаяСтрока <> Неопределено Цикл 
			ПрофильОбъект.ВидыДоступа.Удалить(НайденнаяСтрока);
			НужноЗаписать = Истина;
			НайденнаяСтрока = ПрофильОбъект.ВидыДоступа.Найти(ВидДоступа, "ВидДоступа");
		КонецЦикла;
		
		НайденнаяСтрока = ПрофильОбъект.ЗначенияДоступа.Найти(ВидДоступа, "ВидДоступа");
		Пока НайденнаяСтрока <> Неопределено Цикл 
			ПрофильОбъект.ЗначенияДоступа.Удалить(НайденнаяСтрока);
			НужноЗаписать = Истина;
			НайденнаяСтрока = ПрофильОбъект.ЗначенияДоступа.Найти(ВидДоступа, "ВидДоступа");
		КонецЦикла;
		
		Если НужноЗаписать Тогда 
			ПрофильОбъект.Записать();
		КонецЕсли;	
		
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры		

Процедура ПерейтиНаВерсию_2_0_8_7() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВнутреннихДокументов.Документ
	|ИЗ
	|	РегистрСведений.ДанныеВнутреннихДокументов КАК ДанныеВнутреннихДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
	|		ПО ДанныеВнутреннихДокументов.Документ = ТекущиеСостоянияДокументов.Документ
	|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
	|ГДЕ
	|	НЕ ДанныеВнутреннихДокументов.Исполнен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеВходящихДокументов.Документ
	|ИЗ
	|	РегистрСведений.ДанныеВходящихДокументов КАК ДанныеВходящихДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
	|		ПО ДанныеВходящихДокументов.Документ = ТекущиеСостоянияДокументов.Документ
	|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
	|ГДЕ
	|	НЕ ДанныеВходящихДокументов.Исполнен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Делопроизводство.ЗаписатьДанныеДокумента(Выборка.Документ, "Исполнен", Истина);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_2_0_9_1() Экспорт
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.НазначениеОтветственного,
		НСтр("ru='Назначение ответственным за документ'; en = 'Appointed as responsible for a document'"));
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_9_2() Экспорт
	
	// Заполнение реквизита ТипШаблона в группах
	// шаблонах составных процессов 
	
	Запрос = Новый Запрос;
	
	// Выбираем все корневые группы без типа шаблонов
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСоставныхБизнесПроцессов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
		|ГДЕ
		|	ШаблоныСоставныхБизнесПроцессов.ЭтоГруппа = ИСТИНА
		|	И ШаблоныСоставныхБизнесПроцессов.ТипШаблона = """"
		|	И ШаблоныСоставныхБизнесПроцессов.Родитель = ЗНАЧЕНИЕ(Справочник.ШаблоныСоставныхБизнесПроцессов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Определяем тип шаблона
		ТипШаблона = "ОбработкаВнутреннегоДокумента";
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона <> """"
			|	И ШаблоныСоставныхБизнесПроцессов.Родитель В ИЕРАРХИИ(&Родитель)";
			
		Запрос.УстановитьПараметр("Родитель", Выборка.Ссылка);
		ВыборкаШаблоновСЗаполненнымТипом = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаШаблоновСЗаполненнымТипом.Следующий() Тогда
			ТипШаблона = ВыборкаШаблоновСЗаполненнымТипом.ТипШаблона;
		КонецЕсли;
		
		// Обновляем тип шаблона в корневой группе.
		ГруппаШаблонов = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаШаблонов.ТипШаблона = ТипШаблона;
		ГруппаШаблонов.Записать();
		
		// Обновляем типы шаблонов в подчиненных группах
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШаблоныСоставныхБизнесПроцессов.Ссылка
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.Родитель В ИЕРАРХИИ(&Родитель)
			|	И ШаблоныСоставныхБизнесПроцессов.Ссылка <> &Родитель";
		Запрос.УстановитьПараметр("Родитель", Выборка.Ссылка);
		ВыборкаПодчиненныхГрупп = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПодчиненныхГрупп.Следующий() Цикл
			ГруппаШаблонов = ВыборкаПодчиненныхГрупп.Ссылка.ПолучитьОбъект();
			ГруппаШаблонов.ТипШаблона = ТипШаблона;
			ГруппаШаблонов.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_9_3() Экспорт
	
	// Заполнение регистра ПроизошедшиеБизнесСобытия
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.Ссылка,
		|	ПроизошедшиеБизнесСобытия.ПометкаУдаления,
		|	ПроизошедшиеБизнесСобытия.Автор,
		|	ПроизошедшиеБизнесСобытия.ВидСобытия,
		|	ПроизошедшиеБизнесСобытия.Дата,
		|	ПроизошедшиеБизнесСобытия.Источник,
		|	ПроизошедшиеБизнесСобытия.КонтекстСобытия,
		|	ПроизошедшиеБизнесСобытия.Обработано,
		|	ПроизошедшиеБизнесСобытия.ЧислоПопытокОбработки
		|ИЗ
		|	Справочник.УдалитьПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.ПометкаУдаления = ЛОЖЬ
		|	И ПроизошедшиеБизнесСобытия.Обработано = ЛОЖЬ
		|	И ПроизошедшиеБизнесСобытия.ЧислоПопытокОбработки < 3";
		
	Результат = Запрос.Выполнить();	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Идентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		
		Набор = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(Идентификатор);
		
		Набор.Прочитать();
		Если Набор.Количество() <> 0 Тогда // уже есть такая запись - вероятно уже было ранее обновление на эту версию
			Продолжить;
		КонецЕсли;	
		
		Набор.Отбор.Обработано.Установить(Выборка.Обработано);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Идентификатор = Идентификатор;
		Запись.Период = Выборка.Дата;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		
	КонецЦикла;
	
	// Очистка пустых доп. реквизитов в шаблонах документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Шаблоны.Ссылка КАК Шаблон
		|ИЗ
		|	Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|ГДЕ
		|	НЕ Шаблоны.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныВходящих.Ссылка
		|ИЗ
		|	Справочник.ШаблоныВходящихДокументов КАК ШаблоныВходящих
		|ГДЕ
		|	НЕ ШаблоныВходящих.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныИсходящих.Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсходящихДокументов КАК ШаблоныИсходящих
		|ГДЕ
		|	НЕ ШаблоныИсходящих.ЭтоГруппа";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Шаблон);
			ТекущийОбъект = Выборка.Шаблон.ПолучитьОбъект();
			ТаблицаДополнительныхРеквизитоа = ТекущийОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			ТекущийОбъект.ДополнительныеРеквизиты.Очистить();
			Для Каждого ДопРеквизит Из ТаблицаДополнительныхРеквизитоа Цикл 
				Если ЗначениеЗаполнено(ДопРеквизит.Значение) Тогда 
					НовСтрока = ТекущийОбъект.ДополнительныеРеквизиты.Добавить();
					НовСтрока.Свойство = ДопРеквизит.Свойство;
					НовСтрока.Значение = ДопРеквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_9_4() Экспорт
	
	Константы.ИспользоватьInternetExplorerДляПолученияТекстаИзHTML.Установить(
		Константы.ИспользоватьМобильныеКлиенты.Получить());
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_9_5() Экспорт
	
	// Заполнение признака ДоступнаСхема у территорий и помещений.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТерриторииИПомещения.Ссылка
		|ИЗ
		|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
		|ГДЕ
		|	ТерриторииИПомещения.ДоступнаСхема = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТерриторияПомещениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДвоичныеДанные = ТерриторияПомещениеОбъект.ФайлФотографии.Получить();
		ТерриторияПомещениеОбъект.ДоступнаСхема = (ДвоичныеДанные <> Неопределено);
		ТерриторияПомещениеОбъект.ОбменДанными.Загрузка = Истина;
		ТерриторияПомещениеОбъект.Записать();
	КонецЦикла;
	
	// заполнение настройки доступности для поля Состояние
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Описание Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Описание.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда
			Продолжить;
		КонецЕсли;	
			
		НастройкаДоступностиОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		Если НастройкаДоступностиОбъект.НастройкиДоступности.Найти(
				"Состояние", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаДоступностиОбъект.ТипДокумента, Описание.Роль);
		Для Каждого Строка Из НастройкиДоступности Цикл
			Если строка.ИмяПоляКоманды = "Состояние" Тогда 
				НоваяСтрока = НастройкаДоступностиОбъект.НастройкиДоступности.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЦикла;	
		НастройкаДоступностиОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_10_1() Экспорт
	
	Константы.СписокРасширенийСканКопийОригиналов.Установить("bmp, gif, jpeg, jpg, png, tiff, tif, wmf, emf, pdf");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_10_4() Экспорт
	
	Если Константы.УдалитьПроверятьСложностьПароля.Получить() = Истина Тогда
		
		НастройкиВхода = ПользователиСлужебный.НастройкиВхода();
		НастройкиВхода.Пользователи.ПарольДолженОтвечатьТребованиямСложности = Истина;
		НастройкиВхода.Пользователи.МинимальнаяДлинаПароля = 7;
		Константы.НастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(НастройкиВхода));
		
	ИначеЕсли Константы.УдалитьЗапрещатьВходВПрограммуБезПароля.Получить() = Истина Тогда
		
		НастройкиВхода = ПользователиСлужебный.НастройкиВхода();
		НастройкиВхода.Пользователи.МинимальнаяДлинаПароля = 1;
		Константы.НастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(НастройкиВхода));
		
	КонецЕсли;
	
	Константы.ИспользоватьСервисСклоненияMorpher.Установить(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_11_1() Экспорт
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("ЧтениеБазовойНСИДокументооборот");
	Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(Профиль) Тогда 
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
		Если НайденнаяСтрока = Неопределено Тогда 
			НоваяСтрока = ПрофильОбъект.Роли.Добавить();
			НоваяСтрока.Роль = Роль;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_12_1() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Истина;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Контроль", ПараметрыНабора);
	
КонецПроцедуры

Процедура УдалитьДанныеОДескрипторахВизИРезолюций_2_0_12_2(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_12_3() Экспорт
	
	// Заполнение реквизита шаблонов процессов "Комплексный процесс".
	// Обрабатываются только этапы незавершенных комплексных процессов.
	Лимит = 10000;
	КоличествоИтераций = 0;
	ОбработаноЗаписейВсего = 0;
	
	Пока КоличествоИтераций < Лимит Цикл
		
		ОбработаноЗаписей = ЗаполнитьКомплексныйПроцессДляШаблоновПроцессовОбработкаПорции(Ложь);
		
		Если ОбработаноЗаписей = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоИтераций = КоличествоИтераций + 1;
		ОбработаноЗаписейВсего = ОбработаноЗаписейВсего + ОбработаноЗаписей;
		
		Если КоличествоИтераций % 10 = 0 Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Заполнение нового реквизита шаблонов процессов.'; en = 'Filltyping new attribute of process templates.'"),
				УровеньЖурналаРегистрации.Информация,,,
				СтрШаблон(НСтр("ru = 'Пройдено итераций: %1, обработано записей: %2'; en = 'Completed iterations: %1, records processed: %2'"), 
					КоличествоИтераций, ОбработаноЗаписейВсего));
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКомплексныйПроцессДляШаблоновПроцессов_2_0_12_3(Параметры) Экспорт
	
	ОбработаноЗаписей = ЗаполнитьКомплексныйПроцессДляШаблоновПроцессовОбработкаПорции(Истина, Параметры);
	Параметры.ОбработкаЗавершена = ОбработаноЗаписей = 0;
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноЗаписей;
		
КонецПроцедуры

Функция ЗаполнитьКомплексныйПроцессДляШаблоновПроцессовОбработкаПорции(
			ВключаяЗавершенныеПроцессы, Параметры = Неопределено)
	
	ОбработаноЗаписей = 0;
	
	ТаблицыШаблоновПроцессов = Новый Массив;
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныИсполнения");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныОзнакомления");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныПоручения");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныПриглашения");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныРассмотрения");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныРегистрации");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныСогласования");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныСоставныхБизнесПроцессов");
	ТаблицыШаблоновПроцессов.Добавить("ШаблоныУтверждения");
	
	Если Параметры <> Неопределено И Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ШаблонТекстаЗапроса =
			"ВЫБРАТЬ
			|	Количество(ТаблицаШаблонов.Ссылка) КАК КолЗаписей
			|ИЗ
			|	Справочник.%ТаблицаШаблона% КАК ТаблицаШаблонов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
			|		ПО ТаблицаШаблонов.ВладелецШаблона = ДанныеБизнесПроцессов.БизнесПроцесс
			|ГДЕ
			|	ТаблицаШаблонов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
			|	И ТаблицаШаблонов.ВладелецШаблона ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Количество(ТаблицаШаблонов.Ссылка) КАК КолЗаписей
			|ИЗ
			|	Справочник.%ТаблицаШаблона% КАК ТаблицаШаблонов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
			|			ПО ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
			|		ПО ТаблицаШаблонов.ВладелецШаблона = ШаблоныКомплексныхБизнесПроцессов.Ссылка
			|ГДЕ
			|	ТаблицаШаблонов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
			|	И ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс ССЫЛКА БизнесПроцесс.КомплексныйПроцесс";
			
		ВсегоОбъектов = 0;	
		Для Каждого ТаблицаШаблона Из ТаблицыШаблоновПроцессов Цикл
			
			Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "%ТаблицаШаблона%", ТаблицаШаблона));
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ВсегоОбъектов = ВсегоОбъектов + Выборка.КолЗаписей;
			КонецЦикла;
			
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаШаблонов.Ссылка КАК Шаблон,
		|	ТаблицаШаблонов.ВладелецШаблона КАК КомплексныйПроцесс,
		|	ДанныеБизнесПроцессов.ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	Справочник.%ТаблицаШаблона% КАК ТаблицаШаблонов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ТаблицаШаблонов.ВладелецШаблона = ДанныеБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	ТаблицаШаблонов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
		|	И ТаблицаШаблонов.ВладелецШаблона ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
		|	И (&ВключаяЗавершенныеПроцессы Или ДанныеБизнесПроцессов.Завершен = Ложь)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаШаблонов.Ссылка,
		|	ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс,
		|	ДанныеБизнесПроцессов.ДатаЗавершения
		|ИЗ
		|	Справочник.%ТаблицаШаблона% КАК ТаблицаШаблонов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|			ПО ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|		ПО ТаблицаШаблонов.ВладелецШаблона = ШаблоныКомплексныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	ТаблицаШаблонов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
		|	И ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
		|	И (&ВключаяЗавершенныеПроцессы Или ДанныеБизнесПроцессов.Завершен = Ложь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗавершения УБЫВ";
		
	Для Каждого ТаблицаШаблона Из ТаблицыШаблоновПроцессов Цикл
		
		Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "%ТаблицаШаблона%", ТаблицаШаблона));
		Запрос.УстановитьПараметр("ВключаяЗавершенныеПроцессы", ВключаяЗавершенныеПроцессы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Реквизит КомплексныйПроцесс
			ШаблонСсылка = Выборка.Шаблон;
			ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();
			ШаблонОбъект.КомплексныйПроцесс = Выборка.КомплексныйПроцесс;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонОбъект);
			
		КонецЦикла;
		
		ОбработаноЗаписей = ОбработаноЗаписей + Выборка.Количество();
		
	КонецЦикла;
	
	Возврат ОбработаноЗаписей;
	
КонецФункции

Процедура ПерейтиНаВерсию_2_0_13_1() Экспорт
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2016Год();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_13_2() Экспорт
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса, НСтр("ru='Изменение значения показателя процесса'; en = 'Process metric change'"));
	
КонецПроцедуры

Процедура ИсправлениеПорядкаДействийШаблоновСоставныхПроцессов_2_0_13_4(Параметры) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаСогласования
		|			ТОГДА 1
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаУтверждения
		|			ТОГДА 2
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаРегистрации
		|			ТОГДА 3
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаРассмотрения
		|			ТОГДА 4
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаИсполненияОзнакомления
		|			ТОГДА 5
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаПоручения
		|			ТОГДА 6
		|	КОНЕЦ КАК НомерДействия,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Шаблон,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит
		|ПОМЕСТИТЬ ДействияШаблоновПроцессов
		|ИЗ
		|	Справочник.ШаблоныСоставныхБизнесПроцессов.Шаблоны КАК ШаблоныСоставныхБизнесПроцессовШаблоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
		|		ПО ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка = ШаблоныСоставныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = ""ОбработкаВнутреннегоДокумента""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаРассмотрения
		|			ТОГДА 1
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаИсполненияОзнакомления
		|			ТОГДА 2
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаПоручения
		|			ТОГДА 3
		|	КОНЕЦ,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Шаблон,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит
		|ИЗ
		|	Справочник.ШаблоныСоставныхБизнесПроцессов.Шаблоны КАК ШаблоныСоставныхБизнесПроцессовШаблоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
		|		ПО ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка = ШаблоныСоставныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = ""ОбработкаВходящегоДокумента""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаСогласования
		|			ТОГДА 1
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаУтверждения
		|			ТОГДА 2
		|		КОГДА ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит = &ПредставлениеШаблонаРегистрации
		|			ТОГДА 3
		|	КОНЕЦ,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Шаблон,
		|	ШаблоныСоставныхБизнесПроцессовШаблоны.Реквизит
		|ИЗ
		|	Справочник.ШаблоныСоставныхБизнесПроцессов.Шаблоны КАК ШаблоныСоставныхБизнесПроцессовШаблоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
		|		ПО ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка = ШаблоныСоставныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = ""ОбработкаИсходящегоДокумента""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %1
		|	ДействияШаблоновПроцессов.Ссылка КАК Ссылка,
		|	ДействияШаблоновПроцессов.НомерДействия КАК НомерДействия,
		|	ДействияШаблоновПроцессов.Шаблон КАК Шаблон,
		|	ДействияШаблоновПроцессов.Реквизит КАК Реквизит
		|ИЗ
		|	ДействияШаблоновПроцессов КАК ДействияШаблоновПроцессов
		|ГДЕ
		|	ДействияШаблоновПроцессов.НомерСтроки <> ДействияШаблоновПроцессов.НомерДействия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерДействия
		|ИТОГИ ПО
		|	Ссылка";
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПредставлениеШаблонаСогласования", "ШаблонСогласования");
	Запрос.УстановитьПараметр("ПредставлениеШаблонаУтверждения", "ШаблонУтверждения");
	Запрос.УстановитьПараметр("ПредставлениеШаблонаРегистрации", "ШаблонРегистрации");
	Запрос.УстановитьПараметр("ПредставлениеШаблонаРассмотрения", "ШаблонРассмотрения");
	Запрос.УстановитьПараметр("ПредставлениеШаблонаИсполненияОзнакомления", "ШаблонИсполненияОзнакомления");
	Запрос.УстановитьПараметр("ПредставлениеШаблонаПоручения", "ШаблонПоручения");
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст = СтрШаблон(ТекстЗапроса, "");
		Выборка = Запрос.Выполнить().Выбрать();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, "ПЕРВЫЕ 1000");
	
	ВыборкаПоШаблонам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоШаблоновДляОбработки = ВыборкаПоШаблонам.Количество();
	
	Пока ВыборкаПоШаблонам.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ВыборкаПоШаблонам.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
			
		ШаблонПроцесса = ВыборкаПоШаблонам.Ссылка.ПолучитьОбъект();
		
		ШаблонПроцесса.Шаблоны.Очистить();
		
		ВыборкаДействийШаблона = ВыборкаПоШаблонам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДействийШаблона.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ШаблонПроцесса.Шаблоны.Добавить(), ВыборкаДействийШаблона);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонПроцесса, Истина);
		
		РазблокироватьДанныеДляРедактирования(ВыборкаПоШаблонам.Ссылка);
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + КоличествоШаблоновДляОбработки;
		
	Если КоличествоШаблоновДляОбработки > 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_14_3() Экспорт
	
	// Восстановление профиля Администратор по начальному заполнению.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Справочники.ПрофилиГруппДоступа.ЗаполнитьПоставляемыйПрофиль(
		Справочники.ПрофилиГруппДоступа.Администратор, Истина);
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_15_3() Экспорт
	
	РаботаСПочтовымиСообщениямиСлужебный.ПеренестиПаролиВБезопасноеХранилище();
	
	// переносим данные в учетных записях
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.SMTPАутентификация = &SMTPАутентификация";
	
	Запрос.УстановитьПараметр("SMTPАутентификация", Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Если НЕ ПустаяСтрока(РезультатЗапроса.Пользователь) Тогда
			НачатьТранзакцию();
			Попытка
				
				УстановитьПривилегированныйРежим(Истина);
				Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(РезультатЗапроса.Ссылка, "Пароль, ПарольSMTP");
				УстановитьПривилегированныйРежим(Ложь);
				
				Если Не ЗначениеЗаполнено(Пароли.ПарольSMTP) Тогда
					Пароли.ПарольSMTP = Пароли.Пароль;
					УстановитьПривилегированныйРежим(Истина);
					ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Ссылка, Пароли.ПарольSMTP, "ПарольSMTP");
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;		
				
				Если Не ЗначениеЗаполнено(РезультатЗапроса.ПользовательSMTP) Тогда
					УчетнаяЗаписьЭлектроннойПочты = РезультатЗапроса.Ссылка.ПолучитьОбъект();
					УчетнаяЗаписьЭлектроннойПочты.ПользовательSMTP 
						= УчетнаяЗаписьЭлектроннойПочты.Пользователь;
					УчетнаяЗаписьЭлектроннойПочты.Записать();
				КонецЕсли;		
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_15_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВходящиеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НайденыеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
			Новый Структура("ИмяПоляКоманды", "ВизыСогласования"));
		
		Для Каждого НайденнаяСтрока Из НайденыеСтроки Цикл
			ВыборкаОбъект.НастройкиДоступности.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		ВыборкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_16_1() Экспорт
	
	// Удаляем лишние ключевые операции вида "Отчет.ОтчетПоУтверждениям.СписокУтверждений.Формирование".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.ПометкаУдаления = ЛОЖЬ
	|	И КлючевыеОперации.Имя ПОДОБНО &Имя
	|	И КлючевыеОперации.Приоритет = 0
	|	И КлючевыеОперации.Предопределенный = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Имя", "Отчет." + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
	// Удаляем записи УдалитьПроизошедшиеБизнесСобытия
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПроизошедшиеБизнесСобытия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьПроизошедшиеБизнесСобытия КАК УдалитьПроизошедшиеБизнесСобытия
	|ГДЕ
	|	УдалитьПроизошедшиеБизнесСобытия.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_17_1() Экспорт
	
	//// Удаление из очереди обработчика, который перенесен в новую версию.
	//ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди(
	//	"ОбновлениеИнформационнойБазыДокументооборот.ПереопределениеДескрипторовСодержимогоПапок_2_0_15_2");
	
КонецПроцедуры

Процедура ПереопределениеДескрипторовСодержимогоПапок_2_0_17_1(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ИсправлениеПравСодержимогоПапок_2_0_17_2(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПереопределениеПравСодержимогоПапок_2_0_17_2(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_17_3() Экспорт
	
	Запрос = Новый Запрос;
	
	// Удаление записей из регистра ИсполнителиЗадач с заполненным реквизитом УдалитьНастройкаДелегирования.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.РольИсполнителя,
		|	ИсполнителиЗадач.Исполнитель,
		|	ИсполнителиЗадач.УдалитьОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.УдалитьДополнительныйОбъектАдресации,
		|	ИсполнителиЗадач.УдалитьРольИсполнителя,
		|	ИсполнителиЗадач.УдалитьНастройкаДелегирования
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.УдалитьНастройкаДелегирования <> ЗНАЧЕНИЕ(Справочник.ДелегированиеПрав.ПустаяССылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ИсполнителиЗадач.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
	КонецЦикла;
	
	// Обновление регистра ИсполнителиРолейИДелегаты по пользователям
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Служебный = ЛОЖЬ";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоПользователю(Выборка.Ссылка);
	КонецЦикла;
	
	// Обновление регистра ИсполнителиРолейИДелегаты по настройкам делегирования
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Ссылка
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	ДелегированиеПрав.Действует = ИСТИНА";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоНастройкеДелегирования(Выборка.Ссылка);
	КонецЦикла;
	
	// Обновление регистра ИсполнителиРолейИДелегаты по исполнителям ролей
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.УдалитьРольИсполнителя,
		|	ИсполнителиЗадач.Исполнитель,
		|	ИсполнителиЗадач.УдалитьОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.УдалитьДополнительныйОбъектАдресации
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РольИсполнителя = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Выборка.УдалитьРольИсполнителя,
			Выборка.УдалитьОсновнойОбъектАдресации,
			Выборка.УдалитьДополнительныйОбъектАдресации);
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоИсполнителюРоли(
			Выборка.Исполнитель,
			РольИсполнителя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_17_4(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ВнутренниеДокументы.Ссылка), 0) КАК КолЗаписей
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|ГДЕ
			|	ВнутренниеДокументы.Создал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ВходящиеДокументы.Ссылка), 0)
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|ГДЕ
			|	ВходящиеДокументы.Создал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ИсходящиеДокументы.Ссылка), 0)
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|ГДЕ
			|	ИсходящиеДокументы.Создал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)");
			
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КолЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ВнутренниеДокументы.Ссылка КАК Документ,
		|	ВнутренниеДокументы.Подготовил КАК Подготовил
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Создал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ВходящиеДокументы.Ссылка,
		|	ВходящиеДокументы.Зарегистрировал
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.Создал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИсходящиеДокументы.Ссылка,
		|	ИсходящиеДокументы.Подготовил
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.Создал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПротоколРаботыПользователей.Пользователь, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ПротоколРаботыПользователей.Пользователь
		|		КОГДА ЕСТЬNULL(ВерсииОбъектов.АвторВерсии, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ВерсииОбъектов.АвторВерсии
		|		ИНАЧЕ Документы.Подготовил
		|	КОНЕЦ КАК АвторДокумента,
		|	Документы.Документ
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|		ПО Документы.Документ = ВерсииОбъектов.Объект
		|			И (ТИПЗНАЧЕНИЯ(ВерсииОбъектов.АвторВерсии) = ТИП(Справочник.Пользователи))
		|			И (ВерсииОбъектов.НомерВерсии = 1)
		|			И (ВерсииОбъектов.Комментарий <> &СозданПоУжеИмеющемуся)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПротоколРаботыПользователей КАК ПротоколРаботыПользователей
		|		ПО Документы.Документ = ПротоколРаботыПользователей.ОбъектДанных
		|			И (ПротоколРаботыПользователей.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытийПротоколаРаботыПользователей.Создание))");
		
	Запрос.Параметры.Вставить("СозданПоУжеИмеющемуся", НСтр("ru = 'Версия создана по уже имеющемуся объекту'; en = 'Version created on an existing object'"));
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Выборка.АвторДокумента) Тогда 
			ДокументОбъект.Создал = Выборка.АвторДокумента;
		Иначе 
			// В большинстве случаев пользователь будет найден, но если пользователя определить не удалось,
			// то делаем допущение, т.к. все равно не удается его определить.
			ДокументОбъект.Создал = ТекущийПользователь;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		Делопроизводство.ЗаписатьДанныеДокумента(Выборка.Документ, "Создал", Выборка.АвторДокумента);
		
		РазблокироватьДанныеДляРедактирования(Выборка.Документ);
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_18_1() Экспорт
	
	// Обновление номенклатуры дел
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураДел.Ссылка
	|ИЗ
	|	Справочник.НоменклатураДел КАК НоменклатураДел
	|ГДЕ
	|	НоменклатураДел.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВидыДокументовЗаполнены = (Объект.ВидыДокументов.Количество() > 0);
		Объект.КонтрагентыЗаполнены = (Объект.Контрагенты.Количество() > 0);
		Объект.ВопросыДеятельностиЗаполнены = (Объект.ВопросыДеятельности.Количество() > 0);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_2() Экспорт
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПолучениеВходящегоПисьма, 
		НСтр("ru='Получение входящего письма'; en = 'Receiving incoming mail'"));
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_3() Экспорт
	
	// Перенаправление входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПеренаправленоПисьмом,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПеренаправлениеПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Перенаправление исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПеренаправленоПисьмом,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПеренаправлениеПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_4() Экспорт
	
	// Перенос данных регистра сведений НастройкиУведомлений.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУведомлений.Пользователь КАК Пользователь,
		|	НастройкиУведомлений.Настройка КАК Настройка,
		|	НастройкиУведомлений.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ВыполнениеЗадачПоПочте)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Справочник.ВидыБизнесСобытий.СозданиеЗадачи)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Пользователь,
		|	НастройкиУведомлений.Настройка,
		|	НастройкиУведомлений.Значение
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ПроцентноеИзменение)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Справочник.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.НастройкиУведомлений.УстановитьДополнительнуюНастройку(
			Выборка.Пользователь,
			Выборка.Настройка,
			Выборка.Значение);
	КонецЦикла;
	
	// Перенос данных регистра сведений НастройкиУведомленийПоУмолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьНастройкиУведомленийПоУмолчанию.Настройка КАК Настройка,
		|	УдалитьНастройкиУведомленийПоУмолчанию.ВидСобытия КАК ВидСобытия,
		|	УдалитьНастройкиУведомленийПоУмолчанию.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.УдалитьНастройкиУведомленийПоУмолчанию КАК УдалитьНастройкиУведомленийПоУмолчанию";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеС20_УдалитьНастройкиУведомленийПоУмолчанию(Выборка);
	КонецЦикла;
	
	// Перенос данных регистра сведений НастройкиУведомленияОЗадачах.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьНастройкиУведомленияОЗадачах.Пользователь КАК Пользователь,
		|	УдалитьНастройкиУведомленияОЗадачах.СрокУведомления КАК СрокУведомления,
		|	УдалитьНастройкиУведомленияОЗадачах.ЧастотаПриближениеСрока КАК ЧастотаПриближениеСрока,
		|	УдалитьНастройкиУведомленияОЗадачах.ЧастотаПросроченныеЗадачи КАК ЧастотаПросроченныеЗадачи
		|ИЗ
		|	РегистрСведений.УдалитьНастройкиУведомленияОЗадачах КАК УдалитьНастройкиУведомленияОЗадачах";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеС20_УдалитьНастройкиУведомленияОЗадачах(Выборка);
	КонецЦикла;
	
	// Перенос данных регистра сведений НастройкиУведомленияОкончанияСрокаДействия.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьНастройкиУведомленияОкончанияСрокаДействия.Пользователь КАК Пользователь,
		|	УдалитьНастройкиУведомленияОкончанияСрокаДействия.СрокУведомления КАК СрокУведомления,
		|	УдалитьНастройкиУведомленияОкончанияСрокаДействия.ЧастотаУведомления КАК ЧастотаУведомления
		|ИЗ
		|	РегистрСведений.УдалитьНастройкиУведомленияОкончанияСрокаДействия КАК УдалитьНастройкиУведомленияОкончанияСрокаДействия";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеС20_УдалитьНастройкиУведомленияОкончанияСрокаДействия(Выборка);
	КонецЦикла;
	
	// Перенос данных регистра сведений НастройкиУведомленияОКонтроле.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьНастройкиУведомленияОКонтроле.Пользователь КАК Пользователь,
		|	УдалитьНастройкиУведомленияОКонтроле.СрокУведомления КАК СрокУведомления,
		|	УдалитьНастройкиУведомленияОКонтроле.ЧастотаПриближениеСрока КАК ЧастотаПриближениеСрока,
		|	УдалитьНастройкиУведомленияОКонтроле.ЧастотаПросроченКонтроль КАК ЧастотаПросроченКонтроль
		|ИЗ
		|	РегистрСведений.УдалитьНастройкиУведомленияОКонтроле КАК УдалитьНастройкиУведомленияОКонтроле";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеС20_УдалитьНастройкиУведомленияОКонтроле(Выборка);
	КонецЦикла;
	
	// Перенос данных регистра сведений ПодпискиНаУведомления.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьПодпискиНаУведомления.ВидСобытия КАК ВидСобытия,
		|	УдалитьПодпискиНаУведомления.ОбъектПодписки КАК ОбъектПодписки,
		|	УдалитьПодпискиНаУведомления.Пользователь КАК Пользователь,
		|	УдалитьПодпискиНаУведомления.СпособУведомления КАК СпособУведомления,
		|	УдалитьПодпискиНаУведомления.ПодпискаАктивна КАК ПодпискаАктивна
		|ИЗ
		|	РегистрСведений.УдалитьПодпискиНаУведомления КАК УдалитьПодпискиНаУведомления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеС20_УдалитьПодпискиНаУведомления(Выборка);
	КонецЦикла;
	
	// Обновление данных регистра сведений СпособыУведомленияПользователей.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СпособыУведомленияПользователей.Пользователь,
		|	СпособыУведомленияПользователей.СпособУведомления,
		|	СпособыУведомленияПользователей.ДанныеСпособа
		|ИЗ
		|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.СпособыУведомленияПользователей.УстановитьСпособУведомленияПользователя(
			Выборка.Пользователь,
			Выборка.СпособУведомления,
			Неопределено,
			Выборка.ДанныеСпособа);
	КонецЦикла;
	
	// Способы уведомления.
	УстановитьСпособыУведомления();
	
	// Отправка SMS.
	УстановитьНастройкиОтправкиSMS();
	
	// Подписки на уведомления по умолчанию.
	РегистрыСведений.НастройкиУведомлений.ЗаполнитьПодпискиПоУмолчанию();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_7() Экспорт
	
	Если Не Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	НЕ ВидыВнутреннихДокументов.ВестиУчетПоОрганизациям
		|	И НЕ ВидыВнутреннихДокументов.ЭтоГруппа");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИзменяемыйОбъект.ВестиУчетПоОрганизациям = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИзменяемыйОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДанныеОНеактуальныхДескрипторах_2_1_0_9(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьНомерСпособаАдресации_2_1_0_10(Параметры)  Экспорт

	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		// Расчет количества
		Запрос = Новый Запрос(
			"ВЫБРАТЬ 
			|	КОЛИЧЕСТВО(ВходящееПисьмо.Ссылка) КАК КолЗаписей
			|ИЗ
			|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
			|ГДЕ
			|	ВходящееПисьмо.НомерСпособаАдресации = 0");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолЗаписей;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.Дата КАК Дата
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.НомерСпособаАдресации = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");
		
	Результат = Запрос.Выполнить();	
	
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	
	ОбработаноСейчас = 0;
	
	Пока Выборка.Следующий() Цикл	
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.НомерСпособаАдресации = 
					ВстроеннаяПочтаСервер.ПолучитьСпособАдресации(Выборка.Ссылка);
			ПисьмоОбъект.Записать();	
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ОбработаноСейчас = ОбработаноСейчас + 1;
			
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗаполнитьНомерСпособаАдресации'; en = 'ЗаполнитьНомерСпособаАдресации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноСейчас;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_11() Экспорт
	
	// Обновление свойств предопределенных данных при переименовании корреспондентов в контрагенты.
	
	// Виды контактной информации.
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Контактная информация справочника ""Контрагенты""'; en = 'Contact information for catalog ""Counterparties""'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.СайтКонтрагента.ПолучитьОбъект();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Адресная книга.
	
	ОбновляемыйОбъект = Справочники.АдреснаяКнига.Контрагенты.ПолучитьОбъект();
	ОбновляемыйОбъект.Объект = НСтр("ru = 'Контрагенты'; en = 'Counterparties'");
	ОбновляемыйОбъект.ПредставлениеОбъекта = НСтр("ru = 'Контрагенты'; en = 'Counterparties'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Виды бизнес-событий.
	
	ОбновляемыйОбъект = Справочники.ВидыБизнесСобытий.СозданиеКонтрагента.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Создание контрагента'; en = 'Creation of counterparty'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Дополнительные реквизиты и сведения.
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_БанковскиеСчетаКонтрагента.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Банковские счета"" (контрагента)'; en = 'Additional properties of ""Bank accounts"" (counterparty) catalog.'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Контрагенты""'; en = 'Additional properties of ""Counterparties"" catalog'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыИП.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Контрагенты"" (индивидуальный предприниматель)'; en = 'Additional properties of ""Counterparties"" catalog (individual entrepreneur)'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыНерезидент.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Контрагенты"" (нерезидент)'; en = 'Additional properties of ""Counterparties"" catalog (non-resident)'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты_Общие.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Контрагенты"" (общие)'; en = 'Additional properties of ""Counterparties"" catalog (common)'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыФизЛицо.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Контрагенты"" (физлицо)'; en = 'Additional properties of ""Counterparties"" catalog (individual)'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыЮрЛицо.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Доп. свойства справочника ""Контрагенты"" (юрлицо)'; en = 'Additional properties of ""Counterparties"" catalog (legal entity)'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Объекты адресации.
	
	ОбновляемыйОбъект = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Контрагент.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Контрагент'; en = 'Counterparty'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Объекты адресации.
	
	ОбновляемыйОбъект = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Группы доступа контрагентов'; en = 'Counterparties access groups'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Категории отчетов.
	
	ОбновляемыйОбъект = Справочники.КатегорииОтчетов.ПоКонтрагентам.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'По контрагентам'; en = 'By counterparties'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Метрики.
	
	ОбновляемыйОбъект = Справочники.Метрики.Контрагенты.ПолучитьОбъект();
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Количество контрагентов'; en = 'Number of counterparties'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	// Настройки автозаполнения.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаАвтозаполнения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов КАК ПравилаАвтозаполнения");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужнаЗапись = Ложь;
		
		ОбновлениеС20_ПравилаАвтозаполненияФайлов_Корреспондент(ОбновляемыйОбъект, НужнаЗапись);
		
		Если НужнаЗапись Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	// Условия маршрутизации.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УсловияМаршрутизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УсловияМаршрутизации КАК УсловияМаршрутизации
		|ГДЕ
		|	УсловияМаршрутизации.СпособЗаданияУсловия = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияУсловия.НаВстроенномЯзыке)
		|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужнаЗапись = Ложь;
		
		ОбновлениеС20_УсловияМаршрутизации_Корреспондент(ОбновляемыйОбъект, НужнаЗапись);
		
		Если НужнаЗапись Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	// Нумераторы.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Нумераторы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Нумераторы КАК Нумераторы");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НужнаЗапись = Ложь;
		ОбновлениеС20_Нумераторы_Корреспондент(ОбновляемыйОбъект, НужнаЗапись);
		
		Если НужнаЗапись Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_12() Экспорт
	
	// Очистка настроек уведомления программы.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУведомлений.Пользователь,
		|	НастройкиУведомлений.Настройка,
		|	НастройкиУведомлений.ВидСобытия,
		|	НастройкиУведомлений.СпособУведомления,
		|	НастройкиУведомлений.Объект
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.УдалитьУведомленияПрограммы)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.УведомлениеПрограммы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.НастройкиУведомлений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	// Очистка очередь уведомление о создании уведомления программы.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьУведомлений.Объект,
		|	ОчередьУведомлений.Пользователь,
		|	ОчередьУведомлений.СпособУведомления,
		|	ОчередьУведомлений.ВидСобытия,
		|	ОчередьУведомлений.ОбъектПодписки
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|ГДЕ
		|	ОчередьУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.УведомлениеПрограммы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_13() Экспорт
	
	// Перенос настроек автозаполнения
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныВнутреннихДокументов.Ссылка КАК Шаблон,
		|	ШаблоныВнутреннихДокументов.ФайлСсылка КАК Файл,
		|	ШаблоныВнутреннихДокументов.Ссылка.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ Файлы
		|ИЗ
		|	Справочник.ШаблоныВнутреннихДокументов.ПрикрепленныеФайлы КАК ШаблоныВнутреннихДокументов
		|ГДЕ
		|	ШаблоныВнутреннихДокументов.Ссылка.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.ПустаяССылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныИсходящихДокументов.Ссылка,
		|	ШаблоныИсходящихДокументов.ФайлСсылка,
		|	ШаблоныИсходящихДокументов.Ссылка.ВидДокумента
		|ИЗ
		|	Справочник.ШаблоныИсходящихДокументов.ПрикрепленныеФайлы КАК ШаблоныИсходящихДокументов
		|ГДЕ
		|	ШаблоныИсходящихДокументов.Ссылка.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыИсходящихДокументов.ПустаяССылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Шаблон,
		|	Файлы.ВидДокумента,
		|	Файлы.Файл КАК Файл,
		|	ЕСТЬNULL(ПравилаАвтозаполненияФайлов.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПравилоАвтозаполнения
		|ИЗ
		|	Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаАвтозаполненияФайлов КАК ПравилаАвтозаполненияФайлов
		|		ПО Файлы.Файл = ПравилаАвтозаполненияФайлов.ШаблонФайла
		|			И Файлы.ВидДокумента = ПравилаАвтозаполненияФайлов.ВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл");
		
	ВыборкаТаблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ВыборкаТаблица Цикл
		Попытка
			НачатьТранзакцию();
			НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(
				Строка.Файл, Строка.Шаблон, Истина);
			ЗаблокироватьДанныеДляРедактирования(Строка.Шаблон);
			
			ШаблонОбъект = Строка.Шаблон.ПолучитьОбъект();
			СтрокаУдаления = ШаблонОбъект.ПрикрепленныеФайлы.Найти(Строка.Файл, "ФайлСсылка");
			Если СтрокаУдаления <> Неопределено Тогда 
				ШаблонОбъект.ПрикрепленныеФайлы.Удалить(СтрокаУдаления.НомерСтроки - 1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
				ЗаблокироватьДанныеДляРедактирования(Строка.ПравилоАвтозаполнения);
				ПравилоОбъект = Строка.ПравилоАвтозаполнения.ПолучитьОбъект();
				НовоеПравилоОбъект = ПравилоОбъект.Скопировать();
				НовоеПравилоОбъект.ШаблонФайла = НовыйФайл;
				НовоеПравилоОбъект.Комментарий = НовоеПравилоОбъект.Комментарий + НСтр("ru = 'Копия правила - создана при переходе на релиз 2.1.'; en = 'Copy of the rules created during the transition to release 2.1.'");
				НовоеПравилоОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(Строка.ПравилоАвтозаполнения);
				
				НоваяСтрока = ШаблонОбъект.ПравилаАвтозаполнения.Добавить();
				НоваяСтрока.ШаблонФайла = НовыйФайл;
				НоваяСтрока.ПравилоАвтозаполнения = НовоеПравилоОбъект.Ссылка;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонОбъект);
			РазблокироватьДанныеДляРедактирования(Строка.Шаблон);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	// Пометим на удаление старые шаблоны
	МассивФайловДляУдаления = ВыборкаТаблица.ВыгрузитьКолонку("Файл");
	Для Каждого Файл Из МассивФайловДляУдаления Цикл 
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
			ОбъектФайл = Файл.ПолучитьОбъект();
			ОбъектФайл.УстановитьПометкуУдаления(Истина);
			РазблокироватьДанныеДляРедактирования(Файл);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	// Заполним у доп. реквизитов уникальный код
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.УникальныйКодДляПоля = """"";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			РеквизитОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РеквизитОбъект,, Истина);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_14() Экспорт
	
	// Перенос данных регистра сведений СвязанныеЗаписиКалендаря.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УдалитьСвязанныеЗаписиКалендаря.Предмет,
		|	УдалитьСвязанныеЗаписиКалендаря.Пользователь,
		|	УдалитьСвязанныеЗаписиКалендаря.ЗаписьКалендаря
		|ИЗ
		|	РегистрСведений.УдалитьСвязанныеЗаписиКалендаря КАК УдалитьСвязанныеЗаписиКалендаря");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗаписьКалендаря = Выборка.ЗаписьКалендаря.ПолучитьОбъект();
			ЗаписьКалендаря.Связанная = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьКалендаря);
			
			МенеджерЗаписи = РегистрыСведений.УдалитьСвязанныеЗаписиКалендаря.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	// Удаление данных рабочих групп записей календаря.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Объект,
		|	РабочиеГруппы.Участник,
		|	РабочиеГруппы.УдалитьОсновнойОбъектАдресации,
		|	РабочиеГруппы.УдалитьДополнительныйОбъектАдресации,
		|	РабочиеГруппы.УдалитьУчастник
		|ИЗ
		|	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Объект ССЫЛКА Справочник.ЗаписиРабочегоКалендаря");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	// Заполнение календаря данными отсутствий.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		И ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		Документы.Отсутствие.ЗаполнитьРабочийКалендарь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_15() Экспорт

	// включаем историю хранения адреса организации
	Адрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	Адрес.ХранитьИсториюИзменений = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Адрес); 
	
КонецПроцедуры

Процедура ЗаполнениеДанныхДляПереходящиеДела_2_1_0_16(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ДелаХраненияДокументов.Ссылка), 0) КАК КолЗаписей
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	НЕ ДелаХраненияДокументов.ПометкаУдаления
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел.НоменклатураДел) = 0");
			
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КолЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ДелаХраненияДокументов.Ссылка
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|ГДЕ
		|	НЕ ДелаХраненияДокументов.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДелаХраненияДокументов.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел.НоменклатураДел) = 0");
		
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДелоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДелоОбъект,, Истина);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_21() Экспорт
	
	ОбновляемыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура.ПолучитьОбъект();
	ОбновляемыйОбъект.Используется = Истина;
	ОбновляемыйОбъект.Наименование = НСтр("ru = 'Товары и услуги'; en = 'Products and services'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796"); // шт
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166"); // кг
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("778"); // упак
	
	// Добавление в настройки доступности по состоянию поля "Товары" внутреннего документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВнутренниеДокументы)
	|	И НЕ ""Товары"" В
	|				(ВЫБРАТЬ
	|					НастройкиДоступности.ИмяПоляКоманды
	|				ИЗ
	|					Справочник.НастройкиДоступностиПоСостоянию.НастройкиДоступности КАК НастройкиДоступности
	|				ГДЕ
	|					НастройкиДоступности.Ссылка = НастройкиДоступностиПоСостоянию.Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
				Новый Структура("ИмяПоляКоманды", "РедактированиеФайлов"));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.ИмяПоляКоманды = "Товары";
				НоваяСтрока.Состояние = Строка.Состояние;
				НоваяСтрока.Доступность = Строка.Доступность;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыборкаОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка добавления поля ""Товары"" в настройки доступности по состоянию.'; en = 'Error adding field ""Products"" in the state based availability settings.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	// Добавление роли в профиль доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("ДобавлениеИзменениеТоваровИУслуг");
	Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
	Идентификатор = "7bc7f2da-db69-11de-a544-00179ab398dc"; // Идентификатор профиля "Ответственные за НСИ"
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(Профиль) Тогда 
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
		Если НайденнаяСтрока = Неопределено Тогда 
			НоваяСтрока = ПрофильОбъект.Роли.Добавить();
			НоваяСтрока.Роль = Роль;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ОтказОтГруппПользователей_2_1_0_23() Экспорт
	
	Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	
	РегистрыСведений.ПодчиненностьПодразделений.ОбновитьДанныеПолностью();
	
	ИзменяемыйРаздел = Справочники.АдреснаяКнига.ПоРабочимГруппам.ПолучитьОбъект();
	ИзменяемыйРаздел.ПредставлениеОбъекта = НСтр("ru = 'По рабочим группам'; en = 'By working groups'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИзменяемыйРаздел);
	
	ЗапросПодходящиеПоНаименованию = Новый Запрос(
		"ВЫБРАТЬ
		|	Группы.Ссылка КАК ЗаменяемаяГруппа,
		|	СтруктураПредприятия.Ссылка КАК ЗаменяетсяПодразделением
		|ИЗ
		|	Справочник.РабочиеГруппы КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (Группы.Наименование ПОДОБНО СтруктураПредприятия.Наименование)
		|ГДЕ
		|	Группы.Ссылка <> ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи)");
	ВыборкаПодходящиеПоНаименованию = ЗапросПодходящиеПоНаименованию.Выполнить().Выбрать();
	
	ИзменяемыеСсылки = Новый Массив;
	
	Пока ВыборкаПодходящиеПоНаименованию.Следующий() Цикл
		
		// Проверим, совпадают ли составы контейнеров.
		СоставГруппы = Справочники.РабочиеГруппы.СоставКонтейнераПользователей(
			ВыборкаПодходящиеПоНаименованию.ЗаменяемаяГруппа);
		СоставПодразделения = Справочники.СтруктураПредприятия.СоставКонтейнераПользователей(
			ВыборкаПодходящиеПоНаименованию.ЗаменяетсяПодразделением);
		Если Не ОбщегоНазначения.КоллекцииИдентичны(СоставГруппы, СоставПодразделения) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменяемыеСсылки.Добавить(ВыборкаПодходящиеПоНаименованию.ЗаменяемаяГруппа);
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ИзменяемаяСсылка Из ИзменяемыеСсылки Цикл
			
			ИзменяемыйОбъект = ИзменяемаяСсылка.ПолучитьОбъект();
			ИзменяемыйОбъект.Недействительна = Истина;
			Если ЗначениеЗаполнено(ИзменяемыйОбъект.Комментарий) Тогда
				ИзменяемыйОбъект.Комментарий = СтрШаблон("%1 (%2)",
					НСтр("ru = 'Помечена недействительной как дубликат одноименного подразделения'; en = 'Marked as not valid as a duplicate of the eponymous department'"),
					ИзменяемыйОбъект.Комментарий);
			Иначе
				ИзменяемыйОбъект.Комментарий = 
					НСтр("ru = 'Помечена недействительной как дубликат одноименного подразделения'; en = 'Marked as not valid as a duplicate of the eponymous department'");
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИзменяемыйОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при пометке рабочих групп недействительными'; en = 'Error when marking working groups as invalid'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Обновим данные адресной книги.
	
	Для Каждого ИзменяемаяСсылка Из ИзменяемыеСсылки Цикл
		
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИзменяемаяСсылка, "Родитель");
		
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			ИзменяемаяСсылка,
			Родитель,
			Справочники.АдреснаяКнига.ПоРабочимГруппам);
		
	КонецЦикла;
	
	РегистрыСведений.ПользователиВКонтейнерах.ОбновитьДанныеПолностью();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_0_25() Экспорт
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	// Заполнение РС ПолномочияПользователей.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
		|	ГруппыДоступа.Профиль КАК Полномочия,
		|	ГруппыДоступа.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы) КАК ЭтоГруппаАдминистраторы
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка
		|ГДЕ
		|	НЕ ГруппыДоступа.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппаАдминистраторы УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПолномочияПользователей.ДобавитьПолномочия(
			Выборка.Пользователь, Выборка.Полномочия);
	КонецЦикла;
	
	// Пометка групп доступа на удаление.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	НЕ ГруппыДоступа.ПометкаУдаления
		|	И ГруппыДоступа.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
		|	И НЕ ГруппыДоступа.ЭтоГруппа");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	 	ГруппаДоступаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаДоступаОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей", Истина);
		ГруппаДоступаОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	// Начальное заполнение разрешений для разрезов доступа.
	РегистрыСведений.РазрешенияДляРазрезовДоступа.ОбновитьВсеДанные();
	
	// Начальное заполнение уровней доступа.
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Справочники.УровниДоступа.ЗаполнитьРеквизитыПредопределенныхЭлементов();
	КонецЕсли;
	
	// Перенос данных из групп доступа в разрешения доступа.
	ПеренестиНастройкиИзГруппДоступаВРазрешенияИРабочиеГруппы();
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_1() Экспорт
	
	// Очистка очереди уведомлений с пустым пользователем.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьУведомлений.Объект,
		|	ОчередьУведомлений.Пользователь,
		|	ОчередьУведомлений.СпособУведомления,
		|	ОчередьУведомлений.ВидСобытия,
		|	ОчередьУведомлений.ОбъектПодписки
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|ГДЕ
		|	ОчередьУведомлений.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_2() Экспорт
	
	// Удалим "Облачный сервис"
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
		|	ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	ПрограммыЭлектроннойПодписиИШифрования.ЭтоПрограммаОблачногоСервиса";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;		
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Программа = Неопределено;
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Программа = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Программа.Удалить();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_3() Экспорт
	
	// Заполнение описания уведомлений программы.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомленияПрограммы.Ссылка
		|ИЗ
		|	Справочник.УведомленияПрограммы КАК УведомленияПрограммы
		|ГДЕ
		|	УведомленияПрограммы.КраткоеОписание = """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УведомлениеПрограммы = Выборка.Ссылка.ПолучитьОбъект();
		ОбновлениеС20_УведомленияПрограммы(УведомлениеПрограммы);
		УведомлениеПрограммы.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_4() Экспорт
	
	// Заполнение реквизита Состояние в процессах
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	Процессы.Ссылка,
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс
		|ИЗ
		|	БизнесПроцесс.%1 КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО Процессы.ВедущаяЗадача = ДочерниеБизнесПроцессы.СвязующаяЗадача
		|			И Процессы.Ссылка = ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ГДЕ
		|	Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
	
	СтрокаСоединения = "";
	
	ТекстЗапрос = "";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	Для Каждого МетаданныеПроцесса Из МетаданныеПроцессов Цикл
		
		ТекстЗапрос = ТекстЗапрос
			+ СтрокаСоединения
			+ СтрШаблон(ШаблонЗапроса, МетаданныеПроцесса.Имя);
			
		СтрокаСоединения = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапрос;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПроцессОбъект.Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.РодительскийПроцесс, "Состояние");
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
	КонецЦикла;
	
	// Заполнение графиков работ с 2010 по 2050 годы для корректного расчета сроков исполнения.
	
	// Получим заполненные годы календарных графиков.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КалендарныеГрафики.Календарь,
		|	КалендарныеГрафики.Год
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики";
	ЗаполненныеГоды = Запрос.Выполнить().Выгрузить();
	
	// Заполнил календарные графики с 2010 по 2050 годы.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Календари.Ссылка
		|ИЗ
		|	Справочник.Календари КАК Календари
		|ГДЕ
		|	Календари.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для НомерГода = 2010 По 2050 Цикл
			
			// Проверим заполнение года для текущего календаря.
			Отбор = Новый Структура;
			Отбор.Вставить("Календарь", Выборка.Ссылка);
			Отбор.Вставить("Год", НомерГода);
			ЗаполненныеГодыТекущегоКалендаря = ЗаполненныеГоды.НайтиСтроки(Отбор);
			
			Если ЗаполненныеГодыТекущегоКалендаря.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформируем список дат текущего года.
			СписокДат = Новый СписокЗначений;
			Для Месяц = 1 По 12 Цикл
				Для НомерДня = 1 По День(КонецМесяца(Дата(НомерГода, Месяц, 1))) Цикл
					ДатаКалендаря = Дата(НомерГода, Месяц, НомерДня);
					
					Если ДеньНедели(ДатаКалендаря) = 6 Или ДеньНедели(ДатаКалендаря) = 7 Тогда
						Продолжить;
					КонецЕсли;
					
					СписокДат.Добавить(ДатаКалендаря);
				КонецЦикла;
			КонецЦикла;
			
			// Запишем сформированный список дат.
			Справочники.Календари.ЗаписатьДанныеГрафикаВРегистр(Выборка.Ссылка, НомерГода, СписокДат);
			
		КонецЦикла;
			
	КонецЦикла;
	
	// Монопольная реорганизация ролей, в т.ч. в активных процессах и шаблонах.
	РеорганизацияРолейСОбъектамиАдресацииМонопольная();
	
	// Обновление сроков исполнения в процессах
	СрокиИсполненияПроцессов.ОбновитьСрокиИсполненияАктивныхОбъектов();
	
КонецПроцедуры

Процедура ОбновитьСрокиИсполненияОтложенноНеАктивныхОбъектов(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = 
			СрокиИсполненияПроцессов.КоличествоНеактивныхОбъектовДляОбработки();
		
	КонецЕсли;
	
	ОбработаноОбъектов = 
		СрокиИсполненияПроцессов.ОбновитьСрокиИсполненияОтложенноНеАктивныхОбъектов();
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_6() Экспорт
	
	// В СУБД удалить записи в РС РабочиеГруппы, если объект - учетная запись.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеГруппы.Объект,
		|	РабочиеГруппы.Участник,
		|	РабочиеГруппы.УдалитьОсновнойОбъектАдресации,
		|	РабочиеГруппы.УдалитьДополнительныйОбъектАдресации,
		|	РабочиеГруппы.УдалитьУчастник
		|ИЗ
		|	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Объект ССЫЛКА Справочник.УчетныеЗаписиЭлектроннойПочты";
		
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Таблица Цикл
		
		МенеджерЗаписи = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_7() Экспорт
	
	// Добавление рук. проектов в рабочие группы.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Руководитель
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО Проекты.Ссылка = РабочиеГруппы.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	Проекты.Ссылка,
		|	Проекты.Руководитель
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РабочиеГруппы.Участник = Проекты.Руководитель И РабочиеГруппы.Изменение) = ЛОЖЬ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
		Запись.Объект = Выборка.Проект;
		Запись.Участник = Выборка.Руководитель;
		Запись.Изменение = Истина;
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_8() Экспорт
	
	// Добавление авторов шаблонов документов в рабочие группы.
	
	ТаблицыШаблонов = Новый Массив;
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныВнутреннихДокументов");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныВходящихДокументов");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныИсходящихДокументов");
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	Шаблоны.Ссылка КАК Шаблон,
		|	Шаблоны.Автор
		|ИЗ
		|	#ТаблицаШаблонов КАК Шаблоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО Шаблоны.Ссылка = РабочиеГруппы.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	Шаблоны.Ссылка,
		|	Шаблоны.Автор
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РабочиеГруппы.Участник = Шаблоны.Автор И РабочиеГруппы.Изменение) = ЛОЖЬ";
		
	Для Каждого ИмяТаблицы Из ТаблицыШаблонов Цикл
		
		Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "#ТаблицаШаблонов", ИмяТаблицы));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Шаблон;
			Запись.Участник = Выборка.Автор;
			Запись.Изменение = Истина;
			Запись.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_10() Экспорт
	
	РеорганизацияРолейСОбъектамиАдресацииШаблоныДокументовИнструкции();
	РеорганизацияРолейСОбъектамиАдресацииНастройкиДоступностиЭскалация();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_1_11() Экспорт
	
	// Установка значения константы по умолчанию.
	Константы.ПроверятьСоответствиеРабочихГруппОбщимНастройкам.Установить(Истина);
	
	// Расчет прав объектов, которые не входят в механизм прав, но имеют файлы.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Файлы.ВладелецФайла
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО Файлы.ВладелецФайла = ДескрипторыДляОбъектов.Объект
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) В (&ДоступныеТипыВладельцев)
		|	И НЕ ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) В (&ТипыСсылокМеханизмаПрав)
		|	И ДескрипторыДляОбъектов.Объект ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ДоступныеТипыВладельцев",
		Метаданные.РегистрыСведений.ДескрипторыДляОбъектов.Измерения.Объект.Тип.Типы());
	Запрос.УстановитьПараметр("ТипыСсылокМеханизмаПрав",
		ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующихДоступПоДескрипторам());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.ВладелецФайла);
	КонецЦикла;
	
	// Перенос прав дескрипторов регистров в новый РС.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьПраваПоДескрипторамДоступа.Дескриптор
		|ПОМЕСТИТЬ ДескрипторыКПереносу
		|ИЗ
		|	РегистрСведений.УдалитьПраваПоДескрипторамДоступа КАК УдалитьПраваПоДескрипторамДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаРегистров КАК ПраваПоДескрипторамДоступаРегистров
		|		ПО УдалитьПраваПоДескрипторамДоступа.Дескриптор = ПраваПоДескрипторамДоступаРегистров.Дескриптор
		|ГДЕ
		|	УдалитьПраваПоДескрипторамДоступа.Дескриптор ССЫЛКА Справочник.ДескрипторыДоступаРегистров
		|	И ПраваПоДескрипторамДоступаРегистров.Дескриптор ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьПраваПоДескрипторамДоступа.Дескриптор КАК Дескриптор,
		|	УдалитьПраваПоДескрипторамДоступа.Пользователь,
		|	УдалитьПраваПоДескрипторамДоступа.Добавление,
		|	УдалитьПраваПоДескрипторамДоступа.Изменение,
		|	УдалитьПраваПоДескрипторамДоступа.Удаление,
		|	УдалитьПраваПоДескрипторамДоступа.УправлениеПравами,
		|	УдалитьПраваПоДескрипторамДоступа.Чтение
		|ИЗ
		|	РегистрСведений.УдалитьПраваПоДескрипторамДоступа КАК УдалитьПраваПоДескрипторамДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДескрипторыКПереносу КАК ДескрипторыКПереносу
		|		ПО УдалитьПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыКПереносу.Дескриптор
		|ИТОГИ ПО
		|	Дескриптор");
	
	ВыборкаПоДескрипторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
		Набор.Отбор.Дескриптор.Установить(ВыборкаПоДескрипторам.Дескриптор);
		
		Выборка = ВыборкаПоДескрипторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_2_1() Экспорт
	
	// Добавление роли в профиль доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("РаботаСЗаметкамиДокументооборота");
	Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(Профиль) Тогда 
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
		Если НайденнаяСтрока = Неопределено Тогда 
			НоваяСтрока = ПрофильОбъект.Роли.Добавить();
			НоваяСтрока.Роль = Роль;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_2_2() Экспорт
	
	// Пересчет прав "основных" дескрипторов мероприятий и проектов.
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПриоритет = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&ИдентификаторыОбъектов)
		|	И ДескрипторыДоступаОбъектов.КонтейнерПользователей = НЕОПРЕДЕЛЕНО");
		
	ИдентификаторыОбъектов = Новый Массив;
	ИдентификаторыОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Мероприятия));
	ИдентификаторыОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Проекты));
	Запрос.УстановитьПараметр("ИдентификаторыОбъектов", ИдентификаторыОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритет;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_4_1() Экспорт
	
	ОбновитьСостояниеПодпискиНаВидБизнесСобытия(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	ОбновитьСостояниеПодпискиНаВидБизнесСобытия(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_4_2() Экспорт
	
	// Заполнение кэша предметов и участников действий комплексных процессов
	// для проверки прав.
	
	// Обработчик рассчитан на одно выполнение.
	// Повторный запуск выполнит полное перезаполнение кэша.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплексныйПроцессЭтапы.ШаблонБизнесПроцесса
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО КомплексныйПроцессЭтапы.Ссылка = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	КомплексныйПроцесс.Стартован
		|	И НЕ КомплексныйПроцесс.Завершен
		|	И НЕ КомплексныйПроцесс.ПометкаУдаления
		|	И КомплексныйПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И КомплексныйПроцессЭтапы.ЗапущенныйБизнесПроцесс = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МультипредметностьКОРП.
			ОбновитьКэшПредметовИУчастниковДействияКомплексныхПроцессов(Выборка.ШаблонБизнесПроцесса);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_5_2() Экспорт

	// Обновление прав по дескрипторам регистров.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров");
		
	ДескрипторыКОбновлению = Новый Массив;
	РазмерПорции = ДокументооборотПраваДоступаПовтИсп.РазмерПорцииДескрипторовДляРасширенияПравСоставомСубъектов();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДескрипторыКОбновлению.Добавить(Выборка.Ссылка);
		
		Если ДескрипторыКОбновлению.Количество() >= РазмерПорции Тогда
			Справочники.ДескрипторыДоступаРегистров.ОбновитьПраваПоСоставуСубъектов(ДескрипторыКОбновлению);
			ДескрипторыКОбновлению.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Справочники.ДескрипторыДоступаРегистров.ОбновитьПраваПоСоставуСубъектов(ДескрипторыКОбновлению);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_5_5() Экспорт
	
	РеорганизацияролейСОбъектамиАдресацииШаблоныКомплексныхПроцессов();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_5_6() Экспорт

	// Обновление прав по разрезам доступа и контрагентам.
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		
		ДокументооборотПраваДоступа.ОбновитьПраваВсехРазрезовДоступа();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных");
		
		Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных",
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Контрагенты));
		
		ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
		
	  	Выборка = Запрос.Выполнить().Выбрать();
	  	Пока Выборка.Следующий() Цикл
	  		ДокументооборотПраваДоступа.ОбновитьПраваДоступаПоДескриптору(Выборка.Ссылка);
	  	КонецЦикла;
		
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		
	КонецЕсли;
	
	// Обновление данных служебных регистров,
	// которые могут быть в неконсистентном состоянии из-за ошибок в предыдущих версиях.
	РегистрыСведений.ПодчиненностьПодразделений.ОбновитьДанныеПолностью();
	РегистрыСведений.ПользователиВКонтейнерах.ОбновитьДанныеПолностью();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_6_1() Экспорт
	
	ЛокализацияКонфигурацииПереопределяемый.ПерейтиНаВерсию_2_1_6_1();
	
	// Обновление прав справочника ГруппыКонтактовПользователей.
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ДокументооборотПраваДоступа.ОпределитьПраваОбъектовТаблицы(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
				Метаданные.Справочники.ГруппыКонтактовПользователей));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_6_2() Экспорт
	
	// Обновление прав шаблонов внутренних документов.
	// При переходе на 2.1 некоторые права могли не рассчитаться.
	
	ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиВнутреннихДокументов КАК ПапкиВнутреннихДокументов
		|		ПО ДескрипторыДоступаОбъектов.Папка = ПапкиВнутреннихДокументов.Ссылка
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных");
		
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ШаблоныВнутреннихДокументов));
		
 	Выборка = Запрос.Выполнить().Выбрать();
 	Пока Выборка.Следующий() Цикл
 		ДокументооборотПраваДоступа.ОбновитьПраваДоступаПоДескриптору(Выборка.Ссылка);
 	КонецЦикла;
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_6_5() Экспорт
	
	// Добавление ответственных за шаблонов процессов в рабочие группы.
	
	ТаблицыШаблонов = Новый Массив;
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныИсполнения");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныКомплексныхБизнесПроцессов");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныОзнакомления");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныПоручения");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныПриглашения");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныРассмотрения");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныРегистрации");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныСогласования");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныСоставныхБизнесПроцессов");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныУтверждения");
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка КАК Шаблон,
		|	ШаблоныПроцессов.Ответственный
		|ИЗ
		|	#ТаблицаШаблонов КАК ШаблоныПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО ШаблоныПроцессов.Ссылка = РабочиеГруппы.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ШаблоныПроцессов.Ответственный = Пользователи.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныПроцессов.Ссылка,
		|	ШаблоныПроцессов.Ответственный
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РабочиеГруппы.Участник = ШаблоныПроцессов.Ответственный
		|			И РабочиеГруппы.Изменение) = ЛОЖЬ";
	
	Для Каждого ИмяТаблицы Из ТаблицыШаблонов Цикл
		
		Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "#ТаблицаШаблонов", ИмяТаблицы));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Шаблон;
			Запись.Участник = Выборка.Ответственный;
			Запись.Изменение = Истина;
			Запись.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеСостоянийВПроцессах_2_1_6_6(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОбмена",
		РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов());
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
				
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеБизнесПроцессов.БизнесПроцесс
			|ИЗ
			|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
			|ГДЕ
			|	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
			|	И ДанныеБизнесПроцессов.УзелОбмена = &УзелОбмена";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
		|	И ДанныеБизнесПроцессов.УзелОбмена = &УзелОбмена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПроцессОбъект = Выборка.БизнесПроцесс.ПолучитьОбъект();
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		
	КонецЦикла;
	
	ОбработаноОбъектов = Выборка.Количество();
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_6_7() Экспорт
	
	// Очистка реквизита Шаблон во всех стартованных действиях комплексных процессов.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Процессы.Ссылка
		|ИЗ
		|	#ТаблицаПроцессов КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|			ПО ДочерниеБизнесПроцессы.СвязующаяЗадача = ЗадачаИсполнителя.Ссылка
		|		ПО Процессы.Ссылка = ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
		|	И ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|	И Процессы.Шаблон <> ЗНАЧЕНИЕ(#ТаблицаШаблона.ПустаяСсылка)";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	Для Каждого МетаданноеПроцесса Из МетаданныеПроцессов Цикл
		
		Если МетаданноеПроцесса.Имя = "РешениеВопросовВыполненияЗадач" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПроцесса = МетаданноеПроцесса.ПолноеИмя();
		
		ТипШаблона = МетаданноеПроцесса.Реквизиты.Шаблон.Тип.Типы()[0];
		ИмяШаблона = Метаданные.НайтиПоТипу(ТипШаблона).ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаПроцессов", ИмяПроцесса);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаШаблона", ИмяШаблона);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессОбъект.Шаблон = Неопределено;
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавление роли в профиль доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("РаботаСКонтрольнымиТочками");
	Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(Профиль) Тогда 
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
		Если НайденнаяСтрока = Неопределено Тогда 
			НоваяСтрока = ПрофильОбъект.Роли.Добавить();
			НоваяСтрока.Роль = Роль;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение уровней контроля по умолчанию
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьКонтрольныеТочки.Установить(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УровниКонтроля.Ссылка
	|ИЗ
	|	Справочник.УровниКонтроля КАК УровниКонтроля";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '1 (Стратегический)'; en = '1 (Strategic)'");
		НовыйУровень.Записать();
		
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '2 (Тактический)'; en = '2 (Tactical)'");
		НовыйУровень.Записать();
		
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '3 (Оперативный)'; en = '3 (Operational)'");
		НовыйУровень.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитаШаблонВДействияхКомплексногоПроцесса_2_1_6_7(Параметры) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Процессы.Ссылка
		|ИЗ
		|	#ТаблицаПроцессов КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО Процессы.Ссылка = ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
		|	И Процессы.Шаблон = ЗНАЧЕНИЕ(#ТаблицаШаблона.ПустаяСсылка)";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	КоличествоИзмененныхПроцессов = 0;
	
	Для Каждого МетаданноеПроцесса Из МетаданныеПроцессов Цикл
		
		Если МетаданноеПроцесса.Имя = "РешениеВопросовВыполненияЗадач" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПроцесса = МетаданноеПроцесса.ПолноеИмя();
		
		ТипШаблона = МетаданноеПроцесса.Реквизиты.Шаблон.Тип.Типы()[0];
		ИмяШаблона = Метаданные.НайтиПоТипу(ТипШаблона).ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаПроцессов", ИмяПроцесса);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаШаблона", ИмяШаблона);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ШаблонЭтапаПроцесса = БизнесПроцессыИЗадачиСервер.ШаблонЭтапаПроцесса(Выборка.Ссылка);
			Если ЗначениеЗаполнено(ШаблонЭтапаПроцесса) Тогда
				
				ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ПроцессОбъект.Шаблон = ШаблонЭтапаПроцесса;
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
				
				КоличествоИзмененныхПроцессов = КоличествоИзмененныхПроцессов + 1;
			КонецЕсли;
			
			Если КоличествоИзмененныхПроцессов = 1000 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоИзмененныхПроцессов = 1000 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (КоличествоИзмененныхПроцессов = 0);
	
КонецПроцедуры

Процедура ОчисткаРеквизитаИсходныйШаблонВШаблонахПроцессов_2_1_6_7(Параметры) Экспорт
	
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	#ИмяТаблицыШаблонов КАК ШаблоныПроцессов
		|ГДЕ
		|	ШаблоныПроцессов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
		|	И ШаблоныПроцессов.ИсходныйШаблон <> ЗНАЧЕНИЕ(#ИмяТаблицыШаблонов.ПустаяСсылка)";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	ТекстЗапроса = "";
	
	Разделитель = "";
	
	Для Каждого МетаданноеПроцесса Из МетаданныеПроцессов Цикл
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданноеПроцесса.ПолноеИмя());
		
		Попытка
			ИмяТаблицыШаблонов = МенеджерПроцесса.ТипШаблона();
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ИмяТаблицыШаблонов) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса
			+ Разделитель
			+ СтрЗаменить(ШаблонТекстаЗапроса, "#ИмяТаблицыШаблонов", ИмяТаблицыШаблонов);
		
		Разделитель =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.ИсходныйШаблон = Неопределено;
		ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект, "ПростаяЗапись");
		
	КонецЦикла;
	
	ОбработаноОбъектов = Выборка.Количество();
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитаИсходныйШаблонВСлужебныхШаблонах_2_1_6_8(Параметры) Экспорт
	
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка,
		|	ШаблоныПроцессов.ИсходныйШаблон
		|ИЗ
		|	#ИмяТаблицыШаблонов КАК ШаблоныПроцессов
		|ГДЕ
		|	ШаблоныПроцессов.КомплексныйПроцесс <> ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
		|	И ШаблоныПроцессов.ИсходныйШаблон = ЗНАЧЕНИЕ(#ИмяТаблицыШаблонов.ПустаяСсылка)";
		
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	ТекстЗапроса = "";
	
	Разделитель = "";
	
	Для Каждого МетаданноеПроцесса Из МетаданныеПроцессов Цикл
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданноеПроцесса.ПолноеИмя());
		
		Попытка
			ИмяТаблицыШаблонов = МенеджерПроцесса.ТипШаблона();
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ИмяТаблицыШаблонов) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса
			+ Разделитель
			+ СтрЗаменить(ШаблонТекстаЗапроса, "#ИмяТаблицыШаблонов", ИмяТаблицыШаблонов);
		
		Разделитель =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ИсходныйШаблон = Неопределено;
		Попытка
			ИсходныйШаблон = ШаблоныБизнесПроцессов.ИсходныйШаблонЭтапаПроцесса(Выборка.Ссылка); 
		Исключение
			ЗаписьЖурналаРегистрации(
				"ЗаполнениеРеквизитаИсходныйШаблонВСлужебныхШаблонах_2_1_6_8",
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ИсходныйШаблон) Тогда
			
			ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонОбъект.ИсходныйШаблон = ИсходныйШаблон;
			ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект, "ПростаяЗапись");
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		КонецЕсли;
		
		Если ОбработаноОбъектов = 1000 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_7_1() Экспорт
	
	// Заполнение константы ИспользованиеРазрезовДоступа.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Если Константы.ИспользованиеРазрезовДоступа.Получить().Получить() = Неопределено Тогда
		МенеджерЗначения = Константы.ИспользованиеРазрезовДоступа.СоздатьМенеджерЗначения();
		МенеджерЗначения.НачальноеЗаполнение();
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Начальное заполнение новых уровней доступа.
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Права = Новый Структура("ЧтениеБезОграничения", Истина);
			Справочники.УровниДоступа.ЗаполнитьРеквизитыПредопределенногоЭлемента("ЧтениеБезОграничения", 4, Права);
		Права = Новый Структура("ЧтениеБезОграничения, ИзменениеБезОграничения", Истина, Истина);
			Справочники.УровниДоступа.ЗаполнитьРеквизитыПредопределенногоЭлемента("РедактированиеБезОграничения", 5, Права);
	КонецЕсли;
	
	// Начальное заполнение разрешений по новому разрезу доступа Подразделение.
	РегистрыСведений.РазрешенияДоступаОбщие.ЗаполнитьРазрешенияПоПодразделениям();
	ЗаписьСОбщимиРазрешениями = РегистрыСведений.РазрешенияДоступаОбщие.СоздатьМенеджерЗаписи();
	ЗаписьСОбщимиРазрешениями.ЗначениеДоступа = ПланыВидовХарактеристик.ВидыДоступа.Подразделения;
	ЗаписьСОбщимиРазрешениями.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
	ЗаписьСОбщимиРазрешениями.УровеньДоступа = Справочники.УровниДоступа.Редактирование;
	ЗаписьСОбщимиРазрешениями.Записать();
	
	// Добавление отключенных разрезов в коллекции значений доступа.
	ПредметыДоступаСРазрезами = ДокументооборотПраваДоступаПереопределяемый.ПредметыДоступаСРазрезами();
	ТаблицаРазрезовДоступа = ДокументооборотПраваДоступаПовтИсп.ТаблицаРазрезовДоступа(); // Не содержит  отключенных разрезов.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РазрешенияДоступаИсключительные.Предмет КАК Предмет,
		|	РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа КАК Коллекция,
		|	РазрешенияДоступаИсключительные.Пользователь,
		|	РазрешенияДоступаИсключительные.УровеньДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные
		|ИТОГИ ПО
		|	Предмет,
		|	Коллекция");
		
	ВыборкаПоПредметам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПредметам.Следующий() Цикл
		
		Предмет = ВыборкаПоПредметам.Предмет;
		СтрокаТаблицыПредметов = ПредметыДоступаСРазрезами.Найти(Предмет, "ОбъектМетаданных");
		ВсеРазрезыДоступаПредмета = СтрокаТаблицыПредметов.ВидыДоступа;
		
		// Поиск отключенных разрезов.
		ОтключенныеРазрезыДоступаПоПредмету = Новый Массив;
		Для Каждого Эл Из ВсеРазрезыДоступаПредмета Цикл
			ТекущийРазрез = Эл.Значение;
			НайденнаяСтрока = ТаблицаРазрезовДоступа.Найти(ТекущийРазрез, "ВидДоступа");
			Если НайденнаяСтрока = Неопределено Тогда
				ОтключенныеРазрезыДоступаПоПредмету.Добавить(ТекущийРазрез);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтключенныеРазрезыДоступаПоПредмету.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоКоллекциям = ВыборкаПоПредметам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКоллекциям.Следующий() Цикл
			
			Коллекция = ВыборкаПоКоллекциям.Коллекция;
			Состав = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Коллекция, "ЗначенияДоступа");
			СтарыйСоставКоллекции = Состав.Выгрузить().ВыгрузитьКолонку("Значение");
			НовыйСоставКоллекции = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СтарыйСоставКоллекции);
			РазрезыДоступаКоллекции = ДокументооборотПраваДоступа.РазрезыДоступаПоЗначениям(СтарыйСоставКоллекции);
			
			Для Каждого ОтключенныйРазрез Из ОтключенныеРазрезыДоступаПоПредмету Цикл
				Если РазрезыДоступаКоллекции.Найти(ОтключенныйРазрез) = Неопределено Тогда
					НовыйСоставКоллекции.Добавить(ОтключенныйРазрез);
				КонецЕсли;
			КонецЦикла;
			
			Если НовыйСоставКоллекции.Количество() = СтарыйСоставКоллекции.Количество() Тогда
				// Нет изменений.
				Продолжить;
			КонецЕсли;
			
			Набор = РегистрыСведений.РазрешенияДоступаИсключительные.СоздатьНаборЗаписей();
			Набор.Отбор.Предмет.Установить(Предмет);
			Набор.Отбор.КоллекцияЗначенийДоступа.Установить(Коллекция);
			Набор.Записать(); // Удаление записей со старой коллекцией.
			
			НоваяКоллекция = Справочники.КоллекцииЗначенийДоступа.ПолучитьКоллекцию(НовыйСоставКоллекции);
			Набор.Отбор.КоллекцияЗначенийДоступа.Установить(НоваяКоллекция);
			
			Выборка = ВыборкаПоКоллекциям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				Стр = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Стр, Выборка);
				Стр.КоллекцияЗначенийДоступа = НоваяКоллекция;
			КонецЦикла;
			
			Набор.Записать(); // Добавление записей с новой коллекцией.
			
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_7_2() Экспорт
	
	// Удаление задвоенных пустых коллекций.
	// Лишние коллекции удаляются с заменой ссылок.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КоллекцииЗначенийДоступа.Ссылка КАК КоллекцияЗначенийДоступа,
		|	1 КАК КолЗаписей,
		|	РазрешенияДоступаИсключительные.Предмет,
		|	РазрешенияДоступаИсключительные.Пользователь,
		|	РазрешенияДоступаИсключительные.УровеньДоступа
		|ИЗ
		|	Справочник.КоллекцииЗначенийДоступа КАК КоллекцииЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК КоллекцииЗначенийДоступаЗначенияДоступа
		|		ПО КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка = КоллекцииЗначенийДоступа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные
		|		ПО КоллекцииЗначенийДоступа.Ссылка = РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа
		|ГДЕ
		|	КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	КолЗаписей УБЫВ
		|ИТОГИ
		|	СУММА(КолЗаписей)
		|ПО
		|	КоллекцияЗначенийДоступа");
		
	
	ЭталоннаяКоллекция = Неопределено;
	ВыборкаПоКоллекциям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКоллекциям.Следующий() Цикл
		
		ТекущаяКоллекция = ВыборкаПоКоллекциям.КоллекцияЗначенийДоступа;
		
		Если ЭталоннаяКоллекция = Неопределено Тогда
			// Первая коллекция используется как эталонная.
			ЭталоннаяКоллекция = ТекущаяКоллекция;
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Выборка = ВыборкаПоКоллекциям.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.Предмет) Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = РегистрыСведений.РазрешенияДоступаИсключительные.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.КоллекцияЗначенийДоступа = ЭталоннаяКоллекция;
				Запись.Записать();
				
			КонецЦикла;
			
			КоллекцияОбъект = ТекущаяКоллекция.ПолучитьОбъект();
			КоллекцияОбъект.Удалить();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление задвоенных пустых коллекций'; en = 'Deleting duplicate empty collections'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ТекущаяКоллекция.Метаданные(),
				ПолучитьНавигационнуюСсылку(ТекущаяКоллекция),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитаПодразделениеВПроектах_2_1_7_3(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ 
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Проекты.Ссылка), 0) КАК КоличествоЗаписей
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователе
		|		ПО Проекты.Руководитель = СведенияОПользователе.Пользователь
		|ГДЕ
		|	Проекты.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	И СведенияОПользователе.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)");
		
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КоличествоЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Проекты.Ссылка,
		|	СведенияОПользователе.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователе
		|		ПО Проекты.Руководитель = СведенияОПользователе.Пользователь
		|ГДЕ
		|	Проекты.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	И СведенияОПользователе.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			Попытка
				
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ПроектОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ПроектОбъект.Подразделение = Выборка.Подразделение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроектОбъект);
				РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ЗаполнитьПодразделениеВПроектах'; en = 'ЗаполнитьПодразделениеВПроектах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;

КонецПроцедуры

Процедура ЗаполнениеРеквизитаПодразделениеВМероприятиях_2_1_7_4(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ТекстВсегоОбъектов = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Мероприятия.Ссылка) КАК КоличествоМероприятий
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователеПодготовил
			|		ПО Мероприятия.Подготовил = СведенияОПользователеПодготовил.Пользователь
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователеОрганизатор
			|		ПО Мероприятия.Организатор = СведенияОПользователеОрганизатор.Пользователь
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователеКуратор
			|		ПО Мероприятия.Куратор = СведенияОПользователеКуратор.Пользователь
			|ГДЕ
			|	Мероприятия.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|	И ЕСТЬNULL(СведенияОПользователеПодготовил.Подразделение, ЕСТЬNULL(СведенияОПользователеОрганизатор.Подразделение, ЕСТЬNULL(СведенияОПользователеКуратор.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))) <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		ЗапросВсегоОбъектов = Новый Запрос(ТекстВсегоОбъектов);
		
		ВыборкаВсегоОбъектов = ЗапросВсегоОбъектов.Выполнить().Выбрать();
		Если ВыборкаВсегоОбъектов.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВыборкаВсегоОбъектов.КоличествоМероприятий;
		Иначе
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Мероприятия.Ссылка,
		|	ЕСТЬNULL(СведенияОПользователеПодготовил.Подразделение, ЕСТЬNULL(СведенияОПользователеОрганизатор.Подразделение, ЕСТЬNULL(СведенияОПользователеКуратор.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))) КАК Подразделение
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователеПодготовил
		|		ПО Мероприятия.Подготовил = СведенияОПользователеПодготовил.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователеОрганизатор
		|		ПО Мероприятия.Организатор = СведенияОПользователеОрганизатор.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователеКуратор
		|		ПО Мероприятия.Куратор = СведенияОПользователеКуратор.Пользователь
		|ГДЕ
		|	Мероприятия.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	И ЕСТЬNULL(СведенияОПользователеПодготовил.Подразделение, ЕСТЬNULL(СведенияОПользователеОрганизатор.Подразделение, ЕСТЬNULL(СведенияОПользователеКуратор.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))) <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Мероприятия.ДатаНачала УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Мероприятия");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			МероприятиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			МероприятиеОбъект.Подразделение = Выборка.Подразделение;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МероприятиеОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = НСтр("ru = 'Заполнение реквизита подразделение в мероприятиях 2.1.7.4'; en = 'Filling in Подразделение attribute in events 2.1.7.4'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Мероприятия,
				Выборка.Ссылка,
				Комментарий);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ОбработаноОбъектов = Выборка.Количество();
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_7_5() Экспорт

	// Создание организации		
	Если Не Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда 
		
		КоличествоОрганизаций = Справочники.Организации.КоличествоОрганизаций();
		
		Если КоличествоОрганизаций = 0 Тогда
			СоздатьОрганизацию();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

Процедура ОбновитьДокументыОрганизациейОтложенно(Параметры) Экспорт

	Если Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ВнутренниеДокументы.Ссылка), 0) КАК КолЗаписей
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|ГДЕ
			|	ВнутренниеДокументы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ВходящиеДокументы.Ссылка), 0)
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|ГДЕ
			|	ВходящиеДокументы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ИсходящиеДокументы.Ссылка), 0)
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|ГДЕ
			|	ИсходящиеДокументы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ШаблоныВнутреннихДокументов.Ссылка), 0)
			|ИЗ
			|	Справочник.ШаблоныВнутреннихДокументов КАК ШаблоныВнутреннихДокументов
			|ГДЕ
			|	ШаблоныВнутреннихДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ШаблоныВходящихДокументов.Ссылка), 0)
			|ИЗ
			|	Справочник.ШаблоныВходящихДокументов КАК ШаблоныВходящихДокументов
			|ГДЕ
			|	ШаблоныВходящихДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ШаблоныИсходящихДокументов.Ссылка), 0)
			|ИЗ
			|	Справочник.ШаблоныИсходящихДокументов КАК ШаблоныИсходящихДокументов
			|ГДЕ
			|	ШаблоныИсходящихДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(УничтожениеДел.Ссылка), 0)
			|ИЗ
			|	Документ.УничтожениеДел КАК УничтожениеДел
			|ГДЕ
			|	УничтожениеДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ПередачаДелВАрхив.Ссылка), 0)
			|ИЗ
			|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
			|ГДЕ
			|	ПередачаДелВАрхив.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(НоменклатураДел.Ссылка), 0)
			|ИЗ
			|	Справочник.НоменклатураДел КАК НоменклатураДел
			|ГДЕ
			|	НоменклатураДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(РазделыНоменклатурыДел.Ссылка), 0)
			|ИЗ
			|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
			|ГДЕ
			|	РазделыНоменклатурыДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ДелаХраненияДокументов.Ссылка), 0)
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	ДелаХраненияДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(Мероприятия.Ссылка), 0)
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(Проекты.Ссылка), 0)
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(МестаХраненияДел.Ссылка), 0)
			|ИЗ
			|	Справочник.МестаХраненияДел КАК МестаХраненияДел
			|ГДЕ
			|	МестаХраненияДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
			
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КолЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ВнутренниеДокументы.Ссылка КАК Документ
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ВходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИсходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ШаблоныВнутреннихДокументов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныВнутреннихДокументов КАК ШаблоныВнутреннихДокументов
		|ГДЕ
		|	ШаблоныВнутреннихДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ШаблоныВходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныВходящихДокументов КАК ШаблоныВходящихДокументов
		|ГДЕ
		|	ШаблоныВходящихДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ШаблоныИсходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсходящихДокументов КАК ШаблоныИсходящихДокументов
		|ГДЕ
		|	ШаблоныИсходящихДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	УничтожениеДел.Ссылка
		|ИЗ
		|	Документ.УничтожениеДел КАК УничтожениеДел
		|ГДЕ
		|	УничтожениеДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ПередачаДелВАрхив.Ссылка
		|ИЗ
		|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
		|ГДЕ
		|	ПередачаДелВАрхив.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	НоменклатураДел.Ссылка
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	НоменклатураДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	РазделыНоменклатурыДел.Ссылка
		|ИЗ
		|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
		|ГДЕ
		|	РазделыНоменклатурыДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ДелаХраненияДокументов.Ссылка
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|ГДЕ
		|	ДелаХраненияДокументов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	МестаХраненияДел.Ссылка
		|ИЗ
		|	Справочник.МестаХраненияДел КАК МестаХраненияДел
		|ГДЕ
		|	МестаХраненияДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			ДокументОбъект.Организация = Организация;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			Делопроизводство.ЗаписатьДанныеДокумента(Выборка.Документ, "Организация", Организация);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ИмяСобытия = НСтр("ru = 'Заполнение реквизита организация 2.1.7.5'; en = 'Filling in Company attribute (2.1.7.5)'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Документ,
				Комментарий);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	

КонецПроцедуры

Процедура ОбновитьПодразделениеПользователейОтложенно(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(СведенияОПользователяхДокументооборот.Пользователь), 0) КАК КолЗаписей
			|ИЗ
			|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
			|ГДЕ
			|	НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен
			|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.ПометкаУдаления
			|	И СведенияОПользователяхДокументооборот.Пользователь.Подразделение <> СведенияОПользователяхДокументооборот.Подразделение");
			
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КолЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	СведенияОПользователяхДокументооборот.Пользователь,
		|	СведенияОПользователяхДокументооборот.Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен
		|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.ПометкаУдаления
		|	И СведенияОПользователяхДокументооборот.Пользователь.Подразделение <> СведенияОПользователяхДокументооборот.Подразделение");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Пользователь);
			ПользовательОбъект = Выборка.Пользователь.ПолучитьОбъект();
			ПользовательОбъект.Подразделение = Выборка.Подразделение;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПользовательОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Пользователь);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_7_8() Экспорт

	// Наполнение адресной книги данными справочника Организации
	УстановитьПривилегированныйРежим(Истина);	

	Справочники.АдреснаяКнига.ЗаполнитьПредопределенныеРазделы();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Родитель
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.Организации,
			Выборка.Ссылка);
			
		РегистрыСведений.ПоискВАдреснойКниге.ОбновитьСловаПоискаПоОрганизации(Выборка.Ссылка);
		
	КонецЦикла;
	
	// Заполнение реквизита "Вариант подписания" внутренних документов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	НЕ ВидыВнутреннихДокументов.ЭтоГруппа");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидДокументаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВидДокументаОбъект.ВестиУчетПоКонтрагентам Тогда
			ВидДокументаОбъект.ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты;
		Иначе
			ВидДокументаОбъект.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидДокументаОбъект);
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_7_9() Экспорт
	
	// Обновление наименований предопределенных данных.
	ЛокализацияКонфигурацииПереопределяемый.ПерейтиНаВерсию_2_1_7_9();
	
	// Обновление данных регистра для добавления подразделений.
	РегистрыСведений.РазрешенияДляРазрезовДоступа.ОбновитьВсеДанные();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_1() Экспорт
	
	// Заполним РС НаименованияКонтрагентов
	Выборка = Справочники.Контрагенты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.НаименованияКонтрагентов.ЗаписатьКонтрагента(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_2() Экспорт
	
	// Перенос условий схем комплексных процессов в регистр СкриптыСхемКомплексныхПроцессов.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СхемыКомплексныхПроцессовПараметрыУсловий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СхемыКомплексныхПроцессов.ПараметрыУсловий КАК СхемыКомплексныхПроцессовПараметрыУсловий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкриптыСхемКомплексныхПроцессов КАК СкриптыСхемКомплексныхПроцессов
		|		ПО СхемыКомплексныхПроцессовПараметрыУсловий.Ссылка = СкриптыСхемКомплексныхПроцессов.Схема
		|ГДЕ
		|	СхемыКомплексныхПроцессовПараметрыУсловий.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийКомплексныхПроцессов.РасширенноеУсловие)
		|	И СкриптыСхемКомплексныхПроцессов.Скрипт ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			СхемаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НастройкиОбработаны = Ложь;
			
			Для Каждого ПараметрыУсловия Из СхемаОбъект.ПараметрыУсловий Цикл
				
				Если ПараметрыУсловия.ТипУсловия <> 
					Перечисления.ТипыУсловийКомплексныхПроцессов.РасширенноеУсловие Тогда
					
					Продолжить;
				КонецЕсли;
				
				НастройкиУсловия = ПараметрыУсловия.НастройкиУсловия.Получить();
				Если НастройкиУсловия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			
				ОбработатьУсловиеСхемыНаВстроенномЯзыке(
					НастройкиУсловия.Отбор.Элементы, НастройкиОбработаны, СхемаОбъект.Ссылка);
				
				ПараметрыУсловия.НастройкиУсловия = Новый ХранилищеЗначения(НастройкиУсловия);
			КонецЦикла;
			
			Если НастройкиОбработаны Тогда
				СхемаОбъект.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				"ПерейтиНаВерсию_2_1_8_2",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.СхемыКомплексныхПроцессов,
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_3() Экспорт
	
	// БЭД
	Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Установить(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_6() Экспорт
	
	Запрос = Новый Запрос;
	
	// Обновление признака текущего элемента в стартованных процессах.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СхемыКомплексныхПроцессовЭлементыСхемы.Ссылка
		|ИЗ
		|	Справочник.СхемыКомплексныхПроцессов.ЭлементыСхемы КАК СхемыКомплексныхПроцессовЭлементыСхемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов КАК СхемыКомплексныхПроцессов
		|		ПО СхемыКомплексныхПроцессовЭлементыСхемы.Ссылка = СхемыКомплексныхПроцессов.Ссылка
		|ГДЕ
		|	СхемыКомплексныхПроцессовЭлементыСхемы.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса.Старт)
		|	И СхемыКомплексныхПроцессовЭлементыСхемы.Текущий = ЛОЖЬ
		|	И СхемыКомплексныхПроцессов.КомплексныйПроцесс <> ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СхемаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Устанавливаем признак текущего для элемента старта в схемах процессов.
		// Это нужно, чтобы можно было запустить процесс по данной схеме,
		// т.к. при запуске нового процесса отбираются только текущие элементы.
		СтрокаЭлементаСтарта = СхемаОбъект.ЭлементыСхемы.Найти(
			Перечисления.ТипыЭлементовСхемыКомплексногоПроцесса.Старт, "Тип");
		Если СтрокаЭлементаСтарта <> Неопределено Тогда
			СтрокаЭлементаСтарта.Текущий = Истина;
		КонецЕсли;
		
		// Запишем схему с отключенными обработчиками.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СхемаОбъект);
		
	КонецЦикла;
	
	// Обновим наименование соединительных линий в шаблонах.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СхемыКомплексныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.СхемыКомплексныхПроцессов.ПредшественникиЭлементовСхемы КАК СхемыКомплексныхПроцессовПредшественникиЭлементовСхемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов КАК СхемыКомплексныхПроцессов
		|		ПО СхемыКомплексныхПроцессовПредшественникиЭлементовСхемы.Ссылка = СхемыКомплексныхПроцессов.Ссылка
		|ГДЕ
		|	СхемыКомплексныхПроцессов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
		|	И СхемыКомплексныхПроцессовПредшественникиЭлементовСхемы.ИмяСоединительнойЛинии = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СхемаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Заполняем наименование соединительных линий, только для шаблонов процессов,
		// т.к. выделение соединительных линий будет работать только для новых процессов
		// созданных по этим шаблонам.
		ГрафическаяСхема = СхемаОбъект.Схема.Получить();
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьСвязиЭлементовСхемыПроцесса(
			СхемаОбъект, ГрафическаяСхема);
		
		// Запишем схему с отключенными обработчиками.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СхемаОбъект);
		
	КонецЦикла;
	
	// Заполнение доступности шаблонов.
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	#ТаблицаШаблонов КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
		|		ПО ШаблоныПроцессов.Ссылка = ДоступностьШаблоновПроцессов.Шаблон
		|ГДЕ
		|	ШаблоныПроцессов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)
		|	И ДоступностьШаблоновПроцессов.Шаблон ЕСТЬ NULL ";
	
	ТипыШаблоновПроцессов = Метаданные.ОпределяемыеТипы.ШаблонПроцесса.Тип.Типы();
	
	Разелитель = "";
	
	ТекстЗапроса = "";
	
	Для Каждого ТипШаблона Из ТипыШаблоновПроцессов Цикл
		
		МетаданныеШаблонаПроцесса = Метаданные.НайтиПоТипу(ТипШаблона);
		ТаблицаШаблонов = МетаданныеШаблонаПроцесса.ПолноеИмя();
		
		ТекстЗапроса = ТекстЗапроса
			+ Разелитель
			+ СтрЗаменить(ШаблонТекстаЗапроса, "#ТаблицаШаблонов", ТаблицаШаблонов);
		
		Разелитель = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		РучнойЗапуск = Истина;
		
		СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		АвтоматическийЗапуск = СписокНезаполненныхПолей.Количество() = 0;
		
		Запись = РегистрыСведений.ДоступностьШаблоновПроцессов.СоздатьМенеджерЗаписи();
		Запись.Шаблон = Выборка.Ссылка;
		Запись.АвтоматическийЗапуск = АвтоматическийЗапуск;
		Запись.РучнойЗапуск = РучнойЗапуск;
		
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_8() Экспорт
	
	// Добавление в настройки доступности по состоянию новые состояния внутреннего документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВнутренниеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
				Новый Структура("Состояние", Перечисления.СостоянияДокументов.НаУтверждении));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.НаПодписании;
				НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
				НоваяСтрока.Доступность = Строка.Доступность;
			КонецЦикла;
			
			НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
				Новый Структура("Состояние", Перечисления.СостоянияДокументов.Утвержден));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.Подписан;
				НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
				НоваяСтрока.Доступность = Строка.Доступность;
			КонецЦикла;
			
			НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
				Новый Структура("Состояние", Перечисления.СостоянияДокументов.НеУтвержден));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.Отклонен;
				НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
				НоваяСтрока.Доступность = Строка.Доступность;
			КонецЦикла;	
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыборкаОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка добавления состояний ""Подписан"" в настройки доступности по состоянию.'; en = 'Error while adding state ""Singed"" into availability settings.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;	
		
	// Добавление в настройки доступности по состоянию поля "Стороны" внутреннего документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВнутренниеДокументы)
	|	И НЕ ""Стороны"" В
	|				(ВЫБРАТЬ
	|					НастройкиДоступности.ИмяПоляКоманды
	|				ИЗ
	|					Справочник.НастройкиДоступностиПоСостоянию.НастройкиДоступности КАК НастройкиДоступности
	|				ГДЕ
	|					НастройкиДоступности.Ссылка = НастройкиДоступностиПоСостоянию.Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
				Новый Структура("ИмяПоляКоманды", "Контрагент"));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.ИмяПоляКоманды = "Стороны";
				НоваяСтрока.Состояние = Строка.Состояние;
				НоваяСтрока.Доступность = Строка.Доступность;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыборкаОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка добавления поля ""Стороны"" в настройки доступности по состоянию.'; en = 'Error while adding field ""Parties"" into availability settings.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_9() Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	НЕ ВидыВнутреннихДокументов.ЭтоГруппа
		|	И ВидыВнутреннихДокументов.ВестиУчетПоКонтрагентам");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидДокументаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидДокументаОбъект.ВестиУчетСторон = Истина;
		ВидДокументаОбъект.ВестиУчетПоКонтрагентам = Ложь;
		ВидДокументаОбъект.ИспользоватьПодписание = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидДокументаОбъект);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_10() Экспорт
	
	// В регистре может не быть записей по видам мероприятий.
	РегистрыСведений.РазрешенияДляРазрезовДоступа.ОбновитьВсеДанные();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_11() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВнутренниеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НайденыеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
			Новый Структура("ИмяПоляКоманды", "Стороны"));
		
		Для Каждого НайденнаяСтрока Из НайденыеСтроки Цикл
			ВыборкаОбъект.НастройкиДоступности.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыборкаОбъект);
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_8_12() Экспорт
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2017Год(Ложь, Истина);
	
КонецПроцедуры

// Обновляет состав контейнеров-рабочих групп с последующим пересчетом прав. Исправляет последствия ошибки 
// предыдущих версий, когда недействительные пользователи не попадали в состав таких контейнеров, что лишило
// их прав на некоторые объекты и приводило к сообщениям о нарушении прав доступа.
//
Процедура ПерейтиНаВерсию_2_1_9_1() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка КАК Контейнер
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|");
		
	Контейнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	ОбработанныеКонтейнеры = Новый Массив;
	РегистрыСведений.ПользователиВКонтейнерах.ОбновитьДанныеКонтейнеров(Контейнеры, ОбработанныеКонтейнеры);
	
	ДокументооборотПраваДоступа.ОбновитьПраваПоСоставуКонтейнеров(ОбработанныеКонтейнеры);
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_9_2() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Родитель
		|ИЗ
		|	Справочник.Организации КАК Организации");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.Организации,
			Выборка.Ссылка);
			
		РегистрыСведений.ПоискВАдреснойКниге.ОбновитьСловаПоискаПоОрганизации(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_9_3() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр(
		"УзелОбмена", РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов());
	Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
	
	// Очистка ссылок в процессах на несуществующие шаблоны
	// и в действиях комплексных процессов на несуществующие исходные шаблоны.
	
	ШаблонТекстаДляШаблонов =
		"ВЫБРАТЬ
		|	ТаблицаШаблонов.Ссылка КАК ШаблонПроцесса
		|	
		|ИЗ
		|	#ТаблицаШаблонов КАК ТаблицаШаблонов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ТаблицаШаблонов.КомплексныйПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаШаблонов КАК ТаблицаИсходныхШаблонов
		|		ПО ТаблицаШаблонов.ИсходныйШаблон = ТаблицаИсходныхШаблонов.Ссылка
		|ГДЕ
		|	ДанныеБизнесПроцессов.УзелОбмена = &УзелОбмена
		|	И ТаблицаШаблонов.ИсходныйШаблон <> &ПустаяСсылкаНаШаблон
		|	И ТаблицаИсходныхШаблонов.Ссылка ЕСТЬ NULL";
	
	ШаблонТекстаДляПроцессов = 
		"ВЫБРАТЬ
		|	ТаблицаПроцессов.Ссылка КАК Процесс
		|ИЗ
		|	#ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаШаблонов КАК ТаблицаШаблонов
		|		ПО ТаблицаПроцессов.Шаблон = ТаблицаШаблонов.Ссылка
		|ГДЕ
		|	ТаблицаПроцессов.Шаблон <> &ПустаяСсылкаНаШаблон
		|	И ТаблицаШаблонов.Ссылка ЕСТЬ NULL 
		|	И ТаблицаПроцессов.УзелОбмена = &УзелОбмена";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	ТекстыЗапросаДляПроцессов = Новый Массив;
	
	ТекстыЗапросаДляШаблонов = Новый Массив;
	
	ТекстОбъединить = "";
	
	Для Каждого МетаданныеПроцесса Из МетаданныеПроцессов Цикл
		
		Если МетаданныеПроцесса.Реквизиты.Найти("Шаблон") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерПроцесса = БизнесПроцессы[МетаданныеПроцесса.Имя];
		
		ТаблицаПроцессов = "БизнесПроцесс." + МетаданныеПроцесса.Имя;
		ТаблицаШаблонов = МенеджерПроцесса.ТипШаблона();
		
		// Заполнение ТекстыЗапросаДляШаблонов
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаДляШаблонов, "#ТаблицаШаблонов", ТаблицаШаблонов);
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&ПустаяСсылкаНаШаблон", "ЗНАЧЕНИЕ(" + ТаблицаШаблонов + ".ПустаяСсылка)");
		
		ТекстыЗапросаДляШаблонов.Добавить(ТекстЗапроса);
		
		// Заполнение ТекстыЗапросаДляПроцессов
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаДляПроцессов, "#ТаблицаПроцессов", ТаблицаПроцессов);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаШаблонов", ТаблицаШаблонов);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&ПустаяСсылкаНаШаблон", "ЗНАЧЕНИЕ(" + ТаблицаШаблонов + ".ПустаяСсылка)");
		
		ТекстыЗапросаДляПроцессов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстОбъединитьВсе = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросаДляШаблонов, ТекстОбъединитьВсе);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонПроцессаОбъект = Выборка.ШаблонПроцесса.ПолучитьОбъект();
		ШаблонПроцессаОбъект.ИсходныйШаблон = Неопределено;
		ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонПроцессаОбъект, "ПростаяЗапись");
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросаДляПроцессов, ТекстОбъединитьВсе);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
		ПроцессОбъект.Шаблон = Неопределено;
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
	КонецЦикла;
	
	// Удаление идентификаторов несуществующих этапов процессов.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предшественники.Ссылка,
		|	Предшественники.НомерСтроки
		|ПОМЕСТИТЬ ПроцессыСНекорректнымиДанными
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ПредшественникиЭтапов КАК Предшественники
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК ЭтапыПроцессов
		|		ПО Предшественники.Ссылка = ЭтапыПроцессов.Ссылка
		|			И Предшественники.ИдентификаторПоследователя = ЭтапыПроцессов.ИдентификаторЭтапа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО Предшественники.Ссылка = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	Предшественники.ИдентификаторПоследователя <> &ПустойИдентификатор
		|	И ЭтапыПроцессов.ИдентификаторЭтапа ЕСТЬ NULL 
		|	И КомплексныйПроцесс.УзелОбмена = &УзелОбмена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Предшественники.Ссылка,
		|	Предшественники.НомерСтроки
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ПредшественникиЭтапов КАК Предшественники
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК ЭтапыПроцессов
		|		ПО Предшественники.Ссылка = ЭтапыПроцессов.Ссылка
		|			И Предшественники.ИдентификаторПредшественника = ЭтапыПроцессов.ИдентификаторЭтапа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО Предшественники.Ссылка = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	Предшественники.ИдентификаторПредшественника <> &ПустойИдентификатор
		|	И ЭтапыПроцессов.ИдентификаторЭтапа ЕСТЬ NULL 
		|	И КомплексныйПроцесс.УзелОбмена = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроцессыСНекорректнымиДанными.Ссылка КАК Ссылка,
		|	ПроцессыСНекорректнымиДанными.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ПроцессыСНекорректнымиДанными КАК ПроцессыСНекорректнымиДанными
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки УБЫВ
		|ИТОГИ ПО
		|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ВыборкаСтрокКУдалению = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокКУдалению.Следующий() Цикл
			ПроцессОбъект.ПредшественникиЭтапов.Удалить(ВыборкаСтрокКУдалению.НомерСтроки - 1);
		КонецЦикла;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
		
	КонецЦикла;
	
	// Удаление идентификаторов несуществующих этапов действий комплексных процессов.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предшественники.Ссылка,
		|	Предшественники.НомерСтроки,
		|	ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс
		|ПОМЕСТИТЬ ШаблоныСНекорректнымиДанными
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.ПредшественникиЭтапов КАК Предшественники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ЭтапыПроцессов
		|		ПО Предшественники.Ссылка = ЭтапыПроцессов.Ссылка
		|			И Предшественники.ИдентификаторПоследователя = ЭтапыПроцессов.ИдентификаторЭтапа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|		ПО Предшественники.Ссылка = ШаблоныКомплексныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	Предшественники.ИдентификаторПоследователя <> &ПустойИдентификатор
		|	И ЭтапыПроцессов.ИдентификаторЭтапа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Предшественники.Ссылка,
		|	Предшественники.НомерСтроки,
		|	ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.ПредшественникиЭтапов КАК Предшественники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ЭтапыПроцессов
		|		ПО Предшественники.Ссылка = ЭтапыПроцессов.Ссылка
		|			И Предшественники.ИдентификаторПредшественника = ЭтапыПроцессов.ИдентификаторЭтапа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|		ПО Предшественники.Ссылка = ШаблоныКомплексныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	Предшественники.ИдентификаторПредшественника <> &ПустойИдентификатор
		|	И ЭтапыПроцессов.ИдентификаторЭтапа ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныСНекорректнымиДанными.Ссылка КАК Ссылка,
		|	ШаблоныСНекорректнымиДанными.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ШаблоныСНекорректнымиДанными КАК ШаблоныСНекорректнымиДанными
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныеПроцессы
		|		ПО ШаблоныСНекорректнымиДанными.КомплексныйПроцесс = КомплексныеПроцессы.Ссылка
		|ГДЕ
		|	КомплексныеПроцессы.УзелОбмена = &УзелОбмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки УБЫВ
		|ИТОГИ ПО
		|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ВыборкаСтрокКУдалению = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокКУдалению.Следующий() Цикл
			ШаблонОбъект.ПредшественникиЭтапов.Удалить(ВыборкаСтрокКУдалению.НомерСтроки - 1);
		КонецЦикла;
		
		ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект, "ПростаяЗапись");
		
	КонецЦикла;
	
	// Эта процедура не исправляет шаблоны процессов, т.к. у шаблонов нет привязки к узлам РИБ.
	// Для их исправления позже будет включена внешняя обработка в дистрибутив.
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_10_1() Экспорт
	
	Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
		Справочники.РабочиеГруппы.ВсеПользователи,
		Справочники.РабочиеГруппы.ПустаяСсылка(),
		Справочники.АдреснаяКнига.ПоРабочимГруппам);
		
	// Добавление прав на использование библиотеки электронных документов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
		
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // Идентификатор профиля Пользователи
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(Профиль) Тогда 
		ПрофильИзменен = Ложь;
		
		ДобавляемыеРоли = Новый Массив;
		ДобавляемыеРоли.Добавить("БазовыеПраваЭД"); // Библиотека электронного документооборота
		ДобавляемыеРоли.Добавить("ИспользованиеУниверсальногоОтчета"); // Использование универсального отчета
		
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		Для Каждого Элемент Из ДобавляемыеРоли Цикл		
			ОбъектМетаданныхРоль = Метаданные.Роли.Найти(Элемент); 
			Если Не ОбъектМетаданныхРоль = Неопределено Тогда
				ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
				
				НайденнаяСтрока = ПрофильОбъект.Роли.Найти(ИдентификаторРоли, "Роль");
				Если НайденнаяСтрока = Неопределено Тогда 
					НоваяСтрока = ПрофильОбъект.Роли.Добавить();
					НоваяСтрока.Роль = ИдентификаторРоли;
					
					ПрофильИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		Если ПрофильИзменен Тогда
			ПрофильОбъект.Записать();		
		КонецЕсли;
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_11_1() Экспорт
	
	// заполним ТипТекста у шаблонов текста
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШаблоныТекстов.Ссылка,
	               |	ШаблоныТекстов.ТипТекста
	               |ИЗ
	               |	Справочник.ШаблоныТекстов КАК ШаблоныТекстов";
				   
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ТипТекста) Тогда
			
			ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонОбъект);
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_11_2() Экспорт
	
	// Разрешения для загруженных через обмен разрезов могут быть неактуальными.
	РегистрыСведений.РазрешенияДляРазрезовДоступа.ОбновитьВсеДанные();
	ДокументооборотПраваДоступа.ОбновитьПраваВсехРазрезовДоступа();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_11_3() Экспорт
	
	// После перехода с ПРОФ на версиях ниже 2.1.5.6 эти обработчики не выполнялись.
	// В результате могли возникать ошибки, например, при отправке приглашений.
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_1_11_4() Экспорт
	
	// РС  ФайлыВРабочемКаталогеКомпьютера  ДатаОбращения заполнить как ДатаПомещенияВРабочийКаталог - для всех пользователей
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФайлыВРабочемКаталогеКомпьютера.Версия,
	               |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор,
	               |	ФайлыВРабочемКаталогеКомпьютера.ВРабочемКаталогеВладельца,
	               |	ФайлыВРабочемКаталогеКомпьютера.ДатаОбращения,
	               |	ФайлыВРабочемКаталогеКомпьютера.ДатаПомещенияВРабочийКаталог,
	               |	ФайлыВРабочемКаталогеКомпьютера.ИмяКомпьютера,
	               |	ФайлыВРабочемКаталогеКомпьютера.НаЧтение,
	               |	ФайлыВРабочемКаталогеКомпьютера.Пользователь,
	               |	ФайлыВРабочемКаталогеКомпьютера.Путь,
	               |	ФайлыВРабочемКаталогеКомпьютера.Размер
	               |ИЗ
	               |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	               |ГДЕ
	               |	ФайлыВРабочемКаталогеКомпьютера.ДатаОбращения = &ДатаОбращения";
				   
	Запрос.УстановитьПараметр("ДатаОбращения", Дата('00010101'));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Версия = Выборка.Версия;
		МенеджерЗаписи.Идентификатор = Выборка.Идентификатор;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ДатаОбращения = МенеджерЗаписи.ДатаПомещенияВРабочийКаталог;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры

// Выполняет заполнение наименования сторон документов и шаблонов документов.
//
Процедура ЗаполнитьГрифыУтверждения(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВнутренниеДокументы.Ссылка), 0) КАК КоличествоЗаписей
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Утвердил <> ЗНАЧЕНИЕ(Справочник.ПОльзователи.ПУстаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутренниеДокументы.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнутренниеДокументы.ГрифыУтверждения.АвторУтверждения) = 0");
		
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КоличествоЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.Утвердил
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Утвердил <> ЗНАЧЕНИЕ(Справочник.ПОльзователи.ПУстаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.Утвердил
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнутренниеДокументы.ГрифыУтверждения.АвторУтверждения) = 0";
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("НаименованиеСтороны", Справочники.НаименованияСторон.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
		
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НоваяСтрока = ДокументОбъект.ГрифыУтверждения.Добавить();
			НоваяСтрока.АвторУтверждения = Выборка.Утвердил;
			
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(
				Выборка.Ссылка, "СостояниеУтверждение");
				
			Если СтруктураСостояния.Состояние = Перечисления.СостоянияДокументов.Утвержден Тогда 
				НоваяСтрока.Результат = Перечисления.РезультатыУтверждения.Утверждено;
				НоваяСтрока.ДатаУтверждения = СтруктураСостояния.ДатаУстановки;
				НоваяСтрока.ДатаУстановкиГрифа = СтруктураСостояния.ДатаУстановки;
				НоваяСтрока.УстановилГриф = СтруктураСостояния.Установил;
				
			Иначе
				НоваяСтрока.Результат = Перечисления.РезультатыУтверждения.НеУтверждено;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗаполнитьГрифыУтвержденияВоВнутреннихДокументах'; en = 'ЗаполнитьГрифыУтвержденияВоВнутреннихДокументах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

// Выполняет заполнение порядка сортировки действий схем комплексных процессов.
//
Процедура ЗаполнениеПорядкаСортировкиДействийСхемКомплексныхПроцессов(Параметры) Экспорт
	
	ТекстЗапрос = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СхемыКомплексныхПроцессовПараметрыДействий.Ссылка
		|ИЗ
		|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
		|ГДЕ
		|	СхемыКомплексныхПроцессовПараметрыДействий.ПорядокСортировки = 0";
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапрос, "ВЫБРАТЬ ПЕРВЫЕ 1000", "ВЫБРАТЬ");
		Выборка = Запрос.Выполнить().Выбрать();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов =  Выборка.Количество();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапрос;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СхемаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СхемаОбъект.ОбновитьПорядокСортировкиДействий();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СхемаОбъект);
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

// Выполняет заполнение порядка сортировки этапов комплексных процессов.
//
Процедура ЗаполнениеПорядкаСортировкиЭтаповКомплексныхПроцессов(Параметры) Экспорт
	
	ТекстЗапрос = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	КомплексныйПроцессЭтапы.Ссылка
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
		|ГДЕ
		|	КомплексныйПроцессЭтапы.ПорядокСортировки = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
		|ГДЕ
		|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ПорядокСортировки = 0";
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапрос, "ВЫБРАТЬ ПЕРВЫЕ 500", "ВЫБРАТЬ");
		Выборка = Запрос.Выполнить().Выбрать();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов =  Выборка.Количество();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапрос;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьПорядокСортировкиЭтапов(Объект);
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(Объект, "ПростаяЗапись");
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

// Выполняет обработку выражений на встроенном языке в элементах отбора компоновщика
// настройки условий схемы.
//
// Параметры:
//  ЭлементыОтбораКомпоновщика - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы отбора.
//  НастройкиОбработаны - Булево - принимает значение Истина, если было обработано хотя бы одно выражение.
//  Схема - СправочникСсылка.СхемыКомплексныхПроцессов - Ссылка на схему.
//
Процедура ОбработатьУсловиеСхемыНаВстроенномЯзыке(ЭлементыОтбораКомпоновщика, НастройкиОбработаны, Схема)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбораКомпоновщика Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыражениеНаВстроенномЯзыке") Тогда
				ИдентификаторСкрипта = Новый УникальныйИдентификатор;
				РегистрыСведений.СкриптыСхемКомплексныхПроцессов.ЗаписатьСкриптСхемы(
					Схема, ИдентификаторСкрипта, ЭлементОтбора.ПравоеЗначение.Выражение);
				ЭлементОтбора.ПравоеЗначение.Выражение = ИдентификаторСкрипта;
				НастройкиОбработаны = Истина;
			КонецЕсли;
		Иначе
			ОбработатьУсловиеСхемыНаВстроенномЯзыке(ЭлементОтбора.Элементы, НастройкиОбработаны, Схема);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеТабличнойЧастиСтороныШаблоновВнутреннихДокументов(Параметры) Экспорт

	// Заполнить новую табличную часть Стороны необходимо
	// Контрагентами из одноимённой табличной части и значением реквизита Организация
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Шаблоны.Ссылка), 0) КАК КоличествоЗаписей
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Шаблоны.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Стороны КАК СтороныШаблонов
		|			ПО Шаблоны.Ссылка = СтороныШаблонов.Ссылка
		|	ГДЕ
		|		Шаблоны.ПометкаУдаления = ЛОЖЬ
		|		И (Шаблоны.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ Шаблоны.ВидДокумента.ВестиУчетСторон)
		|		И Шаблоны.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И СтороныШаблонов.Сторона ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Шаблоны.Ссылка
		|	ИЗ
		|		Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Контрагенты КАК КонтрагентыШаблонов
		|			ПО Шаблоны.Ссылка = КонтрагентыШаблонов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Стороны КАК СтороныШаблонов
		|			ПО Шаблоны.Ссылка = СтороныШаблонов.Ссылка
		|	ГДЕ
		|		Шаблоны.ПометкаУдаления = ЛОЖЬ
		|		И (Шаблоны.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ Шаблоны.ВидДокумента.ВестиУчетСторон)
		|		И НЕ КонтрагентыШаблонов.Контрагент ЕСТЬ NULL 
		|		И СтороныШаблонов.Сторона ЕСТЬ NULL ) КАК Шаблоны");
		
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КоличествоЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;	
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Шаблоны.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Шаблоны.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Стороны КАК СтороныШаблонов
		|			ПО Шаблоны.Ссылка = СтороныШаблонов.Ссылка
		|	ГДЕ
		|		Шаблоны.ПометкаУдаления = ЛОЖЬ
		|		И (Шаблоны.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ Шаблоны.ВидДокумента.ВестиУчетСторон)
		|		И Шаблоны.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И СтороныШаблонов.Сторона ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Шаблоны.Ссылка
		|	ИЗ
		|		Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Контрагенты КАК КонтрагентыШаблонов
		|			ПО Шаблоны.Ссылка = КонтрагентыШаблонов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Стороны КАК СтороныШаблонов
		|			ПО Шаблоны.Ссылка = СтороныШаблонов.Ссылка
		|	ГДЕ
		|		Шаблоны.ПометкаУдаления = ЛОЖЬ
		|		И (Шаблоны.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ Шаблоны.ВидДокумента.ВестиУчетСторон)
		|		И НЕ КонтрагентыШаблонов.Контрагент ЕСТЬ NULL 
		|		И СтороныШаблонов.Сторона ЕСТЬ NULL ) КАК Шаблоны";
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
						
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);

			ШаблоныОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ШаблоныОбъект.Организация) Тогда
				НоваяСтрокаСтороны = ШаблоныОбъект.Стороны.Добавить();
				НоваяСтрокаСтороны.Сторона = ШаблоныОбъект.Организация;
				НоваяСтрокаСтороны.КонтактноеЛицо = ШаблоныОбъект.Ответственный;
			КонецЕсли;
			
			Если ШаблоныОбъект.Контрагенты.Количество() > 0 Тогда
				Для Каждого СтрокаКонтрагентов Из ШаблоныОбъект.Контрагенты Цикл
					НоваяСтрокаСтороны = ШаблоныОбъект.Стороны.Добавить();
					НоваяСтрокаСтороны.Сторона = СтрокаКонтрагентов.Контрагент;
					НоваяСтрокаСтороны.КонтактноеЛицо = СтрокаКонтрагентов.КонтактноеЛицо;
				КонецЦикла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблоныОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗаполнитьСтороныВШаблонахВнутреннихДокументов'; en = 'ЗаполнитьСтороныВШаблонахВнутреннихДокументов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;

КонецПроцедуры

Процедура ЗаполнениеТабличнойЧастиСтороныВнутреннихДокументов(Параметры) Экспорт

	// Заполнить новую табличную часть Стороны необходимо
	// Контрагентами из одноимённой табличной части и значением реквизита Организация
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВнутренниеДокументы.Ссылка), 0) КАК КоличествоЗаписей
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВнутренниеДокументы.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтороныДокумента
		|			ПО ВнутренниеДокументы.Ссылка = СтороныДокумента.Ссылка
		|	ГДЕ
		|		ВнутренниеДокументы.ПометкаУдаления = ЛОЖЬ
		|		И (ВнутренниеДокументы.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон)
		|		И ВнутренниеДокументы.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И СтороныДокумента.Сторона ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВнутренниеДокументы.Ссылка
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Контрагенты КАК КонтрагентыВнутренниеДокументы
		|			ПО ВнутренниеДокументы.Ссылка = КонтрагентыВнутренниеДокументы.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтороныДокумента
		|			ПО ВнутренниеДокументы.Ссылка = СтороныДокумента.Ссылка
		|	ГДЕ
		|		ВнутренниеДокументы.ПометкаУдаления = ЛОЖЬ
		|		И (ВнутренниеДокументы.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон)
		|		И НЕ КонтрагентыВнутренниеДокументы.Контрагент ЕСТЬ NULL 
		|		И СтороныДокумента.Сторона ЕСТЬ NULL ) КАК ВнутренниеДокументы");
		
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КоличествоЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;	
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВнутренниеДокументы.Ссылка,
		|	ТекущиеСостоянияДокументов.Установил,
		|	ТекущиеСостоянияДокументов.ДатаУстановки
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВнутренниеДокументы.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтороныДокумента
		|			ПО ВнутренниеДокументы.Ссылка = СтороныДокумента.Ссылка
		|	ГДЕ
		|		ВнутренниеДокументы.ПометкаУдаления = ЛОЖЬ
		|		И (ВнутренниеДокументы.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон)
		|		И ВнутренниеДокументы.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И СтороныДокумента.Сторона ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВнутренниеДокументы.Ссылка
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Контрагенты КАК КонтрагентыВнутренниеДокументы
		|			ПО ВнутренниеДокументы.Ссылка = КонтрагентыВнутренниеДокументы.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтороныДокумента
		|			ПО ВнутренниеДокументы.Ссылка = СтороныДокумента.Ссылка
		|	ГДЕ
		|		ВнутренниеДокументы.ПометкаУдаления = ЛОЖЬ
		|		И (ВнутренниеДокументы.ВидДокумента.ВестиУчетПоКонтрагентам
		|				ИЛИ ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон)
		|		И НЕ КонтрагентыВнутренниеДокументы.Контрагент ЕСТЬ NULL 
		|		И СтороныДокумента.Сторона ЕСТЬ NULL ) КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|		ПО ВнутренниеДокументы.Ссылка = ТекущиеСостоянияДокументов.Документ
		|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(перечисление.СостоянияДокументов.Утвержден))";
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
						
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);

			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				НоваяСтрокаСтороны = ДокументОбъект.Стороны.Добавить();
				НоваяСтрокаСтороны.Сторона = ДокументОбъект.Организация;
				
				Если ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда 
					НоваяСтрокаСтороны.КонтактноеЛицо = ДокументОбъект.Ответственный;
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Подготовил) Тогда 
					НоваяСтрокаСтороны.КонтактноеЛицо = ДокументОбъект.Подготовил;
				КонецЕсли;
				
				НоваяСтрокаСтороны.Подписал = ДокументОбъект.Утвердил;
			КонецЕсли;
			
			Если ДокументОбъект.Контрагенты.Количество() > 0 Тогда
				Для Каждого СтрокаКонтрагентов Из ДокументОбъект.Контрагенты Цикл
					НоваяСтрокаСтороны = ДокументОбъект.Стороны.Добавить();
					НоваяСтрокаСтороны.Сторона = СтрокаКонтрагентов.Контрагент;
					НоваяСтрокаСтороны.КонтактноеЛицо = СтрокаКонтрагентов.КонтактноеЛицо;
					НоваяСтрокаСтороны.Подписал = СтрокаКонтрагентов.ПодписалОтКонтрагента;
					Если ЗначениеЗаполнено(Выборка.Установил) Тогда
						НоваяСтрокаСтороны.Подписан = Истина;
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.ДатаУстановки) Тогда
						НоваяСтрокаСтороны.ДатаПодписи = Выборка.ДатаУстановки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗаполнитьСтороныВоВнутреннихДокументах'; en = 'ЗаполнитьСтороныВоВнутреннихДокументах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;

КонецПроцедуры

// Выполняет заполнение наименования сторон документов и шаблонов документов.
//
Процедура ЗаполнениеНаименованияСторон(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВнутренниеДокументы.Ссылка), 0) КАК КоличествоЗаписей
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВнутренниеДокументы.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтороныДокумента
		|			ПО ВнутренниеДокументы.Ссылка = СтороныДокумента.Ссылка
		|	ГДЕ
		|		НЕ ВнутренниеДокументы.ПометкаУдаления
		|		И ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон
		|		И СтороныДокумента.УдалитьНаименование <> """"
		|		И СтороныДокумента.Наименование = &НаименованиеСтороны
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Шаблоны.Ссылка
		|	ИЗ
		|		Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Стороны КАК СтороныШаблонов
		|			ПО Шаблоны.Ссылка = СтороныШаблонов.Ссылка
		|	ГДЕ
		|		НЕ Шаблоны.ПометкаУдаления
		|		И Шаблоны.ВидДокумента.ВестиУчетСторон
		|		И СтороныШаблонов.УдалитьНаименование <> """"
		|		И СтороныШаблонов.Наименование = &НаименованиеСтороны) КАК ВнутренниеДокументы");
		
		Запрос.Параметры.Вставить("НаименованиеСтороны", Справочники.НаименованияСторон.ПустаяСсылка());
		ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ВсегоОбъектов = ВсегоОбъектов + Выборка.КоличествоЗаписей;
		КонецЦикла;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоОбъектов;
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВнутренниеДокументы.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВнутренниеДокументы.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтороныДокумента
		|			ПО ВнутренниеДокументы.Ссылка = СтороныДокумента.Ссылка
		|	ГДЕ
		|		НЕ ВнутренниеДокументы.ПометкаУдаления
		|		И ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон
		|		И СтороныДокумента.УдалитьНаименование <> """"
		|		И СтороныДокумента.Наименование = &НаименованиеСтороны
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Шаблоны.Ссылка
		|	ИЗ
		|		Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Стороны КАК СтороныШаблонов
		|			ПО Шаблоны.Ссылка = СтороныШаблонов.Ссылка
		|	ГДЕ
		|		НЕ Шаблоны.ПометкаУдаления
		|		И Шаблоны.ВидДокумента.ВестиУчетСторон
		|		И СтороныШаблонов.УдалитьНаименование <> """"
		|		И СтороныШаблонов.Наименование = &НаименованиеСтороны) КАК ВнутренниеДокументы";
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("НаименованиеСтороны", Справочники.НаименованияСторон.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
		
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЕстьИзменения = Ложь;
			
			Для Каждого Сторона Из ДокументОбъект.Стороны Цикл 
				Если Не ЗначениеЗаполнено(Сторона.Наименование)
					И ЗначениеЗаполнено(Сторона.УдалитьНаименование) Тогда
					Сторона.Наименование = ПолучитьНаименованиеСтороны(Сторона.УдалитьНаименование);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьИзменения Тогда 
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗаполнитьНаименованийСторонВоВнутреннихДокументах'; en = 'ЗаполнитьНаименованийСторонВоВнутреннихДокументах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Функция ПолучитьНаименованиеСтороны(Наименование)
	
	НаименованиеСтороны = Справочники.НаименованияСторон.НайтиПоНаименованию(Наименование);
	
	Если Не ЗначениеЗаполнено(НаименованиеСтороны) Тогда 
		НаименованиеСтороныОбъект = Справочники.НаименованияСторон.СоздатьЭлемент();
		НаименованиеСтороныОбъект.Наименование = Наименование;
		НаименованиеСтороныОбъект.Записать();
		НаименованиеСтороны = НаименованиеСтороныОбъект.Ссылка;
	КонецЕсли;
	
	Возврат НаименованиеСтороны;
	
КонецФункции

#Область РеорганизацияРолейСОбъектамиАдресации

// Реорганизует роли с объектами адресации по данным, которые следует обновить монопольно.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииМонопольная()
	
	РеорганизацияРолейСОбъектамиАдресацииИсполнителиРолейИДелегаты();
	
	РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные(Истина);

	РеорганизацияРолейСОбъектамиАдресацииШаблоныДокументовИнструкции();
	РеорганизацияРолейСОбъектамиАдресацииНастройкиДоступностиЭскалация();
	РеорганизацияРолейСОбъектамиАдресацииШаблоныПроцессовМонопольно();
	РеорганизацияРолейСОбъектамиАдресацииРабочиеГруппы();
	РеорганизацияРолейСОбъектамиАдресацииВизы();
	РеорганизацияРолейСОбъектамиАдресацииРезолюции();
	РеорганизацияРолейСОбъектамиАдресацииКонтроль();
	РеорганизацияРолейСОбъектамиАдресацииПроцессыИЗадачиМонопольно();
	РеорганизацияРолейСОбъектамиАдресацииМероприятияИПроекты();

КонецПроцедуры

// Реорганизует роли с объектами адресации по данным регистра сведений ИсполнителиЗадач.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииИсполнителиЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПроверкаНеобходимости = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсполнителиЗадач.РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|");
	ВыборкаПроверкаНеобходимости = ЗапросПроверкаНеобходимости.Выполнить().Выбрать();
	Если Не ВыборкаПроверкаНеобходимости.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление РС ИсполнителиЗадач.
	ЗапросИсполнителиЗадач = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
		|	ПолныеРоли.Ссылка КАК РольИсполнителя,
		|	ИсполнителиЗадач.УдалитьРольИсполнителя КАК УдалитьРольИсполнителя,
		|	ИсполнителиЗадач.УдалитьОсновнойОбъектАдресации КАК УдалитьОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.УдалитьДополнительныйОбъектАдресации КАК УдалитьДополнительныйОбъектАдресации
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО (ПолныеРоли.Владелец = ИсполнителиЗадач.УдалитьРольИсполнителя)
		|			И (ПолныеРоли.ОсновнойОбъектАдресации = ИсполнителиЗадач.УдалитьОсновнойОбъектАдресации)
		|			И (ПолныеРоли.ДополнительныйОбъектАдресации = ИсполнителиЗадач.УдалитьДополнительныйОбъектАдресации)
		|");
		
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
		
	ВыборкаИсполнителиЗадач = ЗапросИсполнителиЗадач.Выполнить().Выбрать();
	Пока ВыборкаИсполнителиЗадач.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаИсполнителиЗадач);
		
		Если Не ЗначениеЗаполнено(Запись.РольИсполнителя) Тогда
			
			Запись.РольИсполнителя = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				ВыборкаИсполнителиЗадач.УдалитьРольИсполнителя,
				ВыборкаИсполнителиЗадач.УдалитьОсновнойОбъектАдресации,
				ВыборкаИсполнителиЗадач.УдалитьДополнительныйОбъектАдресации);
				
		КонецЕсли;
			
				
	КонецЦикла;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("РеорганизацияРолейСОбъектамиАдресации", Истина);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

КонецПроцедуры

// Реорганизует роли с объектами адресации по данным регистра сведений ИсполнителиРолейИДелегаты.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииИсполнителиРолейИДелегаты() Экспорт
	
	Запрос = Новый Запрос;
	
	// Обновление регистра ИсполнителиРолейИДелегаты по пользователям
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Служебный = ЛОЖЬ";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоПользователю(Выборка.Ссылка);
	КонецЦикла;
	
	// Обновление регистра ИсполнителиРолейИДелегаты по настройкам делегирования
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Ссылка
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	ДелегированиеПрав.Действует = ИСТИНА";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоНастройкеДелегирования(Выборка.Ссылка);
	КонецЦикла;
	
	// Обновление регистра ИсполнителиРолейИДелегаты по исполнителям ролей
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.РольИсполнителя,
		|	ИсполнителиЗадач.Исполнитель,
		|	ИсполнителиЗадач.УдалитьОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.УдалитьДополнительныйОбъектАдресации
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоИсполнителюРоли(
			Выборка.Исполнитель,
			Выборка.РольИсполнителя);
	КонецЦикла;

КонецПроцедуры

// Реорганизует роли с объектами адресации по данным регистра сведений СоставСубъектовПравДоступа.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииСоставСубъектовПравДоступа() Экспорт
	
	ЗапросПроверкаНеобходимости = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоставСубъектовПравДоступа.Субъект
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|ГДЕ
		|	СоставСубъектовПравДоступа.Субъект = Неопределено
		|");
	ВыборкаПроверкаНеобходимости = ЗапросПроверкаНеобходимости.Выполнить().Выбрать();
	Если Не ВыборкаПроверкаНеобходимости.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СоставСубъектовПравДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЕстьИзменения = Ложь;
	РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(НаборЗаписей, "Субъект", ЕстьИзменения);
	
	Если ЕстьИзменения Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("РеорганизацияРолейСОбъектамиАдресации", Истина);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;

КонецПроцедуры

// Реорганизует роли с объектами адресации (шаблоны документов, инструкции).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииШаблоныДокументовИнструкции() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Шаблоны документов и инструкции'; en = 'Document templates and instructions'"),
		Статус);
		
	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныВходящихДокументов.РабочаяГруппаДокумента",
		"Ссылка",
		"Участник");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныВходящихДокументов.РабочаяГруппаДокумента",
		"Ссылка",
		"Участник");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныВнутреннихДокументов.РабочаяГруппаДокумента",
		"Ссылка",
		"Участник");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныВнутреннихДокументов.ИсполнителиСогласования",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсходящихДокументов.РабочаяГруппаДокумента",
		"Ссылка",
		"Участник");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсходящихДокументов.ИсполнителиСогласования",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Инструкции.ДоступНаЧтение",
		"Ссылка",
		"Пользователь");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбрабатываемыйОбъект);
			
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Шаблоны документов и инструкции'; en = 'Document templates and instructions'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (настройки доступности, эскалация задач).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииНастройкиДоступностиЭскалация() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Настройки доступности и правила эскалации'; en = 'Availability settings and escalation rules'"),
		Статус);
		
	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.НастройкиДоступностиПоСостоянию.ИспользоватьДля",
		"Ссылка",
		"Участник");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ПравилаЭскалацииЗадач",
		"Ссылка",
		"НаправлениеЭскалации");
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ПравилаЭскалацииЗадач.ДополнительныеУсловия",
		"Ссылка",
		"ЗначениеУсловия");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбрабатываемыйОбъект);
			
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Настройки доступности и правила эскалации'; en = 'Availability settings and escalation rules'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (монопольно, шаблоны обычных процессов и процессов
// в незавершенных комплексных процессах).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииШаблоныПроцессовМонопольно() Экспорт
	
	ТекстЗапроса = "";
	
	УсловиеМонопольнойОбработкиДляШаблона =
		"(ШаблонВКомплексномПроцессе = ЛОЖЬ
		|	ИЛИ КомплексныйПроцесс.Завершен = ИСТИНА
		|	ИЛИ КомплексныйПроцесс.ПометкаУдаления = ИСТИНА)";
	УсловиеМонопольнойОбработкиДляТабличнойЧастиШаблона =
		"(Ссылка.ШаблонВКомплексномПроцессе = ЛОЖЬ
		|	ИЛИ Ссылка.КомплексныйПроцесс.Завершен = ИСТИНА
		|	ИЛИ Ссылка.КомплексныйПроцесс.ПометкаУдаления = ИСТИНА)";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсполнения",
		"Ссылка",
		"Контролер",
		УсловиеМонопольнойОбработкиДляШаблона);
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсполнения",
		"Ссылка",
		"Проверяющий",
		УсловиеМонопольнойОбработкиДляШаблона);
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсполнения.Исполнители",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныОзнакомления.Исполнители",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПриглашения.Исполнители",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПоручения",
		"Ссылка",
		"Контролер",
		УсловиеМонопольнойОбработкиДляШаблона);
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПоручения",
		"Ссылка",
		"Проверяющий",
		УсловиеМонопольнойОбработкиДляШаблона);
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПоручения",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныРассмотрения",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныРегистрации",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныСогласования.Исполнители",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиШаблона);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныУтверждения",
		"Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляШаблона);
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Шаблоны процессов (монопольно)'; en = 'Process templates (exclusively)'"),
		Статус,
		Объектов);
		
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбрабатываемыйОбъект);
			
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Шаблоны процессов (монопольно)'; en = 'Process templates (exclusively)'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (отложенно, шаблоны процессов в завершенных и помеченных
// на удаление комплексных процессах).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииШаблоныПроцессовОтложенно(Параметры) Экспорт
	
	Статус = "";
	Параметры.ОбработкаЗавершена = Ложь;
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Шаблоны процессов (отложенно)'; en = 'Process templates (deferred)'"),
		Статус);
		
	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсполнения",
		"Ссылка",
		"Контролер");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсполнения",
		"Ссылка",
		"Проверяющий");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныИсполнения.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныОзнакомления.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПриглашения.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПоручения",
		"Ссылка",
		"Контролер");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПоручения",
		"Ссылка",
		"Проверяющий");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныПоручения",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныРассмотрения",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныРегистрации",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныСогласования.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныУтверждения",
		"Ссылка",
		"Исполнитель");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5000
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		НужноЗаписатьОбъект = Ложь;
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
			РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
				ОбрабатываемыйОбъект,
				НужноЗаписатьОбъект);
				
			Если НужноЗаписатьОбъект Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбрабатываемыйОбъект);
			КонецЕсли;
			
		Исключение
				
			ОтменитьТранзакцию();
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Шаблоны процессов (отложенно)'; en = 'Process templates (deferred)'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
			
			Возврат;
				
		КонецПопытки;
			
		ЗафиксироватьТранзакцию();
		
		Объектов = Объектов - 1;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Шаблоны процессов (отложенно)'; en = 'Process templates (deferred)'"),
		ТекстЗапроса,
		Объектов,
		Статус);
	
	Если Объектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (рабочие группы).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииРабочиеГруппы() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Рабочие группы'; en = 'Working groups'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.РабочиеГруппы",
		"Объект",
		"Участник");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		
		РабочаяГруппа = РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей();
		РабочаяГруппа.Отбор.Объект.Установить(Выборка.Ссылка);
		РабочаяГруппа.Прочитать();
		
		НужноЗаписатьРабочуюГруппу = Ложь;
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			РабочаяГруппа,
			НужноЗаписатьРабочуюГруппу);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьРабочуюГруппу Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			РабочаяГруппа.ОбменДанными.Загрузка = Истина;
			РабочаяГруппа.ДополнительныеСвойства.Вставить("РеорганизацияРолейСОбъектамиАдресации", Истина);
			
			РабочаяГруппа.Записать();
				
		Исключение
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Рабочие группы'; en = 'Working groups'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
				
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Рабочие группы'; en = 'Working groups'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (визы).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииВизы() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Визы'; en = 'Endorsements'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ВизыСогласования",
		"Ссылка",
		"Исполнитель, РольИсполнителя");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
		
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
			ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(
				"РеорганизацияРолейСОбъектамиАдресации", Истина);
			
			ОбрабатываемыйОбъект.Записать();
			
		Исключение
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Визы'; en = 'Endorsements'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
			
			Возврат;
			
		КонецПопытки;
		
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Визы'; en = 'Endorsements'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (резолюции).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииРезолюции() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Резолюции'; en = 'Resolutions'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Резолюции",
		"Ссылка",
		"АвторРезолюции");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
			ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(
				"РеорганизацияРолейСОбъектамиАдресации", Истина);
			
			ОбрабатываемыйОбъект.Записать();
			
		Исключение
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Резолюции'; en = 'Resolutions'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Резолюции'; en = 'Resolutions'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (контроль).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииКонтроль() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Контроль'; en = 'Monitoring'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Контроль",
		"Ссылка",
		"Контролер");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Контроль.Исполнители",
		"Ссылка",
		"Исполнитель");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
			ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(
				"РеорганизацияРолейСОбъектамиАдресации", Истина);
			
			ОбрабатываемыйОбъект.Записать();
			
		Исключение
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Контроль'; en = 'Monitoring'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Контроль'; en = 'Monitoring'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (монопольно, незавершенные процессы, задачи и связанные объекты).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииПроцессыИЗадачиМонопольно() Экспорт
	
	ТекстЗапроса = "";
	
	// Перед расчетом прав нужно обработать процессы с файлами, даже если они уже завершены.
	Соединение = 
		"ЛЕВОЕ СОЕДИНЕНИЕ
		|	%1.Предметы КАК ПредметыФайлы
		|ПО
		|	Выборка.Ссылка = ПредметыФайлы.Ссылка
		|	И ПредметыФайлы.Предмет ССЫЛКА Справочник.Файлы";
	УсловиеМонопольнойОбработкиДляПроцесса =
		"((Выборка.Завершен = Ложь И Выборка.ПометкаУдаления = Ложь) ИЛИ НЕ ПредметыФайлы.Предмет ЕСТЬ NULL)";
	УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса =
		"(
		|	(Выборка.Ссылка.Завершен = Ложь И Выборка.Ссылка.ПометкаУдаления = Ложь)
		|	ИЛИ НЕ ПредметыФайлы.Предмет ЕСТЬ NULL
		|)";
	УсловиеМонопольнойОбработкиДляЗадачи =
		"(Выборка.Выполнена = Ложь И Выборка.ПометкаУдаления = Ложь)";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Задача.ЗадачаИсполнителя",
		"Ссылка",
		"РольИсполнителя",
		УсловиеМонопольнойОбработкиДляЗадачи);
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Задача.ЗадачаИсполнителя",
		"Ссылка",
		"ТекущийИсполнитель",
		УсловиеМонопольнойОбработкиДляЗадачи);
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Исполнение",
		"Выборка.Ссылка",
		"Контролер, Проверяющий",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Исполнение"));
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Исполнение.Исполнители",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Исполнение"));
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.КомплексныйПроцесс",
		"Выборка.Ссылка",
		"Контролер",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.КомплексныйПроцесс"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Ознакомление.Исполнители",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Ознакомление"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Поручение",
		"Выборка.Ссылка",
		"Контролер, Проверяющий, Исполнитель",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Поручение"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Приглашение.Исполнители",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Приглашение"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Рассмотрение",
		"Выборка.Ссылка",
		"КонтролерИсполнения, ПроверяющийИсполнения, Исполнитель",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Рассмотрение"));
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Рассмотрение.ИсполнителиИсполнения",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Рассмотрение"));
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Рассмотрение.ИсполнителиОзнакомления",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Рассмотрение"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Регистрация",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Регистрация"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач",
		"Выборка.Ссылка",
		"ИнициаторПроцесса",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.РешениеВопросовВыполненияЗадач"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Согласование.Исполнители",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляТабличнойЧастиПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Согласование"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Утверждение",
		"Выборка.Ссылка",
		"Исполнитель",
		УсловиеМонопольнойОбработкиДляПроцесса,
		СтрШаблон(Соединение, "БизнесПроцесс.Утверждение"));
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.УчастникиПроцессов",
		"Процесс",
		"Участник",
		"(
		|	(Процесс <> Неопределено И НЕ Процесс ЕСТЬ NULL И Процесс.Завершен = Ложь И Процесс.ПометкаУдаления = Ложь)
		|	ИЛИ (НЕ ПредметыФайлы.Ссылка ЕСТЬ NULL)
		|)",
		"ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.Файлы КАК ПредметыФайлы
		|ПО
		|	Выборка.Процесс = ПредметыФайлы.ВладелецФайла");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.СведенияОбИсполнителяхЗадач",
		"Задача",
		"Участник",
		"Задача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка) И Задача.Выполнена = Ложь И Задача.ПометкаУдаления = Ложь");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Процессы и задачи (монопольно)'; en = 'Processes and tasks (exclusively)'"),
		Статус,
		Объектов);

	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
		
		// Участники процессов и сведения об исполнителях задач.
		НужноЗаписатьУчастниковПроцесса = Ложь;
		НужноЗаписатьСведенияОбИсполнителяхЗадачи = Ложь;
		Если ТипЗнч(Выборка.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			СведенияОбИсполнителяхЗадачи = РегистрыСведений.СведенияОбИсполнителяхЗадач.СоздатьНаборЗаписей();
			СведенияОбИсполнителяхЗадачи.Отбор.Задача.Установить(Выборка.Ссылка);
			СведенияОбИсполнителяхЗадачи.Прочитать();
			
			РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
				СведенияОбИсполнителяхЗадачи,
				"Участник",
				НужноЗаписатьСведенияОбИсполнителяхЗадачи);
				
		Иначе
			
			УчастникиПроцесса = РегистрыСведений.УчастникиПроцессов.ПолучитьУчастников(
				Выборка.Ссылка);
			
			РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
				УчастникиПроцесса,
				"Участник",
				НужноЗаписатьУчастниковПроцесса);
			
		КонецЕсли;
			
		Объектов = Объектов - 1;
		
		Если Не НужноЗаписатьОбъект
			И Не НужноЗаписатьУчастниковПроцесса
			И Не НужноЗаписатьСведенияОбИсполнителяхЗадачи Тогда
			Продолжить;
		КонецЕсли;
		
		Если НужноЗаписатьОбъект Тогда
			
			Попытка
				
				ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				
				МетаданныеОбъекта = ОбрабатываемыйОбъект.Метаданные();
				
				Если ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
					РаботаСБизнесПроцессами.ЗаписатьПроцесс(ОбрабатываемыйОбъект, "ПростаяЗапись");
				Иначе
					ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
					ОбрабатываемыйОбъект.Записать();
				КонецЕсли;
				
			Исключение
				
				РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
					НСтр("ru = 'Процессы и задачи (монопольно)'; en = 'Processes and tasks (exclusively)'"),
					ТекстЗапроса,
					Выборка.Ссылка,
					ОписаниеОшибки(),
					Объектов,
					Статус);
				
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если НужноЗаписатьУчастниковПроцесса Тогда
			
			Попытка
				
				Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
				Набор.Отбор.Процесс.Установить(Выборка.Ссылка);
				
				Для Каждого ИсточникСтрока Из УчастникиПроцесса Цикл
					Запись = Набор.Добавить();
					Запись.Процесс = Выборка.Ссылка;
					Запись.Участник = ИсточникСтрока.Участник;
					Запись.УдалитьОсновнойОбъектАдресации = ИсточникСтрока.УдалитьОсновнойОбъектАдресации;
					Запись.УдалитьДополнительныйОбъектАдресации = ИсточникСтрока.УдалитьДополнительныйОбъектАдресации;
					Запись.УдалитьУчастник = ИсточникСтрока.УдалитьУчастник;
				КонецЦикла;
				
				Набор.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				Набор.ОбменДанными.Загрузка = Истина;
				Набор.Записать();
				
			Исключение
				
				РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
					НСтр("ru = 'Процессы и задачи (монопольно)'; en = 'Processes and tasks (exclusively)'"),
					ТекстЗапроса,
					Выборка.Ссылка,
					ОписаниеОшибки(),
					Объектов,
					Статус);
				
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если НужноЗаписатьСведенияОбИсполнителяхЗадачи Тогда
			
			Попытка
				
				СведенияОбИсполнителяхЗадачи.ОбменДанными.Загрузка = Истина;
				СведенияОбИсполнителяхЗадачи.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				СведенияОбИсполнителяхЗадачи.Записать();
				
			Исключение
				
				РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
					НСтр("ru = 'Процессы и задачи (монопольно)'; en = 'Processes and tasks (exclusively)'"),
					ТекстЗапроса,
					Выборка.Ссылка,
					ОписаниеОшибки(),
					Объектов,
					Статус);
				
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Процессы и задачи (монопольно)'; en = 'Processes and tasks (exclusively)'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (отложенно, завершеные и помеченные на удаление процессы,
// задачи и связанные объекты).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииПроцессыИЗадачиОтложенно(Параметры) Экспорт
	
	Статус = "";
	Параметры.ОбработкаЗавершена = Ложь;
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Процессы и задачи (отложенно)'; en = 'Processes and tasks (deferred)'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Задача.ЗадачаИсполнителя",
		"Ссылка",
		"РольИсполнителя");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Задача.ЗадачаИсполнителя",
		"Ссылка",
		"ТекущийИсполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Исполнение",
		"Ссылка",
		"Контролер, Проверяющий");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Исполнение.Исполнители",
		"Ссылка",
		"Исполнитель");
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.КомплексныйПроцесс",
		"Ссылка",
		"Контролер");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Ознакомление.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Поручение",
		"Ссылка",
		"Контролер, Проверяющий, Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Приглашение.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Рассмотрение",
		"Ссылка",
		"КонтролерИсполнения, ПроверяющийИсполнения, Исполнитель");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Рассмотрение.ИсполнителиИсполнения",
		"Ссылка",
		"Исполнитель");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Рассмотрение.ИсполнителиОзнакомления",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Регистрация",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач",
		"Ссылка",
		"ИнициаторПроцесса");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Согласование.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"БизнесПроцесс.Утверждение",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.УчастникиПроцессов",
		"Процесс",
		"Участник",
		"(Процесс <> Неопределено И НЕ Процесс ЕСТЬ NULL)");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.СведенияОбИсполнителяхЗадач",
		"Задача",
		"Участник",
		"Задача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5000
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка.Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		НужноЗаписатьОбъект = Ложь;
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
				ОбрабатываемыйОбъект,
				НужноЗаписатьОбъект);
			
			// Участники процессов и сведения об исполнителях задач.
			НужноЗаписатьУчастниковПроцесса = Ложь;
			НужноЗаписатьСведенияОбИсполнителяхЗадачи = Ложь;
			Если ТипЗнч(Выборка.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				СведенияОбИсполнителяхЗадачи = РегистрыСведений.СведенияОбИсполнителяхЗадач.СоздатьНаборЗаписей();
				СведенияОбИсполнителяхЗадачи.Отбор.Задача.Установить(Выборка.Ссылка);
				СведенияОбИсполнителяхЗадачи.Прочитать();
				
				РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
					СведенияОбИсполнителяхЗадачи,
					"Участник",
					НужноЗаписатьСведенияОбИсполнителяхЗадачи);
					
			Иначе
				
				УчастникиПроцесса = РегистрыСведений.УчастникиПроцессов.ПолучитьУчастников(
					Выборка.Ссылка);
				
				РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
					УчастникиПроцесса,
					"Участник",
					НужноЗаписатьУчастниковПроцесса);
				
			КонецЕсли;
				
			Если НужноЗаписатьОбъект Тогда
				
				ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				
				МетаданныеОбъекта = ОбрабатываемыйОбъект.Метаданные();
				
				Если ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
					РаботаСБизнесПроцессами.ЗаписатьПроцесс(ОбрабатываемыйОбъект, "ПростаяЗапись");
				Иначе
					ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
					ОбрабатываемыйОбъект.Записать();
				КонецЕсли;
					
			КонецЕсли;
			
			Если НужноЗаписатьУчастниковПроцесса Тогда
				
				Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
				Набор.Отбор.Процесс.Установить(Выборка.Ссылка);
				
				Для Каждого ИсточникСтрока Из УчастникиПроцесса Цикл
					Запись = Набор.Добавить();
					Запись.Процесс = Выборка.Ссылка;
					Запись.Участник = ИсточникСтрока.Участник;
					Запись.УдалитьОсновнойОбъектАдресации = ИсточникСтрока.УдалитьОсновнойОбъектАдресации;
					Запись.УдалитьДополнительныйОбъектАдресации = ИсточникСтрока.УдалитьДополнительныйОбъектАдресации;
					Запись.УдалитьУчастник = ИсточникСтрока.УдалитьУчастник;
				КонецЦикла;
				
				Набор.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				Набор.ОбменДанными.Загрузка = Истина;
				Набор.Записать();
					
			КонецЕсли;
			
			Если НужноЗаписатьСведенияОбИсполнителяхЗадачи Тогда
				
				СведенияОбИсполнителяхЗадачи.ОбменДанными.Загрузка = Истина;
				СведенияОбИсполнителяхЗадачи.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				СведенияОбИсполнителяхЗадачи.Записать();
					
			КонецЕсли;
		
		Исключение
				
			ОтменитьТранзакцию();
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Процессы и задачи (отложенно)'; en = 'Processes and tasks (deferred)'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
			
			Возврат;
				
		КонецПопытки;
			
		ЗафиксироватьТранзакцию();
		
		Объектов = Объектов - 1;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Процессы и задачи (отложенно)'; en = 'Processes and tasks (deferred)'"),
		ТекстЗапроса,
		Объектов,
		Статус);
	
	Если Объектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (мероприятия, проекты и связанные объекты).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииМероприятияИПроекты() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Мероприятия и проекты'; en = 'Events and projects'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Мероприятия",
		"Ссылка",
		"Председатель, Секретарь");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Мероприятия.Программа",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.УчастникиМероприятия",
		"Мероприятие",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ПротоколыМероприятий",
		"Ссылка",
		"Ответственный, Проверяющий, Контролер");
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ПротоколыМероприятий.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.Проекты.ПроектнаяКоманда",
		"Ссылка",
		"Исполнитель");
		
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ПроектныеЗадачи.Исполнители",
		"Ссылка",
		"Исполнитель");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество() - 1;
	
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		// Участники мероприятия.
		НужноЗаписатьУчастников = Ложь;
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			УчастникиМероприятия = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
			УчастникиМероприятия.Отбор.Мероприятие.Установить(Выборка.Ссылка);
			УчастникиМероприятия.Прочитать();
			
			РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
				УчастникиМероприятия,
				"Исполнитель",
				НужноЗаписатьУчастников);
			
		КонецЕсли;
		
		Если Не НужноЗаписатьОбъект
			И Не НужноЗаписатьУчастников Тогда
			Продолжить;
		КонецЕсли;
		
		Если НужноЗаписатьОбъект Тогда
			
			Попытка
				
				ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
				ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				
				ОбрабатываемыйОбъект.Записать();
				
			Исключение
				
				РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
					НСтр("ru = 'Мероприятия и проекты'; en = 'Events and projects'"),
					ТекстЗапроса,
					Выборка.Ссылка,
					ОписаниеОшибки(),
					Объектов,
					Статус);
				
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если НужноЗаписатьУчастников Тогда
			
			Попытка
				
				УчастникиМероприятия.ОбменДанными.Загрузка = Истина;
				УчастникиМероприятия.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				УчастникиМероприятия.Записать();
				
			Исключение
				
				РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
					НСтр("ru = 'Мероприятия и проекты'; en = 'Events and projects'"),
					ТекстЗапроса,
					Выборка.Ссылка,
					ОписаниеОшибки(),
					Объектов,
					Статус);
				
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Мероприятия и проекты'; en = 'Events and projects'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Добавляет к тексту запроса выборку из указанной таблицы, подлежащую обработке.
//
// Параметры:
//   Текст - Строка - дополняемый текст запроса.
//   ИмяТаблицы - Строка - имя таблицы, из которой выбираются данные.
//   ИмяПоляОбъекта - Строка - имя поля таблицы, соответствующего обрабатываемому объекту.
//   ИмяПоляРолиПолной - Строка - имя поля таблицы, соответствующего полной роли.
//   ДополнительноеУсловие - Строка - необязательное дополнительное условие, включаемое в текст.
//
Процедура РеорганизацияРолейДополнитьТекстЗапросаВыборкой(Текст, ИмяТаблицы, ИмяПоляОбъекта = "Ссылка",
	ИмяПоляРолиПолной, ДополнительноеУсловие = Неопределено, Соединение = "")
	
	ИменаПолей = СтрРазделить(ИмяПоляРолиПолной, ",", Ложь);
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		
		ИмяПоляРолиПолной = СокрЛП(ИмяПоля);
		
		ИмяПоляРоли = "Удалить" + ИмяПоляРолиПолной;
		
		Если ЗначениеЗаполнено(Текст) Тогда
			Текст = Текст + "
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		
		Текст = Текст + "
			|ВЫБРАТЬ
			|	" + ИмяПоляОбъекта + " КАК Ссылка
			|ИЗ
			|	" + ИмяТаблицы + " КАК Выборка
			|" + Соединение + "
			|ГДЕ
			|	Выборка." + ИмяПоляРоли + " <> Неопределено
			|	И Выборка." + ИмяПоляРоли + " <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|	И (Выборка." + ИмяПоляРолиПолной + " = Неопределено
			|		ИЛИ Выборка." + ИмяПоляРолиПолной + " = ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка))
			|";
			
		Если ЗначениеЗаполнено(ДополнительноеУсловие) Тогда
			Текст = Текст + "	И " + ДополнительноеУсловие + "
			|";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подсчитывает количество различных значений поля Ссылка по переданному тексту запроса.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса, выбирающего обрабатываемые данные.
//   Объектов - Число - неявно возвращаемое значение, количество объектов в выборке.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииПодсчетКоличества(ТекстЗапроса, Объектов)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка) КАК Объектов
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объектов = Выборка.Объектов;
	Иначе
		Объектов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданную таблицу, заполняя полные роли, если необходимо.
//
// Параметры:
//   Таблица - ТабличнаяЧасть, ТаблицаЗначений, НаборЗаписей - обрабатываемая таблица.
//   ИмяПоляРолиПолной - Строка - имя поля с полной ролью.
//   ЕстьИзменения - Булево - неявно возвращаемое значение, Истина, если таблица была изменена.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(Таблица, ИмяПоляРолиПолной,
	ЕстьИзменения = Неопределено) Экспорт
	
	// Получим имя поля, соответствующего полной роли.
	ИмяПоляРоли = "Удалить" + ИмяПоляРолиПолной;
	
	// Подготовим типизированную таблицу для передачи в запрос полных ролей.
	ТаблицаРолиОбъекты = Новый ТаблицаЗначений;
	ТаблицаРолиОбъекты.Колонки.Добавить("НомерИсходнойСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаРолиОбъекты.Колонки.Добавить("Роль", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
	
	ОбъектыАдресации = Метаданные.ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Тип;
	ТаблицаРолиОбъекты.Колонки.Добавить("ОсновнойОбъектАдресации", ОбъектыАдресации);
	ТаблицаРолиОбъекты.Колонки.Добавить("ДополнительныйОбъектАдресации", ОбъектыАдресации);
	
	Для НомерСтроки = 0 По Таблица.Количество() - 1 Цикл
		
		СтрокаТаблицы = Таблица[НомерСтроки];
		
		Если СтрокаТаблицы[ИмяПоляРоли] <> Неопределено
			И СтрокаТаблицы[ИмяПоляРоли] <> Справочники.РолиИсполнителей.ПустаяСсылка()
			И (СтрокаТаблицы[ИмяПоляРолиПолной] = Неопределено
				Или СтрокаТаблицы[ИмяПоляРолиПолной] = Справочники.ПолныеРоли.ПустаяСсылка()) Тогда
				
			ЕстьИзменения = Истина;
			
			Если ТипЗнч(СтрокаТаблицы[ИмяПоляРоли]) <> Тип("Строка")
				И СтрокаТаблицы[ИмяПоляРоли].Пустая() Тогда 
				
				СтрокаТаблицы[ИмяПоляРоли] = Неопределено;
				
			ИначеЕсли ТипЗнч(СтрокаТаблицы[ИмяПоляРоли]) 
				= Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				СтрокаНовая = ТаблицаРолиОбъекты.Добавить();
				СтрокаНовая.НомерИсходнойСтроки = НомерСтроки;
				СтрокаНовая.Роль = СтрокаТаблицы[ИмяПоляРоли];
				Если ЗначениеЗаполнено(СтрокаТаблицы.УдалитьОсновнойОбъектАдресации) Тогда
					СтрокаНовая.ОсновнойОбъектАдресации = СтрокаТаблицы.УдалитьОсновнойОбъектАдресации;
				Иначе // приведем пустые ссылки к Неопределено
					СтрокаНовая.ОсновнойОбъектАдресации = Неопределено;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.УдалитьДополнительныйОбъектАдресации) Тогда
					СтрокаНовая.ДополнительныйОбъектАдресации = СтрокаТаблицы.УдалитьДополнительныйОбъектАдресации;
				Иначе // приведем пустые ссылки к Неопределено
					СтрокаНовая.ДополнительныйОбъектАдресации = Неопределено;
				КонецЕсли;
			
			Иначе // пользователей, группы пользователей и т.п. просто копируем в новый реквизит.
				СтрокаТаблицы[ИмяПоляРолиПолной] = СтрокаТаблицы[ИмяПоляРоли];
				
			КонецЕсли;
			
		КонецЕсли; // необходимо заполнение полной роли
		
	КонецЦикла;
	
	// Возможно, нечего и выбирать.
	Если ТаблицаРолиОбъекты.Количество() <> 0 Тогда
		
		ЗапросПолныеРоли = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсходнаяТаблица.Роль КАК Роль,
			|	ИсходнаяТаблица.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
			|	ИсходнаяТаблица.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
			|ПОМЕСТИТЬ
			|   ТаблицаРолиОбъекты
			|ИЗ
			|	&ИсходнаяТаблица КАК ИсходнаяТаблица
			|
			|; ////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаРолиОбъекты.Роль КАК Роль,
			|	ТаблицаРолиОбъекты.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
			|	ТаблицаРолиОбъекты.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
			|	ПолныеРоли.Ссылка КАК ПолнаяРоль
			|ИЗ
			|	ТаблицаРолиОбъекты
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	Справочник.ПолныеРоли КАК ПолныеРоли
			|ПО
			|	ТаблицаРолиОбъекты.Роль = ПолныеРоли.Владелец
			|	И ТаблицаРолиОбъекты.ОсновнойОбъектАдресации = ПолныеРоли.ОсновнойОбъектАдресации
			|	И ТаблицаРолиОбъекты.ДополнительныйОбъектАдресации = ПолныеРоли.ДополнительныйОбъектАдресации
			|");
		ЗапросПолныеРоли.УстановитьПараметр("ИсходнаяТаблица", ТаблицаРолиОбъекты);
		ТаблицаПолныеРоли = ЗапросПолныеРоли.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыРолиОбъекты Из ТаблицаРолиОбъекты Цикл
			
			СтрокаТаблицы = Таблица[СтрокаТаблицыРолиОбъекты.НомерИсходнойСтроки];
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Роль", СтрокаТаблицы[ИмяПоляРоли]);
			СтруктураПоиска.Вставить("ОсновнойОбъектАдресации", СтрокаТаблицы.УдалитьОсновнойОбъектАдресации);
			СтруктураПоиска.Вставить("ДополнительныйОбъектАдресации", СтрокаТаблицы.УдалитьДополнительныйОбъектАдресации);
			
			СтрокиПолныеРоли = ТаблицаПолныеРоли.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиПолныеРоли.Количество() <> 0 Тогда
				СтрокаТаблицы[ИмяПоляРолиПолной] = СтрокиПолныеРоли[0].ПолнаяРоль;
				
			Иначе
				ПолнаяРоль = Справочники.ПолныеРоли.СоздатьПолнуюРоль(
					СтрокаТаблицы[ИмяПоляРоли],
					СтрокаТаблицы.УдалитьОсновнойОбъектАдресации,
					СтрокаТаблицы.УдалитьДополнительныйОбъектАдресации);
				СтрокаТаблицы[ИмяПоляРолиПолной] = ПолнаяРоль;
				
				СтрокаПолныеРоли = ТаблицаПолныеРоли.Добавить();
				СтрокаПолныеРоли.Роль = СтрокаТаблицы[ИмяПоляРоли];
				СтрокаПолныеРоли.ОсновнойОбъектАдресации = СтрокаТаблицы.УдалитьОсновнойОбъектАдресации;
				СтрокаПолныеРоли.ДополнительныйОбъектАдресации = СтрокаТаблицы.УдалитьДополнительныйОбъектАдресации;
				СтрокаПолныеРоли.ПолнаяРоль = ПолнаяРоль;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданный объект, заполняя полные роли, если необходимо.
//
// Параметры:
//   Объект - Произвольный - обрабатываемая таблица.
//   ИмяПоляРолиПолной - Строка - имя поля с полной ролью или имена через запятую, например,
//     "Исполнитель, Контролер".
//   ЕстьИзменения - Булево - неявно возвращаемое значение, Истина, если объект был изменен.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(Объект, ИмяПоляРолиПолной,
	ЕстьИзменения = Неопределено, БезУчетаЗаполненности = Ложь) Экспорт
	
	ИменаПолей = СтрРазделить(ИмяПоляРолиПолной, ",", Ложь);
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		
		ИмяПоляРолиПолной = СокрЛП(ИмяПоля);
		
		ИмяПоляРоли = "Удалить" + ИмяПоляРолиПолной;
		
		Если Объект[ИмяПоляРоли] <> Неопределено
			И Объект[ИмяПоляРоли] <> Справочники.РолиИсполнителей.ПустаяСсылка()
			И (БезУчетаЗаполненности
				Или Объект[ИмяПоляРолиПолной] = Неопределено
				Или Объект[ИмяПоляРолиПолной] = Справочники.ПолныеРоли.ПустаяСсылка()) Тогда
			
			ЕстьИзменения = Истина;
			
			// Пустые ссылки в полях составного типа не должны попасть в следующую выборку.
			Если ТипЗнч(Объект[ИмяПоляРоли]) <> Тип("Строка")
				И Объект[ИмяПоляРоли].Пустая() Тогда 
				
				Объект[ИмяПоляРоли] = Неопределено;
				
			ИначеЕсли ТипЗнч(Объект[ИмяПоляРоли]) 
				= Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				// Получим имена объектов адресации.
				Если ИмяПоляРолиПолной = "Контролер"
					Или ИмяПоляРолиПолной = "КонтролерИсполнения" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииКонтролера";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииКонтролера";
					
				ИначеЕсли ИмяПоляРолиПолной = "Проверяющий"
					Или ИмяПоляРолиПолной = "ПроверяющийИсполнения" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииПроверяющего";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииПроверяющего";
					
				ИначеЕсли ИмяПоляРолиПолной = "ТекущийИсполнитель" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьТекущийОсновнойОбъектАдресации";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьТекущийДополнительныйОбъектАдресации";
					
				ИначеЕсли ИмяПоляРолиПолной = "АвторРезолюции" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииАвтора";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииАвтора";
					
				ИначеЕсли ИмяПоляРолиПолной = "Председатель" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииПредседателя";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииПредседателя";
					
				ИначеЕсли ИмяПоляРолиПолной = "Секретарь" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииСекретаря";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииСекретаря";
					
				ИначеЕсли ИмяПоляРолиПолной = "Ответственный" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииОтветственного";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииОтветственного";
					
				ИначеЕсли ИмяПоляРолиПолной = "НаправлениеЭскалации" Тогда
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресацииНаправлениеЭскалации";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресацииНаправлениеЭскалации";
					
				Иначе // стандартные имена
					ИмяПоляОсновнойОбъектАдресации = "УдалитьОсновнойОбъектАдресации";
					ИмяПоляДополнительныйОбъектАдресации = "УдалитьДополнительныйОбъектАдресации";
					
				КонецЕсли;
				
				Объект[ИмяПоляРолиПолной] = 
					ОбщегоНазначенияДокументооборотПовтИсп.НайтиСоздатьПолнуюРоль(
						Объект[ИмяПоляРоли],
						Объект[ИмяПоляОсновнойОбъектАдресации],
						Объект[ИмяПоляДополнительныйОбъектАдресации]);
				
			Иначе // пользователей, группы пользователей и т.п. просто копируем в новый реквизит.
				Объект[ИмяПоляРолиПолной] = Объект[ИмяПоляРоли];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает переданный объект, заполняя полные роли согласно типу объекта.
//
// Параметры:
//   Объект - Произвольный - обрабатываемый объект.
//   ЕстьИзменения - Булево - неявно возвращаемый параметр, Истина, если объект был изменен.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(Объект,
	ЕстьИзменения = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ВизыСогласования") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Исполнитель, РольИсполнителя",
			ЕстьИзменения);
	
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Инструкции") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ДоступНаЧтение,
			"Пользователь",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Контроль") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
	
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.НастройкиДоступностиПоСостоянию") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ИспользоватьДля,
			"Участник",
			ЕстьИзменения);
	
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПравилаЭскалацииЗадач") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"НаправлениеЭскалации",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ДополнительныеУсловия,
			"ЗначениеУсловия",
			ЕстьИзменения);
	
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныВходящихДокументов") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.РабочаяГруппаДокумента,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныВнутреннихДокументов") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ИсполнителиСогласования,
			"Исполнитель",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.РабочаяГруппаДокумента,
			"Участник",
			ЕстьИзменения);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныИсходящихДокументов") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ИсполнителиСогласования,
			"Исполнитель",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.РабочаяГруппаДокумента,
			"Участник",
			ЕстьИзменения);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Резолюции") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"АвторРезолюции",
			ЕстьИзменения);
	
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"РольИсполнителя, ТекущийИсполнитель",
			ЕстьИзменения,
			Объект.ДополнительныеСвойства.Свойство("ИзменилисьРеквизитыАдресации"));
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Исполнение") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер, Проверяющий",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныИсполнения") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер, Проверяющий",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.КомплексныйПроцесс") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер",
			ЕстьИзменения);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Ознакомление") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныОзнакомления") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Поручение") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер, Проверяющий, Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныПоручения") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Контролер, Проверяющий, Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Рассмотрение") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"КонтролерИсполнения, ПроверяющийИсполнения, Исполнитель",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ИсполнителиИсполнения,
			"Исполнитель",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ИсполнителиОзнакомления,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныРассмотрения") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Регистрация") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныРегистрации") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"ИнициаторПроцесса",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Согласование") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныСогласования") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Утверждение") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныУтверждения") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.РабочиеГруппы") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.РабочиеГруппы") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.УчастникиПроцессов") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.УчастникиПроцессов") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ИсполнителиЗадач") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"РольИсполнителя",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.ИсполнителиЗадач") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"РольИсполнителя",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ИсполнителиРолейИДелегаты") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"РольПользователь",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.ИсполнителиРолейИДелегаты") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"РольПользователь",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.СведенияОбИсполнителяхЗадач") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.СведенияОбИсполнителяхЗадач") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Участник",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.СоставСубъектовПравДоступа") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"Субъект",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.СоставСубъектовПравДоступа") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Субъект",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Приглашение") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныПриглашения") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.УчастникиМероприятия") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.УчастникиМероприятия") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Мероприятия") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Председатель, Секретарь",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Программа,
			"Исполнитель",
			ЕстьИзменения);
	
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПротоколыМероприятий") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьОбъект(
			Объект,
			"Ответственный, Проверяющий, Контролер",
			ЕстьИзменения);
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Проекты") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.ПроектнаяКоманда,
			"Исполнитель",
			ЕстьИзменения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПроектныеЗадачи") Тогда
		РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
			Объект.Исполнители,
			"Исполнитель",
			ЕстьИзменения);
	
	КонецЕсли;
	
КонецПроцедуры

// Начало подобработчика по реорганизации ролей с объектами адресации.
//
// Параметры:
//   ИмяОбработчика - Строка - имя обработчика для журнала регистрации.
//   Статус - Строка - неявно возвращаемое значение, устанавливаемый статус обработки.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(ИмяОбработчика, Статус, Объектов = Неопределено)
	
	Если Объектов = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Реорганизация ролей. %1'; en = 'Reorganization of roles. %1'"), ИмяОбработчика),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Обработка начата'; en = 'Processing started'"));
	Иначе
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Реорганизация ролей. %1'; en = 'Reorganization of roles. %1'"), ИмяОбработчика),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СтрШаблон(НСтр("ru = 'Обработка начата. Объектов: %1'; en = 'Processing started. Objects: %1'"), Объектов));
	КонецЕсли;
		
	Статус = НСтр("ru = 'Выполняется'; en = 'Executing'");
	
КонецПроцедуры

// Завершение подобработчика по реорганизации ролей с объектами адресации.
//
// Параметры:
//   ИмяОбработчика - Строка - имя обработчика для журнала регистрации.
//   Статус - Строка - неявно возвращаемое значение, устанавливаемый статус обработки.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(ИмяОбработчика, ТекстЗапроса,
	Объектов, Статус)
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		РеорганизацияРолейСОбъектамиАдресацииПодсчетКоличества(
			ТекстЗапроса,
			Объектов);
	Иначе
		Объектов = 0;
	КонецЕсли;
	
	Если Объектов = 0 Тогда
		Статус = НСтр("ru = 'Завершено'; en = 'Completed'");
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Реорганизация ролей. %1'; en = 'Reorganization of roles. %1'"), ИмяОбработчика),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Обработка завершена'; en = 'Processing completed'"));
	Иначе
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Реорганизация ролей. %1'; en = 'Reorganization of roles. %1'"), ИмяОбработчика),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СтрШаблон(НСтр("ru = 'Завершена обработка порции данных. Осталось объектов: %1'; en = 'Complete processing of a portion of data. Objects left: %1'"), Объектов));
	КонецЕсли;
		
КонецПроцедуры

// Завершение подобработчика по реорганизации ролей с объектами адресации.
//
// Параметры:
//   ИмяОбработчика - Строка - имя обработчика для журнала регистрации.
//   Статус - Строка - неявно возвращаемое значение, устанавливаемый статус обработки.
//
Процедура РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(ИмяОбработчика, ТекстЗапроса,
	Объект, ОписаниеОшибки, Объектов, Статус)
	
	ЗаписьЖурналаРегистрации(
		СтрШаблон(НСтр("ru = 'Реорганизация ролей. %1'; en = 'Reorganization of roles. %1'"), ИмяОбработчика),
		УровеньЖурналаРегистрации.Ошибка,
		,
		Объект,
		ОписаниеОшибки);
		
	Статус = НСтр("ru = 'Завершено с ошибками'; en = 'Completed with errors'");
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		РеорганизацияРолейСОбъектамиАдресацииПодсчетКоличества(
			ТекстЗапроса,
			Объектов);
	Иначе
		Объектов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Отложенный обработчик на 2.0.10.4. Заменен на РеорганизацияРолейСОбъектамиАдресацииМонопольная.
// 
Процедура РеорганизацияРолейСОбъектамиАдресации(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры
	
// Отложенный обработчик на 2.0.12.4. Заменен на РеорганизацияРолейСОбъектамиАдресацииМонопольная.
// 
Процедура РеорганизацияРолейСОбъектамиАдресацииПриглашения(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры
	
// Отложенный обработчик на 2.0.14.2. Потерял актуальность.
// 
Процедура РеорганизацияРолейСОбъектамиАдресацииДескрипторыДоступаОбъектов(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (шаблоны комплексных процессов).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииШаблоныКомплексныхПроцессов() Экспорт
	
	Статус = "";
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Шаблоны комплексных процессов'; en = 'Composite process templates'"),
		Статус);
		
	// Заменим строковые представления полных ролей ссылками на полные роли, не путая их
	// с представлениями автоподстановок.
		
	ИсключаемыеАвтоподстановки = Новый Массив;
	
	АвтоподстановкиДокументов = ШаблоныДокументов.ПолучитьСписокДоступныхФункций();
	Для Каждого Автоподстановка Из АвтоподстановкиДокументов Цикл
		ИсключаемыеАвтоподстановки.Добавить(Автоподстановка.Представление);
	КонецЦикла;
	
	МассивПредметов = Новый Массив;
	МассивПредметов.Добавить("Предмет");
	АвтоподстановкиПроцессов = ШаблоныБизнесПроцессов.ПолучитьСписокДоступныхФункций(МассивПредметов);
	Для Каждого Автоподстановка Из АвтоподстановкиПроцессов Цикл
		ИсключаемыеАвтоподстановки.Добавить(СтрЗаменить(Автоподстановка.Представление, "Предмет.", ""));
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолныеРоли.Ссылка КАК Роль,
		|	ПРЕДСТАВЛЕНИЕ(ПолныеРоли.Ссылка) КАК РольСтрокой
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	НЕ ПолныеРоли.ПометкаУдаления");
	ТаблицаРолей = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРолей.Роль КАК Роль,
		|	ВЫРАЗИТЬ(ТаблицаРолей.РольСтрокой КАК СТРОКА(100)) КАК РольСтрокой
		|ПОМЕСТИТЬ РолиИПредставления
		|ИЗ
		|	&ТаблицаРолей КАК ТаблицаРолей
		|;
		|ВЫБРАТЬ
		|	Шаблоны.Ссылка,
		|	РолиИПредставления.Роль
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов КАК Шаблоны
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РолиИПредставления
		|ПО
		|	Шаблоны.УдалитьКонтролер = РолиИПредставления.РольСтрокой
		|ГДЕ
		|	Шаблоны.УдалитьКонтролер <> """"
		|	И Шаблоны.УдалитьКонтролер НЕ В (&ИсключаемыеАвтоподстановки)
		|");
	Запрос.УстановитьПараметр("ТаблицаРолей", ТаблицаРолей);
	Запрос.УстановитьПараметр("ИсключаемыеАвтоподстановки", ИсключаемыеАвтоподстановки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОбрабатываемыйОбъект.Контролер = Выборка.Роль;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбрабатываемыйОбъект);
	КонецЦикла;
	
	// Обработаем шаблоны стандартным образом.
		
	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"Справочник.ШаблоныКомплексныхБизнесПроцессов",
		"Ссылка",
		"Контролер");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписатьОбъект = Ложь;
		
		РеорганизацияРолейСОбъектамиАдресацииОбработатьПроизвольныйОбъект(
			ОбрабатываемыйОбъект,
			НужноЗаписатьОбъект);
			
		Объектов = Объектов - 1;
			
		Если Не НужноЗаписатьОбъект Тогда
			Продолжить;
		КонецЕсли;
			
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбрабатываемыйОбъект);
			
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Шаблоны комплексных процессов'; en = 'Composite process templates'"),
		,
		Объектов,
		Статус);
	
КонецПроцедуры

// Реорганизует роли с объектами адресации (участники процессов).
//
Процедура РеорганизацияРолейСОбъектамиАдресацииУчастникиПроцессов(Параметры) Экспорт
	
	Статус = "";
	Параметры.ОбработкаЗавершена = Ложь;
	
	РеорганизацияРолейСОбъектамиАдресацииПриНачалеОбработки(
		НСтр("ru = 'Участники процессов'; en = 'Process participants'"),
		Статус);

	ТекстЗапроса = "";
	
	РеорганизацияРолейДополнитьТекстЗапросаВыборкой(ТекстЗапроса, 
		"РегистрСведений.УчастникиПроцессов",
		"Процесс",
		"Участник",
		"(Процесс <> Неопределено И НЕ Процесс ЕСТЬ NULL)");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5000
		|	Ссылка
		|ИЗ (
		|" + ТекстЗапроса + ") КАК Вложенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объектов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		НужноЗаписатьУчастниковПроцесса = Ложь;
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			УчастникиПроцесса = РегистрыСведений.УчастникиПроцессов.ПолучитьУчастников(
				Выборка.Ссылка);
			
			РеорганизацияРолейСОбъектамиАдресацииОбработатьТаблицу(
				УчастникиПроцесса,
				"Участник",
				НужноЗаписатьУчастниковПроцесса);
				
			Если НужноЗаписатьУчастниковПроцесса Тогда
			
				Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
				Набор.Отбор.Процесс.Установить(Выборка.Ссылка);
				
				Для Каждого ИсточникСтрока Из УчастникиПроцесса Цикл
					Запись = Набор.Добавить();
					Запись.Процесс = Выборка.Ссылка;
					Запись.Участник = ИсточникСтрока.Участник;
					Запись.УдалитьОсновнойОбъектАдресации = ИсточникСтрока.УдалитьОсновнойОбъектАдресации;
					Запись.УдалитьДополнительныйОбъектАдресации = ИсточникСтрока.УдалитьДополнительныйОбъектАдресации;
					Запись.УдалитьУчастник = ИсточникСтрока.УдалитьУчастник;
				КонецЦикла;
				
				Набор.ДополнительныеСвойства.Вставить(
					"РеорганизацияРолейСОбъектамиАдресации", Истина);
				Набор.ОбменДанными.Загрузка = Истина;
				Набор.Записать();
				
			КонецЕсли;
				
		Исключение
				
			ОтменитьТранзакцию();
			
			РеорганизацияРолейСОбъектамиАдресацииПриОшибкеОбработки(
				НСтр("ru = 'Участники процессов'; en = 'Process participants'"),
				ТекстЗапроса,
				Выборка.Ссылка,
				ОписаниеОшибки(),
				Объектов,
				Статус);
			
			Возврат;
				
		КонецПопытки;
			
		ЗафиксироватьТранзакцию();
		
		Объектов = Объектов - 1;
		
	КонецЦикла;
	
	РеорганизацияРолейСОбъектамиАдресацииПриЗавершенииОбработки(
		НСтр("ru = 'Участники процессов'; en = 'Process participants'"),
		ТекстЗапроса,
		Объектов,
		Статус);
		
	Если Объектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Исправляет ошибку заполнения регистра сведений УчастникиМероприятия: пустые значения
// в унаследованных измерениях УдалитьИсполнитель, УдалитьОсновнойОбъектАдресации,
// УдалитьДополнительныйОбъектАдресации.
//
Процедура ЗаполнениеУнаследованныхИзмеренийРегистраУчастникиМероприятия(Параметры) Экспорт
	
	ЗапросМероприятия = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5000
		|	УчастникиМероприятия.Мероприятие КАК Мероприятие
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|ГДЕ
		|	УчастникиМероприятия.Исполнитель <> Неопределено
		|	И УчастникиМероприятия.УдалитьИсполнитель = Неопределено
		|");
		
	ВыборкаМероприятия = ЗапросМероприятия.Выполнить().Выбрать();
	
	Если ВыборкаМероприятия.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	ЗапросУчастникиМероприятия = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиМероприятия.Мероприятие КАК Мероприятие,
		|	УчастникиМероприятия.Исполнитель КАК Исполнитель,
		|	ВЫБОР КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА УчастникиМероприятия.Исполнитель.Владелец
		|		ИНАЧЕ УчастникиМероприятия.Исполнитель
		|	КОНЕЦ КАК УдалитьИсполнитель,
		|	ВЫБОР КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА УчастникиМероприятия.Исполнитель.ОсновнойОбъектАдресации
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК УдалитьОсновнойОбъектАдресации,
		|	ВЫБОР КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА УчастникиМероприятия.Исполнитель.ДополнительныйОбъектАдресации
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК УдалитьДополнительныйОбъектАдресации,
		|	МАКСИМУМ(УчастникиМероприятия.ЯвкаОбязательна) КАК ЯвкаОбязательна,
		|	МАКСИМУМ(УчастникиМероприятия.Отсутствовал) КАК Отсутствовал,
		|	МАКСИМУМ(УчастникиМероприятия.СостояниеПриглашения) КАК СостояниеПриглашения,
		|	МАКСИМУМ(УчастникиМероприятия.Порядок) КАК Порядок
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|ГДЕ
		|	УчастникиМероприятия.Мероприятие = &Мероприятие
		|СГРУППИРОВАТЬ ПО
		|	УчастникиМероприятия.Мероприятие,
		|	УчастникиМероприятия.Исполнитель,
		|	ВЫБОР КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА УчастникиМероприятия.Исполнитель.Владелец
		|		ИНАЧЕ УчастникиМероприятия.Исполнитель
		|	КОНЕЦ,
		|	ВЫБОР КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА УчастникиМероприятия.Исполнитель.ОсновнойОбъектАдресации
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА УчастникиМероприятия.Исполнитель.ДополнительныйОбъектАдресации
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ
		|");
		
	Пока ВыборкаМероприятия.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Мероприятия");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаМероприятия.Мероприятие);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиМероприятия");
		ЭлементБлокировки.УстановитьЗначение("Мероприятие", ВыборкаМероприятия.Мероприятие);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Мероприятие.Установить(ВыборкаМероприятия.Мероприятие);
			
			ЗапросУчастникиМероприятия.УстановитьПараметр("Мероприятие", ВыборкаМероприятия.Мероприятие);
			
			НаборЗаписей.Загрузить(ЗапросУчастникиМероприятия.Выполнить().Выгрузить());
			
			НаборЗаписей.Записать();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьИдентификаторТекущегоУзлаПолногоПланаОбмена()
	
	// Заполнение реквизита ИдентификаторУзла в предопределенном элементе плана обмена Полный.
	ЭтотУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена("Полный");
	Узел = ЭтотУзел.ПолучитьОбъект();
	Узел.ИдентификаторУзла = Новый УникальныйИдентификатор;
	Узел.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьУзелОбменаВПроцессах(ИдентификаторУзла)
	
	// Определяем ИдентификаторыПользователейИБ текущей базы.
	ИдентификаторыПользователейИБ = Новый Массив;
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого СтрПользователь Из ПользователиИБ Цикл
		ИдентификаторыПользователейИБ.Добавить(СтрПользователь.УникальныйИдентификатор);
	КонецЦикла;
	
	// Заполняем УзелОбмена для процессов текущей базы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ПОМЕСТИТЬ ПользователиУзла
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователейИБ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиУзла КАК ПользователиУзла
		|		ПО ДанныеБизнесПроцессов.Автор = ПользователиУзла.Ссылка
		|ГДЕ
		|	ДанныеБизнесПроцессов.УзелОбмена = &УникальныйИдентификаторПустой";
		
	Запрос.УстановитьПараметр("ИдентификаторыПользователейИБ", ИдентификаторыПользователейИБ);
	Запрос.УстановитьПараметр("УникальныйИдентификаторПустой", УникальныйИдентификаторПустой());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Процесс = Выборка.БизнесПроцесс.ПолучитьОбъект();
		Процесс.УзелОбмена = ИдентификаторУзла;
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(Процесс, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	КонецЦикла;
	
КонецПроцедуры

// Назначает объектам новые дескрипторы взамен устаревших
// 
Процедура ПереопределениеУстаревшихДескрипторовДоступа_2_0_7_2(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнениеНастройкиИспользоватьПереадресациюВоВходящихДокументах()
	
	Если Константы.ИспользоватьПереадресациюВоВходящихДокументах.Получить() Тогда 
		Возврат;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|ГДЕ
	|	ВходящиеДокументы.Переадресовавший <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвязиДокументов.СвязанныйДокумент
	|ИЗ
	|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвязиДокументов.Документ) = ТИП(Справочник.ВходящиеДокументы)
	|	И СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПереадресованДокументом)";
		
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Константы.ИспользоватьПереадресациюВоВходящихДокументах.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеВнутреннихДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеРеквизитыДокументов.ДатаСортировки,
	|	ВнутренниеДокументы.ПометкаУдаления,
	|	ВнутренниеДокументы.Ссылка КАК Документ,
	|	ВнутренниеДокументы.Валюта,
	|	ВнутренниеДокументы.ВидДокумента,
	|	ВнутренниеДокументы.ВопросДеятельности,
	|	ВнутренниеДокументы.ГрифДоступа,
	|	ВнутренниеДокументы.ДатаНачалаДействия,
	|	ВнутренниеДокументы.ДатаОкончанияДействия,
	|	КешИнформацииОбОбъектах.ДатаПроверкиЭП,
	|	ВнутренниеДокументы.ДатаРегистрации,
	|	ВнутренниеДокументы.ДатаСоздания,
	|	ВнутренниеДокументы.Дело,
	|	КешИнформацииОбОбъектах.ЕстьЗадачи,
	|	КешИнформацииОбОбъектах.ЕстьКатегории,
	|	КешИнформацииОбОбъектах.ЕстьФайлы,
	|	ВнутренниеДокументы.Заголовок,
	|	ВнутренниеДокументы.Зарегистрировал,
	|	ВнутренниеДокументы.Код,
	|	ВнутренниеДокументы.Комментарий,
	|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков,
	|	ВнутренниеДокументы.Наименование,
	|	ВнутренниеДокументы.НеДействует,
	|	ВнутренниеДокументы.НоменклатураДел,
	|	ВнутренниеДокументы.Организация,
	|	ВнутренниеДокументы.Ответственный,
	|	ВнутренниеДокументы.Папка,
	|	ВнутренниеДокументы.Подготовил,
	|	ВнутренниеДокументы.ПодписанЭП,
	|	ВнутренниеДокументы.Подразделение,
	|	ОбщиеРеквизитыДокументов.ПоследнийЭтап,
	|	ОбщиеРеквизитыДокументов.ПредставлениеСостояния,
	|	ВнутренниеДокументы.Проект,
	|	ВнутренниеДокументы.РегистрационныйНомер,
	|	ОбщиеРеквизитыДокументов.РегистрационныйНомерИДата,
	|	ВнутренниеДокументы.Содержание,
	|	ОбщиеРеквизитыДокументов.СодержитОригинал,
	|	КешИнформацииОбОбъектах.СостояниеКонтроля,
	|	ВнутренниеДокументы.СрокИсполнения,
	|	КешИнформацииОбОбъектах.СрокИсполнения КАК СрокКонтроля,
	|	КешИнформацииОбОбъектах.СрокИсполненияОбщий КАК СрокКонтроляОбщий,
	|	КешИнформацииОбОбъектах.СтатусЭП,
	|	ВнутренниеДокументы.Сумма,
	|	ВнутренниеДокументы.Утвердил,
	|	ВнутренниеДокументы.ЧисловойНомер
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|		ПО ВнутренниеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО ВнутренниеДокументы.Ссылка = КешИнформацииОбОбъектах.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеВнутреннихДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеВходящихДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеРеквизитыДокументов.ДатаСортировки,
	|	ВходящиеДокументы.ПометкаУдаления,
	|	ВходящиеДокументы.Ссылка КАК Документ,
	|	ВходящиеДокументы.Адресат,
	|	ВходящиеДокументы.Валюта,
	|	ВходящиеДокументы.ВидДокумента,
	|	ВходящиеДокументы.ВидОбращения,
	|	ВходящиеДокументы.ВопросДеятельности,
	|	ВходящиеДокументы.ГрифДоступа,
	|	КешИнформацииОбОбъектах.ДатаПроверкиЭП,
	|	ВходящиеДокументы.ДатаРегистрации,
	|	ВходящиеДокументы.ДатаСоздания,
	|	ВходящиеДокументы.Дело,
	|	ВходящиеДокументы.Дубликат,
	|	КешИнформацииОбОбъектах.ЕстьЗадачи,
	|	КешИнформацииОбОбъектах.ЕстьКатегории,
	|	КешИнформацииОбОбъектах.ЕстьФайлы,
	|	ВходящиеДокументы.Заголовок,
	|	ВходящиеДокументы.Зарегистрировал,
	|	ВходящиеДокументы.ИсходящаяДата,
	|	ВходящиеДокументы.ИсходящийНомер,
	|	ОбщиеРеквизитыДокументов.ИсходящийНомерИДата,
	|	ВходящиеДокументы.Код,
	|	ВходящиеДокументы.Комментарий,
	|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков,
	|	ВходящиеДокументы.Наименование,
	|	ВходящиеДокументы.НоменклатураДел,
	|	ВходящиеДокументы.Организация,
	|	ВходящиеДокументы.Ответственный,
	|	ВходящиеДокументы.Отправитель,
	|	ВходящиеДокументы.Переадресовавший,
	|	ВходящиеДокументы.Повторное,
	|	ВходящиеДокументы.Подписал,
	|	ВходящиеДокументы.ПодписанЭП,
	|	ВходящиеДокументы.Подразделение,
	|	КешИнформацииОбОбъектах.ПолученПоСВД,
	|	ОбщиеРеквизитыДокументов.ПоследнийЭтап,
	|	ОбщиеРеквизитыДокументов.ПредставлениеСостояния,
	|	ВходящиеДокументы.Проект,
	|	ВходящиеДокументы.РегистрационныйНомер,
	|	ОбщиеРеквизитыДокументов.РегистрационныйНомерИДата,
	|	ВходящиеДокументы.Содержание,
	|	ОбщиеРеквизитыДокументов.СодержитОригинал,
	|	КешИнформацииОбОбъектах.СостояниеКонтроля,
	|	ВходящиеДокументы.СпособПолучения,
	|	ВходящиеДокументы.СрокИсполнения,
	|	КешИнформацииОбОбъектах.СрокИсполнения КАК СрокКонтроля,
	|	КешИнформацииОбОбъектах.СрокИсполненияОбщий КАК СрокКонтроляОбщий,
	|	КешИнформацииОбОбъектах.СтатусЭП,
	|	ВходящиеДокументы.Сумма,
	|	ВходящиеДокументы.ЧисловойНомер
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|		ПО ВходящиеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО ВходящиеДокументы.Ссылка = КешИнформацииОбОбъектах.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеВходящихДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИсходящихДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеРеквизитыДокументов.ДатаСортировки,
	|	ИсходящиеДокументы.ПометкаУдаления,
	|	ИсходящиеДокументы.Ссылка КАК Документ,
	|	ИсходящиеДокументы.Валюта,
	|	ИсходящиеДокументы.ВидДокумента,
	|	ИсходящиеДокументы.ВопросДеятельности,
	|	ИсходящиеДокументы.ГрифДоступа,
	|	КешИнформацииОбОбъектах.ДатаПроверкиЭП,
	|	ИсходящиеДокументы.ДатаРегистрации,
	|	ИсходящиеДокументы.ДатаСоздания,
	|	ИсходящиеДокументы.Дело,
	|	КешИнформацииОбОбъектах.ЕстьЗадачи,
	|	КешИнформацииОбОбъектах.ЕстьКатегории,
	|	КешИнформацииОбОбъектах.ЕстьФайлы,
	|	ИсходящиеДокументы.Заголовок,
	|	ИсходящиеДокументы.Зарегистрировал,
	|	ИсходящиеДокументы.Код,
	|	ИсходящиеДокументы.Комментарий,
	|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков,
	|	ИсходящиеДокументы.Наименование,
	|	ИсходящиеДокументы.НоменклатураДел,
	|	ИсходящиеДокументы.Организация,
	|	ИсходящиеДокументы.Ответственный,
	|	ИсходящиеДокументы.Подготовил,
	|	ИсходящиеДокументы.Подписал,
	|	ИсходящиеДокументы.ПодписанЭП,
	|	ИсходящиеДокументы.Подразделение,
	|	ОбщиеРеквизитыДокументов.ПоследнийЭтап,
	|	ОбщиеРеквизитыДокументов.ПредставлениеСостояния,
	|	ИсходящиеДокументы.Проект,
	|	ИсходящиеДокументы.РегистрационныйНомер,
	|	ОбщиеРеквизитыДокументов.РегистрационныйНомерИДата,
	|	ИсходящиеДокументы.Содержание,
	|	ОбщиеРеквизитыДокументов.СодержитОригинал,
	|	КешИнформацииОбОбъектах.СостояниеКонтроля,
	|	КешИнформацииОбОбъектах.СостояниеСВД,
	|	ИсходящиеДокументы.СрокИсполнения,
	|	КешИнформацииОбОбъектах.СрокИсполнения КАК СрокКонтроля,
	|	КешИнформацииОбОбъектах.СрокИсполненияОбщий КАК СрокКонтроляОбщий,
	|	КешИнформацииОбОбъектах.СтатусЭП,
	|	ИсходящиеДокументы.Сумма,
	|	ИсходящиеДокументы.ЧисловойНомер
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
	|		ПО ИсходящиеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО ИсходящиеДокументы.Ссылка = КешИнформацииОбОбъектах.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеИсходящихДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

// Исправляет иерархию процессов в регистре сведений ДочерниеБизнесПроцессы
//
Процедура ИсправлениеИерархииПроцессов_2_0_3_4(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ГДЕ
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача <> ДанныеБизнесПроцессов.ГлавнаяЗадача
		|	И ДочерниеБизнесПроцессы.СвязующаяЗадача <> ДанныеБизнесПроцессов.ВедущаяЗадача";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.БизнесПроцесс);
			РегистрыСведений.ДочерниеБизнесПроцессы.Удалить(Выборка.БизнесПроцесс);
			РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Выборка.БизнесПроцесс, Выборка.ВедущаяЗадача);
			РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Выборка.БизнесПроцесс, Выборка.ГлавнаяЗадача);
			РазблокироватьДанныеДляРедактирования(Выборка.БизнесПроцесс);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет уникальные идентификаторы исполнителей процессов Исполнения.
//
Процедура ЗаполнитьУникальныеИдентификаторыИсполнителейПроцессовИсполнения(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИсполнениеИсполнители.Ссылка КАК Ссылка,
		|	ИсполнениеИсполнители.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Исполнение.Исполнители КАК ИсполнениеИсполнители
		|ГДЕ
		|	ИсполнениеИсполнители.ИдентификаторИсполнителя = &ИдентификаторИсполнителя
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсполнениеРезультатыИсполнения.Ссылка,
		|	ИсполнениеРезультатыИсполнения.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыИсполнения КАК ИсполнениеРезультатыИсполнения
		|ГДЕ
		|	ИсполнениеРезультатыИсполнения.ИдентификаторИсполнителя = &ИдентификаторИсполнителя
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсполнениеРезультатыПроверки.Ссылка,
		|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
		|ГДЕ
		|	ИсполнениеРезультатыПроверки.ИдентификаторИсполнителя = &ИдентификаторИсполнителя
		|ИТОГИ ПО
		|	Ссылка");
		
	УникальныйИдентификаторПустой = УникальныйИдентификаторПустой();
	
	Запрос.УстановитьПараметр("ИдентификаторИсполнителя", УникальныйИдентификаторПустой);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Попытка
			НачатьТранзакцию();
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессОбъект.ОбменДанными.Загрузка = Истина;
			ВыборкаПодчиненныхЗадач = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодчиненныхЗадач.Следующий() Цикл
				УникальныйИдентификаторЗадачи = Новый УникальныйИдентификатор;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЗадачаИсполнителя", ВыборкаПодчиненныхЗадач.ЗадачаИсполнителя);
				
				НайденныеСтроки = ПроцессОбъект.Исполнители.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из НайденныеСтроки Цикл
					Стр.ИдентификаторИсполнителя = УникальныйИдентификаторЗадачи;
				КонецЦикла;
				
				НайденныеСтроки = ПроцессОбъект.РезультатыИсполнения.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из НайденныеСтроки Цикл
					Стр.ИдентификаторИсполнителя = УникальныйИдентификаторЗадачи;
				КонецЦикла;
				
				НайденныеСтроки = ПроцессОбъект.РезультатыПроверки.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из НайденныеСтроки Цикл
					Стр.ИдентификаторИсполнителя = УникальныйИдентификаторЗадачи;
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого Стр Из ПроцессОбъект.Исполнители Цикл
				Если Стр.ИдентификаторИсполнителя = УникальныйИдентификаторПустой Тогда
					Стр.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
				КонецЕсли;
			КонецЦикла;
			
			ПроцессОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеНомераВРегистреДанныеБизнесПроцессов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Номер КАК НовыйНомер
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Номер <> ДанныеБизнесПроцессов.БизнесПроцесс.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеБизнесПроцессов");
			ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Выборка.БизнесПроцесс);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = Выборка.БизнесПроцесс;
			Запись.Завершен = Выборка.Завершен;
			Запись.Прочитать();
			Запись.Номер = Выборка.НовыйНомер;
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеСрокаИсполненияВРегистреДанныеБизнесПроцессов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен КАК Завершен,
		|	Согласование.УдалитьСрокИсполненияДатой КАК СрокИсполнения
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование КАК Согласование
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = Согласование.Ссылка
		|			И ДанныеБизнесПроцессов.Завершен = Согласование.Завершен
		|ГДЕ
		|	ДанныеБизнесПроцессов.СрокИсполнения <> Согласование.УдалитьСрокИсполненияДатой";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеБизнесПроцессов");
			ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Выборка.БизнесПроцесс);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = Выборка.БизнесПроцесс;
			Запись.Завершен = Выборка.Завершен;
			Запись.Прочитать();
			Запись.СрокИсполнения = Выборка.СрокИсполнения;
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение видов отсутствия.
Процедура ЗаполнитьВидыОтсутствий()
	
	// Если виды Отсутствия уже введны от заполнения не будет.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОтсутствий.Ссылка
		|ИЗ
		|	Справочник.ВидыОтсутствий КАК ВидыОтсутствий");
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Больничный
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Больничный'; en = 'Sickleave'");
	ВидОтсутствияОбъект.Записать();
	
	// Командировка
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Командировка'; en = 'Business trip'");
	ВидОтсутствияОбъект.Записать();
	
	// Личные обстоятельства
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Личные обстоятельства'; en = 'Personal circumstances'");
	ВидОтсутствияОбъект.Записать();
	
	// Местная командировка
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Местная командировка'; en = 'Local business trip'");
	ВидОтсутствияОбъект.Записать();
	
	// Отпуск
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Отпуск'; en = 'Vacation'");
	ВидОтсутствияОбъект.Записать();
	
	// Поликлиника
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Поликлиника'; en = 'Polyclinic'");
	ВидОтсутствияОбъект.Записать();
	
	// Другое
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Другое'; en = 'Other'");
	ВидОтсутствияОбъект.Записать();
	
КонецПроцедуры

// Возвращает хеши текстов типовых инструкций.
Функция ХешиТиповыхИнструкций()
	
	Хеши = Новый Соответствие;
	Хеши.Вставить("97 AB 0E 49 17 69 41 D3 8D 9A 33 29 41 31 58 8C D7 06 83 D3", "Дело");
	Хеши.Вставить("12 C1 8D 55 EA 76 69 89 71 A7 27 ED 69 D9 9E B5 6E 53 03 20", "ДокументыВнутренние");
	Хеши.Вставить("96 0D 6C 1F 82 FB 56 B7 71 53 08 20 28 BE B8 49 BD 17 E3 B5", "ДокументыВнутренние");
	Хеши.Вставить("53 9D DE 4E 25 15 D3 55 94 F7 7D 58 21 F0 85 13 C3 BA 90 94", "ДокументыВнутренниеДоговорныеАкт");
	Хеши.Вставить("28 60 26 1C 62 BA 29 C3 97 FC 02 DB 33 84 6A FE A9 EC 91 43", "ДокументыВнутренниеДоговорныеАкт");
	Хеши.Вставить("57 82 87 93 3F 0E B3 29 7C 6B DE 88 5E D9 71 E5 3A 55 27 DC", "ДокументыВнутренниеДоговорныеДоговорНетиповойФормы");
	Хеши.Вставить("22 70 EE 3F 04 86 7C 20 B4 11 C9 4A 35 C8 0C EB 50 0F D1 67", "ДокументыВнутренниеДоговорныеДоговорТиповойФормы");
	Хеши.Вставить("CC 2C 2E 69 B6 D1 2A E7 0E 12 D5 64 72 A8 69 DD 05 E2 6F 70", "ДокументыВнутренниеИнформационноСправочныеАкт");
	Хеши.Вставить("EB 4D C9 56 D9 B4 86 26 7E 1D 80 AC 7C CB 9E B5 B1 1C 74 73", "ДокументыВнутренниеИнформационноСправочныеАкт");
	Хеши.Вставить("F2 CD 00 DF 60 DE E5 FF D0 01 9D 86 09 A7 E6 12 D1 CE 04 00", "ДокументыВнутренниеИнформационноСправочныеЗаявление");
	Хеши.Вставить("DB C2 42 13 8A 05 BE F7 81 A1 3A E3 B9 8C 32 18 88 60 55 F0", "ДокументыВнутренниеИнформационноСправочныеЗаявление");
	Хеши.Вставить("25 BD FB F6 D5 2B E3 51 D7 A7 09 D5 0B 5D 04 71 88 A5 2E 53", "ДокументыВнутренниеИнформационноСправочныеКоммерческоеПисьмо");
	Хеши.Вставить("1A 8B C7 EE 9D CC 81 AC DD 79 98 CC 84 C9 2B 7D 5C 3F AA FB", "ДокументыВнутренниеИнформационноСправочныеОбъяснительнаяЗаписка");
	Хеши.Вставить("D0 CE 48 7B 84 FB 58 8C 34 AF 5A 4A 44 DC 58 2E 3C 1B 97 55", "ДокументыВнутренниеИнформационноСправочныеПротокол");
	Хеши.Вставить("16 52 41 28 CD 81 64 B6 19 D4 93 49 BF 72 6A 62 01 7C B4 59", "ДокументыВнутренниеИнформационноСправочныеСлужебнаяЗаписка");
	Хеши.Вставить("83 64 FD D2 AD 8B 99 26 26 FF 9D ED C7 91 E5 F0 89 CB A1 DC", "ДокументыВнутренниеИнформационноСправочныеСлужебнаяЗаписка");
	Хеши.Вставить("1A A8 6E 85 F5 B2 B6 79 E1 16 B4 08 73 7A 6F C0 A4 55 09 19", "ДокументыВнутренниеОрганизационноПравовыеДолжностнаяИнструкция");
	Хеши.Вставить("87 D1 DC C0 C6 B0 29 1A 7D EB D8 1E FC 8F B8 98 01 4F 07 C1", "ДокументыВнутренниеОрганизационноПравовыеДолжностнаяИнструкция");
	Хеши.Вставить("B1 30 C0 67 40 C5 5B 6F 7B 1B AE 19 5B 40 1A A7 F3 65 9F 5C", "ДокументыВнутренниеОрганизационноПравовыеПоложениеОПодразделении");
	Хеши.Вставить("41 25 37 07 BB E9 5F 5F 5B C0 AD A6 CE D2 30 95 32 33 06 68", "ДокументыВнутренниеОрганизационноРаспорядительныеПриказ");
	Хеши.Вставить("A4 BC C4 20 3A 7F 14 D3 F7 B2 D8 C6 4F C2 F1 61 97 84 D2 14", "ДокументыВнутренниеОрганизационноРаспорядительныеРаспоряжение");
	Хеши.Вставить("90 09 AF 36 BA 0F 96 7A F4 63 AB 2F 3A E0 66 E4 25 EE C4 BA", "ДокументыВнутренниеОрганизационноРаспорядительныеРешение");
	Хеши.Вставить("3E 18 46 1B B9 40 1B B5 61 AB 29 B9 60 7F B7 9A 66 A7 9E B1", "ДокументыВнутренниеРегистрация");
	Хеши.Вставить("ED 11 2D 36 2E 64 64 2F EF 4C A3 A3 2F 96 53 47 B6 91 EB B3", "ДокументыВнутренниеРегламентныеИнструкция");
	Хеши.Вставить("C1 FD F4 B2 4F 30 BA 47 18 58 95 AD 7D E1 77 8C 66 3A 51 46", "ДокументыВнутренниеРегламентныеМетодика");
	Хеши.Вставить("B5 E4 2C 16 72 A5 AE 8A 25 42 73 B7 ED E3 0F AF 4B 23 22 DB", "ДокументыВнутренниеРегламентныеМетодика");
	Хеши.Вставить("BC 4D A3 24 45 CA 2D 8E F6 12 09 5C 53 1B 9D 03 A3 72 8E F0", "ДокументыВнутренниеРегламентныеПолитика");
	Хеши.Вставить("26 94 AC 47 81 8B B0 D9 1D DF 8B 34 35 9F D3 D1 0C 1A 8C FE", "ДокументыВнутренниеРегламентныеПоложение");
	Хеши.Вставить("DB D3 DE D7 EB B7 0A 37 B5 BD 41 7B D6 F4 D8 DA 38 64 36 93", "ДокументыВнутренниеРегламентныеПоложение");
	Хеши.Вставить("8D 09 AA 28 66 23 9B 56 69 9D CE 7A AA A8 92 D5 DE CC 28 12", "ДокументыВнутренниеРегламентныеПравила");
	Хеши.Вставить("9B 32 DF 46 C9 F2 49 D8 82 C7 03 23 EE F6 4D DD 73 60 BE C5", "ДокументыВнутренниеРегламентныеТехнологическаяКартаОперации");
	Хеши.Вставить("04 9C A2 08 49 1B 7A 73 0A 22 E3 F8 63 38 CD 11 2C E8 E4 49", "ДокументыВходящиеРегистрация");
	Хеши.Вставить("C3 25 78 08 43 B9 AE 68 FE C7 96 76 85 93 9E 1C 15 7F 36 B1", "ДокументыВходящиеРегистрация");
	Хеши.Вставить("99 E6 43 3A 79 B5 E7 FE 2D B0 E4 54 85 D3 37 C3 EA 9A 9F 25", "ДокументыИсходящиеОтправка");
	Хеши.Вставить("D5 39 F3 D2 9F 15 6F 28 20 38 A7 E8 F0 65 9D D9 3F 7D 59 BB", "ДокументыИсходящиеОтправка");
	Хеши.Вставить("AB 91 D6 33 16 25 44 E6 52 FD DC C8 F1 75 A3 06 05 4F BE 89", "ДокументыИсходящиеРегистрация");
	Хеши.Вставить("98 D5 9D E9 17 8E EC 2E 64 AF 6C 58 55 7F 08 D3 13 11 C4 06", "ДокументыИсходящиеСлужебныеПисьма");
	Хеши.Вставить("49 18 A1 4E BA 81 ED 3F 72 B8 1F E1 65 6A DC A7 D3 3E 01 F1", "ДокументыИсходящиеСлужебныеПисьма");
	Хеши.Вставить("31 EA 6F FA 26 52 77 13 16 54 99 56 6A E9 7B 53 9B DF CA E2", "ДокументыИсходящиеСправка");
	Хеши.Вставить("B7 69 9E 32 F4 39 7A 4F 41 23 9D E5 C7 A9 EC 29 1C CA 2B F9", "ЕжедневныйОтчет");
	Хеши.Вставить("DE CF D6 6B BD 3F 8F AD 15 91 EA C8 75 B6 96 65 A3 07 FF 6E", "ЕжедневныйОтчет");
	Хеши.Вставить("C6 31 23 63 23 94 49 C6 DD 70 7B CD 8E E6 5D 8D 35 69 93 63", "ЖурналПередачи");
	Хеши.Вставить("46 C4 4A 64 3C 20 C1 9E C6 D0 16 72 D2 A7 58 EC 54 AF 6F C8", "ЖурналПередачи");
	Хеши.Вставить("BC E1 08 94 9B D7 94 99 DC A8 DE E9 50 69 9A 39 A5 13 57 70", "ЗадачаНаИсполнение");
	Хеши.Вставить("A2 A1 49 74 7A 00 F0 E9 CC 58 70 26 EA A4 33 12 9A C2 10 B9", "ЗадачаНаИсполнениеОтветственному");
	Хеши.Вставить("5D 93 69 AB 49 DE 32 2D 82 39 BC 50 AF 69 9E 5D 46 28 D7 77", "ЗадачаНаОзнакомление");
	Хеши.Вставить("B3 BB 69 A8 6F 85 B7 AB BB 6D CD 31 D6 83 0D 21 C9 06 21 E2", "ЗадачаНаОзнакомлениеСРассмотрением");
	Хеши.Вставить("8B 69 3E 7C 9D A3 38 ED 02 B8 C6 B3 3A 79 6C 35 F1 89 17 81", "ЗадачаНаОзнакомлениеСРассмотрением");
	Хеши.Вставить("9F 80 4D C9 57 60 96 32 3F 75 6C 8B B8 78 65 0A 82 2B 9E 29", "ЗадачаНаОзнакомлениеСРегистрацией");
	Хеши.Вставить("6F D3 35 71 5E 8E E2 95 EE 56 64 D6 BE 6C FE 3A F9 08 57 DC", "ЗадачаНаОзнакомлениеССогласованием");
	Хеши.Вставить("68 13 96 25 7C F7 8D AA 9D D4 95 26 61 D2 20 D2 7F 59 E8 A8", "ЗадачаНаОзнакомлениеСУтверждением");
	Хеши.Вставить("CA 51 8B D6 0D 32 EC D9 B3 7E 82 24 FB 73 B3 D9 54 6B F4 CC", "ЗадачаНаПоручение");
	Хеши.Вставить("CB E1 FB 13 EA 3F 71 92 A0 63 F8 80 A2 2C E5 64 E5 48 C9 D7", "ЗадачаНаПоручение");
	Хеши.Вставить("CF 43 A2 A9 4E 46 04 15 57 61 7B 0F 6F AA FD 31 44 7A 57 83", "ЗадачаНаРассмотрение");
	Хеши.Вставить("F2 01 DA 8C 57 E0 60 57 9D D9 01 3B 61 47 8A 5C BE 49 F6 15", "ЗадачаНаРассмотрение");
	Хеши.Вставить("70 CF 13 7D 24 CF 8A 22 84 E9 E0 C5 88 C3 9D 01 8D 3A 6F 5C", "ЗадачаНаСогласование");
	Хеши.Вставить("AB FD A6 C3 9C DE 00 B7 3E F0 48 B1 27 C3 61 D7 1E 49 22 90", "ЗадачаНаСогласование");
	Хеши.Вставить("03 41 5D 40 A2 58 C8 BE EA E3 FF 81 E2 94 E0 4E 08 52 C8 83", "ЗадачаНаУтверждение");
	Хеши.Вставить("5E BD C3 DB 9E 16 35 CE C4 93 5C 9F B9 BE C6 B9 B9 75 6D F8", "Задачи");
	Хеши.Вставить("6E 0C C5 08 5E 6A 2C 81 FC 40 37 5D A3 A2 F0 DC 05 D4 FA 16", "Задачи");
	Хеши.Вставить("0A E9 1D 80 F0 82 74 E2 02 9B 5B CF 41 D8 39 69 10 11 20 9E", "НоменклатураДел");
	Хеши.Вставить("74 35 A6 9D 71 1B C5 01 6F 08 49 03 04 F8 43 13 7A A7 9C B2", "ПроцессИсполнение");
	Хеши.Вставить("AD DA 01 34 2D 5C D5 95 83 25 02 1F 7D 2D 60 9D 6C 62 AD B4", "ПроцессИсполнение");
	Хеши.Вставить("8B 0F 5A EA E3 F5 0E 1C 52 27 2F CD 99 E8 BC 53 E3 14 83 4D", "ПроцессИсполнениеНаправитьПриказ");
	Хеши.Вставить("AE 9D A3 A1 E3 B3 05 47 53 F1 B9 31 AB 09 26 9B C7 6A CF E5", "ПроцессОбработкаВнутреннегоДокумента");
	Хеши.Вставить("6D D3 DB 56 53 B2 C2 1D CE BC 24 0F 13 7D BE BD 46 37 B2 F2", "ПроцессОбработкаВходящегоДокумента");
	Хеши.Вставить("87 E1 60 A2 56 F0 EC 2F 94 82 E7 EC FE 5C 13 6C 4C 27 C8 D6", "ПроцессОбработкаИсходящегоДокумента");
	Хеши.Вставить("0D C4 5B 64 31 BF 5C A3 EF 0A 42 B7 71 F9 F0 7B C8 F3 F6 AF", "ПроцессОзнакомление");
	Хеши.Вставить("44 6A A6 7D 86 47 32 D1 5F FF BB 7C 50 32 37 2E 9B E1 55 5E", "ПроцессОзнакомление");
	Хеши.Вставить("4C 13 91 16 CE 20 5B 03 13 C2 71 80 EE AC 8E 20 3D 9C ED D8", "ПроцессПоручение");
	Хеши.Вставить("A2 45 C4 FA 36 F3 33 67 FF 82 2B 61 16 14 E1 EF 97 60 C9 C6", "ПроцессПоручение");
	Хеши.Вставить("E4 38 A9 34 E7 B9 14 6C 4C 74 3E 4A 85 54 3D A3 0C 18 B8 DD", "ПроцессРассмотрение");
	Хеши.Вставить("F0 82 61 34 E8 FA 36 64 08 33 BD 7E 34 83 F1 5E 85 FE FC F0", "ПроцессРассмотрение");
	Хеши.Вставить("65 D4 D6 74 A8 3D 3F E3 FC CA 38 F5 A8 66 A3 49 E1 49 67 2F", "ПроцессРегистрация");
	Хеши.Вставить("42 A5 06 2A 67 3F 29 0C 2F 3F 22 CB 1F B4 20 DC 15 B4 32 D1", "ПроцессРегистрация");
	Хеши.Вставить("29 E0 A0 C9 B6 E9 B9 52 C2 C9 49 EC B9 8E D5 87 FA 3F 38 FE", "ПроцессСогласование");
	Хеши.Вставить("B5 BC C8 9D 75 88 F2 22 F1 0A A4 B1 47 D1 35 04 F1 3E 6F BC", "ПроцессСогласование");
	Хеши.Вставить("1E D7 BE AE AD 90 42 C0 49 20 B2 89 69 4B DB 33 AD 01 6D E6", "ПроцессУтверждение");
	Хеши.Вставить("A6 4B 37 46 66 A9 54 38 43 94 A0 DB A1 F9 0F 48 A7 D3 D7 6C", "ПроцессУтверждение");
	Хеши.Вставить("35 5F 88 1A 2C 2E A7 15 FF 45 EB E5 10 AF C4 C0 D7 7A 89 5A", "ЭлектроннаяПодпись");
	
	Возврат Хеши;
	
КонецФункции

// Исправление признака наличия неисполненных задач у предметов (вх/ихс/внутр. документов и т.д.).
//
Процедура ИсправлениеПризнакаНаличияНеисполненныхЗадачУОбъекта(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	КешИнформацииОбОбъектах.Объект
		|ИЗ
		|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ЗадачаИсполнителяПредметы.Предмет КАК Предмет
		|		ИЗ
		|			Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ГДЕ
		|			НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|			И ЗадачаИсполнителяПредметы.Ссылка.СостояниеБизнесПроцесса В (ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен), ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка))
		|			И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления) КАК ПредметыСАктивнымиЗадачами
		|		ПО КешИнформацииОбОбъектах.Объект = ПредметыСАктивнымиЗадачами.Предмет
		|ГДЕ
		|	КешИнформацииОбОбъектах.ЕстьЗадачи = ИСТИНА
		|	И ПредметыСАктивнымиЗадачами.Предмет ЕСТЬ NULL
		|	И КешИнформацииОбОбъектах.Объект <> НЕОПРЕДЕЛЕНО";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
		
	// Запрос для определения наличия неисполненных задач по объекту.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|	И ЗадачаИсполнителяПредметы.Ссылка.СостояниеБизнесПроцесса В (ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен), ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка))
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
		|	И ЗадачаИсполнителяПредметы.Предмет = &Предмет";
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КешИнформацииОбОбъектах");
			ЭлементБлокировки.УстановитьЗначение("Объект", Выборка.Объект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Предмет", Выборка.Объект);
			
			Если Запрос.Выполнить().Пустой() Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Выборка.Объект, "ЕстьЗадачи", Ложь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение ресурса Состояние в регистре сведений ДанныеБизнесПроцессов
//
Процедура ЗаполнениеРесурсаСостояниеВРегистреДанныеБизнесПроцессов(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
		|	И ДанныеБизнесПроцессов.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.БизнесПроцесс);
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = Выборка.БизнесПроцесс;
			Запись.Завершен = Выборка.Завершен;
			Запись.Прочитать();
			
			Если НЕ ЗначениеЗаполнено(Запись.Состояние) Тогда
				
				РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.БизнесПроцесс, "Состояние");
				
				Если ЗначениеЗаполнено(РеквизитыПроцесса) Тогда
					
					ЗаполнитьЗначенияСвойств(Запись, РеквизитыПроцесса);
					
					Запись.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(Выборка.БизнесПроцесс);
			
		Исключение
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение состояния процессов РешениеВопросовВыполненияЗадач.
// Так же заполняется состояние в регистре сведений ДанныеБизнесПроцессов
//
Процедура ЗаполнениеРеквизитаСостояниеВПроцессахРешениеВопросВыполненияЗадач(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
			
			ЗначенияПолей = Новый Структура("Состояние", Перечисления.СостоянияБизнесПроцессов.Активен);
			
			БизнесПроцессыИЗадачиВызовСервера.ЗаписатьВСписокБизнесПроцессов(ПроцессОбъект.Ссылка,
				ЗначенияПолей);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Процесс);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			Продолжить;
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеРеквизитовДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 300
		|	Документы.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК Документы
		|ГДЕ
		|	(Документы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы <> Документы.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы
		|			ИЛИ Документы.Шаблон <> Документы.УдалитьШаблон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.ДатаСоздания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры.ОбработкаЗавершена = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Шаблон = ДокументОбъект.УдалитьШаблон;
		ДокументОбъект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = 
			ДокументОбъект.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 300
		|	Документы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК Документы
		|ГДЕ
		|	(Документы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы <> Документы.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы
		|			ИЛИ Документы.Шаблон <> Документы.УдалитьШаблон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.ДатаСоздания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры.ОбработкаЗавершена = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Шаблон = ДокументОбъект.УдалитьШаблон;
		ДокументОбъект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = 
			ДокументОбъект.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 300
		|	Документы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК Документы
		|ГДЕ
		|	(Документы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы <> Документы.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы
		|			ИЛИ Документы.Шаблон <> Документы.УдалитьШаблон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.ДатаСоздания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры.ОбработкаЗавершена = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Шаблон = ДокументОбъект.УдалитьШаблон;
		ДокументОбъект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = 
			ДокументОбъект.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_КОРП_СВерсииПРОФ()
	
	// сперва найдем виды бизнес-событий - помеченные на удаление и не-предопределенные. 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыБизнесСобытий.Ссылка КАК Ссылка,
		|	ВидыБизнесСобытий.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыБизнесСобытий КАК ВидыБизнесСобытий
		|ГДЕ
		|	ВидыБизнесСобытий.ПометкаУдаления = ИСТИНА
		|	И ВидыБизнесСобытий.Предопределенный = ЛОЖЬ";
	
	ТаблицаСтарыхВидовСобытий = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидовСобытий = Новый Соответствие;
	ВидыСобытий = Новый Массив;
	
	// затем найдем им соответствие - по Наименованию - среди предопределенных, не-помеченных на удаление
	Для Каждого Строка Из ТаблицаСтарыхВидовСобытий Цикл
		
		СтарыйВидСобытий = Строка.Ссылка;
		НовыйВидСобытий = НайтиНовыйВидСобытий(Строка.Наименование);
		
		Если ЗначениеЗаполнено(НовыйВидСобытий) Тогда
			СоответствиеВидовСобытий[СтарыйВидСобытий] = НовыйВидСобытий;
			ВидыСобытий.Добавить(СтарыйВидСобытий);
		КонецЕсли;	
		
	КонецЦикла;
	
	// заменим старые ссылки на новые - в ПроизошедшиеБизнесСобытия
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.ВидСобытия КАК ВидСобытия,
		|	ПроизошедшиеБизнесСобытия.Обработано,
		|	ПроизошедшиеБизнесСобытия.Идентификатор,
		|	ПроизошедшиеБизнесСобытия.Период
		|ИЗ
		|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.ВидСобытия В(&ВидыСобытий)";
		
	Запрос.УстановитьПараметр("ВидыСобытий", ВидыСобытий);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Идентификатор = Выборка.Идентификатор;
		МенеджерЗаписи.Обработано = Выборка.Обработано;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.ВидСобытия = СоответствиеВидовСобытий[Выборка.ВидСобытия];
		МенеджерЗаписи.Записать();
		
	КонецЦикла;	
	
	// заменим старые ссылки на новые - в ПравилаАвтоматическогоЗапускаБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия КАК ВидБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК КлассИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия КАК ОрганизацияИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия В(&ВидыСобытий)";
	Запрос.УстановитьПараметр("ВидыСобытий", ВидыСобытий);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БизнесСобытияВызовСервера.УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
			Выборка.ВидБизнесСобытия, 
			Выборка.ШаблонБизнесПроцесса,
			Выборка.КлассИсточникаБизнесСобытия, 
			Выборка.ОрганизацияИсточникаБизнесСобытия);
			
		БизнесСобытияВызовСервера.СохранитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
			СоответствиеВидовСобытий[Выборка.ВидБизнесСобытия], 
			Выборка.ШаблонБизнесПроцесса,
			Выборка.КлассИсточникаБизнесСобытия, 
			Неопределено, 
			Выборка.ОрганизацияИсточникаБизнесСобытия);
			
	КонецЦикла;	
		
	ЗаполнитьПредставлениеВПерепискеСРангом();
	
	// Необходимо переопределить контактную информацию контрагента "Сайт"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.СайтКонтрагента;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Найдем виды контактной информации - помеченные на удаление и не предопределенные.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ПометкаУдаления = ИСТИНА
		|	И ВидыКонтактнойИнформации.Предопределенный = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)";
	
	ТаблицаСтарыхВидовКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидовКонтактнойИнформации = Новый Соответствие;
	ВидыКонтактнойИнформации = Новый Массив;
	
	// Найдем им соответствие - по Наименованию - среди предопределенных, не помеченных на удаление
	Для Каждого Строка Из ТаблицаСтарыхВидовКонтактнойИнформации Цикл
		СтарыйВид = Строка.Ссылка;
		НовыйВид = НайтиПредопределенныйВидКонтактнойИнформации(Строка.Наименование);
		
		Если ЗначениеЗаполнено(НовыйВид) Тогда
			СоответствиеВидовКонтактнойИнформации[СтарыйВид] = НовыйВид;
			ВидыКонтактнойИнформации.Добавить(СтарыйВид);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыКонтактнойИнформации.Количество() > 0 Тогда 
		// В контрагентах заменим старые виды КИ на новые
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Вид В(&ВидыКонтактнойИнформации)";
			
		Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Для Каждого КИ Из ТекущийОбъект.КонтактнаяИнформация Цикл 
					Если ВидыКонтактнойИнформации.Найти(КИ.Вид) <> Неопределено Тогда 
						НовыйВид = СоответствиеВидовКонтактнойИнформации[КИ.Вид];
						КИ.Вид = НовыйВид;
					КонецЕсли;
				КонецЦикла;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиПредопределенныйВидКонтактнойИнформации(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.Предопределенный = ИСТИНА
		|	И ВидыКонтактнойИнформации.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);	
	
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаВидов.Количество() = 1 Тогда
		Возврат ТаблицаВидов[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Функция НайтиНовыйВидСобытий(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыБизнесСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыБизнесСобытий КАК ВидыБизнесСобытий
		|ГДЕ
		|	ВидыБизнесСобытий.ПометкаУдаления = ЛОЖЬ
		|	И ВидыБизнесСобытий.Предопределенный = ИСТИНА
		|	И ВидыБизнесСобытий.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);	
	
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаВидов.Количество() = 1 Тогда
		Возврат ТаблицаВидов[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Функция ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Роль)
	
	НастройкаОбъект.ИспользоватьДля.Очистить();
	
	Если Роль = "Пользователь" Тогда 
		
		НоваяСтрока = НастройкаОбъект.ИспользоватьДля.Добавить();
		НоваяСтрока.Участник = Справочники.РабочиеГруппы.ВсеПользователи;
	
	ИначеЕсли Роль = "Делопроизводитель" Тогда 
		
		Если НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
			ЭтоДелопроизводитель = "Роль.РегистрацияВходящихДокументов";
		ИначеЕсли НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда 
			ЭтоДелопроизводитель = "Роль.РегистрацияИсходящихДокументов";
		ИначеЕсли НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда 	
			ЭтоДелопроизводитель = "Роль.РегистрацияВнутреннихДокументов";
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	НЕ ГруппыДоступа.ПометкаУдаления
		|	И ГруппыДоступа.Профиль В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПрофилиГруппДоступаРоли.Ссылка
		|			ИЗ
		|				Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|			ГДЕ
		|				ПрофилиГруппДоступаРоли.Роль = &Роль
		|				И НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Роль", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭтоДелопроизводитель));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = НастройкаОбъект.ИспользоватьДля.Добавить();
			НоваяСтрока.Участник = Выборка.Ссылка;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецФункции	

Процедура ЗаполнитьПредставлениеВПерепискеСРангом() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	СведенияОПользователяхДокументооборот.Ранг КАК Ранг
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО (СведенияОПользователяхДокументооборот.Пользователь = Пользователи.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
		
	ТаблицыПользователей = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого Строка Из ТаблицыПользователей Цикл
		
		ПользовательОбъект = Строка.Ссылка.ПолучитьОбъект();
		
		СтрокаРанга = ПользователиДокументооборот.ПолучитьСтрокуРанга(Строка.Ранг);
		
		ПользовательОбъект.ПредставлениеВПерепискеСРангом = ПользовательОбъект.ПредставлениеВПереписке;
		Если ПустаяСтрока(ПользовательОбъект.ПредставлениеВПерепискеСРангом) Тогда
			ПользовательОбъект.ПредставлениеВПерепискеСРангом = ПользовательОбъект.Наименование;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(СтрокаРанга) Тогда
			ПользовательОбъект.ПредставлениеВПерепискеСРангом = ПользовательОбъект.ПредставлениеВПерепискеСРангом + " " + СтрокаРанга;
		КонецЕсли;	
		 
		ПользовательОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьКоррекциюЗадачИПроцессовПослеПереходаСПРОФНаКОРП()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
		ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		ПроцессОбъект = Выборка.БизнесПроцесс.ПолучитьОбъект();
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		ПроцессОбъект.Записать();
		
	КонецЦикла;
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	ЗаполнитьУзелОбменаВПроцессах(ЭтотУзел);
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПеренестиКонтактыИзКонтактыПользователейВГруппыКонтактовПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьКонтактыПользователей.Контакт,
		|	УдалитьКонтактыПользователей.КонтактнаяИнформация,
		|	УдалитьКонтактыПользователей.Пользователь,
		|	УдалитьКонтактыПользователей.Тип,
		|	УдалитьКонтактыПользователей.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.УдалитьКонтактыПользователей КАК УдалитьКонтактыПользователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(
			Выборка.Контакт, Выборка.КонтактнаяИнформация, , Выборка.Пользователь);
		
	КонецЦикла;		
	
КонецПроцедуры	

Процедура СоздатьВидБизнесСобытий(ВидСобытия, ПолноеНаименование)
	
	Элемент = ВидСобытия.ПолучитьОбъект();
	
	Элемент.Наименование = ПолноеНаименование;
	Элемент.ДатаСоздания = ТекущаяДатаСеанса();
	Элемент.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	Элемент.Записать();
	
КонецПроцедуры	

Процедура СоздатьВалюту(Код, ПараметрыПрописиНаРусском, КлассификаторТаблица)

	СтрокаТаблицы = КлассификаторТаблица.Найти(Код, "Code");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СправочникСсылка = Справочники.Валюты.НайтиПоКоду(Код);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		КонецЕсли;
		
		СправочникОбъект.Код = Код;
		СправочникОбъект.Наименование = СтрокаТаблицы.CodeSymbol;
		СправочникОбъект.НаименованиеПолное = СтрокаТаблицы.Name;
		СправочникОбъект.ЗагружаетсяИзИнтернета = СтрокаТаблицы.RBCLoading;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
        СправочникОбъект.Записать();

	КонецЕсли;

КонецПроцедуры // СоздатьВалюту()

Функция СоздатьВидПроекта(Наименование, АвтоматическиВестиСостав)
	
	ВидПроектаОбъект = Справочники.ВидыПроектов.СоздатьЭлемент();
	ВидПроектаОбъект.Наименование = Наименование;
	ВидПроектаОбъект.АвтоматическиВестиСоставУчастниковРабочейГруппы = АвтоматическиВестиСостав;
	ВидПроектаОбъект.Записать();
	Возврат ВидПроектаОбъект.Ссылка;

КонецФункции

Процедура ЗаполнитьПраваПредопределенных() Экспорт
	
	// Шаблоны файлов
	Шаблоны = Справочники.ПапкиФайлов.Шаблоны;
	ТаблицаНастроек = РегистрыСведений.НастройкиПравОбъектов.Прочитать(Шаблоны).Настройки;
	Если ТаблицаНастроек.Количество() = 0 Тогда
		Настройка = ТаблицаНастроек.Добавить();
		Настройка.ВладелецНастройки = Шаблоны;
		Настройка.НаследованиеРазрешено = Истина;
		Настройка.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
		Настройка.ЧтениеПапокИФайлов = Истина;
		РегистрыСведений.НастройкиПравОбъектов.Записать(Шаблоны, ТаблицаНастроек, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет предметы, условия и значения автоподстановки в шаблонах процессов
// при переходе на версию 1.3.1.2
//
Процедура ЗаполнитьПредметыШаблоновПроцессов()
	
	// Отключение механизма прав для увеличения быстродействия
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ИмяПредметаСтрокойПоУмолчанию = НСтр("ru='Предмет'; en = 'Subject'");
	ИмяПредметаПоУмолчанию = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредмета(ИмяПредметаСтрокойПоУмолчанию);
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить("ШаблоныИсполнения");
	ТипыШаблонов.Добавить("ШаблоныОзнакомления");
	ТипыШаблонов.Добавить("ШаблоныПоручения");
	ТипыШаблонов.Добавить("ШаблоныПриглашения");
	ТипыШаблонов.Добавить("ШаблоныРассмотрения");
	ТипыШаблонов.Добавить("ШаблоныРегистрации");
	ТипыШаблонов.Добавить("ШаблоныСогласования");
	ТипыШаблонов.Добавить("ШаблоныУтверждения");
	ТипыШаблонов.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	
	ЗначенияАвтоподстановки = Новый Массив;
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Автор документа'; en = 'Document author'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Непосредственный руководитель автора документа'; en = 'Immediate supervisor of the document author'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Все руководители автора документа'; en = 'All heads of the document author'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Все подчиненные автора документа'; en = 'All subordinates of the document author'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Все коллеги автора документа'; en = 'All colleagues of the author of document'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Руководитель организации'; en = 'Head of company'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Ответственный за документ'; en = 'Responsible for document'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Участники мероприятия'; en = 'Event attendees'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Председатель мероприятия'; en = 'Chairman of the event'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Секретарь мероприятия'; en = 'Secretary of the event'"));
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	Для Каждого ТипШаблона Из ТипыШаблонов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
		|ОБЪЕДИНИТЬ ВСЕ")
		+ "
		|ВЫБРАТЬ
		|	Шаблон.Ссылка,
		|	Шаблон.ВладелецШаблона,
		|	Шаблон.ШаблонВКомплексномПроцессе
		|ИЗ
		|	Справочник.%Таблица% КАК Шаблон
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%Таблица%.Предметы КАК ПредметыШаблона
		|		ПО Шаблон.Ссылка = ПредметыШаблона.Ссылка
		|ГДЕ
		|	ПредметыШаблона.Ссылка ЕСТЬ NULL
		|	И НЕ Шаблон.ЭтоГруппа";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", ТипШаблона);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Исполнитель,Проверяющий,Контролер");
		
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("Исполнитель", "Исполнители");
		
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеДействий = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Записывать = Ложь;
		
		Если ТипЗнч(Выборка.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВладелецШаблона, "УдалитьПредмет");
			Если ЗначениеЗаполнено(Предмет) Тогда
				ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет);
				ИмяПредметаСтрокой = Строка(ИмяПредмета);
				Записывать = Истина;
			Иначе
				ИмяПредмета = ИмяПредметаПоУмолчанию;
				ИмяПредметаСтрокой = ИмяПредметаСтрокойПоУмолчанию;
			КонецЕсли;
		Иначе
			ИмяПредмета = ИмяПредметаПоУмолчанию;
			ИмяПредметаСтрокой = ИмяПредметаСтрокойПоУмолчанию;
		КонецЕсли;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СтрокаПредмета = ШаблонОбъект.Предметы.Добавить();
		СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
		СтрокаПредмета.ИмяПредмета = ИмяПредмета;
		
		ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Выборка.Ссылка);
		ДействияПроцесса = СоответствиеДействий.Получить(ПроцессСсылка);
		Если ДействияПроцесса = Неопределено Тогда
			ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
			СоответствиеДействий.Вставить(ПроцессСсылка, ДействияПроцесса);
		КонецЕсли;
			
		Для Каждого Действие Из ДействияПроцесса Цикл
			СтрокаЗадачи = ШаблонОбъект.ПредметыЗадач.Добавить();
			СтрокаЗадачи.ТочкаМаршрута = Действие;
			СтрокаЗадачи.ИмяПредмета = ИмяПредмета;
		КонецЦикла;
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			Для Каждого Этап Из ШаблонОбъект.Этапы Цикл
				ПроцессЭтапа = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Этап.ШаблонБизнесПроцесса);
				ДействияЭтапа = СоответствиеДействий.Получить(ПроцессЭтапа);
				Если ДействияЭтапа = Неопределено Тогда
					ДействияЭтапа = Мультипредметность.ПолучитьДействияПроцесса(ПроцессЭтапа);
					СоответствиеДействий.Вставить(ПроцессЭтапа, ДействияЭтапа);
				КонецЕсли;
				Для Каждого Подэтап Из ДействияЭтапа Цикл
					СтрокаЗадачи = ШаблонОбъект.ПредметыЗадач.Добавить();
					СтрокаЗадачи.ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
					СтрокаЗадачи.ШаблонБизнесПроцесса = Этап.ШаблонБизнесПроцесса;
					СтрокаЗадачи.ТочкаМаршрута = Подэтап;
					СтрокаЗадачи.ИмяПредмета = ИмяПредмета;
					Записывать = Истина;
				КонецЦикла;
			КонецЦикла;
			Если ШаблонОбъект.ПредметыЗадач.Количество() > 0 И ШаблонОбъект.Предметы.Количество() = 0 Тогда
				СтрокаПредмета = ШаблонОбъект.Предметы.Добавить();
				СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
				СтрокаПредмета.ИмяПредмета = ИмяПредмета;
				Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ШаблонМетаданные = Выборка.Ссылка.Метаданные();
		
		Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
			Если ШаблонМетаданные.Реквизиты.Найти(Реквизит) <> Неопределено Тогда
				Если ТипЗнч(ШаблонОбъект[Реквизит]) = Тип("Строка") И ЗначенияАвтоподстановки.Найти(ШаблонОбъект[Реквизит]) <> Неопределено Тогда
					ШаблонОбъект[Реквизит] = ИмяПредметаСтрокой + "." + ШаблонОбъект[Реквизит];
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого ЭлементСоответствия Из СоответствиеТаблиц Цикл
			Если ШаблонМетаданные.ТабличныеЧасти.Найти(ЭлементСоответствия.Значение) <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект[ЭлементСоответствия.Значение] Цикл
					Если ТипЗнч(Строка[ЭлементСоответствия.Ключ]) = Тип("Строка") 
					   И ЗначенияАвтоподстановки.Найти(Строка[ЭлементСоответствия.Ключ]) <> Неопределено Тогда
						Строка[ЭлементСоответствия.Ключ] = ИмяПредметаСтрокой + "." + Строка[ЭлементСоответствия.Ключ];
						Записывать = Истина;
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЦикла;
		
		Если ШаблонМетаданные.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
			Если ШаблонМетаданные.ТабличныеЧасти.Исполнители.Реквизиты.Найти("Условие") <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект.Исполнители Цикл
					Если ЗначениеЗаполнено(Строка.Условие) Тогда
						Строка.ИмяПредметаУсловия = ИмяПредмета;
						Записывать = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ШаблонМетаданные.ТабличныеЧасти.Найти("ПредшественникиЭтапов") <> Неопределено Тогда
			Для Каждого Строка Из ШаблонОбъект.ПредшественникиЭтапов Цикл
				Если ЗначениеЗаполнено(Строка.УсловиеПерехода) Тогда
					Строка.ИмяПредметаУсловия = ИмяПредмета;
					Записывать = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Записывать Тогда
			ШаблонОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Включение механизма прав доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры 

Процедура ЗаполнитьПраваПапкиПроектов(СсылкаНаПапку)
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
	Если ОписаниеПрав.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ОписаниеПрав.Добавить();
	Строка.ВладелецНастройки = СсылкаНаПапку;
	Строка.ЧтениеПапокИПроектов = Истина;
	Строка.ДобавлениеПапокИПроектов = Истина; 
	Строка.ИзменениеПапокИПроектов = Истина;
	Строка.ИзменениеПапокПроектов = Неопределено;
	Строка.ПометкаУдаленияПапокИПроектов = Истина;
	Строка.УправлениеПравами = Неопределено;
	Строка.НаследованиеРазрешено = Истина;
	Строка.НастройкаРодителя = Ложь;
	Строка.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
	
	РегистрыСведений.НастройкиПравОбъектов.Записать(СсылкаНаПапку, ОписаниеПрав, Истина);
	
КонецПроцедуры

Процедура ВключитьМетаданноеВОбластьДелигирования(ПолноеИмяМетаданного, ИдентификаторОбластиДелегирования)
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяМетаданного);
	
	ОбластьДелегирования = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИдентификаторОбластиДелегирования));
	Если ЗначениеЗаполнено(ОбластьДелегирования) Тогда
		
		ОбластьДелегированияОбъект = ОбластьДелегирования.ПолучитьОбъект();
		НайденнаяСтрока = ОбластьДелегированияОбъект.Состав.Найти(ИдентификаторОбъектаМетаданных, "ОбъектМетаданных");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ОбластьДелегированияОбъект.Состав.Добавить();
			НоваяСтрока.ОбъектМетаданных = ИдентификаторОбъектаМетаданных;
			ОбластьДелегированияОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПраваПапкиФорума(СсылкаНаПапку) Экспорт
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
	Если ОписаниеПрав.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ОписаниеПрав.Добавить();
	Строка.ВладелецНастройки = СсылкаНаПапку;
	Строка.ЧтениеПапокИТем = Истина;
	Строка.ДобавлениеТемИСообщений = Истина; 
	Строка.ИзменениеТемИСообщений = Неопределено;
	Строка.ИзменениеПапок = Неопределено;
	Строка.ПометкаУдаленияТемИСообщений = Неопределено;
	Строка.УправлениеПравами = Неопределено;
	Строка.НаследованиеРазрешено = Истина;
	Строка.НастройкаРодителя = Ложь;
	Строка.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
	
	РегистрыСведений.НастройкиПравОбъектов.Записать(СсылкаНаПапку, ОписаниеПрав, Истина);
	
КонецПроцедуры

// Выполняет начальное заполнение справочника "Ключевые операции"
//
// Параметры:
//	Нет
// Возвращаемое значение:
//	Нет
//
Функция ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций() Экспорт
	
	СписокКлючевыхОпераций = Новый Структура;
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыЗаписать",		"Внутренние документы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыОтборПоКатегориям", "Внутренние документы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыОтборПоПапке",	"Внутренние документы Выполнение команды: Отбор по папке");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыСоздать",		"Внутренние документы Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыОткрытиеФормыФормаСпискаСПапками", "Внутренние документы Открытие формы: Список с папками");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыВыполнениеКомандыЗаписать",		"Входящие документы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыВыполнениеКомандыОтборПоКатегориям","Входящие документы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыВыполнениеКомандыСоздать",		"Входящие документы Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыОткрытиеФормыОбращенияГраждан",	"Входящие документы Открытие формы: Список обращений граждан");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыОткрытиеФормыФормаСписка",		"Входящие документы Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыЗадачиПодчиненных",	"Задача исполнителя Открытие формы: Задачи подчиненных");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыМоиЗадачи",			"Задача исполнителя Открытие формы: Мои задачи");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыФормаСписка",		"Задача исполнителя Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ИсполнениеВыполнениеКомандыИсполнено",				"Исполнение Выполнение команды: Исполнено");
	СписокКлючевыхОпераций.Вставить("ИсполнениеВыполнениеКомандыСтартовать",			"Исполнение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыВыполнениеКомандыЗаписать",		"Исходящие документы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыВыполнениеКомандыОтборПоКатегориям","Исходящие документы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыВыполнениеКомандыСоздать",		"Исходящие документы Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыОткрытиеФормыФормаСписка",		"Исходящие документы Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеВыполнениеКомандыОзнакомился",			"Ознакомление Выполнение команды: Ознакомился");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеВыполнениеКомандыСтартовать",			"Ознакомление Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ПолнотекстовыйПоискВыполнениеКомандыНайти",		"Полнотекстовый поиск Выполнение команды: Найти");
	СписокКлючевыхОпераций.Вставить("ПоручениеВыполнениеКомандыВыполнено",				"Поручение Выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("ПоручениеВыполнениеКомандыСтартовать",				"Поручение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыНеПринято",			"Приглашение Выполнение команды: Не принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыПринято",				"Приглашение Выполнение команды: Принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыСтартовать",			"Приглашение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("РассмотрениеВыполнениеКомандыВыполнено",			"Рассмотрение Выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("РассмотрениеВыполнениеКомандыСтартовать",			"Рассмотрение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыЗарегистрировано",		"Регистрация Выполнение команды: Зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыНеЗарегистрировано",	"Регистрация Выполнение команды: Не зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыСтартовать",			"Регистрация Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыНеСогласовано",		"Согласование Выполнение команды: Не согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСогласовано",			"Согласование Выполнение команды: Согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСогласованоСЗамечаниями","Согласование Выполнение команды: Согласовано с замечаниями");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСтартовать",			"Согласование Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыНеУтверждено",			"Утверждение Выполнение команды: Не утверждено");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыСтартовать",			"Утверждение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыУтверждено",			"Утверждение Выполнение команды: Утверждено");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыЗаписать",					"Файлы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыОтборПоКатегориям",			"Файлы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыОтборПоПапке",				"Файлы Выполнение команды: Отбор по папке");
	СписокКлючевыхОпераций.Вставить("ФайлыОткрытиеФормыХранилищеФайлов",				"Файлы Открытие формы: Хранилище файлов");
	СписокКлючевыхОпераций.Вставить("ИсполнениеСтартовать",								"Исполнение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеСтартовать",							"Ознакомление Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ПоручениеСтартовать",								"Поручение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ПриглашениеСтартовать",							"Приглашение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("РассмотрениеСтартовать",							"Рассмотрение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("РегистрацияСтартовать",							"Регистрация Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("СогласованиеСтартовать",							"Согласование Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("УтверждениеСтартовать",							"Утверждение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ИсполнениеФоновоеВыполнениеКомандыИсполнено",		"Исполнение Фоновое выполнение команды: Исполнено");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеФоновоеВыполнениеКомандыОзнакомился",	"Ознакомление Фоновое выполнение команды: Ознакомился");
	СписокКлючевыхОпераций.Вставить("ПоручениеФоновоеВыполнениеКомандыВыполнено",		"Поручение Фоновое выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("ПриглашениеФоновоеВыполнениеКомандыПринято",		"Приглашение Фоновое выполнение команды: Принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеФоновоеВыполнениеКомандыНеПринято",	"Приглашение Фоновое выполнение команды: Не принято");
	СписокКлючевыхОпераций.Вставить("РассмотрениеФоновоеВыполнениеКомандыВыполнено",	"Рассмотрение Фоновое выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("РегистрацияФоновоеВыполнениеКомандыЗарегистрировано","Регистрация Фоновое выполнение команды: Зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияФоновоеВыполнениеКомандыНеЗарегистрировано","Регистрация Фоновое выполнение команды: Не зарегистрировано");
	СписокКлючевыхОпераций.Вставить("СогласованиеФоновоеВыполнениеКомандыСогласовано",	"Согласование Фоновое выполнение команды: Согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеФоновоеВыполнениеКомандыНеСогласовано","Согласование Фоновое выполнение команды: Не согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеФоновоеВыполнениеКомандыСогласованоСЗамечаниями","Согласование Фоновое выполнение команды: Согласовано с замечаниями");
	СписокКлючевыхОпераций.Вставить("УтверждениеФоновоеВыполнениеКомандыНеУтверждено",	"Утверждение Фоновое выполнение команды: Не утверждено");
	СписокКлючевыхОпераций.Вставить("УтверждениеФоновоеВыполнениеКомандыУтверждено",	"Утверждение Фоновое выполнение команды: Утверждено");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(КлючевыеОперации.Приоритет) КАК Приоритет
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Приоритет) Тогда
		Приоритет = Выборка.Приоритет + 1;
	Иначе
		Приоритет = 1;
	КонецЕсли;
	
	Для Каждого КлючеваяОперация Из СписокКлючевыхОпераций Цикл
		КлючеваяОперацияСсылка = ОценкаПроизводительностиВызовСервераПовтИсп.ПолучитьКлючевуюОперациюПоИмени(КлючеваяОперация.Ключ);
		КлючеваяОперацияОбъект = КлючеваяОперацияСсылка.ПолучитьОбъект();
		КлючеваяОперацияОбъект.Наименование = КлючеваяОперация.Значение;
		Если КлючеваяОперацияОбъект.ЦелевоеВремя = 0 Тогда
			КлючеваяОперацияОбъект.ЦелевоеВремя = 1;
		КонецЕсли;
		Если КлючеваяОперацияОбъект.Приоритет = 0 Тогда
			КлючеваяОперацияОбъект.Приоритет = Приоритет;
			Приоритет = Приоритет + 1;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КлючеваяОперацияОбъект.МинимальноДопустимыйУровень) Тогда
			КлючеваяОперацияОбъект.МинимальноДопустимыйУровень = Перечисления.УровниПроизводительности.Хорошо;
		КонецЕсли;
		КлючеваяОперацияОбъект.Записать();
		
	КонецЦикла;
	
КонецФункции

// Получает учетные записи, где пользователь - Ответственный
Функция ПолучитьУчетныеЗаписиПользователя(Пользователь) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат МассивУчетныхЗаписей;
	
КонецФункции

Процедура ЗаполнитьСвойстваПредопределенныхМетрик()
	
	// Заполнение настроек метрик
	СвйостваМетрикПоУмолчанию = Справочники.Метрики.СвойстваПредопределенныхМетрик();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Метрики.Ссылка,
		|	Метрики.ПериодЗамеров = 0 КАК ПустойПериод,
		|	Метрики.МинимальныйМасштаб = 0 КАК ПустойМасштаб,
		|	ВЫРАЗИТЬ(Метрики.Описание КАК СТРОКА(100)) = """" КАК ПустоеОписание
		|ИЗ
		|	Справочник.Метрики КАК Метрики
		|ГДЕ
		|	Метрики.ИмяПредопределенныхДанных <> """"
		|	И (Метрики.ПериодЗамеров = 0
		|			ИЛИ Метрики.МинимальныйМасштаб = 0
		|			ИЛИ (ВЫРАЗИТЬ(Метрики.Описание КАК СТРОКА(100))) = """")");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СвойстваМетрики = СвйостваМетрикПоУмолчанию.Получить(Выборка.Ссылка);
		Если СвойстваМетрики <> Неопределено Тогда
			
			МетрикаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.ПустойПериод Тогда
				МетрикаОбъект.ПериодЗамеров = СвойстваМетрики.ЧастотаЗамеров;
			КонецЕсли;
			
			Если Выборка.ПустойМасштаб Тогда
				МетрикаОбъект.МинимальныйМасштаб = 1;
			КонецЕсли;
			
			Если Выборка.ПустоеОписание Тогда
				МетрикаОбъект.Описание = СвойстваМетрики.Описание;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МетрикаОбъект);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьУстаревшееПомещение(УстаревшееПомещение)
	
	Если Не ЗначениеЗаполнено(УстаревшееПомещение) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Удаление старого помещения.
		УстаревшееПомещениеОбъект = УстаревшееПомещение.ПолучитьОбъект();
		УстаревшееПомещениеОбъект.УстановитьПометкуУдаления(Истина);
		
		// Создание нового помещения.
		НовоеПомещениеОбъект = Справочники.ТерриторииИПомещения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовоеПомещениеОбъект, УстаревшееПомещениеОбъект,
			"Наименование, Описание, БрониВводитОтветственный, Вместимость, Ответственный");
		НовоеПомещениеОбъект.Родитель = УстаревшееПомещениеОбъект.Расположение;
		НовоеПомещениеОбъект.ДоступноБронирование = Истина;
		НовоеПомещениеОбъект.Записать();
		НовоеПомещение = НовоеПомещениеОбъект.Ссылка;
		
		// Заполнение нового и очистка старого помещения у броней.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Бронь.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Бронь КАК Бронь
			|ГДЕ
			|	Бронь.УдалитьПомещение = &Помещение";
		Запрос.УстановитьПараметр("Помещение", УстаревшееПомещение);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			БроньОбъект = Выборка.Ссылка.ПолучитьОбъект();
			БроньОбъект.Помещение = НовоеПомещение;
			БроньОбъект.УдалитьПомещение = Неопределено;
			БроньОбъект.ОбменДанными.Загрузка = Истина;
			БроньОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиПротоколыИзТабличныхЧастейВСправочник()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ОбработаныВсеПротоколы = Ложь;
	Пока Не ОбработаныВсеПротоколы Цикл
		
		ОбработаноПротоколов = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	МероприятияПротокол.Ссылка КАК Мероприятие,
			|	НЕ СостоянияМероприятийИсполнено.Состояние ЕСТЬ NULL  КАК Исполнено,
			|	НЕ СостоянияМероприятийНаИсполнении.Состояние ЕСТЬ NULL  КАК НаИсполнении,
			|	СостоянияМероприятийИсполнено.Установил КАК ИсполненоУстановил,
			|	СостоянияМероприятийНаИсполнении.Установил КАК НаИсполненииУстановил
			|ИЗ
			|	Справочник.Мероприятия.Протокол КАК МероприятияПротокол
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятийИсполнено
			|		ПО МероприятияПротокол.Ссылка = СостоянияМероприятийИсполнено.Мероприятие
			|			И (СостоянияМероприятийИсполнено.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.ПротоколИсполнен))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятийНаИсполнении
			|		ПО МероприятияПротокол.Ссылка = СостоянияМероприятийНаИсполнении.Мероприятие
			|			И (СостоянияМероприятийНаИсполнении.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.ПротоколНаИсполнении))
			|ГДЕ
			|	МероприятияПротокол.ПунктПротокола = ЗНАЧЕНИЕ(Справочник.ПротоколыМероприятий.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	МероприятияПротокол.Ссылка,
			|	НЕ СостоянияМероприятийИсполнено.Состояние ЕСТЬ NULL ,
			|	НЕ СостоянияМероприятийНаИсполнении.Состояние ЕСТЬ NULL ,
			|	СостоянияМероприятийИсполнено.Установил,
			|	СостоянияМероприятийНаИсполнении.Установил";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				// Перенос пунктов протокола мероприятия.
				Мероприятие = Выборка.Мероприятие.ПолучитьОбъект();
				Для Каждого СтарыйПунктаПротокола Из Мероприятие.Протокол Цикл
					
					// Перенос пункта протокола.
					ПунктПротокола = Справочники.ПротоколыМероприятий.СоздатьЭлемент();
					ПунктПротокола.УстановитьНовыйКод();
					ПунктПротокола.Наименование = СтарыйПунктаПротокола.УдалитьРешили;
					ПунктПротокола.Владелец = Мероприятие.Ссылка;
					ПунктПротокола.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
					ПунктПротокола.НомерПунктаПрограммы = СтарыйПунктаПротокола.НомерПунктаПрограммы;
					ПунктПротокола.Выступили = СтарыйПунктаПротокола.УдалитьВыступили;
					ПунктПротокола.Решили = СтарыйПунктаПротокола.УдалитьРешили;
					ПунктПротокола.Слушали = СтарыйПунктаПротокола.УдалитьСлушали;
					ПунктПротокола.УдалитьСрокИсполнения = СтарыйПунктаПротокола.УдалитьСрокИсполнения;
					Если ЗначениеЗаполнено(СтарыйПунктаПротокола.УдалитьИсполнитель) Тогда
						
						ПунктПротокола.УдалитьОтветственный = СтарыйПунктаПротокола.УдалитьИсполнитель;
						ПунктПротокола.УдалитьОсновнойОбъектАдресацииОтветственного = СтарыйПунктаПротокола.УдалитьОсновнойОбъектАдресации;
						ПунктПротокола.УдалитьДополнительныйОбъектАдресацииОтветственного = СтарыйПунктаПротокола.УдалитьДополнительныйОбъектАдресации;
						
						ОтветственныйИсполнитель = ПунктПротокола.Исполнители.Добавить();
						ОтветственныйИсполнитель.Ответственный = Истина;
						ОтветственныйИсполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
						ОтветственныйИсполнитель.УдалитьИсполнитель = СтарыйПунктаПротокола.УдалитьИсполнитель;
						ОтветственныйИсполнитель.УдалитьОсновнойОбъектАдресации = СтарыйПунктаПротокола.УдалитьОсновнойОбъектАдресации;
						ОтветственныйИсполнитель.УдалитьДополнительныйОбъектАдресации = СтарыйПунктаПротокола.УдалитьДополнительныйОбъектАдресации;
						
					КонецЕсли;
					Если Выборка.Исполнено Тогда
						ПунктПротокола.СостояниеИсполнения =
							Перечисления.СостоянияПротоколовМероприятий.Исполнен;
						ПунктПротокола.СостояниеИсполненияУстановил = Выборка.ИсполненоУстановил;
					ИначеЕсли Выборка.НаИсполнении Тогда
						ПунктПротокола.СостояниеИсполнения =
							Перечисления.СостоянияПротоколовМероприятий.НаИсполнении;
						ПунктПротокола.СостояниеИсполненияУстановил = Выборка.НаИсполненииУстановил;
					Иначе
						ПунктПротокола.СостояниеИсполнения =
							Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение;
						ПунктПротокола.СостояниеИсполненияУстановил = ТекущийПользователь;
					КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПунктПротокола);
					
					РегистрыСведений.ИсторияСостоянийПротоколовМероприятий.ДобавитьЗапись(
						ТекущаяДата(),
						ПунктПротокола.Ссылка,
						ПунктПротокола.СостояниеИсполнения,
						ПунктПротокола.СостояниеИсполненияУстановил,
						Мероприятие.Ссылка);
					
					СтарыйПунктаПротокола.ПунктПротокола = ПунктПротокола.Ссылка;
					
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Мероприятие);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			ОбработаноПротоколов = ОбработаноПротоколов + 1;
			
		КонецЦикла;
		
		Если ОбработаноПротоколов < 100 Тогда
			ОбработаныВсеПротоколы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет записи в адресной книге по контрагентам, загруженным из других прикладных решений
// с ОбменДанными.Загрузка = Истина.
//
Процедура ОбновитьКонтрагентовВАдреснойКниге(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 5000
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Родитель КАК Родитель
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ПО
		|	Контрагенты.Ссылка = АдреснаяКнига.Объект
		|	И АдреснаяКнига.Родитель <> ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.Избранное)
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И АдреснаяКнига.Ссылка ЕСТЬ NULL
		|");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Параметры.ОбработкаЗавершена = (Выборка.Количество() = 0);
	
	Пока Выборка.Следующий() Цикл
		
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.Контрагенты,
			Выборка.Ссылка);
			
		РегистрыСведений.ПоискВАдреснойКниге.ОбновитьСловаПоискаПоКонтрагенту(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает настройки отправки SMS.
//
Процедура УстановитьНастройкиОтправкиSMS()
	
	ИспользоватьТранслитерациюSMS = Ложь;
	РазмерSMS = РаботаСУведомлениямиКлиентСервер.РазмерSMS(1, ИспользоватьТранслитерациюSMS);
	Константы.ИспользоватьТранслитерациюSMS.Установить(ИспользоватьТранслитерациюSMS);
	Константы.ОграничениеКоличестваВДеньSMS.Установить(100);
	Константы.ОграничениеКоличестваВМесяцSMS.Установить(0);
	Константы.ОграничениеКоличестваВсегоВДеньSMS.Установить(0);
	Константы.ОграничениеКоличестваВсегоВМесяцSMS.Установить(0);
	Константы.РазмерSMS.Установить(РазмерSMS);
	
КонецПроцедуры

// Устанавливает способы уведомления по умолчанию.
//
Процедура УстановитьСпособыУведомления()
	
	// По почте
	РегистрыСведений.СпособыУведомленияПользователей.УстановитьСпособУведомленияВсехПользователей(
		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	// По SMS
	РегистрыСведений.СпособыУведомленияПользователей.УстановитьСпособУведомленияВсехПользователей(
		Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	
КонецПроцедуры

Процедура ПеренестиНастройкиИзГруппДоступаВРазрешенияИРабочиеГруппы() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваРолей.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ГруппыДоступа.Ссылка КАК ГруппаДоступа,
		|	ГруппыДоступаВидыДоступа.ВидДоступа КАК ВидДоступа,
		|	ГруппыДоступаВидыДоступа.ДоступРазрешен КАК ДоступРазрешен,
		|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа,
		|	ПраваРолей.Добавление ИЛИ ПраваРолей.Изменение КАК ЕстьПравоРедактирования,
		|	ПраваРолей.Роль = &РольРегистрацияВнутреннихДокументов КАК ЕстьРольРегистрацияВнутренних,
		|	ПраваРолей.Роль = &РольРегистрацияВходящихДокументов КАК ЕстьРольРегистрацияВходящих,
		|	ПраваРолей.Роль = &РольРегистрацияИсходящихДокументов КАК ЕстьРольРегистрацияИсходящих
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ПО ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
		|			ПО ГруппыДоступаВидыДоступа.Ссылка = ГруппыДоступаЗначенияДоступа.Ссылка
		|				И ГруппыДоступаВидыДоступа.ВидДоступа = ГруппыДоступаЗначенияДоступа.ВидДоступа
		|		ПО ГруппыДоступа.Ссылка = ГруппыДоступаВидыДоступа.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
		|			ПО ПрофилиГруппДоступаРоли.Роль = ПраваРолей.Роль
		|		ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	ПраваРолей.ОбъектМетаданных В(&ОбъектыМетаданных)
		|ИТОГИ
		|	МАКСИМУМ(ДоступРазрешен),
		|	МАКСИМУМ(ЕстьПравоРедактирования),
		|	МАКСИМУМ(ЕстьРольРегистрацияВнутренних),
		|	МАКСИМУМ(ЕстьРольРегистрацияВходящих),
		|	МАКСИМУМ(ЕстьРольРегистрацияИсходящих)
		|ПО
		|	ОбъектМетаданных,
		|	ГруппаДоступа,
		|	ВидДоступа");
	
	ПредметыДоступаСРазрезами = ДокументооборотПраваДоступаПереопределяемый.ПредметыДоступаСРазрезами();
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого Стр Из ПредметыДоступаСРазрезами Цикл
		Если Не Стр.НеЯвляетсяСамостоятельнымПредметомДоступа Тогда
			ОбъектыМетаданных.Добавить(Стр.ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ОбъектыМетаданных", ОбъектыМетаданных);
	Запрос.УстановитьПараметр("РольРегистрацияВнутреннихДокументов",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РегистрацияВнутреннихДокументов));
	Запрос.УстановитьПараметр("РольРегистрацияВходящихДокументов",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РегистрацияВходящихДокументов));
	Запрос.УстановитьПараметр("РольРегистрацияИсходящихДокументов",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РегистрацияИсходящихДокументов));
	
	ПредметВнутренниеДокументы = 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВнутренниеДокументы);
	ПредметВходящиеДокументы = 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВходящиеДокументы);
	ПредметИсходящиеДокументы = 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ИсходящиеДокументы);
	
	ВидыДоступаИспользующиеРегистрацию = 
		НастройкиДоступаКлиентСервер.ВидыДоступаИспользующиеРегистрацию();
		
	СоответствиеРабочихГруппГруппамДоступа = Новый Соответствие;
	
	НаборИсключительныеРазрешения = РегистрыСведений.РазрешенияДоступаИсключительные.СоздатьНаборЗаписей();
	НаборОбщиеРазрешения = РегистрыСведений.РазрешенияДоступаОбщие.СоздатьНаборЗаписей();
	
	ТаблицаИсключительныхРазрешений = НаборИсключительныеРазрешения.ВыгрузитьКолонки();
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТаблицаИсключительныхРазрешений.Колонки.Добавить("ЕстьПравоРедактирования", ТипБулево);
	ТаблицаИсключительныхРазрешений.Колонки.Добавить("ЕстьПравоРегистрации", ТипБулево);
	
	ВыборкаОбъектМетаданных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектМетаданных.Следующий() Цикл
		
		СтрокаПредмета = ПредметыДоступаСРазрезами.Найти(
			ВыборкаОбъектМетаданных.ОбъектМетаданных, "ОбъектМетаданных");
		АктуальныеВидыДоступа = СтрокаПредмета.ВидыДоступа;
		
		ВыборкаГруппаДоступа = ВыборкаОбъектМетаданных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппаДоступа.Следующий() Цикл
			
			ДоступныеЗначения = Новый ТаблицаЗначений;
			ДоступныеЗначения.Колонки.Добавить("ВидДоступа");
			ДоступныеЗначения.Колонки.Добавить("ЗначениеДоступа");
			
			// Определение разрешенных значений.
			ВыборкаВидДоступа = ВыборкаГруппаДоступа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидДоступа.Следующий() Цикл
				
				Если АктуальныеВидыДоступа.НайтиПоЗначению(ВыборкаВидДоступа.ВидДоступа) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Исключения = Новый Массив;
				Выборка = ВыборкаВидДоступа.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ЗначениеЗаполнено(Выборка.ЗначениеДоступа) Тогда
						Исключения.Добавить(Выборка.ЗначениеДоступа);
					КонецЕсли;
				КонецЦикла;
				
				Если ВыборкаВидДоступа.ДоступРазрешен И Исключения.Количество() = 0 Тогда
					НоваяСтрока = ДоступныеЗначения.Добавить();
					НоваяСтрока.ВидДоступа = ВыборкаВидДоступа.ВидДоступа;
					НоваяСтрока.ЗначениеДоступа = ВыборкаВидДоступа.ВидДоступа;
				КонецЕсли;
				
				Если Исключения.Количество() > 0 Тогда
					
					ТаблицаРазрезовДоступа = ДокументооборотПраваДоступаПовтИсп.ТаблицаРазрезовДоступа(Ложь);
					СтрВидаДоступа = ТаблицаРазрезовДоступа.Найти(ВыборкаВидДоступа.ВидДоступа, "ВидДоступа");
					
					Если СтрВидаДоступа <> Неопределено Тогда
						
						ЗапросПоИсключениям = Новый Запрос(СтрШаблон(
							"ВЫБРАТЬ ТаблицаВидаДоступа.Ссылка ИЗ %1 КАК ТаблицаВидаДоступа
								|ГДЕ %2 ТаблицаВидаДоступа.Ссылка В(&Исключения)",
							СтрВидаДоступа.ИмяТаблицыЗначенийДоступа,
							?(ВыборкаВидДоступа.ДоступРазрешен, "НЕ", "")));
						
						ЗапросПоИсключениям.УстановитьПараметр("Исключения", Исключения);
						Выборка = ЗапросПоИсключениям.Выполнить().Выбрать();
						Пока Выборка.Следующий() Цикл
							НоваяСтрока = ДоступныеЗначения.Добавить();
							НоваяСтрока.ВидДоступа = ВыборкаВидДоступа.ВидДоступа;
							НоваяСтрока.ЗначениеДоступа = Выборка.Ссылка;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			// Формирование таблицы разрешений.
			Если ДоступныеЗначения.Количество() > 0 Тогда
				
				КоллекцияЗначенийДоступа = Справочники.КоллекцииЗначенийДоступа.ПолучитьКоллекцию(
					ДоступныеЗначения.ВыгрузитьКолонку("ЗначениеДоступа"));
				
				ЕстьПравоРегистрацииПредмета = 
					ВыборкаГруппаДоступа.ОбъектМетаданных = ПредметВнутренниеДокументы
						И ВыборкаГруппаДоступа.ЕстьРольРегистрацияВнутренних
					Или ВыборкаГруппаДоступа.ОбъектМетаданных = ПредметВходящиеДокументы
						И ВыборкаГруппаДоступа.ЕстьПравоРедактирования
					Или ВыборкаГруппаДоступа.ОбъектМетаданных = ПредметИсходящиеДокументы
						И ВыборкаГруппаДоступа.ЕстьРольРегистрацияИсходящих;
				
				СоставГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВыборкаГруппаДоступа.ГруппаДоступа, "Пользователи");
				ВыборкаПользователи = СоставГруппы.Выбрать();
				
				МассивПользователей = Новый Массив;
				
				Пока ВыборкаПользователи.Следующий() Цикл
					
					Если ТипЗнч(ВыборкаПользователи.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
						МассивПользователей.Добавить(ВыборкаПользователи.Пользователь);
						Продолжить;
					КонецЕсли;
					
					Стр = ТаблицаИсключительныхРазрешений.Добавить();
					Стр.Предмет = ВыборкаГруппаДоступа.ОбъектМетаданных;
					Стр.КоллекцияЗначенийДоступа = КоллекцияЗначенийДоступа;
					Стр.Пользователь = ВыборкаПользователи.Пользователь;
					Стр.ЕстьПравоРедактирования = ВыборкаГруппаДоступа.ЕстьПравоРедактирования;
					Стр.ЕстьПравоРегистрации = ЕстьПравоРегистрацииПредмета;
					
				КонецЦикла;
				
				// Все одиночные пользователи помещаются в служебную группу.
				Если МассивПользователей.Количество() > 0 Тогда
					
					РабочаяГруппа = СлужебнаяРабочаяГруппаДляЗаменыГруппыДоступа(
						ВыборкаГруппаДоступа.ГруппаДоступа, МассивПользователей);
					
					Если ЗначениеЗаполнено(РабочаяГруппа) Тогда
						Стр = ТаблицаИсключительныхРазрешений.Добавить();
						Стр.Предмет = ВыборкаГруппаДоступа.ОбъектМетаданных;
						Стр.КоллекцияЗначенийДоступа = КоллекцияЗначенийДоступа;
						Стр.Пользователь = РабочаяГруппа;
						Стр.ЕстьПравоРедактирования = ВыборкаГруппаДоступа.ЕстьПравоРедактирования;
						Стр.ЕстьПравоРегистрации = ЕстьПравоРегистрацииПредмета;
						
						СоответствиеРабочихГруппГруппамДоступа.Вставить(ВыборкаГруппаДоступа.ГруппаДоступа,
							РабочаяГруппа);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаИсключительныхРазрешений.Свернуть("Предмет, КоллекцияЗначенийДоступа, Пользователь", 
		"ЕстьПравоРедактирования, ЕстьПравоРегистрации");
	
	// Набор исключительных разрешений.
	Если ТаблицаИсключительныхРазрешений.Количество() > 0 Тогда
		
		Константы.СпецРазрешенияВПолитикахДоступа.Установить(Истина);
		
		Для Каждого СтрокаРазрешения Из ТаблицаИсключительныхРазрешений Цикл
			Стр = НаборИсключительныеРазрешения.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, СтрокаРазрешения);
			Если СтрокаРазрешения.ЕстьПравоРегистрации Тогда
				Стр.УровеньДоступа = Справочники.УровниДоступа.Регистрация;
			ИначеЕсли СтрокаРазрешения.ЕстьПравоРедактирования Тогда
				Стр.УровеньДоступа = Справочники.УровниДоступа.Редактирование;
			Иначе
				Стр.УровеньДоступа = Справочники.УровниДоступа.Чтение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НаборИсключительныеРазрешения.Записать();
	НаборОбщиеРазрешения.Записать();
	
	// Подменим группы доступа на рабочие группы в настройках доступности по состоянию.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиНастроекДоступности.Ссылка КАК НастройкаДоступности,
		|	УчастникиНастроекДоступности.Участник КАК ГруппаДоступа,
		|	ПользователиГруппДоступа.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию.ИспользоватьДля КАК УчастникиНастроекДоступности
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.ГруппыДоступа.Пользователи КАК ПользователиГруппДоступа
		|ПО
		|   УчастникиНастроекДоступности.Участник = ПользователиГруппДоступа.Ссылка
		|	И ПользователиГруппДоступа.Пользователь ССЫЛКА Справочник.Пользователи
		|	И ПользователиГруппДоступа.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|ГДЕ
		|	УчастникиНастроекДоступности.Участник ССЫЛКА Справочник.ГруппыДоступа
		|ИТОГИ ПО
		|	НастройкаДоступности, ГруппаДоступа
		|");
		
	РезультатДеревом = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаНастройка Из РезультатДеревом.Строки Цикл
		
		ИзменяемыйОбъект = СтрокаНастройка.НастройкаДоступности.ПолучитьОбъект();
		ИзменяемыйОбъект.Заблокировать();
		
		Для Каждого СтрокаГруппаДоступа Из СтрокаНастройка.Строки Цикл
			
			УчастникНастроекДоступности = ИзменяемыйОбъект.ИспользоватьДля.Найти(СтрокаГруппаДоступа.ГруппаДоступа, "Участник");
			
			РабочаяГруппа = СоответствиеРабочихГруппГруппамДоступа[СтрокаГруппаДоступа.ГруппаДоступа];
			
			Если РабочаяГруппа = Неопределено Тогда
				МассивПользователей = СтрокаГруппаДоступа.Строки.ВыгрузитьКолонку("Пользователь");
				РабочаяГруппа = СлужебнаяРабочаяГруппаДляЗаменыГруппыДоступа(
					СтрокаГруппаДоступа.ГруппаДоступа,
					МассивПользователей);
				СоответствиеРабочихГруппГруппамДоступа.Вставить(СтрокаГруппаДоступа.ГруппаДоступа,
					РабочаяГруппа);
			КонецЕсли;
			
			УчастникНастроекДоступности.Участник = РабочаяГруппа;
				
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИзменяемыйОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает служебную рабочую группу для замены группы доступа.
//
// Параметры:
//   ГруппаДоступа - СправочникСсылка.ГруппыДоступа - заменяемая группа доступа.
//   МассивПользователей - Массив - пользователи группы доступа.
//
// Возвращаемое значение:
//   СправочникСсылка.РабочиеГруппы - рабочая группа, заменяющая группу доступа.
//
Функция СлужебнаяРабочаяГруппаДляЗаменыГруппыДоступа(ГруппаДоступа, МассивПользователей)
	
	НаименованиеРодителя = НСтр("ru = 'Служебная (создана автоматически)'; en = 'Service (created automatically)'");
	НаименованиеГруппы = СтрШаблон(НСтр("ru = 'Пользователи группы доступа ""%1""'; en = 'Users of access group ""%1""'"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаДоступа, "Наименование"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Наименование = &Наименование");
		
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Родитель = Неопределено;
	Запрос.УстановитьПараметр("Наименование", НаименованиеРодителя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Родитель = Выборка.Ссылка;
	Иначе
		РодительОбъект = Справочники.РабочиеГруппы.СоздатьЭлемент();
		РодительОбъект.Наименование = НаименованиеРодителя;
		РодительОбъект.Записать();
		Родитель = РодительОбъект.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = Справочники.РабочиеГруппы.СоздатьЭлемент();
	ГруппаОбъект.Родитель = Родитель;
	ГруппаОбъект.Наименование = НаименованиеГруппы;
	Для Каждого ПользовательГруппы Из МассивПользователей Цикл
		СтрСостава = ГруппаОбъект.Состав.Добавить();
		СтрСостава.Пользователь = ПользовательГруппы;
	КонецЦикла;
	
	ГруппаОбъект.Записать();
	
	Возврат ГруппаОбъект.Ссылка;
	
КонецФункции

// Обновляет служебную рабочую группу для замены группы доступа.
//
// Параметры:
//   ГруппаДоступа - СправочникСсылка.ГруппыДоступа - заменяемая группа доступа.
//   МассивПользователейДобавить - Массив - новые пользователи группы доступа.
//   МассивПользователейУдалить - Массив - удаляемые пользователи группы доступа.
//
Процедура ОбновитьСуществующуюСлужебнуюРабочуюГруппу(ГруппаДоступа, 
	МассивПользователейДобавить, МассивПользователейУдалить) Экспорт
	
	НаименованиеРодителя = НСтр("ru = 'Служебная (создана автоматически)'; en = 'Service (created automatically)'");
	НаименованиеГруппы = СтрШаблон(НСтр("ru = 'Пользователи группы доступа ""%1""'; en = 'Users of access group ""%1""'"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаДоступа, "Наименование"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Наименование = &Наименование");
		
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // не нашли - ничего не делаем
		Возврат;
	КонецЕсли;	
	
	СлужебнаяГруппаСсылка = Неопределено;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СлужебнаяГруппаСсылка =  Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = СлужебнаяГруппаСсылка.ПолучитьОбъект();
	
	Для Каждого ПользовательГруппы Из МассивПользователейДобавить Цикл
		СтрСостава = ГруппаОбъект.Состав.Добавить();
		СтрСостава.Пользователь = ПользовательГруппы;
	КонецЦикла;
	
	Для Каждого ПользовательГруппы Из МассивПользователейУдалить Цикл
		СтрСостава = ГруппаОбъект.Состав.Найти(ПользовательГруппы, "Пользователь");
		Если СтрСостава <> Неопределено Тогда
			ГруппаОбъект.Состав.Удалить(СтрСостава);
		КонецЕсли;	
	КонецЦикла;
	
	ГруппаОбъект.Записать();
	
КонецПроцедуры

// Удаляет служебную рабочую группу для замены группы доступа.
//
// Параметры:
//   ГруппаДоступа - СправочникСсылка.ГруппыДоступа - заменяемая группа доступа.
//
Процедура УдалитьСуществующуюСлужебнуюРабочуюГруппу(ГруппаДоступа) Экспорт
	
	НаименованиеРодителя = НСтр("ru = 'Служебная (создана автоматически)'; en = 'Service (created automatically)'");
	НаименованиеГруппы = СтрШаблон(НСтр("ru = 'Пользователи группы доступа ""%1""'; en = 'Users of access group ""%1""'"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаДоступа, "Наименование"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Наименование = &Наименование");
		
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // не нашли - ничего не делаем
		Возврат;
	КонецЕсли;	
	
	СлужебнаяГруппаСсылка = Неопределено;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СлужебнаяГруппаСсылка =  Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = СлужебнаяГруппаСсылка.ПолучитьОбъект();
	ГруппаОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// 
// УникальныеОбъектыРабочихГрупп  =  Соответствие, Ключ - это ссылка на нужный объект
//
Процедура ОбновитьРабочиеГруппы(УникальныеОбъектыРабочихГрупп) Экспорт
	
	СсылкиКОбработке = Новый Массив;
	
	Для Каждого КлючИЗначение Из УникальныеОбъектыРабочихГрупп Цикл
		
		МетаданныеОбъекта = КлючИЗначение.Ключ.Метаданные();
		
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			СсылкиКОбработке.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Запрос = Новый Запрос(
	  "ВЫБРАТЬ
	  |	РабочиеГруппы.Объект КАК Объект,
	  |	РабочиеГруппы.Участник
	  |ИЗ
	  |	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
	  |		ПО РабочиеГруппы.Участник = ПользователиВКонтейнерах.Контейнер
	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДескрипторыДоступаДляОбъектов КАК УдалитьДескрипторыДоступаДляОбъектов
	  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьПраваПоДескрипторамДоступа КАК УдалитьПраваПоДескрипторамДоступа
	  |			ПО УдалитьДескрипторыДоступаДляОбъектов.Дескриптор = УдалитьПраваПоДескрипторамДоступа.Дескриптор
	  |		ПО РабочиеГруппы.Объект = УдалитьДескрипторыДоступаДляОбъектов.Объект
	  |			И (УдалитьПраваПоДескрипторамДоступа.Пользователь = ПользователиВКонтейнерах.Пользователь)
	  |ГДЕ
	  |	РабочиеГруппы.Объект В(&СсылкиКОбработке)
	  |
	  |СГРУППИРОВАТЬ ПО
	  |	РабочиеГруппы.Объект,
	  |	РабочиеГруппы.Участник
	  |
	  |ИМЕЮЩИЕ
	  |	МИНИМУМ(УдалитьПраваПоДескрипторамДоступа.Изменение) = ИСТИНА");
  
 Запрос.УстановитьПараметр("СсылкиКОбработке", СсылкиКОбработке);
 
 ТаблицаРабочихГрупп = Запрос.Выполнить().Выгрузить();
 ТаблицаРабочихГрупп.Индексы.Добавить("Объект");

 	Для Каждого Ссылка Из СсылкиКОбработке Цикл
	 
		НайденныеСтроки = ТаблицаРабочихГрупп.НайтиСтроки(Новый Структура("Объект", Ссылка));
		Для Каждого СтрокаРГ Из НайденныеСтроки Цикл

			Если Не ЗначениеЗаполнено(СтрокаРГ.Участник) Тогда
				Продолжить;
			КонецЕсли;

			Набор = РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(СтрокаРГ.Объект);
			Набор.Отбор.Участник.Установить(СтрокаРГ.Участник);

			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.Объект = СтрокаРГ.Объект;
			НоваяСтрока.Участник = СтрокаРГ.Участник;
			НоваяСтрока.Изменение = Истина;

			РегистрыСведений.РабочиеГруппы.ЗаполнитьУстаревшиеИзмерения(НоваяСтрока);

			Набор.Записать();

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

Процедура РасчетПравДоступаПослеОбновления() Экспорт
	
	Обработки.РасчетПравДоступаПослеОбновления.ВыполнитьФоновоеЗадание();
	
КонецПроцедуры

// Создаёт единственную организацию по данным из потерявших актуальность констант
//
Процедура СоздатьОрганизацию()
	
	НаименованиеПредприятия = Константы.УдалитьНаименованиеПредприятия.Получить();
	РуководительПредприятия = Константы.УдалитьРуководительПредприятия.Получить();
	РуководительСлужбыДОУ = Константы.УдалитьРуководительСлужбыДОУ.Получить();
	РуководительАрхива = Константы.УдалитьРуководительАрхива.Получить();
	ПлательщикНДС = Константы.УдалитьПлательщикНДС.Получить();
	
	ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда 
		ОрганизацияОбъект.Наименование = НаименованиеПредприятия;
	Иначе
		ОрганизацияОбъект.Наименование = НСтр("ru = 'Наша организация'; en = 'Our enterprise'; en = 'Our company'");
	КонецЕсли;
	ОрганизацияОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОрганизацияОбъект.ПлательщикНДС = ПлательщикНДС;
	
	НачатьТранзакцию();
	Попытка
		
		ОрганизацияОбъект.Записать();
		Организация = ОрганизацияОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(РуководительПредприятия) Тогда
			МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = Дата(2000, 1, 1);
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
			МенеджерЗаписи.Пользователь = РуководительПредприятия;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РуководительСлужбыДОУ) Тогда
			МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = Дата(2000, 1, 1);
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительСлужбыДОУ;
			МенеджерЗаписи.Пользователь = РуководительСлужбыДОУ;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РуководительАрхива) Тогда
			МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = Дата(2000, 1, 1);
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительАрхива;
			МенеджерЗаписи.Пользователь = РуководительАрхива;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет состояние подписки уведомлений на вид бизнес-события.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий - Вид события.
//
Процедура ОбновитьСостояниеПодпискиНаВидБизнесСобытия(ВидСобытия)
	
	ВидыСобытийПодписки = Перечисления.СобытияУведомлений.ВидыСобытийПодписки(ВидСобытия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУведомлений.ВидСобытия
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия В (&ВидыСобытийПодписки)
		|	И НастройкиУведомлений.Значение = ИСТИНА";
	Запрос.УстановитьПараметр("ВидыСобытийПодписки", ВидыСобытийПодписки);
	
	КоличествоПодписчиков = Запрос.Выполнить().Выгрузить().Количество();
	
	Если КоличествоПодписчиков > 0 Тогда
		БизнесСобытияВызовСервера.СохранитьПодпискуНаБизнесСобытия(
			ВидСобытия,
			Перечисления.ПотребителиБизнесСобытий.РассылкаУведомлений);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеС20

Процедура ОбновлениеС20_УдалитьНастройкиУведомленийПоУмолчанию(Выборка) Экспорт
	
	Если Выборка.Настройка = Перечисления.НастройкиУведомлений.Подписка Тогда
		РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
			Выборка.ВидСобытия,
			Перечисления.СпособыУведомления.ПоПочте,
			Выборка.Значение);
	ИначеЕсли Выборка.Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
		РегистрыСведений.НастройкиУведомлений.УстановитьСрокПоУмолчанию(
			Выборка.ВидСобытия,
			Выборка.Значение);
	ИначеЕсли Выборка.Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		РегистрыСведений.НастройкиУведомлений.УстановитьЧастотуПоУмолчанию(
			Выборка.ВидСобытия,
			Выборка.Значение);
	Иначе
		РегистрыСведений.НастройкиУведомлений.УстановитьДополнительнуюНастройкуПоУмолчанию(
			Выборка.Настройка,
			Выборка.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеС20_УдалитьНастройкиУведомленияОЗадачах(Выборка) Экспорт
	
	РегистрыСведений.НастройкиУведомлений.УстановитьСрок(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		Выборка.СрокУведомления);
	РегистрыСведений.НастройкиУведомлений.УстановитьЧастоту(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		Выборка.ЧастотаПриближениеСрока);
	РегистрыСведений.НастройкиУведомлений.УстановитьЧастоту(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		Выборка.ЧастотаПросроченныеЗадачи);
	
КонецПроцедуры	

Процедура ОбновлениеС20_УдалитьНастройкиУведомленияОкончанияСрокаДействия(Выборка) Экспорт
	
	РегистрыСведений.НастройкиУведомлений.УстановитьСрок(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		Выборка.СрокУведомления);
	РегистрыСведений.НастройкиУведомлений.УстановитьЧастоту(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		Выборка.ЧастотаУведомления);
	
КонецПроцедуры	

Процедура ОбновлениеС20_УдалитьНастройкиУведомленияОКонтроле(Выборка) Экспорт
	
	РегистрыСведений.НастройкиУведомлений.УстановитьСрок(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		Выборка.СрокУведомления);
	РегистрыСведений.НастройкиУведомлений.УстановитьЧастоту(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		Выборка.ЧастотаПриближениеСрока);
	РегистрыСведений.НастройкиУведомлений.УстановитьЧастоту(
		Выборка.Пользователь,
		Перечисления.СобытияУведомлений.ПросроченКонтроль,
		Выборка.ЧастотаПросроченКонтроль);
	
КонецПроцедуры

Процедура ОбновлениеС20_УдалитьПодпискиНаУведомления(Выборка) Экспорт
	
	Если ЗначениеЗаполнено(Выборка.ОбъектПодписки) Тогда
		РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоОбъекту(
			Выборка.Пользователь,
			Выборка.ВидСобытия,
			Выборка.СпособУведомления,
			Выборка.ОбъектПодписки,
			Выборка.ПодпискаАктивна);
	Иначе
		РегистрыСведений.НастройкиУведомлений.УстановитьПодписку(
			Выборка.Пользователь,
			Выборка.ВидСобытия,
			Выборка.СпособУведомления,
			Выборка.ПодпискаАктивна);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеС20_ПравилаАвтозаполненияФайлов_Корреспондент(ОбновляемыйОбъект, НужнаЗапись) Экспорт
	
	Для Каждого Данные Из ОбновляемыйОбъект.ДанныеДляАвтозаполнения Цикл
		
		НовоеЗначение = СтрЗаменить(Данные.ЗначениеЗамены, "Корреспондент", "Контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "корреспондент", "контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "КОРРЕСПОНДЕНТ", "КОНТРАГЕНТ");
		Если Данные.ЗначениеЗамены <> НовоеЗначение Тогда
			Данные.ЗначениеЗамены = НовоеЗначение;
			НужнаЗапись = Истина;
		КонецЕсли;
		
		НовоеЗначение = СтрЗаменить(Данные.ВыражениеОбработкиРезультатаЗамены, "Корреспондент", "Контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "корреспондент", "контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "КОРРЕСПОНДЕНТ", "КОНТРАГЕНТ");
		Если Данные.ВыражениеОбработкиРезультатаЗамены <> НовоеЗначение Тогда
			Данные.ВыражениеОбработкиРезультатаЗамены = НовоеЗначение;
			НужнаЗапись = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Данные Из ОбновляемыйОбъект.ПравилаЗаполненияТаблиц Цикл
		
		НовоеЗначение = СтрЗаменить(Данные.ЗначениеЗаменыРеквизит, "Корреспондент", "Контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "корреспондент", "контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "КОРРЕСПОНДЕНТ", "КОНТРАГЕНТ");
		Если Данные.ЗначениеЗаменыРеквизит <> НовоеЗначение Тогда
			Данные.ЗначениеЗаменыРеквизит = НовоеЗначение;
			НужнаЗапись = Истина;
		КонецЕсли;
		
		НовоеЗначение = СтрЗаменить(Данные.ЗначениеЗаменыВыражение, "Корреспондент", "Контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "корреспондент", "контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "КОРРЕСПОНДЕНТ", "КОНТРАГЕНТ");
		Если Данные.ЗначениеЗаменыВыражение <> НовоеЗначение Тогда
			Данные.ЗначениеЗаменыВыражение = НовоеЗначение;
			НужнаЗапись = Истина;
		КонецЕсли;
		
		НовоеЗначение = СтрЗаменить(Данные.ИсточникДанныхДляЗамены, "Корреспондент", "Контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "корреспондент", "контрагент");
		НовоеЗначение = СтрЗаменить(НовоеЗначение, "КОРРЕСПОНДЕНТ", "КОНТРАГЕНТ");
		Если Данные.ИсточникДанныхДляЗамены <> НовоеЗначение Тогда
			Данные.ИсточникДанныхДляЗамены = НовоеЗначение;
			НужнаЗапись = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеС20_УсловияМаршрутизации_Корреспондент(ОбновляемыйОбъект, НужнаЗапись) Экспорт
	
	НовоеЗначение = СтрЗаменить(ОбновляемыйОбъект.ВыражениеУсловия, "Корреспондент", "Контрагент");
	НовоеЗначение = СтрЗаменить(НовоеЗначение, "корреспондент", "контрагент");
	НовоеЗначение = СтрЗаменить(НовоеЗначение, "КОРРЕСПОНДЕНТ", "КОНТРАГЕНТ");
	Если ОбновляемыйОбъект.ВыражениеУсловия <> НовоеЗначение Тогда
		ОбновляемыйОбъект.ВыражениеУсловия = НовоеЗначение;
		НужнаЗапись = Истина;
	КонецЕсли;
		
КонецПроцедуры	

Процедура ОбновлениеС20_Нумераторы_Корреспондент(ОбновляемыйОбъект, НужнаЗапись) Экспорт

	НовыйФорматНомера = СтрЗаменить(ОбновляемыйОбъект.ФорматНомера, "[ИндексКорресп]", "[ИндексКонтр]");
	
	Если НовыйФорматНомера <> ОбновляемыйОбъект.ФорматНомера Тогда
		ОбновляемыйОбъект.ФорматНомера = НовыйФорматНомера;
		НужнаЗапись = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбновлениеС20_УведомленияПрограммы(УведомлениеПрограммы) Экспорт

	УведомлениеПрограммы.КраткоеОписание = СтрПолучитьСтроку(УведомлениеПрограммы.Описание, 1);
	УведомлениеПрограммы.Описание = СтрЗаменить(УведомлениеПрограммы.Описание, Символы.ПС, "<br>");
	УведомлениеПрограммы.Описание = СтрШаблон(
		"<html>
		|<body>
		|<div style=""font-family:Arial;font-size:10pt;"">
		|%1
		|</div>
		|</body>
		|</html>",
		УведомлениеПрограммы.Описание);
	УведомлениеПрограммы.Просмотрено = УведомлениеПрограммы.ПометкаУдаления;
	
КонецПроцедуры	

// ИзмененныеПроекты - Массив ссылок на Справочник.Проекты
Процедура ОбновитьПроекты(ИзмененныеПроекты) Экспорт
	
	// Добавление рук. проектов в рабочие группы.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Руководитель
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО Проекты.Ссылка = РабочиеГруппы.Объект
		|ГДЕ
		|	Проекты.Ссылка В(&ИзмененныеПроекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	Проекты.Ссылка,
		|	Проекты.Руководитель
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РабочиеГруппы.Участник = Проекты.Руководитель
		|			И РабочиеГруппы.Изменение) = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ИзмененныеПроекты", ИзмененныеПроекты);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
		Запись.Объект = Выборка.Проект;
		Запись.Участник = Выборка.Руководитель;
		Запись.Изменение = Истина;
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьШаблоныДокументов(
	ИзмененныеШаблоныВнутреннихДокументов, 
	ИзмененныеШаблоныВходящихДокументов, 
	ИзмененныеШаблоныИсходящихДокументов) Экспорт
	
	Если ИзмененныеШаблоныВнутреннихДокументов.Количество() = 0
		И ИзмененныеШаблоныВходящихДокументов.Количество() = 0
		И ИзмененныеШаблоныВходящихДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	// Добавление авторов шаблонов документов в рабочие группы.
	
	ТаблицыШаблонов = Новый Массив;
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныВнутреннихДокументов");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныВходящихДокументов");
	ТаблицыШаблонов.Добавить("Справочник.ШаблоныИсходящихДокументов");
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	Шаблоны.Ссылка КАК Шаблон,
		|	Шаблоны.Автор
		|ИЗ
		|	#ТаблицаШаблонов КАК Шаблоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО Шаблоны.Ссылка = РабочиеГруппы.Объект
		|ГДЕ
		|	Шаблоны.Ссылка В(&ИзмененныеШаблоны)
		|
		|СГРУППИРОВАТЬ ПО
		|	Шаблоны.Ссылка,
		|	Шаблоны.Автор
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РабочиеГруппы.Участник = Шаблоны.Автор
		|			И РабочиеГруппы.Изменение) = ЛОЖЬ";
		
	Для Каждого ИмяТаблицы Из ТаблицыШаблонов Цикл
		
		Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "#ТаблицаШаблонов", ИмяТаблицы));
		
		Если ИмяТаблицы = "Справочник.ШаблоныВнутреннихДокументов" Тогда
			Запрос.УстановитьПараметр("ИзмененныеШаблоны", ИзмененныеШаблоныВнутреннихДокументов);	
		ИначеЕсли ИмяТаблицы = "Справочник.ШаблоныВходящихДокументов" Тогда
			Запрос.УстановитьПараметр("ИзмененныеШаблоны", ИзмененныеШаблоныВходящихДокументов);	
		ИначеЕсли ИмяТаблицы = "Справочник.ШаблоныИсходящихДокументов" Тогда
			Запрос.УстановитьПараметр("ИзмененныеШаблоны", ИзмененныеШаблоныИсходящихДокументов);	
		КонецЕсли;	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Шаблон;
			Запись.Участник = Выборка.Автор;
			Запись.Изменение = Истина;
			Запись.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныИсполнения(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаИсполненияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныОзнакомления(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаОзнакомленияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныПоручения(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаПорученияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныПриглашения(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаПриглашенияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныРассмотрения(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаРассмотренияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныРегистрации(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаРегистрацииВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныСогласования(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаСогласованияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеШаблоны - Массив ссылок на Справочник.Шаблоны процессов
Процедура ОбновитьСрокиШаблоныУтверждения(ИзмененныеШаблоны) Экспорт
	
	Для Каждого СсылкаНаШаблон Из ИзмененныеШаблоны Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиШаблонаУтвержденияВНовыеРеквизиты(СсылкаНаШаблон);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыИсполнения(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиИсполненияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыОзнакомления(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиОзнакомленияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыПоручения(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиПорученияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыПриглашения(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиПриглашенияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыРассмотрения(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиРассмотренияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыРегистрации(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиРегистрацииВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыСогласования(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиСогласованияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыУтверждения(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиУтвержденияВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыКомплексныйПроцесс(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ПеренестиСрокиКомплексныйПроцессВНовыеРеквизиты(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

// ИзмененныеПроцессы - Массив ссылок на процессы
Процедура ОбновитьСрокиПроцессыСоставногоПроцесса(ИзмененныеПроцессы) Экспорт
	
	Для Каждого СсылкаНаПроцесс Из ИзмененныеПроцессы Цикл
		СрокиИсполненияПроцессовКОРП.ОбновитьСрокИсполненияСоставногоПроцесса(СсылкаНаПроцесс);
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти
