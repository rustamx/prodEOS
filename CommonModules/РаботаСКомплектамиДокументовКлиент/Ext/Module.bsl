// Устанавливает доступность команд работы с файлами
//
Процедура УстановитьДоступностьКомандРаботыСЭлементамиКомплекта(Форма)
	
	Элементы = Форма.Элементы;
	ТолькоПросмотр = Форма.ТолькоПросмотр;
	ДоступныеПоля = Форма.ДоступныеПоля;
	ТекущиеДанные = Элементы.СоставКомплекта.ТекущиеДанные;
	ЕстьВыделенныеСтроки = (Элементы.СоставКомплекта.ВыделенныеСтроки.Количество() > 0);
	ВыделеныТолькоФайлы = Ложь;
	Для каждого ВыделеннаяСтрока Из Элементы.СоставКомплекта.ВыделенныеСтроки Цикл
		ДанныеСтроки = Форма.Элементы.СоставКомплекта.ДанныеСтроки(ВыделеннаяСтрока);
		Если Не ЭтоФайл(ДанныеСтроки.Ссылка) Тогда
			ВыделеныТолькоФайлы = Ложь;
			Прервать;
		КонецЕсли;
		ВыделеныТолькоФайлы = Истина;
	КонецЦикла;
	
	УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.СоставКомплектаПодобратьВнутренниеДокументы, 
		Не ТолькоПросмотр И Найти(Форма.ПраваДоступа, "ВнутренниеДокументы.Чтение") > 0);
	УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.СоставКомплектаПодобратьВходящиеДокументы, 
		Не ТолькоПросмотр И Найти(Форма.ПраваДоступа, "ВходящиеДокументы.Чтение") > 0);
	УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.СоставКомплектаПодобратьИсходящиеДокументы, 
		Не ТолькоПросмотр И Найти(Форма.ПраваДоступа, "ИсходящиеДокументы.Чтение") > 0);
	УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.СоставКомплектаПодобратьФайлы, 
		Не ТолькоПросмотр И Найти(Форма.ПраваДоступа, "Файлы.Чтение") > 0);
	
	УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаСохранитьФайлКак, ВыделеныТолькоФайлы);
	УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаСохранитьФайлКак, ВыделеныТолькоФайлы);
	
	Если ТекущиеДанные = Неопределено Тогда
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаПросмотретьФайл, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаПросмотретьФайл, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаРедактировать, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаЗанятьФайл, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаЗанятьФайл, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаОтменитьРедактированиеФайла, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаОтменитьРедактированиеФайла, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаОбновитьИзФайлаНаДиске, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаСохранитьИзмененияФайла, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаСохранитьИзмененияФайла, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаУдалить, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаУдалить, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаИзменитьКомментарий, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаИзменитьКомментарий, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаСоздатьБизнесПроцесс, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаСоздатьБизнесПроцесс, Ложь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВверх, Ложь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВниз, Ложь);
		
	Иначе
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ЭтоДокумент = ЭтоДокумент(ТекущиеДанные.Ссылка);
		ЭтоФайл = ЭтоФайл(ТекущиеДанные.Ссылка);
		ЭтоДокументИлиФайл = ЭтоДокумент Или ЭтоФайл;
		
		ЭтоПервыйУровеньДерева = (ТекущиеДанные.ПолучитьРодителя() = Неопределено);
		ФайлНеЗанят = ЭтоФайл И Не ЗначениеЗаполнено(Редактирует);
		
		НомерСтроки = Форма.СоставКомплекта.ПолучитьЭлементы().Индекс(ТекущиеДанные);
		ЭтоПерваяСтрока = (НомерСтроки = 0);
		ЭтоПоследняяСтрока = (НомерСтроки = Форма.СоставКомплекта.ПолучитьЭлементы().Количество() - 1);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаПросмотретьФайл, ЭтоФайл);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаПросмотретьФайл, ЭтоФайл);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаРедактировать, ФайлНеЗанят Или РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаРедактировать, ФайлНеЗанят Или РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаЗанятьФайл, ФайлНеЗанят);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаЗанятьФайл, ФайлНеЗанят);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаОтменитьРедактированиеФайла, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаОтменитьРедактированиеФайла, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаОбновитьИзФайлаНаДиске, ФайлНеЗанят Или РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаОбновитьИзФайлаНаДиске, ФайлНеЗанят Или РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаСохранитьИзмененияФайла, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаСохранитьИзмененияФайла, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаУдалить, Не ТолькоПросмотр И ЭтоПервыйУровеньДерева);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаУдалить, Не ТолькоПросмотр И ЭтоПервыйУровеньДерева);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаИзменитьКомментарий, ЭтоПервыйУровеньДерева);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаИзменитьКомментарий, ЭтоПервыйУровеньДерева);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.ЭлементКомплектаСоздатьБизнесПроцесс, ЭтоДокументИлиФайл);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаСоздатьБизнесПроцесс, ЭтоДокументИлиФайл);
		
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВверх, Не ТолькоПросмотр И ЭтоПервыйУровеньДерева И Не ЭтоПерваяСтрока);
		УстановитьДоступностьКоманды(ДоступныеПоля, Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВниз, Не ТолькоПросмотр И ЭтоПервыйУровеньДерева И Не ЭтоПоследняяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКоманды(ДоступныеПоля, Команда, Доступность)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "Выбор" дерева значений "Состав комплекта"
//
Процедура СоставКомплектаВыбор(Форма, Элемент, Поле, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Если Поле = Форма.Элементы.СоставКомплектаКомментарий Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	ИначеЕсли ЭтоФайл(Ссылка) Тогда
		КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
		Если КакОткрывать = "ОткрыватьКарточку" Тогда
			ПоказатьЗначение(, Ссылка);
			Возврат;
		КонецЕсли;
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Ссылка, Неопределено, Форма.УникальныйИдентификатор);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
		ПараметрыОбработчика.Вставить("Форма", Форма);
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Форма.Элементы.ЭлементКомплектаРедактировать.Доступность);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомплектИКоманды(Результат, ПараметрыВыполнения) Экспорт
	
	СоставКомплектаОбновить(ПараметрыВыполнения.Форма);
	УстановитьДоступностьКомандРаботыСЭлементамиКомплекта(ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Обработчик события "ПриАктивацииСтроки" дерева значений "Состав комплекта"
//
Процедура СоставКомплектаПриАктивизацииСтроки(Форма) Экспорт
	
	УстановитьДоступностьКомандРаботыСЭлементамиКомплекта(Форма);
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" дерева значений "Состав комплекта"
//
Процедура СоставКомплектаПередНачаломДобавления(Форма, Отказ) Экспорт
	
	Отказ = Истина;
	СоставКомплектаПодобрать(Форма);
	
КонецПроцедуры

// Обработка выбора элемента для добавления в комплект
//
Процедура СоставКомплектаДобавитьЭлементы(Форма, ВыбранноеЗначение) Экспорт
	Перем СообщениеОбОшибке;
	
	КомплектИнфо = ПолучитьКомплектИнфо(Форма);
	
	ТекстПредупреждения = "";
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого ДобавляемыйЭлемент Из ВыбранноеЗначение Цикл
			Если Не ДобавитьЭлементКомплекта(Форма, КомплектИнфо, Форма.Объект.Ссылка, ДобавляемыйЭлемент, "", СообщениеОбОшибке) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстПредупреждения, Символы.ПС, СообщениеОбОшибке);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ДобавитьЭлементКомплекта(Форма, КомплектИнфо, Форма.Объект.Ссылка, ВыбранноеЗначение, "", СообщениеОбОшибке) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстПредупреждения, Символы.ПС, СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	СоставКомплектаОбновитьСписок(Форма, КомплектИнфо);
	
	Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "СоставКомплектаОбновить"
//
Процедура СоставКомплектаОбновить(Форма) Экспорт
	
	КомплектИнфо = ПолучитьКомплектИнфо(Форма);
	СоставКомплектаОбновитьСписок(Форма, КомплектИнфо);
	
КонецПроцедуры

// Обработчик команд "СоставКомплектаПодобратьВнутренниеДокументы", ...
// Параметры:
// - Форма (УправляемаяФорма)
// - Тип (Строка): "ВнутренниеДокументы" | "ВходящиеДокументы" | "ИсходящиеДокументы" | "Файлы"
//
Процедура СоставКомплектаПодобрать(Форма, Тип = Неопределено) Экспорт
	
	Если Не ЭтоВнутреннийДокумент(Форма.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоставКомплектаПодобратьПродолжение",
		ЭтотОбъект,
		Новый Структура("Форма", Форма));

	Если Тип = Неопределено Тогда
		Меню = Новый СписокЗначений;
		Если Найти(Форма.ПраваДоступа, "ВнутренниеДокументы.Чтение") > 0 Тогда
			Меню.Добавить("ВнутренниеДокументы", НСтр("ru = 'Подобрать внутренние документы'; en = 'Fill with internal documents'"));
		КонецЕсли;
		Если Найти(Форма.ПраваДоступа, "ВходящиеДокументы.Чтение") > 0 Тогда
			Меню.Добавить("ВходящиеДокументы", НСтр("ru = 'Подобрать входящие документы'; en = 'Fill with incoming documents'"));
		КонецЕсли;
		Если Найти(Форма.ПраваДоступа, "ИсходящиеДокументы.Чтение") > 0 Тогда
			Меню.Добавить("ИсходящиеДокументы", НСтр("ru = 'Подобрать исходящие документы'; en = 'Fill with outgoing documents'"));
		КонецЕсли;
		Если Найти(Форма.ПраваДоступа, "Файлы.Чтение") > 0 Тогда
			Меню.Добавить("Файлы", НСтр("ru = 'Подобрать файлы'; en = 'Fill with files'"));
		КонецЕсли;
		Если Меню.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Меню.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите действие'; en = 'Select action'"));
	Иначе 
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокТипов[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоставКомплектаПодобратьПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	
	Тип = Результат.Значение;
	Форма = Параметры.Форма;
	
	Если ВРег(Тип) = ВРег("ВнутренниеДокументы") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ПоказыватьКомандуСоздать", Истина);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Подбор внутренних документов в комплект'; en = 'Filling set with internal documents'"));
		ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаВыбора", ПараметрыОткрытия, Форма.Элементы.СоставКомплекта);
	ИначеЕсли ВРег(Тип) = ВРег("ВходящиеДокументы") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ПоказыватьКомандуСоздать", Истина);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Подбор входящих документов в комплект'; en = 'Filling set with incoming documents'"));
		ОткрытьФорму("Справочник.ВходящиеДокументы.Форма.ФормаВыбора", ПараметрыОткрытия, Форма.Элементы.СоставКомплекта);
	ИначеЕсли ВРег(Тип) = ВРег("ИсходящиеДокументы") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ПоказыватьКомандуСоздать", Истина);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Подбор исходящих документов в комплект'; en = 'Filling set with outgoing documents'"));
		ОткрытьФорму("Справочник.ИсходящиеДокументы.Форма.ФормаВыбора", ПараметрыОткрытия, Форма.Элементы.СоставКомплекта);
	ИначеЕсли ВРег(Тип) = ВРег("Файлы") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Подбор файлов в комплект'; en = 'Filling set with files'"));
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках", ПараметрыОткрытия, Форма.Элементы.СоставКомплекта);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаУдалить"
//
Процедура ЭлементКомплектаУдалить(Форма, Отказ = Неопределено) Экспорт
	
	Отказ = Истина;
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.СоставКомплекта.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Удалять можно только элементы текущего комплекта.'; en = 'Only the elements of the current set can be deleted.'"));
		Возврат;
	КонецЕсли;
	
	СоставКомплектаЭлементы = Форма.СоставКомплекта.ПолучитьЭлементы();
	СоставКомплектаЭлементы.Удалить(Форма.Элементы.СоставКомплекта.ТекущиеДанные);
	Форма.КоличествоЭлементовКомплекта = СоставКомплектаЭлементы.Количество();
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаПросмотретьФайл"
//
Процедура ЭлементКомплектаПросмотретьФайл(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если ЭтоФайл(Ссылка) Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Ссылка, Неопределено, Форма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	ИначеЕсли ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаОткрытьКарточку"
//
Процедура ЭлементКомплектаОткрытьКарточку(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаРедактировать"
//
Процедура ЭлементКомплектаРедактировать(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если Не ЭтоФайл(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Ссылка);
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаОбновитьИзФайлаНаДиске"
//
Процедура ЭлементКомплектаОбновитьИзФайлаНаДиске(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если Не ЭтоФайл(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Обработчик,
		ДанныеФайла,
		Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаЗанятьФайл"
//
Процедура ЭлементКомплектаЗанятьФайл(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если Не ЭтоФайл(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Ссылка);
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаОтменитьРедактированиеФайла"
//
Процедура ЭлементКомплектаОтменитьРедактированиеФайла(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если Не ЭтоФайл(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыОбработчика);
	
	ТекущиеДанные = Форма.Элементы.СоставКомплекта.ТекущиеДанные;
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, Ссылка);
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаЗакончитьРедактирование"
//
Процедура ЭлементКомплектаЗакончитьРедактирование(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если Не ЭтоФайл(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыОбработчика);
		
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, Ссылка, Форма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Форма.Элементы.СоставКомплекта.ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаСохранитьФайлКак"
//
Процедура ЭлементКомплектаСохранитьФайлКак(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.СоставКомплекта.ВыделенныеСтроки.Количество() = 1 Тогда
		Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
		Если Не ЭтоФайл(Ссылка) Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Ссылка, Неопределено, Форма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, Форма.УникальныйИдентификатор);
		
	Иначе // выделено больше 1 строки
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Форма.Элементы.СоставКомплекта.ВыделенныеСтроки Цикл
			ДанныеСтроки = Форма.Элементы.СоставКомплекта.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЭтоФайл(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, Форма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "ЭлементКомплектаСохранитьИзмененияФайла"
//
Процедура ЭлементКомплектаСохранитьИзмененияФайла(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = Форма.Элементы.СоставКомплекта.ТекущиеДанные.Ссылка;
	Если Не ЭтоФайл(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ОбновитьКомплектИКоманды", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Ссылка, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Создает процесс на основании выделенных строк состава комплекта
//
// Параметры:
//   Форма - УправляемаяФорма - форма комплекта документа.
//
Процедура ЭлементКомплектаСоздатьБизнесПроцесс(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Предметы = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Форма.Элементы.СоставКомплекта.ВыделенныеСтроки Цикл
		Предметы.Добавить(Форма.СоставКомплекта.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("Предметы", Предметы);
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает модальную форму ввода комментария
//
Процедура ЭлементКомплектаИзменитьКомментарий(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.СоставКомплекта.ТекущиеДанные;
	Если Не ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЭлементКомплектаИзменитьКомментарийПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ЭлементКомплектаИзменитьКомментарийПродолжение(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекущиеДанные = Параметры.ТекущиеДанные;
		ТекущиеДанные.Комментарий = Результат;
		Параметры.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Перемещает элемент комплекта на одну позицию ниже, если он стоит не на последнем месте, иначе ничего не делает.
//
Процедура ЭлементКомплектаПереместитьВниз(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.СоставКомплекта.ТекущиеДанные;
	Если Не ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Порядок = ТекущиеДанные.Порядок;
	ТекСтрока = Неопределено;
	СледующаяСтрока = Неопределено;
	Для каждого Строка Из Форма.СоставКомплекта.ПолучитьЭлементы() Цикл
		Если Строка.Порядок = Порядок Тогда
			ТекСтрока = Строка;
		КонецЕсли;
		Если Строка.Порядок > Порядок Тогда
			Если СледующаяСтрока <> Неопределено И СледующаяСтрока.Порядок < Строка.Порядок Тогда
				Продолжить;
			КонецЕсли;
			СледующаяСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекСтрока <> Неопределено И СледующаяСтрока <> Неопределено Тогда
		ПорядокВрем = ТекСтрока.Порядок;
		ТекСтрока.Порядок = СледующаяСтрока.Порядок;
		СледующаяСтрока.Порядок = ПорядокВрем;
	КонецЕсли;
	
	КомплектИнфо = ПолучитьКомплектИнфо(Форма);
	СоставКомплектаОбновитьСписок(Форма, КомплектИнфо);
	
КонецПроцедуры

// Перемещает элемент комплекта на одну позицию выше, если он стоит не на первом месте, иначе ничего не делает.
//
Процедура ЭлементКомплектаПереместитьВверх(Форма) Экспорт
	
	Если Форма.Элементы.СоставКомплекта.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.СоставКомплекта.ТекущиеДанные;
	Если Не ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Порядок = ТекущиеДанные.Порядок;
	ТекСтрока = Неопределено;
	СледующаяСтрока = Неопределено;
	Для каждого Строка Из Форма.СоставКомплекта.ПолучитьЭлементы() Цикл
		Если Строка.Порядок = Порядок Тогда
			ТекСтрока = Строка;
		КонецЕсли;
		Если Строка.Порядок < Порядок Тогда
			Если СледующаяСтрока <> Неопределено И СледующаяСтрока.Порядок > Строка.Порядок Тогда
				Продолжить;
			КонецЕсли;
			СледующаяСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекСтрока <> Неопределено И СледующаяСтрока <> Неопределено Тогда
		ПорядокВрем = ТекСтрока.Порядок;
		ТекСтрока.Порядок = СледующаяСтрока.Порядок;
		СледующаяСтрока.Порядок = ПорядокВрем;
	КонецЕсли;
	
	КомплектИнфо = ПолучитьКомплектИнфо(Форма);
	СоставКомплектаОбновитьСписок(Форма, КомплектИнфо);
	
КонецПроцедуры


// ОБЩИЕ КОМАНДЫ

// Обработчик общей команды "ДобавитьВКомплект"
//
Процедура ДобавитьВКомплект(ВыделенныеСтроки) Экспорт
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивЭлементов.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВКомплектПродолжение",
		ЭтотОбъект,
		Новый Структура("МассивЭлементов", МассивЭлементов));

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЯвляетсяКомплектомДокументов", Истина);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выберите комплект документов'; en = 'Select document set'"));
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыОткрытия,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ДобавитьВКомплектПродолжение(КомплектДокументов, Параметры) Экспорт

	Если КомплектДокументов <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", КомплектДокументов);
		ПараметрыОткрытия.Вставить("ДобавляемыеЭлементыКомплекта", Параметры.МассивЭлементов);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик общей команды "СоздатьКомплект"
//
Процедура СоздатьКомплект(ВыделенныеСтроки) Экспорт
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивЭлементов.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьКомплектПродолжение",
		ЭтотОбъект,
		Новый Структура("МассивЭлементов", МассивЭлементов));

	СписокВидовКомплектов = РаботаСКомплектамиДокументовСервер.ПолучитьСписокВидовКомплектов();
	Если СписокВидовКомплектов.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Не найдено ни одного вида документов с признаком ""Является комплектом документов""'; en = 'Not a single document type is found with the flag ""Is a set of documents""'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	ИначеЕсли СписокВидовКомплектов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВидовКомплектов[0]);
	Иначе	
		СписокВидовКомплектов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид комплекта документов'; en = 'Select document set type'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКомплектПродолжение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		ВидДокумента = Результат.Значение;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавляемыеЭлементыКомплекта", Параметры.МассивЭлементов);
	ПараметрыОткрытия.Вставить("ВидКомплекта", ВидДокумента);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры	


Функция ЭтоВнутреннийДокумент(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы");
	
КонецФункции

Функция ЭтоДокумент(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы")
	Или ТипЗнч(Значение) = Тип("СправочникСсылка.ВходящиеДокументы")
	Или ТипЗнч(Значение) = Тип("СправочникСсылка.ИсходящиеДокументы");
	
КонецФункции

Функция ЭтоДокументИлиФайл(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы")
	Или ТипЗнч(Значение) = Тип("СправочникСсылка.ВходящиеДокументы")
	Или ТипЗнч(Значение) = Тип("СправочникСсылка.ИсходящиеДокументы")
	Или ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы");
	
КонецФункции

Функция ЭтоФайл(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы");
	
КонецФункции


// ПРОЧИЕ

Функция ПолучитьКомплектИнфо(Форма)
	
	Инфо = Новый Структура;
	Инфо.Вставить("Комплект", Форма.Объект.Ссылка);
	Инфо.Вставить("Элементы", Новый Массив);
	Инфо.Вставить("Строки", Новый Массив);
	Для каждого СоставКомплектаСтрока Из Форма.СоставКомплекта.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СоставКомплектаСтрока.Ссылка) И Инфо.Элементы.Найти(СоставКомплектаСтрока.Ссылка) = Неопределено Тогда
			НоваяСтрока = Новый Структура("Ссылка, Комментарий, Порядок");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставКомплектаСтрока);
			Инфо.Элементы.Добавить(СоставКомплектаСтрока.Ссылка);
			Инфо.Строки.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Инфо;
	
КонецФункции

Функция ДобавитьЭлементКомплекта(Форма, КомплектИнфо, КомплектСсылка, Ссылка, Комментарий, СообщениеОбОшибке)
	
	СообщениеОбОшибке = "";
	
	Если КомплектИнфо.Элементы.Найти(Ссылка) <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" уже находится в комплекте.'; en = 'Document ""%1"" is already in the set.'"),
			Ссылка);
		Возврат Ложь;
	КонецЕсли;
	Если Ссылка = КомплектСсылка Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" не добавлен. Нельзя добавлять комплект сам в себя.'; en = 'Document ""%1"" is not added. It is not possible to add a set to itself.'"),
			Ссылка);
		Возврат Ложь;
	КонецЕсли;
	Если Не ЭтоДокументИлиФайл(Ссылка) Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект ""%1"" не добавлен. В комплект можно добавлять только документы или файлы.'; en = 'Object ""%1"" is not added. Only documents and types may be added to sets.'"),
			Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	КомплектИнфо.Элементы.Добавить(Ссылка);
	НоваяСтрока = Новый Структура;
	НоваяСтрока.Вставить("Ссылка", Ссылка);
	НоваяСтрока.Вставить("Комментарий", Комментарий);
	НоваяСтрока.Вставить("Порядок", -1);
	КомплектИнфо.Строки.Добавить(НоваяСтрока);
	
	Возврат Истина;
	
КонецФункции

Процедура СоставКомплектаОбновитьСписок(Форма, КомплектИнфо)
	
	Состояние = ЗапомнитьСостояниеДерева(Форма.СоставКомплекта, Форма.Элементы.СоставКомплекта);
	
	Дерево = РаботаСКомплектамиДокументовСервер.ПолучитьДеревоКомплектаДокументов(КомплектИнфо);
	Форма.СоставКомплекта.ПолучитьЭлементы().Очистить();
	СкопироватьЭлементы(Форма.СоставКомплекта, Дерево);
	
	ВосстановитьСостояниеДерева(Форма.СоставКомплекта, Форма.Элементы.СоставКомплекта, Состояние);
	
	Форма.КоличествоЭлементовКомплекта = Форма.СоставКомплекта.ПолучитьЭлементы().Количество();
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура СкопироватьЭлементы(Приемник, Источник)
	
	Для каждого ЭлементИсточника Из Источник Цикл
		НовыйЭлемент = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточника.Значение);
		СкопироватьЭлементы(НовыйЭлемент, ЭлементИсточника.Элементы);
	КонецЦикла;
	
КонецПроцедуры


// ДЕРЕВО

Функция ЗапомнитьСостояниеДерева(Дерево, ФормаДерево)
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", Неопределено);
	Если ФормаДерево.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ФормаДерево.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			Состояние.ТекСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Дерево);
	Контекст.Вставить("ФормаДерево", ФормаДерево);
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(Дерево.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для каждого Элемент Из ДеревоЭлементы Цикл
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
		ОбойтиДерево(Элемент.ПолучитьЭлементы(), Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Контекст.Состояние.Вставить(ТекДанные.Ссылка, Контекст.ФормаДерево.Развернут(ИдентификаторСтроки));
	
КонецФункции

Процедура ВосстановитьСостояниеДерева(Дерево, ФормаДерево, Состояние)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Дерево);
	Контекст.Вставить("ФормаДерево", ФормаДерево);
	Контекст.Вставить("Состояние", Состояние.Развернут);
	Контекст.Вставить("ТекСсылка", Состояние.ТекСсылка);
	ОбойтиДерево(Дерево.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Контекст.Состояние.Получить(ТекДанные.Ссылка) = Истина Тогда
		Контекст.ФормаДерево.Развернуть(ИдентификаторСтроки);
	Иначе
		Контекст.ФормаДерево.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	Если ТекДанные.Ссылка = Контекст.ТекСсылка Тогда
		Контекст.ФормаДерево.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции


