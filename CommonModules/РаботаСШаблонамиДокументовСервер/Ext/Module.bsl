Функция ПолучитьНаборДопРеквизитовДокумента(ТипДокумента, ВидДокумента, ОбъектШаблон) Экспорт
	
	ОбъектДО = Справочники[ТипДокумента].СоздатьЭлемент();
	ОбъектДО.ВидДокумента = ВидДокумента;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ОбъектДО);  
	
	Результат = Новый СписокЗначений;
	НаборСвойствОбъекта = Новый Массив;
	
	Для Каждого Элемент Из НаборСвойств Цикл
		Для Каждого ДопРеквизит Из Элемент.Набор.ДополнительныеРеквизиты Цикл
			Если НаборСвойствОбъекта.Найти(ДопРеквизит.Свойство) = Неопределено
				И Не ДопРеквизит.ПометкаУдаления Тогда 
				НаборСвойствОбъекта.Добавить(ДопРеквизит.Свойство);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого ДопРеквизит Из НаборСвойствОбъекта Цикл
		ДанныеОДополнительномРеквизите = Новый Структура;
		ДанныеОДополнительномРеквизите.Вставить("Свойство", ДопРеквизит);
		
		Если ОбъектШаблон.ДополнительныеРеквизиты.Количество() > 0 Тогда
			СтруктураПоиска = Новый Структура("Свойство", ДопРеквизит);
			СтрокиТаблицыЗначений = ОбъектШаблон.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицыЗначений.Количество() > 0 Тогда
				СтрокаТаблицыЗначений = СтрокиТаблицыЗначений[0];
				Если СтрокаТаблицыЗначений <> Неопределено Тогда
					ДанныеОДополнительномРеквизите.Вставить("Значение", СтрокаТаблицыЗначений.Значение);
				Иначе
					ДанныеОДополнительномРеквизите.Вставить("Значение", Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДанныеОДополнительномРеквизите.Вставить("ТипРеквизита", ДопРеквизит.ТипЗначения);
		Результат.Добавить(ДанныеОДополнительномРеквизите);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПоместитьДопРеквизитыНаФорму(ТабличнаяЧастьДопРеквизиты, СписокДопРеквизитов) Экспорт
	
	ТабличнаяЧастьДопРеквизиты.Очистить();
	Для Каждого Реквизит Из СписокДопРеквизитов Цикл
		НоваяСтрока = ТабличнаяЧастьДопРеквизиты.Добавить();
		НоваяСтрока.Свойство = Реквизит.Значение.Свойство;
		Если Реквизит.Значение.Свойство("Значение") И ЗначениеЗаполнено(Реквизит.Значение.Значение) Тогда
			НоваяСтрока.Значение = Реквизит.Значение.Значение;
		КонецЕсли;
		НоваяСтрока.ТипЗначения = Реквизит.Значение.ТипРеквизита;
	КонецЦикла;
	
КонецПроцедуры

// Прописывает персональным шаблонам Автора в табличную часть Доступ
//
Процедура ОбновлениеИнформационнойБазыПерейтиНаВерсию_1_2_1_6() Экспорт
	
	Выборка = Справочники.ШаблоныВнутреннихДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Ответственный = Объект.Автор;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Выборка = Справочники.ШаблоныВходящихДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Ответственный = Объект.Автор;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Выборка = Справочники.ШаблоныИсходящихДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Ответственный = Объект.Автор;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество доступных пользователю шаблонов документов
//
Функция ПолучитьКоличествоДоступныхШаблоновДокументов(ИмяСправочникаШаблонов) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ШаблоныДокументов.Код) КАК КоличествоШаблонов
		|ИЗ
		|	Справочник.[ИмяСправочникаШаблонов] КАК ШаблоныДокументов";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяСправочникаШаблонов]", ИмяСправочникаШаблонов);
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос.Выполнить().Выгрузить()[0][0];
	
КонецФункции


// Записать использование шаблона
Процедура ЗаписатьИспользованиеШаблона(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Запишем в регистр ОбращенияКОбъектам
	МенеджерЗаписи = РегистрыСведений.ИспользованиеШаблонов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Шаблон = Ссылка;
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.ДатаИспользования = ТекущаяДатаСеанса();
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда 
		МенеджерЗаписи.ИндексКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИндексКартинки");
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	// Проверку превышения числа записей делаем не каждый раз, а один раз из 20 вызовов процедуры
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДата()));
	СлучайноеЧисло = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 20);
	Если СлучайноеЧисло % 20 = 0 Тогда
		ПроверитьМаксимальноеЧислоЗаписейИУдалить();
	КонецЕсли;	
	
КонецПроцедуры	

// Получает последние 5 шаблонов
Функция ПолучитьПоследниеИспользованныеШаблоны(ТипПредмета = "СправочникСсылка.Файлы") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
		|	ИспользованиеШаблонов.Шаблон КАК Шаблон,
		|	ИспользованиеШаблонов.ДатаИспользования КАК ДатаИспользования,
		|	ИспользованиеШаблонов.ИндексКартинки
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеШаблонов КАК ИспользованиеШаблонов
		|		ПО (ТИПЗНАЧЕНИЯ(ИдентификаторыОбъектовМетаданных.ЗначениеПустойСсылки) = ТИПЗНАЧЕНИЯ(ИспользованиеШаблонов.Шаблон))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (Файлы.Ссылка = ИспользованиеШаблонов.Шаблон)
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя = &ТипПредмета
		|	И ИспользованиеШаблонов.Пользователь = &Пользователь
		|	И НЕ ИспользованиеШаблонов.Шаблон.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИспользования УБЫВ";
		
		
	ПредметСсылка = Новый(ТипПредмета);
	ЭлементМетаданных = ПредметСсылка.Метаданные();
	ТипыПредмета = ЭлементМетаданных.ПолноеИмя();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Файлы", ЭлементМетаданных.Имя);
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТипПредмета", ТипыПредмета);
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

// Вернет Истина, если есть хоть один использованный шаблон
Функция ЕстьИспользованныеШаблоны(ТипПредмета = "СправочникСсылка.Файлы") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИспользованиеШаблонов.Шаблон
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеШаблонов КАК ИспользованиеШаблонов
		|		ПО (ТИПЗНАЧЕНИЯ(ИдентификаторыОбъектовМетаданных.ЗначениеПустойСсылки) = ТИПЗНАЧЕНИЯ(ИспользованиеШаблонов.Шаблон))
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя = &ТипПредмета
		|	И ИспользованиеШаблонов.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеШаблонов.ДатаИспользования УБЫВ";
		
	ПредметСсылка = Новый(ТипПредмета);
	ЭлементМетаданных = ПредметСсылка.Метаданные();
	ТипыПредмета = ЭлементМетаданных.ПолноеИмя();
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТипПредмета", ТипыПредмета);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


// Проверяет, что число записей не превышает 200 и удаляет, если превысило.
Процедура ПроверитьМаксимальноеЧислоЗаписейИУдалить()
	
	// Максимальное число записей для одного пользователя
	МаксимальноеЧислоЗаписей = 200; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	РегистрСведений.ИспользованиеШаблонов КАК ИспользованиеШаблонов
		|ГДЕ
		|	ИспользованиеШаблонов.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица[0].ЧислоЗаписей <= МаксимальноеЧислоЗаписей Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем записи, превышающие максимальное число записей + 10% от МаксимальноеЧислоЗаписей
	Превышение = Таблица[0].ЧислоЗаписей - МаксимальноеЧислоЗаписей;
	СколькоЗаписейНадоУдалить = Цел(Превышение + МаксимальноеЧислоЗаписей / 10);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ <СколькоЗаписейНадоУдалить>
		|	ИспользованиеШаблонов.Шаблон,
		|	ИспользованиеШаблонов.ДатаИспользования КАК ДатаИспользования
		|ИЗ
		|	РегистрСведений.ИспользованиеШаблонов КАК ИспользованиеШаблонов
		|ГДЕ
		|	ИспользованиеШаблонов.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИспользования";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "<СколькоЗаписейНадоУдалить>", Формат(СколькоЗаписейНадоУдалить, "ЧГ="));
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Строка Из Таблица Цикл 
		УдалитьИзРегистраОбращенияКОбъектам(Строка.Шаблон, ТекущийПользователь);
	КонецЦикла;
	
КонецПроцедуры	

// Удалить запись из регистра ОбращенияКОбъектам
Процедура УдалитьИзРегистраОбращенияКОбъектам(Шаблон, Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ИспользованиеШаблонов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Шаблон.Установить(Шаблон);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	// Не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
КонецПроцедуры	


