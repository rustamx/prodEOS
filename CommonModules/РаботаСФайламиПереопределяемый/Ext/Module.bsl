
////////////////////////////////////////////////////////////////////////////////
// Подключение управления доступом в подсистеме РаботаСФайламиВызовСервера.

#Область ПрограммныйИнтерфейс

// Можно ли занять данный файл.
//
// Параметры:
//  ДанныеФайла    - Структура - с данными файла.
//  ОписаниеОшибки - Строка - содержащая текст ошибки в случае невозможности занять.
//                   Если не пустая, тогда файл невозможно занять.
//
Процедура ПриПопыткеЗанятьФайл(ДанныеФайла, СтрокаОшибки = "") Экспорт

	// проверка доступности файла в зависимости от состояния
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеФайла) = Тип("СправочникСсылка.Файлы") Тогда 
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФайла, "ВладелецФайла");
	ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("СправочникОбъект.Файлы") Тогда 	
		ВладелецФайла = ДанныеФайла.ВладелецФайла;
	ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда 
		ВладелецФайла = ДанныеФайла.Владелец;
	КонецЕсли;
	
	ЭтоБизнесПроцесс = ОбщегоНазначения.ЭтоБизнесПроцесс(ВладелецФайла.Метаданные());
	Если ЭтоБизнесПроцесс Тогда
		СостояниеБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "Состояние");
		Если СостояниеБП <> Неопределено И СостояниеБП = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			СтрокаОшибки = НСтр("ru = 'Невозможно начать редактирование файла, т.к. прерван бизнес-процесс по файлу.'; en = 'You cannot begin editing a file, because business process on the file is interrupted.'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла);
	Если ЭтоДокумент Тогда
		ДокументПодписанЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ПодписанЭП");
		Если ДокументПодписанЭП Тогда
			СтрокаОшибки = НСтр("ru = 'Нельзя изменить файл подписанного документа.'; en = 'You cannot change the file of the signed document.'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("РедактированиеФайлов", ВладелецФайла) Тогда 
		СтрокаОшибки = НСтр("ru = 'Для текущего состояния документа запрещено изменение файлов.'; en = 'You cannot modifiy files for the current state of the document'");
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") 
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла)
		И Делопроизводство.ФайлЯвляетсяОригиналом(ДанныеФайла.Ссылка)
		И Не РольДоступна("ПолныеПрава") Тогда 
		СтрокаОшибки = НСтр("ru = 'Запрещено изменение скан-копии оригинала документа.'; en = 'It is forbidden to change the scanned copies of the original document.'");
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		
		СозданПоШаблонуДокумента 
			= РегистрыСведений.ФайлыСозданныеПоШаблону.ПолучитьФайлСозданПоШаблону(ДанныеФайла.Ссылка);
			
		Если СозданПоШаблонуДокумента Тогда
			
			ШаблонДокумента = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				ВладелецФайла, "Шаблон");
				
			ЗапретитьРедактироватьФайлы = Ложь;	
			
			Если ЗначениеЗаполнено(ШаблонДокумента)
				И (ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
				Или ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")) Тогда 
				
				ЗапретитьРедактироватьФайлы = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					ШаблонДокумента, "ЗапретитьРедактироватьФайлы");
					
			КонецЕсли;		
				
			Если ЗапретитьРедактироватьФайлы Тогда
				
				СтрокаОшибки 
					= НСтр("ru = 'Файлы этого документа нельзя изменять вручную, 
					|можно только заполнить данными документа.'; en = 'Files of this document cannot be changed manually, you can just fill in the by document data.'");
					
				Возврат;
				
			КонецЕсли;
					
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании файла
// Параметры
//  ДанныеФайла - СправочникСсылка.Файлы - ссылка на созданный файл
//    см. функцию РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла()
//
Процедура ПриСозданииФайла(ДанныеФайла) Экспорт
	
КонецПроцедуры

// Вызывается после копирования файла из исходного файла
// для заполнения таких реквизитов нового файла, которые не 
// предусмотрены в БСП и были добавлены к справочнику Файлы или 
// ВерсииФайлов в конфигурации.
//
// Параметры:
//  НовыйФайл - СправочникСсылка.Файлы - ссылка на новый файл, который надо заполнить
//  ИсходныйФайл - СправочникСсылка.Файлы - ссылка на исходный файл, откуда надо скопировать реквизиты
//
Процедура ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл) Экспорт
	
КонецПроцедуры

// Вызывается при захвате файла
// Параметры
//  ДанныеФайла - структура, содержащая сведения о Файле
//    см. функцию РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла()
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
КонецПроцедуры

// Вызывается при освобождении файла
// Параметры
//  ДанныеФайла - структура, содержащая сведения о Файле
//    см. функцию РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла()
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриОсвобожденииФайла(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
КонецПроцедуры

// Можно ли удалить данный файл.
//
// Параметры:
//  ФайлОбъект - СправочникОбъект.Файлы
//  СтрокаОшибки - Строка
//
// Возвращаемое значение:
//  Булево. Возвращает всегда Истина для роли ПолныеПрава.
//
Функция ВозможноУдалитьФайл(ФайлОбъект, СтрокаОшибки = "") Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ВладелецФайла = ФайлОбъект.ВладелецФайла;
		
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПометкаУдаления = ФайлОбъект.ПометкаУдаления;
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если ФайлОбъект.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = ФайлОбъект.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ПодписанЭП")
		И Не ЗаписьПодписанногоОбъекта Тогда
		СтрокаОшибки = ?(ПометкаУдаления,
			НСтр("ru = 'Нельзя пометить на удаление файл подписанного документа.'; en = 'You cannot mark for deletion file of the signed document.'"),
			НСтр("ru = 'Нельзя снять пометку на удаление с файла подписанного документа.'; en = 'You cannot remove deletion mark from file of a signed document.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("УдалениеФайлов", ВладелецФайла) Тогда 
		СтрокаОшибки = ?(ПометкаУдаления,
			НСтр("ru = 'Нельзя пометить файл на удаление.'; en = 'You cannot mark a file to delete.'"),
			НСтр("ru = 'Нельзя снять пометку удаления с файла.'; en = 'You cannot remove deletion mark from file.'"));
			
		//Определение состояний документа, для которых пользователь сможет менять пометку на удаление	
		СписокРазрешенных = Новый СписокЗначений;
		СписокЗапрещенных = Новый СписокЗначений;
		
		НастройкиСостояний = Делопроизводство.ПолучитьНастройкиСостояний(ВладелецФайла);
		Для Каждого НастройкаДоступности Из НастройкиСостояний Цикл 
			
			МассивСтрок = НастройкаДоступности.НастройкиДоступности.НайтиСтроки(
				Новый Структура("ИмяПоляКоманды", "УдалениеФайлов"));
			
			Для Каждого Строка Из МассивСтрок Цикл 
				Если Строка.Доступность = 1 // Да
					И СписокРазрешенных.НайтиПоЗначению(Строка.Состояние) = Неопределено Тогда 
					СписокРазрешенных.Добавить(Строка.Состояние);
				ИначеЕсли Строка.Доступность = 2 // Нет
					И СписокЗапрещенных.НайтиПоЗначению(Строка.Состояние) = Неопределено Тогда 
					СписокЗапрещенных.Добавить(Строка.Состояние);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		Если СписокРазрешенных.Количество() > 0 Тогда 
			СписокРазрешенныхСтр = "";
			Для Каждого ЗначениеСписка Из СписокРазрешенных Цикл
				СписокРазрешенныхСтр = СписокРазрешенныхСтр + " - " + ЗначениеСписка.Значение + "," + Символы.ПС;
			КонецЦикла;
			СписокРазрешенныхСтр = Лев(СписокРазрешенныхСтр, СтрДлина(СписокРазрешенныхСтр) - 2);
			
			СписокЗапрещенныхСтр = "";
			Если СписокЗапрещенных.Количество() > 0 Тогда 
				Для Каждого ЗначениеСписка Из СписокЗапрещенных Цикл
					СписокЗапрещенныхСтр = СписокЗапрещенныхСтр + 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'не %1 и '; en = 'not %1 and '"),
						НРег(ЗначениеСписка.Значение));
				КонецЦикла;
			КонецЕсли;	
				
			Если ПометкаУдаления Тогда 
				СтрокаОшибки = СтрокаОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '
					|Пометку удаления можно установить, если документ %1находится в одном из состояний:
					|%2.'; en = 'You can mark file for deletion only when the document %1 is in one of the states: %2.'"), 
					СписокЗапрещенныхСтр,
					СписокРазрешенныхСтр);
			Иначе
				СтрокаОшибки = СтрокаОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '
					|Снятие пометки удаления возможно, если документ %1находится в одном из состояний:
					|%2.'; en = 'You can remove deletion mark only when the document %1 is in one of the states: %2.'"), 
					СписокЗапрещенныхСтр,
					СписокРазрешенныхСтр);
			КонецЕсли;
				
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	СозданПоШаблонуДокумента 
		= РегистрыСведений.ФайлыСозданныеПоШаблону.ПолучитьФайлСозданПоШаблону(ФайлОбъект.Ссылка);
		
	Если СозданПоШаблонуДокумента Тогда
		
		ШаблонДокумента = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ВладелецФайла, "Шаблон");
			
		ЗапретитьУдалятьФайлы = Ложь;	
		
		Если ЗначениеЗаполнено(ШаблонДокумента)
			И (ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
			Или ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")) Тогда 
			
			ЗапретитьУдалятьФайлы = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				ШаблонДокумента, "ЗапретитьУдалятьФайлы");
				
		КонецЕсли;		
			
		Если ЗапретитьУдалятьФайлы Тогда
			
			СтрокаОшибки = НСтр("ru = 'Файлы этого документа нельзя пометить на удаление.'; en = 'The files of this document cannot be marked for deletion.'");				
			Возврат Ложь;
			
		КонецЕсли;
				
	КонецЕсли;		
	
	Возврат Истина;
	
КонецФункции

Процедура ПередЗаписьюФайла(Объект, Отказ) Экспорт 
	
КонецПроцедуры

// Функция ПометкаУдаленияРазрешена, при использовании ограничения
// пометки удаления проверяет, разрешена ли текущему пользователю
// пометка удаления папки файлов или файла.
// 
// Параметры:
//  Ссылка       - СправочникСсылка.ПапкиФайлов, СправочникСсылка.Файлы,
//                 <ссылка на владельца>.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПометкаУдаленияРазрешена(Ссылка) Экспорт
	
	// Проверка права на установку пометки удаления
	Возврат ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Ссылка).Удаление;
	
КонецФункции

// Можно ли сменить владельца данного файла.
//
// Параметры:
//  ФайлОбъект - СправочникОбъект.Файлы
//  СтрокаОшибки - Строка
//
// Возвращаемое значение:
//  Булево. Возвращает всегда Истина для роли ПолныеПрава.
//
Функция ВозможноСменитьВладельцаФайла(ФайлОбъект, СтрокаОшибки = "") Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ФайлОбъект.Ссылка, "ВладелецФайла");
		
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШаблонДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВладелецФайла, "Шаблон");
		
	Если ЗначениеЗаполнено(ШаблонДокумента) Тогда 
		
		ЗапретитьУдалятьФайлы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ШаблонДокумента, "ЗапретитьУдалятьФайлы");
			
		Если ЗапретитьУдалятьФайлы Тогда
				
			СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя изменить владельца файла, принадлежащего документу, созданного по шаблону ""%1""'; en = 'Cannot change the owner of a file owned by a document that was created on the template ""%1""'"),
				Строка(ШаблонДокумента));
				
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;		
	
	Возврат Истина;
	
КонецФункции

// Формирует массив метаданных, которые не должны выводиться в настройках очистки файлов.
//
// Параметры:
//   МассивИсключений   - Массив - метаданные, которые не должны выводиться в настройках очистки файлов.
//
// Например:
//   МассивИсключений.Добавить(Метаданные.Справочники.Файлы);
//
Процедура ПриОпределенииОбъектовИсключенияОчисткиФайлов(МассивИсключений) Экспорт
	
КонецПроцедуры

// Формирует массив метаданных, которые не должны выводиться в настройках синхронизации файлов.
//
// Параметры:
//   МассивИсключений   - Массив - метаданные, которые не должны выводиться в настройках синхронизации файлов.
//
// Например:
//   МассивИсключений.Добавить(Метаданные.Справочники.Файлы);
//
Процедура ПриОпределенииОбъектовИсключенияСинхронизацииФайлов(МассивИсключений) Экспорт
	
КонецПроцедуры

#КонецОбласти
