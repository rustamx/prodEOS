// Можно ли освободить Файл
// Параметры
//  ОбъектСсылка - СправочникСсылка.Файлы - файл
//  РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь
//  Редактирует - СправочникСсылка.Пользователи - тот, кто занял файл
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ВозможностьОсвободитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки = "") Экспорт
	
	Если РедактируетТекущийПользователь Тогда 
		Возврат Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Редактирует) Тогда
		СтрокаОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя освободить файл ""%1"" т.к. он никем не занят.'; en = 'You cannot unlock file ""%1"" because it is not locked.'"), Строка(ОбъектСсылка));
		Возврат Ложь;
	Иначе
		Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЭтоПолноправныйПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя освободить файл ""%1"" т.к. он занят пользователем ""%2"".'; en = 'You cannot unlock file ""%1"" because it is locked by user ""%2"".'"),
			Строка(ОбъектСсылка),
			Строка(Редактирует));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ВозможностьОсвободитьФайл()

// Можно ли обновить Файл
// Параметры
//  ОбъектСсылка - СправочникСсылка.Файлы - файл
//  РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь
//  Редактирует - СправочникСсылка.Пользователи - тот, кто занял файл
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ВозможностьОбновитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки = "") Экспорт
	
	Если РедактируетТекущийПользователь Тогда 
		Возврат Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Редактирует) Тогда
		СтрокаОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя обновить файл ""%1"" т.к. он никем не занят.'; en = 'You cannot update file ""%1"" because it is not locked.'"), Строка(ОбъектСсылка));
		Возврат Ложь;
	Иначе
		Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЭтоПолноправныйПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя обновить файл ""%1"" т.к. он занят пользователем ""%2"".'; en = 'You cannot update file ""%1"" because it is locked by user ""%2"".'"),
			Строка(ОбъектСсылка),
			Строка(Редактирует));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ВозможностьОбновитьФайл()

// На основе переданного пути к файлу на диске создает Файл и открывает его карточку
// Параметры
//  ПолноеИмяФайла - Строка - полный путь к файлу
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФормаВладелец - Форма - форма, откуда вызвано создание файла
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
//  ИмяСоздаваемогоФайла - Строка - явно заданное имя файла (по умолчанию имя берется из ПолноеИмяФайла)
Функция СоздатьДокументНаОсновеФайла(
	ПолноеИмяФайла,
	ВладелецФайла,
	ФормаВладелец,
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено,
	ИмяСоздаваемогоФайла = Неопределено,
	ПараметрыРаспознавания = Неопределено,
	СписокКатегорий = Неопределено,
	ДополнительныеПараметры = Неопределено,
	ПараметрыОповещения = Неопределено,
	Проект = Неопределено) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат Неопределено;
	КонецЕсли;
	
	// Здесь создаем Файл ...
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами().ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами().СписокЗапрещенныхРасширений;
	
	РасширениеФайла = Файл.Расширение;
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'; en = 'Loading files with the extension ""%1"" is not allowed. Contact your system administrator.'"),
				РасширениеФайла);
	КонецЕсли;
	
	МаксРазмерФайла = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'; en = 'The size of file ""%1"" (%2 MB) exceeds the limit (%3 MB).'"),
				Файл.Имя, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если Не ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
			Файл.ПолноеИмя, 
			ФормаВладелец.УникальныйИдентификатор,
			Ложь); // Отказ
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	ИмяСоздания = Файл.ИмяБезРасширения;
	Если ИмяСоздаваемогоФайла <> Неопределено Тогда
		ИмяСоздания = ИмяСоздаваемогоФайла;
	КонецЕсли;
	
	ИмяФайла = ИмяСоздания + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	ТекстПояснения = СтрШаблон(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
			|Пожалуйста, подождите...';
			|en = 'Saving file ""%1"" (%2 MB).
			|Please wait ...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	
	Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ФормаВладелец.УникальныйИдентификатор) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Ошибка при помещении файла
			           |""%1""
			           |во временное хранилище.'; en = 'Error putting file ""%1"" to temporary storage.'"),
			Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	НеобходимоВыполнитьВставкуШКНаКлиенте = Ложь;
	
	// Создадим карточку Файла в БД
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Файл);
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	СведенияОФайле.ПараметрыРаспознавания = ПараметрыРаспознавания;
	СведенияОФайле.ХранитьВерсии = Истина;
	СведенияОФайле.ЗаписатьВИсторию = Истина;
	СведенияОФайле.СписокКатегорий = СписокКатегорий;
	СведенияОФайле.НеобходимоВыполнитьВставкуШКНаКлиенте = НеобходимоВыполнитьВставкуШКНаКлиенте;
	СведенияОФайле.ДополнительныеПараметры = ДополнительныеПараметры;
	СведенияОФайле.Проект = Проект;

	Док = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле);
	
	Состояние();
	
	#Если Не ВебКлиент Тогда
		Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
			И НеобходимоВыполнитьВставкуШКНаКлиенте
			И (НРег(ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Файл.Расширение)) = "odt"
			Или АвтозаполнениеШаблоновФайловКлиентСервер.ФорматMSWord(НРег(ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Файл.Расширение)))) Тогда
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
				Данные = ШтрихкодированиеСервер.ПолучитьДвоичныеДанныеФайлаИДанныеДляВставкиШтрихкодаВОбъект(АдресВременногоХранилищаФайла, Док, Ложь, Истина);
				ДвоичныеДанные = Данные.ДвоичныеДанные;
			Иначе
				// в этом случае в АдресВременногоХранилищаФайла - путь к файлу на диске
				ДвоичныеДанные = Новый ДвоичныеДанные(АдресВременногоХранилищаФайла);
			КонецЕсли;
			
			Если Данные <> Неопределено Тогда
				ДанныеОШтрихкоде = Данные.ДанныеОШтрихкоде;
			Иначе
				ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Док, Ложь, Истина);
			КонецЕсли;
			
			Если ДанныеОШтрихкоде <> Неопределено И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
				Попытка
					ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(
						Док,
						"ВставитьИзображениеШтрихкода",
						Истина,
						ДанныеОШтрихкоде.ДвоичныеДанныеИзображения,
						ДвоичныеДанные,
						ДанныеОШтрихкоде.Расширение,
						ДанныеОШтрихкоде.ФайлРедактируется,
						ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Владелец", ВладелецФайла);
	ПараметрОповещения.Вставить("Файл", Док);
	ПараметрОповещения.Вставить("ИдентификаторРодительскойФормы", ФормаВладелец.УникальныйИдентификатор);
	ПараметрОповещения.Вставить("Событие", "СозданФайл");
	Оповестить("Запись_Файл", ПараметрОповещения);
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Док);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'; en = 'Added:'"),
		НавигационнаяСсылка,
		Док,
		БиблиотекаКартинок.Информация32);
	
	Если ЗначениеЗаполнено(ПараметрыОповещения) И ПараметрыОповещения.ТипСобытия = "Создание" Тогда
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка", Док);
		ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
		Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
	КонецЕсли;
	
	Если НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", Док);
		Параметры.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		Параметры.Вставить("НовыйФайл", Истина);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
	КонецЕсли;
	
	Возврат Док;
	
КонецФункции

// Процедура предназначена для освобождения файла. При этом не происходит
// обновления файла, а просто очищается его текущий держатель.
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОсвободитьФайлБезВопроса(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИОсвободитьФайл(
		ДанныеФайла.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
	Если ДанныеФайла.Свойство("КоличествоЗанятыхФайлов")
		И ДанныеФайла.КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				ДанныеФайла.КоличествоЗанятыхФайлов);
	КонецЕсли;	
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		НаЧтение = Истина;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Файл освобожден'; en = 'The file is unlocked'"),
		ДанныеФайла.НавигационнаяСсылка,
		ДанныеФайла.ПолноеНаименованиеВерсии,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры // ОсвободитьФайл()

// Процедура выполняет перенос файлов в другую папку - по массиву ссылок
//
// Параметры
//  ОбъектыСсылка - Массив - массив файлов
//  Папка - СправочникСсылка.ПапкиФайлов - папка, куда надо перенести
Процедура ПеренестиФайлыВПапку(ОбъектыСсылка, Папка) Экспорт
	
	ДанныеФайлов = РаботаСФайламиВызовСервера.ПеренестиФайлы(ОбъектыСсылка, Папка);
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Перенос файла'; en = 'Moving file'"),
			ДанныеФайла.НавигационнаяСсылка,
			СтрШаблон(
				НСтр("ru = 'Файл ""%1""
				           |перенесен в папку ""%2"".'; en = 'File ""%1"" was moved to folder ""%2"".'"),
				Строка(ДанныеФайла.Ссылка),
				Строка(Папка)),
			БиблиотекаКартинок.Информация32);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура предназначена для копирования существующего Файла
// Параметры:
//    ФайлОснование - откуда копируется Файл (тип - СправочникСсылка)
Процедура СкопироватьФайл(ВладелецФайла, ФайлОснование) Экспорт
	
	Параметры = Новый Структура("ФайлОснование, ВладелецФайла", ФайлОснование, ВладелецФайла);
	Форма = ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры);
	
КонецПроцедуры // СкопироватьФайл()

// Находится ли в рабочем каталоге Файл для данной версии
Функция ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ТекущаяВерсия, ИмяФайлаСПутем, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца)
	ИмяФайлаСПутем = "";
	
	// Если это активная версия - берем из ДанныеФайла
	Если ДанныеФайла <> Неопределено И ДанныеФайла.ТекущаяВерсия = ТекущаяВерсия Тогда
		ИмяФайлаСПутем = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
		ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	Иначе
		ВРабочемКаталогеНаЧтение = Истина;
		ИмяКаталога = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		// Пытаемся найти такую запись в регистре сведений
		ИмяФайлаСПутем = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	Если ИмяФайлаСПутем <> "" Тогда
		// Тут надо еще на наличие на диске проверять 
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		Если ФайлНаДиске.Существует() Тогда
			Возврат Истина;
		Иначе
			ИмяФайлаСПутем = "";
			// Тут же удалим из регистра - т.к. в регистре есть, а на диске нет
			РаботаСФайламиВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Выбрать путь к рабочему каталогу
Функция ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, РабочийКаталогВладельца) Экспорт
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Каталог = ИмяКаталога;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = Заголовок;
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ИмяКаталога = ДиалогОткрытияФайла.Каталог;
		ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
		// Создать каталог для файлов
		Попытка
			СоздатьКаталог(ИмяКаталога);
			ИмяКаталогаТестовое = ИмяКаталога + "ПроверкаДоступа\";
			СоздатьКаталог(ИмяКаталогаТестовое);
			УдалитьФайлы(ИмяКаталогаТестовое);
		Исключение
			// нет прав на создание каталога, или такой путь отсутствует
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Неверный путь или отсутствуют права на запись в каталог ""%1""'; en = 'Invalid path or you do not have write access to the directory ""%1""'"),
				ИмяКаталога);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьКЛокальномуКэшуФайлов");
			Возврат Ложь;
		КонецПопытки;
		
		Если РабочийКаталогВладельца = Ложь Тогда
			#Если Не ВебКлиент Тогда
				МассивФайловВКаталоге = НайтиФайлы(ИмяКаталога, "*.*");
				Если МассивФайловВКаталоге.Количество() <> 0 Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'В выбранном рабочем каталоге (""%1"") уже есть файлы. Выберите другой каталог.'; en = 'Selected working directory (""%1"") already has files. Select another directory.'"),
						ИмяКаталога);
					ПоказатьПредупреждение(,ТекстОшибки);
					Возврат Ложь;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение
Процедура ПеререгистрироватьВРабочемКаталоге(ТекущаяВерсия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца)
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	КоличествоЗанятыхФайлов = 0;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия, ИмяФайлаСПутем, 
		ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца,
		КоличествоЗанятыхФайлов);
	Файл = Новый Файл(ИмяФайлаСПутем);
	Файл.УстановитьТолькоЧтение(НаЧтение);
	
	Если КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
	КонецЕсли;	
	
КонецПроцедуры

// Обход Файлов рекурсивный - для определения размера файлов.
// Параметры:
//  МассивФайлов - Массив - массив объектов "Файл".
//  МассивСлишкомБольшихФайлов - Массив - массив файлов.
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги.
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов.
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк
//                                         (подкаталоги и файлы).
//
Процедура НайтиСлишкомБольшиеФайлы(
				МассивФайлов,
				МассивСлишкомБольшихФайлов,
				Рекурсивно,
				КоличествоСуммарное,
				Знач ПсевдоФайловаяСистема) 
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.Существует() Тогда
			
			Если ВыбранныйФайл.Расширение = ".lnk" Тогда
				ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
			КонецЕсли;
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				
				Если Рекурсивно Тогда
					НовыйПуть = Строка(ВыбранныйФайл.Путь);
					НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть);
					НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
					МассивФайловВКаталоге = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
					
					// Рекурсия
					Если МассивФайловВКаталоге.Количество() <> 0 Тогда
						НайтиСлишкомБольшиеФайлы(МассивФайловВКаталоге, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
					КонецЕсли;
				КонецЕсли;
			
				Продолжить;
			КонецЕсли;
			
			КоличествоСуммарное = КоличествоСуммарное + 1;
			
			// Размер файла слишком большой.
			Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
				МассивСлишкомБольшихФайлов.Добавить(ВыбранныйФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Разыменовать lnk файл
// Параметры:
//  ВыбранныйФайл - Файл - объект типа Файл.
//
// Возвращаемое значение:
//   Строка - на что ссылается lnk  файл.
Функция РазыменоватьLnkФайл(ВыбранныйФайл) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			ShellApp = Новый COMОбъект("shell.application");
			FolderObj = ShellApp.NameSpace(ВыбранныйФайл.Путь);// Полный (только) путь на lnk-файл.
			FolderObjItem = FolderObj.items().item(ВыбранныйФайл.Имя); 	// только имя lnk-файла
			Link = FolderObjItem.GetLink();
			Возврат Новый Файл(Link.path);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыбранныйФайл;
	
КонецФункции

// При переименовании Файл и ВерсияФайла обновляет информацию в рабочем каталоге (имя файла на диске и в регистре)
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла
//  НовоеИмя - Строка - Новое имя файла
Процедура ОбновитьИнформациюВРабочемКаталоге(ТекущаяВерсия, НовоеИмя) Экспорт
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(Неопределено, ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	ТолькоИмя = Файл.Имя;
	РазмерФайла = Файл.Размер();
	ПутьБезИмени = Лев(ПолноеИмяФайла, СтрДлина(ПолноеИмяФайла) - СтрДлина(ТолькоИмя));
	НовоеПолноеИмя = ПутьБезИмени + НовоеИмя + Файл.Расширение;
	ПереместитьФайл(ПолноеИмяФайла, НовоеПолноеИмя);
	
	РаботаСФайламиВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
	
	КоличествоЗанятыхФайлов = 0;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия, НовоеПолноеИмя, 
		ИмяКаталога, ВРабочемКаталогеНаЧтение, РазмерФайла, ВРабочемКаталогеВладельца,
		КоличествоЗанятыхФайлов);
	
	Если КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
	КонецЕсли;	
	
КонецПроцедуры

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение - если там вообще есть такой Файл
// Параметры
//  ДанныеФайла  - структура с данными файла
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца)
	
	Если ДанныеФайла.Версия.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = 0;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.ТекущаяВерсия, 
		ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца,
		КоличествоЗанятыхФайлов);
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(НаЧтение);
	
	Если КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
	КонецЕсли;	
	
КонецПроцедуры

// Установить файлу атрибут ТолькоЧтение
Функция УстановитьТолькоЧтениеФайла(ПолноеИмяФайла, ТолькоЧтение) Экспорт
	
	Попытка
		Файл = Новый Файл(ПолноеИмяФайла);
		Файл.УстановитьТолькоЧтение(ТолькоЧтение);
	Исключение
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение файла из программы на диск.

// Получить Файл из информационной базы на локальный диск и возвращает путь
// к этому файлу в параметре.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат получения файла.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьФайлВерсииВРабочийКаталог(
		ОбработчикРезультата,
		ДанныеФайла,
		ПолноеИмяФайла,
		ИдентификаторФормы = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Если ИмяКаталога = Неопределено Или ПустаяСтрока(ИмяКаталога) Тогда
		ВернутьРезультат(ОбработчикРезультата, Новый Структура("ФайлПолучен, ПолноеИмяФайла", Ложь, ПолноеИмяФайла));
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла.РабочийКаталогВладельца = "" Или ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
		ПолучитьФайлВерсииВЛокальныйКэшФайлов(
			ОбработчикРезультата,
			ДанныеФайла,
			ДанныеФайла.НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	Иначе
		ПолучитьФайлВерсииВРабочийКаталогПапки(
			ОбработчикРезультата,
			ДанныеФайла,
			ПолноеИмяФайла,
			ДанныеФайла.НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИмяОткрываемогоФайла - Строка - полное имя файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОткрытьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла, УникальныйИдентификатор = Неопределено)
	
	// Отображение формализованных файлов ЭД
	Если НРег(ДанныеФайла.Расширение) = НРег("xml") Тогда
		СтруктураОбмена = ОбменСКонтрагентамиДОВызовСервера.ВозратитьСтруктуруДляПросмтораЭД(
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяОткрываемогоФайла), УникальныйИдентификатор));
		Если СтруктураОбмена <> Неопределено Тогда
			СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			СтруктураОбмена.Вставить("ИмяФайла", ИмяОткрываемогоФайла);
			Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаЗагрузкиПросмотраЭД", Параметры, ,
				СтруктураОбмена.УникальныйИдентификатор);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		
		ПерсональныеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		
		ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
		Если ТекстовыеФайлыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
			
			ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
			Если ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
				
				ПараметрыФормы = Новый Структура("Файл, ДанныеФайла, ИмяОткрываемогоФайла, УникальныйИдентификатор", 
					ДанныеФайла.Ссылка, ДанныеФайла, ИмяОткрываемогоФайла, УникальныйИдентификатор);
					
				ОткрытьФорму("Справочник.Файлы.Форма.РедактированиеТекстовогоФайла", 
					ПараметрыФормы, , ДанныеФайла.КодФайла);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("grs") Тогда
			
			Схема = Новый ГрафическаяСхема; 
			Схема.Прочитать(ИмяОткрываемогоФайла);
			ЗаголовокСтрока = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			Схема.Показать(ЗаголовокСтрока, ИмяОткрываемогоФайла);
			Возврат;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("mxl") Тогда
			
			#Если НЕ ВебКлиент Тогда
	            АдресВременногоХранилища = "";
	            Параметры = Новый Структура("Хранилище, Расширение", Неопределено, ДанныеФайла.Расширение);
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ИмяОткрываемогоФайла, "");
				ПомещаемыеФайлы.Добавить(Описание);
				
				ПомещенныеФайлы = Новый Массив;
				ФайлыПомещены = ПоместитьФайлы(
					ПомещаемыеФайлы,
					ПомещенныеФайлы,
					,
					Ложь //Интерактивно
					);
				
				Если ПомещенныеФайлы.Количество() = 1 Тогда
						
					АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
					
					Документ = РаботаСФайламиВызовСервера.ПолучитьДокументИзВременногоХранилища(АдресВременногоХранилища, ДанныеФайла.Расширение);
	                Документ.Показать(ИмяОткрываемогоФайла, ИмяОткрываемогоФайла);
					
				КонецЕсли;
				
				Возврат;
				
			#КонецЕсли
			
		КонецЕсли;
		
		// Открыть Файл
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			ЗапуститьПриложениеПоИмениФайла(ИмяОткрываемогоФайла);	
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтрШаблон(
				НСтр("ru = 'Описание=""%1""'; en = 'Description=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо))); 
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлПриложением()

// Запустить приложение по имени файла 
Процедура ЗапуститьПриложениеПоИмениФайла(ИмяОткрываемогоФайла) Экспорт     
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;      
		
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		
		СистемнаяИнфо = Новый СистемнаяИнформация;
				
		Если (СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
			Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
			
			// Проверить, является ли файл шаблоном.
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьПолноеИмяФайла(ИмяОткрываемогоФайла);		
			Расширение = ИмяФайлаИнфо.Расширение;
			
			ФайлыРасширениеШаблонов = "dot dotx pot potx xlt xltx ott stw ots stc otp sti";
						
			Если ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(ФайлыРасширениеШаблонов, 
				Расширение) Тогда
				Shell = Новый COMОбъект("Shell.Application");
				Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "open", 1);					
				
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ЗапуститьПриложение(ИмяОткрываемогоФайла);
	
КонецПроцедуры // ЗапуститьПриложениеПоИмениФайла

// Функция предназначена для печати файла соответствующим приложением
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИмяОткрываемогоФайла - Строка - полное имя файла
//
Процедура НапечататьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла)
	
	НепечататьФайлы = 
	" m3u, m4a, mid, midi, mp2, mp3, mpa, rmi, wav, wma, 
	| 3g2, 3gp, 3gp2, 3gpp, asf, asx, avi, m1v, m2t, m2ts, m2v, m4v, mkv, mov, mp2v, mp4, mp4v, mpe, mpeg, mts, vob, wm, wmv, wmx, wvx,
	| 7z, zip, rar, arc, arh, arj, ark, p7m, pak, package, 
	| app, com, exe, jar, dll, res, iso, isz, mdf, mds,
	| cf, dt, epf, erf";
	
	Расширение = НРег(ДанныеФайла.Расширение);
	Если СтрНайти(НепечататьФайлы, " "+Расширение+",") > 0 Тогда 
		
		Возврат;
	
	ИначеЕсли Расширение = "grs" Тогда
		
		Схема = Новый ГрафическаяСхема; 
		Схема.Прочитать(ИмяОткрываемогоФайла);
		Схема.Напечатать();
		
	ИначеЕсли Расширение = "mxl" Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ИмяОткрываемогоФайла);
		ТабличныйДокумент.Напечатать();
		
	Иначе	
		
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
				Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтрШаблон(
				НСтр("ru = 'Описание=""%1""'; en = 'Description=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо))); 
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры 

// Напечатать из приложения по имени файла 
Процедура НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла) Экспорт     
	
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;      
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		 Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				
			Shell = Новый COMОбъект("Shell.Application");
			Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "print", 1);					
					
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры 

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла
Процедура ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла) Экспорт
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
						
			ЗапуститьПриложениеПоИмениФайла(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Описание=""%1""'; en = 'Description=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо)));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапускПриложения()

// Обработчик события Перетаскивание в формах объектов - владельцев Файл (кроме формы ХранилищеФайлов)
//
// Параметры
//  ПараметрыПеретаскивания  - Параметры перетаскивания
//  ВладелецФайлаСписка   - ЛюбаяСсылка - владелец файла
//  ЭтаФорма - Форма - форма, в которую делается перетаскивание
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
Процедура ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма,
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		ОбработкаПеретаскиванияФайловСДиска(ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'; en = 'Select to import only files, not directories.'"));
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПеренестиФайлВПриложенныеФайлы(ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка, ЭтаФорма);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если Не ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					ПоказатьПредупреждение(, Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'; en = 'Select to import only files, not directories.'"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ОбработкаПеретаскиванияФайловСДиска(ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
			
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
			ПеренестиФайлыВПриложенныеФайлы(ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Создает файл или версию файла на основании файла на диске
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ОбработкаПеретаскиванияФайловСДиска(Файлы, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла = Ложь);
	
	ДанныеФайловДляПоиска = Новый Массив;
	
	Проект = Неопределено;
	Если ЭтаФорма.ИмяФормы = "Справочник.Проекты.Форма.ФайлыПоПроекту" Тогда 
		Если ЭтаФорма.Параметры.Свойство("Проект") Тогда
			Проект = ЭтаФорма.Параметры.Проект;
		КонецЕсли;	
	КонецЕсли;
			
	Если ТипЗнч(Файлы) = Тип("Файл") Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(Файлы);
	Иначе
		МассивФайлов = Файлы;
	КонецЕсли;
	
	Для Каждого Файл из МассивФайлов Цикл
		СтруктураДанных = Новый Структура;		
		СтруктураДанных.Вставить("ПолноеНаименование", Файл.ИмяБезРасширения);
		СтруктураДанных.Вставить("ТекущаяВерсияРасширение", СтрЗаменить(Файл.Расширение, ".", ""));
		ДанныеФайловДляПоиска.Добавить(СтруктураДанных);
	КонецЦикла;
	
	НайденныеФайлы = РаботаСФайламиВызовСервера.НайтиФайлыПоПолнымИменамСРасширением(
		ДанныеФайловДляПоиска, ВладелецФайлаСписка);
	
	Для Каждого Файл из МассивФайлов Цикл
		
		ФайлЭлементСправочника = НайденныеФайлы.Получить(Файл.Имя);
		
		Если ФайлЭлементСправочника = Неопределено Тогда
			СоздатьДокументНаОсновеФайла(
				Файл.ПолноеИмя, ВладелецФайлаСписка, ЭтаФорма, 
				НеОткрыватьКарточкуПослеСозданияИзФайла,,,,,,Проект);
		Иначе
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлЭлементСправочника);
			
			ДопПараметры = Новый Структура("ВладелецФайлов", ВладелецФайлаСписка);
			Обработчик = Новый ОписаниеОповещения("ОбработкаПеретаскиванияФайловСДискаЗавершение", ЭтотОбъект, ДопПараметры);
			
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ОбработчикРезультата", Обработчик);
			ПараметрыВыполнения.Вставить("ДанныеФайла",           ДанныеФайла);
			ПараметрыВыполнения.Вставить("ИдентификаторФормы",    ЭтаФорма.УникальныйИдентификатор);
			ПараметрыВыполнения.Вставить("ДиалогПолноеИмяФайла",  Файл.ПолноеИмя);
			ПараметрыВыполнения.Вставить("СоздатьНовуюВерсию",    Неопределено);
			ПараметрыВыполнения.Вставить("КомментарийКВерсии",    Неопределено);
			ПараметрыВыполнения.Вставить("Проект",    			  Проект);
			
			ОбновитьИзФайлаНаДискеЗапуск(ПараметрыВыполнения);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаПеретаскиванияФайловСДискаЗавершение(Результат, Параметры) Экспорт 
	
	МассивСсылокФайлов = Новый Массив;
	
	СтруктураВозврата = Новый Структура("МассивСсылокФайлов, ВладелецФайлов",
		МассивСсылокФайлов, Параметры.ВладелецФайлов);
	
	Оповестить("ИмпортФайловЗавершен", , СтруктураВозврата);
	
КонецПроцедуры	

// Переносит файл из одного списка приложенных файлов в другой
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ПеренестиФайлВПриложенныеФайлы(ФайлСсылка, ВладелецФайла, ЭтаФорма)
	
	Результат = РаботаСФайламиВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлСсылка, ВладелецФайла).Получить(ФайлСсылка);
	
	Если Результат = "Скопировать" Тогда
		
		СозданФайл = РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(ФайлСсылка, ВладелецФайла);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Владелец", ВладелецФайла);
		ПараметрыОповещения.Вставить("Файл", СозданФайл);
		ПараметрыОповещения.Вставить("ИдентификаторРодительскойФормы", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыОповещения.Вставить("Событие", "СозданФайл");
		
		Оповестить("Запись_Файл", ПараметрыОповещения, СозданФайл);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(СозданФайл),
			Строка(СозданФайл),
			БиблиотекаКартинок.Информация32);
		
	ИначеЕсли Результат = "Обновить" Тогда
		
		Приемники = РаботаСФайламиВызовСервера.СписокОбновляемыхФайлов(ФайлСсылка, ВладелецФайла);
		Приемник = Приемники.Получить(ФайлСсылка);
		
		ДанныеПриемника = РаботаСФайламиВызовСервера.ДанныеФайла(Приемник);
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеПриемника, СтрокаОшибки) Тогда
			ПоказатьПредупреждение(, СтрокаОшибки);
			Возврат;
		КонецЕсли;

		ОбновленФайл = РаботаСФайламиВызовСервера.ОбновитьФайлВПриложенных(ФайлСсылка, Приемники, ВладелецФайла);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Изменение:'; en = 'Changed:'"), 
			ПолучитьНавигационнуюСсылку(ОбновленФайл),
			Строка(ОбновленФайл),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Переносит файлы из одного списка приложенных файлов в другой
// Параметры
//  МассивФайлов - Массив - массив файлов
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ПеренестиФайлыВПриложенныеФайлы(МассивФайлов, ВладелецФайла, ЭтаФорма)
	
	Если МассивФайлов.Количество() = 1 Тогда
		ПеренестиФайлВПриложенныеФайлы(МассивФайлов[0], ВладелецФайла, ЭтаФорма);
	Иначе
		
		Результат = РаботаСФайламиВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(МассивФайлов, ВладелецФайла);
		
		МассивОбновить = Новый Массив;
		МассивСкопировать = Новый Массив;
		Для Каждого ФайлСсылка Из МассивФайлов Цикл
			Если Результат.Получить(ФайлСсылка) = "Скопировать" Тогда
				МассивСкопировать.Добавить(ФайлСсылка);
			ИначеЕсли Результат.Получить(ФайлСсылка) = "Обновить" Тогда
				МассивОбновить.Добавить(ФайлСсылка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСкопировать.Количество() > 0 Тогда
			РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(МассивСкопировать, ВладелецФайла);
		КонецЕсли;
		
		Если МассивОбновить.Количество() > 0 Тогда
			
			Приемники = РаботаСФайламиВызовСервера.СписокОбновляемыхФайлов(МассивОбновить, ВладелецФайла);
			Для Каждого ФайлСсылка Из МассивФайлов Цикл
				Приемник = Приемники.Получить(ФайлСсылка);
				
				// Не все файлы в массиве МассивОбновить (часть в МассивСкопировать), поэтому их может не быть в Приемники
				Если Приемник <> Неопределено Тогда
					ДанныеПриемника = РаботаСФайламиВызовСервера.ДанныеФайла(Приемник);
					СтрокаОшибки = "";
					Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеПриемника, СтрокаОшибки) Тогда
						ПоказатьПредупреждение(, СтрокаОшибки);
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
						
			РаботаСФайламиВызовСервера.ОбновитьФайлВПриложенных(МассивОбновить, Приемники, ВладелецФайла);
			
		КонецЕсли;
		
		ОбщееКоличество = МассивСкопировать.Количество() + МассивОбновить.Количество();
		Если ОбщееКоличество > 0 Тогда
			
			ПолноеОписание = СтрШаблон(
				НСтр("ru = 'Файлы (%1 шт) перенесены в %2'; en = 'Files (%1 PCs) transferred to %2'"),
				ОбщееКоличество,
				ВладелецФайла);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файлы перенесены'; en = 'Files transferred'"), 
				,
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог со списком редактируемых файлов
//
Процедура ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения) Экспорт
	
	ВладелецФайла = ?(ПараметрыФормы.Свойство("ВладелецФайла"), ПараметрыФормы.ВладелецФайла, Неопределено);
	Редактирует = ?(ПараметрыФормы.Свойство("Редактирует"), ПараметрыФормы.Редактирует, Неопределено);
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(
		ВладелецФайла, Редактирует, Истина);
	
	Если ТипЗнч(ВладелецФайла) = Тип("Массив") Тогда
		СписокВладельцев = Новый СписокЗначений;
		СписокВладельцев.ЗагрузитьЗначения(ВладелецФайла);
		ПараметрыФормы.ВладелецФайла = СписокВладельцев;
	КонецЕсли;
	
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОткрытьФорму(
			"Справочник.Файлы.Форма.СписокЗанятыхСВопросом", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
КонецПроцедуры

// Формирует список предупреждений для пользователя при завершении работы программы.
//
// Параметры:
//  см. ПриПолученииСпискаПредупрежденийЗавершенияРаботы
//
Процедура ПриЗавершенииРаботыСистемы(Предупреждения) Экспорт
	Ответ = ПроверитьЗанятыеФайлыПриЗавершенииРаботы();
	Если Ответ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	// Инициализация формы индивидуального открытия и ее параметров.
	ПрикладнаяФормаПредупреждения = Неопределено;
	Ответ.Свойство("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ПараметрыПрикладнойФормыПредупреждения = Неопределено;
	Ответ.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	
	// Инициализация формы открытия из списка и её параметров.
	Форма = Неопределено;
	Ответ.Свойство("Форма", Форма);
	ПараметрыФормы = Неопределено;
	Ответ.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	КоличествоЗанятыхФайлов = Ответ.КоличествоЗанятыхФайлов;
	
	ТекстГиперСсылки = СтрШаблон(Нстр("ru='Открыть список редактируемых файлов (%1)'; en = 'Open the list of files being edited (%1)'"), 
		КоличествоЗанятыхФайлов);
	
	ДействиеПриНажатииГиперссылки = Новый Структура;
	Если ПрикладнаяФормаПредупреждения <> Неопределено Тогда 
		ДействиеПриНажатииГиперссылки.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
		ДействиеПриНажатииГиперссылки.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	КонецЕсли;
	Если Форма <> Неопределено Тогда 
		ДействиеПриНажатииГиперссылки.Вставить("Форма", 			Форма);
		ДействиеПриНажатииГиперссылки.Вставить("ПараметрыФормы", 	ПараметрыФормы);
	КонецЕсли;
	
	ПредупреждениеПользователю = Новый Структура;
	ПредупреждениеПользователю.Вставить("ТекстГиперСсылки", 				ТекстГиперСсылки);
	ПредупреждениеПользователю.Вставить("ДействиеПриНажатииГиперссылки", 	ДействиеПриНажатииГиперссылки);
	
	Предупреждения.Добавить(ПредупреждениеПользователю);
КонецПроцедуры	

// Открывает форму папки со списком файлов.
Процедура РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Папка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Папка", Папка);
	ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов", ПараметрыФормы, , Папка);
	
КонецПроцедуры

// Возвращает каталог данных пользователя внутри стандартного каталога данных приложения.
//   Этот каталог может использоваться для хранения файлов, захваченных текущим пользователем.
//   Для работы метода на веб-клиенте под 8.3 необходимо предварительно подключить расширение работы с файлами.
//
Функция КаталогДанныхПользователя()
	
	#Если ВебКлиент Тогда
		Возврат РабочийКаталогДанныхПользователя();
	#Иначе
		Если Не ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
			Возврат Вычислить("РабочийКаталогДанныхПользователя()");
		Иначе
			Оболочка = Новый COMОбъект("WScript.Shell");
			КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
			Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДанныхПользователя);
		КонецЕсли;
	#КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Рассылает оповещение о завершении шифрования или расшифровки файла.

// По окончании Зашифровать нотифицирует.
// Параметры:
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - массив строк - путей к файлам.
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ЕстьЗашифрованныеИлиЗанятыеФайлы  - Булево - 
Процедура ИнформироватьОШифровании(МассивФайловВРабочемКаталогеДляУдаления, ВладелецФайла,
	ФайлСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("ПрисоединенныйФайлЗашифрован", ВладелецФайла);
	
	Оповестить(
		"Запись_Файл", 
		Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
			"ДанныеФайлаИзменены", 
			ФайлСсылка, ВладелецФайла, ЕстьЗашифрованныеИлиЗанятыеФайлы,
			Неопределено),
			ФайлСсылка);
	
	// удаляем из рабочего каталога все версии файла
	Для Каждого ПутьФайла Из МассивФайловВРабочемКаталогеДляУдаления Цикл
		УдалитьФайл(Неопределено, ПутьФайла, Ложь); // не задавать вопрос
	КонецЦикла;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Файл ""%1"" зашифрован'; en = 'File ""%1"" is encrypted'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// По окончании Расшифровать нотифицирует.
// Параметры:
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ЕстьЗашифрованныеИлиЗанятыеФайлы  - Булево - 
Процедура ИнформироватьОРасшифровке(ВладелецФайла, ФайлСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("ПрисоединенныйФайлЗашифрован", ВладелецФайла);
	
	Оповестить(
		"Запись_Файл", 
		Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
			"ДанныеФайлаИзменены", 
			ФайлСсылка, ВладелецФайла, ЕстьЗашифрованныеИлиЗанятыеФайлы,
			Неопределено),
			ФайлСсылка);
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Файл ""%1"" расшифрован'; en = 'File ""%1"" decrypted'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Обработчик НачалоВыбора для поля Предмет в бизнес-процессах
Процедура ОбъектВыборСФайлами(Элемент, ВыбранныйТип, Предмет) Экспорт
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Предмет);
	
	ИмяФормы = ВыбранныйТип + ".ФормаВыбора";
	
	Если ВыбранныйТип = "Справочник.Файлы" Тогда
		ИмяФормы = "Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Выполнить импорт файлов
Процедура ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(ВладелецИмпортированныхФайлов) Экспорт
	
	// заранее выбираем файлы (до открытия диалога импорта)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = ПолучитьФильтрДляДиалогаВыбораФайла();
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'; en = 'Select files'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивИменФайлов = Новый Массив;
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			МассивИменФайлов.Добавить(ИмяФайла);
		КонецЦикла;
		
		ПараметрыИмпорта = Новый Структура;
		ПараметрыИмпорта.Вставить("ПапкаДляДобавления", ВладелецИмпортированныхФайлов);
		ПараметрыИмпорта.Вставить("МассивИменФайлов", МассивИменФайлов);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта);
	КонецЕсли;
	
КонецПроцедуры

// Импорт - с вспомогательными операциями типа проверки предельного размера и впоследствии удаления файлов и показа
//          ошибок при импорте только одной папки - вернет на нее ссылку.
//
// Параметры:
//  ПараметрыВыполнения - Структура - см. ПараметрыИмпортаФайлов.
//
// Возвращаемое значение:
//   Неопределено - Если импорт не выполнен.
//   Структура - Если импорт выполнен.
//       * ПапкаДляДобавленияТекущая - СправочникСсылка.ПапкиФайлов - Папка для добавления.
//
Процедура ВыполнитьИмпортФайлов(Знач ПараметрыВыполнения) Экспорт
	
	СлужебныеПараметры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыполнения);
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеПроверкиРазмеров", ЭтотОбъект, СлужебныеПараметры);
	ПроверитьПредельныйРазмерФайлов(Обработчик, СлужебныеПараметры);
	
КонецПроцедуры

// Сравнивает 2 файла (txt doc doc odt) с помощью MS Office или OpenOffice
Процедура СравнитьФайлы(ПутьКФайлу1, ПутьКФайлу2, СпособСравненияВерсийФайлов) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		
		Если СпособСравненияВерсийФайлов = "MicrosoftOfficeWord" Тогда
			ОбъектWord = Новый COMОбъект("Word.Application");
			ОбъектWord.Visible = 0;

			Документ = ОбъектWord.Documents.Open(ПутьКФайлу1);
			
			Попытка
				// Принудительно отключим режим просмотра "Режим чтения".
				Документ.ActiveWindow.View.ReadingLayout = 0;
			Исключение
				Инфо = ИнформацияОбОшибке();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(Инфо));
			КонецПопытки;
			
			Документ.Merge(ПутьКФайлу2, 0, 0, 0); // MergeTarget:=wdMergeTargetSelected, DetectFormatChanges:=False, UseFormattingFrom:=wdFormattingFromCurrent
			
			ОбъектWord.Visible = 1;
			ОбъектWord.Activate(); 	
			
			Документ.Close();
		ИначеЕсли СпособСравненияВерсийФайлов = "OpenOfficeOrgWriter" Тогда 
			
			// снимем readonly - иначе не сработает
			Файл1 = Новый Файл(ПутьКФайлу1);
			Файл1.УстановитьТолькоЧтение(Ложь);
			
			Файл2 = Новый Файл(ПутьКФайлу2);
			Файл2.УстановитьТолькоЧтение(Ложь);
			
			// Открыть OpenOffice
			ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Reflection = ServiceManager.createInstance("com.sun.star.reflection.CoreReflection");
			Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
			Dispatcher = ServiceManager.createInstance("com.sun.star.frame.DispatchHelper");
			
			// Открыть документ OpenOffice
			Args = Новый COMSafeArray("VT_DISPATCH", 1);
			OOДокумент = Desktop.loadComponentFromURL(ПреобразоватьВURL(ПутьКФайлу2), "_blank", 0, Args);
			
			frame = Desktop.getCurrentFrame();
			
			// установить показ изменений
			ПараметрыСравнения = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыСравнения.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "ShowTrackedChanges", Истина));
			dispatcher.executeDispatch(frame, ".uno:ShowTrackedChanges", "", 0, ПараметрыСравнения);

			// сравнить с документом
			ПараметрыВызова = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыВызова.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "URL", ПреобразоватьВURL(ПутьКФайлу1)));
			dispatcher.executeDispatch(frame, ".uno:CompareDocuments", "", 0, ПараметрыВызова);
			
			OOДокумент = Неопределено;
		КонецЕсли;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(Инфо));
	КонецПопытки;
	
КонецПроцедуры	

// Функция преобразует Windows имя файла в URL OpenOffice
Функция ПреобразоватьВURL(ИмяФайла)
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
КонецФункции

// создание структуры для параметров OpenOffice
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
    Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
    Свойства.Name = ИмяСвойства;
    Свойства.Value = ЗначениеСвойства;
    
    Возврат Свойства;
КонецФункции

// Возвращает параметры для работы с занятыми файлами.
// Возвращает:
//	Неопределено - если нет редактируемых файлов или работать с ними не надо.
//	Структуру - структура с передаваемыми параметрами.
// 
Функция ПроверитьЗанятыеФайлыПриЗавершенииРаботы()
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	Если НЕ ПоказыватьЗанятыеФайлыПриЗавершенииРаботы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийПользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ТекущийПользователь;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, ТекущийПользователь, Истина);
	Если КоличествоЗанятыхФайлов = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	ПараметрыПрикладнойФормыПредупреждения = Новый Структура;	
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеВопрос", 		НСтр("ru = 'Завершить работу с программой?'; en = 'Do you want to exit from the application?'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеЗаголовок", 	НСтр("ru = 'Следующие файлы заняты вами для редактирования:'; en = 'The following files are locked by you for editing:'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Заголовок", 			НСтр("ru = 'Завершение работы'; en = 'Exit'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Редактирует", 			ТекущийПользователь);
	
	ПрикладнаяФормаПредупреждения 	= "Справочник.Файлы.Форма.СписокЗанятыхСВопросом";
	Форма				 			= "Справочник.Файлы.Форма.РедактируемыеФайлы";
	
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	ВозвращаемыеПараметры.Вставить("Форма", Форма);
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Возврат ВозвращаемыеПараметры;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сохранение файлов

// Сохранение файлов 
// 
// Параметры
//  ДанныеСохраняемыхФайлов  - структура, со список значений с данными файлов и общей информацией о файлах
//  УникальныйИдентификатор - уникальный идентификатор формы
//  ТипПапки - пользовательская настройка, в которую будет сохранена папка
//  СохранитьБезДиалогаПользователя - не спрашивать у пользователя путь сохранения файла.
//                                    Путь будет взят из ДанныеСохраняемыхФайлов.ПутьВыбора.
//  НеСпрашиватьВариантСохранения - автоматически сохранять файл с именем типа 
//                                  "Имя файла(1).Расширение файла" в случае совпадения имен.
//                                  В противном случае будет выдан диалог пользователя для 
//                                  выбора варианта сохранения.
Функция СохранитьФайлы(
	ОписаниеОповещения,
	ДанныеСохраняемыхФайлов, 
	УникальныйИдентификатор, 
	ТипПапки = "ПапкаДляСохраненияФайлов", 
	СохранитьБезДиалогаПользователя = Ложь, 
	НеСпрашиватьВариантСохранения = Ложь) Экспорт
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте сохранение файлов не поддерживается.'; en = 'Saving files is not supported in Web client.'"));
		Возврат "";
	#КонецЕсли
	
	ПутьВыбора = ДанныеСохраняемыхФайлов.ПутьВыбора;
	
	Если Не СохранитьБезДиалогаПользователя Тогда
		
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.Каталог = ПутьВыбора;
		
		Если ВыборКаталога.Выбрать() Тогда
			
			ПутьВыбораПрежний = ПутьВыбора;
			ПутьВыбора = ВыборКаталога.Каталог;
			ПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ПутьВыбора);
			
			ПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ПутьВыбора);
			Если ПутьВыбораПрежний <> ПутьВыбора Тогда
				ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", ТипПапки, ПутьВыбора);
			КонецЕсли;
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоФайлов = ДанныеСохраняемыхФайлов.КоличествоФайлов;
	ОбщийРазмерВМб = ДанныеСохраняемыхФайлов.ОбщийРазмер / (1024 * 1024);
	
	#Если Не ВебКлиент Тогда
		ТекстПояснения =
			СтрШаблон(
				НСтр("ru = 'Выполняется сохранение %1 файлов (%2 Мб)...
					|Пожалуйста, подождите.';
					|en = 'Saving %1 files (%2 MB) ...
					|Please wait.'"),
				КоличествоФайлов, 
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(ОбщийРазмерВМб));	
		Состояние(ТекстПояснения);
	#КонецЕсли
	
	ПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ПутьВыбора);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("НомерФайла", 0);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыВыполнения.Вставить("ДанныеСохраняемыхФайлов", ДанныеСохраняемыхФайлов);
	ПараметрыВыполнения.Вставить("ТипПапки", ТипПапки);
	ПараметрыВыполнения.Вставить("СохранитьБезДиалогаПользователя", СохранитьБезДиалогаПользователя);
	ПараметрыВыполнения.Вставить("НеСпрашиватьВариантСохранения", НеСпрашиватьВариантСохранения);
	ПараметрыВыполнения.Вставить("ПутьВыбора", ПутьВыбора);
	
	Обработчик = Новый ОписаниеОповещения("СохранитьФайлыМассивФайловТонкийКлиент", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик);
	Возврат "";
	
КонецФункции

Процедура СохранитьФайлыМассивФайловТонкийКлиент(ОбработчикРезультата, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеСохраняемыхФайлов.СписокДанныхФайлов.Количество() Тогда
		
		ТекстПояснения = НСтр("ru = 'Сохранение файлов завершено.'; en = 'Saving files is complete.'");
		Состояние(ТекстПояснения);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоФайлов = ПараметрыВыполнения.ДанныеСохраняемыхФайлов.СписокДанныхФайлов.Количество();
	НачальныйИндекс = ПараметрыВыполнения.НомерФайла;
	
	Для ИндексФайла = НачальныйИндекс По КоличествоФайлов - 1 Цикл
		
		ДанныеФайла = ПараметрыВыполнения.ДанныеСохраняемыхФайлов.СписокДанныхФайлов[ИндексФайла].Значение;
		
		ПараметрыВыполнения.Вставить("ПутьВыбора", ПараметрыВыполнения.ПутьВыбора);
		ПараметрыВыполнения.Вставить("ПолноеНаименованиеВерсии", ДанныеФайла.ПолноеНаименованиеВерсии);
		ПараметрыВыполнения.Вставить("Расширение", ДанныеФайла.Расширение);
		ПараметрыВыполнения.Вставить("ПутьКФайлуВКеше", "");
		ПараметрыВыполнения.Вставить("НеСпрашиватьВариантСохранения", ПараметрыВыполнения.НеСпрашиватьВариантСохранения);
		ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Ложь);
		ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
		ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", "");
		ПараметрыВыполнения.Вставить("ИмяСРасширением", "");
		ПараметрыВыполнения.Вставить("ПолноеРасширение", "");
		ПараметрыВыполнения.Вставить("ОткрытДиалог", Ложь);
		
		ОбработчикПодготовки = Новый ОписаниеОповещения("СохранитьФайлыМассивФайловТонкийКлиентПослеПодготовкаФайлаКСохранению", 
			ЭтотОбъект, ПараметрыВыполнения);
		
		ПодготовкаФайлаКСохранению(ОбработчикПодготовки);
		
		Если ОбработчикПодготовки.ДополнительныеПараметры.ОткрытДиалог Тогда
			Возврат; // цикл будет перезапущен снаружи
		КонецЕсли;
		
		ПараметрыВыполнения.НомерФайла = ИндексФайла + 1;
		
	КонецЦикла;
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеСохраняемыхФайлов.СписокДанныхФайлов.Количество() Тогда
		
		ТекстПояснения = НСтр("ru = 'Сохранение файлов завершено.'; en = 'Saving files is complete.'");
		Состояние(ТекстПояснения);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Истина);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлыМассивФайловТонкийКлиентПослеПодготовкаФайлаКСохранению(Результат, ПараметрыВыполнения) Экспорт
	
	ДанныеФайла = Результат.ДанныеФайла;
	АдресФайла = Результат.АдресФайла;
	
	Если ДанныеФайла.ТекущаяВерсия <> ДанныеФайла.Версия Тогда 
		АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
			ДанныеФайла.Версия, 
			ПараметрыВыполнения.УникальныйИдентификатор);
	КонецЕсли;
	
	ИмяФайла = Результат.ИмяСРасширением;
	ВыбранноеПолноеИмяФайла = ПараметрыВыполнения.ПутьВыбора + ИмяФайла;
	
	ПараметрыВыполнения.Вставить("ВыбранноеПолноеИмяФайла", ВыбранноеПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("АдресФайла", АдресФайла);
	ПараметрыВыполнения.Вставить("ПутьКФайлуВКеше", Результат.ПутьКФайлуВКеше);
	ПараметрыВыполнения.Вставить("ИмяСРасширением", Результат.ИмяСРасширением);
	ПараметрыВыполнения.Вставить("ПолноеРасширение", Результат.ПолноеРасширение);
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", Результат.РасширениеДляЗашифрованныхФайлов);
	ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Результат.СохранятьСРасшифровкой);
	
	Обработчик = Новый ОписаниеОповещения("СохранитьФайлыМассивФайловТонкийКлиентПослеВыбораИмени", 
		ЭтотОбъект, ПараметрыВыполнения);
	
	ПолучитьФайлСЗаданнымИменем(Обработчик);
	
КонецПроцедуры

Процедура СохранитьФайлыМассивФайловТонкийКлиентПослеВыбораИмени(Файл, ПараметрыВыполнения) Экспорт
	
	Если Файл <> Неопределено Тогда
		
		Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеСохраняемыхФайлов.СписокДанныхФайлов.Количество() Тогда
			
			ТекстПояснения = НСтр("ru = 'Сохранение файлов завершено.'; en = 'Saving files is complete.'");
			Состояние(ТекстПояснения);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Истина);
			
			Возврат;
			
		КонецЕсли;
		
		ДанныеФайла = ПараметрыВыполнения.ДанныеСохраняемыхФайлов.СписокДанныхФайлов[ПараметрыВыполнения.НомерФайла].Значение;
		
		СохранитьФайлНаДиск(
			ДанныеФайла,
			Файл.ПолноеИмя,
			ПараметрыВыполнения.АдресФайла,
			Файл,
			ПараметрыВыполнения.ПутьКФайлуВКеше,
			ПараметрыВыполнения.СохранятьСРасшифровкой);
		
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОткрытДиалог Тогда
		// переходим к сохранению следующего файла - если был открыт диалог
		ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
		Обработчик = Новый ОписаниеОповещения("СохранитьФайлыМассивФайловТонкийКлиент", ЭтотОбъект, ПараметрыВыполнения);
		ВыполнитьОбработкуОповещения(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

// Процедура для проверки и обработки случая наличия файла с таким именем в папке сохранения
Функция ПолучитьФайлСЗаданнымИменем(Обработчик) Экспорт
	
	ВозможноСохранениеФайла = Ложь;
	ПараметрыВыполненияВходящие = Обработчик.ДополнительныеПараметры;
	
	Файл = Новый Файл(ПараметрыВыполненияВходящие.ВыбранноеПолноеИмяФайла);
	Если Файл.Существует() Тогда
		
		ПредлагаемоеИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
			ПараметрыВыполненияВходящие.ПолноеНаименованиеВерсии, 
			ПараметрыВыполненияВходящие.Расширение);
		
		Счетчик = 1;
		Пока Файл.Существует() Цикл
			ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
				ПараметрыВыполненияВходящие.ПолноеНаименованиеВерсии + " (" + Строка(Счетчик) + ")", 
					ПараметрыВыполненияВходящие.Расширение);
			ПредлагаемоеИмяФайла = ИмяФайла; 
			ПредлагаемоеПолноеИмяФайла = ПараметрыВыполненияВходящие.ПутьВыбора + ИмяФайла;
			Файл = Новый Файл(ПредлагаемоеПолноеИмяФайла);
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ТекстВопроса =
			СтрШаблон(
				НСтр("ru = 'Файл ""%1"" уже существует. Можно сохранить с новым именем ""%2"".
					|Выберите вариант сохранения файла.';
					|en = 'File ""%1"" already exists. You can save it with new name ""%2"". 
					|Select the option to save the file.'"),
				ПараметрыВыполненияВходящие.ВыбранноеПолноеИмяФайла,
				ПредлагаемоеИмяФайла);
			
		ТекстВариантаЗаменить = НСтр("ru = 'Заменить существующий файл'; en = 'Replace existing file'");		
		ТекстВариантаНеСохранять = НСтр("ru = 'Пропустить файл'; en = 'Skip file'");
		ТекстВариантаСохранитьСНовымИменем = НСтр("ru = 'Сохранить с новым именем'; en = 'Save with new name'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(ТекстВариантаСохранитьСНовымИменем);
		Кнопки.Добавить(ТекстВариантаЗаменить);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, ТекстВариантаНеСохранять);
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Обработчик", Обработчик);
		ПараметрыВыполнения.Вставить("ВыбранноеПолноеИмяФайла", ПараметрыВыполненияВходящие.ВыбранноеПолноеИмяФайла);
		ПараметрыВыполнения.Вставить("ПутьВыбора", ПараметрыВыполненияВходящие.ПутьВыбора);
		ПараметрыВыполнения.Вставить("ПолноеНаименованиеВерсии", ПараметрыВыполненияВходящие.ПолноеНаименованиеВерсии);
		ПараметрыВыполнения.Вставить("Расширение", ПараметрыВыполненияВходящие.Расширение);
		ПараметрыВыполнения.Вставить("ПутьКФайлуВКеше", ПараметрыВыполненияВходящие.ПутьКФайлуВКеше);
		ПараметрыВыполнения.Вставить("НеСпрашиватьВариантСохранения", ПараметрыВыполненияВходящие.НеСпрашиватьВариантСохранения);
		
		ОбработчикВопроса = Новый ОписаниеОповещения("ПолучитьФайлСЗаданнымИменемПослеВопроса", 
			ЭтотОбъект, ПараметрыВыполнения);
		
		Если ПараметрыВыполненияВходящие.НеСпрашиватьВариантСохранения Тогда
			КодВозврата = ТекстВариантаСохранитьСНовымИменем;
			ВыполнитьОбработкуОповещения(ОбработчикВопроса, КодВозврата);
		Иначе
			Обработчик.ДополнительныеПараметры.ОткрытДиалог = Истина;
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, Кнопки);
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Обработчик, Файл);
		
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьФайлСЗаданнымИменемПослеВопроса(КодВозврата, ПараметрыВыполнения) Экспорт
	
	ТекстВариантаЗаменить = НСтр("ru = 'Заменить существующий файл'; en = 'Replace existing file'");
	ТекстВариантаНеСохранять = НСтр("ru = 'Пропустить файл'; en = 'Skip file'");
	ТекстВариантаСохранитьСНовымИменем = НСтр("ru = 'Сохранить с новым именем'; en = 'Save with new name'"); 
	
	Если КодВозврата = ТекстВариантаЗаменить Тогда
		
		Файл = Новый Файл(ПараметрыВыполнения.ВыбранноеПолноеИмяФайла);
		Если Файл.Существует() Тогда
			Если ПараметрыВыполнения.ПутьКФайлуВКеше <> ПараметрыВыполнения.ВыбранноеПолноеИмяФайла Тогда
				Попытка
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ПараметрыВыполнения.ВыбранноеПолноеИмяФайла);
				Исключение
					ПоказатьПредупреждение(, НСтр("ru = 'Не удалось заменить файл.'; en = 'Unable to replace the file.'"));
					//Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Обработчик, Файл);
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Отмена Тогда 
		
		ВыборФайлаЗавершен = Истина;
		Файл = Неопределено;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Обработчик, Файл);
		
	ИначеЕсли КодВозврата = ТекстВариантаСохранитьСНовымИменем Тогда 
		
		Счетчик = 1;
		Файл = Новый Файл(ПараметрыВыполнения.ВыбранноеПолноеИмяФайла);
		Пока Файл.Существует() Цикл
			ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
				ПараметрыВыполнения.ПолноеНаименованиеВерсии + " (" + Строка(Счетчик) + ")", ПараметрыВыполнения.Расширение);	
			ВыбранноеПолноеИмяФайла = ПараметрыВыполнения.ПутьВыбора + ИмяФайла;
			Файл = Новый Файл(ВыбранноеПолноеИмяФайла);
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ПараметрыВыполнения.ВыбранноеПолноеИмяФайла = ВыбранноеПолноеИмяФайла;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Обработчик, Файл);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура для проверки и обработки случая наличия файла в локальном кеше,
// случая зашифрованного файла.
Процедура ПодготовкаФайлаКСохранению(Обработчик)
	
	ДанныеФайла = Обработчик.ДополнительныеПараметры.ДанныеФайла;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Обработчик", Обработчик);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПутьКФайлуВКеше", Обработчик.ДополнительныеПараметры.ПутьКФайлуВКеше);
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", Обработчик.ДополнительныеПараметры.РасширениеДляЗашифрованныхФайлов);
	ПараметрыВыполнения.Вставить("ИмяСРасширением", Обработчик.ДополнительныеПараметры.ИмяСРасширением);
	ПараметрыВыполнения.Вставить("Расширение", Обработчик.ДополнительныеПараметры.Расширение);
	ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Обработчик.ДополнительныеПараметры.СохранятьСРасшифровкой);
	ПараметрыВыполнения.Вставить("ПолноеРасширение", Обработчик.ДополнительныеПараметры.ПолноеРасширение);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", Обработчик.ДополнительныеПараметры.УникальныйИдентификатор);
	
	Если ДанныеФайла.РедактируетТекущийПользователь Тогда
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ПолноеИмяФайла = "";
		ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.Версия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			
			ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			ДатаФайлаВБазе = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(ДатаФайлаВБазе);
			
			ФайлВерсии = Новый Файл(ПолноеИмяФайла);
			ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
			
			Если ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
				
				ИспользоватьВариант = 1; // На основе файла на локальном компьютере
				ПодготовкаФайлаКСохранениюПослеОтветаНаВопросДатаНовее(ИспользоватьВариант, ПараметрыВыполнения);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПодготовкаФайлаКСохранениюПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПодготовкаФайлаКСохранениюПослеОтветаНаВопросДатаНовее(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Или Ответ = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	Если Ответ = 1 Тогда // На основе файла на локальном компьютере
		ПараметрыВыполнения.ПутьКФайлуВКеше = ПараметрыВыполнения.ПолноеИмяФайла;
	КонецЕсли;
	
	ПодготовкаФайлаКСохранениюПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПодготовкаФайлаКСохранениюПродолжение(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПутьВыбора", ПараметрыВыполнения.ДанныеФайла.ПапкаДляСохранитьКак);
	Если ПараметрыВыполнения.ПутьВыбора = Неопределено Или ПараметрыВыполнения.ПутьВыбора = "" Тогда
		#Если Не ВебКлиент Тогда
			Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Данная команда не поддерживается в базовой версии.'; en = 'This command is not supported in the basic version.'"));
				ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ПараметрыВыполнения.ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Ложь);
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", "");
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		Обработчик = Новый ОписаниеОповещения("ПодготовкаФайлаКСохранениюПослеВыбораРежимаСохранения",
			ЭтотОбъект, ПараметрыВыполнения);
		
		ПараметрыВыполнения.Обработчик.ДополнительныеПараметры.ОткрытДиалог = Истина;
		
		ОткрытьФорму("Справочник.Файлы.Форма.ВыборСохраненияШифрованногоФайла", , , , , ,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПодготовкаФайлаКСохранениюПослеВыбораРежимаСохранения(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПодготовкаФайлаКСохранениюПослеВыбораРежимаСохранения(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов = Результат.РасширениеДляЗашифрованныхФайлов;
		
		Если Результат.СохранятьСРасшифровкой = 1 Тогда
			ПараметрыВыполнения.СохранятьСРасшифровкой = Истина;
		Иначе
			ПараметрыВыполнения.СохранятьСРасшифровкой = Ложь;
		КонецЕсли;
		
	ИначеЕсли Результат <> -1 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.СохранятьСРасшифровкой Тогда
		ПодготовкаФайлаКСохранениюПослеРасшифровки(-1, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.ДанныеФайла.Версия,,
		ПараметрыВыполнения.УникальныйИдентификатор);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ИдентификаторФормы",    ПараметрыВыполнения.УникальныйИдентификатор);
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'; en = 'Decrypting a file'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'; en = 'File'"));
	ОписаниеДанных.Вставить("Данные",                СтруктураВозврата.ДвоичныеДанные);
	ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СертификатыШифрования", ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПодготовкаФайлаКСохранениюПослеРасшифровки", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПодготовкаФайлаКСохранениюПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных <> -1 Тогда
		Если Не ОписаниеДанных.Успех Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
				ПараметрыВыполнения.УникальныйИдентификатор);
		Иначе
			АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
		КонецЕсли;
	Иначе
		АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		
		Если ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия <> ПараметрыВыполнения.ДанныеФайла.Версия Тогда
			АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	Расширение = ПараметрыВыполнения.ДанныеФайла.Расширение;
	ПолноеРасширение = Расширение;
	
	Если Не ПараметрыВыполнения.СохранятьСРасшифровкой Тогда
		Если Не ПустаяСтрока(ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов) Тогда
			ИмяСРасширением = ИмяСРасширением + "." + ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
			ПолноеРасширение = ПолноеРасширение + "." + ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
			Расширение = ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("АдресФайла", АдресФайла);
	ПараметрыВыполнения.Вставить("ИмяСРасширением", ИмяСРасширением);
	ПараметрыВыполнения.Вставить("Расширение", Расширение);
	ПараметрыВыполнения.Вставить("ПолноеРасширение", ПолноеРасширение);
	
	Если ТипЗнч(ПараметрыВыполнения.Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Обработчик, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура для сохранения файла на диск с выбранным путем, с обработкой случая наличия
// сохраняемого файлв в локальном кеше и случая зашифрованного файла.
Процедура СохранитьФайлНаДиск(ДанныеФайла, ВыбранноеПолноеИмяФайла, АдресФайла, Файл, ПутьКФайлуВКеше, СохранятьСРасшифровкой)
	
	Если ПутьКФайлуВКеше = "" Тогда
		
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ВыбранноеПолноеИмяФайла, АдресФайла);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
		// Сохраним Файл из БД на диск
		Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
			
			// Если не заполнена ссылка - сохраняем ещё не записанный файл, не удаляем его из временного хранилища
			УдалитьИзВременногоХранилища = ЗначениеЗаполнено(ДанныеФайла.Ссылка);
			
			// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
			Если ЭтоАдресВременногоХранилища(АдресФайла) И УдалитьИзВременногоХранилища Тогда
				УдалитьИзВременногоХранилища(АдресФайла);
			КонецЕсли;
			
			НовыйФайл = Новый Файл(ВыбранноеПолноеИмяФайла);
			
			ДатаСоздаваемогоФайлаНаДиске = ДанныеФайла.ДатаМодификацииУниверсальная;
			ДатаСоздаваемогоФайлаНаДиске = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
			
			НовыйФайл.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);
			
			Если ПротоколированиеРаботыПользователейКлиентПовтИсп.ПолучитьИспользоватьПротоколированиеРаботыПользователей() Тогда
				ПротоколированиеРаботыПользователей.ЗаписатьСохранитьКак(ДанныеФайла.Ссылка, ВыбранноеПолноеИмяФайла);
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Файл успешно сохранен'; en = 'The file was saved successfully'"), , ВыбранноеПолноеИмяФайла);
			
		КонецЕсли;
	Иначе
		Если ПутьКФайлуВКеше <> ВыбранноеПолноеИмяФайла Тогда
			КопироватьФайл(ПутьКФайлуВКеше, ВыбранноеПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сохранение файлов
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Открывает файл для просмотра.
Процедура Открыть(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ОткрытьФайлСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открывает файл и рассылает оповещение.

// Открывает файл.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ДанныеФайла             - Структура с данными файла.
//   УникальныйИдентификатор - УникальныйИдентификатор - Формы.
//
Процедура ОткрытьФайлСОповещением(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") И ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстСообщения = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение, ДанныеФайла.ИмяДругогоКомпьютера);
			
		ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК 
			+ НСтр("ru = 'Сейчас файл (предыдущей версии) будет открыт только для просмотра.'; en = 'File (of previous version) now will be open for viewing only.'");
			
		Обработчик = Неопределено;	
		
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
			ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
			ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемОткрытьФайлВоВременномКаталоге", ЭтотОбъект, ПараметрыВыполнения);	
		
		КонецЕсли;	
		
		ПоказатьПредупреждение(Обработчик, ТекстСообщения);
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	// Если Файл без файла, тогда открыть карточку.
	Если ПараметрыВыполнения.ДанныеФайла.Версия.Пустая() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьЗначение(Обработчик, ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемПослеУстановкиРасширения", ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемСРасширениемПослеПолученияВерсииВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор,
			Новый Структура("ОткрытьФайл", Истина));
	Иначе
		Если ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда
			Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
			ФайловыеФункцииСлужебныйКлиент.ВывестиНапоминаниеПриРедактировании(Обработчик);
		Иначе
			ОткрытьФайлСОповещениемБезРасширенияПослеНапоминания(-1, ПараметрыВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемСРасширениемПослеПолученияВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен = Истина Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
	КонецЕсли;
	
	ОткрытьФайлСОповещениемЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
		ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	ПолучитьФайл(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
	
	// При хранении файлов на диске (на сервере) файл удаляется из временного хранилища не сразу:
	// - удаляется, либо при следующем вызове ДанныеФайлаДляОткрытия, либо не удаляется;
	// - удаляется при закрытии формы автоматически.
	
	ОткрытьФайлСОповещениемЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемЗавершение(ПараметрыВыполнения) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ФайлОткрыт");
	Оповестить("ФайлОткрыт", ПараметрыОповещения, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
КонецПроцедуры

// Показывает окно предупреждение, а после его закрытия вызывает обработчик с заданным результатом.
Процедура ВернутьРезультатПослеПоказаПредупреждения(Обработчик, ТекстПредупреждения, Результат) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Обработчик", ПодготовитьОбработчикДляДиалога(Обработчик));
		ПараметрыОбработчика.Вставить("Результат", Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Показывает окно просмотра значения, а после его закрытия вызывает обработчик с заданным результатом.
Процедура ВернутьРезультатПослеПоказаЗначения(Обработчик, Значение, Результат) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Обработчик", ПодготовитьОбработчикДляДиалога(Обработчик));
		ПараметрыОбработчика.Вставить("Результат", Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьЗначение(Обработчик, Значение);
	Иначе
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура) Экспорт
	
	Если ТипЗнч(Структура.Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Структура.Обработчик, Структура.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат прямого вызова, когда не было открыто диалогов.
Процедура ВернутьРезультат(Обработчик, Результат) Экспорт
	
	Обработчик = ПодготовитьОбработчикДляПрямогоВызова(Обработчик, Результат);
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Записывает информацию, необходимую для подготовки обработчика асинхронного диалога.
Процедура ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, Модуль, ИмяПроцедуры) Экспорт
	
	ПараметрыВыполнения.Вставить("АсинхронныйДиалог", Новый Структура);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("Модуль",                 Модуль);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("ИмяПроцедуры",           ИмяПроцедуры);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("Открыт",                 Ложь);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("РезультатКогдаНеОткрыт", Неопределено);
	
КонецПроцедуры

// Подготовка обработчика асинхронного диалога.
Функция ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура) Экспорт
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		// Рекурсивная регистрация всех обработчиков вызывающего кода.
		Если ОбработчикИлиСтруктура.Свойство("ОбработчикРезультата") Тогда
			ОбработчикИлиСтруктура.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура.ОбработчикРезультата);
		КонецЕсли;
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			// Регистрация открытого диалога.
			ОбработчикИлиСтруктура.АсинхронныйДиалог.Открыт = Истина;
			// Формирование обработчика (при этом фиксируется вся структура параметров).
			Обработчик = Новый ОписаниеОповещения(
				ОбработчикИлиСтруктура.АсинхронныйДиалог.ИмяПроцедуры,
				ОбработчикИлиСтруктура.АсинхронныйДиалог.Модуль,
				ОбработчикИлиСтруктура);
		Иначе
			Обработчик = Неопределено;
		КонецЕсли;
	Иначе
		Обработчик = ОбработчикИлиСтруктура;
	КонецЕсли;
	
	Возврат Обработчик;
	
КонецФункции

// Подготовка обработчика прямого вызова без открытия диалога.
Функция ПодготовитьОбработчикДляПрямогоВызова(ОбработчикИлиСтруктура, Результат) Экспорт
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			ОбработчикИлиСтруктура.АсинхронныйДиалог.РезультатКогдаНеОткрыт = Результат;
		КонецЕсли;
		Возврат Неопределено; // Обработчик не был подготовлен для диалога => Вызывающий код не остановился.
	Иначе
		Возврат ОбработчикИлиСтруктура;
	КонецЕсли;
	
КонецФункции

// Устанавливает обработчик закрытия формы, полученной при помощи ПолучитьФорму().
Процедура УстановитьОповещениеФормы(Форма, Обработчик) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		// Установка обработчика закрытия формы.
		Форма.ОписаниеОповещенияОЗакрытии = Обработчик;
		// Форма, возвращающая значение, должна:
		Если Форма.ВладелецФормы = Неопределено Тогда
			// Без установленного владельца - блокировать весь интерфейс.
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Иначе
			// С установленным владельцем - блокировать окно владельца или весь интерфейс.
			Если Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый Тогда
				Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла из хранилища в рабочий каталог.

// Получает Файл из хранилища файлов в рабочий каталог
// и возвращает путь к этому файлу.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла        - Структура с данными файла.
//  ПолноеИмяФайла     - Строка.
//  НаЧтение           - Булево - Ложь - для чтения, Истина для редактирования.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайлов(
	ОбработчикРезультата,
	ДанныеФайла,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьФайлВерсииВЛокальныйКэшФайловЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайловЗапуск(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", "");
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	ДатаФайлаВБазе   = ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная;
	РазмерФайлаВБазе = ПараметрыВыполнения.ДанныеФайла.Размер;
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		ПараметрыВыполнения.ДанныеФайла,
		ПараметрыВыполнения.ДанныеФайла.Версия,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения файла из хранилища файлов
			           |в рабочий каталог.'; en = 'Error getting the file from the file storage to the working directory.'"));
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
		
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВЛокальныйКэшФайловПослеВыбораДействия", ЭтотОбъект, ПараметрыВыполнения);
	
	ФайловыеФункцииКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		Обработчик,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайловПослеВыбораДействия(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = "ВзятьИзХранилищаИОткрыть" Тогда
		
		Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВЛокальныйКэшФайловПослеУдаления", ЭтотОбъект, ПараметрыВыполнения);
		УдалитьФайл(Обработчик, ПараметрыВыполнения.ПолноеИмяФайла);
		
	ИначеЕсли Результат = "ОткрытьСуществующий" Тогда
		
		Если ПараметрыВыполнения.ДанныеФайла.ВРабочемКаталогеНаЧтение <> ПараметрыВыполнения.НаЧтение Тогда
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ПараметрыВыполнения.ДанныеФайла.Версия,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПараметрыВыполнения.ФайлПолучен = Истина;
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		
	Иначе // Результат = "Отмена".
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайловПослеУдаления(ФайлУдален, ПараметрыВыполнения) Экспорт
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
		ПараметрыВыполнения.ОбработчикРезультата,
		ПараметрыВыполнения.ДанныеФайла,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
		ПараметрыВыполнения.НаЧтение,
		ПараметрыВыполнения.ИдентификаторФормы,
		ПараметрыВыполнения.ДополнительныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла с сервера и регистрация в локальном кэше.

// Получить Файл с сервера и зарегистрировать в локальном кэше.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла.
//  ДатаФайлаВБазе - Дата - дата файла в базе.
//  НаЧтение - Булево - файл помещен на чтение.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ОбработчикРезультата,
	ДанныеФайла,
	ПолноеИмяФайла,
	ВремяИзмененияУниверсальное,
	НаЧтение,
	ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено)
	
	// Переменные параметризации:
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗапуск(ПараметрыВыполнения)
	
	// Переменные выполнения:
	ПараметрыВыполнения.Вставить("ВРабочемКаталогеВладельца", ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "");
	ПараметрыВыполнения.Вставить("ИмяКаталога", "");
	ПараметрыВыполнения.Вставить("ИмяКаталогаПрежнееЗначение", "");
	ПараметрыВыполнения.Вставить("ИмяФайла", "");
	ПараметрыВыполнения.Вставить("МаксимальнаяДлинаПолногоПути", 260);
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		ПараметрыВыполнения.ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение = ПараметрыВыполнения.ИмяКаталога;
		
		// Формирование имени файла с расширением.
		ПараметрыВыполнения.ИмяФайла = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии;
		Если Не ПустаяСтрока(ПараметрыВыполнения.ДанныеФайла.Расширение) Тогда 
			ПараметрыВыполнения.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ПараметрыВыполнения.ИмяФайла, ПараметрыВыполнения.ДанныеФайла.Расширение);
		КонецЕсли;
		
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		Если Не ПустаяСтрока(ПараметрыВыполнения.ИмяФайла) Тогда
			ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ИмяКаталога + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(
				ПараметрыВыполнения.ИмяКаталога,
				ПараметрыВыполнения.ИмяФайла);
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыполнения.ИмяФайла) Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути = 260;
		Если НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xls" Или НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xlsx" Тогда
			// Excel Длина имени файла вместе с путем не должна превышать 218 знака.
			ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути = 218;
		КонецЕсли;
		
		МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
		
		Если ПараметрыВыполнения.ВРабочемКаталогеВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
			Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) > ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
				ПутьКаталогаПользователя = КаталогДанныхПользователя();
				МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
				
				// Если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
				Если СтрДлина(ПараметрыВыполнения.ИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
					ТекстСообщения =
					СтрШаблон(
						НСтр("ru = 'Длина пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
						           |%2';
						           |en = 'The length of the path to file (working directory plus file name) exceeds %1 characters 
						           |%2'"),
						ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути,
						ПараметрыВыполнения.ПолноеИмяФайла);
					
					ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
						+ НСтр("ru = 'Измените имя файла на более короткое.'; en = 'Make the file name shorter.'");
					ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстСообщения, ПараметрыВыполнения);
					Возврат;
				КонецЕсли;
				
				ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПредложитьВыборКаталога(-1, ПараметрыВыполнения);
				Возврат;
			КонецЕсли;
#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПредложитьВыборКаталога(Ответ, ПараметрыВыполнения) Экспорт
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Длина пути к файлу превышает %1 символов:
		|%2
		|
		|Выбрать другой основной рабочий каталог?';
		|en = 'The file path length exceeds %1 characters: 
		|%2
		|Choose different main working directory?'"),
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути,
		ПараметрыВыполнения.ПолноеИмяФайла);
	Обработчик = Новый ОписаниеОповещения("ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловНачатьВыборКаталога", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловНачатьВыборКаталога(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Выбираем другой путь к рабочему каталогу.
	Заголовок = НСтр("ru = 'Выберите другой основной рабочий каталог'; en = 'Select different main working directory'");
	КаталогВыбран = ВыбратьПутьКРабочемуКаталогу(ПараметрыВыполнения.ИмяКаталога, Заголовок, Ложь);
	Если Не КаталогВыбран Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ИмяКаталога + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(
		ПараметрыВыполнения.ИмяКаталога,
		ПараметрыВыполнения.ИмяФайла);
	
	// уложились в 260 символов
	Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) <= ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
		Обработчик = Новый ОписаниеОповещения("ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеПереносаСодержимогоРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
		ПеренестиСодержимоеРабочегоКаталога(Обработчик, ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение, ПараметрыВыполнения.ИмяКаталога);
	Иначе
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПредложитьВыборКаталога(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеПереносаСодержимогоРабочегоКаталога(СодержимоеПеренесено, ПараметрыВыполнения) Экспорт
	
	Если СодержимоеПеренесено Тогда
		ФайловыеФункцииСлужебныйКлиент.УстановитьРабочийКаталогПользователя(ПараметрыВыполнения.ИмяКаталога);
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПродолжение(ПараметрыВыполнения);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПродолжение(ПараметрыВыполнения)
	
	#Если Не ВебКлиент Тогда
		Если ПараметрыВыполнения.ВРабочемКаталогеВладельца = Ложь Тогда
			ОсвободитьМестоВРабочемКаталоге(, ПараметрыВыполнения.ДанныеФайла);
		КонецЕсли;
	#КонецЕсли
	
	РазмерФайла = 0;
	
	// Запись Файл в каталог
	
	ПараметрыВыполнения.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
		ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	РазмерВМб = ПараметрыВыполнения.ДанныеФайла.Размер / (1024 * 1024);
	
	ФайлНаДискеПоИмени = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	ИмяИРасширениеВПути = ФайлНаДискеПоИмени.Имя;
	Позиция = СтрНайти(ПараметрыВыполнения.ПолноеИмяФайла, ИмяИРасширениеВПути);
	ПутьКФайлу = "";
	Если Позиция <> 0 Тогда
		ПутьКФайлу = Лев(ПараметрыВыполнения.ПолноеИмяФайла, Позиция - 1); // -1 - вычет слэша
	КонецЕсли;
	
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
	ПараметрыВыполнения.Вставить("ПараметрПутьКФайлу", ПутьКФайлу);
	
	ПараметрыВыполнения.ПолноеИмяФайла = ПутьКФайлу + ПараметрыВыполнения.ИмяФайла; // могло смениться расширение
	
	ТекстПояснения = СтрШаблон(
		НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
		           |Пожалуйста, подождите.';
		           |en = 'Transferring file ""%1"" (%2 MB) ...
		           |Please wait.'"),
		ПараметрыВыполнения.ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
		
		КопироватьФайл(ПараметрыВыполнения.ДанныеФайла.ПутьОбновленияИзФайлаНаДиске, ПараметрыВыполнения.ПолноеИмяФайла);
		Состояние();
		
		Если ПараметрыВыполнения.ДанныеФайла.Свойство("ВремяИзмененияВыбранное")
			И ПараметрыВыполнения.Свойство("ВремяИзмененияУниверсальное") Тогда
			ПараметрыВыполнения.ВремяИзмененияУниверсальное 
				= ПараметрыВыполнения.ДанныеФайла.ВремяИзмененияВыбранное;
		КонецЕсли;	
		
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗавершение(ПараметрыВыполнения);
		
		Возврат;
		
	КонецЕсли;
	
	Состояние();
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		
		Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураВозврата = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
			ПараметрыВыполнения.ДанныеФайла.Ссылка,
			ПараметрыВыполнения.ДанныеФайла.Версия,,
			ПараметрыВыполнения.ИдентификаторФормы);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ИдентификаторФормы",    ПараметрыВыполнения.ИдентификаторФормы);
		ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'; en = 'Decrypting a file'"));
		ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'; en = 'File'"));
		ОписаниеДанных.Вставить("Данные",                СтруктураВозврата.ДвоичныеДанные);
		ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
		ОписаниеДанных.Вставить("СертификатыШифрования", ПараметрыВыполнения.ДанныеФайла.Ссылка);
		ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
		
		ОбработчикПродолжения = Новый ОписаниеОповещения(
			"ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеРасшифровки",
			ЭтотОбъект,
			ПараметрыВыполнения);
		
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
		
		Возврат;
	КонецЕсли;
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПередачаФайла(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
			ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
	КонецЕсли;
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПередачаФайла(ПараметрыВыполнения, АдресФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПередачаФайла(ПараметрыВыполнения, АдресФайла = Неопределено) Экспорт
	
	Если АдресФайла = Неопределено Тогда
		Если ПараметрыВыполнения.ДанныеФайла.Версия <> ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия Тогда
			АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.ИдентификаторФормы);
		Иначе
			АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ИмяФайла, АдресФайла);
	ПередаваемыеФайлы.Добавить(Описание);
	
	#Если ВебКлиент Тогда
		Если ПараметрыВыполнения.ДополнительныеПараметры <> Неопределено И ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ОткрытьФайл") Тогда
			
		МассивОпераций = Новый Массив;
		
		ОписаниеВызова = Новый Массив;
		ОписаниеВызова.Добавить("ПолучитьФайлы");
		ОписаниеВызова.Добавить(ПередаваемыеФайлы);
		ОписаниеВызова.Добавить(Неопределено);  // Не используется.
		ОписаниеВызова.Добавить(ПараметрыВыполнения.ПараметрПутьКФайлу);
		ОписаниеВызова.Добавить(Ложь);          // Интерактивно = Ложь.
		МассивОпераций.Добавить(ОписаниеВызова);
		
		ОписаниеВызова = Новый Массив;
		ОписаниеВызова.Добавить("ЗапуститьПриложение");
		ОписаниеВызова.Добавить(ПараметрыВыполнения.ПолноеИмяФайла);
		МассивОпераций.Добавить(ОписаниеВызова);
		
		Если Не ЗапроситьРазрешениеПользователя(МассивОпераций) Тогда
			// Пользователь не дал разрешения.
			
			// создадим запись в РС ФайлыВРабочемКаталогеКомпьютера и обновим КоличествоЗанятыхФайлов
			РаботаСФайламиВызовСервера.СоздатьЗаписьВФайлыВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла.Ссылка);
			
			КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);

			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
			
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		КонецЕсли;
	#КонецЕсли
	
	Если Не ПолучитьФайлы(ПередаваемыеФайлы,, ПараметрыВыполнения.ПараметрПутьКФайлу, Ложь) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Для варианта с хранением файлов на диске (на сервере)
	// файл удаляется из временного хранилища после получения.
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		УдалитьИзВременногоХранилища(АдресФайла);
	КонецЕсли;
	
	Состояние();
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗавершение(ПараметрыВыполнения)
	
	// Установим время изменения файла таким, как оно стоит в текущей версии.
	ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ПараметрыВыполнения.ВремяИзмененияУниверсальное);
	
	// Т.к. размер на диске может отличаться от размера в базе (при добавлении из веб клиента).
	РазмерФайла = ФайлНаДиске.Размер();
	
	ФайлНаДиске.УстановитьТолькоЧтение(ПараметрыВыполнения.НаЧтение);
	
	ПараметрыВыполнения.ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	КоличествоЗанятыхФайлов = 0;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(
		ПараметрыВыполнения.ДанныеФайла.Версия,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ИмяКаталога,
		ПараметрыВыполнения.НаЧтение,
		РазмерФайла,
		ПараметрыВыполнения.ВРабочемКаталогеВладельца,
		КоличествоЗанятыхФайлов);
		
	Если КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
	КонецЕсли;	
		
	Если ПараметрыВыполнения.ДанныеФайла.Размер <> РазмерФайла Тогда
		// При обновлении из файла на диске коррекция не нужна.
		Если Не ПараметрыВыполнения.ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
			
			РаботаСФайламиВызовСервера.ОбновитьРазмерФайлаИВерсии(
				ПараметрыВыполнения.ДанныеФайла, РазмерФайла, ПараметрыВыполнения.ИдентификаторФормы);
			
			ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
			ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Версия);
			
			Оповестить("Запись_Файл",
				Новый Структура("Событие, ИдентификаторРодительскойФормы", 
				"ДанныеФайлаИзменены", Неопределено),
				ПараметрыВыполнения.ДанныеФайла.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.ФайлПолучен = Истина;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла из хранилища в рабочий каталог.

// Получает Файл из хранилища файлов в рабочий каталог папки
// и возвращает путь к этому файлу.
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла        - Структура с данными файла.
//  ПолноеИмяФайла     - Строка (возвращаемое значение).
//  НаЧтение           - Булево - Ложь - для чтения, Истина для редактирования.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьФайлВерсииВРабочийКаталогПапки(ОбработчикРезультата,
	ДанныеФайла,
	ПолноеИмяФайла,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьФайлВерсииВРабочийКаталогПапкиЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиЗапуск(ПараметрыВыполнения)
	Перем Версия;
	Перем ДатаПомещения;
	
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	ВРабочемКаталогеВладельца = Истина;
	
	// Формирование имени файла с расширением
	ИмяФайла = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии;
	Если Не ПустаяСтрока(ПараметрыВыполнения.ДанныеФайла.Расширение) Тогда 
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ИмяФайла, ПараметрыВыполнения.ДанныеФайла.Расширение);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
		Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВРабочийКаталогПапкиПослеПроверкиДлиныПути", ЭтотОбъект, ПараметрыВыполнения);
		ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ПолноеИмяФайла, ИмяФайла);
	Иначе
		ПолучитьФайлВерсииВРабочийКаталогПапкиПродолжение(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиПослеПроверкиДлиныПути(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Ложь Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	Иначе
		ПолучитьФайлВерсииВРабочийКаталогПапкиПродолжение(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиПродолжение(ПараметрыВыполнения)
	
	// Поиск регистрации файла в рабочем каталоге (полное имя с путем).
	НайденныеСвойства = РаботаСФайламиСлужебныйВызовСервера.НайтиВРегистреПоПути(ПараметрыВыполнения.ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("ФайлЕстьВРегистре", НайденныеСвойства.ФайлЕстьВРегистре);
	Версия            = НайденныеСвойства.Версия;
	ДатаПомещения     = ?(ПараметрыВыполнения.ФайлЕстьВРегистре, НайденныеСвойства.ДатаПомещения, ДатаПомещения);
	Владелец          = НайденныеСвойства.Владелец;
	НомерВерсии       = НайденныеСвойства.НомерВерсии;
	ВРегистреНаЧтение = НайденныеСвойства.ВРегистреНаЧтение;
	ВРегистреКодФайла = НайденныеСвойства.ВРегистреКодФайла;
	ВРегистреПапка    = НайденныеСвойства.ВРегистреПапка;
	
	ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	ФайлНаДискеСуществует = ФайлНаДиске.Существует();
	
	// Удаление регистрации файла, если он не существует.
	Если ПараметрыВыполнения.ФайлЕстьВРегистре И Не ФайлНаДискеСуществует Тогда
		РаботаСФайламиВызовСервера.УдалитьИзРегистра(Версия);
		ПараметрыВыполнения.ФайлЕстьВРегистре = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.ФайлЕстьВРегистре И Не ФайлНаДискеСуществует Тогда
		ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Установлено, что в рабочем каталоге файл существует.
	
	Если ПараметрыВыполнения.ФайлЕстьВРегистре И Версия <> ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия Тогда
		
		Если Владелец = ПараметрыВыполнения.ДанныеФайла.Ссылка И ВРегистреНаЧтение = Истина Тогда
			
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			
			// Если владелец версий файла совпадает и
			// существующий файл в рабочем каталоге зарегистрирован для чтения,
			// тогда можно заменить его другим файлом из хранилища.
			ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
				ПараметрыВыполнения.ОбработчикРезультата,
				ПараметрыВыполнения.ДанныеФайла,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
				ПараметрыВыполнения.НаЧтение,
				ПараметрыВыполнения.ИдентификаторФормы,
				ПараметрыВыполнения.ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		Если ПараметрыВыполнения.ДанныеФайла.Владелец = ВРегистреПапка Тогда // Одна и та же папка.
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'В рабочем каталоге уже есть файл
				           |""%1"",
				           |связанный с другим файлом в информационной базе.
				           |
				           |Код файла в хранилище файлов: %2.
				           |Код файла в рабочем каталоге: %3.
				           |
				           |Переименуйте один из файлов в информационной базе.';
				           |en = 'There is already file ""%1"" in the working directory, associated with another file in the infobase. 
				           |
				           |The code of the file in the file storage: %2. 
				           |The code of the file in the working directory: %3. 
				           |
				           |Rename one of the files in the infobase.'"),
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.ДанныеФайла.КодФайла,
				ВРегистреКодФайла);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'В рабочем каталоге уже есть файл
				           |""%1"",
				           |связанный с другим файлом информационной базы.
				           |
				           |Код файла в хранилище файлов: %2.
				           |Код файла в рабочем каталоге: %3.
				           |
				           |В информационной базе измените рабочий каталог одной из папок.
				           |(У двух папок не должно быть одинакового рабочего каталога).';
				           |en = 'There is already file ""%1"" in the working directory, associated with other file in the infobase. 
				           |
				           |The code of the file in the file storage: %2. 
				           |The code of the file in the working directory: %3. 
				           |
				           |Change the working directory of one of the folders in the infobase. 
				           |(Two folders should not have the same working directory).'"),
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.ДанныеФайла.КодФайла,
				ВРегистреКодФайла);
		КонецЕсли;
		
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Либо файл незарегистрирован, либо зарегистрирован и версия совпадает.
	
	// Проверка даты изменения и принятие решения, что делать дальше.
	Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВРабочийКаталогПапкиПослеВыбораДействия", ЭтотОбъект, ПараметрыВыполнения);
	
	ФайловыеФункцииКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		Обработчик,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиПослеВыбораДействия(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = "ВзятьИзХранилищаИОткрыть" Тогда
		
		// В рабочем каталоге папки настройка подтверждения при удалении не используется.
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолноеИмяФайла);
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		
	ИначеЕсли Результат = "ОткрытьСуществующий" Тогда
		
		Если ПараметрыВыполнения.ДанныеФайла.ВРабочемКаталогеНаЧтение <> ПараметрыВыполнения.НаЧтение
			Или Не ПараметрыВыполнения.ФайлЕстьВРегистре Тогда
			
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ПараметрыВыполнения.ДанныеФайла.Версия,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПараметрыВыполнения.ФайлПолучен = Истина;
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		
	Иначе // Результат = "Отмена".
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла с сервера и регистрация в рабочем каталоге.

// Получить Файл с сервера и зарегистрировать в рабочем каталоге
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла
//  ДатаФайлаВБазе - Дата - дата файла в базе
//  НаЧтение - Булево - файл помещен на чтение
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
	ОбработчикРезультата,
	ДанныеФайла,
	ПолноеИмяФайла,
	ДатаФайлаВБазе,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("ДатаФайлаВБазе", ДатаФайлаВБазе);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиЗапуск(ПараметрыВыполнения)
	
	//ПараметрыВыполнения.Вставить("ПолноеИмяФайла", "");
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	СохраненныйПутьФайла = ПараметрыВыполнения.ПолноеИмяФайла;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		ПараметрыВыполнения.ДанныеФайла,
		ПараметрыВыполнения.ДанныеФайла.Версия,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
			
		ПараметрыВыполнения.ПолноеИмяФайла = СохраненныйПутьФайла;
		
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		Возврат;	
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения файла из хранилища файлов
			           |в рабочий каталог.'; en = 'Error getting the file from the file storage to the working directory.'"));
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
		
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	Обработчик = Новый ОписаниеОповещения("ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиПослеВыбораДействия", ЭтотОбъект, ПараметрыВыполнения);
	
	ФайловыеФункцииКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		Обработчик,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиПослеВыбораДействия(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = "ВзятьИзХранилищаИОткрыть" Тогда
		
		// В рабочем каталоге папки настройка подтверждения при удалении не используется.
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолноеИмяФайла);
		
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		
	ИначеЕсли Результат = "ОткрытьСуществующий" Тогда
		
		Если ПараметрыВыполнения.ДанныеФайла.ВРабочемКаталогеНаЧтение <> ПараметрыВыполнения.НаЧтение Тогда
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ПараметрыВыполнения.ДанныеФайла.Версия,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПараметрыВыполнения.ФайлПолучен = Истина;
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		
	Иначе // Результат = "Отмена".
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка максимальной длины рабочего каталога с заменой и переносом файлов.

// Проверяет максимальную длину, если нужно - меняет рабочий каталог и переносит файлы
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - полное имя файла
//  НормальноеИмяФайла - Строка - имя файла (без пути)
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//       * Истина если длина полного имени файла не превышает 260.
//
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ОбработчикРезультата,
		ДанныеФайла, ПолноеИмяФайла, НормальноеИмяФайла)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("НормальноеИмяФайла", НормальноеИмяФайла);
	
	ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеЗапуск(ПараметрыВыполнения)
	
	#Если ВебКлиент Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	#КонецЕсли
	
	ПараметрыВыполнения.Вставить("ИмяКаталогаПрежнееЗначение", ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца);
	ПараметрыВыполнения.Вставить("МаксимальнаяДлинаПолногоПути", 260);
	Если НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xls" Или НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xlsx" Тогда
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути = 218; // Excel Длина имени файла вместе с путем не должна превышать 218 знака
	КонецЕсли;
	
	МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
	
	Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) <= ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
		           |""%2"".'; en = 'The length of the full path to file (working directory plus file name) exceeds %1 characters ""%2"".'"),
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути,
		ПараметрыВыполнения.ПолноеИмяФайла);
	
	ПутьКаталогаПользователя = КаталогДанныхПользователя();
	МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
	
	// Если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
	Если СтрДлина(ПараметрыВыполнения.НормальноеИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
		ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
			+ НСтр("ru = 'Измените имя файла на более короткое.'; en = 'Make the file name shorter.'");
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстСообщения, Ложь);
		Возврат;
	КонецЕсли;
	
	// Если структура папок (путь к рабочему каталогу текущей папки) превышает 260-5 (1.txt), пишем "Измените имена папок или перенесите текущую папку в другую папку"
	Если СтрДлина(ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца) > ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - 5 Тогда
		ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
			+ НСтр("ru = 'Измените имена папок или перенесите текущую папку в другую папку.'; en = 'Change the names of the folders or move the current folder into another folder.'");
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстСообщения, Ложь);
		Возврат;
	КонецЕсли;
	
	ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПредложитьВыборКаталога(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПредложитьВыборКаталога(ПараметрыВыполнения)
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
		|""%2"".
		|
		|Выбрать другой основной рабочий каталог?
		|(Содержимое рабочего каталога будет перенесено в выбранный каталог).';
		|en = 'The length of the full path to file (working directory plus file name) exceeds %1 characters ""%2"".
		|Select different main working directory?
		|(Contents of the working directory will be moved to the selected directory).'"),
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути, ПараметрыВыполнения.ПолноеИмяФайла);
	Обработчик = Новый ОписаниеОповещения("ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеНачатьВыборКаталога", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеНачатьВыборКаталога(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	// Выбираем другой путь к рабочему каталогу.
	Заголовок = НСтр("ru = 'Выберите другой рабочий каталог'; en = 'Select different working directory'");
	КаталогВыбран = ВыбратьПутьКРабочемуКаталогу(ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца, Заголовок, Истина);
	Если Не КаталогВыбран Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца + ПараметрыВыполнения.НормальноеИмяФайла;
	
	Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) <= ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда // уложились в 260 символов
		Обработчик = Новый ОписаниеОповещения("ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПослеПереносаСодержимогоРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
		ПеренестиСодержимоеРабочегоКаталога(Обработчик, ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение, ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца);
	Иначе
		ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПредложитьВыборКаталога(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПослеПереносаСодержимогоРабочегоКаталога(СодержимоеПеренесено, ПараметрыВыполнения) Экспорт
	
	Если СодержимоеПеренесено Тогда
		// Регистр сведений ФайлыВРабочемКаталогеКомпьютера - сейчас там полный путь к файлу -
		// надо его менять - выделять общую часть и replace. -просто SQL запросом -
		// для текущего пользователя.
		РаботаСФайламиВызовСервера.СохранитьРабочийКаталогИЗаменитьПутиВРегистре(
			ПараметрыВыполнения.ДанныеФайла.Владелец,
			ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца,
			ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение);
	КонецЕсли;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, СодержимоеПеренесено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Копирование содержимого из одного каталога в другой.

// Копирует все файлы в указанном каталоге в другой каталог
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   КаталогИсточника  - Строка - прежнее имя каталога
//   КаталогПриемника  - Строка - новое имя каталога
//
// Возвращаемое значение:
//   Структура - Результат копирования.
//       * ВозниклаОшибка           - Булево - Истина когда все файлы скопированы.
//       * ИнформацияОбОшибке       - ИнформацияОбОшибке - Информация об ошибке.
//       * ПолноеИмяСбойногоФайла   - Строка - Полное имя файла, при копировании которого возникла ошибка.
//       * СкопированныеФайлыИПапки - Массив - Полные имена файлов и папок приемника.
//       * ОригинальныеФайлыИПапки  - Массив - Полные имена файлов и папок источника.
//
Процедура СкопироватьСодержимоеКаталога(ОбработчикРезультата, Знач КаталогИсточника, Знач КаталогПриемника)
	
	Результат = Новый Структура;
	Результат.Вставить("ВозниклаОшибка",           Ложь);
	Результат.Вставить("ПолноеИмяСбойногоФайла",   "");
	Результат.Вставить("ИнформацияОбОшибке",       "");
	Результат.Вставить("СкопированныеФайлыИПапки", Новый Массив);
	Результат.Вставить("ОригинальныеФайлыИПапки",  Новый Массив);
	
	КопироватьСодержимоеКаталога(Результат, КаталогИсточника, КаталогПриемника);
	
	Если Результат.ВозниклаОшибка Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Не удалось скопировать файл
			           |""%1"".
			           |Возможно он занят другим приложением.
			           |
			           |Повторить операцию?';
			           |en = 'Failed to copy file ""%1"".
			           |Perhaps it is in use by another application.
			           |
			           |Retry?'"),
			Результат.ПолноеИмяСбойногоФайла);
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыВыполнения.Вставить("КаталогИсточника", КаталогИсточника);
		ПараметрыВыполнения.Вставить("КаталогПриемника", КаталогПриемника);
		ПараметрыВыполнения.Вставить("Результат", Результат);
		
		Обработчик = Новый ОписаниеОповещения(
			"СкопироватьСодержимоеКаталогаПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВернутьРезультат(ОбработчикРезультата, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СкопироватьСодержимоеКаталогаПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения)
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.Результат);
	Иначе
		СкопироватьСодержимоеКаталога(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.КаталогИсточника,
			ПараметрыВыполнения.КаталогПриемника);
	КонецЕсли;
	
КонецПроцедуры

// Копирует все файлы в указанном каталоге в другой каталог
//
// Параметры
//   Результат - Структура - Результат копирования. См. СкопироватьСодержимоеКаталога(), возвращаемое значение.
//   КаталогИсточника  - Строка - прежнее имя каталога
//   КаталогПриемника  - Строка - новое имя каталога
//
Процедура КопироватьСодержимоеКаталога(Результат, КаталогИсточника, КаталогПриемника)
	
	КаталогПриемника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПриемника);
	КаталогИсточника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсточника);
	
	СоздатьКаталог(КаталогПриемника);
	
	Результат.СкопированныеФайлыИПапки.Добавить(КаталогПриемника);
	Результат.ОригинальныеФайлыИПапки.Добавить(КаталогИсточника);
	
	ФайлыИсточника = НайтиФайлы(КаталогИсточника, "*");
	
	Для Каждого ФайлИсточника Из ФайлыИсточника Цикл
		
		ФайлИсточникаПолноеИмя = ФайлИсточника.ПолноеИмя;
		ФайлИсточникаИмя       = ФайлИсточника.Имя;
		ФайлПриемникаПолноеИмя = КаталогПриемника + ФайлИсточникаИмя;
		
		Если ФайлИсточника.ЭтоКаталог() Тогда
			
			КопироватьСодержимоеКаталога(Результат, ФайлИсточникаПолноеИмя, ФайлПриемникаПолноеИмя);
			Если Результат.ВозниклаОшибка Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Результат.ОригинальныеФайлыИПапки.Добавить(ФайлИсточникаПолноеИмя);
			
			ФайлПриемника = Новый Файл(ФайлПриемникаПолноеИмя);
			Если ФайлПриемника.Существует() Тогда
				// Это нужно для обратного копирования - в этом случае файлы уже могут существовать.
				Результат.СкопированныеФайлыИПапки.Добавить(ФайлПриемникаПолноеИмя);
			Иначе
				Попытка
					КопироватьФайл(ФайлИсточникаПолноеИмя, ФайлПриемникаПолноеИмя);
				Исключение
					Результат.ВозниклаОшибка         = Истина;
					Результат.ИнформацияОбОшибке     = ИнформацияОбОшибке();
					Результат.ПолноеИмяСбойногоФайла = ФайлИсточникаПолноеИмя;
					Возврат;
				КонецПопытки;
				Результат.СкопированныеФайлыИПапки.Добавить(ФайлПриемникаПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Перенос содержимого рабочего каталога в новый.

// Переносит все файлы в рабочем каталоге в другой каталог (в том числе и взятые на редактирование)
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   КаталогИсточника - Строка - Прежнее имя каталога.
//   КаталогПриемника - Строка - Новое имя каталога.
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//
Процедура ПеренестиСодержимоеРабочегоКаталога(ОбработчикРезультата, КаталогИсточника, КаталогПриемника) Экспорт
	
	// Новый путь является подмножеством старого. Это запрещено, т.к. может привести к зацикливанию.
	Если СтрНайти(НРег(КаталогПриемника), НРег(КаталогИсточника)) <> 0 Тогда
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Выбранный рабочий каталог
			           |""%1""
			           |входит в старый рабочий каталог
			           |""%2"".';
			           |en = 'Selected working directory 
			           |""%1""
			           |is part of the old working directory
			           |""%2"".'"),
			КаталогПриемника,
			КаталогИсточника);
		ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Ложь);
		Возврат;
	КонецЕсли;
	
	// Копирование файлов из старого каталога в новый.
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("КаталогИсточника", КаталогИсточника);
	ПараметрыОбработчика.Вставить("КаталогПриемника", КаталогПриемника);
	Обработчик = Новый ОписаниеОповещения("ПеренестиСодержимоеРабочегоКаталогаПослеКопированияВНовыйКаталог", ЭтотОбъект, ПараметрыОбработчика);
	
	СкопироватьСодержимоеКаталога(Обработчик, КаталогИсточника, КаталогПриемника);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеКопированияВНовыйКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ВозниклаОшибка Тогда
		// Возникла ошибка копирования, затем пользователь отменил операцию.
		
		Обработчик = Новый ОписаниеОповещения(
			"ПеренестиСодержимоеРабочегоКаталогаПослеОтменыИОчисткиПриемника",
			ЭтотОбъект,
			ПараметрыВыполнения);
		
		УдалитьСодержимоеКаталога(Обработчик, Результат.СкопированныеФайлыИПапки); // Очистка папки приемника.
	Иначе
		// Копирование прошло успешно. Очистка старого каталога.
		Обработчик = Новый ОписаниеОповещения(
			"ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОчисткиИсточника",
			ЭтотОбъект,
			ПараметрыВыполнения);
		
		УдалитьСодержимоеКаталога(Обработчик, Результат.ОригинальныеФайлыИПапки);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеОтменыИОчисткиПриемника(КаталогПриемникаОчищен, ПараметрыВыполнения) Экспорт
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОчисткиИсточника(КаталогИсточникаОчищен, ПараметрыВыполнения) Экспорт
	
	Если КаталогИсточникаОчищен Тогда
		// Старый каталог очищен. Все шаги операции успешно завершены.
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	Иначе
		// Старый каталог не очищен. Откат всей операции.
		Обработчик = Новый ОписаниеОповещения("ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОтменыОчистки", ЭтотОбъект, ПараметрыВыполнения);
		СкопироватьСодержимоеКаталога(Обработчик, ПараметрыВыполнения.КаталогПриемника, ПараметрыВыполнения.КаталогИсточника);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОтменыОчистки(Результат, ПараметрыВыполнения) Экспорт
	
	// Откат операции.
	Если Результат.ВозниклаОшибка Тогда
		// Надо предупредить, что даже во время отката операции произошла ошибка.
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Не удалось скопировать обратно содержимое каталога
			           |""%1""
			           |в каталог
			           |""%2"".'; en = 'Failed to copy back the contents of directory ""%1"" to directory ""%2"".'"),
			ПараметрыВыполнения.КаталогПриемника,
			ПараметрыВыполнения.КаталогИсточника);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, Ложь);
	Иначе
		// Откат операции прошел успешно.
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Удаление массива путей переданных папок и файлов.

// Удаляет все файлы и папки из переданного массива.
//   Обход с конца.
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   СкопированныеФайлыИПапки - Массив - (Строка) Массив путей файлов и папок.
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//
Процедура УдалитьСодержимоеКаталога(ОбработчикРезультата, СкопированныеФайлыИПапки)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("СкопированныеФайлыИПапки", СкопированныеФайлыИПапки);
	ПараметрыВыполнения.Вставить("ВГраница", СкопированныеФайлыИПапки.Количество() - 1);
	ПараметрыВыполнения.Вставить("Индекс", 0);
	
	УдалитьСодержимоеКаталогаЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьСодержимоеКаталогаЗапуск(ПараметрыВыполнения)
	
	Для Индекс = ПараметрыВыполнения.Индекс По ПараметрыВыполнения.ВГраница Цикл
		Путь = ПараметрыВыполнения.СкопированныеФайлыИПапки[ПараметрыВыполнения.ВГраница - Индекс];
		Файл = Новый Файл(Путь);
		Если Не Файл.Существует() Тогда
			Продолжить; // Например временный файл Word ~aaa.doc мог быть удален при закрытии Word
		КонецЕсли;
		
		Попытка
			Если Файл.ЭтоФайл() И Файл.ПолучитьТолькоЧтение() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			УдалитьФайлы(Путь);
			ФайлУдален = Истина;
		Исключение
			ФайлУдален = Ложь;
		КонецПопытки;
		
		Если Не ФайлУдален Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Не удалось удалить файл
				           |""%1"".
				           |Возможно он занят другим приложением.
				           |
				           |Повторить операцию?';
				           |en = 'Could not delete file ""%1"".
				           |Perhaps it is in use by another application.
				           |
				           |Retry?'"),
				Путь);
			ПараметрыВыполнения.Индекс = Индекс;
			Обработчик = Новый ОписаниеОповещения("УдалитьСодержимоеКаталогаПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьСодержимоеКаталогаПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	Иначе
		УдалитьСодержимоеКаталогаЗапуск(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Очистка рабочего каталога.

Процедура ОчиститьРабочийКаталогПриУстаревании() Экспорт
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполняется очистка основного рабочего каталога...'; en = 'Clearing the main working directory ...'"));
	
	МассивЗаписей = ФайловыеФункции.ПолучитьУстаревшиеЗаписиПоПользователюФайлыВРабочемКаталоге();
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	// удаляем на клиенте и сразу же запись в РС стираем
	Для Каждого Запись Из МассивЗаписей Цикл
		
		ПолныйПуть = ИмяКаталога;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПуть);
		ПолныйПуть = ПолныйПуть + Запись.Путь;
		
		Файл = Новый Файл(ПолныйПуть);
		Если Не Файл.ЭтоФайл() Тогда
			Продолжить;
		КонецЕсли;	
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;	
		Если Не Файл.ПолучитьТолькоЧтение() Тогда
			Продолжить;
		КонецЕсли;	
		
		// Занятые Word файлы пропускаем при очистке рабочего каталога
		Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляПросмотра(ПолныйПуть) Тогда
			Продолжить; // По отношению к циклу это равносильно ключевому слову "Продолжить".
		КонецЕсли;	
		
		УдалитьФайлБезПодтверждения(ПолныйПуть);
		
		ПутьСПодкаталогом = Файл.Путь;
		// Если каталог стал пуст - удалить его
		МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*");
		Если МассивФайловВКаталоге.Количество() = 0 Тогда
			Если ПутьСПодкаталогом <> ИмяКаталога Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
		КонецЕсли;
		
		// Удаление из регистра сведений
		РаботаСФайламиВызовСервера.УдалитьИзРегистра(Запись.Версия);
		
	КонецЦикла;	
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Завершена очистка основного рабочего каталога.'; en = 'Finished cleaning the main working directory.'"));
	
КонецПроцедуры	

// Освободить место для помещения файла - если место есть, ничего не делает
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  РеквизитыВерсии  - структура с реквизитами версии
//
Процедура ОсвободитьМестоВРабочемКаталоге(ОбработчикРезультата, РеквизитыВерсии)

	#Если ВебКлиент Тогда
		// В веб-клиенте нельзя определить количество свободного места на диске
		ВернутьРезультатПослеПоказаПредупреждения(
			ОбработчикРезультата,
			НСтр("ru = 'Очистка рабочего каталога не поддерживается в веб-клиенте.'; en = 'Cleaning the working directory is not supported in the Web client.'"),
			Неопределено);
		Возврат;
	#КонецЕсли
	
	МаксРазмер = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
		).МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	// Если размер РабочийКаталог установлен равным 0,
	// то считается, что никакого ограничения нет и умолчание в 10 Мб не используется.
	Если МаксРазмер = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
	
	РазмерФайловВРабочемКаталоге = 0;
	КоличествоСуммарное = 0;
	ВсеПутиФайлов = Новый Массив;
	
	// Вычисление полного размера файлов в рабочем каталоге.
	ФайловыеФункцииКлиент.ОбходФайловРазмер(ИмяКаталога, МассивФайлов, 
		РазмерФайловВРабочемКаталоге, КоличествоСуммарное,
		ВсеПутиФайлов);
	
	Размер = РеквизитыВерсии.Размер;
	Если РазмерФайловВРабочемКаталоге + Размер > МаксРазмер Тогда
		ОчиститьРабочийКаталог(ОбработчикРезультата, РазмерФайловВРабочемКаталоге, 
			Размер, Ложь, // ОчищатьВсе = Ложь.
			,
			ВсеПутиФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Очистка рабочего каталога - для освобождения места - в первую очередь удаляет файлы 
// наиболее давно помещенные в рабочий каталог
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  РазмерФайловВРабочемКаталоге  - Число - размер файлов в рабочем каталоге
//  РазмерДобавляемогоФайла - Число - Размер добавляемого файла
//  ОчищатьВсе - Булево - Удалять все файлы в каталоге (а не только до освобождения нужного объема места на диске)
//
Процедура ОчиститьРабочийКаталог(ОбработчикРезультата, РазмерФайловВРабочемКаталоге, РазмерДобавляемогоФайла, 
	ОчищатьВсе, НеВыдаватьСообщений = Ложь, ВсеПутиФайлов) Экспорт
	
	#Если ВебКлиент Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, НСтр("ru = 'Очистка рабочего каталога не поддерживается в веб-клиенте.'; en = 'Cleaning the working directory is not supported in the Web client.'"), Неопределено);
		Возврат;
	#КонецЕсли
	
	СоответствиеДанныхФайлов = Новый Соответствие; // ключ - путь к файлу, значение - структура (ФайлЕстьВРегистре Версия ДатаПомещения Владелец НомерВерсии .....)
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	МассивДанныхФайлов = РаботаСФайламиВызовСервера.ЗаполнитьДанныеФайловИзРегистра(ВсеПутиФайлов, ИмяКаталога);
	Для Каждого Строка Из МассивДанныхФайлов Цикл
		
		СоответствиеДанныхФайлов[Строка.ОтносительныйПуть] = Строка;
		
	КонецЦикла;	
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("РазмерФайловВРабочемКаталоге", РазмерФайловВРабочемКаталоге);
	ПараметрыОбработчика.Вставить("РазмерДобавляемогоФайла", РазмерДобавляемогоФайла);
	ПараметрыОбработчика.Вставить("ОчищатьВсе", ОчищатьВсе);
	ПараметрыОбработчика.Вставить("НеВыдаватьСообщений", НеВыдаватьСообщений);
	ПараметрыОбработчика.Вставить("СоответствиеДанныхФайлов", СоответствиеДанныхФайлов);
	
	ОчиститьРабочийКаталогЗапуск(ПараметрыОбработчика);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогЗапуск(ПараметрыВыполнения)
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ТаблицаФайлов = Новый Массив;
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*");
	ОбходФайловТаблица(ИмяКаталога, МассивФайлов, ТаблицаФайлов, ПараметрыВыполнения.СоответствиеДанныхФайлов);
	
	// Вызов сервера - для сортировки
	//  сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	РаботаСФайламиВызовСервера.СортироватьМассивСтруктур(ТаблицаФайлов);
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	МаксРазмер = ПерсональныеНастройки.МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	СреднийРазмерФайла = 1000;
	Если ТаблицаФайлов.Количество() <> 0 Тогда
		СреднийРазмерФайла = ПараметрыВыполнения.РазмерФайловВРабочемКаталоге / ТаблицаФайлов.Количество();
	КонецЕсли;
	
	СколькоНадоОсвободитьМеста = МаксРазмер / 10;
	Если СреднийРазмерФайла * 3 / 2 > СколькоНадоОсвободитьМеста Тогда
		СколькоНадоОсвободитьМеста = СреднийРазмерФайла * 3 / 2;
	КонецЕсли;
	
	СколькоОсталось = ПараметрыВыполнения.РазмерФайловВРабочемКаталоге + ПараметрыВыполнения.РазмерДобавляемогоФайла;
	
	ПараметрыВыполнения.Вставить("ИмяКаталога", ИмяКаталога);
	ПараметрыВыполнения.Вставить("МаксРазмер", МаксРазмер);
	ПараметрыВыполнения.Вставить("СколькоОсталось", СколькоОсталось);
	ПараметрыВыполнения.Вставить("СколькоНадоОсвободитьМеста", СколькоНадоОсвободитьМеста);
	
	ПараметрыВыполнения.Вставить("ТаблицаФайлов", ТаблицаФайлов);
	ПараметрыВыполнения.Вставить("НомерЭлемента", 1);
	ПараметрыВыполнения.Вставить("КоличествоЭлементов", ТаблицаФайлов.Количество());
	ПараметрыВыполнения.Вставить("Элемент", Неопределено);
	ПараметрыВыполнения.Вставить("ДаДляВсех", Ложь);
	ПараметрыВыполнения.Вставить("НетДляВсех", Истина);
	Если ПараметрыВыполнения.ОчищатьВсе = Истина И ПараметрыВыполнения.НеВыдаватьСообщений = Ложь Тогда
		ПараметрыВыполнения.НетДляВсех = Ложь; // будут выданы сообщения
	КонецЕсли;	
	
	ПараметрыВыполнения.Вставить("НомерШага", 0);
	ПараметрыВыполнения.Вставить("ПрерватьЦикл", Ложь);
	
	ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, ЭтотОбъект, "ОчиститьРабочийКаталогОбработчикДиалогаВЦикле");
	
	ОчиститьРабочийКаталогЗапускЦикла(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогЗапускЦикла(ПараметрыВыполнения)
	
	Пока ПараметрыВыполнения.НомерЭлемента <= ПараметрыВыполнения.КоличествоЭлементов Цикл
		ПараметрыВыполнения.Элемент = ПараметрыВыполнения.ТаблицаФайлов[ПараметрыВыполнения.НомерЭлемента - 1];
		ПараметрыВыполнения.НомерЭлемента = ПараметрыВыполнения.НомерЭлемента + 1;
		
		ПараметрыВыполнения.НомерШага = 1;
		ОчиститьРабочийКаталогОбработчикЦикла(ПараметрыВыполнения);
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт Тогда
			Возврат; // Пауза цикла. Стек очищается.
		КонецЕсли;
		Если ПараметрыВыполнения.ПрерватьЦикл Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Действия после цикла.
	Если ПараметрыВыполнения.ОчищатьВсе Тогда
		РаботаСФайламиВызовСервера.ОчиститьВсеСвоиКромеЗанятых();
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогОбработчикЦикла(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.НомерШага = 1 Тогда
		Если Не ПараметрыВыполнения.ДаДляВсех
			И ПараметрыВыполнения.Элемент.Версия.Пустая() Тогда
			
			Если ПараметрыВыполнения.НетДляВсех Тогда
				Возврат; // По отношению к циклу это равносильно ключевому слову "Продолжить".
			КонецЕсли;
			
			Если ПараметрыВыполнения.ОчищатьВсе = Ложь Тогда
				ТекстВопроса = СтрШаблон(
					НСтр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.
					           |
					           |В хранилище файлов не найден файл
					           |""%1"".
					           |
					           |Удалить его из рабочего каталога?';
					           |en = 'Cleaning the working directory when a file is added.
					           |
					           |File ""%1"" not found in file storage.
					           |
					           |Remove it from the working directory?'"),
					ПараметрыВыполнения.ИмяКаталога + ПараметрыВыполнения.Элемент.Путь);
			Иначе
				ТекстВопроса = СтрШаблон(
					НСтр("ru = 'В хранилище файлов не найден файл
					           |""%1"".
					           |
					           |Удалить его из рабочего каталога?';
					           |en = 'File ""%1"" not found in file storage. 
					           |
					           |Remove it from the working directory?'"),
					ПараметрыВыполнения.ИмяКаталога + ПараметрыВыполнения.Элемент.Путь);
			КонецЕсли;
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Да",         НСтр("ru = 'Да'; en = 'Yes'"));
			Кнопки.Добавить("ДаДляВсех",  НСтр("ru = 'Да для всех'; en = 'Yes to all'"));
			Кнопки.Добавить("Нет",        НСтр("ru = 'Нет'; en = 'No'"));
			Кнопки.Добавить("НетДляВсех", НСтр("ru = 'Нет для всех'; en = 'No to all'"));
			
			ПоказатьВопрос(ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения), ТекстВопроса, Кнопки);
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.НомерШага = 2;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерШага = 2 Тогда
		ПолныйПуть = ПараметрыВыполнения.ИмяКаталога + ПараметрыВыполнения.Элемент.Путь;
		
		// Занятые Word файлы пропускаем при очистке рабочего каталога
		Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляПросмотра(ПолныйПуть) Тогда
			Возврат; // По отношению к циклу это равносильно ключевому слову "Продолжить".
		КонецЕсли;	
		
		ФайлНаДиске = Новый Файл(ПолныйПуть);
		ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		Если ПараметрыВыполнения.ОчищатьВсе = Ложь Тогда
			ШапкаВопроса = НСтр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'; en = 'Cleaning the working directory when a file is added.'");
		Иначе
			ШапкаВопроса = НСтр("ru = 'Выполняется очистка рабочего каталога.'; en = 'Cleaning the working directory'");
		КонецЕсли;
		
		УдалитьФайл(ПараметрыВыполнения, ПолныйПуть, Неопределено, ШапкаВопроса);
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт Тогда
			Возврат; // Пауза цикла. Стек очищается.
		КонецЕсли;
		
		ПараметрыВыполнения.НомерШага = 3;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерШага = 3 Тогда
		
		ПутьСПодкаталогом = ПараметрыВыполнения.ИмяКаталога;
		Позиция = СтрНайти(ПараметрыВыполнения.Элемент.Путь, ПолучитьРазделительПути());
		Если Позиция <> 0 Тогда
			ПутьСПодкаталогом = ПараметрыВыполнения.ИмяКаталога + Лев(ПараметрыВыполнения.Элемент.Путь, Позиция);
		КонецЕсли;
		
		// Если каталог стал пуст - удалить его
		МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*");
		Если МассивФайловВКаталоге.Количество() = 0 Тогда
			Если ПутьСПодкаталогом <> ПараметрыВыполнения.ИмяКаталога Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
		КонецЕсли;
		
		// Удаление из регистра сведений
		РаботаСФайламиВызовСервера.УдалитьИзРегистра(ПараметрыВыполнения.Элемент.Версия);
		
		ПараметрыВыполнения.СколькоОсталось = ПараметрыВыполнения.СколькоОсталось - ПараметрыВыполнения.Элемент.Размер;
		Если ПараметрыВыполнения.СколькоОсталось < ПараметрыВыполнения.МаксРазмер - ПараметрыВыполнения.СколькоНадоОсвободитьМеста Тогда
			Если Не ПараметрыВыполнения.ОчищатьВсе Тогда
				// Освободили достаточно - выход из цикла.
				ПараметрыВыполнения.ПрерватьЦикл = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогОбработчикДиалогаВЦикле(Результат, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.НомерШага = 1 Тогда
		Если Результат = "Нет" Тогда
			ПродолжитьВыполнение = Ложь;
		ИначеЕсли Результат = "НетДляВсех" Тогда
			ПродолжитьВыполнение = Ложь;
			ПараметрыВыполнения.НетДляВсех = Истина;
		ИначеЕсли Результат = "Да" Тогда
			ПродолжитьВыполнение = Истина;
		ИначеЕсли Результат = "ДаДляВсех" Тогда
			ПродолжитьВыполнение = Истина;
			ПараметрыВыполнения.ДаДляВсех = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыВыполнения.НомерШага = 2 Тогда
		ПродолжитьВыполнение = Истина;
	КонецЕсли;
	
	// Продолжение удаления файла
	Если ПродолжитьВыполнение Тогда
		ПараметрыВыполнения.НомерШага = ПараметрыВыполнения.НомерШага + 1;
		ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Ложь;
		ОчиститьРабочийКаталогОбработчикЦикла(ПараметрыВыполнения);
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт Тогда
			Возврат; // Пауза цикла. Стек очищается.
		КонецЕсли;
	КонецЕсли;
	
	// Продолжение цикла.
	ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Ложь;
	ОчиститьРабочийКаталогЗапускЦикла(ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Удаление файла. Перед удалением снимается атрибут "Только для чтения".

// Удаление файла со снятием атрибута readonly без диалогов.
//
// Параметры
//  ПолноеИмяФайла - Строка -  Полное имя файла
//
Процедура УдалитьФайлБезПодтверждения(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Удаление файла со снятием атрибута readonly.
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Структура, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПолноеИмяФайла - Строка -  Полное имя файла
//  ЗадаватьВопрос - Булево- Задавать вопрос об удалении
//  ШапкаВопроса - Строка - Шапка вопроса - добавляет текст к вопросу об удалении
//
Процедура УдалитьФайл(ОбработчикРезультата, ПолноеИмяФайла, ЗадаватьВопрос = Неопределено, ШапкаВопроса = Неопределено) Экспорт
	
	Если ЗадаватьВопрос = Неопределено Тогда
		ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		ЗадаватьВопрос = ПерсональныеНастройки.ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	Если ЗадаватьВопрос = Истина Тогда
		ТекстВопроса =
			НСтр("ru = 'Удалить файл ""%1""
			           |из рабочего каталога?'; en = 'Delete file ""%1"" from the working directory?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ПолноеИмяФайла);
		Если ШапкаВопроса <> Неопределено Тогда
			ТекстВопроса = ШапкаВопроса + Символы.ПС + Символы.ПС + ТекстВопроса;
		КонецЕсли;
		ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("УдалитьФайлПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УдалитьФайлПослеОтветаНаВопрос(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьФайлПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> -1 Тогда
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолноеИмяФайла);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Рекурсивный обход файлов в рабочем каталоге и сбор информации о них
// Параметры
//  Путь - Строка - путь рабочего каталога
//  МассивФайлов - Массив - массив объектов "Файл"
//  ТаблицаФайлов - Массив - массив структур файлов
//  СоответствиеДанныхФайлов - Соответствие - по пути - данные файла
Процедура ОбходФайловТаблица(Путь, МассивФайлов, ТаблицаФайлов, СоответствиеДанныхФайлов)
	
#Если Не ВебКлиент Тогда
	Перем Версия;
	Перем ДатаПомещения;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			НовыйПуть = НовыйПуть + ПолучитьРазделительПути();
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловТаблица(НовыйПуть, МассивФайловВКаталоге, ТаблицаФайлов, СоответствиеДанныхФайлов);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		// временные файлы Word не удаляем из рабочего каталога
		Если СтрНачинаетсяС(ВыбранныйФайл.Имя, "~") И ВыбранныйФайл.ПолучитьНевидимость() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтносительныйПуть = Сред(ВыбранныйФайл.ПолноеИмя, СтрДлина(ИмяКаталога) + 1);
		
		НайденныеСвойства = СоответствиеДанныхФайлов.Получить(ОтносительныйПуть);
		Если НайденныеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденныеСвойства.ФайлЕстьВРегистре Тогда
			
			// Если не занят текущим пользователем, можно удалить
			Если Не НайденныеСвойства.РедактируетТекущийПользователь Тогда
				Запись = Новый Структура;
				Запись.Вставить("Путь", ОтносительныйПуть);
				Запись.Вставить("Размер", ВыбранныйФайл.Размер());
				Запись.Вставить("Версия", НайденныеСвойства.Версия);
				Запись.Вставить("ДатаПомещенияВРабочийКаталог", НайденныеСвойства.ДатаПомещения);
				ТаблицаФайлов.Добавить(Запись);
			КонецЕсли;
		Иначе
			Запись = Новый Структура;
			Запись.Вставить("Путь", ОтносительныйПуть);
			Запись.Вставить("Размер", ВыбранныйФайл.Размер());
			Запись.Вставить("Версия", НайденныеСвойства.Версия);
			Запись.Вставить("ДатаПомещенияВРабочийКаталог", НайденныеСвойства.ДатаПомещения);
			ТаблицаФайлов.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Показывает информацию о том, что файл не был изменен.

// Покажет напоминание - если стоит настройка
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//
Процедура ПоказатьИнформациюФайлНеБылИзменен(ОбработчикРезультата, КомментарийКВерсии)
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
	Если ПерсональныеНастройки.ПоказыватьИнформациюЧтоФайлНеБылИзменен = Истина
		ИЛИ ЗначениеЗаполнено(КомментарийКВерсии) Тогда
		
		ОповеститьОбИзменении(ОбработчикРезультата.ДополнительныеПараметры.ОбъектСсылка);
		
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		
	Иначе
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загружает отредактированный файл в программу, снимает блокировку и рассылает оповещение.

// Сохраняет отредактированный файл в ИБ и снимает с него блокировку.
//
// Параметры:
//   Параметры - Структура - см. ПараметрыОбновленияФайла.
//
Процедура ЗакончитьРедактированиеСОповещением(Параметры) Экспорт
	
	Если Параметры.ОбъектСсылка = Неопределено Тогда
		ВернутьРезультат(Параметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Параметры.ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", Параметры.ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	
	ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, Параметры.ОбъектСсылка, Параметры.ИдентификаторФормы);
	ПараметрыОбработчика.ХранитьВерсии = Параметры.ХранитьВерсии;
	ПараметрыОбработчика.РедактируетТекущийПользователь = Параметры.РедактируетТекущийПользователь;
	ПараметрыОбработчика.Редактирует = Параметры.Редактирует;
	ПараметрыОбработчика.АвторТекущейВерсии = Параметры.АвторТекущейВерсии;
	ПараметрыОбработчика.Кодировка = Параметры.Кодировка;
	ПараметрыОбработчика.СоздатьНовуюВерсию = Параметры.СоздатьНовуюВерсию;
	ЗакончитьРедактирование(ПараметрыОбработчика);

КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСОповещениемЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы",
				"ЗаконченоРедактирование", Неопределено),
			ПараметрыВыполнения.ПараметрКоманды);
		
		ОповеститьОбИзменении(ПараметрыВыполнения.ПараметрКоманды);
		
		Если ПараметрыВыполнения.Свойство("ДанныеФайла") Тогда
			Оповестить(
				"Запись_Файл", 
				Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
					"ДанныеФайлаИзменены",
					ПараметрыВыполнения.ДанныеФайла.Ссылка,
					ПараметрыВыполнения.ДанныеФайла.Владелец,
					ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы,
					Неопределено),
				ПараметрыВыполнения.ПараметрКоманды);
		Иначе
			Оповестить(
				"Запись_Файл", 
				Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
					"ДанныеФайлаИзменены", 
					ПараметрыВыполнения.ПараметрКоманды, 
					Неопределено, 
					Ложь,
					Неопределено),
				ПараметрыВыполнения.ПараметрКоманды);
				
		КонецЕсли;	
		
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ВерсияСохранена", Неопределено), 
			ПараметрыВыполнения.ПараметрКоманды);
			
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Захватывает файл, открывает диалог редактирования и рассылает оповещение.

// Блокирует файл для редактирования и открывает его
Процедура РедактироватьСОповещением(
	ОбработчикРезультата,
	ОбъектСсылка,
	УникальныйИдентификатор = Неопределено,
	РабочийКаталогВладельца = Неопределено) Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РедактироватьСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	РедактироватьФайлПоСсылке(Обработчик, ОбъектСсылка, УникальныйИдентификатор, РабочийКаталогВладельца);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьСОповещениемЗавершение(ФайлОтредактирован, ПараметрыВыполнения) Экспорт
	
	Если ФайлОтредактирован Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ОбъектСсылка);
		
		Оповестить(
			"Запись_Файл", 
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
				"ДанныеФайлаИзменены", ПараметрыВыполнения.ДанныеФайла.Ссылка, 
				ПараметрыВыполнения.ДанныеФайла.Владелец, 
				ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы,
				Неопределено),
			ПараметрыВыполнения.ОбъектСсылка);
		
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ФайлРедактировался", Неопределено), 
			ПараметрыВыполнения.ОбъектСсылка);
			
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Захватывает файл или несколько файлов и рассылает оповещение.

// Помечает файл, как занятый для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Процедура ЗанятьФайлПоСсылке(ОбработчикРезультата, ОбъектСсылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ЗанятьФайлПоСсылкеПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьФайлПоСсылкеПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	
	ТекстОшибки = "";
	ДатаЗаема = ТекущаяДата();
	ДанныеФайлаПолученыИОнЗанят = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИЗанятьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.ДанныеФайла,
		ТекстОшибки,
		ДатаЗаема,
		ПараметрыВыполнения.УникальныйИдентификатор);
	Если Не ДанныеФайлаПолученыИОнЗанят Тогда // Если занять нельзя, тогда выводится сообщение об ошибке.
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("КоличествоЗанятыхФайлов")
		И ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов);
	КонецЕсли;	
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'; en = 'Editing a file'"),
		ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
		СтрШаблон(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'; en = 'File ""%1"" is locked for editing.'"), Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Выполняет блокировку файла или нескольких файлов
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ПараметрКоманды - либо ссылка на файл, либо массив ссылок на файлы
//   УникальныйИдентификатор
//
Процедура ЗанятьСОповещением(ОбработчикРезультата, ПараметрКоманды, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", ПараметрКоманды);
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Обработчик = Новый ОписаниеОповещения("ЗанятьСОповещениемМассивФайловЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ЗанятьФайлыПоСсылкам(Обработчик, ПараметрКоманды);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ЗанятьСОповещениемОдинФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ЗанятьФайлПоСсылке(Обработчик, ПараметрКоманды, УникальныйИдентификатор)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьСОповещениемМассивФайловЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
	Для Каждого ФайлСсылка Из ПараметрыВыполнения.ПараметрКоманды Цикл
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ДанныеФайлаИзменены", Неопределено), 
			ФайлСсылка);
	КонецЦикла;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьСОповещениемОдинФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ДанныеФайлаИзменены", Неопределено), 
			ПараметрыВыполнения.ПараметрКоманды);
			
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Снимает блокировку файла и рассылает оповещение.

// Освобождает занятый ранее файл.
//
// Параметры:
//   Параметры - Структура - см. ПараметрыОсвобожденияФайла.
//
Процедура ОсвободитьФайлСОповещением(Параметры) Экспорт
	
	Если Параметры.ОбъектСсылка = Неопределено Тогда
		ВернутьРезультат(Параметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Параметры.ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", Параметры.ОбъектСсылка);
	Если ТипЗнч(Параметры.ОбъектСсылка) = Тип("Массив") Тогда
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлСОповещениемМассивФайловЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ОсвободитьФайлыПоСсылкам(Обработчик, Параметры.ОбъектСсылка);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлСОповещениемОдинФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ПараметрыОсвобождения = ПараметрыОсвобожденияФайла(Обработчик, Параметры.ОбъектСсылка);
		ПараметрыОсвобождения.ХранитьВерсии = Параметры.ХранитьВерсии;
		ПараметрыОсвобождения.РедактируетТекущийПользователь = Параметры.РедактируетТекущийПользователь;
		ПараметрыОсвобождения.Редактирует = Параметры.Редактирует;
		ПараметрыОсвобождения.УникальныйИдентификатор = Параметры.УникальныйИдентификатор;
		ОсвободитьФайл(ПараметрыОсвобождения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлСОповещениемМассивФайловЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
	Для Каждого ФайлСсылка Из ПараметрыВыполнения.ПараметрКоманды Цикл
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ДанныеФайлаИзменены", Неопределено), 
			ФайлСсылка);
	КонецЦикла;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлСОповещениемОдинФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ОповеститьОбИзменении(ПараметрыВыполнения.ПараметрКоманды);
		
		Оповестить(
			"Запись_Файл", 
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
				"ДанныеФайлаИзменены", ПараметрыВыполнения.ДанныеФайла.Ссылка, 
				ПараметрыВыполнения.ДанныеФайла.Владелец, 
				ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы,
				Неопределено),
			ПараметрыВыполнения.ПараметрКоманды);
			
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Освобождение файлов без обновления.

// Освобождает файлы без обновления.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  МассивФайлов - Массив - массив файлов
//  НеЗадаватьВопрос - Булево - не задавать вопрос о потере изменений.
//
Процедура ОсвободитьФайлыПоСсылкам(ОбработчикРезультата, Знач МассивФайлов, НеЗадаватьВопрос = Ложь) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("МассивФайлов", МассивФайлов);
	
	ПараметрыОбработчика.Вставить("НеЗадаватьВопрос", НеЗадаватьВопрос);
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлыПоСсылкамПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлыПоСсылкамПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	// Получение массива данных файлов.
	ПараметрыВыполнения.Вставить("ДанныеФайлов", Новый Массив);
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(ПараметрыВыполнения.МассивФайлов, ПараметрыВыполнения.ДанныеФайлов);
	ВГраницаМассива = ПараметрыВыполнения.ДанныеФайлов.ВГраница();
	
	// Проверка возможности освобождения файлов.
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ПараметрыВыполнения.ДанныеФайлов[ВГраницаМассива - Инд];
		
		ТекстОшибки = "";
		МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
			ДанныеФайла.Ссылка,
			ДанныеФайла.РедактируетТекущийПользователь,
			ДанныеФайла.Редактирует,
			ТекстОшибки);
		Если Не МожноОсвободитьФайл Тогда
			ПараметрыВыполнения.ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	
	Если ПараметрыВыполнения.Свойство("НеЗадаватьВопрос") И ПараметрыВыполнения.НеЗадаватьВопрос Тогда 
		ОсвободитьФайлыПоСсылкамПослеОтветаНаВопросОтменитьРедактирование(КодВозвратаДиалога.Да, ПараметрыВыполнения);
	Иначе 
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлыПоСсылкамПослеОтветаНаВопросОтменитьРедактирование", ЭтотОбъект, ПараметрыВыполнения);
		
		ПоказатьВопрос(
			Обработчик,
			НСтр("ru = 'Отмена редактирования файлов может
			           |привести к потере Ваших изменений.
			           |
			           |Продолжить?';
			           |en = 'Changes may be lost if you cancel editing files.
			           |
			           |Do you want to continue?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлыПоСсылкамПослеОтветаНаВопросОтменитьРедактирование(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	// Занятие файлов.
	Для Каждого ДанныеФайла Из ПараметрыВыполнения.ДанныеФайлов Цикл
		
		Параметры = ПараметрыОсвобожденияФайла(Неопределено, ДанныеФайла.Ссылка);
		Параметры.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
		Параметры.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
		Параметры.Редактирует = ДанныеФайла.Редактирует;
		Параметры.НеЗадаватьВопрос = Истина;
		ОсвободитьФайл(Параметры);
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Отменить редактирование файлов'; en = 'Cancel editing files'"),
		,
		СтрШаблон(
			НСтр("ru = 'Отменено редактирование файлов (%1 из %2).'; en = 'Cancelled file editing (%1 of %2).'"),
			ПараметрыВыполнения.ДанныеФайлов.Количество(),
			ПараметрыВыполнения.МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пометка файлов как занятых для редактирования.

// Помечает файлы, как занятые для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  МассивФайлов - Массив - массив файлов.
//
Процедура ЗанятьФайлыПоСсылкам(ОбработчикРезультата, Знач МассивФайлов) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("МассивФайлов", МассивФайлов);
	
	Обработчик = Новый ОписаниеОповещения("ЗанятьФайлыПоСсылкамПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьФайлыПоСсылкамПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	// Получение массива данных файлов.
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(ПараметрыВыполнения.МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки)
		 Или Не ДанныеФайла.Редактирует.Пустая() Тогда // Занять невозможно.
			
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
	КонецЦикла;
	
	// Занять файлы.
	КоличествоЗанятых = 0;
	ДатаЗаема = ТекущаяДата();
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		Если Не РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, "", ДатаЗаема) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			НаЧтение = Ложь;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		КоличествоЗанятых = КоличествоЗанятых + 1;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Занять файлы'; en = 'Lock files'"),
		,
		СтрШаблон(
			НСтр("ru = 'Файлы (%1 из %2) заняты для редактирования.'; en = 'Files (%1 of %2) locked for editing.'"),
			КоличествоЗанятых,
			ПараметрыВыполнения.МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие файла для редактирования по ссылке.

// Открывает файл для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Процедура РедактироватьФайлПоСсылке(ОбработчикРезультата,
	ОбъектСсылка,
	УникальныйИдентификатор = Неопределено,
	РабочийКаталогВладельца = Неопределено,
	ПоказыватьОповещения = Истина) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОбработчика.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	ПараметрыОбработчика.Вставить("ПоказыватьОповещения", ПоказыватьОповещения);
	
	Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПоСсылкеПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПоСсылкеПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	ПараметрыВыполнения.Вставить("РасширениеПодключено", ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено());
	
	ТекстОшибки = "";
	ДатаЗаема = ТекущаяДата();
	ДанныеПолучены = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.ДанныеФайла,
		ТекстОшибки,
		ДатаЗаема,
		ПараметрыВыполнения.УникальныйИдентификатор,
		ПараметрыВыполнения.РабочийКаталогВладельца);
	
	Если Не ДанныеПолучены Тогда
		СтандартнаяОбработка = Истина;
		РаботаСФайламиКлиентПереопределяемый.ПриОшибкеЗахватаФайла(ПараметрыВыполнения.ДанныеФайла, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			// Если занять нельзя, тогда выводится сообщение об ошибке.
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
			Возврат;
		КонецЕсли;
		
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("КоличествоЗанятыхФайлов")
		И ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов <> -1 Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов);
	КонецЕсли;	
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение, 
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
		
	КонецЕсли;	
	
	Если ПараметрыВыполнения.РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	Иначе	
		РаботаСФайламиВызовСервера.СоздатьЗаписьВФайлыВРабочемКаталоге(ПараметрыВыполнения.ОбъектСсылка);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПоказыватьОповещения Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование файла'; en = 'Editing a file'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			СтрШаблон(
				НСтр("ru = 'Файл ""%1""
				           |занят для редактирования.'; en = 'File ""%1"" is locked for editing.'"), Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
				БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Если Файл без файла, тогда открывается карточка.
	Если ПараметрыВыполнения.ДанныеФайла.Версия.Пустая() Тогда 
		ВернутьРезультатПослеПоказаЗначения(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.ДанныеФайла.Ссылка, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.РасширениеПодключено Тогда
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПоСсылкеСРасширениемПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор,
			Новый Структура("ОткрытьФайл", Истина));
	Иначе
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПоСсылкеБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
		ФайловыеФункцииСлужебныйКлиент.ВывестиНапоминаниеПриРедактировании(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПоСсылкеСРасширениемПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен = Истина Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла,
			ПараметрыВыполнения.УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыВыполнения.ОбработчикРезультата.ДополнительныеПараметры.Вставить("ДанныеФайла", 
		ПараметрыВыполнения.ДанныеФайла);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПоСсылкеБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
		ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	ПолучитьФайл(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
	
	ПараметрыВыполнения.ОбработчикРезультата.ДополнительныеПараметры.Вставить(
		"ДанныеФайла", ПараметрыВыполнения.ДанныеФайла);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие файла для редактирования.

// Открывает файл для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
Процедура РедактироватьФайл(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ТекстОшибки = "";
	МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(
		ПараметрыВыполнения.ДанныеФайла,
		ТекстОшибки);
	Если Не МожноЗанятьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	// Если Файл не занят, тогда занять файл.
	Если ПараметрыВыполнения.ДанныеФайла.Редактирует.Пустая() Тогда
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПослеЗанятияФайла", ЭтотОбъект, ПараметрыВыполнения);
		ЗанятьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
		Возврат;
	КонецЕсли;
	
	РедактироватьФайлПослеЗанятияФайла(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПослеЗанятияФайла(ДанныеФайла, ПараметрыВыполнения) Экспорт
	
	Если ДанныеФайла = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла <> -1 Тогда
		ПараметрыВыполнения.ДанныеФайла = ДанныеФайла;
	КонецЕсли;
	
	// Если Файл без файла, тогда открыть карточку.
	Если ПараметрыВыполнения.ДанныеФайла.Версия.Пустая() Тогда 
		ВернутьРезультатПослеПоказаЗначения(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.ДанныеФайла.Ссылка, Истина);
		Возврат;
	КонецЕсли;
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлСРасширениемПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор
		);
	Иначе
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
		ФайловыеФункцииСлужебныйКлиент.ВывестиНапоминаниеПриРедактировании(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлСРасширениемПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение, 
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
		
	КонецЕсли;	
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
		ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	ПолучитьФайл(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пометка файла как занятого для редактирования.

// Пометка файла как занятого для редактирования
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ДанныеФайла - структура с данными файла
//
// Возвращаемое значение:
//   * Неопределено - Если файл не занят.
//   * Структура с данными файла - Если файл занят.
//
Процедура ЗанятьФайл(ОбработчикРезультата, ДанныеФайла)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла",           ДанныеФайла);
	
	Обработчик = Новый ОписаниеОповещения("ЗанятьФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьФайлПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ТекстОшибки = "";
	МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(
		ПараметрыВыполнения.ДанныеФайла,
		ТекстОшибки);
	Если Не МожноЗанятьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ДатаЗаема = ТекущаяДата();
	ФайлЗанят = РаботаСФайламиВызовСервера.ЗанятьФайл(ПараметрыВыполнения.ДанныеФайла, ТекстОшибки, ДатаЗаема);
	Если Не ФайлЗанят Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	Иначе
		РаботаСФайламиВызовСервера.СоздатьЗаписьВФайлыВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'; en = 'Editing a file'"),
		ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
		СтрШаблон(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'; en = 'File ""%1"" is locked for editing.'"),
			Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
		БиблиотекаКартинок.Информация32);
		
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	Оповестить(
		"Запись_Файл", 
		Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы", 
			"ДанныеФайлаИзменены", ПараметрыВыполнения.ДанныеФайла.Ссылка, 
			ПараметрыВыполнения.ДанныеФайла.Владелец, 
			ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы),
		ПараметрыВыполнения.ДанныеФайла.Ссылка);
		
	ПараметрыВыполнения.ОбработчикРезультата.ДополнительныеПараметры.Вставить("ДанныеФайла", 
		ПараметрыВыполнения.ДанныеФайла);
		
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Завершение редактирования Файла и помещение его на сервер.

// Закончить редактирование - по массиву ссылок
//
// Параметры
//  ОбработчикРезультата - обработчик результата (ОписаниеОповещения)
//  МассивФайлов - Массив - массив файлов
//  ИдентификаторФормы - уникальный идентификатор формы
//  СоздатьНовуюВерсию -  Булево - Создать новую версию
//  КомментарийКВерсии - Строка - Комментарий к версии
//  ПоказыватьОповещение -  Булево - Показывать оповещение
//  ОсвобождатьФайлы -  Булево - Освобождать файлы
Процедура ЗакончитьРедактированиеПоСсылкам(
	ОбработчикРезультата,
	Знач МассивФайлов, 
	ИдентификаторФормы,
	СоздатьНовуюВерсию = Неопределено,
	КомментарийКВерсии = Неопределено,
	ПоказыватьОповещение = Истина,
	ОсвобождатьФайлы = Истина) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("МассивФайлов", МассивФайлов);
	ПараметрыОбработчика.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию", СоздатьНовуюВерсию);
	ПараметрыОбработчика.Вставить("КомментарийКВерсии", КомментарийКВерсии);
	ПараметрыОбработчика.Вставить("ПоказыватьОповещение", ПоказыватьОповещение);
	ПараметрыОбработчика.Вставить("ОсвобождатьФайлы", ОсвобождатьФайлы);
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеПоСсылкамПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеПоСсылкамПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ЗакончитьРедактированиеПоСсылкамСРасширением(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеПоСсылкамСРасширением(ПараметрыВыполнения)
	
	// Получение массива данных файлов
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(ПараметрыВыполнения.МассивФайлов, ДанныеФайлов);
	ВГраницаМассива = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если Не ВозможностьОбновитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	ПрименитьКоВсем = Истина;
	ПоказыватьОповещение = Ложь;
	ПараметрыВыполнения.Вставить("ПрименитьКоВсем", ПрименитьКоВсем);
	ПараметрыВыполнения.Вставить("ПоказыватьОповещение", ПоказыватьОповещение);
	ПараметрыВыполнения.Вставить("ДанныеФайлов", ДанныеФайлов);
	ПараметрыВыполнения.Вставить("НомерФайла", 0);
	ПараметрыВыполнения.Вставить("БылиОшибки", Ложь);
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеПоСсылкамИтерация", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеПоСсылкамИтерация(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> Истина Тогда
		ПараметрыВыполнения.БылиОшибки = Истина;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Не ПараметрыВыполнения.БылиОшибки);
		Возврат;
	КонецЕсли;
	
	Данные = ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла];
	ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеПоСсылкамИтерация", ЭтотОбъект, ПараметрыВыполнения);
	
	ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, Данные.Ссылка, ПараметрыВыполнения.ИдентификаторФормы);
	
	ПараметрыОбработчика.ХранитьВерсии = Данные.ХранитьВерсии;
	ПараметрыОбработчика.РедактируетТекущийПользователь = Данные.РедактируетТекущийПользователь;
	ПараметрыОбработчика.Редактирует = Данные.Редактирует;
	ПараметрыОбработчика.АвторТекущейВерсии = Данные.АвторТекущейВерсии;
	ПараметрыОбработчика.СоздатьНовуюВерсию = ПараметрыВыполнения.СоздатьНовуюВерсию;
	ПараметрыОбработчика.ПрименитьКоВсем = ПараметрыВыполнения.ПрименитьКоВсем;
	ПараметрыОбработчика.ПоказыватьОповещение = ПараметрыВыполнения.ПоказыватьОповещение;
	ПараметрыОбработчика.КомментарийКВерсии = ПараметрыВыполнения.КомментарийКВерсии;
	
	ЗакончитьРедактирование(ПараметрыОбработчика);
	
	Оповестить(
		"Запись_Файл", 
		Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
			"ДанныеФайлаИзменены", 
			Данные.Ссылка, 
			Данные.Владелец, 
			Неопределено,
			Неопределено),
		Данные.Ссылка);
	
КонецПроцедуры	

// Завершить редактирования Файла и поместить его на сервер.
//
// Параметры:
//   Параметры - Структура - см. ПараметрыОбновленияФайла.
//
Процедура ЗакончитьРедактирование(Параметры) Экспорт 
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеПослеУстановкиРасширения", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ЗакончитьРедактированиеСРасширением(ПараметрыВыполнения);
	Иначе
		ЗакончитьРедактированиеБезРасширения(ПараметрыВыполнения);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширением(ПараметрыВыполнения)
	
	// Тонкий клиент,
	// Толстый клиент.
	
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ПараметрыВыполнения.ОбъектСсылка);
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОбновитьФайл(
		ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь,
		ПараметрыВыполнения.ДанныеФайла.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение, 
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыВыполнения.Вставить("ПолныйПутьКФайлу", ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу);
	Если ПараметрыВыполнения.ПолныйПутьКФайлу = "" Тогда
		ПараметрыВыполнения.ПолныйПутьКФайлу = ФайловыеФункцииКлиент
			.ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла);
	КонецЕсли;
	
	// Проверка наличия файла на диске.
	ПараметрыВыполнения.Вставить("ФайлНовойВерсии", Новый Файл(ПараметрыВыполнения.ПолныйПутьКФайлу));
	Если Не ПараметрыВыполнения.ФайлНовойВерсии.Существует() Тогда
		Если ПараметрыВыполнения.ПрименитьКоВсем = Ложь Тогда
			Если Не ПустаяСтрока(ПараметрыВыполнения.ПолныйПутьКФайлу) Тогда
				СтрокаПредупреждения = СтрШаблон(
					НСтр("ru = 'Не удалось поместить файл
					           |""%1"" (%2),
					           |в хранилище файлов, т.к. он не найден в рабочем каталоге.
					           |
					           |Освободить файл?';
					           |en = 'Unable to put file ""%1"" (%2) into the file storage, because it is not found in the working directory. 
					           |
					           |Unlock the file?'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
					ПараметрыВыполнения.ПолныйПутьКФайлу);
			Иначе
				СтрокаПредупреждения = СтрШаблон(
					НСтр("ru = 'Не удалось поместить файл ""%1"",
					           |в хранилище файлов, т.к. он не найден в рабочем каталоге.
					           |
					           |Освободить файл?';
					           |en = 'Unable to put file ""%1"" into the file storage, because it was not found in the working directory. 
					           |
					           |Unlock the file?'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
				СтрокаПредупреждения = СтрокаПредупреждения + ".";
			КонецЕсли;
			
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросОсвободитьФайл", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьВопрос(Обработчик, СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросОсвободитьФайл(-1, ПараметрыВыполнения)
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Попытка
		ТолькоЧтение = ПараметрыВыполнения.ФайлНовойВерсии.ПолучитьТолькоЧтение();
		ПараметрыВыполнения.ФайлНовойВерсии.УстановитьТолькоЧтение(Не ТолькоЧтение);
		ПараметрыВыполнения.ФайлНовойВерсии.УстановитьТолькоЧтение(ТолькоЧтение);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось поместить файл ""%1"" в хранилище файлов,
			|возможно он заблокирован другой программой.'; en = 'Unable to put the file ""%1"" into the file storage, perhaps it is locked by another program.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
		ВызватьИсключение ТекстОшибки + Символы.ПС + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Запрос комментария и признака хранения версии.
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		
		ФормаВозврата = ФормаВозвратаФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии <> ПараметрыВыполнения.ДанныеФайла.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ДанныеФайла.Ссылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии <> ПараметрыВыполнения.ДанныеФайла.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		ЗакончитьРедактированиеСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросОсвободитьФайл(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> -1 Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПараметрыВыполнения.ОсвобождатьФайлы = Истина;
		Иначе
			ПараметрыВыполнения.ОсвобождатьФайлы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОсвобождатьФайлы Тогда
		ОсвободитьФайлБезВопроса(ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ИдентификаторФормы);
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	ЗакончитьРедактированиеСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения) Экспорт
	
	СтараяВерсия = ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия;
	
	Если Не ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Файл с признаком шифрован снова шифруется для тех же сертификатов.
	
	ПараметрыВыполнения.Вставить("ПослеПроверкиКоличестваСертификатов", Новый ОписаниеОповещения(
		"ЗакончитьРедактированиеСРасширениемПослеПроверкиКоличестваСертификатов", ЭтотОбъект, ПараметрыВыполнения));
	
	ПроверитьКоличествоСертификатов(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиКоличестваСертификатов(Неопределен, ПараметрыВыполнения) Экспорт
	
	ПолноеИмяФайлаШифрованное = ПараметрыВыполнения.ПолныйПутьКФайлу + ".crp";
	
	ПараметрыВыполнения.МенеджерКриптографии.Зашифровать(
		ПараметрыВыполнения.ПолныйПутьКФайлу,
		ПолноеИмяФайлаШифрованное,
		ПараметрыВыполнения.МассивСертификатов);
	
	УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолныйПутьКФайлу);
	ПереместитьФайл(ПолноеИмяФайлаШифрованное, ПараметрыВыполнения.ПолныйПутьКФайлу);
	
	ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения)
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ПараметрыВыполнения.ФайлНовойВерсии);
	СведенияОФайле.Комментарий = ПараметрыВыполнения.КомментарийКВерсии;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	ТекстОшибки = "";
	АдресВременногоХранилища = "";
	ВыбранныйПутьКФайлу = "";
	
	ИмяФайла                    = ПараметрыВыполнения.ФайлНовойВерсии.Имя;
	РазмерВМб                   = ПараметрыВыполнения.ФайлНовойВерсии.Размер() / (1024 * 1024);
	ВремяИзменения              = ПараметрыВыполнения.ФайлНовойВерсии.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = ПараметрыВыполнения.ФайлНовойВерсии.ПолучитьУниверсальноеВремяИзменения();
	Размер                      = ПараметрыВыполнения.ФайлНовойВерсии.Размер();
	
	ТекстПояснения = СтрШаблон(
		НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
		           |Пожалуйста, подождите.';
		           |en = 'Transferring file ""%1"" (%2 mb) ... 
		           |Please wait.'"),
		ИмяФайла, ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ПолныйПутьКФайлу, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	
	Попытка
		ФайлыПомещены = ПоместитьФайлы(
		ПомещаемыеФайлы,
		ПомещенныеФайлы,
		,
		Ложь,
		ПараметрыВыполнения.ИдентификаторФормы);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Не удалось поместить файл в хранилище файлов по причине:
			|""%1"".
			|
			|Повторить операцию?';
			|en = 'Unable to put file into the file storage because: ""%1"". 
			|
			|Retry?'"),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Оповещение  = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрованПовтор", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
		Возврат;
	КонецПопытки;
	
	Состояние();
	
	Если Не ФайлыПомещены Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		СведенияОФайле.АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	
	ТекстНеИзвлеченНаКлиенте = Ложь;
	#Если ВебКлиент Тогда
		ТекстНеИзвлеченНаКлиенте = Истина;
	#КонецЕсли
	
	ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	ИмяБезРасширения = ПараметрыВыполнения.ФайлНовойВерсии.ИмяБезРасширения;
	Расширение       = ПараметрыВыполнения.ФайлНовойВерсии.Расширение;
	
	Если Не ОбщиеНастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
		Попытка
			СведенияОФайле.АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				ПараметрыВыполнения.ПолныйПутьКФайлу,
				ПараметрыВыполнения.ИдентификаторФормы,
				,
				ПараметрыВыполнения.Кодировка);
		Исключение
			ЗакончитьРедактированиеСРасширениемОбработкаИсключения(ИнформацияОбОшибке(), ПараметрыВыполнения);
			Возврат;
		КонецПопытки;
	Иначе
		СведенияОФайле.АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
	
	НеМенятьЗаписьВРабочемКаталоге = Ложь;
	Если ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу <> "" Тогда
		НеМенятьЗаписьВРабочемКаталоге = Истина;
	КонецЕсли;
	
	ПараметрыАвтозапускаБизнесПроцессов = Новый Структура;
	
	Попытка
		
		ВерсияОбновлена = РаботаСФайламиВызовСервера.СохранитьИзмененияИОсвободитьФайл(
			ПараметрыВыполнения.ДанныеФайла, СведенияОФайле, 
			НеМенятьЗаписьВРабочемКаталоге, ПараметрыВыполнения.ПолныйПутьКФайлу, 
			ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя(), 
			ПараметрыВыполнения.ИдентификаторФормы, 
			ПараметрыАвтозапускаБизнесПроцессов);
			
			Если ПараметрыВыполнения.ДанныеФайла.Свойство("КоличествоЗанятыхФайлов")
				И ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов <> -1 Тогда
					СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
						"КоличествоЗанятыхФайлов", 
						ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов);
			КонецЕсли;	
			
	Исключение
		ЗакончитьРедактированиеСРасширениемОбработкаИсключения(ИнформацияОбОшибке(), ПараметрыВыполнения);
		Возврат;
	КонецПопытки;
	
	ПараметрыВыполнения.Вставить("ВерсияОбновлена", ВерсияОбновлена);
	НоваяВерсия = ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия;
	
	Если ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу = "" Тогда
		
		УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования =
			ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
				).УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования;
		
		Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Неопределено Тогда
			УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
		КонецЕсли;
		
		Если ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
			УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
		КонецЕсли;
		
		Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования Тогда
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеУдаленияФайлаИзРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
			УдалитьФайлИзРабочегоКаталога(Обработчик, НоваяВерсия);
			Возврат;
		Иначе
			Файл = Новый Файл(ПараметрыВыполнения.ПолныйПутьКФайлу);
			Файл.УстановитьТолькоЧтение(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗакончитьРедактированиеСРасширениемПослеУдаленияФайлаИзРабочегоКаталога(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
//
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрованПовтор(Результат, Параметр) Экспорт
	Если Результат = КодВозвратаДиалога.Повторить Тогда
		ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(Параметр);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеУдаленияФайлаИзРабочегоКаталога(Результат, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		Если ПараметрыВыполнения.ВерсияОбновлена Тогда
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |обновлен и освобожден.'; en = 'File ""%1"" was updated and unlocked.'");
		Иначе
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |не изменился и освобожден.'; en = 'File ""%1"" had not been changed and was unlocked.'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование закончено'; en = 'Editing completed'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			СтрШаблон(
				ШаблонПояснения, Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
		
		Если Не ПараметрыВыполнения.ВерсияОбновлена Тогда
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеПоказаОповещения", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьИнформациюФайлНеБылИзменен(Обработчик, ПараметрыВыполнения.КомментарийКВерсии);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакончитьРедактированиеСРасширениемПослеПоказаОповещения(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПоказаОповещения(Результат, ПараметрыВыполнения) Экспорт
	
	// Удаление зашифрованного файла из кэша.
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолныйПутьКФайлу);
	КонецЕсли;
	
	ПараметрыВыполнения.ОбработчикРезультата.ДополнительныеПараметры.Вставить("ДанныеФайла", 
		ПараметрыВыполнения.ДанныеФайла);
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемОбработкаИсключения(ИнформацияОбОшибке, ПараметрыВыполнения)
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Не удалось поместить файл ""%1""
		           |в хранилище файлов по причине
		           |""%2"".
		           |
		           |Повторить операцию?';
		           |en = 'Unable to put file ""%1"" into the file storage because ""%2"". 
		           |
		           |Retry?'"),
		Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширения(ПараметрыВыполнения)
	
	
	ПараметрыВыполнения.ДанныеФайла  = РаботаСФайламиВызовСервера.ДанныеФайла(ПараметрыВыполнения.ОбъектСсылка);
	
	ПараметрыВыполнения.ХранитьВерсии                  = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
	ПараметрыВыполнения.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыВыполнения.Редактирует                    = ПараметрыВыполнения.ДанныеФайла.Редактирует;
	ПараметрыВыполнения.АвторТекущейВерсии             = ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии;
	ПараметрыВыполнения.Кодировка                      = ПараметрыВыполнения.ДанныеФайла.КодировкаТекущейВерсии;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОбновитьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.РедактируетТекущийПользователь,
		ПараметрыВыполнения.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение, 
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыВыполнения.Вставить("ПолныйПутьКФайлу", "");
	
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		
		ФормаВозврата = ФормаВозвратаФайла(ПараметрыВыполнения.ОбъектСсылка);
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ОбъектСсылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения)
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения) Экспорт
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьНапоминаниеПередПоместитьФайл(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(Обработчик, ПараметрыВыполнения.ИдентификаторФормы, ПараметрыВыполнения.ПолныйПутьКФайлу, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеЗагрузкиФайла(ПомещенныеФайлы, ПараметрыВыполнения) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	
	ОписаниеПереданногоФайла = ПомещенныеФайлы[0];
	СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеПереданногоФайла.Хранение;
	СведенияОФайле.Комментарий = ПараметрыВыполнения.КомментарийКВерсии;
	
	ИмяФайла = ОписаниеПереданногоФайла.Имя;

	ТолькоИмя = "";
	ТолькоРасширение = "";
	
	СтрокиПути = РазложитьСтрокуПоСлэшам(ИмяФайла);
	Если СтрокиПути.Количество() <> 0 Тогда
		
		СтрокаИмяРасширение = СтрокиПути[СтрокиПути.Количество() - 1];
		
		ТолькоИмя 		 = ОбщегоНазначенияДокументооборотКлиентСервер.ПолучитьТолькоИмяИмениФайла(СтрокаИмяРасширение);
		ТолькоРасширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(СтрокаИмяРасширение);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТолькоИмя) Или ЗначениеЗаполнено(ТолькоРасширение) Тогда
		СведенияОФайле.РасширениеБезТочки = ТолькоРасширение;
		СведенияОФайле.ИмяБезРасширения = ТолькоИмя;
	КонецЕсли;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	Попытка
		ПараметрыАвтозапускаБизнесПроцессов = Новый Структура;
		
		Результат = РаботаСФайламиВызовСервера.СохранитьИзмененияИОсвободитьФайлПоСсылке(ПараметрыВыполнения.ОбъектСсылка,
			СведенияОФайле, ПараметрыВыполнения.ПолныйПутьКФайлу, ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя(), 
			ПараметрыВыполнения.ИдентификаторФормы, ПараметрыАвтозапускаБизнесПроцессов);
		ПараметрыВыполнения.ДанныеФайла = Результат.ДанныеФайла;
		ВерсияОбновлена = Результат.Успешно;
		
		Если ПараметрыВыполнения.ДанныеФайла.Свойство("КоличествоЗанятыхФайлов")
			И ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов <> -1 Тогда
				СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
					"КоличествоЗанятыхФайлов", 
					ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов);
		КонецЕсли;	
		
	Исключение
		ЗакончитьРедактированиеОбработчикИсключения(ИнформацияОбОшибке(), ПараметрыВыполнения);
		Возврат;
	КонецПопытки;
	
	ПараметрыВыполнения.Вставить("ВерсияОбновлена", ВерсияОбновлена);
	НоваяВерсия = ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия;
	
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		Если Результат.Успешно Тогда
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |обновлен и освобожден.'; en = 'File ""%1"" was updated and unlocked.'");
		Иначе
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |не изменился и освобожден.'; en = 'File ""%1"" had not been changed and was unlocked.'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование закончено'; en = 'Editing completed'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			СтрШаблон(
				ШаблонПояснения, Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
		
		Если Не Результат.Успешно Тогда
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеПоказаОповещения", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьИнформациюФайлНеБылИзменен(Обработчик, ПараметрыВыполнения.КомментарийКВерсии);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакончитьРедактированиеБезРасширенияПослеПоказаОповещения(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеПоказаОповещения(Результат, ПараметрыВыполнения) Экспорт
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеОбработчикИсключения(ИнформацияОбОшибке, ПараметрыВыполнения) Экспорт
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не удалось поместить файл ""%1""
		           |в хранилище файлов по причине
		           |""%2"".
		           |
		           |Повторить операцию?';
		           |en = 'Unable to put file ""%1"" into the file storage because ""%2"". 
		           |
		           |Retry?'"),
		Строка(ПараметрыВыполнения.ОбъектСсылка),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
	
	ПоказатьВопрос(Обработчик, ТекстОшибки, РежимДиалогаВопрос.ПовторитьОтмена);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	Иначе
		ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	КонецЕсли;
КонецПроцедуры

// Показывает напоминание перед помещением файла, если оно настроено.

// Покажет напоминание - если стоит настройка
//
// Параметры
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//
Процедура ПоказатьНапоминаниеПередПоместитьФайл(ОбработчикРезультата)
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	Если ПерсональныеНастройки.ПоказыватьПодсказкиПриРедактированииФайлов = Истина Тогда
		Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			// Кешируем форму на клиенте
			Форма = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуНапоминанияПередПоместитьФайл();
			УстановитьОповещениеФормы(Форма, ОбработчикРезультата);
			Форма.Открыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВернутьРезультат(ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загружает файл в программу и рассылает оповещение.

// Сохраняет файл в информационной базе, но не освобождает его.
Процедура СохранитьИзмененияФайлаСОповещением(ОбработчикРезультата, ПараметрКоманды, ИдентификаторФормы) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", ПараметрКоманды);
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСОповещениемМассивФайловЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		СохранитьИзмененияФайловПоСсылкам(Обработчик, ПараметрКоманды, ИдентификаторФормы);
	Иначе
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСОповещениемОдинФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, ПараметрКоманды, ИдентификаторФормы);
		СохранитьИзмененияФайла(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСОповещениемМассивФайловЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Для Каждого ФайлСсылка Из ПараметрыВыполнения.ПараметрКоманды Цикл
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ДанныеФайлаИзменены", Неопределено), 
			ФайлСсылка);
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ВерсияСохранена", Неопределено), 
			ФайлСсылка);
	КонецЦикла;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСОповещениемОдинФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ДанныеФайлаИзменены", Неопределено), 
			ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ВерсияСохранена", Неопределено), 
				ПараметрыВыполнения.ПараметрКоманды);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Показывает диалог выбора файла на диске, загружает выбранный файл в программу как версию и рассылает оповещение.

// Выбирает на  диске файл и создает из него новую версию.
Процедура ОбновитьИзФайлаНаДискеСОповещением(ОбработчикРезультата, ДанныеФайла, ИдентификаторФормы) Экспорт
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(ОбработчикРезультата);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ОбновитьИзФайлаНаДиске(Обработчик, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеСОповещениемЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ДанныеФайлаИзменены", Неопределено), 
			ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, ИдентификаторРодительскойФормы", "ВерсияСохранена", Неопределено), 
			ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Публикация файлов.

// Публикует файлы.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  МассивФайлов       - Массив - массив файлов
//  ИдентификаторФормы - УникальныйИдентификатор управляемой формы.
//
Процедура СохранитьИзмененияФайловПоСсылкам(ОбработчикРезультата, Знач МассивФайлов, ИдентификаторФормы) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("МассивФайлов", МассивФайлов);
	ПараметрыОбработчика.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайловПоСсылкамПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайловПоСсылкамПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	// Получение массива данных файлов.
	ПараметрыВыполнения.Вставить("ДанныеФайлов", Новый Массив);
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(ПараметрыВыполнения.МассивФайлов, ПараметрыВыполнения.ДанныеФайлов);
	ВГраницаМассива = ПараметрыВыполнения.ДанныеФайлов.ВГраница();
	
	// Проверка возможности освобождения файлов.
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ПараметрыВыполнения.ДанныеФайлов[ВГраницаМассива - Инд];
		
		ТекстОшибки = "";
		МожноОсвободитьФайл = ВозможностьОбновитьФайл(
			ДанныеФайла.Ссылка,
			ДанныеФайла.РедактируетТекущийПользователь,
			ДанныеФайла.Редактирует,
			ТекстОшибки);
		Если Не ТекстОшибки Тогда
			ПараметрыВыполнения.ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	
	ФормаВозврата = ФормаВозвратаФайла(Неопределено);
	
	СоздатьНовуюВерсию = Истина;
	СоздатьНовуюВерсиюДоступность = Истина;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлСсылка",                    Неопределено);
	СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
	СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
	СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
	
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайловПоСсылкамПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
	УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
	
	ФормаВозврата.Открыть();
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайловПоСсылкамПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	Для Каждого Данные Из ПараметрыВыполнения.ДанныеФайлов Цикл
		
		ПараметрыОбработчика = ПараметрыОбновленияФайла(Неопределено, Данные.Ссылка, ПараметрыВыполнения.ИдентификаторФормы); 
		ПараметрыОбработчика.ХранитьВерсии = Данные.ХранитьВерсии;
		ПараметрыОбработчика.РедактируетТекущийПользователь = Данные.РедактируетТекущийПользователь;
		ПараметрыОбработчика.Редактирует = Данные.Редактирует;
		ПараметрыОбработчика.АвторТекущейВерсии = Данные.АвторТекущейВерсии;
		ПараметрыОбработчика.СоздатьНовуюВерсию = СоздатьНовуюВерсию;
		ПараметрыОбработчика.КомментарийКВерсии = КомментарийКВерсии;
		ПараметрыОбработчика.ПоказыватьОповещение = Ложь;
		СохранитьИзмененияФайла(ПараметрыОбработчика);
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранить изменения файлов'; en = 'Save file changes'"),
		,
		СтрШаблон(
			НСтр("ru = 'Сохранены изменения файлов (%1 из %2).'; en = 'Saved file changes (%1 of %2).'"),
			ПараметрыВыполнения.ДанныеФайлов.Количество(),
			ПараметрыВыполнения.МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Публикация файла.

Функция ПараметрыОбновленияФайла(ОбработчикРезультата, ОбъектСсылка, ИдентификаторФормы) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыОбработчика.Вставить("ХранитьВерсии");
	ПараметрыОбработчика.Вставить("РедактируетТекущийПользователь");
	ПараметрыОбработчика.Вставить("Редактирует");
	ПараметрыОбработчика.Вставить("АвторТекущейВерсии");
	ПараметрыОбработчика.Вставить("ПереданныйПолныйПутьКФайлу", "");
	ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию");
	ПараметрыОбработчика.Вставить("КомментарийКВерсии");
	ПараметрыОбработчика.Вставить("ПоказыватьОповещение", Истина);
	ПараметрыОбработчика.Вставить("ПрименитьКоВсем", Ложь);
	ПараметрыОбработчика.Вставить("ОсвобождатьФайлы", Истина);
	ПараметрыОбработчика.Вставить("Кодировка");
	Возврат ПараметрыОбработчика;
	
КонецФункции	

// Начало публикации файла.
//
// Параметры:
//   ПараметрыОбновленияФайла - Структура - см. ПараметрыОбновленияФайла.
//
Процедура СохранитьИзмененияФайла(ПараметрыОбновленияФайла) 
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбновленияФайла);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
		
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	ПараметрыВыполнения.Вставить("АдресВременногоХранилища", Неопределено);
	ПараметрыВыполнения.Вставить("ПолныйПутьКФайлу", Неопределено);
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		СохранитьИзмененияФайлаСРасширением(ПараметрыВыполнения);
	Иначе
		СохранитьИзмененияФайлаБезРасширения(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширением(ПараметрыВыполнения)
	
	
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ПараметрыВыполнения.ОбъектСсылка);
	
	ПараметрыВыполнения.ХранитьВерсии = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОбновитьФайл(
		ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь,
		ПараметрыВыполнения.ДанныеФайла.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение, 
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыВыполнения.ПолныйПутьКФайлу = ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу;
	Если ПараметрыВыполнения.ПолныйПутьКФайлу = "" Тогда
		ПараметрыВыполнения.ПолныйПутьКФайлу = 
			ФайловыеФункцииКлиент.ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла);
	КонецЕсли;
	
	// Проверка наличия файла на диске.
	ПараметрыВыполнения.Вставить("ФайлНовойВерсии", Новый Файл(ПараметрыВыполнения.ПолныйПутьКФайлу));
	Если Не ПараметрыВыполнения.ФайлНовойВерсии.Существует() Тогда
		Если Не ПустаяСтрока(ПараметрыВыполнения.ПолныйПутьКФайлу) Тогда
			СтрокаПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось поместить файл ""%1"" в хранилище файлов:
				           |Файл не найден в рабочем каталоге:
				           |%2.
				           |
				           |Освободить файл?';
				           |en = 'Unable to put file ""%1"" into the file storage: file in the working directory not found: %2. 
				           |
				           |Unlock the file?'"),
				Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
				ПараметрыВыполнения.ПолныйПутьКФайлу);
		Иначе
			СтрокаПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось поместить файл ""%1"" в хранилище файлов:
				           |Файл не найден в рабочем каталоге.
				           |
				           |Освободить файл?';
				           |en = 'Unable to put file ""%1"" into the file storage, file not found in the working directory. 
				           |
				           |Unlock the file?'"),
				Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСРасширениемПослеОтветаНаВопросОсвободитьФайл", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	// Запрос комментария и признака хранения версии.
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		
		ФормаВозврата = ФормаВозвратаФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии <> ПараметрыВыполнения.ДанныеФайла.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ДанныеФайла.Ссылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСРасширениемПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		СохранитьИзмененияФайлаСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеОтветаНаВопросОсвободитьФайл(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОсвободитьФайлБезВопроса(ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ИдентификаторФормы);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	СохранитьИзмененияФайлаСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПолноеИмяФайлаВременное", "");
	
	Если Не ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		СохранитьИзмененияФайлаСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Если файл с признаком шифрован, тогда при публикации
	// файл снова шифруется для тех же сертификатов.
	
	ПараметрыВыполнения.Вставить("ПослеПроверкиКоличестваСертификатов", Новый ОписаниеОповещения(
		"СохранитьИзмененияФайлаСРасширениемПослеПроверкиКоличестваСертификатов", ЭтотОбъект, ПараметрыВыполнения));
	
	ПроверитьКоличествоСертификатов(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПроверкиКоличестваСертификатов(ПараметрыВыполнения) Экспорт
	
	ПолноеИмяФайлаШифрованное = ПараметрыВыполнения.ПолныйПутьКФайлу + ".crp";
	
	ПараметрыВыполнения.МенеджерКриптографии.Зашифровать(
		ПараметрыВыполнения.ПолныйПутьКФайлу,
		ПолноеИмяФайлаШифрованное,
		ПараметрыВыполнения.МассивСертификатов);
	
	ПараметрыВыполнения.ПолноеИмяФайлаВременное = ПараметрыВыполнения.ПолныйПутьКФайлу + ".bak";
	ПереместитьФайл(ПараметрыВыполнения.ПолныйПутьКФайлу, ПараметрыВыполнения.ПолноеИмяФайлаВременное);
	ПереместитьФайл(ПолноеИмяФайлаШифрованное, ПараметрыВыполнения.ПолныйПутьКФайлу);
	
	СохранитьИзмененияФайлаСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПроверкиЗашифрован(ПараметрыВыполнения)
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ПараметрыВыполнения.ФайлНовойВерсии);
	
	ИмяФайла                    = ПараметрыВыполнения.ФайлНовойВерсии.Имя;
	РазмерВМб                   = ПараметрыВыполнения.ФайлНовойВерсии.Размер() / (1024 * 1024);
	ВремяИзменения              = ПараметрыВыполнения.ФайлНовойВерсии.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = ПараметрыВыполнения.ФайлНовойВерсии.ПолучитьУниверсальноеВремяИзменения();
	РазмерФайла                 = ПараметрыВыполнения.ФайлНовойВерсии.Размер();
	
	ТекстПояснения = СтрШаблон(
		НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
		           |Пожалуйста, подождите.';
		           |en = 'Transferring file ""%1"" (%2 mb) ... 
		           |Please wait.'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ПолныйПутьКФайлу, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ПараметрыВыполнения.ИдентификаторФормы);
	
	Состояние();
	Если Не ФайлыПомещены Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		ПараметрыВыполнения.АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	СведенияОФайле.АдресВременногоХранилищаФайла = ПараметрыВыполнения.АдресВременногоХранилища;
	СведенияОФайле.Комментарий = ПараметрыВыполнения.КомментарийКВерсии;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ОтносительныйПутьКФайлу = "";
	
	ИмяБезРасширения = ПараметрыВыполнения.ФайлНовойВерсии.ИмяБезРасширения;
	Расширение       = ПараметрыВыполнения.ФайлНовойВерсии.Расширение;
	
	ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
	
	Если ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "" Тогда // Есть рабочий каталог.
		ОтносительныйПутьКФайлу = ПараметрыВыполнения.ПолныйПутьКФайлу;
	Иначе
		Позиция = СтрНайти(ПараметрыВыполнения.ПолныйПутьКФайлу, ИмяКаталога);
		Если Позиция <> 0 Тогда
			ОтносительныйПутьКФайлу = Сред(ПараметрыВыполнения.ПолныйПутьКФайлу, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщиеНастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
		СведенияОФайле.АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
			ПараметрыВыполнения.ПолныйПутьКФайлу,
			ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		СведенияОФайле.АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	
	ТекстНеИзвлеченНаКлиенте = Ложь;
	#Если ВебКлиент Тогда
		ТекстНеИзвлеченНаКлиенте = Истина;
	#КонецЕсли
	
	НеМенятьЗаписьВРабочемКаталоге = Ложь;
	Если ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу <> "" Тогда
		НеМенятьЗаписьВРабочемКаталоге = Истина;
	КонецЕсли;
	
	ВерсияОбновлена = РаботаСФайламиВызовСервера.СохранитьИзмененияФайла(
		ПараметрыВыполнения.ДанныеФайла.Ссылка, СведенияОФайле, 
		НеМенятьЗаписьВРабочемКаталоге, ОтносительныйПутьКФайлу, ПараметрыВыполнения.ПолныйПутьКФайлу, 
		ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "", 
		ПараметрыВыполнения.ИдентификаторФормы);
	
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		Если ВерсияОбновлена Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Новая версия сохранена'; en = 'The new version has been saved'"),
				ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
				ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Новая версия не сохранена'; en = 'The new version has not been saved'"),
				,
				НСтр("ru = 'Файл не изменился'; en = 'File has not been changed'"),
				БиблиотекаКартинок.Информация32);
			Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСРасширениемПослеПоказаОповещения", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьИнформациюФайлНеБылИзменен(Обработчик, ПараметрыВыполнения.КомментарийКВерсии);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьИзмененияФайлаСРасширениемПослеПоказаОповещения(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПоказаОповещения(Результат, ПараметрыВыполнения) Экспорт
	
	// Удаление зашифрованного файла из кэша.
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		ПереместитьФайл(ПараметрыВыполнения.ПолноеИмяФайлаВременное, ПараметрыВыполнения.ПолныйПутьКФайлу);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширения(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПараметрыВыполнения.ОбъектСсылка);
	ПараметрыВыполнения.ХранитьВерсии                  = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
	ПараметрыВыполнения.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыВыполнения.Редактирует                    = ПараметрыВыполнения.ДанныеФайла.Редактирует;
	ПараметрыВыполнения.АвторТекущейВерсии             = ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОбновитьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.РедактируетТекущийПользователь,
		ПараметрыВыполнения.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение, 
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыВыполнения.ПолныйПутьКФайлу = "";
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		
		// Запрос комментария и признака хранения версии.
		ФормаВозврата = ФормаВозвратаФайла(ПараметрыВыполнения.ОбъектСсылка);
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ОбъектСсылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		СохранитьИзмененияФайлаБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	СохранитьИзмененияФайлаБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения) Экспорт
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьНапоминаниеПередПоместитьФайл(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(Обработчик, ПараметрыВыполнения.ИдентификаторФормы, ПараметрыВыполнения.ПолныйПутьКФайлу, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеЗагрузкиФайла(ПомещенныеФайлы, ПараметрыВыполнения) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	ОписаниеПереданногоФайла = ПомещенныеФайлы[0];
	ВыбранныйПутьКФайлу      = ОписаниеПереданногоФайла.Имя;
	ПараметрыВыполнения.АдресВременногоХранилища = ОписаниеПереданногоФайла.Хранение;
	СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеПереданногоФайла.Хранение;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	ИмяФайла = ВыбранныйПутьКФайлу;

	ТолькоИмя = "";
	ТолькоРасширение = "";
	
	СтрокиПути = РазложитьСтрокуПоСлэшам(ИмяФайла);
	Если СтрокиПути.Количество() <> 0 Тогда
		
		СтрокаИмяРасширение = СтрокиПути[СтрокиПути.Количество() - 1];
		
		ТолькоИмя 		 = ОбщегоНазначенияДокументооборотКлиентСервер.ПолучитьТолькоИмяИмениФайла(СтрокаИмяРасширение);
		ТолькоРасширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(СтрокаИмяРасширение);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТолькоИмя) Или ЗначениеЗаполнено(ТолькоРасширение) Тогда
		СведенияОФайле.РасширениеБезТочки = ТолькоРасширение;
		СведенияОФайле.ИмяБезРасширения = ТолькоИмя;
	КонецЕсли;
	
	Результат = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИСохранитьИзмененияФайла(
		ПараметрыВыполнения.ОбъектСсылка, 
		СведенияОФайле, 
		"", ПараметрыВыполнения.ПолныйПутьКФайлу, Ложь, ПараметрыВыполнения.ИдентификаторФормы);
	ПараметрыВыполнения.ДанныеФайла = Результат.ДанныеФайла;
	
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Новая версия сохранена'; en = 'The new version has been saved'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Для процедур СохранитьИзмененияФайла, ЗакончитьРедактирование.
Процедура ПроверитьКоличествоСертификатов(ПараметрыВыполнения)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("МодульЭлектроннаяПодписьКлиент",
		ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент"));
	
	ПараметрыВыполнения.МодульЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПроверитьКоличествоСертификатовПослеСозданияМенеджераКриптографии", ЭтотОбъект, ПараметрыВыполнения),
		"Шифрование");
	
КонецПроцедуры

// Продолжение процедуры ПроверитьКоличествоСертификатов.
Процедура ПроверитьКоличествоСертификатовПослеСозданияМенеджераКриптографии(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("МассивСертификатов", Новый Массив);
	ПараметрыВыполнения.Вставить("МенеджерКриптографии", Результат);
	ПараметрыВыполнения.Вставить("МассивСертификатовШифрованияИндекс", -1);
	
	ПроверитьКоличествоСертификатовЦиклНачало(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьКоличествоСертификатов.
Процедура ПроверитьКоличествоСертификатовЦиклНачало(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.ДанныеФайла.МассивСертификатовШифрования.Количество()
			<= ПараметрыВыполнения.МассивСертификатовШифрованияИндекс + 1 Тогда
		
		Если ПараметрыВыполнения.МассивСертификатов.Количество() = 0 Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'У зашифрованного файла не указаны сертификаты.
				           |Расшифруйте файл и зашифруйте заново.';
				           |en = 'Certificates of the encrypted file are not specified.
				           |Decrypt and encrypt file again.'"));
			
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ПослеПроверкиКоличестваСертификатов);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.МассивСертификатовШифрованияИндекс =
		ПараметрыВыполнения.МассивСертификатовШифрованияИндекс + 1;
	
	ПараметрыВыполнения.Вставить("СтруктураТекущегоСертификатаШифрования",
		ПараметрыВыполнения.ДанныеФайла.МассивСертификатовШифрования[
			ПараметрыВыполнения.МассивСертификатовШифрованияИндекс]);
	
	Если ПараметрыВыполнения.СтруктураТекущегоСертификатаШифрования.Сертификат <> Неопределено Тогда
		СертификатКриптографии = Новый СертификатКриптографии;
		СертификатКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
				"ПроверитьКоличествоСертификатовПослеИнициализацииСертификата", ЭтотОбъект, ПараметрыВыполнения),
			ПараметрыВыполнения.СтруктураТекущегоСертификатаШифрования.Сертификат);
	Иначе
		ПараметрыВыполнения.МодульЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
			"ПроверитьКоличествоСертификатовПослеПоискаСертификата", ЭтотОбъект, ПараметрыВыполнения),
			ПараметрыВыполнения.СтруктураТекущегоСертификатаШифрования.Отпечаток, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьКоличествоСертификатов.
Процедура ПроверитьКоличествоСертификатовПослеИнициализацииСертификата(СертификатКриптографии, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.МассивСертификатов.Добавить(СертификатКриптографии);
	
	ПроверитьКоличествоСертификатовЦиклНачало(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьКоличествоСертификатов.
Процедура ПроверитьКоличествоСертификатовПослеПоискаСертификата(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СертификатКриптографии") Тогда
		ПараметрыВыполнения.МассивСертификатов.Добавить(Результат);
	КонецЕсли;
	
	ПроверитьКоличествоСертификатовЦиклНачало(ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор файла и создание из него новой версии.

// Выбирает на диске файл и создает из него новую версию.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла - структура с данными файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Процедура ОбновитьИзФайлаНаДиске(ОбработчикРезультата, ДанныеФайла, ИдентификаторФормы) Экспорт
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ВернутьРезультат(ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
		
		ТекстОшибки = ФайловыеФункцииКлиент.ПолучитьТекстПредупрежденияЧтоФайлЗанятСДругогоКомпьютера(
			ДанныеФайла.ПолноеНаименованиеВерсии, 
			ДанныеФайла.Расширение, 
			ДанныеФайла.ИмяДругогоКомпьютера);
		ПоказатьПредупреждение(,ТекстОшибки);	
		Возврат;
		
	КонецЕсли;	
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если Не ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
		ПутьВыбора = ДанныеФайла.РабочийКаталогВладельца;
	Иначе
		ПутьВыбора = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла");
	КонецЕсли;
	
	Если ПутьВыбора = Неопределено Или ПутьВыбора = "" Тогда
		#Если Не ВебКлиент Тогда
			Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Данная команда не поддерживается в базовой версии.'; en = 'This command is not supported in the basic version.'"));
				ВернутьРезультат(ОбработчикРезультата, Ложь);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
	КонецЕсли;
	
	Диалог.Заголовок                   = НСтр("ru = 'Выбор файла'; en = 'Select file'");
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.МножественныйВыбор          = Ложь;
	Диалог.Каталог                     = ПутьВыбора;
	
	Диалог.ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение); 
	
	
	РасширениеДляЗашифрованныхФайлов = "";
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		Если МодульЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьШифрование Тогда
			РасширениеДляЗашифрованныхФайлов =
				МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки(
					).РасширениеДляЗашифрованныхФайлов;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасширениеДляЗашифрованныхФайлов) Тогда
		Фильтр = НСтр("ru = 'Файл (*.%1)|*.%1|Зашифрованный файл (*.%2)|*.%2|Все файлы (*.*)|*.*'; en = 'File (*.%1) | *.%1 | Encrypted file (*.%2) | *.%2 | All files (*. *) | *. *'");
		
		Диалог.Фильтр = СтрШаблон(Фильтр,
			ДанныеФайла.Расширение, РасширениеДляЗашифрованныхФайлов);
	Иначе
		Фильтр = НСтр("ru = 'Файл (*.%1)|*.%1|Все файлы (*.*)|*.*'; en = 'File (*.%1) | *.%1 | All files (*. *) | *. *'");
		
		Диалог.Фильтр = СтрШаблон(Фильтр,
			ДанныеФайла.Расширение);
		
	КонецЕсли;
	
	Если Не Диалог.Выбрать() Тогда
		ВернутьРезультат(ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПутьВыбораПрежний = ПутьВыбора;
	ФайлНаДиске = Новый Файл(Диалог.ПолноеИмяФайла);
	ПутьВыбора = ФайлНаДиске.Путь;
	
	Если ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
		Если ПутьВыбораПрежний <> ПутьВыбора Тогда
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла",  ПутьВыбора);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла",          ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы",   ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДиалогПолноеИмяФайла", Диалог.ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("СоздатьНовуюВерсию",   Неопределено);
	ПараметрыВыполнения.Вставить("КомментарийКВерсии",   Неопределено);
	
	ОбновитьИзФайлаНаДискеЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Выбирает на диске файл и создает из него новую версию - реализация низкоуровневая
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  ДиалогПолноеИмяФайла - Строка - полное имя файла, выбранное в диалоге
//  СоздатьНовуюВерсию -  Булево - Создать новую версию
//  КомментарийКВерсии - Строка - Комментарий к версии
//
Процедура ОбновитьИзФайлаНаДискеЗапуск(ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ФайлНаДиске", Новый Файл(ПараметрыВыполнения.ДиалогПолноеИмяФайла));
	ПараметрыВыполнения.Вставить("ИмяИРасширениеФайлаНаДиске", ПараметрыВыполнения.ФайлНаДиске.Имя);
	ПараметрыВыполнения.Вставить("ИмяФайла", ПараметрыВыполнения.ФайлНаДиске.ИмяБезРасширения);
	
	ПараметрыВыполнения.Вставить("ВремяИзмененияВыбранное",
		ПараметрыВыполнения.ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения());
	
	ПараметрыВыполнения.Вставить("РасширениеФайлаНаДиске",
		ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПараметрыВыполнения.ФайлНаДиске.Расширение));
	
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов",
		ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляЗашифрованныхФайлов);
	
	ПараметрыВыполнения.Вставить("ФайлЗашифрован", НРег(ПараметрыВыполнения.РасширениеФайлаНаДиске)
		= НРег(ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов));
	
	Если Не ПараметрыВыполнения.ФайлЗашифрован Тогда
		ОбновитьИзФайлаНаДискеПродолжение(ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// отрезаем .p7m в конце
	Позиция = СтрНайти(ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске, ПараметрыВыполнения.РасширениеФайлаНаДиске);
	ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске = Лев(ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске, Позиция - 2);
	
	// отрезаем .p7m в конце
	ПараметрыВыполнения.Вставить("ДиалогПолноеИмяФайлаПрежнее", ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	Позиция = СтрНайти(ПараметрыВыполнения.ДиалогПолноеИмяФайла, ПараметрыВыполнения.РасширениеФайлаНаДиске);
	ПараметрыВыполнения.ДиалогПолноеИмяФайла = Лев(ПараметрыВыполнения.ДиалогПолноеИмяФайла, Позиция - 2);
	
	ВременныйФайлНешифрованный = Новый Файл(ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	
	ПараметрыВыполнения.РасширениеФайлаНаДиске = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
		ВременныйФайлНешифрованный.Расширение);
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
		ПараметрыВыполнения.РасширениеФайлаНаДиске);
	
	// Тут расшифровать и поставить ту же дату изменения, что и ДиалогПолноеИмяФайлаПрежнее.
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПередРасшифровкой", ЭтотОбъект, ПараметрыВыполнения),
		, ПараметрыВыполнения.ДиалогПолноеИмяФайлаПрежнее, Ложь, ПараметрыВыполнения.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПередРасшифровкой(Результат, АдресФайла, ВыбранноеИмяФайла, ПараметрыВыполнения) Экспорт
	
	Если Результат <> Истина Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ИдентификаторФормы",    ПараметрыВыполнения.ИдентификаторФормы);
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'; en = 'Decrypting a file'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'; en = 'File'"));
	ОписаниеДанных.Вставить("Данные",                АдресФайла);
	ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СертификатыШифрования", Новый Массив);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеРасшифровки",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
			ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("АдресФайла", АдресФайла);
	
	Если Не ПолучитьФайл(АдресФайла, ПараметрыВыполнения.ДиалогПолноеИмяФайла, Ложь) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ВременныйФайлНешифрованный = Новый Файл(ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	ВременныйФайлНешифрованный.УстановитьУниверсальноеВремяИзменения(ПараметрыВыполнения.ВремяИзмененияВыбранное);
	
	ПараметрыВыполнения.ФайлЗашифрован = Ложь;
	
	ОбновитьИзФайлаНаДискеПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПродолжение(ПараметрыВыполнения)
	
	// данные файла могли измениться - обновим
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ПредыдущаяВерсия = ПараметрыВыполнения.ДанныеФайла.Версия;
	
	ИмяИРасширениеФайлаВБазе = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	ПараметрыВыполнения.Вставить("ДатаФайлаВБазе", ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная);
	
	Если ПараметрыВыполнения.ВремяИзмененияВыбранное < ПараметрыВыполнения.ДатаФайлаВБазе Тогда // В хранилище более новый.
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Файл ""%1""
			           |в хранилище файлов имеет более позднюю дату изменения (%2),
			           |чем выбранный файл (%3).
			           |
			           |Операция прервана.';
			           |en = 'File ""%1"" in the file storage has more recent modification date (%2) than the selected file (%3). 
			           |
			           |Operation aborted.'"),
			Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
			МестноеВремя(ПараметрыВыполнения.ДатаФайлаВБазе),
			МестноеВремя(ПараметрыВыполнения.ВремяИзмененияВыбранное));
		
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	// Проверка наличия файла в рабочем каталоге.
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ПолноеИмяФайла = "";
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		Неопределено,
		ПредыдущаяВерсия,
		ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
		
	ПараметрыВыполнения.Вставить("ФайлБылЗанят", ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь);
	
	Если ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда // Файл уже был занят.
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			ФайлВКэше = Новый Файл(ПолноеИмяФайла);
			ВремяИзмененияВКэше = ФайлВКэше.ПолучитьУниверсальноеВремяИзменения();
			
			Если ПараметрыВыполнения.ВремяИзмененияВыбранное < ВремяИзмененияВКэше Тогда // В рабочем каталоге более новый.
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Файл ""%1""
					           |в рабочем каталоге имеет более позднюю дату изменения (%2),
					           |чем выбранный файл (%3).
					           |
					           |Операция прервана.';
					           |en = 'File ""%1"" in the working directory has more recent modification date (%2) than the selected file (%3). 
					           |
					           |Operation aborted.'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
					МестноеВремя(ВремяИзмененияВКэше),
					МестноеВремя(ПараметрыВыполнения.ВремяИзмененияВыбранное));
				
				ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
				Возврат;
			КонецЕсли;
			
			#Если Не ВебКлиент Тогда
				// Проверка, что файл не занят приложением.
				Попытка
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
				Исключение
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Файл ""%1""
						           |в рабочем каталоге открыт для редактирования.
						           |
						           |Закончите редактирование перед выполнением
						           |обновления из файла на диске.';
						           |en = 'File ""%1"" in the working directory is opened for editing. 
						           |
						           |Finish editing before you update from a file on disk.'"),
						ПолноеИмяФайла);
					ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
					Возврат;
				КонецПопытки;
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФайлВРабочемКаталоге И ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске <> ИмяИРасширениеФайлаВБазе Тогда
		Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеУдаленияФайлаИзРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
		УдалитьФайлИзРабочегоКаталога(Обработчик, ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия, Истина);
		Возврат;
	КонецЕсли;
	
	ОбновитьИзФайлаНаДискеПослеУдаленияФайлаИзРабочегоКаталога(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеУдаленияФайлаИзРабочегоКаталога(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> -1 Тогда
		Если Результат.Успех <> Истина Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("РедактируетТекущийПользователь", ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь);
	
	Если Не ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		ТекстОшибки = "";
		МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ПараметрыВыполнения.ДанныеФайла, ТекстОшибки);
		Если Не МожноЗанятьФайл Тогда
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		ДатаЗаема = ТекущаяДата();
		ФайлЗанят = РаботаСФайламиВызовСервера.ЗанятьФайл(ПараметрыВыполнения.ДанныеФайла, ТекстОшибки, 
			ДатаЗаема, ПараметрыВыполнения.ИдентификаторФормы);
		Если Не ФайлЗанят Тогда 
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
			Возврат;
		КонецЕсли;
		
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		
	КонецЕсли;
	
	НовоеПолноеИмяФайла = "";
	ПараметрыВыполнения.ДанныеФайла.Вставить("ПутьОбновленияИзФайлаНаДиске", ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	ПараметрыВыполнения.ДанныеФайла.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПараметрыВыполнения.РасширениеФайлаНаДиске);
	ПараметрыВыполнения.ДанныеФайла.Вставить("ВремяИзмененияВыбранное", ПараметрыВыполнения.ВремяИзмененияВыбранное);
	
	// Помещение в рабочий каталог из выбранного файла на диске,
	// т.к. указано свойство ПутьОбновленияИзФайлаНаДиске.
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
	ПолучитьФайлВерсииВРабочийКаталог(Обработчик, ПараметрыВыполнения.ДанныеФайла, НовоеПолноеИмяФайла, ПараметрыВыполнения.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	// Обработка результата не требуется.
	Если ПараметрыВыполнения.ФайлЗашифрован Тогда
		РаботаСФайламиВызовСервера.УстановитьПризнакЗашифрован(ПараметрыВыполнения.ДанныеФайла.Ссылка, ПараметрыВыполнения.ФайлЗашифрован);
	КонецЕсли;
	
	ПереданныйПолныйПутьКФайлу = "";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеЗавершенияРедактирования", ЭтотОбъект, ПараметрыВыполнения);
	Если ПараметрыВыполнения.ФайлБылЗанят Тогда // Файл уже был занят.
		ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, ПараметрыВыполнения.ДанныеФайла.Ссылка, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыОбработчика.ПереданныйПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		ПараметрыОбработчика.СоздатьНовуюВерсию = ПараметрыВыполнения.СоздатьНовуюВерсию;
		ПараметрыОбработчика.КомментарийКВерсии = ПараметрыВыполнения.КомментарийКВерсии;
		СохранитьИзмененияФайла(ПараметрыОбработчика);
	Иначе
		ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, ПараметрыВыполнения.ДанныеФайла.Ссылка, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыОбработчика.ХранитьВерсии = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
		ПараметрыОбработчика.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
		ПараметрыОбработчика.Редактирует = ПараметрыВыполнения.ДанныеФайла.Редактирует;
		ПараметрыОбработчика.АвторТекущейВерсии = ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии;
		ПараметрыОбработчика.ПереданныйПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		ПараметрыОбработчика.СоздатьНовуюВерсию = ПараметрыВыполнения.СоздатьНовуюВерсию;
		ПараметрыОбработчика.КомментарийКВерсии = ПараметрыВыполнения.КомментарийКВерсии;
		ЗакончитьРедактирование(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеЗавершенияРедактирования(РезультатРедактирования, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ФайлЗашифрован Тогда
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	КонецЕсли;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Удаление файла с диска и из регистра сведений.

// Удалить с диска и из регистра сведений
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  Ссылка  - СправочникСсылка.Файлы - файл
//  УдалитьВРабочемКаталоге - Булево - Удалить даже в рабочем каталоге
//
// Возвращаемое значение:
//   Структура - Результат удаления файла с диска и регистра сведений.
//       * Успех - Булево - успешно ли выполнена операция.
//
Процедура УдалитьФайлИзРабочегоКаталога(ОбработчикРезультата, Ссылка, УдалитьВРабочемКаталоге = Ложь) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("Ссылка", Ссылка);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	ПараметрыВыполнения.Вставить("ИмяКаталога", ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя());
	
	ПараметрыВыполнения.Вставить("ПолноеИмяФайлаИзРегистра", Неопределено);
	
	ВРабочемКаталогеВладельца = Ложь;
	ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(
		ПараметрыВыполнения.Ссылка, ПараметрыВыполнения.ИмяКаталога, Ложь, ВРабочемКаталогеВладельца);
	
	Если ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра <> "" Тогда
		
		// Обычно в рабочем каталоге не удаляем - только если передан УдалитьВРабочемКаталоге
		Если Не ВРабочемКаталогеВладельца ИЛИ УдалитьВРабочемКаталоге = Истина Тогда
			
			ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра);
			
			Если ФайлНаДиске.Существует() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				
				ЗарегистрироватьОписаниеОбработчика(
					ПараметрыВыполнения, ЭтотОбъект, "УдалитьФайлИзРабочегоКаталогаПослеУдаленияФайла");
				
				УдалитьФайл(ПараметрыВыполнения, ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра);
				Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
					Возврат;
				КонецЕсли;
				
				УдалитьФайлИзРабочегоКаталогаПослеУдаленияФайла(
					ПараметрыВыполнения.АсинхронныйДиалог.РезультатКогдаНеОткрыт, ПараметрыВыполнения);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлИзРабочегоКаталогаЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьФайлИзРабочегоКаталогаПослеУдаленияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ПутьСПодкаталогом = ПараметрыВыполнения.ИмяКаталога;
	Позиция = СтрНайти(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра, ПолучитьРазделительПути());
	Если Позиция <> 0 Тогда
		ПутьСПодкаталогом = ПутьСПодкаталогом + Лев(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра, Позиция);
	КонецЕсли;
	
	МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*");
	Если МассивФайловВКаталоге.Количество() = 0 Тогда
		Если ПутьСПодкаталогом <> ПараметрыВыполнения.ИмяКаталога Тогда
			УдалитьФайлы(ПутьСПодкаталогом);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлИзРабочегоКаталогаЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьФайлИзРабочегоКаталогаЗавершение(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра = "" Тогда
		РаботаСФайламиВызовСервера.УдалитьИзРегистра(ПараметрыВыполнения.Ссылка);
	Иначе
		ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра);
		Если НЕ ФайлНаДиске.Существует() Тогда
			РаботаСФайламиВызовСервера.УдалитьИзРегистра(ПараметрыВыполнения.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.Успех = Истина;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Освобождение файла без обновления.

// Возвращаемое значение:
//   Структура - со свойствами:
//    * ОбработчикРезультата    - ОписаниеОповещения, Неопределено - описание процедуры, принимающей результат работы
//                                метода.
//    * ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//    * Версия                  - СправочникСсылка.ВерсииФайлов - версия файла.
//    * ХранитьВерсии           - Булево - хранить версии.
//    * РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь.
//    * Редактирует             - СправочникСсылка.Пользователи - кто занял файл.
//    * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор управляемой формы.
//    * НеЗадаватьВопрос        - Булево - не задавать вопрос "Отмена редактирования файла
//                                         может привести к потере Ваших изменений. Продолжить?".
//
Функция ПараметрыОсвобожденияФайла(ОбработчикРезультата, ОбъектСсылка) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("Версия");
	ПараметрыОбработчика.Вставить("ХранитьВерсии");
	ПараметрыОбработчика.Вставить("РедактируетТекущийПользователь");
	ПараметрыОбработчика.Вставить("Редактирует");
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор");
	ПараметрыОбработчика.Вставить("НеЗадаватьВопрос", Ложь);
	ПараметрыОбработчика.Вставить("ВызовИзСпискаДляАдминистратора", Ложь);
	Возврат ПараметрыОбработчика;
	
КонецФункции

// Освобождает файл без обновления.
//
// Параметры:
//  ПараметрыОсвобожденияФайла - Структура - см. ПараметрыОсвобожденияФайла.
//
Процедура ОсвободитьФайл(ПараметрыОсвобожденияФайла)
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОсвобожденияФайла);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	ПараметрыВыполнения.Вставить("ПродолжитьРаботу", Истина);
	Если Не ПараметрыВыполнения.Свойство("ВызовИзСпискаДляАдминистратора") Тогда
		ПараметрыВыполнения.Вставить("ВызовИзСпискаДляАдминистратора", Ложь);
	КонецЕсли;	
	
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
		ПараметрыВыполнения.ОбъектСсылка, ПараметрыВыполнения.Версия);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектСсылка) Тогда
		ПараметрыВыполнения.ОбъектСсылка = ПараметрыВыполнения.ДанныеФайла.Ссылка;
	КонецЕсли;
	ПараметрыВыполнения.ХранитьВерсии                  = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
	ПараметрыВыполнения.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыВыполнения.Редактирует                    = ПараметрыВыполнения.ДанныеФайла.Редактирует;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.РедактируетТекущийПользователь,
		ПараметрыВыполнения.Редактирует,
		ТекстОшибки);
	
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") 
		И ПараметрыВыполнения.ДанныеФайла.ЗанятСДругогоКомпьютера
		И Не ПараметрыВыполнения.ВызовИзСпискаДляАдминистратора Тогда
		
		ТекстВопроса = "";
		
		Если ЗначениеЗаполнено(ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера) Тогда
		
			ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Файл ""%1.%2"" занят вами с другого компьютера (%3).
					|Выполните ""Закончить редактирование"" с компьютера %4.
					|или отмените редактирование (сделанные вами изменения будут потеряны).
					|
					|Продолжить отмену редактирования?';
					|en = 'You have locked for edit file ""%1.%2"" from another computer (%3). 
					|Perform ""Finish editing"" from computer %4. 
					|or cancel editing (changes you have made will be lost). 
					|
					|Continue cancel editing?'"),
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение,
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера,
			ПараметрыВыполнения.ДанныеФайла.ИмяДругогоКомпьютера);
			
		Иначе
			
			ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Файл ""%1.%2"" занят вами с другого компьютера.
					|Выполните ""Закончить редактирование"" с того же компьютера, где файл был занят.
					|или отмените редактирование (сделанные вами изменения будут потеряны).
					|
					|Продолжить отмену редактирования?';
					|en = 'You have locked for edit file ""%1.%2"" from another computer. 
					|Perform ""Finish editing"" from the same computer where the file was locked. 
					|or cancel editing (changes you have made will be lost). 
					|
					|Continue cancel editing?'"),
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 
			ПараметрыВыполнения.ДанныеФайла.Расширение);
			
		КонецЕсли;			
		
		ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования", ЭтотОбъект, ПараметрыВыполнения);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;	
	
	Если ПараметрыВыполнения.НеЗадаватьВопрос = Ложь Тогда
		ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования", ЭтотОбъект, ПараметрыВыполнения);
		
		ТекстВопроса = "";
		
		Если ПараметрыВыполнения.ВызовИзСпискаДляАдминистратора Тогда
			ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Отмена редактирования файла
			           |""%1""
			           |может привести к потере изменений.
			           |
			           |Продолжить?';
			           |en = 'Changes may be lost if you cancel editing file 
			           |""%1"". 
			           |Do you want to continue?'"),
			Строка(ПараметрыВыполнения.ОбъектСсылка));
		Иначе
			ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Отмена редактирования файла
			           |""%1""
			           |может привести к потере ваших изменений.
			           |
			           |Продолжить?';
			           |en = 'Cancel editing the file ""%1"" may cause you to lose your changes. 
			           |
			           |Do you want to continue?'"),
			Строка(ПараметрыВыполнения.ОбъектСсылка));
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> -1 Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПараметрыВыполнения.ПродолжитьРаботу = Истина;
		Иначе
			ПараметрыВыполнения.ПродолжитьРаботу = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПродолжитьРаботу Тогда
		
		РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИОсвободитьФайл(
			ПараметрыВыполнения.ОбъектСсылка,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.УникальныйИдентификатор);
			
		Если ПараметрыВыполнения.ДанныеФайла.Свойство("КоличествоЗанятыхФайлов")
			И ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов <> -1 Тогда
				СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
					"КоличествоЗанятыхФайлов", 
					ПараметрыВыполнения.ДанныеФайла.КоличествоЗанятыхФайлов);
		КонецЕсли;	
			
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			НаЧтение = Истина;
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Если Не ПараметрыВыполнения.НеЗадаватьВопрос Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файл освобожден'; en = 'The file is unlocked'"),
				ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
				ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ПараметрыВыполнения.ОбработчикРезультата.ДополнительныеПараметры.Вставить("ДанныеФайла", 
			ПараметрыВыполнения.ДанныеФайла);
	КонецЕсли;	
		
	ЗначениеВозврата = (Ответ = КодВозвратаДиалога.Да);	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ЗначениеВозврата);
	
КонецПроцедуры

// Процедура печати Файла
//
// Параметры
//  ДанныеФайлов  - массив структур с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура НапечататьФайлы(ДанныеФайлов, УникальныйИдентификатор = Неопределено) Экспорт
	
	Оповестить("ОбновитьСписокПоследних");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("НомерФайла", 0);
	ПараметрыВыполнения.Вставить("ДанныеФайлов", ДанныеФайлов);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик);
	
КонецПроцедуры

// Процедура печати Файла
//
// Параметры
// ОбработчикРезультата - ОписаниеОповещения для дальнейшего вызова
// ПараметрыВыполнения - структура с НомерФайла ДанныеФайлов  УникальныйИдентификатор
Процедура НапечататьФайлыВыполнение(ОбработчикРезультата, ПараметрыВыполнения) Экспорт
	
	ОбработкаПрерыванияПользователя();
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
		Возврат;
	КонецЕсли;
	ДанныеФайла = ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла];
	
	Обработчик = Новый ОписаниеОповещения("НапечататьФайлПослеПолученияВерсииВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
	ПолучитьФайлВерсииВРабочийКаталог(
		Обработчик,
		ДанныеФайла,
		"",
		ПараметрыВыполнения.УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура печати Файла после получения на диск
//
// Параметры
// ОбработчикРезультата - ОписаниеОповещения для дальнейшего вызова
// ПараметрыВыполнения - структура с НомерФайла ДанныеФайлов  УникальныйИдентификатор
Процедура НапечататьФайлПослеПолученияВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда
		
		Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
			Возврат;
		КонецЕсли;
		ДанныеФайла = ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла];
		
		НапечататьФайлПриложением(ДанныеФайла, Результат.ПолноеИмяФайла);
		
	КонецЕсли;
	
	// переходим к печати следующего файла
	ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
	Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создает новый файл.

// Создает новый файл интерактивно.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - Необязательный. Описание процедуры, принимающей
//                          результат работы метода.
//
//   ВладелецФайла - ЛюбаяСсылка - определяет группу, в которой создается Элемент.
//                   Если группа неизвестна в момент вызова этого метода - там будет Неопределено.
//
//   ФормаВладелец - УправляемаяФорма - форма, из которой вызвано создание файла.
//
//   РежимСоздания - режим создания файла:
//       - Неопределено - значение по умолчанию. Показать диалог выбора режима создания файла.
//       - Число - Создать файл указанным способом:
//           * 1 - из шаблона (копированием другого файла),
//           * 2 - с диска (из файловой системы клиента),
//           * 3 - со сканера.
//
//   НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - действие после создания:
//       * Ложь - Значение по умолчанию. Открывать карточку файла после создания.
//       * Истина - Не открывать карточку файла после создания.

//   ДобавлениеОригинала - Истина, если это файл-оригинал (для вх исх внутр документа)
//
//   ИдентификаторРодительскойФормы  - Идентификатор формы, откуда идет вызов (и которая получит оповещение о созданном файле)
//
//   НеОткрыватьФормуВыбораРежимаСозданияФайла - Истина, если не надо открывать форму выбора, 
//как создать файл (из шаблона, с диска, со сканера)
//
Процедура ДобавитьФайл(
	ОбработчикРезультата,
	ВладелецФайла,
	ФормаВладелец,
	РежимСоздания = 1,
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено,
	ДобавлениеОригинала = Ложь,
	СписокКатегорий = Неопределено,
	ПараметрыОповещения = Неопределено,
	ИдентификаторРодительскойФормы = Неопределено,
	НеОткрыватьФормуВыбораРежимаСозданияФайла = Ложь,
	ШаблонаДокумента = Неопределено) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ФормаВладелец);
	ПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", НеОткрыватьКарточкуПослеСозданияИзФайла);
	ПараметрыВыполнения.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
	ПараметрыВыполнения.Вставить("СписокКатегорий", СписокКатегорий);
	ПараметрыВыполнения.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	ПараметрыВыполнения.Вставить("ИдентификаторРодительскойФормы", ИдентификаторРодительскойФормы);
	ПараметрыВыполнения.Вставить("ШаблонаДокумента", ШаблонаДокумента);
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьПослеВыбораРежимаСоздания", ЭтотОбъект, ПараметрыВыполнения);
	
	Если ДобавлениеОригинала И Не РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать() Тогда 
		РежимСоздания = 2;
		НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
	КонецЕсли;	
	
	Если НеОткрыватьФормуВыбораРежимаСозданияФайла = Ложь Тогда
		ФормаНового = ФормаВыбораВариантаСозданияНовогоФайла(РежимСоздания);
		УстановитьОповещениеФормы(ФормаНового, Обработчик);
		ФормаНового.Открыть();
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, РежимСоздания);
	КонецЕсли;
	
КонецПроцедуры

// Создает новый файл интерактивно указанным образом.
//
// Параметры:
//   РежимСоздания - Число - Режим создания файла.
//       * 1 - из шаблона (копированием другого файла),
//       * 2 - с диска (из файловой системы клиента),
//       * 3 - со сканера.
//   ПараметрыВыполнения - Структура - типы значений и описания см. в РаботаСФайламиКлиент.ДобавитьФайл().
//       * ОбработчикРезультата
//       * ВладелецФайла
//       * ФормаВладелец
//       * НеОткрыватьКарточкуПослеСозданияИзФайла
//
Процедура ДобавитьПослеВыбораРежимаСоздания(РежимСоздания, ПараметрыВыполнения) Экспорт
	
	Если РежимСоздания = 1 Или ТипЗнч(РежимСоздания) = Тип("СправочникСсылка.Файлы") Тогда // Скопировать другой файл.
		
		Если ТипЗнч(РежимСоздания) = Тип("СправочникСсылка.Файлы") Тогда
			ПараметрыВыполнения.Вставить("ВыбранныйШаблон", РежимСоздания);
		КонецЕсли;	
		ДобавитьНаОсновеШаблона(ПараметрыВыполнения);
		
	ИначеЕсли РежимСоздания = 2 Тогда // Загрузить из файловой системы.
		
		Если ПараметрыВыполнения.ДобавлениеОригинала И РежимСоздания = 1 Тогда 
			ПоказатьПредупреждение(,НСтр("ru = 'Нельзя добавить как оригинал файл из шаблона.'; en = 'You cannot add as the original a file from template.'"));
			Возврат;
		КонецЕсли;	
		
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			ДобавитьИзФайловойСистемыСРасширением(ПараметрыВыполнения);
		Иначе
			ДобавитьИзФайловойСистемыБезРасширения(ПараметрыВыполнения);
		КонецЕсли;
	ИначеЕсли РежимСоздания = 3 Тогда // Считать со сканера.
		ДобавитьСоСканера(ПараметрыВыполнения);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьНаОсновеШаблона(ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.Свойство("ВыбранныйШаблон")
		И ТипЗнч(ПараметрыВыполнения.ВыбранныйШаблон) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДобавитьНаОсновеШаблонаПослеВыбораШаблона(ПараметрыВыполнения.ВыбранныйШаблон, ПараметрыВыполнения);
		Возврат;
		
	КонецЕсли;	
	
	// Создание из шаблона
	ПараметрыФормы = Новый Структура("ВыборШаблона, ТекущаяСтрока", 
		Истина, ПредопределенноеЗначение("Справочник.ПапкиФайлов.Шаблоны"));
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьНаОсновеШаблонаПослеВыбораШаблона", ЭтотОбъект, ПараметрыВыполнения);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	Если ПараметрыВыполнения.Свойство("ВладелецФайла") И ЗначениеЗаполнено(ПараметрыВыполнения.ВладелецФайла) Тогда 
		ПараметрыФормы.Вставить("ВладелецФайла", ПараметрыВыполнения.ВладелецФайла);
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ШаблонаДокумента") И ЗначениеЗаполнено(ПараметрыВыполнения.ШаблонаДокумента) Тогда 
		ПараметрыФормы.Вставить("ШаблонаДокумента", ПараметрыВыполнения.ШаблонаДокумента);
	КонецЕсли;
	
	Если (ПараметрыВыполнения.Свойство("ШаблонаДокумента") И ЗначениеЗаполнено(ПараметрыВыполнения.ШаблонаДокумента))
		Или (ПараметрыВыполнения.Свойство("ВладелецФайла") И ЗначениеЗаполнено(ПараметрыВыполнения.ВладелецФайла)) Тогда 
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораФайлаШаблона", 
			ПараметрыФормы, , , , , Обработчик, РежимОткрытия);
	Иначе 
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках", 
			ПараметрыФормы, , , , , Обработчик, РежимОткрытия);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьНаОсновеШаблонаПослеВыбораШаблона(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФайлОснование", Результат);
	ПараметрыФормы.Вставить("ВладелецФайла", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыФормы.Вставить("РежимСоздания", "ИзШаблона");
	ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикРезультата);
	
КонецПроцедуры

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку
//
//  ПараметрыДобавления - Структура:
//       * ОбработчикРезультата - ОписаниеОповещения, Неопределено
//             - Описание процедуры, принимающей результат работы метода.
//       * ПолноеИмяФайла - Строка - Необязательный. Полный путь и имя файла на клиенте.
//             Если не указан, то будет открыт диалог для выбора файла.
//       * ВладелецФайла - ЛюбаяСсылка - владелец файла.
//       * ФормаВладелец - УправляемаяФорма из которой вызвано создание файла.
//       * НеОткрыватьКарточкуПослеСозданияИзФайла - Булево
//             - Истина когда карточка файла не открывается после создания.
//       * ИмяСоздаваемогоФайла - Строка - Необязательный. Новое имя файла.
//
Процедура ДобавитьИзФайловойСистемыСРасширением(ПараметрыВыполнения) Экспорт
	
	Результат = ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыВыполнения);
	Если Не Результат.ФайлДобавлен Тогда
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, Результат.ТекстОшибки, Неопределено);
		Иначе
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Результат.ФайлСсылка);
		ПараметрыФормы.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		
		ОбработчикДиалога = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикДиалога);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает фильтр с наборами самых частых файлов
Функция ПолучитьФильтрДляДиалогаВыбораФайла() Экспорт
	
	Фильтр 
		= НСтр("ru = 'Все файлы (*.*)|*.*'; en = 'All files (*.*)|*.*'")
		+ НСтр("ru = '|Документы MS Office(*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx)|*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx'; en = '|MS Office documents (*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx)|*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx'")
		+ НСтр("ru = '|Документы Open Office(*.odt;*.odf;*.ods;*.odp)|*.odt;*.odf;*.ods;*.odp'; en = '|Open Office documents (*.odt;*.odf;*.ods;*.odp)|*.odt;*.odf;*.ods;*.odp'")
		+ НСтр("ru = '|Текстовые файлы(*.txt)|*.txt'; en = '|Text files (*.txt)|*.txt'")
		+ НСтр("ru = '|Файлы PDF(*.pdf)|*.pdf'; en = '|PDF files (*.pdf)|*.pdf'")
		+ НСтр("ru = '|Файлы HTML(*.htm;*.html)|*.htm;*.html'; en = '|HTML files (*.htm;*.html)|*.htm;*.html'")
		+ НСтр("ru = '|Картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'; en = '|Pictures (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'");
		
	Возврат Фильтр;
	
КонецФункции 	

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку
//
//  ПараметрыДобавления - Структура:
//       * ПолноеИмяФайла - Строка - Необязательный. Полный путь и имя файла на клиенте.
//             Если не указан, то будет открыт синхронный диалог для выбора файла.
//       * ВладелецФайла - ЛюбаяСсылка - владелец файла.
//       * УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы для хранения файла.
//       * ИмяСоздаваемогоФайла - Строка - Необязательный. Новое имя файла.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлДобавлен - Булево - успешно ли выполнена операция.
//       * ФайлСсылка - СправочникСсылка.Файлы
//       * ТекстОшибки - Строка
//
Функция ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыВыполнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлДобавлен", Ложь);
	Результат.Вставить("ФайлСсылка",   Неопределено);
	Результат.Вставить("ТекстОшибки",  "");
	
	Если Не ПараметрыВыполнения.Свойство("ПолноеИмяФайла") Тогда
		// Загрузить из файловой системы с расширением работы с файлами.
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор = Истина;
		
		Если ПараметрыВыполнения.ДобавлениеОригинала Тогда 
			СписокРасширенийСканКопийОригиналов = 
				ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
				
			СтрокаРасширений = ""; ФильтрПоРасширениям = "";
			СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, " ", ",");
			СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, ";", ",");
			МассивРасширенийСканКопий = СтрРазделить(СписокРасширенийСканКопийОригиналов, ",", Ложь);
			
			Для Каждого РасширениеСтр Из МассивРасширенийСканКопий Цикл
				СтрокаРасширений = СтрокаРасширений + РасширениеСтр + ", ";
				ФильтрПоРасширениям = ФильтрПоРасширениям + "*." + РасширениеСтр + ";";
			КонецЦикла;
			
			ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор скан-копии оригинала документа'; en = 'Selection of scanned copies of the original document'");
			
			Если ЗначениеЗаполнено(СтрокаРасширений) Тогда 
				СтрокаРасширений = Лев(СтрокаРасширений, СтрДлина(СтрокаРасширений) - 2);
				ФильтрПоРасширениям = Лев(ФильтрПоРасширениям, СтрДлина(ФильтрПоРасширениям) - 1);
				ДиалогВыбораФайла.Фильтр = СтрШаблон(НСтр("ru = 'Скан-копии (%1)|%2|Все файлы (*.*)|*.*'; en = 'Scanned copies (%1) |%2| All files (*. *) | *. *'"),
					СтрокаРасширений, ФильтрПоРасширениям);
			Иначе 
				ДиалогВыбораФайла.Фильтр = ПолучитьФильтрДляДиалогаВыбораФайла();
			КонецЕсли;
		Иначе	
			ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор файла'; en = 'Select file'");
			ДиалогВыбораФайла.Фильтр = ПолучитьФильтрДляДиалогаВыбораФайла();
		КонецЕсли;	
		
		ДиалогВыбораФайла.Каталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(ПараметрыВыполнения.ВладелецФайла);
		Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ДиалогВыбораФайла.ВыбранныеФайлы.Количество() = 1 Тогда
			
			ПолноеИмяФайла = ДиалогВыбораФайла.ВыбранныеФайлы[0];
			
		Иначе
			
			МассивИменФайлов = Новый Массив;
			
			МассивФайлов = ДиалогВыбораФайла.ВыбранныеФайлы;
			Для Каждого ИмяФайла Из МассивФайлов Цикл
				МассивИменФайлов.Добавить(ИмяФайла);
			КонецЦикла;
			
			ПараметрыИмпорта = Новый Структура;
			ПараметрыИмпорта.Вставить("ПапкаДляДобавления", ПараметрыВыполнения.ВладелецФайла);
			ПараметрыИмпорта.Вставить("МассивИменФайлов", МассивИменФайлов);
			
			Если ПараметрыВыполнения.ФормаВладелец.ИмяФормы = "Справочник.Проекты.Форма.ФайлыПоПроекту" Тогда 
				ПараметрыИмпорта.Вставить("Проект", ПараметрыВыполнения.ФормаВладелец.Параметры.Проект);
			КонецЕсли;
			
			ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта);
			Возврат Результат;
			
		КонецЕсли;	
		
		ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ИмяСоздаваемогоФайла") Тогда
		ПараметрыВыполнения.Вставить("ИмяСоздаваемогоФайла", Неопределено);
	КонецЕсли;
	
	ФайлКлиента = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(ФайлКлиента);
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	ИзвлекатьТекстыФайловНаКлиенте = НЕ ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере;
	Если ИзвлекатьТекстыФайловНаКлиенте Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
			ФайлКлиента.ПолноеИмя,
			ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	Если ПараметрыВыполнения.ИмяСоздаваемогоФайла <> Неопределено Тогда
		ИмяСоздания = ПараметрыВыполнения.ИмяСоздаваемогоФайла;
	Иначе
		ИмяСоздания = ФайлКлиента.ИмяБезРасширения;
	КонецЕсли;
	
	ИмяФайла  = ИмяСоздания + ФайлКлиента.Расширение;
	РазмерВМб = ФайлКлиента.Размер() / (1024 * 1024);
	
	ТекстСостояния = СтрШаблон(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		           |Пожалуйста, подождите...';
		           |en = 'Saving file ""%1"" (%2 mb). 
		           |Please wait ...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстСостояния);
	
	// Помещение файла во временное хранилище.
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ФайлКлиента.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор);
	Если НЕ ФайлыПомещены Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыРаспознавания = Неопределено;
	Если ПараметрыВыполнения.Свойство("ПараметрыРаспознавания") Тогда
		ПараметрыРаспознавания = ПараметрыВыполнения.ПараметрыРаспознавания;
	КонецЕсли;	
	
	СписокКатегорий = Неопределено;
	Если ПараметрыВыполнения.Свойство("СписокКатегорий") Тогда
		СписокКатегорий = ПараметрыВыполнения.СписокКатегорий;
	КонецЕсли;	
	
	ДополнительныеПараметры = Неопределено;
	Если ПараметрыВыполнения.ФормаВладелец.ИмяФормы = "Справочник.Проекты.Форма.ФайлыПоПроекту" Тогда 
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Проект", ПараметрыВыполнения.ФормаВладелец.Параметры.Проект);
	КонецЕсли;	
	
	СтруктураРазбораЭД = Неопределено;
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД")
		И Нрег(ФайлКлиента.Расширение) = ".xml" 
		И ПараметрыВыполнения.ФормаВладелец.ИмяФормы = "Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента" Тогда 
		
		СтруктураРазбораЭД = ОбменСКонтрагентамиДОВызовСервера.СформироватьДеревоРазбора(ФайлКлиента.ПолноеИмя);
		Если ТипЗнч(СтруктураРазбораЭД) = Тип("Структура") Тогда
			Если СтруктураРазбораЭД.Свойство("ИмяСоздания")
				И ЗначениеЗаполнено(СтруктураРазбораЭД.ИмяСоздания) Тогда
				ИмяСоздания = СтруктураРазбораЭД.ИмяСоздания;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	// Создание карточки Файла в БД.
	Попытка
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ФайлКлиента);
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
		СведенияОФайле.ЗаписатьВИсторию = Истина;
		СведенияОФайле.ИмяБезРасширения = ИмяСоздания;
		СведенияОФайле.ПараметрыРаспознавания = ПараметрыРаспознавания;
		СведенияОФайле.СписокКатегорий = СписокКатегорий;
		СведенияОФайле.ДополнительныеПараметры = ДополнительныеПараметры;
		
		Результат.ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ПараметрыВыполнения.ВладелецФайла, СведенияОФайле);
		
		Результат.ФайлДобавлен = Истина;
	Исключение
		Результат.ТекстОшибки = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(ИнформацияОбОшибке());
	КонецПопытки;
	Состояние();
	
	Если Результат.ТекстОшибки <> "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл",     Результат.ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие",  "СозданФайл");
	
	Если ТипЗнч(СтруктураРазбораЭД) = Тип("Структура") Тогда
		Если СтруктураРазбораЭД.Свойство("СуммаДокумента")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаДокумента) Тогда
			ПараметрыОповещения.Вставить("СуммаДокумента",СтруктураРазбораЭД.СуммаДокумента);
		КонецЕсли; 
		Если СтруктураРазбораЭД.Свойство("СуммаНДС")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаНДС) Тогда
			ПараметрыОповещения.Вставить("СуммаНДС",СтруктураРазбораЭД.СуммаНДС);
		КонецЕсли; 
		Если СтруктураРазбораЭД.Свойство("Валюта")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.Валюта) Тогда
			ПараметрыОповещения.Вставить("Валюта",СтруктураРазбораЭД.Валюта);
		КонецЕсли; 
	КонецЕсли; 
	
	ИдентификаторРодительскойФормы = ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор;
	Если ПараметрыВыполнения.ФормаВладелец.ИмяФормы = "Справочник.Файлы.Форма.РезультатСканирования" Тогда
		ИдентификаторРодительскойФормы = ПараметрыВыполнения.ФормаВладелец.ИдентификаторРодительскойФормы;
	КонецЕсли;	
	ПараметрыОповещения.Вставить("ИдентификаторРодительскойФормы", 
		ИдентификаторРодительскойФормы);
		
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'; en = 'Added:'"),
		ПолучитьНавигационнуюСсылку(Результат.ФайлСсылка),
		Результат.ФайлСсылка,
		БиблиотекаКартинок.Информация32);
	
	Возврат Результат;
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура ДобавитьИзФайловойСистемыБезРасширения(ПараметрыВыполнения) Экспорт
	
	// Загрузить из файловой системы без расширения работы с файлами (веб-клиент).
	Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(
		Обработчик,
		ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор,
		"",
		Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьИзФайловойСистемыБезРасширенияПослеЗагрузкиФайла(ПомещенныеФайлы, ПараметрыВыполнения) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ОписаниеПереданногоФайла = ПомещенныеФайлы[0];
	ИмяФайла                      = ОписаниеПереданногоФайла.Имя;
	
	ТолькоИмя = "";
	ТолькоРасширение = "";
	
	СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	
	ТолькоИмя 		 = СтруктураПути.ИмяБезРасширения;
	ТолькоРасширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
	
	Если Не ЗначениеЗаполнено(ТолькоИмя) И Не ЗначениеЗаполнено(ТолькоРасширение) Тогда
		
		ТекстВопроса = НСтр("ru = 'Необходимо указать файл с расширением.'; en = 'You must specify a file with extension.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru = 'Выбрать другой файл'; en = 'Choose another file'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДобавлениеОригинала Тогда 
		СписокРасширенийСканКопийОригиналов = 
			ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
			
		СтрокаРасширений = ""; ФильтрПоРасширениям = "";
		СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, " ", ",");
		СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, ";", ",");
		МассивРасширенийСканКопий = СтрРазделить(СписокРасширенийСканКопийОригиналов, ",", Ложь);
		
		Если МассивРасширенийСканКопий.Найти(ТолькоРасширение) = Неопределено Тогда 
			Для Каждого РасширениеСтр Из МассивРасширенийСканКопий Цикл
				СтрокаРасширений = СтрокаРасширений + РасширениеСтр + ", ";
			КонецЦикла;
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Выбранный файл не является скан-копией.
                                 |Необходимо выбрать файл с расширением: %1';
                                 |en = 'The selected file is not a scanned copy.
                                 |You must select a file with the extension: %1'"), СтрокаРасширений);
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru = 'Выбрать другой файл'; en = 'Choose another file'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыРаспознавания = Неопределено;
	Если ПараметрыВыполнения.Свойство("ПараметрыРаспознавания") Тогда
		ПараметрыРаспознавания = ПараметрыВыполнения.ПараметрыРаспознавания;
	КонецЕсли;	
	
	СписокКатегорий = Неопределено;
	Если ПараметрыВыполнения.Свойство("СписокКатегорий") Тогда
		СписокКатегорий = ПараметрыВыполнения.СписокКатегорий;
	КонецЕсли;	
	
	// Создание карточки файла в БД.
	ТекстОшибки = "";
	Попытка
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеПереданногоФайла.Хранение;
		СведенияОФайле.ИмяБезРасширения = ТолькоИмя;
		СведенияОФайле.РасширениеБезТочки = ТолькоРасширение;
		СведенияОФайле.СписокКатегорий = СписокКатегорий;
		СведенияОФайле.ВремяИзменения = ТекущаяДата();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ПараметрыВыполнения.ВладелецФайла, СведенияОФайле);
		
	Исключение
		ТекстОшибки = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(ИнформацияОбОшибке());
	КонецПопытки;
	Если ТекстОшибки <> "" Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл", ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие", "СозданФайл");
	
	ИдентификаторРодительскойФормы = Неопределено;
	ПараметрыВыполнения.Свойство("ИдентификаторРодительскойФормы", ИдентификаторРодительскойФормы);
	
	Если ИдентификаторРодительскойФормы = Неопределено Тогда
		ИдентификаторРодительскойФормы = ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор;
		Если ПараметрыВыполнения.ФормаВладелец.ИмяФормы = "Справочник.Файлы.Форма.РезультатСканирования" Тогда
			ИдентификаторРодительскойФормы = ПараметрыВыполнения.ФормаВладелец.ИдентификаторРодительскойФормы;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("ИдентификаторРодительскойФормы", ИдентификаторРодительскойФормы);
	
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'; en = 'Added:'"),
		ПолучитьНавигационнуюСсылку(ФайлСсылка),
		ФайлСсылка,
		БиблиотекаКартинок.Информация32);
	
	Если ПараметрыВыполнения.НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ФайлСсылка);
		ПараметрыФормы.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		
		ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикРезультата);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Повторить Тогда
		ДобавитьИзФайловойСистемыБезРасширения(ПараметрыВыполнения);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог сканирования и просмотра картинки.
Процедура ДобавитьСоСканера(ПараметрыВыполнения) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	ПараметрыФормы.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", ПараметрыВыполнения.НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	Если ПараметрыВыполнения.Свойство("ИдентификаторРодительскойФормы") Тогда
		ПараметрыФормы.Вставить("ИдентификаторРодительскойФормы", ПараметрыВыполнения.ИдентификаторРодительскойФормы);
	КонецЕсли;	
	
	ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
	ОткрытьФорму("Справочник.Файлы.Форма.РезультатСканирования", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение Файла на диск

// Сохранение на диск Файла
// 
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ДанныеФайла  - структура с данными файла.
//   УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла.
//
Процедура СохранитьКак(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		СохранитьКакСРасширением(ПараметрыВыполнения);
	Иначе
		СохранитьКакБезРасширения(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширением(ПараметрыВыполнения) Экспорт
	
	// Проверим - если файл уже есть в кэше, и он новее чем в базе - дадим диалог с выбором.
	ПараметрыВыполнения.Вставить("ПутьКФайлуВКэше", "");
	Если ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ПараметрыВыполнения.Вставить("ПолноеИмяФайла", "");
		ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			
			ДатаФайлаВБазе = ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная;
			
			ФайлВерсии = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
			ДатаФайлаНаДиске = ФайлВерсии.ПолучитьУниверсальноеВремяИзменения();
			
			Если ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны).
				
				ИспользоватьВариант = 1; // На основе файла на локальном компьютере
				СохранитьКакСРасширениемПослеОтветаНаВопросДатаНовее(ИспользоватьВариант, ПараметрыВыполнения);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СохранитьКакСРасширениемПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПослеОтветаНаВопросДатаНовее(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Или Ответ = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	Если Ответ = 1 Тогда // На основе файла на локальном компьютере.
		ПараметрыВыполнения.ПутьКФайлуВКэше = ПараметрыВыполнения.ПолноеИмяФайла;
	КонецЕсли;
	
	СохранитьКакСРасширениемПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПродолжение(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПутьВыбора", ПараметрыВыполнения.ДанныеФайла.ПапкаДляСохранитьКак);
	Если ПараметрыВыполнения.ПутьВыбора = Неопределено Или ПараметрыВыполнения.ПутьВыбора = "" Тогда
		#Если Не ВебКлиент Тогда
			Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Данная команда не поддерживается в базовой версии.'; en = 'This command is not supported in the basic version.'"));
				ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ПараметрыВыполнения.ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Ложь);
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", "");
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		Обработчик = Новый ОписаниеОповещения("СохранитьКакСРасширениемПослеВыбораРежимаСохранения",
			ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ВыборСохраненияШифрованногоФайла", , , , , ,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		СохранитьКакСРасширениемПослеВыбораРежимаСохранения(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПослеВыбораРежимаСохранения(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов = Результат.РасширениеДляЗашифрованныхФайлов;
		
		Если Результат.СохранятьСРасшифровкой = 1 Тогда
			ПараметрыВыполнения.СохранятьСРасшифровкой = Истина;
		Иначе
			ПараметрыВыполнения.СохранятьСРасшифровкой = Ложь;
		КонецЕсли;
		
	ИначеЕсли Результат <> -1 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.СохранятьСРасшифровкой Тогда
		СохранитьКакСРасширениемПослеРасшифровки(-1, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.ДанныеФайла.Версия,,
		ПараметрыВыполнения.УникальныйИдентификатор);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ИдентификаторФормы",    ПараметрыВыполнения.УникальныйИдентификатор);
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'; en = 'Decrypting a file'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'; en = 'File'"));
	ОписаниеДанных.Вставить("Данные",                СтруктураВозврата.ДвоичныеДанные);
	ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СертификатыШифрования", ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("СохранитьКакСРасширениемПослеРасшифровки", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных <> -1 Тогда
		Если Не ОписаниеДанных.Успех Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
	
		Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
				ПараметрыВыполнения.УникальныйИдентификатор);
		Иначе
			АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
		КонецЕсли;
	Иначе
		АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		
		Если ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия <> ПараметрыВыполнения.ДанныеФайла.Версия Тогда
			АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	Расширение = ПараметрыВыполнения.ДанныеФайла.Расширение;
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован
		И Не ПараметрыВыполнения.СохранятьСРасшифровкой Тогда
		
		Если Не ПустаяСтрока(ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов) Тогда
			ИмяСРасширением = ИмяСРасширением + "." + ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
			Расширение = ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
		КонецЕсли;
	КонецЕсли;
	
	// Выбираем путь к файлу на диске.
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
	ВыборФайла.Расширение = Расширение;
	Фильтр = СтрШаблон(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'; en = 'All files (*.%1) | *.%1'"), Расширение);
	ВыборФайла.Фильтр = Фильтр;
	ВыборФайла.Каталог = ПараметрыВыполнения.ПутьВыбора;
	
	Если Не ВыборФайла.Выбрать() Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Новый Структура);
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	РазмерВМб = ПараметрыВыполнения.ДанныеФайла.Размер / (1024 * 1024);
	
	ТекстПояснения =
	СтрШаблон(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
			       |Пожалуйста, подождите.';
			       |en = 'Saving file ""%1"" (%2 MB) ...
			       |Please wait.'"),
		ИмяФайла, 
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
	Состояние(ТекстПояснения);
	
	Если Файл.Существует() Тогда
		Если ПараметрыВыполнения.ПутьКФайлуВКэше <> ПолноеИмяФайла Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПутьКФайлуВКэше <> "" Тогда
		Если ПараметрыВыполнения.ПутьКФайлуВКэше <> ПолноеИмяФайла Тогда
			КопироватьФайл(ПараметрыВыполнения.ПутьКФайлуВКэше, ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайла);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохраним Файл из БД на диск.
		Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
			
			// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				УдалитьИзВременногоХранилища(АдресФайла);
			КонецЕсли;
			
			НовыйФайл = Новый Файл(ПолноеИмяФайла);
			
			НовыйФайл.УстановитьУниверсальноеВремяИзменения(
				ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная);
			
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Файл успешно сохранен'; en = 'The file was saved successfully'"), , ПолноеИмяФайла);
	
	ПутьВыбораПрежний = ПараметрыВыполнения.ПутьВыбора;
	ПараметрыВыполнения.ПутьВыбора = Файл.Путь;
	Если ПутьВыбораПрежний <> ПараметрыВыполнения.ПутьВыбора Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак", ПараметрыВыполнения.ПутьВыбора);
	КонецЕсли;
	
	Если ПротоколированиеРаботыПользователейКлиентПовтИсп.ПолучитьИспользоватьПротоколированиеРаботыПользователей() Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСохранитьКак(ПараметрыВыполнения.ДанныеФайла.Ссылка, ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла));
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакБезРасширения(ПараметрыВыполнения) Экспорт
	
	АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
		ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	РазмерВМб = ПараметрыВыполнения.ДанныеФайла.Размер / (1024 * 1024);
	
	ТекстСостояния = СтрШаблон(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
			       |Пожалуйста, подождите.';
			       |en = 'Saving file ""%1"" (%2 mb) ... 
			       |Please wait.'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстСостояния);
	
	// Сохраним Файл из БД на диск.
	ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Новый Структура("ПолноеИмяФайла", ИмяФайла));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие проводника с позиционированием на файле.

// Процедура открывает проводник Windows, позиционируясь на Файл
//
// Параметры
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла
//
Процедура КаталогФайла(ОбработчикРезультата, ДанныеФайла) Экспорт
	
	// Если Файл без файла  - эта операция не имеет смысла
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(ОбработчикРезультата);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ПолноеИмяФайла = ФайловыеФункцииКлиент.ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла);
	Если ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыОбработчика.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	Обработчик = Новый ОписаниеОповещения("КаталогФайлаПослеОтветаНаВопросПолучитьФайл", ЭтотОбъект, ПараметрыОбработчика);
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, НСтр("ru= 'Сохранить и открыть каталог'; en = 'Save and open the directory'"));
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, НСтр("ru= 'Отмена'; en = 'Cancel'"));
	ПоказатьВопрос(Обработчик,
		СтрШаблон(НСтр("ru = 'Каталог файла не существует. Возможно, на данном компьютере файл ""%1"" еще не открывался.
			|Сохранить файл на компьютер и открыть его каталог?';
			|en = 'File catalog does not exist. Perhaps file ""%1"" on this computer has not been opened yet.
			|Save file to your computer and open it?'"),

			ИмяФайла),
		КнопкиВопроса);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура КаталогФайлаПослеОтветаНаВопросПолучитьФайл(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("КаталогФайлаПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ПолноеИмяФайла);
	Иначе
		КаталогФайлаПослеПолученияФайлаВРабочийКаталог(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура КаталогФайлаПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> -1 Тогда
		ПараметрыВыполнения.ПолноеИмяФайла = Результат.ПолноеИмяФайла;
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПараметрыВыполнения.ПолноеИмяФайла);
	КонецЕсли;
	
	// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
	Если ЭтоАдресВременногоХранилища(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
		УдалитьИзВременногоХранилища(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Импорт файлов с проверкой размера.

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловПослеПроверкиРазмеров(Результат, ПараметрыВыполнения) Экспорт
	
	Состояние();
	
	Если Результат.Успех = Ложь Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("КоличествоСуммарное", Результат.КоличествоСуммарное);
	Если ПараметрыВыполнения.КоличествоСуммарное = 0 Тогда
		Если ПараметрыВыполнения.РежимЗагрузки Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Иначе
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, НСтр("ru = 'Нет файлов для добавления'; en = 'No files to add'"), Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ПерваяПапкаСТакимЖеИменем", Неопределено);
	ПараметрыВыполнения.Вставить("ПапкаДляДобавленияТекущая", Неопределено);
	ПараметрыВыполнения.Вставить("ВыбранныеФайлыВГраница", ПараметрыВыполнения.ВыбранныеФайлы.Количество()-1);
	ПараметрыВыполнения.Вставить("ВыбранныеФайлыИндекс", -1);
	ПараметрыВыполнения.Вставить("Индикатор", 0);
	ПараметрыВыполнения.Вставить("Счетчик", 0);
	ПараметрыВыполнения.Вставить("МассивФайлов", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивИменФайловСОшибками", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивСтруктурВсехФайлов", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивВсехПапок", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивФайловЭтогоКаталога", Неопределено);
	ПараметрыВыполнения.Вставить("ИмяПапки", Неопределено);
	ПараметрыВыполнения.Вставить("Путь", Неопределено);
	ПараметрыВыполнения.Вставить("ПапкаУжеНайдена", Неопределено);
	ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, ЭтотОбъект, "ИмпортФайловЦиклПродолжитьИмпортПослеВопросовВРекурсии");
	ИмпортФайловЦикл(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦикл(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ВыбранныеФайлыИндекс = ПараметрыВыполнения.ВыбранныеФайлыИндекс + 1;
	Для Индекс = ПараметрыВыполнения.ВыбранныеФайлыИндекс По ПараметрыВыполнения.ВыбранныеФайлыВГраница Цикл
		ПараметрыВыполнения.ВыбранныеФайлыИндекс = Индекс;
		ИмяФайла = ПараметрыВыполнения.ВыбранныеФайлы[Индекс];
		
		ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
		
		ВыбранКаталог = Ложь;
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
		КонецЕсли;
		
		Если ВыбранКаталог Тогда
			ПараметрыВыполнения.Путь = ИмяФайла.Значение;
			ПараметрыВыполнения.МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПараметрыВыполнения.ПсевдоФайловаяСистема, ПараметрыВыполнения.Путь);
			
			ПараметрыВыполнения.ИмяПапки = ВыбранныйФайл.Имя;
			
			ПараметрыВыполнения.ПапкаУжеНайдена = Ложь;
			
			Если РаботаСФайламиВызовСервера.ЕстьПапкаСТакимИменем(ПараметрыВыполнения.ИмяПапки, ПараметрыВыполнения.Владелец, 
				ПараметрыВыполнения.ПерваяПапкаСТакимЖеИменем) Тогда
				Если ПараметрыВыполнения.РежимЗагрузки Тогда
					ПараметрыВыполнения.ПапкаУжеНайдена = Истина;
					ПараметрыВыполнения.ПапкаДляДобавленияТекущая = ПараметрыВыполнения.ПерваяПапкаСТакимЖеИменем;
				Иначе
					ТекстВопроса = СтрШаблон(
						НСтр("ru = 'Папка ""%1"" уже существует.
						           |
						           |Продолжить импорт папки?';
						           |en = 'The folder ""%1"" already exists.
						           |
						           |Continue importing directory?'"),
						ПараметрыВыполнения.ИмяПапки);
					Обработчик = Новый ОписаниеОповещения("ИмпортФайловЦиклПослеОтветаНаВопросПродолжить", ЭтотОбъект, ПараметрыВыполнения);
					ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ИмпортФайловЦиклПродолжитьИмпорт(ПараметрыВыполнения);
			Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.МассивФайлов.Добавить(ВыбранныйФайл);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыВыполнения.МассивФайлов.Количество() <> 0 Тогда
		// Собственно импорт 
		ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, ЭтотОбъект, "ИмпортФайловПослеЦиклаПослеВопросовВРекурсии");
		ИмпортФайловРекурсивно(ПараметрыВыполнения.Владелец, ПараметрыВыполнения.МассивФайлов, ПараметрыВыполнения);
		
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмпортФайловПослеЦиклаПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦиклПослеОтветаНаВопросПродолжить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ИмпортФайловЦиклПродолжитьИмпорт(ПараметрыВыполнения);
	КонецЕсли;
	
	ИмпортФайловЦикл(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦиклПродолжитьИмпорт(ПараметрыВыполнения)
	
	Если Не ПараметрыВыполнения.ПапкаУжеНайдена Тогда
		ПараметрыВыполнения.ПапкаДляДобавленияТекущая 
			= РаботаСФайламиВызовСервера.СправочникиПапкиСоздатьЭлемент(ПараметрыВыполнения.ИмяПапки, 
				ПараметрыВыполнения.Владелец);
	КонецЕсли;
	
	// Собственно импорт
	ИмпортФайловРекурсивно(ПараметрыВыполнения.ПапкаДляДобавленияТекущая, 
		ПараметрыВыполнения.МассивФайловЭтогоКаталога, ПараметрыВыполнения);
	
	Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.МассивВсехПапок.Добавить(ПараметрыВыполнения.Путь);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦиклПродолжитьИмпортПослеВопросовВРекурсии(Результат, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Ложь;
	ПараметрыВыполнения.МассивВсехПапок.Добавить(ПараметрыВыполнения.Путь);
	ИмпортФайловЦикл(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловПослеЦиклаПослеВопросовВРекурсии(Результат, ПараметрыВыполнения) Экспорт
	
	ИмпортФайловПослеЦиклаПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловПослеЦиклаПродолжение(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество() > 1 Тогда
		
		ТекстСостояния = СтрШаблон(
			НСтр("ru = 'Импорт файлов завершен. Импортировано файлов: %1'; en = 'File import completed. Imported files: %1'"), Строка(ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество()) );
			
		Если ПараметрыВыполнения.РежимЗагрузки Тогда
			ТекстСостояния = СтрШаблон(
				НСтр("ru = 'Загрузка файлов завершена. Загружено файлов: %1'; en = 'File loading is complete. Loaded files: %1'"), Строка(ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество()) );
		КонецЕсли;
		
		Состояние(ТекстСостояния);
	Иначе
		Состояние();
	КонецЕсли;
	
	Если ПараметрыВыполнения.УдалятьФайлыПослеДобавления = Истина Тогда
		ФайловыеФункцииСлужебныйКлиентСервер.УдалитьФайлыПослеДобавления(
			ПараметрыВыполнения.МассивСтруктурВсехФайлов, ПараметрыВыполнения.МассивВсехПапок, ПараметрыВыполнения.РежимЗагрузки);
	КонецЕсли;
	
	Если ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество() = 1 Тогда
		Элемент0 = ПараметрыВыполнения.МассивСтруктурВсехФайлов[0];
		Ссылка = ПолучитьНавигационнуюСсылку(Элемент0.Файл);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			Ссылка,
			Элемент0.Файл,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Вывод сообщений об ошибках
	Если ПараметрыВыполнения.МассивИменФайловСОшибками.Количество() <> 0 Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("МассивИменФайловСОшибками", ПараметрыВыполнения.МассивИменФайловСОшибками);
		Если ПараметрыВыполнения.РежимЗагрузки Тогда
			Параметры.Вставить("Заголовок", НСтр("ru = 'Отчет о загрузке файлов'; en = 'File import report'"));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаОтчета", Параметры);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ВыбранныеФайлы.Количество() <> 1 Тогда
		ПараметрыВыполнения.ПапкаДляДобавленияТекущая = Неопределено;
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверяет размер файлов.

// Проверить Предельный Размер Файлов - вернет Ложь, если есть файлы, превышающие предельный размер,
//   и пользователь в диалоге предупреждения о наличии таких файлов выбрал "Отмена".
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПараметрыПроверки - Структура - со свойствами:
//    * ВыбранныеФайлы - Массив - массив объектов "Файл".
//    * Рекурсивно - Булево - Рекурсивно обходить подкаталоги.
//    * ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив
//                                             строк (подкаталоги и файлы).
//    * РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов).
//
// Возвращаемое значение:
//   Структура - результат:
//       * Успех               - Булево - Успешно ли выполнена операция.
//       * КоличествоСуммарное - Число  - Количество импортированных файлов.
//
Процедура ПроверитьПредельныйРазмерФайлов(ОбработчикРезультата, ПараметрыПроверки) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("КоличествоСуммарное", 0);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	
	МассивСлишкомБольшихФайлов = Новый Массив;
	
	Путь = "";
	
	МассивФайлов = Новый Массив;
	
	Для Каждого ИмяФайла Из ПараметрыПроверки.ВыбранныеФайлы Цикл
		
		Путь = ИмяФайла.Значение;
		ВыбранныйФайл = Новый Файл(Путь);
		
		ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
		ВыбранКаталог = Ложь;
		
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
		КонецЕсли;
		
		Если ВыбранКаталог Тогда
			Состояние(СтрШаблон(
				НСтр("ru = 'Идет сбор информации о каталоге
				           |""%1"".
				           |Пожалуйста, подождите.';
				           |en = 'Collecting information about directory ""%1"".
				           |Please wait...'"),
				Путь));
			
			МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПараметрыПроверки.ПсевдоФайловаяСистема, Путь);
			НайтиСлишкомБольшиеФайлы(МассивФайловЭтогоКаталога, МассивСлишкомБольшихФайлов, ПараметрыПроверки.Рекурсивно, 
				ПараметрыВыполнения.КоличествоСуммарное, ПараметрыПроверки.ПсевдоФайловаяСистема);
		Иначе
			МассивФайлов.Добавить(ВыбранныйФайл);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		НайтиСлишкомБольшиеФайлы(МассивФайлов, МассивСлишкомБольшихФайлов, ПараметрыПроверки.Рекурсивно, 
			ПараметрыВыполнения.КоличествоСуммарное, ПараметрыПроверки.ПсевдоФайловаяСистема);
	КонецЕсли;
	
	// Был хоть один слишком большой файл
	Если МассивСлишкомБольшихФайлов.Количество() <> 0 Тогда 
		ФайлыБольшие = Новый СписокЗначений;
		Параметры = Новый Структура;
		
		Для Каждого Файл Из МассивСлишкомБольшихФайлов Цикл
			БольшойФайл = Новый Файл(Файл);
			РазмерФайлаВМб = Цел(БольшойФайл.Размер() / (1024 * 1024));
			ТекстСтроки = СтрШаблон(НСтр("ru = '%1 (%2 МБ)'; en = '%1 (%2 MB)'"), Строка(Файл), Строка(РазмерФайлаВМб));
			ФайлыБольшие.Добавить(ТекстСтроки);
		КонецЦикла;
		
		Параметры.Вставить("ФайлыБольшие", ФайлыБольшие);
		Параметры.Вставить("РежимЗагрузки", ПараметрыПроверки.РежимЗагрузки);
		Параметры.Вставить("Заголовок", НСтр("ru = 'Предупреждение при загрузке файлов'; en = 'Warning when loading files'"));
		
		Обработчик = Новый ОписаниеОповещения("ПроверитьПредельныйРазмерФайловПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФорму("Справочник.Файлы.Форма.ВопросПриИмпортеФайлов", Параметры, , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Успех = Истина;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьПредельныйРазмерФайловПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Успех = (Ответ = КодВозвратаДиалога.ОК);
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загружает структуру файлов и каталогов с диска в программу.

// Возвращаемое значение:
//  Структура - со свойствами:
//    * ОбработчикРезультата      - ОписаниеОповещения - обработчик, которому нужно передать результат импорта.
//    * Владелец                  - ЛюбаяСсылка - объект-владелец, к которому добавляются импортированные файлы.
//    * ВыбранныеФайлы            - СписокЗначений - импортируемые объекты Файл.
//    * Индикатор                 - Число - число от 0 до 100 - прогресс выполнения.
//    * Комментарий               - Строка - Комментарий.
//    * ХранитьВерсии             - Булево - Хранить версии.
//    * УдалятьФайлыПослеДобавления - Булево - Удалять файлы ВыбранныеФайлы после завершения импорта.
//    * Рекурсивно                - Булево - Рекурсивно обходить подкаталоги.
//    * ИдентификаторФормы        - УникальныйИдентификатор - идентификатор формы.
//    * ПсевдоФайловаяСистема     - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив
//                                                 строк (подкаталоги и файлы).
//    * РежимЗагрузки             - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов).
//    * Кодировка                 - Строка - кодировка для текстовых файлов.
//    * ДобавленныеФайлы          - Массив - Добавленные файлы, выходной параметр.
//
Функция ПараметрыИмпортаФайлов() Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата");
	ПараметрыВыполнения.Вставить("Владелец");      
	ПараметрыВыполнения.Вставить("ВыбранныеФайлы"); 
	ПараметрыВыполнения.Вставить("Комментарий");
	ПараметрыВыполнения.Вставить("ХранитьВерсии");
	ПараметрыВыполнения.Вставить("УдалятьФайлыПослеДобавления");
	ПараметрыВыполнения.Вставить("Рекурсивно");
	ПараметрыВыполнения.Вставить("ИдентификаторФормы");
	ПараметрыВыполнения.Вставить("ПсевдоФайловаяСистема", Новый Соответствие);
	ПараметрыВыполнения.Вставить("РежимЗагрузки", Ложь);
	ПараметрыВыполнения.Вставить("Кодировка");
	ПараметрыВыполнения.Вставить("ДобавленныеФайлы", Новый Массив);
	ПараметрыВыполнения.Вставить("ПараметрыРаспознавания");
	ПараметрыВыполнения.Вставить("СписокКатегорий");
	ПараметрыВыполнения.Вставить("Проект");
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его, если каталог - создает группу и рекурсивно вызывает саму себя.
//
// Параметры:
//  ПараметрыВыполнения   - Структура - со свойствами:
//    * ОбработчикРезультата      - ОписаниеОповещения, Структура - обработчик, которому нужно передать результат
//                                  импорта.
//    * Владелец                  - ЛюбаяСсылка - владелец файла.
//    * ВыбранныеФайлы            - Массив, СписокЗначений - объекты Файл.
//    * Индикатор                 - Число - число от 0 до 100 - прогресс выполнения.
//    * МассивИменФайловСОшибками - Массив - Массив имен файлов с ошибками.
//    * МассивСтруктурВсехФайлов  - Массив - Массив структур всех файлов.
//    * Комментарий               - Строка - Комментарий.
//    * ХранитьВерсии             - Булево - Хранить версии.
//    * УдалятьФайлыПослеДобавления - Булево - Удалять файлы ВыбранныеФайлы после завершения импорта.
//    * Рекурсивно                - Булево - Рекурсивно обходить подкаталоги.
//    * КоличествоСуммарное       - Число - Количество суммарное импортированных файлов.
//    * Счетчик                   - Число - Счетчик обработанных файлов (не обязательно файл будет загружен).
//    * ИдентификаторФормы        - УникальныйИдентификатор - идентификатор формы.
//    * ПсевдоФайловаяСистема     - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив
//                                                 строк (подкаталоги и файлы).
//    * ДобавленныеФайлы          - Массив - Добавленные файлы, выходной параметр.
//    * МассивВсехПапок           - Массив - Массив всех папок.
//    * РежимЗагрузки             - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов).
//    * Кодировка                 - Строка - кодировка для текстовых файлов.
//    * СписокКатегорий           - Массив - категории
//
Процедура ИмпортФайловРекурсивно(Владелец, ВыбранныеФайлы, ПараметрыВыполнения)
	
	СлужебныеПараметры = Новый Структура;
	Для Каждого КлючИЗначение Из ПараметрыВыполнения Цикл
		СлужебныеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	СлужебныеПараметры.ОбработчикРезультата = ПараметрыВыполнения;
	СлужебныеПараметры.Владелец = Владелец;
	СлужебныеПараметры.ВыбранныеФайлы = ВыбранныеФайлы;
	
	СлужебныеПараметры.Вставить("МассивПапокДляВопросаПапкаУжеСуществует", Новый Массив);
	ИмпортФайловРекурсивноБезДиалогов(СлужебныеПараметры.Владелец, СлужебныеПараметры.ВыбранныеФайлы, СлужебныеПараметры, Истина); 
	Если СлужебныеПараметры.МассивПапокДляВопросаПапкаУжеСуществует.Количество() = 0 Тогда
		// Задавать вопрос не требуется.
		ВернутьРезультат(СлужебныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	// По мере ответов на вопросы папки из ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует 
	// записываются в ПараметрыВыполнения.ВыбранныеФайлы.
	// Затем рекурсия перезапускается.
	СлужебныеПараметры.ВыбранныеФайлы = Новый Массив;
	СлужебныеПараметры.Вставить("ПапкаДляДобавленияВВыбранныеФайлы", Неопределено);
	ИмпортФайловРекурсивноЗадатьСледующийВопрос(СлужебныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловРекурсивноЗадатьСледующийВопрос(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
	ПараметрыВыполнения.ПапкаДляДобавленияВВыбранныеФайлы = ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует[0];
	ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Удалить(0);
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Папка ""%1"" уже существует.
		           |Продолжить импорт папки?';
		           |en = 'The folder ""%1"" already exists. 
		           |
		           |Continue importing directory?'"),
		ПараметрыВыполнения.ПапкаДляДобавленияВВыбранныеФайлы.Имя);
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловРекурсивноПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловРекурсивноПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПараметрыВыполнения.ВыбранныеФайлы.Добавить(ПараметрыВыполнения.ПапкаДляДобавленияВВыбранныеФайлы);
	КонецЕсли;
	
	// После ответов на все вопросы рекурсия перезапускается.
	Если ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Количество() = 0 Тогда
		
		ИмпортФайловРекурсивноБезДиалогов(ПараметрыВыполнения.Владелец,	ПараметрыВыполнения.ВыбранныеФайлы, ПараметрыВыполнения,
			Ложь); // ЗадаватьВопросПапкаУжеСуществует (используется только для первого уровня рекурсии).
		
		Если ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Количество() = 0 Тогда
			// Вопросов больше не возникло.
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
			Возврат;
		Иначе
			// Возникли еще вопросы.
			ПараметрыВыполнения.ВыбранныеФайлы = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ИмпортФайловРекурсивноЗадатьСледующийВопрос(ПараметрыВыполнения);
	
КонецПроцедуры

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его, если каталог - создает группу и рекурсивно вызывает саму себя.
//
// Параметры:
//  Владелец            - ЛюбаяСсылка - владелец файла.
//  ВыбранныеФайлы      - Массив - массив объектов Файл.
//  ПараметрыВыполнения - Структура - см. одноименный параметр в ИмпортФайловРекурсивно.
//  ЗадаватьВопросПапкаУжеСуществует - Булево - Истина только для первого уровня рекурсии.
//
Процедура ИмпортФайловРекурсивноБезДиалогов(Знач Владелец, Знач ВыбранныеФайлы, ПараметрыВыполнения, Знач ЗадаватьВопросПапкаУжеСуществует)
	
	Перем ПерваяПапкаСТакимЖеИменем;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		Если Не ВыбранныйФайл.Существует() Тогда
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", НСтр("ru = 'Файл отсутствует на диске.'; en = 'The file does not exist on disk.'"));
			ПараметрыВыполнения.МассивИменФайловСОшибками.Добавить(Запись);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если ВыбранныйФайл.Расширение = ".lnk" Тогда
				ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
			КонецЕсли;
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				
				Если ПараметрыВыполнения.Рекурсивно = Истина Тогда
					НовыйПуть = Строка(ВыбранныйФайл.Путь);
					НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть);
					НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
					МассивФайлов = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПараметрыВыполнения.ПсевдоФайловаяСистема, НовыйПуть);
					
					// Создаем группу в справочнике - эквивалент папки на диске.
					Если МассивФайлов.Количество() <> 0 Тогда
						ИмяФайла = ВыбранныйФайл.Имя;
						
						ПапкаУжеНайдена = Ложь;
						
						Если РаботаСФайламиВызовСервера.ЕстьПапкаСТакимИменем(ИмяФайла, Владелец, ПерваяПапкаСТакимЖеИменем) Тогда
							
							Если ПараметрыВыполнения.РежимЗагрузки Тогда
								ПапкаУжеНайдена = Истина;
								ПапкаФайловСсылка = ПерваяПапкаСТакимЖеИменем;
							Иначе
								Если ЗадаватьВопросПапкаУжеСуществует Тогда
									ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Добавить(ВыбранныйФайл);
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ПапкаУжеНайдена Тогда
							ПапкаФайловСсылка = РаботаСФайламиВызовСервера.СправочникиПапкиСоздатьЭлемент(ИмяФайла, Владелец);
						КонецЕсли;
						
						// Параметр ЗадаватьВопросПапкаУжеСуществует нужен, чтобы не задавать вопрос на 1 уровне рекурсии,
						// когда обходятся папки, для которых уже получен положительный ответ.
						ИмпортФайловРекурсивноБезДиалогов(ПапкаФайловСсылка, МассивФайлов, ПараметрыВыполнения, Истина); 
						ПараметрыВыполнения.МассивВсехПапок.Добавить(НовыйПуть);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(
			          ВыбранныйФайл, Ложь, ПараметрыВыполнения.МассивИменФайловСОшибками) Тогда
				Продолжить;
			КонецЕсли;
			
			// Обновим индикатор прогресса.
			ПараметрыВыполнения.Счетчик = ПараметрыВыполнения.Счетчик + 1;
			// Считаем проценты
			ПараметрыВыполнения.Индикатор = ПараметрыВыполнения.Счетчик * 100 / ПараметрыВыполнения.КоличествоСуммарное;
			РазмерВМб = ВыбранныйФайл.Размер() / (1024 * 1024);
			НадписьПодробнее = СтрШаблон(
				НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'; en = 'Processing file ""%1"" (%2 MB) ...'"),
				ВыбранныйФайл.Имя, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
			ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'; en = 'Importing files from disk...'");
			Если ПараметрыВыполнения.РежимЗагрузки Тогда
				ТекстСостояния = НСтр("ru = 'Загрузка файлов с диска...'; en = 'Loading files from disk ...'");
			КонецЕсли;
			
			Состояние(ТекстСостояния,
				ПараметрыВыполнения.Индикатор,
				НадписьПодробнее,
				БиблиотекаКартинок.Информация32);
			
			// Создаем Элемент справочника Файлы.
			ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
			Расширение = ВыбранныйФайл.Расширение;
			
			Если ПараметрыВыполнения.РежимЗагрузки Тогда
				Если РаботаСФайламиВызовСервера.ЕстьФайлСТакимИменем(ИмяБезРасширения, Владелец) Тогда
					Запись = Новый Структура;
					Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
					Запись.Вставить("Ошибка", НСтр("ru = 'Файл с таким именем уже есть в хранилище файлов.'; en = 'File with the same name already exists in the file storage.'"));
					ПараметрыВыполнения.МассивИменФайловСОшибками.Добавить(Запись);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			АдресВременногоХранилищаФайла = "";
			
			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыбранныйФайл.ПолноеИмя, "");
			ПомещаемыеФайлы.Добавить(Описание);
			
			ПомещенныеФайлы = Новый Массив;
			
			Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ПараметрыВыполнения.ИдентификаторФормы) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Ошибка помещения файла
					           |""%1""
					           |во временное хранилище.'; en = 'Error putting file ""%1"" to temporary storage.'"),
					ВыбранныйФайл.ПолноеИмя);
			КонецЕсли;
			
			Если ПомещенныеФайлы.Количество() = 1 Тогда
				АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;
			
			Если НЕ ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
				АдресВременногоХранилищаТекста =
					ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ВыбранныйФайл.ПолноеИмя, ПараметрыВыполнения.ИдентификаторФормы, , ПараметрыВыполнения.Кодировка);
			Иначе
				АдресВременногоХранилищаТекста = "";
			КонецЕсли;
			
			// Создаем элемент справочника Файлы.
			ИмпортироватьФайл(ВыбранныйФайл, Владелец, ПараметрыВыполнения, АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста);
				
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РаботаСФайламиКлиентСервер.СобытиеЖурналаРегистрации(),
				"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),,Истина);
			
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", СообщениеОбОшибке);
			ПараметрыВыполнения.МассивИменФайловСОшибками.Добавить(Запись);
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИмпортироватьФайл(Знач ВыбранныйФайл, Знач Владелец, ПараметрыВыполнения, 
	Знач АдресВременногоХранилищаФайла, Знач АдресВременногоХранилищаТекста) 
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ВыбранныйФайл);
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	СведенияОФайле.Комментарий = ПараметрыВыполнения.Комментарий;
	СведенияОФайле.Кодировка = ПараметрыВыполнения.Кодировка;
	СведенияОФайле.ПараметрыРаспознавания = ПараметрыВыполнения.ПараметрыРаспознавания;
	СведенияОФайле.СписокКатегорий = ПараметрыВыполнения.СписокКатегорий;
	СведенияОФайле.Проект = ПараметрыВыполнения.Проект;

	ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Владелец, СведенияОФайле);
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	ДобавленныйФайлИПуть = Новый Структура("ФайлСсылка, Путь", ФайлСсылка, ВыбранныйФайл.ПолноеИмя);
	ПараметрыВыполнения.ДобавленныеФайлы.Добавить(ДобавленныйФайлИПуть);
	
	Запись = Новый Структура;
	Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
	Запись.Вставить("Файл", ФайлСсылка);
	ПараметрыВыполнения.МассивСтруктурВсехФайлов.Добавить(Запись);

КонецПроцедуры

// Обход Файлов рекурсивный - для определения размера файлов
// Параметры
//  МассивФайлов - Массив - массив объектов "Файл"
//  МассивСлишкомБольшихФайлов - Массив - массив файлов
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
Процедура ОбходФайловДляПроверкиПредельногоРазмера(
				МассивФайлов,
				МассивСлишкомБольшихФайлов,
				Рекурсивно,
				КоличествоСуммарное,
				Знач ПсевдоФайловаяСистема) Экспорт
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами(
		).МаксимальныйРазмерФайла;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.Существует() Тогда
			
			Если ВыбранныйФайл.Расширение = ".lnk" Тогда
				ВыбранныйФайл = ФайловыеФункцииКлиент.РазыменоватьLnkФайл(ВыбранныйФайл);
			КонецЕсли;
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				
				Если Рекурсивно Тогда
					НовыйПуть = Строка(ВыбранныйФайл.Путь);
					НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть);
					НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
					МассивФайловВКаталоге = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
					
					// Рекурсия
					Если МассивФайловВКаталоге.Количество() <> 0 Тогда
						ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловВКаталоге, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
					КонецЕсли;
				КонецЕсли;
			
				Продолжить;
			КонецЕсли;
			
			КоличествоСуммарное = КоличествоСуммарное + 1;
			
			// Размер файла слишком большой
			Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
				МассивСлишкомБольшихФайлов.Добавить(ВыбранныйФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыбратьРежимИРедактироватьФайл(ОбработчикРезультата, ДанныеФайла, ДоступностьКомандыРедактировать) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОтмена = "Отмена";
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
	СпособОткрытия = ПерсональныеНастройки.ТекстовыеФайлыСпособОткрытия;
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		РасширениеВСписке = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПерсональныеНастройки.ТекстовыеФайлыРасширение,
			ДанныеФайла.Расширение);
		
		Если РасширениеВСписке Тогда
			РаботаСФайламиКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СпособОткрытия = ПерсональныеНастройки.ГрафическиеСхемыСпособОткрытия;
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		РасширениеВСписке = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПерсональныеНастройки.ГрафическиеСхемыРасширение,
			ДанныеФайла.Расширение);
		
		Если РасширениеВСписке Тогда
			РаботаСФайламиКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать
	Если ДанныеФайла.Редактирует.Пустая()
		И ПерсональныеНастройки.СпрашиватьРежимРедактированияПриОткрытииФайла = Истина
		И ДоступностьКомандыРедактировать Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ВыбратьРежимИРедактироватьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия", , , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
	
КонецПроцедуры

Процедура ВыбратьРежимИРедактироватьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОтмена = "Отмена";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		РаботаСФайламиКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОтмена);
		Возврат;
	КонецЕсли;
	
	Если Результат.КакОткрывать = 1 Тогда
		РаботаСФайламиКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатРедактировать);
		Возврат;
	КонецЕсли;
	
	Если Результат.КакОткрывать = 2 Тогда
		РаботаСФайламиКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОткрытьКарточку);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОткрыть);
	
КонецПроцедуры

// Возвращает форму, которая используется при возврате отредактированного 
// файла на сервер
Функция ФормаВозвратаФайла(ФайлСсылка) Экспорт
	
	ПараметрыОткрытия = Новый Структура("ФайлСсылка", ФайлСсылка);
	Возврат ПолучитьФорму("Справочник.Файлы.Форма.ФормаВозвратаФайла", ПараметрыОткрытия);
	
КонецФункции

// Возвращает форму, которая используется при создании нового файла
// для выбора варианта создания
Функция ФормаВыбораВариантаСозданияНовогоФайла(РежимСоздания) Экспорт
	
	Если ПараметрыПриложения["СтандартныеПодсистемы.ЕстьИспользованныеШаблоныФайлов"] = Неопределено Тогда
		ЕстьИспользованныеШаблоны 
			= ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЕстьИспользованныеШаблоны;
		ПараметрыПриложения["СтандартныеПодсистемы.ЕстьИспользованныеШаблоныФайлов"] = ЕстьИспользованныеШаблоны;
	КонецЕсли;
	
	ДоступнаКомандаСканировать = РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать();
	
	ИмяФормы = "Справочник.Файлы.Форма.ФормаНового";
	Если ПараметрыПриложения["СтандартныеПодсистемы.ЕстьИспользованныеШаблоныФайлов"] Тогда
		ИмяФормы = "Справочник.Файлы.Форма.ФормаНовогоСШаблонами";
	Иначе
		ИмяФормы = "Справочник.Файлы.Форма.ФормаНовогоСКнопкойСканера";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДоступнаКомандаСканировать, РежимСоздания", ДоступнаКомандаСканировать, РежимСоздания);
	Возврат ПолучитьФорму(ИмяФормы, ПараметрыФормы);
	
КонецФункции

// Процедура предназначена для сохранения списка файлов
// Параметры:
//  СписокФайлов - Список значений со ссылками на Файлы
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура СохранитьФайлыКак(СписокФайлов, УникальныйИдентификатор) Экспорт
	
	ДанныеСохраняемыхФайлов = РаботаСФайламиВызовСервера.ПолучитьДанныеФайловДляСохраненияФайлов(
		СписокФайлов, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьЗавершение",
		ЭтотОбъект);
	
	СохранитьФайлы(ОписаниеОповещения, ДанныеСохраняемыхФайлов, УникальныйИдентификатор, "ПапкаДляСохраненияПисем");
	
КонецПроцедуры

// продолжение СохранитьВложенияКак
Процедура СохранитьЗавершение(КодВозврата, Параметры) Экспорт 
	
	Если КодВозврата = Истина Тогда 
		ТекстПояснения = НСтр("ru = 'Сохранение файлов завершено.'; en = 'Saving files is complete.'");
		Состояние(ТекстПояснения);
	КонецЕсли;
	
КонецПроцедуры

// Функция раскладывает Строку в массив строк, используя "/\" как разделитель.
Функция РазложитьСтрокуПоСлэшам(Знач Строка) Экспорт
	
	Перем ТекущаяПозиция;
	
	Фрагменты = Новый Массив;
	
	НачальнаяПозиция = 1;
	
	Для ТекущаяПозиция = 1 По СтрДлина(Строка) Цикл
		ТекущийСимвол = Сред(Строка, ТекущаяПозиция, 1);
		Если ТекущийСимвол = "/" Или ТекущийСимвол = "\" Тогда
			ТекущийФрагмент = Сред(Строка, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
			НачальнаяПозиция = ТекущаяПозиция + 1;
			Фрагменты.Добавить(ТекущийФрагмент);
		КонецЕсли;
	КонецЦикла;
	
	Если НачальнаяПозиция <> ТекущаяПозиция Тогда
		ТекущийФрагмент = Сред(Строка, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
		Фрагменты.Добавить(ТекущийФрагмент);
	КонецЕсли;
	
	Возврат Фрагменты;
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемОткрытьФайлВоВременномКаталоге(ПараметрыВыполнения) Экспорт
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	ВременныйКаталог = КаталогВременныхФайлов();
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталог);
	ПолноеИмяФайла = ВременныйКаталог + ИмяФайла;
	
	АдресФайла = "";
	Если ПараметрыВыполнения.ДанныеФайла.Версия <> ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия Тогда
		АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
			ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	РазмерВМб = ПараметрыВыполнения.ДанныеФайла.Размер / (1024 * 1024);
	
	ТекстПояснения =
	СтрШаблон(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
			       |Пожалуйста, подождите.';
			       |en = 'Saving file ""%1"" (%2 mb) ... 
			       |Please wait.'"),
		ИмяФайла, 
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
	Состояние(ТекстПояснения);
	
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайла);
	ПередаваемыеФайлы.Добавить(Описание);
	
	ПутьКФайлу = Файл.Путь;
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
	
	// Сохраним Файл из БД на диск.
	Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
		
		// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
		
		НовыйФайл = Новый Файл(ПолноеИмяФайла);
		
		НовыйФайл.УстановитьТолькоЧтение(Истина);
		
		НовыйФайл.УстановитьУниверсальноеВремяИзменения(
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная);
		
	КонецЕсли;
	
	Состояние();
	
	ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, ПолноеИмяФайла);;
	
КонецПроцедуры

// Проверяет открыт ли файл внешней программой для редактирования.
//
// Параметры:
//	 - ПолныйПутьКФайлу - путь к файлу
//
// Возвращаемые параметры:
//	 - Булево - возвращает Истниа, если файл открыт другой программой на редактирование,
//				иначе возвращает Ложь. Если файл не существует возвращает Истина.
//				Если текущий сеанс работает в режиме ВебКлиента, то всегда
//				возвращает Истина.
//
Функция ФайлОткрытВнешнейПрограммойДляРедактирования(ПолныйПутьКФайлу) Экспорт
	
	#Если ВебКлиент Тогда
		
		Возврат Истина;
		
	#Иначе
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Файл.ПолучитьТолькоЧтение() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		//Проверка файла на то, что он не открыт в какой либо программе на запись.
		//Если файл открыт, то попытка открыть файл на запись в Попытке вызывает исключение.
		Попытка
			ЗаписьТекста = Новый ЗаписьТекста;
			ЗаписьТекста.Открыть(ПолныйПутьКФайлу,,,Истина);
			Возврат Ложь;
		Исключение
			Возврат Истина;
		КонецПопытки;
		
	#КонецЕсли
	
КонецФункции

// Проверяет открыт ли файл внешней программой для просмотра.
//
// Параметры:
//	 - ПолныйПутьКФайлу - путь к файлу
//
// Возвращаемые параметры:
//	 - Булево - возвращает Истниа, если файл открыт другой программой на редактирование,
//				иначе возвращает Ложь. Если файл не существует возвращает Истина.
//				Если текущий сеанс работает в режиме ВебКлиента, то всегда
//				возвращает Истина.
//
Функция ФайлОткрытВнешнейПрограммойДляПросмотра(ПолныйПутьКФайлу) Экспорт
	
	#Если ВебКлиент Тогда
		
		Возврат Истина;
		
	#Иначе
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		
		Если Не Файл.Существует() Или Не Файл.ЭтоФайл() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Расширение = НРег(Файл.Расширение);
		Если Расширение <> ".doc" И Расширение <> ".docx" И Расширение <> ".pdf" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТолькоЧтение = Файл.ПолучитьТолькоЧтение();
		
		//Проверка файла на то, что он не открыт в какой либо программе на запись.
		//Если файл открыт, то попытка открыть файл на запись в Попытке вызывает исключение.
		Попытка
			
			Файл.УстановитьТолькоЧтение(Ложь);
			
			ЗаписьТекста = Новый ЗаписьТекста;
			ЗаписьТекста.Открыть(ПолныйПутьКФайлу,,,Истина);
			Возврат Ложь;
			
		Исключение
			
			Если ТолькоЧтение Тогда
				Файл.УстановитьТолькоЧтение(Истина);
			КонецЕсли;	
			
			Возврат Истина;
			
		КонецПопытки;
		
	#КонецЕсли
	
КонецФункции

// Задает вопрос о продолжении закрытия формы если в форме остались захваченные файлы:
// "Один или несколько файлов заняты вами для редактирования. Продолжить?"
// Вызывается из ПередЗакрытием форм с файлами.
//
// По ссылке объекта проверяет остались ли захваченные файлы.
// Если захваченные файлы остались:
// - В параметре Отказ устанавливается значение Истина,
// - Пользователю задается вопрос.
// Если пользователь ответил утвердительно, тогда форма снова закрывается.
//
// Параметры:
//   Форма            - УправляемаяФорма - форма, в которой редактируется файл.
//   Отказ            - Булево - параметр события ПередЗакрытием.
//   ЗавершениеРаботы - Булево - признак того, что форма закрывается в процессе завершения работы приложения.
//   ОбъектСсылка     - ЛюбаяСсылка - ссылка на владельца файла.
//   ИмяРеквизита     - Строка - имя реквизита типа Булево, в котором хранится признак того,
//                               что вопрос уже выводился.
//
// Пример:
//
//	&НаКлиенте
//	Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//		РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
//	КонецПроцедуры
//
Процедура ПоказатьПодтверждениеЗакрытияФормыСФайлами(Форма, Отказ, ЗавершениеРаботы, ОбъектСсылка, 
	ИмяРеквизита = "МожноЗакрытьФормуСФайлами") Экспорт
	
	ИмяПроцедуры = "РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Форма", Форма, Тип("УправляемаяФорма"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Отказ", Отказ, Тип("Булево"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ЗавершениеРаботы", ЗавершениеРаботы, Тип("Булево"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяРеквизита", ИмяРеквизита, Тип("Строка"));
		
	Если Форма[ИмяРеквизита] Тогда
		Возврат;
	КонецЕсли;
	
	Количество = РаботаСФайламиСлужебныйВызовСервера.КоличествоФайловЗанятыхТекущимПользователем(ОбъектСсылка);
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Один или несколько файлов заняты вами для редактирования.
	                          |
	                          |Продолжить?';
	                          |en = 'You have locked for editing one or more files.
	                          |
	                          |Do you want to continue?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(Форма, Отказ, ЗавершениеРаботы, ТекстВопроса, ИмяРеквизита);
	
КонецПроцедуры


