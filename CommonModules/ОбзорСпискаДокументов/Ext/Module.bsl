
// Возвращает структуру с основными данными переданного документа
//
// Параметры:
//   ТекущийДокумент        - СправочникСсылка.ВнутреннийДокумент, СправочникСсылка.ВходящийДокумент,
//                          - СправочникСсылка.ИсходящийДокумент - документ, данные которого необходимо получить
//   ПоказыватьУдаленныеФайлы - Булево - Истина, если необходимо показывать помеченные на удаление файлы
//
// Возвращаемое значение:
//   ДанныеМиникарточки - Структура – структура с основными данными документа
//
Функция ПолучитьДанныеМиникарточки(ТекущийДокумент, ПоказыватьУдаленныеФайлы = Ложь) Экспорт 
	
	ДанныеМиникарточки = Новый Структура();
	ДанныеМиникарточки.Вставить("Обзор", "");
	ДанныеМиникарточки.Вставить("Файлы", Новый Массив);
	ДанныеМиникарточки.Вставить("Задачи", Новый Массив);
	ДанныеМиникарточки.Вставить("Связи", Новый Массив);
	ДанныеМиникарточки.Вставить("ДоступныеПоля", "");
	ДанныеМиникарточки.Вставить("НедоступныеПоля", "");
	ДанныеМиникарточки.Вставить("НеизменяемыеПоля", "");
	ДанныеМиникарточки.Вставить("ЗапретитьРедактироватьФайлы", Ложь);
	ДанныеМиникарточки.Вставить("ЗапретитьУдалятьФайлы", Ложь);
	ДанныеМиникарточки.Вставить("ПолныеПрава", Ложь);
	ДанныеМиникарточки.Вставить("ИспользоватьСостоянияДокументов", Ложь);
	ДанныеМиникарточки.Вставить("ОграничиватьДоступностьПолейПоСостоянию", Ложь);
	ДанныеМиникарточки.Вставить("ВестиУчетСканКопийОригиналовДокументов", Ложь);
	ДанныеМиникарточки.Вставить("ИменаПолейИКомандДляНастройкиДоступности", Новый Массив);
	ДанныеМиникарточки.Вставить("СостояниеТекст", "");
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда 
		
		ДанныеМиникарточки.ПолныеПрава = РольДоступна("ПолныеПрава");
		ДанныеМиникарточки.ИспользоватьСостоянияДокументов = Константы.ИспользоватьСостоянияДокументов.Получить();
		ДанныеМиникарточки.ОграничиватьДоступностьПолейПоСостоянию = Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить();
		ДанныеМиникарточки.ВестиУчетСканКопийОригиналовДокументов = Константы.ВестиУчетСканКопийОригиналовДокументов.Получить();
		ДанныеМиникарточки.СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ТекущийДокумент);
		
		Если ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
		КонецЕсли;
		
		ИменаПолейИКомандДляНастройкиДоступности = Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности(ТипДокумента);
		Для Каждого Строка Из ИменаПолейИКомандДляНастройкиДоступности Цикл
			СтрокаТаблицы = Новый Структура("ИмяПоляКоманды, ПредставлениеПоляКоманды, ИменаПолейНаФорме, ИменаDMService");
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
			ДанныеМиникарточки.ИменаПолейИКомандДляНастройкиДоступности.Добавить(СтрокаТаблицы);
		КонецЦикла;	
		
		РезультатыЗапросов = РезультатыЗапросовДляМиникарточки(ТекущийДокумент, ПоказыватьУдаленныеФайлы);
		ДанныеМиникарточки.Файлы = ПолучитьДанныеФайлов(РезультатыЗапросов[0]);
		ДанныеМиникарточки.Задачи = ПолучитьДанныеЗадач(РезультатыЗапросов[1]);
		ДанныеМиникарточки.Связи = ПолучитьДанныеСвязей(РезультатыЗапросов[2]);
		ДанныеМиникарточки.Обзор = ПолучитьДанныеОбзора(РезультатыЗапросов[3]);
		
		МассивДоступныеПоля = Новый Массив;
		МассивНедоступныеПоля = Новый Массив;
		
		Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(ТекущийДокумент.ПолучитьОбъект(), 
			МассивДоступныеПоля, МассивНедоступныеПоля);
		
		ДанныеМиникарточки.ДоступныеПоля = МассивДоступныеПоля;
		ДанныеМиникарточки.НедоступныеПоля = МассивНедоступныеПоля;
		
		Шаблон = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ТекущийДокумент, "Шаблон");
		
		Если ЗначениеЗаполнено(Шаблон) И Не РольДоступна("ПолныеПрава")
			И (ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
			Или ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов") ) Тогда 
			
			РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				Шаблон, "ЗапретитьРедактироватьФайлы, ЗапретитьУдалятьФайлы");
			ДанныеМиникарточки.ЗапретитьРедактироватьФайлы = РеквизитыШаблона.ЗапретитьРедактироватьФайлы; 
			ДанныеМиникарточки.ЗапретитьУдалятьФайлы  = РеквизитыШаблона.ЗапретитьУдалятьФайлы;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат ДанныеМиникарточки;
	
КонецФункции

Функция РезультатыЗапросовДляМиникарточки(ТекущийДокумент, ПоказыватьУдаленныеФайлы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ТекущийДокумент
		|	И (&ПоказыватьУдаленныеФайлы
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочена,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &ТекущийДокумент
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.СвязаннаяСтрока,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.ДатаУстановки,
		|	ВЫБОР
		|		КОГДА СвязиДокументов.СвязанныйДокумент <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СвязиДокументов.СвязанныйДокумент
		|		ИНАЧЕ СвязиДокументов.СвязаннаяСтрока
		|	КОНЕЦ КАК СвязанныйДокументСтрока,
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ПолноеНаименование КАК ПолноеНаименованиеФайла,
		|	Файлы.ИндексКартинки КАК ИндексКартинкиФайла,
		|	ЕСТЬNULL(СведенияОФайлах.ЯвляетсяОригиналом, ЛОЖЬ) КАК ЯвляетсяОригиналом
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (Файлы.ВладелецФайла = СвязиДокументов.СвязанныйДокумент)
		|			И (НЕ Файлы.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
		|		ПО (Файлы.Ссылка = СведенияОФайлах.Файл)
		|ГДЕ
		|	СвязиДокументов.Документ = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвязанныйДокументСтрока
		|ИТОГИ МАКСИМУМ(Комментарий) ПО
		|	ТипСвязи,
		|	СвязанныйДокументСтрока";
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийДокумент) Тогда
		ЗапросДокумента = ПолучитьЗапросДляДокумента(ТекущийДокумент);
		Запрос.Текст = Запрос.Текст + Символы.ВК + ";" + Символы.ВК + Символы.ВК + ЗапросДокумента;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.УстановитьПараметр("ПоказыватьУдаленныеФайлы", ПоказыватьУдаленныеФайлы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ПолучитьДанныеОбзора(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
		HTMLТекст = ОбзорСпискаДокументовПереопределяемый.ПолучитьОбзорДокумента(Выборка.Ссылка);
		
		Если ЗначениеЗаполнено(HTMLТекст) Тогда 
			Возврат HTMLТекст;
		КонецЕсли;
	КонецЕсли; 
		
	HTMLТекст = "<html>
		|<head>
		|<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  10px; 		 
		|		margin-left: 10px; 
		|		font-family: Arial, sans-serif; 
		|		font-size:   10pt;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 7px;}
		|</style>
		|<body>";
		
	ДобавитьВHTMLОсновныеДанныеОбзора(HTMLТекст, Выборка);		
	
	ДополнительныеРеквизиты = Выборка.ДополнительныеРеквизиты.Выгрузить();
	Для Каждого Строка Из ДополнительныеРеквизиты Цикл
		СвойствоИспользуется = УправлениеСвойствами.ПроверитьСвойствоУОбъекта(Выборка.Ссылка, Строка.Свойство);
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Свойство, "ПометкаУдаления");
		Значение = ?(ЗначениеЗаполнено(Строка.ТекстоваяСтрока), Строка.ТекстоваяСтрока, Строка.Значение);
		
		Если Не ПометкаУдаления И СвойствоИспользуется И ЗначениеЗаполнено(Значение) Тогда
			ДобавитьДопРеквизит(HTMLТекст, Строка.Свойство, Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(Выборка.Содержание) Тогда
		Содержание = Выборка.Содержание;
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтрЗаменить(РаботаС_HTML.ЗаменитьСпецСимволыHTML(Содержание), Символы.ПС, "<br>");
	КонецЕсли;
	
	Если Прав(HTMLТекст, 6) = "<body>" Тогда 
		Заголовок = Выборка.Заголовок;
		ДобавитьРеквизит(HTMLТекст, "", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Заголовок));
	КонецЕсли;	
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

Функция ПолучитьДанныеФайлов(РезультатЗапроса)
	
	Файлы = Новый Массив;
	
	МассивФайлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов);
	
	Для Каждого Строка Из ТаблицаФайлы Цикл
		СтрокаФайлы = Новый Структура(
		"Наименование, 
		|ИндексКартинки, 
		|Описание, 
		|Оригинал, 
		|Ссылка,
		|СозданИзШаблона,
		|Редактирует,
		|Автор,
		|РедактируетТекущийПользователь,
		|Расширение,
		|ПометкаУдаления,
		|ПодписанЭП,
		|Зашифрован,
		|СозданПоШаблонуДокумента,
		|ХранитьВерсии");
		
		ЗаполнитьЗначенияСвойств(СтрокаФайлы, Строка);
		Файлы.Добавить(СтрокаФайлы);
	КонецЦикла;	
	
	Возврат Файлы;
	
КонецФункции

Функция ПолучитьДанныеСвязей(РезультатЗапроса)
	
	Связи = Новый Массив;
	
	ВыборкаТипСвязи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипСвязи.Следующий() Цикл
		
		ВыборкаДок = ВыборкаТипСвязи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДок.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаДок.СвязанныйДокументСтрока) Тогда 
				Продолжить;
			КонецЕсли;	
		
			СтрокаСвязи = Новый Структура(
			"ТипСвязи,
			|СвязанныйДокумент,
			|Представление,
			|СвязаннаяСтрока,
			|ЭтоРодитель,
			|Подстроки,
			|ИндексКартинки,
			|Файл,
			|ЯвляетсяОригиналом");
			
			СтрокаСвязи.ТипСвязи = ВыборкаДок.ТипСвязи;
			СтрокаСвязи.ИндексКартинки = -1;		
			СтрокаСвязи.ЭтоРодитель = Истина;
			
			Если ТипЗнч(ВыборкаДок.СвязанныйДокументСтрока) = Тип("Строка") Тогда 
				СтрокаСвязи.СвязаннаяСтрока = ВыборкаДок.СвязанныйДокументСтрока;
				Если ЗначениеЗаполнено(ВыборкаДок.Комментарий) Тогда
					СтрокаСвязи.Представление = СтрШаблон("%1 \ %2",
						ВыборкаДок.Комментарий,
						СтрокаСвязи.ТипСвязи);
				Иначе
					СтрокаСвязи.Представление = СтрокаСвязи.СвязаннаяСтрока;
				КонецЕсли;
				
			Иначе
				СтрокаСвязи.СвязанныйДокумент = ВыборкаДок.СвязанныйДокументСтрока;
				СтрокаСвязи.Представление = СтрШаблон("%1 \ %2",
					СтрокаСвязи.СвязанныйДокумент,
					СтрокаСвязи.ТипСвязи);
				
			КонецЕсли;
			
			СтрокаСвязи.Подстроки = Новый Массив;
			
			ВыборкаФайл = ВыборкаДок.Выбрать();
			Пока ВыборкаФайл.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаФайл.Файл) Тогда 
					Продолжить;
				КонецЕсли;	
				
				СтрокаФайл = Новый Структура(
				"ТипСвязи,
				|Представление,
				|ИндексКартинки,
				|Файл,
				|ЯвляетсяОригиналом");
				
				СтрокаФайл.Файл = ВыборкаФайл.Файл;
				СтрокаФайл.ИндексКартинки = ВыборкаФайл.ИндексКартинкиФайла;
				СтрокаФайл.Представление = ВыборкаФайл.ПолноеНаименованиеФайла;
				СтрокаФайл.ТипСвязи = ВыборкаФайл.ТипСвязи;
				СтрокаФайл.ЯвляетсяОригиналом = ВыборкаФайл.ЯвляетсяОригиналом;
				
				СтрокаСвязи.Подстроки.Добавить(СтрокаФайл);
			КонецЦикла;
			
			Связи.Добавить(СтрокаСвязи);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат Связи;
	
КонецФункции

Функция ПолучитьДанныеЗадач(РезультатЗапроса)
	
	МассивЗадачи = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЗадача = Новый Структура(
		"Наименование, 
		|Исполнитель,
		|ТочкаМаршрута, 
		|Ссылка,
		|Просрочена,
		|СрокИсполнения,
		|БизнесПроцесс");
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			СтрокаЗадача.Исполнитель = Выборка.Исполнитель;
		Иначе
			СтрокаИсполнитель = Строка(Выборка.РольИсполнителя);
			СтрокаЗадача.Исполнитель = СтрокаИсполнитель;
		КонецЕсли;
		
		СтрокаЗадача.Наименование = Выборка.Наименование; 
		СтрокаЗадача.ТочкаМаршрута = Выборка.ТочкаМаршрута; 
		СтрокаЗадача.Ссылка = Выборка.Ссылка; 
		СтрокаЗадача.БизнесПроцесс = Выборка.БизнесПроцесс; 
		СтрокаЗадача.Просрочена = Выборка.Просрочена; 
		СтрокаЗадача.СрокИсполнения = Выборка.СрокИсполнения; 
		
		МассивЗадачи.Добавить(СтрокаЗадача);
	КонецЦикла;
	
	Возврат МассивЗадачи;
	
КонецФункции

Процедура ДобавитьПодпись(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#333333>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет)
	
	Значение = ЗначениеДанных;

	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
			Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+"><B>";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</B></FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + "<B>";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</B>";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+"><B>";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</B></FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + "<B>";
			HTMLТекст = HTMLТекст +Значение;
			HTMLТекст = HTMLТекст + "</B>";
		КонецЕсли;	
	Иначе
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1><B>%2</B></A>",
			ПолучитьНавигационнуюСсылку(Значение),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Строка(Значение)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "")
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

Процедура ДобавитьДопРеквизит(HTMLТекст, Свойство, Значение)
	
	ФорматСвойства = Свойство.ФорматСвойства;
	
	Если Не ЗначениеЗаполнено(ФорматСвойства) Тогда 
		ТипЗначения = Свойство.ТипЗначения;
		
		Если ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
			Если ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда 
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'T';";
			ИначеЕсли ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда 
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'D';";
			ИначеЕсли ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда 	
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'DT';";
			КонецЕсли;	
		КонецЕсли;	
		
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда 	
			Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			
			ФорматСвойства = ФорматСвойства + "ЧЦ = '" + Разрядность + "';";
			ФорматСвойства = ФорматСвойства + "ЧДЦ = '" + РазрядностьДробнойЧасти + "';";
		КонецЕсли;	
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ФорматСвойства) Тогда 
		ДобавитьРеквизит(HTMLТекст, Строка(Свойство.Заголовок) + ":", Формат(Значение, ФорматСвойства));
	Иначе
		ДобавитьРеквизит(HTMLТекст, Строка(Свойство.Заголовок) + ":", Значение);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьЗапросДляДокумента(ТекущийДокумент) Экспорт
	
	ЗапросТекст = "";
	
	Если ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.Заголовок,
		|	ВнутренниеДокументы.Содержание,
		|	ВнутренниеДокументы.Сумма,
		|	ВнутренниеДокументы.Валюта,
		|	ВнутренниеДокументы.Контрагент,
		|	ВнутренниеДокументы.СрокИсполнения,
		|	ВнутренниеДокументы.НеДействует,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.УчитыватьСуммуДокумента, ЛОЖЬ) КАК УчитыватьСуммуДокумента,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.ВестиУчетТоваровИУслуг, ЛОЖЬ) КАК ВестиУчетТоваровИУслуг,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.ВестиУчетПоКонтрагентам, ЛОЖЬ) КАК ВестиУчетПоКонтрагентам,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.ВестиУчетСторон, ЛОЖЬ) КАК ВестиУчетСторон,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.УчитыватьНедействующиеДокументы, ЛОЖЬ) КАК УчитыватьНедействующиеДокументы,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия, ЛОЖЬ) КАК УчитыватьСрокДействия,
		|	ЕСТЬNULL(ВнутренниеДокументы.ВидДокумента.ИспользоватьСрокИсполнения, ЛОЖЬ) КАК ИспользоватьСрокИсполнения,
		|	ВнутренниеДокументы.ДатаНачалаДействия,
		|	ВнутренниеДокументы.ДатаОкончанияДействия,
		|	ВнутренниеДокументы.ПорядокПродления,
		|	ВнутренниеДокументы.Бессрочный,
		|	ВнутренниеДокументы.ДополнительныеРеквизиты,
		|	ВнутренниеДокументы.Товары,
		|	ВнутренниеДокументы.Контрагенты,
		|	ВнутренниеДокументы.Стороны,
		|	ВнутренниеДокументы.СуммаНДС,
		|	ВнутренниеДокументы.Организация,
		|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков КАК КонтрагентыДляСписков
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
    	|		ПО ВнутренниеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &ТекущийДокумент";
		
	ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка,
		|	ВходящиеДокументы.Заголовок,
		|	ВходящиеДокументы.Содержание,
		|	ЕСТЬNULL(ВходящиеДокументы.ВидДокумента.УчитыватьСуммуДокумента, ЛОЖЬ) КАК УчитыватьСуммуДокумента,
		|	ЕСТЬNULL(ВходящиеДокументы.ВидДокумента.ИспользоватьСрокИсполнения, ЛОЖЬ) КАК ИспользоватьСрокИсполнения,
		|	ВходящиеДокументы.Сумма,
		|	ВходящиеДокументы.Валюта,
		|	ВходящиеДокументы.Отправитель,
		|	ВходящиеДокументы.СрокИсполнения,
		|	ВходящиеДокументы.ДополнительныеРеквизиты
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	Ссылка = &ТекущийДокумент";
		
	ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	ИсходящиеДокументы.Ссылка,
		|	ИсходящиеДокументы.Заголовок,
		|	ИсходящиеДокументы.Содержание,
		|	ЕСТЬNULL(ИсходящиеДокументы.ВидДокумента.УчитыватьСуммуДокумента, ЛОЖЬ) КАК УчитыватьСуммуДокумента,
		|	ЕСТЬNULL(ИсходящиеДокументы.ВидДокумента.ИспользоватьСрокИсполнения, ЛОЖЬ) КАК ИспользоватьСрокИсполнения,
		|	ИсходящиеДокументы.Сумма,
		|	ИсходящиеДокументы.Валюта,
		|	ИсходящиеДокументы.СрокИсполнения,
		|	ИсходящиеДокументы.Получатели,
		|	ИсходящиеДокументы.ДополнительныеРеквизиты,
		|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков КАК ПолучателиДляСписков
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
    	|	ПО ИсходящиеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	Ссылка = &ТекущийДокумент";
		
	КонецЕсли;
	
	Возврат ЗапросТекст;
	
КонецФункции

Процедура ДобавитьВHTMLОсновныеДанныеОбзора(HTMLТекст, Выборка) Экспорт
	
	Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		
		Если Выборка.ВестиУчетСторон Тогда
			Стороны = Выборка.Стороны.Выгрузить();
			
			Если Стороны.Количество() Тогда
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Стороны:'; en = 'Parties:'"), "");
				Для Каждого СтрокаСторона Из Стороны Цикл
					Если ЗначениеЗаполнено(СтрокаСторона.Наименование) Тогда
						ДобавитьПодпись(HTMLТекст, СокрЛП(СтрокаСторона.Наименование) + ": ");
					КонецЕсли;
					
					ДобавитьЗначение(HTMLТекст, СтрокаСторона.Сторона, "");
					HTMLТекст = HTMLТекст + "<br>";
				КонецЦикла;	
				HTMLТекст = HTMLТекст + "<br>";
			Иначе
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Стороны: '; en = 'Parties: '"), НСтр("ru = 'не указаны'; en = 'not specified'"));
			КонецЕсли;
		ИначеЕсли Выборка.ВестиУчетПоКонтрагентам Тогда 
			Контрагенты = Выборка.Контрагенты.Выгрузить();
			
			Если Контрагенты.Количество() > 1 Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Контрагенты:'; en = 'Counterparties:'"), Выборка.КонтрагентыДляСписков);
			ИначеЕсли Контрагенты.Количество() > 0 И ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Контрагент:'; en = 'Counterparty:'"), Выборка.Контрагент);
			Иначе 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Контрагент:'; en = 'Counterparty:'"), НСтр("ru = 'не указан'; en = 'not specified'"));
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'От кого:'; en = 'From:'"), Выборка.Отправитель);
		ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(Выборка.Ссылка, 
			Справочники.ТипыСвязей.ПолученВОтветНа);
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			
			РеквизитыВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВОтветНа,
				"Заголовок, ДатаРегистрации, РегистрационныйНомер");
				
			Если ЗначениеЗаполнено(РеквизитыВОтветНа.РегистрационныйНомер) 
				И ЗначениеЗаполнено(РеквизитыВОтветНа.ДатаРегистрации) Тогда
				ВОтветНаСтрока = СтрШаблон(НСтр("ru = '№ %1 от %2'; en = '№ %1 of %2'"), 
					РеквизитыВОтветНа.РегистрационныйНомер, 
					Формат(РеквизитыВОтветНа.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				ВОтветНаСтрока = РеквизитыВОтветНа.Заголовок;
			КонецЕсли;
			
			ДобавитьПодпись(HTMLТекст, НСтр("ru = 'В ответ на:'; en = 'In reply to'"));
			HTMLТекст = HTMLТекст + СтрШаблон("<A href=v8doc:%1><B>%2</B></A>",
				ПолучитьНавигационнуюСсылку(ВОтветНа),
				ВОтветНаСтрока);
			HTMLТекст = HTMLТекст + "<br>";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Получатели = Выборка.Получатели.Выгрузить();
		Если Получатели.Количество() > 1 Тогда 
			ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Кому:'; en = 'To:'"), Выборка.ПолучателиДляСписков);
		ИначеЕсли Получатели.Количество() > 0 Тогда 
			ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Кому:'; en = 'To:'"), Получатели[0].Получатель);
		КонецЕсли;
		
		ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Выборка.Ссылка,
			Справочники.ТипыСвязей.ОтправленВОтветНа);
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			РеквизитыВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВОтветНа,
				"Заголовок, ИсходящаяДата, ИсходящийНомер");
				
			Если ЗначениеЗаполнено(РеквизитыВОтветНа.ИсходящаяДата) 
				И ЗначениеЗаполнено(РеквизитыВОтветНа.ИсходящийНомер) Тогда
				ВОтветНаСтрока = СтрШаблон(НСтр("ru = '№ %1 от %2'; en = '№ %1 of %2'"), 
					РеквизитыВОтветНа.ИсходящийНомер, Формат(РеквизитыВОтветНа.ИсходящаяДата, "ДЛФ=D"));
			Иначе
				ВОтветНаСтрока = РеквизитыВОтветНа.Заголовок;
			КонецЕсли;
			
			ДобавитьПодпись(HTMLТекст, НСтр("ru = 'В ответ на:'; en = 'In reply to'")); 
			HTMLТекст = HTMLТекст + СтрШаблон(
				"<A href=v8doc:%1><B>%2</B></A>",
				ПолучитьНавигационнуюСсылку(ВОтветНа),
				ВОтветНаСтрока);
			HTMLТекст = HTMLТекст + "<br>";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Выборка.УчитыватьСуммуДокумента Тогда
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Сумма:'; en = 'Amount:'"), 
			Формат(Выборка.Сумма, "ЧДЦ=2; ЧН=0") + " " + Строка(Выборка.Валюта));
	КонецЕсли;
	
	Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		Если Выборка.УчитыватьСуммуДокумента Тогда 
			Если Делопроизводство.УчитыватьНДС(Выборка.Организация) Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Сумма НДС:'; en = 'VAT Amount:'"), Формат(Выборка.СуммаНДС, "ЧДЦ=2; ЧН=0") + " " + 
					Выборка.Валюта);
			КонецЕсли;
			
			Если Выборка.ВестиУчетТоваровИУслуг Тогда
				Товары = Выборка.Товары.Выгрузить();
				КоличествоПозиций = Товары.Количество();
				Если КоличествоПозиций > 0 Тогда 
					ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Товары и услуги:'; en = 'Products and services:'"));
					HTMLТекст = HTMLТекст + СтрШаблон(
						"<A href=:%1><B>%2</B></A><BR>",
						"goods?ref=" + Строка(Выборка.Ссылка.УникальныйИдентификатор()),
						Формат(КоличествоПозиций, "ЧГ=") + " "
						+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоПозиций,
							"Л = ru_RU", НСтр("ru = 'позиция,позиции,позиций,,,,,,0'; en = 'position, position, positions,, 0'")));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.УчитыватьСрокДействия Тогда
			СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(Выборка);
			Если ЗначениеЗаполнено(СрокДействияСтрока) Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Срок действия:'; en = 'Period of validity:'"), СрокДействияСтрока);
			Иначе 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Срок действия:'; en = 'Period of validity:'"), НСтр("ru = 'не указан'; en = 'not specified'"));
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.УчитыватьНедействующиеДокументы И Выборка.НеДействует Тогда
			ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Расторгнут:'; en = 'Terminated:'"), НСтр("ru = 'Да'; en = 'Yes'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Выборка.ИспользоватьСрокИсполнения Тогда
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ИмяПоля = НСтр("ru = 'Срок ответа:'; en = 'Reply due date:'");
		Иначе 
			ИмяПоля = НСтр("ru = 'Срок исполнения:'; en = 'Due date:'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СрокИсполнения) Тогда 
			Если Выборка.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса())
				И ТипЗнч(Выборка.Ссылка) <> Тип("СправочникСсылка.ИсходящиеДокументы")
				И Делопроизводство.ПолучитьСостояниеДокумента(Выборка.Ссылка, "СостояниеИсполнение") 
				<> Перечисления.СостоянияДокументов.Исполнен Тогда
				
				ДобавитьРеквизит(HTMLТекст, ИмяПоля, 
					Формат(Выборка.СрокИсполнения, "ДЛФ=D"), "B22222");
			Иначе	
				ДобавитьРеквизит(HTMLТекст, ИмяПоля, Формат(Выборка.СрокИсполнения, "ДЛФ=D"));
			КонецЕсли;
		Иначе 
			ДобавитьРеквизит(HTMLТекст, ИмяПоля, НСтр("ru = 'не указан'; en = 'not specified'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


