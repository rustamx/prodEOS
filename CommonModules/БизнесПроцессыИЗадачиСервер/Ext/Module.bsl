////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры подсистемы

// Инициализирует общие параметры формы выполнения задачи.
//
// Параметры:
//  ФормаЗадачи  - УправляемаяФорма  - форма выполнения задачи.
//  ЗадачаОбъект - ЗадачаОбъект      - объект задачи.
//  ЭлементГруппаСостояние - элемент управления формы - группа с информации о
//                                                      состоянии задачи  
//  ЭлементДатаИсполнения  - элемент управления формы - поле с датой исполнения задачи 
//
Процедура ФормаЗадачиПриСозданииНаСервере(ФормаЗадачи, ЗадачаОбъект, 
	ЭлементГруппаСостояние, ЭлементДатаИсполнения) Экспорт
	
	ФормаЗадачи.ТолькоПросмотр = ЗадачаОбъект.Выполнена;
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ЭлементДатаИсполнения.Вид = ?(ИзменятьЗаданияЗаднимЧислом, ВидПоляФормы.ПолеВвода, ВидПоляФормы.ПолеНадписи);

	ЭлементГруппаСостояние.Видимость = ЗадачаОбъект.Выполнена;
	Если ЗадачаОбъект.Выполнена Тогда
		Родитель = ?(ЭлементГруппаСостояние <> Неопределено, ЭлементГруппаСостояние, ФормаЗадачи);
		Элемент = ФормаЗадачи.Элементы.Найти("__СостояниеЗадачиКартинка");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__СостояниеЗадачиКартинка", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Картинка = БиблиотекаКартинок.Информация;
			Элемент.Высота = 1;
			Элемент.Ширина = 2;
		КонецЕсли;
		
		Элемент = ФормаЗадачи.Элементы.Найти("__СостояниеЗадачи");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__СостояниеЗадачи", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.Высота = 0; // автовысота
		КонецЕсли;
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ДатаИсполненияСтрокой = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(ЗадачаОбъект.ДатаИсполнения, "ДЛФ=DT"), Формат(ЗадачаОбъект.ДатаИсполнения, "ДЛФ=D"));
		Элемент.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Задача выполнена %1 пользователем %2.'; en = 'Task %1 is executed by user %2.'"),
				ДатаИсполненияСтрокой, 
				ИсполнительСтрокой(ЗадачаОбъект.Исполнитель, ЗадачаОбъект.РольИсполнителя));
	КонецЕсли;
	
	Если БизнесПроцессыИЗадачиВызовСервера.ЭтоВедущаяЗадача(ЗадачаОбъект.Ссылка) Тогда
		Родитель = ?(ЭлементГруппаСостояние <> Неопределено, ЭлементГруппаСостояние, ФормаЗадачи);
		Элемент = ФормаЗадачи.Элементы.Найти("__ВедущаяЗадачаКартинка");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__ВедущаяЗадачаКартинка", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Картинка = БиблиотекаКартинок.Информация;
			Элемент.Высота = 1;
			Элемент.Ширина = 2;
		КонецЕсли;
		
		Элемент = ФормаЗадачи.Элементы.Найти("__ВедущаяЗадача");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__ВедущаяЗадача", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.Заголовок = НСтр("ru ='Это ведущая задача для вложенных процессов.'; en = 'This is the head task for subprocesses.'");
			Элемент.Высота = 0; // автовысота
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры             

// Вызывается при создании формы списка задач на сервере.
//
// Параметры
//  УсловноеОформление - УсловноеОформление - условное оформление списка задач
//
Процедура УстановитьОформлениеЗадач(Знач СписокЗадачИлиЕгоУсловноеОформление) Экспорт
	
	Если ТипЗнч(СписокЗадачИлиЕгоУсловноеОформление) = Тип("ДинамическийСписок") Тогда
		УсловноеОформление = СписокЗадачИлиЕгоУсловноеОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	Иначе
		УсловноеОформление = СписокЗадачИлиЕгоУсловноеОформление;
	КонецЕсли;
	
	// недействительные объекты - Исполнитель
	ПредставлениеЭлемента = "Исполнитель недействителен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель.Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Исполнитель");
	
	// недействительные объекты - Автор
	ПредставлениеЭлемента = "Автор недействителен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор.Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Автор");
	
	// установка оформления для задач, не принятых к исполнению
	ПредставлениеЭлемента = "Задача не принята к исполнению (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение = ШрифтыСтиля.НеПринятыеКИсполнениюЗадачи;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");

	// установка оформления для выполненных задач
	ПредставлениеЭлемента = "Выполненные задачи (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ВыполненнаяЗадача.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// установка оформления для просроченных задач
	ПредставлениеЭлемента = БизнесПроцессыИЗадачиКлиентСервер.ПолучитьПредставлениеУсловногоОформленияПросроченныхЗадач();
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияДляОтображенияВСписке");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияДляОтображенияВСписке");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("СрокИсполненияДляОтображенияВСписке");
	
КонецПроцедуры

// Вызывается при создании формы списка бизнес-процессов на сервере.
//
// Параметры
//  УсловноеОформление - УсловноеОформление - условное оформление списка бизнес-процессов
//
Процедура УстановитьОформлениеБизнесПроцессов(Знач УсловноеОформление) Экспорт

	// недействительные объекты - Исполнитель
	Если УсловноеОформление.ДоступныеПоляПолей.Элементы.Найти("Исполнитель") <> Неопределено Тогда
		ПредставлениеЭлемента = "Исполнитель недействителен (стандартная настройка)";
		ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель.Недействителен");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Истина;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Исполнитель");
	КонецЕсли;
	
	// недействительные объекты - Автор
	ПредставлениеЭлемента = "Автор недействителен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор.Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Автор");
	
	// завершенные процессы
	ПредставлениеЭлемента = "Процесс завершен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЗавершенныйБизнесПроцесс.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
	// нестартованные процессы
	ПредставлениеЭлемента = "Процесс не стартован (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НеСтартованныйБизнесПроцесс.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// просроченные процессы
	ПолеСрокНайден = Ложь;
	Для Каждого ДоступныйЭлемент Из ЭлементУсловногоОформления.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		Если ДоступныйЭлемент.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения") Тогда
			ПолеСрокНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеСрокНайден Тогда
		ПредставлениеЭлемента = "Процесс просрочен (стандартная настройка)";
		ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Истина;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Ложь;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	КонецЕсли;
	
	ПолеСрокНайден = Ложь;
	Для Каждого ДоступныйЭлемент Из ЭлементУсловногоОформления.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		Если ДоступныйЭлемент.Поле = Новый ПолеКомпоновкиДанных("СрокИсполненияДатой") Тогда
			ПолеСрокНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеСрокНайден Тогда
		ПредставлениеЭлемента = "Процесс просрочен (стандартная настройка)";
		ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияДатой");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Истина;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Ложь;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполненияДатой");
	КонецЕсли;

	// прерванные процессы
	Если УсловноеОформление.ДоступныеПоляПолей.Элементы.Найти("Состояние") <> Неопределено Тогда
	
		ПредставлениеЭлемента = "Процесс прерван (стандартная настройка)";
		ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Перечисления.СостоянияБизнесПроцессов.Прерван;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЗавершенныйБизнесПроцесс.Значение; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строковое представление исполнителя задачи Исполнитель, 
// либо указанного в параметре РольИсполнителя.
//
// Параметры:
//  Исполнитель     - ПользовательСсылка  - исполнитель задачи.
//  РольИсполнителя  – Справочники.ПолныеРоли – роль.
//
// Возвращаемое значение:
//   Строка 
//
Функция ИсполнительСтрокой(Знач Исполнитель, Знач РольИсполнителя) Экспорт

	
	Если НЕ Исполнитель.Пустая() Тогда
		Возврат Строка(Исполнитель)
	ИначеЕсли НЕ РольИсполнителя.Пустая() Тогда
		Возврат РольСтрокой(РольИсполнителя);
	КонецЕсли;
	Возврат НСтр("ru = 'Не указан'; en = 'Not specified'");

КонецФункции

// Возвращает строковое представление роли РольИсполнителя.
//
// Параметры
//  РольИсполнителя  – Справочники.ПолныеРоли – роль.
//
// Возвращаемое значение:
//   Строка 
//
Функция РольСтрокой(Знач РольИсполнителя) Экспорт
	
	Если НЕ РольИсполнителя.Пустая() Тогда
		Возврат Строка(РольИсполнителя);
	КонецЕсли;
	Возврат НСтр("ru = 'Не указана'; en = 'Not specified'");

КонецФункции

// Помечает на удаление задачи указанного бизнес-процесса.
//
// Параметры
//  БизнесПроцессСсылка  - бизнес-процесс
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УстановитьПометкуУдаленияЗадач(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс
			|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ");
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			БизнесПроцессСсылка.Метаданные(),
			БизнесПроцессСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Установить формат отображения и редактирования поля формы типа Дата
// в зависимости от настроек подсистемы.
//
// Параметры
//  ПолеДаты  - элемент управления формы, поле со значением типа Дата.
//
Процедура УстановитьФорматДаты(ПолеДаты) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СтрокаФормата = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Если ПолеДаты.Вид = ВидПоляФормы.ПолеВвода Тогда
		ПолеДаты.ФорматРедактирования 	= СтрокаФормата;
	Иначе	
		ПолеДаты.Формат					= СтрокаФормата;
	КонецЕсли;	
	ПолеДаты.Ширина = ?(ИспользоватьДатуИВремяВСрокахЗадач, 0, 8);
	
КонецПроцедуры		

// Проверяет, является ли указанная задача ведущей.
//
// Параметры
//  ЗадачаСсылка  - задача.
//
// Возвращаемое значение:
//   Булево
//
Функция БизнесПроцессыВедущейЗадачи(ЗадачаСсылка) Экспорт
	
	Результат = ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка);
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции	

// Возвращает массив подчиненных БП
//
Функция ПолучитьПодчиненныеБизнесПроцессы(ВедущаяЗадача) Экспорт
	
	Результат = Новый Массив;
	
	Шаблон =
		"ВЫБРАТЬ
		|	ТаблицаБизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ИмяБизнесПроцесса] КАК ТаблицаБизнесПроцесс
		|ГДЕ
		|	ТаблицаБизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
		|	И ТаблицаБизнесПроцесс.Стартован
		|	И (НЕ ТаблицаБизнесПроцесс.Завершен)";
	
	Для каждого БизнесПроцессМета Из Метаданные.БизнесПроцессы Цикл
		ТекстЗапроса = СтрЗаменить(Шаблон, "[ИмяБизнесПроцесса]", БизнесПроцессМета.Имя);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВедущаяЗадача", ВедущаяЗадача);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РешениеВопросовВыполненияЗадач.Ссылка
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &Задача";
	Запрос.УстановитьПараметр("Задача", ВедущаяЗадача);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектов.Ссылка КАК Дескриптор,
		|	СоставСубъектовПравДоступа.Пользователь,
		|	ИСТИНА КАК Чтение,
		|	ИСТИНА КАК Добавление,
		|	ИСТИНА КАК Изменение,
		|	ИСТИНА КАК Удаление,
		|	ЛОЖЬ КАК УправлениеПравами
		|ПОМЕСТИТЬ НовыеПрава
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|			ПО УчастникиПроцессов.Участник = СоставСубъектовПравДоступа.Субъект
		|		ПО ДескрипторыДоступаОбъектов.ОбъектДоступа = УчастникиПроцессов.Процесс
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.Ссылка В(&Дескрипторы)");
		
	ДокументооборотПраваДоступа.ДополнитьТекстЗапросаПоПравам(Запрос.Текст);
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	ЗаписьПротокола = Новый Структура("Элемент, Описание",
		"УчастникиПроцесса", НСтр("ru = 'Участники процесса'; en = 'Process participants'"));
	ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
	
КонецПроцедуры

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ТаблицаПравПользователейПоОбъектам();
	
	// Права на изменение файлов должны быть у всех участников процесса.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК ОбъектДоступа,
		|	ПраваПоДескрипторамДоступаОбъектов.Пользователь,
		|	ИСТИНА КАК Чтение,
		|	ИСТИНА КАК Добавление,
		|	ИСТИНА КАК Изменение,
		|	ИСТИНА КАК Удаление,
		|	ЛОЖЬ КАК УправлениеПравами
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|		ПО Файлы.ВладелецФайла = ДескрипторыДляОбъектов.Объект
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)
		|	И НЕ ДескрипторыДляОбъектов.Отключен
		|	И ПраваПоДескрипторамДоступаОбъектов.Пользователь В(&Пользователи)");
	
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	Если Пользователи = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ПраваПоДескрипторамДоступаОбъектов.Пользователь В(&Пользователи)", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Файлы);
	ДокументооборотПраваДоступа.РасширитьТаблицуПравНеограниченнымиПравами(
		ТаблицаПрав, ИдентификаторОМ, Файлы, Пользователи);
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Получает таблицу шаблонов резолюций указанного пользователя.
//
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - пользователь, для которого получаем шаблоны
//
// Возвращаемое значение:
//   Таблица значений - шаблоны резолюций указанного пользователя
//
Функция ПолучитьТаблицуШаблоновРезолюций(ТекущийПользователь) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	СправочникШаблоныТекстов.Ссылка,
	   |	СправочникШаблоныТекстов.Наименование
	   |ИЗ
	   |	Справочник.ШаблоныТекстов КАК СправочникШаблоныТекстов
	   |ГДЕ
	   |	НЕ СправочникШаблоныТекстов.ПометкаУдаления
	   |	И СправочникШаблоныТекстов.ОбластьПрименения = ЗНАЧЕНИЕ(Перечисление.ОбластиПримененияШаблоновТекстов.Резолюции)
	   |	И (СправочникШаблоныТекстов.Автор = &Пользователь
	   |			ИЛИ СправочникШаблоныТекстов.Автор В (&Исполнители)
	   |			ИЛИ СправочникШаблоныТекстов.ОбщийШаблон
	   |				И СправочникШаблоныТекстов.Пользователи.ПользовательИлиГруппа.Ссылка В (&МассивГруппПользоватаелей))";
	   
	МассивГруппПользоватаелей = ПользователиСерверПовтИсп.ПолучитьМассивГруппПользователя(ТекущийПользователь);
	МассивГруппПользоватаелей.Добавить(ТекущийПользователь);
	
	Запрос.Параметры.Вставить("МассивГруппПользоватаелей", МассивГруппПользоватаелей);
	Запрос.Параметры.Вставить("Пользователь", ТекущийПользователь);
	Запрос.Параметры.Вставить("Исполнители",
		Справочники.ШаблоныТекстов.ПолучитьПользователейДелегирующихПрава(ТекущийПользователь));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет условия выполнения задач. В случае проблем - возвращает текст ошибки.
//
// Параметры:
//  Задача - ЗадачаСсылка - Ссылка на выполняемую задачу.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Структура - Результат проверки условия.
//
Функция ПроверитьУсловияЗапретаВыполнения(Задача, Знач Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЗапретВыполнения", Ложь);
	РезультатПроверки.Вставить("ТекстПредупреждения", "");
	РезультатПроверки.Вставить("ФорматированныйТекстПредупреждения", Новый ФорматированнаяСтрока(""));
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача,
		"БизнесПроцесс, ТочкаМаршрута");
	Если ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		РезультатПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗадачи.БизнесПроцесс, "РезультатПриглашения");
		Параметры.Вставить("РезультатПриглашения", РезультатПриглашения);
	КонецЕсли;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РеквизитыЗадачи.БизнесПроцесс);
	ИспользуетУсловияЗапретаВыполненияЗадач = МенеджерОбъекта.ИспользуетУсловияЗапретаВыполненияЗадач(
		РеквизитыЗадачи.ТочкаМаршрута,
		Параметры);
	Если Не ИспользуетУсловияЗапретаВыполненияЗадач Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТекстПредупреждения = Новый Массив;
	ФорматированныйТекстПредупреждения = Новый Массив;
	КоличествоПредупреждений = 0;
	Для Каждого УсловиеЗапретаВыполнения Из УсловияЗапретаВыполнения(Задача) Цикл
		Если Справочники.УсловияЗадач.Проверить(Задача, УсловиеЗапретаВыполнения.Условие) Тогда
			ТекущийТекстПредупреждения = УсловиеЗапретаВыполнения.ТекстПредупреждения;
			Если Не ЗначениеЗаполнено(ТекущийТекстПредупреждения) Тогда
				ТекущийТекстПредупреждения = СтрШаблон(
					НСтр("ru = 'условие ""%1""'; en = 'condition ""%1""'"),
					Строка(УсловиеЗапретаВыполнения.Условие));
			КонецЕсли;
			ТекстПредупреждения.Добавить(
				ТекстПредупрежденияЗапретаВыполненияСтрока(
					Задача,
					ТекущийТекстПредупреждения));
			ФорматированныйТекстПредупреждения.Добавить(
				ТекстПредупрежденияЗапретаВыполненияФорматированнаяСтрока(
					Задача,
					ТекущийТекстПредупреждения));
			КоличествоПредупреждений = КоличествоПредупреждений + 1;
		КонецЕсли;
	КонецЦикла;
	
	ЗапретВыполнения = КоличествоПредупреждений <> 0;
	Если ЗапретВыполнения Тогда
		
		Если КоличествоПредупреждений = 1 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Для задачи настроено обязательное условие:'; en = 'Mandatory condition was configured for the task:'");
			ПодвалПредупреждения = НСтр("ru = 'Выполните условие и повторите исполнение задачи.'; en = 'Meet the condition and repeat the execution of task.'");
		Иначе
			ЗаголовокПредупреждения = НСтр("ru = 'Для задачи настроены обязательные условия:'; en = 'Mandatory conditions were configured for the task:'");
			ПодвалПредупреждения = НСтр("ru = 'Выполните условия и повторите исполнение задачи.'; en = 'Meet the conditions and repeat the execution of task.'");
		КонецЕсли;
		
		// Текст предупреждения
		ТекстПредупреждения =
			ЗаголовокПредупреждения
			+ Символы.ПС
			+ СтрСоединить(ТекстПредупреждения, ";" + Символы.ПС)
			+ "."
			+ Символы.ПС
			+ Символы.ПС
			+ ПодвалПредупреждения;
		
		// Форматированный текст предупреждения
		Для Индекс = 0 По КоличествоПредупреждений - 1 Цикл
			НоваяСтрока = Новый Массив;
			НоваяСтрока.Добавить(Символы.ПС);
			НоваяСтрока.Добавить(ФорматированныйТекстПредупреждения[Индекс]);
			Если Индекс <> КоличествоПредупреждений - 1 Тогда
				НоваяСтрока.Добавить(";");
			Иначе
				НоваяСтрока.Добавить(".");
			КонецЕсли;
			ФорматированныйТекстПредупреждения[Индекс] = Новый ФорматированнаяСтрока(НоваяСтрока);
		КонецЦикла;
		ФорматированныйТекстПредупреждения.Вставить(0, ЗаголовокПредупреждения);
		ФорматированныйТекстПредупреждения.Добавить(Символы.ПС + Символы.ПС + ПодвалПредупреждения);
		ФорматированныйТекстПредупреждения =
			Новый ФорматированнаяСтрока(ФорматированныйТекстПредупреждения);
		
	Иначе
		ТекстПредупреждения = "";
		ФорматированныйТекстПредупреждения = Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
	РезультатПроверки.ЗапретВыполнения = ЗапретВыполнения;
	РезультатПроверки.ТекстПредупреждения = ТекстПредупреждения;
	РезультатПроверки.ФорматированныйТекстПредупреждения = ФорматированныйТекстПредупреждения;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Формирует условия запрета выполнения для задачи.
//
// Параметры:
//  Задача - ЗадачаСсылка - Задача.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Условия запрета выполнения.
//   * Условие - СправочникСсылка.УсловияЗадач - Условие.
//   * ТекстПредупреждения - Строка - Текст предупреждения.
//
Функция УсловияЗапретаВыполнения(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УсловияЗапретаВыполнения = Новый ТаблицаЗначений;
	УсловияЗапретаВыполнения.Колонки.Добавить("Условие");
	УсловияЗапретаВыполнения.Колонки.Добавить("ТекстПредупреждения");
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат УсловияЗапретаВыполнения;
	КонецЕсли;
	
	БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцесс);
	Если Не МенеджерОбъекта.ИспользуетУсловияЗапретаВыполненияЗадач() Тогда
		Возврат УсловияЗапретаВыполнения;
	КонецЕсли;
	
	Шаблон = ШаблонПроцесса(БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат УсловияЗапретаВыполнения;
	КонецЕсли;
	
	РезультатУсловияЗапретаВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Шаблон,
		"УсловияЗапретаВыполнения");
	Если РезультатУсловияЗапретаВыполнения = Неопределено Тогда
		Возврат УсловияЗапретаВыполнения;
	КонецЕсли;
	УсловияЗапретаВыполнения = РезультатУсловияЗапретаВыполнения.Выгрузить();
	
	Возврат УсловияЗапретаВыполнения;
	
КонецФункции

// Получает шаблон процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес процесс.
//
// Возвращаемое значение:
//  ПроизвольнаяСсылка - Шаблон процесса.
//
Функция ШаблонПроцесса(БизнесПроцесс) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс, "Шаблон, ВедущаяЗадача");
	Шаблон = Реквизиты.Шаблон;
	Если Не ЗначениеЗаполнено(Реквизиты.Шаблон) И ЗначениеЗаполнено(Реквизиты.ВедущаяЗадача) Тогда
		Шаблон = ШаблонЭтапаПроцесса(БизнесПроцесс);
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

// Получает шаблон этапа процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес процесс, являющийся этапом комплексного процесса.
//
// Возвращаемое значение:
//  ПроизвольнаяСсылка - Шаблон процесса.
//
Функция ШаблонЭтапаПроцесса(БизнесПроцесс) Экспорт
	
	ШаблонЭтапа = Неопределено;
	
	ИдентификаторЭтапа = Неопределено;
	КомплексныйПроцесс = Неопределено;
	ИдентификаторыЭтапов = Новый Массив;
	ПроцессыКОбработке = Новый Массив;
	ПроцессыКОбработке.Добавить(БизнесПроцесс);
	Пока ПроцессыКОбработке.Количество() <> 0 Цикл
		ПроцессКОбработке = ПроцессыКОбработке[0];
		ПроцессыКОбработке.Удалить(0);
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КомплексныйПроцессЭтапы.Ссылка,
			|	КомплексныйПроцессЭтапы.ИдентификаторЭтапа
			|ИЗ
			|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
			|ГДЕ
			|	КомплексныйПроцессЭтапы.ЗапущенныйБизнесПроцесс = &ЗапущенныйБизнесПроцесс";
		Запрос.УстановитьПараметр("ЗапущенныйБизнесПроцесс", ПроцессКОбработке);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КомплексныйПроцесс = Выборка.Ссылка;
			ПроцессыКОбработке.Добавить(Выборка.Ссылка);
			ИдентификаторыЭтапов.Добавить(Выборка.ИдентификаторЭтапа);
			Если ИдентификаторЭтапа = Неопределено Тогда
				ИдентификаторЭтапа = Выборка.ИдентификаторЭтапа;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(КомплексныйПроцесс) Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	Шаблон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомплексныйПроцесс, "Шаблон");
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	ШаблоныКОбработке = Новый Массив;
	ШаблоныКОбработке.Добавить(Шаблон);
	Пока ШаблоныКОбработке.Количество() <> 0 Цикл
		ШаблонКОбработке = ШаблоныКОбработке[0];
		ШаблоныКОбработке.Удалить(0);
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ИдентификаторЭтапа КАК ИдентификаторЭтапа
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &Ссылка
			|	И ШаблоныКомплексныхБизнесПроцессовЭтапы.ИдентификаторЭтапа В(&ИдентификаторыЭтапов)";
		Запрос.УстановитьПараметр("Ссылка", ШаблонКОбработке);
		Запрос.УстановитьПараметр("ИдентификаторыЭтапов", ИдентификаторыЭтапов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныКОбработке.Добавить(Выборка.ШаблонБизнесПроцесса);
			Если Выборка.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
				ШаблонЭтапа = Выборка.ШаблонБизнесПроцесса;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ШаблонЭтапа;
	
КонецФункции

// Текст предупреждения запрета выполнения в виде строки.
//
// Параметры:
//  Задача - ЗадачаСсылка - Задача.
//  ШаблонТекстаПредупреждения - Строка - Шаблон текста предупреждения.
// 
// Возвращаемое значение:
//  Строка - Текст предупреждения запрета выполнения.
//
Функция ТекстПредупрежденияЗапретаВыполненияСтрока(Задача, Шаблон) Экспорт
	
	ТекстПредупреждения = Шаблон;
	
	Предметы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Предметы").Выгрузить();
	Для Каждого Предмет Из Предметы Цикл
		ШаблонПредмета = СтрШаблон("[Предметы.""%1""]", Предмет.ИмяПредмета);
		ТекстПредмета = СтрШаблон("%1 (%2)", Предмет.Предмет, Предмет.ИмяПредмета);
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, ШаблонПредмета, ТекстПредмета);
	КонецЦикла;
	
	ТекстПредупреждения = "- " + ТекстПредупреждения;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Текст предупреждения запрета выполнения в виде форматированной строки.
//
// Параметры:
//  Задача - ЗадачаСсылка - Задача.
//  ШаблонТекстаПредупреждения - Строка - Шаблон текста предупреждения.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - Текст предупреждения запрета выполнения.
//
Функция ТекстПредупрежденияЗапретаВыполненияФорматированнаяСтрока(Задача, Шаблон) Экспорт
	
	ОписанияСтрок = Новый Массив;
	ОписанияСтрок.Добавить("- ");
	ОписанияСтрок.Добавить(Шаблон);
	
	Предметы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Предметы").Выгрузить();
	Для Каждого Предмет Из Предметы Цикл
		
		НавигационнаяСсылкаПредмета = Неопределено;
		Если ЗначениеЗаполнено(Предмет.Предмет) Тогда
			НавигационнаяСсылкаПредмета = ПолучитьНавигационнуюСсылку(Предмет.Предмет);
		КонецЕсли;
		
		ШаблонПредмета = СтрШаблон("[Предметы.""%1""]", Предмет.ИмяПредмета);
		ДлинаШаблонаПредмет = СтрДлина(ШаблонПредмета);
		ФорматированнаяСтрокаПредмет = Новый ФорматированнаяСтрока(
			СтрШаблон("%1 (%2)", Предмет.Предмет, Предмет.ИмяПредмета),,,,
			НавигационнаяСсылкаПредмета);
		
		Индекс = 0;
		Пока Индекс < ОписанияСтрок.Количество() Цикл
			
			ОписаниеСтроки = ОписанияСтрок[Индекс];
			Если ТипЗнч(ОписаниеСтроки) <> Тип("Строка") Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			ПозицияШаблона = СтрНайти(ОписаниеСтроки, ШаблонПредмета);
			Если ПозицияШаблона = 0 Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			ТекстДо = Лев(ОписаниеСтроки, ПозицияШаблона - 1);
			ТекстПосле = Сред(ОписаниеСтроки, ПозицияШаблона + ДлинаШаблонаПредмет);
			
			ОписанияСтрок.Удалить(Индекс);
			ОписанияСтрок.Вставить(Индекс, ТекстПосле);
			ОписанияСтрок.Вставить(Индекс, ФорматированнаяСтрокаПредмет);
			ОписанияСтрок.Вставить(Индекс, ТекстДо);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(ОписанияСтрок);
	
	Возврат ТекстПредупреждения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает массив состоящий из текущего пользователя и пользователей, 
// которых замещает текущий пользователь
// 
// Возвращаемое значение:
//  Массив - массив пользователей
//
Функция ИсполнителиЗадачПользователя(ТекущийПользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбластиДелегированияПравСостав.Ссылка,
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных
		|ПОМЕСТИТЬ ОбластиСЗадачами
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных.Родитель = &ИдентификаторОбъектовМетаданныхЗадачи
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДелегированиеПравПользователям.ОтКого КАК Исполнитель
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПравПользователям
		|ГДЕ
		|	ДелегированиеПравПользователям.Кому = &ТекущийПользователь
		|	И ДелегированиеПравПользователям.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|	И НЕ ДелегированиеПравПользователям.ПометкаУдаления
		|	И ДелегированиеПравПользователям.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.ОтКого
		|ИЗ
		|	Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ДелегированиеПравОбластиДелегирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластиСЗадачами КАК ОбластиСЗадачами
		|		ПО ДелегированиеПравОбластиДелегирования.ОбластьДелегирования = ОбластиСЗадачами.Ссылка
		|ГДЕ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.Кому = &ТекущийПользователь
		|	И ДелегированиеПравОбластиДелегирования.Ссылка.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.Выборочно)
		|	И НЕ ДелегированиеПравОбластиДелегирования.Ссылка.ПометкаУдаления
		|	И ДелегированиеПравОбластиДелегирования.Ссылка.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ТекущийПользователь";
		
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ИдентификаторОбъектовМетаданныхЗадачи", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задачи"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

Функция РолиПользователя(ТекущийПользователь = Неопределено) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель В(&ТекущийПользователь)";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
КонецФункции

// Есть ли хотя бы один исполнитель, назначенный на указанную роль.
//
// Параметры:
//   Роль - СправочникСсылка.ПолныеРоли - проверяемая роль.
//
// Результат:
//   Булево
//
Функция ЕстьИсполнителиРоли(Роль) Экспорт
	
	ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(Роль);
	
	Возврат ИсполнителиРоли.Количество() > 0;
	
КонецФункции

// Выполняет перенаправление (изменение исполнителя) задачи.
//
// Параметры
//  Задача  - ЗадачаИсполнителяСсылка - перенаправляемая задача.
//  ИнфоОПеренаправлении  - Структура - информация о новом исполнителе задачи.
//	ИдентификаторФормы - идентификатор формы, из которой было вызвано перенаправление.
//
// Возвращаемое значение:
//   Булево   - Истина, если перенаправление прошло успешно.
//
Функция ПеренаправитьЗадачу(Знач Задача, Знач ИнфоОПеренаправлении,
	ИдентификаторФормы = Неопределено,
	ПроверятьФункциональнуюОпцию = Истина) Экспорт
	
	Результат = Истина;
	
	Если ПроверятьФункциональнуюОпцию И Не ПолучитьФункциональнуюОпцию("ИспользоватьПеренаправлениеЗадач") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Ссылка, "Выполнена");
	Если ЗадачаВыполнена Тогда
		Возврат Результат = Ложь;
	КонецЕсли;
	
	ПраваНаЗадачу = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Задача.Ссылка);
	Если Не ПраваНаЗадачу.Изменение Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для перенаправления задачи.
			|Обратитесь к администратору.';
			|en = 'Insufficient permissions to redirect the task.
			|Contact the administrator.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ВнешняяТранзакция = ТранзакцияАктивна();
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка,, ИдентификаторФормы);
		
		// Сохранение старого исполнителя задачи
		Набор = РегистрыСведений.СведенияОбИсполнителяхЗадач.СоздатьНаборЗаписей();
		Набор.Отбор.Задача.Установить(ЗадачаОбъект.Ссылка);
		Если ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) Тогда
			Набор.Отбор.Участник.Установить(ЗадачаОбъект.Исполнитель);
		Иначе
			Набор.Отбор.Участник.Установить(ЗадачаОбъект.РольИсполнителя);
		КонецЕсли;
		
		Запись = Набор.Добавить();
		Запись.Задача = Задача;
		Если ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) Тогда
			Запись.Участник = ЗадачаОбъект.Исполнитель;
			Запись.УдалитьУчастник = ЗадачаОбъект.Исполнитель;
			Запись.УдалитьОсновнойОбъектАдресации = Неопределено;
			Запись.УдалитьДополнительныйОбъектАдресации = Неопределено;
		Иначе
			Запись.Участник = ЗадачаОбъект.РольИсполнителя;
			РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаОбъект.РольИсполнителя,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			Запись.УдалитьУчастник = РеквизитыРоли.Владелец;
			Запись.УдалитьОсновнойОбъектАдресации = РеквизитыРоли.ОсновнойОбъектАдресации;
			Запись.УдалитьДополнительныйОбъектАдресации = РеквизитыРоли.ДополнительныйОбъектАдресации;
		КонецЕсли;
		
		Набор.Записать(Истина);
		
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ИнфоОПеренаправлении, 
			"Исполнитель, РольИсполнителя");
		
		Если Не ПустаяСтрока(ИнфоОПеренаправлении.Комментарий) Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("КомментарийПеренаправления", ИнфоОПеренаправлении.Комментарий);
		КонецЕсли;	
		Если ИнфоОПеренаправлении.Свойство("Автоперенаправление") Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("Автоперенаправление", ИнфоОПеренаправлении.Автоперенаправление);
		КонецЕсли;
		
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 02.11.2018 {
		Если ИнфоОПеренаправлении.Свойство("ЭскалацияРуководителю") Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("ЭскалацияРуководителю", ИнфоОПеренаправлении.ЭскалацияРуководителю);
		КонецЕсли;
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 02.11.2018 } 
		
		// Установка необходимости обновления прав доступа
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
		ЗадачаОбъект.ПринятаКИсполнению = Ложь;
		ЗадачаОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПриПеренаправленииЗадачи(ЗадачаОбъект);
		
		ПротоколированиеРаботыПользователей.ЗаписатьПеренаправлениеЗадачи(Задача.Ссылка);
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Задача.Ссылка, ИдентификаторФормы);
		
		Возврат Результат;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Процедура ПриПеренаправленииЗадачи(ЗадачаОбъект) 
	
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено Или ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ЗадачаОбъект.БизнесПроцесс));
	ЕстьМетодПриПеренаправленииЗадачи = Ложь;
	Попытка
		ЕстьМетодПриПеренаправленииЗадачи = БизнесПроцессы[ТипБизнесПроцесса.Имя].ЕстьМетодПриПеренаправленииЗадачи()
	Исключение
		// Функция "ЕстьМетодПриПеренаправленииЗадачи" может быть не определена для бизнес-процесса этого типа
	КонецПопытки;
	Если ЕстьМетодПриПеренаправленииЗадачи Тогда
		БизнесПроцессы[ТипБизнесПроцесса.Имя].ПриПеренаправленииЗадачи(ЗадачаОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Получить бизнес-процессы ведущей задачи ЗадачаСсылка.
//
Функция ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка) Экспорт
	
	Итерация = 1;
	ТекстЗапроса = "";
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
		КонецЕсли;
		ФрагментЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ %3
			|	%1.Ссылка КАК Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	%1.ВедущаяЗадача = &ВедущаяЗадача", ТипБизнесПроцесса.Имя, ТипБизнесПроцесса.ПолноеИмя(),
			?(Итерация = 1, "РАЗРЕШЕННЫЕ", ""));
		ТекстЗапроса = ТекстЗапроса + ФрагментЗапроса;
		Итерация = Итерация + 1;
	КонецЦикла;	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);
	Результат = Запрос.Выполнить();
	Возврат Результат;
		
КонецФункции	

// Вид события журнала регистрации для событий данной подсистемы.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Процессы и задачи'; en = 'Processes and tasks'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Вызывается при изменении состояния бизнес-процесса для того, чтобы 
// распространить это изменение состояния на невыполненные задачи этого 
// бизнес-процесса.
//
Процедура ПриИзмененииСостоянияБизнесПроцесса(БизнесПроцесс, СтароеСостояние, НовоеСостояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = Ложь";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Задача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Задача.Заблокировать();
		Задача.СостояниеБизнесПроцесса =  НовоеСостояние;
		Задача.Записать();
		
		ПриИзмененииСостоянияЗадачи(Задача.Ссылка, СтароеСостояние, НовоеСостояние);
	КонецЦикла;

КонецПроцедуры

Процедура ПриИзмененииСостоянияЗадачи(ЗадачаСсылка, СтароеСостояние, НовоеСостояние)
	
	// Меняем состояние вложенных бизнес-процессов
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если НЕ ПравоДоступа("Изменение", МетаданныеБизнесПроцесса) Тогда
		    Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БизнесПроцессы.Ссылка
		|ИЗ
		|	%БизнесПроцесс% КАК БизнесПроцессы
		|ГДЕ
		|   БизнесПроцессы.ВедущаяЗадача = &ВедущаяЗадача
		|   И БизнесПроцессы.ПометкаУдаления = Ложь
		|   И БизнесПроцессы.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		| 	И БизнесПроцессы.Завершен = Ложь";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Состояние = НовоеСостояние;
			БизнесПроцесс.ДополнительныеСвойства.Вставить("ИзменениеСостоянияВложенногоПроцесса", Истина);
			БизнесПроцесс.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Меняем состояние подчиненных бизнес-процессов
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ГлавнаяЗадача = &ГлавнаяЗадача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь
			|   И БизнесПроцессы.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
			| 	И БизнесПроцессы.Завершен = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Состояние = НовоеСостояние;
			БизнесПроцесс.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры
	
// Заполняет реквизит ГлавнаяЗадача при создании бизнес-процесса
// на основании другого бизнес-процесса
//
Процедура ЗаполнитьГлавнуюЗадачу(БизнесПроцессОбъект, ДанныеЗаполнения) Экспорт
	
	Если БизнесПроцессыИЗадачиПереопределяемый.ЗаполнитьГлавнуюЗадачу(БизнесПроцессОбъект, ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцессОбъект.ГлавнаяЗадача = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
		БизнесПроцессОбъект.ГлавнаяЗадача = ДанныеЗаполнения.ЗадачаИсполнителя;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, Представление) Экспорт
	
	Для Каждого ЭлементОформления из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = Представление Тогда
			ЭлементОформления.Отбор.Элементы.Очистить();
			ЭлементОформления.Поля.Элементы.Очистить();
			Возврат ЭлементОформления;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Вставить(0);
	ЭлементОформления.Представление = Представление;
	
	Возврат ЭлементОформления;
	
КонецФункции

// Возвращает число бизнес-Процессов по данному шаблону
Функция ПолучитьЧислоБизнесПроцессовПоШаблону(Шаблон) Экспорт
	
	ТипСсылки = ТипЗнч(Шаблон);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ОбъектДанных.Ссылка), 0) КАК ЧислоПроцессов
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК ОбъектДанных
		|ГДЕ
		|	ОбъектДанных.Шаблон = &Шаблон";
		
	Если ТипСсылки = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Ознакомление");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Поручение");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Рассмотрение");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Регистрация");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Согласование");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Утверждение");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "КомплексныйПроцесс");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "Приглашение");
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		
		ТипШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ТипШаблона");
		
		Если ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "ОбработкаВнутреннегоДокумента");
		ИначеЕсли ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "ОбработкаВходящегоДокумента");
		ИначеЕсли ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнение", "ОбработкаИсходящегоДокумента");
		Иначе
			ВызватьИсключение НСтр("ru = 'Неверный тип шаблона процесса'; en = 'Wrong process template type'");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);	
		
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	Возврат Выборка.ЧислоПроцессов;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Служебный программный интерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"БизнесПроцессыИЗадачиСервер");
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.2";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.6";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеИнформационнойБазыПредметСтрокой";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеСостоянияИПринятияКИсполнению";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.1";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеКодаРолиИсполнителя";
	
КонецПроцедуры	

// Заполнить новое поле ПредметСтрокой у задачи ЗадачаИсполнителя.
// 
Процедура ОбновлениеИнформационнойБазыПредметСтрокой() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК Задачи
		|ГДЕ
		|	Задачи.Предмет <> НЕОПРЕДЕЛЕНО";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.ПредметСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(ЗадачаОбъект.Предметы);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
	КонецЦикла;

КонецПроцедуры

// Обработчик подписки ИзменениеПредметаПередЗаписьюБизнесПроцесса
//
Процедура ИзменениеПредметаПередЗаписьюБизнесПроцессаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <>
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам" Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеПредметы = Неопределено;
	ПредыдущиеПредметы = Неопределено;
	Если Мультипредметность.ИзмененыПредметыДействийПроцесса(Источник, ТекущиеПредметы, ПредыдущиеПредметы) Тогда
		Мультипредметность.ПриИзмененииПредметовБизнесПроцесса(Источник, ТекущиеПредметы, ПредыдущиеПредметы);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет коды в справочнике РолиИсполнителей
Процедура ОбновлениеКодаРолиИсполнителя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка,
		|	РолиИсполнителей.Код
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеКода = ВыборкаДетальныеЗаписи.Код;
		Если ПустаяСтрока(ЗначениеКода) Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеКода) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителейОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		РольИсполнителейОбъект.КраткоеПредставление = ЗначениеКода;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольИсполнителейОбъект);
		
	КонецЦикла;

КонецПроцедуры

// Обработчик подписи ЗадачаПриЗаписи
Процедура ПриЗаписиЗадачиСервер(Источник, Знач Предметы = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <> 
			"ЗаписьСОбновлением_МоихДокументов_КешаИнформацииОбОбъектах_ВизСогласования_ПредметовПодчиненныхПроцессов_ДопРеквизитовПоПредметам_СобытийИзмененияПредметов" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Предметы = Неопределено Тогда
		Предметы = Источник.Предметы;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого Строка Из Предметы Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КешИнформацииОбОбъектах");
		ЭлементБлокировки.УстановитьЗначение("Объект", Строка.Предмет);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЦикла;
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка
		
		Блокировка.Заблокировать();
		
		// Запись признака ЕстьЗадачи
		Если Источник.ПометкаУдаления
			ИЛИ Источник.Выполнена
			ИЛИ Источник.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			Для каждого Строка Из Предметы Цикл
				Если ЗначениеЗаполнено(Строка.Предмет) Тогда
					ЕстьЗадачи = ОбъектИмеетЗадачи(Строка.Предмет, Источник.Ссылка);
					РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Строка.Предмет, "ЕстьЗадачи", ЕстьЗадачи);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для каждого Строка Из Предметы Цикл
				
				Если ЗначениеЗаполнено(Строка.Предмет) Тогда
					
					ЕстьЗадачи = Истина;
					
					Если Источник.Предметы.Найти(Строка.Предмет, "Предмет") = Неопределено Тогда
						Если Не ОбъектИмеетЗадачи(Строка.Предмет, Источник.Ссылка) Тогда
							ЕстьЗадачи = Ложь;
						КонецЕсли;	
					КонецЕсли;
					
					РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Строка.Предмет, "ЕстьЗадачи", ЕстьЗадачи);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Пометить на удаление вложенные и подчиненные бизнес-процессы задачи ЗадачаСсылка.
//
// Параметры
//  ЗадачаСсылка                 - ЗадачаСсылка.ЗадачаИсполнителя
//  НовоеЗначениеПометкиУдаления - Булево
//
Процедура ПриПометкеУдаленияЗадачи(ЗадачаСсылка, НовоеЗначениеПометкиУдаления) Экспорт
	
	ОбъектЗадачи = ЗадачаСсылка.Метаданные();
	Если НовоеЗначениеПометкиУдаления Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивнаяПометкаУдаления", ОбъектЗадачи);
	КонецЕсли;
	Если Не НовоеЗначениеПометкиУдаления Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеСнятиеПометкиУдаления", ОбъектЗадачи);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Помечаем вложенные бизнес-процессы
		УстановитьПривилегированныйРежим(Истина);
		ВложенныеБизнесПроцессы = БизнесПроцессыВедущейЗадачи(ЗадачаСсылка);
		Для Каждого ВложенныйБизнесПроцесс Из ВложенныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ВложенныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;	
		УстановитьПривилегированныйРежим(Ложь);
		
		// Помечаем подчиненные бизнес-процессы
		ПодчиненныеБизнесПроцессы = БизнесПроцессыГлавнойЗадачи(ЗадачаСсылка);
		Для Каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Заблокировать();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив подчиненных указанной задаче бизнес-процессов
//
// Параметры
//  ЗадачаСсылка  - задача.
//
// Возвращаемое значение:
//   массив ссылок на бизнес-процессы
//
Функция БизнесПроцессыГлавнойЗадачи(ЗадачаСсылка) Экспорт
	
	Результат = Новый Массив;
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		// У бизнес-процесса может и не быть главной задачи
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	%1.Ссылка КАК Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	%1.ГлавнаяЗадача = &ГлавнаяЗадача", МетаданныеБизнесПроцесса.Имя, МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЦикла;	
	
	Возврат Результат;
		
КонецФункции	

// Проверяет, что по объекту есть хоть одна незавершенная задача 
//
Функция ОбъектИмеетЗадачи(Предмет, Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Результат
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.Ссылка <> &Ссылка
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Предмет", Предмет);
	Запрос.Параметры.Вставить("Ссылка", Задача);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Заполняет регистр КешИнформацииОбОбъектах при обновлении базы
Процедура ЗаполнитьРегистрКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Предметы.Предмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК Предметы
		|ГДЕ
		|	Предметы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Предметы.Ссылка.Выполнена = ЛОЖЬ
		|	И Предметы.Ссылка.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Предмет = Выборка.Предмет;
		
		Если Не ЗначениеЗаполнено(Предмет) Тогда
			Продолжить; // этот тип владельца не рассматриваем
		КонецЕсли;
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Предмет, "ЕстьЗадачи", Истина); 
		
	КонецЦикла;
	
КонецПроцедуры

// Получает все дочерние бизнес-процессы указанного бизнес-процесса в привилегированном режиме
Процедура ПолучитьДочерниеПроцессы(БизнесПроцесс, МассивПроцессов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс = &РодительскийПроцесс";

	Запрос.УстановитьПараметр("РодительскийПроцесс", БизнесПроцесс.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПроцессов.Добавить(ВыборкаДетальныеЗаписи.ДочернийПроцесс);
	КонецЦикла;

КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Возвращает Истина, если используется подсистема ВнешниеЗадачиИБизнесПроцессы
Процедура ПриОпределенииИспользованияВнешнихЗадачИБизнесПроцессов(ПодсистемаИспользуется) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи") Тогда
		ПодсистемаИспользуется = Истина;
	Иначе
		ПодсистемаИспользуется = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если задача является внешней. 
//
// Параметры
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ПриОпределенииВнешнейЗадачи(ЗадачаСсылка, ЗадачаВнешняя) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи") Тогда
	Иначе
		ЗадачаВнешняя = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вызывается при получении полей представления для бизнес-процессов. Параметры соответствуют
// одноименной процедуре в модуле менеджера бизнес-процесса.
//
Процедура ОбработкаПолученияПолейПредставления(Источник, Поля, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
	Поля.Добавить("Дата");
	
КонецПроцедуры

// Вызывается при получении представления для бизнес-процессов. Параметры соответствуют
// одноименной процедуре в модуле менеджера бизнес-процесса.
//
Процедура ОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстПредставления = НСтр("ru = '%1 от %2'; en = '%1 of %2'");
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстПредставления,
		Данные.Наименование,
		Данные.Дата);
	
КонецПроцедуры

// Обновить признак принятия к исполнению задач при смене версии конфигурации.
// 
Процедура ОбновлениеСостоянияИПринятияКИсполнению() Экспорт
	
	// Обновления состояния бизнес-процессов и задач
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		РеквизитСостояние = МетаданныеБизнесПроцесса.Реквизиты.Найти("Состояние");
		Если РеквизитСостояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Ссылка, "Состояние");
			
			Если Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен И  
				Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				
				БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				БизнесПроцесс.Заблокировать();
				БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
				БизнесПроцесс.Записать();
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Обновления принятия к исполнению задач
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи";
		
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Заблокировать();
		
		Если ЗадачаОбъект.Выполнена Тогда
			ЗадачаОбъект.ПринятаКИсполнению = Истина;
			ЗадачаОбъект.ДатаПринятияКИсполнению = ЗадачаОбъект.ДатаИсполнения;
		КонецЕсли;	
				
		Если ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Остановлен 
			И ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				
			ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
			
		КонецЕсли;	
		
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает информацию о прерывании процесса из протокола работы пользователя.
//  В случае если у текущего процесса отсутствует информация о прерывании,
//  то рекурсивно получает информацию у вышестоящего процесса.
//
// Возвращаемое значение:
//  Структура
//   Дата - дата прерывания процесса    	
//   Пользователь - пользователь прервавший процесс
//   ПричинаПрерывания - причина прерывания процесса
//
Функция ПолучитьИнформациюОПрерыванииПроцесса(БизнесПроцесс) Экспорт
	
	КтоИКогдаПрервалПроцесс = ПротоколированиеРаботыПользователей.ИнформацияОПрерыванииПроцессаИзПротокола(
		БизнесПроцесс);
		
	Если КтоИКогдаПрервалПроцесс <> Неопределено Тогда			
		ПричинаПрерывания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			БизнесПроцесс, 
			"ПричинаПрерывания");
		КтоИКогдаПрервалПроцесс.Вставить("ПричинаПрерывания", ПричинаПрерывания);
		Возврат КтоИКогдаПрервалПроцесс;	
	КонецЕсли;	
	
	// Если в текущем процессе нет информации о прерывании, 
	//  значит прервали вышестоящий процесс, необходимо его найти		
	ГлавныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		БизнесПроцесс, 
		"ГлавнаяЗадача, ВедущаяЗадача");
	
	ГлавнаяЗадача = Неопределено;
	
	Если ЗначениеЗаполнено(ГлавныеЗадачи.ГлавнаяЗадача) Тогда
		ГлавнаяЗадача = ГлавныеЗадачи.ГлавнаяЗадача;
	ИначеЕсли ЗначениеЗаполнено(ГлавныеЗадачи.ВедущаяЗадача) Тогда
		ГлавнаяЗадача = ГлавныеЗадачи.ВедущаяЗадача;
	КонецЕсли;
	
	Если ГлавнаяЗадача = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроцессГлавнойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ГлавнаяЗадача, 
		"БизнесПроцесс");
		
	Если Не ЗначениеЗаполнено(ПроцессГлавнойЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	Возврат ПолучитьИнформациюОПрерыванииПроцесса(ПроцессГлавнойЗадачи);		
		
КонецФункции

// Отмечает указанные задачи как принятые к исполнению
//
Процедура ПринятьЗадачиКИсполнению(Задачи) Экспорт
	
	НовыйМассивЗадач = Новый Массив();
	НачатьТранзакцию();
	Для каждого Задача Из Задачи Цикл
		Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			
			Если ЗадачаОбъект.Выполнена
				ИЛИ ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
				ИЛИ ЗадачаОбъект.ПринятаКИсполнению
				ИЛИ ЗадачаОбъект.ПометкаУдаления Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗадачаОбъект.ПринятаКИсполнению = Истина;
			ЗадачаОбъект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
			Если ЗадачаОбъект.Исполнитель.Пустая() Тогда
				ЗадачаОбъект.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
			КонецЕсли;	
				
			ЗадачаОбъект.Записать();
			
			НовыйМассивЗадач.Добавить(Задача);
		КонецЕсли;	
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Задачи = НовыйМассивЗадач;
	
КонецПроцедуры

// Формирует список подбора для указания исполнителя в полях
// ввода составного типа (Пользователь и Роль)
Функция СформироватьДанныеВыбораИсполнителя(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &Текст
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Наименование ПОДОБНО &Текст";
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Проверяет, является ли бизнес процесс активным.
// 
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - ссылка на бизнес-процесс.
//
// Возвращаемое значение:
// Булево - Истина, если процесс активен,
//        - Ложь, в противном случае.
//
Функция БизнесПроцессАктивен(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс = &БизнесПроцесс
		|	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
		|	И ДанныеБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Объявляет служебные события подсистемы БизнесПроцессыИЗадачи:
//
// Серверные события:
//   ПриОпределенииПредставленияПредметаВнешнейЗадачи,
//   ПриОпределенииСпискаФайлов,
//   ПриВыполненииЗадачиИсточника.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
		
КонецПроцедуры

// Определяет список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	
	
КонецПроцедуры

// Возвращает задачи пользователя за определенный промежуток времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получать задачи.
//  ДатаОкончания - Дата - По какую дату следует получать задачи.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, задачи которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица задач пользователя.
//
Функция ПолучитьЗадачиПользователя(ДатаНачала, ДатаОкончания, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.СрокИсполнения,
		|	Задачи.Наименование
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|ГДЕ
		|	Задачи.СрокИсполнения <= &ДатаОкончания
		|	И Задачи.СрокИсполнения >= &ДатаНачала
		|	И Задачи.Выполнена = ЛОЖЬ
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И НЕ Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
		|	И НЕ Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.РешениеВопросовВыполненияЗадач
		|	И Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);

	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


