
////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес-процессами 
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//Возвращает список значений всех задач по указанному бизнес-процессу
Функция ПолучитьМассивЗадачПоБизнесПроцессу(БизнесПроцессСсылка, ВПривилегированномРежиме = Ложь) Экспорт
	
	Если ВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс." + БизнесПроцессСсылка.Метаданные().Имя + ".Точки КАК ТочкиМаршрута
		|		ПО ЗадачаИсполнителя.ТочкаМаршрута = ТочкиМаршрута.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

//Возвращает массив ссылок на бизнес-процессы, подчиненные указанной задаче
Функция ПолучитьПодчиненныеЗадачеБизнесПроцессы(ЗадачаСсылка, РеквизитПоиска, ВПривилегированномРежиме = Ложь) Экспорт
	
	Если ВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	Результат = Новый Массив;
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.%1 КАК БизнесПроцесс
			|ГДЕ
			|	БизнесПроцесс.%2 = &ЗадачаПараметр",
			ТипБизнесПроцесса.Имя, РеквизитПоиска);
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЗадачаПараметр", ЗадачаСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЦикла;	

	Возврат Результат;
	
КонецФункции

// Записывает процесс с указанным видом записи.
// Вид записи определяет, какие обработчики будут выполняться перед и при записи шаблона.
//
// Но при этом есть ряд обязательных обработчиков, которые выполняются всегда.
// В таких обработчиках нет проверки дополнительного свойства ВидЗаписи.
//
// Параметры:
//   ПроцессОбъект - БизнесПроцессСсылка
//   ВидЗаписи - Строка - может принимать значения:
//                           ПростаяЗапись - запись процесса с отключением обработчиков при/перед записью.
//                           ЗаписьСОбновлениемРезультатаВыполнения - запись процесса только с обновлением РС РезультатыВыполненияПроцессовИЗадач
//                           ЗаписьСОбновлениемОбщегоСпискаПроцессов - запись процесса только с обновлением РС ДанныеБизнесПроцессов
//                           ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей - запись процесса только с обновлением
//                                     РС РезультатыВыполненияПроцессовИЗадач и ДанныеБизнесПроцессов и заполнением УИД исполнителей в процессе Исполнение.
//                           ЗаписьСОбработкойВыполненияЗадачи - запись процесса при выполнении задачи. Используется в случае если при выполнении задачи необходимо
//                                     записать результаты по выполнения в таб. части процесса.
//                           ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам - 
//                                     запись поцесса с:
//                                        обновлением таб. частей ПредметыЗадач (только для процессов обработки вн/вх/исх документов и вопросов выполнения задача),
//                                        добавлением новых предметов (только для КП),
//                                        обновлением РС ДанныеБизнесПроцессов.
//                                        обновлением предметов невыполенных задач
//                           ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов - запись процесса с обновлением регистра ДанныеБизнесПроцессов
//                                      и с изменением сроков исполнения у зависимых процессов/шаблонов.
//
Процедура ЗаписатьПроцесс(ПроцессОбъект, ВидЗаписи) Экспорт
	
	ПроцессОбъект.ДополнительныеСвойства.Вставить("ВидЗаписи", ВидЗаписи);
	ПроцессОбъект.Записать();
	ПроцессОбъект.ДополнительныеСвойства.Удалить("ВидЗаписи");
	
КонецПроцедуры

// Записывает задачу с указанным видом записи.
// Вид записи определяет, какие обработчики будут выполняться перед и при записи шаблона.
//
// Но при этом есть ряд обязательных обработчиков, которые выполняются всегда.
// В таких обработчиках нет проверки дополнительного свойства ВидЗаписи.
//
// Параметры:
//   ЗадачаОбъект - ЗадачаСсылка
//   ВидЗаписи - Строка - может принимать значения:
//                            ПростаяЗапись - запись задачи с отключением обработчиков при/перед записью.
//                            ЗаписьСОбновлением_МоихДокументов_КешаИнформацииОбОбъектах_ВизСогласования_ПредметовПодчиненныхПроцессов_ДопРеквизитовПоПредметам_СобытийИзмененияПредметов -
//                                            запись задачи с обновлением только:
//                                                   регистра сведений МоиДокументы
//                                                   регистра сведений КешИнформацииОбОбъектах
//                                                   справочника ВизыСогласования
//                                                   табличных частей Предметы и ПредметыЗадач подчиненных процессов
//                                                   дополнительных реквизитов задачи заполенных из предметов
//                                                   регистрацией факта изменения предметов
//
Процедура ЗаписатьЗадачу(ЗадачаОбъект, ВидЗаписи) Экспорт
	
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ВидЗаписи", ВидЗаписи);
	ЗадачаОбъект.Записать();
	ЗадачаОбъект.ДополнительныеСвойства.Удалить("ВидЗаписи");
	
КонецПроцедуры

// Возвращает признак добаления наименования предметов
// к наименованию процесса по настройке шаблона.
//
// Параметры:
//  Возвращаемое значение:
//   Процесс - БизнесПроцессОбъект
//
// Возвращаемое значение:
//  Булево
// 
Функция ДобавлятьНаименованиеПредмета(Процесс) Экспорт
	
	ДобавлятьНаименованиеПредмета = Истина;
	
	Если ЗначениеЗаполнено(Процесс.Шаблон) Тогда
		ДобавлятьНаименованиеПредмета = ОбщегоНазначенияДокументооборот.
			ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Процесс.Шаблон, "ДобавлятьНаименованиеПредмета");
	КонецЕсли;
	
	Возврат ДобавлятьНаименованиеПредмета;
	
КонецФункции

// Возвращает автора процесса/задачи.
// Если процесс/задача являются частью комплексного или составного процесса,
// то возвращает автор головного процесса.
//
// Параметры:
//  Объект - БизнесПроцессОбъект,
//           ЗадачаОбъект,
//           БизнесПроцессСсылка,
//           ЗадачаСсылка - задача/процесс.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - автор.
//
Функция АвторПроцессаЗадачи(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = ТипЗнч(Объект);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипОбъекта);
	
	Если ТипОбъекта = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
		Или ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ЭтоСсылка Тогда
			ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект, "БизнесПроцесс");
				
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПроцессЗадачи, "ВедущаяЗадача, Автор");
		Иначе
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.БизнесПроцесс, "ВедущаяЗадача, Автор");
		КонецЕсли;
			
		ВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
		Автор = РеквизитыПроцесса.Автор;
	Иначе
		Если ЭтоСсылка Тогда
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "ВедущаяЗадача, Автор");
				
			ВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
			Автор = РеквизитыПроцесса.Автор;
		Иначе
			ВедущаяЗадача = Объект.ВедущаяЗадача;
			Автор = Объект.Автор;
		КонецЕсли;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(ВедущаяЗадача) Цикл
		ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		
		РеквизитыВедущегоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВедущийПроцесс, "Автор, ВедущаяЗадача");
			
		ВедущаяЗадача = РеквизитыВедущегоПроцесса.ВедущаяЗадача;
		Автор = РеквизитыВедущегоПроцесса.Автор;
	КонецЦикла;
	
	Возврат Автор;
	
КонецФункции

// Возвращает признак фонового выполнения процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоФоновоеВыполнениеПроцесса() Экспорт
	
	ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ФоновоеЗадание.ИмяМетода = "РаботаСКомплекснымиБизнесПроцессамиСервер.ФоноваяМаршрутизацияКомплексныхПроцессов"
		Или ФоновоеЗадание.ИмяМетода = "СтартПроцессовСервер.СтартПроцессов"
		Или ФоновоеЗадание.ИмяМетода = "СтартПроцессовСервер.СтартОтложенныхПроцессов"
		Или ФоновоеЗадание.ИмяМетода = "ВыполнениеЗадачСервер.ВыполнениеЗадач"
		Или ФоновоеЗадание.ИмяМетода = "ВыполнениеЗадачПоПочтеСервер.ВыполнитьЗадачиПоПочте"
		Или ФоновоеЗадание.ИмяМетода = "ЭскалацияЗадач.ЭскалацияЗадач";
	
КонецФункции

// Устанавливает состояние процессу перед записью из формы объекта.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект - объект в обработчике ПередЗаписьюНаСервере.
//  ПараметрыЗаписи - Структура - структура параметров записи.
//
Процедура УстановитьСостояниеПроцессуПередЗаписьюИзФормыОбъекта(
	ПроцессОбъект, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ИзменениеСостоянияПроцесса")
		И ПараметрыЗаписи.ИзменениеСостоянияПроцесса
		И ПараметрыЗаписи.Свойство("НовоеСостояние") Тогда
		
		ПроцессОбъект.Состояние = ПараметрыЗаписи.НовоеСостояние;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Исполнение
//           БизнесПроцессСсылка.Исполнение
//           СправочникОбъект.ШаблоныИсполнения
//           СправочникСсылка.ШаблоныИсполнения - ссылка или объект процесса исполнения или его шаблона.
//
Процедура ДобавитьУчастниковИсполненияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Контролер,
			|Проверяющий");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Проверяющий", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Проверяющий);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.КомплексныйПроцесс
//           БизнесПроцессСсылка.КомплексныйПроцесс
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов
//           СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов - ссылка или объект комплексного процесса или его шаблона.
//
Процедура ДобавитьУчастниковКомплексногоПроцессаВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Контролер");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер);
		
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Ознакомление
//           БизнесПроцессСсылка.Ознакомление
//           СправочникОбъект.ШаблоныОзнакомления
//           СправочникСсылка.ШаблоныОзнакомления - ссылка или объект процесса ознакомления или его шаблона.
//
Процедура ДобавитьУчастниковОзнакомленияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Автор");
		
		СсылкаНаПроцесс = Объект;
		
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Поручение
//           БизнесПроцессСсылка.Поручение
//           СправочникОбъект.ШаблоныПоручения
//           СправочникСсылка.ШаблоныПоручения - ссылка или объект процесса поручения или его шаблона.
//
Процедура ДобавитьУчастниковПорученияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Исполнитель,
			|Контролер,
			|Проверяющий");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Исполнитель", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Проверяющий", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Исполнитель);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Проверяющий);
		
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
		
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Приглашение
//           БизнесПроцессСсылка.Приглашение
//           СправочникОбъект.ШаблоныПриглашения
//           СправочникСсылка.ШаблоныПриглашения - ссылка или объект процесса приглашения или его шаблона.
//
Процедура ДобавитьУчастниковПриглашенияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	// Добавление автора
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	// Добавление таблицы приглашенных лиц
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Рассмотрение
//           БизнесПроцессСсылка.Рассмотрение
//           СправочникОбъект.ШаблоныРассмотрения
//           СправочникСсылка.ШаблоныРассмотрения - ссылка или объект процесса рассмотрения или его шаблона.
//
Процедура ДобавитьУчастниковРассмотренияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипПроцесса);
	
	Если ЭтоСсылка Тогда
		СсылкаНаПроцесс = Объект;
	Иначе
		СсылкаНаПроцесс = Объект.Ссылка;
	КонецЕсли;
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс);
	
	Если ЭтоШаблон Тогда
		РеквизитыПроцесса = 
			"Автор,
			|Исполнитель";
	Иначе
		РеквизитыПроцесса = 
			"Автор,
			|Исполнитель,
			|КонтролерИсполнения,
			|ПроверяющийИсполнения";
	КонецЕсли;
	
	Если ЭтоСсылка Тогда
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, РеквизитыПроцесса);
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура(РеквизитыПроцесса);;
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Исполнитель);
		
	Если Не ЭтоШаблон Тогда
		
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, БизнесПроцессРеквизиты.КонтролерИсполнения);
			
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, БизнесПроцессРеквизиты.ПроверяющийИсполнения);
			
		РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
			ТаблицаНабора, Объект, "ИсполнителиИсполнения");
			
		// Добавление контролеров
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Регистрация
//           БизнесПроцессСсылка.Регистрация
//           СправочникОбъект.ШаблоныРегистрации
//           СправочникСсылка.ШаблоныРегистрации - ссылка или объект процесса рагистрации или его шаблона.
//
Процедура ДобавитьУчастниковРегистрацииВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Исполнитель");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Исполнитель", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Исполнитель);
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач
//           БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - ссылка или объект процесса решения вопросов выполнения задач.
//
Процедура ДобавитьУчастниковРешенияВопросовВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|ИнициаторПроцесса");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ИнициаторПроцесса", Неопределено);
			
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.ИнициаторПроцесса);
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Согласование
//           БизнесПроцессСсылка.Согласование
//           СправочникОбъект.ШаблоныСогласования
//           СправочникСсылка.ШаблоныСогласования - ссылка или объект процесса согласования или его шаблона.
//
Процедура ДобавитьУчастниковСогласованияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Автор");
		
		СсылкаНаПроцесс = Объект;
		
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
		ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Утверждение
//           БизнесПроцессСсылка.Утверждение
//           СправочникОбъект.ШаблоныУтверждения
//           СправочникСсылка.ШаблоныУтверждения - ссылка или объект процесса утверждения или его шаблона.
//
Процедура ДобавитьУчастниковУтвержденияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Исполнитель");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Исполнитель", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Исполнитель);
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормаЗадачиПроцесса

// Обработчик ПередЗаписьюНаСервере формы задачи
//
// Параметры:
//  Форма – УправляемаяФорма - карточка задачи.
//  Отказ, ТекущийОбъект, ПараметрыЗаписи - стандартные параметры соответствующего обработчика.
//
Процедура ФормаЗадачиПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Форма.ФактическийИсполнительЗадачи)
		И ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") И ПараметрыЗаписи.ВыполнитьЗадачу Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"ФактическийИсполнительЗадачи", Форма.ФактическийИсполнительЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриЗаписиНаСервере формы задачи
//
// Параметры:
//  Форма – УправляемаяФорма - карточка задачи.
//  Отказ, ТекущийОбъект, ПараметрыЗаписи - стандартные параметры соответствующего обработчика.
//  ПараметрыФоновогоВыполнения - Структура - содержит особые параметры выполнения текущей задачи.
//
Процедура ФормаЗадачиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи,
	ПараметрыФоновогоВыполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ВыполнитьЗадачуФоново")
		И ПараметрыЗаписи.ВыполнитьЗадачуФоново Тогда
		
		Если ПараметрыФоновогоВыполнения = Неопределено Тогда
			ПараметрыФоновогоВыполнения = Новый Структура;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ФактическийИсполнительЗадачи) Тогда
			ПараметрыФоновогоВыполнения.Вставить("ФактическийИсполнительЗадачи",
				Форма.ФактическийИсполнительЗадачи);
		КонецЕсли;
		
		РегистрыСведений.ЗадачиДляВыполнения.ДобавитьЗадачуДляФоновогоВыполнения(
			ТекущийОбъект, ПараметрыФоновогоВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РИБ

// Обрабатывает получаемые процессы.
// Вызывается из обработчиков ПриПолученииДанныхОтГлавного, ПриПолученииДанныхОтПодчиненного плана обмена Полный.
//
Процедура ОбработатьПолучениеПроцессаИзУзлаРИБ(Узел, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоБизнесПроцесс(ЭлементДанных)
		И Не ЭлементДанных.Ссылка.Пустая() Тогда
		
		ОтправкаНазад = Ложь;
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЭлементДанных.Ссылка);
		МенеджерПроцесса.ОбработатьПолучениеПроцессаИзУзлаРИБ(Узел, ЭлементДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает получаемые задачи.
// Вызывается из обработчиков ПриПолученииДанныхОтГлавного, ПриПолученииДанныхОтПодчиненного плана обмена Полный.
//
Процедура ОбработатьПолучениеЗадачиИзУзлаРИБ(Узел, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлементДанных) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") 
		И Не ЭлементДанных.Ссылка.Пустая() Тогда
		
		ОтправкаНазад = Ложь;
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
		ЭтотУзел = ЭтотУзелОбменаДляОбработкиПроцессов();
		
		УзелОбменаПроцесса = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ЭлементДанных.БизнесПроцесс, "УзелОбмена");
			
		НеПередающиесяПоляЗадач = Новый Массив;
		НеПередающиесяПоляЗадач.Добавить("Исполнитель");
		НеПередающиесяПоляЗадач.Добавить("РольИсполнителя");
		НеПередающиесяПоляЗадач.Добавить("УдалитьРольИсполнителя");
		НеПередающиесяПоляЗадач.Добавить("УдалитьОсновнойОбъектАдресации");
		НеПередающиесяПоляЗадач.Добавить("УдалитьДополнительныйОбъектАдресации");
		НеПередающиесяПоляЗадач.Добавить("ДатаПринятияКИсполнению");
		НеПередающиесяПоляЗадач.Добавить("ПринятаКИсполнению");
		НеПередающиесяПоляЗадач.Добавить("РезультатВыполнения");
		НеПередающиесяПоляЗадач.Добавить("ТекущийИсполнитель");
		НеПередающиесяПоляЗадач.Добавить("УдалитьТекущийИсполнитель");
		НеПередающиесяПоляЗадач.Добавить("УдалитьТекущийОсновнойОбъектАдресации");
		НеПередающиесяПоляЗадач.Добавить("УдалитьТекущийДополнительныйОбъектАдресации");
		
		Если ЭтотУзел = УзелОбменаПроцесса Тогда // Получение задачи в мастер-узле.
			
			ЗаписатьЗадачу = Ложь;
			
			ЗадачаПоСсылке = ЭлементДанных.Ссылка.ПолучитьОбъект();
			
			КоличествоПредметовДоДобавления = ЗадачаПоСсылке.Предметы.Количество();
			
			ДобавитьНовыеПредметыВЗадачу(ЗадачаПоСсылке, ЭлементДанных.Предметы);
			
			КоличествоПредметовПослеДобавления = ЗадачаПоСсылке.Предметы.Количество();
			
			Если КоличествоПредметовДоДобавления <> КоличествоПредметовПослеДобавления Тогда
				ЗаписатьЗадачу = Истина;
			КонецЕсли;
			
			Если ЗаписатьЗадачу Тогда
				ЗадачаПоСсылке.ОбменДанными.Загрузка = Истина;
				ЗадачаПоСсылке.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
				ЗадачаПоСсылке.Записать();
			Иначе
				
				МетаданныеЗадачи = ЭлементДанных.Ссылка.Метаданные();
				ИменаПолейДляСравнения = "";
				Разделитель = "";
				Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.Реквизиты Цикл
					Если НеПередающиесяПоляЗадач.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ИменаПолейДляСравнения = ИменаПолейДляСравнения
						+ Разделитель
						+ РеквизитЗадачи.Имя;
					Разделитель = ",";
				КонецЦикла;
				Для Каждого РеквизитЗадачи Из МетаданныеЗадачи.СтандартныеРеквизиты Цикл
					Если НеПередающиесяПоляЗадач.Найти(РеквизитЗадачи.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ИменаПолейДляСравнения = ИменаПолейДляСравнения
						+ Разделитель
						+ РеквизитЗадачи.Имя;
					Разделитель = ",";
				КонецЦикла;
				
				СтруктураЗадачиПоСсылке = Новый Структура(ИменаПолейДляСравнения);
				ЗаполнитьЗначенияСвойств(СтруктураЗадачиПоСсылке, ЗадачаПоСсылке);
				
				СтруктураЗадачи = Новый Структура(ИменаПолейДляСравнения);
				ЗаполнитьЗначенияСвойств(СтруктураЗадачи, ЭлементДанных);
				
				Если Не ОбщегоНазначения.ДанныеСовпадают(СтруктураЗадачиПоСсылке, СтруктураЗадачи) Тогда
					РаботаСБизнесПроцессами.ЗарегистрироватьИзмененияПроцессаЗадачи(ЗадачаПоСсылке);
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ЭлементДанных.Выполнена Тогда // получение выполненной задачи в обычном узле
			ЭлементДанных.ОбменДанными.Загрузка = Истина;
			ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
			ЭлементДанных.Записать();
		Иначе
			
			// Принимает все пришедшие изменения, за исключением полей, которые
			// сохраняются для работы с задачей в текущем узле.
			ПоляДляПолучения = НеПередающиесяПоляЗадач;
			
			ПоляДляПолучения.Добавить("Предметы");
			
			ПоляЗадачи = СтрСоединить(ПоляДляПолучения, ",");
			
			РеквизитыЗадачи = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				ЭлементДанных.Ссылка, ПоляЗадачи);
				
			Предметы = РеквизитыЗадачи.Предметы.Выгрузить();
			РеквизитыЗадачи.Удалить("Предметы");
			
			ЗаполнитьЗначенияСвойств(ЭлементДанных, РеквизитыЗадачи);
			
			ДобавитьНовыеПредметыВЗадачу(ЭлементДанных, Предметы);
			
			ЭлементДанных.ОбменДанными.Загрузка = Истина;
			ЭлементДанных.ДополнительныеСвойства.Вставить("УзелОтправитель", Узел);
			ЭлементДанных.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текущий УзелОбмена для обработки процессов.
// 
// Возвращаемое значение:
//   УникальныИдентификатор - идентификатор текущего узла (реквизит УИД в плане обмена Полный)
//
Функция ЭтотУзелОбменаДляОбработкиПроцессов() Экспорт
	
	ЭтотУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена("Полный");
	
	Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(ЭтотУзел, "ИдентификаторУзла");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РИБ

// Обработчик подписки на событие РегистрацияИзмененийПроцессовИЗадачДляРИБ
//
Процедура РегистрацияИзмененийПроцессовИЗадачДляРИБ(Источник, Отказ) Экспорт
	
	ЗарегистрироватьИзмененияПроцессаЗадачи(Источник);
	
КонецПроцедуры

// Регистрирует изменения в процессах и задачах для плана обмена Полный.
//
// Параметры:
//   ПроцессЗадача - ЗадачаОбъект.ЗадачаИсполнителя, БизнесПроцессОбъект - задача или процесс,
//                   для которой производиться регистрация изменений.
//
Процедура ЗарегистрироватьИзмененияПроцессаЗадачи(ПроцессЗадача) Экспорт
	
	УзелОтправитель = Неопределено;
	ПроцессЗадача.ДополнительныеСвойства.Свойство("УзелОтправитель", УзелОтправитель);
	
	УзлыПолногоПланаОбмена = ПланыОбмена.Полный.Выбрать();
	
	МассивУзлов = Новый Массив;
	
	ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
	
	Пока УзлыПолногоПланаОбмена.Следующий() Цикл
		
		Если УзлыПолногоПланаОбмена.Ссылка = ЭтотУзел
			Или УзлыПолногоПланаОбмена.Ссылка = УзелОтправитель Тогда
			
			Продолжить;
		КонецЕсли;
		
		МассивУзлов.Добавить(УзлыПолногоПланаОбмена.Ссылка);
	КонецЦикла;
	
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ПроцессЗадача.Ссылка);
	
КонецПроцедуры

// Добавляет новые предметы в задачу.
//
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача объект, в которую добавляются
//            новые предметы.
//   НовыеПредметы - ТаблицаЗначений, ТабличнаяЧасть - соответствует табличной части Предметы в задаче.
//
Процедура ДобавитьНовыеПредметыВЗадачу(Задача, НовыеПредметы)
	
	Для Каждого СтрПредмет Из НовыеПредметы Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Предмет", СтрПредмет.Предмет);
		Отбор.Вставить("ИмяПредмета", СтрПредмет.ИмяПредмета);
		
		НайденныеСтроки = Задача.Предметы.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовСтрПредмет = Задача.Предметы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрПредмет, СтрПредмет);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет новые предметы в процесс.
//
// Параметры:
//   Процесс - БизнесПроцессОбъект - процесс объект, в который добавляются новые предметы.
//   НовыеПредметы - ТаблицаЗначений, ТабличнаяЧасть - соответствует табличной части Предметы в процессе.
//   НовыеПредметыЗадач - ТаблицаЗначений, ТабличнаяЧасть - соответствует табличной части ПредметыЗадач в процессе.
//
Процедура ДобавитьНовыеПредметыВПроцесс(Процесс, НовыеПредметы, НовыеПредметыЗадач) Экспорт
	
	ДобавленыПредметы = Ложь;
	
	Для Каждого СтрПредмет Из НовыеПредметы Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Предмет", СтрПредмет.Предмет);
		Отбор.Вставить("ИмяПредмета", СтрПредмет.ИмяПредмета);
		
		НайденныеСтроки = Процесс.Предметы.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовСтрПредмет = Процесс.Предметы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрПредмет, СтрПредмет);
			ДобавленыПредметы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавленыПредметы Тогда
		Для Каждого СтрПредметЗадач Из НовыеПредметыЗадач Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("ТочкаМаршрута", СтрПредметЗадач.ТочкаМаршрута);
			Отбор.Вставить("ИмяПредмета", СтрПредметЗадач.ИмяПредмета);
			
			НайденныеСтроки = Процесс.ПредметыЗадач.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовСтрПредметЗадач = Процесс.ПредметыЗадач.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрПредметЗадач, СтрПредметЗадач);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданный объект БизнесПроцессом.
//
// Параметры:
//   Процесс - БизнесПроцессОбъект - проверяемый процесс.
//
Функция ЭтоБизнесПроцесс(Процесс)
	
	ТипОбъекта = ТипЗнч(Процесс);
	
	Возврат ТипОбъекта = Тип("БизнесПроцессОбъект.Исполнение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.КомплексныйПроцесс")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.ОбработкаВходящегоДокумента")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.ОбработкаИсходящегоДокумента")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Ознакомление")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Поручение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Приглашение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Рассмотрение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Регистрация")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Согласование")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Утверждение");
	
КонецФункции

#КонецОбласти


