////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, учет времени
// Реализует функционал веб-сервиса DMService в части хронометража 
// и учета трудозатрат
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает список документов ЕжедневныйОтчет по заданным условиям 
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа DMGetObjectListRequest
//	Ответ - ОбъектXDTO - возвращаемый результат DMGetObjectListResponse
//	ИмяТипа - Строка - имя таблицы для запроса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокЕжедневныхОтчетов(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка 
		
		Отбор = Новый Структура;
		
		Если Сообщение.query <> Неопределено Тогда 
			
			Для Каждого Условие Из Сообщение.query.conditions Цикл
				
				Если ВРег(Условие.property) = ВРег("byUser") Тогда
					Отбор.Вставить(ИмяРеквизитаUser(), ПараметрыСеанса.ТекущийПользователь);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("beginDate") Тогда
					Отбор.Вставить("ДатаНачала", Условие.value);
				
				ИначеЕсли ВРег(Условие.property) = ВРег("endDate") Тогда 
					Отбор.Вставить("ДатаОкончания", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("AdditionalProperty") И Сообщение.Type = "DMObjectPropertyValue" Тогда
					Отбор.Вставить("Владелец", ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеРеквизитов = Новый Соответствие;
		СоответствиеРеквизитов.Вставить("НачалоДня", "dayBegin");
		СоответствиеРеквизитов.Вставить("ОкончаниеДня", "dayEnd");
		СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
		СоответствиеРеквизитов.Вставить("НекорректнаяДлительность", "durationIncorrect");
		СоответствиеРеквизитов.Вставить("Автор", "author#DMUser");
		СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка,
		|	Номер,
		|	Дата,
		|	ПометкаУдаления,
		|	Проведен";
		
		Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
			Запрос.Текст = Запрос.Текст + 
				",
				|	" + ЭлементСоответствия.Ключ;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + " ИЗ " + ИмяТипа;
		
		Если Отбор.Количество() > 0 Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ ПометкаУдаления = Ложь И ";
			
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Если СтрокаОтбора.Ключ = ИмяРеквизитаUser() Тогда 
					Запрос.Текст = Запрос.Текст 
						+ ИмяРеквизитаUser() + " = &Пользователь"
						+ " И ";
					Запрос.УстановитьПараметр("Пользователь",  СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаНачала" Тогда 
					Запрос.Текст = Запрос.Текст 
						+ "Дата >= &ДатаНачала"
						+ " И ";
					Запрос.УстановитьПараметр("ДатаНачала",  СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаОкончания" Тогда 
					Запрос.Текст = Запрос.Текст 
						+ "Дата <= &ДатаОкончания"
						+ " И ";
					Запрос.УстановитьПараметр("ДатаОкончания",  СтрокаОтбора.Значение);
	            КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Ответ = Неопределено Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаОтвета = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDailyReport");
			
			ЗаполнитьОсновныеСвойстваXDTOДокумента(ДокументXDTO, Выборка);
			ЗаполнитьСвойстваXDTOПоСоответствию(ДокументXDTO, Выборка, СоответствиеРеквизитов);
			
			СтрокаОтвета.object = ДокументXDTO;
			
			Ответ.items.Добавить(СтрокаОтвета);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка документов'; en = 'Error retrieving list of documents'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает ОбъектXDTO документа ЕжедневныйОтчет
//
// Параметры:
//	ОбъектID - ОбъектXDTO - Объект DMObjectID
//	НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция ПолучитьЕжедневныйОтчет(ОбъектID, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектID);
		
		ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Ссылка);
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Ссылка);
		
		Объект = Ссылка.ПолучитьОбъект();
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDailyReport");
		ПолучитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении ежедневного отчета'; en = 'Error retrieving daily report'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет ежедневный отчет по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого документа типа DMDailyReport
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция ИзменитьЕжедневныйОтчет(Узел, ОбъектXDTO) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеЕжедневногоОтчета(Узел, Документ, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьЕжедневныйОтчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании ежедневного отчета'; en = 'Error creating daily report'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового ежедневного отчета
//
// Параметры:
//	НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция ПолучитьНовыйЕжедневныйОтчет(НаборКолонок) Экспорт
	
	Попытка
		
		Объект = Документы.ЕжедневныйОтчет.СоздатьДокумент();
		Объект.Заполнить(Неопределено);
		
		Объект.Дата = ТекущаяДатаСеанса();
		
		Если Не ЗначениеЗаполнено(Объект[ИмяРеквизитаUser()]) Тогда 
			Объект[ИмяРеквизитаUser()] = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект[ИмяРеквизитаUser()]);
		
		Если Не ЗначениеЗаполнено(Объект.СпособУказанияВремени) Тогда 
			Объект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		КонецЕсли;
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		
		УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDailyReport");
		ПолучитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового ежедневного отчета'; en = 'Error retrieving new outgoing document'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
	
КонецФункции

// Создает ежедневный отчет из объекта XDTO
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция СоздатьЕжедневныйОтчет(Сообщение) Экспорт
	
	Попытка 
		
		Объект = Документы.ЕжедневныйОтчет.СоздатьДокумент();
		ОбъектXDTO = Сообщение.object;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Если Не ЗаписатьДанныеЕжедневногоОтчета(Узел, Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕжедневныйОтчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании ежедневного отчета'; en = 'Error creating daily report'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает список записей о фактических трудозатратах по заданным условиям
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа DMGetObjectListRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокФактическихТрудозатрат(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка 
		
		Отбор = Новый Структура;
		
		Если Сообщение.query <> Неопределено Тогда 
			
			Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
			
			Для Каждого Условие Из Сообщение.query.conditions Цикл
				
				Если ВРег(Условие.property) = ВРег("byUser") Тогда
					Если ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
						Отбор.Вставить(ИмяРеквизитаUser(),
							ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value));
					Иначе
						Отбор.Вставить(ИмяРеквизитаUser(),
							ПараметрыСеанса.ТекущийПользователь);
					КонецЕсли;
					
				ИначеЕсли ВРег(Условие.property) = ВРег("beginDate") Тогда
					Отбор.Вставить("ДатаНачала", Условие.value);
				
				ИначеЕсли ВРег(Условие.property) = ВРег("endDate") Тогда 
					Отбор.Вставить("ДатаОкончания", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("source") Тогда 
					Если ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
						Отбор.Вставить("Источник", ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value));
					ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "ExternalObject") Тогда
						Источники = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(Узел, Условие.value.ID, Условие.value.type);
						Если Источники.Количество() > 0 Тогда
							Отбор.Вставить("Источник", Источники);
						Иначе
							Отбор.Вставить("Источник", Неопределено);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеРеквизитов = Новый Соответствие;
		СоответствиеРеквизитов.Вставить("ДатаДобавления", "addDate");
		СоответствиеРеквизитов.Вставить("Начало", "begin");
		СоответствиеРеквизитов.Вставить("Окончание", "end");
		СоответствиеРеквизитов.Вставить("ОписаниеРаботы", "description");
		СоответствиеРеквизитов.Вставить("Длительность", "duration");
		СоответствиеРеквизитов.Вставить("ВидРабот", "workType#DMWorkType");
		СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
		СоответствиеРеквизитов.Вставить("Проект", "project#DMProject");
		СоответствиеРеквизитов.Вставить("ПроектнаяЗадача", "projectTask#DMProjectTask");
		СоответствиеРеквизитов.Вставить("Источник", "source#DMObject");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомерДобавления";
		
		Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
			Запрос.Текст = Запрос.Текст + 
				",
				|	" + ЭлементСоответствия.Ключ;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + " ИЗ " + ИмяТипа;
		
		Если Отбор.Количество() > 0 Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Удалена = Ложь И ";
			
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Если СтрокаОтбора.Ключ = ИмяРеквизитаUser() Тогда 
					Запрос.Текст = Запрос.Текст 
						+ ИмяРеквизитаUser() + " = &Пользователь"
						+ " И ";
					Запрос.УстановитьПараметр("Пользователь",  СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаНачала" Тогда 
					Запрос.Текст = Запрос.Текст 
						+ "ДатаДобавления >= &ДатаНачала"
						+ " И ";
					Запрос.УстановитьПараметр("ДатаНачала",  СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаОкончания" Тогда 
					Запрос.Текст = Запрос.Текст 
						+ "ДатаДобавления <= &ДатаОкончания"
						+ " И ";
					Запрос.УстановитьПараметр("ДатаОкончания",  СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "Источник" Тогда 
					Запрос.Текст = Запрос.Текст 
						+ "Источник В (&Источник) И Источник <> Неопределено"
						+ " И ";
					Запрос.УстановитьПараметр("Источник",  СтрокаОтбора.Значение);
	            КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Ответ = Неопределено Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаОтвета = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualWork");
			
			ЗаполнитьСвойстваXDTOПоСоответствию(СтрокаXDTO, Выборка, СоответствиеРеквизитов);
			
			СтрокаОтвета.object = СтрокаXDTO;
			
			Ответ.items.Добавить(СтрокаОтвета);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка фактических трудозатрат'; en = 'Error retrieving list of actual time spend records'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
	
КонецФункции

// Получает объект XDTO для новой записи фактических трудозатрат
//
// Параметры:
//	НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMActualWork или DMError
//
Функция ПолучитьНовуюЗаписьФактическихТрудозатрат(НаборКолонок) Экспорт
	
	Попытка
		
		ТекущаяДата = ТекущаяДатаСеанса();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФактическиеТрудозатраты.Окончание,
		|	ФактическиеТрудозатраты.ДатаДобавления КАК ДатаДобавления
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.ДатаДобавления >= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДобавления УБЫВ";
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата));
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Начало = ТекущаяДата - НачалоДня(ТекущаяДата);
		Иначе
			Начало = Результат.Выгрузить()[0].Окончание - '00010101';
		КонецЕсли;
		
		Окончание = ТекущаяДата - НачалоДня(ТекущаяДата);
		Если Окончание > Начало И Начало <> 0 Тогда 
			Длительность = Окончание - Начало;
		Иначе
			Длительность = 0;
		КонецЕсли;
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualWork");
		
		ВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
		СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "addDate",ТекущаяДатаСеанса());
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "begin", '00010101' + Начало);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "end", '00010101' + Окончание);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "duration", Длительность);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "workType", ВидРабот);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "project", РаботаСПроектами.ПолучитьПроектПоУмолчанию());
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "user", ПараметрыСеанса.ТекущийПользователь);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "projectsEnabled", ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")); 
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "timeInputMethod", СпособУказанияВремени);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "description","");
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении новой записи о фактических трудозатратах.'; en = 'Error retrieving new actual time spent record'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает запись о фактических трудозатратах из объекта XDTO
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMActualWork или DMError
//
Функция СоздатьЗаписьФактическихТрудозатрат(Сообщение) Экспорт
	
	Попытка
		
		ПараметрыОповещения = Неопределено;
		
		ОбъектXDTO = Сообщение.object;
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ДатаОтчета");
		ПараметрыОтчета.Вставить("ВидРаботы");
		ПараметрыОтчета.Вставить("ОписаниеРаботы");
		ПараметрыОтчета.Вставить("ДлительностьРаботы");
		ПараметрыОтчета.Вставить("НачалоРаботы");
		ПараметрыОтчета.Вставить("ОкончаниеРаботы");
		ПараметрыОтчета.Вставить("Проект");
		ПараметрыОтчета.Вставить("ПроектнаяЗадача");
		ПараметрыОтчета.Вставить("Объект");
			
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.ДатаОтчета,         ОбъектXDTO, "addDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.ВидРаботы,          ОбъектXDTO, "workType");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.ОписаниеРаботы,     ОбъектXDTO, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.ДлительностьРаботы, ОбъектXDTO, "duration");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.НачалоРаботы,       ОбъектXDTO, "begin");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.ОкончаниеРаботы,    ОбъектXDTO, "end");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.Проект,             ОбъектXDTO, "project");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.ПроектнаяЗадача,    ОбъектXDTO, "projectTask");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ПараметрыОтчета.Объект,             ОбъектXDTO, "source");
		
		Если ОбъектXDTO.Установлено("user") Тогда
			ПараметрыОтчета.Вставить(ИмяРеквизитаUser());
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел,
				ПараметрыОтчета[ИмяРеквизитаUser()], ОбъектXDTO, "user");
		КонецЕсли;
			
		Если ОбъектXDTO.Установлено("externalSource") Тогда
			Источники = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(
				Узел, ОбъектXDTO.externalSource.ID, ОбъектXDTO.externalSource.type);
				
			Если Источники.Количество() > 0 Тогда
				ПараметрыОтчета.Объект = Источники[0];
				УчетВремени.ОчиститьХронометраж(Источники[0])
			КонецЕсли;
		КонецЕсли;
		
		УчетВремени.ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
	
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при добавлении записи о фактических трудозатратах'; en = 'Error adding actual time spend record'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает данные хронометража по объекту
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа DMGetChronometrationSettingsRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetChronometrationSettingsResponse или DMError
//
Функция ПолучитьПараметрыХронометража(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetChronometrationSettingsResponse");
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Если Сообщение.objects.Количество() > 0 Тогда
			Для Каждого ИсточникXDTO Из Сообщение.objects Цикл
				Источник = Неопределено;
				Если ИсточникXDTO <> Неопределено Тогда
					Если ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "ExternalObject") Тогда
						Источники = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(
							Узел, ИсточникXDTO.ID, ИсточникXDTO.type);
						Если Источники.Количество() > 0 Тогда
							Источник = Источники[0];
						КонецЕсли;
					ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObjectID") Тогда
						Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO);
					ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObject") Тогда
						Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO.objectID);
					КонецЕсли;
				КонецЕсли;
				
				Если Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВнутренниеДокументы") Или
					ТипЗнч(Источник) = Тип("СправочникСсылка.ВходящиеДокументы") Или
					ТипЗнч(Источник) = Тип("СправочникСсылка.ИсходящиеДокументы") Или
					ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или
					ТипЗнч(Источник) = Тип("ДокументСсылка.ВходящееПисьмо") Или
					ТипЗнч(Источник) = Тип("ДокументСсылка.ИсходящееПисьмо") Или
					Источник = Неопределено) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Хронометраж по типу объектов ""%1"" не ведется.'; en = 'Time tracking for object type ""%1"" is not possible.'"),
						Источник.Метаданные().Синоним);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				УстановитьПараметрыУчетаВремени(Ответ, Источник);
			КонецЦикла;
			
		Иначе
			УстановитьАктивныеПараметрыУчетаВремени(Ответ);
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных хронометража'; en = 'Error retrieving time tracking data'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Устанавливает значение хронометража для объекта
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа DMSetChronometrationSettingsRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSetChronometrationSettingsResponse или DMError
//
Функция УстановитьПараметрыХронометража(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSetChronometrationSettingsResponse");
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Для Каждого ИсточникXDTO Из Сообщение.objects Цикл
			Источник = Неопределено;
			Если ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "ExternalObject") Тогда
				Источники = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(
					Узел, ИсточникXDTO.ID, ИсточникXDTO.type);
				Если Источники.Количество() > 0 Тогда
					Источник = Источники[0];
				КонецЕсли;
			ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObjectID") Тогда
				Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO);
			ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObject") Тогда
				Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO.objectID);
			КонецЕсли;
			
			Если Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВнутренниеДокументы") Или
				ТипЗнч(Источник) = Тип("СправочникСсылка.ВходящиеДокументы") Или
				ТипЗнч(Источник) = Тип("СправочникСсылка.ИсходящиеДокументы") Или
				ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или
				ТипЗнч(Источник) = Тип("ДокументСсылка.ВходящееПисьмо") Или
				ТипЗнч(Источник) = Тип("ДокументСсылка.ИсходящееПисьмо") Или
				Источник = Неопределено) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Хронометраж по типу объектов ""%1"" не ведется.'; en = 'Time tracking for object type ""%1"" is not possible.'"),
				Источник.Метаданные().Синоним);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ПараметрыОповещения = Неопределено;
			
			ПараметрыУчетаВремени = Новый Структура;
			ПараметрыУчетаВремени.Вставить("ДатаНачала", '00010101');
			ПараметрыУчетаВремени.Вставить("ДатаОкончания", '00010101');
			ПараметрыУчетаВремени.Вставить("ВключенХронометраж",Ложь);
			ПараметрыУчетаВремени.Вставить("ВидыРабот");
			ПараметрыУчетаВремени.Вставить("СпособУказанияВремени");
			
			ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
			
			ПараметрыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChronometrationSettings");
			
			Если ОпцияВестиУчетТрудозатрат И ЗначениеЗаполнено(Источник) Тогда
				УчетВремени.ПолучитьПараметрыХронометража(
				Источник, 
				ПараметрыУчетаВремени.ВключенХронометраж, 
				ПараметрыУчетаВремени.ДатаНачала, 
				ПараметрыУчетаВремени.ДатаОкончания, 
				ПараметрыУчетаВремени.ВидыРабот,
				ПараметрыУчетаВремени.СпособУказанияВремени);
				УчетВремени.ПереключитьХронометраж(
				ПараметрыОповещения,
				ПараметрыУчетаВремени.ДатаНачала,
				ПараметрыУчетаВремени.ДатаОкончания,
				ПараметрыУчетаВремени.ВключенХронометраж,
				Источник,
				ПараметрыУчетаВремени.ВидыРабот);
			КонецЕсли;
			
			ВидРабот = Неопределено;
			Если ПараметрыУчетаВремени.ВидыРабот <> Неопределено И ПараметрыУчетаВремени.ВидыРабот.Количество() > 0 Тогда
				ВидРабот = ПараметрыУчетаВремени.ВидыРабот[0].Значение;
			КонецЕсли;
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "chronometrationOn", ПараметрыУчетаВремени.ВключенХронометраж);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "workType", ВидРабот);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "timeInputMethod", ПараметрыУчетаВремени.СпособУказанияВремени);
			
			ПараметрыXDTO.beginDate = ПараметрыУчетаВремени.ДатаНачала;
			ПараметрыXDTO.endDate = ПараметрыУчетаВремени.ДатаОкончания;
			ПараметрыXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Источник);
			
			Ответ.settings.Добавить(ПараметрыXDTO);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при переключении хронометража'; en = 'Error when toggling time tracking'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет данные по учету времени по переданному объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO
//  Ссылка - связанный объект Документооборота
//
Процедура УстановитьПараметрыУчетаВремени(ОбъектXDTO, Ссылка) Экспорт
	
	ПараметрыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChronometrationSettings");
	
	ПараметрыУчетаВремени = Новый Структура;
	
	ПараметрыУчетаВремени.Вставить("ДатаНачала", '00010101');
	ПараметрыУчетаВремени.Вставить("ДатаОкончания", '00010101');
	ПараметрыУчетаВремени.Вставить("ВключенХронометраж",Ложь);
	ПараметрыУчетаВремени.Вставить("ВидыРабот");
	ПараметрыУчетаВремени.Вставить("СпособУказанияВремени");
	
	ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
	
	Если ОпцияВестиУчетТрудозатрат Тогда
		УчетВремени.ПолучитьПараметрыХронометража(
			Ссылка, 
			ПараметрыУчетаВремени.ВключенХронометраж, 
			ПараметрыУчетаВремени.ДатаНачала, 
			ПараметрыУчетаВремени.ДатаОкончания, 
			ПараметрыУчетаВремени.ВидыРабот,                
			ПараметрыУчетаВремени.СпособУказанияВремени);
	КонецЕсли;
		
	ВидРабот = Неопределено;
	Если ПараметрыУчетаВремени.ВидыРабот <> Неопределено И ПараметрыУчетаВремени.ВидыРабот.Количество() > 0 Тогда
		ВидРабот = ПараметрыУчетаВремени.ВидыРабот[0].Значение;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "chronometrationOn", ПараметрыУчетаВремени.ВключенХронометраж);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "workType", ВидРабот);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "timeInputMethod", ПараметрыУчетаВремени.СпособУказанияВремени);
	
	ПараметрыXDTO.beginDate = ПараметрыУчетаВремени.ДатаНачала;
	ПараметрыXDTO.endDate = ПараметрыУчетаВремени.ДатаОкончания;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
	КонецЕсли;
		
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMGetChronometrationSettingsResponse")
		Или ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMSetChronometrationSettingsResponse") Тогда
		ОбъектXDTO.settings.Добавить(ПараметрыXDTO);
	Иначе
		ОбъектXDTO.chronometrationSettings = ПараметрыXDTO;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет ответ активными данными учета времени
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetChronometrationSettingsResponse, неявно возвращаемый параметр
//
Процедура УстановитьАктивныеПараметрыУчетаВремени(Ответ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеХронометража.Объект
		|ИЗ
		|	РегистрСведений.ХронометражРабочегоВремениПользователей КАК ДанныеХронометража
		|ГДЕ
		|	ДанныеХронометража.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChronometrationSettings");
		
		ПараметрыУчетаВремени = Новый Структура;
		
		ПараметрыУчетаВремени.Вставить("ДатаНачала", '00010101');
		ПараметрыУчетаВремени.Вставить("ДатаОкончания", '00010101');
		ПараметрыУчетаВремени.Вставить("ВключенХронометраж",Ложь);
		ПараметрыУчетаВремени.Вставить("ВидыРабот");
		ПараметрыУчетаВремени.Вставить("СпособУказанияВремени");
		
		ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
		
		Если ОпцияВестиУчетТрудозатрат Тогда
			УчетВремени.ПолучитьПараметрыХронометража(
			Выборка.Объект, 
			ПараметрыУчетаВремени.ВключенХронометраж, 
			ПараметрыУчетаВремени.ДатаНачала, 
			ПараметрыУчетаВремени.ДатаОкончания, 
			ПараметрыУчетаВремени.ВидыРабот,
			ПараметрыУчетаВремени.СпособУказанияВремени);
		КонецЕсли;
		
		ВидРабот = Неопределено;
		Если ПараметрыУчетаВремени.ВидыРабот <> Неопределено И ПараметрыУчетаВремени.ВидыРабот.Количество() > 0 Тогда
			ВидРабот = ПараметрыУчетаВремени.ВидыРабот[0].Значение;
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "chronometrationOn", ПараметрыУчетаВремени.ВключенХронометраж);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "workType", ВидРабот);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO, "timeInputMethod", ПараметрыУчетаВремени.СпособУказанияВремени);
		
		ПараметрыXDTO.beginDate = ПараметрыУчетаВремени.ДатаНачала;
		ПараметрыXDTO.endDate = ПараметрыУчетаВремени.ДатаОкончания;
		ПараметрыXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Объект);
		
		Ответ.settings.Добавить(ПараметрыXDTO);
		
	КонецЦикла;

КонецПроцедуры
		
// Заполняет ОбъектXDTO по данным документа "Ежедневный отчет"
//
// Параметры:
//	Объект - ДокументОбъект.ЕжедневныйОтчет - источник заполнения
//	ОбъектXDTO - ОбъектXDTO типа DMDailyReport - заполняемый объект XDTO
//	НаборКолонок - Массив - имена заполняемых реквизитов
//               - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, НаборКолонок = Неопределено)
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл 
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// значения по умолчанию
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "mainWorkType", УчетВремени.ПолучитьОсновнойВидРабот());
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "mainProject", РаботаСПроектами.ПолучитьПроектПоУмолчанию());
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "projectsEnabled", ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")); 
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("НачалоДня", "dayBegin");
	СоответствиеРеквизитов.Вставить("ОкончаниеДня", "dayEnd");
	СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
	СоответствиеРеквизитов.Вставить("НекорректнаяДлительность", "durationIncorrect");
	СоответствиеРеквизитов.Вставить("Автор", "author#DMUser");
	СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
	СоответствиеРеквизитов.Вставить("СпособУказанияВремени", "timeInputMethod#DMTimeInputMethod");
	
	ЗаполнитьОсновныеСвойстваXDTOДокумента(ОбъектXDTO, Объект);
	ЗаполнитьСвойстваXDTOПоСоответствию(ОбъектXDTO, Объект, СоответствиеРеквизитов);
	
	Работы = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(Объект.Дата, Объект[ИмяРеквизитаUser()]);
		
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("ДатаДобавления", "addDate");
	СоответствиеРеквизитов.Вставить("Начало", "begin");
	СоответствиеРеквизитов.Вставить("Окончание", "end");
	СоответствиеРеквизитов.Вставить("ОписаниеРаботы", "description");
	СоответствиеРеквизитов.Вставить("Длительность", "duration");
	СоответствиеРеквизитов.Вставить("ВидРабот", "workType#DMWorkType");
	СоответствиеРеквизитов.Вставить("Проект", "project#DMProject");
	СоответствиеРеквизитов.Вставить("ПроектнаяЗадача", "projectTask#DMProjectTask");
	СоответствиеРеквизитов.Вставить("Источник", "source#DMObject");
	
	ТипыИсточника = Метаданные.РегистрыСведений.ФактическиеТрудозатраты.Измерения.Источник.Тип.Типы();
	ТипыИcточникаXDTO = Новый Массив;
	
	Для Каждого Тип Из ТипыИсточника Цикл
		
		ТипXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMType");
		
		Если Тип = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ТипXDTO.xdtoClassName = "DMInternalDocument";
			ТипXDTO.presentation = НСтр("ru='Внутренний документ'; en = 'Internal document'"); 
			
		ИначеЕсли Тип = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			ТипXDTO.xdtoClassName = "DMIncomingEMail";
			ТипXDTO.presentation = НСтр("ru='Входящее письмо'; en = 'Incoming email'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ТипXDTO.xdtoClassName = "DMIncomingDocument";
			ТипXDTO.presentation = НСтр("ru='Входящий документ'; en = 'Incoming document'");
			
		ИначеЕсли Тип = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда
			ТипXDTO.xdtoClassName = "DMDailyReport";
			ТипXDTO.presentation = НСтр("ru='Ежедневный отчет'; en = 'Daily work report'");
			
		ИначеЕсли Тип = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ТипXDTO.xdtoClassName = "DMBusinessProcessTask";
			ТипXDTO.presentation = НСтр("ru='Задача'; en = 'Task'");
			
		ИначеЕсли Тип = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			ТипXDTO.xdtoClassName = "DMOutgoingEMail";
			ТипXDTO.presentation = НСтр("ru='Исходящее письмо'; en = 'Outgoing email'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ТипXDTO.xdtoClassName = "DMOutgoingDocument";
			ТипXDTO.presentation = НСтр("ru='Исходящий документ'; en = 'Outgoing document'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Мероприятия") Тогда
			ТипXDTO.xdtoClassName = "DMActivity";
			ТипXDTO.presentation = НСтр("ru='Мероприятие'; en = 'Event'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Проекты") Тогда
			ТипXDTO.xdtoClassName = "DMProject";
			ТипXDTO.presentation = НСтр("ru='Проект'; en = 'Project'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ТипXDTO.xdtoClassName = "DMProjectTask";
			ТипXDTO.presentation = НСтр("ru='Проектная задача'; en = 'Project task'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Файлы") Тогда
			ТипXDTO.xdtoClassName = "DMFile";
			ТипXDTO.presentation = НСтр("ru='Файл'; en = 'File'");
			
		КонецЕсли;
		
		Если ТипXDTO.xdtoClassName <> Неопределено Тогда
			ТипыИcточникаXDTO.Добавить(ТипXDTO);
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Строка Из Работы Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualWork");
		ЗаполнитьСвойстваXDTOПоСоответствию(СтрокаXDTO, Строка, СоответствиеРеквизитов);
		
		Для Каждого ТипXDTO Из ТипыИcточникаXDTO Цикл
			
			НовыйТипXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMType");
			ЗаполнитьЗначенияСвойств(НовыйТипXDTO, ТипXDTO);
			СтрокаXDTO.sourceValueTypes.Добавить(НовыйТипXDTO);
			
		КонецЦикла;
		
		ОбъектXDTO.works.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
	// доп. реквизиты
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Объект, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ "Ежедневный отчет" по объекту XDTO и записывает его
//
// Параметры:
//	Объект - ДокументОбъект.ЕжедневныйОтчет - заполняемый объект
//	ОбъектXDTO - ОбъектXDTO типа DMDailyReport - источник данных заполнения
//	Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение для сообщения об ошибке
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеЕжедневногоОтчета(Узел, Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеЕжедневногоОтчета(Узел, Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи ежедневного отчета'; en = 'Error saving daily report'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Запись);
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет документ "Ежедневный отчет" по объекту XDTO
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.ЕжедневныйОтчет - заполняемый объект
//	ОбъектXDTO - ОбъектXDTO типа DMDailyReport - источник данных заполнения
//
Процедура ЗаполнитьДанныеЕжедневногоОтчета(Узел, ДокументОбъект, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.Дата,         ОбъектXDTO, "date");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.НачалоДня,    ОбъектXDTO, "dayBegin");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект.ОкончаниеДня, ОбъектXDTO, "dayEnd");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, ДокументОбъект[ИмяРеквизитаUser()], ОбъектXDTO, "user");
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Автор) Тогда 
		ДокументОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.Подразделение) Тогда
		ДокументОбъект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(
			ДокументОбъект[ИмяРеквизитаUser()]);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.СпособУказанияВремени) Тогда 
		ДокументОбъект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
	КонецЕсли;
	
	Работы = Новый ТаблицаЗначений;
	Работы.Колонки.Добавить("ДатаДобавления");
	Работы.Колонки.Добавить("Начало");
	Работы.Колонки.Добавить("Окончание");
	Работы.Колонки.Добавить("Работа");
	Работы.Колонки.Добавить("Длительность");
	Работы.Колонки.Добавить("ВидРабот");
	Работы.Колонки.Добавить("Проект");
	Работы.Колонки.Добавить("ПроектнаяЗадача");
	Работы.Колонки.Добавить("Источник");

	Для Каждого СтрокаXDTO Из ОбъектXDTO.works Цикл
		
		НоваяСтрока = Работы.Добавить();
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.ДатаДобавления,  СтрокаXDTO, "addDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.Начало,          СтрокаXDTO, "begin");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.Окончание,       СтрокаXDTO, "end");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.Работа,          СтрокаXDTO, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.Длительность,    СтрокаXDTO, "duration");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.ВидРабот,        СтрокаXDTO, "workType");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.Проект,          СтрокаXDTO, "project");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.ПроектнаяЗадача, СтрокаXDTO, "projectTask");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, НоваяСтрока.Источник,        СтрокаXDTO, "source");
		
	КонецЦикла;
	
	ДлительностьРаботСек = Работы.Итог("Длительность");
	ДокументОбъект.ДлительностьРабот = УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек);
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Узел, ДокументОбъект, ОбъектXDTO);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("Работы", Работы);
		
КонецПроцедуры

// Заполняет основные свойства объекта XDTO, соответствующего документу
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - заполняемый объект
//	ОбъектВыборка - ДокументОбъект, ВыборкаИзРезультатаЗапроса - источник данных заполнения
//
Процедура ЗаполнитьОсновныеСвойстваXDTOДокумента(ОбъектXDTO, ОбъектВыборка)
	
	ОбъектXDTO.name = Строка(ОбъектВыборка.Ссылка);
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектВыборка.Ссылка);
	ОбъектXDTO.date = ОбъектВыборка.Дата;
	ОбъектXDTO.number = ОбъектВыборка.Номер;
	
КонецПроцедуры

// Заполняет свойства объекта XDTO по соответствию
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - заполняемый объект
//	ОбъектВыборка - ДокументОбъект, ВыборкаИзРезультатаЗапроса - источник данных заполнения
//	СоответствиеРеквизитов - Соответствие - соответствие реквизитов объекта конфигурации и свойств XDTO
//							 для ссылочных реквизитов указывается суффикс "#<ТипXDTO>", например "user#DMUser".
//
Процедура ЗаполнитьСвойстваXDTOПоСоответствию(ОбъектXDTO, ОбъектВыборка, СоответствиеРеквизитов)
	
	Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
		РазделительСвойства = Найти(ЭлементСоответствия.Значение, "#");
		Если РазделительСвойства <> 0 Тогда
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектВыборка[ЭлементСоответствия.Ключ])) 
			   И ЗначениеЗаполнено(ОбъектВыборка[ЭлементСоответствия.Ключ]) Тогда
				Свойство = Лев(ЭлементСоответствия.Значение, РазделительСвойства - 1);
				ТипСвойства = Прав(ЭлементСоответствия.Значение, СтрДлина(ЭлементСоответствия.Значение) - РазделительСвойства);
				Реквизит = ЭлементСоответствия.Ключ;
				
				СсылкаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект(ТипСвойства);
				СсылкаXDTO.name = Строка(ОбъектВыборка[Реквизит]);
				СсылкаXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектВыборка[Реквизит]);
				
				ОбъектXDTO[Свойство] = СсылкаXDTO;
			КонецЕсли;
		Иначе
			ОбъектXDTO[ЭлементСоответствия.Значение] = ОбъектВыборка[ЭлементСоответствия.Ключ];
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя типа справочника, соответствующее DMWorkType.
//
Функция ИмяРеквизитаUser()
	
	Если Метаданные.Документы.ЕжедневныйОтчет.Реквизиты.Найти("Пользователь") = Неопределено Тогда
		Возврат "Сотрудник";
	Иначе
		Возврат "Пользователь";
	КонецЕсли;
	
КонецФункции

#КонецОбласти
