////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отправка SMS"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция СтатусДоставки(ИдентификаторСообщения) Экспорт
	
	ОтправкаSMS.ПроверитьПрава();
	
	Если ПустаяСтрока(ИдентификаторСообщения) Тогда
		Возврат "НеОтправлялось";
	КонецЕсли;
	
	Результат = Неопределено;
	НастройкиОтправкиSMS = НастройкиОтправкиSMS();
	
	Если НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.МТС Тогда
		Результат = ОтправкаSMSЧерезМТС.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	ИначеЕсли НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.Билайн Тогда
		Результат = ОтправкаSMSЧерезБилайн.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	ИначеЕсли НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.SMSRU Тогда
		Результат = ОтправкаSMSЧерезSMSRU.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	ИначеЕсли НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.SMSЦЕНТР Тогда
		Результат = ОтправкаSMSЧерезSMSЦЕНТР.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	ИначеЕсли НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.СМСУслуги Тогда
		Результат = ОтправкаSMSЧерезСМСУслуги.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	ИначеЕсли НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.GSMINFORM Тогда
		Результат = ОтправкаSMSЧерезGSMINFORM.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	ИначеЕсли ЗначениеЗаполнено(НастройкиОтправкиSMS.Провайдер) Тогда
		ОтправкаSMSПереопределяемый.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS.Провайдер,
			НастройкиОтправкиSMS.Логин, НастройкиОтправкиSMS.Пароль, Результат);
	Иначе // провайдер не выбран
		Результат = "Ошибка";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиОтправкиSMS() Экспорт
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 18.09.2018 {
	// добавлен параметр ра_ИдентификаторОтправителяEmail2Sms
	Результат = Новый Структура("Логин, Пароль, Провайдер, ИмяОтправителя, ра_ИдентификаторОтправителяEmail2Sms");
	
	// было
	//Результат = Новый Структура("Логин, Пароль, Провайдер, ИмяОтправителя");
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 18.09.2018 } 
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
		УстановитьПривилегированныйРежим(Истина);
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 18.09.2018 {
		// добавлен параметр ра_ИдентификаторОтправителяEmail2Sms
		НастройкиПровайдера = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Пароль,Логин,ИмяОтправителя,ра_ИдентификаторОтправителяEmail2Sms");
		// было
		//НастройкиПровайдера = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Пароль,Логин,ИмяОтправителя");
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 18.09.2018 } 
		УстановитьПривилегированныйРежим(Ложь);
		Результат.Логин = НастройкиПровайдера.Логин;
		Результат.Пароль = НастройкиПровайдера.Пароль;
		Результат.ИмяОтправителя = НастройкиПровайдера.ИмяОтправителя;
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 18.09.2018 {
		Результат.ра_ИдентификаторОтправителяEmail2Sms = НастройкиПровайдера.ра_ИдентификаторОтправителяEmail2Sms;
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 18.09.2018 } 
		Результат.Провайдер =Константы.ПровайдерSMS.Получить();
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти
