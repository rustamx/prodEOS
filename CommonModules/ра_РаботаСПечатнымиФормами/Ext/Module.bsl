////////////////////////////////////////////////////////////////////////////////
// Подсистема ЕОСК.
// Процедуры и функции работы с печатными формами
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла)
	
	Если ТипЗнч(ФактическийВладелецФайла) = Тип("ДокументСсылка.ra_Nesootvetstvie") Тогда
		Возврат ФактическийВладелецФайла;
	КонецЕсли;
	
	СтруктураНесоответствие = Новый Структура("Nesootvetstvie");
	
	Если ФактическийВладелецФайла = Неопределено Тогда
		Nesootvetstvie	= Документы.ra_Nesootvetstvie.ПустаяСсылка();
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтруктураНесоответствие, ФактическийВладелецФайла);
		Если ЗначениеЗаполнено(СтруктураНесоответствие.Nesootvetstvie) Тогда
			Nesootvetstvie	= СтруктураНесоответствие.Nesootvetstvie;
		Иначе
			Nesootvetstvie	= Документы.ra_Nesootvetstvie.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Nesootvetstvie;
	
КонецФункции

Функция ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица)
	
	Возврат Новый Структура("ИмяТЗ,ТЗ", ТаблицаИмя, Таблица);
	
КонецФункции

Функция ПолучитьСписокКолонокТаблицы(ТекстСкрипта)
	
	Попытка
		
		СтруктураДанных = Вычислить(ТекстСкрипта + "(""Table"", Неопределено)");
		
		МассивКолонок = Новый Массив;
		Для каждого Колонка из СтруктураДанных.ТЗ.Колонки Цикл
			МассивКолонок.Добавить(Колонка.Имя);	
		КонецЦикла;
		
		Возврат " (" + Нстр("ru = 'Колонки'; en = 'Columns'") + ": " + СтрСоединить(МассивКолонок, ", ") + ")";
		
	Исключение
	КонецПопытки;
	
КонецФункции

Процедура ДобавитьСкриптТаблицы(СтрокаГруппировка, ИмяСкрипта, ТекстСкрипта)
	
	СтрокаСкрипта = СтрокаГруппировка.Строки.Добавить();
	
	СтрокаСкрипта.ИмяСкрипта   = ИмяСкрипта;
	СтрокаСкрипта.Описание     = ПолучитьСписокКолонокТаблицы(ТекстСкрипта);	
	СтрокаСкрипта.ТекстСкрипта = "ра_РаботаСПечатнымиФормами." + ТекстСкрипта + "(<Имя таблицы>, ФактическийВладелецФайла)";
	СтрокаСкрипта.ЭтоТаблица   = Истина;
	
КонецПроцедуры

Процедура ДобавитьСкрипт(СтрокаГруппировка, ИмяСкрипта, Описание, ТекстСкрипта)
	
	СтрокаСкрипта = СтрокаГруппировка.Строки.Добавить();
	
	СтрокаСкрипта.ИмяСкрипта   = ИмяСкрипта;
	СтрокаСкрипта.Описание     = " (" + Описание + ")";	
	СтрокаСкрипта.ТекстСкрипта = "ра_РаботаСПечатнымиФормами." + ТекстСкрипта + "(ФактическийВладелецФайла)";
	
КонецПроцедуры

Функция ПодставитьТекстВизы(ЗапросТекст)
	
	ВизаСогласовано = Нстр("ru = 'Согласовано электронно'; en = 'Accepted electronically'");
	Возврат СтрЗаменить(ЗапросТекст, "Согласовано электронно", ВизаСогласовано);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПолучитьДеревоШаблонов() Экспорт
	
	ДеревоШаблонов = Новый ДеревоЗначений;
	ДеревоШаблонов.Колонки.Добавить("ИмяСкрипта");
	ДеревоШаблонов.Колонки.Добавить("Описание");
	ДеревоШаблонов.Колонки.Добавить("ТекстСкрипта");
	ДеревоШаблонов.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	
	ШаблоныНесоответствий = ДеревоШаблонов.Строки.Добавить();
	ШаблоныНесоответствий.ИмяСкрипта = Нстр("ru = 'Несоответствия'; en = 'Nonconformities'");
	
	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица уведомлений'; en = 'Table of notifications'")
		, "ТаблицаУведомленийОНесоответствии");
		
	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Оценка значимости'; en = 'Table of Significance assessment'")
		, "ЗначимостьНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица План ВСД и Коррекции'; en = 'Table of Plan of Temporary restraining actions and сorrection'")
		, "ПланВСДКоррекцииНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Согласования плана ВСД и Коррекции'; en = 'Table of Approval description of the nonconformity, temporary restraining actions and сorrection'")
		, "СогласованиеПланВСДКоррекцииНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Отчет о Коррекции'; en = 'Table of Implementation report of сorrection'")
		, "ОтчетКоррекцииНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Согласования отчета о Коррекции'; en = 'Table of Approval  implementation report of сorrection'")
		, "СогласованиеОтчетКоррекцииНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Отчет о ВСД'; en = 'Table of Implementation report of TRA'")
		, "ОтчетВСДНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Причины несоответствия'; en = 'Table of Analysis of causes of nonconformity'")
		, "ПричиныНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица План корректирующих действий'; en = 'Table of Define Corrective Actions'")
		, "ПланКорректирующихДействийНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Согласование плана корректирующих действий'; en = 'Table of Approval causes of nonconformity and Corrective Actions'")
		, "СогласованиеКорректирующихДействийНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Отчет о корректирующих действиях'; en = 'Table of Implementation report of Corrective Actions'")
		, "ОтчетКорректирующихДействийНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица План предупреждающих действий'; en = 'Table of Define Preventive Actions'")
		, "ПланПредупреждающихДействийНесоответствия");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Отчет о предупреждающих действиях'; en = 'Table of Implementation report of Preventive Actions'")
		, "ОтчетПредупреждающихДействийНесоответствия");
		
	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Согласование документа'; en = 'Table of Approval document'")
		, "СогласующиеДокумента");
		
	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Согласование Уведомления'; en = 'Table of Approval Notification'")
		, "СогласующиеУведомления");

	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Вложения несоответствия'; en = 'Table of Attachments of nonconformity'")
		, "ВложенияНесоответствия");
		
	ДобавитьСкриптТаблицы(ШаблоныНесоответствий
		, Нстр("ru = 'Таблица Вложения документа'; en = 'Table of Attachments of document'")
		, "ВложенияДокумента");
		
	ДобавитьСкрипт(ШаблоныНесоответствий
		, Нстр("ru = 'Регистрационные данные документа';	en = 'Registration information'")
		, Нстр("ru = '<Номер> от <Дата> Несоответствие <Номер> / <Внутренний номер> выявлено <Дата выявления>';	en = '<Nomber> от <Date> nonconformity <Nomber> / <Internal number> detected <Date when nonconformity was detected>'")
		, "НомерДатаДокументаИНесоответствия");
		
	ДобавитьСкрипт(ШаблоныНесоответствий
		, Нстр("ru = 'Описание Предмета';	en = 'Subject of nonconformity'")
		, Нстр("ru = 'Описание Предмета несоответствия';	en = 'Subject of nonconformity'")
		, "ОписаниеПредметаНесоответствия");
		
	ДобавитьСкрипт(ШаблоныНесоответствий
		, Нстр("ru = 'Дата устранения для Акта';	en = 'Date of elimination'")
		, Нстр("ru = 'Дата устранения для Акта';	en = 'Date of elimination'")
		, "ДатаУстраненияАкт");
		
	ДобавитьСкрипт(ШаблоныНесоответствий
		, Нстр("ru = 'Дата изготовления';	en = 'Manufacturing date'")
		, Нстр("ru = 'Дата изготовления продукции';	en = 'Manufacturing date'")
		, "ДатаИзготовления");
	
	
	//ДобавитьСкриптТаблицы(<Строка группировки>
	//	, Нстр("ru = '<Имя на русском>'; en = '<Имя на английском>'")
	//	, "<Имя процедуры>");
	
	//ДобавитьСкрипт(<Строка группировки>
	//	, Нстр("ru = '<Имя на русском>'; en = '<Имя на английском>'")
	//	, "<Описание возвращаемого значения>"
	//	, "<Имя процедуры>");

	ДеревоШаблонов.Строки.Сортировать("ИмяСкрипта", Истина);
	
	Возврат ДеревоШаблонов;
	
КонецФункции

//		Процедуры для реквизитов

// Процедура получения Номера и даты документа и Номера/даты НС Несоответствию
//
Функция НомерДатаДокументаИНесоответствия(ФактическийВладелецФайла) Экспорт
	
	РезультатОбработки = СокрП(ФактическийВладелецФайла.Номер) + НСтр("ru = ' от '; en = ' dated '") + Формат(ФактическийВладелецФайла.Дата, "ДЛФ=Д");
	
	Nesootvetstvie = ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла);	
	
	Если ЗначениеЗаполнено(Nesootvetstvie) Тогда
		
		Номер   = Nesootvetstvie.Номер;
		НомерВн = Nesootvetstvie.NomerVnutrennij;
		
		РезультатОбработки = РезультатОбработки 
			+ Символы.ПС + НСтр("ru = 'Несоответствие '; en = 'Nonconformity '")
			+ СокрП(Номер) + ?(ПустаяСтрока(НомерВн), "", " / " + СокрП(НомерВн))
		    + НСтр("ru = ' выявлено '; en = ' revealed '") 
			+ Формат(Nesootvetstvie.DataVyyavleniya, "ДЛФ=Д");
		
	КонецЕсли;	
	
	Возврат РезультатОбработки;
	
КонецФункции

// Процедура получения описания предмета Несоответствия
//
Функция ОписаниеПредметаНесоответствия(ФактическийВладелецФайла) Экспорт
	
	РезультатОбработки = "";
	Nesootvetstvie = ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла);	
	
	Если ЗначениеЗаполнено(Nesootvetstvie) Тогда
		
		РезультатОбработки = Документы.ra_Nesootvetstvie.ОписаниеПредметаНесоответствия(ФактическийВладелецФайла.Nesootvetstvie);
		
	КонецЕсли;	
	
	Возврат РезультатОбработки;
	
КонецФункции

// Процедура получения даты устранения Несоответствию для Акта
//Факт ВСД и Коррекции//CorrectionFakt//L07//по данным документов ВСД и коррекции - ДЛЯ АКТА
//
Функция ДатаУстраненияАкт(ФактическийВладелецФайла) Экспорт
	
	Nesootvetstvie = ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла);	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.FakticheskijSrok КАК L07FaktSrokData
	|ИЗ
	|	Документ.ra_AktObUstraneniiNesootvetstviya.Dejstviya КАК Doc
	|ГДЕ
	|	Doc.Ссылка = &Ссылка
	|	И Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ(&VidVremennyhSderzhivayushchihDejstvijIKorrekcij)
	|
	|УПОРЯДОЧИТЬ ПО
	|	L07FaktSrokData УБЫВ");
	
	Запрос.УстановитьПараметр("Ссылка", ФактическийВладелецФайла);
	Запрос.УстановитьПараметр("VidVremennyhSderzhivayushchihDejstvijIKorrekcij", Справочники.ra_VidyPoruchenij.Коррекция);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество()=1 Тогда 
		Возврат Формат(Таблица[0].L07FaktSrokData, "ДЛФ=Д");
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

// Процедура получения даты Изготовления продукции
//
Функция ДатаИзготовления(ФактическийВладелецФайла) Экспорт
	
	Дата = "";
	Nesootvetstvie = ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла);	

	Если ЗначениеЗаполнено(Nesootvetstvie) Тогда
		Дата = Формат(Nesootvetstvie.DataIzgotovleniyaProdukcii, "ДЛФ=Д");	
	КонецЕсли;	
	
	Возврат Дата;
	
КонецФункции

// Процедура получения реквизита Специализир.орг
// NesooSpecializirova
Функция SpecializirovannayaOrganizaciya(ФактическийВладелецФайла) Экспорт
	
	Возврат ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла).OrganizatsiyaVydavshayaSertifikat;
	
КонецФункции

//		Процедуры для таблиц

// Процедура получения Команды по Несоответствию
//КОМАНДА//TEAM//L01//из регистра сведений
//
Функция КомандаНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"""" + ВЫБОР
	|		КОГДА Doc.OtvetstvennyjZaKachestvo
	|			ТОГДА ""ОзК""
	|		ИНАЧЕ """"
	|	КОНЕЦ + "" "" + ВЫБОР
	|		КОГДА Doc.LiderNesootvetstviya
	|			ТОГДА ""Лидер""
	|		ИНАЧЕ """"
	|	КОНЕЦ + "" "" + ВЫБОР
	|		КОГДА Doc.PervyjDopustivshij
	|			ТОГДА ""Первый допустивший""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК TRol,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК TOrganizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК TPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Otvetstvennyj) КАК TFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК TDolzhnost
	|ИЗ
	|	РегистрСведений.ra_KomandyNesootvetstvij КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.Otvetstvennyj = Польз.Пользователь
	|ГДЕ
	|	Doc.Nesootvetstvie = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Уведомления по Несоответствию
//ДОПУСТИВШИЕ//Admiting//Х4//Допустившие из Уведомлений по НС
//
Функция ТаблицаУведомленийОНесоответствии(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.OrganizaciyaOtpravitel) КАК AOrgOtpravitel,
	|	ПРЕДСТАВЛЕНИЕ(Doc.OrganizaciyaPoluchatel) КАК AOrgPoluchatel,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Dogovor) КАК ADogovor,
	|	ПРЕДСТАВЛЕНИЕ(Doc.OtvetstvennyjZaKachestvoPoluchatel) КАК AOZK
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК Doc
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(, ) КАК Статусы
	|		ПО Doc.Ссылка = Статусы.Документ
	|ГДЕ
	|	Doc.Nesootvetstvie = &Ссылка
	|	И Статусы.Состояние = &Состояние");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияДокументов.ra_Принято);
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Значимость по Несоответствию
//Значимость//Znachimost//L09//по данным РС ra_OcenkiZnachimostiNesootvetstvij
//
Функция ЗначимостьНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Doc.Nesootvetstvie КАК Nesootvetstvie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.ObemRabot) КАК L09ObemRabot,
	|	ПРЕДСТАВЛЕНИЕ(Doc.ZnachimostNesootvetstviya) КАК L09Znachimost,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Регистратор.TipNesootvetstviya) КАК L09TipNS,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VliyanieNaEhkspluataciyu) КАК L09Ehkspluataciy,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VliyanieNaGrafik) КАК L09Grafik,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VliyanieNaByudzhet) КАК L09Byudzhet,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Povtoryaemost) КАК L09Povtoryaemost
	|ИЗ
	|	РегистрСведений.ra_OcenkiZnachimostiNesootvetstvij.СрезПоследних(, Nesootvetstvie = &Ссылка) КАК Doc");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	//Таблица = Запрос.Выполнить().Выгрузить();
	//Если Таблица.Количество()=1 Тогда 
	//	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	//Иначе
	//	Возврат "";
	//КонецЕсли;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// План ВСД и Коррекции по Несоответствию
//План ВСД и Коррекции//CorrectionPlan//L06//по данным ra_OtchetONesootvetstviiCHast1
//
Функция ПланВСДКоррекцииНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij) КАК L06Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Opisanie) КАК L06Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Organizaciya) КАК L06Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Пользователь.Подразделение) КАК L06Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Otvetstvennyj) КАК L06Otvetstvennyj,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.CelevojSrok КАК L06CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L06CelevojSrok,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.FakticheskijSrok КАК L06FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L06FaktSrok
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast1.Dejstviya КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast1 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Doc.Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка
	|ГДЕ
	|	Doc.Ссылка.Nesootvetstvie = &Ссылка
	|	И (НЕ &ОтборПоВидуПоручения
	|			ИЛИ Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ (&ВидПорученийГруппа))");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	ЭтоАкт = ТипЗнч(ФактическийВладелецФайла) = Тип("ДокументСсылка.ra_AktObUstraneniiNesootvetstviya");
	Запрос.УстановитьПараметр("ВидПорученийГруппа", Справочники.ra_VidyPoruchenij.ВСД);
	Запрос.УстановитьПараметр("ОтборПоВидуПоручения", ЭтоАкт);

	Если ЭтоАкт Тогда 
		Запрос.УстановитьПараметр("ВидПорученийГруппа", Справочники.ra_VidyPoruchenij.Коррекция);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L06CelevojSrok = Формат(СтрокаТЗ.L06CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L06FaktSrok = Формат(СтрокаТЗ.L06FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// Согласование Плана ВСД и Коррекции по Несоответствию
//MatchVSDPlan//Согласующие//MatchVSDPlan//L15//Согласующие - ТЧ из последнего документа отч1
//
Функция СогласованиеПланВСДКоррекцииНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК MOrganizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Polzovatel) КАК MFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК MPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК MDolzhnost,
	|	""Согласовано электроннно"" КАК MVisa
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast1.Soglasuyushchie КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.Polzovatel = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast1 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
	////получение фактических согласующих - раскомментить код, когда доработают Делегирвоаине (Корнюшенко)
	//ТаблицаДанных = ра_РаботаСПроцессами.ПолучитьЭтапыСогласованияПоДокументу(ФактическийВладелецФайла);
	//Для каждого ТекСтрока Из ТаблицаДанных.НайтиСтроки(Новый Структура("Исполнитель", "DORobot")) Цикл // артефакт
	//	ТаблицаДанных.Удалить(ТекСтрока);
	//КонецЦикла;
	//
	//ТаблицаДанных.Колонки[Организация].Имя = "MOrganizaciya";
	//ТаблицаДанных.Колонки[Подразделение].Имя = "MPodrazdelenie"; //эту колонку Корнюшенко обещал добавить
	//ТаблицаДанных.Колонки[Должность].Имя = "MDolzhnost";
	//ТаблицаДанных.Колонки[Исполнитель].Имя = "MFIO";
	//ТаблицаДанных.Колонки[Результат].Имя = "MVisa";
	//Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, ТаблицаДанных);
	
КонецФункции

// Факт Коррекции по Несоответствию
//Факт Коррекции//CorrectionFakt//L07//по данным документов ВСД и коррекции
//
Функция ОтчетКоррекцииНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij) КАК L07Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Opisanie) КАК L07Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Organizaciya) КАК L07Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК L07Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Otvetstvennyj) КАК L07Otvetstvennyj,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.CelevojSrok КАК L07CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L07CelevojSrok,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.OtchetOVypolnenii КАК L07Otchet,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.FakticheskijSrok КАК L07FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L07FaktSrok
	|ИЗ
	|	Документ.ra_AktObUstraneniiNesootvetstviya.Dejstviya КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_AktObUstraneniiNesootvetstviya КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка
	|ГДЕ
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ(&VidVremennyhSderzhivayushchihDejstvijIKorrekcij)");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	Запрос.УстановитьПараметр("VidVremennyhSderzhivayushchihDejstvijIKorrekcij", Справочники.ra_VidyPoruchenij.Коррекция);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L07CelevojSrok = Формат(СтрокаТЗ.L07CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L07FaktSrok = Формат(СтрокаТЗ.L07FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// Согласование Факта Коррекции по Несоответствию
//MatchKorrPlan//Согласующие//MatchingFaktKorr//L25//Согласующие - ТЧ из последнего документа АКТ
//
Функция СогласованиеОтчетКоррекцииНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК MOrganizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Polzovatel) КАК MFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК MPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК MDolzhnost,
	|	""Согласовано электронно"" КАК MVisa
	|ИЗ
	|	Документ.ra_AktObUstraneniiNesootvetstviya.Soglasuyushchie КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.Polzovatel = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_AktObUstraneniiNesootvetstviya КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
	////получение фактических согласующих - раскомментить код, когда доработают Делегирвоаине (Корнюшенко)
	//...
	//Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, ТаблицаДанных);
	
КонецФункции

// Факт ВСД по Несоответствию
//Факт ВСД только ВСД//VSDFakt//L16//по данным ra_OtchetONesootvetstviiCHast1
//
Функция ОтчетВСДНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij) КАК L16Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Opisanie) КАК L16Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Organizaciya) КАК L16Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК L16Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Otvetstvennyj) КАК L16Otvetstvennyj,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.CelevojSrok КАК L16CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L16CelevojSrok,
	|	ПРЕДСТАВЛЕНИЕ(Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.OtchetOVypolnenii) КАК L16Otchet,
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.FakticheskijSrok КАК L16FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L16FaktSrok
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast1.Dejstviya КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast1 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Doc.Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка
	|ГДЕ
	|	Doc.VremennyeSderzhivayushchieDejstviyaIKorrekciya.VidVremennyhSderzhivayushchihDejstvijIKorrekcij В ИЕРАРХИИ(&VidVremennyhSderzhivayushchihDejstvijIKorrekcij)");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	Запрос.УстановитьПараметр("VidVremennyhSderzhivayushchihDejstvijIKorrekcij", Справочники.ra_VidyPoruchenij.ВСД);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L16CelevojSrok = Формат(СтрокаТЗ.L16CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L16FaktSrok = Формат(СтрокаТЗ.L16FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// Причины по Несоответствию
//Анализ причин//Prichiny//L10//по данным РС ra_PrichinyNesootvetstvij//
//
Функция ПричиныНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ra_PrichinyNesootvetstvij.TipPrichiny) КАК L10TipPrichiny,
	|	ПРЕДСТАВЛЕНИЕ(ra_PrichinyNesootvetstvij.Opisanie) КАК L10Prichina,
	|	ra_PrichinyNesootvetstvij.KodPrichinyRoditel КАК L10KodPrichinyRoditel
	|ИЗ
	|	РегистрСведений.ra_PrichinyNesootvetstvij КАК ra_PrichinyNesootvetstvij
	|ГДЕ
	|	ra_PrichinyNesootvetstvij.Nesootvetstvie = &Ссылка
	|	И ra_PrichinyNesootvetstvij.KorennayaPrichina
	|
	|УПОРЯДОЧИТЬ ПО
	|	KodPrichinyRoditel,
	|	ra_PrichinyNesootvetstvij.KodPrichiny");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// План КД по Несоответствию
//КДПлан//KDPlan//L61//для ra_ItogovyjOtchetONesootvetstvii
//
Функция ПланКорректирующихДействийНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.OpisaniePrichiny) КАК L61Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.Opisanie) КАК L61Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.Organizaciya) КАК L61Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК L61Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.Otvetstvennyj) КАК L61Otvetstvennyj,
	|	Doc.KorrektiruyushcheeDejstvie.CelevojSrok КАК L61CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L61CelevojSrok,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.OtchetOVypolnenii) КАК L61Otchet,
	|	Doc.KorrektiruyushcheeDejstvie.FakticheskijSrok КАК L61FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L61FaktSrok,
	|	Doc.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast2.DejstviyaKD КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.KorrektiruyushcheeDejstvie.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast2 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L61CelevojSrok = Формат(СтрокаТЗ.L61CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L61FaktSrok = Формат(СтрокаТЗ.L61FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// Согласование Плана КД по Несоответствию
//MatchKDPlan//Согласующие//L35//Согласующие - ТЧ из последнего документа отч2
//
Функция СогласованиеКорректирующихДействийНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК MOrganizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Polzovatel) КАК MFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК MPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК MDolzhnost,
	|	""Согласовано электронно"" КАК MVisa
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast1.Soglasuyushchie КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.Polzovatel = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast1 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
	////получение фактических согласующих - раскомментить код, когда доработают Делегирвоаине (Корнюшенко)
	//ТаблицаДанных = ра_РаботаСПроцессами.ПолучитьЭтапыСогласованияПоДокументу(ФактическийВладелецФайла);
	//Для каждого ТекСтрока Из ТаблицаДанных.НайтиСтроки(Новый Структура("Исполнитель", "DORobot")) Цикл // артефакт
	//	ТаблицаДанных.Удалить(ТекСтрока);
	//КонецЦикла;
	//
	//ТаблицаДанных.Колонки[Организация].Имя = "MOrganizaciya";
	//ТаблицаДанных.Колонки[Подразделение].Имя = "MPodrazdelenie"; //эту колонку Корнюшенко обещал добавить
	//ТаблицаДанных.Колонки[Должность].Имя = "MDolzhnost";
	//ТаблицаДанных.Колонки[Исполнитель].Имя = "MFIO";
	//ТаблицаДанных.Колонки[Результат].Имя = "MVisa";
	//Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, ТаблицаДанных);
	
КонецФункции

// Факт КД по Несоответствию
//KDFakt//L63//по данным последнего ra_OtchetONesootvetstviiCHast2.Nesootvetstvie
//
Функция ОтчетКорректирующихДействийНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.OpisaniePrichiny) КАК L63Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.Opisanie) КАК L63Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.Organizaciya) КАК L63Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК L63Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.Otvetstvennyj) КАК L63Otvetstvennyj,
	|	Doc.KorrektiruyushcheeDejstvie.CelevojSrok КАК L63CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L63CelevojSrok,
	|	ПРЕДСТАВЛЕНИЕ(Doc.KorrektiruyushcheeDejstvie.OtchetOVypolnenii) КАК L63Otchet,
	|	Doc.KorrektiruyushcheeDejstvie.FakticheskijSrok КАК L63FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L63FaktSrok,
	|	Doc.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast2.DejstviyaKD КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.KorrektiruyushcheeDejstvie.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast2 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L63CelevojSrok = Формат(СтрокаТЗ.L63CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L63FaktSrok = Формат(СтрокаТЗ.L63FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// План ПД по Несоответствию
//ПД//PD//L62//для ra_ItogovyjOtchetONesootvetstvii
//
Функция ПланПредупреждающихДействийНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ПД"" КАК L62Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.Opisanie) КАК L62Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.Organizaciya) КАК L62Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК L62Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.Otvetstvennyj) КАК L62Otvetstvennyj,
	|	Doc.PreduprezhdayushcheeDejstvie.CelevojSrok КАК L62CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L62CelevojSrok,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.OtchetOVypolnenii) КАК L62Otchet,
	|	Doc.PreduprezhdayushcheeDejstvie.FakticheskijSrok КАК L62FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L62FaktSrok,
	|	Doc.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast3.DejstviyaPD КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.PreduprezhdayushcheeDejstvie.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast3 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L62CelevojSrok = Формат(СтрокаТЗ.L62CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L62FaktSrok = Формат(СтрокаТЗ.L62FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// Согласование Плана ПД по Несоответствию
//MatchPDPlan//Согласующие//L45//Согласующие - ТЧ из последнего документа отч3
//
Функция СогласованиеПредупреждающихДействийНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК MOrganizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Polzovatel) КАК MFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК MPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК MDolzhnost,
	|	""Согласовано электронно"" КАК MVisa
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast3.Soglasuyushchie КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.Polzovatel = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast3 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	Таблица = Запрос.Выполнить().Выгрузить();
	РезультатОбработки = Новый Структура("ИмяТЗ,ТЗ", ТаблицаИмя, Таблица);
	
	Возврат РезультатОбработки;
	
	////получение фактических согласующих - раскомментить код, когда доработают Делегирвоаине (Корнюшенко)
	//ТаблицаДанных = ра_РаботаСПроцессами.ПолучитьЭтапыСогласованияПоДокументу(ФактическийВладелецФайла);
	//Для каждого ТекСтрока Из ТаблицаДанных.НайтиСтроки(Новый Структура("Исполнитель", "DORobot")) Цикл // артефакт
	//	ТаблицаДанных.Удалить(ТекСтрока);
	//КонецЦикла;
	//
	//ТаблицаДанных.Колонки[Организация].Имя = "MOrganizaciya";
	//ТаблицаДанных.Колонки[Подразделение].Имя = "MPodrazdelenie"; //эту колонку Корнюшенко обещал добавить
	//ТаблицаДанных.Колонки[Должность].Имя = "MDolzhnost";
	//ТаблицаДанных.Колонки[Исполнитель].Имя = "MFIO";
	//ТаблицаДанных.Колонки[Результат].Имя = "MVisa";
	//Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, ТаблицаДанных);
	
КонецФункции

// Факт ПД по Несоответствию
//ПДФакт//PDFakt//L64//по данным ra_OtchetONesootvetstviiCHast3.Nesootvetstvie
//
Функция ОтчетПредупреждающихДействийНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ПД"" КАК L64Zadanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.Opisanie) КАК L64Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.Organizaciya) КАК L64Organizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК L64Podrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.Otvetstvennyj) КАК L64Otvetstvennyj,
	|	Doc.PreduprezhdayushcheeDejstvie.CelevojSrok КАК L64CelevojSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L64CelevojSrok,
	|	ПРЕДСТАВЛЕНИЕ(Doc.PreduprezhdayushcheeDejstvie.OtchetOVypolnenii) КАК L64Otchet,
	|	Doc.PreduprezhdayushcheeDejstvie.FakticheskijSrok КАК L64FaktSrokData,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК L64FaktSrok,
	|	Doc.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast3.DejstviyaPD КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.PreduprezhdayushcheeDejstvie.Otvetstvennyj = Польз.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Doc.Дата КАК Дата,
	|			Doc.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast3 КАК Doc
	|		ГДЕ
	|			Doc.Nesootvetstvie = &Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Дата УБЫВ) КАК Doc_ПоследнийПоНС
	|		ПО Doc.Ссылка = Doc_ПоследнийПоНС.Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.L64CelevojSrok = Формат(СтрокаТЗ.L64CelevojSrokData, "ДЛФ=Д");
		СтрокаТЗ.L64FaktSrok = Формат(СтрокаТЗ.L64FaktSrokData, "ДЛФ=Д");
	КонецЦикла;
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Таблица);
	
КонецФункции

// Согласование Документа
//Согласующие//Matching//L05//Согласующие - ТЧ
Функция СогласующиеДокумента(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК MOrganizaciya,
	|	Doc.Polzovatel КАК MFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК MPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК MDolzhnost,
	|	""Согласовано электронно"" КАК MVisa,
	|	ЗадачаИсполнителяПредметы.Ссылка КАК Задача
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.%1.Soglasuyushchie КАК Doc
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО (Doc.Polzovatel = Польз.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|		ПО (Doc.Ссылка = ЗадачаИсполнителяПредметы.Предмет)
	|			И (Doc.Polzovatel = ЗадачаИсполнителяПредметы.Ссылка.Исполнитель)
	|ГДЕ
	|	Doc.Ссылка = &Ссылка
	|	И (Doc.EtapPodpisaniya
	|			ИЛИ Doc.EtapSoglasovanie)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.MOrganizaciya КАК MOrganizaciya,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ра_ФактическиеИсполнителиЗадач.ПредставлениеИсполнителя, 0) = 0
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВТ.MFIO)
	|		ИНАЧЕ ра_ФактическиеИсполнителиЗадач.ПредставлениеИсполнителя
	|	КОНЕЦ КАК MFIO,
	|	ВТ.MPodrazdelenie КАК MPodrazdelenie,
	|	ВТ.MDolzhnost КАК MDolzhnost,
	|	ВТ.MVisa КАК MVisa
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ра_ФактическиеИсполнителиЗадач КАК ра_ФактическиеИсполнителиЗадач
	|		ПО (ВТ.Задача = ра_ФактическиеИсполнителиЗадач.Задача)
	|			И (ВТ.MFIO = ра_ФактическиеИсполнителиЗадач.ПредыдущийИсполнитель)");
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);

	Если ФактическийВладелецФайла=Неопределено тогда
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "ra_AktObUstraneniiNesootvetstviya");
	Иначе
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ФактическийВладелецФайла.Метаданные().Имя);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ФактическийВладелецФайла);
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);

	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Согласование Уведомления
//Согласующие//Matching//L05//Согласующие - ТЧ
//отличается от других документов - не полная ТЧ Согласующие и добавляется ОзК
Функция СогласующиеУведомления(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Doc.Organizaciya) КАК MOrganizaciya,
	|	ПРЕДСТАВЛЕНИЕ(Doc.Polzovatel) КАК MFIO,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение) КАК MPodrazdelenie,
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность) КАК MDolzhnost,
	|	""Согласовано электронно"" КАК MVisa
	|ИЗ
	|	Документ.ra_Uvedomlenie.Soglasuyushchie КАК Doc
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|		ПО Doc.Polzovatel = Польз.Пользователь
	|ГДЕ
	|	Doc.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Польз.Пользователь.ра_Организация),
	|	ПРЕДСТАВЛЕНИЕ(Польз.Пользователь),
	|	ПРЕДСТАВЛЕНИЕ(Польз.Подразделение),
	|	ПРЕДСТАВЛЕНИЕ(Польз.Должность),
	|	""Согласовано электронно""
	|ИЗ
	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК Польз
	|ГДЕ
	|	Польз.Пользователь В(&ОзК)");
	
	ОзК = справочники.Пользователи.ПустаяСсылка();
	Если ЗначениеЗаполнено(ФактическийВладелецФайла) Тогда
		Если ЗначениеЗаполнено(ФактическийВладелецФайла.OtvetstvennyjZaKachestvoOtpravitel) тогда
			ОзК = ФактическийВладелецФайла.OtvetstvennyjZaKachestvoOtpravitel
		ИначеЕсли ЗначениеЗаполнено(ФактическийВладелецФайла.OtvetstvennyjZaKachestvoPoluchatel) тогда
			ОзК = ФактическийВладелецФайла.OtvetstvennyjZaKachestvoPoluchatel
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ФактическийВладелецФайла);
	Запрос.УстановитьПараметр("ОзК",ОзК);
	
	Запрос.Текст = ПодставитьТекстВизы(Запрос.Текст);	
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Вложения Несоответствия
//Приложения ВСЕ//Attachments//ВСЕ Файлы по НС
//выборка владельцев файлов
//ВСД и коррекция
//Уведомления
//само НС
//Акт
//Отчет часть 1, 2, 3 и Итоговый
//Кд
//ПД
Функция ВложенияНесоответствия(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВСДКоррекция.VremennyeSderzhivayushchieDejstviyaIKorrekciya КАК Doc
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast1.Dejstviya КАК ВСДКоррекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ra_OtchetONesootvetstviiCHast1.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast1 КАК ra_OtchetONesootvetstviiCHast1
	|		ГДЕ
	|			ra_OtchetONesootvetstviiCHast1.Nesootvetstvie = &Ссылка
	|			И ra_OtchetONesootvetstviiCHast1.ПометкаУдаления = ЛОЖЬ
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ra_OtchetONesootvetstviiCHast1.Дата УБЫВ) КАК Отч_ч1
	|		ПО ВСДКоррекция.Ссылка = Отч_ч1.Ссылка
	|ГДЕ
	|	ВСДКоррекция.Ссылка.Nesootvetstvie = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Уведомления.Ссылка
	|ИЗ
	|	Документ.ra_Uvedomlenie КАК Уведомления
	|ГДЕ
	|	Уведомления.Nesootvetstvie = &Ссылка
	|	И Уведомления.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&Ссылка КАК Документ.ra_Nesootvetstvie)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акт.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ra_AktObUstraneniiNesootvetstviya.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ra_AktObUstraneniiNesootvetstviya КАК ra_AktObUstraneniiNesootvetstviya
	|	ГДЕ
	|		ra_AktObUstraneniiNesootvetstviya.Nesootvetstvie = &Ссылка
	|		И ra_AktObUstraneniiNesootvetstviya.ПометкаУдаления = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ra_AktObUstraneniiNesootvetstviya.Дата УБЫВ) КАК Акт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отч_ч1.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ra_OtchetONesootvetstviiCHast1.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ra_OtchetONesootvetstviiCHast1 КАК ra_OtchetONesootvetstviiCHast1
	|	ГДЕ
	|		ra_OtchetONesootvetstviiCHast1.Nesootvetstvie = &Ссылка
	|		И ra_OtchetONesootvetstviiCHast1.ПометкаУдаления = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ra_OtchetONesootvetstviiCHast1.Дата УБЫВ) КАК Отч_ч1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отч_ч2.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ra_OtchetONesootvetstviiCHast2.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ra_OtchetONesootvetstviiCHast2 КАК ra_OtchetONesootvetstviiCHast2
	|	ГДЕ
	|		ra_OtchetONesootvetstviiCHast2.Nesootvetstvie = &Ссылка
	|		И ra_OtchetONesootvetstviiCHast2.ПометкаУдаления = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ra_OtchetONesootvetstviiCHast2.Дата УБЫВ) КАК Отч_ч2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отч_ч3.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ra_OtchetONesootvetstviiCHast3.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ra_OtchetONesootvetstviiCHast3 КАК ra_OtchetONesootvetstviiCHast3
	|	ГДЕ
	|		ra_OtchetONesootvetstviiCHast3.Nesootvetstvie = &Ссылка
	|		И ra_OtchetONesootvetstviiCHast3.ПометкаУдаления = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ra_OtchetONesootvetstviiCHast3.Дата УБЫВ) КАК Отч_ч3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отч_Итог.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ra_ItogovyjOtchetONesootvetstvii.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ra_ItogovyjOtchetONesootvetstvii КАК ra_ItogovyjOtchetONesootvetstvii
	|	ГДЕ
	|		ra_ItogovyjOtchetONesootvetstvii.Nesootvetstvie = &Ссылка
	|		И ra_ItogovyjOtchetONesootvetstvii.ПометкаУдаления = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ra_ItogovyjOtchetONesootvetstvii.Дата УБЫВ) КАК Отч_Итог
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КД.KorrektiruyushcheeDejstvie.Ссылка
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast2.DejstviyaKD КАК КД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ra_OtchetONesootvetstviiCHast2.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast2 КАК ra_OtchetONesootvetstviiCHast2
	|		ГДЕ
	|			ra_OtchetONesootvetstviiCHast2.Nesootvetstvie = &Ссылка
	|			И ra_OtchetONesootvetstviiCHast2.ПометкаУдаления = ЛОЖЬ
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ra_OtchetONesootvetstviiCHast2.Дата УБЫВ) КАК Отч_ч2
	|		ПО КД.Ссылка = Отч_ч2.Ссылка
	|ГДЕ
	|	КД.Ссылка.Nesootvetstvie = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПД.Ссылка
	|ИЗ
	|	Документ.ra_OtchetONesootvetstviiCHast3.DejstviyaPD КАК ПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ra_OtchetONesootvetstviiCHast2.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ra_OtchetONesootvetstviiCHast2 КАК ra_OtchetONesootvetstviiCHast2
	|		ГДЕ
	|			ra_OtchetONesootvetstviiCHast2.Nesootvetstvie = &Ссылка
	|			И ra_OtchetONesootvetstviiCHast2.ПометкаУдаления = ЛОЖЬ
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ra_OtchetONesootvetstviiCHast2.Дата УБЫВ) КАК Отч_ч3
	|		ПО ПД.Ссылка = Отч_ч3.Ссылка
	|ГДЕ
	|	ПД.Ссылка.Nesootvetstvie = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Doc
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Т.Doc) КАК ВладелецФайла,
	|	ПРЕДСТАВЛЕНИЕ(Файлы.ПолноеНаименование) КАК L02Naimenovanie,
	|	ПРЕДСТАВЛЕНИЕ(Файлы.Описание) КАК L02Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(Файлы.ТекущаяВерсияРасширение) КАК L02Extension,
	|	ПРЕДСТАВЛЕНИЕ(Файлы.Ссылка) КАК L02Link,
	|	ПРЕДСТАВЛЕНИЕ(Файлы.ТекущаяВерсияРазмер) КАК L02Size
	|ИЗ
	|	Т КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО Т.Doc = Файлы.ВладелецФайла
	|			И (Файлы.ПометкаУдаления = ЛОЖЬ)");
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьНесоответствиеВладельцаФайла(ФактическийВладелецФайла));
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Вложения Документа
//Приложения//Attachments//Файлы по Документу
//
Функция ВложенияДокумента(ТаблицаИмя, ФактическийВладелецФайла) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.Владелец.ВладелецФайла) КАК ВладелецФайла,
	|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.ПолноеНаименование) КАК L02Naimenovanie,
	|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.Владелец.Описание) КАК L02Opisanie,
	|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.Расширение) КАК L02Extension,
	|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.Владелец) КАК L02Link,
	|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.Размер) КАК L02Size
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец.ТекущаяВерсия = ВерсииФайлов.Ссылка
	|	И ВерсииФайлов.Владелец.ПометкаУдаления = ЛОЖЬ
	|	И ВерсииФайлов.Владелец.ВладелецФайла = &ВладелецФайла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	""%1"",
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ФактическийВладелецФайла);
	
	ЛистВизирования = Нстр("ru = 'Лист визирования (без листа визирования не действителен)'; en = 'Approval sheet (no approval sheet is not valid)'");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ЛистВизирования);
	
	Возврат ПолучитьДанныеДляВозвратаТаблицы(ТаблицаИмя, Запрос.Выполнить().Выгрузить());
	
КонецФункции

Функция ДвоичныеДанныеПечатнойФормы(ДокументСсылка, ИмяПечатнойФормы) Экспорт
	
	ТабличныйДокумент = Неопределено;
	
	Если ИмяПечатнойФормы = "ApprovalSheet" Тогда
		
		ТипДокумента = ТипЗнч(ДокументСсылка);
		
		Если ТипДокумента = Тип("ДокументСсылка.ra_KorrektiruyushcheeDejstvie") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_PreduprezhdayushcheeDejstvie") ИЛИ
			// ТСК Близнюк С.И.; 17.12.2018; task#2010{
			ТипДокумента = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") ИЛИ
			// ТСК Близнюк С.И.; 17.12.2018; task#2010}
			ТипДокумента = Тип("ДокументСсылка.ra_Uvedomlenie") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_AktObUstraneniiNesootvetstviya") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast1") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast2") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast3") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_ItogovyjOtchetONesootvetstvii") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya") Тогда
			
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ДокументСсылка);
			
			ТабличныйДокумент = Обработки.ра_ПечатьОбщихФорм.СформироватьПечатнуюФормуЛистаСогласования(МассивОбъектов, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТабличныйДокумент <> Неопределено Тогда
		
		ПотокВПамяти = Новый ПотокВПамяти();
		ТабличныйДокумент.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.PDF);
		
		ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		
		ПотокВПамяти.Закрыть();
		
		Возврат ДвоичныеДанные;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Печатная форма не определена'; en = 'Print form is not defined'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти