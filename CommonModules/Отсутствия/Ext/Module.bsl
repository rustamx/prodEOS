////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отсутствия".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает необходимость проверки отсутствия при различных действиях.
//
// Возвращаемое значение:
//  Булево - Признак необходимость проверки отсутствия.
//
Функция ПредупреждатьОбОтсутствии() Экспорт
	
	ФункциональнаяОпция = ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия");
	Если Не ФункциональнаяОпция Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ПредупреждатьОбОтсутствии",
			Истина);
	
КонецФункции

// Возвращает представление текущего отсутствия сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - Пользователь, отсутствие которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьОписаниеТекущегоОтсутствияСотрудника(Сотрудник) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия")
		Или Не ЗначениеЗаполнено(Сотрудник)
		Или ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	ТаблицаОтсутствий = ПолучитьОтсутствияСотрудника(Дата, Дата, Сотрудник);
	Если ТаблицаОтсутствий.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Представление = ПолучитьПредставлениеТекстовое(
		ТаблицаОтсутствий[0], Ложь, Истина, Ложь, Ложь, 3, Ложь, Истина);
	
	ОписаниеОтсутствия = Новый Структура;
	ОписаниеОтсутствия.Вставить("Ссылка", ТаблицаОтсутствий[0].Ссылка);
	ОписаниеОтсутствия.Вставить("Представление", Представление);
	
	Возврат ОписаниеОтсутствия;
	
КонецФункции

// Возвращает описание отсутствия для текста письма.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьПредставлениеОтсутствияДляТекстаПисьма(Отсутствие) Экспорт
	
	Возврат ПолучитьПредставлениеТекстовое(Отсутствие, Истина, Ложь, Истина, Истина, 0, Ложь, Ложь);
	
КонецФункции

// Возвращает описание отсутствия для темы письма.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьПредставлениеОтсутствияДляТемыПисьма(Отсутствие) Экспорт
	
	Возврат ПолучитьПредставлениеТекстовое(Отсутствие, Ложь, Ложь, Ложь, Ложь, 0, Истина, Истина);
	
КонецФункции

// Заполняет реквизиты формы по отсутствию и устанавливает видимость элементов.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователь - Сотрудник, к которому относятся данные.
//  Отсутствие - ДокументСсылка.Отсутствие - Текущее отсутствие сотрудника.
//  ОтсутствиеКартинка - Строка - Строка, в которую будет помещена ссылка на картинку.
//  ОтсутствиеОписание - Строка - Текстовое описание текущего отсутствия сотрудника.
//  ЭлементГруппаОтсутствие - ГруппаФормы - Группа формы, в который отображается отсутствие.
//  ЭлементОтсутствиеКартинка - ПолеФормы - Поле формы, в котором отображается картинка отсутствия.
//
Процедура ОбновитьДанныеОтсутствияФормыПользователя(Сотрудник, Отсутствие,
	ОтсутствиеОписание, ЭлементГруппаОтсутствие, ЭлементДекорацияОтсутствует = Неопределено) Экспорт
	
	РеквизитыОтсутствия = ПолучитьТекущееОтсутствиеСотрудника(Сотрудник);
	
	СотрудникОтсутствует = (РеквизитыОтсутствия <> Неопределено);
	ЭлементГруппаОтсутствие.Видимость = СотрудникОтсутствует;
	Если ЭлементДекорацияОтсутствует <> Неопределено Тогда
		ЭлементДекорацияОтсутствует.Видимость = Не СотрудникОтсутствует;
	КонецЕсли;
	Если Не СотрудникОтсутствует Тогда
		Возврат;
	КонецЕсли;
	
	Отсутствие = РеквизитыОтсутствия.Ссылка;
	ОтсутствиеОписание = ПолучитьПредставлениеТекстовое(РеквизитыОтсутствия, Ложь, Истина, Истина, Ложь, 1, Ложь, Ложь);
	
КонецПроцедуры

// Возвращает персональную настройку отсутствий текущего пользователя по ключу.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ВопросСоздатьПисьмоБольшеНеСпрашивать" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоБольшеНеСпрашивать",
			Ложь);
		
	ИначеЕсли Настройка = "ВопросСоздатьПисьмоВариантОтвета" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоВариантОтвета",
			Истина);
		
	ИначеЕсли Настройка = "ПредупреждатьОбОтсутствии" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ПредупреждатьОбОтсутствии",
			Истина);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоБольшеНеСпрашивать" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоБольшеНеСпрашивать",
			Ложь);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоВариантОтвета" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоВариантОтвета",
			Истина);
		
	ИначеЕсли Настройка = "БудуРазбиратьЗадачи" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"БудуРазбиратьЗадачи",
			Ложь);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка отсутствий: ""%1""'; en = 'Incorrect absence settings: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку отсутствий текущего пользователя.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ВопросСоздатьПисьмоБольшеНеСпрашивать" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'; en = 'Incorrect value of absence settings: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоБольшеНеСпрашивать",
			Значение);
		
	ИначеЕсли Настройка = "ВопросСоздатьПисьмоВариантОтвета" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'; en = 'Incorrect value of absence settings: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоВариантОтвета",
			Значение);
		
	ИначеЕсли Настройка = "ПредупреждатьОбОтсутствии" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'; en = 'Incorrect value of absence settings: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ПредупреждатьОбОтсутствии",
			Значение);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоБольшеНеСпрашивать" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'; en = 'Incorrect value of absence settings: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоБольшеНеСпрашивать",
			Значение);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоВариантОтвета" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'; en = 'Incorrect value of absence settings: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоВариантОтвета",
			Значение);
		
	ИначеЕсли Настройка = "БудуРазбиратьЗадачи" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'; en = 'Incorrect value of absence settings: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"БудуРазбиратьЗадачи",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка отсутствий: ""%1""'; en = 'Incorrect absence settings: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу дел сотрудника.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получать дела.
//  ДатаОкончания - Дата - По какую дату следует получать дела.
//  Сотрудник - СправочникСсылка.Пользователи - Сотрудник, проектные задачи которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица дел сотрудника.
//
Функция ПолучитьДелаСотрудника(ДатаНачала, ДатаОкончания, Сотрудник) Экспорт
	
	Дела = Новый ТаблицаЗначений;
	Дела.Колонки.Добавить("Ссылка");
	Дела.Колонки.Добавить("Описание");
	Дела.Колонки.Добавить("Дата");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		СобытияПользователя = РаботаСРабочимКалендаремСервер.ПолучитьСобытияПользователя(
			ДатаНачала, ДатаОкончания, Сотрудник);
		Для Каждого Событие Из СобытияПользователя Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = Событие.Ссылка;
			Дело.Дата = Событие.ДатаНачала;
			Дело.Описание = СформироватьОписаниеДела(
				Событие.Ссылка,
				Событие.Наименование,
				Событие.ДатаНачала);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда
		МероприятияПользователя = УправлениеМероприятиями.ПолучитьМероприятияПользователя(
			ДатаНачала, ДатаОкончания, Сотрудник);
		Для Каждого Мероприятие Из МероприятияПользователя Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = Мероприятие.Ссылка;
			Дело.Дата = Мероприятие.ДатаНачала;
			Дело.Описание = СформироватьОписаниеДела(
				Мероприятие.Ссылка,
				Мероприятие.Представление,
				Мероприятие.ДатаНачала);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ПроектныеЗадачиПользователя = РаботаСПроектами.ПолучитьПроектныеЗадачиПользователя(
			ДатаНачала, ДатаОкончания, Сотрудник);
		Для Каждого ПроектнаяЗадача Из ПроектныеЗадачиПользователя Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = ПроектнаяЗадача.Ссылка;
			Дело.Дата = ПроектнаяЗадача.ТекущийПланНачало;
			Дело.Описание = СформироватьОписаниеДела(
				ПроектнаяЗадача.Ссылка,
				ПроектнаяЗадача.Представление,
				ПроектнаяЗадача.ТекущийПланНачало);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		ЗадачиПользователя = БизнесПроцессыИЗадачиСервер.ПолучитьЗадачиПользователя(
			ДатаНачала, ДатаОкончания, Сотрудник);
		Для Каждого Задача Из ЗадачиПользователя Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = Задача.Ссылка;
			Дело.Дата = Задача.СрокИсполнения;
			Дело.Описание = СформироватьОписаниеДела(
				Задача.Ссылка,
				Задача.Наименование,
				Задача.СрокИсполнения);
		КонецЦикла;
	КонецЕсли;
	
	Дела.Сортировать("Дата");
	
	Возврат Дела;
	
КонецФункции

// Формирует таблицу пересекающихся отсутствий.
//
Функция ПолучитьПересекающиесяОтсутствия(Отсутствие, Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отсутствие.Ссылка
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|ГДЕ
		|	Отсутствие.Сотрудник = &Сотрудник
		|	И Отсутствие.ДатаНачала < &ДатаОкончанияОтбора
		|	И Отсутствие.ДатаОкончания > &ДатаНачалаОтбора
		|	И Отсутствие.Ссылка <> &Отсутствие
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Отсутствие", Отсутствие);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаОтбора", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияОтбора", ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает отсутствия пользователей на определенный момент времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получить отсутствия.
//  ДатаОкончания - Дата - По какую дату следует получить отсутствия.
//  МассивПользователей - Массив - Пользователи, отсутствия которых необходимо получить.
//  Настройки - Структура - Настройки проверки отсутствий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица отсутствий пользователей.
//
Функция ПолучитьТаблицуОтсутствий(
	ДатаНачала,
	ДатаОкончания,
	МассивПользователей,
	Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отсутствие.Ссылка КАК Ссылка,
		|	Отсутствие.Сотрудник КАК Сотрудник,
		|	Отсутствие.ВидОтсутствия КАК ВидОтсутствия,
		|	Отсутствие.Заместители КАК Заместители,
		|	Отсутствие.ДатаНачала КАК ДатаНачала,
		|	Отсутствие.ДатаОкончания КАК ДатаОкончания,
		|	Отсутствие.ВесьДень КАК ВесьДень,
		|	Отсутствие.Дата КАК Дата
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|ГДЕ
		|	Отсутствие.Сотрудник В(&МассивСотрудников)
		|	И Отсутствие.ДатаНачала < &ДатаОкончания
		|	И Отсутствие.ДатаОкончания > &ДатаНачала
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ
		|	И Отсутствие.БудуРазбиратьЗадачи = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивПользователей);
	Если Не Настройки.УчитыватьФлагБудуРазбиратьЗадачи Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
			|	И Отсутствие.БудуРазбиратьЗадачи = ЛОЖЬ", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает отсутствия исполнителей на определенный момент времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получить отсутствия.
//  ДатаОкончания - Дата - По какую дату следует получить отсутствия.
//  Исполнители - Массив - Исполнители, отсутствия которых необходимо получить.
//  Настройки - Структура - Настройки проверки отсутствий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица отсутствий исполнителей.
//
Функция ПолучитьТаблицуОтсутствийИсполнителей(
	ДатаНачала,
	ДатаОкончания,
	Исполнители,
	Настройки = Неопределено) Экспорт
	
	// Отсутствия пользователей и адресатов без индивидуального срока исполнения.
	МассивПользователей = Новый Массив;
	МассивПользователейСИндивидуальнымСроком = Новый Массив;
	Для Каждого ДанныеИсполнителя Из Исполнители Цикл
		
		ТипИсполнителя = ТипЗнч(ДанныеИсполнителя.Исполнитель);
		Если ТипИсполнителя = Тип("СправочникСсылка.Пользователи") Тогда
			
			Пользователь = ДанныеИсполнителя.Исполнитель;
			
		ИначеЕсли ТипИсполнителя = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
			
			ДанныеАдресата =
				ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ДанныеИсполнителя.Исполнитель);
			Если ТипЗнч(ДанныеАдресата.Контакт) <> Тип("СправочникСсылка.Пользователи") Тогда
				Продолжить;
			КонецЕсли;
			
			Пользователь = ДанныеАдресата.Контакт;
			
		Иначе // Роли, контрагенты, личные адресаты, контактные лица
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИсполнителя.СрокИсполнения) Тогда
			ДанныеПользователя =
				Новый Структура("Пользователь, СрокИсполнения", Пользователь, ДанныеИсполнителя.СрокИсполнения);
			МассивПользователейСИндивидуальнымСроком.Добавить(ДанныеПользователя);
		Иначе
			МассивПользователей.Добавить(Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаОтсутствийИсполнителей = ПолучитьТаблицуОтсутствий(
		ДатаНачала,
		ДатаОкончания,
		МассивПользователей,
		Настройки);
	
	// Отсутствия пользователей и адресатов с индивидуальным сроком исполнения.
	Для Каждого ДанныеПользователя Из МассивПользователейСИндивидуальнымСроком Цикл
		
		МассивПользователей.Очистить();
		МассивПользователей.Добавить(ДанныеПользователя.Пользователь);
		ТипИсполнителя = ТипЗнч(ДанныеПользователя.Пользователь);
		
		ТаблицаОтсутствийИсполнителейСИндивидуальнымСроком =
			ПолучитьТаблицуОтсутствий(ДатаНачала, ДанныеПользователя.СрокИсполнения, МассивПользователей);
		Для Каждого СтрокаОтсутствие Из ТаблицаОтсутствийИсполнителейСИндивидуальнымСроком Цикл
			Если ТаблицаОтсутствийИсполнителей.Найти(СтрокаОтсутствие.Ссылка, "Ссылка") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаОтсутствийИсполнителей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтсутствие);
		КонецЦикла;
		
	КонецЦикла;
	
	// Отсутствия исполнителей ролей
	Для Каждого ДанныеИсполнителя Из Исполнители Цикл
		
		Если ТипЗнч(ДанныеИсполнителя.Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
			Продолжить;
		КонецЕсли;
		
		ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(ДанныеИсполнителя.Исполнитель);
		Если ЗначениеЗаполнено(ДанныеИсполнителя.СрокИсполнения) Тогда
			ТекущаяДатаОкончания = ДанныеИсполнителя.СрокИсполнения;
		Иначе
			ТекущаяДатаОкончания = ДатаОкончания;
		КонецЕсли;
		ТаблицаОтсутствийРолей =
			ПолучитьТаблицуОтсутствий(ДатаНачала, ТекущаяДатаОкончания, ИсполнителиРоли);
	
		ЕстьИсполнительРоли = Ложь;
		Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
			
			Если ТаблицаОтсутствийРолей.Найти(ИсполнительРоли, "Сотрудник") = Неопределено Тогда
				ЕстьИсполнительРоли = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		Если ЕстьИсполнительРоли Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаОтсутствие Из ТаблицаОтсутствийРолей Цикл
			
			Если ТаблицаОтсутствийИсполнителей.Найти(СтрокаОтсутствие.Ссылка, "Ссылка") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОтсутствийИсполнителей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтсутствие);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОтсутствийИсполнителей;
	
КонецФункции

// Возвращает ближайшее отсутствие на дату.
//
Функция ПолучитьБлижайшееОтсутствие(Дата, ПоказыватьУдаленные) Экспорт
	
	ДатаОтбора = НачалоДня(Дата);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Отсутствие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|ГДЕ
		|	(Отсутствие.ДатаНачала >= &ДатаОтбора
		|		ИЛИ Отсутствие.ДатаОкончания >= &ДатаОтбора)
		|	И (&ПоказыватьУдаленные 
		|		ИЛИ Отсутствие.ПометкаУдаления = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаОтбора", ДатаОтбора);
	Запрос.УстановитьПараметр("ПоказыватьУдаленные", ПоказыватьУдаленные);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Отсутствие.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Отсутствие КАК Отсутствие
			|ГДЕ
			|	Отсутствие.ДатаНачала < &ДатаОтбора
			|	И Отсутствие.ДатаОкончания < &ДатаОтбора
			|	И (&ПоказыватьУдаленные
			|			ИЛИ Отсутствие.ПометкаУдаления = ЛОЖЬ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Отсутствие.ДатаНачала УБЫВ";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Возвращает получателей письма об отсутствии.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//
// Возвращаемое значение:
//  Массив - Получатели письма об отсутствии.
//
Функция ПолучателиПисьмаОбОтсутствии(Отсутствие) Экспорт
	
	Получатели = Новый Массив;
	
	РеквизитыОтсутствия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Отсутствие, "Автор, Сотрудник, Заместители");
	
	// Автор отсутствия
	ВключитьВПолучатели(Получатели, РеквизитыОтсутствия.Автор);
	
	// Отсутствующий сотрудник
	ВключитьВПолучатели(Получатели, РеквизитыОтсутствия.Сотрудник);
	
	// Руководитель отсутствующего сотрудника
	Руководитель = РаботаСПользователями.ПолучитьРуководителя(РеквизитыОтсутствия.Сотрудник);
	ВключитьВПолучатели(Получатели, Руководитель);
	
	// Сотрудники того же подразделения
	Подразделение = РаботаСПользователями.ПолучитьПодразделение(РеквизитыОтсутствия.Сотрудник);
	ПользователиПодразделения = РаботаСПользователями.ПолучитьПользователейПодразделения(Подразделение);
	Для Каждого ПользовательПодразделения Из ПользователиПодразделения Цикл
		ВключитьВПолучатели(Получатели, ПользовательПодразделения);
	КонецЦикла;
	
	// Кто замещает на время отсутствия
	ВыборкаЗаместителей = РеквизитыОтсутствия.Заместители.Выбрать();
	Пока ВыборкаЗаместителей.Следующий() Цикл
		ВключитьВПолучатели(Получатели, ВыборкаЗаместителей.Заместитель);
	КонецЦикла;
	
	Возврат Получатели;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует текстовое представление отсутствия в соответствии с переданными параметрами.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//  ВключатьОписаниеСотрудника - Булево - Включить сотрудника в описание.
//  ДатаДо - Булево - Включать дату в формате "до даты".
//  ВключатьЗаместителей - Булево - Включать заместителей в описание.
//  ВключатьКомментарий - Булево - Включать комментарий в описание.
//  МаксимальноеКоличествоЗаместителей - Число - Количество заместителей, включаемых в описание.
//  КраткоеПредставление - Булево - Использовать краткое представление отсутствия.
//  КраткоеПредставлениеПричины - Булево - Использовать краткое представление причины отсутствия.
//
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьПредставлениеТекстовое(Отсутствие, ВключатьОписаниеСотрудника, ДатаДо,
	ВключатьЗаместителей, ВключатьКомментарий, МаксимальноеКоличествоЗаместителей,
	КраткоеПредставление, КраткоеПредставлениеПричины)
	
	ОписаниеОтсутствия = "";
	
	// Дата и сотрудник
	Если КраткоеПредставление Тогда
		ТекстПодстановки = "%1 %2";
		ПодписьОтсутствие = НСтр("ru = 'Отсутствие'; en = 'Absence'");
	Иначе
		Если КраткоеПредставлениеПричины Тогда
			ТекстПодстановки = "%1 %2";
		Иначе
			ТекстПодстановки = "%1 %2.";
		КонецЕсли;
		ПодписьОтсутствие = НСтр("ru = 'Отсутствует'; en = 'Absent'");
	КонецЕсли;
	ОписаниеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстПодстановки,
		ПодписьОтсутствие,
		ОтсутствияКлиентСервер.СформироватьДатыОтсутствия(
			Отсутствие.ДатаНачала, Отсутствие.ДатаОкончания,
			Отсутствие.ВесьДень, Истина, ДатаДо, Ложь));
	Если ВключатьОписаниеСотрудника Тогда
		ОписаниеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2",
			Отсутствие.Сотрудник,
			НРег(ОписаниеДаты));
	КонецЕсли;
	ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, " ", ОписаниеДаты);
	
	// Причина
	Если КраткоеПредставлениеПричины Тогда
		ОписаниеВидаОтсутствия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(%1)",
			Отсутствие.ВидОтсутствия);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, " ", ОписаниеВидаОтсутствия);
	Иначе
		ОписаниеВидаОтсутствия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 - %2.",
			НСтр("ru = 'Причина'; en = 'Reason'"),
			НРег(Отсутствие.ВидОтсутствия));
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, " ", ОписаниеВидаОтсутствия);
	КонецЕсли;
	
	// Заместители
	Если ВключатьЗаместителей Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, Символы.ПС,
			ПолучитьПредставлениеЗаместителей(Отсутствие.Заместители, МаксимальноеКоличествоЗаместителей));
	КонецЕсли;
	
	// Комментарий
	Если ВключатьКомментарий Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, Символы.ПС, Отсутствие.Комментарий);
	КонецЕсли;
	
	Возврат ОписаниеОтсутствия;
	
КонецФункции

// Формирует описание дела.
//
Функция СформироватьОписаниеДела(Ссылка, Представление, Дата)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1, %2 (%3)", Формат(Дата, "ДЛФ=D"), Представление, ТипЗнч(Ссылка));
	
КонецФункции

// Возвращает строковое представление заместителей.
//
// Параметры:
//  Заместители - ТаблицаЗначений - Таблица заместителей.
//
// Возвращаемое значение:
//  Строка - Строковое представление заместителей.
//
Функция ПолучитьПредставлениеЗаместителей(Заместители, МаксимальноеКоличество)
	
	КоличествоЗаместителей = Заместители.Количество();
	Если КоличествоЗаместителей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если МаксимальноеКоличество = 0 Или МаксимальноеКоличество > КоличествоЗаместителей Тогда
		КоличествоОтображаемыхЗаместителей = КоличествоЗаместителей;
	Иначе
		КоличествоОтображаемыхЗаместителей = МаксимальноеКоличество
	КонецЕсли;
	
	ПодписьЗаместителей = "";
	Для Индекс = 0 По КоличествоОтображаемыхЗаместителей - 1 Цикл
		СтрокаЗаместителя = Заместители[Индекс];
		Если ЗначениеЗаполнено(СтрокаЗаместителя.Комментарий) Тогда
			ПредставлениеЗаместителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)",
				СтрокаЗаместителя.Заместитель,
				СтрокаЗаместителя.Комментарий);
		Иначе
			ПредставлениеЗаместителя = Строка(СтрокаЗаместителя.Заместитель);
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьЗаместителей, ", ", ПредставлениеЗаместителя);
	КонецЦикла;
	
	Если КоличествоЗаместителей > КоличествоОтображаемыхЗаместителей Тогда
		ПодписьЗаместителей = ПодписьЗаместителей + " " + НСтр("ru = 'и другие'; en = 'and others'");
	КонецЕсли;
	
	Если КоличествоЗаместителей = 1 Тогда
		ПодписьЗаместителей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 - %2.",
			НСтр("ru = 'Заместитель'; en = 'Deputy'"),
			ПодписьЗаместителей);
	Иначе
		ПодписьЗаместителей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1: %2.",
			НСтр("ru = 'Заместители'; en = 'Deputies'"),
			ПодписьЗаместителей);
	КонецЕсли;
	
	Возврат ПодписьЗаместителей;
	
КонецФункции

// Формирует таблицу отсутствий сотрудника.
//
// Параметры:
//  ДатаНачала - Дата - Дата, с которой необходимо получить отсутствия.
//  ДатаОкончания - Дата - Дата, по которую необходимо получить отсутствия.
//  Сотрудник - СправочникСсылка.Пользователи - Сотрудник, таблицу отсутствий которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица отсутствий сотрудника.
//
Функция ПолучитьОтсутствияСотрудника(ДатаНачала, ДатаОкончания, Сотрудник)
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Сотрудник);
	
	Возврат ПолучитьТаблицуОтсутствий(ДатаНачала, ДатаОкончания, МассивПользователей);
	
КонецФункции

// Возвращает ссылку на текущее отсутствие сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - Пользователь, отсутствие которого необходимо получить.
//
// Возвращаемое значение:
//  ДокументСсылка.Отсутствие - Текущее отсутствие пользователя.
//
Функция ПолучитьТекущееОтсутствиеСотрудника(Сотрудник)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия")
		Или Не ЗначениеЗаполнено(Сотрудник)
		Или ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	ТаблицаОтсутствий = ПолучитьОтсутствияСотрудника(Дата, Дата, Сотрудник);
	Если ТаблицаОтсутствий.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаОтсутствий[0];
	
КонецФункции

// Включает получателя в получатели письма об отсутствии.
//
// Параметры:
//  Получатели - Массив - Получатели письма об отсутствии.
//  Получатель - СправочникСсылка.Пользователи - Получатель письма об отсутствии.
//
Процедура ВключитьВПолучатели(Получатели, Получатель)
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат;
	КонецЕсли;
	
	Если Получатель = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Если Получатели.Найти(Получатель) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели.Добавить(Получатель);
	
КонецПроцедуры

#КонецОбласти
