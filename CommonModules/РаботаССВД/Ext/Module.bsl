
// Отправить документ по СВД. Возвращает Истина, если хоть одному контрагенту отправили.
// 
// Параметры:
// Документ         - СправочникСсылка.ИсходящиеДокументы.
// Получатели       - массив ссылок на справочник Контрагенты.
// ФайлыДляОтправки - массив файлов документов, предназначенных для отправки. 
// Если не указано, тогда будут отправлены все файлы.
// 
Функция ОтправитьПоСВД(Документ, Получатели, ФайлыДляОтправки = Неопределено) Экспорт
	
	ОтправкаПроизведена = Ложь;
	
	Для Каждого Контрагент Из Получатели Цикл
		
		ПравилоОтправкиСообщенийСВД = НайтиПравилоОтправкиСообщенийСВД(Документ.Организация, Контрагент, 
		Документ.ВидДокумента);
		Если ПравилоОтправкиСообщенийСВД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПравилоОтправкиСообщенийСВД.Транспорт.ФорматСообщения);
		Если МенеджерОбъекта <> Неопределено Тогда
			ОтправкаПроизведена = МенеджерОбъекта.СформироватьСообщение(ПравилоОтправкиСообщенийСВД.Транспорт, Документ, 
				Контрагент, Документ.Организация, ПравилоОтправкиСообщенийСВД, ФайлыДляОтправки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтправкаПроизведена;
	
КонецФункции

// Найти правило отправки по организации, контрагенту, виду документа.
Функция НайтиПравилоОтправкиСообщенийСВД(Организация, Контрагент, ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаОтправкиСообщенийСВД.Ссылка,
	|	ПравилаОтправкиСообщенийСВД.Транспорт.ФорматСообщения КАК ФорматСообщения
	|ИЗ
	|	Справочник.ПравилаОтправкиСообщенийСВД КАК ПравилаОтправкиСообщенийСВД
	|ГДЕ
	|	ПравилаОтправкиСообщенийСВД.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Правило = Выборка.Ссылка;
		ФорматСообщения = Выборка.ФорматСообщения;
		
		// Для обмена через оператора ЭДО должно существовать соглашение
		Если ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.ОператорЭДО1СТакском") Тогда
			
			Запрос2 = Новый Запрос;
			Запрос2.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация
			|	И СоглашенияОбИспользованииЭД.СтатусПодключения = &СтатусПодключения";
			
			Запрос2.УстановитьПараметр("Контрагент", Контрагент);
			Запрос2.УстановитьПараметр("Организация", Организация);
			Запрос2.УстановитьПараметр("СтатусПодключения", Перечисления.СтатусыУчастниковОбменаЭД.Присоединен);
			Выборка2 = Запрос2.Выполнить().Выбрать();
			
			Если Не Выборка2.Следующий() Тогда
				Продолжить; // это правило не подходит
			КонецЕсли;
			
			Возврат Правило;
			
		КонецЕсли;
		
		Если ИспользоватьУчетПоОрганизациям Тогда
			Если Правило.Организации.Количество() <> 0 Тогда
				
				Если Правило.Организации.Найти(Организация, "Организация") = Неопределено Тогда
					Продолжить; // это правило не подходит
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;		
		
		Если Правило.Контрагенты.Количество() <> 0 Тогда
			
			Если Правило.Контрагенты.Найти(Контрагент, "Контрагент") = Неопределено Тогда
				Продолжить; // это правило не подходит
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Правило.ВидыДокументов.Количество() <> 0 Тогда
			
			Если Правило.ВидыДокументов.Найти(ВидДокумента, "ВидДокумента") = Неопределено Тогда
				Продолжить; // это правило не подходит
			КонецЕсли;	
			
		КонецЕсли;	
		
		Возврат Правило;
		
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

// Создает XDTO объект указанного типа из указанного пространства имен.
Функция СоздатьОбъект(ТипОбъекта, ПространствоИмен) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипОбъекта));
	
КонецФункции

// Возвращает пространство имен для типовых форматов.
Функция ПолучитьПространствоИмен(ФорматСообщения) Экспорт
	
	Если Не ЗначениеЗаполнено(ФорматСообщения)
		ИЛИ ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ53898ВложенныеФайлы Тогда
		Возврат "http://www.1c.ru/medo";
	ИначеЕсли ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
		Возврат "http://www.1c.ru/medosigned";
	ИначеЕсли ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ538982013ВложенныеФайлы Тогда
		Возврат "http://www.eos.ru/2010/sev";
	Иначе
		ВызватьИсключение НСтр("ru='Неверный формат сообщения'; en = 'Invalid message format'");
	КонецЕсли;	
	
КонецФункции

// Выгрузить Исходящий документ в xml файл на диске.
Функция ВыгрузитьИсходящийДокументВXML(ИсходящийДокумент, ВозвращаемоеПолноеИмяФайла, Контрагент, 
		Транспорт, ВозвращаемыйИдентификационныйНомерСообщения, Правило, ВозвращаемыйВидСообщенияСВД,
		ФайлыДляОтправки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Транспорт.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ538982013ВложенныеФайлы Тогда
		ОбъектXDTO = СоздатьXDTOИзИсходящего2013(ИсходящийДокумент, Контрагент, Транспорт, Правило, 
			ВозвращаемыйВидСообщенияСВД, ФайлыДляОтправки);
		ВозвращаемыйИдентификационныйНомерСообщения = ОбъектXDTO.Header.ReturnID;
	Иначе
		ОбъектXDTO = СоздатьXDTOИзИсходящего(ИсходящийДокумент, Контрагент, Транспорт, Правило, 
			ВозвращаемыйВидСообщенияСВД, ФайлыДляОтправки);
		ВозвращаемыйИдентификационныйНомерСообщения = ОбъектXDTO.msg_id;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	ВозвращаемоеПолноеИмяФайла = ИмяВременногоФайла;
	Возврат Истина;
	
КонецФункции

Функция ПолучитьКонтрагентаПоНаименованиюВСВД(ИмяКонтрагента, Транспорт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчастникиСВД.Адресат
	|ИЗ
	|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
	|ГДЕ
	|	УчастникиСВД.Транспорт = &Транспорт
	|	И УчастникиСВД.ИмяАдресата = &ИмяАдресата
	|	И УчастникиСВД.Адресат ССЫЛКА Справочник.Контрагенты";
	
	Запрос.УстановитьПараметр("Транспорт", Транспорт);	
	Запрос.УстановитьПараметр("ИмяАдресата", ИмяКонтрагента);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Адресат;
	
КонецФункции	

Функция ПолучитьОрганизациюПоНаименованиюВСВД(ИмяКонтрагента, Транспорт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчастникиСВД.Адресат
	|ИЗ
	|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
	|ГДЕ
	|	УчастникиСВД.Транспорт = &Транспорт
	|	И УчастникиСВД.ИмяАдресата = &ИмяАдресата
	|	И УчастникиСВД.Адресат ССЫЛКА Справочник.Организации";
	
	Запрос.УстановитьПараметр("Транспорт", Транспорт);	
	Запрос.УстановитьПараметр("ИмяАдресата", ИмяКонтрагента);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Адресат;
	
КонецФункции	

Функция ИдВСтроку(ИДДокумента)
	
	ИДДокументаСтрока = НРег(Строка(ИДДокумента));
	ИДДокументаСтрока = СтрЗаменить(ИДДокументаСтрока, "-", "");
	
	Возврат ИДДокументаСтрока;
	
КонецФункции	

// Заполняет список файлов из массива структур.
Процедура ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, Правило, ПространствоИмен, ФорматСообщения,
		XDTOПодписиЭП) Экспорт
	
	РазмерФайловВПакете = 0;
	
	ТипыПередаваемыхФайловНРег = НРег(Правило.ТипыПередаваемыхФайлов);
	
	МассивРасширений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	ТипыПередаваемыхФайловНРег, " ");
	
	НомерФайла = 0;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если Правило.МаксимальныйРазмерПередаваемогоФайла <> 0 
			И ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерПередаваемогоФайла Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Правило.МаксимальныйРазмерВсехПередаваемыхФайлов <> 0 
			И РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерВсехПередаваемыхФайлов Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Правило.ТипыПередаваемыхФайлов) Тогда
			
			Расширение = НРег(ФайлСсылка.ТекущаяВерсияРасширение);
			
			Если МассивРасширений.Найти(Расширение) = Неопределено Тогда // НЕ нашли в массиве разрешенных расширений
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		ОбъектDMFile = СоздатьОбъект("DocTransfer", ПространствоИмен);
		ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла);
		
		ОбъектXDTO.DocTransfer.Добавить(ОбъектDMFile);
		
		РазмерФайловВПакете = РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер;
		НомерФайла = НомерФайла + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет один файл из структуры
Процедура ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла)
	
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	// Операционная система, в среде которой определен файл
	// Указывают условное наименование операционной системы, например, Dos, Windows, Solaris, 
	// AIX, Linux и т.д. 
	ОбъектDMFile.os = "Windows";
	
	// Формат файла, определяющий программные средства его обработки (например, визуализации)
	// В качестве типа может использоваться mime тип, расширение файла и т.п., обеспечивающее просмотр 
	// этого файла стандартными процедурами операционной системы
	ОбъектDMFile.type = ФайлСсылка.ТекущаяВерсияРасширение;
	
	// Версия формата файла - необязательный
	// Указывают условное обозначение приложения и (или) формата, в котором файл был создан
	ОбъектDMFile.type_ver = "";
	
	// Кодировка текста - необязательный - Согласно установленным видам кодировки:
	// WIN-1251, КОИ-8 и т.д. 	Указывают в соответствии с международным стандартом наименования кодировок 
	ОбъектDMFile.char_set = "";
	
	// Описание документа (файла)
	// Текстовое описание содержимого файла (например, наименование соответствующего документа) 
	ОбъектDMFile.description = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ФайлСсылка.Наименование, 
	ФайлСсылка.ТекущаяВерсияРасширение);
	
	// Определяет способ передачи файла
	// Значение = 0 для определения передачи непосредственно файла.
	// Значение = 1 для определения передачи указателя местонахождения файла (ссылки на файл) 
	ОбъектDMFile.transfertype = 0;
	
	Если ФайлСсылка.ТекущаяВерсия.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ФайлСсылка.ТекущаяВерсия);
		ОбъектDMFile.__content = ХранилищеФайла.Получить();
		
	Иначе
		
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
		
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу;
			Попытка
				ОбъектDMFile.__content = Новый ДвоичныеДанные(ПолныйПуть);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. 
				|Возможно он удален антивирусной программой. Обратитесь к администратору.
				| Файл: ""%1.%2""';
				|en = 'File open error - file not found on server.
				|Perhaps it was deleted by antivirus software. Contact the administrator. 
				|File: ""%1.%2""'"),
				ВерсияСсылка.ПолноеНаименование,
				ВерсияСсылка.Расширение);
				
				ВызватьИсключение СообщениеОбОшибке;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
	// Добавим все ЭП файла
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		
		ПодписьЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(ФайлСсылка.ТекущаяВерсия);
		
		Пока ПодписьЭП.Следующий() Цикл
			
			XDTOПодписьЭП = СоздатьОбъект("SignatureType", ПространствоИмен);
			
			XDTOПодписьЭП.Signature = ПодписьЭП.Подпись.Получить();
			XDTOПодписьЭП.Certificate = ПодписьЭП.Сертификат.Получить();
			XDTOПодписьЭП.SignDate = ПодписьЭП.ДатаПодписи;
			XDTOПодписьЭП.CertificateSubject = ПодписьЭП.КомуВыданСертификат;
			XDTOПодписьЭП.Comment = ПодписьЭП.Комментарий;
			XDTOПодписьЭП.ObjectNumber = НомерФайла + 1; // нумерация идет с 1 - 1, 2, 3 для файлов. 0 - это сам документ
			
			XDTOПодписиЭП.signatures.Добавить(XDTOПодписьЭП);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ЗаполнитьАдрес(ОбъектСТаблЧастьюКонтактнаяИнформация, ПространствоИмен)
	
	// Адрес
	Для Каждого Строка Из ОбъектСТаблЧастьюКонтактнаяИнформация.КонтактнаяИнформация Цикл
		
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Адрес = СоздатьОбъект("Address", ПространствоИмен);
			
			Адрес.__content = Строка.ЗначенияПолей;
			
			ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
			Строка.ЗначенияПолей);
			
			Если ТипЗнч(ЗначенияПолей) = Тип("СписокЗначений") Тогда
				Для Каждого Поле Из ЗначенияПолей Цикл
					
					Если Поле.Представление = "Улица" Тогда
						Адрес.street = Поле.Значение;
					ИначеЕсли Поле.Представление = "Дом" Тогда
						Адрес.house = Поле.Значение;
					ИначеЕсли Поле.Представление = "Квартира" Тогда
						Адрес.flat = Поле.Значение;
					ИначеЕсли Поле.Представление = "НаселенныйПункт" Тогда
						Адрес.settlement = Поле.Значение;
					ИначеЕсли Поле.Представление = "Район" Тогда
						Адрес.district = Поле.Значение;
					ИначеЕсли Поле.Представление = "Регион" Тогда
						Адрес.region = Поле.Значение;
					ИначеЕсли Поле.Представление = "Страна" Тогда
						Адрес.country = Поле.Значение;
					ИначеЕсли Поле.Представление = "Индекс" Тогда
						Адрес.postcode = Поле.Значение;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Возврат Адрес;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьEmailИТелефоны(Контакты, Ссылка, ПространствоИмен)
	
	// Элемент Econtact
	// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
	// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Ссылка, 
	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		Контакт = СоздатьОбъект("Econtact", ПространствоИмен);
		Контакт.__content = Строка.Значение;
		
		// type Тип номера (адреса) 
		// Значение = 1 для рабочего телефона. 
		// Значение = 2 для домашнего телефона. 
		// Значение = 3 для мобильного телефона. 
		// Значение = 4 для факса.
		// Значение = 5 для адреса электронной почты (E-mail).
		// Значение = 6 для адреса web-сайта (страницы).
		// Значение = 0 для прочего 
		
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента.Наименование Тогда
			Контакт.type = 5;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.Наименование Тогда
			Контакт.type = 1;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента.Наименование Тогда
			Контакт.type = 3;
		КонецЕсли;
		
		Контакты.Добавить(Контакт);
		
	КонецЦикла;
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Ссылка, 
	Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		Контакт = СоздатьОбъект("Econtact", ПространствоИмен);
		Контакт.__content = Строка.Значение;
		
		// type Тип номера (адреса) 
		// Значение = 1 для рабочего телефона. 
		// Значение = 2 для домашнего телефона. 
		// Значение = 3 для мобильного телефона. 
		// Значение = 4 для факса.
		// Значение = 5 для адреса электронной почты (E-mail).
		// Значение = 6 для адреса web-сайта (страницы).
		// Значение = 0 для прочего 
		
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента.Наименование Тогда
			Контакт.type = 5;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.Наименование Тогда
			Контакт.type = 1;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента.Наименование Тогда
			Контакт.type = 3;
		КонецЕсли;	
		
		Контакты.Добавить(Контакт);
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция СоздатьФизлицоСПодписью(СсылкаПользователь, ПространствоИмен)
	
	Физлицо = СоздатьОбъект("PrivatePersonWithSign", ПространствоИмен);
	
	Физлицо.Name = СоздатьОбъект("Name", ПространствоИмен);
	Физлицо.Name.__content = Строка(СсылкаПользователь);
	
	// Должность - берем из регистра СведенияОПользователяхДокументооборот
	Должность = РаботаСПользователями.ПолучитьДолжность(СсылкаПользователь);
	Если ЗначениеЗаполнено(Должность) Тогда
		ДолжностьXDTO = СоздатьОбъект("Rank", ПространствоИмен);
		ДолжностьXDTO.__content = Строка(Должность);
		Физлицо.Rank.Добавить(ДолжностьXDTO);
	КонецЕсли;
	
	// Адрес
	Адрес = ЗаполнитьАдрес(СсылкаПользователь, ПространствоИмен);
	Если Адрес <> Неопределено Тогда
		Физлицо.Address = Адрес;
	КонецЕсли;	
	
	// Email и телефон
	ЗаполнитьEmailИТелефоны(Физлицо.Econtact, СсылкаПользователь, ПространствоИмен);
	
	// Физлицо.inn; // Индивидуальный номер налогоплательщика
	// Физлицо.doc_kind // Вид документа, идентифицирующего физическое лицо например, паспорт)
	// Физлицо.doc_num // Номер документа, идентифицирующего физическое лицо 
	// Физлицо.doc_org // Название организации, выдавшей документ, идентифицирующий физическое лицо 
	// Физлицо.doc_date // Дата выдачи документа, идентифицирующего физическое лицо 
	
	Возврат Физлицо;
	
КонецФункции	

Функция СоздатьФизлицо(СсылкаПользователь, ПространствоИмен)
	
	Физлицо = СоздатьОбъект("PrivatePerson", ПространствоИмен);
	
	Физлицо.Name = СоздатьОбъект("Name", ПространствоИмен);
	Физлицо.Name.__content = Строка(СсылкаПользователь);
	
	// Должность - берем из регистра СведенияОПользователяхДокументооборот
	Должность = РаботаСПользователями.ПолучитьДолжность(СсылкаПользователь);
	ДолжностьXDTO = СоздатьОбъект("Rank", ПространствоИмен);
	ДолжностьXDTO.__content = Строка(Должность);
	Физлицо.Rank.Добавить(ДолжностьXDTO);
	
	// Адрес
	Адрес = ЗаполнитьАдрес(СсылкаПользователь, ПространствоИмен);
	Если Адрес <> Неопределено Тогда
		Физлицо.Address = Адрес;
	КонецЕсли;	
	
	// Email и телефон
	ЗаполнитьEmailИТелефоны(Физлицо.Econtact, СсылкаПользователь, ПространствоИмен);
	
	// Физлицо.inn; // Индивидуальный номер налогоплательщика
	// Физлицо.doc_kind // Вид документа, идентифицирующего физическое лицо например, паспорт)
	// Физлицо.doc_num // Номер документа, идентифицирующего физическое лицо 
	// Физлицо.doc_org // Название организации, выдавшей документ, идентифицирующий физическое лицо 
	// Физлицо.doc_date // Дата выдачи документа, идентифицирующего физическое лицо 
	
	Возврат Физлицо;
	
КонецФункции	

// Сформировать подтверждение получения.
Функция СформироватьПодтверждениеПолучения(Документ, ИдентификаторСообщения, Транспорт, Организация,
		Контрагент, ВидСообщенияСВД, КодОшибки = 0, ТекстОшибки = "",
		РегистрационныйНомер = "", ДатаРегистрации = '00010101', UIDДокументаВпередающейСистеме = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);		
	
	// Зона заголовка
	Если Транспорт.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ538982013ВложенныеФайлы Тогда
		ОбъектXDTOЗаголовок = СформироватьXDTOПодтверждениеПолучения2013(Документ, ИдентификаторСообщения,
			Транспорт, Контрагент, ВидСообщенияСВД, КодОшибки, ТекстОшибки, UIDДокументаВпередающейСистеме);
		ИмяФайлаПаспорта = "Report"
	Иначе 
		ОбъектXDTOЗаголовок = СформироватьXDTOПодтверждениеПолучения(ИдентификаторСообщения, Транспорт,
			Организация, Контрагент, ВидСообщенияСВД, КодОшибки, ТекстОшибки, РегистрационныйНомер, ДатаРегистрации);
		ИмяФайлаПаспорта = "message";
	КонецЕсли;
	
	// Тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOЗаголовок);
	ЗаписьXML.Закрыть();
	
	// Уникальный служебный идентификационный номер сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД(Документ, Контрагент, 
	Организация, Транспорт, Транспорт.ФорматСообщения, 
	УникальныйИдентификаторСообщения,
	ВидСообщенияСВД, КодОшибки, 
	ИдентификаторСообщения);
	
	// Добавить файл
	РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, ИмяФайлаПаспорта);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ИсходящееСообщениеСВД;
	
КонецФункции	

// Сформировать XDTO объект подтверждения получения.
Функция СформироватьXDTOПодтверждениеПолучения(ИдентификаторСообщения, Транспорт, Организация, Контрагент,
		ВидСообщенияСВД, КодОшибки = 0, ТекстОшибки = "", РегистрационныйНомер = "", ДатаРегистрации = '00010101')
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок(Организация, Контрагент, 
	Транспорт, ВидСообщенияСВД);
	
	// Зона Уведомление 
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOЗаголовок.Acknowledgement = ОбъектXDTOAcknowledgement;
	
	// Уникальный служебный идентификационный номер поступившего сообщения
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	
	// Вид уведомления 
	// Значение = 1 для уведомления о доставке и приеме сообщения.
	// Значение = 2 для уведомления о регистрации документа в системе управления документами получателя	
	// Код 1003 - собственный код для обозначения ошибки регистрации
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Или КодОшибки = 1003 Тогда
		ОбъектXDTOAcknowledgement.ack_type = 1;
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или КодОшибки = 1003 Тогда
		ОбъектXDTOAcknowledgement.ack_type = 2;
	КонецЕсли;	
	
	// RegNumber - заполняем только в уведомлении о регистрации 
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации И
		ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		
		ОбъектXDTOAcknowledgement.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
		ОбъектXDTOAcknowledgement.RegNumber.__content = РегистрационныйНомер;
		ОбъектXDTOAcknowledgement.RegNumber.regdate = ДатаРегистрации;
		
	КонецЕсли;
	
	СообщениеОбОшибке = СоздатьОбъект("AckResult", ПространствоИмен);
	ОбъектXDTOAcknowledgement.AckResult.Добавить(СообщениеОбОшибке);
	СообщениеОбОшибке.errorcode = КодОшибки; // КодОшибки
	СообщениеОбОшибке.__content = ТекстОшибки; // ТекстОшибки
	
	Возврат ОбъектXDTOЗаголовок;
	
КонецФункции

// Выгрузить Исходящий документ в пакет.
// ТипСообщения = 1 для основного документа.
Функция СоздатьXDTOЗаголовок(Организация, Контрагент, Транспорт, ВидСообщенияСВД)
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOЗаголовок = СоздатьОбъект("Header", ПространствоИмен);
	
	// Вид стандарта, по которому создано данное сообщение 
	ОбъектXDTOЗаголовок.standart = НСтр("ru='Стандарт системы управления документами'; en = 'Document management system standard'");
	
	ОбъектXDTOЗаголовок.version = "1.0"; // Версия стандарта 
	ОбъектXDTOЗаголовок.time = УниверсальноеВремя(ТекущаяДатаСеанса()); // Дата и время формирования сообщения в UTC
	
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент Тогда
		ОбъектXDTOЗаголовок.msg_type = 1; // Вид сообщения. Значение = 1 для основного документа.
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
		ОбъектXDTOЗаголовок.msg_type = 3; // Вид сообщения. Значение = 3 для документа-ответа.
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке 
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
		ОбъектXDTOЗаголовок.msg_type = 0; // Вид сообщения. Значение = 0 для уведомления.
	КонецЕсли;
	
	// Уникальный служебный идентификационный номер сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	ОбъектXDTOЗаголовок.msg_id = ИдВСтроку(ИДПакета);
	
	// Необходимость посылки уведомления
	// Значение = 0 при отсутствии необходимости посылки уведомлений. 
	// Значение = 1 при необходимости посылки уведомлений только в случае возникновения ошибок. 
	// Значение = 2 при необходимости посылки уведомлений. По умолчанию (отсутствие атрибута) значение = 0
	ОбъектXDTOЗаголовок.msg_acknow = 2; // не обязательный 
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
		ОбъектXDTOЗаголовок.msg_acknow = 0; // для уведомлений не надо ставить флаг необходимости посылки уведомлений
	КонецЕсли;	
	
	// Организация отправителя
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOЗаголовок.from_organization = МенеджерОбъекта.ПолучитьНаименованиеОрганизацииВСВД(Организация, 
			Транспорт);
	КонецЕсли;	
	
	// Уникальный служебный идентификационный номер отправителя
	// пишем то же, что и в from_organization
	ОбъектXDTOЗаголовок.from_org_id = ОбъектXDTOЗаголовок.from_organization;
	
	// ОбъектXDTOЗаголовок.from_department не обязательный // Подразделение-отправитель 
	
	ОбъектXDTOЗаголовок.from_sys_id = ""; // Уникальный служебный идентификационный номер системы отправителя
	ОбъектXDTOЗаголовок.from_system = "1С:Документооборот"; // Наименование системы управления документами отправителя	
	
	// Дополнительные данные о системе управления документами отправителя
	ОбъектXDTOЗаголовок.from_system_details = Метаданные.Версия; // не обязательный 
	
	// При отправке уведомлений и ответных сообщений об исполнении ранее направленного документа 
	// значения атрибутов рекомендуется брать из атрибутов from_... принятого соответствующего сообщения
	
	// ОбъектXDTOЗаголовок.to_org_id не обязательный // Уникальный служебный идентификационный номер получателя 
	
	// Организация-получатель 
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOЗаголовок.to_organization = МенеджерОбъекта.ПолучитьНаименованиеКонтрагентаВСВД(Контрагент, Транспорт);
	КонецЕсли;	
	
	// ОбъектXDTOЗаголовок.to_department не обязательный Подразделение-получатель 
	// ОбъектXDTOЗаголовок.to_sys_id не обязательный // Уникальный служебный идентификационный номер системы получателя 
	// ОбъектXDTOЗаголовок.to_system не обязательный // Наименование системы управления документами получателя 
	// Дополнительные данные о системе управления документами получателя
	// ОбъектXDTOЗаголовок.to_system_details не обязательный 
	
	Возврат ОбъектXDTOЗаголовок;
	
КонецФункции

// Выгрузить Исходящий документ в пакет.
Функция СоздатьXDTOИзИсходящего(Документ, Контрагент, Транспорт, Правило, ВозвращаемыйВидСообщенияСВД,
		ФайлыДляОтправки = Неопределено) Экспорт
	
	ТипСообщения = 1; // 1 - для основного документа.
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
	Документ.Ссылка,
	Справочники.ТипыСвязей.ОтправленВОтветНа);
	
	РегистрационныйНомерВОтветНа = "";	
	ДатаРегистрацииВОтветНа = '00010101';
	
	XDTOПодписиЭП = Неопределено;
	
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		XDTOПодписиЭП = СоздатьОбъект("SignaturesType", ПространствоИмен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВОтветНа) Тогда
		// Проверим что ВОтветНа - из СВД
		
		ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(ВОтветНа);	
		Если ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВОтветНа, "ИсходящийНомер, ИсходящаяДата");
			РегистрационныйНомерВОтветНа = Реквизиты.ИсходящийНомер;
			ДатаРегистрацииВОтветНа = Реквизиты.ИсходящаяДата;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
		ВозвращаемыйВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет; // Документ-ответ
	КонецЕсли;
	
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок(Документ.Организация, Контрагент, Транспорт, ВозвращаемыйВидСообщенияСВД);
	
	// Зона документа 
	ОбъектXDTO = СоздатьОбъект("DocumentType", ПространствоИмен);
	ОбъектXDTOЗаголовок.Document = ОбъектXDTO;
	
	// Уникальный служебный идентификационный номер документа в передающей системе
	ОбъектXDTO.idnumber = Строка(Документ.УникальныйИдентификатор());
	
	ОбъектXDTO.type = 0; // Тип документа - Значение = 0 для исходящего документа.
	// Значение = 1 для входящего документа. 
	// Значение = 2 для внутреннего документа
	
	// Вид документа - Наименование вида документа (служебная переписка, письма граждан, 
	// распорядительный документ: приказ, распоряжение и т.д.)
	ОбъектXDTO.kind = Строка(Документ.ВидДокумента); // не обязательное поле
	
	ОбъектXDTO.pages = Документ.КоличествоЛистов; // не обязательное поле
	ОбъектXDTO.title = Документ.Заголовок; // не обязательное поле
	ОбъектXDTO.annotation = Документ.Содержание; // не обязательное поле
	
	// Признак коллективности обращения - имеет смысл только для входящих документов
	ОбъектXDTO.collection = 0; // не обязательное поле
	
	// Назначение: регистрационный номер и дата регистрации документа. 
	// Для документов, поступивших от физических лиц, допускается указание только даты.
	ОбъектXDTO.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.RegNumber.__content = Документ.РегистрационныйНомер;
	ОбъектXDTO.RegNumber.regdate = Документ.ДатаРегистрации;
	
	// Назначение: характеристика ограничений доступа к документу (гриф документа).
	ОбъектXDTO.Confident = СоздатьОбъект("Confident", ПространствоИмен);
	ОбъектXDTO.Confident.__content = Строка(Документ.ГрифДоступа);
	ОбъектXDTO.Confident.flag = 1; // Признак ограничения доступа к документу 	
	// Значение = 0 для открытого документа. 
	// Значение = 1 для документа с ограниченным доступом
	
	// Referred - "Ссылается на" - документы или задачи, на которые ссылается этот документ
	Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
		
		СсылкаНаДокумент = СоздатьОбъект("Referred", ПространствоИмен);
		СсылкаНаДокумент.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
		СсылкаНаДокумент.RegNumber.__content = РегистрационныйНомерВОтветНа;
		СсылкаНаДокумент.RegNumber.regdate = ДатаРегистрацииВОтветНа;
		ОбъектXDTO.Referred.Добавить(СсылкаНаДокумент);
		
	КонецЕсли;
	
	// ОбъектXDTO.DocNumber // не заполняем - т.к. информация уже записана в RegNumber
	// Назначение: информация о документе.
	// Номер и дата документа передаются во вложенных элементах Referred.
	// Элемент DocNumber рекомендуется использовать для распорядительных документов 
	// (постановлений, распоряжений, приказов и т.п.) в тех случаях, когда номер и дата документа 
	// отличаются от регистрационного номера и даты документа, присвоенных в организации.
	
	// Addressee. Назначение: описание адресата.
	// То, кому адресуется документ, - организации (юридическому лицу) или гражданину (физическому лицу)
	// - определяется соответствующим вложенным элементом Organization или PrivatePerson.
	Для Каждого ПолучательСтрокаТаблЧасти Из Документ.Получатели Цикл
		
		// Из табл части Получатели записываем в xml только Контрагента, которому отправляем
		Если ПолучательСтрокаТаблЧасти.Получатель = Контрагент Тогда
			
			ОбъектXDTOAddressee = СоздатьОбъект("Addressee", ПространствоИмен);
			
			Если ПолучательСтрокаТаблЧасти.Получатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				
				ОбъектXDTOAddressee.Organization = СоздатьОбъект("Organization", ПространствоИмен);
				
				// Адрес
				Адрес = ЗаполнитьАдрес(ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				Если Адрес <> Неопределено Тогда
					ОбъектXDTOAddressee.Organization.Address = Адрес;
				КонецЕсли;	
				
				// Элемент Econtact
				// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
				// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
				ЗаполнитьEmailИТелефоны(ОбъектXDTOAddressee.Organization.Econtact, ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				
				// Назначение: описание должностного лица.
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Адресат) Тогда
					
					ПредставительОрганизации = СоздатьОбъект("OfficialPerson", ПространствоИмен);
					
					ПредставительОрганизации.Name = СоздатьОбъект("Name", ПространствоИмен);
					ПредставительОрганизации.Name.__content = Строка(ПолучательСтрокаТаблЧасти.Адресат);
					
					// Official. Назначение: описание штатной единицы (подразделение, должность), 
					// занимаемой должностным лицом.
					ОписаниеШтатнойЕдиницы = СоздатьОбъект("Official", ПространствоИмен);
					ОписаниеШтатнойЕдиницы.__content = Строка(ПолучательСтрокаТаблЧасти.Адресат.Должность);
					ПредставительОрганизации.Official.Добавить(ОписаниеШтатнойЕдиницы);
					
					// Rank. Назначение: ученая степень, воинское звание и т.п.
					// ПредставительОрганизации.Rank 
					// не заполняем, т.к. у нас нет такой информации - какова степень/звание 
					// представителя контрагента в другой организации
					
					// Адрес
					Адрес = ЗаполнитьАдрес(ПолучательСтрокаТаблЧасти.Адресат, ПространствоИмен);
					Если Адрес <> Неопределено Тогда
						ПредставительОрганизации.Address = Адрес;
					КонецЕсли;	
					
					// Элемент Econtact
					// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
					// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
					ЗаполнитьEmailИТелефоны(ПредставительОрганизации.Econtact, ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
					
					ОбъектXDTOAddressee.Organization.OfficialPerson.Добавить(ПредставительОрганизации);
					
				КонецЕсли;	
				
				// Единая строка, содержащая все атрибуты организации
				ОбъектXDTOAddressee.Organization.organization_string = Строка(ПолучательСтрокаТаблЧасти.Получатель)
					+ " ИНН:" + ПолучательСтрокаТаблЧасти.Получатель.ИНН
					+ " КПП:" + ПолучательСтрокаТаблЧасти.Получатель.КПП;
				
				// 	Полное название организации
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.НаименованиеПолное) Тогда
					ОбъектXDTOAddressee.Organization.fullname = ПолучательСтрокаТаблЧасти.Получатель.НаименованиеПолное;
				Иначе
					ОбъектXDTOAddressee.Organization.fullname = Строка(ПолучательСтрокаТаблЧасти.Получатель);
				КонецЕсли;	
				
				// Краткое название организации
				ОбъектXDTOAddressee.Organization.shortname = Строка(ПолучательСтрокаТаблЧасти.Получатель);
				
				// Аббревиатура, отражающая организационно правовую форму (ЗАО, ООО, ГУП) 
				// ОбъектXDTOAddressee.ownership
				
				// ИНН
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.ИНН) Тогда
					ОбъектXDTOAddressee.Organization.inn = Число(ПолучательСтрокаТаблЧасти.Получатель.ИНН);
				КонецЕсли;	
				
				// КПП
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.КПП) Тогда
					ОбъектXDTOAddressee.Organization.kpp = Число(ПолучательСтрокаТаблЧасти.Получатель.КПП);
				КонецЕсли;	
				
			Иначе	
				
				ОбъектXDTOAddressee.PrivatePerson = СоздатьОбъект("PrivatePerson", ПространствоИмен);
				
				ОбъектXDTOAddressee.PrivatePerson.Name = СоздатьОбъект("Name", ПространствоИмен);
				ОбъектXDTOAddressee.PrivatePerson.Name.__content = Строка(ПолучательСтрокаТаблЧасти.Получатель);
				
				// Адрес
				Адрес = ЗаполнитьАдрес(ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				Если Адрес <> Неопределено Тогда
					ОбъектXDTOAddressee.PrivatePerson.Address = Адрес;
				КонецЕсли;	
				
				// Элемент Econtact
				// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
				// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
				ЗаполнитьEmailИТелефоны(ОбъектXDTOAddressee.PrivatePerson.Econtact, ПолучательСтрокаТаблЧасти.Получатель, 
					ПространствоИмен);
				
				// ИНН
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.ИНН) Тогда
					ОбъектXDTOAddressee.PrivatePerson.inn = Число(ПолучательСтрокаТаблЧасти.Получатель.ИНН);
				КонецЕсли;	
				
			КонецЕсли;	
			
			ОбъектXDTO.Addressee.Добавить(ОбъектXDTOAddressee);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Элемент RegHistory
	// Назначение: история регистрации документа в разных организациях.
	// Вложенные элементы содержат все присваивавшиеся документу регистрационные номера, 
	// за исключением последнего занесенного в элемент RegNumber элемента Document.
	// ОбъектXDTO.RegHistory
	
	// Назначение: описание автора документа.
	// Для элемента Author тот, кто является автором документа, - организация (юридическое лицо) 
	// или гражданин (физическое лицо) - определяется соответствующим вложенным 
	// элементом OrganizationWithSign или PrivatePersonWithSign.
	// Берем автора из поля Подготовил
	Если ЗначениеЗаполнено(Документ.Подготовил) Тогда
		Автор = СоздатьОбъект("Author", ПространствоИмен);
		Автор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(Документ.Подготовил, ПространствоИмен);
		ОбъектXDTO.Author.Добавить(Автор);
	КонецЕсли;
	
	// Элемент Validator
	// Назначение: утвердивший или согласовавший данный документ.
	// Автор утверждения или согласования - организация (юридическое лицо) или гражданин (физическое лицо)
	// или документ согласован или утвержден отдельным (другим) документом
	// - определяется соответствующим вложенным элементом OrganizationWithSign, PrivatePersonWithSign или DocNumber.
	Если ЗначениеЗаполнено(Документ.Подписал) Тогда
		
		Валидатор = СоздатьОбъект("Validator", ПространствоИмен);
		Валидатор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(Документ.Подписал, ПространствоИмен);
		
		// attestation - Гриф согласования или утверждения 
		// Согласовано.
		// Утверждено.
		// Согласовано с замечаниями.
		// Отклонено
		Валидатор.attestation = "Утверждено";
		
		ОбъектXDTO.Validator.Добавить(Валидатор);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		
		АктивныеВизы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ.Ссылка);
		
		Для Каждого АктивнаяВиза Из АктивныеВизы Цикл
			
			Если ТипЗнч(АктивнаяВиза.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Валидатор = СоздатьОбъект("Validator", ПространствоИмен);
				Валидатор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(АктивнаяВиза.Исполнитель, ПространствоИмен);
				Валидатор.attestation = Строка(АктивнаяВиза.РезультатСогласования);
				ОбъектXDTO.Validator.Добавить(Валидатор);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	// Элемент Writer
	// Назначение: исполнитель (составитель) документа.
	// Исполнитель (составитель) документа - организация (юридическое лицо) или гражданин (физическое лицо)
	// - определяется соответствующим вложенным элементом Organization или PrivatePerson.
	// ОбъектXDTO.Writer - берем из поля Подготовил
	Составитель = СоздатьОбъект("Writer", ПространствоИмен);
	Составитель.PrivatePerson = СоздатьФизлицо(Документ.Подготовил, ПространствоИмен);
	ОбъектXDTO.Writer = Составитель;
	
	МассивОбъектовДО = Новый Массив;
	ВсеПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ.Ссылка, Ложь);
	Если ФайлыДляОтправки = Неопределено Тогда
		МассивОбъектовДО = ВсеПодчиненныеФайлы;
	Иначе
		Для Каждого ПодчиненныйФайл Из ВсеПодчиненныеФайлы Цикл
			Если ФайлыДляОтправки.Найти(ПодчиненныйФайл) <> Неопределено Тогда
				МассивОбъектовДО.Добавить(ПодчиненныйФайл);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивОбъектовДО, Правило, ПространствоИмен, ФорматСообщения, XDTOПодписиЭП);
	
	ОбъектXDTOЗаголовок.Expansion = СоздатьОбъект("ExpansionType", ПространствоИмен);
	ОбъектXDTOЗаголовок.Expansion.AnyData = СоздатьОбъект("CustomFields", ПространствоИмен);
	ОбъектXDTOЗаголовок.Expansion.exp_ver = "1.0";
	ОбъектXDTOЗаголовок.Expansion.organization = "1С";
	
	// Добавим все ЭП документа
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		
		ПодписьЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(Документ.Ссылка);
		
		Пока ПодписьЭП.Следующий() Цикл
			
			XDTOПодписьЭП = СоздатьОбъект("SignatureType", ПространствоИмен);
			
			XDTOПодписьЭП.Signature = ПодписьЭП.Подпись.Получить();
			XDTOПодписьЭП.Certificate = ПодписьЭП.Сертификат.Получить();
			XDTOПодписьЭП.SignDate = ПодписьЭП.ДатаПодписи;
			XDTOПодписьЭП.CertificateSubject = ПодписьЭП.КомуВыданСертификат;
			XDTOПодписьЭП.Comment = ПодписьЭП.Комментарий;
			XDTOПодписьЭП.ObjectNumber = 0; // 0 - сам документ
			
			XDTOПодписиЭП.signatures.Добавить(XDTOПодписьЭП);
			
		КонецЦикла;
		
		ОбъектXDTOЗаголовок.Expansion.AnyData.fields.Добавить(XDTOПодписиЭП);
		
	КонецЕсли;	
	
	Возврат ОбъектXDTOЗаголовок;
	
КонецФункции	

// Создать и записать документ ИсходящееСообщениеСВД.
Функция СоздатьДокументИсходящееСообщениеСВД(Документ, Контрагент, Организация, Транспорт, 
		ФорматСообщения, ИдентификационныйНомерСообщения, ВидСообщенияСВД, 
		КодОшибки = 0, ИдентификаторСессии = "") Экспорт
	
	ИсходящееСообщениеСВД = Документы.ИсходящееСообщениеСВД.СоздатьДокумент();
	
	ИсходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
	ИсходящееСообщениеСВД.ИдентификаторСообщения = ИдентификационныйНомерСообщения;
	ИсходящееСообщениеСВД.ИдентификаторСессии = ИдентификаторСессии;
	Если Не ЗначениеЗаполнено(ИсходящееСообщениеСВД.ИдентификаторСессии) Тогда
		ИсходящееСообщениеСВД.ИдентификаторСессии = ИсходящееСообщениеСВД.ИдентификаторСообщения;
	КонецЕсли;	
	
	ИсходящееСообщениеСВД.ВидСообщения = ВидСообщенияСВД;
	ИсходящееСообщениеСВД.Транспорт = Транспорт;
	ИсходящееСообщениеСВД.ФорматСообщения = ФорматСообщения;
	ИсходящееСообщениеСВД.Получатель = Контрагент;
	ИсходящееСообщениеСВД.ОрганизацияОтправитель = Организация;
	ИсходящееСообщениеСВД.Документ = Документ;
	
	// если это не уведомление - запишем в историю
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент
			Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
			Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку, 
			ИдентификационныйНомерСообщения);
			
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
			Справочники.ВидыСостоянийДокументовВСВД.Ошибка, 
			ИдентификационныйНомерСообщения);
			
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
			Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту, 
			ИдентификационныйНомерСообщения);
			
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
			Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем, 
			ИдентификационныйНомерСообщения);		
		КонецЕсли;	
		
	КонецЕсли;		
	
	ИсходящееСообщениеСВД.Записать();
	Возврат ИсходящееСообщениеСВД.Ссылка;
	
КонецФункции	

// Обработчик регламентного задания ОтправкаСообщенийПоСВД.
Процедура ОтправкаДокументовПоСВД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаСообщенийПоСВД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортыСВД.Ссылка
	|ИЗ
	|	Справочник.ТранспортыСВД КАК ТранспортыСВД
	|ГДЕ
	|	ТранспортыСВД.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Транспорт = Выборка.Ссылка;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.ОтправитьСообщения(Транспорт);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Обработчик регламентного задания ПриемСообщенийПоСВД.
Процедура ПриемДокументовПоСВД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПриемСообщенийПоСВД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортыСВД.Ссылка
	|ИЗ
	|	Справочник.ТранспортыСВД КАК ТранспортыСВД
	|ГДЕ
	|	ТранспортыСВД.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Транспорт = Выборка.Ссылка;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.ПолучитьСообщения(Транспорт);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Создать Входящий документ из XDTO пакета.
Функция СоздатьВходящийИзXDTO(ОбъектXDTOHeader, ПараметрыДокумента, Контрагент, Организация) Экспорт
	
	ОбъектXDTO = ОбъектXDTOHeader.Document;
	
	ФорматСообщения = ПараметрыДокумента.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
	
	Документ.ДатаСоздания = ТекущаяДатаСеанса();	
	
	ЗаполнитьСсылочныйРеквизит(Документ.ВидДокумента, ОбъектXDTO.kind, "ВидДокумента", 
	Контрагент, Организация, Документ);
	ЗаполнитьСсылочныйРеквизит(Документ.ГрифДоступа, ОбъектXDTO.Confident.__content, "ГрифДоступа", 
	Контрагент, Организация, Документ);
	
	Документ.Заголовок = ОбъектXDTO.title;
	Если Не ЗначениеЗаполнено(Документ.Заголовок) Тогда
		Документ.Заголовок = "Без имени";
	КонецЕсли;	
	
	Документ.Содержание = ОбъектXDTO.annotation;
	Документ.КоличествоЛистов = ОбъектXDTO.pages;
	
	Документ.ИсходящийНомер = ОбъектXDTO.RegNumber.__content;
	Документ.ИсходящаяДата = ОбъектXDTO.RegNumber.regdate;
	
	Документ.СпособПолучения = Справочники.СпособыДоставки.СВД;
	
	Если ОбъектXDTO.Addressee.Количество() > 0 Тогда
		
		АдресатXDTO = ОбъектXDTO.Addressee[0];
		
		Если АдресатXDTO.Organization <> Неопределено Тогда
			
			Документ.Организация = Организация;
			
			Если АдресатXDTO.Organization.OfficialPerson.Количество() > 0 Тогда
				
				ДолжностноеЛицо = АдресатXDTO.Organization.OfficialPerson[0];
				
				ЗаполнитьСсылочныйРеквизит(Документ.Адресат, ДолжностноеЛицо.Name.__content, "Адресат", 
				Контрагент, Организация, Документ);
				
				Если ДолжностноеЛицо.Official.Количество() > 0 Тогда
					
					Если ДолжностноеЛицо.Official[0].department <> Неопределено Тогда
						ЗаполнитьСсылочныйРеквизит(Документ.Подразделение, ДолжностноеЛицо.Official[0].department, 
						"Подразделение", Контрагент, Организация, Документ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Validator.Количество() > 0 Тогда
		ПодписалXDTO = ОбъектXDTO.Validator[0];
		ЗаполнитьСсылочныйРеквизит(Документ.Подписал, ПодписалXDTO.PrivatePersonWithSign.Name.__content, 
			"Подписал", Контрагент, Организация, Документ);
	КонецЕсли;	
	
	Документ.Отправитель = Контрагент;
	
	ЗаполнитьСсылочныйРеквизит(Документ.ВопросДеятельности, "", "ВопросДеятельности", 
		Контрагент, Организация, Документ);
	
	Документ.ДополнительныеСвойства.Вставить("ПолученПоСВД", Истина);	
	Документ.Записать();
	
	МассивСозданныхФайлов = Новый Массив;
	
	Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.DocTransfer Цикл
		ФайлСсылка = ДобавитьФайл(Документ.Ссылка, ОбъектXDTOФайл);
		МассивСозданныхФайлов.Добавить(ФайлСсылка);
	КонецЦикла;	
	
	// Читаем подписи ЭП
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	 
		
		Для Каждого ОбъектXDTOДопИнфо Из ОбъектXDTOHeader.Expansion.AnyData.fields Цикл
			
			Если ПроверитьТип(ОбъектXDTOДопИнфо, "SignaturesType", ПространствоИмен) Тогда
				
				НомераОбъектовПодписей = Новый Соответствие;
				
				Для Каждого ПодписьXDTO Из ОбъектXDTOДопИнфо.signatures Цикл
					НомераОбъектовПодписей.Вставить(ПодписьXDTO.ObjectNumber, 0);
				КонецЦикла;	
				
				Для Каждого КлючИЗначение Из НомераОбъектовПодписей Цикл
					
					НомерОбъекта = КлючИЗначение.Ключ;
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					
					СсылкаОбъектаД8 = Неопределено;
					Если НомерОбъекта = 0 Тогда
						СсылкаОбъектаД8 = Документ.Ссылка;
					Иначе	
						СсылкаОбъектаД8 = МассивСозданныхФайлов[НомерОбъекта - 1];
					КонецЕсли;	
					
					Для Каждого ПодписьXDTO Из ОбъектXDTOДопИнфо.signatures Цикл
						
						Если ПодписьXDTO.ObjectNumber = НомерОбъекта Тогда
							
							ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток,
								|ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, 
								|АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
							
							ДанныеПодписи.ОбъектСсылка = СсылкаОбъектаД8;
							
							ДанныеПодписи.КомуВыданСертификат = ПодписьXDTO.CertificateSubject;
							ДанныеПодписи.ДвоичныеДанныеСертификата = ПодписьXDTO.Certificate;
							ДанныеПодписи.Комментарий = ПодписьXDTO.Comment;
							ДанныеПодписи.ДатаПодписи = ПодписьXDTO.SignDate;
							ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.Signature;
							ДанныеПодписи.ИмяФайлаПодписи = "";
							ДанныеПодписи.Отпечаток = "";
							ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
							
							МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
							
						КонецЕсли;	
						
					КонецЦикла;	
					
					РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, СсылкаОбъектаД8);
					
					Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
						ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
					КонецЕсли;		
					
				КонецЦикла;	
				
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если ОбъектXDTOHeader.msg_type = 3 Тогда // Документ-ответ
		
		ПараметрыДокумента.Вставить("ДокументОтвет", Истина);
		
		Для Каждого СсылкаНаДокументXDTO Из ОбъектXDTO.Referred Цикл
			
			Если СсылкаНаДокументXDTO.RegNumber <> Неопределено Тогда
				РегистрационныйНомер = СсылкаНаДокументXDTO.RegNumber.__content;
				ДатаРегистрации = СсылкаНаДокументXDTO.RegNumber.regdate;
				СсылкаНаДокумент = НайтиИсходящийДокументПоРегистрационномуНомеру(РегистрационныйНомер, ДатаРегистрации);
				
				Если СсылкаНаДокумент <> Неопределено Тогда
					
					Попытка
						// Установка связи
						СвязиДокументов.УстановитьСвязь(Документ.Ссылка, Неопределено, СсылкаНаДокумент, 
							Справочники.ТипыСвязей.ПолученВОтветНа);
					Исключение
						
						ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						
						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Создание связи для документа, поступившего по СВД'; en = 'Createing relation for document arrived via EDES'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,,
						Документ.Ссылка,
						ОписаниеОшибки);
						
					КонецПопытки;	
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	МенеджерЗаписиРегистра = РегистрыСведений.ПроверкаЗагруженныхДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	Если Не МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
		МенеджерЗаписиРегистра.Проверен = Ложь;
		МенеджерЗаписиРегистра.ДатаЗагрузки = ТекущаяДатаСеанса();
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;
	
	Возврат Документ.Ссылка;
	
КонецФункции

// Проверяет тип объекта XDTO
// Возвращает Истина если объект является объектом указанного типа и Ложь в
// противном случае
Функция ПроверитьТип(ОбъектXDTO, Тип, ПространствоИмен) Экспорт
	
	Возврат (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, Тип));
	
КонецФункции	

Функция НайтиИсходящийДокументПоРегистрационномуНомеру(РегистрационныйНомер, ДатаРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	ИсходящиеДокументы.РегистрационныйНомер = &РегистрационныйНомер
	|	И ИсходящиеДокументы.ДатаРегистрации МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации";
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);	
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", НачалоДня(ДатаРегистрации));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", КонецДня(ДатаРегистрации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ДобавитьФайл(ДокументСсылка, ОбъектXDTOФайл)
	
	Размер = ОбъектXDTOФайл.__content.Размер();
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ОбъектXDTOФайл.__content);
	АдресВременногоХранилищаТекста = "";
	ВебКлиент = Истина; // чтобы в регистр файлов в локальном кеше не вносить изменения
	
	ИмяБезРасширения = "";
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ОбъектXDTOФайл.description);
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрЗаменить(ОбъектXDTOФайл.description, "." + Расширение, "");
	КонецЕсли;
	
	ДатаСоздания = УниверсальноеВремя(ТекущаяДатаСеанса());
	
	// Создадим карточку Файла в БД
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
	СведенияОФайле.РасширениеБезТочки = ОбъектXDTOФайл.type;
	СведенияОФайле.Размер = Размер;
	СведенияОФайле.ВремяИзменения = ДатаСоздания;
	СведенияОФайле.ВремяИзмененияУниверсальное = ДатаСоздания;
	
	ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ДокументСсылка, СведенияОФайле);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
	   И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ОбъектXDTOФайл.type) Тогда 
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(ФайлСсылка, ДокументСсылка);
	КонецЕсли;
	
	Возврат ФайлСсылка;	
	
КонецФункции

// Загрузить Входящий документ из пакета в файле XML.
Функция ЗагрузитьДокументИзXML(ПутьКФайлуXML, ПараметрыДокумента, Транспорт,
		ВходящееСообщениеСВД, ТаблицаВложенний = Неопределено, ИмяКорневогоЭлемента) Экспорт 
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, ИмяКорневогоЭлемента);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	ОбъектXDTO.Проверить();
	
	Если Транспорт.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ538982013ВложенныеФайлы Тогда
		Если ТаблицаВложенний <> Неопределено Тогда
			Для Каждого XDTOResource Из ОбъектXDTO.Header.ResourceList.Resource Цикл
				СтрокаТЗФайлов = ТаблицаВложенний.Найти(Нрег(XDTOResource.UniqueName), "ИмяФайлаНрег");
				Если СтрокаТЗФайлов = Неопределено ТОгда
					Продолжить;
				КонецЕсли;
				СтрокаТЗФайлов.ResourceID = XDTOResource.UID;
			КонецЦикла;
		КонецЕсли;
		
		Документ = ЗагрузитьДокументИзXDTO2013(ОбъектXDTO, ПараметрыДокумента, Транспорт, 
			ВходящееСообщениеСВД, ТаблицаВложенний);
	Иначе
		Документ = ЗагрузитьДокументИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД);
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗаголовкаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт)
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПараметрыДокумента.Вставить("ФорматСообщения", ФорматСообщения);
	
	// КонтрагентОтправитель - найти по from_organization
	Контрагент = ПолучитьКонтрагентаПоНаименованиюВСВД(ОбъектXDTO.from_organization, Транспорт);
	ПараметрыДокумента.Вставить("КонтрагентОтправитель", Контрагент);
	
	ПараметрыДокумента.Вставить("ОрганизацияОтправитель", ОбъектXDTO.from_organization);
	ПараметрыДокумента.Вставить("ОрганизацияПолучатель", ОбъектXDTO.to_organization);
	ПараметрыДокумента.Вставить("ДатаФормирования", ОбъектXDTO.time);
	
	ПараметрыДокумента.Вставить("ИдентификационныйНомерСообщения", ОбъектXDTO.msg_id);
	
	ПодразделениеОтправитель = "";
	Если ОбъектXDTO.Установлено("from_department") Тогда 
		ПодразделениеОтправитель = ОбъектXDTO.from_department;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("ПодразделениеОтправитель", ПодразделениеОтправитель);
	
	ПодразделениеПолучатель = "";
	Если ОбъектXDTO.Установлено("to_department") Тогда 
		ПодразделениеПолучатель = ОбъектXDTO.to_department;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("ПодразделениеПолучатель", ПодразделениеПолучатель);
	
	ПользовательОтправитель = "";
	Если ОбъектXDTO.Установлено("from_org_id") Тогда 
		ПользовательОтправитель = ОбъектXDTO.from_org_id;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("ПользовательОтправитель", ПользовательОтправитель);
	
	ПользовательПолучатель = "";
	Если ОбъектXDTO.Установлено("to_org_id") Тогда 
		ПользовательПолучатель = ОбъектXDTO.to_org_id;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("ПользовательПолучатель", ПользовательПолучатель);
	
	НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	Если ОбъектXDTO.msg_acknow = 0 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	ИначеЕсли ОбъектXDTO.msg_acknow = 1 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки;
	ИначеЕсли ОбъектXDTO.msg_acknow = 2 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", НеобходимостьПосылкиУведомлений);
	
КонецПроцедуры	

Процедура ЗаполнитьПараметрыДокументаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт)
	
	ПараметрыДокумента.Вставить("ТипПоступившегоДокумента", ОбъектXDTO.Document.type);
	ПараметрыДокумента.Вставить("ВидПоступившегоДокумента", ОбъектXDTO.Document.kind);
	
КонецПроцедуры	

// Загрузить Входящий документ из пакета.
Функция ЗагрузитьДокументИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД) Экспорт
	
	ЗаполнитьПараметрыЗаголовкаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт);
	
	Организация = ПолучитьОрганизациюПоНаименованиюВСВД(ОбъектXDTO.to_organization, Транспорт);
	
	// Если это документ, а не уведомление
	Если ОбъектXDTO.msg_type <> 0 Тогда
		
		Документ = Неопределено;
		
		ЗаполнитьПараметрыДокументаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт);
		
		// Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
		Если ОбъектXDTO.Document.type = 0 Или ОбъектXDTO.Document.type = 1 Тогда // 0 - исходящий, 1 - входящий
			Документ = СоздатьВходящийИзXDTO(ОбъектXDTO, ПараметрыДокумента, 
			ПараметрыДокумента.КонтрагентОтправитель, Организация);
			
		КонецЕсли;
		
		// Если это документ и установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
		Если ОбъектXDTO.msg_acknow = 2 Тогда
			
			СформироватьПодтверждениеПолучения(Документ, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, Организация, ПараметрыДокумента.КонтрагентОтправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
			
		КонецЕсли;	
		
	Иначе // это уведомление
		
		ИдентификаторСессии = ОбъектXDTO.Acknowledgement.msg_id;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		
		// На инициирующей стороне запишем в историю подтверждение
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеСВД, "Документ");
			
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			Если ОбъектXDTO.Acknowledgement.AckResult.Количество() <> 0
				И ОбъектXDTO.Acknowledgement.AckResult[0].errorcode <> 0 Тогда
				
				ТекстОшибки = ОбъектXDTO.Acknowledgement.AckResult[0].__content;
				ЭтоСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
			Если Не ЭтоСообщениеОбОшибке Тогда
				
				СостояниеДокумента = Неопределено;
				Если ОбъектXDTO.Acknowledgement.ack_type = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				Иначе	
					
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// Заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						УчитыватьВходящийНомерИДатуПолучателя = 
						ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
						Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
						
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
							
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, 
							// которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
							
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыДокумента.КонтрагентОтправитель Тогда
									Строка.ВходящийНомер = ОбъектXDTO.Acknowledgement.RegNumber.__content;
									Строка.ВходящаяДата = ОбъектXDTO.Acknowledgement.RegNumber.regdate;
								КонецЕсли;
							КонецЦикла;
							
							ДокументОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;
					
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
					
				КонецЕсли;
				
			Иначе
				
				СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
				ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
				
				ЗаписатьВИсториюСостоянийСВД(
					ОтправляемыйДокумент, 
					ВходящееСообщениеСВД,
					СостояниеДокумента,
					ИдентификаторСессии, 
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсходящееСообщениеСВД.Ссылка
	|ИЗ
	|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
	|ГДЕ
	|	ИсходящееСообщениеСВД.ИдентификаторСообщения = &ИдентификаторСессии";
	
	Запрос.УстановитьПараметр("ИдентификаторСессии", ИдентификаторСессии);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

Функция НайтиСообщениеСВДПоИдентификатору(ИдентификаторСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщенияСВД.Ссылка,
	|	СообщенияСВД.Дата КАК Дата
	|ИЗ
	|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
	|ГДЕ
	|	СообщенияСВД.ИдентификаторСообщения = &ИдентификаторСессии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ИдентификаторСессии", ИдентификаторСессии);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Создает документ ВходящееСообщениеСВД на основании xml файла ГОСТ 53898.
Процедура СоздатьВходящееСообщениеСВДИзXML(Транспорт, ПутьКФайлуXML, ТаблицаВложенний = Неопределено,
		ИмяКорневогоЭлемента="Header") Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВходящееСообщениеСВД = Документы.ВходящееСообщениеСВД.СоздатьДокумент();
	ВходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
	ВходящееСообщениеСВД.Записать();
	
	ПараметрыДокумента = Новый Структура;
	Документ = ЗагрузитьДокументИзXML(ПутьКФайлуXML, ПараметрыДокумента, Транспорт, 
		ВходящееСообщениеСВД, ТаблицаВложенний, ИмяКорневогоЭлемента);
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Если ПараметрыДокумента.Свойство("ДокументОтвет") Тогда
			ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.ДокументОтвет;
		Иначе	
			ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент;
		КонецЕсли;	
	Иначе
		ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке;
		Если ПараметрыДокумента.Свойство("ВидСообщения") Тогда
			ВходящееСообщениеСВД.ВидСообщения = ПараметрыДокумента.ВидСообщения;
		КонецЕсли;
	КонецЕсли;	
	
	ВходящееСообщениеСВД.ИдентификаторСообщения = ПараметрыДокумента.ИдентификационныйНомерСообщения;
	Если ПараметрыДокумента.Свойство("ИдентификаторСессии") Тогда
		ВходящееСообщениеСВД.ИдентификаторСессии = ПараметрыДокумента.ИдентификаторСессии;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД.ИдентификаторСессии) Тогда
		ВходящееСообщениеСВД.ИдентификаторСессии = ВходящееСообщениеСВД.ИдентификаторСообщения;
	КонецЕсли;	
	
	Если ПараметрыДокумента.Свойство("UIDДокументаВпередающейСистеме") Тогда
		ВходящееСообщениеСВД.ИдентификаторДокумента = ПараметрыДокумента.UIDДокументаВпередающейСистеме;
	КонецЕсли;	
	
	ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = ПараметрыДокумента.НеобходимостьПосылкиУведомлений;
	
	ВходящееСообщениеСВД.ТранспортПолучения = Транспорт;
	ВходящееСообщениеСВД.ФорматСообщения = Транспорт.ФорматСообщения;
	ВходящееСообщениеСВД.КонтрагентОтправитель = ПараметрыДокумента.КонтрагентОтправитель;
	ВходящееСообщениеСВД.ДатаФормирования = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(
		ПараметрыДокумента.ДатаФормирования);
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ВходящееСообщениеСВД.ОрганизацияПолучатель = Документ.Организация;
		ВходящееСообщениеСВД.Документ = Документ;
	Иначе
		ЗапросДляПоискаИсходящегоДокумента = Новый Запрос;
		ЗапросДляПоискаИсходящегоДокумента.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.Документ
		|,
		|	ИсходящееСообщениеСВД.ОрганизацияОтправитель,
		|	ИсходящееСообщениеСВД.Получатель
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		| Истина
		|	И ИсходящееСообщениеСВД.ИдентификаторСессии = &ИдентификаторСессии
		|	И ИсходящееСообщениеСВД.ВидСообщения В (&ВидСообщения)";
		ЗапросДляПоискаИсходящегоДокумента.УстановитьПараметр("ИдентификаторСессии", ВходящееСообщениеСВД.ИдентификаторСессии);
		СписокВидыСообщенийСВД = Новый СписокЗначений;
		СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
		СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
		ЗапросДляПоискаИсходящегоДокумента.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );
		Выборка = ЗапросДляПоискаИсходящегоДокумента.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВходящееСообщениеСВД.Документ = Выборка.Документ;
			ВходящееСообщениеСВД.ОрганизацияПолучатель = Выборка.ОрганизацияОтправитель;
			ВходящееСообщениеСВД.КонтрагентОтправитель = Выборка.Получатель;
		КонецЕсли;
	КонецЕсли;
	
	ВходящееСообщениеСВД.Записать();
	
	ПодписьЭПНеверна = Ложь;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		// Запись информации о том, что документ получен по СВД.
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "ПолученПоСВД", Истина);
		
		Если ПараметрыДокумента.Свойство("ЕстьПодписиЭП") И ПараметрыДокумента.ЕстьПодписиЭП Тогда
			СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена;
		Иначе
			СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет;
		КонецЕсли;
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "СтатусЭП", СтатусЭП);
		
	КонецЕсли;
	
	Если Нрег(ИмяКорневогоЭлемента) = "header" Тогда
		ИмяФайлаПаспорта = "message"
	Иначе
		ИмяФайлаПаспорта = ИмяКорневогоЭлемента;
	КонецЕсли;
	РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ВходящееСообщениеСВД.Ссылка, ПутьКФайлуXML, ИмяФайлаПаспорта);
	
	Если ПодписьЭПНеверна И ЗначениеЗаполнено(Документ) Тогда
		// формируем сообщение об ошибке
		ОбработатьОшибкуПроверкиЭПДокумента(Документ, Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
	КонецЕсли;	
	
КонецПроцедуры	

// Вызывается при ошибке проверки ЭП документа.
Процедура ОбработатьОшибкуПроверкиЭПДокумента(Документ, ВидСообщенияСВД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	
	
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Если Не ЕстьОшибкиСВДДляДокумента(ВходящееСообщениеСВД.ИдентификаторСообщения) Тогда
			
			ТекстОшибки = НСтр("ru='Некоторые подписи ЭП не прошли проверку.'; en = 'Some signature did not pass validation.'");
			
			СформироватьПодтверждениеПолучения(
				Документ,
				ВходящееСообщениеСВД.ИдентификаторСообщения, 
				ВходящееСообщениеСВД.ТранспортПолучения, 
				Документ.Организация, 
				ВходящееСообщениеСВД.КонтрагентОтправитель,
				ВидСообщенияСВД,
				1004, 
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьОшибкиСВДДляДокумента(ИдентификаторСообщения) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсходящееСообщениеСВД.Ссылка
	|ИЗ
	|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
	|ГДЕ
	|	ИсходящееСообщениеСВД.ИдентификаторСообщения = &ИдентификаторСообщения
	|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Заполняет ссылочный реквизит по строке.
Процедура ЗаполнитьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, Контрагент, Организация, Документ)
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
			Справочники.Контрагенты.ПустаяСсылка(), 
			Справочники.Организации.ПустаяСсылка(), Документ) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
			Контрагент, Справочники.Организации.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Справочники.Контрагенты.ПустаяСсылка(), Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Контрагент, Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Контрагент = Контрагент;
	МенеджерЗаписи.ИмяПоля = ИмяПоля;
	МенеджерЗаписи.СтроковоеЗначение = ЗначениеПоля;
	
	МенеджерЗаписи.Документ = УправлениеДоступомДокументооборот.ПолучитьСсылкуОбъекта(Документ);
	
	МенеджерЗаписи.Записать(); // запишем пустое значение
	
КонецПроцедуры	

// Заполняет ссылочный реквизит по строке.
Функция ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, Контрагент, Организация, Документ=Неопределено)
	
	МенеджерЗаписи = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Контрагент = Контрагент;
	МенеджерЗаписи.ИмяПоля = ИмяПоля;
	МенеджерЗаписи.СтроковоеЗначение = ЗначениеПоля;
	
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.ЗначениеИзСправочника) Тогда
		Реквизит = МенеджерЗаписи.ЗначениеИзСправочника;
		// Для случая когда все измерения совпали
		Если не Документ = Неопределено Тогда
			МенеджерЗаписи.Документ = УправлениеДоступомДокументооборот.ПолучитьСсылкуОбъекта(Документ);
			МенеджерЗаписи.Записать();
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Делает запись в регистр ИсторияСостоянийДокументовВСВД
Процедура ЗаписатьВИсториюСостоянийСВД(Документ, Сообщение, Состояние, ИдентификаторСессии,
		ТекстОшибки = "" ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ТипЗнч(Сообщение) = Тип("ДокументОбъект.ВходящееСообщениеСВД")
			Или ТипЗнч(Сообщение) = Тип("ДокументОбъект.ИсходящееСообщениеСВД") Тогда
			Сообщение.ТекстОшибки = ТекстОшибки;
		Иначе
			СообщениеОбъект = Сообщение.ПолучитьОбъект();
			СообщениеОбъект.ТекстОшибки = ТекстОшибки;
			СообщениеОбъект.Записать();
		КонецЕсли;
	Конецесли;
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "СостояниеСВД", Состояние);
	
КонецПроцедуры	

Функция НайтиСообщениеСВДПоДокументу(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящееСообщениеСВД.Ссылка
	|ИЗ
	|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
	|ГДЕ
	|	ВходящееСообщениеСВД.Документ = &Документ
	|	И ВходящееСообщениеСВД.ВидСообщения В (&ВидСообщения)";
	Запрос.УстановитьПараметр("Документ", Документ);
	СписокВидыСообщенийСВД = Новый СписокЗначений;
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
	Запрос.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );	
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ссылка;
	КонецЕсли;
	
	Возврат Документы.ВходящееСообщениеСВД.ПустаяСсылка();
	
КонецФункции	

// Вызывается при регистрации документа.
Процедура ОбработатьРегистрациюДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	
	
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = 
		Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения(
			Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации,
			0, "",
			Реквизиты.РегистрационныйНомер,
			Реквизиты.ДатаРегистрации,
			ВходящееСообщениеСВД.ИдентификаторДокумента);
		
	КонецЕсли;	
	
КонецПроцедуры	

// Вызывается при ошибке регистрации документа.
Процедура ОбработатьОшибкуРегистрацииДокумента(Документ, ТекстОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитыВходящееСообщениеСВД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходящееСообщениеСВД,
		"НеобходимостьПосылкиУведомлений, ИдентификаторСообщения, ТранспортПолучения, КонтрагентОтправитель, ИдентификаторДокумента");
	
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если РеквизитыВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = 
		Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		ИсходящееСообщение = СформироватьПодтверждениеПолучения(
			Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке,
			1003,	
			ТекстОшибки	,
			Реквизиты.РегистрационныйНомер,
			Реквизиты.ДатаРегистрации,
			РеквизитыВходящееСообщениеСВД.ИдентификаторДокумента);
		
		ЗаписатьВИсториюСостоянийСВД(
			Документ, 
			ИсходящееСообщение, 
			Справочники.ВидыСостоянийДокументовВСВД.Ошибка, 
			ИсходящееСообщение.ИдентификаторСессии,
			ТекстОшибки);
		
	КонецЕсли;	
	
КонецПроцедуры	

// Обработка события ПослеЗаписиНаСервере, вызванного из карточки Входящего документа.
Процедура ПослеЗаписиНаСервереИзКарточкиВходящегоДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	
	
	// Анализируем заполненность полей(из списка) Входящего документа и записываем 
	// в регистр "ПравилаЗаполненияПолейДокументов" "ЗначениеИзСправочника", ели они расходятся
	СписокПолейАвтоЗаолнения = Новый СписокЗначений;
	СписокПолейАвтоЗаолнения.Добавить("ВидДокумента");
	СписокПолейАвтоЗаолнения.Добавить("ГрифДоступа");
	СписокПолейАвтоЗаолнения.Добавить("Адресат");
	СписокПолейАвтоЗаолнения.Добавить("Подразделение");
	СписокПолейАвтоЗаолнения.Добавить("Подписал");
	СписокПолейАвтоЗаолнения.Добавить("ВопросДеятельности");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	NULL";
	Для Каждого ПолеАвтоЗаолнения Из СписокПолейАвтоЗаолнения Цикл
		Запрос.Текст = 	Запрос.Текст + "
		|	, ВходящиеДокументы."+ПолеАвтоЗаолнения+" КАК "+ПолеАвтоЗаолнения;
	КонецЦикла;
	Запрос.Текст = 	Запрос.Текст + "
		|ПОМЕСТИТЬ ВходящийДокументРеквизиты
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.Ссылка = &Документ
		|;
		|ВЫБРАТЬ
		|	NULL КАК ЗначениеИзСправочника,
		|	NULL КАК ИмяПоля
		|ПОМЕСТИТЬ ВходящийДокументРеквизитыСименами
		|";
		
	Для Каждого ПолеАвтоЗаолнения Из СписокПолейАвтоЗаолнения Цикл
		Запрос.Текст = 	Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ВходящийДокументРеквизиты."+ПолеАвтоЗаолнения+" КАК ЗначениеИзСправочника,
			|	"""+ПолеАвтоЗаолнения+""" КАК ИмяПоля
			|ИЗ
			|	ВходящийДокументРеквизиты КАК ВходящийДокументРеквизиты
			|";
	КонецЦикла;
	Запрос.Текст = 	Запрос.Текст + "
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 
		|ВЫБРАТЬ
		|	ПравилаЗаполненияПолейДокументов.Организация,
		|	ПравилаЗаполненияПолейДокументов.Контрагент,
		|	ПравилаЗаполненияПолейДокументов.ИмяПоля,
		|	ПравилаЗаполненияПолейДокументов.СтроковоеЗначение,
		|	ПравилаЗаполненияПолейДокументов.ЗначениеИзСправочника
		|ПОМЕСТИТЬ ПравилаЗаполненияПолейДокументов
		|ИЗ
		|	РегистрСведений.ПравилаЗаполненияПолейДокументов КАК ПравилаЗаполненияПолейДокументов
		|ГДЕ
		|	ПравилаЗаполненияПолейДокументов.Документ = &Документ
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 
		|ВЫБРАТЬ
		|	ПравилаЗаполненияПолейДокументов.Организация,
		|	ПравилаЗаполненияПолейДокументов.Контрагент,
		|	ПравилаЗаполненияПолейДокументов.ИмяПоля,
		|	ПравилаЗаполненияПолейДокументов.СтроковоеЗначение,
		|	ВходящийДокументРеквизитыСименами.ЗначениеИзСправочника,
		| &Документ 
		|ИЗ
		|	ПравилаЗаполненияПолейДокументов КАК ПравилаЗаполненияПолейДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВходящийДокументРеквизитыСименами КАК ВходящийДокументРеквизитыСименами
		|		ПО ПравилаЗаполненияПолейДокументов.ИмяПоля = ВходящийДокументРеквизитыСименами.ИмяПоля
		|		И ПравилаЗаполненияПолейДокументов.ЗначениеИзСправочника <> ВходящийДокументРеквизитыСименами.ЗначениеИзСправочника
		|";
	Запрос.УстановитьПараметр("Документ", Документ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Записать();
	КонецЦикла
	
КонецПроцедуры	

// Возвращает Истина, если Входящий документ получен по СВД.
Функция ДокументПолученПоСВД(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);
	Возврат ЗначениеЗаполнено(ВходящееСообщениеСВД);
	
КонецФункции

// Получает количество сессий отправка по СВД для указанного документа.
Функция КоличествоСессийСВДДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходящееСообщениеСВД.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
	|ГДЕ
	|	ИсходящееСообщениеСВД.Документ = &Документ
	|	И ИсходящееСообщениеСВД.ВидСообщения В (&ВидСообщения)";
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	СписокВидыСообщенийСВД = Новый СписокЗначений;
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
	Запрос.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Количество();
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Получает идентификатор последней сессии отправки документа по СВД указанному получателю.
Функция ПолучитьИдентификаторПоследнейСессииСВД(Документ, Получатель) Экспорт
	
	// Получение идентификатора хронологически последней сессии обмена по СВД
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.ИдентификаторСообщения Как Идентификатор
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Документ = &Документ
		|	И ИсходящееСообщениеСВД.Получатель = &Получатель
		|	И ИсходящееСообщениеСВД.ВидСообщения В (&ВидСообщения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходящееСообщениеСВД.Дата УБЫВ";
		
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Документ", Документ);
	СписокВидыСообщенийСВД = Новый СписокЗначений;
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
	Запрос.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Данному контрагенту данный документ никогда не отправлялся
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИдентификаторСессии = Выборка.Идентификатор;
	Возврат ИдентификаторСессии;
	
КонецФункции

// Получает идентификатор последней сессии отправки документа по СВД независимо от получателя.
Функция ПолучитьИдентификаторПоследнейСессииСВДНезависимоОтПолучателя(Документ) Экспорт
	
	// Получение идентификатора хронологически последней сессии обмена по СВД
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.ИдентификаторСообщения
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Документ = &Документ
		|	И ИсходящееСообщениеСВД.ВидСообщения В (&ВидСообщения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходящееСообщениеСВД.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	СписокВидыСообщенийСВД = Новый СписокЗначений;
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
	Запрос.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Данному контрагенту данный документ никогда не отправлялся
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИдентификаторСессии = Выборка.ИдентификаторСообщения;
	Возврат ИдентификаторСессии;
	
КонецФункции

// Получает историю статусов для указанного документа, получатели и сессии
Функция ПолучитьИсториюСтатусовСессииСВД(Документ, ПолучательДокумента, ИдентификаторСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияСВД.Ссылка КАК Сообщение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СообщенияСВД.Ссылка) = ТИП(Документ.ИсходящееСообщениеСВД)
		|			ТОГДА ВЫБОР
		|					КОГДА СообщенияСВД.Ссылка.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА СообщенияСВД.Ссылка.ДатаОтправки
		|					ИНАЧЕ СообщенияСВД.Дата
		|				КОНЕЦ
		|		ИНАЧЕ СообщенияСВД.Дата
		|	КОНЕЦ КАК ДатаУстановки,
		|	ВЫБОР
		|		КОГДА (СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
		|				ИЛИ СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ДокументОтвет))
		|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку)
		|		КОГДА (СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
		|				ИЛИ СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ДокументОтвет))
		|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Отправлен)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОДоставке)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОРегистрации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОбОшибке)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Ошибка)
		|	КОНЕЦ КАК Состояние,
		|	СообщенияСВД.ТекстОшибки КАК ТекстОшибки
		|ИЗ
		|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
		|ГДЕ
		|	СообщенияСВД.Адресат = &Адресат
		|	И СообщенияСВД.Документ = &Документ
		|	И СообщенияСВД.ИдентификаторСессии = &ИдентификаторСессии
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУстановки";
		
	Запрос.УстановитьПараметр("Адресат", ПолучательДокумента);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ИдентификаторСессии", ИдентификаторСессии);
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

// Получает список сессий с датами их начала.
Функция ПолучитьИдентификаторыСессийСВД(Документ, Получатель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияСВД.ИдентификаторСообщения КАК ИдентификаторСессии,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СообщенияСВД.Ссылка) = ТИП(Документ.ИсходящееСообщениеСВД)
		|			ТОГДА ВЫБОР
		|					КОГДА СообщенияСВД.Ссылка.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА СообщенияСВД.Ссылка.ДатаОтправки
		|					ИНАЧЕ СообщенияСВД.Дата
		|				КОНЕЦ
		|		ИНАЧЕ СообщенияСВД.Дата
		|	КОНЕЦ КАК ДатаУстановки
		|ИЗ
		|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
		|ГДЕ
		|	СообщенияСВД.ВидСообщения В (&ВидСообщения)
		|	И СообщенияСВД.Адресат = &Получатель
		|	И СообщенияСВД.Ссылка.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУстановки УБЫВ";
	
	СписокВидыСообщенийСВД = Новый СписокЗначений;
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
	Запрос.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Документ", Документ);
	ТаблицаСессий = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСессий;
	
КонецФункции

// Заполнить HTML для показа в форме сообщения.
Процедура ЗаполнитьHTMLПоXDTO(ТекстHTML, ОбъектXDTO) Экспорт
	
	ТекстHTML = "<html> <body topmargin=0 leftmargin=0 scroll=auto>
		|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
		|<title></title>
		|<style type=""text/css"">
		| .TextStyle {font-family:MS Sans Serif;font-size:12px;}
		|</style>";
		
	// заголовок
	ТекстHTML = ТекстHTML + "<table width:auto;class = ""TextStyle"" cellpadding=""2"">";
	
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Отправитель'; en = 'Sender'"), ОбъектXDTO.from_organization);
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Идентификатор сообщения'; en = 'Message id'"), ОбъектXDTO.msg_id);
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Дата формирования сообщения'; en = 'Message generation date'"), 
	РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(ОбъектXDTO.time));
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Получатель'; en = 'Recipient'"), ОбъектXDTO.to_organization);
	
	Если ОбъектXDTO.Document <> Неопределено Тогда
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Наименование документа'; en = 'Description of the document'"), ОбъектXDTO.Document.title);
		
		Если ОбъектXDTO.Document.type = 0 Тогда
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Тип документа'; en = 'Document class'"), НСтр("ru='Исходящий документ'; en = 'Outgoing document'"));
		ИначеЕсли ОбъектXDTO.Document.type = 1 Тогда
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Тип документа'; en = 'Document class'"), НСтр("ru='Входящий документ'; en = 'Incoming document'"));
		ИначеЕсли ОбъектXDTO.Document.type = 2 Тогда
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Тип документа'; en = 'Document class'"), НСтр("ru='Внутренний документ'; en = 'Internal document'"));
		КонецЕсли;
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Вид документа'; en = 'Document type'"), ОбъектXDTO.Document.kind);
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Идентификатор документа'; en = 'Document id'"), ОбъектXDTO.Document.idnumber);
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Содержание'; en = 'Content'"), ОбъектXDTO.Document.annotation);
		
		Для Каждого Адресат Из ОбъектXDTO.Document.Addressee Цикл
			Если Адресат.Organization <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Адресат'; en = 'Addressee'"), Адресат.Organization.fullname);
			КонецЕсли;
			Для Каждого OfficialPerson Из Адресат.Organization.OfficialPerson Цикл
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Получатель'; en = 'Recipient'"), OfficialPerson.Name.__content);
			КонецЦикла;
		КонецЦикла;	
		
		Для Каждого Запись Из ОбъектXDTO.Document.Author Цикл
			Если Запись.PrivatePersonWithSign <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Автор'; en = 'Author'"), Запись.PrivatePersonWithSign.Name.__content);
			КонецЕсли;
		КонецЦикла;	
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Гриф доступа'; en = 'Security level'"), ОбъектXDTO.Document.Confident.__content);
		
		СтрокаФайлов = "";
		Для Каждого Запись Из ОбъектXDTO.Document.DocTransfer Цикл
			СтрокаФайлов = СтрокаФайлов + """" + Запись.description + """" + " ";
		КонецЦикла;	
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Присоединенные файлы'; en = 'Attached files'"), СтрокаФайлов);
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Рег. номер'; en = 'Reg. number'"), ОбъектXDTO.Document.RegNumber.__content);
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Дата регистрации'; en = 'Registration date'"), Строка(ОбъектXDTO.Document.RegNumber.regdate));
		
		Для Каждого Запись Из ОбъектXDTO.Document.Validator Цикл
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Резолюция'; en = 'Resolution'"), Запись.attestation);
			Если Запись.PrivatePersonWithSign <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Утвердивший'; en = 'Approved'"), Запись.PrivatePersonWithSign.Name.__content);
			КонецЕсли;
		КонецЦикла;	
		
		Если ОбъектXDTO.Document.Writer <> Неопределено Тогда
			Если ОбъектXDTO.Document.Writer.PrivatePerson <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Составитель документа'; en = 'Compiled document'"),
					ОбъектXDTO.Document.Writer.PrivatePerson.Name.__content);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Acknowledgement <> Неопределено Тогда
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Идентификатор сессии'; en = 'Session id'"), ОбъектXDTO.Acknowledgement.msg_id);
		
		Для Каждого Подтверждение Из ОбъектXDTO.Acknowledgement.AckResult Цикл
			Если ЗначениеЗаполнено(Подтверждение.__content) Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Описание ошибки'; en = 'Error details'"), Подтверждение.__content);
			КонецЕсли;	
			
			Если Подтверждение.errorcode <> 0 Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Код ошибки'; en = 'Error code'"), Подтверждение.errorcode);
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Expansion <> Неопределено Тогда
		
		Для Каждого ОбъектXDTOДопИнфо Из ОбъектXDTO.Expansion.AnyData.fields Цикл
			// Выводить инфу об ЭП
		КонецЦикла;	
		
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</table>";
	ТекстHTML = ТекстHTML + "</body></html>";
	
КонецПроцедуры	

Процедура ДобавитьСтрокуHTML(ТекстHTML, ИмяПоля, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ТекстHTML = ТекстHTML + "<tr><td valign=""top""><b>" + ИмяПоля + ": </b></td><td valign=""top"">"
			+ Строка(Значение) + "</td></tr>";	
	КонецЕсли;
	
КонецПроцедуры	

// Получить наименование контрагента в СВД.
Функция ПолучитьНаименованиеКонтрагентаВСВДКлиентСервер(Контрагент, Транспорт) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Адресат = Контрагент;
	МенеджерЗаписи.Транспорт = Транспорт;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяАдресата) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Для контрагента ""%1"" не указано представление в СВД.'; en = 'For counterparty ""%1"" is not indicated presentation of EDES.'"),
		Строка(Контрагент));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ИмяАдресата;
	
КонецФункции	

// Получить наименование контрагента в СВД.
Функция ПолучитьНаименованиеОрганизацииВСВДКлиентСервер(ОрганизацияДокумента, Транспорт) Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Если ИспользоватьУчетПоОрганизациям Тогда
		Организация = ОрганизацияДокумента;
	КонецЕсли;
	
	Если Транспорт.ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.ОператорЭДО1СТакском") Тогда
		Возврат ОрганизацияДокумента;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Адресат = Организация;
	МенеджерЗаписи.Транспорт = Транспорт;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяАдресата) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Для организации ""%1"" не указано представление в СВД.'; en = 'For ""%1"" company EDES presentation is not specified.'"),
		Строка(Организация));
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ИмяАдресата;
	
КонецФункции	

// Возвращает выборку исходящих сообщений СВД предназначенных для отправки по указанному транспорту.
// 
// Параметры:
// Транспорт - СправочникСсылка.ТранспортыСВД
// 
Функция ПолучитьИсходящиеСообщенияДляОтправкиПоТранспорту(Транспорт) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящееСообщениеСВД.Ссылка,
		|	ИсходящееСообщениеСВД.Дата КАК Дата
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Отправлено = ЛОЖЬ
		|	И ИсходящееСообщениеСВД.ПометкаУдаления = ЛОЖЬ
		|	И ИсходящееСообщениеСВД.Транспорт = &Транспорт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("Транспорт", Транспорт);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Определяет возможность работы с ЭДО для текущего пользователя.
// 
Функция ДоступнаРаботаСЭДО() Экспорт
	
	Роль = РольДоступна("РаботаСЭДО") ИЛИ РольДоступна("ПолныеПрава");
	Результат = Роль И ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	
	Возврат Результат;
	
КонецФункции

// Определяет возможность регистрации исходящих документов в ЭДО для текущего пользователя.
// 
Функция ДоступнаРегистрацияВСВД() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСВД") 
		И (РольДоступна("РегистрацияИсходящихДокументов") Или РольДоступна("ПолныеПрава"));
	
КонецФункции

Функция ПолучитьHTMLПоXDTO(Объект, ФорматСообщения) Экспорт
	
	ТекстHTML ="";
	Если Объект.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ53898ВложенныеФайлы
		Или Объект.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка);
		Если МассивФайлов.Количество() <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
		ФайлСсылка = МассивФайлов[0];
		ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
		ТипХраненияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяВерсия, "ТипХраненияФайла");
		
		ИмяФайлаСПутем = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсия);
		
		ПространствоИмен = ПолучитьПространствоИмен(Объект.ФорматСообщения);
		
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Header");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаСПутем);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		ЧтениеXML.Закрыть();
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
			Попытка
				УдалитьФайлы(ИмяФайлаСПутем);
			Исключение
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		// Отображаем ОбъектXDTO в HTML
		ЗаполнитьHTMLПоXDTO(ТекстHTML, ОбъектXDTO);
		
	ИначеЕсли Объект.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ538982013ВложенныеФайлы Тогда
		
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка);
		ИмяФайлаСПутем = "";ИмяКорневогоЭлемента="";
		ТаблицаВложенний = СоздатьТаблицуВложений(МассивФайлов, ИмяФайлаСПутем, ИмяКорневогоЭлемента);
		Если Не ЗначениеЗаполнено(ИмяФайлаСПутем) Тогда
			Возврат "";
		КонецЕсли;
		ПространствоИмен = ПолучитьПространствоИмен(Объект.ФорматСообщения);
		
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, ИмяКорневогоЭлемента);
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаСПутем);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		ЧтениеXML.Закрыть();
		
		Попытка
			УдалитьФайлы(ИмяФайлаСПутем);
		Исключение
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Отображаем ОбъектXDTO в HTML
		ЗаполнитьHTMLПоXDTO2013(ТекстHTML, ОбъектXDTO);
		
	Иначе
		
		РаботаССВДПереопределяемый.ОтобразитьСообщениеСВДВHTML(ТекстHTML, Объект.Ссылка);
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции	

// Фиксирует факт отправки документа контрагенту
// 
// Параметры:
//	Документ - СправочникСсылка.ИсходящиеДокументы - Отправленный документ.
//	Получатель - СправочникСсылка.Контрагенты - Контрагент, которому был отправлен документ.
// 
Процедура ЗафиксироватьФактОтправкиДокумента(Документ, Получатель) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) 
		Или Не ТипЗнч(Документ) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(Документ);
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	СтрокиДляОбработки = ДокументОбъект.Получатели.НайтиСтроки(
		Новый Структура("Получатель, СпособОтправки", Получатель, Справочники.СпособыДоставки.СВД));
	
	Для Каждого ОбрабатываемаяСтрока Из СтрокиДляОбработки Цикл
		ОбрабатываемаяСтрока.Отправлен = Истина;
		ОбрабатываемаяСтрока.ДатаОтправки = ТекущаяДатаСеанса();
	КонецЦикла;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ДокументОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// <ГОСТ_Р_53898_2013: Процедуры и функции поддерживающие ГОСТ_Р_53898_2013. 
// Взаимодействие систем управления документами.>
//  
////////////////////////////////////////////////////////////////////////////////
#Область ГОСТ_Р_53898_2013

// Создает файл в ИБ вместе с версией. 
//
// Параметры:
// ВладелецФайлаСсылка      - ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у созданного файла.
// СтрокаТЗФайлов           - Строка таблицы значений или массива - Строка таблицы значений или массива с данными 
// о создаваемом файле.
// 
// Возвращаемое значение:
// СправочникСсылка.Файлы   - созданный файл.
//
Функция ДобавитьФайл2013(ВладелецФайлаСсылка, СтрокаТЗФайлов) Экспорт 
	
	ДатаСоздания = УниверсальноеВремя(ТекущаяДатаСеанса());
	// Создадим карточку Файла в БД
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	Если не ЗначениеЗаполнено(СтрокаТЗФайлов.АдресВременногоХранилищаФайла) 
		и ЗначениеЗаполнено(СтрокаТЗФайлов.ДвоичныеДанныеФайла) Тогда
		СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(СтрокаТЗФайлов.ДвоичныеДанныеФайла);
	Иначе
		СведенияОФайле.АдресВременногоХранилищаФайла = СтрокаТЗФайлов.АдресВременногоХранилищаФайла;
	КонецЕсли;
	СведенияОФайле.АдресВременногоХранилищаТекста = "";
	СведенияОФайле.ИмяБезРасширения = СтрокаТЗФайлов.Имя;
	СведенияОФайле.РасширениеБезТочки = СтрокаТЗФайлов.Расширение;
	СведенияОФайле.ВремяИзменения = ДатаСоздания;
	СведенияОФайле.ВремяИзмененияУниверсальное = ДатаСоздания;
	
	ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ВладелецФайлаСсылка, СведенияОФайле);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
		И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(СтрокаТЗФайлов.Расширение) Тогда 
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(ФайлСсылка, ВладелецФайлаСсылка);
	КонецЕсли;
	
	Возврат ФайлСсылка;	
	
КонецФункции

// Возвращает данные файла для открытия.
//
// Параметры:
//  СообщениеСсылка  -  СправочникСсылка.СерверныеСообщенияСВД, 
//  ДокументСсылка.ВходящееСообщениеСВД, ДокументСсылка.ИсходящееСообщениеСВД   -  Ссылка 
//  на объект данные файла паспорта на которого нужно вернуть.
// 
// Возвращаемое значение:
//  ДанныеФайла -  ДанныеФайла
//
Функция ДанныеФайлаДляОткрытия(СообщениеСсылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(СообщениеСсылка);
	Если МассивФайлов.Количество() = 1 Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(МассивФайлов[0]);
		Возврат ДанныеФайла;	
	Иначе
		Для Каждого Файл Из МассивФайлов Цикл
			
			Если Нрег(Файл.ТекущаяВерсияРасширение) = "xml" 
				и (Нрег(Файл.Наименование) = "docinfo" или Нрег(Файл.Наименование) = "report") Тогда
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл);
				Возврат ДанныеФайла;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

// Заполняет HTML для показа в форме сообщения.
//
// Параметры:
//  ТекстHTML   - Строка        - Возвращаемый, заполненный ТекстHTML на основе ОбъектXDTO 
//  ОбъектXDTO  -  ОбъектXDTO   - ОбъектXDTO, на основе которого заполняется ТекстHTML.
//
Процедура ЗаполнитьHTMLПоXDTO2013(ТекстHTML, ОбъектXDTO) Экспорт
	
	ТекстHTML = "<html> <body topmargin=0 leftmargin=0 scroll=auto>
		|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
		|<title></title>
		|<style type=""text/css"">
		| .TextStyle {font-family:MS Sans Serif;font-size:12px;}
		|</style>";
	
	// заголовок
	ТекстHTML = ТекстHTML + "<table width:auto;class = ""TextStyle"" cellpadding=""2"">";
	
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Отправитель'; en = 'Sender'"), ОбъектXDTO.Header.Sender.Contact.Organization.ShortName);
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Идентификатор сообщения'; en = 'Message identifier'"), ОбъектXDTO.Header.ReturnID);
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Дата формирования сообщения'; en = 'Message generation date'"), 
	РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(ОбъектXDTO.Header.Time));
	ОрганизацияНаименование= ОбъектXDTO.Header.Recipient.Contact[0].Organization.ShortName;
	ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Получатель'; en = 'Recipient'"), ОрганизацияНаименование);
	
	Для Каждого ОбъектXDTODocument Из ОбъектXDTO.DocumentList.Document Цикл
		
		Для Каждого ОбъектXDTOAdditionalField из ОбъектXDTODocument.AdditionalField Цикл
			Если ОбъектXDTOAdditionalField.Name = "ЗаголовокДокумента" и ОбъектXDTOAdditionalField.Type = "Text" Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Наименование документа'; en = 'Document description'"),
				ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAdditionalField, "__content"));
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Вид документа'; en = 'Document type'"), 
			ПолучитьЗначениеЭлементаXDTO(ОбъектXDTODocument, "Group.__content"));
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Идентификатор документа'; en = 'Document identifier'"), ОбъектXDTODocument.UID);
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Содержание'; en = 'Content'"), 
		ПолучитьЗначениеЭлементаXDTO(ОбъектXDTODocument, "Annotation"));
		
		Для Каждого ОбъектXDTOAddressee из ОбъектXDTODocument.Addressee Цикл 
			
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Получатель'; en = 'Recipient'"), ОбъектXDTOAddressee.Contact.Organization.ShortName);
			
			Адресат = "";
			Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAddressee, "Contact.OfficialPerson.FIO", Адресат) <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='ФИО'; en = 'Full name'"), Адресат);
			ИначеЕсли ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "PrivatePerson.FIO", Адресат) <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='ФИО'; en = 'Full name'"), Адресат);
			КонецЕсли;	 
			
			Подразделение = "";
			Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAddressee, "Contact.Department.Name", Подразделение) <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Подразделение'; en = 'Department'"), Подразделение);
			Иначе
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Подразделение'; en = 'Department'"), Подразделение);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Для Каждого ОбъектXDTOAuthor из ОбъектXDTODocument.Author Цикл
			Подписал = "";
			Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAuthor, "Contact.OfficialPerson.FIO", Подписал) <> Неопределено Тогда 
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Подписал'; en = 'Signed by'"), Подписал);
			ИначеЕсли ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAuthor, "PrivatePerson.FIO", Подписал) <> Неопределено Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Подписал'; en = 'Signed by'"), Подписал);
			КонецЕсли;	 
		КонецЦикла;	
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Гриф доступа'; en = 'Security level'"), 
			ПолучитьЗначениеЭлементаXDTO(ОбъектXDTODocument, "Access.__content"));
		
		СтрокаФайлов = "";
		Для Каждого Запись Из ОбъектXDTODocument.File Цикл
			СтрокаФайлов = СтрокаФайлов + """" + Запись.description + """" + " ";
		КонецЦикла;	
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Присоединенные файлы'; en = 'Attached files'"), СтрокаФайлов);
		
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Рег. номер'; en = 'Reg. number'"), ОбъектXDTODocument.RegistrationInfo.Number);
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Дата регистрации'; en = 'Registration date'"), Строка(ОбъектXDTODocument.RegistrationInfo.Date));
		
		Для Каждого ОбъектXDTOVisa Из ОбъектXDTODocument.Visa Цикл 
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Резолюция'; en = 'Resolution'"), ОбъектXDTOVisa.VisaInfo);
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Утвердивший'; en = 'Confirmed by'"),
				ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOVisa, "Contact.OfficialPerson.FIO"));
		КонецЦикла;	
		
		Для Каждого ОбъектXDTOWriter Из ОбъектXDTODocument.Writer Цикл 
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Составитель документа'; en = 'Compiled document'"), 
				ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOWriter, "Contact.OfficialPerson.FIO"));
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТекстHTML = ТекстHTML + "</table>";
	ТекстHTML = ТекстHTML + "</body></html>";
	
КонецПроцедуры	

// Создает таблицу вложений файлов на основе массива.
//
// Параметры:
//  МассивФайлов                        - Массив - массив файлов полученный ИБ, e-mail, web-сервиса.
//  ИмяФайлаСПутемПаспортаВозвращаемое  - Строка - путь к файлу паспорта сообщения СВД найденного в массиве.
//  ИмяКорневогоЭлементаВозвращаемое    - Строка - имя корневого элемента паспорта сообщения СВД.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - заполненная таблица вложенний на основе массива.
//
Функция СоздатьТаблицуВложений(МассивФайлов, ИмяФайлаСПутемПаспортаВозвращаемое="", ИмяКорневогоЭлементаВозвращаемое="") Экспорт 
	
	ТаблицаВложенний = Новый ТаблицаЗначений;
	ТаблицаВложенний.Колонки.Добавить("ИмяФайла");
	ТаблицаВложенний.Колонки.Добавить("ИмяФайлаНрег");
	ТаблицаВложенний.Колонки.Добавить("Имя");
	ТаблицаВложенний.Колонки.Добавить("Расширение");
	ТаблицаВложенний.Колонки.Добавить("ДвоичныеДанныеФайла");
	ТаблицаВложенний.Колонки.Добавить("АдресВременногоХранилищаФайла"); // заполняется на серверной стороне
	ТаблицаВложенний.Колонки.Добавить("ResourceID"); // заполняется позже
	ИмяВременногоОсновногоФайла = "";
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
			ИмяФайла = Файл.Наименование+"."+Файл.ТекущаяВерсияРасширение;
			СтрокаТаблицыИмя = Файл.Наименование;
			СтрокаТаблицыРасширение = Файл.ТекущаяВерсияРасширение;
			ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл);
			СтрокаТаблицыДвоичныеДанныеФайла = ДвоичныеДанныеФайла;
			СтрокаТаблицыАдресВременногоХранилищаФайла = "";
		Иначе // вложения почтовые
			ИмяФайла = Файл.ИмяФайла;
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ИмяФайла);
			СтрокаТаблицыИмя = ИмяФайлаИнфо.Имя;
			СтрокаТаблицыРасширение = ИмяФайлаИнфо.Расширение;
			ДвоичныеДанныеФайла= Файл.Данные;
			СтрокаТаблицыАдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
			СтрокаТаблицыДвоичныеДанныеФайла=ДвоичныеДанныеФайла;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаВложенний.Добавить();
		СтрокаТаблицы.ИмяФайла = ИмяФайла;
		СтрокаТаблицы.ИмяФайлаНрег = Нрег(ИмяФайла);
		СтрокаТаблицы.Имя = СтрокаТаблицыИмя;
		СтрокаТаблицы.Расширение =СтрокаТаблицыРасширение;
		СтрокаТаблицы.ДвоичныеДанныеФайла =СтрокаТаблицыДвоичныеДанныеФайла;
		СтрокаТаблицы.АдресВременногоХранилищаФайла =СтрокаТаблицыАдресВременногоХранилищаФайла;
		Если СтрокаТаблицы.ИмяФайлаНрег = "docinfo.xml" или СтрокаТаблицы.ИмяФайлаНрег = "report.xml" Тогда
			ИмяКорневогоЭлементаВозвращаемое = ?(СтрокаТаблицы.ИмяФайлаНрег = "docinfo.xml", "DocInfo", "Report");
			ИмяФайлаСПутемПаспортаВозвращаемое = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутемПаспортаВозвращаемое);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяКорневогоЭлементаВозвращаемое = "" и ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
		ИмяКорневогоЭлементаВозвращаемое = "Header";
		ИмяФайлаСПутемПаспортаВозвращаемое = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутемПаспортаВозвращаемое);
	КонецЕсли;
	
	Возврат ТаблицаВложенний;
	
КонецФункции	

#Область СозданиеИсходящегоXDTOГОСТ_Р_53898_2013

// Создать исходящий XDTO на основе исходящего документа
//
// Параметры:
//  Документ                    - СправочникСсылка.ИсходящиеДокументы           - Исходящий документ
//  Контрагент                  - СправочникСсылка.Контрагенты                  - Контрагент получатель 
//  Транспорт                   - СправочникСсылка.ТранспортыСВД                - Транспорт отправки СВД
//  Правило                     - СправочникСсылка.ПравилаОтправкиСообщенийСВД  - правило отправки сообщений СВД 
//  ВозвращаемыйВидСообщенияСВД - Перечисление.ВидыСообщенийСВД                 - Вид сообщения СВД
//  ТаблицаФайловДляОтправки    - ТаблицаЗначений                               - таблица с информацией о приложенных файлах  
// 
// Возвращаемое значение:
//  ОбъектXDTO -  зона  DocInfo
//
Функция СоздатьXDTOИзИсходящего2013(Документ, Контрагент, Транспорт, Правило, ВозвращаемыйВидСообщенияСВД,
		ТаблицаФайловДляОтправки = Неопределено) Экспорт
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	DocInfo = СоздатьОбъект("DocInfo", ПространствоИмен);
	
	Контакт = Неопределено;
	Для Каждого ПолучательСтрокаТаблЧасти Из Документ.Получатели Цикл
		Если ПолучательСтрокаТаблЧасти.Получатель = Контрагент Тогда 
			Контакт = ПолучательСтрокаТаблЧасти.Адресат;
			Прервать; // В случае если в исходящем документе получателей несколько и получатель повторяется несколько 
			//раз с разными адресатами, то формируется один пакет на первого адресата. 
		КонецЕсли;
	КонецЦикла;
	ИдентификаторСообщения = ИдВСтроку(Новый УникальныйИдентификатор);
	// Зона заголовка
	DocInfo.Header = СоздатьXDTOЗаголовок2013(Документ.Организация, Контрагент, Транспорт, ПространствоИмен, 
		ВозвращаемыйВидСообщенияСВД, ИдентификаторСообщения, Контакт);
	
	DocInfo.DocumentList = СоздатьОбъект("DocumentList", ПространствоИмен);
	СоздатьXDTOДокумент2013(DocInfo.DocumentList, Документ, ПространствоИмен, ТаблицаФайловДляОтправки, Транспорт,
		ВозвращаемыйВидСообщенияСВД);
	
	// ResourceList (2);1;Информация о всех пересылаемых в сообщении файлах
	ЗаполнитьResourceInfoИзТаблицыФайловДляОтправки2013(DocInfo.Header.ResourceList, ТаблицаФайловДляОтправки, Правило,
		ПространствоИмен, ФорматСообщения);
	
	// Подписка;Subscriptions;Необязательная зона;Содержит информацию о подписке на уведомления и доклады о работе
	// с посылаемым документом.
	DocInfoSubscriptions = СоздатьОбъект("Subscriptions", ПространствоИмен);
	DocInfo.Subscriptions = СоздатьXDTOПодписки2013(DocInfoSubscriptions, ПространствоИмен);
	
	Возврат DocInfo;
	
КонецФункции	

// Создает XDTOЗаголовок2013
//
// Параметры:
//  Организация             - СправочникСсылка.Организации      - Организации отправитель
//  Контрагент              - СправочникСсылка.Контрагенты      - Контрагент получатель 
//  Транспорт               - СправочникСсылка.ТранспортыСВД    - Транспорт отправки СВД
//  ПространствоИмен        - Строка                            - Пространство имен для операций XDTO 
//  ВидСообщенияСВД         - Перечисление.ВидыСообщенийСВД     - Вид сообщения СВД
//  ИдентификаторСообщения  - Строка                            - Идентификатор отправляемого сообщения
//  Контакт                  - СправочникСсылка.КонтактныеЛица   - Контакт контрагента получателя
// 
// Возвращаемое значение:
//   ОбъектXDTO -    ОбъектXDTO MessageHeader (Заголовок)
//
Функция СоздатьXDTOЗаголовок2013(Организация, Контрагент, Транспорт, ПространствоИмен, ВидСообщенияСВД,
		ИдентификаторСообщения, Контакт = Неопределено) Экспорт 
	
	ОбъектXDTOЗаголовок = СоздатьОбъект("MessageHeader", ПространствоИмен);
	
	// Уникальный служебный идентификационный номер сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	ОбъектXDTOЗаголовок.MessageID = ИдВСтроку(ИДПакета);
	ОбъектXDTOЗаголовок.version = "1.0"; // Версия стандарта 
	ОбъектXDTOЗаголовок.TimeZone = СмещениеСтандартногоВремени(ЧасовойПоясСеанса() )/ (60*60);
	ОбъектXDTOЗаголовок.time = УниверсальноеВремя(ТекущаяДатаСеанса()); // Дата и время формирования сообщения в UTC
	ИмяФайлаПаспорта = "Report.xml";
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент 
		или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет 
		Тогда
		ОбъектXDTOЗаголовок.MessageType = "MainDoc"; // «MainDoc» - основной документ
		ИмяФайлаПаспорта = "DocInfo.xml";
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
		ОбъектXDTOЗаголовок.MessageType = "Reception"; // «Reception»- уведомление о приеме сообщения
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
		ОбъектXDTOЗаголовок.MessageType = "Failure"; // «Failure» - уведомление об отказе в регистрации
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда 
		ОбъектXDTOЗаголовок.MessageType = "Report"; // «Report»-аккумулированный доклад о работе с полученным документом
	КонецЕсли;
	
	// ReturnID;1;String;Код возврата для уведомлений и докладов, на которые подписывается это сообщение.
	// Для сообщений первого типа формируется системой управления документами автоматически для последующей 
	// идентификации сообщения при обработке полученных сообщений второго типа (уведомлений и докладов).
	// Для сообщений второго типа копируется из исходного сообщения первого типа, подписанного на данное сообщение
	// В случае невозможности получения значения присваивается значение «unknown».
	ОбъектXDTOЗаголовок.ReturnID =ИдентификаторСообщения;
	
	// ResourceID Num;Идентификатор текущего ресурса (файла) ;Ссылка на соответствующий элемент Resource 
	ОбъектXDTOЗаголовок.ResourceID = "0";
	
	ОбъектXDTOЗаголовок.Sender = СоздатьXDTOПоОтправителю2013(Организация, Транспорт, ПространствоИмен);
	
	ОбъектXDTOЗаголовок.Recipient = СоздатьXDTOПоАдресату2013(Контрагент, Транспорт, ПространствоИмен, Контакт);
	
	ОбъектXDTO_Файлы = СоздатьОбъект("ResourceList", ПространствоИмен);
	ОбъектXDTOЗаголовок.ResourceList = ОбъектXDTO_Файлы;
	
	ОбъектXDTO_Файл = СоздатьОбъект("ResourceInfo", ПространствоИмен);
	ОбъектXDTO_Файлы.Resource.Добавить(ОбъектXDTO_Файл);
	ОбъектXDTO_Файл.UID = "0";
	
	ОбъектXDTO_Файл.UniqueName = ИмяФайлаПаспорта;
	
	Возврат ОбъектXDTOЗаголовок;
	
КонецФункции

// Получает представление населенного пункта
//
// Параметры:
//  ОбъектАдреса - ОбъектXDTO - Объект ОбъектXDTO адрес
// 
// Возвращаемое значение:
//  Строка - представление населенного пункта адреса в виде строки.
//
Функция ПредставлениеНаселенногоПункта(ОбъектАдреса) 
	
	АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если АдресРФ.СвРайМО = Неопределено Тогда
		Район = "";
	ИначеЕсли АдресРФ.СвРайМО.Район <> Неопределено Тогда
		Район = АдресРФ.СвРайМО.Район;
	ИначеЕсли АдресРФ.СвРайМО.СвМО <> Неопределено Тогда
		Районы = Новый Массив(АдресРФ.СвРайМО.СвМО.МунОбр2, АдресРФ.СвРайМО.СвМО.МунОбр1);
		Район = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Районы);
	Иначе
		Район = "";;
	КонецЕсли;
	
	Адрес = Новый Массив;
	Адрес.Добавить(АдресРФ.Округ);
	Адрес.Добавить(Район);
	Адрес.Добавить(АдресРФ.Город);
	Адрес.Добавить(АдресРФ.ВнутригРайон);
	Адрес.Добавить(АдресРФ.НаселПункт);
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
КонецФункции

// Заполнить зону Address на основе контактной информации Объекта.
//
// Параметры:
//  ОбъектXDTOКонтактAddress                -   ОбъектXDTO   -   зона Address
//  ОбъектСТаблЧастьюКонтактнаяИнформация   - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.ФизическиеЛица   
//                                                           - Справочник ссылка контактную информацию которого передаем
//  ПространствоИмен                        - Строка         -  Пространство имен для операций XDTO 
// 
Процедура ЗаполнитьXDTOAddress2013(ОбъектXDTOКонтактAddress, ОбъектСТаблЧастьюКонтактнаяИнформация, ПространствоИмен)
	
	Для Каждого Строка Из ОбъектСТаблЧастьюКонтактнаяИнформация.КонтактнаяИнформация Цикл
		
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			// Пытаемся заполнить из параметров.
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Строка.ЗначенияПолей) Тогда 
				XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Строка.ЗначенияПолей);
			Иначе
				XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Строка.ЗначенияПолей,
					Строка.Представление );
			КонецЕсли;
			
			ОбъектXDTOАдрес = СоздатьОбъект("Address", ПространствоИмен);
			
			// Индекс просто ставим
			ОбъектXDTOАдрес.ZipCode = Формат(УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(XDTOКонтактная), "ЧГ=");
			
			ОбъектXDTOАдрес.Region = СоздатьОбъект("Region", ПространствоИмен);
			ОбъектXDTOАдрес.Region.__content = XDTOКонтактная.Состав.Состав.СубъектРФ;
			ОбъектXDTOАдрес.Settlement = ПредставлениеНаселенногоПункта(XDTOКонтактная);
			ОбъектXDTOАдрес.Text = Сред(Строка.Представление, СтрНайти(Строка.Представление, ОбъектXDTOАдрес.Settlement )
				+СтрДлина(ОбъектXDTOАдрес.Settlement )+2);
			
			ОбъектXDTOКонтактAddress.Добавить(ОбъектXDTOАдрес);
		КонецЕсли;
		
	КонецЦикла;	
    
КонецПроцедуры

// Заполнят зону Econtact  на основе контактной информации Объекта.
//
// Параметры:
//  Контакты    - ОбъектXDTO -  Econtact
//  Ссылка      - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.ФизическиеЛица   
//                                              - Справочник ссылка контактную информацию которого передаем.
//  ПространствоИмен -    Строка     -  Пространство имен для операций XDTO 
//
Процедура ЗаполнитьEmailИТелефоны2013(Контакты, Ссылка, ПространствоИмен)
	
	// Элемент Econtact
	// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
	// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	МассивТиповКонтактнойИнформации = Новый Массив;
	МассивТиповКонтактнойИнформации .Добавить( Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	МассивТиповКонтактнойИнформации .Добавить( Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКонтактнойИнформации .Добавить( Перечисления.ТипыКонтактнойИнформации.Факс);
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, 
		МассивТиповКонтактнойИнформации);
	
	Для Каждого Строка Из ТаблицаКонтактов Цикл
			
		// Содержит информацию о номерах (адресах) имеющихся средств электросвязи.
		Контакт = СоздатьОбъект("Econtact", ПространствоИмен);
		
		Контакт.__content = Строка.Представление;
		
		// type Тип номера (адреса) 
		// t –телефон
		// a – добавочный/местный телефон 
		// f – факс
		// e – адрес электронной почты (e-mail)
		// s – адрес 
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Контакт.type = "e";
		ИначеЕсли Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Контакт.type = "t";
		ИначеЕсли Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			Контакт.type = "f";
		КонецЕсли;	
		
		Контакты.Добавить(Контакт);
		
	КонецЦикла;	
	
КонецПроцедуры	

// Создает XDTO зона Link 
//
// Параметры:
//  ОбъектXDTODocumentList  -   ОбъектXDTO                          - возвращаемая заполненная зона ОбъектXDTODocumentList
//  ОбъектXDTOДокумент      -   ОбъектXDTO                          - ОбъектXDTOДокумент, в зону Link которой добавляется 
//																	  свзанный Объект XDTO ДокументLink
//  Документ                -   СправочникСсылка.ИсходящиеДокументы - Исходящий документ
//  ПространствоИмен        -   Строка                              - Пространство имен для операций XDTO 
//  Транспорт               -   СправочникСсылка.ТранспортыСВД      - Транспорт отправки СВД
//  ВидСообщенияСВД         -   Перечисление.ВидыСообщенийСВД       - Вид сообщения СВД
//
Процедура СоздатьXDTOLink2013(ОбъектXDTODocumentList, ОбъектXDTOДокумент, Документ, ПространствоИмен,
		Транспорт, ВидСообщенияСВД)
	
	ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(Документ.Ссылка, Справочники.ТипыСвязей.ОтправленВОтветНа);
	
	РегистрационныйНомерВОтветНа = "";	
	ДатаРегистрацииВОтветНа = '00010101';
	
	Если ЗначениеЗаполнено(ВОтветНа) Тогда
		
		// Проверим что ВОтветНа - из СВД
		ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(ВОтветНа);	
		Если ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
			
			РеквизитыВходящееСообщениеСВД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВОтветНа, "ИсходящийНомер, ИсходящаяДата, Код, Наименование");
			РегистрационныйНомерВОтветНа = РеквизитыВходящееСообщениеСВД.ИсходящийНомер;
			ДатаРегистрацииВОтветНа = РеквизитыВходящееСообщениеСВД.ИсходящаяДата;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
		ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет; // Документ-ответ
		
		// 14.29 Элемент Link Назначение: Содержит ссылку на связанный документ Содержание: Нет
		// Link (3);0-n;Ссылка на документ, связанный с текущим документом
		ОбъектXDTOДокументLink = СоздатьОбъект("Link", ПространствоИмен);
		ОбъектXDTOДокумент.Link.Добавить(ОбъектXDTOДокументLink);
		
		// DocumentID // DocumentID;0;String;
		//Ссылка на уникальный номер связанного документа в паспорте электронного сообщения;
		ОбъектXDTOДокументLink.DocumentID = РеквизитыВходящееСообщениеСВД.Код;
		// Ссылка на документ, существующий в передающей системе 
		// Description Description;0;String;Описание URL ссылки
		ОбъектXDTOДокументLink.Description = РеквизитыВходящееСообщениеСВД.Наименование;
		
		
		// 14.30 Элемент LinkType Назначение: Содержит информацию об отношении документа к основному документу 
		// Содержание (String): Наименование отношения (связки)
		// LinkType (4);1;Информация о типе связи двух документов
		ОбъектXDTOДокументLink.LinkType = СоздатьОбъект("LinkType", ПространствоИмен);
		// UID;0;String;UID отношения (связки) документа к основному документу;Индекс типа связки
		ОбъектXDTOДокументLink.LinkType.UID = Строка(Справочники.ТипыСвязей.ОтправленВОтветНа.УникальныйИдентификатор());
		ОбъектXDTOДокументLink.LinkType.__content = Строка(Справочники.ТипыСвязей.ОтправленВОтветНа);
		
		СоздатьXDTOДокумент2013(ОбъектXDTODocumentList, ВОтветНа, ПространствоИмен, Неопределено, Транспорт, Перечисления.ВидыСообщенийСВД.ДокументОтвет,
			ВходящееСообщениеСВД.ИдентификаторДокумента);
		
	КонецЕсли;
	
КонецПроцедуры // 

// Создает зону Link связи у входящего документа документов.
//
// Параметры:
//  XDTOДокументы       - ОбъектXDTO                            - зона DocumentList
//  ОбъектXDTO          - ОбъектXDTO                            - зона объекта XDTO Document
//  Документ            - СправочникСсылка.ВходящиеДокументы    - Созданный входящий документ
//  ПараметрыДокумента  - Структура                             - заполняемая структура параметров документа на основе входящего XDTO
//
Процедура СоздатьСвязиДокументов2013(XDTOДокументы, ОбъектXDTO, Документ, ПараметрыДокумента)
	
	Для Каждого СсылкаНаДокументXDTO Из ОбъектXDTO.Link Цикл
		
		Для Каждого ДокументСвязиXDTO Из XDTOДокументы Цикл
			
			Если СсылкаНаДокументXDTO.DocumentID = ДокументСвязиXDTO.DocumentID Тогда
				
				Попытка
					СсылкаНаДокумент = Справочники.ИсходящиеДокументы.ПолучитьСсылку(
						Новый УникальныйИдентификатор(ДокументСвязиXDTO.UID));
				Исключение
					СсылкаНаДокумент = Неопределено 
				КонецПопытки;
				Если СсылкаНаДокумент = Неопределено 
					и ПолучитьЗначениеЭлементаXDTO(ДокументСвязиXDTO, "Author") <> Неопределено Тогда
					
					РегистрационныйНомер = ПолучитьЗначениеЭлементаXDTO(ДокументСвязиXDTO,
					"Author[0].RegistrationInfo.Number") ;
					ДатаРегистрации = ПолучитьЗначениеЭлементаXDTO(ДокументСвязиXDTO, "Author[0].RegistrationInfo.Date");
					СсылкаНаДокумент = НайтиИсходящийДокументПоРегистрационномуНомеру(РегистрационныйНомер, 
						ДатаРегистрации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СсылкаНаДокумент <> Неопределено Тогда
			
			Попытка
				// Установка связи
				СвязиДокументов.УстановитьСвязь(Документ.Ссылка, Неопределено, СсылкаНаДокумент, 
				Справочники.ТипыСвязей.ПолученВОтветНа);
				ПараметрыДокумента.Вставить("ДокументОтвет", Истина);
			Исключение
				
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Создание связи для документа, поступившего по СВД'; en = 'Creating relation for document arrived via EDES'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,
				Документ.Ссылка,
				ОписаниеОшибки);
				
			КонецПопытки;	
			
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Создает зону  XDTO  Document на основе Исходящего документа.
//
// Параметры:
//  ОбъектXDTODocumentList          - ОбъектXDTO                            - зона DocumentList
//  Документ                        - СправочникСсылка.ИсходящиеДокументы   - Исходящий документ
//  ПространствоИмен                - Строка                                - Пространство имен для операций XDTO 
//  ТаблицаФайловДляОтправки        - ТаблицаЗначений                       - таблица с информацией о приложенных файлах  
//  Транспорт                       - СправочникСсылка.ТранспортыСВД        - Транспорт отправки СВД
//  ВидСообщенияСВД                 - Перечисление.ВидыСообщенийСВД         - Вид сообщения СВД
//  UIDДокументаВпередающейСистеме  - Строка                                - UID документа в передающей системе
//
Процедура СоздатьXDTOДокумент2013(ОбъектXDTODocumentList, Документ, ПространствоИмен, ТаблицаФайловДляОтправки,
		Транспорт, ВидСообщенияСВД, UIDДокументаВпередающейСистеме="")
	
	// Зона документа 
	ОбъектXDTOДокумент = СоздатьОбъект("Document", ПространствоИмен);
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Код, Отправитель, РегистрационныйНомер, ДатаРегистрации, ВидДокумента, ДатаРегистрации, Подписал, ИсходящаяДата, ИсходящийНомер");
		
		// ОбъектXDTOДокумент.type = СоздатьОбъект("DocumentType", ПространствоИмен);
		// «Created» – исходящий документ ;«Incoming» – входящий документ;«Project» – проект документа
		ОбъектXDTOДокумент.type = "Incoming"; // «Incoming» – входящий документ;
	Иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Код, Наименование, РегистрационныйНомер,
			|ДатаРегистрации, ВидДокумента, Организация,
			|ГрифДоступа, Содержание, Комментарий, Подписал,
			|ДатаРегистрации, Подготовил");
		ОбъектXDTOДокумент.type = "Created"; // «Created» – исходящий документ ;
	КонецЕсли;
	
	// DocumentID;0;String;Ссылка на уникальный номер связанного документа в паспорте электронного сообщения.
	// Ссылка на документ, существующий в передающей системе. 
	ОбъектXDTOДокумент.DocumentID = РеквизитыДокумента.Код;
	
	// RegistrationInfo (3);1;Информация о регистрации документа в организации-отправителе
	ОбъектXDTOДокумент.RegistrationInfo = СоздатьОбъект("RegistrationInfo", ПространствоИмен);
	ОбъектXDTOДокумент.RegistrationInfo.Number = РеквизитыДокумента.РегистрационныйНомер;
	ОбъектXDTOДокумент.RegistrationInfo.Date = РеквизитыДокумента.ДатаРегистрации;
	
	ОбъектXDTOДокумент.Group = СоздатьОбъект("Group", ПространствоИмен); // Содержит информацию о виде (группе) документа
	ОбъектXDTOДокумент.Group.__content = Строка(РеквизитыДокумента.ВидДокумента); // Содержание (String):
	//Наименование группы документов
	ОбъектXDTOДокумент.Group.UID = Строка(РеквизитыДокумента.ВидДокумента.УникальныйИдентификатор());
	
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент Тогда 
		// Заполняется значением реквизита РКФ «GUID».Для РКФ проекта документа заполняется значением «GUID» пакета версий.
		ОбъектXDTOДокумент.UID = Строка(Документ.УникальныйИдентификатор());
		
		// Обязательно заполняется для основного пересылаемого документа и не обязательно для связанного документа.
		// Допустимые значения: True - Основной документ False - Связанный документ.
		ОбъектXDTOДокумент.MainDocument = Истина;
		
		СоздатьXDTOAutor2013(ОбъектXDTOДокумент, РеквизитыДокумента.Организация, ПространствоИмен, Транспорт, РеквизитыДокумента.Подписал,
			РеквизитыДокумента.ДатаРегистрации, РеквизитыДокумента.РегистрационныйНомер)
	Иначе 
		// Заполняется значением реквизита РКФ «GUID».Для РКФ проекта документа заполняется значением «GUID» пакета версий.
		ОбъектXDTOДокумент.UID = UIDДокументаВпередающейСистеме;
		// Допустимые значения: True - Основной документ False - Связанный документ
		ОбъектXDTOДокумент.MainDocument = Ложь;
		
		СоздатьXDTOAutor2013(ОбъектXDTOДокумент, РеквизитыДокумента.Отправитель, ПространствоИмен, Транспорт, РеквизитыДокумента.Подписал, 
			РеквизитыДокумента.ИсходящаяДата, РеквизитыДокумента.ИсходящийНомер);
		
		ОбъектXDTODocumentList.Document.Добавить(ОбъектXDTOДокумент);
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		// 14.1 Элемент Access Назначение: Содержит информацию о грифе доступа к документу Содержание (String): 
		// Наименование грифа доступа
		// Содержит информацию о виде (группе) документа
		ОбъектXDTOДокумент.Access = СоздатьОбъект("Access", ПространствоИмен);
		// Содержание (String): Наименование группы документов
		ОбъектXDTOДокумент.Access.__content = Строка(РеквизитыДокумента.ГрифДоступа);
		ОбъектXDTOДокумент.Access.UID = Строка(РеквизитыДокумента.ГрифДоступа.УникальныйИдентификатор());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоставДокументов") Тогда
		// Consists (3);0-1;Состав документа Тип данных – String
		ОбъектXDTOДокумент.Consists = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Документ);
	КонецЕсли;
	
	// Annotation (3);0-1;Краткое содержание документа Тип данных – String
	ОбъектXDTOДокумент.Annotation = РеквизитыДокумента.Содержание;
	
	// Rubric (3);0-n;Информация о рубрике документа
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Документ);
		Для Каждого Категория Из КатегорииИсточника Цикл
			ОбъектXDTOКатегория= СоздатьОбъект("Rubric", ПространствоИмен);
			ОбъектXDTOКатегория.__content = Строка(Категория); // Содержание (String): Наименование рубрики	
			ОбъектXDTOКатегория.UID = Строка(Категория.УникальныйИдентификатор());
			ОбъектXDTOДокумент.Rubric.Добавить(ОбъектXDTOКатегория);
		КонецЦикла;
	КонецЕсли;
	
	// File (3);0-n;Информация о пересылаемом файле документа (без файлов отчетов исполнителей поручений)
	ПолучитьТаблицуФайловПоОбъекту2013(ОбъектXDTOДокумент, Документ, ТаблицаФайловДляОтправки, ПространствоИмен);
	
	// Addressee (3);0-n;Адресаты документа (все);
	//Обязательно должен присутствовать хотя бы один из элементов следующего уровня Contact или PrivatePerson
	Для Каждого ПолучательСтрокаТаблЧасти Из Документ.Получатели Цикл
		
		ОбъектXDTOAddressee = СоздатьОбъект("Addressee", ПространствоИмен);
		
		Если ПолучательСтрокаТаблЧасти.Получатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбъектXDTOAddressee.Contact = СоздатьXDTOКонтакт2013(ПолучательСтрокаТаблЧасти.Получатель, Транспорт,
				ПространствоИмен, ПолучательСтрокаТаблЧасти.Адресат);
		Иначе	
			ОбъектXDTOAddressee.PrivatePerson = СоздатьXDTOГражданин2013(ПолучательСтрокаТаблЧасти.Получатель,
				ПространствоИмен, ПолучательСтрокаТаблЧасти.Адресат);
		КонецЕсли;	
		
	КонецЦикла;
	
	// Writer (3);0-n;Информация об исполнителе документа, включая проект документа
	ОбъектXDTOИсполнитель = СоздатьОбъект("Writer", ПространствоИмен);
	ОбъектXDTOИсполнитель.Contact = СоздатьXDTOКонтакт2013(РеквизитыДокумента.Организация, Транспорт,
		ПространствоИмен, РеквизитыДокумента.Подготовил);
	
	// 14.3 Элемент AdditionalField Назначение: Содержит информацию о дополнительном реквизите РКФ. 
	// Содержание (String): Значение дополнительного реквизита 
	// AdditionalField (3);0-n;Дополнительные реквизиты РКФ 
	ОбъектXDTOДокументAdditionalField= СоздатьОбъект("AdditionalField", ПространствоИмен);
	ОбъектXDTOДокумент.AdditionalField.Добавить(ОбъектXDTOДокументAdditionalField);
	ОбъектXDTOДокументAdditionalField.Name = "ЗаголовокДокумента"; // Визуальное имя реквизита
	ОбъектXDTOДокументAdditionalField.Type = "Text"; // Допустимые значения: «Text», «Date», «Decimal», «Flag»
	
	// Содержание (String): Значение дополнительного реквизита
	ОбъектXDTOДокументAdditionalField.__content = Документ.Заголовок;
	
	ОбъектXDTODocumentList.Document.Добавить(ОбъектXDTOДокумент);
	
	СоздатьXDTOLink2013(ОбъектXDTODocumentList, ОбъектXDTOДокумент, Документ, ПространствоИмен, Транспорт, ВидСообщенияСВД);
	
КонецПроцедуры	

// Заполняет XDTO Подписки на оповещения DocInfoSubscriptions.
//
// Параметры:
//  DocInfoSubscriptions    - ОбъектXDTO    - DocInfoSubscriptions
//  ПространствоИмен        - Строка        - Пространство имен для операций XDTO 
// 
// Возвращаемое значение:
// ОбъектXDTO  -  ОбъектXDTO зона  DocInfoSubscriptions
//
Функция СоздатьXDTOПодписки2013 (DocInfoSubscriptions, ПространствоИмен)
	
	// StopDayCount;1;Num;Количество дней, в течение которых должны направляться доклады;
	// Целое положительное число от 1 до 999
	DocInfoSubscriptions.StopDayCount = 30;
	DocInfoSubscriptions.Reception = СоздатьОбъект("SubscriptionEvent", ПространствоИмен);
	DocInfoSubscriptions.Reception.Include = Истина; // Reception (2);1;Уведомление о приеме
	DocInfoSubscriptions.Registration = СоздатьОбъект("SubscriptionEvent", ПространствоИмен);
	DocInfoSubscriptions.Registration.Include = Истина; // Registration (2);1;Уведомление о регистрации
	
	DocInfoSubscriptions.Forwarding = СоздатьОбъект("SubscriptionEventAdvanceInfo", ПространствоИмен);
	DocInfoSubscriptions.Forwarding.Include = Ложь; // Forwarding (2);1;Доклад о направлении (пересылке) документа
	DocInfoSubscriptions.Consideration = СоздатьОбъект("SubscriptionEventAdvanceInfo", ПространствоИмен);
	
	// Consideration (2);1;Доклад о рассмотрении документа (ввода новых резолюций)
	DocInfoSubscriptions.Consideration.Include = Ложь;
	
	DocInfoSubscriptions.Report = СоздатьОбъект("SubscriptionEvent", ПространствоИмен);
	DocInfoSubscriptions.Report.Include = Ложь; // Доклад об отчете исполнения присланного поручения
	DocInfoSubscriptions.Redirection = СоздатьОбъект("SubscriptionEvent", ПространствоИмен);
	DocInfoSubscriptions.Redirection.Include = Ложь; // Доклад о перенаправлении (отправке) присланного документа
	DocInfoSubscriptions.Answer = СоздатьОбъект("SubscriptionEvent", ПространствоИмен);
	DocInfoSubscriptions.Answer.Include = Ложь; // Доклад об отправке документа-ответа 
	
	Возврат DocInfoSubscriptions;
	
КонецФункции

// Создает зону Sender XDTO по отправителю.
//
// Параметры:
//  Организация         - СправочникСсылка.Организации      - Организации отправитель
//  Транспорт           - СправочникСсылка.ТранспортыСВД    - Транспорт отправки СВД
//  ПространствоИмен    - Строка                            - Пространство имен для операций XDTO 
// 
// Возвращаемое значение:
//  ОбъектXDTO -   зона Sender XDTO
//
Функция СоздатьXDTOПоОтправителю2013(Организация, Транспорт, ПространствоИмен)
	
	ОбъектXDTOотправитель = СоздатьОбъект("Sender", ПространствоИмен);
	
	ОбъектXDTO_Контакт = СоздатьXDTOКонтакт2013(Организация, Транспорт, ПространствоИмен);
	ОбъектXDTOотправитель.Contact = ОбъектXDTO_Контакт;
	
	ОбъектXDTO_СЭД = СоздатьОбъект("EDMS", ПространствоИмен);
	ОбъектXDTO_СЭД.__content = "1С:Документооборот"; // Наименование системы управления документами отправителя	
	ОбъектXDTO_СЭД.UID = "http:// v8.1c.ru/doc8/";
	// Дополнительные данные о системе управления документами отправителя
	ОбъектXDTO_СЭД.Version = Метаданные.Версия; // не обязательный 
	ОбъектXDTOотправитель.EDMS = ОбъектXDTO_СЭД;
	
	Возврат ОбъектXDTOотправитель;
	
КонецФункции // СоздатьXDTOПоОтправителю()

// Создает зону Recipient по  получателю.
//
// Параметры:
//  Контрагент          - СправочникСсылка.Контрагенты      - Контрагент получатель 
//  Транспорт           - СправочникСсылка.ТранспортыСВД    - Транспорт отправки СВД
//  ПространствоИмен    - Строка                            - Пространство имен для операций XDTO 
//  Контакт             - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.ФизическиеЛица   
//                                                          - Справочник ссылка контактную информацию которого передаем.
// 
// Возвращаемое значение:
//  ОбъектXDTO -  зона Recipient XDTO Получатель
//
Функция СоздатьXDTOПоАдресату2013(Контрагент, Транспорт, ПространствоИмен, Контакт)
	
	ОбъектXDTO_Получатель = СоздатьОбъект("Recipient", ПространствоИмен);
	
	ОбъектXDTO_Контакт = СоздатьXDTOКонтакт2013(Контрагент, Транспорт, ПространствоИмен, Контакт);
	ОбъектXDTO_Получатель.Contact.Добавить(ОбъектXDTO_Контакт);
	
	Возврат ОбъектXDTO_Получатель;
	
КонецФункции // СоздатьXDTOПоАдресату()

// Создает зону DocumentAuthor XDTO на основе Контрагент и регистрационных данных.
//
// Параметры:
//  ОбъектXDTOДокумент      - ОбъектXDTO                        - зона   ОбъектXDTOДокумент
//  Контрагент              - СправочникСсылка.Контрагенты      - Контрагент получатель 
//  ПространствоИмен        - Строка                            - Пространство имен для операций XDTO 
//  Транспорт               - СправочникСсылка.ТранспортыСВД    - Транспорт отправки СВД
//  Подписал                - СправочникСсылка.Пользователи     - Подписант
//  ДатаРегистрации         - Дата                              - ДатаРегистрации
//  РегистрационныйНомер    - Строка                            - РегистрационныйНомер
//
Процедура СоздатьXDTOAutor2013(ОбъектXDTOДокумент, Контрагент, ПространствоИмен, Транспорт, Подписал,
		ДатаРегистрации, РегистрационныйНомер)
	
	// Author (3);0-n;Автор документа;Обязательно должен присутствовать хотя бы один из элементов 
	// следующего уровня Contact или PrivatePerson (для анонимных писем граждан автор не заполняется)
	XDTOАвтор = СоздатьОбъект("DocumentAuthor", ПространствоИмен);
	
	Если ЗначениеЗаполнено(Подписал) Тогда
		XDTOАвтор.Contact = СоздатьXDTOКонтакт2013(Контрагент, Транспорт, ПространствоИмен, Подписал);
	КонецЕсли;
	
	// RegistrationInfo (4);0-1;Регистрационный номер и дата документа у автора - организации
	XDTOАвтор.RegistrationInfo = СоздатьОбъект("RegistrationInfo", ПространствоИмен);
	XDTOАвтор.RegistrationInfo.Date = ДатаРегистрации;
	XDTOАвтор.RegistrationInfo.Number = РегистрационныйНомер;
	
	ОбъектXDTOДокумент.Author.Добавить(XDTOАвтор);
	
КонецПроцедуры // 

// Заполняет зону File на основе таблицы отправляемых файлов.
//
// Параметры:
//  ОбъектXDTO                  - ОбъектXDTO                            - зона File к которой добавляем данные о файлах
//  Объект                      - СправочникСсылка.ИсходящиеДокументы   - Исходящий документ файлы,
// которого нужно выгрузить, если не передали ТаблицаФайловДляОтправки
//  ТаблицаФайловДляОтправки    - ТаблицаЗначений                       - таблица с информацией о приложенных файлах  
//  ПространствоИмен            - Строка                                - Пространство имен для операций XDTO 
//
Процедура ПолучитьТаблицуФайловПоОбъекту2013(ОбъектXDTO, Объект, ТаблицаФайловДляОтправки, ПространствоИмен)
	
	Если ТипЗнч(ТаблицаФайловДляОтправки) = Тип("Массив") Тогда
		
		МассивФайлов = ТаблицаФайловДляОтправки;
		ResourceID = 1;
		ТаблицаФайловДляОтправки = Новый ТаблицаЗначений;
		ТаблицаФайловДляОтправки.Колонки.Добавить("ResourceID");
		ТаблицаФайловДляОтправки.Колонки.Добавить("Файл");
		ТаблицаФайловДляОтправки.Колонки.Добавить("UniqueName");
		ТаблицаФайловДляОтправки.Колонки.Добавить("ИмяФайла");
		ТаблицаФайловДляОтправки.Колонки.Добавить("ТекущаяВерсияРазмер");
		ТаблицаФайловДляОтправки.Колонки.Добавить("ТекущаяВерсияРасширение");
		ТаблицаФайловДляОтправки.Колонки.Добавить("ЭПВременноеХранилище");
		
	ИначеЕсли ТипЗнч(ТаблицаФайловДляОтправки) = Тип("ТаблицаЗначений") Тогда
		ResourceID = ТаблицаФайловДляОтправки[ТаблицаФайловДляОтправки.Количество()-1].ResourceID;
	ИначеЕсли Объект <> Неопределено Тогда
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка, Ложь);
	КонецЕсли;
	
	// File (3);0-n;Информация о пересылаемом файле документа (без файлов отчетов исполнителей поручений).
	Для Каждого Файл Из МассивФайлов Цикл
		
		СтрокаФайл = ТаблицаФайловДляОтправки.Добавить();
		СтрокаФайл.ResourceID = ResourceID;
		СтрокаФайл.Файл = Файл;
		СтрокаФайл.ТекущаяВерсияРазмер = Файл.ТекущаяВерсияРазмер;
		СтрокаФайл.ТекущаяВерсияРасширение = Файл.ТекущаяВерсияРасширение;
		
		// Уникальное имя файла, передаваемого в сообщении, с его законным расширением
		СтрокаФайл.UniqueName = Файл.Наименование+"("+ResourceID+")."+Файл.ТекущаяВерсияРасширение;
		СтрокаФайл.ИмяФайла = Файл.Наименование+"("+ResourceID+")";
		ОбъектXDTOФайл = СоздатьОбъект("DeloFile", ПространствоИмен);
		ОбъектXDTOФайл.UID = Строка(Файл.УникальныйИдентификатор());
		ОбъектXDTOФайл.ResourceID = Строка(ResourceID);
		ОбъектXDTOФайл.Size = Окр(Файл.ТекущаяВерсияРазмер / 1024, 0);
		ОбъектXDTOФайл.Description = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(Файл.Наименование, 
			Файл.ТекущаяВерсияРасширение);
		ОбъектXDTOФайл.Extension = Файл.ТекущаяВерсияРасширение;
		
		ПодписиЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(Файл.ТекущаяВерсия);
		
		Пока ПодписиЭП.Следующий() Цикл
			ResourceID = ResourceID+1;
			СтрокаФайл = ТаблицаФайловДляОтправки.Добавить();
			СтрокаФайл.ResourceID = ResourceID;
			СтрокаФайл.Файл = Неопределено;
			СтрокаФайл.ЭПВременноеХранилище = ПоместитьВоВременноеХранилище(ПодписиЭП.Подпись.Получить());
			СтрокаФайл.ТекущаяВерсияРазмер = 5000;
			РасширениеДляФайловПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭП",
			"РасширениеДляФайловПодписи", "p7s");
			СтрокаФайл.ТекущаяВерсияРасширение = РасширениеДляФайловПодписи;
			
			// Уникальное имя файла, передаваемого в сообщении, с его законным расширением
			СтрокаФайл.UniqueName = Файл.Наименование+"("+ResourceID+")."+Файл.ТекущаяВерсияРасширение
				+"."+РасширениеДляФайловПодписи;
			СтрокаФайл.ИмяФайла = Файл.Наименование+"("+ResourceID+")."+Файл.ТекущаяВерсияРасширение;
			
			XDTOПодписьЭП = СоздатьОбъект("EDS", ПространствоИмен); // Информация об ЭЦП (ЭП) файла
			XDTOПодписьЭП.__content = ПодписиЭП.КомуВыданСертификат +" "+ ПодписиЭП.ДатаПодписи;
			XDTOПодписьЭП.ResourceID = Строка(ResourceID) ; // Ссылка на описание файла в элементе Resource 
			XDTOПодписьЭП.Date = ПодписиЭП.ДатаПодписи; // Дата подписания файла
			
			// 0 – Не определенная;1 – Авторская;2 – Согласующая;3 – Утверждающая;4 – Удостоверяющая;5 – Ознакомительная 
			XDTOПодписьЭП.KindID = 1;
			XDTOПодписьЭП.Certificate = ПодписиЭП.КомуВыданСертификат;
			ОбъектXDTOФайл.EDS.Добавить(XDTOПодписьЭП);
			
		КонецЦикла;
		
		ОбъектXDTO.File.Добавить(ОбъектXDTOФайл);
		ResourceID = ResourceID+1;
		
	КонецЦикла;
	
КонецПроцедуры // ТаблицуФайловПоИсходящему()

// Заполняет тег ResourceInfo в объекте XDTO из массива.
//
// Параметры:
//  ОбъектXDTO_Файлы    - ОбъектXDTO                                    - зоня с информацией о файлах
//  ТаблицаФайлов       - ТаблицаЗначений  -  
//  Правило             - СправочникСсылка.ПравилаОтправкиСообщенийСВД  - правило отправки сообщений СВД 
//  ПространствоИмен    - Строка                                        - Пространство имен для операций XDTO 
//  ФорматСообщения     - СправочникСсылка.ФорматыСообщенийСВД          - формат сообщений СВД
//
Процедура ЗаполнитьResourceInfoИзТаблицыФайловДляОтправки2013(ОбъектXDTO_Файлы, ТаблицаФайлов, Правило, 
		ПространствоИмен, ФорматСообщения) Экспорт
	
	РазмерФайловВПакете = 0;
	
	ТипыПередаваемыхФайловНРег = НРег(Правило.ТипыПередаваемыхФайлов);
	
	МассивРасширений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТипыПередаваемыхФайловНРег, " ");
	
	Для Каждого СтрокаТФайл Из ТаблицаФайлов Цикл
		
		ФайлТекущаяВерсияРазмер = СтрокаТФайл.ТекущаяВерсияРазмер;
		Если Правило.МаксимальныйРазмерПередаваемогоФайла <> 0 
			И ФайлТекущаяВерсияРазмер > Правило.МаксимальныйРазмерПередаваемогоФайла Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Правило.МаксимальныйРазмерВсехПередаваемыхФайлов <> 0 
			И РазмерФайловВПакете + ФайлТекущаяВерсияРазмер > Правило.МаксимальныйРазмерВсехПередаваемыхФайлов Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Правило.ТипыПередаваемыхФайлов) Тогда
			Расширение = НРег(СтрокаТФайл.ТекущаяВерсияРасширение);
			Если МассивРасширений.Найти(Расширение) = Неопределено Тогда // НЕ нашли в массиве разрешенных расширений.
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		ОбъектXDTO_Файл = СоздатьОбъект("ResourceInfo", ПространствоИмен);
		ОбъектXDTO_Файлы.Resource.Добавить(ОбъектXDTO_Файл);
		ОбъектXDTO_Файл.UID =СтрокаТФайл.ResourceID; // Уникальный номер файла в сообщении 
		// Уникальное имя файла, передаваемого в сообщении, с его законным расширением
		ОбъектXDTO_Файл.UniqueName = СтрокаТФайл.UniqueName;
		
		РазмерФайловВПакете = РазмерФайловВПакете + ФайлТекущаяВерсияРазмер ;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Создает зону Contact XDTO. 
//
// Параметры:
//  Контрагент          - СправочникСсылка.Контрагенты          -     Контрагент получатель 
//  Транспорт           - СправочникСсылка.ТранспортыСВД        -    Транспорт отправки СВД
//  ПространствоИмен    - Строка                                -  Пространство имен для операций XDTO 
//  Контакт             - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.ФизическиеЛица   
//                                                              - Справочник ссылка контактную информацию которого передаем
//  Подразделение       -СправочникСсылка.СтруктураПредприятия  -  Подразделение контакта
// 
// Возвращаемое значение:
//  ОбъектXDTO -   зона Contact XDTO
//
Функция СоздатьXDTOКонтакт2013(Контрагент, Транспорт, ПространствоИмен, Контакт= Неопределено, Подразделение= Неопределено)
	
	ОбъектXDTOКонтакт = СоздатьОбъект("Contact", ПространствоИмен);
	
	ОбъектXDTOОрганизацияПолучателя = СоздатьОбъект("Organization", ПространствоИмен);
	ОбъектXDTOКонтакт.Organization = ОбъектXDTOОрганизацияПолучателя;
	
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда // на стороне сервера СВД
		ОбъектXDTOОрганизацияПолучателя.ShortName = Контрагент;
		Возврат ОбъектXDTOКонтакт;
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Пользователи") Тогда // на стороне сервера СВД
		ОбъектXDTOОрганизацияПолучателя.ShortName = Строка(Контрагент);
		Возврат ОбъектXDTOКонтакт;
	КонецЕсли;
	
	ОбъектXDTOОрганизацияПолучателя.UID = Строка(Контрагент.УникальныйИдентификатор());
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOОрганизацияПолучателя.ShortName = МенеджерОбъекта.ПолучитьНаименованиеКонтрагентаВСВД(Контрагент, 
			Транспорт);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ОбъектXDTOОрганизацияПолучателя.FullName = Контрагент.НаименованиеПолное;
		ОбъектXDTOОрганизацияПолучателя.INN = Контрагент.ИНН;
		ОбъектXDTOОрганизацияПолучателя.OKPO = Контрагент.КодПоОКПО;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Подразделение) и ЗначениеЗаполнено(Контакт) ТОгда
		Подразделение = РаботаСПользователями.ПолучитьПодразделение(Контакт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ОбъектXDTOПодразделениеПолучателя = СоздатьОбъект("Department", ПространствоИмен);
		ОбъектXDTOПодразделениеПолучателя.UID = Строка(Подразделение.УникальныйИдентификатор());
		ОбъектXDTOПодразделениеПолучателя.Name = Подразделение.Наименование;
		ОбъектXDTOПодразделениеПолучателя.Index = Подразделение.Код;
		ОбъектXDTOКонтакт.Department = ОбъектXDTOПодразделениеПолучателя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		ОбъектXDTOПодразделениеПолучателя = СоздатьОбъект("OfficialPerson", ПространствоИмен);
		ОбъектXDTOПодразделениеПолучателя.UID = Строка(Контакт.УникальныйИдентификатор());
		ОбъектXDTOПодразделениеПолучателя.FIO = Строка(Контакт);
		ОбъектXDTOПодразделениеПолучателя.Post = Строка(РаботаСПользователями.ПолучитьДолжность(Контакт));
		ОбъектXDTOКонтакт.OfficialPerson = ОбъектXDTOПодразделениеПолучателя;
		ОбъектСАдреснойинформацией = Контакт;
	Иначе
		ОбъектСАдреснойинформацией = Контрагент;
	КонецЕсли;
	
	ЗаполнитьXDTOAddress2013(ОбъектXDTOКонтакт.Address, Контрагент, ПространствоИмен);
	
	ЗаполнитьEmailИТелефоны2013(ОбъектXDTOКонтакт.Econtact, ОбъектСАдреснойинформацией, ПространствоИмен);
	
	Возврат ОбъектXDTOКонтакт;
	
КонецФункции // СоздатьXDTOКонтакт2013()

// Создает зону PrivatePerson XDTO по данным гражданина.
//
// Параметры:
//  Контрагент          - СправочникСсылка.Контрагенты  -     Контрагент получатель 
//  ПространствоИмен    - Строка                        -  Пространство имен для операций XDTO 
//  КонтактноеЛицо      - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.ФизическиеЛица   
//                                                      - Справочник ссылка контактную информацию которого передаем.
// 
// Возвращаемое значение:
//  ОбъектXDTO -  зону PrivatePerson XDTO по данным гражданина
//
Функция СоздатьXDTOГражданин2013(Контрагент, ПространствоИмен, КонтактноеЛицо = Неопределено)
	
	// 14.35 Элемент PrivatePerson
	// Назначение: Содержит информацию о физическом лице 
	// Содержание: Нет 
	ОбъектXDTOPrivatePerson = СоздатьОбъект("PrivatePerson", ПространствоИмен);
	Если ЗначениеЗаполнено(Контрагент.ФизЛицо) Тогда
		ФизЛицо = Контрагент.ФизЛицо;
	ИначеЕсли ЗначениеЗаполнено(КонтактноеЛицо) и ЗначениеЗаполнено(КонтактноеЛицо.ФизЛицо) Тогда
		ФизЛицо = КонтактноеЛицо.ФизЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ОбъектXDTOPrivatePerson.FIO = ФизЛицо.Наименование;
		// Пол гражданина
		Пол = ФизЛицо.Пол;
		Sex = "Undefined";
		Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			Sex = "Male";
		ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			Sex = "Female";
		КонецЕсли;
		ОбъектXDTOPrivatePerson.Sex = Sex;
		ОбъектXDTOPrivatePerson.INN = Контрагент.ИНН; // Идентификационный номер налогоплательщика.
		
		ЗаполнитьXDTOAddress2013(ОбъектXDTOPrivatePerson, ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо, ФизЛицо), 
			ПространствоИмен);
	Иначе
		ОбъектXDTOPrivatePerson.FIO = Контрагент.Наименование;
		ОбъектXDTOPrivatePerson.INN = Контрагент.ИНН; // Идентификационный номер налогоплательщика.
		ЗаполнитьXDTOAddress2013(ОбъектXDTOPrivatePerson, ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо, Контрагент), 
			ПространствоИмен);
	КонецЕсли;
	
	ЗаполнитьEmailИТелефоны2013(ОбъектXDTOPrivatePerson.Econtact, Контрагент, ПространствоИмен);
	
	Возврат ОбъектXDTOPrivatePerson;
	
КонецФункции // СоздатьXDTOГражданин()

// Формирует XDTO подтверждение получения - паспорт Report. 
//
// Параметры:
//  Документ                        - СправочникСсылка.ВходящиеДокументы    - Созданный входящий документ 
//  ИдентификаторСообщения          - Строка                                - Идентификатор отправляемого сообщения
//  Транспорт                       - СправочникСсылка.ТранспортыСВД        - Транспорт отправки СВД
//  Контрагент                      - СправочникСсылка.Контрагенты          - Контрагент получатель 
//  ВидСообщенияСВД                 - Перечисление.ВидыСообщенийСВД         - Вид сообщения СВД
//  КодОшибки                       - Строка                                - передаваемый код ошибки
//  ТекстОшибки                     - Строка                                - передаваемый текст ошибки
//  UIDДокументаВпередающейСистеме  -   Строка                              - UID документа в передающей системе
// 
// Возвращаемое значение:
//  ОбъектXDTO -   ОбъектXDTO - паспорт Report подтверждение получения
//
Функция СформироватьXDTOПодтверждениеПолучения2013(Документ, ИдентификаторСообщения, Транспорт,
		Контрагент, ВидСообщенияСВД, КодОшибки = 0, ТекстОшибки = "", UIDДокументаВпередающейСистеме)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
		"Код, РегистрационныйНомер, ДатаРегистрации, ВидДокумента, Организация, ИсходящийНомер, ИсходящаяДата");
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOReport = СоздатьОбъект("Report", ПространствоИмен);
	
	// Зона заголовка
	ОбъектXDTOReport.Header = СоздатьXDTOЗаголовок2013(РеквизитыДокумента.Организация, Контрагент, Транспорт,
		ПространствоИмен, ВидСообщенияСВД, ИдентификаторСообщения);
	
	// Зона Уведомление 
	ОбъектXDTOReport.Notification = СоздатьОбъект("Notification", ПространствоИмен);
	ОбъектXDTOReport.Notification.InitialDoc = СоздатьОбъект("InitialDoc", ПространствоИмен);
	ОбъектXDTOReport.Notification.InitialDoc.UID = UIDДокументаВпередающейСистеме;
	ОбъектXDTOReport.Notification.InitialDoc.Number = РеквизитыДокумента.ИсходящийНомер;
	ОбъектXDTOReport.Notification.InitialDoc.Date = РеквизитыДокумента.ИсходящаяДата;
	
	// RegNumber - заполняем только в уведомлении о регистрации 
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации И
		ЗначениеЗаполнено(РеквизитыДокумента.РегистрационныйНомер) Тогда
		
		ОбъектXDTOReport.Notification.Registration = СоздатьОбъект("Registration", ПространствоИмен);
		ОбъектXDTOReport.Notification.Registration.DocumentID = РеквизитыДокумента.Код;
		ОбъектXDTOReport.Notification.Registration.SystemDate = УниверсальноеВремя(ТекущаяДатаСеанса());
		
		ОбъектXDTOReport.DocumentList = СоздатьОбъект("DocumentList", ПространствоИмен);
		СоздатьXDTOДокумент2013(ОбъектXDTOReport.DocumentList, Документ, ПространствоИмен, Неопределено,
			Транспорт, ВидСообщенияСВД, UIDДокументаВпередающейСистеме);
		
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда 
		
		ОбъектXDTOReport.Notification.Failure = СоздатьОбъект("Failure", ПространствоИмен);
		ОбъектXDTOReport.Notification.Failure.Code = КодОшибки;
		ОбъектXDTOReport.Notification.Failure.__content = ТекстОшибки ;
		
	Иначе
		ОбъектXDTOReport.Notification.Reception = УниверсальноеВремя(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Возврат ОбъектXDTOReport;
	
КонецФункции

// Формирует сообщение об ошибке СВД.
//
// Параметры:
//  ВходящееСообщениеXDTO   - ОбъектXDTO    - ОбъектXDTO входящего сообщения
//  КодОшибки               - Строка        - передаваемый код ошибки
//  ТекстОшибки             - Строка        - передаваемый текст ошибки
//  Кому                    - Строка, СправочникСсылка.Пользователи, СправочникСсылка.Контрагенты   
//                                          - Получатель сообщения об ошибке.
// 
// Возвращаемое значение:
//  ОбъектXDTO -  ОбъектXDTO паспорт сообщения об ошибке Report.
//
Функция СформироватьСообщениеОбОшибкеСВД2013(ВходящееСообщениеXDTO, КодОшибки, ТекстОшибки, Кому) Экспорт 
	
	ПространствоИмен = "http://www.eos.ru/2010/sev";
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектXDTOReport = СоздатьОбъект("Report", ПространствоИмен);
	
	// Зона заголовка
	ОбъектXDTOReport.Header = СоздатьXDTOЗаголовок2013(НСтр("ru = 'Сервер СВД 1С:Документооборот'; en = '1С:Document management EDES server'"), 
		Кому, "", ПространствоИмен, Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке, ВходящееСообщениеXDTO.Header.ReturnID);
	
	// Зона Уведомление 
	ОбъектXDTOReport.Notification = СоздатьОбъект("Notification", ПространствоИмен);
	InitialDoc = ПолучитьЗначениеЭлементаXDTO(ВходящееСообщениеXDTO, "Notification.InitialDoc");
	Если InitialDoc <> Неопределено Тогда
		ОбъектXDTOReport.Notification.InitialDoc = InitialDoc ;
	Иначе
		Document = ПолучитьЗначениеЭлементаXDTO(ВходящееСообщениеXDTO, "DocumentList.Document[0]");
		ОбъектXDTOReport.Notification.InitialDoc = СоздатьОбъект("InitialDoc", ПространствоИмен);
		ОбъектXDTOReport.Notification.InitialDoc.UID = Document.UID;
		ОбъектXDTOReport.Notification.InitialDoc.Number = Document.RegistrationInfo.Number;
		ОбъектXDTOReport.Notification.InitialDoc.Date = Document.RegistrationInfo.Date;
	КонецЕсли;
	ОбъектXDTOReport.Notification.Failure = СоздатьОбъект("Failure", ПространствоИмен);
	ОбъектXDTOReport.Notification.Failure.Code = КодОшибки;
	ОбъектXDTOReport.Notification.Failure.__content = ТекстОшибки ;
	
	Возврат ОбъектXDTOReport;
	
КонецФункции	

#КонецОбласти 

#Область СозданиеВходящегоИзXDTOГОСТ_Р_53898_2013

// Получает значение элемента XDTO
//
// Параметры:
//  ОбъектXDTO              - ОбъектXDTO -  ОбъектXDTO 
//  НаименованиеЭлемента   - Строка     -  Путь к данным ОбъектXDTO 
//  ЗаполняемыйРеквизит     -            -  Реквизит объекта который необходимо заполнить. 
//                                          Заполняется при успешном получении значения по пути к данным в ОбъектXDTO.
// 
// Возвращаемое значение:
//  ОбъектXDTO -  Значения по пути к данным в ОбъектXDTO.
//
Функция ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, НаименованиеЭлемента, ЗаполняемыйРеквизит=Неопределено) Экспорт
	
	ОбъектXDTOИтерации =ОбъектXDTO;
	МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НаименованиеЭлемента, ".");
	Для Каждого НаименованиеЭлемента Из МассивЭлементов Цикл
		Если Найти(НаименованиеЭлемента, "[") ТОгда
			Индекс = Сред(НаименованиеЭлемента, Найти(НаименованиеЭлемента, "["));
		Иначе 
			Индекс = "";
		КонецЕсли;
		
		НаименованиеЭлемента = Сред(НаименованиеЭлемента, 1, Найти(НаименованиеЭлемента, "[")-1);
		Попытка
			Если ОбъектXDTOИтерации.Установлено(НаименованиеЭлемента) Тогда 
				ОбъектXDTOИтерации =Вычислить("ОбъектXDTOИтерации[НаименованиеЭлемента]"+Индекс);
			Иначе
				Возврат Неопределено;
			КонецЕсли;	
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЦикла;
	
	Если ЗаполняемыйРеквизит <> Неопределено Тогда
		ЗаполняемыйРеквизит = ОбъектXDTOИтерации;
	КонецЕсли;
	
	Возврат ОбъектXDTOИтерации;
	
КонецФункции // ПолучитьЗначениеЭлементаXDTO()

// Заполняет структуру ПараметрыДокумента на основе заголовка XDTO
//
// Параметры:
//  ОбъектXDTOHeader        - ОбъектXDTO                        - ОбъектXDTO зона Header
//  ПараметрыДокумента      - Структура                         - заполняемая структура параметров документа на основе входящего XDTO.
//  Транспорт               - СправочникСсылка.ТранспортыСВД    - Транспорт отправки СВД
//
Процедура ЗаполнитьПараметрыЗаголовкаИзXDTO2013(ОбъектXDTOHeader, ПараметрыДокумента, Транспорт) 
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПараметрыДокумента.Вставить("ФорматСообщения", ФорматСообщения);
	
	КонтрагентНаименование = ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOHeader, "Sender.Contact.Organization.ShortName");
	Контрагент = ПолучитьКонтрагентаПоНаименованиюВСВД(КонтрагентНаименование, Транспорт);
	Если Контрагент <> Неопределено Тогда 
		ПараметрыДокумента.Вставить("КонтрагентОтправитель", Контрагент);
	Иначе 
		ПараметрыДокумента.Вставить("КонтрагентОтправитель", Справочники.Контрагенты.Выбрать());
	КонецЕсли;
	
	ОбъектXDTOHeaderRecipientContact = ОбъектXDTOHeader.Recipient.Contact[0];
	
	ОрганизацияНаименование = ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOHeaderRecipientContact, "Organization.ShortName");
	ПараметрыДокумента.Вставить("ОрганизацияНаименование", ОрганизацияНаименование);
	Организация = ПолучитьОрганизациюПоНаименованиюВСВД(ОрганизацияНаименование, Транспорт);
	Если Организация <> Неопределено Тогда
		ПараметрыДокумента.Вставить("ОрганизацияПолучатель", Организация);
	Иначе 
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("ОрганизацияПолучательДолжностноеЛицо", 
		ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOHeaderRecipientContact, "OfficialPerson.FIO"));
	ПараметрыДокумента.Вставить("ОрганизацияПолучательПодразделение", 
		ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOHeaderRecipientContact, "Department.Name"));
	Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOHeader, "TimeZone") = Неопределено ТОгда
		ОбъектXDTOHeader.Time = УниверсальноеВремя(ОбъектXDTOHeader.Time);
	КонецЕсли;
	ПараметрыДокумента.Вставить("ДатаФормирования", ОбъектXDTOHeader.Time);
	
	ПараметрыДокумента.Вставить("ИдентификационныйНомерСообщения", ОбъектXDTOHeader.ReturnID);
	
КонецПроцедуры	

// Создает документ ВходящиеДокументы на основе входящего XDTO или собирает информацию из ОбъектXDTO 
// уведомление (Report)
//
// Параметры:
//  ОбъектXDTO              - ОбъектXDTO                            - корневое XDTO 
//  ПараметрыДокумента      - Структура                             - заполняемая структура параметров документа на основе входящего XDTO.
//  Транспорт               - СправочникСсылка.ТранспортыСВД        - Транспорт отправки СВД
//  ВходящееСообщениеСВД    - ДокументСсылка.ВходящееСообщениеСВД   - документ ВходящееСообщениеСВД для заполнения
//                                                                    истории состояний СВД.
//  ТаблицаВложенний        - ТаблицаЗначений                       - таблица с информацией о приложенных фалах. 
// 
// Возвращаемое значение:
//  СправочникСсылка.ВходящиеДокументы или Непоределено -    Созданный входящий документ  или Непоределено, 
//  если уведомление (Report). 
//
Функция ЗагрузитьДокументИзXDTO2013(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД,
		ТаблицаВложенний) Экспорт
	
	ЗаполнитьПараметрыЗаголовкаИзXDTO2013(ОбъектXDTO.Header, ПараметрыДокумента, Транспорт);
	НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки;
	Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Subscriptions.Reception.Include") = Истина Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления;
	КонецЕсли;	 
	ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", НеобходимостьПосылкиУведомлений);
	
	Организация = ПараметрыДокумента.ОрганизацияПолучатель;
	
	Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Notification") = Неопределено Тогда // основной документ
		
		Для Каждого XDTOДокумент Из ОбъектXDTO.DocumentList.Document Цикл
			
			// если это документ, а не уведомление
			Документ = Неопределено;
			
			Если XDTOДокумент.MainDocument = Истина Тогда // 0 - исходящий, 1 - входящий
				Документ = СоздатьВходящийИзXDTO2013(ОбъектXDTO.DocumentList.Document, XDTOДокумент, ПараметрыДокумента, 
				ПараметрыДокумента.КонтрагентОтправитель, Организация, ТаблицаВложенний);
				
				ПараметрыДокумента.Вставить("UIDДокументаВпередающейСистеме", XDTOДокумент.UID);
				
				// Если это документ и установлена опция о необходимости отправки уведомлений - 
				// шлем подтверждение доставки
				Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Subscriptions.Reception.Include")= Истина Тогда 
					
					СформироватьПодтверждениеПолучения(Документ, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
					Транспорт, Организация, 
					ПараметрыДокумента.КонтрагентОтправитель,
					Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке,,,,, XDTOДокумент.UID);
					
				КонецЕсли;	
				
				Прервать; // закачиваем только основной документ
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе // Это уведомление
		
		ИдентификаторСессии = ПараметрыДокумента.ИдентификационныйНомерСообщения ;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		
		// На инициирующей стороне запишем в историю подтверждение.
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеСВД, "Документ");
			
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			
			СостояниеДокумента = Неопределено;
			Если ОбъектXDTO.Notification.Failure <> Неопределено Тогда
				
				СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
				ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				ТекстОшибки = "Код ошибки: "+ОбъектXDTO.Notification.Failure.Code+";"
					+ОбъектXDTO.Notification.Failure.__content;
			ИначеЕсли ОбъектXDTO.Notification.Reception <> Неопределено Тогда
				СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
				ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
			ИначеЕсли ОбъектXDTO.Notification.Registration <> Неопределено Тогда	
				СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
				
				// Заполним регистрационный номер получателя
				Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
					УчитыватьВходящийНомерИДатуПолучателя = 
					ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
					Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
					
					Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
						
						// Документ записывается, даже если он заблокирован на редактирование карточкой,
						// т.к. входящий номер, присвоенный получателем - очень важная информация, 
						// которую нельзя потерять.
						ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
						
						Для Каждого Строка Из ДокументОбъект.Получатели Цикл
							Если Строка.Получатель = ПараметрыДокумента.КонтрагентОтправитель Тогда
								ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "DocumentList.Document[0].RegistrationInfo.Number",
								Строка.ВходящийНомер);
								ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "DocumentList.Document[0].RegistrationInfo.Date",
								Строка.ВходящаяДата);
							КонецЕсли;
						КонецЦикла;
						
						ДокументОбъект.Записать();
						
					КонецЕсли;
					
				КонецЕсли;	
				ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
				
				ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
				ВходящееСообщениеСВД,
				СостояниеДокумента,
				ИдентификаторСессии, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции	

// Определить значение параметра по переданной строке 
//
// Параметры
//  Текст           – Строка – строка, в которой осуществляется поиск значения
//  ТекстПоиска     - Строка - строка, для которой ищется значение
//
// Возвращаемое значение:
//   СтрокаКоличество   – строка - строковое представление значения
//
Функция ОпределитьЗначениеПараметраВСтроке(Текст, ТекстПоиска)
	
	СтрокаКоличество = "";
	ДлинаТекстаПоиска = СтрДлина(ТекстПоиска) + 1;
	НачальнаяПозиция = Найти(Текст, ТекстПоиска) + ДлинаТекстаПоиска;
	
	Для НомСимвола = НачальнаяПозиция По СтрДлина(Текст) Цикл
		
		Если Сред(Текст, НомСимвола, 1) = "," Тогда
			Если НачальнаяПозиция = НомСимвола Тогда
				СтрокаКоличество = "0";
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		СтрокаКоличество = СтрокаКоличество + Сред(Текст, НомСимвола, 1);
		
	КонецЦикла;
	
	Если ДлинаТекстаПоиска > 0 И Не ЗначениеЗаполнено(СтрокаКоличество) Тогда
		СтрокаКоличество = "0";
	КонецЕсли;	
	
	Возврат СтрокаКоличество;
	
КонецФункции	

// Определяет состав документа по переданной строке
// Параметры:
//   ДокументСсылка     - УправляемаяФорма Входящего, Исходящего или Внутреннего документа - форма документа,
//                          для которого определяется состав
//   СоставСтрока       - Строка - строка определения состава
// 
// Возвращаемое значение:
// - Структура – структура с составом документа и отказом, в случае ошибки.
// 
Процедура ПолучитьСоставДокумента(ДокументСсылка, СоставСтрока) 
	
	ИтКоличествоЛистов = 0;
	ИтКоличествоПриложений = 0;
	ИтКоличествоЭкземпляров = 0;
	ИтЛистовВПриложениях = 0;
	
	Текст = НРег(СоставСтрока);	
	Если Найти(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'")) > 0 Тогда
		КоличествоЛистовВПриложениях = ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'"));
		
		Попытка
			Количество = Число(КоличествоЛистовВПриложениях);
		Исключение
			ИтЛистовВПриложениях = Количество;
			
			Если Найти(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'") + " " + КоличествоЛистовВПриложениях) > 0 Тогда
				Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'") + " " + КоличествоЛистовВПриложениях, "");
			Иначе
				Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'; en = 'sheets in annexes'"), "");
			КонецЕсли;	
		КонецПопытки;	
	Иначе
		ИтЛистовВПриложениях = 0;
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'листов'; en = 'sheets'")) > 0 Тогда
		КоличествоЛистов = ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'листов'; en = 'sheets'"));
		
		Попытка
			Количество = Число(КоличествоЛистов);
			ИтКоличествоЛистов = Количество;
			
			Если Найти(Текст, НСтр("ru = 'листов'; en = 'sheets'") + " " + КоличествоЛистов) > 0 Тогда
				Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'; en = 'sheets'") + " " + КоличествоЛистов, "");
			Иначе
				Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'; en = 'sheets'"), "");
			КонецЕсли;	
		Исключение
			ИтКоличествоЛистов = 0;
		КонецПопытки;	
	Иначе
		ИтКоличествоЛистов = 0;
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'экземпляров'; en = 'instances'")) > 0 Тогда
		КоличествоЭкземпляров = ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'экземпляров'; en = 'instances'"));		
		
		Попытка
			Количество = Число(КоличествоЭкземпляров);
			
			ИтКоличествоЭкземпляров = Количество;
			
			Если Найти(Текст, НСтр("ru = 'экземпляров'; en = 'instances'") + " " + КоличествоЭкземпляров)>0 Тогда
				Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'; en = 'instances'") + " " + КоличествоЭкземпляров, "");
			Иначе
				Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'; en = 'instances'"), "");
			КонецЕсли;
		Исключение
			ИтКоличествоЭкземпляров = 0;		
		КонецПопытки;	
		
	Иначе
		ИтКоличествоЭкземпляров = 0;		
	КонецЕсли;	
	
	Если ИтКоличествоЭкземпляров < 1 Тогда
		ИтКоличествоЭкземпляров = 1;
	КонецЕсли;
	
	Если ИтКоличествоЛистов < 1 Тогда
		ИтКоличествоЛистов = 1;
	КонецЕсли;
	
	Если Найти(НРег(Текст), НСтр("ru = 'приложений'; en = 'annexes'")) > 0 Тогда
		
		КоличествоПриложений = ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'приложений'; en = 'annexes'"));
		
		Попытка
			Количество = Число(КоличествоПриложений);
			ИтКоличествоПриложений = Количество;
			
			Если Найти(Текст, НСтр("ru = 'приложений'; en = 'annexes'") + " " + КоличествоПриложений) > 0 Тогда
				Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'; en = 'annexes'") + " " + КоличествоПриложений, "");
			Иначе
				Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'; en = 'annexes'"), "");
			КонецЕсли;	
		Исключение
			ИтКоличествоПриложений = 0;	
		КонецПопытки;	
		
	Иначе
		ИтКоличествоПриложений = 0;	
	КонецЕсли;
	Текст = СтрЗаменить(Текст, ",", "");
	
	ДокументСсылка.КоличествоЛистов = ИтКоличествоЛистов;
	ДокументСсылка.КоличествоПриложений = ИтКоличествоПриложений;
	ДокументСсылка.КоличествоЭкземпляров = ИтКоличествоЭкземпляров;
	ДокументСсылка.ЛистовВПриложениях = ИтЛистовВПриложениях;
	
КонецПроцедуры

// Создает документ ВходящиеДокументы на основе входящего XDTO
//
// Параметры:
//  XDTOДокументы       - ОбъектXDTO                    - зона DocumentList
//  ОбъектXDTO          - ОбъектXDTO                    - зона объекта XDTO Document
//  ПараметрыДокумента  - Структура                     - заполняемая структура параметров документа на основе входящего XDTO
//  Контрагент          - СправочникСсылка.Контрагенты  - Контрагент отправитель 
//  Организация         - СправочникСсылка.Организации  - Организации отправитель
//  ТаблицаВложенний    - ТаблицаЗначений               - таблица с информацией о приложенных файлах 
// 
// Возвращаемое значение:
//  СправочникСсылка.ВходящиеДокументы -    Созданный входящий документ.
//
Функция СоздатьВходящийИзXDTO2013(XDTOДокументы, ОбъектXDTO, ПараметрыДокумента, Контрагент, Организация, ТаблицаВложенний) Экспорт
	
	ФорматСообщения = ПараметрыДокумента.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
	Документ.ДатаСоздания = ТекущаяДатаСеанса();	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда
		ЗаполнитьСсылочныйРеквизит(Документ.ВидДокумента, ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Group.__content"), 
			"ВидДокумента", Контрагент, Организация, Документ);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		ЗаполнитьСсылочныйРеквизит(Документ.ГрифДоступа, ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Access.__content"), 
			"ГрифДоступа", Контрагент, Организация, Документ);
	КонецЕсли;
	
	Для Каждого ОбъектXDTOAdditionalField из ОбъектXDTO.AdditionalField Цикл
		Если ОбъектXDTOAdditionalField.Name = "ЗаголовокДокумента" и ОбъектXDTOAdditionalField.Type = "Text" Тогда
			ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAdditionalField, "__content", Документ.Заголовок );
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Annotation", Документ.Содержание );
	
	Если не ЗначениеЗаполнено(Документ.Заголовок) Тогда
		Документ.Заголовок = Документ.Содержание;	
	КонецЕсли;
	
	// Состав документа
	СоставСтрока = ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Consists");
	Если СоставСтрока <> Неопределено ТОгда
		ПолучитьСоставДокумента(Документ, СоставСтрока);
	КонецЕсли;
	
	Документ.ИсходящийНомер = ОбъектXDTO.RegistrationInfo.Number;
	Документ.ИсходящаяДата = ОбъектXDTO.RegistrationInfo.Date;
	
	Документ.СпособПолучения = Справочники.СпособыДоставки.СВД;
	
	Документ.Организация = Организация;
	Документ.Отправитель = Контрагент;
	
	Для Каждого ОбъектXDTOAddressee из ОбъектXDTO.Addressee Цикл
		
		Если ОбъектXDTOAddressee.Contact.Organization.ShortName = ПараметрыДокумента.ОрганизацияНаименование Тогда
			
			Адресат = "";
			Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAddressee, "Contact.OfficialPerson.FIO", Адресат) <> Неопределено Тогда
				ЗаполнитьСсылочныйРеквизит(Документ.Адресат, Адресат, "Адресат", Контрагент, Организация, Документ);
			ИначеЕсли ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "PrivatePerson.FIO", Адресат) <> Неопределено Тогда
				ЗаполнитьСсылочныйРеквизит(Документ.Адресат, Адресат, "Адресат", Контрагент, Организация, Документ);
			КонецЕсли;	 
			
			Подразделение = "";
			Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTOAddressee, "Contact.Department.Name", Подразделение) <> Неопределено Тогда
				ЗаполнитьСсылочныйРеквизит(Документ.Подразделение, Подразделение, "Подразделение", 
					Контрагент, Организация, Документ);
			Иначе
				Документ.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Документ.Адресат);
			КонецЕсли;	
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Подписал = "";
	Если ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Author[0].Contact.OfficialPerson.FIO", Подписал) <> Неопределено Тогда 
		ЗаполнитьСсылочныйРеквизит(Документ.Подписал, Подписал, "Подписал", Контрагент, Организация, Документ);
	ИначеЕсли ПолучитьЗначениеЭлементаXDTO(ОбъектXDTO, "Author[0].PrivatePerson.FIO", Подписал) <> Неопределено Тогда
		ЗаполнитьСсылочныйРеквизит(Документ.Подписал, Подписал, "Подписал", Контрагент, Организация, Документ);
	КонецЕсли;	 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ЗаполнитьСсылочныйРеквизит(Документ.ВопросДеятельности, "", "ВопросДеятельности", 
			Контрагент, Организация, Документ);
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.Вставить("ПолученПоСВД", Истина);	
	
	Документ.Записать();
	
	// Link
	СоздатьСвязиДокументов2013(XDTOДокументы, ОбъектXDTO, Документ, ПараметрыДокумента);
	
	МассивСозданныхФайлов = Новый Массив;
	Если ТаблицаВложенний <> Неопределено Тогда 
		Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.File Цикл
			СтрокаТЗФайлов = ТаблицаВложенний.Найти(Строка(ОбъектXDTOФайл.ResourceID), "ResourceID");
			Если СтрокаТЗФайлов <> Неопределено Тогда 
				ФайлСсылка = ДобавитьФайл2013(Документ.Ссылка, СтрокаТЗФайлов);
				МассивСозданныхФайлов.Добавить(ФайлСсылка);
				МассивДанныхДляЗанесенияВБазу = Новый Массив;
				Для Каждого ПодписьXDTO Из ОбъектXDTOФайл.EDS Цикл
					СтрокаТЗФайлов = ТаблицаВложенний.Найти(Строка(ПодписьXDTO.ResourceID), "ResourceID");
					Если СтрокаТЗФайлов <> Неопределено Тогда 
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, 
							|ДатаПодписи, Комментарий, ИмяФайлаПодписи, 
							|КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						ДанныеПодписи.КомуВыданСертификат = ПодписьXDTO.Certificate;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = СтрокаТЗФайлов.ДвоичныеДанныеФайла;
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
					Иначе
					КонецЕсли;
				КонецЦикла;	
				РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	МенеджерЗаписиРегистра = РегистрыСведений.ПроверкаЗагруженныхДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	Если Не МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Объект       = Документ.Ссылка;
		МенеджерЗаписиРегистра.Проверен     = Ложь;
		МенеджерЗаписиРегистра.ДатаЗагрузки = ТекущаяДатаСеанса();
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;
	
	Возврат Документ.Ссылка;
	
КонецФункции

#КонецОбласти 

#КонецОбласти
