////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередЗавершениемРаботыСистемы"].Добавить(
			"РаботаСФайламиСлужебныйКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"РаботаСФайламиСлужебный");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриДобавленииФайловВТомаПриРазмещении"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриУдаленииРегистрацииИзменений"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииТекстаЗапросаДляИзвлеченияТекста"].Добавить(
			"РаботаСФайламиСлужебныйВызовСервера");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииКоличестваВерсийСНеизвлеченнымТекстом"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриЗаписиИзвлеченногоТекста"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииКоличестваФайловВТомах"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииНаличияХранимыхФайлов"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриПолученииХранимыхФайлов"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииНавигационнойСсылкиФайла"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииИмениФайлаСПутемКДвоичнымДанным"].Добавить(
			"РаботаСФайламиСлужебный");
		
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РаботаСФайламиСлужебныйВызовСервера");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"РаботаСФайламиСлужебный");
	
КонецПроцедуры

Процедура ПриСохраненииНастроекРаботыСФайлами(КлючиОбъектовНастроекРаботыСФайлами) Экспорт
	
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла" ,"НастройкиОткрытияФайлов");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ДействиеПоДвойномуЩелчкуМыши",                  "НастройкиОткрытияФайлов");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьКолонкуРазмер" ,                      "НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",     "НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("СпособСравненияВерсийФайлов",                   "НастройкиСравненияФайлов");
	
КонецПроцедуры

// Возвращает Истина, если это элемент данных, относящийся к подсистеме РаботаСФайлами.
//
Функция ЭтоЭлементРаботаСФайлами(ЭлементДанных) 
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов")
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВерсииФайлов");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Только для внутреннего использования.
//
Процедура ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь, Получатель = Неопределено)
	
	// Для обменов не РИБ используется алгоритм обычного сеанса обмена, а не создания начального образа,
	// т.к. параметра СозданиеНачальногоОбраза равный Истина означает начальную выгрузку данных.
	Если СозданиеНачальногоОбраза И Получатель <> Неопределено 
		И Не ОбщегоНазначения.ЭтоУзелРаспределеннойИнформационнойБазы(Получатель.Ссылка) Тогда
		СозданиеНачальногоОбраза = Ложь;
	КонецЕсли;
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если ТипЗнч(Получатель) = Тип("ПланОбменаОбъект.ОбменДокументооборот20Документооборот21") Тогда
			// для плана обмена ОбменДокументооборот20Документооборот21
			//  ничего не делаем.
			Возврат;
		КонецЕсли;	
		
		Если СозданиеНачальногоОбраза Тогда
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				Если Получатель <> Неопределено
					И Получатель.ДополнительныеСвойства.Свойство("РазмещатьФайлыВНачальномОбразе") Тогда
					
					// Помещаем данные файла из тома на диске в служебный реквизит справочника.
					ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
					
				Иначе
					
					// Копируем файл из тома на диске в каталог создания начального образа.
					ИмяКаталогаФайлов = ХранилищеОбщихНастроек.Загрузить("ОбменФайлами", "ВременныйКаталог");
					
					ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу;
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
					
					НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
							ИмяКаталогаФайлов,
							УникальныйИдентификатор);
					
					ФайловыеФункцииСлужебный.СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла);
					
				КонецЕсли;
				
			Иначе
				
				// Если файл хранится в ИБ, то при создании начального образа
				// он будет выгружен в составе регистра сведений ХранимыеФайлыВерсий.
				
			КонецЕсли;
			
		Иначе
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				// Помещаем данные файла из тома на диске в служебный реквизит справочника.
				ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
				
			Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
				
				Попытка
					// Помещаем данные файла из информационной базы в служебный реквизит справочника.
					АдресВоВременномХранилище = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ЭлементДанных.Ссылка);
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
				Исключение
					// Возможно, файл не был найден. Отправку данных не прерываем.
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииДляОбмена(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				КонецПопытки;
				
				ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				ЭлементДанных.ПутьКФайлу = "";
				ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ХранимыеФайлыВерсий")
		И Не СозданиеНачальногоОбраза Тогда
		
		// Выгрузку регистра выполняем только при создании начального образа.
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
//
Процедура ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента, Отправитель) Экспорт
	
	ДанныеДляВосстановленияФайловВТоме = Новый Массив;
	Попытка
	
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			
			// Стандартную обработку не переопределяем.
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Файлы")
			И ПолучениеФайлаЗапрещено(ЭлементДанных) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
			Если ТипЗнч(Отправитель) = Тип("ПланОбменаОбъект.ОбменДокументооборот20Документооборот21") Тогда
				// для плана обмена ОбменДокументооборот20Документооборот21
				//  ничего не делаем.
				Возврат;
			КонецЕсли;	
			
			Если ПолучениеВерсииФайлаЗапрещено(ЭлементДанных) Тогда
				
				ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда

			     // Возможно, файл не был найден. Приемку данных не прерываем.
			     ЗаписьЖурналаРегистрации(
			      НСтр("ru = 'Файлы.Не удалось принять файл при обмене данными'; en = 'Files.Could not receife file during data exchange'",
			           ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			      УровеньЖурналаРегистрации.Ошибка,,ЭлементДанных.Ссылка);
				  
				  Возврат; // ничего не делаем. приемка не прерывается, файл остается старым.
				  
			КонецЕсли;	  

			
			// Для существующих файлов, размещенных в томах, выполняем их удаление из томов,
			// т.к. при получении нового файла он будет заново размещен в томе или информационной базе.
			Если НЕ ЭлементДанных.ЭтоНовый() Тогда
				
				ВерсияФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка, "ТипХраненияФайла, Том, ПутьКФайлу, Расширение");
				
				Если ВерсияФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
					
					РегистрыСведений.ФайлыКУдалению.ЗаписатьФайл(ВерсияФайла.Том, ВерсияФайла.ПутьКФайлу, 
						"ПриПолученииФайла", ЭлементДанных.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// при обмене сюда приходит только ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе
			//  если тип хранения базы-приемника такой же (в базе) - ничего не делаем
			//   а вот если в базе приемнике - тип хранения в томах - то разместим на диске
			Если ФайловыеФункции.ПолучитьТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске
				И Не ЭлементДанных.ФайлУдален Тогда
				// тип отличается от типа по умолчанию для данной базы - поменяем
				
				//ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
				ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				
				Если ЭлементДанных.ЭтоНовый() Тогда // добавлен новый элемент
					
					ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанные", ДвоичныеДанные);
				
				Иначе    
					
					 Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда

					     // Возможно, файл не был найден. Приемку данных не прерываем.
					     ЗаписьЖурналаРегистрации(
					      НСтр("ru = 'Файлы.Не удалось принять файл при обмене данными'; en = 'Files.Could not receife file during data exchange'",
					           ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					      УровеньЖурналаРегистрации.Ошибка);

					Иначе

						// по обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах
						//  - из ФайлХранилище размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске
						
						ВремяИзменения		= ЭлементДанных.ДатаМодификацииУниверсальная;
						РазмерФайла			= ЭлементДанных.Размер;
						ИмяБезРасширения	= ЭлементДанных.Наименование;
						Расширение			= ЭлементДанных.Расширение;
						Зашифрован			= ЭлементДанных.Зашифрован;
						
						ПутьКФайлуНаТоме = "";
						СсылкаНаТом = Неопределено;
						
						// добавить в один из томов (где есть свободное место)
						ФайловыеФункцииПереопределяемый.ДобавитьНаДискПриПолученииДанныхФайла(
							ЭлементДанных, ДвоичныеДанные,
							ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, 
							ИмяБезРасширения, Расширение, РазмерФайла, Зашифрован);
						
						ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
						ЭлементДанных.Том		 = СсылкаНаТом;
						ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ФайловыеФункцииПереопределяемый.ВыполнитьДополнительнуюОбработкуПриПолученииДанных(ЭлементДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		//РаботаСФайламиВызовСервера.ЗафиксироватьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме, "ПриПолученииФайла");
	
	Исключение
		
		//РаботаСФайламиВызовСервера.ОтменитьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме);
		ВызватьИсключение;
		
	КонецПопытки;
		
КонецПроцедуры

// Возвращает объекты, имеющие в наличии присоединенные (средствами подсистемы "Работа с файлами") файлы.
//
// Используется совместно с функцией ПрисоединенныеФайлы.СконвертироватьФайлыВПрисоединенные().
//
// Параметры:
//  ТаблицаВладельцевФайлов - Строка - полное имя объекта метаданных,
//                            который может владеть присоединенными файлами.
//
Функция СсылкиНаОбъектыСФайлами(Знач ТаблицаВладельцевФайлов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыСФайлами.Ссылка КАК Ссылка
	|ИЗ
	|	&Таблица КАК ОбъектыСФайлами
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.Файлы КАК Файлы
	|			ГДЕ
	|				Файлы.ВладелецФайла = ОбъектыСФайлами.Ссылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ТаблицаВладельцевФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Используется при выгрузке файлов для перехода в сервис (БТС).
//
Процедура ВыгрузитьФайл(Знач ОбъектФайла, Знач ИмяНовогоФайла) Экспорт
	
	Если ОбъектФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ОбъектФайла.Том) + ОбъектФайла.ПутьКФайлу;
		КопироватьФайл(ПолныйПуть, ИмяНовогоФайла);
		
	Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
		
		АдресВоВременномХранилище = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ОбъектФайла.Ссылка);
		ПолучитьИзВременногоХранилища(АдресВоВременномХранилище).Записать(ИмяНовогоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется при загрузке файлов для переходе в сервис (БТС).
//
Процедура ЗагрузитьФайл(Знач ОбъектФайла, Знач ПутьКФайлу) Экспорт
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	Если ФайловыеФункцииСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		// Добавление файла в один из томов (где есть свободное место).
		СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, 
			ОбъектФайла.ДатаМодификацииУниверсальная, ОбъектФайла.Наименование, ОбъектФайла.Расширение,
			ОбъектФайла.НомерВерсии, ОбъектФайла.Зашифрован); 
		ОбъектФайла.Том = СведенияОФайле.Том;
		ОбъектФайла.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		ОбъектФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		ОбъектФайла.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
		
	Иначе
		
		ОбъектФайла.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанные);
		ОбъектФайла.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
		ОбъектФайла.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ОбъектФайла.ПутьКФайлу = "";
		ОбъектФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему

// Записывает вложения в папку.
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов".
//
Процедура ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	// Перенос вложений в таблицу
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла",              Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("ПолныйПутьКФайлу",      Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("Файл",                  Новый ОписаниеТипов("Файл"));
	ТаблицаВложений.Колонки.Добавить("ФайлСсылка",            Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	ТаблицаВложений.Колонки.Добавить("ИмяФайлаБезРасширения", Метаданные.Справочники.Файлы.Реквизиты.ПолноеНаименование.Тип);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Вложение Из Вложения Цикл
		СтрокаТаблицы = ТаблицаВложений.Добавить();
		СтрокаТаблицы.ИмяФайла              = Вложение.Ключ;
		СтрокаТаблицы.ПолныйПутьКФайлу      = Вложение.Значение;
		СтрокаТаблицы.Файл                  = Новый Файл(СтрокаТаблицы.ПолныйПутьКФайлу);
		СтрокаТаблицы.ИмяФайлаБезРасширения = СтрокаТаблицы.Файл.ИмяБезРасширения;
	КонецЦикла;
	
	// Поиск существующих файлов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПолноеНаименование В(&МассивИменФайлов)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыДоставки.Папка);
	Запрос.УстановитьПараметр("МассивИменФайлов", ТаблицаВложений.ВыгрузитьКолонку("ИмяФайлаБезРасширения"));
	
	СуществующиеФайлы = Запрос.Выполнить().Выгрузить();
	Для Каждого Файл Из СуществующиеФайлы Цикл
		СтрокаТаблицы = ТаблицаВложений.Найти(Файл.ПолноеНаименование, "ИмяФайлаБезРасширения");
		СтрокаТаблицы.ФайлСсылка = Файл.Ссылка;
	КонецЦикла;
	
	Комментарий = СтрШаблон(
		НСтр("ru = 'Рассылка отчетов %1 от %2'; en = 'Report delivery %1 from %2'"),
		"'"+ ПараметрыДоставки.Рассылка +"'",
		Формат(ПараметрыДоставки.ДатаВыполнения, "ДЛФ=DT"));
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Вложение.Файл);
		СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.ПолныйПутьКФайлу));
		СведенияОФайле.ИмяБезРасширения = Вложение.ИмяФайлаБезРасширения;
		СведенияОФайле.Комментарий = Комментарий;
		
		// Запись
		Если ЗначениеЗаполнено(Вложение.ФайлСсылка) Тогда
			ВерсияСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьВерсию(Вложение.ФайлСсылка, СведенияОФайле);
			РаботаСФайламиСлужебныйВызовСервера.ОбновитьВерсиюВФайле(Вложение.ФайлСсылка, ВерсияСсылка, СведенияОФайле.АдресВременногоХранилищаТекста);
		Иначе
			Вложение.ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ПараметрыДоставки.Папка, СведенияОФайле); 
		КонецЕсли;
		
		// Заполнение ссылки на файл
		Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Вложение.ПолныйПутьКФайлу,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(Вложение.ФайлСсылка));
		КонецЕсли;
		
		// Очистка
		УдалитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает пометку удаления всем версиям указанного файла.
Процедура ПометитьНаУдалениеВерсииФайла(Знач ФайлСсылка, Знач ВерсияИсключение) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &Владелец
	|	И НЕ ВерсииФайлов.ПометкаУдаления
	|	И ВерсииФайлов.Ссылка <> &Исключение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Запрос.УстановитьПараметр("Исключение", ВерсияИсключение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияОбъект.ПометкаУдаления = Истина;
		ВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
		ВерсияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ПапкиФайлов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Файлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ВерсииФайлов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

Процедура СформироватьТекстЗапросаПолногоОбъемаФайлов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ВладелецФайла,
		|	СУММА(ВерсииФайлов.Размер / 1024 / 1024) КАК ОбъемВсего
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.Ссылка = ВерсииФайлов.Владелец
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И НЕ ВерсииФайлов.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла)";
	
КонецПроцедуры

Функция ПроверитьЦелостностьФайлов(ТаблицаФайловНаДиске, Том) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу,
		|	ВерсииФайлов.Расширение,
		|	ВерсииФайлов.Наименование,
		|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
		|	ВерсииФайлов.Представление,
		|	ВерсииФайлов.Том,
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.ДатаМодификацииФайла,
		|	ВерсииФайлов.Автор КАК Отредактировал
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|	И ВерсииФайлов.Том = &Том";
		
	Запрос.УстановитьПараметр("Том", Том);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПолныйПутьТома = ФайловыеФункцииСлужебный.ПолныйПутьТома(Том);
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ПутьКФайлу   = Выборка.ПутьКФайлу;
		
		Если ЗначениеЗаполнено(Выборка.ПутьКФайлу) И ЗначениеЗаполнено(Выборка.Том) Тогда
			
			// Удаляем лишнюю точку, если у файла нет расширения.
			Если ВерсияСсылка.Расширение = "" И СтрЗаканчиваетсяНа(ПутьКФайлу, ".") Тогда
				ПутьКФайлу = Лев(ПутьКФайлу, СтрДлина(ПутьКФайлу) - 1);
			КонецЕсли;
			
			ПолныйПутьФайла = ПолныйПутьТома + ПутьКФайлу;
			СуществующийФайл = ТаблицаФайловНаДиске.НайтиСтроки(Новый Структура("ПолноеИмя", ПолныйПутьФайла));
			
			Если СуществующийФайл.Количество() = 0 Тогда
				
				НесуществующийФайл = ТаблицаФайловНаДиске.Добавить();
				НесуществующийФайл.СтатусПроверки = НСтр("ru = 'Отсутствуют данные в томе на диске'; en = 'There is no data on the disk volume'");
				НесуществующийФайл.Файл = ВерсияСсылка;
				НесуществующийФайл.ПолноеИмя = ПолныйПутьФайла;
				НесуществующийФайл.Расширение = ВерсияСсылка.Расширение;
				НесуществующийФайл.Имя = ВерсияСсылка.Наименование;
				НесуществующийФайл.Том = Том;
				НесуществующийФайл.Отредактировал = Выборка.Отредактировал;
				НесуществующийФайл.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
				НесуществующийФайл.Количество = 1;
			Иначе
				
				СуществующийФайл[0].Файл = ВерсияСсылка;
				СуществующийФайл[0].СтатусПроверки = НСтр("ru = 'Целостные данные'; en = 'Holistic data'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция ВозможностьСозданияПапки(ОбъектВладелец) Экспорт
	
	Если ОбъектВладелец = Неопределено Тогда
		Возврат Ложь;
	Иначе 
		Возврат ТипЗнч(ОбъектВладелец) = Тип("СправочникСсылка.ПапкиФайлов");
	КонецЕсли;
	
КонецФункции

Функция ОбъектЯвляетсяФайлом(ОбъектВладелец) Экспорт
	
	МассивТиповФайлов = Метаданные.Справочники.Файлы.Реквизиты.ВладелецФайла.Тип.Типы();
	Возврат МассивТиповФайлов.Найти(ТипЗнч(ОбъектВладелец)) <> Неопределено;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	КоличествоЗанятыхФайлов = 0;
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		КоличествоЗанятыхФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, Пользователь);
	КонецЕсли;
	
	Параметры.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты
// метаданных, но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.ПолноеИмя());
	
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа".
//
Процедура ПриДобавленииФайловВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске);
	
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа".
//
Процедура ПриУдаленииРегистрацииИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьРегистрациюИзменений(ПланОбменаСсылка);
	
КонецПроцедуры

// Возвращает текст запроса для извлечения текста
//
Процедура ПриОпределенииТекстаЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ВерсииФайлов.Ссылка КАК Ссылка,
	|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
	|	ВерсииФайлов.Расширение КАК Расширение,
	|	ВерсииФайлов.Владелец.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	(ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ВерсииФайлов.Зашифрован";
	
	Если ПолучитьВсеФайлы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом.
//
Процедура ПриОпределенииКоличестваВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	ЧислоВерсий = ЧислоВерсий + РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	
КонецПроцедуры

// Записывает извлеченный текст.
//
Процедура ПриЗаписиИзвлеченногоТекста(ФайлОбъект) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлОбъект) Тогда
		РаботаСФайламиСлужебныйВызовСервера.ПриЗаписиИзвлеченногоТекста(ФайлОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
//
Процедура ПриОпределенииКоличестваФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ПриОпределенииНаличияХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПриПолученииХранимыхФайлов(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище).
//
Процедура ПриОпределенииНавигационнойСсылкиФайла(ФайлСсылка, УникальныйИдентификатор, НавигационнаяСсылка) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		НавигационнаяСсылка = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Получает полный путь к файлу на диске.
//
Процедура ПриОпределенииИмениФайлаСПутемКДвоичнымДанным(ФайлСсылка, ПутьКФайлу, ПустойПутьДляПустыхДанных = Ложь) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		ПутьКФайлу = РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка, ПустойПутьДляПустыхДанных);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
//
Процедура ПриОпределенииДвоичныхДанныхФайлаИПодписи(ДанныеСтроки, ДанныеФайлаИПодписи) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ДанныеСтроки.Объект) Тогда
		ДанныеФайлаИПодписи = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описания возможных прав, назначаемых для объектов, указанных типов.
// 
// Параметры:
//  ВозможныеПрава - ТаблицаЗначений, содержащая поля,
//                   описание которых  см. в комментарии к функции.
//                   РегистрыСведений.НастройкиПравОбъектов.ВозможныеПрава().
//
Процедура ПриЗаполненииВозможныхПравДляНастройкиПравОбъектов(ВозможныеПрава) Экспорт
	
	////////////////////////////////////////////////////////////
	// Справочник.ПапкиФайлов
	
	// Право "Чтение папок и файлов".
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "Чтение";
	Право.Заголовок     = НСтр("ru = 'Чтение'; en = 'Read'");
	Право.Подсказка     = НСтр("ru = 'Чтение папок и файлов'; en = 'Read folders and files'");
	Право.НачальноеЗначение = Истина;
	// Права для стандартных шаблонов ограничений доступа.
	Право.ЧтениеВТаблицах.Добавить("*");
	
	// Право "Изменение папок"
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ИзменениеПапок";
	Право.Заголовок     = НСтр("ru = 'Изменение
	                                 |папок'; en = 'Changing folders'");
	Право.Подсказка     = НСтр("ru = 'Добавление, изменение и
	                                 |пометка удаления папок файлов'; en = 'Adding, modifying, and marking for deletion file folders'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("Чтение");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ИзменениеВТаблицах.Добавить(Метаданные.Справочники.ПапкиФайлов.ПолноеИмя());
	
	// Право "Изменение файлов"
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ИзменениеФайлов";
	Право.Заголовок     = НСтр("ru = 'Изменение
	                                 |файлов'; en = 'Modified files'");
	Право.Подсказка     = НСтр("ru = 'Изменение файлов в папке'; en = 'Change the files in a folder'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("Чтение");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ИзменениеВТаблицах.Добавить("*");
	
	// Право "Добавление файлов"
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ДобавлениеФайлов";
	Право.Заголовок     = НСтр("ru = 'Добавление
	                                 |файлов'; en = 'Adding files'");
	Право.Подсказка     = НСтр("ru = 'Добавление файлов в папку'; en = 'Add files to a folder'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ИзменениеФайлов");
	
	// Право "Пометка удаления файлов".
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ПометкаУдаленияФайлов";
	Право.Заголовок     = НСтр("ru = 'Пометка
	                                 |удаления'; en = 'Marking for deletion'");
	Право.Подсказка     = НСтр("ru = 'Пометка удаления файлов в папке'; en = 'Mark to delete files in the folder'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ИзменениеФайлов");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "УправлениеПравами";
	Право.Заголовок     = НСтр("ru = 'Управление
	                                 |правами'; en = 'Rights management'");
	Право.Подсказка     = НСтр("ru = 'Управление правами папки'; en = 'Manage folders permissions'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("Чтение");
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы.
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта].
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал. Этот вид доступа используется в
//                 шаблонах ограничений доступа, как "ссылка" на другой объект, по которому
//                 ограничивается текущий объект таблицы.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц,
//                 которые используются для этого вида доступа. Т.е. перечислить типы,
//                 которые соответствуют полю, использованному в шаблоне ограничения доступа
//                 в паре с видом доступа "Объект". При перечислении типов по виду доступа "Объект"
//                 нужно перечислить только те типы поля, которые есть у поля.
//                 РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Справочник.ПапкиФайлов.Чтение.НастройкиПрав.Справочник.ПапкиФайлов
		|Справочник.ПапкиФайлов.Изменение.НастройкиПрав.Справочник.ПапкиФайлов
		|Справочник.ВерсииФайлов.Чтение.Объект.Справочник.ПапкиФайлов
		|Справочник.ВерсииФайлов.Изменение.Объект.Справочник.ПапкиФайлов
		|Справочник.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
		|Справочник.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
		|РегистрСведений.ХранимыеФайлыВерсий.Чтение.Объект.Справочник.ПапкиФайлов
		|";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		Описание = Описание + "
			|Справочник.ВерсииФайлов.Чтение.Объект.БизнесПроцесс.Задание
			|Справочник.ВерсииФайлов.Изменение.Объект.БизнесПроцесс.Задание
			|Справочник.Файлы.Чтение.Объект.БизнесПроцесс.Задание
			|Справочник.Файлы.Изменение.Объект.БизнесПроцесс.Задание
			|РегистрСведений.ХранимыеФайлыВерсий.Чтение.Объект.БизнесПроцесс.Задание
			|";
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты - Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.РегистрыСведений.ХранимыеФайлыВерсий);
	
КонецПроцедуры

// Заполняет перечень обработчиков интеграции подсистемы.
// "ТехнологияСервиса.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса"
//
// Параметры:
//  Обработчики - Массив(Строка), имя общего модуля обработчика,
//
Процедура ПриЗаполненииОбработчиковИнтеграцииФайловыхФункцийВМоделиСервиса(Обработчики) Экспорт
	
	Обработчики.Добавить("РаботаСФайламиСлужебный");
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Работа с кодировками

// Функция возвращает таблицу имен кодировок.
// Возвращаемое значение:
// Результат (СписокЗначений)
// - Значение (Строка) - например "ibm852".
// - Представление (Строка) - например "ibm852 (Центральноевропейская DOS)".
//
Функция Кодировки() Экспорт

	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",       НСтр("ru = 'IBM852 (Центральноевропейская DOS)'; en = 'IBM852 (DOS Central European)'"));
	СписокКодировок.Добавить("ibm866",       НСтр("ru = 'IBM866 (Кириллица DOS)'; en = 'IBM866 Cyrillic (DOS)'"));
	СписокКодировок.Добавить("iso-8859-1",   НСтр("ru = 'ISO-8859-1 (Западноевропейская ISO)'; en = 'ISO-8859-1 (Western European ISO)'"));
	СписокКодировок.Добавить("iso-8859-2",   НСтр("ru = 'ISO-8859-2 (Центральноевропейская ISO)'; en = 'ISO-8859-2 (Central European ISO)'"));
	СписокКодировок.Добавить("iso-8859-3",   НСтр("ru = 'ISO-8859-3 (Латиница 3 ISO)'; en = 'ISO-8859-3 (Latin 3 ISO)'"));
	СписокКодировок.Добавить("iso-8859-4",   НСтр("ru = 'ISO-8859-4 (Балтийская ISO)'; en = 'ISO-8859-4 (Baltic)'"));
	СписокКодировок.Добавить("iso-8859-5",   НСтр("ru = 'ISO-8859-5 (Кириллица ISO)'; en = 'ISO-8859-5 Cyrillic (ISO)'"));
	СписокКодировок.Добавить("iso-8859-7",   НСтр("ru = 'ISO-8859-7 (Греческая ISO)'; en = 'ISO-8859-7 (Greek ISO)'"));
	СписокКодировок.Добавить("iso-8859-9",   НСтр("ru = 'ISO-8859-9 (Турецкая ISO)'; en = 'ISO-8859-9 (Turkish)'"));
	СписокКодировок.Добавить("iso-8859-15",  НСтр("ru = 'ISO-8859-15 (Латиница 9 ISO)'; en = 'ISO-8859-15 (Latin 9 ISO)'"));
	СписокКодировок.Добавить("koi8-r",       НСтр("ru = 'KOI8-R (Кириллица KOI8-R)'; en = 'KOI8-R Cyrillic (KOI8-R)'"));
	СписокКодировок.Добавить("koi8-u",       НСтр("ru = 'KOI8-U (Кириллица KOI8-U)'; en = 'KOI8-U (Cyrillic KOI8-U)'"));
	СписокКодировок.Добавить("us-ascii",     НСтр("ru = 'US-ASCII (США)'; en = 'US-ASCII (United States)'"));
	СписокКодировок.Добавить("utf-8",        НСтр("ru = 'UTF-8 (Юникод UTF-8)'; en = 'UTF-8 (Unicode UTF-8)'"));
	СписокКодировок.Добавить("windows-1250", НСтр("ru = 'Windows-1250 (Центральноевропейская Windows)'; en = 'Windows-1250 (Windows Central European)'"));
	СписокКодировок.Добавить("windows-1251", НСтр("ru = 'windows-1251 (Кириллица Windows)'; en = 'windows-1251 Cyrillic (windows)'"));
	СписокКодировок.Добавить("windows-1252", НСтр("ru = 'Windows-1252 (Западноевропейская Windows)'; en = 'Windows-1252 (Windows Western)'"));
	СписокКодировок.Добавить("windows-1253", НСтр("ru = 'Windows-1253 (Греческая Windows)'; en = 'Windows-1253 (Windows Greek)'"));
	СписокКодировок.Добавить("windows-1254", НСтр("ru = 'Windows-1254 (Турецкая Windows)'; en = 'Windows-1254 (Windows Turkish)'"));
	СписокКодировок.Добавить("windows-1257", НСтр("ru = 'Windows-1257 (Балтийская Windows)'; en = 'Windows-1257 (Windows Baltic)'"));
	
	Возврат СписокКодировок;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Обработчик подписки "при записи" версии файла.
//
Процедура ВерсииФайловПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПереименованиеФайла") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	// копируем реквизиты из версии в файл.
	ТекущаяВерсия = Источник;
	Если Не ТекущаяВерсия.Ссылка.Пустая() Тогда
	
		ФайлСсылка = Источник.Владелец;
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, 
			"ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания, ТекущаяВерсияАвтор, ТекущаяВерсияРасширение, ТекущаяВерсияНомерВерсии, ТекущаяВерсияТом, ТекущаяВерсияПутьКФайлу, ТекущаяВерсияКод, ТекущаяВерсияДатаМодификацииФайла");
			
			Если РеквизитыФайла.ТекущаяВерсияРазмер <> ТекущаяВерсия.Размер 
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаСоздания <> ТекущаяВерсия.ДатаСоздания
				ИЛИ РеквизитыФайла.ТекущаяВерсияРасширение <> ТекущаяВерсия.Расширение
				ИЛИ РеквизитыФайла.ТекущаяВерсияНомерВерсии <> ТекущаяВерсия.НомерВерсии
				ИЛИ РеквизитыФайла.ТекущаяВерсияТом <> ТекущаяВерсия.Том
				ИЛИ РеквизитыФайла.ТекущаяВерсияПутьКФайлу <> ТекущаяВерсия.ПутьКФайлу 
				ИЛИ РеквизитыФайла.ТекущаяВерсияКод <> ТекущаяВерсия.Код
				ИЛИ РеквизитыФайла.ИндексКартинки <> ТекущаяВерсия.ИндексКартинки
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаМодификацииФайла <> ТекущаяВерсия.ДатаМодификацииФайла Тогда
				
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
				
				// Сменим индекс картинки, возможно, появилась версия или сменился индекс картинки у версии.
				ФайлОбъект.ИндексКартинки = ТекущаяВерсия.ИндексКартинки;
				
				// копируем реквизиты для ускорения работы RLS.
				ФайлОбъект.ТекущаяВерсияРазмер = ТекущаяВерсия.Размер;
				ФайлОбъект.ТекущаяВерсияДатаСоздания = ТекущаяВерсия.ДатаСоздания;
				ФайлОбъект.ТекущаяВерсияАвтор = ТекущаяВерсия.Автор;
				ФайлОбъект.ТекущаяВерсияРасширение = ТекущаяВерсия.Расширение;
				ФайлОбъект.ТекущаяВерсияНомерВерсии = ТекущаяВерсия.НомерВерсии;
				ФайлОбъект.ТекущаяВерсияТом = ТекущаяВерсия.Том;
				ФайлОбъект.ТекущаяВерсияПутьКФайлу = ТекущаяВерсия.ПутьКФайлу;
				ФайлОбъект.ТекущаяВерсияКод = ТекущаяВерсия.Код;
				ФайлОбъект.ТекущаяВерсияДатаМодификацииФайла = ТекущаяВерсия.ДатаМодификацииФайла;
				
				Если Источник.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта",
						Источник.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта);
				КонецЕсли;
				
				ФайлОбъект.Записать();
			КонецЕсли;
		
	КонецЕсли;
		
	ПриОбновленииСостоянияОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// Проверяет право текущего пользователя
// при использовании ограничения для папки или файла.
//
// Параметры:
//   Папка - СправочникСсылка.ПапкиФайлов, СправочникСсылка.Файлы - Папка файлов.
//       - СправочникСсылка - Владелец файлов.
//
// Места использования:
//   РассылкаОтчетов.ЗаполнитьПараметрыРассылкиПараметрамиПоУмолчанию().
//   Справочник.РассылкиОтчетов.Формы.ФормаЭлемента.ПравоИзмененияПапкиИФайлов().
//
Функция ПравоДобавленияФайловВПапку(Папка) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Проверяет право текущего пользователя
// при использовании ограничения для папки или файла.
// 
// Параметры:
//  Право        - Имя права.
//  ВладелецПрав - СправочникСсылка.ПапкиФайлов, СправочникСсылка.Файлы,
//                 <ссылка на владельца>.
//
Функция ЕстьПраво(Право, ВладелецПрав) Экспорт
	
	Если ТипЗнч(ВладелецПрав) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		
		Если НЕ МодульУправлениеДоступом.ЕстьПраво(Право, ВладелецПрав) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Добавляет и удаляет записи в регистр сведений ОчередьИзвлеченияТекста при изменении
// состояние извлечения текста версий файлов.
//
// Параметры:
//	ИсточникТекста - СправочникСсылка.ВерсииФайлов, СправочникСсылка.*ПрисоединенныеФайлы,
//		файл, у которого изменилось состояние извлечения текста.
//	СостояниеИзвлеченияТекста - ПеречислениеСсылка.СтатусыИзвлеченияТекстаФайлов, новый
//		статус извлечения текста у файла.
//
Процедура ПриОбновленииСостоянияОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста) 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса") Тогда
		
		Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
			МодульФайловыеФункцииСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебныйВМоделиСервиса");
			МодульФайловыеФункцииСлужебныйВМоделиСервиса.ОбновитьСостояниеОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияФайла.Установить(Источник.Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ВерсияФайла = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучениеФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	      И Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	             ЭлементДанных.ТекущаяВерсияРасширение, Ложь);
	
КонецФункции

Функция ПолучениеВерсииФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	      И Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	             ЭлементДанных.Расширение, Ложь);
	
КонецФункции

Процедура ПоместитьФайлВРеквизитСправочника(ЭлементДанных)
	
	Попытка
		// Помещаем данные файла из тома на диске в служебный реквизит справочника.
		ЭлементДанных.ФайлХранилище = ФайловыеФункцииСлужебный.ПоместитьДвоичныеДанныеВХранилище(ЭлементДанных.Том, ЭлементДанных.ПутьКФайлу, ЭлементДанных.Ссылка.УникальныйИдентификатор());
	Исключение
		// Возможно, файл не был найден. Отправку данных не прерываем.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииДляОбмена(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецПопытки;
	
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрацииДляОбмена() 
	
	Возврат НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'; en = 'Files.Could not send file during data exchange'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
