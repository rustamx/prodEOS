#Область ПрограммныйИнтерфейс

// Возвращает наименование разреза доступа по ссылке на значение доступа.
// Используется для СКД отчетов.
// 
Функция НаименованиеРазрезаДоступаПоЗначению(ЗначениеДоступа) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ЗначениеДоступа) Тогда
		ВидДоступа = ДокументооборотПраваДоступа.РазрезДоступаПоЗначению(ЗначениеДоступа);
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДоступа, "Наименование")
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает предметы доступа, для которых используется уровень доступа "Регистрация".
// 
// Возвращаемое значение - СписокЗначений - список идентификаторов объектов метаданных.
// 
Функция ПредметыДоступаИспользующиеРегистрацию() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВнутренниеДокументы));
	
	Результат.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВходящиеДокументы));
	
	Результат.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ИсходящиеДокументы));
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив элементов, от которых переданный наследует разрешения доступа и полномочия.
// 
// Параметры:
//  ВладелецНастройки - ОпределяемыйТип.КонтейнерыПользователей - элемент, который наследует настройки.
//
// Возвращаемое значение:
//  Массив - массив элементов, от которых переданный наследует разрешения доступа и полномочия.
// 
Функция ВладельцыНаследуемыхРазрешенийДоступа(ВладелецНастройки) Экспорт
	
	Результат = Новый Массив;
	
	ТипЭлемента = ТипЗнч(ВладелецНастройки);

	Если ТипЭлемента = Тип("СправочникСсылка.Пользователи") Тогда
		
		Результат = ПользователиДокументооборот.КонтейнерыПользователя(ВладелецНастройки);
		НайденныйЭлемент = Результат.Найти(ВладелецНастройки);
		Если НайденныйЭлемент <> Неопределено Тогда
			Результат.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.РабочиеГруппы")
		Или ТипЭлемента = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Результат = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(ВладелецНастройки);
		//Результат.Добавить(Справочники.РабочиеГруппы.ВсеПользователи);
		
	Иначе
		
		Результат.Добавить(Справочники.РабочиеГруппы.ВсеПользователи);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает условное оформление для списка разрешений доступа.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеПолномочий(УсловноеОформление) Экспорт
	
	// Унаследованные полномочия.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Полномочия.Пометка");
	ЭлементОтбора.ПравоеЗначение = 2;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Полномочия");
	
	ЭлементЦветаОформления = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ИнформационнаяНадпись;
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

// Устанавливает условное оформление для списка разрешений доступа.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеРазрешений(УсловноеОформление) Экспорт
	
	// Унаследованные разрешения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияДоступа.УровеньДоступаУнаследованный");
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РазрешенияДоступа");
	
	ЭлементЦветаОформления = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ИнформационнаяНадпись;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Назначенные разрешения.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ЭлементОтбора1 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияДоступа.УровеньДоступаСобственный");
	ЭлементОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора1.ПравоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияДоступа.УровеньДоступаУнаследованный");
	
	ЭлементОтбора2 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияДоступа.УровеньДоступаСобственный");
	ЭлементОтбора2.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора2.ПравоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенияДоступа.УровеньДоступаРодителя");
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РазрешенияДоступа");
	
	ЭлементЦветаОформления = ЭлементОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = ШрифтыСтиля.СобственныеРазрешенияДоступаШрифт;
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти
