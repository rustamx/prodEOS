
#Область ПрограммныйИнтерфейс

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания ОтправкаPushУведомлений
Процедура ОтправкаPushУведомлений() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();

	Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") = Ложь Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОтправкуPushУведомленийМобильнымУстройствам();

КонецПроцедуры

// Обработчик регламентного задания СозданиеСообщенийPushУведомленийОНовыхПисьмах
//
Процедура СозданиеPushУведомленийОНовыхПисьмах() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();

	Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") = Ложь Тогда
		Возврат;
	КонецЕсли;

	СоздатьPushУведомленияОНовыхПисьмах();

КонецПроцедуры

#КонецОбласти

// Процедура - Записать сообщение в регистр PushУведомления
//
// Параметры:
//  Пользовать	 - СправочникСсылка.Пользователи - Ссылка на пользователя для которого формируется сообщение
//  Объект		 - СправочникСсылка - Ссылка на объект уведомления
//  Дата		 - Дата - Планируемая дата отправки уведомления
//  Сообщение	 - Строка - Текст сообщения
//
Процедура ЗаписатьСообщениеВРегистрPushУведомления(Пользователь, Объект, Дата, Сообщение) Экспорт

	Запись = РегистрыСведений.СообщенияPushУведомлений.СоздатьМенеджерЗаписи();

	Запись.Пользователь = Пользователь;
	Запись.ОбъектУведомления = Объект;
	Запись.ДатаОтправки = Дата;
	Запись.Сообщение = Сообщение;

	Запись.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создание сообщений push уведомлений о новых письмах
Процедура СоздатьPushУведомленияОНовыхПисьмах()

	// Читаем данные одним запросом.
	УстановитьПривилегированныйРежим(Истина);

	// Выбираем всех пользователей у которых есть узлы мобильных с установленным флагом 
	// идентификатора Push. Выбираем все учетные записи по пользователям.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ СписокПользователей
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	НЕ Мобильный.ПометкаУдаления
		|	И Мобильный.ИдентификаторУстановлен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.Пользователь,
		|	ЛОЖЬ КАК Уведомлять,
		|	ЕСТЬNULL(ОбработкаНовыхПисемДляОтправкиPushУведомлений.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПроверки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработкаНовыхПисемДляОтправкиPushУведомлений КАК ОбработкаНовыхПисемДляОтправкиPushУведомлений
		|		ПО УчетныеЗаписиЭлектроннойПочты.Пользователь = ОбработкаНовыхПисемДляОтправкиPushУведомлений.Пользователь
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.Ссылка.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.Пользователь В
		|			(ВЫБРАТЬ
		|				СписокПользователей.Пользователь
		|			ИЗ
		|				СписокПользователей КАК СписокПользователей)";

	ТаблицаДанных = Запрос.Выполнить().Выгрузить();

	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МинимальнаяДата = ТекущаяДатаСеанса() - 86400;

	// Обходим всех пользователей и проверяем есть ли у них настройка отправки Push уведомлений
	// о письмах. Устанавливаем дату с которой нужно уведомлять о новых письмах для каждой
	// учетной записи.
	Для каждого СтрокаТЧ Из ТаблицаДанных Цикл

		СтрокаТЧ.ДатаПроверки = Макс(МинимальнаяДата, СтрокаТЧ.ДатаПроверки);
		СтрокаТЧ.Уведомлять   = 
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ВстроеннаяПочта/ОтправлятьОповещениеОПриходеПисьмаИспользуяPush",
				Строка(СтрокаТЧ.УчетнаяЗапись), Ложь, ,Строка(СтрокаТЧ.Пользователь));

	КонецЦикла;

	// Проверка входящих писем.
	ЗапросПисьма = Новый Запрос;
	ЗапросПисьма.УстановитьПараметр("Дата", МинимальнаяДата);
	ЗапросПисьма.УстановитьПараметр("Пользователи", ТаблицаДанных.ВыгрузитьКолонку("Пользователь"));
	ЗапросПисьма.УстановитьПараметр("ТаблицаЗаписей", ТаблицаДанных);
	ЗапросПисьма.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Пользователь КАК Пользователь,
		|	ТаблицаЗаписей.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ТаблицаЗаписей.Уведомлять,
		|	ТаблицаЗаписей.ДатаПроверки
		|ПОМЕСТИТЬ ТаблицаЗаписей
		|ИЗ
		|	&ТаблицаЗаписей КАК ТаблицаЗаписей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь,
		|	УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Пользователь,
		|	ТаблицаЗаписей.УчетнаяЗапись,
		|	ТаблицаЗаписей.Уведомлять,
		|	ТаблицаЗаписей.ДатаПроверки
		|ИЗ
		|	ТаблицаЗаписей КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Уведомлять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь,
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Папка
		|ПОМЕСТИТЬ СинхронизируемыеПапки
		|ИЗ
		|	РегистрСведений.СинхронизацияПапокПисемСМобильнымКлиентом 
		|		КАК СинхронизацияПапокПисемСМобильнымКлиентом
		|ГДЕ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь В(&Пользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВходящееПисьмо.Дата КАК Дата,
		|	ВходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВходящееПисьмо.Тема КАК Тема,
		|	ВходящееПисьмо.ОтправительАдресат КАК ОтправительАдресат,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтено,
		|	ВЫБОР
		|		КОГДА ВходящееПисьмо.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПисем.Высокая)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Важное,
		|	ТаблицаЗаписей.Пользователь,
		|	ПисьмаВПапках.Папка
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (СведенияОПрочтении.Объект = ВходящееПисьмо.Ссылка)
		|			И (СведенияОПрочтении.Пользователь В
		|				(ВЫБРАТЬ
		|					ТаблицаЗаписей.Пользователь
		|				ИЗ
		|					ТаблицаЗаписей КАК ТаблицаЗаписей))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаписей КАК ТаблицаЗаписей
		|		ПО ВходящееПисьмо.УчетнаяЗапись = ТаблицаЗаписей.УчетнаяЗапись
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВПапках КАК ПисьмаВПапках
		|		ПО ВходящееПисьмо.Ссылка = ПисьмаВПапках.Письмо
		|ГДЕ
		|	ВходящееПисьмо.Дата > &Дата
		|	И НЕ ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ)
		|	И ВходящееПисьмо.УчетнаяЗапись В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаписей.УчетнаяЗапись
		|			ИЗ
		|				ТаблицаЗаписей КАК ТаблицаЗаписей)
		|	И НЕ ВходящееПисьмо.ПометкаУдаления
		|	И ПисьмаВПапках.Папка В
		|			(ВЫБРАТЬ
		|				СинхронизируемыеПапки.Папка
		|			ИЗ
		|				СинхронизируемыеПапки КАК СинхронизируемыеПапки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Выборка = ЗапросПисьма.Выполнить().Выбрать();
	
	ДатаСеанса = ТекущаяДатаСеанса();

	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Пользователь, УчетнаяЗапись", 
			Выборка.Пользователь, Выборка.УчетнаяЗапись);

		Строки = ТаблицаДанных.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Выборка.Дата <= Строки[0].ДатаПроверки Тогда
			Продолжить;
		КонецЕсли;

		Сообщение = СтрШаблон("%1 от %2, %3",
			?(Выборка.Важное, НСтр("ru = 'Важное письмо'; en = 'Important email'"), Нстр("ru = 'Письмо'; en = 'Email'")),
			Выборка.ОтправительАдресат, Выборка.Тема);

		ЗаписатьСообщениеВРегистрPushУведомления(Выборка.Пользователь, 
			Выборка.Ссылка, ТекущаяДата() + 10, Сообщение);

	КонецЦикла;

	ТаблицаДанных.Свернуть("Пользователь");
	Для каждого СтрокаТЧ Из ТаблицаДанных Цикл

		МенеджерЗаписи = 
			РегистрыСведений.ОбработкаНовыхПисемДляОтправкиPushУведомлений.СоздатьМенеджерЗаписи();

		МенеджерЗаписи.Пользователь = СтрокаТЧ.Пользователь;
		МенеджерЗаписи.Дата = ДатаСеанса;

		МенеджерЗаписи.Записать();

	КонецЦикла;

КонецПроцедуры

// Отправляет Push уведомления мобильным устройства
Процедура ВыполнитьОтправкуPushУведомленийМобильнымУстройствам(Протокол = "");

	// Если параметры не настроены, тогда выходим/
	ИспользоватьPushУведомления = Константы.ВариантИспользованияPushУведомлений.Получить();

	Протокол = Протокол + "
		|Использовать push-уведомления: " + ИспользоватьPushУведомления;

	ИмяСобытия = НСтр("ru = 'Push-уведомления'; en = 'Push notifications'");

	Если Не ЗначениеЗаполнено(ИспользоватьPushУведомления) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			, , НСтр("ru = 'Отправка push-уведомлений невозможна т.к. не задан способ отправки.'; en = 'Sending push notifications is not possible because sending method is not specified.'"));
		Возврат;
	КонецЕсли;

	Если ИспользоватьPushУведомления = Перечисления.ВариантыPushУведомлений.НеИспользовать Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			, , НСтр("ru = 'Отправка push-уведомлений невозможна т.к. установленый способ отправки: ''Не ипользовать'' '; en = 'Sending push notifications is not possible because sending method is set to: ''Do not use'' '"));
		Возврат;
	КонецЕсли;

	// Получаем дату последней отправки уведомлений.
	ДатаПоследнейОтправки = Константы.ДатаПоследнейОтправкиPushУведомлений.Получить();
	ТекущаяДата   = ТекущаяДата();
	ПакетЗапросов = ПолучитьДанныеДляУдаленияИОтправки(ДатаПоследнейОтправки, ТекущаяДата);

	Протокол = Протокол + "
		|Дата последней отправки: " + ДатаПоследнейОтправки;
	Протокол = Протокол + "
		|Текущая дата: " + ТекущаяДата;

	// Обрабатываем сообщения.
	ДанныеУдаления = УдалитьНеактуальныеСообщенияPushУведомлений(
		ПакетЗапросов[0], ДатаПоследнейОтправки, Протокол);

	ДанныеОтправки = ОтправитьСообщенияИспользуяPushУведомления(
		ПакетЗапросов[1], ПакетЗапросов[2], ИспользоватьPushУведомления, Протокол);

	// Обновляем дату последней отправки.
	Константы.ДатаПоследнейОтправкиPushУведомлений.Установить(ТекущаяДата);

	СформироватьСообщенияОбОшибкаПриОтправкеPush(ДанныеОтправки);
	ЗаписатьСтатистикуОтправкиPush(ТекущаяДата, 
		ДанныеУдаления.Удалено, ДанныеОтправки.Отправлено, ДанныеОтправки.Ошибок);

КонецПроцедуры

// Получает данные аутентификации для отправки Push-уведомления
//
// Параметры:
//  Использовать1С   - Булево - Ипользовать для отправки сервис 1С
//  ИспользоватьAPNS - Булево - Ипользовать для отправки сервис Apple
//  ИспользоватьGCM  - Булево - Ипользовать для отправки сервис Google
// 
// Возвращаемое значение:
//  ДанныеАутентификации - Строка или соответствие данных аутентификации
//
Функция ПолучитьДанныеАутентификацииДляОтправкиPushУведомления(
	Использовать1С, ИспользоватьAPNS, ИспользоватьGCM)

	// по умолчанию никаких данных нет
	ДанныеАутентификации = Неопределено;

	Если Использовать1С = Истина Тогда
		ДанныеАутентификации = СокрЛП(Константы.ЛогинСервисаПередачиУведомлений1С.Получить());
	Иначе

		Если ИспользоватьGCM Тогда
			ДанныеАутентификации = Новый Соответствие();
			ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.GCM] = 
				Константы.КлючCервераОтправителяGCM.Получить();
		КонецЕсли;

		Если ИспользоватьAPNS Тогда

			Если ДанныеАутентификации = Неопределено Тогда
				ДанныеАутентификации = Новый Соответствие();
			КонецЕсли;

			ДанныеСертификата = Константы.СертификатМобильногоПриложенияДляiOS.Получить();

			Если ТипЗнч(ДанныеСертификата) = Тип("Структура") Тогда

				Сертификат = ДанныеСертификата.Сертификат;

				Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
					ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS] = Сертификат;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеАутентификации;

КонецФункции

// Получает пакет результатов запроса с данными уведомлений для удаления и отправки
//
// Параметры:
//  ДатаПоследнейОтправки - Дата - ДатаПоследнего сеанса отправки уведомлений
//  ТекущаяДата			  - Дата - Дата начала текущего еанса отправки
// 
// Возвращаемое значение:
//  Массив - Массив содержащший пакет запросов с данными
//
Функция ПолучитьДанныеДляУдаленияИОтправки(ДатаПоследнейОтправки, ТекущаяДата)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаПоследнейОтправки", ДатаПоследнейОтправки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение
		|ИЗ
		|	РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки <= &ДатаПоследнейОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления КАК ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки КАК ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение КАК Сообщение,
		|	ЕСТЬNULL(Мобильный.ИдентификаторУстановлен, ЛОЖЬ) КАК ОтправкаВозможна,
		|	Мобильный.ИдентификаторКлиента,
		|	ЕСТЬNULL(Мобильный.ПометкаУдаления, ЛОЖЬ) КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.Мобильный КАК Мобильный
		|		ПО СообщенияPushУведомлений.Пользователь = Мобильный.Пользователь
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки > &ДатаПоследнейОтправки
		|	И СообщенияPushУведомлений.ДатаОтправки <= &ТекущаяДата
		|	И НЕ Мобильный.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтправки
		|ИТОГИ
		|	МАКСИМУМ(ОбъектУведомления),
		|	МАКСИМУМ(ДатаОтправки),
		|	МАКСИМУМ(ОтправкаВозможна),
		|	МАКСИМУМ(ПометкаУдаления)
		|ПО
		|	Сообщение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Мобильный.Ссылка,
		|	Мобильный.ИдентификаторКлиента
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	НЕ Мобильный.ПометкаУдаления
		|	И Мобильный.ИдентификаторУстановлен";

	Возврат Запрос.ВыполнитьПакет();

КонецФункции

// Удаляет неактуальные сообщения Push-уведомлений
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - выборка по неактуальным сообщениям
//
Функция УдалитьНеактуальныеСообщенияPushУведомлений(РезультатЗапроса, ДатаПоследнейОтправки, Протокол)

	ВыборкаУдаляемых = РезультатЗапроса.Выбрать();

	ВозвращаемоеЗначение = Новый Структура("Всего, Удалено", 0,0);
	ВозвращаемоеЗначение.Всего = ВыборкаУдаляемых.Количество();
	
	Протокол = Протокол + "
		|Записей к удалению: " + ВозвращаемоеЗначение.Всего;

	Пока ВыборкаУдаляемых.Следующий() Цикл

		Набор = РегистрыСведений.СообщенияPushУведомлений.СоздатьНаборЗаписей();

		Набор.Отбор.Пользователь.Установить(ВыборкаУдаляемых.Пользователь);
		Набор.Отбор.ОбъектУведомления.Установить(ВыборкаУдаляемых.ОбъектУведомления);
		Набор.Отбор.ДатаОтправки.Установить(ВыборкаУдаляемых.ДатаОтправки);

		// Если ошибка - переходим к следующей записи, эту удалим в следующий раз
		Попытка
			Набор.Записать(Истина);
			ВозвращаемоеЗначение.Удалено = ВозвращаемоеЗначение.Удалено + 1;
		Исключение
		КонецПопытки;

	КонецЦикла;

	Протокол = Протокол + "
		|Записей удалено: " + ВозвращаемоеЗначение.Удалено;

	Возврат ВозвращаемоеЗначение

КонецФункции

// Удаляет идентификаторы получателей уведомлений у устройств для которых не возможна доставка
//
// Параметры:
//  Узлы   - РезультатЗапроса - Выборка по всем активным узлам
//  Токены - Массив - Массив идентификаторов получаетелей уведомлений
//
Процедура УдалитьИдентификаторыДляНеАктивныхУстройств(Узлы, Токены)

	Если Токены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Узлы.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = Узлы.Выбрать();
	Пока Выборка.Следующий() Цикл

		ИдентификаторКлиента = Выборка.ИдентификаторКлиента.Получить();

		Если НЕ ИдентификаторКлиента = Неопределено 
			И Токены.Найти(ИдентификаторКлиента.ИдентификаторУстройства) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Узел = Выборка.ПолучитьОбъект();

		Узел.ИдентификаторУстановлен = Ложь;
		Узел.ИдентификаторКлиента    = Неопределено;

		Узел.Записать();

	КонецЦикла;

КонецПроцедуры

// Отправляет сообщения через сервис Push-уведомлений
//
// Параметры:
//  Сообщения                   - РезультатЗапроса - выборка по сообщениям для отправки
//  Узлы                        - РезультатЗапроса - выборка по всем активным узлам обмена
//  ИспользоватьPushУведомления - ПеречислениеСсылка.ВариантыPushУведомлений - Вид используемого сервиса отправки
//
Функция ОтправитьСообщенияИспользуяPushУведомления(Сообщения, Узлы, ИспользоватьPushУведомления, Протокол)

	ВозвращаемоеЗначение = 
		Новый Структура("Всего, Отправлено, Ошибок, ОписанияОшибок", 0, 0, 0, Новый Массив);

	//Получаем параметры отправки 
	ИспользоватьAPNS = Константы.ИспользоватьAPNS.Получить();
	ИспользоватьGCM  = Константы.ИспользоватьGCM.Получить();
	Использовать1С   = ИспользоватьPushУведомления = 
						Перечисления.ВариантыPushУведомлений.ИспользоватьВспомогательныйСервис1С;

	Протокол = Протокол + "
		|ИспользоватьAPNS: " + ИспользоватьAPNS;
	Протокол = Протокол + "
		|ИспользоватьGCM: " + ИспользоватьGCM;
	Протокол = Протокол + "
		|Использовать1С: " + Использовать1С;
	Протокол = Протокол + "
		|Вариант использования: " + ИспользоватьPushУведомления;

	ДанныеАутентификации = ПолучитьДанныеАутентификацииДляОтправкиPushУведомления(Использовать1С, 
		ИспользоватьAPNS, ИспользоватьGCM);

	Протокол = Протокол + "
		|Данные аутентификации: " + ДанныеАутентификации;

	// Если данные аутентификации не указаны - выходим
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	// Кэшируем сертификат Apple для получения не работающих идентификаторов
	Сертификат = Неопределено;
	Если ТипЗнч(ДанныеАутентификации) = Тип("Соответствие") И ИспользоватьAPNS Тогда
		Сертификат = ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS];
	КонецЕсли;

	Протокол = Протокол + "
		|Сертификат: " + Сертификат;

	// Получаем заголовок Push-уведомления
	Заголовок = Константы.ЗаголовокСистемы.Получить();
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = '1С:Документооборот'; en = '1C:Document management'");
	КонецЕсли;

	// Перебираем все доступные сообщения
	ВыборкаСообщений = Сообщения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// Моздаем описание типов которые можно открыть на клиенте.
	Типы = Новый Соответствие();
	
	// Добавляем справочники
	Типы.Вставить(Тип("СправочникСсылка.ЗаписиРабочегоКалендаря"), "ЗаписиРабочегоКалендаря");
	Типы.Вставить(Тип("ЗадачаСсылка.ЗадачаИсполнителя"), "Задачи");
	Типы.Вставить(Тип("СправочникСсылка.Контроль")     , "Контроль");

	// И документы.
	Типы.Вставить(Тип("ДокументСсылка.ВходящееПисьмо") , "ВходящееПисьмо");
	Типы.Вставить(Тип("ДокументСсылка.ИсходящееПисьмо"), "ИсходящееПисьмо");

	Пока ВыборкаСообщений.Следующий() Цикл

		Протокол = Протокол + "
			|
			|Сообщение: " + ВыборкаСообщений.Сообщение;

		Протокол = Протокол + "
			|Отправка возможна: " + ВыборкаСообщений.ОтправкаВозможна;

		// Если отправка для текущего пользователя не возможна переходим к следующему
		Если Не ВыборкаСообщений.ОтправкаВозможна Или ВыборкаСообщений.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;

		Уведомление = Новый ДоставляемоеУведомление();
		Уведомление.Заголовок = Заголовок;
		Уведомление.Текст     = СтрШаблон(НСтр("ru = '%1'; en = '%1'"), ВыборкаСообщений.Сообщение);

		// проверяем - можем ли мы заполнить поле данные
		ТипСссылки = ТипЗнч(ВыборкаСообщений.ОбъектУведомления);
		Описатель = Типы[ТипСссылки];

		ИдОбъекта = ВыборкаСообщений.ОбъектУведомления.УникальныйИдентификатор();

		Если Не Описатель = Неопределено Тогда

			Если Описатель = "Задачи" И 
				(ТипЗнч(ВыборкаСообщений.ОбъектУведомления.БизнесПроцесс) 
					= Тип("БизнесПроцессСсылка.Поручение")
				Или ТипЗнч(ВыборкаСообщений.ОбъектУведомления.БизнесПроцесс) 
					= Тип("БизнесПроцессСсылка.Исполнение")) Тогда

				Уведомление.Данные = СтрШаблон("Ref:%1\%2;", "ПроцессыИсполнение", ИдОбъекта);

			Иначе
				Уведомление.Данные = СтрШаблон("Ref:%1\%2;", Описатель, ИдОбъекта);

			КонецЕсли;

		КонецЕсли;

		Протокол = Протокол + "
			|Данные: " + Уведомление.Данные;

		ВыборкаПолучателей = ВыборкаСообщений.Выбрать();
		Пока ВыборкаПолучателей.Следующий() Цикл

			Протокол = Протокол + "
				|Пользователь: " + ВыборкаПолучателей.Пользователь;

			// флаг отправки может быть поднят, но идентификатор не установлен
			Идентификатор = ВыборкаПолучателей.ИдентификаторКлиента.Получить();
			Если Идентификатор = Неопределено Тогда
				Протокол = Протокол + "
					|Удентификатор установлен: Нет";
				Продолжить;
			КонецЕсли;

			Протокол = Протокол + "
				|Удентификатор добавлен: " + Идентификатор;

			Если 
				Использовать1С 
				Или ИспользоватьAPNS 
					И Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS
				Или ИспользоватьGCM 
					И Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.GCM 
				Тогда

				Уведомление.Получатели.Добавить(Идентификатор);

			КонецЕсли;

		КонецЦикла;

		Протокол = Протокол + "
			|Всего получателей: " + Уведомление.Получатели.Количество();

		Если Уведомление.Получатели.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		УдаленныеТокены = Новый Массив;

		ВозвращаемоеЗначение.Всего = ВозвращаемоеЗначение.Всего + Уведомление.Получатели.Количество();

		Попытка

			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации, 
				УдаленныеТокены, Использовать1С);

			ВозвращаемоеЗначение.Отправлено = ВозвращаемоеЗначение.Отправлено + 
												Уведомление.Получатели.Количество();
			Протокол = Протокол + "
				|Сообщение отправлено: Да";

		Исключение

			ВозвращаемоеЗначение.Ошибок = ВозвращаемоеЗначение.Ошибок + 
											Уведомление.Получатели.Количество();

			Инфо = Строка(ОписаниеОшибки());

			Если ВозвращаемоеЗначение.ОписанияОшибок.Найти(Инфо) = Неопределено Тогда
				ВозвращаемоеЗначение.ОписанияОшибок.Добавить(Инфо);
			КонецЕсли;

			Протокол = Протокол + "
				|Сообщение отправлено: Нет" + "
				|" + Инфо;

		КонецПопытки;

		Протокол = Протокол + "
		|Удаленные токены: " + УдаленныеТокены.Количество();

		УдалитьИдентификаторыДляНеАктивныхУстройств(Узлы, УдаленныеТокены);

		Если ЗначениеЗаполнено(Сертификат) Тогда

			УдаленныеТокены = 
				ОтправкаДоставляемыхУведомлений.ПолучитьИсключенныхПолучателей(Сертификат, 
					Использовать1С);
			УдалитьИдентификаторыДляНеАктивныхУстройств(Узлы, УдаленныеТокены);

		КонецЕсли;

	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

Процедура СформироватьСообщенияОбОшибкаПриОтправкеPush(ДанныеОтправки)
	
	Если ДанныеОтправки.Ошибок = 0 Тогда
		Возврат;
	КонецЕсли;

	Описание = "";

	Для каждого Ошибка Из ДанныеОтправки.ОписанияОшибок Цикл
		Описание = Описание + Символы.ПС + Ошибка;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолучателиОповещенийОПроблемахРаботыПрограммы.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы 
		|		КАК ПолучателиОповещенийОПроблемахРаботыПрограммы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь";
	
	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцесс = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	
	БизнесПроцесс.Автор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
		БизнесПроцесс.Автор = МассивПользователей[0];
	КонецЕсли;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		Строка = БизнесПроцесс.Исполнители.Добавить();
		Строка.Исполнитель = Пользователь;
	КонецЦикла;
	
	БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='При отправке push-уведомлений произошли ошибки (%1)'; en = 'Error occurred while sending push notifications (%1)'"),
		Строка(ДанныеОтправки.Количество()));
	
	БизнесПроцесс.Дата = ТекущаяДатаСеанса();
	БизнесПроцесс.Описание = Описание;

	БизнесПроцесс.Записать();
	СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);

КонецПроцедуры

Процедура ЗаписатьСтатистикуОтправкиPush(Дата, Удалено, Отправлено, Ошибок);

	Если Удалено = 0 
		Или Отправлено = 0 
		Или Ошибок = 0 Тогда
		Возврат;
	КонецЕсли;

	Запись = РегистрыСведений.СтатистикаОтправкаPushУведомлений.СоздатьМенеджерЗаписи();
	Запись.Период = Дата;

	Запись.Окончание  = ТекущаяДата();
	Запись.Удалено    = Удалено;
	Запись.Отправлено = Отправлено;
	Запись.Ошибок     = Ошибок;

	Запись.Записать(Истина);

КонецПроцедуры

#КонецОбласти
