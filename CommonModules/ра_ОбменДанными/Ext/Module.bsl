
#Область РолеваяМодель

Функция СформироватьПустуюТаблицуНастроек(Свойства = "") Экспорт
	
	Если ПустаяСтрока(Свойства) Тогда
		Свойства = "Имя,Тип,Синоним,Подсказка,Доступность,Видимость,ОбязателенДляЗаполнения,Значение,Фильтраторы,Параметры,ВидПоиска,ДопПоле,Опции,ФормаВыбора";
	КонецЕсли;
	
	МассивСвойств = СтрРазделить(Свойства, ",");
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	
	Для Каждого ИмяСвойства Из МассивСвойств Цикл
		ТаблицаНастроек.Колонки.Добавить(СокрЛП(ИмяСвойства));
	КонецЦикла;
	
	ТаблицаНастроек.Индексы.Добавить("Имя");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ПолучитьТаблицуНастроекПолейПоУмолчанию(ОбъектМетаданных) Экспорт
	
	ТаблицаНастроек = СформироватьПустуюТаблицуНастроек();
	
	//Реквизиты
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Реквизит);
	КонецЦикла;
	
	//Стандартные реквизиты
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Реквизит);
	КонецЦикла;
	
	//Табличные части
	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) ИЛИ
		ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) ИЛИ
		ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) ИЛИ
		ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
		
		Для Каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
			ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, ТЧ, "Table", ОбъектМетаданных);
		КонецЦикла;
		
	КонецЕсли;
	
	//Измерения, ресурсы (РС)
	Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
			ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Реквизит);
		КонецЦикла;
		
		Для Каждого Реквизит Из ОбъектМетаданных.Ресурсы Цикл
			ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Реквизит);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Реквизит, ТипРеквизита = "", ОбъектМетаданных = Неопределено, ДопПоле = Ложь, ПорядокКолонки = Неопределено,  ВидПоиска = "FullTextSearch", Видимость = Истина) Экспорт 
	
	СтрокаТЗ = ТаблицаНастроек.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТЗ, Реквизит, "Имя,Синоним");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реквизит, "Подсказка") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Реквизит, "Подсказка");
	КонецЕсли;
		
	Если СтрокаТЗ.Имя = "Номер" Тогда
		СтрокаТЗ.Имя = "Number";
		СтрокаТЗ.Синоним = НСтр("ru = 'Номер'; en = 'Number'");
	КонецЕсли;
	Если СтрокаТЗ.Имя = "Дата" Тогда
		СтрокаТЗ.Имя = "Date";
		СтрокаТЗ.Синоним = НСтр("ru = 'Дата'; en = 'Date'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТипРеквизита) Тогда
		СтрокаТЗ.Тип = Реквизит.Тип;
		СтрокаТЗ.Значение = Реквизит.Тип.ПривестиЗначение();
	Иначе
		СтрокаТЗ.Тип = ТипРеквизита;
	КонецЕсли;
	
	СтрокаТЗ.Видимость = Видимость;
	СтрокаТЗ.Доступность = Истина;
	СтрокаТЗ.ОбязателенДляЗаполнения = Ложь;
	СтрокаТЗ.Фильтраторы = Новый Массив;
	СтрокаТЗ.ВидПоиска = ВидПоиска;
	СтрокаТЗ.ДопПоле = ДопПоле;
	
	//Для табличных частей в ячейку Значение формируем массив
	//Первый элемент массива - таблица значений с описанием полей
	//Второй элемент массива - данные ТЧ
	Если ТипРеквизита = "Table" И ОбъектМетаданных <> Неопределено Тогда
		
		ТаблицаНастроекТЧ = СформироватьПустуюТаблицуНастроек();
		
		Для Каждого РеквизитТЧ ИЗ ОбъектМетаданных.ТабличныеЧасти[Реквизит.Имя].СтандартныеРеквизиты Цикл
			ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, РеквизитТЧ);
		КонецЦикла;
		
		Для Каждого РеквизитТЧ ИЗ ОбъектМетаданных.ТабличныеЧасти[Реквизит.Имя].Реквизиты Цикл
			ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, РеквизитТЧ);
		КонецЦикла;
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(ТаблицаНастроекТЧ);
		
		СтрокаТЗ.Значение = МассивДанных;
		
	КонецЕсли;
	
	Если (ВидПоиска = "LocalSearch" Или ВидПоиска = "OutputAllElements") И Лев(ПреобразованиеJSON("", СтрокаТЗ.Тип, "", ""), 12) = "Enumeration_" Тогда
		СтрокаТЗ.Опции = ПолучитьЗначенияПеречисления(СтрокаТЗ.Тип);
	Иначе
		СтрокаТЗ.Опции = Новый Массив;
	КонецЕсли;
	
	Возврат СтрокаТЗ;
	
КонецФункции

Процедура ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроек, ИмяРеквизита, Видимость = Истина, Доступность = Истина, ОбязателенДляЗаполнения = Ложь, Фильтраторы = Неопределено, ВидПоиска = "FullTextSearch", Значение = Неопределено, Синоним = "", Параметры = Неопределено, ФормаВыбора = "") Экспорт
	
	СтрокаТЗ = ТаблицаНастроек.Найти(ИмяРеквизита, "Имя");
	
	Если СтрокаТЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЗ.Видимость = Видимость;
	СтрокаТЗ.Доступность = Доступность;
	СтрокаТЗ.ОбязателенДляЗаполнения = ОбязателенДляЗаполнения;
	
	Если СтрокаТЗ.ВидПоиска <> ВидПоиска Тогда
		Если (ВидПоиска = "LocalSearch" Или ВидПоиска = "OutputAllElements") И Лев(ПреобразованиеJSON("", СтрокаТЗ.Тип, "", ""), 12) = "Enumeration_" Тогда
			СтрокаТЗ.Опции = ПолучитьЗначенияПеречисления(СтрокаТЗ.Тип);
		Иначе
			СтрокаТЗ.Опции = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТЗ.ВидПоиска = ВидПоиска;
	
	Если ЗначениеЗаполнено(Синоним) Тогда
		СтрокаТЗ.Синоним = Синоним;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтраторы) И ТипЗнч(Фильтраторы) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры ИЗ Фильтраторы Цикл
			НоваяСтруктураФильтра = Новый Структура(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			СтрокаТЗ.Фильтраторы.Добавить(НоваяСтруктураФильтра);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СтрокаТЗ.Значение = Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		СтрокаТЗ.Параметры = Параметры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаВыбора) Тогда
		СтрокаТЗ.ФормаВыбора = ФормаВыбора;
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьСтрокиИзТаблицыНастроек(ТаблицаНастроек, УдаляемыеРеквизиты) Экспорт
	
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УдаляемыеРеквизиты);
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		
		СтрокаТЗ = ТаблицаНастроек.Найти(ИмяРеквизита, "Имя");
		
		Если СтрокаТЗ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНастроек.Удалить(СтрокаТЗ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОбязателенДляЗаполнения(ТаблицаНастроек, МассивОбязательныхРеквизитов) Экспорт
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаНастроек Цикл
		ЭлементМассива = МассивОбязательныхРеквизитов.Найти(СтрокаТЗ.Имя);
		СтрокаТЗ.ОбязателенДляЗаполнения = ЭлементМассива <> Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуНастроекЗначениямиИзОбъекта(ТаблицаНастроек, ОбъектБД) Экспорт
	
	Для Каждого СтрокаНастроек Из ТаблицаНастроек Цикл
		Если СтрокаНастроек.Тип = "Table" Тогда
			СтрокаНастроек.Значение.Добавить(ОбъектБД[СтрокаНастроек.Имя].Выгрузить());
		Иначе
			Если Не СтрокаНастроек.ДопПоле Тогда
				СтрокаНастроек.Значение = ОбъектБД[СтрокаНастроек.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек) Экспорт
	
	МассивДанных = Новый Массив;
	
	Для Каждого СтрокаТЗ Из ТаблицаНастроек Цикл
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Колонка Из ТаблицаНастроек.Колонки Цикл
			
			Если Колонка.Имя = "ДопПоле" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТЗ.Тип = "Table" И Колонка.Имя = "Значение" Тогда
				
				МассивДанныхТЧ = Новый Массив;
				ТаблицаНастроекТЧ = СтрокаТЗ[Колонка.Имя][0];
				ТаблицаДанныхТЧ = СтрокаТЗ[Колонка.Имя][1];
				
				МассивДанныхТЧ.Добавить(СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ));
				
				Если ТаблицаДанныхТЧ.Количество() > 0 Тогда
					СформироватьМассивДанныхИзТаблицыНастроекТЧ(МассивДанныхТЧ, ТаблицаНастроекТЧ, ТаблицаДанныхТЧ);
				КонецЕсли;
				
				СтруктураДанных.Вставить(ПеревестиНаименованиеНастройкиНаАнглийский(Колонка.Имя), МассивДанныхТЧ);
				СтруктураДанных.Вставить("Presentation", "Table");
				
			Иначе
				СтруктураДанных.Вставить(ПеревестиНаименованиеНастройкиНаАнглийский(Колонка.Имя), ПреобразоватьЗначениеВСтроковоеПредставление(СтрокаТЗ[Колонка.Имя]));
				Если Колонка.Имя = "Значение" Тогда
					СтруктураДанных.Вставить("Presentation", ПреобразоватьЗначениеВСтроковоеПредставление(СтрокаТЗ[Колонка.Имя], Ложь));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивДанных.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Процедура СформироватьМассивДанныхИзТаблицыНастроекТЧ(МассивДанных, ТаблицаНастроекТЧ, ТаблицаДанныхТЧ) Экспорт
	
	Для Каждого СтрокаДанных Из ТаблицаДанныхТЧ Цикл
		
		МассивДанныхТЧ = Новый Массив;
		
		Для Каждого СтрокаНастройки Из ТаблицаНастроекТЧ Цикл
			
			СтруктураДанных = Новый Структура;
			
			Для Каждого КолонкаНастройки Из ТаблицаНастроекТЧ.Колонки Цикл
				
				Если КолонкаНастройки.Имя = "ДопПоле" Тогда
					Продолжить;
				КонецЕсли;
				
				Если КолонкаНастройки.Имя = "Значение" Тогда
					СтруктураДанных.Вставить(ПеревестиНаименованиеНастройкиНаАнглийский(КолонкаНастройки.Имя), ПреобразоватьЗначениеВСтроковоеПредставление(СтрокаДанных[СтрокаНастройки.Имя]));
					СтруктураДанных.Вставить("Presentation", ПреобразоватьЗначениеВСтроковоеПредставление(СтрокаДанных[СтрокаНастройки.Имя], Ложь));
				Иначе
					СтруктураДанных.Вставить(ПеревестиНаименованиеНастройкиНаАнглийский(КолонкаНастройки.Имя), ПреобразоватьЗначениеВСтроковоеПредставление(СтрокаНастройки[КолонкаНастройки.Имя]));
				КонецЕсли;
				
			КонецЦикла;
			
			МассивДанныхТЧ.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		МассивДанных.Добавить(МассивДанныхТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПеревестиНаименованиеНастройкиНаАнглийский(НаименованиеНастройки)
	
	Если НаименованиеНастройки = "Имя" Тогда
		Возврат "Name";
	ИначеЕсли НаименованиеНастройки = "Тип" Тогда
		Возврат "Type";
	ИначеЕсли НаименованиеНастройки = "Синоним" Тогда
		Возврат "Description";
	ИначеЕсли НаименованиеНастройки = "Подсказка" Тогда
		Возврат "Hint";
	ИначеЕсли НаименованиеНастройки = "Доступность" Тогда
		Возврат "Availability";
	ИначеЕсли НаименованиеНастройки = "Видимость" Тогда
		Возврат "Visibility";
	ИначеЕсли НаименованиеНастройки = "ОбязателенДляЗаполнения" Тогда
		Возврат "Required";
	ИначеЕсли НаименованиеНастройки = "Значение" Тогда
		Возврат "Value";
	ИначеЕсли НаименованиеНастройки = "Фильтраторы" Тогда
		Возврат "Filters";
	ИначеЕсли НаименованиеНастройки = "Параметры" Тогда
		Возврат "Parameters";
	ИначеЕсли НаименованиеНастройки = "ВидПоиска" Тогда
		Возврат "TypeOfSearch";
	ИначеЕсли НаименованиеНастройки = "Опции" Тогда
		Возврат "Options";
	ИначеЕсли НаименованиеНастройки = "ФормаВыбора" Тогда
		Возврат "ChoiceForm";
	ИначеЕсли СтрНайти(НаименованиеНастройки, "button") Тогда
		Возврат НаименованиеНастройки;
	Иначе
		ВызватьИсключение "Отсутствует перевод наименования настройки на английский";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки, ТипОбъекта = "", ГУИДОбъекта = "", Подсказка = "") Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Name", ИмяКнопки);
	СтруктураНастроек.Вставить("Type", "Button");
	СтруктураНастроек.Вставить("Description", ОписаниеКнопки);
	СтруктураНастроек.Вставить("Visibility", Истина);
	СтруктураНастроек.Вставить("Availability", Истина);
	СтруктураНастроек.Вставить("Hint", Подсказка); // ТСК Ткаченко И.Л. 11.12.2018 - Текст всплывающей подсказки
	СтруктураНастроек.Вставить("ObjectTypeLink", ТипОбъекта);
	СтруктураНастроек.Вставить("ObjectGUID", ГУИДОбъекта);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПолучитьНастройкиГлавноеМеню() Экспорт
	
	Результат = Новый Структура;
	
	МассивКнопокСоздать = Новый Массив;
	МассивКнопокСписок = Новый Массив;
	
	ЗаголовокСтраницы = НСтр("ru = 'Создать'; en = 'Create'");
	
	// Массив кнопок Создать
	//Если ра_ОбщегоНазначения.ЕстьПраваНаДобавлениеДокументов(Метаданные.Документы.ra_Nesootvetstvie) Тогда
	Если ПравоДоступа("Добавление", Метаданные.Документы.ra_Nesootvetstvie) Тогда
		ИмяКнопки = "CreateNonconformity";
		ОписаниеКнопки = НСтр("ru = 'Несоответствие'; en = 'Nonconformity'");
		МассивКнопокСоздать.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	//Если ра_ОбщегоНазначения.ЕстьПраваНаДобавлениеДокументов(Метаданные.Документы.ra_ZayavkaNaOcenkuSootvetstviya) Тогда
	Если ПравоДоступа("Добавление", Метаданные.Документы.ra_ZayavkaNaOcenkuSootvetstviya) Тогда
		ИмяКнопки = "CreateZayavkaNaOcenkuSootvetstviya";
		ОписаниеКнопки = НСтр("ru = 'Заявка на оценку соответствия'; en = 'Application for conformity assessment'");
		МассивКнопокСоздать.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ra_ZayavkaNaKontrolnuyuOperaciyu) Тогда
		ИмяКнопки = "CreateZayavkaNaKontrolnuyuOperaciyu";
		ОписаниеКнопки = НСтр("ru = 'Заявка на контрольную операцию'; en = 'Application for control operation'");
		МассивКнопокСоздать.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ra_Signal) Тогда
		ИмяКнопки = "CreateSignal";
		ОписаниеКнопки = НСтр("ru = 'Сигнал'; en = 'Signal'");
		МассивКнопокСоздать.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	// Массив кнопок Список
	ИмяКнопки = "MyTasks";
	ОписаниеКнопки = НСтр("ru = 'Мои задачи'; en = 'My tasks'");
	МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ra_Nesootvetstvie) Тогда
		ИмяКнопки = "NonconformityList";
		ОписаниеКнопки = НСтр("ru = 'Несоответствия'; en = 'Nonconformities'");
		МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ra_ZayavkaNaOcenkuSootvetstviya) Тогда
		ИмяКнопки = "ZayavkaNaOcenkuSootvetstviyaList";
		ОписаниеКнопки = НСтр("ru = 'Заявки на оценку соответствия'; en = 'Applications for conformity assessment'");
		МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ra_ZayavkaNaKontrolnuyuOperaciyu) Тогда
		ИмяКнопки = "ZayavkaNaKontrolnuyuOperaciyuList";
		ОписаниеКнопки = НСтр("ru = 'Заявки на контрольные операции'; en = 'Control operation orders'");
		МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ra_Signal) Тогда
		ИмяКнопки = "SignalList";
		ОписаниеКнопки = НСтр("ru = 'Сигналы'; en = 'Signals'");
		МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	КонецЕсли;
	
	ИмяКнопки = "Reports";
	ОписаниеКнопки = НСтр("ru = 'Отчеты'; en = 'Reports'");
	МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	
	ИмяКнопки = "NormativeDocuments";
	ОписаниеКнопки = НСтр("ru = 'Нормативная документация'; en = 'Normative documents'");
	МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	
	ИмяКнопки = "SystemSupport";
	ОписаниеКнопки = НСтр("ru = 'Поддержка системы'; en = 'System support'");
	МассивКнопокСписок.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));
	
	Результат.Вставить("FormCaption", ЗаголовокСтраницы);
	Результат.Вставить("CreateButtons", МассивКнопокСоздать);
	Результат.Вставить("ListButtons", МассивКнопокСписок);
	
	//Если пользователь не прошел обучение, то ограничиваем доступность Главного меню
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если НЕ ТекущийПользователь.ра_ПрошелОбучение Тогда
		Для Каждого ЭлементСтруктуры Из Результат Цикл
			Для Каждого Кнопка Из ЭлементСтруктуры.Значение Цикл
				Кнопка.Visibility = Ложь;
				Кнопка.Availability = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// ТСК Близнюк С.И.; 04.10.2018; task#656{
	МассивКнопокПользователь = Новый Массив;
	
	ИмяКнопки = "Personal";
	ОписаниеКнопки = НСтр("ru = 'Личные данные'; en = 'Personal data'");
	МассивКнопокПользователь.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));

	ИмяКнопки = "?logout=yes";
	ОписаниеКнопки = НСтр("ru = 'Выход'; en = 'Exit'");
	МассивКнопокПользователь.Добавить(ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки));

	Результат.Вставить("UserButtons", МассивКнопокПользователь);
	// ТСК Близнюк С.И.; 04.10.2018; task#656}
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивПунктовМеню(ОбъектБД) Экспорт
	
	МассивПунктовМеню = Новый Массив;
	
	Если ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_Nesootvetstvie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_Nesootvetstvie") Тогда
		
		Документы.ra_Nesootvetstvie.ЗаполнитьГлавноеМенюОбъекта(ОбъектБД, МассивПунктовМеню);
	ИначеЕсли ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_AktObUstraneniiNesootvetstviya") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_AktObUstraneniiNesootvetstviya") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_ItogovyjOtchetONesootvetstvii") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_ItogovyjOtchetONesootvetstvii") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_KorrektiruyushcheeDejstvie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_KorrektiruyushcheeDejstvie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_OcenkaZnachimosti") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_OcenkaZnachimosti") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_OtchetONesootvetstviiCHast1") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast1") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_OtchetONesootvetstviiCHast2") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast2") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_OtchetONesootvetstviiCHast3") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_OtchetONesootvetstviiCHast3") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_PreduprezhdayushcheeDejstvie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_PreduprezhdayushcheeDejstvie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_Uvedomlenie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_Uvedomlenie") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_VremennyeSderzhivayushchieDejstviyaIKorrekciya") Тогда
		
		Документы.ra_Nesootvetstvie.ЗаполнитьГлавноеМенюОбъекта(ОбъектБД.Nesootvetstvie, МассивПунктовМеню);
	ИначеЕсли ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_ZayavkaNaOcenkuSootvetstviya") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_ZayavkaNaOcenkuSootvetstviya") Тогда
		
		Документы.ra_ZayavkaNaOcenkuSootvetstviya.ЗаполнитьГлавноеМенюОбъекта(ОбъектБД,МассивПунктовМеню);
	ИначеЕсли ТипЗнч(ОбъектБД) = Тип("ДокументОбъект.ra_ZayavkaNaKontrolnuyuOperaciyu") Или
		ТипЗнч(ОбъектБД) = Тип("ДокументСсылка.ra_ZayavkaNaKontrolnuyuOperaciyu") Или
		ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_UchastnikiKontrolnyhOperaciy") Или
		ТипЗнч(ОбъектБД) = Тип("РегистрСведенийМенеджерЗаписи.ra_OpisaniePredmetaKontrolya") Тогда
		
		Документы.ra_ZayavkaNaKontrolnuyuOperaciyu.ЗаполнитьГлавноеМенюОбъекта(ОбъектБД,МассивПунктовМеню);
	КонецЕсли;
		
	Возврат МассивПунктовМеню;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхБД

Функция ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ТекстЗапросаИЗ, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений) Экспорт
	
	Запрос = Новый Запрос;
	
	ТолькоРазрешенные = ПараметрыЗапросаHTTP.Получить("$allowedOnly");
	ТекстЗапросаРАЗРЕШЕННЫЕ = " РАЗРЕШЕННЫЕ "; //всегда используется конструкция РАЗРЕШЕННЫЕ
	
	ТекстЗапросаВЫБРАТЬ = ПараметрыЗапросаHTTP.Получить("$select");
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапросаВЫБРАТЬ) Тогда
		ТекстЗапросаВЫБРАТЬ = "*";
	КонецЕсли;
	
	ОбработатьКонструкциюВЫБРАТЬ(ТаблицаРеквизитов, ТекстЗапросаВЫБРАТЬ);
	
	ТекстЗапросаПЕРВЫЕ = ПараметрыЗапросаHTTP.Получить("$top");
	
	Если ЗначениеЗаполнено(ТекстЗапросаПЕРВЫЕ) Тогда
		ТекстЗапросаПЕРВЫЕ = " ПЕРВЫЕ " + ТекстЗапросаПЕРВЫЕ + " ";
	КонецЕсли;
	
	ТекстЗапросаГДЕ = ПараметрыЗапросаHTTP.Получить("$filter");
	ПараметрыЗапроса = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекстЗапросаГДЕ) Тогда
		ПараметрыЗапроса = ОбработатьКонструкциюГДЕ(ТаблицаРеквизитов, ТекстЗапросаГДЕ);
		ТекстЗапросаГДЕ = " ГДЕ " + ТекстЗапросаГДЕ;	
	КонецЕсли;
	
	ТекстЗапросаУПОРЯДОЧИТЬ = ПараметрыЗапросаHTTP.Получить("$orderby");
	
	Если ЗначениеЗаполнено(ТекстЗапросаУПОРЯДОЧИТЬ) Тогда
		ТекстЗапросаУПОРЯДОЧИТЬ = СтрЗаменить(ТекстЗапросаУПОРЯДОЧИТЬ, "Ref_Key", "ОсновнаяТаблица.Ссылка");
		ТекстЗапросаУПОРЯДОЧИТЬ = СтрЗаменить(ТекстЗапросаУПОРЯДОЧИТЬ, "_Key", "");
		ТекстЗапросаУПОРЯДОЧИТЬ = " УПОРЯДОЧИТЬ ПО " + ТекстЗапросаУПОРЯДОЧИТЬ;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВложенныеТаблицы + Символы.ПС + "
						|ВЫБРАТЬ " + ТекстЗапросаРАЗРЕШЕННЫЕ + ТекстЗапросаПЕРВЫЕ + Символы.ПС + 
						ТекстЗапросаВЫБРАТЬ + "
						|ИЗ" + Символы.ПС + 
						ТекстЗапросаИЗ + " КАК ОсновнаяТаблица " +
						ТекстЗапросаСоединений +
						ТекстЗапросаГДЕ +
						ТекстЗапросаУПОРЯДОЧИТЬ);
	
	Для Каждого ЭлементСтруктуры ИЗ ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для каждого Колонка Из СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1].Колонки Цикл
		Если ТипЗнч(Колонка) = Тип("КолонкаСхемыЗапроса") Тогда
			Колонка.Псевдоним = ПеревестиИмяСтандартногоРеквизита(Колонка.Псевдоним);
			Для каждого Тип Из Колонка.ТипЗначения.Типы() Цикл
				Если ОбщегоНазначения.ЭтоСсылка(Тип) И Не Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
					Колонка.Псевдоним = Колонка.Псевдоним + "_Key";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Запрос;
	
КонецФункции

Функция СформироватьМассивДанныхИзЗапроса(Запрос, ПараметрыЗапросаHTTP = Неопределено, ТаблицаДанных = Неопределено) Экспорт
	
	Если ПараметрыЗапросаHTTP <> Неопределено Тогда
		Если ПараметрыЗапросаHTTP.Получить("$ExportToExcel") <> Неопределено Тогда
			ТабличныйДокумент = СформироватьТабличныйДокументИзЗапроса(Запрос);
			Расширение = "xlsx";
			ПолноеИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
			ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", "ExportList");
			СтруктураДанных.Вставить("Расширение", Расширение);
			СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			
			УдалитьФайлы(ПолноеИмяФайла);
			
			Возврат СтруктураДанных;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаДанных = Неопределено Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДанных);
	КонецЕсли;
		
КонецФункции

Функция ПеревестиИмяСтандартногоРеквизита(ИмяРеквизита) Экспорт
	
	Если ИмяРеквизита = "ПометкаУдаления" Тогда
		Возврат "DeletionMark";
	ИначеЕсли ИмяРеквизита = "ПометкаУдаления____Presentation" Тогда
		Возврат "DeletionMark____Presentation";
	ИначеЕсли ИмяРеквизита = "Номер" Тогда
		Возврат "Number";
	ИначеЕсли ИмяРеквизита = "Номер____Presentation" Тогда
		Возврат "Number____Presentation";
	ИначеЕсли ИмяРеквизита = "Дата" Тогда
		Возврат "Date";
	ИначеЕсли ИмяРеквизита = "Дата____Presentation" Тогда
		Возврат "Date____Presentation";
	ИначеЕсли ИмяРеквизита = "Проведен" Тогда
		Возврат "Posted";
	ИначеЕсли ИмяРеквизита = "Проведен____Presentation" Тогда
		Возврат "Posted____Presentation";
	ИначеЕсли ИмяРеквизита = "ВерсияДанных" Тогда
		Возврат "DataVersion";
	ИначеЕсли ИмяРеквизита = "ВерсияДанных____Presentation" Тогда
		Возврат "DataVersion____Presentation";
	ИначеЕсли ИмяРеквизита = "Предопределенный" Тогда
		Возврат "Predefined";
	ИначеЕсли ИмяРеквизита = "Предопределенный____Presentation" Тогда
		Возврат "Predefined____Presentation";
	ИначеЕсли ИмяРеквизита = "ИмяПредопределенныхДанных" Тогда
		Возврат "PredefinedDataName";
	ИначеЕсли ИмяРеквизита = "ИмяПредопределенныхДанных____Presentation" Тогда
		Возврат "PredefinedDataName____Presentation";
	ИначеЕсли ИмяРеквизита = "Ссылка" Тогда
		Возврат "Ref";
	ИначеЕсли ИмяРеквизита = "Ссылка____Presentation" Тогда
		Возврат "Ref_Key____Presentation";
	ИначеЕсли ИмяРеквизита = "Наименование" Тогда
		Возврат "Description";
	ИначеЕсли ИмяРеквизита = "Наименование____Presentation" Тогда
		Возврат "Description____Presentation";
	ИначеЕсли ИмяРеквизита = "Код" Тогда
		Возврат "Code";
	ИначеЕсли ИмяРеквизита = "Код____Presentation" Тогда
		Возврат "Code____Presentation";
	Иначе
		Возврат ИмяРеквизита;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных) Экспорт
	
	ТаблицаРеквизитов = СформироватьПустуюТаблицуНастроек("Имя,Выражение,Тип,ДопПоле");
	
	//Реквизиты
	Если НЕ ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	//Стандартные реквизиты
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, Реквизит);
	КонецЦикла;
	
	//Измерения, ресурсы (РС)
	Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Для Каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
			ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, Реквизит);
		КонецЦикла;
		
		Для Каждого Реквизит Из ОбъектМетаданных.Ресурсы Цикл
			ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, Реквизит) Экспорт
	
	СтрокаТЗ = ТаблицаРеквизитов.Добавить();
	СтрокаТЗ.Имя = Реквизит.Имя;
	
	Если СтрокаТЗ.Имя = "Номер" Тогда
		СтрокаТЗ.Имя = "Number";
	ИначеЕсли СтрокаТЗ.Имя = "Дата" Тогда
		СтрокаТЗ.Имя = "Date";
	КонецЕсли;
	
	Если ТипЗнч(Реквизит) = Тип("Структура") Тогда
		СтрокаТЗ.Выражение = Реквизит.Выражение;
		СтрокаТЗ.Тип = Реквизит.Тип;
	Иначе
		СтрокаТЗ.Выражение = "ОсновнаяТаблица." + СтрокаТЗ.Имя;
		СтрокаТЗ.Тип = СтроковоеПредставлениеТипа(Реквизит.Тип.Типы()[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКонструкциюВЫБРАТЬ(ТаблицаРеквизитов, ТекстЗапросаВЫБРАТЬ)
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаВЫБРАТЬ,,,Истина);
	МассивЗамен = Новый Массив;
	
	Для Каждого Подстрока ИЗ МассивПодстрок Цикл
		
		Если Подстрока = "Ref_Key" Тогда
			МассивЗамен.Добавить("ОсновнаяТаблица.Ссылка КАК Ссылка");
			Продолжить;
		ИначеЕсли Подстрока = "Ref_Key____Presentation" Тогда
			МассивЗамен.Добавить("ПРЕДСТАВЛЕНИЕ(ОсновнаяТаблица.Ссылка) КАК Ссылка____Presentation");
			Продолжить;
		КонецЕсли;
		
		Если Подстрока = "*" Тогда
			
			СтрокаЗамены = "";
			Для Каждого СтрокаТЗ Из ТаблицаРеквизитов Цикл
				СтрокаЗамены = СтрокаЗамены + СтрокаТЗ.Выражение + " КАК " + СтрокаТЗ.Имя + ",";
			КонецЦикла;
			СтрокаЗамены = Лев(СтрокаЗамены, СтрДлина(СтрокаЗамены) - 1);
			
			МассивЗамен.Добавить(СтрокаЗамены);
			
			Продолжить;
			
		КонецЕсли;
		
		Если Подстрока = "*____Presentation" Тогда
			
			СтрокаЗамены = "";
			Для Каждого СтрокаТЗ Из ТаблицаРеквизитов Цикл
				СтрокаЗамены = СтрокаЗамены + "ПРЕДСТАВЛЕНИЕ(" + СтрокаТЗ.Выражение + ") КАК " + СтрокаТЗ.Имя + "____Presentation,";
			КонецЦикла;
			СтрокаЗамены = Лев(СтрокаЗамены, СтрДлина(СтрокаЗамены) - 1);
			
			МассивЗамен.Добавить(СтрокаЗамены);
			
			Продолжить;
			
		КонецЕсли;
		
		ПозицияСимвола = СтрНайти(Подстрока, "____Presentation");
		
		Если ПозицияСимвола > 0 Тогда
			
			ИмяРеквизита = СтрЗаменить(Подстрока, "____Presentation", "");
			
			СтрокаТЗ = ТаблицаРеквизитов.Найти(ИмяРеквизита, "Имя");
			Если СтрокаТЗ <> Неопределено Тогда
				СтрокаЗамены = "ПРЕДСТАВЛЕНИЕ(" + СтрокаТЗ.Выражение + ") КАК " + СтрокаТЗ.Имя + "____Presentation";
				МассивЗамен.Добавить(СтрокаЗамены);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ПозицияСимвола = СтрНайти(Подстрока, "_Key");
		
		Если ПозицияСимвола > 0 Тогда
			
			ИмяРеквизита = СтрЗаменить(Подстрока, "_Key", "");
			
			СтрокаТЗ = ТаблицаРеквизитов.Найти(ИмяРеквизита, "Имя");
			Если СтрокаТЗ <> Неопределено Тогда
				СтрокаЗамены = СтрокаТЗ.Выражение + " КАК " + СтрокаТЗ.Имя;
				МассивЗамен.Добавить(СтрокаЗамены);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЗ = ТаблицаРеквизитов.Найти(Подстрока, "Имя");
		Если СтрокаТЗ <> Неопределено Тогда
			СтрокаЗамены = СтрокаТЗ.Выражение + " КАК " + СтрокаТЗ.Имя;
			МассивЗамен.Добавить(СтрокаЗамены);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаВЫБРАТЬ = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивЗамен);
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаВЫБРАТЬ);
	
	МассивВЫБРАТЬ = Новый Массив;
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивВЫБРАТЬ, МассивПодстрок);
	
	ТекстЗапросаВЫБРАТЬ = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивВЫБРАТЬ);
	
КонецПроцедуры

Функция ОбработатьКонструкциюГДЕ(ТаблицаРеквизитов, ТекстЗапросаГДЕ) Экспорт
	
	ЗаменитьУсловияODataУсловиямиВстроенногоЯзыка(ТекстЗапросаГДЕ);
	ОбработатьУсловияОтбораДляДат(ТекстЗапросаГДЕ);
	
	ПараметрыЗапроса = ОбработатьУсловияОтбораДляСсылок(ТекстЗапросаГДЕ, ТаблицаРеквизитов);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ЗаменитьУсловияODataУсловиямиВстроенногоЯзыка(ТекстЗапросаГДЕ) Экспорт
	
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " eq ", " = ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " ne ", " <> ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " gt ", " > ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " ge ", " >= ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " lt ", " < ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " le ", " <= ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " add ", " + ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " sub ", " - ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " mul ", " * ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " div ", " / ");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, " hierar ", " В ИЕРАРХИИ ");
	
КонецПроцедуры

Процедура ОбработатьУсловияОтбораДляДат(ТекстЗапросаГДЕ) Экспорт
	
	СписокЗамен = Новый СписокЗначений;
	ЧислоВхождений = СтрЧислоВхождений(ТекстЗапросаГДЕ, "T");
	
	Для НомерВхождения = 1 ПО ЧислоВхождений Цикл
		
		ПозицияСимвола = СтрНайти(ТекстЗапросаГДЕ, "T", НаправлениеПоиска.СНачала, , НомерВхождения);
		
		ДваСимволаСлева = Сред(ТекстЗапросаГДЕ, ПозицияСимвола - 2, 2);
		ДваСимволаСправа = Сред(ТекстЗапросаГДЕ, ПозицияСимвола + 1, 2);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДваСимволаСлева, Ложь, Ложь)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДваСимволаСправа, Ложь, Ложь) Тогда
			
			СтрокаДатаВремя = Сред(ТекстЗапросаГДЕ, ПозицияСимвола - 10, 19);
			СтрокаДата = Сред(ТекстЗапросаГДЕ, ПозицияСимвола - 10, 10);
			СтрокаВремя = Сред(ТекстЗапросаГДЕ, ПозицияСимвола + 1, 8);
			
			СтрокаЗамены = "ДАТАВРЕМЯ(" + Сред(СтрокаДата, 1, 4) + "," +
											Сред(СтрокаДата, 6, 2) + "," +
											Сред(СтрокаДата, 9, 2) + "," +
											Сред(СтрокаВремя, 1, 2) + "," +
											Сред(СтрокаВремя, 4, 2) + "," +
											Сред(СтрокаВремя, 7, 2) + ")";
											
			СписокЗамен.Добавить(СтрокаДатаВремя, СтрокаЗамены);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементСписка ИЗ СписокЗамен Цикл
		ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строковое представление типа. 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "Документ.ИмяОбъекта".
// Для остальных типов приводит тип к строке, например "Число".
//
// Возвращаемое значение:
//  Строка.
//
Функция СтроковоеПредставлениеТипа(Тип) Экспорт
	
	Представление = "";
	
	Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
	
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "Справочник";
		
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "Документ";
		
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцесс";
		
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристик";
		
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетов";
		
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчета";
		
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "Задача";
		
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбмена";
		
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "Перечисление";
		
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Представление);
		МассивСтрок.Добавить(ИмяОбъекта);
		Результат = ?(Представление = "", Представление, СтрСоединить(МассивСтрок, "."));
		
	Иначе
		
		Результат = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьУсловияОтбораДляСсылок(ТекстЗапросаГДЕ, ТаблицаРеквизитов) Экспорт
	
	СчетчикПараметров = 1;
	ПараметрыЗапроса = Новый Структура;
	СписокЗамен = Новый СписокЗначений;
	СоответствиеПараметров = Новый Соответствие;
	
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, "Ref_Key", "Ссылка");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, "_Key", "");
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ТекстЗапросаГДЕ);
	
	//+++ Исправить алгоритм!
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ,"<>","~");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ,"В ИЕРАРХИИ","#");
	//--- Исправить алгоритм!
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаРеквизитов Цикл
		
		ЭлементМассива = МассивСлов.Найти(СтрокаТЗ.Имя);
		Если ЭлементМассива = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияСимвола = СтрНайти(ТекстЗапросаГДЕ, СтрокаТЗ.Имя);
		
		Если ПозицияСимвола > 0 Тогда
			
			Если СтрНайти(СтрокаТЗ.Тип, ".") Тогда //поле ссылочного типа
				
				ВторойПробел = СтрНайти(ТекстЗапросаГДЕ, " ", , ПозицияСимвола, 2);
				СтрокаГУИД = Сред(ТекстЗапросаГДЕ, ВторойПробел + 1, 36);
				Если Лев(СтрокаГУИД, 1) = "(" Тогда
					СтрокаГУИД = Сред(ТекстЗапросаГДЕ, ВторойПробел + 2, 36);
				КонецЕсли;
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаТЗ.Тип);
				
				Если СтрНайти(СтрокаТЗ.Тип, "Перечисление.") > 0 Тогда
					ТретийПробел = СтрНайти(ТекстЗапросаГДЕ, " ", , ПозицияСимвола, 3);
					СтрокаЗначение = Сред(ТекстЗапросаГДЕ, ВторойПробел + 1, ТретийПробел - ВторойПробел - 1);
					СтрокаНовоеЗначение = "ЗНАЧЕНИЕ(" + СтрокаТЗ.Тип + "." + СтрокаЗначение + ")";
					
					ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, СтрокаЗначение, СтрокаНовоеЗначение);
				Иначе
					
					СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаГУИД));
				
					ИмяПараметра = "Параметр" + Строка(СчетчикПараметров);
					ПараметрыЗапроса.Вставить(СтрокаТЗ.Имя, СсылкаНаОбъект);
					СоответствиеПараметров.Вставить(ИмяПараметра, СтрокаТЗ.Имя);
					
					СписокЗамен.Добавить(СтрокаГУИД, "&" + ИмяПараметра);
					
					СчетчикПараметров = СчетчикПараметров + 1;
				КонецЕсли;
				
			КонецЕсли;
			
			СписокЗамен.Добавить(СтрокаТЗ.Имя, СтрокаТЗ.Выражение);
			
		КонецЕсли;
		
	КонецЦикла;
	//+++ Исправить алгоритм!
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ,"~","<>");
	ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ,"#","В ИЕРАРХИИ");
	//--- Исправить алгоритм!
	
	Для Каждого ЭлементСписка Из СписокЗамен Цикл
		ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия ИЗ СоответствиеПараметров Цикл
		ТекстЗапросаГДЕ = СтрЗаменить(ТекстЗапросаГДЕ, ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПолучитьДвоичныеДанныеОсновногоФайла(ФайлСсылка) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Файл", ФайлСсылка);
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	ЕСТЬNULL(ВерсииФайлов.ТипХраненияФайла, ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ПустаяСсылка)) КАК ТипХраненияФайла,
			|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
			|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка
			|ГДЕ
			|	Файлы.Ссылка = &Файл";
	// пустым РЗ быть не может, т.к. до этого мы нашли ссылку
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если Выборка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
		
		МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВерсияФайла = Выборка.ТекущаяВерсия;
		МенеджерЗаписи.Прочитать();
		ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование", Выборка.Ссылка.ПолноеНаименование);
		СтруктураДанных.Вставить("Расширение", Выборка.ТекущаяВерсияРасширение);
		// ТСК Близнюк С.И.; 27.09.2018; task#652{
		СтруктураДанных.Вставить("Версия", Выборка.ТекущаяВерсия);
		// ТСК Близнюк С.И.; 27.09.2018; task#652}
		СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		
	Иначе
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование", ДанныеФайла.ПолноеНаименованиеВерсии);
		СтруктураДанных.Вставить("Расширение", ДанныеФайла.Расширение);
		// ТСК Близнюк С.И.; 27.09.2018; task#652{
		СтруктураДанных.Вставить("Версия", ДанныеФайла.Версия);
		// ТСК Близнюк С.И.; 27.09.2018; task#652}
		СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура СформироватьМассивДанныхВариантовОтчетов(СтруктураОтвета,ЗапросHTTP) Экспорт
	
	ТаблицаНастроекТЧ = ра_ОбменДанными.СформироватьПустуюТаблицуНастроек();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиВариантовОтчетовДокументооборотКатегории.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(НастройкиВариантовОтчетовДокументооборотКатегории.Ссылка) КАК Наименование,
	|	НастройкиВариантовОтчетовДокументооборотКатегории.Ссылка.КлючВарианта КАК КлючВарианта,
	|	НастройкиВариантовОтчетовДокументооборотКатегории.Ссылка.Отчет КАК Отчет,
	|	НастройкиВариантовОтчетовДокументооборотКатегории.Ссылка.ра_НаименованиеEn КАК НаименованиеEn
	|ИЗ
	|	Справочник.НастройкиВариантовОтчетовДокументооборот.Категории КАК НастройкиВариантовОтчетовДокументооборотКатегории
	|ГДЕ
	|	НастройкиВариантовОтчетовДокументооборотКатегории.Категория = ЗНАЧЕНИЕ(Справочник.КатегорииОтчетов.ра_УправлениеКачеством)
	|	И НЕ НастройкиВариантовОтчетовДокументооборотКатегории.Ссылка.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("guid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("Presentation", НСтр("ru = '" + Выборка.Наименование + "'; en = '" + Выборка.НаименованиеEn + "'"));
		
		ВариантОтчета = ВариантыОтчетов.ПолучитьСсылку(Выборка.Отчет, Выборка.КлючВарианта);
		
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВариантОтчета.Отчет);
		СхемаКомпоновкиДанных = Отчеты[ОбъектМетаданных.Имя].ПолучитьМакет(ОбъектМетаданных.ОсновнаяСхемаКомпоновкиДанных.Имя);
		
		ТаблицаГруппировок = Новый ТаблицаЗначений;
		ТаблицаГруппировок.Колонки.Добавить("Name");
		ТаблицаГруппировок.Колонки.Добавить("Description");
		ТаблицаГруппировок.Колонки.Добавить("Order");
		ТаблицаГруппировок.Колонки.Добавить("Колонка", Новый ОписаниеТипов("Булево"));
		
		// ТСК Ткаченко И.Л.; 27.08.2018; task#1145{
		ТаблицаФильтраторов = Новый ТаблицаЗначений;
		ТаблицаФильтраторов.Колонки.Добавить("Поле");
		ТаблицаФильтраторов.Колонки.Добавить("Параметр");
		ТаблицаФильтраторов.Колонки.Добавить("ПолеДляФильтратора");
		// ТСК Ткаченко И.Л.; 27.08.2018; task#1145}
		
		КешГруппировки = Новый Соответствие;
		
		Попытка
			ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
			Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
				Если ТипЗнч(ПолеНабораДанных) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
					Если Не ПолеНабораДанных.ОграничениеИспользования.Группировка Тогда
						Группировка = ТаблицаГруппировок.Добавить();
						Группировка.Name = ПолеНабораДанных.ПутьКДанным;
						Группировка.Description = ПолеНабораДанных.Заголовок;
						Группировка.Order = "_";
						
						КешГруппировки.Вставить(Новый ПолеКомпоновкиДанных(ПолеНабораДанных.ПутьКДанным), Группировка);
					КонецЕсли;
					// ТСК Ткаченко И.Л.; 27.08.2018; task#1145{
					Если Не ПолеНабораДанных.ОграничениеИспользования.Условие Тогда
						Для Каждого ТекПараметр Из ПолеНабораДанных.ПараметрыРедактирования.Элементы Цикл
							Если ТекПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СвязиПараметровВыбора") Тогда
								Для Каждого ТекПараметрВывода Из ТекПараметр.Значение Цикл
									СтрокаФильтратора = ТаблицаФильтраторов.Добавить();
									СтрокаФильтратора.Поле = ПолеНабораДанных.ПутьКДанным;
									СтрокаФильтратора.ПолеДляФильтратора = Строка(ТекПараметрВывода.Поле);
									СтрокаФильтратора.Параметр = СтрЗаменить(ТекПараметрВывода.Имя,"Отбор.","");
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					// ТСК Ткаченко И.Л.; 27.08.2018; task#1145}
				КонецЕсли;
			КонецЦикла;
		Исключение
			ВызватьИсключение НСтр("ru = 'Вызываемый отчет имеет некорректную структуру'; en = 'The called report has an incorrect structure'");
		КонецПопытки;
		
		НастройкиВарианта = ВариантОтчета.Настройки.Получить();
		
		Если НастройкиВарианта <> Неопределено Тогда
			
			//Параметры
			ТаблицаНастроекТЧ.Очистить();
			Для Каждого ЭлементПараметра ИЗ НастройкиВарианта.ПараметрыДанных.Элементы Цикл
				ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Найти(Строка(ЭлементПараметра.Параметр));
				ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", ПараметрСКД.Имя, ПараметрСКД.Заголовок), Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЭлементПараметра.Значение))));
			КонецЦикла;
			
			СтруктураДанных.Вставить("Parameters", ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ));
			
			//Отбор
			ТаблицаНастроекТЧ.Очистить();
			Для Каждого ЭлементОтбора ИЗ НастройкиВарианта.Отбор.Элементы Цикл
				ПолеНабораДанных = ПоляНабораДанных.Найти(Строка(ЭлементОтбора.ЛевоеЗначение));
				ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроекТЧ, Новый Структура("Имя,Синоним", Строка(ЭлементОтбора.ЛевоеЗначение), ПолеНабораДанных.Заголовок), ПолеНабораДанных.ТипЗначения);
				// ТСК Ткаченко И.Л.; 27.08.2018; task#1145{
				СтрокиФильтратора = ТаблицаФильтраторов.НайтиСтроки(Новый Структура("ПолеДляФильтратора",Строка(ЭлементОтбора.ЛевоеЗначение)));
				СтруктураФильтра = Новый Структура;
				
				Для Каждого ТекСтрокаФильтратор Из СтрокиФильтратора Цикл
					СтруктураФильтра.Вставить(ТекСтрокаФильтратор.Поле,ТекСтрокаФильтратор.Параметр);
				КонецЦикла;
				Если СтруктураФильтра.Количество() Тогда
					ра_ОбменДанными.ИзменитьСтрокуВТаблицеНастроек(ТаблицаНастроекТЧ, Строка(ЭлементОтбора.ЛевоеЗначение), , , , СтруктураФильтра, "FullTextSearch");
				КонецЕсли;
				// ТСК Ткаченко И.Л.; 27.08.2018; task#1145}
			КонецЦикла;
			
			СтруктураДанных.Вставить("Filters", ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроекТЧ));
			
			//Группировки
			Попытка
				Счетчик = 1;
				СтруктураКомпоновки = НастройкиВарианта.Структура[0].Строки;
				Пока СтруктураКомпоновки.Количество() Цикл
					Для каждого СтрокаГруппировка Из СтруктураКомпоновки Цикл
						Если СтрокаГруппировка.ПоляГруппировки.Элементы.Количество() Тогда
							ПолеГруппировки = СтрокаГруппировка.ПоляГруппировки.Элементы[0];
							Если ПолеГруппировки.Использование Тогда
								КешГруппировки[ПолеГруппировки.Поле].Order = Счетчик;
								
								Счетчик = Счетчик + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					СтруктураКомпоновки = СтрокаГруппировка.Структура;
				КонецЦикла;
				
				СтруктураКомпоновки = НастройкиВарианта.Структура[0].Колонки;
				Пока СтруктураКомпоновки.Количество() Цикл
					Для каждого СтрокаГруппировка Из СтруктураКомпоновки Цикл
						Если СтрокаГруппировка.ПоляГруппировки.Элементы.Количество() Тогда
							ПолеГруппировки = СтрокаГруппировка.ПоляГруппировки.Элементы[0];
							Если ПолеГруппировки.Использование Тогда
								КешГруппировки[ПолеГруппировки.Поле].Колонка = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					СтруктураКомпоновки = СтрокаГруппировка.Структура;
				КонецЦикла;
			Исключение
				ВызватьИсключение НСтр("ru = 'Вызываемый отчет имеет некорректную структуру'; en = 'The called report has an incorrect structure'");
			КонецПопытки;
			
			ТаблицаГруппировок.Сортировать("Order,Name");
			
			МассивГруппировок = Новый Массив;
			Для Каждого ТекущаяСтрока Из ТаблицаГруппировок Цикл
				Если Не ТекущаяСтрока.Колонка Тогда
					Группировка = Новый Структура("Name,Description", ТекущаяСтрока.Name, ТекущаяСтрока.Description);
					Группировка.Вставить("Order", ?(ТекущаяСтрока.Order = "_", 0, ТекущаяСтрока.Order));
					
					МассивГруппировок.Добавить(Группировка);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураДанных.Вставить("Groupings", МассивГруппировок);
			
			// ТСК Близнюк С.И.; 07.11.2018; task#1668{
			// Сортировка
			МассивСортировок = Новый Массив;
			Для Каждого ЭлементСортировки ИЗ НастройкиВарианта.Порядок.Элементы Цикл
				Если ЭлементСортировки.Использование Тогда
					ПолеНабораДанных = ПоляНабораДанных.Найти(ЭлементСортировки.Поле);
					Сортировка = Новый Структура("Name,Description,AscendingSort", ПолеНабораДанных.ПутьКДанным, ПолеНабораДанных.Заголовок, ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр);
					МассивСортировок.Добавить(Сортировка);
				КонецЕсли;
			КонецЦикла;
			СтруктураДанных.Вставить("Sorts", МассивСортировок);
			// ТСК Близнюк С.И.; 07.11.2018; task#1668}
			
		КонецЕсли;
		
		МассивДанных.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	МассивКнопок = Новый Массив;
	
	ИмяКнопки = "GenerateReport";
	ОписаниеКнопки = НСтр("ru = 'Сформировать'; en = 'Generate'");
	Кнопка = ра_ОбменДанными.ПолучитьСтруктуруНастроекКнопки(ИмяКнопки, ОписаниеКнопки);
	
	МассивКнопок.Добавить(Кнопка);
	
	НастройкиФормы = Новый Массив;
	НастройкиФормы.Добавить(Новый Структура("Name,Description", "Parameters", НСтр("ru = 'Параметры'; en = 'Parameters'")));
	НастройкиФормы.Добавить(Новый Структура("Name,Description", "Filters", НСтр("ru = 'Фильтры'; en = 'Filters'")));
	НастройкиФормы.Добавить(Новый Структура("Name,Description", "Groupings", НСтр("ru = 'Группировки'; en = 'Groupings'")));
	// ТСК Близнюк С.И.; 07.11.2018; task#1668{
	НастройкиФормы.Добавить(Новый Структура("Name,Description", "Sorts", НСтр("ru = 'Сортировка'; en = 'Sorts'")));
	// ТСК Близнюк С.И.; 07.11.2018; task#1668}
	
	СтруктураОтвета.Вставить("button_settings", МассивКнопок);
	СтруктураОтвета.Вставить("form_settings", НастройкиФормы);
	СтруктураОтвета.Вставить("value", МассивДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиПользователя

Функция ПолучитьМассивДействийДляЗадачи(ЗадачаСсылка, ЭтапПринятияУоН = Ложь, ПодписыватьЭП = Ложь, ОсновнойПредмет = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат Результат;
	КонецЕсли;
	
	БизнесПроцесс = ЗадачаСсылка.БизнесПроцесс;
	ТочкаМаршрута = ЗадачаСсылка.ТочкаМаршрута;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Confirm", НСтр("ru = 'Принять'; en = 'Confirm'"), Ложь, Ложь));
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "ReturnForRevork", НСтр("ru = 'На доработку'; en = 'Return for rework'"), Истина, Ложь));
		Иначе
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Perfomed", НСтр("ru = 'Выполнено'; en = 'Performed'"), Ложь, Ложь));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		Если ТипЗнч(ОсновнойПредмет) = тип("ДокументСсылка.ra_ZayavkaNaOcenkuSootvetstviya") Тогда 
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "ConformityAssessment", НСтр("ru = 'Перейти к результатам оценки соответствия'; en = 'Go to the result of conformity assessment'"), Ложь, Ложь));
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Examined", НСтр("ru = 'Завершить'; en = 'Complete'"), Ложь, Ложь));
		Иначе 	
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Examined", НСтр("ru = 'Ознакомился'; en = 'Examined'"), Ложь, Ложь));
		КонецЕсли;	
			
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Executed", НСтр("ru = 'Выполнено'; en = 'Executed'"), Ложь, Ложь));
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "AcceptInvitation", НСтр("ru = 'Принято'; en = 'AcceptInvitation'"), Ложь, Ложь));
		Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "RejectInvitation", НСтр("ru = 'Отклонено'; en = 'RejectInvitation'"), Истина, Ложь));
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			
			Если ЭтапПринятияУоН Тогда
				СинонимКнопки_Да  = НСтр("ru = 'Принять'; en = 'Accept'");
				// ТСК Близнюк С.И.; 04.10.2018; task#1340{
				//СинонимКнопки_Нет = НСтр("ru = 'Запросить информацию'; en = 'Request information'");
				СинонимКнопки_Нет = НСтр("ru = 'Запросить информацию / Отклонить'; en = 'Request information / Rejected'");
				// ТСК Близнюк С.И.; 04.10.2018; task#1340}
			ИначеЕсли ПодписыватьЭП Тогда 
				// ТСК Близнюк С.И.; 22.11.2018; task#1814{
				//СинонимКнопки_Да  = НСтр("ru = 'Утвердить'; en = 'Approved'");
				СинонимКнопки_Да  = НСтр("ru = 'Подписать'; en = 'Signature'");
				// ТСК Близнюк С.И.; 22.11.2018; task#1814}
				СинонимКнопки_Нет = НСтр("ru = 'Отклонить'; en = 'Rejected'");
			Иначе
				СинонимКнопки_Да  = НСтр("ru = 'Согласовать'; en = 'Approved'");
				СинонимКнопки_Нет = НСтр("ru = 'Отклонить'; en = 'Rejected'");
			КонецЕсли;
			
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Approved", СинонимКнопки_Да,  Ложь, ?(ПодписыватьЭП, Истина, Ложь)));
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Rejected", СинонимКнопки_Нет, Истина, Ложь));
			
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
			
			Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
				Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Examined", НСтр("ru = 'Ознакомился'; en = 'Examined'"), Ложь, Ложь));
			Иначе
				Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Examined", НСтр("ru = 'Аннулировать'; en = 'Canceled'"), Ложь, Ложь));
				Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "RepeatTheApproval", НСтр("ru = 'Повторить'; en = 'Repeat the approval'"), Истина, Ложь));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
			
			// ТСК Близнюк С.И.; 22.11.2018; task#1814{
			//Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Sign", НСтр("ru = 'Утвердить'; en = 'Approved'"), Ложь, Истина));
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Sign", НСтр("ru = 'Подписать'; en = 'Signature'"), Ложь, Истина));
			// ТСК Близнюк С.И.; 22.11.2018; task#1814}
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "RefusalOfSignature", НСтр("ru = 'Отклонить'; en = 'Rejected'"), Истина, Ложь));
			// ТСК Близнюк С.И.; 04.12.2018; task#2012{
			//Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Download", НСтр("ru = 'Скачать'; en = 'Download'"), Ложь, Ложь));
			// ТСК Близнюк С.И.; 04.12.2018; task#2012}
			// ТСК Близнюк С.И.; 22.11.2018; task#1814{
			//Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "AttachSignature", НСтр("ru = 'Подписать'; en = 'Attach signature'"), Ложь, Ложь));
			// ТСК Близнюк С.И.; 22.11.2018; task#1814}
			
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
			
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "Examined", НСтр("ru = 'Аннулировать'; en = 'Canceled'"), Ложь, Ложь));
			Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "RepeatTheApproval", НСтр("ru = 'Повторить'; en = 'Repeat the approval'"), Истина, Ложь));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 22.10.2018 {
	// добавим кнопку "Перенаправить задачу"
	Если Результат.Количество() > 0 Тогда 
		Результат.Добавить(Новый Структура("Name, Description, CommentRequired, DigitalSignature", "RedirectTask", НСтр("ru = 'Перенаправить'; en = 'Redirect'"), Истина, Ложь));	
	КонецЕсли;	
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 22.10.2018 } 	
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЗаявкаНаОценкуСоответствияИОтсутствуютНесоответствияПоОценкеСоответствия(Задача) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.ОсновнойПредмет КАК ОсновнойПредмет,
		|	ЕСТЬNULL(ra_Nesootvetstvie.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументНС
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|			И (ДанныеБизнесПроцессов.ОсновнойПредмет ССЫЛКА Документ.ra_ZayavkaNaOcenkuSootvetstviya)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ra_Nesootvetstvie КАК ra_Nesootvetstvie
		|		ПО (ДанныеБизнесПроцессов.ОсновнойПредмет = ra_Nesootvetstvie.ZayavkaNaOcenkuSootvetstviya)
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Задача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// это не заявка на оценку соответствия
		Возврат Ложь;
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ДокументНС) Тогда 
			// это заявка на оценку соответствия и есть документы НС
			Возврат Ложь;
		Иначе	
			// это заявка на оценку соответствия и нет документов НС
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
		
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		Если Значение.Типы().Количество() = 1 Тогда
			Если Значение.Типы()[0] = Тип("Строка") Тогда
				Возврат "String(" + Формат(Значение.КвалификаторыСтроки.Длина, "ЧГ=") + ")";
			Иначе
				ИмяТипа = XMLТип(Значение.Типы()[0]).ИмяТипа;
				ИмяТипа = СтрЗаменить(ИмяТипа, "EnumRef.", "Enumeration_"); // артефакт
				ИмяТипа = СтрЗаменить(ИмяТипа, "Ref.", "_");                // артефакт
				Если ИмяТипа = "decimal" Тогда                              // артефакт
					Возврат "Number";
				КонецЕсли;
				Если ИмяТипа = "boolean" Тогда
					Возврат "Boolean";
				КонецЕсли;
				Если ИмяТипа = "dateTime" Тогда
					Возврат "Date";
				КонецЕсли;
				
				Возврат ИмяТипа;
			КонецЕсли;
		Иначе
			ВызватьИсключение "Передача описания составного или неопределенного типа.";
		КонецЕсли;
	Иначе
		Возврат XMLСтрока(Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяТаблицыОбъектаПоИмениМетодаHTTP(ИмяМетода) Экспорт
	
	ИмяТаблицы = ИмяМетода;
	
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Catalog_", "Справочник.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Document_", "Документ.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "DocumentJournal_", "ЖурналДокументов.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Enumeration_", "Перечисление.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Constant_", "Константа.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ExchangePlan_", "ПланОбмена.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ChartOfAccounts_", "ПланСчетов.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ChartOfCalculationTypes_", "ПланВидовРасчета.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "ChartOfCharacteristicTypes_", "ПланВидовХарактеристик.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "InformationRegister_", "РегистрСведений.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "AccumulationRegister_", "РегистрНакопления.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "CalculationRegister_", "РегистрРасчета.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "AccountingRegister_", "РегистрБухгалтерии.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "BusinessProcess_", "БизнесПроцесс.");
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Task_", "Задача.");
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ПреобразоватьЗначениеВСтроковоеПредставление(Значение, ВВидеИдентификатора = Истина) Экспорт
	
	ТипЭлемента = ТипЗнч(Значение);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЭлемента) Тогда
		Если ОбщегоНазначения.ЭтоПеречисление(Значение.Метаданные()) Тогда
			Если Значение.Пустая() Тогда
				Возврат "";
			Иначе
				Если ВВидеИдентификатора Тогда
					Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(Значение);
				Иначе
					Возврат Строка(Значение);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ВВидеИдентификатора Тогда
				Возврат Строка(Значение.УникальныйИдентификатор());
			Иначе
				Возврат Строка(Значение);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЭлемента = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЭлемента = Тип("ХранилищеЗначения") Тогда
		Возврат "";
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция СформироватьТабличныйДокументИзЗапроса(Запрос) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	КолонкиЗапроса = ЗапросВыбора.Колонки;
	
	//Удаляем колонки ПРЕДСТАВЛЕНИЕ
	Счетчик = КолонкиЗапроса.Количество();
	Пока Счетчик <> 0 Цикл
		
		КолонкаЗапроса = КолонкиЗапроса[Счетчик - 1];
		
		ВыражениеПоля = Строка(КолонкаЗапроса.Поля[0]);
		Если СтрНайти(ВыражениеПоля, "ПРЕДСТАВЛЕНИЕ(") > 0 Тогда
			КолонкиЗапроса.Удалить(Счетчик - 1);
		КонецЕсли;
		
		Если ТипЗнч(КолонкаЗапроса) = Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда
			//Это ТЧ
			КолонкиЗапроса.Удалить(Счетчик - 1);
		КонецЕсли;
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	Источник.Имя = "ЛокальнаяБаза";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "Запрос";
	НаборДанных.ИсточникДанных = "ЛокальнаяБаза";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ТаблицаРеквизитов = ТаблицаРеквизитовИзСхемыЗапроса(СхемаЗапроса);
	
	Для Каждого КолонкаЗапроса ИЗ КолонкиЗапроса Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.ПутьКДанным = КолонкаЗапроса.Псевдоним;
		ПолеНабораДанных.ТипЗначения = КолонкаЗапроса.ТипЗначения;
		ПолеНабораДанных.Поле = КолонкаЗапроса.Псевдоним;
		ПолеНабораДанных.Заголовок = СинонимРеквизитаПоКолонкеСхемыЗапроса(ТаблицаРеквизитов, КолонкаЗапроса);
		
		УстановитьФорматПоляНабораДанных(ПолеНабораДанных, КолонкаЗапроса);
	КонецЦикла;
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Для Каждого ПараметрЗапроса Из Запрос.Параметры Цикл
		ПараметрДанных = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
		ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрЗапроса.Ключ);
		ПараметрДанных.Значение = ПараметрЗапроса.Значение;
		ПараметрДанных.Использование = Истина;
	КонецЦикла;
	
	ДетальныеЗаписи = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Для Каждого КолонкаЗапроса ИЗ КолонкиЗапроса Цикл
		ВыбранноеПоле = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаЗапроса.Псевдоним);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТабДок = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабДок;
	
КонецФункции

Процедура УстановитьФорматПоляНабораДанных(ПолеНабораДанных, КолонкаЗапроса)
	
	ОписаниеТипов = КолонкаЗапроса.ТипЗначения;
		
	Если ОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
		ПараметрФормат = Новый ПараметрКомпоновкиДанных("Формат");
		Формат = ПолеНабораДанных.Оформление.НайтиЗначениеПараметра(ПараметрФормат);
		Формат.Использование = Истина;
		Формат.Значение = НСтр("ru = 'ДФ=дд.ММ.гггг'; en = 'DF=dd.MM.yyyy'");
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаРеквизитовИзСхемыЗапроса(СхемаЗапроса)
	
	СвойстваТаблицы = "ИмяТаблицы,ПсевдонимТаблицы,Имя,Синоним,Псевдоним";
	ТаблицаДанных = СформироватьПустуюТаблицуНастроек(СвойстваТаблицы);
	
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	Источники = ЗапросВыбора.Операторы[0].Источники;
	
	Для Каждого Источник Из Источники Цикл
		
		ИмяТаблицы = Источник.Источник.ИмяТаблицы;
		ИмяТаблицы = СтрЗаменить(ИмяТаблицы, ".СрезПоследних", "");
		
		ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяТаблицы);
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
		ТаблицаСвойств = ОбщегоНазначения.ПолучитьТаблицуОписанияСвойствОбъекта(ОбъектМетаданных, "Имя,Синоним");
		
		Для Каждого СтрокаИсточник Из ТаблицаСвойств Цикл
			
			СтрокаПриемник = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, "Имя,Синоним");
			
			СтрокаПриемник.ИмяТаблицы = Источник.Источник.ИмяТаблицы;
			СтрокаПриемник.ПсевдонимТаблицы = Источник.Источник.Псевдоним;
			
		КонецЦикла;
				
	КонецЦикла;
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("ВыражениеПоля");
	ТаблицаКолонок.Колонки.Добавить("Псевдоним");
	
	ТаблицаКолонок.Индексы.Добавить("ВыражениеПоля");
	
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл
		
		Для Каждого Поле Из Колонка.Поля Цикл
			
			СтрокаТЗ = ТаблицаКолонок.Добавить();
			
			СтрокаТЗ.ВыражениеПоля = Строка(Поле);
			СтрокаТЗ.Псевдоним = Колонка.Псевдоним;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтрокаПоиска = СтрокаДанных.ПсевдонимТаблицы + "." + СтрокаДанных.Имя;
		ИскомаяСтрока = ТаблицаКолонок.Найти(СтрокаПоиска, "ВыражениеПоля");
		
		Если ИскомаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ИскомаяСтрока, "Псевдоним");
		Иначе
			Для Каждого ИскомаяСтрока Из ТаблицаКолонок Цикл
				Если СтрНайти(ИскомаяСтрока.ВыражениеПоля, СтрокаПоиска) > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, ИскомаяСтрока, "Псевдоним");
				КонецЕсли;
			КонецЦикла;					
		КонецЕсли;
		
	КонецЦикла;
			
	Возврат ТаблицаДанных;
		
КонецФункции

Функция СинонимРеквизитаПоКолонкеСхемыЗапроса(ТаблицаДанных, Колонка)
	
	СтрокаТЗ = ТаблицаДанных.Найти(Колонка.Псевдоним, "Псевдоним");
	
	Если СтрокаТЗ = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаТЗ.Синоним;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьЗначенияПеречисления(Тип, ПараметрыВыбора = Неопределено) Экспорт
	
	Если ПараметрыВыбора = Неопределено Тогда
		ПараметрыВыбора = Новый Структура("Отбор", Новый Структура);
	КонецЕсли;
	
	Если ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип.Типы()[0], ПараметрыВыбора);
	Иначе
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип, ПараметрыВыбора);
	КонецЕсли;
	
	Массив = Новый Массив;
	
	Для каждого Элемент Из ДанныеВыбора Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Значение = Элемент.Значение.Значение;
		Иначе
			Значение = Элемент.Значение;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("Ref_Key",       XMLСтрока(Значение));
		Структура.Вставить("FormattedView", Элемент.Представление);
		Структура.Вставить("Presentation",  Элемент.Представление);
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция МассивОбязательныхРеквизитов(ОбъектМетаданных) Экспорт
	
	МассивОбязательныхРеквизитов = Новый Массив;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			МассивОбязательныхРеквизитов.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОбязательныхРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСSapSRM

Процедура ВыполнитьРегламентноеЗадание_ра_ВыгрузкаДанныхПоНесоответствиямВЕОСЗакупки() Экспорт 
	
	Если Константы.ра_ИспользоватьВнешнююОбработкуИнтеграции.Получить() Тогда
		во = ВнешниеОбработки.Создать(Константы.ра_ПутьКОбработкеВебСервисовИнтеграции.Получить(), Ложь);
		во.ВыполнитьСценарийПодготовитьДанныеОНесоответствияхДляВыгрузки();        
	Иначе
		Обработки.ра_Интеграция.ВыполнитьСценарийПодготовитьДанныеОНесоответствияхДляВыгрузки();
	КонецЕсли;
	
КонецПроцедуры	
	
#КонецОбласти