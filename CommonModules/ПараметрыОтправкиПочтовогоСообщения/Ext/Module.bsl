// Устанавливает свойство Тема в структуре ПараметрыОтправки.
//
Процедура УстановитьТему(ПараметрыОтправки, Тема) Экспорт
	
	ПараметрыОтправки.Вставить("Тема", Тема);
	
КонецПроцедуры

// Устанавливает свойство Текст в структуре ПараметрыОтправки.
//
Процедура УстановитьТекст(ПараметрыОтправки, Текст) Экспорт
	
	ПараметрыОтправки.Вставить("Текст", Текст);
	
КонецПроцедуры

// Устанавливает свойство Важность в структуре ПараметрыОтправки.
//
Процедура УстановитьВажность(ПараметрыОтправки, Важность) Экспорт
	
	ПараметрыОтправки.Вставить("Важность", Важность);
	
КонецПроцедуры

// Устанавливает свойство <Поле> в структуре ПараметрыОтправки.
//
Процедура УстановитьПолучателей(ПараметрыОтправки, Поле, ПолучателиСтр) Экспорт
	
	Если Не (Поле = "Кому" Или Поле = "Копия" Или Поле = "СкрытаяКопия") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное поле получателей почтового сообщения'; en = 'Incorrect recipient field of a email'");
	КонецЕсли;
	
	ПараметрыОтправки[Поле] = ПолучателиСтр;
	
КонецПроцедуры

// Очищает массив вложений в структуре ПараметрыОтправки.
//
Процедура ОчиститьВложения(ПараметрыОтправки) Экспорт
	
	ПараметрыОтправки.Вложения.Очистить();
	
КонецПроцедуры

// Добавляет вложение - Файл в структуру ПараметрыОтправки.
//
Процедура ДобавитьВложениеФайл(ПараметрыОтправки, Ссылка) Экспорт
	
	ВложениеИнфо = Новый Структура;
	ВложениеИнфо.Вставить("Тип", "СсылкаНаФайл");
	ВложениеИнфо.Вставить("Ссылка", Ссылка);
	ПараметрыОтправки.Вложения.Добавить(ВложениеИнфо);
	
КонецПроцедуры

// Добавляет вложение - ВременноеХранилище в структуру ПараметрыОтправки.
//
Процедура ДобавитьВложениеИзВременногоХранилища(ПараметрыОтправки, Адрес, ИмяФайла) Экспорт
	
	ВложениеИнфо = Новый Структура;
	ВложениеИнфо.Вставить("Тип", "ВременноеХранилище");
	ВложениеИнфо.Вставить("Адрес", Адрес);
	ВложениеИнфо.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыОтправки.Вложения.Добавить(ВложениеИнфо);
	
КонецПроцедуры

// Возвращает профиль из структуры ПараметрыОтправки.
//
Функция ПолучитьПрофиль(ПараметрыОтправки) Экспорт
	
	Если ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль <> Неопределено Тогда
		Возврат ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль.Профиль;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает информацию о профиле.
//
Функция ПолучитьСтруктуруПрофиля(ПараметрыОтправки) Экспорт
	
	Если ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль <> Неопределено Тогда
		Возврат ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Устанавливает Профиль в структуре ПараметрыОтправки.
//
Процедура УстановитьПрофиль(ПараметрыОтправки, Профиль) Экспорт
	
	Для каждого НастройкиПрофиль Из ПараметрыОтправки.НастройкиПрофилейДляОтправки.ДоступныеПрофили Цикл
		Если Профиль = НастройкиПрофиль.Профиль Тогда
			ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль = НастройкиПрофиль;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает учетную запись в структуре ПараметрыОтправки.
//
Процедура УстановитьУчетнуюЗапись(ПараметрыОтправки, УчетнаяЗапись) Экспорт
	
	ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль = УчетнаяЗапись;
	
КонецПроцедуры

// Устанавливает режим шифрования в структуре ПараметрыОтправки.
//
Процедура УстановитьРежимШифрования(ПараметрыОтправки, Шифровать, Сертификаты = Неопределено) Экспорт
	
	Если Шифровать Тогда
		ПараметрыОтправки.Вставить("Шифровать", Истина);
		ПараметрыОтправки.Вставить("ОтпечаткиСертификатовШифрования", Новый Массив);
		Для Каждого Сертификат Из Сертификаты Цикл
			Если ПараметрыОтправки.ОтпечаткиСертификатовШифрования.Найти(Сертификат) = Неопределено Тогда
				ПараметрыОтправки.ОтпечаткиСертификатовШифрования.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыОтправки.Вставить("Шифровать", Ложь);
		ПараметрыОтправки.Вставить("ОтпечаткиСертификатовШифрования", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет документ в структуре ПараметрыОтправки.
//
Процедура ДобавитьДокумент(ПараметрыОтправки, Документ) Экспорт
	
	ПараметрыОтправки.Документы.Добавить(Документ);
	
КонецПроцедуры

// Возвращает вид почтового клиента из структуры ПараметрыОтправки.
//
Функция ПолучитьВидПочтовогоКлиента(ПараметрыОтправки) Экспорт
	
	Возврат ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль.ВидПочтовогоКлиента;
	
КонецФункции

// Возвращает пароль из структуры ПараметрыОтправки.
//
Функция ПолучитьПароль(ПараметрыОтправки) Экспорт
	
	Возврат ПараметрыОтправки.НастройкиПрофилейДляОтправки.Профиль.Пароль;
	
КонецФункции

// Устанавливает пароль в структуре ПараметрыОтправки.
//
Процедура УстановитьПароль(ПараметрыОтправки, Пароль) Экспорт
	
	ПараметрыОтправки.Вставить("ПарольУчетнойЗаписиПочты", Пароль);
	
КонецПроцедуры

// Возвращает список доступных профилей для отправки из структуры ПараметрыОтправки.
//
Функция ПолучитьСписокДоступныхПрофилей(ПараметрыОтправки, Знач ЭтоВебКлиент = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого СтруктураПрофиля Из ПараметрыОтправки.НастройкиПрофилейДляОтправки.ДоступныеПрофили Цикл
		Если ЭтоВебКлиент
			И СтруктураПрофиля.ВидПочтовогоКлиента <> ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.ИнтернетПочта") Тогда
			Продолжить;
		Иначе
			Результат.Добавить(СтруктураПрофиля.Профиль);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение свойства из структуры ПараметрыОтправки по имени свойства.
//
Функция Свойство(ПараметрыОтправки, Имя, Приемник = Неопределено) Экспорт
	
	Если Имя = "ПрикладыватьФайлВзаимодействияСЭД" Тогда
		Приемник = ПараметрыОтправки[Имя];
		Возврат ПараметрыОтправки[Имя];
	ИначеЕсли Имя = "ОтправлятьПодписиЭППоПочте" Тогда
		Приемник = ПараметрыОтправки[Имя];
		Возврат ПараметрыОтправки[Имя];
	ИначеЕсли Имя = "ОтправкаПодписьСообщения" Тогда
		Приемник = ПараметрыОтправки[Имя];
		Возврат ПараметрыОтправки[Имя];
	ИначеЕсли Имя = "РасширениеДляФайловПодписи" Тогда
		Приемник = ПараметрыОтправки[Имя];
		Возврат ПараметрыОтправки[Имя];
	КонецЕсли;
	
КонецФункции


