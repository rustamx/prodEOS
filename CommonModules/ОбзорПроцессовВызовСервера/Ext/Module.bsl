
////////////////////////////////////////////////////////////////////////////////
// Обзор процессов вызов сервера: содержит процедуры и функции по формированию
//                                HTML-обзора процессов и их шаблонов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает HTML-обзор шаблона процесса
//
// Параметры:
//   Шаблон - СправочникСсылка.<ШаблонПроцесса> - ссылка на шаблон процесса.
//   ДляСпискаШаблоновПроцессов - Булево - признак получения HTML-обзора для списка шаблонов.
//
Функция ПолучитьОбзорШаблонаПроцесса(Шаблон, ДляСпискаШаблоновПроцессов = Ложь) Экспорт
	
	HTMLТекст = ОбзорПроцессовВызовСервераПереопределяемый.ПолучитьОбзорШаблонаПроцесса(Шаблон);
	Если ЗначениеЗаполнено(HTMLТекст) Тогда 
		Возврат HTMLТекст;
	КонецЕсли;
	
	HTMLТекст = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body>";
	
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	МетаданныеШаблона = Шаблон.Метаданные();
	РеквизитыШаблонаПроцесса = 
		"НаименованиеБизнесПроцесса, Описание, Важность, Наименование, Комментарий";
	ДобавитьРеквизитОписаниеВОбзор = Истина;
	Если МетаданныеШаблона.Реквизиты.Найти("Описание") = Неопределено Тогда
		РеквизитыШаблонаПроцесса = СтрЗаменить(РеквизитыШаблонаПроцесса, "Описание, ", "");
		ДобавитьРеквизитОписаниеВОбзор = Ложь;
	КонецЕсли;
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, РеквизитыШаблонаПроцесса);
	
	Если Не ДляСпискаШаблоновПроцессов Тогда
		ИмяПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
		
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<a href=""v8doc:%1"">%2</a> (%3)'; en = '<a href=""v8doc:%1"">%2</a> (%3)'"),
			ПолучитьНавигационнуюСсылку(Шаблон),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Строка(Шаблон)),
			Метаданные.БизнесПроцессы[ИмяПроцесса].Синоним);
	Иначе
		
		ЧислоБизнесПроцессов = БизнесПроцессыИЗадачиСервер.ПолучитьЧислоБизнесПроцессовПоШаблону(Шаблон);
		
		Если ЧислоБизнесПроцессов <> 0 Тогда
			
			СтрокаUrl = "processnum";
			
			HTMLТекст = HTMLТекст + "<br>";
			
			HTMLТекст = HTMLТекст +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<a href=""v8doc:%1"">Запущено процессов: %2</a>'; en = '<a href=""v8doc:%1"">Processes started: %2</a>'"),
					СтрокаUrl,
					Формат(ЧислоБизнесПроцессов, "ЧГ=0"));
					
			HTMLТекст = HTMLТекст + "<br>";		
			HTMLТекст = HTMLТекст + "<br>";
					
		КонецЕсли;	

	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Комментарий) Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Комментарий: '; en = 'Comment: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст,
			РеквизитыШаблона.Комментарий,
			"");
		HTMLТекст = HTMLТекст + "<br>";
	КонецЕсли;
	
	Если Не ДляСпискаШаблоновПроцессов Тогда
		HTMLТекст = HTMLТекст + "<br>";
		HTMLТекст = HTMLТекст + "<br>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.НаименованиеБизнесПроцесса) Тогда
		HTMLТекст = HTMLТекст + "<B>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст, "", РеквизитыШаблона.НаименованиеБизнесПроцесса);
		HTMLТекст = HTMLТекст + "</B>";
	КонецЕсли;
	
	Если ДобавитьРеквизитОписаниеВОбзор И ЗначениеЗаполнено(РеквизитыШаблона.Описание) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		
		ОписаниеПроцесса = РаботаС_HTML.ЗаменитьСпецСимволыHTML(РеквизитыШаблона.Описание);
		ОписаниеПроцесса = СтрЗаменить(ОписаниеПроцесса, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
		ОписаниеПроцесса = СтрЗаменить(ОписаниеПроцесса, Символы.ПС, "<br>");
		HTMLТекст = HTMLТекст + ОписаниеПроцесса;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Важность) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст,НСтр("ru = 'Важность:'; en = 'Importance:'"), ПредставлениеВажности(РеквизитыШаблона.Важность));
	КонецЕсли;
	
	МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон);
	МенеджерШаблона.ЗаполнитьОбзорШаблона(HTMLТекст, Шаблон);
		
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает текстовое описание назначения процесса в виде html документа.
//
// Параметры:
//   Процесс - БизнесПроцессСсылка - ссылка на процесс
//
Функция ПолучитьОписаниеПроцесса_HTML(Процесс) Экспорт
	
	HTMLТекст = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body>";
		
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
	ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
		HTMLТекст, МенеджерПроцесса.ПолучитьОписаниеПроцесса(), "");
	
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает HTML-обзор процесса
//
// Параметры:
//   Процесс - БизнесПроцессСсылка - ссылка на процесс
//
Функция ПолучитьОбзорПроцесса(Процесс) Экспорт
	
	HTMLТекст = ОбзорПроцессовВызовСервераПереопределяемый.ПолучитьОбзорПроцесса(Процесс);
	Если ЗначениеЗаполнено(HTMLТекст) Тогда 
		Возврат HTMLТекст;
	КонецЕсли;
	
	HTMLТекст = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body>";
		
	Если ЗначениеЗаполнено(Процесс) Тогда
		
		HTMLТекст = HTMLТекст + "<table>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td>";
	
		МетаданныеПроцесса = Процесс.Метаданные();
		РеквизитыПроцесса = 
			"Наименование, Описание, Предметы";
		ДобавитьРеквизитОписаниеВОбзор = Истина;
		Если МетаданныеПроцесса.Реквизиты.Найти("Описание") = Неопределено Тогда
			РеквизитыПроцесса = СтрЗаменить(РеквизитыПроцесса, ", Описание", "");
			ДобавитьРеквизитОписаниеВОбзор = Ложь;
		КонецЕсли;
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, РеквизитыПроцесса);
		
		Если ЗначениеЗаполнено(РеквизитыПроцесса.Наименование) Тогда
			HTMLТекст = HTMLТекст + "<B>";
			ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
				HTMLТекст, "", РеквизитыПроцесса.Наименование);
			HTMLТекст = HTMLТекст + "</B>";
		КонецЕсли;
		
		Предметы = РеквизитыПроцесса.Предметы.Выгрузить();
		
		ПредметДокумент = ОбзорЗадачВызовСервера.ПолучитьОсновнойПредметДокумент(Предметы);
		Если ЗначениеЗаполнено(ПредметДокумент) Тогда
		
			ОбзорПредмета = ОбзорЗадачВызовСервера.ПолучитьОбзорПредметаЗадачи(ПредметДокумент);
			Если Не ПустаяСтрока(ОбзорПредмета) Тогда
				HTMLТекст = HTMLТекст + "<p>" + ОбзорПредмета + "</p>";
			КонецЕсли;	
				
		КонецЕсли;		
		
		Если ДобавитьРеквизитОписаниеВОбзор И ЗначениеЗаполнено(РеквизитыПроцесса.Описание) Тогда
			HTMLТекст = HTMLТекст + "<p>";
			
			ОписаниеПроцесса = РеквизитыПроцесса.Описание;
			ОписаниеПроцесса = РаботаС_HTML.ЗаменитьСпецСимволыHTML(ОписаниеПроцесса);
			ОписаниеПроцесса = СтрЗаменить(ОписаниеПроцесса, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
			ОписаниеПроцесса = СтрЗаменить(ОписаниеПроцесса, Символы.ПС, "<br>");
			HTMLТекст = HTMLТекст + ОписаниеПроцесса;
		КонецЕсли;
		
		Попытка
			МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
			МенеджерШаблона.ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс);
		Исключение
		КонецПопытки;
		
		// Контроль
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
			
			КонтролерыТаблица = РаботаСБизнесПроцессамиВызовСервера.КонтролерыПроцесса(Процесс);
			Контролеры = КонтролерыТаблица.ВыгрузитьКолонку("Контролер");
			Если Контролеры.Количество() <> 0 Тогда
				
				HTMLТекст = HTMLТекст + "<br>";
			
				ВсеСнятыСКонтроля = Истина;
				Для Каждого КонтрольСтрока Из КонтролерыТаблица Цикл
					Если КонтрольСтрока.СнятСКонтроля = Ложь Тогда
						ВсеСнятыСКонтроля = Ложь;
					КонецЕсли;	
				КонецЦикла;	
				
				КонтролерыСтрокой = СтрСоединить(Контролеры, ", ");
				
				Если Контролеры.Количество() > 1 Тогда
					ПодписьКонтролера = НСтр("ru = 'Контролеры: '; en = 'Monitored by: '");
				Иначе	
					ПодписьКонтролера = НСтр("ru = 'Контролер: '; en = 'Monitor: '");
				КонецЕсли;	
				
				ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, ПодписьКонтролера);
				HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<A href=ОткрытьКарточкуКонтроля>%1</A>", КонтролерыСтрокой);
					
				Если ВсеСнятыСКонтроля Тогда 	
					Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
				КонецЕсли;	
				
				HTMLТекст = HTMLТекст + "<br>";
				
			КонецЕсли;	
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr>";
		
		HTMLТекст = HTMLТекст + "</table>";
	Иначе
		
		HTMLТекст = HTMLТекст
			+ "<table height=""100%"">"
			+ "<tr height=""50%""><td/></tr>"
			+ "<tr align=""center""><td>";
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, НСтр("ru = 'Нет описания процесса.'; en = 'No process details.'"), "C0C0C0");
			
		HTMLТекст = HTMLТекст
			+ "</td></tr>"
			+ "<tr height=""50%""><td/></tr>"
			+ "</table>";
			
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "</body></html>";
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает ссылку на процесс по уникальную идентификатору и наименованию объекта метаданных.
//
// УникальныйИдентификатор - УникальныйИдентификатор
// НаименованиеПроцесса - Строка - наименование объекта метаданных процесса
//
Функция СсылкаНаПроцессПоУникальномуИдентификатору(УникальныйИдентификатор, НаименованиеПроцесса) Экспорт
	
	Возврат БизнесПроцессы[НаименованиеПроцесса].ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

// Возвращает шестнадцатеричное представление цвета "ЗакрытыеНеактуальныеЗаписи"
//
Функция ЦветЗакрытыеНеактуальныеЗаписи() Экспорт
	
	Возврат "808080";
	
КонецФункции

// Возвращает шестнадцатеричное представление цвета "ПросроченныеДанныеЦвет"
//
Функция ЦветПросроченныеДанные() Экспорт
	
	Возврат "B22222";
	
КонецФункции

// Получает результаты выполнения по процессу или задаче
//
// Параметры:
//   МассивОбъектов - Ссылка на массив - в нем процессы или задачи
//   ТипОбъекта  - Строка = "Задача" или "Процесс"
//
// Возвращаемое значение:
//   Соответствие  - содержит ключ = Объект
//   и Значение - Результат(ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач)
//   Если нет результата и задача не выполнена, то в Соответствие не будет такой записи
//
Функция РезультатыВыполненияПоОбъектам(МассивОбъектов, ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ТипОбъекта = "Задача" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
			|	РезультатыВыполненияПроцессовИЗадач.Результат КАК Результат
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО ЗадачаИсполнителя.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка В(&МассивОбъектов)";
			
	ИначеЕсли ТипОбъекта = "Процесс" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Ссылка,
			|	ДанныеБизнесПроцессов.Завершен КАК Выполнена,
			|	РезультатыВыполненияПроцессовИЗадач.Результат КАК Результат
			|ИЗ
			|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
			|ГДЕ
			|	ДанныеБизнесПроцессов.БизнесПроцесс В(&МассивОбъектов)";
			
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	РезультатСоответствие = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаРезультата Цикл
		Если ЗначениеЗаполнено(Строка.Результат) Или Строка.Выполнена Тогда
			РезультатСоответствие[Строка.Ссылка] = Строка.Результат;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат РезультатСоответствие;
	
КонецФункции

// Возвращает картинку для статуса выыполнения задачи или процесса
//
// Параметры:
//   РезультатВыполненияЗадачи - Перечисление ВариантыВыполненияПроцессовИЗадач - состояние задачи
//
// Возвращаемое значение:
//   Картинка - картинка для задачи
//
Функция ПолучитьКартинкуПоСтатусуВыполнения(РезультатВыполненияЗадачи) Экспорт
	
	Картинка = Неопределено;
	
	Если РезультатВыполненияЗадачи = 
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			
		Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Положительный;
		
	ИначеЕсли РезультатВыполненияЗадачи = 
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
		
		Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Отрицательный;
		
	ИначеЕсли РезультатВыполненияЗадачи = Перечисления.
		ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
		
		Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_ПоложительныйСЗамечаниями;
		
	Иначе
		Картинка = БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции	

// Возвращает ссылку на задачу и исполнителя по уникальному идентификатору
//
// Параметры:
// УникальныйИдентификатор - УникальныйИдентификатор задачи
//
// Возвращаемое значение:
//   Структура - "Задача, Исполнитель, Адрес"
//
Функция ПараметрыЗадачиПоУникальномуИдентификатору(
	УникальныйИдентификатор) Экспорт
	
	Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(УникальныйИдентификатор);
	Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Исполнитель");
	Адрес = ПолучитьОсновнойАдрес(Исполнитель);
	
	ПараметрыЗадачи = Новый Структура("Задача, Исполнитель, Адрес", Задача, Исполнитель, Адрес);
	
	Возврат ПараметрыЗадачи;
	
КонецФункции

Функция ПолучитьОсновнойАдрес(Контакт)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.РолиИсполнителей") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") 
		Или ТипЗнч(Контакт) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
	
		ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Контакт, 
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
		Если ТаблицаКонтактовEmail.Количество() <> 0 Тогда
			Возврат ТаблицаКонтактовEmail[0].Значение;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

// Возвращает задачу процесса по точке маршрута
Функция ПолучитьЗадачуПроцесса(Процесс, ТочкаМаршрута) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	   |	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	   |	ЗадачаИсполнителя.Дата КАК Дата
	   |ИЗ
	   |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	   |ГДЕ
	   |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	   |	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	Дата УБЫВ";
	   
	Запрос.УстановитьПараметр("БизнесПроцесс", Процесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции	

// Возвращает представление срока исполнения в виде
// дата (длительность) или длительность (дата).
//
// Параметры:
//  Дата - Дата - срок исполнения датой.
//  Дни, Часы, Минуты - Число - длительность исполнения.
//  ИспользоватьДатуИВремяВСрокахЗадач - Булево - признак использования даты и времени в сроках
//                                       процессов и задач.
//
Функция ПредставлениеСрокаИсполнения(Дата, Дни, Часы, Минуты,
	ИспользоватьДатуИВремяВСрокахЗадач, ВариантУстановкиСрока) Экспорт
	
	ПредставлениеСрока = "";
	
	Если ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
		ПредставлениеСрока = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			Дата, 0, 0, 0, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			ВариантУстановкиСрока);
	Иначе
		
		ПредставлениеСрока = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			Неопределено, Дни, Часы, Минуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			ВариантУстановкиСрока);
		
	КонецЕсли;	
			
	Возврат ПредставлениеСрока;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеВажности(Важность)
	
	Если Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		Возврат НСтр("ru = 'Высокая'; en = 'High'");
	ИначеЕсли Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
		Возврат НСтр("ru = 'Обычная'; en = 'Normal'");
	ИначеЕсли Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		Возврат НСтр("ru = 'Низкая'; en = 'Low'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти
