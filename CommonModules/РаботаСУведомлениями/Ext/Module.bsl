////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру данных уведомления.
//
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомления() Экспорт
	
	ДанныеУведомления = Новый Структура("ТемаУведомления, ТекстУведомления, Файлы");
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Формирует данные уведомления событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомленияПоОбъектам(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	) Экспорт
	
	ДанныеУведомления = ДанныеУведомления();
	
	ДанныеУведомления.ТемаУведомления = СформироватьТемуУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	
	ДанныеУведомления.ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	
	ДанныеУведомления.Файлы = СформироватьФайлыУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Формирует данные уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
	) Экспорт
	
	ДанныеУведомления = ДанныеУведомления();
	
	ДанныеУведомления.ТемаУведомления = СформироватьТемуУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание,
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
		);
	
	ДанныеУведомления.ТекстУведомления = СформироватьТекстУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание,
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
		);
	
	ДанныеУведомления.Файлы = СформироватьФайлыУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Добавить представление реквизита к строке.
//
// Параметры:
//  Строка - Строка - Обрабатываемая строка.
//  ИмяРеквизита - Строка - Имя реквизита.
//  Значение - Строка - Значение реквизита.
//  ДополнительноеЗначение - Строка - Дополнительное значение реквизита.
//
Процедура ДобавитьРеквизитКСтроке(Строка, ИмяРеквизита, Значение, ДополнительноеЗначение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеРеквизита = Новый Массив;
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ПредставлениеРеквизита.Добавить(СтрШаблон("<b>%1:</b>", ИмяРеквизита));
	КонецЕсли;
	ПредставлениеРеквизита.Добавить(Значение);
	Если ЗначениеЗаполнено(ДополнительноеЗначение) Тогда
		ПредставлениеРеквизита.Добавить(СтрШаблон("(%1)", ДополнительноеЗначение));
	КонецЕсли;
	ПредставлениеРеквизита = СтрСоединить(ПредставлениеРеквизита, " ");
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Строка,
		Символы.ПС,
		ПредставлениеРеквизита);
	
КонецПроцедуры

// Добавляет строку табличной части с уведомлением в массив уведомлений в специальную структуру.
Процедура ДобавитьУведомлениеВМассив(МассивУведомлений, СтрокаУведомления) Экспорт
	
	Уведомление = Новый Структура;
	Уведомление.Вставить("Объект", СтрокаУведомления.Объект);
	Уведомление.Вставить("Пользователь", СтрокаУведомления.Пользователь);
	Уведомление.Вставить("СпособУведомления", СтрокаУведомления.СпособУведомления);
	Уведомление.Вставить("ВидСобытия", СтрокаУведомления.ВидСобытия);
	Уведомление.Вставить("ОбъектПодписки", СтрокаУведомления.ОбъектПодписки);
	
	МассивУведомлений.Добавить(Уведомление);
	
КонецПроцедуры

// Возвращает дополнительные виды событий по виду события.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//
// Возвращаемое значение:
//  Массив - Дополнительные виды событий.
//
Функция ДополнительныеВидыСобытий(ВидСобытия) Экспорт
	
	ДополнительныеВидыСобытий = Новый Массив;
	
	Для Каждого Уведомление Из ДоступныеУведомления() Цикл
		Если Уведомление.ОсновноеСобытие = ВидСобытия Тогда
			ДополнительныеВидыСобытий.Добавить(Уведомление.ВидСобытия);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительныеВидыСобытий;
	
КонецФункции

// Возвращает таблицу доступных уведомлений с учетом функциональных опций.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Доступные уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений
//                 - Вид события.
//   * ОсновноеСобытие - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений
//                 - Основное событие.
//   * Представление - Строка - Текстовое представление уведомления.
//   * ДоступнаПодписка - Булево - Доступность подписки на уведомление.
//   * ДоступнаЧастота - Булево - Доступность настройки частоты уведомления.
//   * ДоступенСрок - Булево - Доступность настройки срока уведомления.
//   * ДополнительныеНастройки - Массив - Массив структур дополнительных настроек.
//
Функция ДоступныеУведомления() Экспорт
	
	ДоступныеУведомления = Новый ТаблицаЗначений;
	ДоступныеУведомления.Колонки.Добавить("ВидСобытия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	ДоступныеУведомления.Колонки.Добавить("ОсновноеСобытие",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	ДоступныеУведомления.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка"));
	ДоступныеУведомления.Колонки.Добавить("ДоступнаПодписка",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДоступнаЧастота",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДоступенСрок",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДополнительныеНастройки",
		Новый ОписаниеТипов("Массив"));
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		
		// Ход выполнения процесса
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Ход выполнения процесса'; en = 'Process execution progress'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Поступление новой задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Поступление новой задачи'; en = 'New task'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Отмена выполнения задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Отмена выполнения задачи'; en = 'Task execution cancelation'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Контроль просроченных задач
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача;
		СтрокаУведомления.Представление = НСтр("ru = 'Контроль просроченных задач'; en = 'Overdue tasks monitor'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Контроль просроченных задач автором
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора;
		СтрокаУведомления.ОсновноеСобытие = Перечисления.СобытияУведомлений.ПросроченаЗадача;
		СтрокаУведомления.Представление = НСтр("ru = 'Контроль просроченных задач (автор)'; en = 'Overdue tasks monitor (author)'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение сроков выполнения задач
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Приближение сроков выполнения задач'; en = 'Approaching tasks due date'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
	КонецЕсли;
	
	// Назначение ответственным за документ.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного;
	СтрокаУведомления.Представление = НСтр("ru = 'Назначение ответственным за документ'; en = 'Appointed as responsible for a document'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	
	// Окончание срока действия документов
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента;
	СтрокаУведомления.Представление = НСтр("ru = 'Окончание срока действия документов'; en = 'Document period of validity expiration'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Приближение окончания срока действия документов
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента;
	СтрокаУведомления.Представление = НСтр("ru = 'Приближение окончания срока действия документов'; en = 'Expiring documents period of validity'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Истина;
	СтрокаУведомления.ДоступенСрок = Истина;
	
	РаботаСУведомлениямиПереопределяемый.ДоступныеУведомления(ДоступныеУведомления);
	
	Для Каждого СтрокаУведомления Из ДоступныеУведомления Цикл
		Если СтрокаУведомления.ОсновноеСобытие = Неопределено Тогда
			СтрокаУведомления.ОсновноеСобытие = СтрокаУведомления.ВидСобытия;
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеУведомления.Сортировать("Представление");
	
	Возврат ДоступныеУведомления;
	
КонецФункции

// Возвращает код языка указанного пользователя.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, язык которого определяется.
//
// Возвращаемое значение:
//   Строка - код языка пользователя, если указан, или пустая строка.
//
Функция КодЯзыка(Пользователь) Экспорт
	
	КодЯзыка = "";
	Если ЗначениеЗаполнено(Пользователь) Тогда
		КодЯзыка = ЛокализацияКонфигурации.КодЯзыкаПользователя(Пользователь);
	КонецЕсли;
	
	Возврат КодЯзыка;
	
КонецФункции

// Обрабатывает регламентное задание контроля приближения окончания срока действия
Процедура КонтрольОкончанияСрокаДействия() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольОкончанияСрокаДействия);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе срока действия документа
	АктивныеДокументыСПодписчиками = ВыбратьАктивныеДокументыСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеДокументыСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОДокументах(МассивПодписчики);
	
	Для Каждого СтрокаАктивныеДокументыСПодписчиками Из АктивныеДокументыСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеДокументыСПодписчиками.Подписчик, "Пользователь");
		СрокОкончания = ПолучитьОсталосьДней(СтрокаАктивныеДокументыСПодписчиками.ДатаОкончанияДействия, ТекущаяДата);
		
		Если СрокОкончания > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеДокументыСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаУведомления) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеДокументыСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаУведомления Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныеДокументыСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
			СтрокаАктивныеДокументыСПодписчиками.Документ,
			СтрокаАктивныеДокументыСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
	// Уведомление о завершившихся документах
	НеобработанныеЗавершившиесяДокументыСПодписчиками = ВыбратьЗавершившиесяДокументыСПодписчиками(ТекущаяДата);
	
	Для Каждого СтрокаЗавершившийсяДокументСПодписчиками Из НеобработанныеЗавершившиесяДокументыСПодписчиками Цикл
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаЗавершившийсяДокументСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
			СтрокаЗавершившийсяДокументСПодписчиками.Документ,
			СтрокаЗавершившийсяДокументСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает регламентное задание контроля срока задач
Процедура КонтрольСрокаЗадача() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольСрокаЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	// Уведомление о подходе сроков задач
	АктивныеЗадачиСПодписчиками = ВыбратьАктивныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленийОЗадачах(МассивПодписчики);
	
	Для Каждого СтрокаАктивныеЗадачиСПодписчиками Из АктивныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		СрокЗадачи = ПолучитьОсталосьДней(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения, ТекущаяДата,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
		
		Если СрокЗадачи > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
			СтрокаАктивныеЗадачиСПодписчиками.Задача,
			СтрокаАктивныеЗадачиСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
	// Уведомление о просроченных задачах
	ПросроченныеЗадачиСПодписчиками = ВыбратьПросроченныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленийОЗадачах(МассивПодписчики);
	
	Для Каждого СтрокаПросроченныеЗадачиСПодписчиками Из ПросроченныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченныеЗадачи) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченныеЗадачи Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик,
			СтрокаПросроченныеЗадачиСПодписчиками.ВидСобытия,
			СтрокаПросроченныеЗадачиСПодписчиками.Задача,
			СтрокаПросроченныеЗадачиСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает регламентное задание "Контроль срока контрольных точек".
Процедура КонтрольСрокаКонтрольныхТочек() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольСрокаКонтрольныхТочек);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе сроков контрольных точек.
	АктивныеКонтрольныеТочкиСПодписчиками = ВыбратьАктивныеКонтрольныеТочкиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеКонтрольныеТочкиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПодписчиков);
	
	Для Каждого СтрокаАктивныеКонтрольныеТочкиСПодписчиками Из АктивныеКонтрольныеТочкиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеКонтрольныеТочкиСПодписчиками.Подписчик, "Пользователь");
		СрокЗадачи = ПолучитьОсталосьДней(СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ПлановыйСрок, ТекущаяДата,
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.Подписчик);
		
		Если СрокЗадачи > НастройкаПодписчика.СрокПодошелСрокКонтрольнойТочки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПодошелСрокКонтрольнойТочки) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПодошелСрокКонтрольнойТочки Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки,
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.КонтрольнаяТочка,
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
	// Уведомление о просроченных контрольных точках.
	ПросроченныеКонтрольныеТочкиСПодписчиками = ВыбратьПросроченныеКонтрольныеТочкиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеКонтрольныеТочкиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПодписчиков);
	
	Для Каждого СтрокаПросроченныеКонтрольныеТочкиСПодписчиками Из ПросроченныеКонтрольныеТочкиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченаКонтрольнаяТочка) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченаКонтрольнаяТочка Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка,
			СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.КонтрольнаяТочка,
			СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
	// Уведомление о просроченных оценках контрольных точек.
	ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками = ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПодписчиков);
	
	Для Каждого СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками Из ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченаОценкаКонтрольнойТочки) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченаОценкаКонтрольнойТочки Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки,
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.КонтрольнаяТочка,
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает регламентное задание срока контроля
Процедура КонтрольСрокаКонтроля() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольСрокаКонтроля);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	// Уведомление о подходе сроков
	АктивныеКонтролиСПодписчиками = ВыбратьАктивныеКонтролиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеКонтролиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтроле(МассивПодписчиков);
	
	Для Каждого СтрокаАктивныйКонтроль Из АктивныеКонтролиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныйКонтроль.Подписчик, "Пользователь");
		СрокКонтроля = КонтрольКлиентСервер.СрокКонтроля(СтрокаАктивныйКонтроль.СрокИсполнения);
		
		Если СрокКонтроля > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныйКонтроль.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныйКонтроль.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныйКонтроль.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
			СтрокаАктивныйКонтроль.Контроль,
			СтрокаАктивныйКонтроль.ОбъектПодписки);
		
	КонецЦикла;
	
	// Уведомление о просроченном контроле
	ПросроченныеКонтролиСПодписчиками = ВыбратьПросроченныйКонтрольСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеКонтролиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтроле(МассивПодписчиков);
	
	Для Каждого СтрокаПросроченныйКонтроль Из ПросроченныеКонтролиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныйКонтроль.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныйКонтроль.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченКонтроль) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныйКонтроль.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченКонтроль Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаПросроченныйКонтроль.Подписчик,
			Перечисления.СобытияУведомлений.ПросроченКонтроль,
			СтрокаПросроченныйКонтроль.Контроль,
			СтрокаПросроченныйКонтроль.ОбъектПодписки);
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для обработки произошедших бизнес-событий
Процедура ОбработатьБизнесСобытие(ПроизошедшееСобытие) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	ВидСобытия = ПроизошедшееСобытие.ВидСобытия;
	Объект = ПроизошедшееСобытие.Источник;
	
	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Объект, ВидСобытия, Объект);
	
КонецПроцедуры

// Предназначена для обработки произошедших событий уведомлений.
Процедура ОбработатьСобытиеУведомления(Источник, ВидСобытия, Автор = Неопределено, КонтекстСобытия = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Автор = Неопределено Тогда
		Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если КонтекстСобытия = Неопределено Тогда
		КонтекстСобытия = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	ПроизошедшееСобытие = Новый Структура;
	ПроизошедшееСобытие.Вставить("ВидСобытия", ВидСобытия);
	ПроизошедшееСобытие.Вставить("Источник", Источник);
	ПроизошедшееСобытие.Вставить("Автор", Автор);
	ПроизошедшееСобытие.Вставить("КонтекстСобытия", КонтекстСобытия);
	
	ОбработатьБизнесСобытие(ПроизошедшееСобытие);
	
КонецПроцедуры

// Предназначена для обработки уведомления программы.
//
// Параметры:
//  Описание - Строка - Описание уведомления.
//  ВидУведомления - ПеречислениеСсылка.ВидыУведомленийПрограммы - Вид уведомления.
//  Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//  Объект - ЛюбаяСсылка - Объект уведомления.
//
Процедура ОбработатьУведомлениеПрограммы(Описание, Пользователь, Объект = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		Пользователь,
		Перечисления.СобытияУведомлений.УведомлениеПрограммы,
		Объект,
		Объект,
		Описание);
	
КонецПроцедуры

// Обработка уведомлений в очереди уведомлений
Процедура ОбработатьУведомленияВОчередиУведомлений() Экспорт
	
	
	ТекущийЯзыкФоновогоЗадания = Константы.ра_ТекущийЯзыкФоновогоЗаданияУведомлениеПользователейОСобытиях.Получить();
	КодЯзыкаПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "КодЯзыка");
	Если НЕ ТекущийЯзыкФоновогоЗадания = КодЯзыкаПользователя Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УведомлениеПользователейОСобытиях);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начато регламентное уведомление о новых событиях'; en = 'Started scheduled notification about new events'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СформированныеУведомления = СформироватьУведомленияДляОтправки();
	ОтправитьУведомления(СформированныеУведомления);
	
	Документы.УведомлениеПоSMS.ВыполнитьРассылку();
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершено регламентное уведомление о новых событиях'; en = 'Completed scheduled notification about new events'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			
	Если ТекущийЯзыкФоновогоЗадания = "ru" Тогда
		Константы.ра_ТекущийЯзыкФоновогоЗаданияУведомлениеПользователейОСобытиях.Установить("en");
	Иначе
		Константы.ра_ТекущийЯзыкФоновогоЗаданияУведомлениеПользователейОСобытиях.Установить("ru");
	КонецЕсли;
			
КонецПроцедуры

// Формирует навигационную ссылку.
//
Функция ПолучитьНавигационнуюСсылкуУведомления(Объект) Экспорт
	
	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Если Прав(АдресПубликацииНаВебСервере, 2) = "/#" Или  Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
		Иначе
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
		КонецЕсли;
		НавигационнаяСсылка = АдресПубликацииНаВебСервере + ПолучитьНавигационнуюСсылку(Объект);
		НавигационнаяСсылкаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<a href=%1>%2</a>",
			КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
			НавигационнаяСсылка);
		Возврат НавигационнаяСсылкаУведомления;
	Иначе
		Возврат ПолучитьНавигационнуюСсылку(Объект);
	КонецЕсли;
	
КонецФункции

// Формирует представление срока с учетом использования графика работ
Функция ПолучитьПредставлениеСрока(
	Исполнитель,
	СрокИсполненияОбъекта,
	ВидСобытия,
	КодЯзыка,
	КНачалуДня = Ложь) Экспорт
	
	ПримерныйСрок = Ложь;
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		СрокЗадачи = КонтрольКлиентСервер.СрокКонтроля(СрокИсполненияОбъекта);
		СрокЗадачи = ?(СрокЗадачи > 0, СрокЗадачи, - СрокЗадачи);
	Иначе
		СрокЗадачи = ПолучитьОсталосьДней(СрокИсполненияОбъекта, , Исполнитель, ПримерныйСрок, КНачалуДня);
	КонецЕсли;
	
	ПредставлениеСрока = "";
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(СрокЗадачи);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если ПодписьДней = НСтр("ru = 'день'; en = 'day'", КодЯзыка) Тогда
			
			ПодписьНачало = НСтр("ru = 'Остался'; en = 'Left'", КодЯзыка);
			
		Иначе
			
			ПодписьНачало = НСтр("ru = 'Осталось'; en = 'Left'", КодЯзыка);
			
		КонецЕсли;
		
		ПредставлениеСрока =
			ПодписьНачало + " "
			+ Строка(СрокЗадачи) + " "
			+ ПодписьДней + " "
			+ НСтр("ru = 'на задачу'; en = 'for task'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Задача просрочена'; en = 'Task is overdue'", КодЯзыка);
			
		Иначе
			
			ПредставлениеСрока =
				НСтр("ru = 'Задача просрочена на'; en = 'Task is overdue by'", КодЯзыка) + " "
				+ Строка(СрокЗадачи) + " "
				+ ПодписьДней;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Задача от меня просрочена'; en = 'Task from me is overdue'", КодЯзыка);
			
		Иначе
			
			ПредставлениеСрока =
				НСтр("ru = 'Задача от меня просрочена на'; en = 'Task from me is overdue by'", КодЯзыка) + " "
				+ Строка(СрокЗадачи) + " "
				+ ПодписьДней;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Если ПодписьДней = НСтр("ru = 'день'; en = 'day'", КодЯзыка) Тогда
			
			ПодписьНачало = НСтр("ru = 'Остался'; en = 'Left'", КодЯзыка);
			
		Иначе
			
			ПодписьНачало = НСтр("ru = 'Осталось'; en = 'Left'", КодЯзыка);
			
		КонецЕсли;
		
		ПредставлениеСрока =
			ПодписьНачало + " "
			+ Строка(СрокЗадачи) + " "
			+ ПодписьДней + " "
			+ НСтр("ru = 'до контрольного срока'; en = 'till due date'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Просрочен контроль'; en = 'Monitoring is overdue'", КодЯзыка);
			
		Иначе
			
			ПредставлениеСрока = 
				НСтр("ru = 'Просрочен контроль на'; en = 'Monitoring is overdue by'", КодЯзыка) + " "
				+ Строка(СрокЗадачи) + " "
				+ ПодписьДней;
			
		КонецЕсли;
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Просрочена контрольная точка'; en = 'Milestone is overdue'", КодЯзыка);
			
		Иначе
			
			ПредставлениеСрока = 
				НСтр("ru = 'Просрочена контрольная точка на'; en = 'Milestone is overdue by'", КодЯзыка) + " "
				+ Строка(СрокЗадачи) + " "
				+ ПодписьДней;
			
		КонецЕсли;
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки Тогда
		
		Если ПодписьДней = НСтр("ru = 'день'; en = 'day'", КодЯзыка) Тогда
			
			ПодписьНачало = НСтр("ru = 'Остался'; en = 'Left'", КодЯзыка);
			
		Иначе
			
			ПодписьНачало = НСтр("ru = 'Осталось'; en = 'Left'", КодЯзыка);
			
		КонецЕсли;
		
		ПредставлениеСрока =
			ПодписьНачало + " "
			+ Строка(СрокЗадачи) + " "
			+ ПодписьДней + " "
			+ НСтр("ru = 'до контрольной точки'; en = 'to milestone'", КодЯзыка);
			
	КонецЕсли;
	
	Если ПримерныйСрок Тогда
		ТекстПримерныйСрок = НСтр("ru = 'Срок примерный'; en = 'Approximate due date'", КодЯзыка);
		ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", ПредставлениеСрока, ТекстПримерныйСрок);
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

// Возвращает строку для события журнала регистрации
Функция СобытиеЖурналаРегистрации() Экспорт
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Уведомление о новых событиях'; en = 'Notification about new events'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(
	Задача,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'; en = 'not specified'", КодЯзыка);
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтрШаблон("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс)
		И ЭтоПоддерживаемыйБизнесПроцесс(Задача.БизнесПроцесс) Тогда
		
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		Если БизнесПроцессОбъект <> Неопределено Тогда
			
			ОписаниеУведомленияЗадачиПоБизнесПроцессу =
				БизнесПроцессОбъект.ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыка);
			
			Если ЗначениеЗаполнено(ОписаниеУведомленияЗадачиПоБизнесПроцессу) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеЗадачи,
					Символы.ПС,
					ОписаниеУведомленияЗадачиПоБизнесПроцессу);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		ПредставлениеСрока = ПолучитьПредставлениеСрока(
			Задача.Исполнитель,
			Задача.СрокИсполнения,
			ВидСобытия,
			КодЯзыка);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеЗадачи,
				Символы.ПС,
				ДополнительноеОписание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Описание'; en = 'Details'", КодЯзыка),
			Задача.Описание);
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Крайний срок'; en = 'Due date'", КодЯзыка),
		Формат(Задача.СрокИсполнения, ФорматДаты));
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Исполнитель'; en = 'Performer'", КодЯзыка),
		Задача.Исполнитель);
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Роль'; en = 'Role'", КодЯзыка),
		Задача.РольИсполнителя);
	
	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) И Задача.Выполнена Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Выполнено'; en = 'Executed'", КодЯзыка),
			Формат(Задача.ДатаИсполнения, ФорматДаты));
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Комментарий'; en = 'Comment'", КодЯзыка),
		Задача.РезультатВыполнения);
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Автор'; en = 'Author'", КодЯзыка),
		Задача.Автор);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	Если Предметы.Количество() = 1 Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Предмет'; en = 'Subject'", КодЯзыка),
			Строка(Предметы[0].Предмет));
	ИначеЕсли Предметы.Количество() > 1 Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Предметы'; en = 'Subjects'", КодЯзыка),
			МультипредметностьКлиентСервер.ПредметыСтрокой(Предметы));
	КонецЕсли;
	
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//ДобавитьРеквизитКСтроке(
	//	ПредставлениеЗадачи,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	ПолучитьНавигационнуюСсылкуУведомления(Задача));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
			
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление объекта.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание, ДополнительныеДанныеПоОбъекту = Неопределено) Экспорт
	
	ПредставлениеОбъекта = РаботаСУведомлениямиПереопределяемый.СформироватьПредставлениеОбъекта(
		Объект,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;
	
	КодЯзыка = КодЯзыка(ПолучательУведомления);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеФайла(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеВходящегоДокумента(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеВнутреннегоДокумента(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеИсходящегоДокумента(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	Иначе
		
		ПредставлениеТипа = ЛокализацияКонфигурации.ПредставлениеТипаДляПользователя(
			Объект.Ссылка,
			ПолучательУведомления);
		ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			ПредставлениеТипа,
			Объект.Ссылка);
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
		// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
		//ДобавитьРеквизитКСтроке(
		//	ПредставлениеОбъекта,
		//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
		//	ПолучитьНавигационнуюСсылкуУведомления(Объект));
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
					
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует уведомления по событию с группировкой по объекту подписки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоОбъектуПодписки(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	ОбъектыПодписки = Новый Массив;
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
			ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
		КонецЕсли;
		
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
	КонецЦикла;
	
	Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
		УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомления = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектыУведомления.Количество() > 0 Тогда
			ДанныеУведомления = ДанныеУведомленияПоОбъектам(
				ОбъектПодписки,
				ВидСобытия,
				ОбъектыУведомления,
				ПолучательУведомления,
				СпособУведомления,
				ДополнительныеОписания);
			СформированноеУведомление = СформированныеУведомления.Добавить();
			ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ВидСобытия = ВидСобытия;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СформированноеУведомление.ОбъектыУведомления,
				ОбъектыУведомления);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует уведомления по событию с группировкой по событию.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоСобытию(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	ОбъектыУведомления = Новый Массив;
	
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Новый Соответствие;
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 }
	
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
			ОбъектыУведомления.Добавить(Уведомление.Объект);
			ДополнительныеОписания.Вставить(Уведомление.Объект, Уведомление.ДополнительноеОписание);
			
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
			Если ДополнительныеДанныеПоОбъекту.Получить(Уведомление.Объект) = Неопределено Тогда 
				ПараметрыСобытия = Новый Структура("ра_БылИсполнитель, ра_СталИсполнитель, ра_ЭскалацияРуководителю", Уведомление.ра_БылИсполнитель, Уведомление.ра_СталИсполнитель, Уведомление.ра_ЭскалацияРуководителю);
				ДополнительныеДанныеПоОбъекту.Вставить(Уведомление.Объект, ПараметрыСобытия);
			КонецЕсли;	
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
			
		КонецЕсли;
		
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
	КонецЦикла;
	
	Если ОбъектыУведомления.Количество() > 0 Тогда
		ДанныеУведомления = ДанныеУведомленияПоОбъектам(
			Неопределено,
			ВидСобытия,
			ОбъектыУведомления,
			ПолучательУведомления,
			СпособУведомления,
			ДополнительныеОписания,
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
			ДополнительныеДанныеПоОбъекту
			// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
			);
		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СформированноеУведомление.ОбъектыУведомления,
			ОбъектыУведомления);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина если переданная ссылка является ссылкой 
// на поддерживаемый системой уведомлений бизнес-процесс
Функция ЭтоПоддерживаемыйБизнесПроцесс(Ссылка) Экспорт
	
	Возврат ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Исполнение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Поручение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Приглашение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Утверждение");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Фомирует список событий, по которым необходимо группировать уведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
// Возвращаемое значение:
//  Массив - Виды бизнес-событий для группировки.
//
Функция ВидыСобытийДляГруппировки(ПолучательУведомления, СпособУведомления)
	
	ВидыСобытий = Новый Массив;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
		
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
		
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
		
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
		
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
		
	КонецЕсли;
	
	РаботаСУведомлениямиПереопределяемый.ВидыСобытийДляГруппировки(ВидыСобытий, ПолучательУведомления, СпособУведомления);
	
	Возврат ВидыСобытий;
	
КонецФункции

// Считывает документы активные на указанную дату с подписчиками
Функция ВыбратьАктивныеДокументыСПодписчиками(АктивныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		"ДокументыИФайлы");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Документ,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	ВнутренниеДокументы.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ВнутренниеДокументы.Ссылка КАК ОбъектПодписки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО ВнутренниеДокументы.Ответственный = Подписчики.Подписчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента))
		|			И ВнутренниеДокументы.Ссылка = ОбработанныеУведомления.ОбъектУведомления
		|			И Подписчики.ПолучательУведомления = ОбработанныеУведомления.Пользователь
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия
		|	И НЕ ВнутренниеДокументы.НеДействует
		|	И ВнутренниеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И КОНЕЦПЕРИОДА(ВнутренниеДокументы.ДатаОкончанияДействия, ДЕНЬ) >= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДокументыСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ДокументыСПодписчиками;
	
КонецФункции

// Считывает задачи активные на указанную дату с подписчиками
Функция ВыбратьАктивныеЗадачиСПодписчиками(АктивныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		"ПроцессыИЗадачи");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения
		|ПОМЕСТИТЬ АктивныеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения > &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка КАК Задача,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	АктивныеЗадачи.СрокИсполнения КАК СрокИсполнения,
		|	АктивныеЗадачи.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗадачиСПодпиской
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО АктивныеЗадачи.Исполнитель = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Исполнитель
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО АктивныеЗадачи.Исполнитель = ИсполнителиРолейИДелегаты.РольПользователь
		|			И ИсполнителиРолейИДелегаты.РольПользователь ССЫЛКА Справочник.ПолныеРоли
		|			И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи""))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачиСПодпиской.Задача КАК Задача,
		|	АктивныеЗадачиСПодпиской.Подписчик КАК Подписчик,
		|	АктивныеЗадачиСПодпиской.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеЗадачиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеЗадачиСПодпиской КАК АктивныеЗадачиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи))
		|			И АктивныеЗадачиСПодпиской.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеЗадачиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗадачиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ЗадачиСПодписчиками;
	
КонецФункции

// Считывает активные контроли на указанную дату с подписчиками
Функция ВыбратьАктивныеКонтролиСПодписчиками(АктивныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		"Контроль");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Контроль.Ссылка КАК Ссылка,
		|	Контроль.Контролер КАК Исполнитель,
		|	Контроль.СрокИсполнения КАК СрокИсполнения
		|ПОМЕСТИТЬ АктивныеКонтроли
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.СрокИсполнения >= &Дата
		|	И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка КАК Контроль,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеКонтролиСПодпиской
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО АктивныеКонтроли.Исполнитель = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Ссылка
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеКонтроли.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Исполнитель
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО АктивныеКонтроли.Исполнитель = ИсполнителиРолейИДелегаты.РольПользователь
		|			И (ИсполнителиРолейИДелегаты.РольПользователь ССЫЛКА Справочник.ПолныеРоли)
		|			И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль""))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеКонтролиСПодпиской.Контроль КАК Контроль,
		|	АктивныеКонтролиСПодпиской.Подписчик КАК Подписчик,
		|	АктивныеКонтролиСПодпиской.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеКонтролиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеКонтролиСПодпиской КАК АктивныеКонтролиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля))
		|			И АктивныеКонтролиСПодпиской.Контроль = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеКонтролиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(АктивныеНаДату));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонтролиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат КонтролиСПодписчиками;
	
КонецФункции

// Считывает активные контрольные точки на указанную дату с подписчиками.
Функция ВыбратьАктивныеКонтрольныеТочкиСПодписчиками(АктивныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки,
		"");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КонтрольныеТочки.Ссылка КАК Ссылка,
		|	КонтрольныеТочки.Ответственный КАК Ответственный,
		|	КонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок
		|ПОМЕСТИТЬ АктивныеКонтрольныеТочки
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
		|ГДЕ
		|	КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
		|	И КонтрольныеТочки.Исполнено = ЛОЖЬ
		|	И КонтрольныеТочки.ПлановыйСрок >= &Дата
		|	И КонтрольныеТочки.ПлановыйСрок <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтрольнойТочки)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеКонтрольныеТочки.Ссылка КАК КонтрольнаяТочка,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	АктивныеКонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
		|	АктивныеКонтрольныеТочки.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеКонтрольныеТочкиСПодпиской
		|ИЗ
		|	АктивныеКонтрольныеТочки КАК АктивныеКонтрольныеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО АктивныеКонтрольныеТочки.Ответственный = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтрольныеТочки.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтрольныеТочки.ПлановыйСрок,
		|	АктивныеКонтрольныеТочки.Ссылка
		|ИЗ
		|	АктивныеКонтрольныеТочки КАК АктивныеКонтрольныеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеКонтрольныеТочки.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка КАК КонтрольнаяТочка,
		|	АктивныеКонтрольныеТочкиСПодпиской.Подписчик КАК Подписчик,
		|	АктивныеКонтрольныеТочкиСПодпиской.ПлановыйСрок КАК ПлановыйСрок,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеКонтрольныеТочкиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеКонтрольныеТочкиСПодпиской КАК АктивныеКонтрольныеТочкиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтрольнойТочки))
		|			И АктивныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеКонтрольныеТочкиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(АктивныеНаДату));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонтрольныеТочкиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат КонтрольныеТочкиСПодписчиками;
	
КонецФункции

// Считывает документы завершившиеся на указанную дату с подписчиками
Функция ВыбратьЗавершившиесяДокументыСПодписчиками(ЗавершившиесяНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
		"ДокументыИФайлы");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Документ,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	ВнутренниеДокументы.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ВнутренниеДокументы.Ссылка КАК ОбъектПодписки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО ВнутренниеДокументы.Ответственный = Подписчики.Подписчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ЗакончилсяСрокДействияДокумента))
		|			И ВнутренниеДокументы.Ссылка = ОбработанныеУведомления.ОбъектУведомления
		|			И Подписчики.ПолучательУведомления = ОбработанныеУведомления.Пользователь
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия
		|	И НЕ ВнутренниеДокументы.НеДействует
		|	И ВнутренниеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И КОНЕЦПЕРИОДА(ВнутренниеДокументы.ДатаОкончанияДействия, ДЕНЬ) < КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ОбработанныеУведомления.ДатаОбработки ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", ЗавершившиесяНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДокументыСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ДокументыСПодписчиками;
	
КонецФункции

// Считывает задачи просроченные на указанную дату
Функция ВыбратьПросроченныеЗадачиСПодписчиками(СрокИсполнения)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		"ПроцессыИЗадачи");
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора,
		"ПроцессыИЗадачи",
		"ПодписчикиАвторы");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения
		|ПОМЕСТИТЬ ПросроченныеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпискойАвтор
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадачаАвтора)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка КАК Задача,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения КАК СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка КАК ОбъектПодписки,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача) КАК ВидСобытия
		|ПОМЕСТИТЬ ПросроченныеЗадачиСПодпиской
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО ПросроченныеЗадачи.Исполнитель = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Исполнитель,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО ПросроченныеЗадачи.Исполнитель = ИсполнителиРолейИДелегаты.РольПользователь
		|			И (ИсполнителиРолейИДелегаты.РольПользователь ССЫЛКА Справочник.ПолныеРоли)
		|			И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи""))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ПодписчикиАвторы.ПолучательУведомления,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадачаАвтора)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодписчикиАвторы КАК ПодписчикиАвторы
		|		ПО ПросроченныеЗадачи.Автор = ПодписчикиАвторы.Подписчик
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпискойАвтор.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Автор,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадачаАвтора)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпискойАвтор КАК ОбъектыСПодпискойАвтор
		|		ПО ПросроченныеЗадачи.Автор = ОбъектыСПодпискойАвтор.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачиСПодпиской.Задача КАК Задача,
		|	ПросроченныеЗадачиСПодпиской.Подписчик КАК Подписчик,
		|	ПросроченныеЗадачиСПодпиской.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеЗадачиСПодпиской.ОбъектПодписки КАК ОбъектПодписки,
		|	ПросроченныеЗадачиСПодпиской.ВидСобытия КАК ВидСобытия
		|ИЗ
		|	ПросроченныеЗадачиСПодпиской КАК ПросроченныеЗадачиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО ПросроченныеЗадачиСПодпиской.ВидСобытия = ОбработанныеУведомления.ВидСобытия
		|			И ПросроченныеЗадачиСПодпиской.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеЗадачиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

// Считывает просроченные на указанную дату контроли
Функция ВыбратьПросроченныйКонтрольСПодписчиками(СрокИсполнения)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПросроченКонтроль,
		"Контроль");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Контроль.Ссылка КАК Ссылка,
		|	Контроль.Контролер КАК Исполнитель,
		|	Контроль.СрокИсполнения КАК СрокИсполнения
		|ПОМЕСТИТЬ ПросроченныеКонтроли
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.СрокИсполнения < &Дата
		|	И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка КАК Контроль,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения КАК СрокИсполнения,
		|	ПросроченныеКонтроли.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеКонтролиСПодпиской
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО ПросроченныеКонтроли.Исполнитель = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Ссылка
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеКонтроли.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Исполнитель
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Исполнитель
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО ПросроченныеКонтроли.Исполнитель = ИсполнителиРолейИДелегаты.ИсполнительДелегат
		|			И (ИсполнителиРолейИДелегаты.РольПользователь ССЫЛКА Справочник.ПолныеРоли)
		|			И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль""))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеКонтролиСПодпиской.Контроль КАК Контроль,
		|	ПросроченныеКонтролиСПодпиской.Подписчик КАК Подписчик,
		|	ПросроченныеКонтролиСПодпиской.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеКонтролиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	ПросроченныеКонтролиСПодпиской КАК ПросроченныеКонтролиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль))
		|			И ПросроченныеКонтролиСПодпиской.Контроль = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеКонтролиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(СрокИсполнения));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

// Считывает просроченные на указанную дату контрольные точки.
Функция ВыбратьПросроченныеКонтрольныеТочкиСПодписчиками(ПросроченныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка,
		"");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КонтрольныеТочки.Ссылка КАК Ссылка,
		|	КонтрольныеТочки.Ответственный КАК Ответственный,
		|	КонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок
		|ПОМЕСТИТЬ ПросроченныеКонтрольныеТочки
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
		|ГДЕ
		|	КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
		|	И КонтрольныеТочки.Исполнено = ЛОЖЬ
		|	И КонтрольныеТочки.ПлановыйСрок < &Дата
		|	И КонтрольныеТочки.ПлановыйСрок <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаКонтрольнаяТочка)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеКонтрольныеТочки.Ссылка КАК КонтрольнаяТочка,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	ПросроченныеКонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
		|	ПросроченныеКонтрольныеТочки.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеКонтрольныеТочкиСПодпиской
		|ИЗ
		|	ПросроченныеКонтрольныеТочки КАК ПросроченныеКонтрольныеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО ПросроченныеКонтрольныеТочки.Ответственный = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтрольныеТочки.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтрольныеТочки.ПлановыйСрок,
		|	ПросроченныеКонтрольныеТочки.Ссылка
		|ИЗ
		|	ПросроченныеКонтрольныеТочки КАК ПросроченныеКонтрольныеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеКонтрольныеТочки.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка КАК КонтрольнаяТочка,
		|	ПросроченныеКонтрольныеТочкиСПодпиской.Подписчик КАК Подписчик,
		|	ПросроченныеКонтрольныеТочкиСПодпиской.ПлановыйСрок КАК ПлановыйСрок,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеКонтрольныеТочкиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	ПросроченныеКонтрольныеТочкиСПодпиской КАК ПросроченныеКонтрольныеТочкиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаКонтрольнаяТочка))
		|			И ПросроченныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеКонтрольныеТочкиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ПросроченныеНаДату));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонтрольныеТочкиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат КонтрольныеТочкиСПодписчиками;
	
КонецФункции

// Считывает просроченные на указанную дату оценки контрольных точки.
Функция ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками(ПросроченныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки,
		"");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КонтрольныеТочки.Ссылка КАК Ссылка,
		|	КонтрольныеТочки.Ответственный КАК Ответственный,
		|	КонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок
		|ПОМЕСТИТЬ ПросроченныеОценкиКонтрольныхТочек
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиКонтрольныхТочек.СрезПоследних КАК ОценкиКонтрольныхТочекСрезПоследних
		|		ПО КонтрольныеТочки.Ссылка = ОценкиКонтрольныхТочекСрезПоследних.КонтрольнаяТочка
		|ГДЕ
		|	КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
		|	И КонтрольныеТочки.Исполнено = ЛОЖЬ
		|	И ОценкиКонтрольныхТочекСрезПоследних.Период <= &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеОценкиКонтрольныхТочек.Ссылка КАК КонтрольнаяТочка,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	ПросроченныеОценкиКонтрольныхТочек.ПлановыйСрок КАК ПлановыйСрок,
		|	ПросроченныеОценкиКонтрольныхТочек.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеОценкиКонтрольныхТочекСПодпиской
		|ИЗ
		|	ПросроченныеОценкиКонтрольныхТочек КАК ПросроченныеОценкиКонтрольныхТочек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО ПросроченныеОценкиКонтрольныхТочек.Ответственный = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеОценкиКонтрольныхТочек.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеОценкиКонтрольныхТочек.ПлановыйСрок,
		|	ПросроченныеОценкиКонтрольныхТочек.Ссылка
		|ИЗ
		|	ПросроченныеОценкиКонтрольныхТочек КАК ПросроченныеОценкиКонтрольныхТочек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеОценкиКонтрольныхТочек.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.КонтрольнаяТочка КАК КонтрольнаяТочка,
		|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.Подписчик КАК Подписчик,
		|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.ПлановыйСрок КАК ПлановыйСрок,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	ПросроченныеОценкиКонтрольныхТочекСПодпиской КАК ПросроченныеОценкиКонтрольныхТочекСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки))
		|			И ПросроченныеОценкиКонтрольныхТочекСПодпиской.КонтрольнаяТочка = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеОценкиКонтрольныхТочекСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ПросроченныеНаДату) - 604800);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

// Добавляет бизнес-процесс в массив и заполняет таблицу родителей
Процедура ДобавитьВМассивСЗаполнениемРодителей(
	ОбъектПодписки,
	ОбъектыПодписки,
	БизнесПроцессыРодители,
	ОтказыОтПодписки)
	
	МассивРодителей = Новый Массив;
	ПолучитьРодителейСПроверкойПодписки(
		ОбъектПодписки,
		МассивРодителей,
		ОтказыОтПодписки,
		ОбъектПодписки);
	
	Для Каждого Родитель Из МассивРодителей Цикл
		
		НоваяСтрока = БизнесПроцессыРодители.Добавить();
		НоваяСтрока.ОбъектПодписки = ОбъектПодписки;
		НоваяСтрока.Родитель = Родитель;
		
	КонецЦикла;
	
	ОбъектыПодписки.Добавить(ОбъектПодписки);
	
КонецПроцедуры

// Добавляет бизнес-процесс в массив с проверкой подписки, дочерних и ведущих процессов.
// Если в массиве уже есть дочерние бизнес-процессы с подпиской, то удаляет их.
// Если в массиве уже есть ведущий бизнес-процесс с подпиской, то не добавляет.
Процедура ДобавитьВМассивСПроверкойПодписки(
	ОбъектУведомления,
	ОбъектПодписки,
	ОбъектыПодписки,
	БизнесПроцессыРодители,
	ОтказыОтПодписки,
	ОбъектыУведомленияСПодпиской,
	ОбъектыУведомленияСОтказом)
	
	Если ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки) Тогда
		
		Если ОбъектыУведомленияСПодпиской.Найти(ОбъектУведомления) = Неопределено Тогда
			ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСОтказом);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Родитель", ОбъектПодписки);
	НайденныеПроцессыПотомки = БизнесПроцессыРодители.НайтиСтроки(Отбор);
	Для Каждого СтрокаНайденныйПроцессПотомок Из НайденныеПроцессыПотомки Цикл
		
		ПроцессПотомок = СтрокаНайденныйПроцессПотомок.ОбъектПодписки;
		
		ИндексПотомкаВМассиве = ОбъектыПодписки.Найти(ПроцессПотомок);
		Если ИндексПотомкаВМассиве <> Неопределено Тогда
			ОбъектыПодписки.Удалить(ИндексПотомкаВМассиве);
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ОбъектПодписки", ПроцессПотомок);
		СтрокиПроцессаПотомка = БизнесПроцессыРодители.НайтиСтроки(Отбор);
		Для Каждого СтрокаПроцессаПотомка Из СтрокиПроцессаПотомка Цикл
			БизнесПроцессыРодители.Удалить(СтрокаПроцессаПотомка);
		КонецЦикла;
		
	КонецЦикла;
	
	ИндексВМассивеОтказов = ОбъектыУведомленияСОтказом.Найти(ОбъектУведомления);
	Если ИндексВМассивеОтказов <> Неопределено Тогда
		ОбъектыУведомленияСОтказом.Удалить(ИндексВМассивеОтказов);
	КонецЕсли;
	
	ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСПодпиской);
	
	ДобавитьВМассивСЗаполнениемРодителей(
		ОбъектПодписки,
		ОбъектыПодписки,
		БизнесПроцессыРодители,
		ОтказыОтПодписки);
	
КонецПроцедуры

// Добавляет значение в массив, если такого значения в нем еще нет
Процедура ДобавитьЗначениеВМассив(Значение, Массив, ДобавленоЗначениеВМассив = Ложь)
	
	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
		ДобавленоЗначениеВМассив = Истина;
	Иначе
		ДобавленоЗначениеВМассив = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет тип объекта и вызывает соответствующее добавление уведомления
Процедура ДобавитьУведомлениеПоОбъекту(
	ПроизошедшееСобытие,
	ОбъектПодписки,
	ВидСобытия,
	Объект,
	ОбработанныеОбъекты = Неопределено)
	
	Если Объект = Неопределено Тогда
		
		Объект = ОбъектПодписки;
		
	КонецЕсли;
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектПодписки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектПодписки);
	
	Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ДобавитьУведомленияПоСообщению(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Проекты") Тогда
		
		ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ДобавитьУведомленияПоПроектнойЗадаче(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект, ОбработанныеОбъекты);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		ДобавитьУведомленияПоВходящемуДокументу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ДобавитьУведомленияПоВнутреннемуДокументу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		
		ДобавитьУведомленияПоПапкеВнутреннихДокументов(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		ДобавитьУведомленияПоИсходящемуДокументу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ДобавитьУведомленияПоМероприятию(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		
		ДобавитьУведомленияПоКатегорииДанных(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ДобавитьУведомленияПоПользователю(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		
		ДобавитьУведомленияПоРабочейГруппе(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Отсутствие") Тогда
		
		ДобавитьУведомленияПоОтсутствию(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТерриторииИПомещения") Тогда
		
		ДобавитьУведомленияПоПомещению(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Бронь") Тогда
		
		ДобавитьУведомленияПоБронированию(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПоказателиПроцессов") Тогда
		
		ДобавитьУведомленияПоПоказателюПроцесса(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		ДобавитьУведомленияПоЗаписеРабочегоКалендаря(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(ОбъектПодписки) Тогда
		
		ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект, ОбработанныеОбъекты);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(ВидСобытия, Объект, ОбъектПодписки);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по бизнес-процессам
Процедура ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, БизнесПроцесс, ВидСобытия, Объект, ОбработанныеОбъекты)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		ЭтоВедущаяЗадача = (ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И Не ЗначениеЗаполнено(Объект.ТекущийИсполнитель));
		Если Не ЭтоВедущаяЗадача Тогда
			
			Если ЗначениеЗаполнено(БизнесПроцесс.Автор)
				И БизнесПроцесс.Автор <> ПроизошедшееСобытие.Автор Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					БизнесПроцесс.Автор,
					ВидСобытия,
					Объект,
					БизнесПроцесс);
			КонецЕсли;
			
			ТипБизнесПроцесса = ТипЗнч(БизнесПроцесс);
			Если (ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение")) Тогда
				ОтветственноеИсполнение = БизнесПроцесс.Исполнители.Найти(Истина, "Ответственный");
				Если ОтветственноеИсполнение <> Неопределено Тогда
					Если ОтветственноеИсполнение.Исполнитель <> ПроизошедшееСобытие.Автор Тогда
						РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
							ОтветственноеИсполнение.Исполнитель,
							ВидСобытия,
							Объект,
							БизнесПроцесс);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение")
					Или ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
					Или ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Поручение"))
				И ЗначениеЗаполнено(БизнесПроцесс.Контролер)
				И БизнесПроцесс.Контролер <> ПроизошедшееСобытие.Автор Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					БизнесПроцесс.Контролер,
					ВидСобытия,
					Объект,
					БизнесПроцесс);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				БизнесПроцесс.ВедущаяЗадача,
				ВидСобытия,
				Объект,
				ОбработанныеОбъекты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс.ГлавнаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				БизнесПроцесс.ГлавнаяЗадача,
				ВидСобытия,
				Объект,
				ОбработанныеОбъекты);
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
						
		Если ЗначениеЗаполнено(БизнесПроцесс.Автор)
			И БизнесПроцесс.Автор <> ПроизошедшееСобытие.Автор Тогда						
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				БизнесПроцесс.Автор,
				ВидСобытия,
				Объект,
				БизнесПроцесс);
				
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Задача = ВыборкаДетальныеЗаписи.Ссылка;
			
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				Задача,
				ВидСобытия,
				Объект);
				
		КонецЦикла;		
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по бронированию
Процедура ДобавитьУведомленияПоБронированию(ПроизошедшееСобытие, Бронь, ВидСобытия, Объект)
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Бронь);
	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Бронь.Помещение, ВидСобытия, Объект);
	
КонецПроцедуры

// Добавляет уведомление по внутреннему документу
Процедура ДобавитьУведомленияПоВнутреннемуДокументу(
	ПроизошедшееСобытие,
	ВнутреннийДокумент,
	ВидСобытия,
	Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента Тогда
		
		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие,
			ВнутреннийДокумент.Папка,
			ВидСобытия,
			Объект);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение внутреннего документа
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ВнутреннийДокумент.Подготовил,
			ВидСобытия,
			Объект,
			ВнутреннийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ВнутреннийДокумент.Ответственный,
			ВидСобытия,
			Объект,
			ВнутреннийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ВнутреннийДокумент.Утвердил,
			ВидСобытия,
			Объект,
			ВнутреннийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ВнутреннийДокумент);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда
		
		ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, ВнутреннийДокумент);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ВнутреннийДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по входящему документу
Процедура ДобавитьУведомленияПоВходящемуДокументу(
	ПроизошедшееСобытие,
	ВходящийДокумент,
	ВидСобытия,
	Объект) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение входящего документа
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ВходящийДокумент.Адресат,
			ВидСобытия,
			Объект,
			ВходящийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ВходящийДокумент.Ответственный,
			ВидСобытия,
			Объект,
			ВходящийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ВходящийДокумент);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда
		
		ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, ВходящийДокумент);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ВходящийДокумент);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по группе пользователей
Процедура ДобавитьУведомленияПоРабочейГруппе(
		ПроизошедшееСобытие, РабочаяГруппа, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда
		
		Если ЗначениеЗаполнено(РабочаяГруппа.Родитель) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, РабочаяГруппа.Родитель, ВидСобытия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		РабочаяГруппа);
	
КонецПроцедуры

// Добавляет уведомление по задаче исполнителя
Процедура ДобавитьУведомленияПоЗадачеИсполнителя(
	ПроизошедшееСобытие,
	ЗадачаИсполнителя,
	ВидСобытия,
	Объект,
	ОбработанныеОбъекты)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		Если ЗадачаИсполнителя.Выполнена Тогда
			Возврат;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		ДополнительноеОписание = "";
		Если ПараметрыСобытия.Свойство("БылИсполнитель")
			И ПараметрыСобытия.Свойство("СталИсполнитель")
			И ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель)
			И ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
			
			
			КодЯзыка = КодЯзыка(ПараметрыСобытия.БылИсполнитель);
			Если ПараметрыСобытия.Свойство("Автоперенаправление") И ПараметрыСобытия.Автоперенаправление Тогда
				Действие = НСтр("ru = 'Автоперенаправление'; en = 'Autoforwarding'", КодЯзыка);
			Иначе
				Действие = НСтр("ru = 'Перенаправлена'; en = 'Forwarded'", КодЯзыка);
			КонецЕсли;
			
			ДополнительноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2 к %3.'; en = '%1 from %2 to %3.'", КодЯзыка),
				Действие,
				ПараметрыСобытия.БылИсполнитель,
				ПараметрыСобытия.СталИсполнитель);
			
			Если ТипЗнч(ПараметрыСобытия.БылИсполнитель) = Тип("СправочникСсылка.Пользователи")
				И ПроизошедшееСобытие.Автор <> ПараметрыСобытия.БылИсполнитель Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					ПараметрыСобытия.БылИсполнитель,
					Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи,
					Объект,
					ЗадачаИсполнителя,
					ДополнительноеОписание,
					// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 23.10.2018 {
					// добавим структуру ПараметрыСобытия для изменения алгоритма формирования текста уведомления по задаче 
					// в тексте уведомления для нового иполнителя по задаче нужно указать, что она перенаправлена от Сотрудника 1 к Сотруднику2
					,
					ПараметрыСобытия);
					// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 23.10.2018 }
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
			Объект,
			ЗадачаИсполнителя,
			// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 23.10.2018 {
			// добавим структуру ПараметрыСобытия для изменения алгоритма формирования текста уведомления по задаче 
			// в тексте уведомления для нового иполнителя по задаче нужно указать, что она перенаправлена от Сотрудника 1 к Сотруднику2
			,
			ПараметрыСобытия);
			// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 23.10.2018 }
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя,
			ДополнительноеОписание);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		// Если была выполнена эта задача - тогда уведомим подписчиков
		Если ЗадачаИсполнителя = Объект Тогда
			Если ТипЗнч(ЗадачаИсполнителя.ТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи")
				И ПроизошедшееСобытие.Автор <> ЗадачаИсполнителя.ТекущийИсполнитель Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					ЗадачаИсполнителя.ТекущийИсполнитель,
					Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи,
					Объект,
					ЗадачаИсполнителя);
					
				// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
				ДополнительноОповещаемыеИсполнители = РаботаСУведомлениямиПереопределяемый.ПолучитьДополнительныхОповещаемыхИсполнителей(ЗадачаИсполнителя, ЗадачаИсполнителя.ТекущийИсполнитель);
				Для Каждого Оповещаемый из ДополнительноОповещаемыеИсполнители Цикл 
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						Оповещаемый,
						Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи,
						Объект,
						ЗадачаИсполнителя);
				КонецЦикла;	
				// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 	
					
			КонецЕсли;
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				ВидСобытия,
				Объект,
				ЗадачаИсполнителя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗадачаИсполнителя.БизнесПроцесс) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				ЗадачаИсполнителя.БизнесПроцесс,
				ВидСобытия,
				Объект,
				ОбработанныеОбъекты);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение задачи
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ЗадачаИсполнителя.Автор,
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по записе рабочего календаря.
//
// Параметры:
//  ПроизошедшееСобытие - Структура - Произошедшее событие.
//  ЗаписьРабочегоКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись рабочего календаря.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий,
//               ПеречислениеСсылка.СобытияУведомлений - Вид произошедшего события.
//  ОбъектУведомления - ПроизвольнаяСсылка - Объект, по которому произошло событие.
//
Процедура ДобавитьУведомленияПоЗаписеРабочегоКалендаря(
	ПроизошедшееСобытие,
	ЗаписьРабочегоКалендаря,
	ВидСобытия,
	Объект)
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря Тогда
		Если ЗаписьРабочегоКалендаря.Пользователь <> ПроизошедшееСобытие.Автор Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ЗаписьРабочегоКалендаря.Пользователь,
				ВидСобытия,
				Объект,
				ЗаписьРабочегоКалендаря);
		КонецЕсли;
		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие,
			ЗаписьРабочегоКалендаря.Пользователь,
			ВидСобытия,
			Объект);
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		ЗаписьРабочегоКалендаря);
	
КонецПроцедуры

// Добавляет уведомление по исходящему документу
Процедура ДобавитьУведомленияПоИсходящемуДокументу(
	ПроизошедшееСобытие,
	ИсходящийДокумент,
	ВидСобытия,
	Объект) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение внутреннего документа
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ИсходящийДокумент.Подготовил,
			ВидСобытия,
			Объект,
			ИсходящийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ИсходящийДокумент.Подписал,
			ВидСобытия,
			Объект,
			ИсходящийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ИсходящийДокумент.Ответственный,
			ВидСобытия,
			Объект,
			ИсходящийДокумент);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ИсходящийДокумент);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда
		
		ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, ИсходящийДокумент);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ИсходящийДокумент);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по категории данных
Процедура ДобавитьУведомленияПоКатегорииДанных(ПроизошедшееСобытие, Категория, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию
		ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.УдалениеИзКатегории Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		Если ПараметрыСобытия.Свойство("Объект") Тогда
			ДобавленныйВКатегориюОбъект = ПараметрыСобытия.Объект;
		Иначе
			ДобавленныйВКатегориюОбъект = Категория;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			ДобавленныйВКатегориюОбъект,
			Объект);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Категория);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по мероприятию
Процедура ДобавитьУведомленияПоМероприятию(
	ПроизошедшееСобытие,
	Мероприятие,
	ВидСобытия,
	Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение внутреннего документа
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = Мероприятие;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		НаборЗаписей.Прочитать();
		Записи = НаборЗаписей.Выгрузить();
		Для Каждого Запись Из Записи Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Запись.Исполнитель,
				ВидСобытия,
				Объект,
				Мероприятие);
		КонецЦикла;	
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Мероприятие.Организатор,
			ВидСобытия,
			Объект,
			Мероприятие);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Мероприятие.Секретарь,
			ВидСобытия,
			Объект,
			Мероприятие);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Мероприятие.Председатель,
			ВидСобытия,
			Объект,
			Мероприятие);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Мероприятие.Куратор,
			ВидСобытия,
			Объект,
			Мероприятие);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Мероприятие.Подготовил,
			ВидСобытия,
			Объект,
			Мероприятие);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Мероприятие);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Мероприятие);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по назначению ответственного.
//
// Параметры:
//   ПроизошедшееСобытие - запись РС ПроизошедшиеБизнесСобытия или выборка из него.
//   Документ - СправочникСсылка.<...>Документы - документ-источник события.
//
Процедура ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, Документ)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ,
		"Ответственный, ВидДокумента");
	
	Ответственный = РеквизитыДокумента.Ответственный;
	НазначенныйОтветственный = ПроизошедшееСобытие.КонтекстСобытия.Получить();
	Если Ответственный <> НазначенныйОтветственный // возможно, событие устарело
		Или Ответственный = ПроизошедшееСобытие.Автор Тогда // возможно, пользователь назначил сам себя
		Возврат;
	КонецЕсли;
	
	ВидДокумента = РеквизитыДокумента.ВидДокумента;
	ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		Ответственный,
		ВидСобытия,
		Документ,
		ВидДокумента);
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Документ,
		ВидДокумента,,
		Ответственный);
	
КонецПроцедуры

// Добавляет уведомление по отсутствию
Процедура ДобавитьУведомленияПоОтсутствию(
		ПроизошедшееСобытие, Отсутствие, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда
		
		Если Отсутствие.Сотрудник <> ПроизошедшееСобытие.Автор Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Отсутствие.Сотрудник,
				ВидСобытия,
				Объект,
				Отсутствие.Сотрудник);
		КонецЕсли;
		
		Для Каждого Заместитель Из Отсутствие.Заместители Цикл
			
			Если Заместитель.Заместитель = ПроизошедшееСобытие.Автор Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Заместитель.Заместитель,
				ВидСобытия,
				Объект,
				Отсутствие.Сотрудник);
			
		КонецЦикла;
		
		ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Отсутствие.Сотрудник, ВидСобытия, Объект);
		
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Отсутствие);
	
КонецПроцедуры

// Добавляет уведомление по папке внутренних документов
Процедура ДобавитьУведомленияПоПапкеВнутреннихДокументов(
	ПроизошедшееСобытие,
	Папка,
	ВидСобытия,
	Объект)
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Папка);
	
КонецПроцедуры

// Добавляет уведомление по папке файлов
Процедура ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, Папка, ВидСобытия, Объект) 
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Папка);
	
КонецПроцедуры

// Добавляет уведомление по показателю процесса.
Процедура ДобавитьУведомленияПоПоказателюПроцесса(ПроизошедшееСобытие, ПоказательПроцесса, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса Тогда
		Подписчики = РегистрыСведений.ПодпискиНаПоказателиПроцессов.Подписчики(ПоказательПроцесса);
		Для Каждого Подписчик Из Подписчики Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Подписчик,
				ВидСобытия,
				Объект,
				ПоказательПроцесса);
		КонецЦикла;
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		ПоказательПроцесса);
	
КонецПроцедуры

// Добавляет уведомление по пользователю
Процедура ДобавитьУведомленияПоПользователю(
		ПроизошедшееСобытие, Пользователь, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда
		
		ГруппыПользователя = ПользователиСерверПовтИсп.ПолучитьМассивГруппПользователя(Пользователь);
		Для Каждого ГруппаПользователя Из ГруппыПользователя Цикл
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, ГруппаПользователя, ВидСобытия, Объект);
		КонецЦикла;
		
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Пользователь);
	
КонецПроцедуры

// Добавляет уведомление по помещению
Процедура ДобавитьУведомленияПоПомещению(ПроизошедшееСобытие, Помещение, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеБрони
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеБрони Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.Бронь") Тогда
			Если ЗначениеЗаполнено(Объект.ХозяйственноеОбеспечение) Тогда
				ОтветственныйХозяйственноеОбеспечение =
					Справочники.ТерриторииИПомещения.ОтветственныйХозяйственноеОбеспечение(Помещение);
				Если ЗначениеЗаполнено(ОтветственныйХозяйственноеОбеспечение) Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						ОтветственныйХозяйственноеОбеспечение,
						ВидСобытия,
						Объект,
						Помещение);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ТехническоеОбеспечение) Тогда
				ОтветственныйТехническоеОбеспечение =
					Справочники.ТерриторииИПомещения.ОтветственныйТехническоеОбеспечение(Помещение);
				Если ЗначениеЗаполнено(ОтветственныйТехническоеОбеспечение) Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						ОтветственныйТехническоеОбеспечение,
						ВидСобытия,
						Объект,
						Помещение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Помещение);
	
КонецПроцедуры

// Добавляет уведомление по проектной задаче
Процедура ДобавитьУведомленияПоПроектнойЗадаче(
	ПроизошедшееСобытие,
	ПроектнаяЗадача,
	ВидСобытия,
	Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение проектной задачи
		Для Каждого ИсполнительПроектнойЗадачи Из ПроектнаяЗадача.Исполнители Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ИсполнительПроектнойЗадачи.Исполнитель,
				ВидСобытия,
				Объект,
				ПроектнаяЗадача);
		КонецЦикла;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ПроектнаяЗадача);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ПроектнаяЗадача);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по проекту
Процедура ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, Проект, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		// Объект уведомления является ответом на обсуждение проекта
		Для Каждого ИсполнительПроектнойКоманды Из Проект.ПроектнаяКоманда Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ИсполнительПроектнойКоманды.Исполнитель,
				ВидСобытия,
				Объект,
				Проект);
		КонецЦикла;
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Проект.Руководитель,
			ВидСобытия,
			Объект,
			Проект);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Проект);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Проект);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по сообщению
Процедура ДобавитьУведомленияПоСообщению(
	ПроизошедшееСобытие,
	Сообщение,
	ВидСобытия,
	Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Если Сообщение = Объект Тогда
			
			// Объект уведомления является самим сообщением
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие,
					Сообщение.Родитель,
					ВидСобытия,
					Объект);
			КонецЕсли;
			
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				Сообщение.ВладелецСообщения,
				ВидСобытия,
				Объект);
			
		Иначе
			
			// Объект уведомления является ответом на сообщение
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Сообщение.Автор,
				ВидСобытия,
				Объект,
				Сообщение);
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				ВидСобытия,
				Объект,
				Сообщение);
			
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие,
					Сообщение.Родитель,
					ВидСобытия,
					Объект);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Сообщение);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по теме
Процедура ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, Тема, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на тему
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Тема.Автор,
			ВидСобытия,
			Объект,
			Тема);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Тема);
		
		Если ЗначениеЗаполнено(Тема.Документ) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Тема.Документ, ВидСобытия, Объект);
		КонецЕсли;
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Тема);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по файлу
Процедура ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, Файл, ВидСобытия, Объект) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие,
			Файл.ВладелецФайла,
			ВидСобытия,
			Объект);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение файла
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Файл.Автор,
			ВидСобытия,
			Объект,
			Файл);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Файл.Редактирует,
			ВидСобытия,
			Объект,
			Файл);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Файл);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Файл);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие отказа от подписки в иерархии
Функция ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки, ОбработанныеОбъекты = Неопределено)
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектУведомления) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектУведомления);
	
	Если ОбъектУведомления = ОбъектПодписки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОтказОтПодпискиВИерархии = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектУведомления.БизнесПроцесс) Тогда
			
			ОтказОтПодпискиВИерархии = ЕстьОтказОтПодпискиВИерархии(
				ОбъектУведомления.БизнесПроцесс,
				ОбъектПодписки,
				ОтказыОтПодписки,
				ОбработанныеОбъекты);
				
		КонецЕсли;
		
		Возврат ОтказОтПодпискиВИерархии;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектУведомления) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ЕстьОтказПоВедущейЗадаче = Ложь;
	ЕстьОтказПоГлавнойЗадаче = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектУведомления.ВедущаяЗадача) Тогда
		
		ЕстьОтказПоВедущейЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ВедущаяЗадача,
			ОбъектПодписки,
			ОтказыОтПодписки,
			ОбработанныеОбъекты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектУведомления.ГлавнаяЗадача) Тогда
		
		ЕстьОтказПоГлавнойЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ГлавнаяЗадача,
			ОбъектПодписки,
			ОтказыОтПодписки,
			ОбработанныеОбъекты);
		
	КонецЕсли;
	
	Возврат ЕстьОтказПоВедущейЗадаче Или ЕстьОтказПоГлавнойЗадаче;
	
КонецФункции

// Производит отключение от почтового сервера, если соединение с почтовым сервером открыто.
//
// Параметры:
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером.
//
Процедура ЗакрытьСоединениеСПочтовымСервером(Соединение) Экспорт 
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение.Отключиться();
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при закрытии соединения с почтовым сервером: %1'; en = 'Error while closing connection to email server: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	Соединение = Неопределено;
	
КонецПроцедуры

// Отправляет уведомление окном.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция ОтправитьУведомлениеОкном(СформированноеУведомление)
	
	ВидУведомления = Перечисления.СобытияУведомлений.ОпределитьВидУведомления(СформированноеУведомление.ВидСобытия);
	Если ВидУведомления = Перечисления.ВидыУведомленийПрограммы.Ошибка Тогда
		ТекстУведомления = СформированноеУведомление.ТекстУведомления;
	Иначе
		ТекстУведомления = СтрШаблон("<b>%1</b>
			|%2",
			СформированноеУведомление.ТемаУведомления,
			СформированноеУведомление.ТекстУведомления);
	КонецЕсли;
	ТекстУведомления = ТекстУведомленияВHTML(ТекстУведомления);
	Если СформированноеУведомление.ОбъектыУведомления.Количество() = 1 Тогда
		Объект = СформированноеУведомление.ОбъектыУведомления[0];
	КонецЕсли;
	
	Попытка
		Справочники.УведомленияПрограммы.Добавить(
			СформированноеУведомление.ТемаУведомления,
			ТекстУведомления,
			ВидУведомления,
			СформированноеУведомление.Пользователь,
			Объект);
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при отправке уведомления окном: %1'; en = 'Error sending window notification: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Отправляет уведомление по push.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция ОтправитьУведомлениеПоPush(СформированноеУведомление)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СформированноеУведомление.ОбъектыУведомления.Количество() = 1 Тогда
		Объект = СформированноеУведомление.ОбъектыУведомления[0];
	КонецЕсли;
	
	Попытка
		ОбменСМобильнымиОтправкаУведомленийСервер.ЗаписатьСообщениеВРегистрPushУведомления(
			СформированноеУведомление.Пользователь,
			Объект,
			ТекущаяДатаСеанса() + 10,
			ТекстУведомленияВПростойТекст(СформированноеУведомление.ТекстУведомления));
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при формировании push уведомления: %1'; en = 'Error generating push notifications: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Отправляет уведомление по SMS.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
//  НастройкаОтправкиSMSВыполнена - Булево - Настройка отправки SMS выполнена.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция ОтправитьУведомлениеПоSMS(СформированноеУведомление, НастройкаОтправкиSMSВыполнена)
	
	Если Не НастройкаОтправкиSMSВыполнена Тогда
		ТекстОшибки =
			НСтр("ru = 'Уведомление не отправлено, так как не выполнена настройка отправки SMS.'; en = 'Notification has not been sent because SMS delivery is not configured.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	СпособыУведомления = 
		РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
			СформированноеУведомление.Пользователь,
			Перечисления.СпособыУведомления.ПоSMS);
	Если СпособыУведомления.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Уведомление не отправлено, так как не указан номер телефона у пользователя %1.'; en = 'Notification has not been sent because phone number is not specified for user %1.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Строка(СформированноеУведомление.Пользователь));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СпособУведомления Из СпособыУведомления Цикл
		
		Попытка
			// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
			// в СМС-сообщении указываем ТекстУведомления, а не ТемаУведомления
			Документы.УведомлениеПоSMS.Добавить(
				СпособУведомления,
				СформированноеУведомление.ТекстУведомления,
				СформированноеУведомление.Пользователь);
			// было
			//Документы.УведомлениеПоSMS.Добавить(
			//	СпособУведомления,
			//	СформированноеУведомление.ТемаУведомления,
			//	СформированноеУведомление.Пользователь);
			// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 } 
		Исключение
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при подготовке SMS уведомления: %1'; en = 'Error preparing SMS notifications: %1'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление на номер телефона %1 подготовлено к отправке.'; en = 'Notification to phone number %1 is ready to be sent.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				СпособУведомления));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Отправляет уведомление по почте.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером для рассылки уведомлений.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция ОтправитьУведомлениеПоПочте(СформированноеУведомление, Соединение)
	
	АдресаЭлектроннойПочты =
		РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
			СформированноеУведомление.Пользователь,
			Перечисления.СпособыУведомления.ПоПочте);
	Если АдресаЭлектроннойПочты.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'; en = 'Notification was not sent because no email is specified for user %1.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Строка(СформированноеУведомление.Пользователь));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Формирование массива вложений.
	Вложения = Новый Массив();
	Если ЗначениеЗаполнено(СформированноеУведомление.Файлы) Тогда
		Для Каждого Вложение Из СформированноеУведомление.Файлы Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить(
				"Данные", РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка));
			СтруктураВложения.Вставить("Имя", Вложение.ИмяФайла);
			СтруктураВложения.Вставить("Идентификатор", Неопределено);
			Вложения.Добавить(СтруктураВложения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПочтовыйАдресПолучателя Из АдресаЭлектроннойПочты Цикл
		
		Попытка
			
			ВидМаршрутизации = ВстроеннаяПочтаСервер.ПолучитьВидМаршрутизацииПоАдресу(ПочтовыйАдресПолучателя);
			Если ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя Тогда
				
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("Тема", СформированноеУведомление.ТемаУведомления);
				ПараметрыПисьма.Вставить("Текст", ТекстУведомленияВHTML(СформированноеУведомление.ТекстУведомления));
				ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
				ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
				
				Если ЗначениеЗаполнено(Вложения) Тогда
					ПараметрыПисьма.Вставить("Вложения", Новый Массив);
					Для каждого Вложение Из Вложения Цикл
						СтруктураВложения = Новый Структура("Адрес, ИмяФайла");
						СтруктураВложения.Адрес = Вложение.Данные;
						СтруктураВложения.ИмяФайла = Вложение.Имя;
						ПараметрыПисьма.Вложения.Добавить(СтруктураВложения);
					КонецЦикла;
				КонецЕсли;
				
				СообщениеОбОшибке = "";
				Если Соединение = Неопределено Тогда
					Соединение = СоединениеСПочтовымСервером();
				КонецЕсли;
				УведомлениеОтправлено = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
					ПараметрыПисьма,
					УчетнаяЗаписьДляРассылки(),,
					СообщениеОбОшибке,
					Соединение);
				Если Не УведомлениеОтправлено Тогда
					ВызватьИсключение СообщениеОбОшибке;
				КонецЕсли;
				
			ИначеЕсли ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внутренняя Тогда
				
				УчетныеЗаписиПолучателя = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиПоАдресу(ПочтовыйАдресПолучателя, Истина);
				Если УчетныеЗаписиПолучателя.Количество() = 0 Тогда 
					ВызватьИсключение НСтр("ru = 'Неверный вид маршрутизации письма. Обратитесь к Администратору.'; en = 'Wrong email routing type. Contact the Administrator.'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				
				Предметы = Новый Массив;
				Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
					
					Если Предметы.Найти(Уведомление.Объект) = Неопределено Тогда
						Предметы.Добавить(Уведомление.Объект);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого УчетнаяЗаписьПолучателя Из УчетныеЗаписиПолучателя Цикл 
					
					ВходящееПисьмоОбъект = Документы.ВходящееПисьмо.СоздатьДокумент();
					
					Если Предметы.Количество() = 1 Тогда
						Предмет = Предметы[0];
						Если ЗначениеЗаполнено(Предмет) 
							И ВстроеннаяПочтаСервер.ДоступенПоПравамОтветственнымУчетнойЗаписи(Предмет, УчетнаяЗаписьПолучателя) Тогда 
							ВходящееПисьмоОбъект.Предмет = Предмет;
						КонецЕсли;
					КонецЕсли;
					
					Сообщение = Почта.СформироватьСтруктуруПочтовогоСообщения();
					
					Сообщение.Тема = СформированноеУведомление.ТемаУведомления;
					
					ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(УчетнаяЗаписьПолучателя);
					СтруктураПочтовогоАдреса = Новый Структура;
					СтруктураПочтовогоАдреса.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
					СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ОтображаемоеИмя);
					Сообщение.Получатели.Добавить(СтруктураПочтовогоАдреса);
					
					УчетнаяЗаписьОтправителя =
						ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
					ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(УчетнаяЗаписьОтправителя);
					СтруктураПочтовогоАдреса = Новый Структура;
					СтруктураПочтовогоАдреса.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
					СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ОтображаемоеИмя);
					Сообщение.Отправитель = СтруктураПочтовогоАдреса;
					Сообщение.ИмяОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
					
					ДатаСообщения = ТекущаяДатаСеанса();
					Сообщение.ДатаОтправки = ДатаСообщения;
					Сообщение.ДатаПолучения = ДатаСообщения;
					
					ИдентификаторСообщения = Новый УникальныйИдентификатор;
					Сообщение.ИдентификаторСообщения = Строка(ИдентификаторСообщения);
					
					СтруктураТекста = Новый Структура;
					СтруктураТекста.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
					СтруктураТекста.Вставить("Текст", ТекстУведомленияВHTML(СформированноеУведомление.ТекстУведомления));
					СтруктураТекста.Вставить("Кодировка", "");
					Сообщение.Тексты.Добавить(СтруктураТекста);
					
					Сообщение.Размер = ВстроеннаяПочтаСервер.ВычислитьРазмерПочтовогоСообщения(Сообщение);
					
					Сообщение.Вложения = Вложения;
					
					ВстроеннаяПочтаСервер.ЗаполнитьВходящееПисьмоПриВнутреннейМаршрутизации(ВходящееПисьмоОбъект, Сообщение, УчетнаяЗаписьПолучателя);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при отправке уведомления по почте: %1'; en = 'Error sending mail notifications: %1'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			ЗакрытьСоединениеСПочтовымСервером(Соединение);
			Возврат Ложь;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление успешно отправлено на адрес %1 (вид маршрутизации - %2).'; en = 'Notification successfully sent to address %1 (routing type is %2).'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПочтовыйАдресПолучателя,
				НРег(ВидМаршрутизации)));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Отправляет уведомления.
//
// Параметры:
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//
Процедура ОтправитьУведомления(СформированныеУведомления)
	
	НастройкаОтправкиSMSВыполнена = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	Соединение = Неопределено;
	Для Каждого СформированноеУведомление Из СформированныеУведомления Цикл
		
		УведомлениеОтправлено = Ложь;
		Если СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
			УведомлениеОтправлено = ОтправитьУведомлениеПоПочте(СформированноеУведомление, Соединение);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
			УведомлениеОтправлено = ОтправитьУведомлениеОкном(СформированноеУведомление);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
			УведомлениеОтправлено = ОтправитьУведомлениеПоSMS(СформированноеУведомление, НастройкаОтправкиSMSВыполнена);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоPush Тогда
			УведомлениеОтправлено = ОтправитьУведомлениеПоPush(СформированноеУведомление);
		КонецЕсли;
		
		Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
			Если УведомлениеОтправлено Тогда
				РегистрыСведений.ОчередьУведомлений.УдалитьУведомление(
					Уведомление.Пользователь,
					Уведомление.ВидСобытия,
					Уведомление.СпособУведомления,
					Уведомление.Объект,
					Уведомление.ОбъектПодписки);
			Иначе
				РегистрыСведений.ОчередьУведомлений.УвеличитьЧислоПопытокОтправки(
					Уведомление.Пользователь,
					Уведомление.ВидСобытия,
					Уведомление.СпособУведомления,
					Уведомление.Объект,
					Уведомление.ОбъектПодписки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	ЗакрытьСоединениеСПочтовымСервером(Соединение);
	
КонецПроцедуры

// Возвращает настройки уведомления о задачах пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о задачах.
//
Функция ПолучитьНастройкиУведомленийОЗадачах(МассивПользователей)
	
	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПриближениеСрока",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченныеЗадачи",
		Новый ОписаниеТипов("Число"));
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		НоваяСтрока.ЧастотаПриближениеСрока = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		НоваяСтрока.ЧастотаПросроченныеЗадачи = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПросроченаЗадача);
	КонецЦикла;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Возвращает настройки уведомления о документах пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о задачах.
//
Функция ПолучитьНастройкиУведомленияОДокументах(МассивПользователей)
	
	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаУведомления",
		Новый ОписаниеТипов("Число"));
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		НоваяСтрока.ЧастотаУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	КонецЦикла;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Возвращает настройки уведомления о контролях пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о контролях.
//
Функция ПолучитьНастройкиУведомленияОКонтроле(МассивПользователей)
	
	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПриближениеСрока",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченКонтроль",
		Новый ОписаниеТипов("Число"));
		
	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		НоваяСтрока.ЧастотаПриближениеСрока = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		НоваяСтрока.ЧастотаПросроченКонтроль = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПросроченКонтроль);
	КонецЦикла;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Возвращает настройки уведомления о контрольных точках пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о контрольных точках.
//
Функция ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПользователей)
	
	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокПодошелСрокКонтрольнойТочки",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПодошелСрокКонтрольнойТочки",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченаКонтрольнаяТочка",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченаОценкаКонтрольнойТочки",
		Новый ОписаниеТипов("Число"));
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокПодошелСрокКонтрольнойТочки = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		НоваяСтрока.ЧастотаПодошелСрокКонтрольнойТочки = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		НоваяСтрока.ЧастотаПросроченаКонтрольнаяТочка = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		НоваяСтрока.ЧастотаПросроченаОценкаКонтрольнойТочки = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
	КонецЦикла;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Формирует значение оставшихся неполных дней до конца срока.
//
// Параметры:
//  СрокДата - Дата - Срок.
//  ТекущаяДата - Дата - Дата, относительно которой рассчитывается срок в днях.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, график работы которого используется.
//  ПримерныйСрок - Булево - Признак того, что срок примерный.
//  КНачалуДня - Булево - Признак того, что дату следует привести к началу дня.
//
// Возвращаемое значение:
//  Число - Срок в днях.
//
Функция ПолучитьОсталосьДней(Срок, Знач ТекущаяДата = Неопределено, Пользователь = Неопределено,
		ПримерныйСрок = Ложь, КНачалуДня = Ложь)
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если КНачалуДня Тогда
		ТекущаяДата = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Иначе
		ИспользоватьГрафикиРаботы = Ложь;
	КонецЕсли;
	
	ПримерныйСрок = Ложь;
	
	Если ИспользоватьГрафикиРаботы Тогда
		
		График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
		
		Попытка
			Если Срок >= ТекущаяДата Тогда
				СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, ТекущаяДата, Срок) + 1;
			Иначе
				СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, Срок, ТекущаяДата);
			КонецЕсли;
		Исключение
			
			ТекстПредупреждения =
				НСтр("ru = 'Не удалось получить разность дат по календарю:'; en = 'Could not get difference between dates by calendar:'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстПредупреждения);
			
			ПримерныйСрок = Истина;
			СрокВДнях = ПолучитьОсталосьДней(Срок, ТекущаяДата);
			
		КонецПопытки;
		
	Иначе
		
		Если Срок >= ТекущаяДата Тогда
			СрокВДнях = (КонецДня(Срок) - КонецДня(ТекущаяДата)) / 86400 + 1; // 86400 - число секунд в сутках.
		Иначе
			СрокВДнях = (КонецДня(ТекущаяДата) - КонецДня(Срок)) / 86400; // 86400 - число секунд в сутках.
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СрокВДнях;
	
КонецФункции

// Возвращает структуру с параметрами произошедшего события
Функция ПолучитьПараметрыСобытия(Событие)
	
	Попытка
		
		СтрокаXML = Событие.КонтекстСобытия.Получить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		ПараметрыСобытия = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	Исключение
		
		ПараметрыСобытия = Новый Структура;
		
	КонецПопытки;
	
	Возврат ПараметрыСобытия;
	
КонецФункции

// Возвращает полный путь папки
Функция ПолучитьПолныйПуть(Папка)
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка.Ссылка, "Родитель");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
			
			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);
		
	Иначе
		
		ПолныйПуть = Строка(Папка.Ссылка);
		
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

// Получение родителя бизнес-процесса с проверкой подписки
Процедура ПолучитьРодителейСПроверкойПодписки(
	ОбъектРодитель,
	МассивРодителей,
	ОтказыОтПодписки,
	ОбъектПодписки,
	ОбработанныеОбъекты = Неопределено)
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектРодитель) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектРодитель);
	
	Если ТипЗнч(ОбъектРодитель) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ЗначениеЗаполнено(ОбъектРодитель.БизнесПроцесс) Тогда
			ПолучитьРодителейСПроверкойПодписки(
				ОбъектРодитель.БизнесПроцесс,
				МассивРодителей,
				ОтказыОтПодписки,
				ОбъектПодписки,
				ОбработанныеОбъекты);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектРодитель) <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектРодитель <> ОбъектПодписки Тогда
		МассивРодителей.Добавить(ОбъектРодитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРодитель.ВедущаяЗадача) Тогда
		
		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ВедущаяЗадача,
			МассивРодителей,
			ОтказыОтПодписки,
			ОбъектПодписки,
			ОбработанныеОбъекты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда
		
		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ГлавнаяЗадача,
			МассивРодителей,
			ОтказыОтПодписки,
			ОбъектПодписки,
			ОбработанныеОбъекты);
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Помещает активных подписчиков во временные таблицы.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события, по которому отбираются подписчики.
//  ОбъектМетаданных - Строка - Имя объекта метаданных, по которому учитывается делегирование.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы подписчиков.
//
Процедура ПоместитьПодписчиковВоВременнуюТаблицу(МенеджерВременныхТаблиц, ВидСобытия, ИмяОбластиДелегирования,
	ИмяВременнойТаблицы = "Подписчики")
	
	РазрешитьИзменятьНастройкиУведомлений = РегистрыСведений.НастройкиУведомлений.РазрешеноИзменятьНастройки();
	ПодпискаПоУмолчанию = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(ВидСобытия);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		// Установлена подписка по умолчанию, но пользователи могут изменять персональную настройку.
		ТекстЗапросаПодписчиков =
		
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Подписчик,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ПолучательУведомления
			|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
			|		ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = НастройкиУведомлений.Пользователь
			|			И (НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка))
			|			И (НастройкиУведомлений.ВидСобытия = &ВидСобытия)
			|			И (НастройкиУведомлений.Объект = НЕОПРЕДЕЛЕНО)
			|			И (НастройкиУведомлений.Значение = ЛОЖЬ)
			|ГДЕ
			|	НастройкиУведомлений.Значение ЕСТЬ NULL
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ПользователиИРолиСПодпиской.Подписчик = Пользователи.Ссылка
			|ГДЕ
			|	Пользователи.Недействителен = ЛОЖЬ
			|	И Пользователи.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
			|		ПО ПользователиИРолиСПодпиской.Подписчик = ПолныеРоли.Ссылка
			|ГДЕ
			|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подписчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
		
		
	ИначеЕсли ПодпискаПоУмолчанию И Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		// Установка подписка по умолчанию и пользователям запрещено изменять персональную настройку.
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Подписчик,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ПолучательУведомления
			|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ПользователиИРолиСПодпиской.Подписчик = Пользователи.Ссылка
			|ГДЕ
			|	Пользователи.Недействителен = ЛОЖЬ
			|	И Пользователи.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
			|		ПО ПользователиИРолиСПодпиской.Подписчик = ПолныеРоли.Ссылка
			|ГДЕ
			|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подписчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
		
	Иначе
		
		// Не установлена подписка по умолчанию.
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Подписчик,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ПолучательУведомления
			|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
			|		ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = НастройкиУведомлений.Пользователь
			|			И (НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка))
			|			И (НастройкиУведомлений.ВидСобытия = &ВидСобытия)
			|			И (НастройкиУведомлений.Объект = НЕОПРЕДЕЛЕНО)
			|			И (НастройкиУведомлений.Значение = ИСТИНА)
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ПользователиИРолиСПодпиской.Подписчик = Пользователи.Ссылка
			|ГДЕ
			|	Пользователи.Недействителен = ЛОЖЬ
			|	И Пользователи.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
			|		ПО ПользователиИРолиСПодпиской.Подписчик = ПолныеРоли.Ссылка
			|ГДЕ
			|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подписчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
		
	КонецЕсли;
	
	ТекстЗапросаПодписчиков = СтрШаблон(ТекстЗапросаПодписчиков, ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапросаПодписчиков);
	Запрос.УстановитьПараметр("ИмяОбластиДелегирования", ИмяОбластиДелегирования);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает соединение с почтовым сервером для рассылки уведомлений.
//
// Возвращаемое значение:
//  ИнтернетПочта - Соединение с почтовым сервером для рассылки уведомлений.
//
Функция СоединениеСПочтовымСервером()
	
	Возврат Неопределено;
	
КонецФункции

// Формирует текстовое представление внутреннего документа.
//
Функция СформироватьПредставлениеВнутреннегоДокумента(
	ВнутреннийДокумент,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеВнутреннегоДокумента = "";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВнутреннийДокумент,
		"Папка, Подготовил, ДатаСоздания,
		|ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента,
		НСтр("ru = 'Документ'; en = 'Document'", КодЯзыка),
		ВнутреннийДокумент);
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Папка) Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,
			НСтр("ru = 'Папка'; en = 'Folder'", КодЯзыка),
			ПолучитьПолныйПуть(ЗначенияРеквизитов.Папка));
	КонецЕсли;
	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента,
		НСтр("ru = 'Подготовил'; en = 'Prepared by'", КодЯзыка),
		ЗначенияРеквизитов.Подготовил);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента,
		НСтр("ru = 'Дата'; en = 'Date'", КодЯзыка),
		ЗначенияРеквизитов.ДатаСоздания);
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда 
		
		СрокДействия = "";
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаНачалаДействия) Тогда
			СрокДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'; en = 'from %1'", КодЯзыка),
			Формат(ЗначенияРеквизитов.ДатаНачалаДействия, "ДЛФ=D")); 
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Бессрочный Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				СрокДействия,
				", ",
				НСтр("ru = 'бессрочный'; en = 'termless'", КодЯзыка));
		ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОкончанияДействия) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(СрокДействия, " ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по %1'; en = 'to %1'", КодЯзыка),
				Формат(ЗначенияРеквизитов.ДатаОкончанияДействия, "ДЛФ=D")));
		КонецЕсли;
		
		ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,
			НСтр("ru = 'Срок действия'; en = 'Period of validity'", КодЯзыка),
			СрокДействия);
		ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,
			НСтр("ru = 'Продление'; en = 'Extension'", КодЯзыка),
			ЗначенияРеквизитов.ПорядокПродления);
		
	КонецЕсли;
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//ДобавитьРеквизитКСтроке(
	//	ПредставлениеВнутреннегоДокумента,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	ПолучитьНавигационнуюСсылкуУведомления(ВнутреннийДокумент));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеВнутреннегоДокумента;
	
КонецФункции

// Формирует текстовое представление входящего документа.
//
Функция СформироватьПредставлениеВходящегоДокумента(
	ВходящийДокумент,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеВходящегоДокумента = "";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВходящийДокумент,
		"Отправитель, Адресат, ДатаСоздания");
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента,
		НСтр("ru = 'Документ'; en = 'Document'", КодЯзыка),
		ВходящийДокумент);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента,
		НСтр("ru = 'Отправитель'; en = 'Sender'", КодЯзыка),
		ЗначенияРеквизитов.Отправитель);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента,
		НСтр("ru = 'Адресат'; en = 'Addressee'", КодЯзыка),
		ЗначенияРеквизитов.Адресат);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента,
		НСтр("ru = 'Дата'; en = 'Date'", КодЯзыка),
		ЗначенияРеквизитов.ДатаСоздания);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//ДобавитьРеквизитКСтроке(
	//	ПредставлениеВходящегоДокумента,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	ПолучитьНавигационнуюСсылкуУведомления(ВходящийДокумент));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеВходящегоДокумента;
	
КонецФункции

// Формирует текстовое представление исходящего документа.
//
Функция СформироватьПредставлениеИсходящегоДокумента(
	ИсходящийДокумент,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеИсходящегоДокумента = "";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИсходящийДокумент,
		"Получатели.Получатель, Подготовил, ДатаСоздания");
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента,
		НСтр("ru = 'Документ'; en = 'Document'", КодЯзыка),
		ИсходящийДокумент);
	ВыборкаПолучателей = ЗначенияРеквизитов.ПолучателиПолучатель.Выбрать();
	Пока ВыборкаПолучателей.Следующий() Цикл
		ДобавитьРеквизитКСтроке(
			ПредставлениеИсходящегоДокумента,
			НСтр("ru = 'Получатель'; en = 'Recipient'", КодЯзыка),
			ВыборкаПолучателей.Получатель);
	КонецЦикла;
	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента,
		НСтр("ru = 'Подготовил'; en = 'Prepared by'", КодЯзыка),
		ЗначенияРеквизитов.Подготовил);
	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента,
		НСтр("ru = 'Дата'; en = 'Date'", КодЯзыка),
		ЗначенияРеквизитов.ДатаСоздания);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//ДобавитьРеквизитКСтроке(
	//	ПредставлениеИсходящегоДокумента,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	ПолучитьНавигационнуюСсылкуУведомления(ИсходящийДокумент));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеИсходящегоДокумента;
	
КонецФункции

// Формирует текстовое представление файла
Функция СформироватьПредставлениеФайла(
	Файл,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеФайла = "";
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Файл'; en = 'File'", КодЯзыка),
		Файл.Ссылка);
	Если ЗначениеЗаполнено(Файл.ВладелецФайла) Тогда
		Если ТипЗнч(Файл.ВладелецФайла) = Тип("СправочникСсылка.Файлы") Тогда
			ДобавитьРеквизитКСтроке(
				ПредставлениеФайла,
				НСтр("ru = 'Папка'; en = 'Folder'", КодЯзыка),
				ПолучитьПолныйПуть(Файл.ВладелецФайла));
		Иначе 
			ДобавитьРеквизитКСтроке(
				ПредставлениеФайла,
				ТипЗнч(Файл.ВладелецФайла),
				Файл.ВладелецФайла);
		КонецЕсли;
	КонецЕсли;
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Автор'; en = 'Author'", КодЯзыка),
		Файл.Автор);
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Дата'; en = 'Date'", КодЯзыка),
		Файл.ТекущаяВерсияДатаСоздания);
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 {
	// Ссылку на объект не выводим, т.к. ссылка на объект 1С для пользователей web-интерфейса ни о чем не скажет	                                                                
	//ДобавитьРеквизитКСтроке(
	//	ПредставлениеФайла,
	//	НСтр("ru = 'Ссылка'; en = 'Reference'", КодЯзыка),
	//	ПолучитьНавигационнуюСсылкуУведомления(Файл));
	// Корнюшенков А.Ю. Искать в тексте "ДоработкиSMS" 19.09.2018 }
	
	Возврат ПредставлениеФайла;
	
КонецФункции

// Формирует текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	)
	
	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТекстУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
		Иначе
			ДополнительноеОписание = Неопределено;
		КонецЕсли;
		
		ПредставлениеОбъекта = СформироватьПредставлениеОбъекта(
			ОбъектУведомления,
			ВидСобытия,
			ПолучательУведомления,
			ДополнительноеОписание);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстУведомления,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
		
	КонецЦикла;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
	)
	
	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТекстУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	ТекстУведомления = СформироватьПредставлениеОбъекта(
		ОбъектУведомления,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
	)
	
	ТемаУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТемуУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	КодЯзыка = КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ПредставлениеОбъектаПодписки = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в папке ""%1""'; en = 'in folder ""%1""'", КодЯзыка),
				ПолныйПутьПапки);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в входящем документе ""%1""'; en = 'in incoming document ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'во внутреннем документе ""%1""'; en = 'in internal document ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в исходящем документе ""%1""'; en = 'in outgoing document ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеОбъектаПодписки) Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новый файл ""%1"" %2'; en = 'New file ""%1"" %2'", КодЯзыка),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые файлы (%1) %2'; en = 'New files (%1) %2'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента Тогда 
		
		ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
		ПредставлениеОбъектаПодписки = СтрШаблон(
			НСтр("ru = 'в папке ""%1""'; en = 'in folder ""%1""'", КодЯзыка),
			ПолныйПутьПапки);
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Новый документ ""%1"" %2'; en = 'New document ""%1"" %2'", КодЯзыка),
				ОбъектУведомления.Ссылка,
				ПредставлениеОбъектаПодписки);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Новые документы (%1) %2'; en = 'New documents (%1) %2'", КодЯзыка),
				КоличествоОбъектовУведомления,
				ПредставлениеОбъектаПодписки);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Новая задача ""%1""'; en = 'New task ""%1""'", КодЯзыка), ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Новые задачи (%1)'; en = 'New tasks (%1)'", КодЯзыка), КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Перенаправлена задача ""%1""'; en = 'Task ""%1"" has been forwarded'", КодЯзыка),
				ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Задачи перенаправлены (%1)'; en = 'Tasks have been forwarded (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнение задачи ""%1"" отменено'; en = 'Task ""%1"" execution has been canceled'", КодЯзыка),
				ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Отменено выполнение задач (%1)'; en = 'Tasks execution has been canceled (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подошел срок выполнения задач (%1)'; en = 'Tasks due date is approaching (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Приближается окончание срока действия документа ""%1""'; en = 'Document ""%1"" period of validity is expiring'", КодЯзыка),
				Строка(ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Приближается окончание срока действия документов (%1)'; en = 'Documents (%1) period of validity is expiring'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Закончился срок действия документа ""%1""'; en = 'Document ""%1"" period of validity has expired'", КодЯзыка),
				Строка(ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Закончился срок действия документов (%1)'; en = 'Documents (%1) periods of validity have expired'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Просрочены задачи (%1)'; en = 'Tasks (%1) are overdue'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Просрочены задачи от меня (%1)'; en = 'Overdue tasks from me (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПредставлениеОбъектаПодписки = "";
		Иначе
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'процесса ""%1""'; en = 'of process ""%1""'", КодЯзыка),
				ОбъектПодписки.Наименование);
		КонецЕсли;
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнена задача ""%1""'; en = 'Tasks ""%1"" was executed'", КодЯзыка),
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнены задачи (%1) %2'; en = 'Tasks (%1) %2 were executed'", КодЯзыка),
				КоличествоОбъектовУведомления,
				ПредставлениеОбъектаПодписки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание,
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
	ДополнительныеДанныеПоОбъекту = Неопределено
	// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
	)
	
	ТемаУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТемуУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание,
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
		ДополнительныеДанныеПоОбъекту
		// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
		);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	ПредставлениеВидаСобытия =
		Перечисления.СобытияУведомлений.ПредставлениеВидаСобытия(
			ВидСобытия,
			ОбъектПодписки,
			ПолучательУведомления);
	ПредставлениеОбъектаУведомления = Строка(ОбъектУведомления);
	ТемаУведомления = СтрШаблон("%1 ""%2""", ПредставлениеВидаСобытия, ПредставлениеОбъектаУведомления);
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует уведомления из очереди уведомлений для отправки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Уведомления для отправки.
//
Функция СформироватьУведомленияДляОтправки()
	
	СформированныеУведомления = Новый ТаблицаЗначений;
	СформированныеУведомления.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СформированныеУведомления.Колонки.Добавить("СпособУведомления",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУведомления"));
	СформированныеУведомления.Колонки.Добавить("ВидСобытия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	СформированныеУведомления.Колонки.Добавить("ТемаУведомления",
		Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("ТекстУведомления",
		Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("Уведомления",
		Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("Файлы",
		Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("ОбъектыУведомления",
		Новый ОписаниеТипов("Массив"));
	
	Уведомления = РегистрыСведений.ОчередьУведомлений.ПолучитьУведомления();
	ПолучателиУведомлений = ОбщегоНазначения.ВыгрузитьКолонку(Уведомления, "Пользователь", Истина);
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомлений Цикл
		
		Для Каждого СпособУведомления Из Перечисления.СпособыУведомления Цикл
			
			// Группируем уведомления по виду видам событий.
			ВидыСобытий = ВидыСобытийДляГруппировки(ПолучательУведомления, СпособУведомления);
			Для Каждого ВидСобытия Из ВидыСобытий Цикл
				СформироватьУведомленияПоВидуБизнесСобытия(
					ПолучательУведомления,
					СпособУведомления,
					ВидСобытия,
					Уведомления,
					СформированныеУведомления);
			КонецЦикла;
			
			// Формируем тексты уведомлений по оставшимся уведомлениям.
			СформироватьУведомленияПоСобытиям(
				ПолучательУведомления,
				СпособУведомления,
				ВидыСобытий,
				Уведомления,
				СформированныеУведомления);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СформированныеУведомления;
	
КонецФункции

// Формирует уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления)
	
	Если РаботаСУведомлениямиПереопределяемый.СформироватьУведомленияПоВидуБизнесСобытия(
		ПолучательУведомления,
		СпособУведомления,
		ВидСобытия,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		// Группировка уведомлений по процессу / задаче.
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		УведомленияПодписки = Новый Массив;
		ДополнительныеОписания = Новый Соответствие;
		ОбъектыПодписки = Новый Массив;
		ОбъектыУведомленияСПодпиской = Новый Массив;
		ОбъектыУведомленияСОтказом = Новый Массив;
		
		БизнесПроцессыРодители = Новый ТаблицаЗначений;
		БизнесПроцессыРодители.Колонки.Добавить("ОбъектПодписки");
		БизнесПроцессыРодители.Колонки.Добавить("Родитель");
		ОтказыОтПодписки = РегистрыСведений.НастройкиУведомлений.ОтказыОтПодписки(ПолучательУведомления, ВидСобытия, СпособУведомления);
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если Не ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьВМассивСПроверкойПодписки(
				Уведомление.Объект,
				Уведомление.ОбъектПодписки,
				ОбъектыПодписки,
				БизнесПроцессыРодители,
				ОтказыОтПодписки,
				ОбъектыУведомленияСПодпиской,
				ОбъектыУведомленияСОтказом);
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЯвляетсяПотомкомОбъектовПодписки(Уведомление.ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено
					И ОбъектыУведомленияСОтказом.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ВидСобытия = ВидСобытия;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СформированноеУведомление.ОбъектыУведомления,
					ОбъектыУведомления);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда
		
		// Группировка по событию.
		СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		// Группировка по событию и объекту подписки.
		СформироватьУведомленияГруппировкаПоОбъектуПодписки(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует уведомления по событиям без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияПоСобытиям(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления)
	
	Если РаботаСУведомлениямиПереопределяемый.СформироватьУведомленияПоСобытиям(
		ПолучательУведомления,
		СпособУведомления,
		ОбработанныеВидыБизнесСобытий,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 {
		ДополнительныеДанныеПоОбъекту = Новый Соответствие;
		
		ПараметрыСобытия = Новый Структура;
		ПараметрыСобытия.Вставить("ра_БылИсполнитель", Уведомление.ра_БылИсполнитель);
		ПараметрыСобытия.Вставить("ра_СталИсполнитель", Уведомление.ра_СталИсполнитель);
		ПараметрыСобытия.Вставить("ра_ЭскалацияРуководителю", Уведомление.ра_ЭскалацияРуководителю);
		ДополнительныеДанныеПоОбъекту.Вставить(Уведомление.Объект, ПараметрыСобытия);
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 31.10.2018 }
			
		ДанныеУведомления = ДанныеУведомленияПоСобытию(
			Уведомление.ОбъектПодписки, 
			Уведомление.ВидСобытия, 
			Уведомление.Объект,
			ПолучательУведомления,
			СпособУведомления,
			Уведомление.ДополнительноеОписание,
			// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 {
			ДополнительныеДанныеПоОбъекту
			// Корнюшенков А.Ю. Искать в тексте "ОбменЛучшимиПрактиками" 24.10.2018 } 
			);
		
		УведомленияПодписки = Новый Массив;
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = Уведомление.ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		СформированноеУведомление.ОбъектыУведомления.Добавить(Уведомление.Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует файлы уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	Файлы = РаботаСУведомлениямиПереопределяемый.СформироватьФайлыУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Файлы = Неопределено;
	
	Возврат Файлы;
	
КонецФункции

// Формирует файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	Файлы = РаботаСУведомлениямиПереопределяемый.СформироватьФайлыУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Файлы = Неопределено;
	
	Возврат Файлы;
	
КонецФункции

// Преобразует текст уведомления в HTML.
//
// Параметры:
//  ТекстУведомления - Строка - Текст уведомления.
//
// Возвращаемое значение:
//  Строка - Текст уведомления в HTML.
//
Функция ТекстУведомленияВHTML(Знач ТекстУведомления) Экспорт 
	
	ТекстУведомления = СтрЗаменить(ТекстУведомления, Символы.ПС, "<br>");
	
	ТекстУведомления = СтрШаблон(
		"<html>
		|<body>
		|<div style=""font-family:Arial;font-size:10pt;"">
		|%1
		|</div>
		|</body>
		|</html>",
		ТекстУведомления);
	
	Возврат ТекстУведомления;
	
КонецФункции

// Преобразует текст уведомления в простой текст.
//
// Параметры:
//  ТекстУведомления - Строка - Текст уведомления.
//
// Возвращаемое значение:
//  Строка - Текст уведомления в HTML.
//
Функция ТекстУведомленияВПростойТекст(Знач ТекстУведомления)
	
	ТекстУведомления = СтрЗаменить(ТекстУведомления, "<b>","");
	ТекстУведомления = СтрЗаменить(ТекстУведомления, "</b>","");
	
	Возврат ТекстУведомления;
	
КонецФункции

// Возвращает учетную запись, используемую для рассылки уведомлений.
//
Функция УчетнаяЗаписьДляРассылки()
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
КонецФункции

// Проверяет есть ли среди родителей объекта подписки объекта из массива объектов подписки 
// с учетом отказов от уведомлений.
Функция ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки, ОбработанныеОбъекты = Неопределено)
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектПодписки) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектПодписки);
	
	Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ЯвляетсяПотомкомПоБизнесПроцессу = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектПодписки.БизнесПроцесс) Тогда
			ЯвляетсяПотомкомПоБизнесПроцессу = ЯвляетсяПотомкомОбъектовПодписки(
				ОбъектПодписки.БизнесПроцесс,
				ОбъектыПодписки, 
				ОтказыОтПодписки,
				ОбработанныеОбъекты);
		КонецЕсли;
		
		Возврат ЯвляетсяПотомкомПоБизнесПроцессу;
		
	КонецЕсли;
	
	Если ОбъектыПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЯвляетсяПотомкомПоВедущейЗадаче = Ложь;
	ЯвляетсяПотомкомПоГлавнойЗадаче = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ВедущаяЗадача) Тогда
		
		ЯвляетсяПотомкомПоВедущейЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ВедущаяЗадача,
			ОбъектыПодписки, 
			ОтказыОтПодписки,
			ОбработанныеОбъекты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда
		
		ЯвляетсяПотомкомПоГлавнойЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ГлавнаяЗадача,
			ОбъектыПодписки, 
			ОтказыОтПодписки,
			ОбработанныеОбъекты);
		
	КонецЕсли;
	
	Возврат ЯвляетсяПотомкомПоВедущейЗадаче Или ЯвляетсяПотомкомПоГлавнойЗадаче;
	
КонецФункции

#КонецОбласти
