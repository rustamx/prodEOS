
#Область ПрограммныйИнтерфейс

// Заполняет шаблон параметрами.
//
// Параметры:
//  Шаблон  - СправочникОбъект.Шаблон<Процесса> - шаблон-объект, который требуется заполнить.
//  ПараметрыШаблона  - Структура - представляет собой структуру шаблона процесса.
//                                  Структура определяется соответствующей процедурой менеджера шаблона процесса.
//
Процедура ЗаполнитьШаблон(Шаблон, ПараметрыШаблона) Экспорт
	
	Шаблон.Заполнить(Новый Структура);
	ЗаполнитьЗначенияСвойств(Шаблон, ПараметрыШаблона,,"Предметы");
	
	// Определений действий (точки маршрута) процесса
	ИмяПроцесса = Справочники[Шаблон.Метаданные().Имя].ИмяПроцесса(Шаблон);
	ДействияПроцесса = БизнесПроцессы[ИмяПроцесса].ТочкиМаршрута;
	
	// Заполнение табличных частей Предметы и ПредметыЗадач шаблона процесса
	Для Каждого Предмет Из ПараметрыШаблона.Предметы Цикл
		
		НоваяСтрокаПредмет = Шаблон.Предметы.Добавить();
		НоваяСтрокаПредмет.РольПредмета = Предмет.РольПредмета;
		НоваяСтрокаПредмет.ИмяПредмета = МультипредметностьВызовСервера.
			ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредмета);
			
		Если ЗначениеЗаполнено(Предмет.ИмяПредметаОснование) Тогда
			НоваяСтрокаПредмет.ИмяПредметаОснование = МультипредметностьВызовСервера.
				ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредметаОснование);
		КонецЕсли;
		
		Для Каждого Действие Из ДействияПроцесса Цикл
			НоваяСтрока = Шаблон.ПредметыЗадач.Добавить();
			НоваяСтрока.ТочкаМаршрута = Действие;
			НоваяСтрока.ИмяПредмета = НоваяСтрокаПредмет.ИмяПредмета;
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") 
				И Действие = Предмет.ТочкаМаршрута Тогда
				НоваяСтрока.ОбязательноеЗаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполнение рабочей группы шаблона процесса
	РабочаяГруппаДобавить = Новый Массив;
	Для Каждого Участник Из ПараметрыШаблона.РабочаяГруппа Цикл
		
		СтруктураУчастникаРабГруппы = Новый Структура;
		СтруктураУчастникаРабГруппы.Вставить("Участник", Участник.Участник);
		
		РабочаяГруппаДобавить.Добавить(СтруктураУчастникаРабГруппы);
		
	КонецЦикла;
	
	Шаблон.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

// Записывает шаблон процесса с указанным видом записи.
// Вид записи определяет, какие обработчики будут выполняться перед и при записи шаблона.
//
// Но при этом есть ряд обязательных обработчиков, которые выполняются всегда.
// В таких обработчиках нет проверки дополнительного свойства ВидЗаписи.
//
// Параметры:
//   ШаблонОбъект - СправочникСсылка.<НаименованиеШаблонаПроцесса>
//   ВидЗаписи - Строка - может принимать значения:
//                           ПростаяЗапись - запись шаблона без с отключением всех обработчиков.
//                           ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов - запись шаблона с заполнением служебных реквизитов КП.
//
Процедура ЗаписатьШаблон(ШаблонОбъект, ВидЗаписи) Экспорт
	
	ШаблонОбъект.ДополнительныеСвойства.Вставить("ВидЗаписи", ВидЗаписи);
	
	ШаблонОбъект.Записать();
	
	ШаблонОбъект.ДополнительныеСвойства.Удалить("ВидЗаписи");
	
КонецПроцедуры

// Общий обработчик шаблонов процессов ПередЗаписью
//
// Параметры:
//  Шаблон - СправочникОбъект.Шаблон<ИмяШаблонаПроцесса> - объект шаблона процесса.
//  Отказ - Булево - ссылка на параметр Отказ в процедуре ПередЗаписью модуля объекта.
//
Процедура ШаблонПередЗаписью(Шаблон, Отказ) Экспорт
	
	ОбычнаяЗапись = Истина;
	ТолькоЗаполненитьРевизитКомплексныйПроцесс = Ложь;
	Если Шаблон.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоЗаполненитьРевизитКомплексныйПроцесс = (Шаблон.ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
		
		Если Не ТолькоЗаполненитьРевизитКомплексныйПроцесс Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоЗаполненитьРевизитКомплексныйПроцесс Тогда
	
		Если ЗначениеЗаполнено(Шаблон.ВладелецШаблона)
			И ОбщегоНазначения.СсылкаСуществует(Шаблон.ВладелецШаблона) Тогда
			
			Если ТипЗнч(Шаблон.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				Шаблон.КомплексныйПроцесс = Шаблон.ВладелецШаблона;
			Иначе
				Шаблон.КомплексныйПроцесс = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					Шаблон.ВладелецШаблона, "КомплексныйПроцесс");
			КонецЕсли;
			
		КонецЕсли;
		
		// Пропускаем определение дескриптора доступа и проверку прав,
		// если заполнен реквизит КомплексныйПроцесс.
		Если ЗначениеЗаполнено(Шаблон.КомплексныйПроцесс) Тогда
			Шаблон.ДополнительныеСвойства.Вставить(
				"ПропуститьОпределениеДескриптораДоступаИПроверкуПрав", Истина);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбычнаяЗапись Тогда
		
	// Обработка рабочей группы
	Если ЗначениеЗаполнено(Шаблон.Ссылка) Тогда
		СсылкаОбъекта = Шаблон.Ссылка;
	Иначе
		СсылкаОбъекта = Шаблон.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон.Ссылка);
			СсылкаОбъекта = МенеджерШаблона.ПолучитьСсылку();
			Шаблон.УстановитьСсылкуНового(СсылкаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если Шаблон.ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для Каждого Эл Из Шаблон.ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если Шаблон.ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для Каждого Эл Из Шаблон.ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для Каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.Изменение = Эл.Изменение Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;			
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	Шаблон.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление для списка шаблонов.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление динамического списка
//                       с шаблонами процессов.
//
Процедура УстановитьУсловноеОформлениеСпискаШаблонов(УсловноеОформление) Экспорт
	
	// помеченные на удаление шаблоны
	ПредставлениеЭлемента = "Шаблон помечен на удаление (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ДоступностьШаблоновПроцессов

// Настраивает отображение области доступности шаблонов.
//
// Параметры:
//  Форма - Управляемаяформа - карточка шаблона процесса.
//
Процедура НастроитьОбластьДоступностиШаблонов(форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона) Тогда
		
		СтрокиЗаголовка = Новый Массив;
		СтрокиЗаголовка.Добавить(НСтр("ru = 'Требуется проверка действия ('; en = 'Validation of action required ('"));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'проверить'; en = 'Validate'"),,,,"Проверить"));
		СтрокиЗаголовка.Добавить(НСтр("ru = ').'; en = ').'"));
		
		Форма.Элементы.ДекорацияНедоступенДляЗапуска.Заголовок =
			Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		СтрокиЗаголовка = Новый Массив;
		СтрокиЗаголовка.Добавить(НСтр("ru = 'В действии не заполнены '; en = 'The action requires '"));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'поля для автоматического запуска'; en = 'fields for automatic start'"),,,,"ОбязательныеПоля"));
		СтрокиЗаголовка.Добавить(НСтр("ru = '.'; en = '.'"));
		
		Форма.Элементы.ДекорацияРучнойЗапуск.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		Форма.Элементы.ДекорацияРучнойИАвтоматическийЗапуск.Заголовок = 
			НСтр("ru = 'Действие настроено корректно.'; en = 'Action is configured correctly.'");
		
	КонецЕсли;
	
	// Настроим отображение группы доступности шаблона.
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеГруппыДоступности(Форма);
	
КонецПроцедуры

// Возвращает доступность шаблона процесса.
//
// Парамтеры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса - сслка на шаблон процесса.
//
// Возвращаемое значение:
//  Структура
//   * АвтоматическийЗапуск - Булево - признак доступности автоматического запуска процессов по шаблону.
//   * РучнойЗапуск - Булево -  признак доступности ручного запуска процессов по шаблону.
//
Функция ДоступностьШаблона(Шаблон) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АвтоматическийЗапуск", Ложь);
	Результат.Вставить("РучнойЗапуск", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступностьШаблоновПроцессов.АвтоматическийЗапуск,
		|	ДоступностьШаблоновПроцессов.РучнойЗапуск
		|ИЗ
		|	РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
		|ГДЕ
		|	ДоступностьШаблоновПроцессов.Шаблон = &Шаблон";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает доступность шаблона процесса, обновляя при этом доступность зависимых шаблонов.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса - сслка на шаблон процесса.
//  АвтоматическийЗапуск - Булево - признак доступности автоматического запуска процессов по шаблону.
//  РучнойЗапуск - Булево - признак доступности ручного запуска процессов по шаблону.
//
Процедура ЗаписатьДоступностьШаблона(Шаблон, АвтоматическийЗапуск, РучнойЗапуск) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ДоступностьШаблоновПроцессов.СоздатьМенеджерЗаписи();
	Запись.Шаблон = Шаблон;
	Запись.АвтоматическийЗапуск = АвтоматическийЗапуск;
	Запись.РучнойЗапуск = РучнойЗапуск;
	
	Запись.Записать();
	
	ОбновитьДоступностьЗависимыхШаблонов(Шаблон);
	
КонецПроцедуры

// Помещает доступность шаблона процесса в карточку.
//
// Параметры:
//  Форма - Управляемаяформа - карточка шаблона процесса.
//
Процедура ПрочитатьДоступностьШаблона(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоДействиеКомплексногоПроцесса(Форма.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьШаблона = ДоступностьШаблона(Форма.Объект.Ссылка);
	
	Форма.ДоступенРучнойЗапускПоШаблону = ДоступностьШаблона.РучнойЗапуск;
	Форма.ДоступенАвтоматическийЗапускПоШаблону = ДоступностьШаблона.АвтоматическийЗапуск;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(Форма);
	
КонецПроцедуры

// Записывает доступность шаблона процесса из карточки.
//
// Параметры:
//  ШаблонОбъект - СправочникОбъект.<ИмяШаблонаПроцесса> - объект шаблона процесса.
//  Форма - Управляемаяформа - карточка шаблона процесса.
//
Процедура ЗаписатьДоступностьШаблонаИзФормы(ШаблонОбъект, Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(ШаблонОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоДействиеКомплексногоПроцесса(ШаблонОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДоступенРучнойЗапускПоШаблону = Истина;
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	Форма.ДоступенАвтоматическийЗапускПоШаблону = СписокНезаполненныхПолей.Количество() = 0;
	
	ЗаписатьДоступностьШаблона(
		ШаблонОбъект.Ссылка,
		Форма.ДоступенАвтоматическийЗапускПоШаблону,
		Форма.ДоступенРучнойЗапускПоШаблону);
		
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(Форма);
	
КонецПроцедуры

// Определяем доступность автоматического запуска шаблона комплексного процесса
// по доступности шаблонов подчиненных действий.
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов - шаблон комплексного процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступностьАвтоматическогоЗапускаШаблонаКомплексногоПроцесса(Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АвтоматическийЗапуск = Ложь;
	
	СхемаШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "Схема");
	Если ЗначениеЗаполнено(СхемаШаблона) Тогда
		
		// Алгоритм определения доступности соответствует
		// алгоритму проверки заполнения настроек схемы:
		// Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы.
		
		// Определим возможность автоматического запуска подчинненных шаблонов.
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СхемыКомплексныхПроцессовПараметрыДействий.ШаблонПроцесса КАК Шаблон
			|ПОМЕСТИТЬ ШаблоныПодчиненныДействий
			|ИЗ
			|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов КАК СхемыКомплексныхПроцессов
			|		ПО СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = СхемыКомплексныхПроцессов.Ссылка
			|ГДЕ
			|	СхемыКомплексныхПроцессов.ВладелецСхемы = &Шаблон
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ДоступностьШаблоновПроцессов.АвтоматическийЗапуск) КАК АвтоматическийЗапуск
			|ИЗ
			|	РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныПодчиненныДействий КАК ШаблоныПодчиненныДействий
			|		ПО ДоступностьШаблоновПроцессов.Шаблон = ШаблоныПодчиненныДействий.Шаблон";
			
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		Выборка = Запрос.Выполнить().Выбрать();
		АвтоматическийЗапускПоНастройкамПодчиненныхШаблонов = Ложь;
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АвтоматическийЗапуск) Тогда
			АвтоматическийЗапускПоНастройкамПодчиненныхШаблонов = Выборка.АвтоматическийЗапуск;
		КонецЕсли;
				
		// Определим возможность запуска по остальным настройкам схемы.
		
		СхемаОбъект = СхемаШаблона.ПолучитьОбъект();
		ГрафическаяСхема = СхемаОбъект.Схема.Получить();
		
		ИмяЭлементаСтарта = СхемаОбъект.ЭлементыСхемы.Найти(
			Перечисления.ТипыЭлементовСхемыКомплексногоПроцесса.Старт, "Тип").Имя;
		ИменаДействийПослеСтарта = Новый Массив;
		Справочники.СхемыКомплексныхПроцессов.НайтиИменаПоследующихДействий(
			ИменаДействийПослеСтарта, ИмяЭлементаСтарта, СхемаОбъект);
		ОтложенныеДействияСразуПослеСтарта = Новый Массив;
		
		// Проверим наличие шаблонов в параметрах действий
		НетШаблоновВПараметрахДействий = Ложь;
		Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
			
			Если Не ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
				НетШаблоновВПараметрахДействий = Истина;
				Прервать;
			КонецЕсли;
			
			Если ИменаДействийПослеСтарта.Найти(ПараметрыДействия.Имя) <> Неопределено Тогда
				СрокОтложенногоСтарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ПараметрыДействия.ШаблонПроцесса, "СрокОтложенногоСтарта");
				Если ЗначениеЗаполнено(СрокОтложенногоСтарта) Тогда
					ОтложенныеДействияСразуПослеСтарта.Добавить(ПараметрыДействия.ШаблонПроцесса);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверяем настройки отложенного старта у первых действий (если они есть).
		// Если все действий с отложенным стартом, то выдаем ошибку.
		ВсеДействияПослеСтартаОтложены = Ложь;
		Если СхемаОбъект.ПараметрыДействий.Количество() > 0
			И ОтложенныеДействияСразуПослеСтарта.Количество()
				= ИменаДействийПослеСтарта.Количество() Тогда
			
			ВсеДействияПослеСтартаОтложены = Истина;
		КонецЕсли;
		
		// Проверим заполнения условий.
		ЕстьУсловияБезНастроек = Ложь;
		Для Каждого ПараметрыУсловия Из СхемаОбъект.ПараметрыУсловий Цикл
			
			НастройкаУсловия = ПараметрыУсловия.НастройкиУсловия.Получить();
			Если НастройкаУсловия = Неопределено
				Или НастройкаУсловия.Отбор.Элементы.Количество() = 0 Тогда
				
				ЕстьУсловияБезНастроек = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Проверяем заполнение обработок.
		ЕстьОбработкиБезКода = Ложь;
		Для Каждого ПараметрыОбработки Из СхемаОбъект.ПараметрыОбработок Цикл
			Если ПараметрыОбработки.ИдентификаторСкрипта = УникальныйИдентификаторПустой() Тогда
				ЕстьОбработкиБезКода = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Вычислим возможность Автоматического запуска процессов по схеме.
		АвтоматическийЗапуск = АвтоматическийЗапускПоНастройкамПодчиненныхШаблонов
			И Не НетШаблоновВПараметрахДействий
			И Не ВсеДействияПослеСтартаОтложены
			И Не ЕстьУсловияБезНастроек
			И Не ЕстьОбработкиБезКода;
		
	Иначе
		
		// Для комплексных процессов без схемы доступность автоматического запуска определяется
		// доступностью его подчиненных действий.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса КАК Шаблон
			|ПОМЕСТИТЬ ШаблоныПодчиненныДействий
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &Шаблон
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ДоступностьШаблоновПроцессов.АвтоматическийЗапуск) КАК АвтоматическийЗапуск
			|ИЗ
			|	РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныПодчиненныДействий КАК ШаблоныПодчиненныДействий
			|		ПО ДоступностьШаблоновПроцессов.Шаблон = ШаблоныПодчиненныДействий.Шаблон";
		
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АвтоматическийЗапуск) Тогда
			АвтоматическийЗапуск = Выборка.АвтоматическийЗапуск;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АвтоматическийЗапуск;
	
КонецФункции

// Проверяет доступность шаблона и помещает результат в реквизиты
// ДоступенРучнойЗапускПоШаблону, ДоступенАвтоматическийЗапускПоШаблону карточки.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка шаблона.
//
Процедура ПроверитьДоступностьШаблона(Форма) Экспорт
	
	Форма.ДоступенРучнойЗапускПоШаблону = Истина;
	
	ШаблонОбъект = ДанныеФормыВЗначение(
		Форма.Объект, Тип("СправочникОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	Форма.ДоступенАвтоматическийЗапускПоШаблону = СписокНезаполненныхПолей.Количество() = 0;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(Форма);
	
КонецПроцедуры

// Выводить сообщения пользователю в карточке шаблона с привязкой к незаполненным полям
// необходимым для старта процессов по шаблону.
//
// Параметры:
//  Форма - УправляемяФорма - карточка шаблона.
//
Процедура ПоказатьНезаполненныеПоляНеобходимыеДляСтарта(Форма) Экспорт
	
	ШаблонОбъект = ДанныеФормыВЗначение(
		Форма.Объект, Тип("СправочникОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	
	ШаблонСообщения = НСтр("ru = 'Не заполнено обязательное поле ""%1"".'; en = 'Required field ""%1"" is not filled in.'");
	
	Для Каждого НезаполненноеПоле Из СписокНезаполненныхПолей Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, НезаполненноеПоле),,
			"Объект." + НезаполненноеПоле);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьШаблоныПоДокументу(Документ, Тип, ТолькоНастроенные = Истина) Экспорт
	
	ШаблоныПоДокументу = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат ШаблоныПоДокументу;
	КонецЕсли;	
	
	ТипПредмета = ТипЗнч(Документ);
	
	Если ТипПредмета <> Тип("СправочникСсылка.ВходящиеДокументы") 
		И ТипПредмета <> Тип("СправочникСсылка.ИсходящиеДокументы") 
		И ТипПредмета <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Возврат ШаблоныПоДокументу;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначенияДокументооборот.
		ЗначенияРеквизитовОбъектаВПривилегированномРежиме(Документ, "ВидДокумента, Организация");
	ВидДокумента = РеквизитыДокумента.ВидДокумента;
	Организация = РеквизитыДокумента.Организация;
	
	МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
	
	Запрос = Новый Запрос;
	Если Тип = "ШаблоныИсполнения" 
		Или Тип = "ШаблоныОзнакомления" 	
		Или Тип = "ШаблоныПоручения"
		Или Тип = "ШаблоныРассмотрения"
		Или Тип = "ШаблоныРегистрации"
		Или Тип = "ШаблоныСогласования"
		Или Тип = "ШаблоныПриглашения"
		Или Тип = "ШаблоныУтверждения"
		Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
			|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие,
			|	НастройкаШаблоновБизнесПроцессов.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%1 КАК ШаблоныПроцессов
			|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ДоступностьШаблоновПроцессов.Шаблон
			|ГДЕ
			|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидДокумента)
			|	И ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ
			|	И ДоступностьШаблоновПроцессов.РучнойЗапуск";
			
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, Тип);
	
	Иначе
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
			|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие,
			|	НастройкаШаблоновБизнесПроцессов.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныПроцессов
			|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ДоступностьШаблоновПроцессов.Шаблон
			|ГДЕ
			|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидДокумента)
			|	И ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ
			|	И ШаблоныПроцессов.ТипШаблона = &ТипШаблона
			|	И ДоступностьШаблоновПроцессов.РучнойЗапуск";
		Запрос.УстановитьПараметр("ТипШаблона", Тип);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидДокумента", МассивВидовДокумента);
	
	Выборка = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст
			+ " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организации)
				|ИТОГИ ПО
				|	Организация";
		
		Организации = Новый Массив;
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
		Если ЗначениеЗаполнено(Организация) Тогда
			Организации.Добавить(Организация);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаШаблоновПоПустойОрганизации = Неопределено;
			ВыборкаШаблоновПоЗаполненнойОрганизации = Неопределено;
			Пока ВыборкаПоОрганизациям.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПоОрганизациям.Организация) Тогда
					ВыборкаШаблоновПоЗаполненнойОрганизации = ВыборкаПоОрганизациям.Выбрать();
				Иначе
					ВыборкаШаблоновПоПустойОрганизации = ВыборкаПоОрганизациям.Выбрать();
				КонецЕсли;
			КонецЦикла;
			Если ВыборкаШаблоновПоЗаполненнойОрганизации <> Неопределено
				И ВыборкаШаблоновПоЗаполненнойОрганизации.Количество() > 0 Тогда
				
				Выборка = ВыборкаШаблоновПоЗаполненнойОрганизации;
			Иначе
				Выборка = ВыборкаШаблоновПоПустойОрганизации;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка <> Неопределено Тогда
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСУсловиямиМаршрутизации.
					ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Документ, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоДокументу.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		
		Если Тип = "ШаблоныИсполнения" 
			Или Тип = "ШаблоныОзнакомления" 	
			Или Тип = "ШаблоныПоручения"
			Или Тип = "ШаблоныРассмотрения"
			Или Тип = "ШаблоныРегистрации"
			Или Тип = "ШаблоныСогласования"
			Или Тип = "ШаблоныПриглашения"
			Или Тип = "ШаблоныУтверждения"
			Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник." + Тип + " КАК Шаблоны
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|	ПО Шаблоны.Ссылка = ДоступностьШаблоновПроцессов.Шаблон
			|ГДЕ
			|	НЕ Шаблоны.ШаблонВКомплексномПроцессе
			|	И ДоступностьШаблоновПроцессов.РучнойЗапуск
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ШаблоныСоставныхБизнесПроцессов.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|	ПО Шаблоны.Ссылка = ДоступностьШаблоновПроцессов.Шаблон
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = &ТипШаблона
			|	И НЕ ШаблоныСоставныхБизнесПроцессов.ШаблонВКомплексномПроцессе
			|	И ДоступностьШаблоновПроцессов.РучнойЗапуск
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = ШаблоныСоставныхБизнесПроцессов.Ссылка)";
			
			Запрос.УстановитьПараметр("ТипШаблона", Тип);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Документ, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ШаблоныПоДокументу;
	
КонецФункции

Функция ДоступностьПоШаблону(Объект) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	БизнесПроцесс = Объект.Ссылка;
	Шаблон = Объект.Шаблон;
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если ЗначениеЗаполнено(БизнесПроцесс) И ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда 
			ВедущаяЗадачаОбъект = Объект.ВедущаяЗадача.ПолучитьОбъект();
			Если ВедущаяЗадачаОбъект <> Неопределено Тогда
				БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВедущаяЗадача, "БизнесПроцесс");
				Шаблон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "Шаблон");
				ПредметыДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БизнесПроцесс, ТипыДокументов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ПредметыДокументы.Количество() = 0 Тогда    
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВсеДанные.ВидДокумента,
		|	ВсеДанные.Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВнутренниеДокументы.ВидДокумента КАК ВидДокумента,
		|		ВнутренниеДокументы.Организация КАК Организация
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВходящиеДокументы.ВидДокумента,
		|		ВходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|	ГДЕ
		|		ВходящиеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсходящиеДокументы.ВидДокумента,
		|		ИсходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|	ГДЕ
		|		ИсходящиеДокументы.Ссылка В(&ПредметыДокументы)) КАК ВсеДанные";
	
	Запрос.УстановитьПараметр("ПредметыДокументы", ПредметыДокументы);
	
	Результат = Запрос.Выполнить();
	
	ВидыДокументов = Результат.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	
	МассивВидовДокументаПолный = Новый Массив;
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		
		МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
		Для Каждого ВидДокументаМассива Из МассивВидовДокумента Цикл
			МассивВидовДокументаПолный.Добавить(ВидДокументаМассива);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидыДокументов)
	|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон";
	
	Запрос.УстановитьПараметр("ВидыДокументов", МассивВидовДокументаПолный);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Организации = Новый Массив;
			Организации.Добавить(Справочники.Организации.ПустаяСсылка());
			Запрос.УстановитьПараметр("Организации", Организации);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ЕстьЗапрещеноИзменение = Ложь;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗапрещеноИзменение Тогда 
			ЕстьЗапрещеноИзменение = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьЗапрещеноИзменение Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьПоШаблонуСоставногоБизнесПроцесса(Шаблон, БизнесПроцесс) Экспорт
	
	Если Шаблон.ШаблонВКомплексномПроцессе И ЗначениеЗаполнено(Шаблон.ИсходныйШаблон) Тогда
		БизнесПроцесс.Шаблон = Шаблон.ИсходныйШаблон;
	ИначеЕсли НЕ Шаблон.ШаблонВКомплексномПроцессе Тогда
		БизнесПроцесс.Шаблон = Шаблон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон.НаименованиеБизнесПроцесса) Тогда 
		БизнесПроцесс.Наименование = Шаблон.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(БизнесПроцесс.Наименование), БизнесПроцесс.Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И Шаблон.ДобавлятьНаименованиеПредмета Тогда
			БизнесПроцесс.Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон.Автор) Тогда 
		БизнесПроцесс.Автор = Шаблон.Автор;
	КонецЕсли;
	
	БизнесПроцесс.СрокИсполненияПроцесса = Шаблон.СрокИсполненияПроцесса;
	
	МДРеквизиты = БизнесПроцесс.Метаданные().Реквизиты;
	Для Каждого Строка Из Шаблон.Шаблоны Цикл
		МДРеквизит = МДРеквизиты.Найти(Строка.Реквизит);
		Если МДРеквизит <> Неопределено Тогда 
			БизнесПроцесс[МДРеквизит.Имя] = Строка.Шаблон;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Шаблон, БизнесПроцесс);
	
КонецПроцедуры

// Возвращает имя процесса, которое будет установлено в случае, если в шаблоне оно не указано
Функция НаименованиеПроцессаПоУмолчанию(ИмяСправочника, Шаблон = Неопределено) Экспорт
	
	ИмяПроцесса = "";
	
	Если ИмяСправочника = "ШаблоныИсполнения" Тогда
		ИмяПроцесса = НСтр("ru = 'Исполнить '; en = 'Perform '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныКомплексныхБизнесПроцессов" Тогда
		ИмяПроцесса = НСтр("ru = 'Обработка '; en = 'Processing '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныОзнакомления" Тогда
		ИмяПроцесса = НСтр("ru = 'Ознакомиться '; en = 'Examine '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныПоручения" Тогда
		ИмяПроцесса = НСтр("ru = 'Выполнить '; en = 'Execute '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныПриглашения" Тогда
		ИмяПроцесса = НСтр("ru = 'Принять участие '; en = 'Attend '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныРассмотрения" Тогда
		ИмяПроцесса = НСтр("ru = 'Рассмотреть '; en = 'Review '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныРегистрации" Тогда
		ИмяПроцесса = НСтр("ru = 'Зарегистрировать '; en = 'Register '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныСогласования" Тогда
		ИмяПроцесса = НСтр("ru = 'Согласовать '; en = 'Approve '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныСоставныхБизнесПроцессов" Тогда
		
		Если Шаблон <> Неопределено Тогда
			
			ТипШаблона = Шаблон.ТипШаблона;
			
			Если ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
				ИмяПроцесса = НСтр("ru = 'Обработка внутреннего '; en = 'Process internal '");
				
			ИначеЕсли ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
				ИмяПроцесса = НСтр("ru = 'Обработка входящего '; en = 'Process incoming '");
				
			ИначеЕсли ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
				ИмяПроцесса = НСтр("ru = 'Обработка исходящего '; en = 'Process outgoing '");
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "ШаблоныУтверждения" Тогда
		Если Шаблон <> Неопределено
			И Шаблон.ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
				ИмяПроцесса =  НСтр("ru = 'Подписать'; en = 'Sign'");
		Иначе
			ИмяПроцесса =  НСтр("ru = 'Утвердить'; en = 'Confirm'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяПроцесса;
	
КонецФункции

// Выполняет начальное заполнение
Процедура НачальноеЗаполнениеШаблона(Шаблон, ДанныеЗаполнения) Экспорт
	
	МетаданныеШаблона = Шаблон.Метаданные();
	РеквизитыШаблона = МетаданныеШаблона.Реквизиты;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ТипШаблона") Тогда
		Шаблон.ТипШаблона = ДанныеЗаполнения.ТипШаблона;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("НаименованиеБизнесПроцесса") <> Неопределено Тогда
		Шаблон.НаименованиеБизнесПроцесса = НаименованиеПроцессаПоУмолчанию(МетаданныеШаблона.Имя, Шаблон);
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
		Шаблон.ДобавлятьНаименованиеПредмета = Истина;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("Важность") <> Неопределено Тогда
		Шаблон.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Шаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
КонецПроцедуры

Функция ПолучитьПустуюСсылкуПроцессаПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ШаблонБизнесПроцесса).ИмяПроцесса(ШаблонБизнесПроцесса);
	Возврат БизнесПроцессы[ИмяТипаПроцесса].ПустаяСсылка();
		
КонецФункции

// Получает заголовочную часть сводки по шаблону
Функция ПолучитьОбщуюЧастьОписанияШаблона(Ссылка) Экспорт
	
	Результат = "";
	
	Результат = Результат 
		+ НСтр("ru = 'Шаблон процесса: '; en = 'Process template: '") 
		+ Метаданные.БизнесПроцессы[ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ИмяПроцесса(Ссылка)].Синоним
		+ Символы.ПС;
	
	Если ЗначениеЗаполнено(Ссылка.Наименование) Тогда
		Результат = Результат + НСтр("ru = 'Наименование шаблона: '; en = 'Template name: '") + Ссылка.Наименование + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Комментарий) Тогда
		Результат = Результат + НСтр("ru = 'Комментарий: '; en = 'Comment: '") + Ссылка.Комментарий + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = Результат + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УстановкаПравНаШаблоны

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектДоступа.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПротокола = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектДоступа.КомплексныйПроцесс) Тогда
		
		// Заполнение не требуется
		СтрокиПротокола.Добавить("Права процесса");
		
	ИначеЕсли ЗначениеЗаполнено(ОбъектДоступа.ВладелецШаблона) Тогда
		
		// Дескрипторы копируются от шаблона комплексного процесса.
		ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаОтВладельца(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.ВладелецШаблона);
		
		СтрокиПротокола.Добавить("Права шаблона-владельца");
		
	Иначе
		
		РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ОбъектДоступа.Ссылка);
		Если РабочаяГруппа.Количество() > 0 Тогда
			
			// Рабочая группа
			ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаПоРабочейГруппе(
				ОбъектДоступа, ТаблицаДескрипторов);
			
		Иначе
			
			// Все пользователи
			ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
				ОбъектДоступа, ТаблицаДескрипторов, Справочники.РабочиеГруппы.ВсеПользователи, Ложь);
			
			СтрокиПротокола.Добавить("Все пользователи");
			
		КонецЕсли;
		
		// Ответственный
		Если ЗначениеЗаполнено(ОбъектДоступа.Ответственный) Тогда
			
			ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
				ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Ответственный, Истина);
			
			СтрокиПротокола.Добавить("Ответственный");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		Для Каждого СтрПротокола Из СтрокиПротокола Цикл
			
			Если СтрПротокола = "Права процесса" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.КомплексныйПроцесс, НСтр("ru = 'Права процесса'; en = 'Process permissions'"));
			ИначеЕсли СтрПротокола = "Права шаблона-владельца" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.ВладелецШаблона, НСтр("ru = 'Права шаблона-владельца'; en = 'Owner-template permissions'"));
			ИначеЕсли СтрПротокола = "Все пользователи" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					Справочники.РабочиеГруппы.ВсеПользователи, НСтр("ru = 'Все пользователи'; en = 'All users'"));
			ИначеЕсли СтрПротокола = "Ответственный" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Ответственный, НСтр("ru = 'Ответственный'; en = 'Responsible'"));
			КонецЕсли;
			
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_АвтоПодстановкиДляПроцессов

// Возвращает список значений доступных функций автоподстановки исполнителей процессов
//
// Параметры:
//   ИменаПредметовДляФункций - массив - массив имен предметов для функций автоподстановки
//   ВключатьНедоступные - булево - признак добавления в список недоступных функций автоподстановки
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокДоступныхФункций(ИменаПредметовДляФункций = Неопределено, ВключатьНедоступные = Истина, 
	ЯзыкПоУмолчанию = Неопределено) Экспорт
	
	ДоступныеФункции = ШаблоныБизнесПроцессовПереопределяемый.ПолучитьСписокДоступныхФункций(
		ИменаПредметовДляФункций);
	
	Если ЯзыкПоУмолчанию  = Неопределено Тогда
		Языки = Метаданные.Языки;
	Иначе
		Языки = Новый Массив;
		Языки.Добавить(ЯзыкПоУмолчанию);
	КонецЕсли;
	
	Для Каждого Язык Из Языки Цикл
		
		КодЯзыка = Язык.КодЯзыка;
		
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторБизнесПроцесса(Объект)", 							 НСтр("ru = 'Автор процесса'; en = 'Author of process'", КодЯзыка));
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораБизнесПроцесса(Объект)", НСтр("ru = 'Непосредственный руководитель автора процесса'; en = 'Line manager of process author'", КодЯзыка));
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиАвтораБизнесПроцесса(Объект)", 			 НСтр("ru = 'Все руководители автора процесса'; en = 'All managers of author of process'", КодЯзыка));
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеАвтораБизнесПроцесса(Объект)", 				 НСтр("ru = 'Все подчиненные автора процесса'; en = 'All subordinates of author of process'", КодЯзыка));
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиАвтораБизнесПроцесса(Объект)", 				 	 НСтр("ru = 'Все коллеги автора процесса'; en = 'All colleagues of author of process'", КодЯзыка));
		
		Если ИменаПредметовДляФункций <> Неопределено Тогда
			Если ИменаПредметовДляФункций.Количество() > 0 Тогда
				Для Каждого ИмяПредмета Из ИменаПредметовДляФункций Цикл
					
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторДокумента(Объект, ИмяПредмета)", 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Автор документа'; en = '%1.Author of the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораДокумента(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель автора документа'; en = '%1.Line manager of the author of the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиАвтораДокумента(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители автора документа'; en = '%1.All managers of the author of the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеАвтораДокумента(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные автора документа'; en = '%1.All subordinates of the author of the document'", КодЯзыка),Строка(ИмяПредмета)));
					
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиАвтораДокумента(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги автора документа'; en = '%1.All colleagues of the author of the document'", КодЯзыка),Строка(ИмяПредмета)));
					
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ОтветственныйЗаДокумент(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Ответственный за документ'; en = '%1.Responsible for the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительОтветственногоЗаДокумент(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель ответственного за документ'; en = '%1.Line manager of the responsible for document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители ответственного за документ'; en = '%1.All managers of the responsible for the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеОтветственногоЗаДокумент(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные ответственного за документ'; en = '%1.All subordinates of the responsible of the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги ответственного за документ'; en = '%1.All colleagues of the responsible for the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеСогласовавшиеДокумент(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все согласовавшие документ'; en = '%1.All who approved the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительОрганизации(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Руководитель организации'; en = '%1.Head of the company'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АдресатДокумента(Объект, ИмяПредмета)", 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Адресат документа'; en = '%1.Addressee of the document'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.УчастникиМероприятия(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Участники мероприятия'; en = '%1.Attendees of the meeting'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ПредседательМероприятия(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Председатель мероприятия'; en = '%1.Chairman of the meeting'", КодЯзыка),Строка(ИмяПредмета)));
						
					ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.СекретарьМероприятия(Объект, ИмяПредмета)",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Секретарь мероприятия'; en = '%1.Secretary of the meeting'", КодЯзыка),Строка(ИмяПредмета)));
						
				КонецЦикла;
			ИначеЕсли ВключатьНедоступные Тогда
				СтрокаИмениПредмета = НСтр("ru='Предмет'; en = 'Subject'", КодЯзыка);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторДокумента(Объект, ИмяПредмета)", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Автор документа'; en = '%1.Author of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель автора документа'; en = '%1.Line manager of the author of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители автора документа'; en = '%1.All managers of the author of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные автора документа'; en = '%1.All subordinates of the author of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги автора документа'; en = '%1.All colleagues of the author of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ОтветственныйЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Ответственный за документ'; en = '%1.Responsible for the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель ответственного за документ'; en = '%1.Line manager of the responsible for document'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители ответственного за документ'; en = '%1.All managers of the responsible for the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные ответственного за документ'; en = '%1.All subordinates of the responsible of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги ответственного за документ'; en = '%1.All colleagues of the responsible for the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеСогласовавшиеДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все согласовавшие документ'; en = '%1.All who approved the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительОрганизации(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Руководитель организации'; en = '%1.Head of the company'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АдресатДокумента(Объект, ИмяПредмета)", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Адресат документа'; en = '%1.Addressee of the document'", КодЯзыка),СтрокаИмениПредмета), Истина);
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.УчастникиМероприятия(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Участники мероприятия'; en = '%1.Attendees of the meeting'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ПредседательМероприятия(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Председатель мероприятия'; en = '%1.Chairman of the meeting'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.СекретарьМероприятия(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Секретарь мероприятия'; en = '%1.Secretary of the meeting'", КодЯзыка),СтрокаИмениПредмета), Истина);
				
			КонецЕсли;
		КонецЕсли;
		
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиПредприятия(Объект)", 			 НСтр("ru = 'Все руководители предприятия'; en = 'All managers of enterprise'", КодЯзыка));
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПользователиИнформационнойБазы(Объект)", 	 НСтр("ru = 'Все пользователи информационной базы'; en = 'All users of infobase'", КодЯзыка));
		
		ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительИсполнителя(Объект)", 	 НСтр("ru = 'Непосредственный руководитель исполнителя'; en = 'Line manager of performer'", КодЯзыка));
		
	КонецЦикла;
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Возвращает значение автоподстановки для процесса
//
// Параметры:
//	Автоподстановка - Строка - представление автоподстановки в виде строки
//	Объект - БизнесПроцессОбъект.<Тип бизнес-процесса> - процесс объект,
//           для которого вычисляется автоподстановка.
//
// Возвращаемое значение:
//   СправчоникСсылка.Пользователи
//   Массив
//     СправчоникСсылка.Пользователи.
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, Объект) Экспорт
	
	ФункцияАвтоподстановки = "";
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	СписокФункций = ПолучитьСписокДоступныхФункций(ИменаПредметов);
	
	Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		Если СписокФункций[Инд].Представление = Автоподстановка Тогда 
			ФункцияАвтоподстановки = СписокФункций[Инд].Значение;
			ИмяПредмета = Мультипредметность.ПолучитьИмяПредметаПоФункцииАвтоподстановки(Автоподстановка);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ФункцияАвтоподстановки = "" Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена автоподстановка %1'; en = 'Auto-substitution %1 is not defined'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РезультатФункции = Неопределено;
	Попытка
		Выполнить("РезультатФункции = " + ФункцияАвтоподстановки);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'; en = 'Error performing auto-substitution %1: %2'"), Автоподстановка, ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(РезультатФункции)) Или
		 (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.ПолныеРоли") И ЗначениеЗаполнено(РезультатФункции)) Или
		 (ТипЗнч(РезультатФункции) = Тип("Структура")) Или
		 (ТипЗнч(РезультатФункции) = Тип("Массив") И РезультатФункции.Количество() > 0) Тогда 
		Возврат РезультатФункции;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдены исполнители для автоподстановки ""%1"".
					|Обратитесь к администратору.';
					|en = 'Performers not found for auto-substitution ""%1"". 
					|Contact the administrator.'"),
			Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

///////////////////////////////////////
// Общие автоподстановки

// Возвращает всех руководителей предприятия
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиПредприятия(БизнесПроцессОбъект) Экспорт 
	
	МассивРуководителей = Новый Массив;
	
	Выборка = Справочники.СтруктураПредприятия.Выбрать();
	Пока Выборка.Следующий() Цикл
		Руководитель = Выборка.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) 
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Руководитель, "Недействителен")
			И МассивРуководителей.Найти(Руководитель) = Неопределено Тогда
			МассивРуководителей.Добавить(Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех пользователей информационной базы
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПользователиИнформационнойБазы(БизнесПроцессОбъект) Экспорт 
	
	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Недействителен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда 
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				МассивПользователей.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПользователей;
	
КонецФункции

///////////////////////////////////////
// Автоподстановки для задач

// Возвращает непосредственного руководителя исполнителя задачи.
// Для роли - возвращает руководителя одного из исполнителей роли.
//
// Параметры:
//  Объект - ЗадачаСсылка.ЗадачаИсполнителя - Задача.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Непосредственный руководитель исполнителя задачи.
//
Функция НепосредственныйРуководительИсполнителя(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Исполнитель = Неопределено;
	ТипИсполнитель = ТипЗнч(Объект.ТекущийИсполнитель);
	Если ТипИсполнитель = Тип("СправочникСсылка.Пользователи") Тогда
		Исполнитель = Объект.ТекущийИсполнитель;
	ИначеЕсли ТипИсполнитель = Тип("СправочникСсылка.ПолныеРоли") Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсполнителиЗадач.Исполнитель
			|ИЗ
			|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя");
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Запрос.Параметры.Вставить("РольИсполнителя", Объект.ТекущийИсполнитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Исполнитель = Выборка.Исполнитель;
		КонецЦикла;
	КонецЕсли;
	
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Исполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
	
	Если Руководитель <> Исполнитель Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> Исполнитель Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции

///////////////////////////////////////
// Автоподстановки для процессов

// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция АвторБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Возврат БизнесПроцессОбъект.Автор;

КонецФункции

// Возвращает непосредственного руководителя процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса>
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция НепосредственныйРуководительАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт 
	
	АвторБизнесПроцесса = БизнесПроцессОбъект.Автор;
	
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
	
	Если Руководитель <> АвторБизнесПроцесса Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> АвторБизнесПроцесса Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции	

// Возвращает всех руководителей атвора процесса с учетом
// иерархии подразделений.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	АвторБизнесПроцесса = БизнесПроцессОбъект.Автор;
	МассивРуководителей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивРуководителей;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Подразделение = Выборка.Подразделение;
	
	Пока ЗначениеЗаполнено(Подразделение) Цикл
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Руководитель, Руководитель.Недействителен, Родитель");
		Руководитель = РеквизитыПодразделения.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Руководитель <> АвторБизнесПроцесса Тогда
			Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;
		КонецЕсли;
		Подразделение = РеквизитыПодразделения.Родитель;
		
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех подчиненных автора процесса с учетом иерархии подразделений
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПодчиненныеАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен";
	Запрос.УстановитьПараметр("Руководитель", БизнесПроцессОбъект.Автор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// Возвращает всех коллег автора процесса, в том числе и руководителя
// автора процесса.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеКоллегиАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователяхДокументооборот.Подразделение
		|ПОМЕСТИТЬ ПодразделениеПользователя
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПользователяхДокументооборот.Пользователь КАК Пользователь
		|ИЗ
		|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователяхДокументооборот.Подразделение
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь <> &Пользователь
		|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен";
	Запрос.УстановитьПараметр("Пользователь", БизнесПроцессОбъект.Автор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

///////////////////////////////////////
// Автоподстановки для документов

// Возвращает автора документа
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция АвторДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Подготовил");
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
			
	КонецЕсли;
		
КонецФункции

// Возвращает адресата документа
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция АдресатДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
		ЕстьАдресат = Ложь;
		Если ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ЕстьАдресат = Истина;
		ИначеЕсли ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ЕстьАдресат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "ВидДокумента.ВестиУчетПоАдресатам");
		КонецЕсли;	
		
		Если Не ЕстьАдресат Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета));
		КонецЕсли;
	
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Адресат");
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
			
	КонецЕсли;
		
КонецФункции

// Возвращает непосредственного руководителя автора документа
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса>
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция НепосредственныйРуководительАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Подготовил");
	
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
		
	Если Руководитель <> АвторДокумента Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> АвторДокумента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции	

// Возвращает всех руководителей автора документа с учетом
// иерархии подразделений.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	МассивРуководителей = Новый Массив;
	АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Подготовил");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивРуководителей;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Подразделение = Выборка.Подразделение;
	
	Пока ЗначениеЗаполнено(Подразделение) Цикл
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Руководитель, Руководитель.Недействителен, Родитель");
		Руководитель = РеквизитыПодразделения.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Руководитель <> АвторДокумента Тогда
			Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;
		КонецЕсли;
		Подразделение = РеквизитыПодразделения.Родитель;
		
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех подчиненных автора документа с учетом иерархии подразделений
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПодчиненныеАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Подготовил");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен";
	Запрос.УстановитьПараметр("Руководитель", АвторДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// Возвращает всех коллег автора документа, в том числе и руководителя
// автора документа.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеКоллегиАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Подготовил");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователяхДокументооборот.Подразделение
		|ПОМЕСТИТЬ ПодразделениеПользователя
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПользователяхДокументооборот.Пользователь КАК Пользователь
		|ИЗ
		|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователяхДокументооборот.Подразделение
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь <> &Пользователь
		|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен";
	Запрос.УстановитьПараметр("Пользователь", АвторДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// Возвращает ответственного за документ
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция ОтветственныйЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Или 
		 ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Или 
		 ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Ответственный");
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Возвращает непосредственного руководителя ответственного за документ
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса>
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция НепосредственныйРуководительОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	Ответственный = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Ответственный");
		
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
		
	Если Руководитель <> Ответственный Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> Ответственный Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции

// Возвращает всех руководителей ответственного за документ с учетом
// иерархии подразделений.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	МассивРуководителей = Новый Массив;
	
	Ответственный = СтрокаПредмета.Предмет.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивРуководителей;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Подразделение = Выборка.Подразделение;
	
	Пока ЗначениеЗаполнено(Подразделение) Цикл
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Руководитель, Руководитель.Недействителен, Родитель");
		
		Руководитель = РеквизитыПодразделения.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Руководитель <> Ответственный Тогда
			Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;
		КонецЕсли;
		Подразделение = РеквизитыПодразделения.Родитель;
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех подчиненных ответственного за документ с учетом иерархии подразделений
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПодчиненныеОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	Ответственный = СтрокаПредмета.Предмет.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен";
	Запрос.УстановитьПараметр("Руководитель", Ответственный);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Возвращает всех коллег ответственного за документ, в том числе и руководителя
// автора документа.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеКоллегиОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы")
			И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	Ответственный = СтрокаПредмета.Предмет.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователяхДокументооборот.Подразделение
		|ПОМЕСТИТЬ ПодразделениеПользователя
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПользователяхДокументооборот.Пользователь КАК Пользователь
		|ИЗ
		|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователяхДокументооборот.Подразделение
		|ГДЕ
		|	СведенияОПользователяхДокументооборот.Пользователь <> &Пользователь
		|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен";
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Возвращает руководителя организации по документу.
// Если включена настройка ИспользоватьУчетПоОрганизациям, то руководитель
// вычисляется по организации указанной в документе, иначе по регистру
// ОтветственныеЛицаОрганизаций.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция РуководительОрганизации(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы")
	   И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы")
	   И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		 Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;  
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Организация");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
	Отбор = Новый Структура("Организация, ОтветственноеЛицо", Организация, ОтветственноеЛицо);
	Возврат РегистрыСведений.ОтветственныеЛицаОрганизаций.
		ПолучитьПоследнее(БизнесПроцессОбъект.Дата, Отбор).Пользователь;
	
КонецФункции

// Возвращает всех пользователей согласовавших документ.
// Если включена настройка ИспользоватьВизыСогласования, то пользователи определяются
// по активным визам согласования, иначе по последним результатам задач процессов
// согласования.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеСогласовавшиеДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'; en = 'Auto-substitution cannot be executed for process subject ""%1"".'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	СогласовавшиеДокумент = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
		
		ВизыСогласованияДокумента = 
			РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(СтрокаПредмета.Предмет);
			
		СогласовавшиеДокумент = ВизыСогласованияДокумента.ВыгрузитьКолонку("Исполнитель");
		
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Исполнитель,
			|	ЗадачаИсполнителя.Ссылка,
			|	ЗадачаИсполнителя.ДатаИсполнения
			|ПОМЕСТИТЬ ЗадачиСогласованияПоДокументу
			|ИЗ
			|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО СогласованиеПредметы.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
			|ГДЕ
			|	СогласованиеПредметы.Предмет = &Предмет
			|	И ЗадачаИсполнителя.Выполнена = ИСТИНА
			|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачиСогласованияПоДокументу.Исполнитель,
			|	МАКСИМУМ(ЗадачиСогласованияПоДокументу.ДатаИсполнения) КАК ДатаИсполнения
			|ПОМЕСТИТЬ ДатыПоследнихОтветов
			|ИЗ
			|	ЗадачиСогласованияПоДокументу КАК ЗадачиСогласованияПоДокументу
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачиСогласованияПоДокументу.Исполнитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачиСогласованияПоДокументу.Исполнитель
			|ИЗ
			|	ДатыПоследнихОтветов КАК ДатыПоследнихОтветов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачиСогласованияПоДокументу КАК ЗадачиСогласованияПоДокументу
			|		ПО ДатыПоследнихОтветов.Исполнитель = ЗадачиСогласованияПоДокументу.Исполнитель
			|			И ДатыПоследнихОтветов.ДатаИсполнения = ЗадачиСогласованияПоДокументу.ДатаИсполнения";
		Запрос.УстановитьПараметр("Предмет", СтрокаПредмета.Предмет);
		
		СогласовавшиеДокумент = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
	КонецЕсли;
	
	Возврат СогласовавшиеДокумент;
	
КонецФункции

///////////////////////////////////////
// Автоподстановки для мероприятий

// Возвращает всех участников мероприятия.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция УчастникиМероприятия(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Мероприятие = "";
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
			 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" не является мероприятием или материалом мероприятия.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not an event or event data.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
	Для Каждого Строка Из Участники Цикл
		МассивУчастников.Добавить(Строка.Исполнитель);
	КонецЦикла;	
	
	Возврат МассивУчастников;
	
КонецФункции

// Возвращает председателя мероприятия.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция ПредседательМероприятия(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Мероприятие = "";
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
			 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" не является мероприятием или материалом мероприятия.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not an event or event data.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Мероприятие, "Председатель");
	
КонецФункции

// Возвращает секретаря мероприятия.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция СекретарьМероприятия(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Мероприятие = "";
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not specified.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
			 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" не является мероприятием или материалом мероприятия.'; en = 'Auto-substitution cannot be executed because process subject ""%1"" is not an event or event data.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'; en = 'Process subject ""%1"" not found.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Мероприятие, "Секретарь");
	
КонецФункции

// Возвращает исходный шаблон этапа комплексного процесса.
//
// Параметры:
//  ШаблонПроцесса - СправочникСсылка - шаблон процесс, являющийся этапом комплексного процесса.
//
// Возвращаемое значение:
//  ПроизвольнаяСсылка - Шаблон процесса.
//
Функция ИсходныйШаблонЭтапаПроцесса(ШаблонПроцесса) Экспорт
	
	ШаблонЭтапа = Неопределено;
	
	РеквизитыШаблонаПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ШаблонПроцесса, "КомплексныйПроцесс, ВладелецШаблона");
	
	КомплексныйПроцесс = РеквизитыШаблонаПроцесса.КомплексныйПроцесс;
	Если Не ЗначениеЗаполнено(КомплексныйПроцесс) Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	Шаблон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомплексныйПроцесс, "Шаблон");
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	// Получим идентификатор этапа для шаблона процесса.
	Этапы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШаблонаПроцесса.ВладелецШаблона, "Этапы");
	Если Этапы = Неопределено Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	Этапы = Этапы.Выгрузить();
	
	СтрокаЭтап = Этапы.Найти(ШаблонПроцесса);
	Если СтрокаЭтап = Неопределено Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	ИдентификаторЭтапа = СтрокаЭтап.ИдентификаторЭтапа;
	
	// Надем все служебные шаблоны комплексных процессов в шаблоне КП.
	СлужебныеШаблоны = Новый Массив;
	ШаблоныДляОбработки = Новый Массив;
	
	ШаблоныДляОбработки.Добавить(Шаблон);
	
	Запрос = Новый Запрос;
	
	Пока ШаблоныДляОбработки.Количество() > 0 Цикл
		
		СлужебныйШаблон = ШаблоныДляОбработки[0];
		СлужебныеШаблоны.Добавить(СлужебныйШаблон);
		
		ШаблоныДляОбработки.Удалить(0);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &Ссылка
			|	И ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса ССЫЛКА Справочник.ШаблоныКомплексныхБизнесПроцессов";
		Запрос.УстановитьПараметр("Ссылка", СлужебныйШаблон);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ШаблоныДляОбработки.Добавить(Выборка.ШаблонБизнесПроцесса);
		КонецЦикла;
		
	КонецЦикла;
	
	// Найдем исходный шаблон;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
		|ГДЕ
		|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка В(&СлужебныеШаблоны)
		|	И ШаблоныКомплексныхБизнесПроцессовЭтапы.ИдентификаторЭтапа = &ИдентификаторЭтапа";
	Запрос.УстановитьПараметр("СлужебныеШаблоны", СлужебныеШаблоны);
	Запрос.УстановитьПараметр("ИдентификаторЭтапа", ИдентификаторЭтапа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ШаблонЭтапа = Выборка.ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Возврат ШаблонЭтапа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДоступностьШаблоновПроцессов

// Обновляет доступность зависимых шаблонов.
//
// Процедура может быть переопределена в
// ШаблоныБизнесПроцессовПереопределяемый.ПриОбновленииДоступностиЗависимыхШаблонов.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса - шаблон процесса.
//
Процедура ОбновитьДоступностьЗависимыхШаблонов(Шаблон)
	
	СтандартнаяОбработка = Истина;
	ШаблоныБизнесПроцессовПереопределяемый.ПриОбновленииДоступностиЗависимыхШаблонов(
		Шаблон, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим владельцев по иерархии комплексных процессов.
	ВышестоящиеВладельцы = Новый Массив;
	ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ВладелецШаблона");
	Пока ЗначениеЗаполнено(ВладелецШаблона) Цикл
		ВышестоящиеВладельцы.Добавить(ВладелецШаблона);
		ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецШаблона, "ВладелецШаблона");
	КонецЦикла;
	
	Если ВышестоящиеВладельцы.Количество() > 0 Тогда
		
		Для Каждого ВладелецШаблонов Из ВышестоящиеВладельцы Цикл
			
			Запись = РегистрыСведений.ДоступностьШаблоновПроцессов.СоздатьМенеджерЗаписи();
			Запись.Шаблон = ВладелецШаблонов;
			Запись.Прочитать();
			
			Если Не Запись.Выбран() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запись.РучнойЗапуск Тогда
				Запись.АвтоматическийЗапуск = 
					ДоступностьАвтоматическогоЗапускаШаблонаКомплексногоПроцесса(ВладелецШаблонов);
			Иначе
				Запись.АвтоматическийЗапуск = Ложь;
			КонецЕсли;
			
			Запись.Записать();
			
		КонецЦикла;
		
	Иначе
		
		// Определяем владельцев шаблона среди составных процессов,
		// и обновляем их доступность для автоматического запуска.
		// Она полностью зависит доступности подчиненных шаблонов для автоматического запуска .
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка
			|ПОМЕСТИТЬ ВладельцыСоставныхПроцессов
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов.Шаблоны КАК ШаблоныСоставныхБизнесПроцессовШаблоны
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессовШаблоны.Шаблон = &Шаблон
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка КАК Владелец,
			|	ШаблоныСоставныхБизнесПроцессовШаблоны.Шаблон
			|ПОМЕСТИТЬ ПодчиненныеШаблоныВладельцев
			|ИЗ
			|	ВладельцыСоставныхПроцессов КАК ВладельцыСоставныеПроцессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныСоставныхБизнесПроцессов.Шаблоны КАК ШаблоныСоставныхБизнесПроцессовШаблоны
			|		ПО ВладельцыСоставныеПроцессы.Ссылка = ШаблоныСоставныхБизнесПроцессовШаблоны.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодчиненныеШаблоныВладельцев.Владелец,
			|	МИНИМУМ(ДоступностьШаблоновПроцессов.АвтоматическийЗапуск) КАК АвтоматическийЗапуск
			|ИЗ
			|	ПодчиненныеШаблоныВладельцев КАК ПодчиненныеШаблоныВладельцев
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ПО ПодчиненныеШаблоныВладельцев.Шаблон = ДоступностьШаблоновПроцессов.Шаблон
			|
			|СГРУППИРОВАТЬ ПО
			|	ПодчиненныеШаблоныВладельцев.Владелец";
			
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ДоступностьШаблоновПроцессов.СоздатьМенеджерЗаписи();
			Запись.Шаблон = Выборка.Владелец;
			Запись.Прочитать();
			Запись.АвтоматическийЗапуск = Запись.РучнойЗапуск И Выборка.АвтоматическийЗапуск;
			Запись.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
