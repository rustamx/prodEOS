
#Область ПрограммныйИнтерфейс

// Выполняет задачу по правилу эскалации с указанным вариантом выполнения.
//
// Параметры:
//  Задача - ЗадачаСсылка - Ссылка на выполняемую задачу.
//  ВариантВыполнения - Булево - Вариант выполнения - положительный или отрицательный.
//  Комментарий - Строка - Комментарий выполнения задачи.
//
Процедура ВыполнитьЗадачуПоПравилуЭскалации(Задача, ВариантВыполнения, Комментарий) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("РезультатВыполнения", Комментарий);
	ПараметрыВыполнения.Вставить("Исполнитель", ПользователиКлиентСервер.ТекущийПользователь());
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача, "БизнесПроцесс, ТочкаМаршрута");
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	ТочкиМаршрута = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцесс).ТочкиМаршрута;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
			// Не даем возможность автоматически направлять на повторное выполнение.
			ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", Ложь);
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
			Если ВариантВыполнения Тогда
				ПараметрыВыполнения.Вставить("РезультатПриглашения",
					Перечисления.РезультатыПриглашения.Принято);
			Иначе
				ПараметрыВыполнения.Вставить("РезультатПриглашения",
					Перечисления.РезультатыПриглашения.НеПринято);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			// Не даем возможность автоматически направлять на повторное приглашение.
			Если ВариантВыполнения Тогда
				ПараметрыВыполнения.Вставить("ПодтвердитьПриглашение", Истина);
			Иначе
				ПараметрыВыполнения.Вставить("ОтложитьПриглашение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
			// Не даем возможность автоматически отправлять на исполнение или ознакомление.
			ПараметрыВыполнения.Вставить("ВариантРассмотрения",
				Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			// Не даем возможность автоматически отправлять на исполнение или ознакомление.
			ПараметрыВыполнения.Вставить("ВариантОбработкиРезолюции",
				Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Тогда
			// Не даем возможности автоматически согласовывать с замечаниями.
			Если ВариантВыполнения Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования",
					Перечисления.РезультатыСогласования.Согласовано);
			Иначе
				ПараметрыВыполнения.Вставить("РезультатСогласования",
					Перечисления.РезультатыСогласования.НеСогласовано);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Утвердить Тогда
			Если ВариантВыполнения Тогда
				ПараметрыВыполнения.Вставить("РезультатУтверждения",
					Перечисления.РезультатыУтверждения.Утверждено);
			Иначе
				ПараметрыВыполнения.Вставить("РезультатУтверждения",
					Перечисления.РезультатыУтверждения.НеУтверждено);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Зарегистрировать Тогда
			// Не даем возможность автоматически регистрировать документ.
			ПараметрыВыполнения.Вставить("РезультатРегистрации", 
				Перечисления.РезультатыРегистрации.НеЗарегистрировано);
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Задача);
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		НаправитьЗадачуНаВыполнение(ЗадачаОбъект, ПараметрыВыполнения);
		РазблокироватьДанныеДляРедактирования(Задача);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет задачу по почте с указанным вариантом выполнения и комментарием.
//
// Параметры:
//  Параметры - Структура, содержит два элемента.
//	 ВариантВыполнения - ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач, вариант выполнения задачи.
//	 Комментарий - Строка, комментарий пользователя.
//
Процедура ВыполнитьЗадачуПоПочте(ЗадачаСсылка, Параметры = Неопределено) Экспорт

	ВариантВыполнения = Параметры.ВариантВыполнения;
	
	ПараметрыВыполнения = Новый Структура;
	Если ЗначениеЗаполнено(Параметры.Комментарий) Тогда
		ПараметрыВыполнения.Вставить("РезультатВыполнения", Параметры.Комментарий);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ИсполнительЗадачиПоПочте", Параметры.ИсполнительЗадачиПоПочте);
	
	Если Параметры.Свойство("ФактическийИсполнительЗадачи") Тогда
		ПараметрыВыполнения.Вставить("ФактическийИсполнительЗадачи", Параметры.ФактическийИсполнительЗадачи);
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаСсылка, "БизнесПроцесс, ТочкаМаршрута");
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	
	ТочкиМаршрута = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцесс).ТочкиМаршрута;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
			ОтправленоНаДоработку =
				ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
			ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", ОтправленоНаДоработку);
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатПриглашения", 
					Перечисления.РезультатыПриглашения.Принято);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатПриглашения", 
					Перечисления.РезультатыПриглашения.НеПринято);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("ПодтвердитьПриглашение", Истина);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
				ПараметрыВыполнения.Вставить("ПовторитьПриглашение", Истина);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ОтложитьПриглашение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("ВариантРассмотрения", 
					Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("ПодтвердитьПриглашение", 
					Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ОтправитьНаУточнение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования", 
					Перечисления.РезультатыСогласования.Согласовано);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования", 
					Перечисления.РезультатыСогласования.НеСогласовано);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования", 
					Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ПовторитьСогласование", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Утвердить Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатУтверждения", 
					Перечисления.РезультатыУтверждения.Утверждено);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатУтверждения", 
					Перечисления.РезультатыУтверждения.НеУтверждено);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ПовторитьУтверждение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Зарегистрировать Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатРегистрации", 
					Перечисления.РезультатыРегистрации.Зарегистрировано);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатРегистрации", 
					Перечисления.РезультатыРегистрации.НеЗарегистрировано);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ПовторитьРегистрацию", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ЗадачаСсылка);
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		НаправитьЗадачуНаВыполнение(ЗадачаОбъект, ПараметрыВыполнения);
		РазблокироватьДанныеДляРедактирования(ЗадачаСсылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет задачу с переданными параметрами. При этом выполняются обработчики
// ОбработкаПередВыполнениемЗадачи и ОбработкаПередВыполнениемЗадачи модуля менеджера
// соотвествующего бизнес-процесса.
// Если передается ссылка на задачу, то в рамках процедуры на время выполнения задача будет заблокирована,
// если передается объект, то блокировка не устанавливается.
//
// Параметры:
//   Задача - ЗадачаСсылка, ЗадачаОбъект - ссылка или объект на выполняемую задачу.
//   ПараметрыВыполнения - Структура - параметры выполнения задачи.
//
Процедура ВыполнитьЗадачуСПараметрами(Задача, ПараметрыВыполнения = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ЗаблокироватьДанныеДляРедактирования(Задача);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			РазблокироватьЗадачу = Истина;
		Иначе
			ЗадачаОбъект = Задача;
			РазблокироватьЗадачу = Ложь;
		КонецЕсли;
		
		БизнесПроцессМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаОбъект.БизнесПроцесс);
		
		Если ПараметрыВыполнения <> Неопределено Тогда
			
			БизнесПроцессМенеджер.ОбработкаПередВыполнениемЗадачи(Задача.Ссылка, ЗадачаОбъект.БизнесПроцесс,
				ЗадачаОбъект.ТочкаМаршрута, ПараметрыВыполнения);
			
			Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
				ЗадачаОбъект.РезультатВыполнения = ПараметрыВыполнения.РезультатВыполнения;
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ДатаИсполнения") Тогда
				ЗадачаОбъект.ДатаИсполнения = ПараметрыВыполнения.ДатаИсполнения;
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи") Тогда
				ЗадачаОбъект.Исполнитель= ПараметрыВыполнения.ИсполнительЗадачи;
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ИсполнительЗадачиПоПочте") Тогда
				ЗадачаОбъект.Исполнитель= ПараметрыВыполнения.ИсполнительЗадачиПоПочте;
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ФактическийИсполнительЗадачи") Тогда
				ЗадачаОбъект.ДополнительныеСвойства.Вставить(
					"ФактическийИсполнительЗадачи", ПараметрыВыполнения.ФактическийИсполнительЗадачи);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ПользовательИсполнитель") Тогда
				ЗадачаОбъект.ДополнительныеСвойства.Вставить(
					"ПользовательИсполнитель", ПараметрыВыполнения.ПользовательИсполнитель);
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатПроверки = БизнесПроцессыИЗадачиСервер.ПроверитьУсловияЗапретаВыполнения(Задача.Ссылка, ПараметрыВыполнения);
		Если РезультатПроверки.ЗапретВыполнения Тогда
			ВызватьИсключение РезультатПроверки.ТекстПредупреждения;
		КонецЕсли;
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
		Если ПараметрыВыполнения <> Неопределено Тогда
			БизнесПроцессМенеджер.ОбработкаПослеВыполненияЗадачи(Задача.Ссылка, ЗадачаОбъект.БизнесПроцесс,
					ЗадачаОбъект.ТочкаМаршрута, ПараметрыВыполнения);
		КонецЕсли;
		
		Если РазблокироватьЗадачу Тогда
			РазблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
		КонецЕсли;
		
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ЗадачаОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение задачи'; en = 'Task execution'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ЗадачаОбъект.Ссылка.Метаданные(),
			ПолучитьНавигационнуюСсылку(ЗадачаОбъект.Ссылка),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса, 
// к которому относится задача ЗадачаСсылка.
//
Процедура ВыполнитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию = Ложь) Экспорт

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		Если ДействиеПоУмолчанию И ЗадачаОбъект.БизнесПроцесс <> Неопределено 
			И НЕ ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
			ТипБизнесПроцесса = ЗадачаОбъект.БизнесПроцесс.Метаданные();
			БизнесПроцессы[ТипБизнесПроцесса.Имя].ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка,
				ЗадачаОбъект.БизнесПроцесс, ЗадачаОбъект.ТочкаМаршрута);
		КонецЕсли;
			
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ВыполнитьЗадачу();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Возвращает признак использования возможность использования фонового
// выполнения задач.
//
Функция ИспользоватьФоновоеВыполнениеЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Полный.Ссылка
		|ИЗ
		|	ПланОбмена.Полный КАК Полный
		|ГДЕ
		|	Полный.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат (Выборка.Количество() = 2 И Константы.ИспользоватьСинхронизациюДанных.Получить())
		Или (Константы.ИспользоватьФоновоеВыполнениеЗадач.Получить()
			И Не ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
КонецФункции

// Направляет задачу на выполнение, с учетом фонового выполнения задач.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//           ЗадачаОбъект.ЗадачаИсполнителя - выполняемая задача.
//  ПараметрыВыполнения - Структура - Параметры выполнения задачи.
//
Процедура НаправитьЗадачуНаВыполнение(Задача, ПараметрыВыполнения) Экспорт
	
	Если ИспользоватьФоновоеВыполнениеЗадач() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ТипЗадачи = ТипЗнч(Задача);
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗадачи) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача);
				ЗадачаОбъект = Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Задача;
			КонецЕсли;
				
			Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
				ЗадачаОбъект.РезультатВыполнения = ПараметрыВыполнения.РезультатВыполнения;
			КонецЕсли;
			
			РегистрыСведений.ЗадачиДляВыполнения.ДобавитьЗадачуДляФоновогоВыполнения(
				ЗадачаОбъект, ПараметрыВыполнения);
				
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект, "ПростаяЗапись");
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗадачи) Тогда
				РазблокироватьДанныеДляРедактирования(Задача);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		ВыполнитьЗадачуСПараметрами(Задача, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик рег. задания ВыполнениеЗадач
//
Процедура ВыполнениеЗадач() Экспорт
	
	Если Не ИспользоватьФоновоеВыполнениеЗадач() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьЗамерыПроизводительности = 
		ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности();
	
	ЭтотУзелОбмена = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиДляВыполнения.Задача,
		|	ЗадачиДляВыполнения.Параметры,
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачиДляВыполнения.КоличествоПопытокОбработки
		|ИЗ
		|	РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|			ПО ЗадачаИсполнителя.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|		ПО ЗадачиДляВыполнения.Задача = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ДанныеБизнесПроцессов.УзелОбмена = &ЭтотУзелОбмена
		|	И ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И ЗадачиДляВыполнения.КоличествоПопытокОбработки <= 3
		|	И ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачиДляВыполнения.МоментВремени";
		
	Запрос.УстановитьПараметр("ЭтотУзелОбмена", ЭтотУзелОбмена);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиДляВыполнения");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Задача", Выборка.Задача);
		
		НачатьТранзакцию();
		
		// Пытаемся заблокировать задачу и запись в регистре ЗадачиДляВыполнения.
		// Если не удается, то пропускаем задачу и пробуем выполнить при след. обработке.
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Задача);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			
			РегистрыСведений.ЗадачиДляВыполнения.УдалитьЗадачуИзОчереди(Выборка.Задача);
			
			Если Не Выборка.Выполнена Тогда
			
				ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
				
				Параметры = Выборка.Параметры.Получить();
				Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
					Параметры = Новый Структура;
				КонецЕсли;
				
				КлючеваяОперация = ИмяКлючевойОперацииДляЗадачи(ЗадачаОбъект, Параметры);
				Если ВыполнятьЗамерыПроизводительности И ЗначениеЗаполнено(КлючеваяОперация) Тогда
					ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
				КонецЕсли;
				
				ВыполнитьЗадачуСПараметрами(ЗадачаОбъект, Параметры);
				
				// Проверяем права участников на предметы процесса, чтобы
				// уведомить автора, о том, что в процессе есть недоступные предметы участникам
				// и они не смогут выполнить свои задачи.
				ПроцессОъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
				АвторПроцесса = РаботаСБизнесПроцессами.АвторПроцессаЗадачи(ПроцессОъект);
				МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(ПроцессОъект, АвторПроцесса);
				
				Если ВыполнятьЗамерыПроизводительности И ЗначениеЗаполнено(КлючеваяОперация) Тогда
					ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
				КонецЕсли;
				
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(Выборка.Задача);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если Выборка.КоличествоПопытокОбработки < 3 Тогда
				РегистрыСведений.ЗадачиДляВыполнения.ЗарегистрироватьПопыткуВыполненияЗадачи(Выборка.Задача);
			Иначе
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				Описание = НСтр("ru = 'Во время выполнения этой задачи произошла ошибка:
					|%1
					|Попробуйте выполнить ее еще раз.';
					|en = 'An error occured during task execution, please try again:
					|%1'");
					
				Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Описание,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				РегистрыСведений.ЗадачиДляВыполнения.ЗарегистрироватьОтменуВыполнения(Выборка.Задача, Описание);
				
				РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
					Описание,
					Выборка.Исполнитель,
					Выборка.Задача);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ключевую операцию для замера времени выполнения
// задачи.
//
// Параметры:
//   Задача - ЗадачаСсылка
//   Параметры - Структура - параметры выполнения
//
Функция ИмяКлючевойОперацииДляЗадачи(Задача, Параметры)
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	
	КлючеваяОперация = "";
	
	Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
		
		КлючеваяОперация = "ИсполнениеФоновоеВыполнениеКомандыИсполнено";
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться Тогда
		КлючеваяОперация = "ОзнакомлениеФоновоеВыполнениеКомандыОзнакомился";
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда
		КлючеваяОперация = "ПоручениеФоновоеВыполнениеКомандыВыполнено";
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		Если Параметры.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда
			КлючеваяОперация = "ПриглашениеФоновоеВыполнениеКомандыПринято";
		ИначеЕсли Параметры.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда
			КлючеваяОперация = "ПриглашениеФоновоеВыполнениеКомандыНеПринято";
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		КлючеваяОперация = "РассмотрениеФоновоеВыполнениеКомандыВыполнено";
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		Если Параметры.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
			КлючеваяОперация = "РегистрацияФоновоеВыполнениеКомандыЗарегистрировано";
		ИначеЕсли Параметры.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
			КлючеваяОперация = "РегистрацияФоновоеВыполнениеКомандыНеЗарегистрировано";
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Если Параметры.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			КлючеваяОперация = "СогласованиеФоновоеВыполнениеКомандыСогласовано";
		ИначеЕсли Параметры.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			КлючеваяОперация = "СогласованиеФоновоеВыполнениеКомандыСогласованоСЗамечаниями";
		ИначеЕсли Параметры.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
			КлючеваяОперация = "СогласованиеФоновоеВыполнениеКомандыНеСогласовано";
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Если Параметры.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
			КлючеваяОперация = "УтверждениеФоновоеВыполнениеКомандыУтверждено";
		ИначеЕсли Параметры.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
			КлючеваяОперация = "УтверждениеФоновоеВыполнениеКомандыНеУтверждено";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючеваяОперация;
	
КонецФункции

#КонецОбласти
