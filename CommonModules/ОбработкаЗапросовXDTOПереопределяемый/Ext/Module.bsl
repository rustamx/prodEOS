////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, переопределяемый
// Реализует расширяемый функционал веб-сервиса DMService
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает строку версии сервиса
//
Функция ВерсияСервиса() Экспорт
	
	Возврат Метаданные.Версия + ".CORP";
	
КонецФункции

// Дополняет таблицу соответствия поддерживаемых типов
// Вызывается из ОбработкаЗапросовXDTO.СоответствиеТипов
//
// Параметры:
//   Таблица - ТаблицаЗначений - неявно возвращаемое значение с колонками:
//     * ИмяXDTO - Строка - имя типа XDTO
//     * ИмяДО - Строка - полное имя типа ДО
// 
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	ДобавитьСтроку(Таблица, "DMComplexBusinessProcessTemplate", "Справочник.ШаблоныКомплексныхБизнесПроцессов");
	ДобавитьСтроку(Таблица, "DMComplexBusinessProcess", "БизнесПроцесс.КомплексныйПроцесс");
	
	ДобавитьСтроку(Таблица, "DMBusinessProcessInvitationTemplate", "Справочник.ШаблоныПриглашения");
	ДобавитьСтроку(Таблица, "DMBusinessProcessInvitation", "БизнесПроцесс.Приглашение");
	ДобавитьСтроку(Таблица, "DMBusinessProcessInvitationTaskInvitation", "Задача.ЗадачаИсполнителя");
	ДобавитьСтроку(Таблица, "DMBusinessProcessInvitationTaskAcquaint", "Задача.ЗадачаИсполнителя");
	ДобавитьСтроку(Таблица, "DMBusinessProcessInvitationTaskNotify", "Задача.ЗадачаИсполнителя");
	
	ДобавитьСтроку(Таблица, "DMWorkType", "Справочник.ВидыРабот");
	
	ДобавитьСтроку(Таблица, "DMMeetingType", "Справочник.ВидыМероприятий");
	ДобавитьСтроку(Таблица, "DMMeeting", "Справочник.Мероприятия");
	ДобавитьСтроку(Таблица, "DMMeetingStatus", "Перечисление.СостоянияМероприятий");
	ДобавитьСтроку(Таблица, "DMMeetingMinutesItem", "Справочник.ПротоколыМероприятий");
	ДобавитьСтроку(Таблица, "DMMeetingMinutesItemStatus", "Перечисление.СостоянияПротоколовМероприятий");
	ДобавитьСтроку(Таблица, "DMInvitationStatus", "Перечисление.СостоянияПриглашения");
	
	ДобавитьСтроку(Таблица, "DMPremisesReservation", "Документ.Бронь");
	ДобавитьСтроку(Таблица, "DMPremises", "Справочник.ТерриторииИПомещения");
	ДобавитьСтроку(Таблица, "DMApplicationNotification", "Справочник.УведомленияПрограммы");
	ДобавитьСтроку(Таблица, "DMForumThread", "Справочник.ТемыОбсуждений");
	ДобавитьСтроку(Таблица, "DMForumMessage", "Справочник.СообщенияОбсуждений");
	
	ДобавитьСтроку(Таблица, "DMCashFlowItem", "Справочник.СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

// Дополнительно заполняет основные свойства задачи
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьОсновныеСвойстваXDTOЗадачи
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаИсполнителя
//
Процедура ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Задача) Экспорт
	
	ЗадачаXDTO.accepted = Задача.ПринятаКИсполнению;
	ЗадачаXDTO.acceptDate = Задача.ДатаПринятияКИсполнению;
	
	Если ЗначениеЗаполнено(Задача.СостояниеБизнесПроцесса) Тогда
		ЗадачаXDTO.state = ОбработкаЗапросовXDTO.СоздатьОбъект(
			ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Задача.СостояниеБизнесПроцесса));
		ЗадачаXDTO.state.name = Строка(Задача.СостояниеБизнесПроцесса);
		ЗадачаXDTO.state.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.СостояниеБизнесПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.Проект) Тогда
		ЗадачаXDTO.project = ОбработкаЗапросовXDTO.СоздатьОбъект(ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Задача.Проект));
		ЗадачаXDTO.project.name = Строка(Задача.Проект);
		ЗадачаXDTO.project.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.Проект);
		Если ЗначениеЗаполнено(Задача.ПроектнаяЗадача) Тогда
			ЗадачаXDTO.projectTask = ОбработкаЗапросовXDTO.СоздатьОбъект(ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Задача.ПроектнаяЗадача));
			ЗадачаXDTO.projectTask.name = Строка(Задача.ПроектнаяЗадача);
			ЗадачаXDTO.projectTask.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.ПроектнаяЗадача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Дополнительно заполняет свойства задачи, специфичные для ее типа
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПерсональныеСвойстваЗадачиПоТипу
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаИсполнителя
//
Процедура ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(ЗадачаXDTO, Задача) Экспорт
	
	ИмяТипа = ЗадачаXDTO.Тип().Имя;
	
	Если ИмяТипа = "DMBusinessProcessIssuesSolutionTaskQuestion"
		ИЛИ ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		
		Если ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
			ЗадачаXDTO.postponingAmount = 
				ПереносСроковВыполненияЗадачВызовСервера.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
					Задача.БизнесПроцесс.ПредметРассмотрения, Задача.БизнесПроцесс);
		КонецЕсли;
		
		ЗадачаXDTO.issueType = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIssueType");
		ЗадачаXDTO.issueType.name = Строка(Задача.БизнесПроцесс.ВидВопроса);
		ЗадачаXDTO.issueType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.БизнесПроцесс.ВидВопроса);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskInvitation" Тогда
		
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыПриглашения.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.invitationResult = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInvitationResult");
			ЗадачаXDTO.invitationResult.name = Строка(НайденнаяСтрока.РезультатПриглашения);
			ЗадачаXDTO.invitationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(НайденнаяСтрока.РезультатПриглашения);
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
			
    	ЗадачаXDTO.activityBegin = Задача.БизнесПроцесс.ДатаНачалаМероприятия;
		ЗадачаXDTO.activityEnd = Задача.БизнесПроцесс.ДатаОкончанияМероприятия;
		ЗадачаXDTO.activityVenue = Задача.БизнесПроцесс.МестоПроведения;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskAcquaint" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.invitationReturned = НайденнаяСтрока.ОтправленоПовторноеПриглашение;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		// результат приглашения
		РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
		СтрокиИтерации = Задача.БизнесПроцесс.РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		
		ЕстьПринятые = Ложь;
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
				ЕстьПринятые = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПринятые Тогда 
			РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
		Иначе	
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Если Строка.ЯвкаОбязательна Тогда 
						РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
						Прервать;
					Иначе
						РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗадачаXDTO.invitationResult = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGeneralInvitationResult");
		ЗадачаXDTO.invitationResult.name = Строка(РезультатПриглашения);
		ЗадачаXDTO.invitationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(РезультатПриглашения);
		
		Для Каждого Строка Из СтрокиИтерации Цикл
			СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessInvitationTaskAcquaintInvitationResult");
			СтрокаXDTO.invitationComment = Строка.ЗадачаИсполнителя.РезультатВыполнения;
			performer = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessInvitationParticipant");
			basePerformer = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПодготовитьИсполнителя(Строка.ЗадачаИсполнителя,
				"Исполнитель",
				"РольИсполнителя");
			Для Каждого Свойство Из basePerformer.Свойства() Цикл
				Если basePerformer.Установлено(Свойство.Имя) Тогда
					performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
				КонецЕсли;
			КонецЦикла;
			performer.attendanceCompulsory = Строка.ЯвкаОбязательна;
			СтрокаXDTO.invitationPerformer = performer;
			СтрокаXDTO.invitationDate = Строка.ЗадачаИсполнителя.ДатаИсполнения;
			СтрокаXDTO.invitationResult = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInvitationResult");
			СтрокаXDTO.invitationResult.name = Строка(Строка.РезультатПриглашения);
			СтрокаXDTO.invitationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Строка.РезультатПриглашения);
			ЗадачаXDTO.invitationResults.Добавить(СтрокаXDTO);
		КонецЦикла;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskNotify" Тогда
		
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
			
		ЗадачаXDTO.invitationResult = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGeneralInvitationResult");
		ЗадачаXDTO.invitationResult.name = Строка(Задача.БизнесПроцесс.РезультатПриглашения);
		ЗадачаXDTO.invitationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.БизнесПроцесс.РезультатПриглашения);
    	ЗадачаXDTO.activityBegin = Задача.БизнесПроцесс.ДатаНачалаМероприятия;
		ЗадачаXDTO.activityEnd = Задача.БизнесПроцесс.ДатаОкончанияМероприятия;
		ЗадачаXDTO.activityVenue = Задача.БизнесПроцесс.МестоПроведения;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополнительно заполняет общие реквизиты бизнес-процесса по данным объекта XDTO
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьШапкуБизнесПроцесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO, наследующего DMBusinessProcess - источник данных для заполнения
// 
Процедура УстановитьШапкуБизнесПроцесса(БизнесПроцессОбъект, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.Установлено("state") Тогда
    	БизнесПроцессОбъект.Состояние = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.state.objectId);
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("parentTask") Тогда
		БизнесПроцессОбъект.ГлавнаяЗадача = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.parentTask.objectId);
	КонецЕсли;
	Если ОбъектXDTO.Установлено("project") Тогда
		БизнесПроцессОбъект.Проект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.project.objectId);
	КонецЕсли;
	
КонецПроцедуры

// Дополнительно передает реквизиты, общие для всех процессов
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПередатьОбщиеРеквизитыБизнесПроцесса
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС
//   СсылкаНаБизнесПроцесс - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьОбщиеРеквизитыБизнесПроцесса(Узел, СсылкаНаБизнесПроцесс, Объект) Экспорт
	
	Объект.parentTaskEnabled = Истина;
	
	Если Объект.parentTaskEnabled И ЗначениеЗаполнено(СсылкаНаБизнесПроцесс.ГлавнаяЗадача) Тогда
		Объект.parentTask = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessTask");
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьОсновныеСвойстваXDTOЗадачи(Узел,
			Объект.parentTask, СсылкаНаБизнесПроцесс.ГлавнаяЗадача, Ложь);
	КонецЕсли;
	
	Объект.leadingTaskEnabled = Истина;
	
	Если Объект.leadingTaskEnabled И ЗначениеЗаполнено(СсылкаНаБизнесПроцесс.ВедущаяЗадача) Тогда
		Объект.leadingTask = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessTask");
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьОсновныеСвойстваXDTOЗадачи(Узел,
			Объект.leadingTask, СсылкаНаБизнесПроцесс.ВедущаяЗадача, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаБизнесПроцесс.Состояние) Тогда
		Объект.state = ОбработкаЗапросовXDTO.СоздатьОбъект(
			ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(СсылкаНаБизнесПроцесс.Состояние));
		Объект.state.name = Строка(СсылкаНаБизнесПроцесс.Состояние);
		Объект.state.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Состояние);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаБизнесПроцесс.Проект) Тогда
		Объект.project = ОбработкаЗапросовXDTO.СоздатьОбъект(
			ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(СсылкаНаБизнесПроцесс.Проект));
		Объект.project.name = Строка(СсылкаНаБизнесПроцесс.Проект);
		Объект.project.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Проект);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условие отбора ведущей задачи в запросе при получении списка зависимых задач
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ДобавитьПодчиненныеБизнесПроцессы
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса, выбирающего задачи
//
Процедура УстановитьУсловиеОтбораВедущейЗадачи(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборВедущаяЗадача%",
		"БизнесПроцессы.ГлавнаяЗадача = &ГлавнаяЗадача
		|	ИЛИ БизнесПроцессы.ВедущаяЗадача = &ГлавнаяЗадача");
		
КонецПроцедуры

// Устанавливает условие отбора по пустой задаче в запросе при получении списка зависимых процессов
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьБизнесПроцессыПоЗапросу
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса, выбирающего зависимые процессы
//
Процедура УстановитьУсловиеОтбораВедущейЗадачиПоПустойСсылке(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборВедущаяЗадача%",
		"(БизнесПроцесс.ГлавнаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|	И БизнесПроцесс.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка))");
		
КонецПроцедуры

// Вызывается перед записью из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаписатьБПРешениеВопросовВыполненияЗадач
//
// Параметры:
//   БПОбъект - БизнесПроцессОбъект, предлагаемый к изменению
//   Объект - ОбъектXDTO типа DMBusinessProcessIssuesSolution
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
//
Процедура ЗаписатьБПРешениеВопросовВыполненияЗадач(БПОбъект, Объект, СоздатьНовый) Экспорт
	
	Если НЕ ЗначениеЗаполнено(БПОбъект.ВидВопроса) Тогда
		БПОбъект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет ответ при получении объекта XDTO бизнес процесса "Решение вопросов выполнения задач"
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьБПРешениеВопросовВыполненияЗадач
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMBusinessProcessIssuesSolution, предлагаемый к изменению
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
//
Процедура ПолучитьБПРешениеВопросовВыполненияЗадач(Ответ, СсылкаНаБизнесПроцесс) Экспорт
	
	Ответ.issueType = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIssueType");
	Ответ.issueType.name = Строка(СсылкаНаБизнесПроцесс.ВидВопроса);
	ответ.issueType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.ВидВопроса);
	
КонецПроцедуры

// Дополнительно заполняет задачу при ее выполнении
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ВыполнитьЗадачу
//
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача, предлагаемая к изменению
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   БизнесПроцесс - БизнесПроцессОбъект - процесс задачи, предлагаемый к изменению
//
Процедура ЗаполнитьЗадачуПриВыполнении(Задача, ОбъектXDTO, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатПриглашения", ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.invitationResult.objectId));
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
			Если ОбъектXDTO.Установлено("invitationReturned") Тогда
				БизнесПроцесс.ДополнительныеСвойства.Вставить("ПовторитьПриглашение", ОбъектXDTO.invitationReturned);
			КонецЕсли;
			Если ОбъектXDTO.Установлено("invitationAccepted") Тогда
				БизнесПроцесс.ДополнительныеСвойства.Вставить("ПодтвердитьПриглашение", ОбъектXDTO.invitationAccepted);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Дополняет условие отбора при получении списка задач
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСписокЗадач
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
//   Условие - Строка - часть запроса, содержащая условия, предлагаемая к изменению
//
Процедура ДополнитьУсловияЗапросаПриПолученииСпискаЗадач(Сообщение, Условия) Экспорт

КонецПроцедуры

// Дополняет условие отбора при получении списка процессов
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСписокБизнесПроцессов
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
//   Условие - Строка - часть запроса, содержащая условия, предлагаемая к изменению
//
Процедура ДополнитьУсловияЗапросаПриПолученииСпискаПроцессов(Сообщение, Условия) Экспорт

КонецПроцедуры

// Дополнительно устанавливает значения реквизитов процесса "Решение вопросов выполнения задач"
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьНовыйБизнесПроцессРешениеВопросов
//
// Параметры:
//   БПОбъект - БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач - процесс к заполнению
//   Предмет - Произвольный - предмет процесса
// 
Процедура ДополнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет) Экспорт
	
	БПОбъект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное;
	БПОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БПОбъект.ГлавнаяЗадача = Предмет.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет список шаблонов по предмету по данным предмета
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ДополнитьСписокШаблоновПоПредмету
// 
// Параметры:
//   ШаблоныПоПредмету - Массив - массив шаблонов, предлагаемый к дополнению
//   ПредметБП - Произвольный - предмет процесса
//
Процедура ДополнитьСписокШаблоновПоПредмету(ШаблоныПоПредмету, ПредметБП) Экспорт
	
	ШаблоныПоТипуПроцесса = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметБП, "ШаблоныПриглашения");
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		ШаблоныПоПредмету.Добавить(Шаблон);
	КонецЦикла;
	
	ШаблоныПоТипуПроцесса = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметБП, "ШаблоныКомплексныхБизнесПроцессов");
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		ШаблоныПоПредмету.Добавить(Шаблон);
	КонецЦикла;

КонецПроцедуры

// Дополняет условия отбора при получении шаблонов процессов по типу шаблона
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьНеПривязанныеШаблоны
// 
// Параметры:
//   ТекстЗапроса - Строка - текст запроса, предлагаемый к изменению
//   ТипШаблона - Строка - имя типа шаблона вида "Справочник.ШаблоныПоручения"
//
Процедура ДополнитьУсловияОтбораПриПолученииШаблоновПроцессов(ТекстЗапроса, ТипШаблона) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДополнительныеУсловия%", " И НЕ " + ТипШаблона + ".ШаблонВКомплексномПроцессе");
	
КонецПроцедуры

// Дополняет соответствие типов процессов при получении незаполненных процессов
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьНезаполненныеПроцессы
// 
// Параметры:
//   сПроцессов - Соответствие - соответствие:
//     * Ключ - метаданные процесса
//     * Значение - имя типа XDTO, соответствующего процессу
//
Процедура ДополнитьСоответствиеПроцессовПриПолученииНезаполненныхПроцессов(сПроцессов) Экспорт
	
	сПроцессов.Вставить(Метаданные.БизнесПроцессы.Приглашение,"DMBusinessProcessInvitation");
	
КонецПроцедуры

// Дополнительная обработка сообщения XDTO 
// Вызывается из ОбработкаЗапросовXDTO.ОбработатьУниверсальноеСообщение перед основной обработкой
//
// Параметры:
//   Сообщение - ОбъектXDTO, потомок DMRequest
//
// Возвращаемое значение:
//   ОбъектXDTO, потомок DMResponse - если сообщение считается обработанным, или
//   Неопределено - если сообщение требует дальнейшей обработки
// 
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Возврат ОбработкаЗапросовXDTOКорп.ОбработатьУниверсальноеСообщение(Сообщение);
	
КонецФункции

// Дополнительная обработка проверки типа при создании процесса
// Вызывается из ОбработкаЗапросовXDTO.Создать
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, проверяемый на соответствие бизнес-процессу ДО
//
// Возвращаемое значение:
//   Булево - Истина, если объект соответствует бизнес-процессу
// 
Функция ПроверитьТипПриСозданииНовогоПроцесса(ОбъектXDTO) Экспорт
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO,"DMBusinessProcessInvitation")
		или ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMComplexBusinessProcess") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Дополнительная обработка проверки типа при получении процесса
// Вызывается из ОбработкаЗапросовXDTO.ПолучитьОбъекты
//
// Параметры:
//   ОбъектИД - ОбъектXDTO типа DMObjectId
//
// Возвращаемое значение:
//   Булево - Истина, если объект соответствует бизнес-процессу
// 
Функция ПроверитьТипОбъектаПриПолученииПроцесса(ОбъектИД) Экспорт
	
	Если ОбъектИд.type = "DMComplexBusinessProcess"
		Или ОбъектИд.type = "DMBusinessProcessInvitation" Тогда
		
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Дополнительная обработка проверки типа при получении задачи
// Вызывается из ОбработкаЗапросовXDTO.ПолучитьОбъекты
//
// Параметры:
//   ОбъектИД - ОбъектXDTO типа DMObjectId
//
// Возвращаемое значение:
//   Булево - Истина, если объект соответствует задаче
// 
Функция ПроверитьТипОбъектаПриПолученииЗадачи(ОбъектИд) Экспорт
	
	Если ОбъектИд.type = "DMBusinessProcessInvitationTaskInvitation"
		Или ОбъектИд.type = "DMBusinessProcessInvitationTaskAcquaint"
		Или ОбъектИд.type = "DMBusinessProcessInvitationTaskNotify" Тогда
		
		Возврат Истина
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Дополнительная обработка проверки типа при записи процесса
// Вызывается из ОбработкаЗапросовXDTO.ЗаписатьОбъекты
//
// Параметры:
//   Объект - ОбъектXDTO, проверяемый на соответствие бизнес-процессу ДО
//
// Возвращаемое значение:
//   Булево - Истина, если объект соответствует бизнес-процессу
//
Функция ПроверитьТипОбъектаПриЗаписиПроцесса(Объект) Экспорт
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInvitation")
		 Или ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMComplexBusinessProcess") Тогда
		 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Дополнительно проверяет тип объекта при записи задачи
// Вызывается из ОбработкаЗапросовXDTO.ЗаписатьОбъекты
//
// Параметры:
//   Объект - ОбъектXDTO, проверяемый на соответствие бизнес-процессу ДО
//
// Возвращаемое значение:
//   Булево - Истина, если объект соответствует задаче
//
Функция ПроверитьТипОбъектаПриЗаписиЗадачи(Объект) Экспорт
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInvitationTaskInvitation") 
		Или ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInvitationTaskAcquaint")
		Или ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInvitationTaskNotify") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Дополнительная обработка при создании объекта 
// Вызывается из ОбработкаЗапросовXDTO.Создать
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest - запрос на создание
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект или DMError, или
//   Неопределено - признак необходимости продолжить создание объекта
//
Функция Создать(Сообщение) Экспорт
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение.object, "DMOutgoingEMail") Тогда
		Возврат ОбработкаЗапросовXDTOПочта.СоздатьИсходящееПисьмо(Сообщение);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Дополнительная обработка при получении объекта из objectID
// Вызывается из ОбработкаЗапросовXDTO.ПолучитьОбъекты
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС
//   ОбъектИД - ОбъектXDTO типа DMObjectId - идентификатор получаемого объекта
//
// Возвращаемое значение:
//   ОбъектXDTO - полученный объект или DMError, или
//   Неопределено - признак необходимости продолжить получение объекта
//
Функция ПолучитьОбъектПоObjectID(Узел, ОбъектИД) Экспорт
	
	Если ОбъектИд.type = "DMOutgoingEMail"
		Или ОбъектИд.type = "DMIncomingEMail" Тогда
		
		Возврат ОбработкаЗапросовXDTOПочта.ПолучитьДанныеПисьма(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMMeetingType" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьВидМероприятия(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMMeeting" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьМероприятие(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMMeetingMinutesItem" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьПунктПротоколаМероприятия(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMForumThread" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьТемуОбсуждения(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMForumMessage" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьСообщениеОбсуждения(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMPremisesReservation" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьБронь(Узел, ОбъектИд);
		
	ИначеЕсли ОбъектИд.type = "DMApplicationNotification" Тогда
		
		Возврат ОбработкаЗапросовXDTOКорп.ПолучитьУведомлениеПрограммы(Узел, ОбъектИд);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает новый бизнес-процесс, заполненный по умолчанию
// Вызывается из ОбработкаЗапросовXDTO.ПолучитьСостояниеНовогоБизнесПроцесса
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewBusinessProcessRequest - запрос на получение процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetNewBusinessProcessResponse или
//   Неопределено - признак необходимости продолжить получение процесса
//
Функция ПолучитьСостояниеНовогоБизнесПроцесса(Сообщение) Экспорт
	
	Если Сообщение.type = "DMComplexBusinessProcess"
		Или Сообщение.type = "DMBusinessProcessInvitation" Тогда
		
		Возврат ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСостояниеНовогоОбъекта(Сообщение, "DMGetNewBusinessProcessResponse");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает соответствие в Документообороте для переданного объекта XDTO
// Вызывается из ОбработкаЗапросовXDTOДокументы
//
// Параметры:
//   ВнешнийОбъектXDTO - ОбъектXDTO - объект, соответствие которому нужно найти
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на соответствующий объект Документооборота
//   Неопределено - признак необходимости продолжить поиск соответствия
//
Функция НайтиСоответствиеДляВнешнегоОбъекта(ВнешнийОбъектXDTO) Экспорт 
	
	Возврат Неопределено;
	
КонецФункции

// Дополнительная обработка получения типа XDTO задачи по точке маршрута
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута
//
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//   Строка - имя типа XDTO, соответствующего задаче
//   Неопределено - признак необходимости продолжить получение типа
//
Функция ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Задача) Экспорт
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		Возврат "DMBusinessProcessInvitationTaskInvitation";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessInvitationTaskAcquaint";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда
		Возврат "DMBusinessProcessInvitationTaskNotify";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает заполненный объект XDTO бизнес-процесса по его ObjectId
// Вызывается из ОбработкаЗапросовXDTO.ПолучитьБизнесПроцесс
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел ИС
//   ОбъектИд - ОбъектXDTO типа DMObjectId
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект, найденный по ОбъектИд
//
// Возвращаемое значение:
//   ОбъектXDTO типа, наследующего DMBusinessProcess, с заполненными свойствами, или
//   Неопределено - признак необходимости продолжить получение процесса
//
Функция ПолучитьБизнесПроцесс(Узел, ОбъектИд, ОбъектБизнесПроцесс) Экспорт
	
	Если ОбъектИд.type = "DMBusinessProcessInvitation" Тогда
		Ответ = ОбработкаЗапросовXDTOКорп.ПолучитьБППриглашение(Узел, ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMComplexBusinessProcess" Тогда
		Ответ = ОбработкаЗапросовXDTOКорп.ПолучитьБПКомплексныйПроцесс(Узел, ОбъектБизнесПроцесс);
		
	Иначе 
		Ответ = Неопределено;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает бизнес-процесс, заполненный по умолчанию либо по шаблону, если подходит единственный
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСостояниеНовогоОбъекта
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewBusinessProcessRequest
//   ТипОтвета - Строка - имя XDTO-типа желаемого ответа, обычно DMGetNewBusinessProcessResponse 
// Возвращаемое значение:
//   ОбъектXDTO типа ТипОтвета, обычно DMGetNewBusinessProcessResponse, или
//   Неопределено - признак необходимости продолжить получение процесса
// 
Функция ПолучитьСостояниеНовогоОбъекта(Сообщение, ТипОтвета) Экспорт
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект(ТипОтвета);
	Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
	
	Тип = Сообщение.type;
	
	Предмет = Неопределено;
	Если Сообщение.Установлено("targetId") Тогда
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.targetId);
	КонецЕсли;
	
	ШаблонБизнесПроцесса = Неопределено;
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetBusinessProcessByTemplateRequest") Тогда
		ШаблонБизнесПроцесса = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTemplateId);
	КонецЕсли;
	
	Если Тип = "DMBusinessProcessInvitation" Тогда
		БПОбъект = БизнесПроцессы.Приглашение.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Принять участие в'; en = 'Attend to'");
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьНовыйБизнесПроцессПоШаблону(
			БПОбъект, Предмет, "ШаблоныПриглашения", ШаблонБизнесПроцесса);
			
		Ответ.object = ОбработкаЗапросовXDTOКорп.ПолучитьБППриглашение(Узел, БПОбъект);
		
	ИначеЕсли Тип = "DMComplexBusinessProcess" Тогда
		БПОбъект = БизнесПроцессы.КомплексныйПроцесс.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Обработка'; en = 'Processing'");
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьНовыйБизнесПроцессПоШаблону(
			БПОбъект, Предмет, "ШаблоныКомплексныхБизнесПроцессов", ШаблонБизнесПроцесса);
			
		Ответ.object = ОбработкаЗапросовXDTOКорп.ПолучитьБПКомплексныйПроцесс(Узел, БПОбъект);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Дополнительная обработка при записи XDTO объекта процесса
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаписатьБизнесПроцесс
// 
// Параметры:
//   Объект - ОбъектXDTO типа, наследующего DMBusinessProcess
// Возвращаемое значение:
//   БизнесПроцессСсылка - ссылка на записанный бизнес-процесс, или
//   Неопределено - признак необходимости продолжить запись бизнес-процесса
//
Функция ЗаписатьБизнесПроцесс(Узел, Объект, СоздатьНовый) Экспорт
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMComplexBusinessProcess") Тогда
		Ссылка = ОбработкаЗапросовXDTOКорп.ЗаписатьБПКомплексныйПроцесс(Объект, СоздатьНовый);
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInvitation") Тогда
		Ссылка = ОбработкаЗапросовXDTOКорп.ЗаписатьБППриглашение(Объект, СоздатьНовый);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
	Ответ = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьБизнесПроцесс(Узел, ОбъектИд);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает состояние документа по ссылке на документ
// Вызывается из ОбработкаЗапросовXDTOДокументы
//
// Параметры:
//   СсылкаНаДокумент - СправочникСсылка.<...>Документы - проверяемый документ
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СостоянияДокументов - состояние документа  
//
Функция ПолучитьСостояниеДокумента(СсылкаНаДокумент) Экспорт
	
	Возврат Делопроизводство.ПолучитьПоследнееСостояниеДокумента(СсылкаНаДокумент);
	
КонецФункции

// Дополнительная обработка получения шаблона процесса
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьШаблоныБизнесПроцесса
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessTemplatesRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetBusinessProcessTemplatesResponse, или
//   Неопределено - признак необходимости продолжить получение шаблонов
// 
Функция ПолучитьШаблоныБизнесПроцесса(Сообщение) Экспорт

	Возврат ОбработкаЗапросовXDTOКорп.ПолучитьШаблоныБизнесПроцесса(Сообщение);

КонецФункции

// Возвращает тип процесса XDTO по ссылке на шаблон процесса
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьТипПроцессаXDTOПоШаблону
//
// Параметры:
//   ШаблонСсылка - СправочникСсылка.Шаблоны<...>
// Возвращаемое значение:
//   Строка - имя типа XDTO, наследника DMBusinessProcess, или
//   Неопределено - признак необходимости продолжить получение имени типа
// 
Функция ПолучитьТипПроцессаXDTOПоШаблону(ШаблонСсылка) Экспорт
	
	Если ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		Возврат "DMBusinessProcessInvitation"
		
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		Возврат "DMComplexBusinessProcess"
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// Получение HTML-представления карточки задачи

// Получает HTML-представление карточки задачи
// Вызывается из ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьHTMLФормы
//
// Параметры:
//   СсылкаНаЗадачу - ЗадачаСсылка.ЗадачаИсполнителя
//   ИмяФормы - Строка - имя формы задачи
// Возвращаемое значение:
//   Строка - HTML-представление задачи
// 
Функция ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаНаЗадачу, ИмяФормы) Экспорт
		
	// Заголовок HTML.
	Результат = "<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
		|<html>
			|<head>
				|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
				|<title></title>
				|<style type=""text/css"">
				|	.TextStyle 	{font-family:MS Sans Serif; font-size:12px;}
				|</style>
			|</head>
		|<body topmargin=0 leftmargin=0 scroll=auto>
			|<table width:auto; class = ""TextStyle"" cellpadding=""2"">
				|<tbody>";
	
	// Заполняется шапка, общая для всех задач.
	
	// Задача.
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Задача", СтрЗаменить(СсылкаНаЗадачу.Наименование, """","'"));

	// Предмет.
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(СсылкаНаЗадачу);
	Для Каждого Предмет Из Предметы Цикл
		ObjectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Предмет);
		СтрокаПредмет = ?(ПустаяСтрока(СтрокаПредмет),"","<br>") +"<a href=""" + ObjectId.type + "$" + ObjectId.id 
			+ """ title = ""Открыть карточку предмета"">" + Строка(Предмет) + " </a>";	
	КонецЦикла;
	Результат = Результат + "<tr><td><b>Предмет:</b></td><td text-align:left;>" + СтрокаПредмет + "</td></tr>" ;
	 
	// Описание.
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Описание",  СсылкаНаЗадачу.Описание);
	
	// Срок.
	СрокИсполнения = ?(ЗначениеЗаполнено(СсылкаНаЗадачу.СрокИсполнения), СсылкаНаЗадачу.СрокИсполнения, "");
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Срок", СрокИсполнения);
	
	// Исполнитель.
	Если ЗначениеЗаполнено(СсылкаНаЗадачу.Исполнитель) Тогда
		Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Исполнитель", СсылкаНаЗадачу.Исполнитель);
	Иначе
		СтрокаИсполнитель = Строка(СсылкаНаЗадачу.РольИсполнителя);
		Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Исполнитель", СтрокаИсполнитель);
	КонецЕсли;
	
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Важность", Строка(СсылкаНаЗадачу.Важность));
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Автор", СсылкаНаЗадачу.Автор);
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Дата", СсылкаНаЗадачу.БизнесПроцесс.ДатаНачала);
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Номер", СсылкаНаЗадачу.Номер);
	
	// Состояние задачи.
	Если СсылкаНаЗадачу.Выполнена Тогда
		СостояниеЗадачи = "Выполнена";
	Иначе
		СостояниеЗадачи = "В процессе выполнения";
	КонецЕсли;
	Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Состояние",  СостояниеЗадачи);	
	
	
	// Дополняем форму задачи элементами, специфичными только для нее.
	Если ТипЗнч(СсылкаНаЗадачу.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Если Имяформы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиКонтролера" Тогда
			Результат = Результат + "</tbody></table>";
			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить);
			ТочкаМаршрутаОтвИсполнение = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение;			
			СформироватьТаблЧастьФормыКонтролера(Результат, СсылкаНаЗадачу, ТочкиМаршрута, ТочкаМаршрутаОтвИсполнение);
		КонецЕсли;
		
		Если ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя" Тогда
			// Список соисполнителей.
			Результат = Результат + "</tbody></table>";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			               |			ТОГДА ЗадачаИсполнителя.Исполнитель
			               |		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
			               |	КОНЕЦ КАК Исполнитель,
			               |	ЗадачаИсполнителя.Наименование,
			               |	ЗадачаИсполнителя.Выполнена,
			               |	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
			               |	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
			               |	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
			               |ИЗ
			               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			               |ГДЕ
			               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			               |	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
				
			Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаЗадачу.БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			
			СформироватьТаблицуИсполнителей(Результат, Запрос, "Исполнители:");
		КонецЕсли;
		
		Если ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиПроверяющего" Тогда
			Результат = Результат + "</tbody></table>";
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсполнениеРезультатыПроверки.НомерИтерации КАК Номер_итерации,
			|	ВЫБОР
			|		КОГДА ИсполнениеРезультатыПроверки.ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Ответственное_исполнение,
			|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя КАК Задача_исполнителя,
			|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего КАК Задача_проверяющего,
			|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку КАК Отправлено_на_доработку,
			|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК Комментарий_проверяющего
			|ИЗ
			|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
			|ГДЕ
			|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего";
			Запрос.УстановитьПараметр("ЗадачаПроверяющего", СсылкаНаЗадачу);
			Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
			
			СформироватьТаблицуИсполнителей(Результат, Запрос, "Исполнители:");

		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаЗадачу.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Если Имяформы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиКонтролера" Тогда
			Результат = Результат + "</tbody></table>";
			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить);
			ТочкаМаршрутаОтвИсполнение = Неопределено;
			СформироватьТаблЧастьФормыКонтролера(Результат, СсылкаНаЗадачу, ТочкиМаршрута, ТочкаМаршрутаОтвИсполнение);
		КонецЕсли;
		
		Если Имяформы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиПроверяющего" Тогда			
			// История выполнения.
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("История выполнения", 
				РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаЗадачу.БизнесПроцесс));
			Результат = Результат + "</tbody></table>";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаЗадачу.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда
			// Циклы согласования.
			НайденнаяСтрока = СсылкаНаЗадачу.БизнесПроцесс.РезультатыСогласования.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Цикл", НомерИтерации);
			Результат = Результат + "</tbody></table>";
		КонецЕсли;
		
		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться" Тогда			
			
			// Циклы согласования.
			НайденнаяСтрока =  СсылкаНаЗадачу.БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			
			// Результат согласования.
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
			СтрокиИтерации = СсылкаНаЗадачу.БизнесПроцесс.РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
			КонецЦикла;
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Результат согласования", РезультатСогласования);
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Цикл", НомерИтерации);
			Результат = Результат + "</tbody></table>";
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗадачаЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
				|	ЗадачаЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения,
				|	ЗадачаЗадачаИсполнителя.Исполнитель КАК Исполнитель,
				|	РезультатыСогласования.РезультатСогласования КАК Результат_согласования,
				|	РезультатыСогласования.НомерИтерации КАК Номер_итерации
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
				|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
				|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыСогласования.ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
				|	И РезультатыСогласования.НомерИтерации = &НомерИтерации";
				
			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);				
			Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаЗадачу.БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
			Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
			
			СформироватьТаблицуИсполнителей(Результат, Запрос, "Ход исполнения:");

			
		КонецЕсли;
				
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаЗадачу.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда
			// Циклы утверждения.
			НайденнаяСтрока = СсылкаНаЗадачу.БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Цикл", НомерИтерации);
			Результат = Результат + "</tbody></table>";
		КонецЕсли;
		
		Если Имяформы = "БизнесПроцесс.Утверждение.Форма.ФормаЗадачиОзнакомиться" Тогда			
			// Циклы утверждения.
			НайденнаяСтрока = СсылкаНаЗадачу.БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			
			// Результат утверждения.
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
			СтрокиИтерации = СсылкаНаЗадачу.БизнесПроцесс.РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл
				
				РезультатВыполнения = Строка.ЗадачаИсполнителя.РезультатВыполнения;
				УтверждающееЛицо = Строка.ЗадачаИсполнителя.Исполнитель;
				ДатаУтверждения = Строка.ЗадачаИсполнителя.ДатаИсполнения;
				
				Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
					РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Результат утверждения", РезультатУтверждения);
			Результат = Результат + ПолучитьHTMLПредставлениеРеквизита("Цикл", НомерИтерации);
			Результат = Результат + "</tbody></table>";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Результат + "</body></html>";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает HTML-представление реквизита
//
Функция ПолучитьHTMLПредставлениеРеквизита(ИмяРеквизита, ЗначениеРеквизита)
	
	ЗначениеРеквизитаСтр = "&nbsp;";
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Если ТипЗнч(ЗначениеРеквизита) <> Тип("Строка") Тогда
			ЗначениеРеквизитаСтр = Строка(ЗначениеРеквизита);	 
		Иначе
			ЗначениеРеквизитаСтр = ЗначениеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
	
	Результат = "<tr><td class = ""TextStyle"" valign=""top""><b>" + ИмяРеквизита + ":</b></td><td text-align:left; >" + ЗначениеРеквизитаСтр + "</td></tr>";
	
		
	Возврат Результат;
	
КонецФункции

// Дополняет HTML-представление задачи таблицей исполнителей
//
Процедура СформироватьТаблЧастьФормыКонтролера(Результат, СсылкаНаЗадачу, ТочкиМаршрута, ТочкаМаршрутаОтвИсполнение)
	
	//список исполнителей
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Ответственный_исполнитель,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.Исполнитель
		|		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)";

	Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаЗадачу.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", ТочкаМаршрутаОтвИсполнение);
	
	СформироватьТаблицуИсполнителей(Результат, Запрос, "Ход исполнения:");
	
КонецПроцедуры

// Дополняет HTML-представление представлением переданной таблицы исполнителей
//
Процедура СформироватьТаблицуИсполнителей(Результат, Запрос, Заголовок)
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() > 0 Тогда
		Результат = Результат + "&nbsp;<span class = ""TextStyle""><b>" + Заголовок + "</b></span>";
		Результат = Результат + "&nbsp;<table border=""1"" class = ""TextStyle""><tbody><tr  align=""center"" class = ""PropName"">";
		Для Каждого Столбец Из Выборка.Колонки Цикл
			Результат = Результат + "<td><b>" + СтрЗаменить(Столбец.Имя,"_"," ") + "</b></td>";
		КонецЦикла;
		Результат = Результат + "</tr>";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Выборка Цикл
		Результат = Результат + "<tr class = ""PropValue"">";
		Для Счетчик = 0 ПО Выборка.Колонки.Количество()-1 Цикл
			Результат = Результат + "<td>" + ?(ЗначениеЗаполнено(СтрокаТаблицы[Счетчик]), СтрокаТаблицы[Счетчик], "&nbsp;") + "</td>";
		КонецЦикла;
		Результат = Результат + "</tr>";
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		Результат = Результат + "</tbody></table>";	
	КонецЕсли;

КонецПроцедуры

// Добавляет строку в таблицу соответствия типов
// 
Процедура ДобавитьСтроку(Таблица, ИмяXDTO, ИмяДО) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяXDTO = ИмяXDTO;
	НоваяСтрока.ИмяДО = ИмяДО;
	
КонецПроцедуры

#КонецОбласти
