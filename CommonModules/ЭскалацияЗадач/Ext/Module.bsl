////////////////////////////////////////////////////////////////////////////////
// Эскалация задач: модуль для работы с эскалацией и автоматическим выполнением задач.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает список значений доступных функций автоподстановки правила эскалации задач.
//
// Возвращаемое значение:
//   Массив - Список доступных функций автоподстановки.
//
Функция ДоступныеАвтоподстановки() Экспорт
	
	ДоступныеФункции = Новый Массив;
	
	ДоступныеФункции.Добавить(НСтр("ru = 'Автор процесса'; en = 'Author of process'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Непосредственный руководитель автора процесса'; en = 'Line manager of process author'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Автор документа'; en = 'Document author'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Непосредственный руководитель автора документа'; en = 'Immediate supervisor of the document author'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Ответственный за документ'; en = 'Responsible for document'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Непосредственный руководитель ответственного за документ'; en = 'Immediate supervisor of the document reponsible'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Руководитель организации'; en = 'Head of company'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Адресат документа'; en = 'Document addressee'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Председатель мероприятия'; en = 'Chairman of the event'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Секретарь мероприятия'; en = 'Secretary of the event'"));
	ДоступныеФункции.Добавить(НСтр("ru = 'Непосредственный руководитель исполнителя'; en = 'Immediate supervisor of the task performer'"));
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Обработчик регламетного задания "Эскалация задач".
//
Процедура ЭскалацияЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЭскалацияЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПравилаЭскалации = ПравилаЭскалации();
	АктивныеЗадачи = АктивныеЗадачи(ПравилаЭскалации);
	Для Каждого Задача Из АктивныеЗадачи Цикл
		
		ПравилоЭскалации = ПодходящееПравилоЭскалации(Задача, ПравилаЭскалации);
		Если ЗначениеЗаполнено(ПравилоЭскалации) Тогда
			
			Попытка
				Если ПрименитьПравилоЭскалации(Задача, ПравилоЭскалации) Тогда
					ТекстИнформации = СтрШаблон(
						НСтр("ru = 'Правило эскалации %1 применено к задаче %3.
						|Правило эскалации: %2
						|Задача: %4';
						|en = 'Escalation rule %1 has been applied to task %3.
						|Escalation rule: %2
						|Task: %4'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ПравилоЭскалации.Представление,
						ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
						Задача.Представление,
						ПолучитьНавигационнуюСсылку(Задача.Ссылка));
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Информация,
						Метаданные.Справочники.ПравилаЭскалацииЗадач,
						Задача.Ссылка,
						ТекстИнформации);
				КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при применении правила эскалации %1 к задаче %3:
						|%5
						|Правило эскалации: %2
						|Задача: %4';
						|en = 'Error applying escalation rule %1 to task %3:
						|%5
						|Escalation rule: %2
						|Task: %4'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ПравилоЭскалации.Представление,
					ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
					Задача.Представление,
					ПолучитьНавигационнуюСсылку(Задача.Ссылка),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПравилаЭскалацииЗадач,
					Задача.Ссылка,
					ТекстОшибки);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует заголовок команды "Правила эскалации задач по шаблону".
//
// Параметры:
//  Шаблон	 - СправочникСсылка	 - Шаблон процесса.
// 
// Возвращаемое значение:
//  Строка - Заголовок команды.
//
Функция ЗаголовокКомандыПравилаЭскалацииЗадачПоШаблону(Шаблон) Экспорт
	
	Заголовок = НСтр("ru = 'Нет правил эскалации для шаблона'; en = 'There are no escalation rules for template'");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭскалациюЗадач") И ЗначениеЗаполнено(Шаблон) Тогда
		КоличествоПравилЭскалации = КоличествоПравилЭскалацииПоШаблону(Шаблон);
		Если КоличествоПравилЭскалации > 0 Тогда
			ПараметрыПредметаИсчисления = Новый Массив;
			ПараметрыПредметаИсчисления.Добавить(НСтр("ru = 'правило эскалации'; en = 'escalation rule'"));
			ПараметрыПредметаИсчисления.Добавить(НСтр("ru = 'правила эскалации'; en = 'escalation rules'"));
			ПараметрыПредметаИсчисления.Добавить(НСтр("ru = 'правил эскалации'; en = 'escalation rules'"));
			ПараметрыПредметаИсчисления = СтрСоединить(ПараметрыПредметаИсчисления, ",");
			ПодписьКоличествоПравил = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоПравилЭскалации,
				ПараметрыПредметаИсчисления);
			Заголовок = СтрШаблон(НСтр("ru = 'Для шаблона действует %1'; en = 'There are %1 for template'"), ПодписьКоличествоПравил);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Устанавливает условное оформление правила эскалации задач в списке.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - Содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеСписка(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значение автоподстановки для задачи.
//
// Параметры:
//  Автоподстановка - Строка - представление автоподстановки в виде строки
//  БизнесПроцесс - БизнесПроцессСсылка - процесс, для которого вычисляется автоподстановка.
//  ИмяПредмета - Строка - Имя предета процесса.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Значение автоподстановки.
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, БизнесПроцесс, ИмяПредмета, Задача)
	
	АвтоподстановкиПоПредмету = АвтоподстановкиПоПредмету();
	Если АвтоподстановкиПоПредмету.Найти(Автоподстановка) <> Неопределено Тогда
		Автоподстановка = СтрШаблон("%1.%2", ИмяПредмета, Автоподстановка);
	КонецЕсли;
	
	АвтоподстановкиПоЗадаче =АвтоподстановкиПоЗадаче();
	Если АвтоподстановкиПоЗадаче.Найти(Автоподстановка) <> Неопределено Тогда
		Объект = Задача.ПолучитьОбъект();
	Иначе
		Объект = БизнесПроцесс.ПолучитьОбъект();
	КонецЕсли;
	
	ЗначениеАвтоподстановки = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Автоподстановка, Объект);
	
	Возврат ЗначениеАвтоподстановки;
	
КонецФункции

// Формирует таблицу правил эскалации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Правила эскалации.
//
Функция ПравилаЭскалации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаЭскалацииЗадач.Ссылка КАК Ссылка,
		|	ПравилаЭскалацииЗадач.Представление КАК Представление,
		|	ПравилаЭскалацииЗадач.Код КАК Код,
		|	ПравилаЭскалацииЗадач.Действие КАК Действие,
		|	ПравилаЭскалацииЗадач.НаправлениеЭскалации КАК НаправлениеЭскалации,
		|	ПравилаЭскалацииЗадач.ВариантВыполнения КАК ВариантВыполнения,
		|	ПравилаЭскалацииЗадач.Приоритет КАК Приоритет,
		|	ПравилаЭскалацииЗадач.ВариантСрока КАК ВариантСрока,
		|	ПравилаЭскалацииЗадач.Срок КАК Срок,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 02.11.2018 {
		|	ПравилаЭскалацииЗадач.ра_ЭскалацияНаРуководителя КАК ра_ЭскалацияНаРуководителя,
		// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 02.11.2018 } 
		|	ПравилаЭскалацииЗадач.ДополнительныеУсловия.(
		|		Условие,
		|		ЗначениеУсловия
		|	) КАК ДополнительныеУсловия,
		|	ПравилаЭскалацииЗадач.Процессы.(
		|		ТипПроцесса,
		|		Шаблон,
		|		ТочкаМаршрута,
		|		ШаблонКомплексногоПроцесса
		|	)
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	Результат = Запрос.Выполнить();
	ПравилаЭскалации = Результат.Выгрузить();
	
	Возврат ПравилаЭскалации;
	
КонецФункции

// Формирует таблицу активных задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Активные задачи.
//
Функция АктивныеЗадачи(ПравилаЭскалации)
	
	Если ПравилаЭскалации.Количество() = 0 Тогда
		АктивныеЗадачи = Новый ТаблицаЗначений;
		Возврат АктивныеЗадачи;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	ЭтотУзелОбмена = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	КонструкторТекстаЗапроса = Новый Массив;
	
	// Временная таблица ОтборПоПроцессам.
	ТекстЗапросаОтборПоПроцессам = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборПоПроцессам.Шаблон КАК Шаблон,
		|	ОтборПоПроцессам.ТочкаМаршрута КАК ТочкаМаршрута
		|ПОМЕСТИТЬ ОтборПоПроцессам
		|ИЗ
		|	&ОтборПоПроцессам КАК ОтборПоПроцессам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Шаблон,
		|	ТочкаМаршрута";
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаОтборПоПроцессам);
	
	// Временная таблица ДанныеЗадач.
	ТекстЗапросаДанныеЗадач = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.Представление КАК Представление,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.Проект КАК Проект,
		|	ЗадачаИсполнителя.Важность КАК ВажностьЗадачи,
		|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ЗадачаИсполнителя.БизнесПроцесс.Шаблон КАК ШаблонПроцесса,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЭскалированныеЗадачиСрезПоследних.ПравилоЭскалации КАК ОбработанноеПравилоЭскалации
		|ПОМЕСТИТЬ ДанныеЗадач
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|			И (ДанныеБизнесПроцессов.УзелОбмена = &ЭтотУзелОбмена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеЗадачи.СрезПоследних КАК ЭскалированныеЗадачиСрезПоследних
		|		ПО ЗадачаИсполнителя.Ссылка = ЭскалированныеЗадачиСрезПоследних.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоПроцессам КАК ОтборПоПроцессам
		|		ПО ЗадачаИсполнителя.БизнесПроцесс.Шаблон = ОтборПоПроцессам.Шаблон
		|			И ЗадачаИсполнителя.ТочкаМаршрута = ОтборПоПроцессам.ТочкаМаршрута
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
	ТипСроков = ТипСроков(ПравилаЭскалации);
	Если ТипСроков = "СоСроком" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)";
	ИначеЕсли ТипСроков = "Просроченные" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
			|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаДанныеЗадач);
	
	// Добавляем временные таблицы для получения данных предмета.
	ИспользуютсяДанныеПредмета = ИспользуютсяДанныеПредмета(ПравилаЭскалации);
	Если ИспользуютсяДанныеПредмета Тогда
		
		// Временная таблица ПредметыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЗадачаИсполнителяПредметы.Ссылка КАК Задача,
			|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
			|	ЗадачаИсполнителяПредметы.ИмяПредмета КАК ИмяПредмета,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ВнутренниеДокументы
			|			ТОГДА 15
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ВходящиеДокументы
			|			ТОГДА 14
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ИсходящиеДокументы
			|			ТОГДА 13
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Мероприятия
			|			ТОГДА 12
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ПротоколыМероприятий
			|			ТОГДА 11
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Проекты
			|			ТОГДА 10
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ПроектныеЗадачи
			|			ТОГДА 9
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Контрагенты
			|			ТОГДА 8
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Файлы
			|			ТОГДА 7
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Документ.ВходящееПисьмо
			|			ТОГДА 6
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Документ.ИсходящееПисьмо
			|			ТОГДА 5
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ТемыОбсуждений
			|			ТОГДА 4
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.СообщенияОбсуждений
			|			ТОГДА 3
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Документ.Бронь
			|			ТОГДА 2
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.УведомленияПрограммы
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Приоритет,
			|	ЗадачаИсполнителяПредметы.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ПредметыЗадач
			|ИЗ
			|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗадач КАК ДанныеЗадач
			|		ПО ЗадачаИсполнителяПредметы.Ссылка = ДанныеЗадач.Ссылка
			|ГДЕ
			|	ЗадачаИсполнителяПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)");
		
		// Временная таблица ОсновныеПредметыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ПредметыЗадач.Задача КАК Задача,
			|	ПредметыЗадач.Предмет КАК Предмет,
			|	ПредметыЗадач.ИмяПредмета КАК ИмяПредмета
			|ПОМЕСТИТЬ ДанныеОсновногоПредмета
			|ИЗ
			|	ПредметыЗадач КАК ПредметыЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПредметыЗадач КАК ПредметыЗадач1
			|		ПО ПредметыЗадач.Задача = ПредметыЗадач1.Задача
			|			И (ПредметыЗадач.Приоритет < ПредметыЗадач1.Приоритет
			|				ИЛИ ПредметыЗадач.Приоритет = ПредметыЗадач1.Приоритет
			|					И ПредметыЗадач.НомерСтроки > ПредметыЗадач1.НомерСтроки)
			|ГДЕ
			|	ПредметыЗадач1.Задача ЕСТЬ NULL");
		
	КонецЕсли;
	
	// Временная таблица ДанныеКомплексногоПроцесса.
	КонструкторТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеЗадач.Ссылка КАК Задача,
		|	КомплексныйПроцессЭтапы.Ссылка КАК КомплексныйПроцесс
		|ПОМЕСТИТЬ ДанныеКомплексногоПроцесса
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
		|		ПО ДанныеЗадач.БизнесПроцесс = КомплексныйПроцессЭтапы.ЗапущенныйБизнесПроцесс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеЗадач.Ссылка,
		|	СхемыКомплексныхПроцессов.ВладелецСхемы
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов КАК СхемыКомплексныхПроцессов
		|			ПО СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = СхемыКомплексныхПроцессов.Ссылка
		|		ПО ДанныеЗадач.БизнесПроцесс = СхемыКомплексныхПроцессовПараметрыДействий.Процесс");
	
	// Добавляем временные таблицы для получения значения АвторЯвляется.
	ЕстьДополнительноеУсловиеАвторЯвляется = 
		ЕстьДополнительноеУсловие(ПравилаЭскалации, Перечисления.УсловияПравилЭскалацииЗадач.АвторЯвляется);
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		
		// Временная таблица АвторыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеЗадач.Автор КАК Автор
			|ПОМЕСТИТЬ АвторыЗадач
			|ИЗ
			|	ДанныеЗадач КАК ДанныеЗадач
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Автор");
		
		// Временная таблица ДанныеАвторовЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АвторыЗадач.Автор КАК Автор,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА НЕ ОтветственныеЛицаОрганизаций.Пользователь ЕСТЬ NULL 
			|				ТОГДА 2
			|			КОГДА НЕ СтруктураПредприятия.Руководитель ЕСТЬ NULL 
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК АвторЯвляется
			|ПОМЕСТИТЬ ДанныеАвторовЗадач
			|ИЗ
			|	АвторыЗадач КАК АвторыЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизаций
			|		ПО (ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации))
			|			И АвторыЗадач.Автор = ОтветственныеЛицаОрганизаций.Пользователь
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ПО АвторыЗадач.Автор = СтруктураПредприятия.Руководитель
			|
			|СГРУППИРОВАТЬ ПО
			|	АвторыЗадач.Автор");
		
	КонецЕсли;
	
	// Результат запроса - реквизиты.
	КонструкторРезультатаЗапроса = Новый Массив;
	КонструкторРезультатаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеЗадач.Ссылка КАК Ссылка,
		|	ДанныеЗадач.Дата КАК Дата,
		|	ДанныеЗадач.Представление КАК Представление,
		|	ДанныеЗадач.СрокИсполнения КАК СрокИсполнения,
		|	0 КАК Срок,
		|	0 КАК Возраст,
		|	ДанныеЗадач.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеЗадач.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ДанныеЗадач.Проект КАК Проект,
		|	ДанныеЗадач.ВажностьЗадачи КАК ВажностьЗадачи,
		|	ДанныеЗадач.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ДанныеЗадач.ШаблонПроцесса КАК ШаблонПроцесса,
		|	ДанныеЗадач.Исполнитель КАК Исполнитель,
		|	ДанныеЗадач.ОбработанноеПравилоЭскалации КАК ОбработанноеПравилоЭскалации,
		|	НЕ ДанныеКомплексногоПроцесса.Задача ЕСТЬ NULL  КАК ВходитВКомплексныйПроцесс");
	
	// Добавляем в результат запроса данные предмета - реквизиты.
	Если ИспользуютсяДанныеПредмета Тогда
		КонструкторРезультатаЗапроса.Добавить(
			",
			|	ДанныеОсновногоПредмета.Предмет КАК ОсновнойПредмет,
			|	ДанныеОсновногоПредмета.ИмяПредмета КАК ИмяОсновногоПредмета");
	КонецЕсли;
	
	// Добавляем в результат запроса АвторЯвляется - реквизит.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			",
			|	ВЫБОР
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемОрганизации)
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемПодразделения)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.НеРуководителем)
			|	КОНЕЦ КАК АвторЯвляется");
	КонецЕсли;
	
	// Результат запроса - источники.
	КонструкторРезультатаЗапроса.Добавить(
		"
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКомплексногоПроцесса КАК ДанныеКомплексногоПроцесса
		|		ПО ДанныеЗадач.Ссылка = ДанныеКомплексногоПроцесса.Задача");
	
	// Добавляем в результат запроса данные предмета - источник.
	Если ИспользуютсяДанныеПредмета Тогда
		КонструкторРезультатаЗапроса.Добавить(
			"
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОсновногоПредмета КАК ДанныеОсновногоПредмета
			|		ПО ДанныеЗадач.Ссылка = ДанныеОсновногоПредмета.Задача");
	КонецЕсли;
	
	// Добавляем в результат запроса АвторЯвляется - источник.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			"
			|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеАвторовЗадач КАК ДанныеАвторовЗадач
			|		ПО ДанныеЗадач.Автор = ДанныеАвторовЗадач.Автор");
	КонецЕсли;
	
	КонструкторТекстаЗапроса.Добавить(СтрСоединить(КонструкторРезультатаЗапроса, ""));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(КонструкторТекстаЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭтотУзелОбмена", ЭтотУзелОбмена);
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	ОтборПоПроцессам = ОтборПоПроцессам(ПравилаЭскалации);
	Запрос.УстановитьПараметр("ОтборПоПроцессам", ОтборПоПроцессам);
	Результат = Запрос.Выполнить();
	АктивныеЗадачи = Результат.Выгрузить();
	
	// Удаляем задачи, не подходящие под отбор по процессам с учетом признака комплексных процессов.
	КоличествоЭлементов = АктивныеЗадачи.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Строка = АктивныеЗадачи[КоличествоЭлементов - Индекс];
		ОтборПравилаЭскалации = Новый Структура;
		ОтборПравилаЭскалации.Вставить("Шаблон", Строка.ШаблонПроцесса);
		ОтборПравилаЭскалации.Вставить("ТочкаМаршрута", Строка.ТочкаМаршрута);
		ОтборПравилаЭскалации.Вставить("ВходитВКомплексныйПроцесс", Строка.ВходитВКомплексныйПроцесс);
		Если ОтборПоПроцессам.НайтиСтроки(ОтборПравилаЭскалации).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		АктивныеЗадачи.Удалить(Строка);
	КонецЦикла;
	
	// Заполняем вычисляемые данные задачи.
	Для Каждого АктивнаяЗадача Из АктивныеЗадачи Цикл
		АктивнаяЗадача.Срок = СрокВСекундах(
			ДатаПроверки,
			АктивнаяЗадача.СрокИсполнения,
			АктивнаяЗадача.Исполнитель);
		АктивнаяЗадача.Возраст = СрокВСекундах(
			АктивнаяЗадача.Дата,
			ДатаПроверки,
			АктивнаяЗадача.Исполнитель);
		Если АктивнаяЗадача.ВходитВКомплексныйПроцесс И Не ЗначениеЗаполнено(АктивнаяЗадача.ШаблонПроцесса) Тогда
			ШаблонЭтапаПроцесса = БизнесПроцессыИЗадачиСервер.ШаблонЭтапаПроцесса(АктивнаяЗадача.БизнесПроцесс);
			Если ШаблонЭтапаПроцесса <> Неопределено Тогда
				АктивнаяЗадача.ШаблонПроцесса = ШаблонЭтапаПроцесса;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если АктивныеЗадачи.Колонки.Найти("ИмяОсновногоПредмета") = Неопределено Тогда
		АктивныеЗадачи.Колонки.Добавить("ИмяОсновногоПредмета", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат АктивныеЗадачи;
	
КонецФункции

// Формирует строку для события журнала регистрации.
//
// Возвращаемое значение:
//  Строка - Событие журнала регистрации.
//
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Эскалация задач'; en = 'Task escalation'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Применяет правило эскалации для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
Функция ПрименитьПравилоЭскалации(Задача, ПравилоЭскалации)
	
	// Если правило эскалации было применено к задаче последним - не применяем его снова.
	Если Задача.ОбработанноеПравилоЭскалации = ПравилоЭскалации.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ИнформацияОбЭскалации = ИнформацияОбЭскалации();
		Если Не ЭскалацияЗадачПереопределяемый.ПрименитьПравилоЭскалации(Задача, ПравилоЭскалации, ИнформацияОбЭскалации) Тогда
			
			Если ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление Тогда
				
				НаправлениеЭскалации = ПравилоЭскалации.НаправлениеЭскалации;
				
				ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				Если ТипНаправленияЭскалации = Тип("Строка") Тогда
					ЗначениеАвтоподстановки = ПолучитьЗначениеАвтоподстановки(
						НаправлениеЭскалации,
						Задача.БизнесПроцесс,
						Задача.ИмяОсновногоПредмета,
						Задача.Ссылка);
					ТипЗначенияАвтоподстановки = ТипЗнч(ЗначениеАвтоподстановки);
					Если ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Пользователи") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.ПолныеРоли") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("Структура") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки.Исполнитель;
					КонецЕсли;
					ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				КонецЕсли;
				
				ИнфоОПеренаправлении = Новый Структура("Автоперенаправление, Исполнитель,
					|РольИсполнителя, Комментарий");
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.Пользователи") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ИнфоОПеренаправлении.РольИсполнителя = НаправлениеЭскалации;
				КонецЕсли;
				ИнфоОПеренаправлении.Комментарий = НСтр("ru = 'Перенаправлено автоматически'; en = 'Forwarded automatically'");
				ИнфоОПеренаправлении.Автоперенаправление = Истина;
				
				// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 02.11.2018 {
				ИнфоОПеренаправлении.Вставить("ЭскалацияРуководителю", ПравилоЭскалации.ра_ЭскалацияНаРуководителя);
				// ТСК Корнюшенков А.Ю. ОбменЛучшимиПрактиками 02.11.2018 } 
				
				ЗадачаПеренаправлена = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(
					Задача.Ссылка, ИнфоОПеренаправлении, , Ложь);
				Если Не ЗадачаПеренаправлена Тогда
					ТекстОшибки = НСтр("ru = 'Не удалось перенаправить задачу.'; en = 'Unable to forward the task.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				ИнформацияОбЭскалации.НовыйИсполнитель = НаправлениеЭскалации;
				
			ИначеЕсли ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.АвтоматическоеВыполнение Тогда
				
				Комментарий = КомментарийВыполненаАвтоматически(Задача, ПравилоЭскалации.ВариантВыполнения);
				ВыполнениеЗадачСервер.ВыполнитьЗадачуПоПравилуЭскалации(
					Задача.Ссылка, ПравилоЭскалации.ВариантВыполнения, Комментарий);
				
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное действие правила эскалации.'; en = 'Incorrect escalation rule action.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ИнформацияОбЭскалации.Действие = ПравилоЭскалации.Действие;
			
		КонецЕсли;
		
		РегистрыСведений.ЭскалированныеЗадачи.Добавить(Задача.Ссылка, ПравилоЭскалации.Ссылка, ИнформацияОбЭскалации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Находит подходящее для задачи правило эскалаци среди переданных правил.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПравилаЭскалацииЗадач - Правило эскалации подходит для задачи.
//
Функция ПодходящееПравилоЭскалации(Задача, ПравилаЭскалации)
	
	ПодходящееПравилоЭскалации = Неопределено;
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		Если ПроверитьПравилоЭскалации(Задача, ПравилоЭскалации) Тогда
			ПодходящееПравилоЭскалации = ПравилоЭскалации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодходящееПравилоЭскалации;
	
КонецФункции

// Проверяет что правило эскалации подходит для задачи.
// Одинаковые условия соединяются по ИЛИ друг с другом.
// Разные условия соединяются по И с соединенными по ИЛИ одинаковыми условиями.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьПравилоЭскалации(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = ПроверитьСрокПравилаЭскалации(Задача, ПравилоЭскалации)
		И ПроверитьПроцессПравилаЭскалации(Задача, ПравилоЭскалации)
		И ПроверитьДополнительныеУсловияПравилаЭскалации(Задача, ПравилоЭскалации);
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что срок правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьСрокПравилаЭскалации(Задача, ПравилоЭскалации)
	
	Если ПравилоЭскалации.ВариантСрока = Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаПросрочена Тогда
		ПроверитьПравилоЭскалации = (Задача.Срок < (ПравилоЭскалации.Срок * -1));
	ИначеЕсли ПравилоЭскалации.ВариантСрока = Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаБудетПросроченаЧерез Тогда
		ПроверитьПравилоЭскалации = (Задача.Срок < ПравилоЭскалации.Срок);
	ИначеЕсли ПравилоЭскалации.ВариантСрока = Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ВозрастЗадачи Тогда
		ПроверитьПравилоЭскалации = (Задача.Возраст > ПравилоЭскалации.Срок);
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный вариант срока.'; en = 'Unknown due date option.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что условие по процессу правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьПроцессПравилаЭскалации(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = Истина;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Шаблон", Задача.ШаблонПроцесса);
	ПараметрыОтбора.Вставить("ТочкаМаршрута", Задача.ТочкаМаршрута);
	НайденныеСтроки = ПравилоЭскалации.Процессы.НайтиСтроки(ПараметрыОтбора);
	
	ПроверитьПравилоЭскалации = НайденныеСтроки.Количество() <> 0;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что дополнительное условие по процессу правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьДополнительныеУсловияПравилаЭскалации(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = Истина;
	
	// Формирование условий.
	Условия = Новый Соответствие;
	Для Каждого Условие Из Перечисления.УсловияПравилЭскалацииЗадач Цикл
		Условия.Вставить(Условие, Новый Массив);
	КонецЦикла;
	Для Каждого УсловиеЭскалации Из ПравилоЭскалации.ДополнительныеУсловия Цикл
		МассивУсловий = Условия[УсловиеЭскалации.Условие];
		МассивУсловий.Добавить(УсловиеЭскалации);
	КонецЦикла;
	
	// Проверка условий.
	Для Каждого КлючИЗначение Из Условия Цикл
		МассивУсловий = КлючИЗначение.Значение;
		Если МассивУсловий.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПодходитУсловие = Ложь;
		Для Каждого УсловиеЭскалации Из МассивУсловий Цикл
			Если ПроверитьУсловиеПравилаЭскалации(Задача, УсловиеЭскалации) Тогда
				ПодходитУсловие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ПодходитУсловие Тогда
			ПроверитьПравилоЭскалации = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что условие эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача.
//  УсловиеЭскалации - СтрокаТаблицыЗначений - Условие эскалации.
//
// Возвращаемое значение:
//  Булево - Задача соответсвует условию.
//
Функция ПроверитьУсловиеПравилаЭскалации(Задача, УсловиеЭскалации)
	
	ПроверитьУсловиеЭскалации = Ложь;
	Если УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.Проект Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.Проект);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.АвторЯвляется Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.АвторЯвляется);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ВажностьЗадачи Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.ВажностьЗадачи);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ИсполнительВходитВРабочуюГруппу Тогда
		ПользователиВГруппах = ПользователиСерверПовтИсп.ПолучитьПользователейВГруппах();
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ГруппаСсылка", УсловиеЭскалации.ЗначениеУсловия);
		ПараметрыОтбора.Вставить("ПользователиСсылка", Задача.Исполнитель);
		НайденныеСтроки = ПользователиВГруппах.Строки.НайтиСтроки(ПараметрыОтбора);
		ПроверитьУсловиеЭскалации = НайденныеСтроки.Количество() <> 0;
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ИсполнительВходитВПодразделение Тогда
		ПользователиВПодразделениях = ПользователиСерверПовтИсп.ПолучитьПользователейВПодразделениях();
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ГруппаСсылка", УсловиеЭскалации.ЗначениеУсловия);
		ПараметрыОтбора.Вставить("ПользователиСсылка", Задача.Исполнитель);
		НайденныеСтроки = ПользователиВПодразделениях.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		ПроверитьУсловиеЭскалации = НайденныеСтроки.Количество() <> 0;
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.Исполнитель Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.Исполнитель);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ПринятаКИсполнению Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.ПринятаКИсполнению);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ИсполнительОтсутствует Тогда
		ДатаПроверкиОтсутствий = ТекущаяДатаСеанса();
		Исполнители = Новый Массив;
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(Задача.Исполнитель);
		Исполнители.Добавить(ДанныеИсполнителя);
		НастройкиПроверкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
		НастройкиПроверкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Истина;
		ТаблицаОтсутствий = Отсутствия.ПолучитьТаблицуОтсутствийИсполнителей(
			ДатаПроверкиОтсутствий,
			ДатаПроверкиОтсутствий,
			Исполнители,
			НастройкиПроверкиОтсутствий);
		ПроверитьУсловиеЭскалации = (ТаблицаОтсутствий.Количество() <> 0);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.УсловиеМаршрутизации Тогда
		ПроверитьУсловиеЭскалации = 
			РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(
				Задача.ОсновнойПредмет,
				УсловиеЭскалации.ЗначениеУсловия);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.Произвольное Тогда
		ПроверитьУсловиеЭскалации = 
			Справочники.УсловияЗадач.Проверить(
				Задача.Ссылка,
				УсловиеЭскалации.ЗначениеУсловия);
		
	КонецЕсли;
	
	Возврат ПроверитьУсловиеЭскалации;
	
КонецФункции

// Возвращает количество правил эскалации по шаблону бизнес-процесса.
//
// Параметры:
//  Шаблон - СправочникСсылка - Шаблон бизнес-процесса.
// 
// Возвращаемое значение:
//  Число - Количество правил эскалации по шаблону бизнес-процесса.
//
Функция КоличествоПравилЭскалацииПоШаблону(Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПравилаЭскалацииЗадачПроцессы.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач.Процессы КАК ПравилаЭскалацииЗадачПроцессы
		|ГДЕ
		|	ПравилаЭскалацииЗадачПроцессы.Шаблон = &Шаблон
		|	И ПравилаЭскалацииЗадачПроцессы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЭскалацииЗадачПроцессы.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач.Процессы КАК ПравилаЭскалацииЗадачПроцессы
		|ГДЕ
		|	ПравилаЭскалацииЗадачПроцессы.ШаблонКомплексногоПроцесса = &Шаблон
		|	И ПравилаЭскалацииЗадачПроцессы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.Параметры.Вставить("Шаблон", Шаблон);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// Формирует структуру информации об эскалации
// 
// Возвращаемое значение:
//  Структура - Информация об эскалации.
//
Функция ИнформацияОбЭскалации()
	
	ИнформацияОбЭскалации = Новый Структура;
	ИнформацияОбЭскалации.Вставить("Действие");
	ИнформацияОбЭскалации.Вставить("Комментарий");
	ИнформацияОбЭскалации.Вставить("Исполнитель");
	ИнформацияОбЭскалации.Вставить("НовыйИсполнитель");
	
	Возврат ИнформацияОбЭскалации;
	
КонецФункции

// Рассчитывает срок в секундах.
//
// Параметры:
//  ДатаНачала - Дата - Дата, от которой считается срок.
//  ДатаКонца - Дата - Дата, до которой считается срок.
//  Исполнитель - СправочникСсылка.Пользователи - Исполнитель, график работы которого используется.
//
// Возвращаемое значение:
//  Число - Срок в секундах.
//
Функция СрокВСекундах(ДатаНачала, ДатаКонца, Исполнитель)
	
	Если Не ЗначениеЗаполнено(ДатаКонца) Тогда
		СрокВСекундах = ДатаНачала - ДатаКонца;
		Возврат СрокВСекундах;
	КонецЕсли;
	
	СрокВСекундах = Неопределено;
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Если ИспользоватьГрафикиРаботы Тогда
		
		Попытка
			График = СрокиИсполненияПроцессовКОРП.ГрафикРаботыУчастникаПроцесса(Исполнитель);
			СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
				График.Календарь, ДатаНачала, ДатаКонца);
			Если ДатаКонца < ДатаНачала Тогда
				СрокВДнях = -1 * СрокВДнях;
			КонецЕсли;
			СекундыДатаКонца = ДатаКонца - НачалоДня(ДатаКонца);
			СекундыНачала = ДатаНачала - НачалоДня(ДатаНачала);
			СрокВСекундах = СрокВДнях * 86400 + СекундыДатаКонца - СекундыНачала;
		Исключение
			ТекстПредупреждения =
				НСтр("ru = 'Не удалось получить разность дат по календарю:'; en = 'Could not get difference between dates by calendar:'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстПредупреждения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если СрокВСекундах = Неопределено Тогда
		СрокВСекундах = ДатаКонца - ДатаНачала;
	КонецЕсли;
	
	Возврат СрокВСекундах;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ВариантВыполнения - Булево - Вариант выполнения
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(Задача, ВариантВыполнения)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Задача.БизнесПроцесс);
	Комментарий = МенеджерОбъекта.КомментарийВыполненаАвтоматически(Задача.ТочкаМаршрута, ВариантВыполнения);
	Если Не ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = НСтр("ru = 'Выполнено автоматически'; en = 'Executed automatically'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

// Определяет тип сроков правил эскалации задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  Строка - Тип сроков.
//
Функция ТипСроков(ПравилаЭскалации)
	
	Если ПравилаЭскалации.Найти(
		Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ВозрастЗадачи,
		"ВариантСрока") <> Неопределено Тогда
		
		ТипСроков = "Все";
		
	ИначеЕсли ПравилаЭскалации.Найти(
		Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаБудетПросроченаЧерез,
		"ВариантСрока") <> Неопределено Тогда
		
		ТипСроков = "СоСроком";
		
	ИначеЕсли ПравилаЭскалации.Найти(
		Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаПросрочена,
		"ВариантСрока") <> Неопределено Тогда
		
		ТипСроков = "Просроченные";
		
	Иначе
		
		ТипСроков = "Просроченные";
		
	Конецесли;
	
	Возврат ТипСроков;
	
КонецФункции

// Определяет отбор активных задач по процессам.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Отбор по процессам.
//
Функция ОтборПоПроцессам(ПравилаЭскалации)
	
	ОтборПоПроцессам = Новый ТаблицаЗначений;
	ОтборПоПроцессам.Колонки.Добавить("Шаблон", Метаданные.Справочники.ПравилаЭскалацииЗадач.ТабличныеЧасти.Процессы.Реквизиты.Шаблон.Тип);
	ОтборПоПроцессам.Колонки.Добавить("ТочкаМаршрута", Метаданные.Справочники.ПравилаЭскалацииЗадач.ТабличныеЧасти.Процессы.Реквизиты.ТочкаМаршрута.Тип);
	ОтборПоПроцессам.Колонки.Добавить("ВходитВКомплексныйПроцесс", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		
		Для Каждого Процесс Из ПравилоЭскалации.Процессы Цикл
			
			ВходитВКомплексныйПроцесс = ЗначениеЗаполнено(Процесс.ШаблонКомплексногоПроцесса);
			ДобавитьОтборПоПроцессам(ОтборПоПроцессам,
				Процесс.Шаблон,
				Процесс.ТочкаМаршрута,
				ВходитВКомплексныйПроцесс);
			Если ВходитВКомплексныйПроцесс Тогда
				ДанныеШаблона = Перечисления.ТипыПроцессовЭскалацииЗадач.ДанныеШаблона(Процесс.ТипПроцесса);
				ДобавитьОтборПоПроцессам(ОтборПоПроцессам,
					ДанныеШаблона.ПустаяСсылка,
					Процесс.ТочкаМаршрута,
					ВходитВКомплексныйПроцесс);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтборПоПроцессам;
	
КонецФункции

// Добавляет элемент отбора по процессам.
//
// Параметры:
//  ОтборПоПроцессам - ТаблицаЗначений - Отбор по процессам.
//  Шаблон - СправочникСсылка - Шаблон.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута.
//  ВходитВКомплексныйПроцесс - Булево - Входит в комплексный процесс.
//
Процедура ДобавитьОтборПоПроцессам(ОтборПоПроцессам, Шаблон, ТочкаМаршрута, ВходитВКомплексныйПроцесс)
	
	ОтборПравилаЭскалации = Новый Структура;
	ОтборПравилаЭскалации.Вставить("Шаблон", Шаблон);
	ОтборПравилаЭскалации.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ОтборПравилаЭскалации.Вставить("ВходитВКомплексныйПроцесс", ВходитВКомплексныйПроцесс);
	Если ОтборПоПроцессам.НайтиСтроки(ОтборПравилаЭскалации).Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ОтборПоПроцессам.Добавить();
	НоваяСтрока.Шаблон = Шаблон;
	НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
	НоваяСтрока.ВходитВКомплексныйПроцесс = ВходитВКомплексныйПроцесс;
	
КонецПроцедуры

// Определяет есть ли дополнительное условие в правилах эскалации задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  Булево - Условие есть в правилах.
//
Функция ЕстьДополнительноеУсловие(ПравилаЭскалации, Условие)
	
	ЕстьДополнительноеУсловие = Ложь;
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		
		Если ПравилоЭскалации.ДополнительныеУсловия.Найти(Условие, "Условие") <> Неопределено Тогда
			ЕстьДополнительноеУсловие = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДополнительноеУсловие;
	
КонецФункции

// Определяет используются ли данные предмета в правиле эскалации задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  Булево - Используются данные предмета.
//
Функция ИспользуютсяДанныеПредмета(ПравилаЭскалации)
	
	ИспользуютсяДанныеПредмета = 
		ЕстьДополнительноеУсловие(ПравилаЭскалации, Перечисления.УсловияПравилЭскалацииЗадач.УсловиеМаршрутизации);
	Если Не ИспользуютсяДанныеПредмета Тогда
		
		АвтоподстановкиПоПредмету = АвтоподстановкиПоПредмету();
		Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
			
			Если ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление
				И АвтоподстановкиПоПредмету.Найти(ПравилоЭскалации.НаправлениеЭскалации) <> Неопределено Тогда
				ИспользуютсяДанныеПредмета = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИспользуютсяДанныеПредмета;
	
КонецФункции

// Формирует массив автоподстановок по предмету.
//
// Возвращаемое значение:
//  Массив - Автоподстановки по предмету.
//
Функция АвтоподстановкиПоПредмету()
	
	АвтоподстановкиПоПредмету = Новый Массив;
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Автор документа'; en = 'Document author'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Непосредственный руководитель автора документа'; en = 'Line manager of document author'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Ответственный за документ'; en = 'Responsible for document'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Непосредственный руководитель ответственного за документ'; en = 'Line manager of responsible for document'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Руководитель организации'; en = 'Head of company'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Адресат документа'; en = 'Document addressee'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Председатель мероприятия'; en = 'Meeting chairman'"));
	АвтоподстановкиПоПредмету.Добавить(НСтр("ru = 'Секретарь мероприятия'; en = 'Meeting secretary'"));
	
	Возврат АвтоподстановкиПоПредмету;
	
КонецФункции

// Формирует массив автоподстановок по задаче.
//
// Возвращаемое значение:
//  Массив - Автоподстановки по задаче.
//
Функция АвтоподстановкиПоЗадаче()
	
	АвтоподстановкиПоЗадаче = Новый Массив;
	АвтоподстановкиПоЗадаче.Добавить(НСтр("ru = 'Непосредственный руководитель исполнителя'; en = 'Line manager of performer'"));
	
	Возврат АвтоподстановкиПоЗадаче;
	
КонецФункции

#КонецОбласти
