
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.КлиентЛицензирования.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор конфигурации.
Функция ИДКонфигурации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПолучитьИдентификаторКонфигурации();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки клиента лицензирования.

// Проверяет соответствие настроек клиента лицензирования данным аутентификации
// Интернет-поддержки.
// При несоответствии настроек логин и пароль ИПП записываются в настройки
// клиента лицензирования.
// Не используется при работе в модели сервиса.
//
// Возвращаемое значение:
//	Булево - Истина, если пользователю необходимо ввести логин и пароль,
//		Ложь - в противном случае.
//
Функция ПроверитьНастройкиКлиентаЛицензирования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеАутентификации = Неопределено;
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		
		// Если информационная база еще не обновлена, тогда
		// настройки параметров ИПП могут быть еще не перенесены
		// в безопасное хранилище данных.
		ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержкиИзУстаревшихДанных();
		
	КонецЕсли;
	
	Если ДанныеАутентификации = Неопределено Тогда
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Записать настройки клиента лицензирования в ИБ
	Если ИмяКлиентаЛицензирования() = ДанныеАутентификации.Логин Тогда
		// Логин совпадает, некорректный пароль пользователя, необходимо потребовать от
		// пользователя повторный ввод логина и пароля.
		Возврат Ложь;
	Иначе
		
		ЗаписатьДанныеАутентификацииВНастройкиКлиентаЛицензирования(ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Записывает настройки клиента лицензирования.
//
Процедура ЗаписатьДанныеАутентификацииВНастройкиКлиентаЛицензирования(Логин, Пароль)
	
	НастройкиПодключения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	УстановитьНастройкиКлиентаЛицензирования(
		Логин,
		Пароль,
		ЗначениеДопПараметра(НастройкиПодключения.ДоменРасположенияСерверовИПП));
	
КонецПроцедуры

// Возвращается имя клиента лицензирования.
//
Функция ИмяКлиентаЛицензирования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПолучитьИмяКлиентаЛицензирования();
	
КонецФункции

// Возвращается значение дополнительного параметра
// настроек клиента лицензирования.
//
Функция ЗначениеДопПараметра(ДоменнаяЗона)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"domain=%1;",
		?(ДоменнаяЗона = 0, "ru", "eu"));
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Обработка событий библиотеки.

// Вызывается при изменении данных аутентификации БИП.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	ЗаписатьДанныеАутентификацииВНастройкиКлиентаЛицензирования(Логин, Пароль);
	
КонецПроцедуры

// Вызывается при изменении в настройках пользователя доменной зоны
// расположения серверов ИПП.
//
Процедура ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона) Экспорт
	
	УстановитьНастройкиКлиентаЛицензирования(, , ЗначениеДопПараметра(ДоменнаяЗона));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Получение данных из устаревших объектов метаданных

Функция ДанныеАутентификацииПользователяИнтернетПоддержкиИзУстаревшихДанных()
	
	ЗапросПараметров = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
	|	ПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК ПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	ПараметрыИнтернетПоддержкиПользователей.Имя В (""login"", ""password"")
	|	И ПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор");
	
	ЗапросПараметров.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	
	ЛогинПользователя  = Неопределено;
	ПарольПользователя = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПараметров = ЗапросПараметров.Выполнить().Выбрать();
	Пока ВыборкаПараметров.Следующий() Цикл
		
		// В запросе регистр символов не учитывается
		ИмяПараметраНРег = НРег(ВыборкаПараметров.ИмяПараметра);
		Если ИмяПараметраНРег = "login" Тогда
			ЛогинПользователя = ВыборкаПараметров.ЗначениеПараметра;
			
		ИначеЕсли ИмяПараметраНРег = "password" Тогда
			ПарольПользователя = ВыборкаПараметров.ЗначениеПараметра;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЛогинПользователя <> Неопределено И ПарольПользователя <> Неопределено Тогда
		Возврат Новый Структура("Логин, Пароль", ЛогинПользователя, ПарольПользователя);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
