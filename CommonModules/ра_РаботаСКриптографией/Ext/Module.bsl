
Функция ПодписатьОсновнойФайл(ДанныеДляПодписи, ПараметрыПодписи) Экспорт 
	
	СтруктураРезультат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	// 1. ПОЛУЧЕНИЕ НАСТРОЕК ПОДКЛЮЧЕНИЯ К КриптоПроDSS
	//
	НастройкиПодключенияКDSS = Константы.ра_ПараметрыПодключенияКСерверуDSS.Получить();
	СтруктураНастроек = НастройкиПодключенияКDSS.Получить();
	ДобавитьВидимуюПодпись = Истина;
			
	Если не ЗначениеЗаполнено(СтруктураНастроек.Хост)
		или не ЗначениеЗаполнено(СтруктураНастроек.ЗапросТокена)
		или не ЗначениеЗаполнено(СтруктураНастроек.ЗапросПодписиДокумента) Тогда 
		
		СтруктураРезультат.Успешно = Ложь;
		СтруктураРезультат.ТекстОшибки = "Не заполнены параметры подключения к КриптоПро DSS";		
		
		Возврат СтруктураРезультат;
		
	КонецЕсли;
	
	// 2. ПОЛУЧЕНИЕ ТОКЕНА
	//
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("grant_type");
	ЗаписьJSON.ЗаписатьЗначение("password");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("client_id");
	ЗаписьJSON.ЗаписатьЗначение("ae6bb144-556a-49ba-a071-a6e872efc6c7");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("scope");
	ЗаписьJSON.ЗаписатьЗначение("dss");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("username");
	ЗаписьJSON.ЗаписатьЗначение(ПараметрыПодписи.Логин);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("password");
	ЗаписьJSON.ЗаписатьЗначение(ПараметрыПодписи.Пароль);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("resource");
	ЗаписьJSON.ЗаписатьЗначение("http%3A%2F%2Fcloudcsp%2FDssSignServer%2Frest");
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	Тело = ЗаписьJSON.Закрыть();
	
	HTTPОтвет = ОтправитьHTTPЗапросКDSS(ПараметрыПодписи, СтруктураНастроек.Хост, СтруктураНастроек.ЗапросТокена,, Тело);
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
	ОтветСтруктурой = ПрочитатьJSON(ЧтениеJSON);
		
	Если HTTPОтвет.КодСостояния <> 200 Тогда 
		
		СтруктураРезультат.Успешно = Ложь;
		
		Если ОтветСтруктурой.Свойство("error_description") Тогда 
			СтруктураРезультат.ТекстОшибки = ОтветСтруктурой.error_description;
		Иначе
			СтруктураРезультат.ТекстОшибки = "При авторизации пользователя в системе КриптоПро DSS возникла ошибка.";
		КонецЕсли;
				
		Возврат СтруктураРезультат;
		
	КонецЕсли;
	
	Если ОтветСтруктурой.Свойство("access_token") Тогда 
		Токен = ОтветСтруктурой.access_token;
	Иначе
		СтруктураРезультат.Успешно = Ложь;
		СтруктураРезультат.ТекстОшибки = "Ошибка в структуре данных по авторизации пользователя в системе КриптоПро DSS.";
		Возврат СтруктураРезультат;
	КонецЕсли;
			
	// 3. ПОДПИСЬ ДОКУМЕНТА
	//
	Если ДобавитьВидимуюПодпись Тогда
		PdfSignatureAppearanceСтрока = "{ ""Content"": [{ ""Text"": ""Подлинник электронного документа, подписанного ЭП, хранится в системе электронного документооборота Минкомсвзяи России."", 
		| ""Font"": { ""FontSize"": 4, ""FontFamily"": ""arial"", ""FontStyle"": 0, ""FontColor"": { ""Red"": 0, ""Green"": 0, ""Blue"": 0 } } }, { ""Text"": ""СВЕДЕНИЯ О СЕРТИФИКАТЕ ЭП:"", 
		| ""Font"": { ""FontSize"": 8, ""FontFamily"": ""times"", ""FontStyle"": 0, ""FontColor"": { ""Red"": 0, ""Green"": 0, ""Blue"": 0 } } }, { ""Text"": ""Кому выдан: Тестовый пользователь"", 
		| ""Font"": { ""FontSize"": 8, ""FontFamily"": ""times"", ""FontStyle"": 0, ""FontColor"": { ""Red"": 0, ""Green"": 0, ""Blue"": 0 } } }, { ""Text"": ""Кем выдан: Тестовый УЦ"", 
		| ""Font"": { ""FontSize"": 8, ""FontFamily"": ""times"", ""FontStyle"": 0, ""FontColor"": { ""Red"": 0, ""Green"": 0, ""Blue"": 0 } } }, { ""Text"": ""Действителен: с 01.07.2018 по 31.12.2018"", 
		| ""Font"": { ""FontSize"": 8, ""FontFamily"": ""times"", ""FontStyle"": 0, ""FontColor"": { ""Red"": 0, ""Green"": 0, ""Blue"": 0 } } }], 
		| ""TemplateId"": 1, 
		| ""Rect"": { ""LowerLeftX"": 215, ""LowerLeftY"": 10, ""UpperRightX"": 405, ""UpperRightY"": 85, ""BorderRadius"": 0, ""BorderWeight"": 1, ""BorderColor"": { ""Red"": 75, ""Green"": 13, ""Blue"": 100 }, ""BackgroundColor"": null, ""ContentMargin"": 5 }, 
		| ""Page"": 1 }";
		
		Поток = Новый ПотокВПамяти;
		Файл = Новый ЗаписьТекста(Поток);
		Файл.ЗаписатьСтроку(PdfSignatureAppearanceСтрока);
		Файл.Закрыть();
		
		PdfSignatureAppearance = Base64Строка(Поток.ЗакрытьИПолучитьДвоичныеДанные());
		
		СтрокаДляВидимойПодписи = ", ""PdfSignatureTemplateId"" : 1, ""PdfSignatureAppearance"" : """ + PdfSignatureAppearance + """";
		
	Иначе
		СтрокаДляВидимойПодписи = "";
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + Токен);
	Заголовки.Вставить("Content-Type", "application/json");

	Тело = "{
	|""Content"":""" + ДанныеДляПодписи + """,
	|""Name"":""Тестовый документ"",
	|""Signature"":
	|{""Type"": 3,
	|""Parameters"":{""PDFFormat"":""CMS"",""PdfCertificationLevel"":""CERTIFIED_NO_CHANGES_ALLOWED""" + СтрокаДляВидимойПодписи + "},
	|""CertificateId"":1,
	|""PinCode"":" + ПараметрыПодписи.ПинКод + "}
	|}";
	
	HTTPОтвет = ОтправитьHTTPЗапросКDSS(ПараметрыПодписи, СтруктураНастроек.Хост, СтруктураНастроек.ЗапросПодписиДокумента, Заголовки, Тело);
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	// сохраняем файл
	
	//ДвоичныеДанные = Base64Значение(СтрЗаменить(ОтветСтрокой, """", ""));
	//ДвоичныеДанные.Записать(ПутьДляПодписанного);
	
	Возврат СтруктураРезультат
	
КонецФункции

Функция ОтправитьHTTPЗапросКDSS(Параметры, Хост, Запрос, Заголовки = Неопределено, Тело)
	
	Соединение = Новый HTTPСоединение(Хост);
	
	Запрос = Новый HTTPЗапрос(Запрос);
	
	Если Заголовки <> Неопределено Тогда 
		
		Запрос.Заголовки = Заголовки;
		
	КонецЕсли;	
	
	Запрос.УстановитьТелоИзСтроки(Тело);
	
	HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	
	Возврат HTTPОтвет; 
		
КонецФункции	