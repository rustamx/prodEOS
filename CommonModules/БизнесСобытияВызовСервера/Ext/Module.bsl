////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс бизнес-событий

// Возвращает значение константы ИспользоватьБизнесСобытия
Функция ПолучитьИспользоватьБизнесСобытия() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьБизнесСобытия.Получить();
	
КонецФункции	

// Делает запись бизнес-события
// Источник - любая ссылка
// ВидСобытия - СправочникаСсылка.ВидыБизнесСобытий
// КонтекстСобытия  - ХранилищеЗначения
// Автор - Пользователь
Процедура ЗарегистрироватьСобытие(Источник, ВидСобытия, КонтекстСобытия = Неопределено, Автор = Неопределено) Экспорт
	
	Если НЕ БизнесСобытияПовтИсп.ПолучитьИспользоватьБизнесСобытия() Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Идентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ПометкаУдаления = Ложь;
	
	Если Автор = Неопределено Тогда
		МенеджерЗаписи.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Иначе
		МенеджерЗаписи.Автор = Автор;
	КонецЕсли;
	
	МенеджерЗаписи.ВидСобытия = ВидСобытия;
	
	МенеджерЗаписи.Источник = Источник;
	МенеджерЗаписи.Обработано = Ложь;
	
	Если КонтекстСобытия <> Неопределено Тогда
		МенеджерЗаписи.КонтекстСобытия = КонтекстСобытия;
	КонецЕсли;	

	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// Возвращает потребителей по виду события, используя кеширование
Функция ВыбратьПотребителей(ВидСобытия, КешПотребителей)
	
	Потребители = КешПотребителей.Получить(ВидСобытия);
	Если Потребители <> Неопределено Тогда
		Возврат Потребители;
	КонецЕсли;	
		
	Потребители = Новый Массив;
	
	Отбор = Новый Структура("ВидСобытия", ВидСобытия);
	Выборка = РегистрыСведений.ПодпискиНаБизнесСобытия.Выбрать(Отбор);
	
	Пока Выборка.Следующий() Цикл
	    Потребители.Добавить(Выборка.Потребитель);
	КонецЦикла;
	
	КешПотребителей.Вставить(ВидСобытия, Потребители);
	
	Возврат Потребители;
		
КонецФункции	

// Отработка регламентного задания
Процедура ОбработкаПроизошедшихБизнесСобытий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ БизнесСобытияПовтИсп.ПолучитьИспользоватьБизнесСобытия() Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", 
		УровеньЖурналаРегистрации.Информация, 
		, , НСтр("ru = 'Начато регламентное задание ОбработкаБизнесСобытий'; en = 'Scheduled job ОбработкаБизнесСобытий started'"));
	
	УстановитьПривилегированныйРежим(Истина);
	КешПотребителей = Новый Соответствие;
	
	Пока Истина Цикл // В цикле получаем порциями по 100 необработанные события, пока есть что обрабатывать
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ПроизошедшиеБизнесСобытия.Автор КАК Автор,
			|	ПроизошедшиеБизнесСобытия.ВидСобытия КАК ВидСобытия,
			|	ПроизошедшиеБизнесСобытия.Период КАК Дата,
			|	ПроизошедшиеБизнесСобытия.Источник КАК Источник,
			|	ПроизошедшиеБизнесСобытия.КонтекстСобытия КАК КонтекстСобытия,
			|	ПроизошедшиеБизнесСобытия.ЧислоПопытокОбработки КАК ЧислоПопытокОбработки,
			|	ПроизошедшиеБизнесСобытия.ПометкаУдаления КАК ПометкаУдаления,
			|	ПроизошедшиеБизнесСобытия.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
			|ГДЕ
			|	ПроизошедшиеБизнесСобытия.Обработано = ЛОЖЬ
			|	И ПроизошедшиеБизнесСобытия.НеУдалосьОбработать = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПроизошедшиеБизнесСобытия.Период";
					   
		Таблица = Запрос.Выполнить().Выгрузить();	
		Если Таблица.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		Для Каждого Строка Из Таблица Цикл
			
			Потребители = ВыбратьПотребителей(Строка.ВидСобытия, КешПотребителей);
			СработавшиеПользовательскиеОбработчики = Новый Массив;
			
			НачатьТранзакцию();
			Попытка
				
				Если Строка.ПометкаУдаления = Ложь Тогда
				
					Для Каждого Потребитель Из Потребители Цикл
						
						Если Потребитель = Перечисления.ПотребителиБизнесСобытий.АвтоматическийЗапускБизнесПроцессов Тогда
							ОбработатьСобытиеАвтоматическийЗапускБизнесПроцессов(Строка);
						ИначеЕсли Потребитель = Перечисления.ПотребителиБизнесСобытий.ПользовательскаяОбработкаСобытий Тогда
							ОбработатьСобытиеПользовательскаяОбработкаСобытий(Строка, 
								СработавшиеПользовательскиеОбработчики);	
						ИначеЕсли Потребитель = Перечисления.ПотребителиБизнесСобытий.РассылкаУведомлений Тогда;
							ОбработатьСобытиеРассылкаУведомлений(Строка);
						КонецЕсли;		
							
					КонецЦикла;
					
					Обработано = Истина;
					РегистрыСведений.ПроизошедшиеБизнесСобытия.ОбновитьЗапись(Строка.Идентификатор, Обработано);
					
				Иначе	 // стираем запись в РС ПроизошедшиеБизнесСобытия, если она с пометкой удаления
					
					Набор = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьНаборЗаписей();
					Набор.Отбор.Идентификатор.Установить(Строка.Идентификатор);
					Набор.Записать(); // записываем пустой набор с отбором по Идентификатор - т.е. стираем запись
					
				КонецЕсли;		
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1.
					|Идентификатор записи: %2",
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Строка(Строка.Идентификатор));
				ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.РегистрыСведений.ПроизошедшиеБизнесСобытия, , СообщениеОбОшибке);
				
				Попытка
					ЧислоПопытокОбработки = Строка.ЧислоПопытокОбработки + 1;	
					РегистрыСведений.ПроизошедшиеБизнесСобытия.ОбновитьЗапись(Строка.Идентификатор, , ЧислоПопытокОбработки,,СообщениеОбОшибке);
				Исключение 
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1.
						|Идентификатор записи: %2",
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Строка(Строка.Идентификатор));
					ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", УровеньЖурналаРегистрации.Ошибка, 
						Метаданные.РегистрыСведений.ПроизошедшиеБизнесСобытия, , СообщениеОбОшибке);
				КонецПопытки;	
				
				Для Каждого ОбработчикСсылка Из СработавшиеПользовательскиеОбработчики Цикл
					
					Попытка
						
						ВыполняемыйКодОтменыОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработчикСсылка, 
							"ВыполняемыйКодОтменыОбработки");
							
						Если ЗначениеЗаполнено(ВыполняемыйКодОтменыОбработки) Тогда
							Выполнить(ВыполняемыйКодОтменыОбработки);
						КонецЕсли;	
						
					Исключение
						
						СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий.Выполнение кода отмены обработки", 
							УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ПроизошедшиеБизнесСобытия, 
							Строка.Ссылка, СообщениеОбОшибке);
						
					КонецПопытки;
					
				КонецЦикла;	
				
			КонецПопытки;
				
		КонецЦикла;	
		
	КонецЦикла;	
	
	// Удаление уже обработанных бизнес-событий
	
	// СрокХраненияБизнесСобытий - измеряется в днях
	СрокХраненияБизнесСобытий = Константы.СрокХраненияБизнесСобытий.Получить(); 
	
	// СрокХраненияБизнесСобытий умножаем на 86400 (сек в сутках) и делим на 10
	// - т.к. с периодом в 1/10 срока хранения делаем очистку
	ПериодОчистки = СрокХраненияБизнесСобытий * 86400 / 10;
	
	ДатаПоследнейОчисткиБизнесСобытий = Константы.ДатаПоследнейОчисткиБизнесСобытий.Получить();
	ТекущееВремя = ТекущаяДатаСеанса();
	
	НужнаОчистка = Ложь;
	Если ДатаПоследнейОчисткиБизнесСобытий = Дата("00010101000000") Тогда
		НужнаОчистка = Истина;
	Иначе
		Если ТекущееВремя - ДатаПоследнейОчисткиБизнесСобытий > ПериодОчистки Тогда
			НужнаОчистка = Истина;
		КонецЕсли;		
	КонецЕсли;	
	
	Если Не НужнаОчистка Тогда
		
		ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", 
			УровеньЖурналаРегистрации.Информация, 
			, , НСтр("ru = 'Завершено регламентное задание ОбработкаБизнесСобытий'; en = 'Scheduled job ОбработкаБизнесСобытий is finished'"));
		
		Возврат;
	КонецЕсли;	
	
	// СрокХраненияБизнесСобытий умножаем на 86400 (сек в сутках)
	ДатаОтсечения = ТекущееВремя - СрокХраненияБизнесСобытий * 86400; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.Обработано = ИСТИНА
		|	И ПроизошедшиеБизнесСобытия.Период < &ДатаОтсечения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизошедшиеБизнесСобытия.Период";
				   
	Запрос.УстановитьПараметр("ДатаОтсечения", ДатаОтсечения);
				   
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		Набор.Записать(); // записываем пустой набор с отбором по Идентификатор - т.е. стираем запись
	КонецЦикла;
	
	Константы.ДатаПоследнейОчисткиБизнесСобытий.Установить(ТекущаяДатаСеанса());
	
	ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", 
		УровеньЖурналаРегистрации.Информация, 
		, , НСтр("ru = 'Завершено регламентное задание ОбработкаБизнесСобытий'; en = 'Scheduled job ОбработкаБизнесСобытий is finished'"));
	
КонецПроцедуры

Процедура ВыполнитьКод(ВыполняемыйКод, Результат, ПараметрыВозврата)
	
	Выполнить(ВыполняемыйКод);
	
КонецПроцедуры	

// Отработка регламентного задания
Процедура ОбработкаДетекторовБизнесСобытий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ БизнесСобытияПовтИсп.ПолучитьИспользоватьБизнесСобытия() Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Включен", Истина);
	Выборка = Справочники.ДетекторыБизнесСобытий.Выбрать(,,Отбор);
	
	Пока Выборка.Следующий() Цикл
		
		Результат = Ложь; 
		ПараметрыВозврата = Новый Структура;
		
		Попытка
	    	ВыполнитьКод(Выборка.ВыполняемыйКод, Результат, ПараметрыВозврата);
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru='Обработка детекторов бизнес-событий'; en = 'Processing business event detectors'"), УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ДетекторыБизнесСобытий, Выборка.Ссылка, СообщениеОбОшибке);
			Результат = Ложь; 
		КонецПопытки;
		
		Если Результат = Истина Тогда
			
			Источник = Выборка.Ссылка;
			Автор = Справочники.Пользователи.ПустаяСсылка();
			КонтекстСобытия = Неопределено;
			
			КоличествоСтандартных = 0;
			Если ПараметрыВозврата.Свойство("Источник") Тогда
				Источник = ПараметрыВозврата.Источник;
				КоличествоСтандартных = КоличествоСтандартных + 1;
			КонецЕсли;	
			
			Если ПараметрыВозврата.Свойство("Автор") Тогда
				Автор = ПараметрыВозврата.Автор;
				КоличествоСтандартных = КоличествоСтандартных + 1;
			КонецЕсли;	
			
			Если ПараметрыВозврата.Количество() > КоличествоСтандартных Тогда
				
				// тут формируем КонтекстСобытия (XML)
				ИнформацияДляЗаписиXML = Новый ЗаписьXML;
				ИнформацияДляЗаписиXML.УстановитьСтроку();  
				
				НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);  
				НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыВозврата, НазначениеТипаXML.Явное);  
				
				СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
				КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
				
			КонецЕсли;	
			
			ЗарегистрироватьСобытие(Источник, Выборка.ВидСобытия, КонтекстСобытия, Автор);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает произошедшее событие в соответствии с настройками дополнительных обработок событий
Процедура ОбработатьСобытиеПользовательскаяОбработкаСобытий(Событие, СработавшиеПользовательскиеОбработчики)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользовательскиеОбработчикиБизнесСобытий.ВыполняемыйКод КАК ВыполняемыйКод,
		|	ПользовательскиеОбработчикиБизнесСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий КАК СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользовательскиеОбработчикиБизнесСобытий КАК ПользовательскиеОбработчикиБизнесСобытий
		|		ПО СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.Обработчик = ПользовательскиеОбработчикиБизнесСобытий.Ссылка
		|ГДЕ
		|	ПользовательскиеОбработчикиБизнесСобытий.Включен = ИСТИНА
		|	И СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.ВидСобытия = &ВидСобытия";
				   
	Запрос.УстановитьПараметр("ВидСобытия", Событие.ВидСобытия);
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ОбработчикСсылка = СтрокаТаблицы.Ссылка;
		ОбработчикПредставление = Строка(ОбработчикСсылка);
		
		Попытка
	    	Выполнить(СтрокаТаблицы.ВыполняемыйКод);
			СработавшиеПользовательскиеОбработчики.Добавить(ОбработчикСсылка);
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				+ " " + НСтр("ru = '. Обработчик:'; en = '. Handler:'") + " " + ОбработчикПредставление;
			ЗаписьЖурналаРегистрации(НСтр("ru='Пользовательская обработка бизнес-событий'; en = 'Custom business event processing'"), 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ПользовательскиеОбработчикиБизнесСобытий, 
				, 
				СообщениеОбОшибке);
			ВызватьИсключение;	
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Делает проверку для всех типов Предмета
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, ПредметСсылка, 
	Подписчик, ВидСобытия, Условие) Экспорт
	
	// Проверим условие
	Если Не РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(ПредметСсылка, Условие) Тогда
		Возврат Ложь; // условие не выполняется
	КонецЕсли;	
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта Тогда
		Возврат Истина; // не проверяем подписчика
	КонецЕсли;	
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеКонтрагента Тогда
		
		Если ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныИсполнения")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныОзнакомления")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныПоручения")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныРассмотрения")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
			
			Возврат Истина; // проверяем только тип шаблона бизнес-процесса
			
		Иначе	
			
			Возврат Ложь;
			
		КонецЕсли;		
	
	КонецЕсли;	
	
	Если ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Мероприятия")
		И (ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеМероприятия
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеМероприятия) Тогда

		Возврат Истина;

	КонецЕсли;
	
	// Подписчик - Папка файлов, Предмет - Файл
	Если ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Файлы")
		И ТипЗнч(Подписчик) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "ВладелецФайла");
		
		Если ВладелецФайла = Подписчик Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			
			Папка = ВладелецФайла;
			
			Пока ЗначениеЗаполнено(Папка) Цикл
				
				Если Папка = Подписчик Тогда
					Возврат Истина;
				КонецЕсли;	
				
				Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка, "Родитель");
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Подписчик - Папка внутренних документов, Предмет - Внутренний документ
	Если ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы")
		И ТипЗнч(Подписчик) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "Папка");
		
		Пока ЗначениеЗаполнено(Папка) Цикл
			
			Если Папка = Подписчик Тогда
				Возврат Истина;
			КонецЕсли;	
			
			Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка, "Родитель");
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Подписчик - Вид документа, Предмет - Документ
	Если (ТипЗнч(Подписчик) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
		ИЛИ ТипЗнч(Подписчик) = Тип("СправочникСсылка.ВидыВходящихДокументов")
		ИЛИ ТипЗнч(Подписчик) = Тип("СправочникСсылка.ВидыИсходящихДокументов"))
		И (ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(ПредметСсылка)
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 01.08.2018 {
		или ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(ПредметСсылка)) Тогда
		// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 01.08.2018 } 
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "ВидДокумента");
		МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
		
		Если МассивВидовДокумента.Найти(Подписчик) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// Подписчик - Категория, Предмет - Документ, Файл, Мероприятие
	Если ТипЗнч(Подписчик) = Тип("СправочникСсылка.КатегорииДанных")
		И (ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(ПредметСсылка)
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Файлы")
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Мероприятия")) Тогда
		
		ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		КатегорииПредмета = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(ПредметСсылка);
		
		Если ИспользоватьКатегорииДанных Тогда
			
			Для Каждого Категория Из КатегорииПредмета Цикл
				
				Если Категория.Ссылка = Подписчик Тогда
					Возврат Истина;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
			
КонецФункции

// Отрабатывает событие старта бизнес-процесса - сперва проверяя по своим настройкам, что действительно сработало событие
Процедура ОбработатьСобытиеАвтоматическийЗапускБизнесПроцессов(Событие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Таблица = Неопределено;
	
	Запрос = Новый Запрос;
	Организация = Неопределено;
	
	Если ИспользоватьУчетПоОрганизациям И ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Событие.Источник) Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие.Источник, "Организация");
		
		// в запросе объединяем данные для конкретной и для пустой организации
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие КАК Условие,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК Подписчик
			|ИЗ
			|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
			|ГДЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия
			|	И (ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия = &Организация
			|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия
			|ИЗ
			|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
			|ГДЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия
			|	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 29.06.2018 {
	ИначеЕсли ра_ОбщегоНазначенияКлиентСервер.ЭтоДокументКачества(Событие.Источник.Метаданные()) Тогда  
		
		// получаем данные без отбора по организации
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие КАК Условие,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК Подписчик
			|ИЗ
			|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
			|ГДЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия
			|	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия = &КлассИсточникаБизнесСобытия";
		Запрос.УстановитьПараметр("КлассИсточникаБизнесСобытия", Событие.Источник.ВидДокумента);
	// ТСК Корнюшенков А.Ю. Искать текст "МаршрутыСогласованияЕОСК" 29.06.2018 } 	
		
	Иначе
		
		// получаем данные без отбора по организации
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие КАК Условие,
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК Подписчик
			|ИЗ
			|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
			|ГДЕ
			|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия";
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидБизнесСобытия", Событие.ВидСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;		
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаТаблицы.ШаблонБизнесПроцесса, "ПометкаУдаления") Тогда
			
			Продолжить;
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Событие.Источник);
		Если (МенеджерОбъекта = Неопределено) ИЛИ (МенеджерОбъекта <> Неопределено 
			И МенеджерОбъекта.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(СтрокаТаблицы.ШаблонБизнесПроцесса, 
			Событие.Источник, СтрокаТаблицы.Подписчик, Событие.ВидСобытия, СтрокаТаблицы.Условие)) Тогда
			
			БизнесПроцесс = Неопределено;
			Шаблон = СтрокаТаблицы.ШаблонБизнесПроцесса;
			
			ШаблонОбъект = Шаблон.ПолучитьОбъект();
			
			МассивПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				Если МассивПолей.Найти("Схема") <> Неопределено Тогда
					СообщениеОбОшибке = СтрШаблон(
						НСтр("ru = 'Шаблон ""%1"" нельзя использовать для автоматического запуска процессов, т.к. он содержит некорректную схему.'; en = 'Template ""%1"" cannot be used to start processes automatically because its diagram is invalid.'"),
						Строка(Шаблон));
				Иначе
					СтрокаПолей = МассивПолейВСтроку(МассивПолей);
					
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Шаблон ""%1"" нельзя использовать для автоматического запуска процессов, т.к. не заполнены поля: %2!'; en = 'Template ""%1"" cannot be used to start processes automatically because the following fields are not filled in: %2!'"),
						Строка(Шаблон), СтрокаПолей);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'; en = 'Processing automatic processes start'"), УровеньЖурналаРегистрации.Ошибка, , Шаблон, СообщениеОбОшибке);
				
				Продолжить;
				
			КонецЕсли;	
			
			// Тут заполняем по шаблону и стартуем бизнес-процесс
			
			Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда 
				
				НеверныйПредмет = Ложь;
				
				Если Шаблон.ТипШаблона = "ОбработкаВнутреннегоДокумента"
					И ТипЗнч(Событие.Источник) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
					НеверныйПредмет = Истина;
				КонецЕсли;	
				
				Если Шаблон.ТипШаблона = "ОбработкаВходящегоДокумента"
					И ТипЗнч(Событие.Источник) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда
					НеверныйПредмет = Истина;
				КонецЕсли;	
				
				Если Шаблон.ТипШаблона = "ОбработкаИсходящегоДокумента"
					И ТипЗнч(Событие.Источник) <> Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
					НеверныйПредмет = Истина;
				КонецЕсли;	
				
				Если НеверныйПредмет Тогда
					
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Шаблон ""%1"" нельзя использовать для автоматического запуска процессов, т.к. предмет(""%2"") имеет неверный тип.'; en = 'Template ""%1"" cannot be used to start processes automatically because subject (""%2"") is of incorrect type.'"),
						Строка(Шаблон), Строка(Событие.Источник));
						
					ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'; en = 'Processing automatic processes start'"), УровеньЖурналаРегистрации.Ошибка, , Шаблон, СообщениеОбОшибке);
					
					// Создание уведомлений программы
					ОписаниеУведомления = НСтр("ru = 'Произошла ошибка при автоматическом запуске процесса по документу:
						|%1';
						|en = 'Failed to start process automatically using document:
						|%1'");
					ОписаниеУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеУведомления,
						СообщениеОбОшибке);
					
					РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
						ОписаниеУведомления,
						Событие.Автор,
						Событие.Источник);
					
					Продолжить;
					
				КонецЕсли;	
				
				БизнесПроцесс = БизнесПроцессы[Шаблон.ТипШаблона].СоздатьБизнесПроцесс();
				
			Иначе
				
				ИмяПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
				БизнесПроцесс = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
				
			КонецЕсли;
		
			Если БизнесПроцесс <> Неопределено Тогда
				
				ПараметрыЗаполнения = Новый Структура();
				ПараметрыЗаполнения.Вставить("Шаблон", Шаблон);
				ПараметрыЗаполнения.Вставить("Предметы", Событие.Источник);
				ПараметрыЗаполнения.Вставить("АвторСобытия", Событие.Автор);
				БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
				
				МассивПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
				Если МассивПолей.Количество() <> 0 Тогда
					
					СтрокаПолей = МассивПолейВСтроку(МассивПолей);
					
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При заполнении процесса по шаблону ""%1"" не были заполнены поля: %2.
						| Автоматический запуск процесса не выполнен.';
						|en = 'When filling the process with template ""%1"" the following fields were not filled in: %2.
						|Automatic process start failed.'"),
						Строка(Шаблон), СтрокаПолей);
						
					ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'; en = 'Processing automatic processes start'"), УровеньЖурналаРегистрации.Ошибка, , Шаблон, СообщениеОбОшибке);
					
					// Создание уведомлений программы
					ОписаниеУведомления = НСтр("ru = 'Произошла ошибка при автоматическом запуске процесса по документу:
						|%1';
						|en = 'Failed to start process automatically using document:
						|%1'");
					ОписаниеУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеУведомления,
						СообщениеОбОшибке);
					
					РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
						ОписаниеУведомления,
						Событие.Автор,
						Событие.Источник);
					
					Продолжить;
					
				КонецЕсли;	
				
				БизнесПроцесс.Записать();
				
				Настройка = РегистрыСведений.ПроцессыДляЗапуска.ПолучитьСведенияОЗапускеПроцесса(
					БизнесПроцесс.Ссылка);
				
				СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса(БизнесПроцесс);
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(БизнесПроцесс, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
				
				Если ЗначениеЗаполнено(Настройка) Тогда
					БизнесПроцесс.ОтложенныйСтарт();
				Иначе
					СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Сохраняет в регистре сведений ПодпискиНаБизнесСобытия подписку
Процедура СохранитьПодпискуНаБизнесСобытия(ВидСобытия, Потребитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.Потребитель.Установить(Потребитель);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидСобытия = ВидСобытия;
	НоваяЗапись.Потребитель = Потребитель;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью у всех бизнес-процессов
Процедура БизнесСобытияПередЗаписьюБизнесПроцессаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		Если Источник.Стартован Тогда // старт бизнес-процесса
			Источник.ДополнительныеСвойства.Вставить("НужноЗаписатьСобытиеСтартБизнесПроцесса");
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "Стартован, Завершен, Состояние");
	
	Если Источник.Стартован И Не Реквизиты.Стартован Тогда // старт бизнес-процесса
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса);	
		
	КонецЕсли;	
	
	Если Источник.Завершен И Не Реквизиты.Завершен Тогда // завершение бизнес-процесса
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса);	
		
	КонецЕсли;	
	
	Если Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен
		И Реквизиты.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда // Возобновление бизнес-процесса
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);	
		
	КонецЕсли;	
	
	Если Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен
		И Реквизиты.Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда // Остановка бизнес-процесса
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);	
		
	КонецЕсли;	
	
	Если Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
		И Реквизиты.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван Тогда // Прерывание бизнес-процесса
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Источник.Ссылка, 
			Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура БизнесСобытияПриЗаписиБизнесПроцессаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НужноЗаписатьСобытиеСтартБизнесПроцесса") Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса);	
		Источник.ДополнительныеСвойства.Удалить("НужноЗаписатьСобытиеСтартБизнесПроцесса");
	КонецЕсли;	
	
КонецПроцедуры

// Удаляет в регистре сведений ПодпискиНаБизнесСобытия подписку
Процедура УдалитьПодпискуНаБизнесСобытия(ВидСобытия, Потребитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.Потребитель.Установить(Потребитель);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Есть ли записи в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов для данного шаблона бизнес-процесса
Функция ЕстьЗаписиАвтоСтартаБизнесПроцессовДляШаблонаБизнесПроцессов(ШаблонБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
	               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия КАК ВидБизнесСобытия
	               |ИЗ
	               |	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
	               |ГДЕ
	               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса";
				   
	Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", ШаблонБизнесПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;

КонецФункции	

// Помечает на удаление произошедшие события, когда помечается на удаление Источник событий
Процедура ПометитьНаУдалениеСобытияПоИсточнику(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.Источник = &Источник";
				   
	Запрос.УстановитьПараметр("Источник", Источник);
				   
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометкаУдаления = Истина;
		РегистрыСведений.ПроизошедшиеБизнесСобытия.ОбновитьЗапись(Выборка.Идентификатор, , , ПометкаУдаления);
		
	КонецЦикла;
	
КонецПроцедуры	

// Делает запись бизнес-события с дополнительными параметрами
// Источник - любая ссылка
// ВидСобытия - строка - наименование справочника ВидыБизнесСобытий
// Автор - пользователь, регистрирующий событие
// Объект - объект информационной базы
// Комментарий - строка комментария
Процедура ЗарегистрироватьСобытиеРасширенное(Источник, ВидСобытия, Автор, Объект, Комментарий) Экспорт
	
	ПараметрыСобытия = Новый Структура("Объект, Комментарий", Объект, Комментарий);

	// тут формируем КонтекстСобытия (XML)
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();  
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);  
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыСобытия, НазначениеТипаXML.Явное);  
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
		
	ЗарегистрироватьСобытие(Источник, ВидСобытия, КонтекстСобытия, Автор);
	
КонецПроцедуры	

// Обработчик подписки БизнесСобытияПередЗаписьюОбъекта
Процедура БизнесСобытияПередЗаписьюОбъектаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления И Не Реквизиты.ПометкаУдаления Тогда // Установка пометки удаления
		ПометитьНаУдалениеСобытияПоИсточнику(Источник.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

// Удаляет в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов подписку
Процедура УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(ВидСобытия, ШаблонБизнесПроцесса,
	ВидДокумента, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидБизнесСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.КлассИсточникаБизнесСобытия.Установить(ВидДокумента);
	НаборЗаписей.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Организация);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Заполняет массив бизнес-событий, подходящих для автозапуска процессов для данного вида документа
Функция ПолучитьБизнесСобытияПоВидуДокумента(ВидДокумента) Экспорт
	
	МассивВидовБизнесСобытий = Новый Массив;
	
    Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
  	  
  	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента);
  	  
    ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		
  	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеВходящегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента);
  	  
    ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		
  	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеИсходящегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента);
	  МассивВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента);
  	  
    КонецЕсли;	
    
	Возврат МассивВидовБизнесСобытий;
	
КонецФункции

// Сохраняет в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов подписку
Процедура СохранитьПравилоАвтоматическогоЗапускаБизнесПроцессов(ВидСобытия, ШаблонБизнесПроцесса, 
	ВидДокумента, Условие, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидБизнесСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.КлассИсточникаБизнесСобытия.Установить(ВидДокумента);
	НаборЗаписей.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Организация);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидБизнесСобытия = ВидСобытия;
	НоваяЗапись.ШаблонБизнесПроцесса = ШаблонБизнесПроцесса;
	НоваяЗапись.КлассИсточникаБизнесСобытия = ВидДокумента;
	НоваяЗапись.ОрганизацияИсточникаБизнесСобытия = Организация;
	НоваяЗапись.Условие = Условие;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует строку из имен полей через запятую
Функция МассивПолейВСтроку(МассивПолей) Экспорт
	
	СтрокаПолей = "";
	
	Для Индекс = 0 По МассивПолей.Количество() - 1 Цикл
		
		Если Индекс <>  0 Тогда
			СтрокаПолей = СтрокаПолей + ", ";
		КонецЕсли;	
		
		СтрокаПолей = СтрокаПолей + МассивПолей[Индекс];
		
	КонецЦикла;	
	
	Возврат СтрокаПолей;
	
КонецФункции	

// Обрабатывает произошедшее событие, отправляя уведомления в соответствии с настройками
Процедура ОбработатьСобытиеРассылкаУведомлений(Событие)
	
	РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
	
КонецПроцедуры

// Регистрирует бизнес-событие при загрузке объекта в ходе обмена данными с другими конфигурациями. Предназначена
// для вызова из обработчика ПослеЗагрузки ПКО и, по возможности, должна сохранять состав параметров неизменным.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на объект-источник события
//   ИмяВидаСобытия - Строка - имя предопределенного элемента справочника ВидыБизнесСобытий
//   Автор - СправочникСсылка.Пользователи - автор бизнес-события
//
Процедура ЗарегистрироватьСобытиеПриЗагрузкеОбъекта(Источник, ИмяВидаСобытия, Автор) Экспорт
	
	ВидСобытия = Справочники.ВидыБизнесСобытий[ИмяВидаСобытия];
	ЗарегистрироватьСобытие(Источник, ВидСобытия, , Автор);
	
КонецПроцедуры


