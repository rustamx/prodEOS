/////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ТИПОВ ЗНАЧЕНИЙ

// Возвращает Истина, если переданное значение является
// ссылкой на ВнутренниеДокументы или Объектом типа ВнутренниеДокументы
Функция ЭтоВнутреннийДокумент(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ВнутренниеДокументы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ВходящиеДокументы или Объектом типа ВходящиеДокументы
Функция ЭтоВходящийДокумент(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВходящиеДокументы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ВходящиеДокументы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВходящиеДокументы");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ИсходящиеДокументы или Объектом типа ИсходящиеДокументы
Функция ЭтоИсходящийДокумент(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ИсходящиеДокументы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ИсходящиеДокументы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ИсходящиеДокументы");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на *Документы или Объектом типа *Документы
Функция ЭтоДокумент(Значение) Экспорт
	
	Возврат ЭтоВнутреннийДокумент(Значение)
		Или ЭтоВходящийДокумент(Значение)
		Или ЭтоИсходящийДокумент(Значение);
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ВнутренниеДокументы или Объектом типа ВнутренниеДокументы
// и у вида документа установлен признак того, что это комплект
Функция ЭтоКомплект(Значение) Экспорт
	
	Возврат ЭтоВнутреннийДокумент(Значение)
		И Значение.ВидДокумента.ЯвляетсяКомплектомДокументов;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Файлы или Объектом типа Файлы
Функция ЭтоФайл(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Файлы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ШаблоныВнутреннихДокументов или Объектом типа ШаблоныВнутреннихДокументов
Функция ЭтоШаблонВнутреннегоДокумента(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ШаблоныВнутреннихДокументов");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ШаблоныВходящихДокументов или Объектом типа ШаблоныВходящихДокументов
Функция ЭтоШаблонВходящегоДокумента(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныВходящихДокументов")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ШаблоныВходящихДокументов");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныВходящихДокументов");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ШаблоныИсходящихДокументов или Объектом типа ШаблоныИсходящихДокументов
Функция ЭтоШаблонИсходящегоДокумента(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ШаблоныИсходящихДокументов");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на шаблон документа или Объектом типа шаблон документа
Функция ЭтоШаблонДокумента(Значение) Экспорт
	
	Возврат ЭтоШаблонВнутреннегоДокумента(Значение)
		Или ЭтоШаблонВходящегоДокумента(Значение)
		Или ЭтоШаблонИсходящегоДокумента(Значение);
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ЗадачаИсполнителя или Объектом типа ЗадачаИсполнителя
Функция ЭтоЗадачаИсполнителя(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			Или ТипЗнч(Значение) = Тип("ЗадачаОбъект.ЗадачаИсполнителя");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Контрагенты или Объектом типа Контрагенты
Функция ЭтоКонтрагент(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Контрагенты");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты");
	#КонецЕсли
	
КонецФункции

// Сформировать заголовок группы Файлы
Функция КоличествоФайловВЗаголовок(КоличествоФайлов) Экспорт
	
	Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	
	Если КоличествоФайлов <> 0 Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'; en = 'Files (%1)'"),
			КоличествоФайлов);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Получает строковое строку из регистрационного номера и даты регистрации
Функция ПредставлениеНомераИДаты(РегистрационныйНомер, ДатаРегистрации) Экспорт
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда
		
		ПредставлениеНомераИДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№ %1 от %2'; en = '№ %1 of %2'"),
			РегистрационныйНомер,
			Формат(ДатаРегистрации, "ДЛФ=D"));
		
	ИначеЕсли ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		
		ПредставлениеНомераИДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№ %1'; en = '№ %1'"),
			РегистрационныйНомер);
		
	Иначе
		
		ПредставлениеНомераИДаты = "";
	
	КонецЕсли;
	
	Возврат ПредставлениеНомераИДаты;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на *Документы
Функция ЭтоСсылкаНаДокумент(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Подпись к количеству лет по склонениям
Функция ПодписьЛет(Количество) Экспорт
	
	Если Количество > 10 И Количество < 20 Тогда
		Возврат НСтр("ru = 'лет'; en = 'years'");
	Иначе
		Срок = Количество - Цел(Количество / 10) * 10;
		Если Срок = 0 Тогда
			Возврат НСтр("ru = 'лет'; en = 'years'");
		ИначеЕсли Срок = 1 Тогда
			Возврат НСтр("ru = 'год'; en = 'year'");
		ИначеЕсли Срок < 5 Тогда
			Возврат НСтр("ru = 'года'; en = 'years'");
		Иначе
			Возврат НСтр("ru = 'лет'; en = 'years'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Строковое описание разности дат в днях с учетом склонений
Функция РазностьДатВДнях(Дата1, Дата2) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = РаботаСБизнесПроцессамиВызовСервера.ПолучитьИспользованиеДатыИВремениВСрокахЗадач();
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ЧислоЧасов = Окр((Дата1 - Дата2) / (60*60));
		ЧислоДней = Окр(ЧислоЧасов / 24);
		ЧислоЧасов = ЧислоЧасов - ЧислоДней * 24;
	Иначе
		ЧислоЧасов = 0;
		ЧислоДней = (НачалоДня(Дата1) - НачалоДня(Дата2)) / (60*60*24);
	КонецЕсли;
		
	Если ЧислоЧасов < 0 Тогда
		ЧислоДней = ЧислоДней - 1;
		ЧислоЧасов = ЧислоЧасов + 24;
	КонецЕсли;
	ПодписьДней = ПолучитьПодписьДней(ЧислоДней);
	ПодписьЧасов = ПолучитьПодписьЧасов(ЧислоЧасов);
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЧислоДней > 0 И ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 и %3 %4'; en = '%1 %2 and %3 %4'"),
				Строка(ЧислоДней),
				ПодписьДней,
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		ИначеЕсли ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		ИначеЕсли ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		Иначе
			Возврат НСтр("ru = 'Менее 1 часа'; en = 'Less than 1 hour'");
		КонецЕсли;
	Иначе
		Если ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		Иначе
			Возврат НСтр("ru = 'Менее 1 дня'; en = 'Less than 1 day'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Подпись к количеству дней по склонениям
Функция ПолучитьПодписьДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'; en = 'days'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'; en = 'days'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'; en = 'days'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'; en = 'day'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'; en = 'days'");
			Иначе
				Подпись = НСтр("ru = 'дней'; en = 'days'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству рабочих дней по склонениям
Функция ПолучитьПодписьРабочихДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'рабочих дней'; en = 'working days'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'рабочих дней'; en = 'working days'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'рабочих дней'; en = 'working days'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'рабочий день'; en = 'working day'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'рабочих дня'; en = 'working days'");
			Иначе
				Подпись = НСтр("ru = 'рабочих дней'; en = 'working days'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству часов по склонениям
Функция ПолучитьПодписьЧасов(ЧислоЧасов) Экспорт
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов'; en = 'hours'");
	Иначе
		Срок = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'часов'; en = 'hours'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = Нстр("ru = 'час'; en = 'hour'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'часа'; en = 'hours'");
		Иначе
			Подпись = НСтр("ru = 'часов'; en = 'hours'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству минут по склонениям
Функция ПолучитьПодписьМинут(ЧислоМинут) Экспорт
	
	Если ЧислоМинут > 10 И ЧислоМинут < 20 Тогда
		Подпись = НСтр("ru = 'минут'; en = 'minutes'");
	Иначе
		Срок = ЧислоМинут - Цел(ЧислоМинут / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'минут'; en = 'minutes'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'минута'; en = 'minute'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'минуты'; en = 'minutes'");
		Иначе
			Подпись = НСтр("ru = 'минут'; en = 'minutes'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству месяцев по склонениям
Функция ПолучитьПодписьМесяцев(ЧислоМесяцев) Экспорт
	
	Если ЧислоМесяцев > 10 И ЧислоМесяцев < 20 Тогда
		Подпись = НСтр("ru = 'месяцев'; en = 'months'");
	Иначе
		Срок = ЧислоМесяцев - Цел(ЧислоМесяцев / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'месяцев'; en = 'months'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'месяц'; en = 'month'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'месяца'; en = 'months'");
		Иначе
			Подпись = НСтр("ru = 'месяцев'; en = 'months'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству недель по склонениям
Функция ПолучитьПодписьНедель(ЧислоНедель) Экспорт
	
	Если ЧислоНедель > 10 И ЧислоНедель < 20 Тогда
		Подпись = НСтр("ru = 'недель'; en = 'weeks'");
	Иначе
		Срок = ЧислоНедель - Цел(ЧислоНедель / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'недель'; en = 'weeks'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'неделя'; en = 'week'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'недели'; en = 'weeks'");
		Иначе
			Подпись = НСтр("ru = 'недель'; en = 'weeks'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству секунд по склонениям
Функция ПолучитьПодписьСекунд(ЧислоСекунд) Экспорт
	
	Если ЧислоСекунд > 10 И ЧислоСекунд < 20 Тогда
		Подпись = НСтр("ru = 'секунд'; en = 'seconds'");
	Иначе
		ПоследниеДвеЦифры = ЧислоСекунд - Цел(ЧислоСекунд / 100) * 100;
		ПоследняяЦифра = ЧислоСекунд - Цел(ЧислоСекунд / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'секунд'; en = 'seconds'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'секунд'; en = 'seconds'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'секунда'; en = 'second'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'секунды'; en = 'seconds'");
			Иначе
				Подпись = НСтр("ru = 'секунд'; en = 'seconds'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на УведомленияПрограммы или Объектом типа УведомленияПрограммы
Функция ЭтоУведомлениеПрограммы(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.УведомленияПрограммы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.УведомленияПрограммы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.УведомленияПрограммы");
	#КонецЕсли
	
КонецФункции

// Проверяет, является ли переданное значение расширением скан-копии
//
// Параметры
//    Расширение - Строка - расширение файла
//
// Возвращаемое значение
//    Булево - Истина, если переданное значение является расширением скан-копии
//
Функция ЭтоРасширениеСканКопии(Расширение) Экспорт 
	
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	СписокРасширенийСканКопийОригиналов = 
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
	
	СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, " ", ",");
	СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, ";", ",");
	МассивРасширенийСканКопий = СтрРазделить(СписокРасширенийСканКопийОригиналов, ",", Ложь);
	
	// Если расширения скан-копий не заданы, то автопометку скан-копией не делаем
	Если МассивРасширенийСканКопий.Количество() = 0 Тогда 
		Возврат Ложь;
	Иначе 
		Возврат МассивРасширенийСканКопий.Найти(РасширениеБезТочки) <> Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление срока действия документа
// Параметры
//    ВнутреннийДокумент - СправочникСсылка.ВнутренниеДокументы - ссылка на документ
//    Комментарий        - Строка - комментарий к сроку действия
//
// Возвращаемое значение
//    Результат - строка - представление срока действия
Функция СформироватьПредставлениеСрокаДействия(ВнутреннийДокумент, Комментарий = "") Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(ВнутреннийДокумент.ДатаНачалаДействия) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'; en = 'from %1'"),
			Формат(ВнутреннийДокумент.ДатаНачалаДействия, "ДЛФ=D")); 
	КонецЕсли;
	
	Если ВнутреннийДокумент.Бессрочный Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, ", ", НСтр("ru = 'бессрочный'; en = 'termless'"));
	ИначеЕсли ЗначениеЗаполнено(ВнутреннийДокумент.ДатаОкончанияДействия) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			" ",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по %1'; en = 'to %1'"),
				Формат(ВнутреннийДокумент.ДатаОкончанияДействия, "ДЛФ=D")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВнутреннийДокумент.ПорядокПродления) Тогда
		Если ВнутреннийДокумент.ПорядокПродления = ПредопределенноеЗначение(
				"Перечисление.ПорядокПродления.НеПродлевается") Тогда 
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru = 'Не продлевается'; en = 'Not prolonged'"));
		ИначеЕсли ВнутреннийДокумент.ПорядокПродления = ПредопределенноеЗначение(
				"Перечисление.ПорядокПродления.ДопускаетПродление") Тогда 
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru = 'Допускает продление'; en = 'Renewable'"));
		Иначе		
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Продлевается %1'; en = 'Renewed %1'"),
					НРег(ВнутреннийДокумент.ПорядокПродления)));
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда 
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			"",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '. %1'; en = '. %1'"),
				Комментарий));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ВизыСогласования или Объектом типа ВизыСогласования
Функция ЭтоВизаСогласования(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВизыСогласования")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ВизыСогласования");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВизыСогласования");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Резолюции или Объектом типа Резолюции
Функция ЭтоРезолюция(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Резолюции")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Резолюции");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Резолюции");
	#КонецЕсли
	
КонецФункции

// Устанавливает значение свойства Доступность/Видимость команды Создать в списке документов.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - коллекция элементов управляемой формы списка
//  ИмяСвойства - Строка - название свойства, которое требуется установить
//  ЗначениеСвойства - Булево - значение 
//
Процедура УстановитьВидимостьДоступностьКомандСоздания(Элементы, ИмяСвойства, ЗначениеСвойства) Экспорт 
	
	Элементы.СоздатьДокумент[ИмяСвойства] = ЗначениеСвойства;
	Элементы.СоздатьДокументВсеДействия[ИмяСвойства] = ЗначениеСвойства;
	Элементы.СписокКонтекстноеМенюСоздать[ИмяСвойства] = ЗначениеСвойства;
	
КонецПроцедуры

// Возвращает руководителя текущего или вышестоящего подразделения.
//
// Параметры:
//    Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, руководителя которого требуется найти
//    Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя
//
// Возвращаемое значение:
//    Результат - СправочникСсылка.Пользователи - непосредственный руководитель подразделения
//
Функция ПолучитьНепосредственногоРуководителя(Подразделение, Пользователь) Экспорт
	
	РеквизитыПодразделения = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Подразделение,
		"Руководитель, Родитель");
	
	Если РеквизитыПодразделения.Руководитель = Пользователь Тогда 
		Руководитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(РеквизитыПодразделения.Родитель, 
			"Руководитель");
	Иначе 
		Руководитель = РеквизитыПодразделения.Руководитель;
	КонецЕсли;
	
	Возврат Руководитель;
	
КонецФункции

// Формирует текстовое представление состава документа
//
Функция ПолучитьСтрокуСоставДокумента(Ссылка) Экспорт
	
	СтрокаСостав = ?(Ссылка.КоличествоЛистов > 0, СтрШаблон(
		НСтр("ru = 'листов %1,'; en = 'sheets %1,'") + " ", Ссылка.КоличествоЛистов), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.КоличествоПриложений > 0, СтрШаблон(
		НСтр("ru = 'приложений %1,'; en = 'annexes %1,'") + " ", Ссылка.КоличествоПриложений), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.ЛистовВПриложениях > 0, СтрШаблон(
		НСтр("ru = 'листов в приложениях %1,'; en = 'sheets in annexes, %1'") + " ", Ссылка.ЛистовВПриложениях), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.КоличествоЭкземпляров > 0, СтрШаблон(
		НСтр("ru = 'экземпляров %1,'; en = 'instances %1,'") + " ", Ссылка.КоличествоЭкземпляров), "");
			
	СтрокаСостав = ВРег(Лев(СтрокаСостав,1))+Прав(СтрокаСостав, СтрДлина(СтрокаСостав) - 1);
	
	Если Прав(СтрокаСостав, 2) = ", " Тогда
		СтрокаСостав = Лев(СтрокаСостав, СтрДлина(СтрокаСостав) - 2);
	КонецЕсли;
	
	Возврат СтрокаСостав;
	
КонецФункции

// Возвращает Истину, если форма я вляется формой вида документа
// Параметры
//    ИмяФормы - Строка - имя проверяемой формы
//
// Возвращаемое значение
//    Истина, если форма я вляется формой вида документа
//
Функция ЭтоФормаВидаДокумента(ИмяФормы) Экспорт 
	
	Если ИмяФормы = "Справочник.ВидыВнутреннихДокументов.Форма.ФормаЭлемента"
		// ТСК Мусабеков Роман {
		//ххх#27.04.2018#ххх
		Или ИмяФормы = "Справочник.ВидыВнутреннихДокументов.Форма.ра_ФормаЭлемента"
		//} ТСК Мусабеков Роман
		Или ИмяФормы = "Справочник.ВидыВходящихДокументов.Форма.ФормаЭлемента"
		Или ИмяФормы = "Справочник.ВидыИсходящихДокументов.Форма.ФормаЭлемента" Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает Истину, если форма я вляется формой вида документа
// Параметры
//    ИмяФормы - Строка - имя проверяемой формы
//
// Возвращаемое значение
//    Истина, если форма я вляется формой вида документа
//
Функция ЭтоФормаШаблонаДокумента(ИмяФормы) Экспорт 
	
	Если ИмяФормы = "Справочник.ШаблоныВнутреннихДокументов.Форма.ШаблонВнутреннегоДокумента"
		// ТСК Мусабеков Роман {
		//ххх#03.05.2018#ххх
		Или ИмяФормы = "Справочник.ШаблоныВнутреннихДокументов.Форма.ра_ШаблонВнутреннегоДокумента"
		//} ТСК Мусабеков Роман
		Или ИмяФормы = "Справочник.ШаблоныВходящихДокументов.Форма.ШаблонВходящегоДокумента"
		Или ИмяФормы = "Справочник.ШаблоныИсходящихДокументов.Форма.ШаблонИсходящегоДокумента" Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает все реквизиты из шаблона наименования документа.
//
// Параметры:
//  ТекстШаблона - Строка - анализируемый шаблон наименования
//  МассивРеквизитов - Массив - найденных реквизитов, учавствующих в автозаголовке документа.
//  ОписаниеОшибки - Строка - текст ошибки, если она возникнет.
//
Процедура ПолучитьПоляШаблонаНаименования(ТекстШаблона, МассивРеквизитов, ОписаниеОшибки) Экспорт 
	
	// проверка соответствия скобок
	ПозицияСкобки = 0;
	ПоказательСкобки = 0;
	
	врТекстШаблона = СокрЛП(ТекстШаблона);
	Для Инд = 1 По СтрДлина(врТекстШаблона) Цикл
		
		ТекСимвол = Сред(врТекстШаблона, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врТекстШаблона, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'; en = 'Symbol ""]"" not found'");
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'; en = 'Symbol ""]"" in fragment ""%1"" not found'"), ФрагментОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врТекстШаблона, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""[""'; en = 'Symbol ""["" not found'");
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Отсутствует символ ""["" в фрагменте ""%1""'; en = 'Symbol ""["" in fragment ""%1"" not found'"), ФрагментОшибки);
				КонецЕсли;
				Возврат;
			Иначе 
				НайденноеПоле = Сред(врТекстШаблона, ПозицияСкобки + 1, Инд - ПозицияСкобки -1);
				МассивРеквизитов.Добавить(НайденноеПоле);
			КонецЕсли;
		КонецЕсли;
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врТекстШаблона, ПозицияСкобки + 1);
		
		Если ФрагментОшибки = "" Тогда 
			ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'; en = 'Symbol ""]"" not found'");
		Иначе
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'; en = 'Symbol ""]"" in fragment ""%1"" not found'"), ФрагментОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму в строке при изменении цены или количества.
//
// Параметры:
//		ТекущаяСтрока - строка табличной части
// 		СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС) Экспорт 
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.Сумма = Окр(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество, 2);
	КонецЕсли;
	
	ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС);
	
КонецПроцедуры

// Пересчитывает цену в строке при изменении суммы.
//
// Параметры:
//		ТекущаяСтрока - строка табличной части
// 		СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС) Экспорт
	
	Если ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
	Иначе
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
	КонецЕсли;
	
	ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС);
	
КонецПроцедуры

// Пересчитывает в строке сумму НДС от суммы в зависимости от включения НДС в цену.
//
// Параметры:
//		ТекущаяСтрока - строка табличной части
// 		СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС) Экспорт
	
	ТекПроцентНДС = ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	ТекущаяСтрока.СуммаНДС = РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС);
	
КонецПроцедуры

// Возвращает числовое значение ставки НДС по значению перечисления.
//
// Параметры:
// 		СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
// 		Число - Значение ставки НДС числом
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) 
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда
		
		Возврат 0.1;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда 
		
		Возврат 0.18;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену.
//
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
// ПроцентНДС      - Число - Ставка НДС числом
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС
//
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина)
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Отсутствие или Объектом типа Отсутствие.
Функция ЭтоОтсутствие(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Отсутствие")
			Или ТипЗнч(Значение) = Тип("ДокументОбъект.Отсутствие");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Отсутствие");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Бронь или Объектом типа Бронь.
Функция ЭтоБронь(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Бронь")
			Или ТипЗнч(Значение) = Тип("ДокументОбъект.Бронь");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Бронь");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Контроль или Объектом типа Контроль
Функция ЭтоКонтрольОбъектов(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контроль")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Контроль");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контроль");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Мероприятия или Объектом типа Мероприятия
Функция ЭтоМероприятие(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Мероприятия");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Мероприятия");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Проекты или Объектом типа Проекты
Функция ЭтоПроект(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Проекты")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Проекты");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Проекты");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ПроектныеЗадачи или Объектом типа ПроектныеЗадачи
Функция ЭтоПроектнаяЗадача(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПроектныеЗадачи")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ПроектныеЗадачи");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПроектныеЗадачи");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на СообщенияОбсуждений или Объектом типа СообщенияОбсуждений
Функция ЭтоСообщение(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.СообщенияОбсуждений")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.СообщенияОбсуждений");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.СообщенияОбсуждений");
	#КонецЕсли
	
КонецФункции

// Подпись к количеству писем по склонениям
Функция ПолучитьПодписьПисем(ЧислоПисем) Экспорт
	
	Если ЧислоПисем > 10 И ЧислоПисем < 20 Тогда
		Подпись = НСтр("ru = 'писем'; en = 'emails'");
	Иначе
		ПоследниеДвеЦифры = ЧислоПисем - Цел(ЧислоПисем / 100) * 100;
		ПоследняяЦифра = ЧислоПисем - Цел(ЧислоПисем / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'писем'; en = 'emails'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'писем'; en = 'emails'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'письмо'; en = 'email'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'письма'; en = 'emails'");
			Иначе
				Подпись = НСтр("ru = 'писем'; en = 'emails'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает строковое представление полного пути к территории/помещению 
// Параметры
//    ТерриторияПомещение - СправочникСсылка.ТерриторииИПомещения - ссылка на территорию
//
// Возвращаемое значение
//    ПолныйПутьТекст - Строка - представление полного пути
Функция ПолучитьПолныйПутьКПомещению(ТерриторияПомещение) Экспорт 
	
	ПолныйПуть = "";
	
	Если ЗначениеЗаполнено(ТерриторияПомещение) Тогда 
		ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТерриторияПомещение, "Родитель");
		Пока Не ТекущийРодитель.Пустая() Цикл
			ПолныйПуть = СокрЛП(ТекущийРодитель) + "\ " + ПолныйПуть;
			ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйПуть) Тогда 
		ПолныйПуть = Лев(ПолныйПуть, СтрДлина(ПолныйПуть) - 2);
		ПолныйПутьТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'; en = '%1 (%2)'"),
			СокрЛП(ТерриторияПомещение), ПолныйПуть);
	Иначе 
		ПолныйПутьТекст = СокрЛП(ТерриторияПомещение);
	КонецЕсли;
	
	Возврат ПолныйПутьТекст;
	
КонецФункции

// Возвращает строковое представление полного пути к месту хранения дел 
// Параметры
//    МестоХранения - СправочникСсылка.МестаХраненияДел - ссылка на место хранения
//
// Возвращаемое значение
//    ПолныйПутьТекст - Строка - представление полного пути
Функция ПолучитьПолныйПутьКМестуХранения(МестоХранения, ИспользоватьСхемыПомещений = Ложь) Экспорт 
	
	Если Не ИспользоватьСхемыПомещений Тогда 
		Возврат СокрЛП(МестоХранения);
	КонецЕсли;
	
	ПолныйПуть = "";
	
	Если ЗначениеЗаполнено(МестоХранения) Тогда 
		ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(МестоХранения, "ТерриторияПомещение");
		
		Пока Не ТекущийРодитель.Пустая() Цикл
			ПолныйПуть = СокрЛП(ТекущийРодитель) + "\ " + ПолныйПуть;
			ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйПуть) Тогда 
		ПолныйПуть = Лев(ПолныйПуть, СтрДлина(ПолныйПуть) - 2);
		ПолныйПутьТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'; en = '%1 (%2)'"),
			СокрЛП(МестоХранения), ПолныйПуть);
	Иначе 
		ПолныйПутьТекст = СокрЛП(МестоХранения);
	КонецЕсли;
	
	Возврат ПолныйПутьТекст;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ЗаметкиДокументооборота или Объектом типа ЗаметкиДокументооборота
Функция ЭтоЗаметка(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ЗаметкиДокументооборота")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ЗаметкиДокументооборота");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ЗаметкиДокументооборота");
	#КонецЕсли
	
КонецФункции

// Формирует текстовое представление группы полей подписания
//
Функция ПолучитьСтрокуПодписи(Объект) Экспорт
	
	СтрокаПодпись = "";
	
	Если Объект.РезультатПодписания
		= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Подписан") Тогда
			РезультатПодписания = НСтр("ru = 'Да'; en = 'Yes'");
	ИначеЕсли Объект.РезультатПодписания
		= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Отклонен") Тогда
			РезультатПодписания = НСтр("ru = 'Отклонен'; en = 'Rejected'");
	Иначе
			РезультатПодписания = НСтр("ru = 'Нет'; en = 'No'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаПодписания)
		И (Объект.РезультатПодписания
			= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Подписан")
			Или Объект.РезультатПодписания
			= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Отклонен")) Тогда
				СтрокаПодпись = СтрШаблон("%1 (%2, %3)",
					РезультатПодписания, Объект.Подписал, Формат(Объект.ДатаПодписания, "ДЛФ=D"));
	Иначе
		СтрокаПодпись = СтрШаблон("%1 (%2)",
			РезультатПодписания, Объект.Подписал);
	КонецЕсли;
	
	Если Прав(СтрокаПодпись, 2) = "()" Тогда
		СтрокаПодпись = Лев(СтрокаПодпись, СтрДлина(СтрокаПодпись) - 3);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомментарийПодписи) Тогда
		СтрокаПодпись = СтрокаПодпись + " " + Объект.КомментарийПодписи;
	КонецЕсли;
	
	Возврат СтрокаПодпись;
	
КонецФункции

// Формирует текстовое представление группы полей утверждения
//
Функция ПолучитьСтрокуУтверждения(Объект) Экспорт
	
	СтрокаУтверждение = "";
	
	Если Объект.ГрифыУтверждения.Количество() > 0 Тогда
		ГрифУтверждения = Объект.ГрифыУтверждения[0];
		
		Если ГрифУтверждения.Результат = ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено") Тогда
			РезультатУтверждения = НСтр("ru = 'Да'; en = 'Yes'");
		Иначе
			РезультатУтверждения = НСтр("ru = 'Нет'; en = 'No'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГрифУтверждения.ДатаУтверждения) Тогда
			СтрокаУтверждение = СтрШаблон("%1 (%2, %3)",
				РезультатУтверждения, ГрифУтверждения.АвторУтверждения, Формат(ГрифУтверждения.ДатаУтверждения, "ДЛФ=D"));
		Иначе
			СтрокаУтверждение = СтрШаблон("%1 (%2)",
				РезультатУтверждения, ГрифУтверждения.АвторУтверждения);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ГрифУтверждения.Комментарий) Тогда
			СтрокаУтверждение = СтрокаУтверждение + " " + ГрифУтверждения.Комментарий;
		КонецЕсли;
		
	Иначе
		СтрокаУтверждение = НСтр("ru = 'Нет'; en = 'No'");
	КонецЕсли;
	
	Возврат СтрокаУтверждение;

КонецФункции


