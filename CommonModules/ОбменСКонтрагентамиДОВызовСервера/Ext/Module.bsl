#Область ПрограммныйИнтерфейс

// Возвращает состояние версии документа ДО по ЭДО.
	//
	// Параметры:
	//  ДокументДО - документ документооборота .
	//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по ЭДО.
	// 
	// Возвращаемое значение:
	//  СостоянияВерсийЭДДО - ПеречислениеСсылка.СостоянияВерсийЭДДО - состояние версии документа ДО по ЭДО.
	//
Функция ДанныеСостоянияДокументаПоЭДО(ДокументДО, Контрагент = Неопределено, НаДату = Неопределено, НаправлениеЭД = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(ДокументДО, Контрагент, НаДату, НаправлениеЭД);

КонецФункции 

Функция ДОЗакрытПринудительно(ДокументДО) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеЭДО = РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(ДокументДО);
	
	Результат = Ложь;
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПолучитьПризнакиДокументаПоЭДО(СсылкаНаДокументДО, ПризнакиДокПоЭДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПризнакиДокПоЭДО.СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатков = ПолучитьИзВременногоХранилища(ПризнакиДокПоЭДО.СсылкаНаМассивОтпечатков);
	Иначе
		МассивОтпечатков = Новый Массив;
	КонецЕсли;

	ТаблицаФайловЭД = ВернутьТаблицуФайловЭДПоДокументДО(СсылкаНаДокументДО);
	
	Если ТаблицаФайловЭД.Количество() > 0 Тогда
		
		Для каждого СтрокаТаблицыФайловЭД Из ТаблицаФайловЭД Цикл
			
			Если ПризнакиДокПоЭДО.ОсновнойФайлЭД = Неопределено Тогда
				ПризнакиДокПоЭДО.ОсновнойФайлЭД = СтрокаТаблицыФайловЭД.ФайлЭД;
			КонецЕсли; 
			
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СтрокаТаблицыФайловЭД.ФайлЭД) = Ложь Тогда
				ПризнакиДокПоЭДО.МожноОтклонитьЭтотЭД  = Ложь;
			КонецЕсли; 
			
			ПризнакиДокПоЭДО.СтатусЭД = СтрокаТаблицыФайловЭД.СтатусЭД;
			ПризнакиДокПоЭДО.ТипЭлементаВерсииЭД = СтрокаТаблицыФайловЭД.ТипЭлементаВерсииЭД;
			
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивОтпечатков, СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПризнакиДокПоЭДО.ЕстьДоступныеСертификаты = Истина;
			КонецЕсли;
			
			Если Не ПризнакиДокПоЭДО.ЭтоТитулФНС И ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(СтрокаТаблицыФайловЭД.ЭД) Тогда
				ПризнакиДокПоЭДО.ЭтоТитулФНС = Истина;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПризнакиДокПоЭДО.МожноАннулироватьЭтотЭД = Истина;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСчетФактура(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПризнакиДокПоЭДО.ЭДСчетФактура = Истина;
				ПризнакиДокПоЭДО.ДОСФЗавершен = ОбменСКонтрагентамиСлужебныйВызовСервера.ДОСФЗавершен(СтрокаТаблицыФайловЭД.ФайлЭД, СтрокаТаблицыФайловЭД.НаправлениеЭД);
			КонецЕсли;
			
			Если СтрокаТаблицыФайловЭД.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				ПризнакиДокПоЭДО.ВидЭД = СтрокаТаблицыФайловЭД.ВидЭД;
				Если ОбменСКонтрагентамиСлужебный.ВторойТитулПодписан(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
					ПризнакиДокПоЭДО.ВторойТитулПодписан = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФайловЭД.ПричинаОтклонения) Тогда
				ПризнакиДокПоЭДО.ПричинаОтклонения = СтрокаТаблицыФайловЭД.ПричинаОтклонения;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебный.ЕстьОтправленноеУведомление(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПризнакиДокПоЭДО.ЕстьОтправленноеУведомление = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(МассивОтпечатков) ТОгда
		
		ТаблицаДоступныхСертификатов = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, ПризнакиДокПоЭДО.ПрофильНастроекЭДО);
		Если ТаблицаДоступныхСертификатов.Количество() > 0 Тогда
			ПризнакиДокПоЭДО.ЕстьДоступныеСертификаты = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует строку для события журнала регистрации.
//
// Возвращаемое значение:
//  Строка - Событие журнала регистрации.
//
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Обмен с контрагентами по ЭДО'; en = 'Exchange with counterparties via EDI'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

#КонецОбласти


// Возвращает ВидДокумента по настроке соответствия видовЭД и ВидовДокументов
//
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидЭД
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыВнутреннихДокументов, СправочникСсылка.ВидыВходящихДокументов, СправочникСсылка.ВидыИсходящихДокументов
//
Функция ПолучитьПараметрыДокументаПоВидуЭД(ВидЭД, Контрагент= Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиСоответствияРеквизитовДокументовПоЭДО.ВидДокумента,
		|	НастройкиСоответствияРеквизитовДокументовПоЭДО.Ответственный,
		|	НастройкиСоответствияРеквизитовДокументовПоЭДО.Папка
		|ИЗ
		|	РегистрСведений.НастройкиСоответствияРеквизитовДокументовПоЭДО КАК НастройкиСоответствияРеквизитовДокументовПоЭДО
		|ГДЕ
		|	НастройкиСоответствияРеквизитовДокументовПоЭДО.ВидЭД = &ВидЭД";
		
	Если Контрагент <> Неопределено Тогда
		ТекстЗапросаСКонтрагентом = ТекстЗапроса + " И НастройкиСоответствияРеквизитовДокументовПоЭДО.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	Запрос.Текст = ТекстЗапросаСКонтрагентом;
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПараметрыДокументаПоВидуЭД = Новый Структура;
	ПараметрыДокументаПоВидуЭД.Вставить("ВидДокумента");
	ПараметрыДокументаПоВидуЭД.Вставить("Ответственный");
	ПараметрыДокументаПоВидуЭД.Вставить("Папка");
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыДокументаПоВидуЭД, ВыборкаДетальныеЗаписи);
		Возврат ПараметрыДокументаПоВидуЭД;
	Иначе
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыДокументаПоВидуЭД, ВыборкаДетальныеЗаписи);
			Возврат ПараметрыДокументаПоВидуЭД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыДокументаПоВидуЭД;
	
КонецФункции

// Создает произвольный документ из исходящего и определенного подчиненного файла.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект.
//  НастройкиОбменаЭД - Параметры - настройки обмена.
//  МассивСтруктурВозврата - Массив документов документов созданных
/// 
// Возвращаемое значение:
//  Структура - реквизиты организации.
//
Функция СформироватьЭДПоДокументуДО(СсылкаНаОбъект, НастройкиОбменаЭД, МассивСтруктурВозврата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаВерсиюФайла = СсылкаНаОбъект;
	ДокументДО = СсылкаНаОбъект.Владелец.ВладелецФайла;
	
	ВозвращаемоеЗначение = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК Ссылка,
		|	СоглашенияОбИспользованииЭД.Ссылка КАК Основание,
		|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	СоглашенияОбИспользованииЭД.Ссылка.Контрагент КАК Контрагент,
		|	СоглашенияОбИспользованииЭД.Ссылка.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Ссылка.Организация = &Организация
		|	И НЕ СоглашенияОбИспользованииЭД.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭД.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументыКонтрагенты.Ссылка,
		|	ВнутренниеДокументыКонтрагенты.Сторона КАК Контрагент,
		|	ВнутренниеДокументыКонтрагенты.Ссылка.Организация,
		|	ВнутренниеДокументыСтороны.Подписал КАК Подписал
		|ПОМЕСТИТЬ ДокументыДО
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыКонтрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
		|		ПО ВнутренниеДокументыКонтрагенты.Ссылка = ВнутренниеДокументыСтороны.Ссылка
		|			И (ВнутренниеДокументыСтороны.Подписан)
		|			И (НЕ ВнутренниеДокументыСтороны.Подписал ЕСТЬ NULL )
		|			И (ВнутренниеДокументыСтороны.НомерСтроки = 1)
		|ГДЕ
		|	ВнутренниеДокументыКонтрагенты.Ссылка.ВидДокумента.ВестиУчетСторон
		|	И ВнутренниеДокументыКонтрагенты.Ссылка = &ДокументДО
		|	И ВнутренниеДокументыКонтрагенты.Сторона ССЫЛКА Справочник.Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Ссылка,
		|	ДокументыДО.Подписал КАК Подписал,
		|	Соглашения.Ссылка КАК Соглашение,
		|	ДокументыДО.Контрагент КАК Контрагент,
		|	ДокументыДО.Организация КАК Организация
		|ПОМЕСТИТЬ ДокументыСИмеющимесяСоглашениями
		|ИЗ
		|	ДокументыДО КАК ДокументыДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЧ_Соглашения КАК Соглашения
		|		ПО ДокументыДО.Контрагент = Соглашения.Контрагент
		|			И (Соглашения.Организация = ДокументыДО.Ссылка.Организация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ДокументыСИмеющимесяСоглашениями.Ссылка КАК Ссылка,
		|	ДокументыСИмеющимесяСоглашениями.Подписал КАК Подписал,
		|	ДокументыСИмеющимесяСоглашениями.Соглашение КАК Соглашение,
		|	Файлы.Ссылка КАК Файл,
		|	ДокументыСИмеющимесяСоглашениями.Контрагент КАК Контрагент,
		|	ДокументыСИмеющимесяСоглашениями.Организация
		|ПОМЕСТИТЬ ДокументыСсоглашениямиИФайлами
		|ИЗ
		|	ДокументыСИмеющимесяСоглашениями КАК ДокументыСИмеющимесяСоглашениями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (НЕ Файлы.ПометкаУдаления)
		|			И ДокументыСИмеющимесяСоглашениями.Ссылка = Файлы.ВладелецФайла
		|ГДЕ
		|	Файлы.ТекущаяВерсия = &СсылкаНаВерсиюФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Отпечаток
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|			И (ВидыЭДЭП.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД))
		|			И (ВидыЭДЭП.Использовать)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыСсоглашениямиИФайлами.Ссылка КАК ДокументДО,
		|	ДокументыСсоглашениямиИФайлами.Соглашение КАК СоглашениеЭДО,
		|	ДокументыСсоглашениямиИФайлами.Файл.ТекущаяВерсия КАК ФайлТекущаяВерсия,
		|	ДокументыСсоглашениямиИФайлами.Файл.ПолноеНаименование КАК ПолноеИмяФайла,
		|	ДокументыСсоглашениямиИФайлами.Файл.ТекущаяВерсияРасширение КАК ФайлРасширение,
		|	ДокументыСсоглашениямиИФайлами.Контрагент КАК Контрагент,
		|	МАКСИМУМ(ЭлектронныеПодписи.ДатаПодписи) КАК ДатаПодписи,
		|	ВЫРАЗИТЬ(ДокументыСсоглашениямиИФайлами.Соглашение.ИдентификаторКонтрагента КАК СТРОКА(100)) КАК ИдентификаторКонтрагента,
		|	ВЫРАЗИТЬ(ДокументыСсоглашениямиИФайлами.Соглашение.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
		|	ДокументыСсоглашениямиИФайлами.Соглашение.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО
		|ИЗ
		|	ДокументыСсоглашениямиИФайлами КАК ДокументыСсоглашениямиИФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|			ПО ЭлектронныеПодписи.Отпечаток = ВТ_Сертификаты.Отпечаток
		|		ПО ДокументыСсоглашениямиИФайлами.ТекущаяВерсия = ЭлектронныеПодписи.Объект
		|			И (ЭлектронныеПодписи.УстановившийПодпись = ДокументыСсоглашениямиИФайлами.Подписал)
		|			И (ЭлектронныеПодписи.ПодписьВерна)
		|			И (ЭлектронныеПодписи.СертификатДействителен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыСсоглашениямиИФайлами.Ссылка,
		|	ДокументыСсоглашениямиИФайлами.Соглашение,
		|	ДокументыСсоглашениямиИФайлами.Файл,
		|	ДокументыСсоглашениямиИФайлами.Контрагент,
		|	ДокументыСсоглашениямиИФайлами.Файл.ТекущаяВерсия,
		|	ДокументыСсоглашениямиИФайлами.Файл.ПолноеНаименование,
		|	ДокументыСсоглашениямиИФайлами.Файл.ТекущаяВерсияРасширение,
		|	ВЫРАЗИТЬ(ДокументыСсоглашениямиИФайлами.Соглашение.ИдентификаторКонтрагента КАК СТРОКА(100)),
		|	ВЫРАЗИТЬ(ДокументыСсоглашениямиИФайлами.Соглашение.ИдентификаторОрганизации КАК СТРОКА(100)),
		|	ДокументыСсоглашениямиИФайлами.Соглашение.ПрофильНастроекЭДО
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ЭлектронныеПодписи.УстановившийПодпись.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ИСТИНА";
		
	
	Запрос.УстановитьПараметр("СсылкаНаВерсиюФайла", СсылкаНаВерсиюФайла);
	Запрос.УстановитьПараметр("ДокументДО", ДокументДО);
	Запрос.УстановитьПараметр("Организация", НастройкиОбменаЭД.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УникальныйИдентификатор =  Новый УникальныйИдентификатор;
		РеквизитыДокумента =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО,
			"РегистрационныйНомер, ДатаРегистрации, ДатаСоздания, ВидДокумента, Содержание, Заголовок, Сумма");
		СтруктураЭД = Новый Структура;
		СтруктураЭД.Вставить("Входящий", Ложь);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		СтруктураЭД.Вставить("Отправитель", Выборка.ИдентификаторОрганизации);
		СтруктураЭД.Вставить("Получатель", Выборка.ИдентификаторКонтрагента);
		СтруктураЭД.Вставить("НомерВерсииЭД", ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
		СтруктураЭД.Вставить("НомерЭД", ОбменСКонтрагентамиВнутренний.ВернутьИдЭД(СсылкаНаОбъект));
		СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
		СтруктураЭД.Вставить("НомерДокументаОтправителя", РеквизитыДокумента.РегистрационныйНомер);
		СтруктураЭД.Вставить("ДатаДокументаОтправителя", ?(ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации),РеквизитыДокумента.ДатаРегистрации,РеквизитыДокумента.ДатаСоздания));
		СтруктураЭД.Вставить("Организация", НастройкиОбменаЭД.Организация);
		СтруктураЭД.Вставить("Контрагент", Выборка.Контрагент);
		СтруктураЭД.Вставить("ПрофильНастроекЭДО", Выборка.ПрофильНастроекЭДО);
		СтруктураЭД.Вставить("СоглашениеЭД", Выборка.СоглашениеЭДО);
		СтруктураЭД.Вставить("УникальныйИдентификатор",УникальныйИдентификатор);
		СтруктураЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВариантПодписания", РеквизитыДокумента.ВидДокумента.Метаданные()) Тогда
			ВариантПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ВидДокумента,"ВариантПодписания");
			ТребуетсяПодтверждение = ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты;
		Иначе
			ТребуетсяПодтверждение = Ложь;
		КонецЕсли;
		СтруктураЭД.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
		СтруктураЭД.Вставить("СуммаДокумента", РеквизитыДокумента.Сумма); 
		СтруктураЭД.Вставить("ВерсияФайла", Выборка.ФайлТекущаяВерсия);
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(СсылкаНаОбъект);
		СтруктураЭД.Вставить("ДокументыОснования", ДокументыОснования);
		ВозвращаемоеЗначение = Неопределено;
		
		ИмяФайлаСПутемДляДанныеФайлаЭД = ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(Выборка.ФайлТекущаяВерсия);
		
		Если ИмяФайлаСПутемДляДанныеФайлаЭД = "" Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		
		ОписаниеОшибки = "";
		ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ИмяФайлаСПутемДляДанныеФайлаЭД, ОписаниеОшибки);
		УдалитьФайлы(ИмяФайлаСПутемДляДанныеФайлаЭД);
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
		Иначе
			Если ДанныеФайлаЭД.Свойства().Получить("Документ") <> Неопределено 
				И ДанныеФайлаЭД.Документ.Свойства().Получить("КНД") <> Неопределено Тогда
				
				СтруктураЭД.Вставить("КНД",ДанныеФайлаЭД.Документ.КНД);
				Если СтруктураЭД.КНД = "1115101" Тогда
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
					СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_SFAKT");
				ИначеЕсли СтруктураЭД.КНД = "1115108" Тогда
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
					СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_KORSFAKT");
				ИначеЕсли СтруктураЭД.КНД = "1175004" Тогда
					СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_OTORG12");
				ИначеЕсли СтруктураЭД.КНД = "1175010" Тогда
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОП);
					СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_TOVTORGPR");
				ИначеЕсли СтруктураЭД.КНД = "1175007" Тогда
					СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_ZAKTPRM");
				ИначеЕсли СтруктураЭД.КНД = "1175007" Тогда
					СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_ZAKTPRM");
				ИначеЕсли СтруктураЭД.КНД = "1175013" Тогда
					СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_REZRUZAK");
				ИначеЕсли СтруктураЭД.КНД = "1115125" Тогда
					СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_SCHFDOPPR");
				ИначеЕсли СтруктураЭД.КНД = "1115127" Тогда
					СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_KORSCHFDOPPR");
				КонецЕсли;
			КонецЕсли;

			СтруктураФайлаЭД = Новый Структура;
			ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
			Если ПустаяСтрока(ОписаниеОшибки) И ЗначениеЗаполнено(СтруктураФайлаЭД)Тогда
				СтруктураЭД.Вставить("ВидЭД",СтруктураФайлаЭД.ВидЭД);
			Иначе
				СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураЭД.Вставить("ТипДокумента", Перечисления.ТипыЭД.Прочее); 
			КонецЕсли;
		КонецЕсли;

		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, Выборка.ФайлТекущаяВерсия.УникальныйИдентификатор());
		
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("Номер", РеквизитыДокумента.РегистрационныйНомер);
		СтруктураОбъекта.Вставить("Дата", ?(ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации), РеквизитыДокумента.ДатаРегистрации, РеквизитыДокумента.ДатаСоздания));
		СтруктураОбъекта.Вставить("Организация", НастройкиОбменаЭД.Организация);
		СтруктураОбъекта.Вставить("Контрагент", Выборка.Контрагент);
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ПолноеИмяФайла = АдресКаталога +Выборка.ПолноеИмяФайла+"."+Выборка.ФайлРасширение;
		Иначе
			ГГГГММДД = СтрЗаменить(Формат(СтруктураЭД.ДатаЭД, "ДФ=yyyy-MM-dd"), "-", "");
			СтруктураФайла = Новый Структура();
			СтруктураФайла.Вставить("Префикс",                 СтруктураЭД.ПрефиксИдФайла);
			СтруктураФайла.Вставить("ИДПолучателя",            СтруктураЭД.Получатель);
			СтруктураФайла.Вставить("ИДОтправителя",           СтруктураЭД.Отправитель);
			СтруктураФайла.Вставить("ГГГГММДД",                ГГГГММДД);
			СтруктураФайла.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
			
			ИдФайл = ОбменСКонтрагентамиСлужебный.ФНСИмяФайла(СтруктураФайла);
			ПолноеИмяФайла = АдресКаталога + ИдФайл + ".xml"
		КонецЕсли;
		
		ИмяФайлаСПутем = ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(Выборка.ФайлТекущаяВерсия);
		
		ПереместитьФайл(ИмяФайлаСПутем,ПолноеИмяФайла); 
		
		// данные ЭП
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(Выборка.ФайлТекущаяВерсия,,Выборка.ДатаПодписи);
		МассивЭП = Новый Массив;
		Пока ВыборкаЗапроса.Следующий() Цикл
			СтруктураЭП = Новый Структура;
			СтруктураЭП.Вставить("НоваяПодписьДвоичныеДанные", ВыборкаЗапроса.Подпись.Получить());
			СтруктураЭП.Вставить("Отпечаток", ВыборкаЗапроса.Отпечаток);
			СтруктураЭП.Вставить("ДатаПодписи", ВыборкаЗапроса.ДатаПодписи);
			СтруктураЭП.Вставить("Комментарий", ВыборкаЗапроса.Комментарий);
			СтруктураЭП.Вставить("ИмяФайлаПодписи", ВыборкаЗапроса.ИмяФайлаПодписи);
			СтруктураЭП.Вставить("КомуВыданСертификат", ВыборкаЗапроса.КомуВыданСертификат);
			СтруктураЭП.Вставить("ДвоичныеДанныеСертификата", ВыборкаЗапроса.Сертификат.Получить());
			СтруктураЭП.Вставить("ПодписьВерна", ВыборкаЗапроса.ПодписьВерна);
			СтруктураЭП.Вставить("ДатаПроверкиПодписи", ВыборкаЗапроса.ДатаПроверкиПодписи);
			СтруктураЭП.Вставить("УникальныйИдентификатор", ВыборкаЗапроса.УникальныйИдентификатор);
			МассивЭП.Добавить(СтруктураЭП);
		КонецЦикла;
		
		Если ТипЗнч(МассивЭП) = Тип("Массив") И МассивЭП.Количество() > 0 Тогда
			СтруктураЭД.Вставить("ЭПФайла", МассивЭП);
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		СтруктураПараметров.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		МассивСтруктурВозврата.Добавить(СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заносит информацию о подписи объекта.
//
// Параметры:
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код;
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи;
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего;
//  ДатаПодписи  - Дата - дата подписи;
//  Комментарий  - Строка - комментарий подписи;
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла);
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата;
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ЗанестиИнформациюОПодписи(
				ПодписываемыйОбъектСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				ДвоичныеДанныеСертификата,
				ПодписьВерна,
				ДатаПроверкиПодписи,
				УникальныйИдентификатор = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПодписи = ЭлектроннаяПодпись.ДатаПодписания(НоваяПодписьДвоичныеДанные);
	ДатаПодписи = ?(ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, ТекущаяДатаСеанса());
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ПодписываемыйОбъект.Заблокировать();
	Иначе
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка;
	КонецЕсли;
	
	Если ДатаПодписи = Дата('00010101') Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеПодписи.Добавить();
	
	НоваяЗапись.КомуВыданСертификат = КомуВыданСертификат;
	НоваяЗапись.ДатаПодписи         = ДатаПодписи;
	НоваяЗапись.ИмяФайлаПодписи     = ИмяФайлаПодписи;
	НоваяЗапись.Комментарий         = Комментарий;
	НоваяЗапись.Отпечаток           = Отпечаток;
	НоваяЗапись.ПодписьВерна        = ПодписьВерна;
	НоваяЗапись.ДатаПроверкиПодписи = ДатаПроверкиПодписи;
	НоваяЗапись.Подпись             = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные);
	НоваяЗапись.УстановившийПодпись = Пользователи.ТекущийПользователь();
	НоваяЗапись.Сертификат          = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
	
	ПодписываемыйОбъект.ПодписанЭП = Истина;
	ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		ПодписываемыйОбъект.Разблокировать();
	КонецЕсли;

КонецПроцедуры

// Получает все подписи файла.
//
// Параметры:
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  МассивВозврата - массив структур с возвращаемыми значениями.
//
Функция ПолучитьВсеПодписиЭД(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.НомерСтроки,
		|	ЭлектронныеПодписи.ДатаПодписи,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.Комментарий,
		|	ЭлектронныеПодписи.Отпечаток,
		|	ЭлектронныеПодписи.ПодписьВерна,
		|	ЭлектронныеПодписи.Сертификат,
		|	ЭлектронныеПодписи.УстановившийПодпись
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	МассивДанныхОПодписях = Новый Массив;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ЭПДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		СертификатДвоичныеДанные = ВыборкаЗапроса.Сертификат.Получить();
		
		ЭПИнфо = Новый Структура;
		ЭПИнфо.Вставить("ПодписанныйОбъект");
		ЭПИнфоСвойства = Новый Структура;
		ЭПИнфоСвойства.Вставить("Подпись", ЭПДвоичныеДанные);
		ЭПИнфоСвойства.Вставить("ДатаПодписи", ВыборкаЗапроса.ДатаПодписи);
		ЭПИнфоСвойства.Вставить("ПодписьВерна", ВыборкаЗапроса.ПодписьВерна);
		ЭПИнфоСвойства.Вставить("ДатаПроверкиПодписи", ВыборкаЗапроса.ДатаПроверкиПодписи);
		ЭПИнфоСвойства.Вставить("Комментарий", ВыборкаЗапроса.Комментарий);
		ЭПИнфоСвойства.Вставить("ИмяФайлаПодписи", ВыборкаЗапроса.ИмяФайлаПодписи);
		ЭПИнфоСвойства.Вставить("Отпечаток", ВыборкаЗапроса.Отпечаток);
		ЭПИнфоСвойства.Вставить("Сертификат", СертификатДвоичныеДанные);
		ЭПИнфоСвойства.Вставить("КомуВыданСертификат", ВыборкаЗапроса.КомуВыданСертификат);
		ЭПИнфоСвойства.Вставить("УстановившийПодпись", ВыборкаЗапроса.УстановившийПодпись);
		ЭПИнфоСвойства.Вставить("АдресФайла", "");
		ЭПИнфо.Вставить("СвойстваПодписи", ЭПИнфоСвойства);
		МассивДанныхОПодписях.Добавить(ЭПИнфо);
	КонецЦикла;
	
	Возврат МассивДанныхОПодписях;
	
КонецФункции

Функция НайтиДобавитьКонтактноеЛицоИзСертификата(Контрагент,СертификатДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	Если ЗначениеЗаполнено(СертификатДвоичныеДанные) Тогда
		Сертификат = Новый СертификатКриптографии(СертификатДвоичныеДанные);
		Коллекция = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(Сертификат);
		Если Коллекция.Свойство("ОбщееИмя") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактныеЛица.Ссылка,
			|	КонтактныеЛица.Наименование
			|ПОМЕСТИТЬ КонтактныеЛицаКонтрагента
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Владелец = &Владелец
			|	И НЕ КонтактныеЛица.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактныеЛицаКонтрагента.Ссылка
			|ИЗ
			|	КонтактныеЛицаКонтрагента КАК КонтактныеЛицаКонтрагента
			|ГДЕ
			|	КонтактныеЛицаКонтрагента.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Запрос.УстановитьПараметр("Наименование", Коллекция.ОбщееИмя);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				КонтактноеЛицо = ВыборкаДетальныеЗаписи.Ссылка;
			ИначеЕсли РезультатЗапроса[0].Выгрузить()[0].Количество = 0 Тогда
				
				// Добавляем новое контактное лицо
				КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
				КонтактноеЛицо.Владелец = Контрагент;
				КонтактноеЛицо.Наименование = Коллекция.ОбщееИмя;
				Коллекция.Свойство("Должность",КонтактноеЛицо.Должность);
				КонтактноеЛицо.Комментарий = НСтр("ru = 'Создан при загрузке ЭД '; en = 'Created when importing ED '");
				КонтактноеЛицо.Записать();
				КонтактноеЛицо = КонтактноеЛицо.Ссылка;
			Иначе
				КонтактноеЛицо = Коллекция.Фамилия + " "+ Коллекция.Имя + " "+Коллекция.Отчество+", "
					+ Коллекция.Организация+ ?(ЗначениеЗаполнено(Коллекция.Должность),", "+ Коллекция.Должность,"");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
	
КонецФункции
	
// Получает реквизиты документа документооборота из электроннного документа.
//
// Параметры:
//  ЭД - ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электроннный документ.
// 
// Возвращаемое значение:
//  Структура - реквизиты документа.
//
Функция ПодготовитьСтруктуруДляДокументаДОПоЭД(ЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Не (ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыДокумента = ПолучитьСтруктуруИменПередаваемыхРеквизитов();
		РеквизитыДокумента.Вставить("Файлы");
		РеквизитыДокумента.Вставить("ДокументДО");
		
		ЭДПрисоединенныйФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭД);
		РеквизитыЭДПФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭДПрисоединенныйФайл,
		"ВладелецФайла, НаименованиеФайла, Расширение, ДополнительныеРеквизиты");
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД,"ВидЭД, 
		|ДатаДокументаОтправителя, Контрагент, НомерДокументаОтправителя, Организация,  
		|СуммаДокумента, Комментарий, ТребуетсяПодтверждение, ТипДокумента, Текст, УникальныйИД, Дата");
		
		ДополнительныеРеквизиты = РеквизитыЭДПФ.ДополнительныеРеквизиты.Получить();
		Если Тип(ДополнительныеРеквизиты) <> Тип("Структура") Тогда
			ДополнительныеРеквизиты = Новый Структура;
		КонецЕсли;
		
		// файл
		СтруктураРазбораЭД = Новый Структура;
		МасивФайлов = Новый Массив;
		ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭДПрисоединенныйФайл);
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = СсылкаНаДвоичныеДанныеФайла;
		ЗаполнитьЗначенияСвойств(СведенияОФайле, ЭДПрисоединенныйФайл);
		СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
		СведенияОФайле.ИмяБезРасширения = РеквизитыЭДПФ.НаименованиеФайла;
		Если СтрНайти(Нрег(РеквизитыЭДПФ.Расширение),"xml") > 0 Тогда 
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РеквизитыЭДПФ.Расширение);
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			СтруктураРазбораЭД = СформироватьДеревоРазбора(ИмяВременногоФайла);
			Если ТипЗнч(СтруктураРазбораЭД) = Тип("Структура") Тогда
				Если СтруктураРазбораЭД.Свойство("ИмяСоздания")
					И ЗначениеЗаполнено(СтруктураРазбораЭД.ИмяСоздания) Тогда
					СведенияОФайле.ИмяБезРасширения = СтруктураРазбораЭД.ИмяСоздания;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		СведенияОФайле.РасширениеБезТочки = РеквизитыЭДПФ.Расширение;
		
		КомуВыданСертификат = "";
		ДатаПодписанияКонтрагентом = Неопределено;
		МассивДанныхОПодписях = ПолучитьВсеПодписиЭД(ЭДПрисоединенныйФайл);
		КоличествоСтрок = МассивДанныхОПодписях.Количество();
		Если КоличествоСтрок  >0 Тогда
			СвойстваПодписи = МассивДанныхОПодписях[КоличествоСтрок-1].СвойстваПодписи;
			ДатаПодписанияКонтрагентом = СвойстваПодписи.ДатаПодписи;
			СертификатДвоичныеДанные = СвойстваПодписи.Сертификат;
			ПодписантОтКонтрагента = НайтиДобавитьКонтактноеЛицоИзСертификата(
				РеквизитыЭД.Контрагент,СертификатДвоичныеДанные);
		КонецЕсли; 
		СведенияОФайле.Вставить("МассивДанныхОПодписях", МассивДанныхОПодписях);
		СведенияОФайле.Вставить("ЭДПрисоединенныйФайл", ЭДПрисоединенныйФайл);
		СведенияОФайле.Вставить("ЭлектронныйДокумент", РеквизитыЭДПФ.ВладелецФайла);
		МасивФайлов.Добавить(СведенияОФайле);
		
		РеквизитыДокумента.Файлы = МасивФайлов;
		
		Если ДополнительныеРеквизиты.Свойство("ИдентификаторДокументаДО") Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование.Владелец.ВладелецФайла КАК ДокументОснование
				|ИЗ
				|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ИдентификаторыОснованийВладельцаФайла
				|		ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = ИдентификаторыОснованийВладельцаФайла.Ссылка
				|ГДЕ
				|	ИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования = &ИдентификаторДокументаДО";
			
			Запрос.УстановитьПараметр("ИдентификаторДокументаДО", ДополнительныеРеквизиты.ИдентификаторДокументаДО);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				РеквизитыДокумента.ДокументДО = Выборка.ДокументОснование;
				РеквизитыДокумента.ИдентификаторДокументаДО = ДополнительныеРеквизиты.ИдентификаторДокументаДО;
				Возврат РеквизитыДокумента;
			КонецЕсли;
		
		КонецЕсли; 

		РеквизитыДокумента.Вставить("Стороны");
		РеквизитыДокумента.Вставить("ДатаСоздания");
		РеквизитыДокумента.Вставить("Заголовок");
		РеквизитыДокумента.Вставить("Содержание");
		РеквизитыДокумента.Вставить("Папка");
		РеквизитыДокумента.Вставить("Ответственный");
		РеквизитыДокумента.Вставить("ТребуетсяПодтверждение");
		
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, РеквизитыЭД);
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДополнительныеРеквизиты);
		
		ВидДокументаОтпр = Неопределено;
		Если ДополнительныеРеквизиты.Свойство("ВидДокумента") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.ВидДокумента) Тогда
			
			ВидДокументаОтпр = ДополнительныеРеквизиты.ВидДокумента;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидДокументаОтпр) ТОгда
			ВидДокументаОтпр = РеквизитыЭД.ВидЭД;
		КонецЕсли;
		
		ПараметрыДокументаПоВидуЭД = ПолучитьПараметрыДокументаПоВидуЭД(ВидДокументаОтпр, РеквизитыЭД.Контрагент);
		Если Не ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭД.ВидДокумента) ТОгда
			ВидДокументаОтпр = РеквизитыЭД.ВидЭД;
			ПараметрыДокументаПоВидуЭД = ПолучитьПараметрыДокументаПоВидуЭД(ВидДокументаОтпр, РеквизитыЭД.Контрагент);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ПараметрыДокументаПоВидуЭД);
		Если Делопроизводство.ИспользоватьВидыВнутреннихДокументов() 
			И Не ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента)Тогда
			
			Возврат Неопределено;
		КонецЕсли; 
		
		
		Если ДополнительныеРеквизиты.Свойство("Сумма") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.Сумма) Тогда
			РеквизитыДокумента.Сумма = XMLЗначение(Тип("Число"),РеквизитыДокумента.Сумма);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыЭД.СуммаДокумента) Тогда
			РеквизитыДокумента.Сумма = РеквизитыЭД.СуммаДокумента;
		ИначеЕсли СтруктураРазбораЭД.Свойство("СуммаДокумента") 
			И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаДокумента) Тогда
			РеквизитыДокумента.Сумма = СтруктураРазбораЭД.СуммаДокумента;
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("СуммаНДС") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.СуммаНДС) Тогда
			РеквизитыДокумента.СуммаНДС = XMLЗначение(Тип("Число"),РеквизитыДокумента.СуммаНДС);
		ИначеЕсли СтруктураРазбораЭД.Свойство("СуммаНДС")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаНДС) Тогда
			РеквизитыДокумента.СуммаНДС = СтруктураРазбораЭД.СуммаНДС;
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("Валюта") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.Валюта) Тогда
			СписокВалют = Новый Массив; 
			СписокВалют.Добавить(ДополнительныеРеквизиты.Валюта);
			СсылкиНаВалюту = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
			Если ЗначениеЗаполнено(СсылкиНаВалюту) Тогда
				РеквизитыДокумента.Валюта = СсылкиНаВалюту[0];
			КонецЕсли; 
		ИначеЕсли СтруктураРазбораЭД.Свойство("Валюта")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.Валюта) Тогда
			РеквизитыДокумента.Валюта = СтруктураРазбораЭД.Валюта;
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("ДатаНачалаДействия") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.ДатаНачалаДействия) Тогда
			РеквизитыДокумента.ДатаНачалаДействия = XMLЗначение(Тип("Дата"),РеквизитыДокумента.ДатаНачалаДействия);
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("ДатаОкончанияДействия") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.ДатаОкончанияДействия) Тогда
			РеквизитыДокумента.ДатаОкончанияДействия = XMLЗначение(Тип("Дата"),РеквизитыДокумента.ДатаОкончанияДействия);
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("Бессрочный") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.Бессрочный) Тогда
			РеквизитыДокумента.Бессрочный = XMLЗначение(Тип("Булево"),РеквизитыДокумента.Бессрочный);
		КонецЕсли;
		
		РеквизитыДокумента.Заголовок = РеквизитыЭД.Текст;
		Если ДополнительныеРеквизиты.Свойство("Заголовок") Тогда 
			РеквизитыДокумента.Заголовок = ДополнительныеРеквизиты.Заголовок;
		ИначеЕсли ПустаяСтрока(РеквизитыДокумента.Заголовок) Тогда
			Если Не ПустаяСтрока(РеквизитыЭД.Комментарий) Тогда
				РеквизитыДокумента.Заголовок = РеквизитыЭД.Комментарий;
			ИначеЕсли СтруктураРазбораЭД.Свойство("ИмяСоздания")
					И ЗначениеЗаполнено(СтруктураРазбораЭД.ИмяСоздания) Тогда
					РеквизитыДокумента.Заголовок = СтруктураРазбораЭД.ИмяСоздания;
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыДокумента.ДатаСоздания = ТекущаяДатаСеанса();
		
		Стороны = Новый ТаблицаЗначений;
		Стороны.Колонки.Добавить("Сторона");
		Стороны.Колонки.Добавить("КонтактноеЛицо");
		Стороны.Колонки.Добавить("ДатаПодписи");
		Стороны.Колонки.Добавить("Подписан");
		Стороны.Колонки.Добавить("Подписал");
		
		Сторона = Стороны.Добавить();
		Сторона.Сторона = РеквизитыЭД.Организация;
		
		Сторона = Стороны.Добавить();
		Сторона.Сторона = РеквизитыЭД.Контрагент;
		Если ДополнительныеРеквизиты.Свойство("КонтактноеЛицо") И 
			ЗначениеЗаполнено(ДополнительныеРеквизиты.КонтактноеЛицо) Тогда
			Сторона.КонтактноеЛицо = ДополнительныеРеквизиты.КонтактноеЛицо;
		КонецЕсли;
		Сторона.ДатаПодписи = ДатаПодписанияКонтрагентом;
		Сторона.Подписан = Истина;
		Сторона.Подписал = ПодписантОтКонтрагента;

		
		РеквизитыДокумента.Стороны = Стороны;
		
		
		Возврат РеквизитыДокумента;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение реквизитов документа на основе ЭД'; en = 'Filling in document attributes with ED data'"), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецФункции	

// Создает документ документооборота на основании данных структуры РеквизитыДокумента.
//
// Параметры:
//  РеквизитыДокумента - Структура - данные документа.
//  ПерезаполняемыйДокумент - Ссылка на документ имеющегося уже
// 
// Возвращаемое значение:
//  ВнутренниеДокументы,ВходящиеДокументы  - документ.
//
Функция СоздатьДокументДО(РеквизитыДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДокументДО) Тогда
			Документ = РеквизитыДокумента.ДокументДО;
		Иначе
			Если Делопроизводство.ИспользоватьВидыВнутреннихДокументов() И Не ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
				Возврат Неопределено;
			Иначе	
				ИмяСправочника = "ВнутренниеДокументы";
				Если ТипЗнч(РеквизитыДокумента.ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда 
					ИмяСправочника = "ВнутренниеДокументы";
				КонецЕсли;
			КонецЕсли;
			
			Документ = Справочники[ИмяСправочника].СоздатьЭлемент();
			Документ.Заполнить(РеквизитыДокумента);
			Документ.Записать();
		КонецЕсли; 
		
		Для Каждого СведенияОФайле Из РеквизитыДокумента.Файлы цикл
			
			НовыйФайл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Документ.Ссылка, СведенияОФайле);
			Если СведенияОФайле.МассивДанныхОПодписях.Количество() > 0 Тогда
				МассивДанныхОПодписях = СведенияОФайле.МассивДанныхОПодписях;
				Для каждого ДанныеОПодписях Из МассивДанныхОПодписях Цикл
					ДанныеОПодписях.ПодписанныйОбъект = НовыйФайл;
				КонецЦикла;
				РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхОПодписях);
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(СведенияОФайле.ЭлектронныйДокумент);
			ЭлектронныйДокументВходящий = СведенияОФайле.ЭлектронныйДокумент.ПолучитьОбъект();
			НоваяСтрока = ЭлектронныйДокументВходящий.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = НовыйФайл.ТекущаяВерсия;
			Если ЗначениеЗаполнено(РеквизитыДокумента.ИдентификаторДокументаДО) Тогда
				НоваяСтрока = ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла.Добавить();
				НоваяСтрока.ИдентификаторДокументаОснования = РеквизитыДокумента.ИдентификаторДокументаДО;
			КонецЕсли;
			ЭлектронныйДокументВходящий.Записать();
			РазблокироватьДанныеДляРедактирования(СведенияОФайле.ЭлектронныйДокумент);
			
			ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(НовыйФайл.ТекущаяВерсия, СведенияОФайле.ЭлектронныйДокумент);
			
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Возврат Документ.Ссылка;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
 		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание документа на основе ЭД'; en = 'Generating document with ED data'"), УровеньЖурналаРегистрации.Ошибка, 
			Документ.Метаданные(),, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецФункции	

// Создает документ документооборота на основании электронного документа.
//
// Параметры:
//  ДанныеДляЗагрузки - ЭДПрисоединенныеФайлы - ссылка на электроннный документ.
// 
// Возвращаемое значение:
//  ВнутренниеДокументы,ВходящиеДокументы  - документ.
//
Функция СоздатьДокументДОпоЭД(ДокументЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		
		РеквизитыДокумента = ПодготовитьСтруктуруДляДокументаДОПоЭД(ДокументЭД);
		
		Если РеквизитыДокумента <> Неопределено Тогда
			
			Документ = СоздатьДокументДО(РеквизитыДокумента);
			
			Если Не ЗначениеЗаполнено(Документ.Ответственный) Тогда
				РегистрыСведений.ПроверкаЗагруженныхДанных.УстановитьПризнакПроверки(Документ.Ссылка, Ложь);
			КонецЕсли; 
			
			Возврат Документ;
		КонецЕсли; 

	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание документа ДО на основе ЭД'; en = 'Generating DM document with ED data'"), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет готовность документа документооборота к ЭДО.
//  Условия:
//  1. включена функциональная опция ИспользоватьОбменЭД
//  2. документ подписан
//  3. есть действующее соглашение по ЭДО 
//  4. у документа есть хотя бы один файл
//  5. Файлы подписаны сертификатом ЭП из соглашения по ЭДО
//
//  Документ - ВнутренниеДокументы,ВходящиеДокументы  - ссылка на документ.
//  ВыводитьСообщение - Булево - признак выводить ли сообщения о не выполнении условий
// 
// Возвращаемое значение:
//  Булево  - признак готовности.
//
Функция ДокументГотовКФормированиюЭД(Документ, ВыводитьСообщение = Ложь, КонтрагентыГотовыеКЭДО = Неопределено, 
	ПроверятьПодписанДокумент = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючКДанным = "";

	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнутренниеДокументыКонтрагенты.Ссылка,
		|	ВнутренниеДокументыКонтрагенты.Сторона КАК Организация,
		|	ВнутренниеДокументыКонтрагенты.Подписал
		|ПОМЕСТИТЬ ДокументыДОПодписанные
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыКонтрагенты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ПроверятьПодписанДокумент ТОГДА 
		|				НЕ ВнутренниеДокументыКонтрагенты.Подписал.Ссылка ЕСТЬ NULL И ВнутренниеДокументыКонтрагенты.Подписан
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВнутренниеДокументыКонтрагенты.НомерСтроки = 1
		|	И ВнутренниеДокументыКонтрагенты.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументыКонтрагенты.Ссылка,
		|	ВнутренниеДокументыКонтрагенты.Сторона КАК Контрагент,
		|	ДокументыДОПодписанные.Подписал,
		|	ДокументыДОПодписанные.Организация
		|ПОМЕСТИТЬ ДокументыДО
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыКонтрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДОПодписанные КАК ДокументыДОПодписанные
		|		ПО ВнутренниеДокументыКонтрагенты.Ссылка = ДокументыДОПодписанные.Ссылка
		|ГДЕ
		|	ВнутренниеДокументыКонтрагенты.Сторона ССЫЛКА Справочник.Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК Ссылка,
		|	СоглашенияОбИспользованииЭД.Ссылка КАК Основание,
		|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	СоглашенияОбИспользованииЭД.Ссылка.Контрагент КАК Контрагент,
		|	СоглашенияОбИспользованииЭД.Ссылка.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И СоглашенияОбИспользованииЭД.Ссылка.СостояниеСоглашения В(&СписокСостоянийСоглашений)
		|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СписокСпособовОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО.ПометкаУдаления = ЛОЖЬ
		|	И СоглашенияОбИспользованииЭД.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|	И СоглашенияОбИспользованииЭД.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Ссылка,
		|	Соглашения.Ссылка КАК Соглашение,
		|	ДокументыДО.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ДокументыСИмеющимесяСоглашениями
		|ИЗ
		|	ДокументыДО КАК ДокументыДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЧ_Соглашения КАК Соглашения
		|		ПО ДокументыДО.Контрагент = Соглашения.Контрагент
		|			И (Соглашения.Организация = ДокументыДО.Ссылка.Организация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ДокументыСИмеющимесяСоглашениями.Ссылка КАК Ссылка,
		|	ДокументыСИмеющимесяСоглашениями.Соглашение КАК Соглашение,
		|	Файлы.Ссылка КАК Файл,
		|	ДокументыСИмеющимесяСоглашениями.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ДокументыСсоглашениямиИФайлами
		|ИЗ
		|	ДокументыСИмеющимесяСоглашениями КАК ДокументыСИмеющимесяСоглашениями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (НЕ Файлы.ПометкаУдаления)
		|			И ДокументыСИмеющимесяСоглашениями.Ссылка = Файлы.ВладелецФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Отпечаток
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|			И (ВидыЭДЭП.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД))
		|			И (ВидыЭДЭП.Использовать)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыСсоглашениямиИФайлами.Ссылка КАК ДокументДО,
		|	ДокументыСсоглашениямиИФайлами.Соглашение КАК СоглашениеЭДО,
		|	ДокументыСсоглашениямиИФайлами.Файл КАК Файл,
		|	ДокументыСсоглашениямиИФайлами.Контрагент КАК Контрагент
		|ИЗ
		|	ДокументыСсоглашениямиИФайлами КАК ДокументыСсоглашениямиИФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|			ПО ЭлектронныеПодписи.Отпечаток = ВТ_Сертификаты.Отпечаток
		|		ПО ДокументыСсоглашениямиИФайлами.ТекущаяВерсия = ЭлектронныеПодписи.Объект
		|			И (ЭлектронныеПодписи.ПодписьВерна)
		|			И (ЭлектронныеПодписи.СертификатДействителен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыСсоглашениямиИФайлами.Ссылка,
		|	ДокументыСсоглашениямиИФайлами.Соглашение,
		|	ДокументыСсоглашениямиИФайлами.Файл,
		|	ДокументыСсоглашениямиИФайлами.Контрагент
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ЭлектронныеПодписи.УстановившийПодпись.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ИСТИНА";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		Запрос.УстановитьПараметр("ПроверятьПодписанДокумент", ПроверятьПодписанДокумент);

		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		Запрос.УстановитьПараметр("СписокСпособовОбменаЭД", СпособыОбменаЭД);
		
		СостоянияСоглашений = Новый Массив;
		СостоянияСоглашений.Добавить(Перечисления.СостоянияСоглашенийЭД.Действует);
		СостоянияСоглашений.Добавить(Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости);
		Запрос.УстановитьПараметр("СписокСостоянийСоглашений", СостоянияСоглашений);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ТЗ = РезультатЗапроса[6].Выгрузить();
		
		Если Не ТЗ.Количество() = 0 Тогда
			ТЗ.Свернуть("Контрагент");
			КонтрагентыГотовыеКЭДО = ТЗ.ВыгрузитьКолонку("Контрагент");
			Возврат Истина;
		ИначеЕсли ВыводитьСообщение Тогда
			Если РезультатЗапроса[1].Выгрузить()[0].Количество = 0 Тогда
				ПричинаНеГотовности = НСтр("ru = 'Документ не подписан с нашей стороны.'; en = 'The document is not signed by our party.'");
				КлючКДанным = "Объект.Стороны[0].Подписан";
			ИначеЕсли РезультатЗапроса[2].Выгрузить()[0].Количество = 0 Тогда
				ПричинаНеГотовности = НСтр("ru = 'Нет действующих соглашений по ЭДО.'; en = 'No valid EDI agreements.'");
			ИначеЕсли РезультатЗапроса[3].Выгрузить()[0].Количество = 0 Тогда
				ПричинаНеГотовности = НСтр("ru = 'Между сторонами нет действующего соглашения по ЭДО.'; en = 'There is no existing agreement between the EDI parties.'");
			ИначеЕсли РезультатЗапроса[4].Выгрузить()[0].Количество = 0 Тогда
				ПричинаНеГотовности = НСтр("ru = 'У документа нет ни одного файла.'; en = 'The document has no files.'");
				КлючКДанным = "ГруппаДанныеФайла";
			ИначеЕсли РезультатЗапроса[5].Выгрузить()[0].Количество = 0 Тогда
				ПричинаНеГотовности = НСтр("ru = 'Нет подходящего сертификата ЭП.'; en = 'No appropriate digital certificate.'");
			Иначе 
				ПричинаНеГотовности = НСтр("ru = 'Ни у одного из файлов документа нет ЭП с сертификатом из соглашения по ЭДО.'; en = 'Not a singe document file has DS with the certificate from the agreement.'");
				КлючКДанным = "ГруппаЭП";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ПричинаНеГотовности =  ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
	КонецЕсли;
	Если ВыводитьСообщение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПричинаНеГотовности, , КлючКДанным);
	КонецЕсли; 

	Возврат Ложь;
		
КонецФункции

// Возвращает связанную версию файла с электронным документом.
//
// Параметры:
//  ЭДПрисоединенныйФайл  - электронный документ.
// 
// Возвращаемое значение:
//  ВерсииФайлов - ссылка на версиею файла.
//
Функция ФайлПоСвязиЭДПФИФайлов(ЭДПрисоединенныйФайл) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайла
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка ЕСТЬ NULL )
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &ЭДПрисоединенныйФайл";

	Запрос.УстановитьПараметр("ЭДПрисоединенныйФайл", ЭДПрисоединенныйФайл);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВерсияФайла;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Удаляет состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДО
//
Процедура УдалитьСостояниеДокументаЭДО(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостояниеДокументовПоЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДокументДО = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Устоновает состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДО
//  СостояниеДокументаЭДО - ПеречислениеСсылка.СостоянияВерсийЭДДО
//
Процедура УстановитьСостояниеДокументаЭДО(СсылкаНаОбъект, Контрагент, СостояниеДокументаЭДО, НаправлениеЭД = Неопределено, Комментарий = Неопределено) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(СсылкаНаОбъект, Контрагент, СостояниеДокументаЭДО, НаправлениеЭД, Комментарий);
	
КонецПроцедуры

// Создание документов ДО на основе не обработанных входящих документов ЭД
//
Процедура СозданиеДокументовДОПоНеОбработаннымВхЭД();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК СсылкаНаОбъект
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЭлектронныйДокументВходящий.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|			ПО (ЭлектронныйДокументВходящийДокументыОснования.Ссылка = ЭлектронныйДокументВходящий.Ссылка)
		|	ГДЕ
		|		НЕ ЭлектронныйДокументВходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Аннулирован), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))
		|		И ЭлектронныйДокументВходящийДокументыОснования.Ссылка ЕСТЬ NULL 
		|		И НЕ ЭлектронныйДокументВходящий.ПометкаУдаления) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ВложенныйЗапрос.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП)))";
		
		МассивСсылокНаОбъект = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
		Для каждого ЭД Из МассивСсылокНаОбъект Цикл
			НачатьТранзакцию();
			Попытка
				Документ = СоздатьДокументДОпоЭД(ЭД);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение документа ДО на основе ЭД и установка состояния'; en = 'Filling in DM document with the ED data and setting its state'"), УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла; 
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентного создания документов ДО на основе ЭД произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%';
		|en = 'During document generation routine an error occurred.
		|Additional description:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// На стороне получателя формируем ответный ЭД и на стороне отправителя формируем первичный ЭД 
// по готовым к формированию документам ДО.
//
Процедура ФормированиеЭДПоГотовымДокументамДО()
	
	УстановитьПривилегированныйРежим(Истина);

	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.ДокументДО КАК СсылкаНаОбъект,
		|	СостоянияЭД.Контрагент,
		|	СостоянияЭД.НаправлениеЭД
		|ПОМЕСТИТЬ ДокументыГотовыеКотправкеПоЭДО
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(&НаДату, ) КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииДокументаПоЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку)
		|	И СостоянияЭД.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайла,
		|	ДокументыГотовыеКотправкеПоЭДО.СсылкаНаОбъект КАК СсылкаНаОбъект,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПрисоединенныйФайл,
		|	ДокументыГотовыеКотправкеПоЭДО.СсылкаНаОбъект.Утвердил КАК СсылкаНаОбъектПодписал,
		|	ДокументыГотовыеКотправкеПоЭДО.Контрагент
		|ПОМЕСТИТЬ ДокументыГотовыеКотправкеПоЭДООтветы
		|ИЗ
		|	ДокументыГотовыеКотправкеПоЭДО КАК ДокументыГотовыеКотправкеПоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
		|				И (ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка ЕСТЬ NULL )
		|		ПО ДокументыГотовыеКотправкеПоЭДО.СсылкаНаОбъект = СостоянияЭД.СсылкаНаОбъект.Владелец.ВладелецФайла
		|			И (СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ЭлектронныеПодписи.ДатаПодписи) КАК ДатаПодписи,
		|	ЭлектронныеПодписи.Объект,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.Контрагент
		|ПОМЕСТИТЬ ЭПСамаяПоздняяПодписанта
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыГотовыеКотправкеПоЭДООтветы КАК ДокументыГотовыеКотправкеПоЭДООтветы
		|		ПО ЭлектронныеПодписи.Объект = ДокументыГотовыеКотправкеПоЭДООтветы.ВерсияФайла
		|			И ЭлектронныеПодписи.УстановившийПодпись = ДокументыГотовыеКотправкеПоЭДООтветы.СсылкаНаОбъектПодписал
		|			И (ЭлектронныеПодписи.ПодписьВерна)
		|			И (ЭлектронныеПодписи.СертификатДействителен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныеПодписи.Объект,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыГотовыеКотправкеПоЭДООтветы.ВерсияФайла,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.СсылкаНаОбъект,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.ЭДПрисоединенныйФайл,
		|	ЭлектронныеПодписи.ДатаПодписи,
		|	ЭлектронныеПодписи.УстановившийПодпись,
		|	ЭлектронныеПодписи.Версия,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.Комментарий,
		|	ЭлектронныеПодписи.КомуВыданСертификат,
		|	ЭлектронныеПодписи.Отпечаток,
		|	ЭлектронныеПодписи.Подпись,
		|	ЭлектронныеПодписи.ПодписьВерна,
		|	ЭлектронныеПодписи.Сертификат,
		|	ЭлектронныеПодписи.СертификатДействителен,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.Контрагент
		|ИЗ
		|	ДокументыГотовыеКотправкеПоЭДООтветы КАК ДокументыГотовыеКотправкеПоЭДООтветы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭПСамаяПоздняяПодписанта КАК ЭПСамаяПоздняяПодписанта
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|			ПО ЭПСамаяПоздняяПодписанта.Объект = ЭлектронныеПодписи.Объект
		|				И ЭПСамаяПоздняяПодписанта.ДатаПодписи = ЭлектронныеПодписи.ДатаПодписи
		|		ПО ДокументыГотовыеКотправкеПоЭДООтветы.ВерсияФайла = ЭПСамаяПоздняяПодписанта.Объект";
		
		Запрос.УстановитьПараметр("НаДату",ТекущаяДатаСеанса());
		Результат = Запрос.ВыполнитьПакет();
		// на стороне получателя ЭД формируем ответный пакет ЭД
		ТаблицаФайловСОтветнымиПодписями = Результат[3].Выгрузить();
		
		Для каждого СтрокаТаблицы Из ТаблицаФайловСОтветнымиПодписями Цикл
			
			ЭДПрисоединенныйФайл = СтрокаТаблицы.ЭДПрисоединенныйФайл;
			ЭПИнфоСвойства = Новый Структура;
			ЭПИнфоСвойства.Вставить("ОбъектСсылка", ЭДПрисоединенныйФайл);
			ЭПИнфоСвойства.Вставить("Подпись", СтрокаТаблицы.Подпись.Получить());
			ЭПИнфоСвойства.Вставить("ДатаПодписи", СтрокаТаблицы.ДатаПодписи);
			ЭПИнфоСвойства.Вставить("ПодписьВерна", СтрокаТаблицы.ПодписьВерна);
			ЭПИнфоСвойства.Вставить("ДатаПроверкиПодписи", СтрокаТаблицы.ДатаПроверкиПодписи);
			ЭПИнфоСвойства.Вставить("Комментарий", СтрокаТаблицы.Комментарий);
			ЭПИнфоСвойства.Вставить("ИмяФайлаПодписи", СтрокаТаблицы.ИмяФайлаПодписи);
			ЭПИнфоСвойства.Вставить("Отпечаток", СтрокаТаблицы.Отпечаток);
			ЭПИнфоСвойства.Вставить("Сертификат", СтрокаТаблицы.Сертификат.Получить());
			ЭПИнфоСвойства.Вставить("КомуВыданСертификат", СтрокаТаблицы.КомуВыданСертификат);
			ЭПИнфоСвойства.Вставить("УстановившийПодпись", СтрокаТаблицы.УстановившийПодпись);
			
			ЭлектроннаяПодпись.ДобавитьПодпись(ЭДПрисоединенныйФайл,ЭПИнфоСвойства);
			
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Подписан);
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДПрисоединенныйФайл, ВспомогательнаяСтруктура, Ложь);
			МасссивПодписанныхЭД = Новый Массив;
			МасссивПодписанныхЭД.Добавить(ЭДПрисоединенныйФайл);
			
			СтРезультата = ОбменСКонтрагентамиСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(МасссивПодписанныхЭД, Истина);
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				СтрокаТаблицы.СсылкаНаОбъект, 
				СтрокаТаблицы.Контрагент, 
				Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен,
				Перечисления.НаправленияЭД.Входящий); 
		КонецЦикла; 

		
		// на стороне отправителя
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.ДокументДО КАК СсылкаНаОбъект,
		|	СостоянияЭД.Контрагент,
		|	СостоянияЭД.НаправлениеЭД
		|ПОМЕСТИТЬ ДокументыГотовыеКотправкеПоЭДО
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(&НаДату, ) КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииДокументаПоЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку)
		|	И СостоянияЭД.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ЭлектронныеПодписи.ДатаПодписи) КАК ДатаПодписи,
		|	ЭлектронныеПодписи.Объект,
		|	ДокументыГотовыеКотправкеПоЭДО.Контрагент
		|ПОМЕСТИТЬ ЭПСамаяПоздняяПодписанта
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыГотовыеКотправкеПоЭДО КАК ДокументыГотовыеКотправкеПоЭДО
		|		ПО ЭлектронныеПодписи.Объект.Владелец.ВладелецФайла = ДокументыГотовыеКотправкеПоЭДО.СсылкаНаОбъект
		|			И ЭлектронныеПодписи.УстановившийПодпись = ДокументыГотовыеКотправкеПоЭДО.СсылкаНаОбъект.Утвердил
		|			И (ЭлектронныеПодписи.ПодписьВерна)
		|			И (ЭлектронныеПодписи.СертификатДействителен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныеПодписи.Объект,
		|	ДокументыГотовыеКотправкеПоЭДО.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныеПодписи.Объект КАК ВерсияФайла,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.СсылкаНаОбъект,
		|	ДокументыГотовыеКотправкеПоЭДООтветы.Контрагент
		|ИЗ
		|	ДокументыГотовыеКотправкеПоЭДО КАК ДокументыГотовыеКотправкеПоЭДООтветы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭПСамаяПоздняяПодписанта КАК ЭПСамаяПоздняяПодписанта
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|			ПО ЭПСамаяПоздняяПодписанта.Объект = ЭлектронныеПодписи.Объект
		|				И ЭПСамаяПоздняяПодписанта.ДатаПодписи = ЭлектронныеПодписи.ДатаПодписи
		|		ПО ДокументыГотовыеКотправкеПоЭДООтветы.СсылкаНаОбъект = ЭПСамаяПоздняяПодписанта.Объект.Владелец.ВладелецФайла";
		
		Запрос.УстановитьПараметр("НаДату",ТекущаяДатаСеанса());
		
		Результат = Запрос.Выполнить();
				
		// на стороне отправителя формируем ЭД по готовым к формированию документам ДО
		МассивСсылокНаОбъект = Результат.Выгрузить().ВыгрузитьКолонку("ВерсияФайла");
		
		Если МассивСсылокНаОбъект.Количество() > 0 Тогда
			
			МассивЭД = Неопределено;
			МассивОтпечатковСертификатов = Новый Массив;
			Действие = "СформироватьОтправить";
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ФормироватьПакетыЭДПоПодписаннымЭД",Истина); 
			СоответствиеСертификатаИПароля = Новый Соответствие;
			
			Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ВыполнитьДействияПоЭД(
				МассивСсылокНаОбъект,
				МассивОтпечатковСертификатов,
				Действие,
				ДопПараметры,
				МассивЭД,
				СоответствиеСертификатаИПароля);
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время создания электронных документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%';
		|en = 'During creation of electronic documents an error occurred.
		|Additional description:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецПопытки;
	
	
КонецПроцедуры

// Регламентное задание формирует документы документооборота из электронных документов и
// электронные документоы из документов документооборота 
//
Процедура ПоддержкаЭДО() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаОформленныхЭД);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'; en = 'The scheduled job does not support SaaS mode.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// На стороне получателя формируем ответный ЭД
	// и на стороне отправителя формируем первичный ЭД по готовым к формированию документам ДО.
	ФормированиеЭДПоГотовымДокументамДО();
	
	// создание документов ДО на основе не обработанных входящих документов ЭД
	СозданиеДокументовДОПоНеОбработаннымВхЭД();
	
КонецПроцедуры

// Подписка на событие. Синхронизирует состояния в РС СостоянияВерсийЭД и СостоянияВерсийЭДДО
//
// Параметры:
//  Источник - набор РС СостоянияВерсийЭД
//
Процедура СинхронизироватьСостоянияЭДДляДО(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Запись Из Источник.ЭтотОбъект Цикл
		Если Не ЗначениеЗаполнено(Запись.ЭлектронныйДокумент) Тогда
			Продолжить;
		Иначе
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ЭлектронныйДокумент, "Контрагент");
			ЭДПрисоединенныйФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(Запись.ЭлектронныйДокумент);
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДПрисоединенныйФайл,"НаправлениеЭД");
		КонецЕсли; 
		Если ТипЗнч(Запись.СсылкаНаОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			СсылкаНаОбъект = Запись.СсылкаНаОбъект.Владелец.ВладелецФайла;
		Иначе
			Продолжить;
		КонецЕсли; 
		
		Если Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение
			Или Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора
			Или Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю
			Тогда
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(СсылкаНаОбъект, Контрагент, 
				Перечисления.СостоянияВерсийЭДДО.Отправлен, НаправлениеЭД);
		ИначеЕсли Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении 
			И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСчетФактура(Запись.ЭлектронныйДокумент) Тогда
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(СсылкаНаОбъект, Контрагент, 
				Перечисления.СостоянияВерсийЭДДО.НаПодписи, НаправлениеЭД);
		Иначе
			ИмяСостоянияЭД = Метаданные.Перечисления.СостоянияВерсийЭД.ЗначенияПеречисления[Перечисления.СостоянияВерсийЭД.Индекс(Запись.СостояниеВерсииЭД)].Имя;
			Если Не Метаданные.Перечисления.СостоянияВерсийЭДДО.ЗначенияПеречисления.Найти(ИмяСостоянияЭД) = Неопределено Тогда
				СостоянияВерсийЭДДО = Перечисления.СостоянияВерсийЭДДО[ИмяСостоянияЭД];
				РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(СсылкаНаОбъект, Контрагент, 
					СостоянияВерсийЭДДО, НаправлениеЭД);
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла;
	
КонецПроцедуры 

Функция ВернутьТаблицуФайловЭДПоДокументДО(СсылкаНаДокументДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	СостоянияЭД.ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
		|	СостоянияЭД.ЭлектронныйДокумент.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	СостоянияЭД.ЭлектронныйДокумент.НастройкаЭДО КАК НастройкаЭДО,
		|	СостоянияЭД.ЭлектронныйДокумент.ПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка ЕСТЬ NULL )
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект.Владелец.ВладелецФайла = &ДокументДО";

	Запрос.УстановитьПараметр("ДокументДО", СсылкаНаДокументДО);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

Функция ВернутьМассивФайловЭДПоДокументДО(СсылкаНаДокументДО) Экспорт
	
	ТаблицаФайловЭД =  ВернутьТаблицуФайловЭДПоДокументДО(СсылкаНаДокументДО);
	
	МассивФайловЭД = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаФайловЭД Цикл
		
		стСтрокаТаблицы = Новый Структура;
		Для Каждого ИмяКолонки Из ТаблицаФайловЭД.Колонки Цикл
			стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
		КонецЦикла;
		
		МассивФайловЭД.Добавить(стСтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат МассивФайловЭД;
	
КонецФункции

Функция МожноОтклонитьЭтотДокументДО(СсылкаНаДокументДО, МасивФайловЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаФайловЭД = ВернутьТаблицуФайловЭДПоДокументДО(СсылкаНаДокументДО);
	МасивФайловЭД = ТаблицаФайловЭД.ВыгрузитьКолонку("ФайлЭД");
	
	Для каждого СтрокаТаблицыФайловЭД Из ТаблицаФайловЭД Цикл
		МожноОтклонитьЭтотЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СтрокаТаблицыФайловЭД.ФайлЭД);
		Если Не МожноОтклонитьЭтотЭД Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПердставлениеКонтактногоЛицаПоДокументу(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументыСтороны.КонтактноеЛицо.Наименование КАК КонтактноеЛицо,
		|	КонтактныеЛицаКонтактнаяИнформацияМайл.Представление КАК Email,
		|	КонтактныеЛицаКонтактнаяИнформацияТелефон.Представление КАК Телефон
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформацияМайл
		|		ПО ВнутренниеДокументыСтороны.КонтактноеЛицо = КонтактныеЛицаКонтактнаяИнформацияМайл.Ссылка
		|			И (КонтактныеЛицаКонтактнаяИнформацияМайл.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформацияТелефон
		|		ПО ВнутренниеДокументыСтороны.КонтактноеЛицо = КонтактныеЛицаКонтактнаяИнформацияТелефон.Ссылка
		|			И (КонтактныеЛицаКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователя))
		|ГДЕ
		|	ВнутренниеДокументыСтороны.Ссылка = &ДокументОснование
		|	И ВнутренниеДокументыСтороны.НомерСтроки = 1";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонтактноеЛицо = "";
	
	Если Выборка.Следующий() Тогда
		КонтактноеЛицо = Выборка.КонтактноеЛицо; 
		Если ЗначениеЗаполнено(Выборка.Телефон) Тогда
			КонтактноеЛицо = КонтактноеЛицо + ", "+ Выборка.Телефон;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Email) Тогда
			КонтактноеЛицо = КонтактноеЛицо + ", "+ Выборка.Email;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

Функция ПолучитьСтруктуруИменПередаваемыхРеквизитов() Экспорт
	
	СтруктураИменПередаваемыхРеквизитов = Новый Структура;
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВидДокумента");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КонтактноеЛицо");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Сумма");
	СтруктураИменПередаваемыхРеквизитов.Вставить("СуммаНДС");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Валюта");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЛистов");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоПриложений");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЭкземпляров");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ЛистовВПриложениях");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаНачалаДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаОкончанияДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Бессрочный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ПорядокПродления");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ИдентификаторДокументаДО");
	
	Возврат СтруктураИменПередаваемыхРеквизитов;
	
КонецФункции

// Заполняет таблицу значений ДополнительныеДанные по отправляемому документу по ЭДО
//
// Параметры:
//  ДокументОснование - ДокументСсылка или СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  ДополнительныеДанные - ТаблицаЗначений - данные для формирования электронного документа.
//
Процедура ЗаполнитьДополнительныеДанныеПоДокументуОснования(ДокументОснование, ДополнительныеДанные) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ДокументДО = ДокументОснование;
	Иначе	
		ДокументДО = ДокументОснование.Владелец.ВладелецФайла;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО,
		"ВидДокумента, Сумма, СуммаНДС, Валюта, 
		|ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления,
		|КоличествоЛистов, КоличествоПриложений, КоличествоЭкземпляров, ЛистовВПриложениях");
		
	Если ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "ВидДокумента";
		НоваяСтрока.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ВидДокумента, "Наименование");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Сумма) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "Сумма";
		НоваяСтрока.Значение = РеквизитыДокумента.Сумма;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.СуммаНДС) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "СуммаНДС";
		НоваяСтрока.Значение = РеквизитыДокумента.СуммаНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Валюта) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "Валюта";
		НоваяСтрока.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.Валюта, "Код");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ДатаНачалаДействия) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "ДатаНачалаДействия";
		НоваяСтрока.Значение = РеквизитыДокумента.ДатаНачалаДействия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ДатаОкончанияДействия) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "ДатаОкончанияДействия";
		НоваяСтрока.Значение = РеквизитыДокумента.ДатаОкончанияДействия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Бессрочный) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "Бессрочный";
		НоваяСтрока.Значение = РеквизитыДокумента.Бессрочный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ПорядокПродления) Тогда
		ИндексЗначения = Перечисления.ПорядокПродления.Индекс(РеквизитыДокумента.ПорядокПродления);
		
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "ПорядокПродления";
		НоваяСтрока.Значение = Метаданные.Перечисления.ПорядокПродления.ЗначенияПеречисления[ИндексЗначения].Имя;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.КоличествоЛистов) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "КоличествоЛистов";
		НоваяСтрока.Значение = РеквизитыДокумента.КоличествоЛистов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.КоличествоПриложений) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "КоличествоПриложений";
		НоваяСтрока.Значение = РеквизитыДокумента.КоличествоПриложений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.КоличествоЭкземпляров) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "КоличествоЭкземпляров";
		НоваяСтрока.Значение = РеквизитыДокумента.КоличествоЭкземпляров;
	КонецЕсли;
	
	ПердставлениеКонтактногоЛица = ПолучитьПердставлениеКонтактногоЛицаПоДокументу(ДокументДО);
	Если ЗначениеЗаполнено(ПердставлениеКонтактногоЛица) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "КонтактноеЛицо";
		НоваяСтрока.Значение = ПердставлениеКонтактногоЛица;
	КонецЕсли; 
	
	НоваяСтрока = ДополнительныеДанные.Добавить();
	НоваяСтрока.Имя = "ИдентификаторДокументаДО";
	НоваяСтрока.Значение = Строка(ДокументДО.УникальныйИдентификатор());
	
	ОбменСКонтрагентамиДОПереопределяемый.ЗаполнитьДополнительныеДанныеПоДокументуОснования(ДокументОснование, ДополнительныеДанные);
	
КонецПроцедуры

Функция ВозратитьСтруктуруДляПросмтораЭД(АдресХранилища) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Чтение файла xml'; en = 'Reading xml file'"), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	// Чтение файлов без namespace по форматам ФНС
	Если ДанныеФайлаЭД <> Неопределено И ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
		И Найти(ДанныеФайлаЭД.ИдФайл, "DP_UVUTOCH") = 0 Тогда
		
		СтруктураОбмена = Новый Структура();
		СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"));
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		СтруктураОбмена.Вставить("АдресХранилища",          АдресХранилища);
		СтруктураОбмена.Вставить("СсылкаНаДокумент",        Неопределено);
		СтруктураОбмена.Вставить("ФайлАрхива", Ложь);
		Возврат СтруктураОбмена;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(Документ, КонтрагентыГотовыеКЭДО = Неопределено, НаправлениеЭД = Неопределено, 
	ПроверятьПодписанДокумент = Истина, ВыводитьСообщение = Истина) Экспорт
	
	Если КонтрагентыГотовыеКЭДО = Неопределено Тогда
		Если Не ОбменСКонтрагентамиДОВызовСервера.ДокументГотовКФормированиюЭД(Документ, ВыводитьСообщение, 
			КонтрагентыГотовыеКЭДО, ПроверятьПодписанДокумент) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КонтрагентыГотовыеКЭДО) Тогда
		Для каждого КонтрагентГотовыйКЭДО Из КонтрагентыГотовыеКЭДО Цикл
			ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
				Документ, 
				КонтрагентГотовыйКЭДО,
				ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку"),
				НаправлениеЭД);
		КонецЦикла; 
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

Процедура НачатьЭДОЗаново(ДокументДО, Контрагент, НаправлениеЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		РаботаСЭП.УдалитьПодписиОбъекта(ДокументДО);
		ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
			ДокументДО,
			Контрагент,
			ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭДДО.НеСформирован"),
			НаправлениеЭД);
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайла
			|ИЗ
			|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект.Владелец.ВладелецФайла = &ДокументДО";
		
		Запрос.УстановитьПараметр("ДокументДО", ДокументДО);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Выборка.ВерсияФайла,,Истина);
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Начать ЭДО заново'; en = 'Start EDI again'"), УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлДопДанных = Неопределено, ФайлКартинок = Неопределено) Экспорт
	
	Перем ДеревоРазбора, СтрокаОбъекта, Номер, Дата, ПространствоИмен, ВалютаКод;
	СтруктураВозврата = Новый Структура;
	
	СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ФайлДопДанных, ФайлКартинок);
	
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура")
			И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
			И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
			
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "Номер"));
		Если МассивСтрок.Количество() > 0 Тогда
			Номер = МассивСтрок[0].ЗначениеРеквизита;
		КонецЕсли;
			
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "Дата"));
		Если МассивСтрок.Количество() > 0 Тогда
			Дата = МассивСтрок[0].ЗначениеРеквизита;
		КонецЕсли;
		
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ИдентификаторДокумента"));
		Если МассивСтрок.Количество() > 0 Тогда
			ПространствоИмен = МассивСтрок[0].ЗначениеРеквизита;
			Если СтрНайти(ПространствоИмен, "TORG") > 0 Тогда
				НаименованиеДокумемнта = "Товарная накладная";
			ИначеЕсли СтрНайти(ПространствоИмен, "ON_SFAKT") > 0 Тогда
				НаименованиеДокумемнта = "Счет-фактура";
			ИначеЕсли СтрНайти(ПространствоИмен, "AKTPRM") > 0 Тогда
				НаименованиеДокумемнта = "Счет-фактура";
			Иначе
				НаименованиеДокумемнта = ПространствоИмен;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеДокумемнта) Тогда
			ИмяСоздания = НаименованиеДокумемнта+ 
				?(ЗначениеЗаполнено(Номер)," № "+Номер,"")+ 
				?(ЗначениеЗаполнено(Дата)," от "+ Формат(Дата,"ДФ=dd.MM.yy"),"");
			СтруктураВозврата.Вставить("ИмяСоздания", ИмяСоздания);
		КонецЕсли;
		
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СуммаДокумента"));
		Если МассивСтрок.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СуммаДокумента", МассивСтрок[0].ЗначениеРеквизита);
		КонецЕсли;
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СуммаНДС"));
		Если МассивСтрок.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СуммаНДС", МассивСтрок[0].ЗначениеРеквизита);
		Иначе
			МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СумНДС"));
			Если МассивСтрок.Количество() > 0 Тогда
				СтруктураВозврата.Вставить("СуммаНДС", МассивСтрок[0].ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ВалютаКод"));
		Если МассивСтрок.Количество() > 0 Тогда
			ВалютаКод = МассивСтрок[0].ЗначениеРеквизита;
		Иначе
			МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ВалКод"));
			Если МассивСтрок.Количество() > 0 Тогда
				ВалютаКод = МассивСтрок[0].ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВалютаКод) Тогда
			СписокВалют = Новый Массив; 
			СписокВалют.Добавить(ВалютаКод);
			СсылкиНаВалюту = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
			Если ЗначениеЗаполнено(СсылкиНаВалюту) Тогда
				СтруктураВозврата.Вставить("Валюта", СсылкиНаВалюту[0]);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


