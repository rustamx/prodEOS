
Процедура ОбновитьКонфигурациюНаСервере(ПараметрыВызова) Экспорт
	
	ПараметрыПриложения = Новый Соответствие;
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("РежимОбновления", 		0);
	ПараметрыОбновления.Вставить("ДатаВремяОбновления", 	ТекущаяДата());
	ПараметрыОбновления.Вставить("ВыслатьОтчетНаПочту", 	Ложь);
	ПараметрыОбновления.Вставить("АдресЭлектроннойПочты", 	"");
	ПараметрыОбновления.Вставить("КодЗадачиПланировщика",	0);
	ПараметрыОбновления.Вставить("ИмяФайлаОбновления", 		ПараметрыВызова.ИмяФайлаОбновления);
	ПараметрыОбновления.Вставить("СоздаватьРезервнуюКопию", 1);
	ПараметрыОбновления.Вставить("ИмяКаталогаРезервнойКопииИБ",	"");
	ПараметрыОбновления.Вставить("ВосстанавливатьИнформационнуюБазу", Ложь);
	
	ПараметрыОбновления.Вставить("ЗавершениеРаботыСистемы", Ложь);
	ПараметрыОбновления.Вставить("НуженФайлОбновления", 	Истина);
	
	
	ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
	
	ПараметрыАдминистрирования.Вставить("ИмяАдминистратораИнформационнойБазы", 	ПараметрыВызова.ИмяАдминистратораИнформационнойБазы);
	ПараметрыАдминистрирования.Вставить("ПарольНеразделенногоАдминистратораИБ", ПараметрыВызова.ПарольНеразделенногоАдминистратораИБ);
	
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	Если ДоступноИспользованиеРазделенныхДанных Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(
			ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы);
		Если ПользовательИБ <> Неопределено Тогда
			ИдентификаторАдминистратораИБ = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено, ИдентификаторАдминистратораИБ);
		АдминистраторИБ = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдентификаторАдминистратораИБ);
		
		ПараметрыАдминистрирования.Вставить("АдминистраторИБ", АдминистраторИБ);
		ПараметрыАдминистрирования.Вставить("ПарольАдминистратораИБ", "");
	
	КонецЕсли;
	
	ПараметрыАдминистрирования.Вставить("ИмяАдминистратораКластера", 	ПараметрыВызова.ИмяАдминистратораКластера);
	ПараметрыАдминистрирования.Вставить("ПарольАдминистратораКластера", ПараметрыВызова.ПарольАдминистратораКластера);
	
	//Если Не ОбновлениеКонфигурацииКлиент.ВозможнаУстановкаОбновления(ПараметрыОбновления, ПараметрыАдминистрирования) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ПараметрыОбновления.РежимОбновления = 0 Тогда // Обновить сейчас
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);
		//ЗавершитьРаботуСистемы(Ложь);
		ЗапуститьСкриптОбновления(ПараметрыОбновления, ПараметрыАдминистрирования, ПараметрыПриложения, ПараметрыВызова.Лог);
	//ИначеЕсли Параметры.РежимОбновления = 1 Тогда // При завершении работы
	//	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса";
	//	ПараметрыПриложения.Вставить(ИмяПараметра, Истина);
	//	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ИменаФайловОбновления", ИменаФайловОбновления(Параметры));
	КонецЕсли;
	
	ОбновлениеКонфигурацииВызовСервера.СохранитьНастройкиОбновленияКонфигурации(ПараметрыОбновления);
	
КонецПроцедуры


Процедура ЗапуститьСкриптОбновления(Параметры, ПараметрыАдминистрирования, ПараметрыПриложения, ПутьКЛогФайлу)
	
	//УдалитьЗадачуПланировщика(Параметры.КодЗадачиПланировщика);
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления(Истина, Параметры, ПараметрыАдминистрирования, ПараметрыПриложения);
	ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Информация",
		НСтр("ru = 'Выполняется процедура обновления конфигурации:'; en = 'Configuration update procedure is executed:'") + " " + ИмяГлавногоФайлаСкрипта, , , ПараметрыПриложения);
	ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтатусОбновления(ИмяПользователя(), Истина, Ложь, Ложь,
		ИмяГлавногоФайлаСкрипта, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	
	ПутьКЛогФайлу = ПолучитьКаталогФайла(ИмяГлавногоФайлаСкрипта);
	
	СтрокаЗапуска = "cmd /c """"%1"""" [p1]%2[/p1][p2]%3[/p2]";
	СтрокаЗапуска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗапуска, ИмяГлавногоФайлаСкрипта,
		СтрокаUnicode(ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы),
		СтрокаUnicode(ПараметрыАдминистрирования.ПарольАдминистратораКластера));
	Оболочка = Новый COMОбъект("Wscript.Shell");
	Оболочка.RegWrite("HKCU\Software\Microsoft\Internet Explorer\Styles\MaxScriptStatements", 1107296255, "REG_DWORD");
	Оболочка.Run(СтрокаЗапуска, 0);
		
КонецПроцедуры

Функция СформироватьФайлыСкриптаОбновления(Знач ИнтерактивныйРежим, Параметры, ПараметрыАдминистрирования, ПараметрыПриложения)
	
	ПараметрыРаботыКлиента = ПараметрыРаботыКлиента();
	ЭтоФайловаяБаза = ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая;
	
	#Если Не ВебКлиент Тогда
	КаталогПлатформы = Неопределено;
	Параметры.Свойство("КаталогПлатформы", КаталогПлатформы);
	КаталогПрограммы = ?(ЗначениеЗаполнено(КаталогПлатформы), КаталогПлатформы, КаталогПрограммы());
	
	
	ИмяИсполняемогоФайлаКонфигуратора = КаталогПрограммы + "1cv8.exe";
	ИмяИсполняемогоФайлаКлиента = КаталогПрограммы + "1cv8c.exe";
	
	ИспользоватьCOMСоединитель = Не (ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации Или ПараметрыРаботыКлиента.ЭтоУчебнаяПлатформа);
	
	ПараметрыСкрипта = ПолучитьПараметрыАутентификацииАдминистратораОбновления(ПараметрыАдминистрирования, ПараметрыПриложения);
	СтрокаСоединенияИнформационнойБазы = ПараметрыСкрипта.СтрокаСоединенияИнформационнойБазы + ПараметрыСкрипта.СтрокаПодключения;
	Если СтрЗаканчиваетсяНа(СтрокаСоединенияИнформационнойБазы, ";") Тогда
		СтрокаСоединенияИнформационнойБазы = Лев(СтрокаСоединенияИнформационнойБазы, СтрДлина(СтрокаСоединенияИнформационнойБазы) - 1);
	КонецЕсли;
	
	// Определение пути к информационной базе.
	ПутьКИнформационнойБазе = СоединенияИБКлиентСервер.ПутьКИнформационнойБазе(, ПараметрыАдминистрирования.ПортКластера);
	ПараметрПутиКИнформационнойБазе = ?(ЭтоФайловаяБаза, "/F", "/S") + ПутьКИнформационнойБазе;
	СтрокаПутиКИнформационнойБазе = ?(ЭтоФайловаяБаза, ПутьКИнформационнойБазе, "");
	СтрокаПутиКИнформационнойБазе = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", "")) + "1Cv8.1CD";
	
	АдресЭлектроннойПочты = ?(Параметры.РежимОбновления = 2 И Параметры.ВыслатьОтчетНаПочту, Параметры.АдресЭлектроннойПочты, "");
	КаталогРезервнойКопии = ?(Параметры.СоздаватьРезервнуюКопию = 2, ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.ИмяКаталогаРезервнойКопииИБ), "");
	СоздаватьРезервнуюКопию = ЭтоФайловаяБаза И Параметры.СоздаватьРезервнуюКопию <> 0;
	
	ВыполнитьОтложенныеОбработчики = Ложь;
	ТекстыМакетов = ОбновлениеКонфигурацииВызовСервера.ТекстыМакетов(ИнтерактивныйРежим,
		ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"], ВыполнитьОтложенныеОбработчики);
		
	ОбластьПараметров = ТекстыМакетов.ОбластьПараметров;
	ВставитьПараметрСкрипта("ИмяИсполняемогоФайлаКонфигуратора" , ИмяИсполняемогоФайлаКонфигуратора          , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("ИмяИсполняемогоФайлаКлиента"       , ИмяИсполняемогоФайлаКлиента                , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("ПараметрПутиКИнформационнойБазе"   , ПараметрПутиКИнформационнойБазе            , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("СтрокаПутиКФайлуИнформационнойБазы", СтрокаПутиКИнформационнойБазе              , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("СтрокаСоединенияИнформационнойБазы", СтрокаСоединенияИнформационнойБазы         , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("СобытиеЖурналаРегистрации"         , СобытиеЖурналаРегистрации()                , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("АдресЭлектроннойПочты"             , АдресЭлектроннойПочты                      , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("ИмяАдминистратораОбновления"       , ИмяПользователя()                          , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("ИмяCOMСоединителя"                 , ПараметрыРаботыКлиента.ИмяCOMСоединителя   , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("КаталогРезервнойКопии"             , КаталогРезервнойКопии                      , Истина, ОбластьПараметров);
	ВставитьПараметрСкрипта("СоздаватьРезервнуюКопию"           , СоздаватьРезервнуюКопию                    , Ложь  , ОбластьПараметров);
	ВставитьПараметрСкрипта("ВосстанавливатьИнформационнуюБазу" , Параметры.ВосстанавливатьИнформационнуюБазу, Ложь  , ОбластьПараметров);
	ВставитьПараметрСкрипта("БлокироватьСоединенияИБ"           , Не ЭтоФайловаяБаза                         , Ложь  , ОбластьПараметров);
	ВставитьПараметрСкрипта("ИспользоватьCOMСоединитель"        , ИспользоватьCOMСоединитель                 , Ложь  , ОбластьПараметров);
	//ВставитьПараметрСкрипта("ЗапускСеансаПослеОбновления"       , Не Параметры.ЗавершениеРаботыСистемы       , Ложь  , ОбластьПараметров);
	ВставитьПараметрСкрипта("ЗапускСеансаПослеОбновления"       , Ложь       								 , Ложь  , ОбластьПараметров);
	ВставитьПараметрСкрипта("ВыполнятьСжатиеТаблицИБ"           , ЭтоФайловаяБаза                            , Ложь  , ОбластьПараметров);
	ВставитьПараметрСкрипта("ВыполнитьОтложенныеОбработчики"    , ВыполнитьОтложенныеОбработчики             , Ложь  , ОбластьПараметров);
	ОбластьПараметров = СтрЗаменить(ОбластьПараметров, "[ИменаФайловОбновления]", ИменаФайловОбновления(Параметры, ПараметрыПриложения));
	
	ТекстыМакетов.МакетФайлаОбновленияКонфигурации = ОбластьПараметров + ТекстыМакетов.МакетФайлаОбновленияКонфигурации;
	ТекстыМакетов.Удалить("ОбластьПараметров");
	
	Возврат СоздатьФайлыСкрипта(ТекстыМакетов, ИнтерактивныйРежим);
	#КонецЕсли
	
КонецФункции

Функция СтрокаUnicode(Строка)
	
	Результат = "";
	
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		
		Символ = Формат(КодСимвола(Сред(Строка, НомерСимвола, 1)), "ЧГ=0");
		Символ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Символ, 4);
		Результат = Результат + Символ;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления(ПараметрыАдминистрирования, ПараметрыПриложения)
	
	Результат = Новый Структура("СтрокаПодключения, СтрокаСоединенияИнформационнойБазы");
	
	ПортКластера = ПараметрыАдминистрирования.ПортКластера;
	ТекущиеСоединения = СоединенияИБВызовСервера.ИнформацияОСоединениях(Истина,
		ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"], ПортКластера);
		
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	Результат.СтрокаПодключения = "Usr=""{0}"";Pwd=""{1}""";
	
	Возврат Результат;
	
КонецФункции

Процедура ВставитьПараметрСкрипта(Знач ИмяПараметра, Знач ЗначениеПараметра, Форматировать, ОбластьПараметров)
	Если Форматировать = Истина Тогда
		ЗначениеПараметра = Форматировать(ЗначениеПараметра);
	ИначеЕсли Форматировать = Ложь Тогда
		ЗначениеПараметра = ?(ЗначениеПараметра, "true", "false");
	КонецЕсли;
	ОбластьПараметров = СтрЗаменить(ОбластьПараметров, "[" + ИмяПараметра + "]", ЗначениеПараметра);
КонецПроцедуры

Функция ИменаФайловОбновления(Параметры, ПараметрыПриложения)
	
	ИмяПараметра = "СтандартныеПодсистемы.ИменаФайловОбновления";
	Если ПараметрыПриложения.Получить(ИмяПараметра) <> Неопределено Тогда
		Возврат ПараметрыПриложения[ИмяПараметра];
	КонецЕсли;
	
	Если Параметры.Свойство("НуженФайлОбновления") И Не Параметры.НуженФайлОбновления Тогда
		ИменаФайловОбновления = "";
	Иначе
		Если ПустаяСтрока(Параметры.ИмяФайлаОбновления) Тогда
			ИменаФайлов = Новый Массив;
			Для Каждого ФайлОбновления Из Параметры.ФайлыОбновления Цикл
				ПрефиксФайлаОбновления = ?(ФайлОбновления.ВыполнитьОбработчикиОбновления, "+", "");
				ИменаФайлов.Добавить(Форматировать(ПрефиксФайлаОбновления + ФайлОбновления.ПолноеИмяФайлаОбновления));
			КонецЦикла;
			ИменаФайловОбновления = СтрСоединить(ИменаФайлов, ",");
		Иначе
			ИменаФайловОбновления = Форматировать(Параметры.ИмяФайлаОбновления);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "[" + ИменаФайловОбновления + "]";
	
КонецФункции

Функция Форматировать(Знач Текст)
	Текст = СтрЗаменить(Текст, "\", "\\");
	Текст = СтрЗаменить(Текст, """", "\""");
	Текст = СтрЗаменить(Текст, "'", "\'");
	Возврат "'" + Текст + "'";
КонецФункции

Функция СоздатьФайлыСкрипта(ТекстыМакетов, ИнтерактивныйРежим)
	
	КаталогВременныхФайловОбновления = КаталогВременныхФайлов() + "1Cv8Update." + Формат(ТекущаяДата(), "ДФ=ггММддЧЧммсс") + "\";
	СоздатьКаталог(КаталогВременныхФайловОбновления);
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов.МакетФайлаОбновленияКонфигурации);
	
	ИмяФайлаСкрипта = КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js.
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов.ДопФайлОбновленияКонфигурации);
	ФайлСкрипта.Записать(КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	Если ИнтерактивныйРежим Тогда
		// Вспомогательный файл: splash.png.
		БиблиотекаКартинок.ЗаставкаВнешнейОперации.Записать(КаталогВременныхФайловОбновления + "splash.png");
		// Вспомогательный файл: splash.ico.
		БиблиотекаКартинок.ЗначокЗаставкиВнешнейОперации.Записать(КаталогВременныхФайловОбновления + "splash.ico");
		// Вспомогательный файл: progress.gif.
		БиблиотекаКартинок.ДлительнаяОперация48.Записать(КаталогВременныхФайловОбновления + "progress.gif");
		// Главный файл заставки: splash.hta.
		ИмяГлавногоФайлаСкрипта = КаталогВременныхФайловОбновления + "splash.hta";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ТекстыМакетов.ЗаставкаОбновленияКонфигурации);
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	Иначе
		ИмяГлавногоФайлаСкрипта = КаталогВременныхФайловОбновления + "updater.js";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ТекстыМакетов.НеинтерактивноеОбновлениеКонфигурации);
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	КонецЕсли;
	
	Возврат ИмяГлавногоФайлаСкрипта;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() 
	Возврат НСтр("ru = 'Обновление конфигурации'; en = 'Configuration update'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

Функция ПараметрыРаботыКлиента() 
	
	ПараметрыРаботыКлиента = Новый Структура;
	ПараметрыРаботы = СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента();
	Для Каждого Параметр Из ПараметрыРаботы Цикл
		ПараметрыРаботыКлиента.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(ПараметрыРаботыКлиента);
	
КонецФункции

// Записывает сообщение в журнал регистрации. 
// Если параметр ЗаписатьСобытия = Истина, то запись выполняется сразу (обращение к серверу). 
// Если ЗаписатьСобытия = Ложь (по умолчанию), то сообщение помещается в очередь, 
// которая может быть записана позднее, при следующем вызове этой или другой процедуры,
// в которую передается в качестве параметра очередь СообщенияДляЖурналаРегистрации.
//
//  Параметры: 
//   ИмяСобытия          - Строка - имя события для журнала регистрации;
//   ПредставлениеУровня - Строка - описание уровня события, по нему будет определен уровень события при записи на
//                                  сервере;
//                                  Например: "Ошибка", "Предупреждение".
//                                  Соответствуют именам элементов перечисления УровеньЖурналаРегистрации.
//   Комментарий         - Строка - комментарий для события журнала;
//   ДатаСобытия         - Дата   - точная дата возникновения события, описанного в сообщении. Будет добавлена в начало
//                                  комментария;
//   ЗаписатьСобытия     - Булево - выполнить запись всех ранее накопленных сообщений в журнал регистрации (обращение к
//                                  серверу).
//
// Пример:
//  ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Предупреждение",
//     НСтр("ru = 'Невозможно подключиться к сети Интернет для проверки обновлений.'"));
//
Процедура ДобавитьСообщениеДляЖурналаРегистрации(Знач ИмяСобытия, Знач ПредставлениеУровня = "Информация", 
	Знач Комментарий = "", Знач ДатаСобытия = "", Знач ЗаписатьСобытия = Ложь, ПараметрыПриложения) Экспорт
	
	ИмяПроцедуры = "ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяСобытия", ИмяСобытия, Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПредставлениеУровня", ПредставлениеУровня, Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Комментарий", Комментарий, Тип("Строка"));
	Если ДатаСобытия <> "" Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ДатаСобытия", ДатаСобытия, Тип("Дата"));
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
	КонецЕсли;
	
	Если ТипЗнч(ДатаСобытия) = Тип("Дата") Тогда
		ДатаСобытия = Формат(ДатаСобытия, "ДЛФ=DT");
	КонецЕсли;
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ИмяСобытия", ИмяСобытия);
	СтруктураСообщения.Вставить("ПредставлениеУровня", ПредставлениеУровня);
	СтруктураСообщения.Вставить("Комментарий", Комментарий);
	СтруктураСообщения.Вставить("ДатаСобытия", ДатаСобытия);
	
	ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(СтруктураСообщения);
	
	Если ЗаписатьСобытия Тогда
		ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	КонецЕсли;
	
КонецПроцедуры

// Возвратить каталог файла - часть пути без имени файла.
//
// Параметры:
//  ПутьКФайлу  - Строка - путь к файлу.
//
// Возвращаемое значение:
//   Строка   - каталог файла
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу)
	
	ПозицияСимвола = СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
