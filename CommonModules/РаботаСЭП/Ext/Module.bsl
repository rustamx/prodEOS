////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет список подписей файла.
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ВерсииФайлов
//
Процедура ЗаполнитьСписокПодписейФайла(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор, ПолучитьДляПомеченногоНаУдалениеОбъекта = Ложь) Экспорт
	
	КоличествоПодписей = 0;
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Выборка = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Объект.ПометкаУдаления И Не ПолучитьДляПомеченногоНаУдалениеОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Зашифрован = ТекущийОбъект.Зашифрован;
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.Статус = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			Если НоваяСтрока.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрока.КомуВыданСертификатИСтатус = 
					НоваяСтрока.КомуВыданСертификат
					+ Символы.ПС
					+ НоваяСтрока.Статус;
			КонецЕсли;
			Если НоваяСтрока.Свойство("ДатаПодписиИКомментарий") Тогда
				НоваяСтрока.ДатаПодписиИКомментарий = 
					Формат(НоваяСтрока.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'")
					+ Символы.ПС
					+ НоваяСтрока.Комментарий;
			КонецЕсли;
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			КоличествоПодписей = КоличествоПодписей + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Внутреннего документа в дереве.
//
Процедура ЗаполнитьСписокПодписейДокумента(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор) Экспорт
	
	КоличествоПодписей = 0;
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Выборка = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.Статус = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			Если НоваяСтрока.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрока.КомуВыданСертификатИСтатус = 
					НоваяСтрока.КомуВыданСертификат
					+ Символы.ПС
					+ НоваяСтрока.Статус;
			КонецЕсли;
			Если НоваяСтрока.Свойство("ДатаПодписиИКомментарий") Тогда
				НоваяСтрока.ДатаПодписиИКомментарий = 
					Формат(НоваяСтрока.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'")
					+ Символы.ПС
					+ НоваяСтрока.Комментарий;
			КонецЕсли;
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			КоличествоПодписей = КоличествоПодписей + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Внутреннего документа и его подчиненных файлов.
//
Процедура ЗаполнитьСписокПодписей(ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП) Экспорт
	
	ВсегоПодписей = 0;
	ТаблицаПодписей.ПолучитьЭлементы().Очистить();
	
	ЭлементыДерева = ТаблицаПодписей.ПолучитьЭлементы();
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	// для ветки дерева используем КомуВыданСертификат как Представление
	НоваяСтрока.Объект = ОбъектСсылка;
	НоваяСтрока.КомуВыданСертификат = Строка(ТипЗнч(ОбъектСсылка)) + " """ + Строка(ОбъектСсылка) + """"; 
	Если НоваяСтрока.Свойство("КомуВыданСертификатИСтатус") Тогда
		НоваяСтрока.КомуВыданСертификатИСтатус = НоваяСтрока.КомуВыданСертификат; 
	КонецЕсли;
	НоваяСтрока.ИндексКартинки = 0;  // иконка справочника
	КоличествоПодписей = 0;
	
	ЗаполнитьСписокПодписейДокумента(ОбъектСсылка, 
		НоваяСтрока.ПолучитьЭлементы(), КоличествоПодписей, УникальныйИдентификатор);
	ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
	
	Если КоличествоПодписей = 0 Тогда
		ЭлементыДерева.Удалить(НоваяСтрока);
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектСсылка);
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		НоваяСтрока = ЭлементыДерева.Добавить();
		// для ветки дерева используем КомуВыданСертификат как Представление
		НоваяСтрока.Объект = ФайлСсылка;
		НоваяСтрока.КомуВыданСертификат = Строка(ТипЗнч(ФайлСсылка)) + " """ + Строка(ФайлСсылка) + """";
		Если НоваяСтрока.Свойство("КомуВыданСертификатИСтатус") Тогда
			НоваяСтрока.КомуВыданСертификатИСтатус = НоваяСтрока.КомуВыданСертификат;
		КонецЕсли;
		НоваяСтрока.ИндексКартинки = ФайлСсылка.ИндексКартинки;
		КоличествоПодписей = 0;
		
		ЗаполнитьСписокПодписейФайла(ФайлСсылка.ТекущаяВерсия, НоваяСтрока.ПолучитьЭлементы(), 
			КоличествоПодписей, УникальныйИдентификатор);
		ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
		
		Если КоличествоПодписей = 0 Тогда
			ЭлементыДерева.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппаЭП <> Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'ЭП'; en = 'DS'");
		Если ВсегоПодписей <> 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
		КонецЕсли;
		ГруппаЭП.Заголовок = ТекстЗаголовка;
		
		Если ВсегоПодписей = 0 Тогда 
			ГруппаЭП.Видимость = Ложь;
		Иначе	
			ГруппаЭП.Видимость = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПодписиОбъекта(ОбъектСсылка, ИдентификаторФормы) Экспорт
	
	Результат = Новый Структура(
		"КомуВыданСертификат,
		|ДатаПодписи,
		|Комментарий,
		|Статус,
		|Объект,
		|АдресПодписи,
		|Отпечаток,
		|ПодписьВерна,
		|ИндексКартинки,
		|УстановившийПодпись,
		|НомерСтроки,
		|АдресСертификата,
		|Зашифрован,
		|Версия,
		|ДатаПроверкиПодписи,
		|СертификатДействителен,
		|УникальныйИдентификатор,
		|КомуВыданСертификатИСтатус,
		|ДатаПодписиИКомментарий");
	
	Подпись = ПолучитьЭлектроннуюПодпись(ОбъектСсылка);
	
	Если Подпись <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Подпись);
		
		ДвоичныеДанные = Подпись.Подпись.Получить();
		Если ДвоичныеДанные <> Неопределено Тогда 
			Результат.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
				ИдентификаторФормы);
		КонецЕсли;
		
		ДвоичныеДанныеСертификата = Подпись.Сертификат.Получить();
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
			Результат.АдресСертификата = ПоместитьВоВременноеХранилище(
				ДвоичныеДанныеСертификата, ИдентификаторФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует 2-уровневое дерево в массив.
//
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

// Удаляет выделенные ЭП.
//
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, ВыделенныеСтроки,
	ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	ВсеОбъекты = Новый Соответствие; // соответствие объекта и таблицы номеров строк табл части
	
	МассивВыделенныеСтроки = Новый Массив;
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеСтроки.УникальныйИдентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПодписей = ВсеОбъекты.Получить(ДанныеСтроки.Объект);
			
			Если МассивПодписей = Неопределено Тогда
				МассивПодписей = Новый Массив;
			КонецЕсли;
			
			МассивПодписей.Добавить(ДанныеСтроки.УникальныйИдентификатор);
			
			ВсеОбъекты.Вставить(ДанныеСтроки.Объект, МассивПодписей);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараКлючЗначение Из ВсеОбъекты Цикл
		
		ТекущийОбъектСсылка = ПараКлючЗначение.Ключ;
		ТаблицаВыделенныеСтроки = ПараКлючЗначение.Значение;
		
		Если ТипЗнч(ТекущийОбъектСсылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			
			РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				РеквизитПодписанИзменен, УникальныйИдентификатор);
			
		Иначе
				
			МодульЭлектроннаяПодпись.УдалитьПодпись(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				УникальныйИдентификатор);
				
			ОбъектПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъектСсылка, "ПодписанЭП");
			
			КоличествоПодписей = КоличествоПодписей(ТекущийОбъектСсылка);
			Если ОбъектПодписан = Истина И КоличествоПодписей = 0 Тогда
				РеквизитПодписанИзменен = Истина;
				Объект = ТекущийОбъектСсылка.ПолучитьОбъект(); 
				ЗаблокироватьДанныеДляРедактирования(ТекущийОбъектСсылка, , УникальныйИдентификатор);
				Объект.ПодписанЭП = Ложь;
				Объект.Записать();
				РазблокироватьДанныеДляРедактирования(ТекущийОбъектСсылка, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеОбъекты.Количество() > 0 Тогда
		ЗаполнитьСписокПодписей(ОбъектСсылка, ТаблицаПодписей, 
			УникальныйИдентификатор, ГруппаЭП);
	КонецЕсли;
	
КонецПроцедуры

// Удаляем все подписи объекта
//
Процедура УдалитьПодписиОбъекта(ПодписанныйОбъект) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Для Вх Исх Внутр документов формирует массив значений Полей (включая имя поля) - только важные реквизиты.
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//  
Функция СформироватьНаборВажныхПолей(Знач ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	МассивИмен = Новый Массив;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		МассивИмен = Справочники.ВнутренниеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		МассивИмен = Справочники.ВходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		МассивИмен = Справочники.ИсходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВизыСогласования") Тогда
		МассивИмен = Справочники.ВизыСогласования.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Резолюции") Тогда
		МассивИмен = Справочники.Резолюции.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда
		Для Каждого Элемент Из ОбъектСсылка Цикл
			МассивИмен.Добавить(Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			Если ИмяПоля = "Файлы" Тогда
				МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектСсылка, Ложь);
				
				НомерЯчейки = 1;
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					Если Не ЗначениеЗаполнено(Версия) ИЛИ Версия > 2 Тогда
						ХешДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
						ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлСсылка);
						ХешДанных.Добавить(ДвоичныеДанные);
						ЗначениеПоля = ХешДанных.ХешСумма;
					Иначе
						ЗначениеПоля = ФайлСсылка;
					КонецЕсли;
					ИмяЯчейки = "Файл" + НомерЯчейки;
					СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
					МассивПолей.Добавить(СтрокаЗначения);
					НомерЯчейки = НомерЯчейки + 1;
				КонецЦикла;
				
			Иначе
				Если ИмяПоля = "Организация"
					И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
					И ДополнительныеПараметры.Свойство("РеквизитОрганизацияНеЗаполнен")
					И ДополнительныеПараметры.РеквизитОрганизацияНеЗаполнен Тогда
					
					ЗначениеПоля = Справочники.Организации.ПустаяСсылка();
				Иначе
					ЗначениеПоля = ОбъектСсылка[ИмяПоля];
				КонецЕсли;
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяПоля);
				МассивПолей.Добавить(СтрокаЗначения);
			КонецЕсли;
			
		Иначе  // табличные части отдельно обработать
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			НомерСтроки = 0;
			Для Каждого Строка Из ОбъектСсылка[ИмяТабличнойЧасти] Цикл
				
				ЗначениеПоля = Строка[ИмяКолонки];
				ИмяЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 "%1_%2_%3", ИмяТабличнойЧасти, НомерСтроки, ИмяКолонки);
				
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
				МассивПолей.Добавить(СтрокаЗначения);
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

// Формирует файл с именами и значениями полей.
//
Процедура СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для Каждого ЗначениеПоля Из МассивПолей Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЗначениеПоля);
	КонецЦикла;
	
	ТекстовыйДокумент.Записать(ИмяФайлаСПутем);
	
КонецПроцедуры	

// Получить объекты для подписи - массив структур АдресФайла или ДвоичныеДанные, ОбъектСсылкаДляПодписи
//  где АдресФайла - адрес файла во временном хранилище
//
Процедура ПолучитьОбъектыДляПодписи(ОбъектСсылка, УникальныйИдентификаторФормы, МассивОбъектовДляПодписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектСсылка) Тогда
		
		// тут формируем файл из важных полей карточки
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
		// тут собираем все подчиненные файлы
		МассивВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВсехПодчиненныхФайлов(ОбъектСсылка, УникальныйИдентификаторФормы);
		ПервыйФайл = Истина;
		
		Для Каждого СтруктураВозврата Из МассивВозврата Цикл
			
			ДанныеФайла = СтруктураВозврата.ДанныеФайла;
			АдресФайла = СтруктураВозврата.НавигационнаяСсылкаВерсии;
			ОбъектСсылкаДляПодписи = ДанныеФайла.Ссылка;
			
			СтруктураДляПодписи = Неопределено;
			
			// только первый файл кладем как ДвоичныеДанные
			Если ПервыйФайл Тогда
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
				УдалитьИзВременногоХранилища(АдресФайла);
				
				СтруктураДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
					ДвоичныеДанные, ОбъектСсылкаДляПодписи);
					
				ПервыйФайл = Ложь;
			Иначе
				СтруктураДляПодписи = Новый Структура("АдресФайла, ОбъектСсылкаДляПодписи", 
					АдресФайла, ОбъектСсылкаДляПодписи);
			КонецЕсли;
			
			МассивОбъектовДляПодписи.Добавить(СтруктураДляПодписи);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВизыСогласования") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Резолюции") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда 
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний).
//
// Параметры:
//  ОбъектСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//
Функция ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла();
	МассивПолей = СформироватьНаборВажныхПолей(ОбъектСсылка, Версия, ДополнительныеПараметры);
	СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
	
	УдалитьФайлы(ИмяФайлаСПутем);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний) и подписи.
//
// Параметры:
//  ОбъектСсылка
//  АдресПодписи
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//
// Возвращаемое значение:
//  Структура -
//    ДвоичныеДанные
//    ДвоичныеДанныеПодписи
//
Функция ПолучитьДвоичныеДанныеОбъектаИПодписи(ОбъектСсылка,
	АдресПодписи, Версия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия, ДополнительныеПараметры);
	
	Попытка
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	Исключение
		ДвоичныеДанныеПодписи = Неопределено;
	КонецПопытки;
	
	СтруктураВозврата = Новый Структура("ДвоичныеДанные, ДвоичныеДанныеПодписи", 
		ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заносит информацию о массиве ЭП, замещая прежние подписи.
//
Процедура ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВРегистр, ОбъектСсылка,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Редактирует, Зашифрован");
		Редактирует = СтруктураРеквизитов.Редактирует;
		Зашифрован = СтруктураРеквизитов.Зашифрован;
		
		Если НЕ Редактирует.Пустая() Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать занятый файл: ""'; en = 'It is not possible to sign a locked file: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
		Зашифрован = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Зашифрован");
		Если Зашифрован Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать зашифрованный файл: ""'; en = 'It is not possible to sign an encrypted file: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписываемыйОбъектСсылка = ОбъектСсылка;
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ПодписываемыйОбъектСсылка = ОбъектСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, , УникальныйИдентификатор);
		
		ОбъектСТЧЭП = ПодписываемыйОбъектСсылка.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено;
		
		Если Не ОбъектСТЧЭП Тогда
			Выборка = ПолучитьЭлектронныеПодписи(ПодписываемыйОбъектСсылка);
		КонецЕсли;
		
		// проверим права на удаление подписей
		Если ОбъектСТЧЭП Тогда
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда 
				Для Каждого Подпись Из ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи Цикл
					
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'; en = 'Not enough permissions to delete the signature.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
				Пока Выборка.Следующий() Цикл
					
					Подпись = Выборка;
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'; en = 'Not enough permissions to delete the signature.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектСТЧЭП Тогда
			ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
				НоваяЗапись.КомуВыданСертификат = Данные.КомуВыданСертификат;
				НоваяЗапись.ДатаПодписи = Данные.ДатаПодписи;
				НоваяЗапись.ИмяФайлаПодписи = Данные.ИмяФайлаПодписи;
				НоваяЗапись.Комментарий = Данные.Комментарий;
				НоваяЗапись.Отпечаток = Данные.Отпечаток;
				НоваяЗапись.Подпись = Новый ХранилищеЗначения(Данные.НоваяПодписьДвоичныеДанные);
				НоваяЗапись.УстановившийПодпись = Данные.УстановившийПодпись;
				НоваяЗапись.Сертификат = Новый ХранилищеЗначения(Данные.ДвоичныеДанныеСертификата);
			КонецЦикла;
		Иначе
			РаботаСЭП.УдалитьПодписиОбъекта(ПодписываемыйОбъектСсылка);
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись", Данные.НоваяПодписьДвоичныеДанные);
				СвойстваПодписи.Вставить("Отпечаток", Данные.Отпечаток);
				СвойстваПодписи.Вставить("ДатаПодписи", Данные.ДатаПодписи);
				СвойстваПодписи.Вставить("Комментарий", Данные.Комментарий);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Данные.КомуВыданСертификат);
				СвойстваПодписи.Вставить("Сертификат", Данные.ДвоичныеДанныеСертификата);
				РаботаСЭП.ЗанестиИнформациюОПодписи(ПодписываемыйОбъектСсылка, СвойстваПодписи);
			КонецЦикла;
		КонецЕсли;
		
		ПодписываемыйОбъект.ПодписанЭП = (МассивДанныхДляЗанесенияВРегистр.Количество() <> 0);
		ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, УникальныйИдентификатор);
		
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ФайлСсылка = ОбъектСсылка;
			ВерсияПодписана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписываемыйОбъектСсылка, "ПодписанЭП");
			
			ФайлСсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ПодписанЭП");
			Если ФайлСсылкаПодписан <> ВерсияПодписана Тогда
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
				ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
				ФайлОбъект.ПодписанЭП = ВерсияПодписана;
				
				ФайлОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет изменены ли ключевые поля и бросает исключение, если изменены.
//
Процедура ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ПроверяемыйОбъект, Ссылка) Экспорт
	
	РеквизитыОбъектаДоИзменения = Ссылка.ПолучитьОбъект().Метаданные().Реквизиты;
	
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			Если РеквизитыОбъектаДоИзменения.Найти(ИмяПоля) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыйОбъект[ИмяПоля] <> Ссылка[ИмяПоля] Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'; en = 'Signed document cannot be edited.'");
			КонецЕсли;
			
		Иначе  // табличные части отдельно обработать
			
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			Если ПроверяемыйОбъект[ИмяТабличнойЧасти].Количество() <> Ссылка[ИмяТабличнойЧасти].Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'; en = 'Signed document cannot be edited.'");
			КонецЕсли;
			
			НомерСтроки = 0;
			Для Каждого Строка Из ПроверяемыйОбъект[ИмяТабличнойЧасти] Цикл
				
				СтрокаВБазе = Ссылка[ИмяТабличнойЧасти][НомерСтроки];
				
				Если Строка[ИмяКолонки] <> СтрокаВБазе[ИмяКолонки] Тогда 
					ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'; en = 'Signed document cannot be edited.'");
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того что объект может быть подписан ЭП.
//
Функция ОбъектМожетБытьПодписанЭП(ОбъектСсылка) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектСсылка);
	Если ТипОбъекта = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВидДокумента");
		Если ЗначениеЗаполнено(ВидДокумента) И ВидДокумента.ЯвляетсяКомплектомДокументов Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВизыСогласования") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Резолюции") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает подписи, принадлежащие объекту.
//
Функция ПолучитьЭлектронныеПодписи(ПодписанныйОбъектСсылка, УстановившийПодпись = Неопределено,
	ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.УникальныйИдентификатор,
		|	ЭП.ДатаПодписи,
		|	ЭП.Объект,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Версия,
		|	ЭП.ДатаПроверкиПодписи,
		|	ЭП.ИмяФайлаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.КомуВыданСертификат,
		|	ЭП.Отпечаток,
		|	ЭП.Подпись,
		|	ЭП.ПодписьВерна,
		|	ЭП.Сертификат,
		|	ЭП.СертификатДействителен,
		|	ЭП.ТекстОшибкиПроверкиПодписи,
		|	ЭП.ТекстОшибкиПроверкиСертификата,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЭП.Объект.ПодписанЭП
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭП.Объект = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	ЭП.Объект = &ОбъектСсылка";
	Запрос.Параметры.Вставить("ОбъектСсылка", ПодписанныйОбъектСсылка);
	Если УстановившийПодпись <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.УстановившийПодпись = &УстановившийПодпись";
		Запрос.Параметры.Вставить("УстановившийПодпись", УстановившийПодпись);
	КонецЕсли;
	Если ДатаПодписи <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.ДатаПодписи = &ДатаПодписи";
		Запрос.Параметры.Вставить("ДатаПодписи", ДатаПодписи);
	КонецЕсли;
	Если УникальныйИдентификатор <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.УникальныйИдентификатор = &УникальныйИдентификатор";
		Запрос.Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество подписей объекта.
//
Функция КоличествоПодписей(ПодписанныйОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект = &Объект";
	Запрос.Параметры.Вставить("Объект", ПодписанныйОбъект);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// Возвращает первую найденную подпись к объекту, в ином случае возвращает Неопределено.
//
Функция ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект,
	УстановившийПодпись = Неопределено, ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	Выборка = ПолучитьЭлектронныеПодписи(ПодписанныйОбъект.Ссылка, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Не Подпись.Выбран() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Подпись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обновляет информацию о статусе проверки подписи в РС ЭлектронныеПодписи.
//
Процедура ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, ДатаПроверки = Неопределено,
	ОбщийСтатусПроверки = Неопределено) Экспорт
	
	Если НЕ ДанныеПодписи.Свойство("Объект")
		ИЛИ НЕ ДанныеПодписи.Свойство("УстановившийПодпись")
		ИЛИ НЕ ДанныеПодписи.Свойство("ДатаПодписи") Тогда
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'; en = 'Signature not found.'");
	КонецЕсли;
	
	ПодписанныйОбъект = ДанныеПодписи.Объект;
	УстановившийПодпись = ДанныеПодписи.УстановившийПодпись;
	ДатаПодписи = ДанныеПодписи.ДатаПодписи;
	УникальныйИдентификатор = ДанныеПодписи.УникальныйИдентификатор;
	
	Подпись = ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	
	Если Подпись = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'; en = 'Signature not found.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписи);
	Подпись.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	
	Подпись.Записать();
	
	ДатаПроверки = Подпись.ДатаПроверкиПодписи;
	ОбщийСтатусПроверки = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
		Подпись.ПодписьВерна, Подпись.СертификатДействителен, Подпись.ДатаПроверкиПодписи);
	
КонецПроцедуры

// Сохраняет информацию о ЭП.
//
Процедура ЗанестиИнформациюОПодписи(ПодписанныеДанные, СвойстваПодписиАргумент) Экспорт
	
	СвойстваПодписи = СвойстваПодписиАргумент;
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
	КонецЕсли; 
	
	ДатаПодписиИзФайла = ЭлектроннаяПодпись.ДатаПодписания(СвойстваПодписи.Подпись);
	
	ПодписьЗагруженаИзФайла = Не СвойстваПодписи.Свойство("ДатаПодписи") 
		Или Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи);
	
	// Устанавливаем текущую дату сеанса в качестве даты создания подписи,
	// если последнюю не получилось извлечь из двоичных данных.
	Если ЗначениеЗаполнено(ДатаПодписиИзФайла) Тогда
		ДатаПодписи = ДатаПодписиИзФайла;
	ИначеЕсли Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	ИначеЕсли ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = СвойстваПодписи.ДатаПодписи;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.Объект = ПодписанныеДанные;
	МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Версия = 3; // актуальная версия подписываемых данных на текущий момент
	СвойстваПодписи.Свойство("Комментарий",МенеджерЗаписи.Комментарий);
	МенеджерЗаписи.КомуВыданСертификат = СвойстваПодписи.КомуВыданСертификат;
	МенеджерЗаписи.Отпечаток = СвойстваПодписи.Отпечаток;
	МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(СвойстваПодписи.Подпись);
	МенеджерЗаписи.Сертификат = Новый ХранилищеЗначения(СвойстваПодписи.Сертификат); 
	
	// Сразу устанавливаем статус проверки подписи, созданной в программе.
	Если Не ПодписьЗагруженаИзФайла Тогда
		МенеджерЗаписи.ДатаПроверкиПодписи = ДатаПодписи;
		МенеджерЗаписи.ПодписьВерна = Истина;
		МенеджерЗаписи.СертификатДействителен = Истина;
	Иначе
		МенеджерЗаписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		МенеджерЗаписи.ПодписьВерна = СвойстваПодписи.Свойство("ПодписьВерна") И СвойстваПодписи.ПодписьВерна;
		Если Не СвойстваПодписи.Свойство("СертификатДействителен") Тогда
			МенеджерЗаписи.СертификатДействителен = МенеджерЗаписи.ПодписьВерна;
		Иначе	
			МенеджерЗаписи.СертификатДействителен = СвойстваПодписи.СертификатДействителен;
		КонецЕсли;	
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Сохраняет информацию о массиве ЭП.
//
Процедура ЗанестиИнформациюОПодписях(ПодписанныеДанные, ИдентификаторФормы = Неопределено) Экспорт
	
	// Подписываемые файлы должны быть не заняты и не зашифрованы.
	Для Каждого Данные Из ПодписанныеДанные Цикл
		
		ПодписанныйОбъект = Данные.ПодписанныйОбъект;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписанныйОбъект) Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодписанныйОбъект, "Редактирует, Зашифрован");
			
			Если Не СтруктураРеквизитов.Редактирует.Пустая() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя подписать занятый файл: ""%1""'; en = 'It is not possible to sign a locked file: ""%1""'"),
					ПодписанныйОбъект);
			КонецЕсли;
				
			Если СтруктураРеквизитов.Зашифрован Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя подписать зашифрованный файл: ""%1""'; en = 'It is not possible to sign an encrypted file: ""%1""'"),
					ПодписанныйОбъект);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Для Каждого Данные Из ПодписанныеДанные Цикл
		
		ПодписанныйОбъект = Данные.ПодписанныйОбъект;
		СвойстваПодписи = Данные.СвойстваПодписи;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписанныйОбъект) Тогда
			
			РаботаСФайламиСлужебныйВызовСервера.ДобавитьПодписьКФайлу(
				ПодписанныйОбъект,
				СвойстваПодписи,
				ИдентификаторФормы);
			
		Иначе
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
				ПодписываемыйОбъект = ПодписанныйОбъект.ПолучитьОбъект();
				ЗаблокироватьДанныеДляРедактирования(ПодписанныйОбъект,, ИдентификаторФормы);
			Иначе
				ПодписываемыйОбъект = ПодписанныйОбъект;
			КонецЕсли;
			
			ЗанестиИнформациюОПодписи(ПодписанныйОбъект, СвойстваПодписи);
			
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПодписываемыйОбъект)
				Или ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписываемыйОбъект) Тогда
				
				ПодписываемыйОбъект.ПодписанЭП = Истина;
				Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ПодписываемыйОбъект) Тогда
					ПараметрыВыполнения = Неопределено;
					Данные.Свойство("ПараметрыВыполнения", ПараметрыВыполнения);
					
					Если ТипЗнч(СвойстваПодписи) = Тип("Структура") 
						И СвойстваПодписи.Свойство("ВидПодписи") Тогда 
						Если СвойстваПодписи.ВидПодписи = "ПодписьДокумента" Тогда
							ПодписываемыйОбъект.Подписал = СвойстваПодписи.УстановившийПодпись;
							ПодписываемыйОбъект.РезультатПодписания = Перечисления.РезультатыПодписания.Подписан;
							ПодписываемыйОбъект.ДатаПодписания = СвойстваПодписи.ДатаПодписи;
						ИначеЕсли СвойстваПодписи.ВидПодписи = "УтверждениеДокумента" Тогда
							ГрифУтверждения = ПодписываемыйОбъект.ГрифыУтверждения.Добавить();
							ГрифУтверждения.АвторУтверждения = СвойстваПодписи.УстановившийПодпись;
							ГрифУтверждения.Результат = Перечисления.РезультатыУтверждения.Утверждено;
							ГрифУтверждения.ДатаУтверждения = СвойстваПодписи.ДатаПодписи;
						КонецЕсли;
					ИначеЕсли ТипЗнч(ПараметрыВыполнения) = Тип("Структура") 
						И ПараметрыВыполнения.Свойство("ПодписатьЭД")
						И ПараметрыВыполнения.ПодписатьЭД Тогда
						
						Если ПараметрыВыполнения.ПодписатьЭД 
							И ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
								ПодписываемыйОбъект.Ссылка, Неопределено, ПараметрыВыполнения.НаправлениеЭД, Ложь) 
							И ПодписываемыйОбъект.Стороны.Количество() > 0 Тогда
							
							СтрокаОрганизации = ПодписываемыйОбъект.Стороны[0];
							СтрокаОрганизации.Подписан = Истина;
							СтрокаОрганизации.ДатаПодписи = ТекущаяДатаСеанса();
							СтрокаОрганизации.Подписал = Пользователи.АвторизованныйПользователь();
						Иначе
							ОтменитьТранзакцию();
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось подписать ""%1""'; en = 'Failed to sign ""%1""'"),
								ПодписываемыйОбъект.Ссылка);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
				
			ИначеЕсли ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникСсылка.ВизыСогласования")
				Или ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникОбъект.ВизыСогласования")
				Или ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникСсылка.Резолюции")
				Или ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникОбъект.Резолюции") Тогда
				
				ПодписываемыйОбъект.Подписана = Истина;
				
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
				УстановитьПривилегированныйРежим(Истина);
				ПодписываемыйОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(ПодписанныйОбъект, ИдентификаторФормы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Создает копию электронной подписи от источника приемнику.
//
// Параметры:
//  Источник - Структура
//    Объект
//    УстановившийПодпись
//    ДатаПодписи
//  ПриемникСсылка
//
// Возвращаемое значение:
//  Истина, если копирование прошло успешно, иначе Ложь.
//
Функция СкопироватьПодпись(Источник, ПриемникСсылка) Экспорт
	
	Если Не Источник.Свойство("Объект")
		ИЛИ Не Источник.Свойство("УстановившийПодпись") 
		ИЛИ Не Источник.Свойство("ДатаПодписи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодписьИсточника = ПолучитьЭлектроннуюПодпись(Источник.Объект, Источник.УстановившийПодпись, Источник.ДатаПодписи);
	Если ПодписьИсточника = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПодписьПриемника = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ПодписьПриемника, ПодписьИсточника);
		ПодписьПриемника.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПодписьПриемника.Объект = ПриемникСсылка;
		ПодписьПриемника.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Создает копии всех подписей от источника приемнику.
//
// Возвращаемое значение:
//  Количество скопированных подписей.
//
Функция СкопироватьВсеПодписи(ИсточникСсылка, ПриемникСсылка) Экспорт
	
	КоличествоПодписей = 0;
	
	Выборка = ПолучитьЭлектронныеПодписи(ИсточникСсылка);
	Пока Выборка.Следующий() Цикл
		Попытка
			ПодписьПриемника = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ПодписьПриемника, Выборка);
			ПодписьПриемника.УникальныйИдентификатор = Новый УникальныйИдентификатор;
			ПодписьПриемника.Объект = ПриемникСсылка;
			ПодписьПриемника.Записать();
			КоличествоПодписей = КоличествоПодписей + 1;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат КоличествоПодписей;
	
КонецФункции

// Проверяет существование хотя бы одной подписи для любого документа.
//
Функция СуществуютПодписиКДокументам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи
	|ГДЕ
	|	Объект ССЫЛКА Справочник.ВнутренниеДокументы
	|	ИЛИ Объект ССЫЛКА Справочник.ВходящиеДокументы
	|	ИЛИ Объект ССЫЛКА Справочник.ИсходящиеДокументы";

	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Записывает в кеш информацию о статусе проверки ЭП.
//
// Параметры:
//  Ссылка - ссылка на документы или версии файлов.
//
Процедура УстановитьСтатусПроверки(Знач Ссылка, Статус) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Ссылка = Ссылка.Владелец;
	КонецЕсли;
	
	Если Не Ссылка.Пустая() И Ссылка.ПолучитьОбъект() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Ссылка, "СтатусЭП", Статус);
		
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Ссылка, "ДатаПроверкиЭП", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под текущей версией файла.
// Общий статус подписи файла действителен только в том случае, когда действительны все
// подписи файла.
//
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//
Процедура УстановитьСтатусПроверкиДляФайла(ВерсияФайла) Экспорт
	
	ЭПФайла = РаботаСЭП.ПолучитьЭлектронныеПодписи(ВерсияФайла);
	
	Если ЭПФайла.Количество() = 0 Тогда
		УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПФайла.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПФайла.ПодписьВерна Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под документом с учетом
// статусов подписей подчиненных файлов.
// Общий статус подписи документа действителен только в том случае, когда действительны все
// подписи самого документа и его подчиненных файлов.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//             СправочникСсылка.ВходящиеДокументы
//             СправочникСсылка.ИсходящиеДокументы
//
Процедура УстановитьСтатусПроверкиДляДокумента(Документ) Экспорт
	
	ЭПДокумента = РаботаСЭП.ПолучитьЭлектронныеПодписи(Документ);
	
	// Если под самим документом нет ни одной подписи, то наличие подписей под подчиненными файлами
	// не учитываем.
	Если ЭПДокумента.Количество() = 0 Тогда
		УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПДокумента.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПДокумента.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПДокумента.ПодписьВерна Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем статусы подписей подчиненных файлов.
	ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);
	
	Для Каждого Файл Из ПодчиненныеФайлы Цикл
		
		ЭПФайла = РаботаСЭП.ПолучитьЭлектронныеПодписи(Файл.ТекущаяВерсия);
		
		Если ЭПФайла.Количество() = 0 Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
			Возврат;
		КонецЕсли;
	
		Пока ЭПФайла.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
				Возврат;
			КонецЕсли;
			
			Если Не ЭПФайла.ПодписьВерна Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Возвращаемое значение:
//   ПерсональныеНастройки (Структура)
//       |- ДействияПриСохраненииСЭП (Строка)
//       |- ПутьМодуляКриптографии (Строка)
//       |- РасширениеДляФайловПодписи (Строка)
//       |- РасширениеДляЗашифрованныхФайлов (Строка)
//       |- ОтпечатокЛичногоСертификатаДляШифрования (Строка)
//
Функция ПерсональныеНастройки(ТолькоЗначенияПоУмолчанию = Ложь) Экспорт
	
	ПерсональныеНастройки = Новый Структура;
	
	// Значения "по умолчанию".
	ПерсональныеНастройки.Вставить("ДействияПриСохраненииСЭП", "Спрашивать");
	ПерсональныеНастройки.Вставить("ПутьМодуляКриптографии", "");
	ПерсональныеНастройки.Вставить("РасширениеДляФайловПодписи", "p7s");
	ПерсональныеНастройки.Вставить("РасширениеДляЗашифрованныхФайлов", "p7m");
	ПерсональныеНастройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", "");
	
	Если ТолькоЗначенияПоУмолчанию Тогда
		Возврат ПерсональныеНастройки;
	КонецЕсли;
	
	КлючПодсистемы = "ЭП";
	
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючПодсистемы, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			ПерсональныеНастройки.Вставить(КлючИЗначение.Ключ, СохраненноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.Спрашивать Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "Спрашивать";
	ИначеЕсли ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.СохранятьВсеПодписи Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Возврат ПерсональныеНастройки;
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокой(Объект, Имя)
	
	СтроковоеПредставлениеОбъекта = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Объект, Имя, НазначениеТипаXML.Явное); 
	
	СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции

// Добавляет ЭП из сообщения почты.
//
Процедура ДобавитьЭПИзСообщения(ОбъектСсылка, МассивФайловПодписей) Экспорт
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивФайловПодписей Цикл
		
		НоваяПодписьДвоичныеДанные = ОбъектДляПодписи.ДвоичныеДанные;
		ИмяФайлаПодписи = ОбъектДляПодписи.Имя;
		
		ОбъектСсылкаДляПодписи = ОбъектСсылка;
		
		Отпечаток = ОбъектДляПодписи.Отпечаток;
		КомуВыданСертификат = ОбъектДляПодписи.КомуВыданСертификат;
		
		ДвоичныеДанныеСертификата = ОбъектДляПодписи.ДвоичныеДанныеСертификата;
		
		ДанныеДляЗанесенияВБазу = Новый Структура;
		ДанныеДляЗанесенияВБазу.Вставить("ПодписанныйОбъект", ОбъектСсылкаДляПодписи);
		
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись", НоваяПодписьДвоичныеДанные);
		СвойстваПодписи.Вставить("Отпечаток", Отпечаток);
		СвойстваПодписи.Вставить("ДатаПодписи", ДатаПодписи);
		СвойстваПодписи.Вставить("Комментарий", "");
		СвойстваПодписи.Вставить("КомуВыданСертификат", КомуВыданСертификат);
		СвойстваПодписи.Вставить("Сертификат", ДвоичныеДанныеСертификата);
		
		ДанныеДляЗанесенияВБазу.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
		
	КонецЦикла;
	
	МассивАдресов = Новый Массив;
	ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу);
	
КонецПроцедуры

#КонецОбласти
