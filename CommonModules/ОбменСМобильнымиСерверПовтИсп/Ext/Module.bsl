
#Область ПрограммныйИнтерфейс

// Получает список папок писем, для которых включена синхронизация с указанным мобильным клиентом
//
// Параметры:
//  МобильныйКлиент - ПланОбмена.Мобильный - Ссылка на узел плана обмена.
// 
// Возвращаемое значение:
//  Массив - Список синхронизируемых папок по мобильному клиенту.
//
Функция ПолучитьСинхронизируемыеПапкиПисем(МобильныйКлиент) Экспорт

	Возврат РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
		МобильныйКлиент.Пользователь, Истина);

КонецФункции

// Возвращает массив не помеченных на удаление узлов плана обмена Мобильный.
// 
// Возвращаемое значение:
//  Массив - Список всех доступных узлов обмена.
//
Функция ПолучитьВсеУзлы() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПланыОбмена.Мобильный.ЭтотУзел());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОМобильныхКлиентах КАК СведенияОМобильныхКлиентах
		|		ПО Мобильный.Ссылка = СведенияОМобильныхКлиентах.МобильныйКлиент
		|ГДЕ
		|	НЕ Мобильный.ПометкаУдаления
		|	И НЕ Мобильный.Ссылка = &Ссылка";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// Получает массив ссылок на узла плана обмена Мобильный, принадлежащие указанному пользователю
//
// Параметры:
//  Пользователь - Справочник.Пользователи - Ссылка на пользователя.
// 
// Возвращаемое значение:
//  Массив - Список узлов обмена доступных пользователю.
//
Функция ПолучитьУзлыОбменаПоВладельцу(Пользователь) Экспорт

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Пользователь", Пользователь);
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка"      , ПланыОбмена.Мобильный.ЭтотУзел());
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	Мобильный.Пользователь = &Пользователь
		|	И НЕ Мобильный.ПометкаУдаления
		|	И НЕ Мобильный.Ссылка = &Ссылка";

	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// Получает центральный узел регистрации всех изменений данных.
// 
// Возвращаемое значение:
//  ПланОбменаСсылка.МобильныйРегистрацияВсехДанных - Узел регистрации всех изменения для мобильных.
//
Функция ПолучитьУзелДляРегистрацииДанных() Экспорт

	УзелОбменаСсылка = ПланыОбмена.МобильныйРегистрацияВсехДанных.НайтиПоКоду("1");

	Если Не ЗначениеЗаполнено(УзелОбменаСсылка) Тогда

		УзелОбменаОбъект = ПланыОбмена.МобильныйРегистрацияВсехДанных.СоздатьУзел();

		УзелОбменаОбъект.Код          = "1";
		УзелОбменаОбъект.Наименование = НСтр("ru = 'Единый узел для регистрации всех данных для мобильных клиентов'; en = 'Main node for data registration for mobile clients'");

		УзелОбменаОбъект.Записать();

		Возврат УзелОбменаОбъект.Ссылка;

	Иначе

		Возврат УзелОбменаСсылка;

	КонецЕсли;

КонецФункции

// Получает представление типа объекта для выгрузки
// Параметры:
//  ЭлементДанных - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных
// 
// Возвращаемое значение:
//  Строка - тип объекта строкой подготовленный к выгрузке
//
Функция ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных) Экспорт

	Если ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		Тип = "IncomingMail";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Тип = "OutgoingMail";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Тип = "CalendarEvent";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Тип = "Task";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Контроль") Тогда
		Тип = "Control";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Тип = "ExecutionProcess";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Тип = "MailAccount";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		Тип = "MailFolder";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Пользователи") Тогда
		Тип = "User";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Тип = "Role";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Файлы") Тогда
		Тип = "File";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВеткиПереписки") Тогда
		Тип = "MailThread";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Тип = "Addressee";

	Иначе
		Тип = "ActionTarget";

	КонецЕсли;

	Возврат Тип;

КонецФункции

// Получает ссылку на объект указанного типа
//
// Параметры:
//  ТипЗначения			 - Строка - Описатель типа значения объекта
//  СтрокаИдентификатора - Строка, УникальныйИдентификатор - идентификатор объекта.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на объект 
//
Функция ПолучитьСсылкуПоТипу(ТипЗначения, СтрокаИдентификатора) Экспорт

	Если Не ЗначениеЗаполнено(ТипЗначения) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(СтрокаИдентификатора) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора)
	ИначеЕсли ТипЗнч(СтрокаИдентификатора) = Тип("УникальныйИдентификатор") Тогда
		Идентификатор = СтрокаИдентификатора;
	КонецЕсли;

	Если Идентификатор = УникальныйИдентификаторПустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрСравнить(ТипЗначения, "IncomingMail") = 0 Тогда
		Возврат Документы.ВходящееПисьмо.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"OutgoingMail") = 0 Тогда
		Возврат Документы.ИсходящееПисьмо.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"User") = 0 Тогда
		Возврат Справочники.Пользователи.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"Role") = 0 Тогда
		Возврат Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Справочники.РолиИсполнителей.ПолучитьСсылку(Идентификатор),
			Неопределено,
			Неопределено);

	ИначеЕсли СтрСравнить(ТипЗначения,"ExecutionProcess") = 0 Тогда
		Возврат БизнесПроцессы.Исполнение.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"Task") = 0 Тогда
		Возврат Задачи.ЗадачаИсполнителя.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"CalendarEvent") = 0 Тогда
		Возврат Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"File") = 0 Тогда
		Возврат Справочники.Файлы.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"MailThread") = 0 Тогда
		Возврат Справочники.ВеткиПереписки.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"Control") = 0 Тогда
		Возврат Справочники.Контроль.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"Addressee") = 0 Тогда
		Возврат Справочники.АдресатыПочтовыхСообщений.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения,"MailTextTemplate") = 0 Тогда
		Возврат Справочники.ШаблоныТекстов.ПолучитьСсылку(Идентификатор);

	// ТСК Близнюк С.И.; 13.11.2018; task#1734{
	ИначеЕсли СтрСравнить(ТипЗначения,"ra_Signal") = 0 Тогда
		Возврат Документы.ra_Signal.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения,"ra_Nesootvetstvie") = 0 Тогда
		Возврат Документы.ra_Nesootvetstvie.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения,"ra_ZayavkaNaKontrolnuyuOperaciyu") = 0 Тогда
		Возврат Документы.ra_ZayavkaNaKontrolnuyuOperaciyu.ПолучитьСсылку(Идентификатор);
		
	// ТСК Близнюк С.И.; 13.11.2018; task#1734}
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Получает строковое представление важности задачи для обмена в формате DMX.
//
// Параметры:
//  - Выполнена - Булево - Признак выполнения задачи.
//  - Результат - ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач - Вариант выполнения.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьИдентификаторВариантаВыполненияЗадачи(Выполнена, Результат) Экспорт

	РезультатВыполнения = "NotExecuted";
	Если Выполнена Тогда

		Если Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			РезультатВыполнения = "ExecutedPositive";

		ИначеЕсли Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			РезультатВыполнения = "ExecutedNegative";

		ИначеЕсли Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
			РезультатВыполнения = "ExecutedAlmostPositive";

		КонецЕсли;

	КонецЕсли;

	Возврат РезультатВыполнения;

КонецФункции

// Получает строковое представление идентификатора флага объекта для обмена
//
// Параметры:
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - значение флага.
// 
// Возвращаемое значение:
//  Строка - представление значение флага
//
Функция ПолучитьИдентификаторФлагаОбъекта(Флаг) Экспорт

	Если Флаг = Перечисления.ФлагиОбъектов.ПустаяСсылка() Тогда
		Возврат "none";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Желтый Тогда
		Возврат "yellow";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Зеленый Тогда
		Возврат "green";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Красный Тогда
		Возврат "red";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Лиловый Тогда
		Возврат "purple";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Оранжевый Тогда
		Возврат "orange";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Синий Тогда
		Возврат "blue";

	КонецЕсли;

КонецФункции

// Получает флаг объекта по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ФлагиОбъектов - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьФлагПоПредставление(Представление) Экспорт

	Если СтрСравнить(Представление, "red") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Красный;

	ИначеЕсли СтрСравнить(Представление, "blue") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Синий;

	ИначеЕсли СтрСравнить(Представление, "yellow") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Желтый;

	ИначеЕсли СтрСравнить(Представление, "green") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Зеленый;

	ИначеЕсли СтрСравнить(Представление, "orange") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Оранжевый;

	ИначеЕсли СтрСравнить(Представление, "purple") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Лиловый;

	Иначе
		Флаг = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;

КонецФункции


// Получает представление цвета по значению перечисления
//
// Параметры:
//  Цвет - Перечисления.ЦветаРабочегоКалендаря - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеЦвета(Цвет) Экспорт

	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный Тогда
		Представление = "red";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий Тогда
		Представление = "blue";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый Тогда
		Представление = "yellow";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый Тогда
		Представление = "green";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый Тогда
		Представление = "orange";

	Иначе
		Представление = "none";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает представление цвета по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ЦветаРабочегоКалендаря - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьЦветПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "red") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный;

	ИначеЕсли СтрСравнить(Представление, "blue") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий;

	ИначеЕсли СтрСравнить(Представление, "yellow") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый;

	ИначеЕсли СтрСравнить(Представление, "green") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый;

	ИначеЕсли СтрСравнить(Представление, "orange") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый;

	Иначе
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;

	Возврат Цвет

КонецФункции


// Получает частоту использования по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ЧастотаПовторения - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьЧастотуПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "daily") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;

	ИначеЕсли СтрСравнить(Представление, "weekly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно;

	ИначеЕсли СтрСравнить(Представление, "monthly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно;

	ИначеЕсли СтрСравнить(Представление, "yearly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно;

	КонецЕсли;

	Возврат ЧастотаПовторения;

КонецФункции

// Получает представление цвета по значению перечисления
//
// Параметры:
//  ЧастотаПовторения - Перечисления.ЧастотаПовторения - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеЧастотыПовторений(ЧастотаПовторения) Экспорт

	Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		Представление = "daily";

	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		Представление = "weekly";

	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		Представление = "monthly";

	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		Представление = "yearly";

	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает представление цвета по значению перечисления
//
// Параметры:
//  Состояние - Перечисления.СостоянияЗаписейРабочегоКалендаря - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(Состояние) Экспорт

	Если Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		Представление = "confirmed";

	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Представление = "cancelled";

	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Представление = "tentative";

	Иначе
		Представление = "tentative";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает представление цвета по значению перечисления
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.СостоянияЗаписейРабочегоКалендаря - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьСостояниеЗаписиПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "confirmed") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;

	ИначеЕсли СтрСравнить(Представление, "cancelled") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;

	ИначеЕсли СтрСравнить(Представление, "tentative") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;

	Иначе
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;

	КонецЕсли;

	Возврат Состояние;

КонецФункции


// Получает тип правила окончания повторения записи календаря по его представлению
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ПравилаОкончанияПовторения - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьПравилоОкончанияПовторенияПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "never") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;

	ИначеЕсли СтрСравнить(Представление, "byCount") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов;

	ИначеЕсли СтрСравнить(Представление, "byDate") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты;

	КонецЕсли;

	Возврат ПравилоОкончанияПовторения;

КонецФункции

// Получает представление правила окончания повторения записи календаря
//
// Параметры:
//  ПравилоОкончанияПовторения	 - Перечисления.ПравилаОкончанияПовторения - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеПравилаОкончанияПовторения(ПравилоОкончанияПовторения) Экспорт

	Если ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
		Представление = "never";

	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
		Представление = "byCount";

	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
		Представление = "byDate";

	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает строковое представление важности задачи для обмена в формате DMX.
//
// Параметры:
//  Значение - ПеречислениеСсылка.ВариантыВажностиЗадачи - Важность задачи.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьИдентификаторВажностиЗадачи(Значение) Экспорт
	
	Если Значение = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		Важность = "low";
	ИначеЕсли Значение = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		Важность = "high";
	Иначе
		Важность = "normal";
	КонецЕсли;
	
	Возврат Важность;

КонецФункции


// Получает тип записи календаря по его представлению
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ТипЗаписиКалендаря - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьТипаЗаписиКалендаряПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "event") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;

	ИначеЕсли СтрСравнить(Представление, "recurrence") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;

	ИначеЕсли СтрСравнить(Представление, "recurrenceException") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия;

	Иначе
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;

	КонецЕсли;

	Возврат ТипЗаписиКалендаря;

КонецФункции

// Получает представление типа записи календаря
//
// Параметры:
//  ТипЗаписиКалендаря	 - Перечисления.ТипЗаписиКалендаря - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеТипаЗаписиКалендаря(ТипЗаписиКалендаря) Экспорт

	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие Тогда
		Представление = "event";

	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Представление = "recurrence";

	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		Представление = "recurrenceException";

	Иначе
		Представление = "event";

	КонецЕсли;

	Возврат Представление;

КонецФункции

#КонецОбласти
