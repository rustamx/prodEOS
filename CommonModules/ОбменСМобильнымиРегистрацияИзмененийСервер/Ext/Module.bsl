
#Область ПрограммныйИнтерфейс

#Область РегистрацияДанныхПриПервомПодключении

// Регистрирует изменения данных почты при первом подключении мобильного клиента
Функция ЗарегистрироватьПочтуДляПервичнойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Почта не передаётся на мобильный клиент'; en = 'Emails are not transferred to mobile clients'"),
			Ложь, МобильныйКлиент);

		Возврат Ложь;

	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка почты для первой загрузки'; en = 'Preparing email for the first import'"),
		Ложь, МобильныйКлиент);

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПериодЗагрузки = ПараметрыСинхронизации.ПериодПервичнойЗагрузки;

	Если ПараметрыСинхронизации.Свойство("ПапкиСИзмененнойСинхронизацией") Тогда
		ПапкиПисемДляСинхронизации = 
			ПараметрыСинхронизации.ПапкиСИзмененнойСинхронизацией;
	Иначе
		ПапкиПисемДляСинхронизации = 
			РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
				Пользователь, Истина);
	КонецЕсли;

	Если ПапкиПисемДляСинхронизации.Количество() = 0 Тогда

		Если Не МобильныйКлиент = Неопределено Тогда
			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
				НСтр("ru = 'Не указано ни одной папки для синхронизации'; en = 'Not a single folder is specified for synchronization'"),
				Ложь, МобильныйКлиент);
		КонецЕсли;

		Возврат Ложь;

	КонецЕсли;

	ПериодЗагрузки = ПараметрыСинхронизации.ПериодПервичнойЗагрузки;

	МассивДанныхДляРегистрации = Новый Массив;

	ОпределитьСписокПисемДляРегистрации(
		Пользователь, ПапкиПисемДляСинхронизации, МассивДанныхДляРегистрации, ПериодЗагрузки);

	ОпределитьСписокДанныхРазделаПочтаДляРегистрации(
		Пользователь, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВыполнитьРегистрациюДанных(
		МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Подготовка почты для первой загрузки завершена (%1 обьектов)'; en = 'Preparing email for the first import is completed (%1 objects)'"), 
			ВсегоОбъектов),
		Ложь, МобильныйКлиент);
	
	Возврат Истина;

КонецФункции

// Регистрирует изменения данных задач при первом подключении мобильного клиента
Функция ЗарегистрироватьЗадачиДляПервичнойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт 

	Если Не ПараметрыСинхронизации.СинхронизироватьЗадачи Тогда

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Задачи не передаются на мобильный клиент'; en = 'Tasks are not exported to mobile client'"),
			Ложь, МобильныйКлиент);

		Возврат Ложь;

	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка задач для первой загрузки'; en = 'Preparing tasks for the first import'"),
		Ложь, МобильныйКлиент);

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();

	МассивДанныхДляРегистрации = Новый Массив();

	ОпределитьСписокДанныхРазделаЗадачиДляРегистрации(
		Пользователь, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВыполнитьРегистрациюДанных(
		МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Подготовка задач для первой загрузки завершена (%1 обьектов)'; en = 'Preparing tasks for the first import is completed (%1 objects)'"), 
			ВсегоОбъектов),
		Ложь, МобильныйКлиент);

	Возврат Истина;

КонецФункции

// Регистрирует изменения данных календаря при первом подключении мобильного клиента
Функция ЗарегистрироватьКалендарьДляПервичнойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт 

	Если Не ПараметрыСинхронизации.СинхронизироватьКалендарь Тогда

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Календарь не передаётся на мобильный клиент'; en = 'Calendar is not transferred to mobile client'"),
			Ложь, МобильныйКлиент);

		Возврат Ложь;

	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка календаря для первой загрузки'; en = 'Preparing calendar for the first import'"),
		Ложь, МобильныйКлиент);

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПериодЗагрузки = ПараметрыСинхронизации.ПериодПервичнойЗагрузки;

	МассивДанныхДляРегистрации = Новый Массив();

	ОпределитьСписокДанныхРазделаКалендарьДляРегистрации(
		Пользователь, ПараметрыСинхронизации, МассивДанныхДляРегистрации, ПериодЗагрузки);

	ВыполнитьРегистрациюДанных(
		МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Подготовка календаря для первой загрузки завершена (%1 обьектов)'; en = 'Preparing calendar for the first import is completed (%1 objects)'"), 
			ВсегоОбъектов),
		Ложь, МобильныйКлиент);

	Возврат Истина;

КонецФункции

// Регистрирует изменения данных контроля при первом подключении мобильного клиента
Функция ЗарегистрироватьКонтрольДляПервичнойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт

	Если Не ПараметрыСинхронизации.СинхронизироватьКонтроль Тогда

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Контрольные карточки не передаются на мобильный клиент'; en = 'Milestones are not transferred to mobile client'"),
			Ложь, МобильныйКлиент);

		Возврат Ложь;

	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка контрольных карточек для первой загрузки'; en = 'Preparing milestones for the first import'"),
		Ложь, МобильныйКлиент);

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	МассивДанныхДляРегистрации = Новый Массив();

	ОпределитьСписокДанныхРазделаКонтрольДляРегистрации(
		Пользователь, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВыполнитьРегистрациюДанных(
		МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
		НСтр("ru = 'Подготовка календаря для первой загрузки завершена (%1 обьектов)'; en = 'Preparing calendar for the first import is completed (%1 objects)'"), 
		ВсегоОбъектов),
		Ложь, МобильныйКлиент);

	Возврат Истина;

КонецФункции

#КонецОбласти

#Область РегистрацияПравДляДелегирования

Процедура ВыполнитьРегистрациюДанных(МобильныйКлиент, ПараметрыСинхронизации, МассивДляРегистрации) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТипСтрока = Тип("Строка");

	Для каждого Элемент Из МассивДляРегистрации Цикл

		Попытка

			Если Не ТипЗнч(Элемент) = ТипСтрока Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Элемент);
			КонецЕсли;

			ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
				ПараметрыСинхронизации, 
				МобильныйКлиент, 
				Элемент,
				НСтр("ru = 'Объект зарегистрирован для выгрузки'; en = 'Object is registered for export'"));

		Исключение

			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регистрация изменений для мобильного'; en = 'Registration of changes for mobile clients'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, Элемент, ПодробноеПредставлениеОшибки(Инфо));

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры
Процедура ВыполнитьРегистрациюДанныхНаЦентральномУзле(МассивДляРегистрации) Экспорт

	Узел = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзелДляРегистрацииДанных();

	Для каждого Элемент Из МассивДляРегистрации Цикл

		Попытка
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Элемент);
		Исключение
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Процедура ОпределитьСписокДанныхРазделаПочтаДляРегистрации(
	Пользователь, ПапкиПисемДляСинхронизации, МассивДанныхДляРегистрации) Экспорт

	СоставПланаОбмена = Метаданные.ПланыОбмена.Мобильный.Состав;

	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();

		Если ПолноеИмяОбъекта = "Справочник.ПапкиПисем" Тогда

			Для Каждого Папка Из ПапкиПисемДляСинхронизации Цикл
				МассивДанныхДляРегистрации.Добавить(Папка);
			КонецЦикла;

		ИначеЕсли ПолноеИмяОбъекта = "Справочник.ШаблоныТекстов" Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПользовательИлиГруппа", Пользователь);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ШаблоныТекстовПисем.Ссылка
				|ИЗ
				|	Справочник.ШаблоныТекстов КАК ШаблоныТекстовПисем
				|ГДЕ
				|	НЕ ШаблоныТекстовПисем.ПометкаУдаления
				|	И ШаблоныТекстовПисем.Автор = &ПользовательИлиГруппа";

			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЦикла;

			МенеджерЗаписи = 
				РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.СоздатьМенеджерЗаписи();

			МенеджерЗаписи.Пользователь = Пользователь;
			МенеджерЗаписи.ВидНастройки = 
				Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем;

			МенеджерЗаписи.Записать();

			НаборЗаписей = 
				РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.СоздатьНаборЗаписей();

			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Отбор.ВидНастройки.Установить(
				Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем);

			МассивДанныхДляРегистрации.Добавить(НаборЗаписей);

		ИначеЕсли ПолноеИмяОбъекта = "Справочник.УчетныеЗаписиЭлектроннойПочты" Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	УчетныеЗаписиЭлектроннойПочты.Ссылка
				|ИЗ
				|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
				|ГДЕ
				|	УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = 
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
				|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
				|	И УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь";

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл
				МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЦикла;

		ИначеЕсли ПолноеИмяОбъекта = "Справочник.АдресатыПочтовыхСообщений" Тогда

			СоответствиеАдресаты = Новый Соответствие;
			УстановитьПривилегированныйРежим(Истина);

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СведенияОбАдресатах.АдресатСообщения КАК Адресат,
				|	СведенияОбАдресатах.АдресатСообщения.Адрес КАК Адрес
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
				|	И НЕ СведенияОбАдресатах.АдресатСообщения.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СведенияОбАдресатах.АдресатСообщения КАК Адресат,
				|	СведенияОбАдресатах.АдресатСообщения.Адрес КАК Адрес
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
				|	И НЕ СведенияОбАдресатах.АдресатСообщения.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СведенияОбАдресатах.АдресатСообщения  КАК Адресат,
				|	СведенияОбАдресатах.АдресатСообщения.Адрес КАК Адрес
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
				|		ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
				|ГДЕ
				|	ЛичныеАдресаты.Пользователь = &Пользователь
				|	И НЕ СведенияОбАдресатах.АдресатСообщения.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 500
				|	ИспользованиеАдресатовПользователями.Адресат КАК Адресат,
				|	ИспользованиеАдресатовПользователями.Адресат.Адрес КАК Адрес
				|ИЗ
				|	РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатовПользователями
				|ГДЕ
				|	ИспользованиеАдресатовПользователями.Пользователь = &Пользователь
				|	И НЕ ИспользованиеАдресатовПользователями.Адресат.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	ИспользованиеАдресатовПользователями.ДатаПоследнегоИспользования УБЫВ";

			МассивРезультатовЗапросов = Запрос.ВыполнитьПакет();

			Для Каждого РезультатЗапроса Из МассивРезультатовЗапросов Цикл

				Если РезультатЗапроса = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Выборка = РезультатЗапроса.Выбрать();

				Пока Выборка.Следующий() Цикл

					Ключ     = НРег(СокрЛП(Выборка.Адрес));
					Значение = Выборка.Адресат;

					Если СоответствиеАдресаты[Ключ] = Неопределено Тогда
						СоответствиеАдресаты.Вставить(Ключ, Значение);
						МассивДанныхДляРегистрации.Добавить(Выборка.Адрес);
					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			УстановитьПривилегированныйРежим(Ложь);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
Функция ОпределитьСписокПисемДляРегистрации(
	Пользователь, ПапкиПисемДляСинхронизации, МассивДанныхДляРегистрации, ПериодЗагрузки) Экспорт

	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДатаСеанса() - ПериодЗагрузки * 24 * 60 * 60);
	ОМДВходящиеПисьма  = 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВходящееПисьмо");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Папки", ПапкиПисемДляСинхронизации);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК Таблица
		|ГДЕ
		|	Таблица.Папка В(&Папки)
		|	И Таблица.Дата >= &ДатаНачалаВыгрузки
		|	И НЕ Таблица.ПометкаУдаления";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Письма", МассивДанныхДляРегистрации);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФлагиОбъектов.Объект,
		|	ФлагиОбъектов.Флаг
		|ИЗ
		|	РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|ГДЕ
		|	ФлагиОбъектов.Пользователь = &Пользователь
		|	И ФлагиОбъектов.Объект В (&Письма)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ФлагиОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);

		Запись = НаборЗаписей.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Объект = Выборка.Объект;
		Запись.Флаг = Выборка.Флаг;

		МассивДанныхДляРегистрации.Добавить(НаборЗаписей);

	КонецЦикла;

	Возврат Истина;

КонецФункции
Процедура ОпределитьСписокДанныхРазделаЗадачиДляРегистрации(
	Пользователь, ПараметрыСинхронизации, МассивДляРегистрации) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.УстановитьПараметр("ОбъектМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задача.ЗадачаИсполнителя"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиДелегированияПравСостав.Ссылка
	|ПОМЕСТИТЬ ОбластиДелегирования
	|ИЗ
	|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
	|ГДЕ
	|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &ОбъектМетаданных
	|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДелегированиеПрав.ОтКого,
	|	ДелегированиеПрав.Кому
	|ИЗ
	|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
	|		ПО ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
	|ГДЕ
	|	ДелегированиеПрав.Кому = &Исполнитель
	|	И ДелегированиеПрав.Действует
	|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
	|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В
	|				(ВЫБРАТЬ
	|					ОбластиДелегирования.Ссылка
	|				ИЗ
	|					ОбластиДелегирования КАК ОбластиДелегирования))";

	Исполнители = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОтКого");
	Исполнители.Добавить(Пользователь);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПоИсполнителю.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	НЕ ЗадачиПоИсполнителю.Выполнена
		|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) = ТИП(БизнесПроцесс.КомплексныйПроцесс)
		|	И НЕ ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) = ТИП(БизнесПроцесс.РешениеВопросовВыполненияЗадач)
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиПоИсполнителю.Исполнитель В (&Исполнители)
		|			ИЛИ 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|					ГДЕ
		|						ИсполнителиЗадач.РольИсполнителя = ЗадачиПоИсполнителю.РольИсполнителя
		|						И ИсполнителиЗадач.Исполнитель В (&Исполнители)
		|					)
		|				И ЗадачиПоИсполнителю.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	НЕ РолиИсполнителей.ПометкаУдаления
		|	И РолиИсполнителей.ИспользуетсяБезОбъектовАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Исполнение.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.Автор = &Исполнитель
		|	И НЕ Исполнение.ПометкаУдаления
		|	И НЕ Исполнение.Завершен";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		МассивДляРегистрации.Добавить(Выборка.Ссылка);
	КонецЦикла;


	// Дополнительно регистрируем флаги по задачам.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("МассивЗадач", МассивДляРегистрации);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФлагиОбъектов.Объект,
		|	ФлагиОбъектов.Флаг
		|ИЗ
		|	РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|ГДЕ
		|	ФлагиОбъектов.Пользователь = &Пользователь
		|	И ФлагиОбъектов.Объект В (&МассивЗадач)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ФлагиОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);

		Запись = НаборЗаписей.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Объект = Выборка.Объект;
		Запись.Флаг = Выборка.Флаг;

		МассивДляРегистрации.Добавить(НаборЗаписей);

	КонецЦикла;

КонецПроцедуры
Процедура ОпределитьСписокДанныхРазделаКалендарьДляРегистрации(
	Пользователь, ПараметрыСинхронизации, МассивДляРегистрации, ПериодЗагрузки) Экспорт

	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДатаСеанса() - ПериодЗагрузки * 24 * 60 * 60);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"      , Пользователь);
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("ОбъектМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ЗаписиРабочегоКалендаря"));
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ПОМЕСТИТЬ ОбластиДелегирования
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &ОбъектМетаданных
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Пользователь
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	(ЗаписиРабочегоКалендаря.ДатаНачала >= &ДатаНачалаВыгрузки
		|				И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|			ИЛИ ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения >= &ДатаНачалаВыгрузки
		|				И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|			ИЛИ ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие))
		|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
		|	И (ЗаписиРабочегоКалендаря.Пользователь = &Пользователь
		|			ИЛИ &Пользователь В
		|				(ВЫБРАТЬ
		|					ДелегированиеПрав.Кому
		|				ИЗ
		|					Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|						ПО
		|							ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
		|				ГДЕ
		|					ДелегированиеПрав.ОтКого = ЗаписиРабочегоКалендаря.Пользователь
		|					И ДелегированиеПрав.Действует
		|					И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|						ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В
		|							(ВЫБРАТЬ
		|								ОбластиДелегирования.Ссылка
		|							ИЗ
		|								ОбластиДелегирования КАК ОбластиДелегирования))))";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		МассивДляРегистрации.Добавить(Выборка.Ссылка);

	КонецЦикла;

КонецПроцедуры
Процедура ОпределитьСписокДанныхРазделаКонтрольДляРегистрации(
	Пользователь, ПараметрыСинхронизации, МассивДляРегистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контролер", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль"));
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ПОМЕСТИТЬ ОбластиДелегирования
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &ОбъектМетаданных
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И НЕ Контроль.СнятСКонтроля
		|	И (Контроль.Контролер = &Контролер
		|			ИЛИ &Контролер В
		|				(ВЫБРАТЬ
		|					ИсполнителиЗадач.Исполнитель
		|				ИЗ
		|					РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|				ГДЕ
		|					ИсполнителиЗадач.РольИсполнителя = Контроль.Контролер
		|				)
		|			ИЛИ &Контролер В
		|				(ВЫБРАТЬ
		|					ДелегированиеПрав.Кому
		|				ИЗ
		|					Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|						ПО
		|							ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
		|				ГДЕ
		|					ДелегированиеПрав.ОтКого = Контроль.Контролер
		|					И ДелегированиеПрав.Действует
		|					И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|						ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В
		|							(ВЫБРАТЬ
		|								ОбластиДелегирования.Ссылка
		|							ИЗ
		|								ОбластиДелегирования КАК ОбластиДелегирования))))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОбластиДелегирования";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		МассивДляРегистрации.Добавить(Выборка.Ссылка);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

// Возвращает массив узлов обмена, на которых следует зарегистрировать изменения указанного элемента данных
Функция ПолучитьУзлыОбмена(ЭлементДанных) Экспорт

	ТипЭлемента = ТипЗнч(ЭлементДанных);

	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом") Тогда
		Если ЭлементДанных.Количество() > 0 Тогда
			Пользователь = ЭлементДанных.Отбор.Пользователь.Значение;
			Возврат ОбменСМобильнымиСерверПовтИсп.ПолучитьУзлыОбменаПоВладельцу(Пользователь);
		Иначе
			Возврат Новый Массив;
		КонецЕсли;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Пользователи")
		Или ТипЭлемента = Тип("СправочникСсылка.РолиИсполнителей")
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 {
		Или ТипЭлемента = Тип("СправочникСсылка.ra_MTRiO")
		Или ТипЭлемента = Тип("СправочникСсылка.ra_Dogovory")
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 } 
		Тогда
		Возврат ОбменСМобильнымиСерверПовтИсп.ПолучитьВсеУзлы();

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Контрагенты")
		Или ТипЭлемента = Тип("СправочникСсылка.КонтактныеЛица")
		Или ТипЭлемента = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат ПолучитьУзлыОбменаПоКонтакту(ЭлементДанных);

	ИначеЕсли ТипЭлемента =Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		Возврат ПолучитьУзлыОбменаПоЛичномуАдресату(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПапкиПисем") Тогда
		Возврат ПолучитьУзлыОбменаПоПапкеПисем(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат ПолучитьУзлыОбменаПоУчетнойЗаписи(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЭлемента = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат ПолучитьУзлыОбменаПоПисьму(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Файлы") Тогда
		Возврат ПолучитьУзлыОбменаПоФайлу(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СведенияОПрочтении") Тогда
		Возврат ПолучитьУзлыОбменаПоСведениямОПрочтении(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ФлагиОбъектов") Тогда
		Возврат ПолучитьУзлыОбменаПоФлагамОбъектов(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПисьмаВПапках") Тогда
		Возврат ПолучитьУзлыОбменаПоПисьмамВПапках(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда
		Возврат ПолучитьУзлыОбменаПоШаблонуТекстаПисем(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Возврат ПолучитьУзлыОбменаПоЗаписиКалендаря(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.НастройкиОтображенияЗаписейРабочегоКалендаря") Тогда
		ЗаписьКалендаря = ЭлементДанных.Отбор.Событие.Значение;
		Возврат ПолучитьУзлыОбменаПоЗаписиКалендаря(ЗаписьКалендаря);

	ИначеЕсли ТипЭлемента = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат ПолучитьУзлыОбменаПоЗадаче(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Возврат ПолучитьУзлыОбменаПоИсполнению(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Контроль") Тогда
		Возврат ПолучитьУзлыОбменаПоКонтролю(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПисьмаВеток") Тогда
		Возврат ПолучитьУзлыПоНахождениюПисьмаВВетке(ЭлементДанных)

	Иначе

		Попытка
			// Если встретился такой ЭлементДанных, особенная регистрация изменений которого не требуется, то
			// попробуем зарегистрировать его как предмет задачи.
			ИтоговыйМассив = Новый Массив;
			ДобавитьУзлыОбменаПоПредметуЗадачи(ЭлементДанных, ИтоговыйМассив);

			// Также зарегистрируем этот элемент данных как предмет контроля
			ДобавитьУзлыОбменаПоПредметуКонтроля(ЭлементДанных, ИтоговыйМассив);

			Возврат ИтоговыйМассив;
		Исключение
			// ЭлементДанных может иметь такой тип метаданных, что поиск задач по нему как по предмету
			// завершится с ошибкой. В этом случае вернем пустой массив - изменение ЭлементаДанных
			// не будет никуда передано.
			Возврат Новый Массив;
		КонецПопытки;

	КонецЕсли;

КонецФункции

// Выполняет регистрацию изменений одного переданного элемента данных
Процедура ВыполнитьРегистрациюЭлементаДанных(ЭлементДанных) Экспорт

	Попытка

		// удаляем регистрацию элемента со всех узлов, т.к. с последней регистрации
		// до текущего момента могли измениться права, и он уже части пользователей не нужен
		ВсеУзлы = ОбменСМобильнымиСерверПовтИсп.ПолучитьВсеУзлы();
		ПланыОбмена.УдалитьРегистрациюИзменений(ВсеУзлы, ЭлементДанных);

		// Регистрируем элемент данным всем заинтересованным получателям
		УзлыОбмена = ОбменСМобильнымиРегистрацияИзмененийСервер.ПолучитьУзлыОбмена(ЭлементДанных);
		ПланыОбмена.ЗарегистрироватьИзменения(УзлыОбмена, ЭлементДанных);

		// удаляем регистрацию элемента с центрального узла
		УзелОбменаДляРегистрацииВсехДанных = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзелДляРегистрацииДанных();
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаДляРегистрацииВсехДанных, ЭлементДанных);

	Исключение

		Инфо = ИнформацияОбОшибке();
		МобильныеКлиенты = ОбменСМобильнымиСерверПовтИсп.ПолучитьВсеУзлы();

		СписокУзлов = "Узлы: ";
		Для каждого Узел Из УзлыОбмена Цикл
			СписокУзлов = СписокУзлов + Символы.ПС + Строка(Узел);
		КонецЦикла;
		ТекстСообщение = СтрШаблон("Элемент данных: %1, %2
									|%3", Строка(ЭлементДанных), Строка(ТипЗнч(ЭлементДанных)),СписокУзлов);

		Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
				ПодробноеПредставлениеОшибки(Инфо) + Символы.ПС + ТекстСообщение,
				Ложь,
				МобильныйКлиент);

		КонецЦикла;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

// Удаляет регистрацию изменений после формирования сообщения обмена.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  МассивДанныхДляПередачиНаМобильныйКлиент - Массив - Данные успешно помещенные в сообщение обмена;
//  ПараметрыСинхронизации					 - Структура - Кэш параметров обмена.
//
Процедура УдалитьРегистрациюИзмененийПослеФормированияСообщения(МобильныйКлиент, 
	МассивДанныхДляПередачиНаМобильныйКлиент, ПараметрыСинхронизации) Экспорт
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало удаления регистрации изменений.'; en = 'Starting deletion of registration of changes.'"),
		Ложь,
		МобильныйКлиент);

	Для Каждого ЭлементМассива Из МассивДанныхДляПередачиНаМобильныйКлиент Цикл

		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ЭлементДанных = ЭлементМассива.Ссылка;
		Иначе
			ЭлементДанных = ЭлементМассива;
		КонецЕсли;

		Попытка 
			МетаданныеОбъекта = ЭлементДанных.Метаданные();
		Исключение
			МетаданныеОбъекта = Неопределено;
		КонецПопытки;

		// В массив может попасть объект, который не находится в составе обмена.
		// Такие объекты нужно пропустить.
		Если Не Метаданные = Неопределено 
			И Не Метаданные.ПланыОбмена.Мобильный.Состав.Найти(МетаданныеОбъекта) = Неопределено Тогда

			ПланыОбмена.УдалитьРегистрациюИзменений(МобильныйКлиент, ЭлементДанных);

			ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
				ЭлементДанных, НСтр("ru = 'Регистрация изменений удалена.'; en = 'Registration of changes deleted.'"));

		КонецЕсли;

	КонецЦикла;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Удаление регистрации изменений завершено.'; en = 'Completed deletion of registration of changes'"),
		Ложь,
		МобильныйКлиент);

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеУзловОбменаПоОбъекту

// Получает массив ссылок на узлы плана обмена Мобильный, принадлежащих указанным пользователям.
// Параметры:
//	Пользователи - массив ссылок на Пользователей
Функция ПолучитьУзлыПоПользователям(Пользователи) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("ЭтотУзел"    , ПланыОбмена.Мобильный.ЭтотУзел());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	Мобильный.Пользователь В(&Пользователи)
		|	И НЕ Мобильный.ПометкаУдаления
		|	И НЕ Мобильный.Ссылка = &ЭтотУзел";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

Функция ПолучитьУзлыОбменаПоКонтакту(КонтактСсылка)

	ИтоговыйМассив = Новый Массив;

	Если Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда

		ЗапросПолучениеУзлов = Новый Запрос;
		ЗапросПолучениеУзлов.УстановитьПараметр("Объект", КонтактСсылка);
		ЗапросПолучениеУзлов.Текст = 
			"ВЫБРАТЬ
			|	Мобильный.Ссылка
			|ИЗ
			|	ПланОбмена.Мобильный КАК Мобильный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступа
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|			ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДляОбъектов.Дескриптор
			|		ПО Мобильный.Пользователь = ПраваПоДескрипторамДоступа.Пользователь
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Чтение
			|	И ДескрипторыДляОбъектов.Объект = &Объект
			|	И НЕ Мобильный.ПометкаУдаления
			|	И НЕ Мобильный.ЭтотУзел";
			
		ИтоговыйМассив = ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Иначе
		ИтоговыйМассив = ОбменСМобильнымиСерверПовтИсп.ПолучитьВсеУзлы();
	КонецЕсли;

	ДобавитьУзлыОбменаПоПредметуЗадачи(КонтактСсылка, ИтоговыйМассив);
	ДобавитьУзлыОбменаПоПредметуКонтроля(КонтактСсылка, ИтоговыйМассив);

	Возврат ИтоговыйМассив;

КонецФункции

Функция ПолучитьУзлыОбменаПоЛичномуАдресату(ЛичныйАдресатСсылка)

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка", ЛичныйАдресатСсылка);
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|		ПО Мобильный.Пользователь = ЛичныеАдресаты.Пользователь
		|ГДЕ
		|	ЛичныеАдресаты.Ссылка = &Ссылка
		|	И НЕ Мобильный.ПометкаУдаления
		|	И НЕ Мобильный.ЭтотУзел";

	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции


Функция ПолучитьУзлыОбменаПоПапкеПисем(ПапкаСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Папка", ПапкаСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь
		|ИЗ
		|	РегистрСведений.СинхронизацияПапокПисемСМобильнымКлиентом КАК СинхронизацияПапокПисемСМобильнымКлиентом
		|ГДЕ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Папка = &Папка";

	Выборка = Запрос.Выполнить().Выбрать();
	МассивПользователей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если МассивПользователей.Найти(Выборка.Пользователь) = Неопределено Тогда
			МассивПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;

	Возврат ПолучитьУзлыПоПользователям(МассивПользователей);

КонецФункции

Функция ПолучитьУзлыОбменаПоУчетнойЗаписи(УчетнаяЗаписьСсылка)

	ЗапросОтвественные = Новый Запрос;
	ЗапросОтвественные.УстановитьПараметр("Ссылка", УчетнаяЗаписьСсылка);
	ЗапросОтвественные.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь Как Пользователь
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка = &Ссылка";

	МассивПользователей = ЗапросОтвественные.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");

	СоставРабочейГруппы = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(УчетнаяЗаписьСсылка);
	Для Каждого УчастникРабочейГруппы Из СоставРабочейГруппы Цикл

		Если ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(УчастникРабочейГруппы.Участник);

		ИначеЕсли ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			ПользователиГруппы = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(УчастникРабочейГруппы.Участник, Истина);
			Для Каждого ПользовательГруппы Из ПользователиГруппы Цикл
				МассивПользователей.Добавить(ПользовательГруппы);
			КонецЦикла;

		ИначеЕсли ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ДобавитьИсполнителейРолиВМассивПользователей(
				УчастникРабочейГруппы.Участник,
				МассивПользователей);
		КонецЕсли;

	КонецЦикла;

	Возврат ПолучитьУзлыПоПользователям(МассивПользователей);

КонецФункции

Функция ПолучитьУзлыОбменаПоПисьму(ПисьмоСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Письмо", ПисьмоСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КраткиеОписанияПисем.Папка,
		|	КраткиеОписанияПисем.УчетнаяЗапись
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК КраткиеОписанияПисем
		|ГДЕ
		|	КраткиеОписанияПисем.Ссылка = &Письмо";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Папка = Выборка.Папка;
	УчетнаяЗапись = Выборка.УчетнаяЗапись;

	// Для передачи письма на мобильный клиент необходимо, чтобы папка и учетная запись письма 
	// находились в списке синхронизируемых для пользователя, которому принадлежит мобильный клиент.
	МассивУзловПоПапке = ПолучитьУзлыОбменаПоПапкеПисем(Папка);
	МассивУзловПоУчетнойЗаписи = ПолучитьУзлыОбменаПоУчетнойЗаписи(УчетнаяЗапись);

	ИтоговыйМассивУзлов = Новый Массив;
	Для Каждого Узел Из МассивУзловПоПапке Цикл
		Если МассивУзловПоУчетнойЗаписи.Найти(Узел) <> Неопределено Тогда
			ИтоговыйМассивУзлов.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;

	ДобавитьУзлыОбменаПоПредметуЗадачи(ПисьмоСсылка, ИтоговыйМассивУзлов);
	ДобавитьУзлыОбменаПоПредметуКонтроля(ПисьмоСсылка, ИтоговыйМассивУзлов);

	Возврат ИтоговыйМассивУзлов;

КонецФункции

Функция ПолучитьУзлыОбменаПоФайлу(ФайлСсылка)

	ВладелецФайла  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
	ИтоговыйМассив = ПолучитьУзлыОбмена(ВладелецФайла);

	ДобавитьУзлыОбменаПоПредметуЗадачи(ФайлСсылка, ИтоговыйМассив);
	ДобавитьУзлыОбменаПоПредметуКонтроля(ФайлСсылка, ИтоговыйМассив);

	Возврат ИтоговыйМассив;

КонецФункции

Функция ПолучитьУзлыОбменаПоШаблонуТекстаПисем(ШаблонТекстаПисьмаСсылка)

	ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонТекстаПисьмаСсылка, "Автор");

	Возврат ОбменСМобильнымиСерверПовтИсп.ПолучитьУзлыОбменаПоВладельцу(ВладелецШаблона);

КонецФункции

Функция ПолучитьУзлыОбменаПоЗаписиКалендаря(ЗаписьКалендаряСсылка)

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка", ЗаписьКалендаряСсылка);
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ПО Мобильный.Пользователь = ЗаписиРабочегоКалендаря.Пользователь
		|			И (ЗаписиРабочегоКалендаря.Ссылка = &Ссылка)
		|ГДЕ
		|	НЕ Мобильный.ПометкаУдаления
		|	И НЕ Мобильный.ЭтотУзел";

	МассивУзлов = ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

	Если ТипЗнч(ЗаписьКалендаряСсылка) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда

		ДоверенныеПользователи = Новый Массив();
		ДобавитьДелегирующихВМассивПользователей(
			"Справочник.ЗаписиРабочегоКалендаря", 
			ЗаписьКалендаряСсылка.Пользователь,
			ДоверенныеПользователи);

		МассивДоверенныхУзлов = ПолучитьУзлыПоПользователям(ДоверенныеПользователи);

		Для каждого Узел Из МассивДоверенныхУзлов Цикл
			МассивУзлов.Добавить(Узел);
		КонецЦикла;

	КонецЕсли;

	Возврат МассивУзлов;

КонецФункции

Функция ПолучитьУзлыОбменаПоЗадаче(ЗадачаСсылка)

	БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "БизнесПроцесс");

	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Возврат Новый Массив;
	КонецЕсли;

	МассивПользователей = ПолучитьМассивПользователейПоЗадаче(ЗадачаСсылка);

	Возврат ПолучитьУзлыПоПользователям(МассивПользователей);

КонецФункции

// Получает массив пользователей, которые имеют отношение к задаче: 
//	автор, исполнители, старые исполнители, другие участники процесса.
// Параметры:
//	Задача - ссылка на ЗадачуИсполнителя
Функция ПолучитьМассивПользователейПоЗадаче(Задача)

	МассивПользователей = Новый Массив;

	// Автор
	МассивПользователей.Добавить(Задача.Автор);

	// Исполнитель
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
		МассивПользователей.Добавить(Задача.Исполнитель);
	Иначе
		ДобавитьИсполнителейРолиВМассивПользователей(
			Задача.РольИсполнителя, 
			МассивПользователей);
	КонецЕсли;
	
	ДобавитьДелегирующихВМассивПользователей("Задача.ЗадачаИсполнителя", Задача.Исполнитель, МассивПользователей);

	// Старые исполнители задачи
	СтарыеИсполнители = РегистрыСведений.СведенияОбИсполнителяхЗадач.ПолучитьИсполнителей(Задача.Ссылка);
	Для каждого Эл Из СтарыеИсполнители Цикл
		Если ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Эл.Участник);
		ИначеЕсли ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ДобавитьИсполнителейРолиВМассивПользователей(
				Эл.Участник, 
				МассивПользователей);
		КонецЕсли;
	КонецЦикла;

	// Участники процесса
	ВсеУчастники = РаботаСБизнесПроцессамиВызовСервера.ПолучитьВсехУчастниковПроцесса(Задача.БизнесПроцесс);
	Для Каждого Эл Из ВсеУчастники Цикл
		Если ТипЗнч(Эл.Значение.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Эл.Значение.Участник);
		Иначе
			ДобавитьИсполнителейРолиВМассивПользователей(
				Эл.Значение.Участник, 
				МассивПользователей);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивПользователей;

КонецФункции

Функция ПолучитьУзлыОбменаПоИсполнению(ИсполнениеСсылка)

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка", ИсполнениеСсылка);
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение КАК Исполнение
		|		ПО Мобильный.Пользователь = Исполнение.Автор
		|ГДЕ
		|	Исполнение.Ссылка = &Ссылка
		|	И НЕ Мобильный.ПометкаУдаления
		|	И НЕ Мобильный.ЭтотУзел";

	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

Функция ПолучитьУзлыОбменаПоКонтролю(КонтрольСсылка)

	РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КонтрольСсылка,
		"Контролер");

	МассивПользователей = Новый Массив;
	Если ТипЗнч(РеквизитыКонтроля.Контролер) = Тип("СправочникСсылка.Пользователи") Тогда

		МассивПользователей.Добавить(РеквизитыКонтроля.Контролер);

		ДобавитьДелегирующихВМассивПользователей(
			"Справочник.Контроль", 
			РеквизитыКонтроля.Контролер, 
			МассивПользователей);

	Иначе
		ДобавитьИсполнителейРолиВМассивПользователей(
			РеквизитыКонтроля.Контролер, 
			МассивПользователей); 
	КонецЕсли;

	Возврат ПолучитьУзлыПоПользователям(МассивПользователей); 

КонецФункции


Функция ПолучитьУзлыОбменаПоСведениямОПрочтении(НаборЗаписейРегистра)

	Объект       = НаборЗаписейРегистра.Отбор.Объект.Значение;
	Пользователь = НаборЗаписейРегистра.Отбор.Пользователь.Значение;

	УзлыПоОбъекту      = ПолучитьУзлыОбмена(Объект);
	УзлыПоПользователю = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзлыОбменаПоВладельцу(Пользователь);

	ИтоговыйМассив = Новый Массив;
	Для Каждого Узел Из УзлыПоОбъекту Цикл
		Если УзлыПоПользователю.Найти(Узел) <> Неопределено Тогда
			ИтоговыйМассив.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;

	Возврат ИтоговыйМассив;

КонецФункции

Функция ПолучитьУзлыОбменаПоФлагамОбъектов(НаборЗаписейРегистра)

	Объект       = НаборЗаписейРегистра.Отбор.Объект.Значение;
	Пользователь = НаборЗаписейРегистра.Отбор.Пользователь.Значение;

	УзлыПоОбъекту      = ПолучитьУзлыОбмена(Объект);
	УзлыПоПользователю = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзлыОбменаПоВладельцу(Пользователь);

	ИтоговыйМассив = Новый Массив;
	Для Каждого Узел Из УзлыПоОбъекту Цикл
		Если УзлыПоПользователю.Найти(Узел) <> Неопределено Тогда
			ИтоговыйМассив.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;

	Возврат ИтоговыйМассив;

КонецФункции

Функция ПолучитьУзлыОбменаПоПисьмамВПапках(НаборЗаписейРегистра)

	Письмо        = НаборЗаписейРегистра.Отбор.Письмо.Значение;
	УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "УчетнаяЗапись");

	Возврат ПолучитьУзлыОбмена(УчетнаяЗапись);

КонецФункции

Процедура ДобавитьУзлыОбменаПоПредметуЗадачи(ПредметСсылка, МассивУзлов)

	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.УстановитьПараметр("Предмет", ПредметСсылка);
	ЗапросЗадачи.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &Предмет";

	МассивЗадач = ЗапросЗадачи.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл

		МассивУзловПоЗадаче = ПолучитьУзлыОбменаПоЗадаче(ЗадачаСсылка);

		Для Каждого Узел Из МассивУзловПоЗадаче Цикл
			МассивУзлов.Добавить(Узел);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьУзлыОбменаПоПредметуКонтроля(ПредметСсылка, МассивУзлов)

	КарточкиКонтроля = Контроль.КарточкиКонтроляПоПредмету(ПредметСсылка);

	Для Каждого Карточка Из КарточкиКонтроля Цикл
		РеквизитыКарточки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Карточка, 
			"ПометкаУдаления, СнятСКонтроля");

		Если РеквизитыКарточки.ПометкаУдаления Или РеквизитыКарточки.СнятСКонтроля Тогда
			Продолжить;
		КонецЕсли;

		УзлыОбменаПоКонтролю = ПолучитьУзлыОбменаПоКонтролю(Карточка);
		Для Каждого Узел Из УзлыОбменаПоКонтролю Цикл
			МассивУзлов.Добавить(Узел);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьУзлыПоНахождениюПисьмаВВетке(НаборЗаписейРегистра)

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ПисьмоСсылка = НаборЗаписейРегистра.Отбор.Письмо.Значение;

	Возврат ПолучитьУзлыОбменаПоПисьму(ПисьмоСсылка);

КонецФункции

Процедура ДобавитьИсполнителейРолиВМассивПользователей(
	Роль, 
	МассивПользователей)

	ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(Роль);
	Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
		МассивПользователей.Добавить(ИсполнительРоли);
	КонецЦикла;

КонецПроцедуры


// Добавляет в массив пользователей которые делегируют указанному пользователю свои права
// по указанному разделу
//
// Параметры:
//  ОписаниеОбъекта		 - Строка - Описание раздела делегирование
//  Пользователь		 - СправочникСсылка.Пользователи - Доверенный пользователе
//  МассивПользователей	 - Массив - Массив пользователей по объекту
//
Процедура ДобавитьДелегирующихВМассивПользователей(ОписаниеОбъекта, Пользователь, МассивПользователей)

	ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеОбъекта);

	ЗапросДелегирование = Новый Запрос;
	ЗапросДелегирование.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданных);
	ЗапросДелегирование.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &ОбъектМетаданных
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления";

	ОбластиДелегирования = ЗапросДелегирование.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	// добавление делегатов контролера
	ЗапросДелегаты = Новый Запрос;
	ЗапросДелегаты.УстановитьПараметр("Делегирующий", Пользователь);
	ЗапросДелегаты.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
	ЗапросДелегаты.Текст = 
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Кому КАК Делегат
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|		ПО ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
		|ГДЕ
		|	ДелегированиеПрав.ОтКого = &Делегирующий
		|	И ДелегированиеПрав.Действует
		|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))";

	ВыборкаДелегаты = ЗапросДелегаты.Выполнить().Выбрать();
	Пока ВыборкаДелегаты.Следующий() Цикл
		МассивПользователей.Добавить(ВыборкаДелегаты.Делегат);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
