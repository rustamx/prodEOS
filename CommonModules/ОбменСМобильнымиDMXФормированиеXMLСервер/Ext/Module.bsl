
#Область ПрограммныйИнтерфейс

// Формирует представление указанного элемента данных в виде XML в указанной версии формата обмена.
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияСервиса			 - Строка - Используемая версия формата обмена;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  ЭлементДанных			 - Произвольный - Выгружаемый объект;
//  КакПредмет				 - Булево - Признак принудительной выгрузки объекта.
//
Процедура ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных,
		КакПредмет = Ложь) Экспорт

	Если ЭлементДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СинхронизироватьПочту     = ПараметрыСинхронизации.СинхронизироватьПочту;
	СинхронизироватьЗадачи    = ПараметрыСинхронизации.СинхронизироватьЗадачи;
	СинхронизироватьКалендарь = ПараметрыСинхронизации.СинхронизироватьКалендарь;
	СинхронизироватьКонтроль  = ПараметрыСинхронизации.СинхронизироватьКонтроль;

	Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда

		Объект = ЭлементДанных.Ссылка;
		ПометкаУдаления = ЭлементДанных.ПометкаУдаления;

		Если ПометкаУдаления = Неопределено Тогда
			ПометкаУдаления = Ложь;
		КонецЕсли;

	Иначе

		Объект  = ЭлементДанных;

		Попытка
			ПометкаУдаления = ЭлементДанных.ПометкаУдаления;
		Исключение
			ПометкаУдаления = Ложь;
		КонецПопытки;

	КонецЕсли;

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементДанных)) Тогда
		ОбъектXML = ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.УникальныйИдентификатор()];
		Если Не ОбъектXML = Неопределено Тогда
			Возврат; // если такой объект уже есть в массиве
		КонецЕсли;
	КонецЕсли;

	ТипЗначенияОбъекта = ТипЗнч(Объект);

	Если ТипЗначенияОбъекта = Тип("УдалениеОбъекта") Тогда

		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

		ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
			ПараметрыСинхронизации.МобильныйКлиент, Объект, 
			НСтр("ru = 'Передано удаление объекта'; en = 'Transferred object deletion'"));

		Возврат;

	КонецЕсли;

	Если Не ТипЗначенияОбъекта = Тип("ИнформацияОбОшибке") Тогда

		Если Не ОбменСМобильнымиСервер.ОбъектДоступенТекущемуПользователю(
				ПараметрыСинхронизации.МобильныйКлиент, Объект, ПараметрыСинхронизации.ОбщиеПраваНаОбъекты) Тогда

			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

			Возврат;

		КонецЕсли;

	КонецЕсли;

	Попытка
		Если ПометкаУдаления Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
			Возврат;
		КонецЕсли;
	Исключение
		// "Объект" может быть не ссылочного типа
	КонецПопытки;

	Если СинхронизироватьПочту И ТипЗначенияОбъекта = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда

		ПараметрыСинхронизации.Адресаты.Вставить(Объект, Истина);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Пользователи")
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.РолиИсполнителей")
		Или (ТипЗначенияОбъекта = Тип("СправочникСсылка.Контрагенты") И Не КакПредмет)
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.КонтактныеЛица")
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты")
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 {
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_Dogovory")
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_MTRiO")
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 } 
		Тогда

		Если ТипЗначенияОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
			ВыгрузитьВXMLПользователей(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

		ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ВыгрузитьВXMLРолиИсполнителей(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 {
		ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_Dogovory") Тогда
			ВыгрузитьВXMLДоговоры(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_MTRiO") Тогда
			ВыгрузитьВXMLМТР(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
			ВыгрузитьВXMLКонтрагенты(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 } 	
		КонецЕсли;

		Если СинхронизироватьПочту Тогда
			ПараметрыСинхронизации.Контакты.Вставить(Объект, Истина);
		КонецЕсли;

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда

		ВыгрузитьВXMLУчетныеЗаписиЭлектроннойПочты(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		Если Не КакПредмет Тогда

			Если Не СинхронизироватьПочту Тогда
				Возврат;
			КонецЕсли;

			ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;
			ПапкаПисьма = РегистрыСведений.ПисьмаВПапках.ПолучитьПапку(Объект);

			Если ПапкиВСинхронизации.Найти(ПапкаПисьма) = Неопределено Тогда
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
				Возврат;
			КонецЕсли;

		КонецЕсли;

		ВыгрузитьВXMLВходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		Если Не КакПредмет Тогда

			Если Не СинхронизироватьПочту Тогда
				Возврат;
			КонецЕсли;

			ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;
			ПапкаПисьма         = РегистрыСведений.ПисьмаВПапках.ПолучитьПапку(Объект);

			Если ПапкиВСинхронизации.Найти(ПапкаПисьма) = Неопределено Тогда
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
				Возврат;
			КонецЕсли;

		КонецЕсли;

		ВыгрузитьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Файлы") Тогда

		ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.СведенияОПрочтении") Тогда

		ВыгрузитьВXMLСведенияОПрочтении(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ФлагиОбъектов") Тогда

		ВыгрузитьВXMLФлагиОбъектов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ПапкиПисем") Тогда

		ВыгрузитьВXMLПапкиПисем(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = 
		Тип("РегистрСведенийНаборЗаписей.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом") Тогда

		Для Каждого Запись Из Объект Цикл
			ВыгрузитьВXMLНастройкиСинхронизации(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ШаблоныТекстов") Тогда

		Если ПометкаУдаления Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		Иначе
			ВыгрузитьВXMLШаблоныТекстов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		КонецЕсли;

	ИначеЕсли ТипЗначенияОбъекта = Тип("ИнформацияОбОшибке") Тогда

		ВыгрузитьВXMLИнформациюОбОшибке(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда

		ВыгрузитьВXMLЗаписиРабочегоКалендаря(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПисьмаВПапках") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;
		
		Для Каждого ЗаписьРегистра Из Объект Цикл

			Если ПапкиВСинхронизации.Найти(ЗаписьРегистра.Папка) = Неопределено Тогда
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЗаписьРегистра.Письмо);
			Иначе
				ВыгрузитьВXMLПисьмаВПапках(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЗаписьРегистра);
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.НастройкиОтображенияЗаписейРабочегоКалендаря") Тогда

		Для каждого ЭлементДанных Из Объект Цикл

			Если Не ЗначениеЗаполнено(ЭлементДанных.Событие) Тогда
				Возврат;
			КонецЕсли;

			Если Не ТипЗнч(ЭлементДанных.Событие) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
				Возврат;
			КонецЕсли;

			ВыгрузитьВXMLНастройкиОтображенияЗаписейРабочегоКалендаря(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных);

		КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		ВыгрузитьВXMLЗадачуИсполнителя(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ИсторияСобытийЗадач") Тогда

		Для каждого Запись Из Объект Цикл
			ВыгрузитьВXMLЗадачуИсполнителя(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись.Задача);
		КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("БизнесПроцессСсылка.Исполнение") Тогда

		Если Не СинхронизироватьЗадачи Тогда
			Возврат;
		КонецЕсли;

		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, "Ссылка, ПометкаУдаления, Состояние"); 

		Если РеквизитыОбъекта.ПометкаУдаления
		 Или РеквизитыОбъекта.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда

			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

			УстановитьПривилегированныйРежим(Истина);

			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("БизнесПроцесс", Объект);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";

			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл

				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Выборка.Ссылка);

			КонецЦикла;

			Возврат;

		КонецЕсли;

		ВыгрузитьВXMLПроцессИсполнение(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ПисьмаВеток") Тогда

		Для Каждого Запись Из Объект Цикл
			ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись.Письмо, Запись.ВеткаПереписки);
		КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Контроль") Тогда

		ВыгрузитьВXMLКонтрольнуюКарточку(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	// ТСК Близнюк С.И.; 30.10.2018; task#1602{
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_EhtapyVyyavleniyaNesootvetstvij") Тогда

		ВыгрузитьВXMLra_EhtapyVyyavleniyaNesootvetstvij(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_VidyNesootvetstvij") Тогда

		ВыгрузитьВXMLra_VidyNesootvetstvij(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_KontrolnyeMeropriyatiya") Тогда

		ВыгрузитьВXMLra_KontrolnyeMeropriyatiya(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_OblastiPrimeneniya") Тогда

		ВыгрузитьВXMLra_OblastiPrimeneniya(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		
	// ТСК Близнюк С.И.; 03.12.2018; task#1960{
	//ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ra_VidyKontrolnyhOperacij") Тогда

	//	ВыгрузитьВXMLra_VidyKontrolnyhOperacij(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
	// ТСК Близнюк С.И.; 03.12.2018; task#1960}
	
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ra_ZavisimostPredmetovOtEtapov") Тогда

		ВыгрузитьВXMLra_ZavisimostPredmetovOtEtapov(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
	// ТСК Близнюк С.И.; 30.10.2018; task#1602}
	// Ткаченко И.Л. Искать в тексте "ДоработкиМП" 19.12.2018 {
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ra_Signal") Тогда

		ВыгрузитьВXMLra_Signal(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
	// Ткаченко И.Л. Искать в тексте "ДоработкиМП" 19.12.2018 }
	Иначе

		Попытка
			ВыгрузитьВXMLПредметыПроцесса(ЗаписьXML, ВерсияСервиса, Объект, ПараметрыСинхронизации);
		Исключение
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

// Выгружает адресатов почтовых сообщений которые еще не выгружены
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияСервиса			 - Строка - Используемая версия формата обмена;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена.
//
Процедура ПолучитьXMLИзАдресатов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации) Экспорт

	Попытка

		УстановитьПривилегированныйРежим(Истина);
		МассивАдресатовДляПолученияПредставления = Новый Массив();

		Если Не ПараметрыСинхронизации.Контакты.Количество() = 0 Тогда

			МассивКонтактов = Новый Массив();

			Для Каждого КлючЗначение Из ПараметрыСинхронизации.Контакты Цикл

				Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[КлючЗначение.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКонтактов.Добавить(КлючЗначение.Ключ);

				ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);

			КонецЦикла;

			Если МассивКонтактов.Количество() > 0 Тогда

				ЗапросАдресаты = Новый Запрос();
				ЗапросАдресаты.УстановитьПараметр("Контакты", МассивКонтактов);
				ЗапросАдресаты.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
					|	СведенияОбАдресатах.АдресатСообщения.Код КАК АдресатСообщенияКод
					|ИЗ
					|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
					|ГДЕ
					|	СведенияОбАдресатах.Контакт В(&Контакты)
					|
					|УПОРЯДОЧИТЬ ПО
					|	АдресатСообщенияКод";

				МассивАдресатовДляПолученияПредставления = 
					ЗапросАдресаты.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

				ПараметрыСинхронизации.Контакты.Очистить();

			КонецЕсли;

		КонецЕсли;

		Для Каждого Элемент Из ПараметрыСинхронизации.Адресаты Цикл

			Если ПараметрыСинхронизации.ВыгруженныеОбъекты[Элемент.Ключ] = Неопределено Тогда
				МассивАдресатовДляПолученияПредставления.Добавить(Элемент.Ключ);
			КонецЕсли;

		КонецЦикла;

		Если МассивАдресатовДляПолученияПредставления.Количество() > 0 Тогда

			ПредставленияАдресатов = 
				ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(
					МассивАдресатовДляПолученияПредставления);

			Для Каждого СтрокаАдресат Из ПредставленияАдресатов Цикл

				ВыгрузитьВXMLАдресата(ЗаписьXML, ВерсияСервиса, 
					ПараметрыСинхронизации, СтрокаАдресат.Значение);

			КонецЦикла;

			ПараметрыСинхронизации.Адресаты.Очистить();

		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	Исключение

		Инфо = ИнформацияОбОшибке();

		ОбменСМобильнымиDMXФормированиеXMLСервер.ПолучитьXMLИзОбъекта(ЗаписьXML, 
			ВерсияСервиса, ПараметрыСинхронизации, Инфо);

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Записать заголовок элемента данных
//
// Параметры:
//  ИмяТипа		  - Строка - Тип выгружаемого объекта;
//  ВерсияФормата - Строка - Использованная при выгрузке версия формата.
//
Функция ЗаписатьЗаголовокОбъекта(ИмяТипаОбъекта, ВерсияФормата)

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТипаОбъекта);
	ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияФормата);

	Возврат ЗаписьXML;

КонецФункции

// Выполняет запись указанного свойства в XML-поток.
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи данных в файл;
//  ИмяЭлемента		 - Строка - Имя присваеваемое данным в файле;
//  ЗначениеЭлемента - Проивзольный - Записываемое в поток значение данных.
//
Процедура ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЭлемента));
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Помещает в поток XML уникальный идентификатор объекта
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи
//  ИмяЭлемента		 - Строка - Имя записываемого элемента в файле
//  ЗначениеЭлемента - Ссылка - Ссылка на объект
//
Процедура ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		УИД = ЗначениеЭлемента.УникальныйИдентификатор();
	Исключение

		ВызватьИсключение 
			СтрШаблон(
				"Не удалось получить УИД от объекта (Тип %1, %2)",
				ТипЗнч(ЗначениеЭлемента), 
				Строка(ЗначениеЭлемента));

	КонецПопытки;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, УИД);

КонецПроцедуры

// Формирует сообщение об использовании недопустимой версии формата для указанного объекта.
//
// Параметры:
//  Версия - Строка - Используемая версия формата обмена;
//  Объект - Произвольный - Объект с которым произошла ошибка выгрузки;
//  ПараметрыСинхронизации - Структура - Кэш параметров обмена.
//
Процедура СформироватьСообщениеОНеизвестнойВерсии(Версия, Объект, ПараметрыСинхронизации)

	ОписаниеПроблемы = 
		СтрШаблон(
			НСтр("ru = 'Указана неверная версия формата выгрузки (""%1"") для объекта ""%2""'; en = 'Wrong version of export format (""%1"") was specified for object ""%2""'"),
			Версия, Объект);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
		ОписаниеПроблемы, Ложь, ПараметрыСинхронизации.МобильныйКлиент);

КонецПроцедуры

// Записывает запись протокола о том, что объект выгружен, если это необходимо и обновляет общие счетчики.
//
// Параметры:
//  ПараметрыСинхронизации - Структура - Кэш параметров обмена.
//
Процедура ОбновитьПротоколИСчетчики(ПараметрыСинхронизации)

	ПараметрыСинхронизации.ВыгруженоОбъектов = ПараметрыСинхронизации.ВыгруженоОбъектов + 1;

КонецПроцедуры

// Выгружает XML представление ссылки на объект
//
// Параметры:
//  ЗаписьXML		- ЗаписьXML - Объект записи данных в файл;
//  ИмяЭлемента		- Строка - Имя данных записываемое в файл;
//  ЭлементДанных	- ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных.
// 
Процедура ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, ИмяЭлемента, ЭлементДанных)

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тэг
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);

	// записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных);

	// Записываем закрывающий тэг
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Получает адресата по первому адресу электронной почты объекта
//
// Параметры:
//  КонтактнаяИнформация - ТаблицаЗначений - 
// 
// Возвращаемое значение:
//  Адресат, Неопределено - Адресат
//
Функция ПолучитьАдресатаИзКонтактнойИнформации(КонтактнаяИнформация)

	Строка = КонтактнаяИнформация.Найти(Истина, "ЭтоПочта");

	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат 
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Строка.Представление, Строка.АдресЭП);

	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВыгрузкиДанных

#Область УдалениеОбъекта

// Определяет какую версию объекта нужно использовать для удаления объекта
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияКлиента			 - Строка	 - Версия протокола обмена заявленная клиентом;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  ЭлементДанных			 - Ссылка, Набор, УдалениеОбъекта	 - Элемент выгружаемых данных.
//
Процедура ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ЭлементДанных.Ссылка.УникальныйИдентификатор() = УникальныйИдентификаторПустой() 
		Или Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	// выбираем версию выгрузки в зависимости от используемой версии клиента
	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьУдалениеОбъектаДляВерсии206(ЗаписьXML, ЭлементДанных);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

// Выгружает входящее письмо в терминах версии 206
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных
//
Процедура ВыгрузитьУдалениеОбъектаДляВерсии206(ЗаписьXML, ЭлементДанных)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectDeletion", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных.Ссылка));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ИнформацияОбОшибках

// Определяет какую версию объекта нужно использовать для удаления объекта
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияКлиента	 - Строка - Версия протокола обмена заявленная клиентом
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных
//
Процедура ВыгрузитьВXMLИнформациюОбОшибке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	// выбираем версию выгрузки в зависимости от используемой версии клиента
	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьИнформациюОбОшибкеДляВерсии206(ЗаписьXML, ЭлементДанных);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

КонецПроцедуры

// Выгружает входящее письмо в терминах версии 206
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных
//
Процедура ВыгрузитьИнформациюОбОшибкеДляВерсии206(ЗаписьXML, ЭлементДанных)

	// Подготовка данных
	ТипЗаписи = "Error";
	Если СтрНайти(ЭлементДанных.Описание, "info:") Тогда
		ТипЗаписи = "Information";
	ИначеЕсли СтрНайти(ЭлементДанных.Описание, "warning:") Тогда
		ТипЗаписи = "Warning";
	КонецЕсли;

	ОписаниеОшибки = ЭлементДанных.Описание;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "info:", "");
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "warning:", "");

	Если СтрСравнить(ТипЗаписи, "Error") = 0 Тогда

		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ЭлементДанных);
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "info:", "");
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "warning:", "");

		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'При синхронизации на сервере произошла ошибка:
				|%1
				|
				|#Текст ошибки (для администратора):#
				|%2';
				|en = 'Error occurred while synchronizing on the server: 
				|%1 
				|
				|#Error text (for administrator):# 
				|%2'"),
			ОписаниеОшибки,
			ПодробноеОписаниеОшибки);

	КонецЕсли;

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("LogRecord", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecordType", ТипЗаписи);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", ОписаниеОшибки);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////////

#Область РолиИсполнителей

Процедура ВыгрузитьВXMLРолиИсполнителей(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ПараметрыСинхронизации.КешДанныхОПользователях.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Реквизиты.Наименование) Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьРолиИсполнителейПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьРолиИсполнителейПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Подготовка данных
	Адресат = ПолучитьАдресатаИзКонтактнойИнформации(ЭлементДанных.КонтактнаяИнформация);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Role", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Addressee", Строка(Адресат));

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Role

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 {
Процедура ВыгрузитьВXMLДоговоры(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,ID_SRM,PredmetDogovora,DataPodpisaniya,VneshniyNomer,Pokupatel.ра_GID,Postavschik.ра_GID");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Dogovor", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ID_SRM", Реквизиты.ID_SRM);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PredmetDogovora", Реквизиты.PredmetDogovora);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataPodpisaniya", Реквизиты.DataPodpisaniya);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VneshniyNomer", Реквизиты.VneshniyNomer);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Pokupatel_GID", Реквизиты.Pokupatelра_GID);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Postavschik_GID", Реквизиты.Postavschikра_GID);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Dogovor

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLМТР(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,GID,Наименование,PolnoeNaimenovanie");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MTR", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.GID);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PolnoeNaimenovanie", Реквизиты.PolnoeNaimenovanie);
	
	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // MTR

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLКонтрагенты(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,ра_GID,Наименование,ИНН");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Counterparties", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.ра_GID);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "INN", Реквизиты.ИНН);
	
	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Counterparties

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 18.10.2018 } 

#КонецОбласти

#Область Пользователи

Процедура ВыгрузитьВXMLПользователей(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ПараметрыСинхронизации.КешДанныхОПользователях.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Реквизиты.Наименование) Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьПользователейПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПользователейПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Подготовка данных
	Адресат = ПолучитьАдресатаИзКонтактнойИнформации(ЭлементДанных.КонтактнаяИнформация);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("User", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Addressee", Строка(Адресат));
	// ТСК Близнюк С.И.; 13.11.2018; task#1734{
	Если ЭлементДанных.Ссылка = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsCurrentUser", Истина);
	КонецЕсли;
	// ТСК Близнюк С.И.; 13.11.2018; task#1734}
	// ТСК Ткаченко И.Л.; 20.12.2018; ДоработкиМП{
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.ра_GID КАК ра_GID
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Контрагенты.Ссылка = Пользователи.ра_Организация
	|			И (Пользователи.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Подразделения.Ссылка = Пользователи.Подразделение
	|			И (Пользователи.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Если Выборка.Следующий() Тогда 		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Organization");
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Выборка.Ссылка);  
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Число(Выборка.ра_GID));
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie",Строка(Выборка.Наименование));
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "INN", Строка(Выборка.ИНН));
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();    		
	КонецЕсли;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Если Выборка.Следующий() Тогда 		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Department");
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Выборка.Ссылка);  
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie",Строка(Выборка.Наименование));
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();    		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ЭлементДанных.Подразделение) Тогда                                        		
	//	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Department", ЭлементДанных.Подразделение);
	//КонецЕсли;
	
	// ТСК Ткаченко И.Л.; 20.12.2018; ДоработкиМП}
	ПараметрыСинхронизации.Адресаты.Вставить(Адресат, Истина);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ПапкиПисем

Процедура ВыгрузитьВXMLПапкиПисем(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьДанныеОбъектовВидаПапкиПисем(ЭлементДанных);

	Реквизиты = ДанныеОбъекта.Найти(ЭлементДанных, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьПапкиПисемПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаПапкиПисем(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиУчетныхЗаписей.Папка,
		|	ПапкиУчетныхЗаписей.УчетнаяЗапись
		|ПОМЕСТИТЬ УчетныеЗаписиПапок
		|ИЗ
		|	РегистрСведений.ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|ГДЕ
		|	ПапкиУчетныхЗаписей.Папка = &Объекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиПисем.Ссылка,
		|	ПапкиПисем.Наименование,
		|	ПапкиПисем.ВидПапки,
		|	ПапкиПисем.Родитель,
		|	ЕСТЬNULL(УчетныеЗаписиПапок.УчетнаяЗапись, ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)) КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиПапок КАК УчетныеЗаписиПапок
		|		ПО ПапкиПисем.Ссылка = УчетныеЗаписиПапок.Папка
		|ГДЕ
		|	ПапкиПисем.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьПапкиПисемПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Получение данных
	СинхронизируемыеПапки = ПараметрыСинхронизации.ПапкиВСинхронизации;

	Если ЗначениеЗаполнено(ЭлементДанных.Родитель) И 
	  Не СинхронизируемыеПапки.Найти(ЭлементДанных.Родитель) = Неопределено Тогда
		ИДРодителя = ЭлементДанных.Родитель.УникальныйИдентификатор();

	Иначе
		ИДРодителя = УникальныйИдентификаторПустой();

	КонецЕсли;

	ВидПапки = ?(ЗначениеЗаполнено(ЭлементДанных.ВидПапки),
		ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементДанных.ВидПапки),
		ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВидыПапокПисем.Общая));

	//Выгрузка связанных объектов
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, ЭлементДанных.УчетнаяЗапись);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailFolder", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FolderType", ВидПапки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ParentFolder", ИДРодителя);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "MailAccount", ЭлементДанных.УчетнаяЗапись);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область УчетныеЗаписиЭлектроннойПочты

Процедура ВыгрузитьВXMLУчетныеЗаписиЭлектроннойПочты(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДанных = ПолучитьДанныеОбъектовВидаУчетныеЗаписиЭлектроннойПочты(ЭлементДанных, 
		ПользователиКлиентСервер.ТекущийПользователь());

	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВерсияКлиента >= "206" Тогда
			ВыгрузитьУчетныеЗаписиЭлектроннойПочтыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
		Иначе
			СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
		КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаУчетныеЗаписиЭлектроннойПочты(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписи.Ссылка,
		|	ИСТИНА КАК ДоступнаДляОтправки
		|ПОМЕСТИТЬ УчетныеЗаписиДоступныеДляОтправки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписи
		|ГДЕ
		|	УчетныеЗаписи.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУчетныхЗаписей.Ссылка,
		|	ДанныеУчетныхЗаписей.АдресЭлектроннойПочты,
		|	ЕСТЬNULL(УчетныеЗаписиДоступныеДляОтправка.ДоступнаДляОтправки, ЛОЖЬ) КАК ДоступнаДляОтправки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК ДанныеУчетныхЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиДоступныеДляОтправки КАК УчетныеЗаписиДоступныеДляОтправка
		|		ПО ДанныеУчетныхЗаписей.Ссылка = УчетныеЗаписиДоступныеДляОтправка.Ссылка
		|ГДЕ
		|	ДанныеУчетныхЗаписей.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьУчетныеЗаписиЭлектроннойПочтыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	УчетнаяЗаписьПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВстроеннаяПочта",
		"ОсновнаяУчетнаяЗапись",
		Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка(),,
		ПараметрыСинхронизации.ПользовательИБ.Имя);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailAccount", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CanBeUsedForSending", ЭлементДанных.ДоступнаДляОтправки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Address", ЭлементДанных.АдресЭлектроннойПочты);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsDefaultAccount", 
		УчетнаяЗаписьПоУмолчанию = ЭлементДанных.Ссылка);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти


#Область НастройкиСинхронизации

Процедура ВыгрузитьВXMLНастройкиСинхронизации(ЗаписьXML, ВерсияКлиента, 
	ПараметрыСинхронизации, Запись)

	ВидНастройки = Запись.ВидНастройки;

	Если ВерсияКлиента >= "213" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизацияПапокПисем Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииПапокПисем(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "213" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем Тогда

		ВыгрузитьВXMLНастройкиШаблоновПисем(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "213" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.МаксимальныйРазмерФайла Тогда

		ВыгрузитьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "213" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СрокУстареванияДанных Тогда

		ВыгрузитьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "214" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьПочту Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииПочты(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "214" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьЗадачи Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииЗадач(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "214" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьКалендарь Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииКалендаря(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВерсияКлиента >= "214" 
		И ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьКонтроль Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииКонтроля(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьПочту

Процедура ВыгрузитьВXMLНастройкуСинхронизацииПочты(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьНастройкуСинхронизацииПочтыПоВерсии214(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииПочтыПоВерсии214(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailSynchronizationSettings", "214");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"MailSynchronization", ПараметрыСинхронизации.СинхронизироватьПочту);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьЗадачи

Процедура ВыгрузитьВXMLНастройкуСинхронизацииЗадач(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьНастройкуСинхронизацииЗадачПоВерсии214(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииЗадачПоВерсии214(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("TaskSynchronizationSettings", "214");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"TaskSynchronization", ПараметрыСинхронизации.СинхронизироватьЗадачи);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьКалендарь

Процедура ВыгрузитьВXMLНастройкуСинхронизацииКалендаря(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьНастройкуСинхронизацииКалендаряПоВерсии214(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииКалендаряПоВерсии214(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("CalendarSynchronizationSettings", "214");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"CalendarSynchronization", ПараметрыСинхронизации.СинхронизироватьКалендарь);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьКонтроль

Процедура ВыгрузитьВXMLНастройкуСинхронизацииКонтроля(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьНастройкуСинхронизацииКонтроляПоВерсии214(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииКонтроляПоВерсии214(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MonitoringSynchronizationSettings", "214");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"MonitoringSynchronization", ПараметрыСинхронизации.СинхронизироватьКонтроль);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкаСинхронизацииПапок

Процедура ВыгрузитьВXMLНастройкуСинхронизацииПапокПисем(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуСинхронизацииПапокПисемПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииПапокПисемПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Подготовка данных
	НаборПапки = РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.СоздатьНаборЗаписей();
	НаборПапки.Отбор.Пользователь.Установить(ПользователиКлиентСервер.ТекущийПользователь(), Истина);
	НаборПапки.Прочитать();

	НаборПапок = Новый Массив();
	Для Каждого Запись Из НаборПапки Цикл

		НаборПапок.Добавить(Запись.Папка);

		ВыгрузитьВXMLПапкиПисем(ЗаписьXML, "206", ПараметрыСинхронизации, Запись.Папка);

	КонецЦикла;

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailFolderSynchronizationSettings", "206");

	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Folders");

	Для Каждого Запись Из НаборПапки Цикл
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", Запись.Папка);
	КонецЦикла;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Folders

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкиШаблоновПисем

Процедура ВыгрузитьВXMLНастройкиШаблоновПисем(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Описание = "Настройка шаблонов писем";
	
	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкиШаблоновПисемПоВерсии206(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Описание, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкиШаблоновПисемПоВерсии206(ЗаписьXML, ПараметрыСинхронизации)

	// Получем необходимые данные
	ПодписьДляНовыхПисем =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта", "ПодписьДляНовыхПисем",
			Справочники.ШаблоныТекстов.ПустаяСсылка());

	ПодписьПриОтветеИПересылке =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта", "ПодписьПриОтветеИПересылке",
			Справочники.ШаблоныТекстов.ПустаяСсылка());

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailFooterSettings", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "NewMailFooter", ПодписьДляНовыхПисем);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ResponseMailFooter", ПодписьПриОтветеИПересылке);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкаМаксРазмераФайла

Процедура ВыгрузитьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;
	
	Описание = "Настройка максимального размера передаваемых файлов";

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуМаксРазмерФайлаПоВерсии206(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Описание, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуМаксРазмерФайлаПоВерсии206(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MaxFileSizeToDownloadSetting", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"FileSize", ПараметрыСинхронизации.МаксимальныйРазмер);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкаСрокаУстаревания

Процедура ВыгрузитьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Описание = "Настройка срока устаревания";

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуСрокаУстареванияПоВерсии206(ЗаписьXML, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Описание, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСрокаУстареванияПоВерсии206(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("DataExpirationSettings", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"DataExpirationPeriod", ПараметрыСинхронизации.СрокУстареванияДанных);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти


#Область ШаблоныТекстов

Процедура ВыгрузитьВXMLШаблоныТекстов(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДанных = ПолучитьДанныеОбъектовВидаШаблоныТекстов(ЭлементДанных, ПользователиКлиентСервер.ТекущийПользователь());

	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ВерсияКлиента >= "206" Тогда
			ВыгрузитьШаблоныТекстовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
		Иначе
			СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
		КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаШаблоныТекстов(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныТекстов.Ссылка,
		|	ШаблоныТекстов.ВерсияДанных,
		|	ШаблоныТекстов.Наименование,
		|	ШаблоныТекстов.Шаблон
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
		|ГДЕ
		|	ШаблоныТекстов.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьШаблоныТекстовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailTextTemplate", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Text", ЭлементДанных.Шаблон);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ПредметыПроцесса

Процедура ВыгрузитьВXMLПредметыПроцесса(ЗаписьXML, ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации)

	Если Не ПараметрыСинхронизации.СинхронизироватьЗадачи Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьПредметыПроцессаПоВерсии214(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	ИначеЕсли ВерсияКлиента >= "206" Тогда
		ВыгрузитьПредметыПроцессаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПредметыПроцессаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ИД = ЭлементДанных.Ссылка.УникальныйИдентификатор();
	ПредставлениеДокумент = ОбменСМобильнымиСервер.ПолучитьСодержаниеПредмета(ЭлементДанных);

	Если ТипЗнч(ПредставлениеДокумент) = Тип("ТабличныйДокумент") Тогда

		ФорматВложениея = "html";
		ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложениея);
		ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);

	ИначеЕсли ТипЗнч(ПредставлениеДокумент) = Тип("ФорматированныйДокумент") Тогда

		ФорматВложениея = "txt";
		ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложениея);

		ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаФорматированногоДокумента.TXT);

	Иначе

		СтрокаДляЗаписи = СтрШаблон(
			НСтр("ru = 'Данные данного типа (%1) пока не отображаются на мобильном клиенте'; en = 'Mobile client presently does not support data of this type (%1)'"),
			ТипЗнч(ЭлементДанных));

		ФорматВложениея = "txt";
		ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложениея);

		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
		ЗаписьТекста.ЗаписатьСтроку(СтрокаДляЗаписи);
		ЗаписьТекста.Закрыть();

	КонецЕсли;

	ДанныеВложения = 
		Новый ХранилищеЗначения(
			Новый ДвоичныеДанные(ИмяФайла), 
			Новый СжатиеДанных(9));

	УдалитьФайлы(ИмяФайла);

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ActionTarget", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ID", ИД);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", Строка(ЭлементДанных));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TypePresentation", Строка(ТипЗнч(ЭлементДанных)));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DetailsFormat", ФорматВложениея);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Details", ДанныеВложения);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	// Записываем связанные данные
	ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, "206", ЭлементДанных.Ссылка, 
		ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПредметыПроцессаПоВерсии214(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ИД = ЭлементДанных.Ссылка.УникальныйИдентификатор();
	ПредставлениеДокумент = ОбменСМобильнымиСервер.ПолучитьСодержаниеПредмета(ЭлементДанных);

	Если ТипЗнч(ПредставлениеДокумент) = Тип("ТабличныйДокумент") Тогда

		ФорматВложениея = "html";
		ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложениея);
		ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);

	ИначеЕсли ТипЗнч(ПредставлениеДокумент) = Тип("ФорматированныйДокумент") Тогда

		ФорматВложениея = "txt";
		ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложениея);

		ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаФорматированногоДокумента.TXT);

	Иначе

		СтрокаДляЗаписи = СтрШаблон(
			НСтр("ru = 'Данные данного типа (%1) пока не отображаются на мобильном клиенте'; en = 'Mobile client currently does not support data of this type (%1)'"),
			ТипЗнч(ЭлементДанных));

		ФорматВложениея = "txt";
		ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложениея);

		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
		ЗаписьТекста.ЗаписатьСтроку(СтрокаДляЗаписи);
		ЗаписьТекста.Закрыть();

	КонецЕсли;

	ВидДокумента = "";

	Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") 
		Или ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") 
		Или ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда

		ВидДокумента = Строка(ЭлементДанных.ВидДокумента);

	КонецЕсли;

	ДанныеВложения = 
		Новый ХранилищеЗначения(
			Новый ДвоичныеДанные(ИмяФайла), 
			Новый СжатиеДанных(9));

	УдалитьФайлы(ИмяФайла);

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ActionTarget", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ID", ИД);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", Строка(ЭлементДанных));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TypePresentation", Строка(ТипЗнч(ЭлементДанных)));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DetailsFormat", ФорматВложениея);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Details", ДанныеВложения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Kind", ВидДокумента);
	

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	// Записываем связанные данные
	ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, "206", ЭлементДанных.Ссылка, 
		ПараметрыСинхронизации);

КонецПроцедуры

#КонецОбласти

#Область ЗаписиРабочегоКалендаря

Процедура ВыгрузитьВXMLЗаписиРабочегоКалендаря(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьКалендарь Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДанных = ПолучитьДанныеОбъектовВидаЗаписиРабочегоКалендаря(ЭлементДанных, 
		ПользователиКлиентСервер.ТекущийПользователь());

	Реквизиты = ТаблицаДанных.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Объект может устареть и не подлежит выгрузке на клиент.
	ГраницаУстареванияДанных = ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400;

	// Если настроено повторение, то объект должен передаваться до тех пор пока оно действует
	// и не меньше срока устаревания данных.
	Если Реквизиты.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		Если ЗначениеЗаполнено(Реквизиты.ДатаОкончанияПовторения) Тогда
			НадоВыгружать = Реквизиты.ДатаОкончанияПовторения >= ГраницаУстареванияДанных;
		Иначе
			НадоВыгружать = Истина;
		КонецЕсли;
		
		Если Не НадоВыгружать Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Если Реквизиты.ДатаОкончания < ГраницаУстареванияДанных Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьЗаписиРабочегоКалендаряПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаЗаписиРабочегоКалендаря(ЭлементДанных, Знач Пользователь = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЦвета.Событие КАК Событие,
		|	НастройкиЦвета.ЗначениеНастройки КАК Цвет
		|ПОМЕСТИТЬ НастройкаЦвета
		|ИЗ
		|	РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкиЦвета
		|ГДЕ
		|	НастройкиЦвета.Пользователь = &Пользователь
		|	И НастройкиЦвета.Событие = &Объекты
		|	И НастройкиЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОтработано.Событие КАК Событие,
		|	НастройкиОтработано.ЗначениеНастройки КАК Отработано
		|ПОМЕСТИТЬ НастройкаОтработано
		|ИЗ
		|	РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкиОтработано
		|ГДЕ
		|	НастройкиОтработано.Пользователь = &Пользователь
		|	И НастройкиОтработано.Событие = &Объекты
		|	И НастройкиОтработано.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.ВерсияДанных,
		|	ЗаписиРабочегоКалендаря.Описание,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.ПравилоОкончанияПовторения,
		|	ЕСТЬNULL(НастройкаЦвета.Цвет, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)) КАК Цвет,
		|	ЕСТЬNULL(НастройкаОтработано.Отработано, ЛОЖЬ) КАК Отработано,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.СвязанныйПредмет
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкаЦвета КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкаОтработано КАК НастройкаОтработано
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаОтработано.Событие
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьЗаписиРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, ЭлементДанных.Предмет, Истина);

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("CalendarEvent", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", ЭлементДанных.Описание);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DayLong", ЭлементДанных.ВесьДень);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StartDate", ЭлементДанных.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndDate", ЭлементДанных.ДатаОкончания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Color", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеЦвета(ЭлементДанных.Цвет));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Status", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(ЭлементДанных.Состояние));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаЗаписиКалендаря(ЭлементДанных.ТипЗаписиКалендаря));

	// Значение реквизита передаем только для делегированных карточек.
	Если Не ЭлементДанных.Пользователь = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "User", ЭлементДанных.Пользователь);
	КонецЕсли;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsDone", ЭлементДанных.Отработано);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Linked", ЭлементДанных.Связанная);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Target", ЭлементДанных.Предмет);

	Если ЭлементДанных.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecurrenceStartDate", ЭлементДанных.ДатаНачалаПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecurrenceEndDate", ЭлементДанных.ДатаОкончанияПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Interval", ЭлементДанных.ИнтервалПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ByMonthDay", ЭлементДанных.ПовторениеПоДнямМесяца);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ByMonth", ЭлементДанных.ПовторениеПоМесяцам);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Count", ЭлементДанных.КоличествоПовторов);

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Frequency", 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеЧастотыПовторений(ЭлементДанных.ЧастотаПовторения));

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndRule", 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеПравилаОкончанияПовторения(ЭлементДанных.ПравилоОкончанияПовторения));

		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceDays");

		Для Каждого ДеньПовторения Из ЭлементДанных.ПовторениеПоДням Цикл

			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceDay");

			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Day", ДеньПовторения.ДеньНедели);
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Occurrence", ДеньПовторения.НомерВхождения);

			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceExceptions");

		Для Каждого ИсключениеПовторения Из ЭлементДанных.ИсключенияПовторения Цикл

			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceException");

			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ИсключениеПовторения.ЗаписьИсключения);
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Date", ИсключениеПовторения.ДатаИсключения);

			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // CalendarEvent

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область Адресаты

Процедура ВыгрузитьВXMLАдресата(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьАдресатаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, ЭлементДанных.Ссылка);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьАдресатаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Addressee", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Address", ЭлементДанных.Адрес);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ЗадачаИсполнителя

Процедура ВыгрузитьВXMLЗадачуИсполнителя(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	// Предварительные проверки

	Если Не ПараметрыСинхронизации.СинхронизироватьЗадачи Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(ЭлементДанных);
	Если РезультатЗапроса.Пустой() Тогда

		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных);

		Возврат;

	КонецЕсли;

	ТаблицаДанных = РезультатЗапроса.Выгрузить();

	Реквизиты = ТаблицаДанных.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Реквизиты.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		Или ТипЗнч(Реквизиты.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;

	Если Реквизиты.ПометкаУдаления 
	 Или Реквизиты.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.БизнесПроцесс);
	Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	Процесс.Состояние
		|ИЗ
		|	БизнесПроцесс.%1 КАК Процесс
		|ГДЕ
		|	Процесс.Ссылка = &Ссылка", Реквизиты.БизнесПроцесс.Метаданные().Имя);
		
	ДанныеБизнесПроцесса = Запрос.Выполнить().Выгрузить();

	Если ДанныеБизнесПроцесса[0].Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.РольПредмета,
		|	ЗадачаИсполнителяПредметы.Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Ссылка = &Ссылка";

	Предметы = Запрос.Выполнить().Выгрузить();

	Для Каждого ПредметЗадачи Из Предметы Цикл

		Если ПредметЗадачи.РольПредмета = Перечисления.РолиПредметов.Заполняемый
		И Не ЗначениеЗаполнено(ПредметЗадачи.Предмет) Тогда

			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных);

			Возврат;

		КонецЕсли;

	КонецЦикла;

	// Выгрузка объектов

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьЗадачуИсполнителяПоВерсии214(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Реквизиты, Предметы);
	ИначеЕсли ВерсияКлиента >= "206" Тогда
		ВыгрузитьЗадачуИсполнителяПоВерсии206(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Реквизиты, Предметы);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьЗадачуИсполнителяПоВерсии206(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных, Предметы)

	ПредставлениеФормы = Новый ХранилищеЗначения(
		ОбменСМобильнымиСервер.ПолучитьHTMLПредставлениеФормыЗадачи(ЭлементДанных.Ссылка), 
		Новый СжатиеДанных(9));

	// Записываем связанные объекты
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных.Автор);
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных.Исполнитель);

	// Записываем объект
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Task", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ShortPresentation", 
		ОбменСМобильнымиПочтаСервер.ПолучитьКраткийТекст(ЭлементДанных.Описание, 500));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Author", ЭлементДанных.Автор);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DeadLine", ЭлементДанных.СрокИсполнения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВажностиЗадачи(ЭлементДанных.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", ЭлементДанных.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FormPresentation", ПредставлениеФормы);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionMark", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВариантаВыполненияЗадачи(
			ЭлементДанных.Выполнена, 
			РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.РезультатВыполненияПоОбъекту(
				ЭлементДанных.Ссылка)));
			
	Если ТипЗнч(ЭлементДанных.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
		И ЭлементДанных.Автор = ПользователиКлиентСервер.ТекущийПользователь() Тогда

		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ExecutionProcess", 
			ЭлементДанных.БизнесПроцесс);

	КонецЕсли;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionResult", ЭлементДанных.РезультатВыполнения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionDate", 
		?(ЭлементДанных.Выполнена, ЭлементДанных.ДатаИсполнения, Дата(1,1,1)));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessState", 
		?(ЭлементДанных.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен,
			"Stopped", "Active"));

	РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.РольИсполнителя, "Владелец");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "PerformerRole", РольИсполнителя);

	// Значение реквизита передаем только для делегированных карточек.
	Если Не ЭлементДанных.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "User", ЭлементДанных.Исполнитель);
	КонецЕсли;

	// Выгружаем варианыт выполнения задачи.
	ЗаполнитьВариантыВыполненияЗадачи(ЗаписьXMLОбъекта, ЭлементДанных);

	// Выгружаем подчиненные задаче предметы
	ПредметыКВыгрузке = 
		ДобавитьПредметыКЗадаче(ЗаписьXMLОбъекта, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных, Предметы);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Task.

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	// Записываем связанные объекты

	// Записываем сведения о принятии задачи на исполнение.
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("TaskAcception", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AcceptDate", ЭлементДанных.ДатаПринятияКИсполнению);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Accepted", ЭлементДанных.ПринятаКИсполнению);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Executor", ЭлементДанных.Исполнитель);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Task.

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	Для каждого Предмет Из ПредметыКВыгрузке Цикл
		ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Предмет, Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьЗадачуИсполнителяПоВерсии214(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных, Предметы)

	ПредставлениеФормы = Новый ХранилищеЗначения(
		ОбменСМобильнымиСервер.ПолучитьHTMLПредставлениеФормыЗадачи(ЭлементДанных.Ссылка), 
		Новый СжатиеДанных(9));

	ВерсияФормата = "214";

	// Записываем связанные объекты
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияФормата, ПараметрыСинхронизации, ЭлементДанных.Автор);
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияФормата, ПараметрыСинхронизации, ЭлементДанных.Исполнитель);

	// Записываем объект
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Task", ВерсияФормата);

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ShortPresentation", 
		ОбменСМобильнымиПочтаСервер.ПолучитьКраткийТекст(ЭлементДанных.Описание, 500));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Author", ЭлементДанных.Автор);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DeadLine", ЭлементДанных.СрокИсполнения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВажностиЗадачи(ЭлементДанных.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", ЭлементДанных.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FormPresentation", ПредставлениеФормы);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionMark", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВариантаВыполненияЗадачи(
			ЭлементДанных.Выполнена, 
			РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.РезультатВыполненияПоОбъекту(
				ЭлементДанных.Ссылка)));

	Если ТипЗнч(ЭлементДанных.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
		И ЭлементДанных.Автор = ПользователиКлиентСервер.ТекущийПользователь() Тогда

		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ExecutionProcess", 
			ЭлементДанных.БизнесПроцесс);
	КонецЕсли;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionResult", ЭлементДанных.РезультатВыполнения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionDate", 
		?(ЭлементДанных.Выполнена, ЭлементДанных.ДатаИсполнения, Дата(1,1,1)));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessState", 
		?(ЭлементДанных.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен,
			"Stopped", "Active"));

	РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.РольИсполнителя, "Владелец");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "PerformerRole", РольИсполнителя);

	// Значение реквизита передаем только для делегированных карточек.
	Если Не ЭлементДанных.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "User", ЭлементДанных.Исполнитель);
	КонецЕсли;

	// Выгружаем варианыт выполнения задачи.
	ГруппаКоманд = ЗаполнитьВариантыВыполненияЗадачи(ЗаписьXMLОбъекта, ЭлементДанных);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskKind", ЭлементДанных.БизнесПроцесс.Метаданные().Имя);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommandGroup", ГруппаКоманд);

	Если ТипЗнч(ЭлементДанных.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") 
		Или ТипЗнч(ЭлементДанных.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
			"SignWithDS", ЭлементДанных.БизнесПроцесс.ПодписыватьЭП);

	КонецЕсли; 

	// Выгружаем подчиненные задаче предметы
	ПредметыКВыгрузке = 
		ДобавитьПредметыКЗадаче(ЗаписьXMLОбъекта, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных, Предметы);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Task.

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	// Записываем связанные объекты

	// Записываем сведения о принятии задачи на исполнение.
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("TaskAcception", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AcceptDate", ЭлементДанных.ДатаПринятияКИсполнению);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Accepted", ЭлементДанных.ПринятаКИсполнению);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Executor", ЭлементДанных.Исполнитель);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Task.

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	Для каждого Предмет Из ПредметыКВыгрузке Цикл
		ПолучитьXMLИзОбъекта(ЗаписьXML, "214", ПараметрыСинхронизации, Предмет, Истина);
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьВариантыВыполненияЗадачи(ЗаписьXML, Объект)

	ЗаписьXML.ЗаписатьНачалоЭлемента("ExecutionVariants");

	Если Объект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда

		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 {
		Если Объект.ПодписыватьЭП Тогда
			ГруппаКоманд = "ГруппаУтверждение";
			
			ПредставлениеДляБольшогоЭкрана_Положительно = НСтр("ru = 'Утверждено'; en = 'Confirmed'");
			ПредставлениеДляМаленькогоЭкрана_Положительно = НСтр("ru = 'Утверждено'; en = 'Confirmed'");
			
			ПредставлениеДляБольшогоЭкрана_Отрицательно = НСтр("ru = 'Не утверждено'; en = 'Not confirmed'");
			ПредставлениеДляМаленькогоЭкрана_Отрицательно = НСтр("ru = 'Не утверждено'; en = 'Not confirmed'");	
			
		ИначеЕсли Объект.ЭтапПринятияУоН Тогда
			ГруппаКоманд = "ГруппаСогласование";
			
			ПредставлениеДляБольшогоЭкрана_Положительно = НСтр("ru = 'Принять'; en = 'Accept'");
			ПредставлениеДляМаленькогоЭкрана_Положительно = НСтр("ru = 'Принять'; en = 'Accept'");
			
			ПредставлениеДляБольшогоЭкрана_Отрицательно = НСтр("ru = 'Запросить доп. инф.'; en = 'Request information'");
			ПредставлениеДляМаленькогоЭкрана_Отрицательно = НСтр("ru = 'Запросить доп. инф.'; en = 'Request information'"); 
			
		Иначе
			ГруппаКоманд = "ГруппаСогласование";	
			
			ПредставлениеДляБольшогоЭкрана_Положительно = НСтр("ru = 'Согласен'; en = 'Approved'");
			ПредставлениеДляМаленькогоЭкрана_Положительно = НСтр("ru = 'Согл.'; en = 'Appr.'");
			
			ПредставлениеДляБольшогоЭкрана_Отрицательно = НСтр("ru = 'Не согласен'; en = 'Not approved'");
			ПредставлениеДляМаленькогоЭкрана_Отрицательно = НСтр("ru = 'Не согл.'; en = 'Not appr.'");
			
		КонецЕсли;	
		
		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1, 
			ПредставлениеДляБольшогоЭкрана_Положительно, ПредставлениеДляМаленькогоЭкрана_Положительно, "ExecutedPositive");
			
		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2, 
			ПредставлениеДляБольшогоЭкрана_Отрицательно, ПредставлениеДляМаленькогоЭкрана_Отрицательно, "ExecutedNegative");	
			
		// было	
		//ДобавитьВариантИсполнения(
		//	ЗаписьXML, Объект, 1, 
		//	НСтр("ru = 'Согласен'; en = 'Approved'"), НСтр("ru = 'Согл.'; en = 'Appr.'"), "ExecutedPositive");

		//ДобавитьВариантИсполнения(
		//	ЗаписьXML, Объект, 2,
		//	НСтр("ru = 'Согласен с замечаниями'; en = 'Approved with reservations'"), НСтр("ru = 'Согл. с замеч.'; en = 'Appr. with res.'"), "ExecutedAlmostPositive");
		//	
		//ДобавитьВариантИсполнения(
		//	ЗаписьXML, Объект, 3, 
		//	НСтр("ru = 'Не согласен'; en = 'Not approved'"), НСтр("ru = 'Не согл.'; en = 'Not appr.'"), "ExecutedNegative");
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 }	
			
	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда

		Если Объект.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда

			ГруппаКоманд = "ГруппаОзнакомление";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1,
				НСтр("ru = 'Ознакомился'; en = 'Examined'"), НСтр("ru = 'Ознакомился'; en = 'Examined'"), "ExecutedPositive");

		Иначе

			ГруппаКоманд = "ГруппаЗавершитьСогласование";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1,
				НСтр("ru = 'Аннулировать'; en = 'Canceled'"), НСтр("ru = 'Аннулировать'; en = 'Canceled'"), "ExecutedPositive");

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 2,
				НСтр("ru = 'Повторить';   en = 'Repeat the approval'"), НСтр("ru = 'Повторить';   en = 'Repeat the approval'"), "ExecutedNegative");

		КонецЕсли;
		
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 {
		//Если Объект.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
		//	Или Объект.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда

		//	ГруппаКоманд = "ГруппаОзнакомление";

		//	ДобавитьВариантИсполнения(
		//		ЗаписьXML, Объект, 1,
		//		НСтр("ru = 'Ознакомился'; en = 'Examined'"), НСтр("ru = 'Ознакомился'; en = 'Examined'"), "ExecutedPositive");

		//Иначе

		//	ГруппаКоманд = "ГруппаЗавершитьСогласование";

		//	ДобавитьВариантИсполнения(
		//		ЗаписьXML, Объект, 1,
		//		НСтр("ru = 'Завершить согласование'; en = 'Finish approval'"), НСтр("ru = 'Завершить'; en = 'Finish'"), "ExecutedPositive");

		//	ДобавитьВариантИсполнения(
		//		ЗаписьXML, Объект, 2,
		//		НСтр("ru = 'Повторить согласование'; en = 'Repeat approval'"), НСтр("ru = 'Повторить'; en = 'Repeat'"), "ExecutedNegative");

		//КонецЕсли;
		// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 }
		
	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда

		ГруппаКоманд = "ГруппаУтверждение";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1,
			НСтр("ru = 'Утвердить'; en = 'Confirmed'"), НСтр("ru = 'Утвердить'; en = 'Confirmed'"), "ExecutedPositive");

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2,
			НСтр("ru = 'Отклонить'; en = 'Not confirmed'"), НСтр("ru = 'Отклонить'; en = 'Not confirmed'"), "ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		 
		Если Объект.БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда

			ГруппаКоманд = "ГруппаОзнакомление";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1, 
				НСтр("ru = 'Ознакомился'; en = 'Examined'"), НСтр("ru = 'Ознакомился'; en = 'Examined'"), "ExecutedPositive");

		Иначе

			ГруппаКоманд = "ГруппаЗавершитьУтверждение";

			// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 {
			// кнопки названы в соответствии с web-интерфейсом
			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1,
				НСтр("ru = 'Аннулировать'; en = 'Canceled'"), НСтр("ru = 'Аннулировать'; en = 'Canceled'"), "ExecutedPositive");

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 2, 
				НСтр("ru = 'Повторить'; en = 'Repeat confirmation'"), НСтр("ru = 'Повторить'; en = 'Repeat'"), "ExecutedNegative");
			// Корнюшенков А.Ю. Искать в тексте "ДоработкиМП" 13.09.2018 }
			
		КонецЕсли;

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда

		ГруппаКоманд = "ГруппаРассмотрение";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1,
			НСтр("ru = 'Наложить резолюцию'; en = 'Impose resolution'"), НСтр("ru = 'Рассмотрено'; en = 'Reviewed'"), "ExecutedAlmostPositive");

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2,
			НСтр("ru = 'Направить на исполнение'; en = 'Forward for performance'"), НСтр("ru = 'На исполнение'; en = 'For performance'"), "ExecutedAlmostPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться 
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда

		ГруппаКоманд = "ГруппаОзнакомление";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1,
			НСтр("ru = 'Ознакомился'; en = 'Examined'"), НСтр("ru = 'Ознакомился'; en = 'Examined'"), "ExecutedPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда

		ГруппаКоманд = "ГруппаИсполнение";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1,
			НСтр("ru = 'Выполнено'; en = 'Completed'"), НСтр("ru = 'Выполнено'; en = 'Completed'"), "ExecutedPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда

		ГруппаКоманд = "ГруппаЗавершитьИсполнение";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1,
			НСтр("ru = 'Принять'; en = 'Confirm'"), НСтр("ru = 'Принять'; en = 'Confirm'"), "ExecutedPositive");

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2, 
			НСтр("ru = 'Вернуть на доработку'; en = 'Return for revision'"), НСтр("ru = 'На доработку'; en = 'For revision'"), "ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать
		Или  Объект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда

		ГруппаКоманд = "ГруппаСнятьСКонтроля";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1, 
			НСтр("ru = 'Снять с контроля'; en = 'Stop monitoring'"), НСтр("ru = 'Снять с контроля'; en = 'Stop monitoring'"), "ExecutedPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда

		ГруппаКоманд = "ГруппаЗавершитьПоручение";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1, 
			НСтр("ru = 'Завершить поручение'; en = 'Finish order'"), НСтр("ru = 'Завершить'; en = 'Finish'"), "ExecutedPositive");

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2, 
			НСтр("ru = 'Вернуть на доработку'; en = 'Return for revision'"), НСтр("ru = 'На доработку'; en = 'For revision'"), "ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда

		ГруппаКоманд = "ГруппаРегистрация";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1, 
			НСтр("ru = 'Зарегистрировано'; en = 'Registered'"), НСтр("ru = 'Зарег.'; en = 'Regd.'"), "ExecutedPositive");

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2, 
			НСтр("ru = 'Не зарегистрировано'; en = 'Not registered'"), НСтр("ru = 'Не зарег.'; en = 'Not regd.'"), "ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда

		Если Объект.БизнесПроцесс.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда

			ГруппаКоманд = "ГруппаОзнакомление";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1, 
				НСтр("ru = 'Ознакомился'; en = 'Examined'"), НСтр("ru = 'Ознакомился'; en = 'Examined'"), "ExecutedPositive");

		Иначе

			ГруппаКоманд = "ГруппаПовторитьРегистрацию";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1, 
				НСтр("ru = 'Ознакомился'; en = 'Examined'"), НСтр("ru = 'Ознакомился'; en = 'Examined'"), "ExecutedPositive");

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 2, 
				НСтр("ru = 'Повторить регистрацию'; en = 'Repeat registration'"), НСтр("ru = 'Повторить'; en = 'Repeat'"), "ExecutedNegative");

		КонецЕсли;

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда

		ГруппаКоманд = "ГруппаПринятьПриглашение";

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 1, 
			НСтр("ru = 'Принять приглашение'; en = 'Accept invitation'"), НСтр("ru = 'Принять'; en = 'Accept'"), "ExecutedPositive");

		ДобавитьВариантИсполнения(
			ЗаписьXML, Объект, 2, 
			НСтр("ru = 'Отклонить приглашение'; en = 'Reject invitation'"), НСтр("ru = 'Отклонить'; en = 'Reject'"), "ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда

		Если Объект.БизнесПроцесс.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками
			Или Объект.БизнесПроцесс.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда

			ГруппаКоманд = "ГруппаПодтвердитьПриглашение";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 1, 
				НСтр("ru = 'Подтвердить приглашения'; en = 'Confirm invitations'"), НСтр("ru = 'Подтвердить'; en = 'Confirm'"), "ExecutedPositive");

		Иначе

			ГруппаКоманд = "ГруппаПовторитьПриглашение";

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 2, 
				НСтр("ru = 'Повторить приглашения'; en = 'Repeat invitations'"), НСтр("ru = 'Повторить'; en = 'Repeat'"), "ExecutedNeutral");

			ДобавитьВариантИсполнения(
				ЗаписьXML, Объект, 3, 
				НСтр("ru = 'Отменить приглашения'; en = 'Cancel invitations'"), НСтр("ru = 'Отменить'; en = 'Cancel'"), "ExecutedNegative");

		КонецЕсли;

	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ГруппаКоманд;

КонецФункции

Процедура ДобавитьВариантИсполнения(ЗаписьXML, Объект, Результат, 
		ПредставлениеДляБольшогоЭкрана, ПредставлениеДляМаленькогоЭкрана, Оценка)

	ЗаписьXML.ЗаписатьНачалоЭлемента("ExecutionVariant");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ExecutionResult", Результат);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "PresentationBigScreen", ПредставлениеДляБольшогоЭкрана);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "PresentationSmallScreen", ПредставлениеДляМаленькогоЭкрана);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ResultMark", Оценка);

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Функция ДобавитьПредметыКЗадаче(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, СсылкаЗадача, Предметы)

	Объекты = Новый Массив();
	
	Если Предметы.Количество() = 0 Тогда
		Возврат Объекты;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("Targets");

	Для Каждого ПредметЗадачи Из Предметы Цикл

		Если ПредметЗадачи.Предмет = Неопределено
			Или Не ЗначениеЗаполнено(ПредметЗадачи.Предмет) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ПредметЗадачи.Предмет) = Тип("СправочникСсылка.Файлы")
		 Или ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.ВходящееПисьмо")
		 Или ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Target", ПредметЗадачи.Предмет);

		Иначе

			ЗаписьXML.ЗаписатьНачалоЭлемента("Target");

			ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", "ActionTarget");
			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ПредметЗадачи.Предмет);

			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЕсли;

		Объекты.Добавить(ПредметЗадачи.Предмет);

		Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[ПредметЗадачи.Предмет] = Истина Тогда
			ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(ПредметЗадачи.Предмет, Истина);
		КонецЕсли;

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат Объекты;

КонецФункции

#КонецОбласти

#Область НастройкаОтображенияЗаписейРабочегоКалендаря

Процедура ВыгрузитьВXMLНастройкиОтображенияЗаписейРабочегоКалендаря(ЗаписьXML, ВерсияКлиента, 
	ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьКалендарь Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда

		Настройка = ЭлементДанных.Настройка;

		Если Настройка = Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет Тогда
			ВыгрузитьНастройкиОтображенияЗаписейРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);

		ИначеЕсли Настройка = Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана Тогда
			ВыгрузитьВXMLЗаписиРабочегоКалендаря(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Событие);

		КонецЕсли;

	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкиОтображенияЗаписейРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectColor", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Color", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеЦвета(ЭлементДанных.ЗначениеНастройки));

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", ЭлементДанных.Событие);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти


#Область ПисьмаВПапках

Процедура ВыгрузитьВXMLПисьмаВПапках(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;

	Если ПапкиВСинхронизации.Найти(ЭлементДанных.Папка) = Неопределено Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Письмо);

	ИначеЕсли ВерсияКлиента >= "206" Тогда
		ВыгрузитьПисьмаВПапкахПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПисьмаВПапкахПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	Если Не ЗначениеЗаполнено(ЭлементДанных.Письмо) 
		Или Не ЗначениеЗаполнено(ЭлементДанных.Папка) Тогда
		Возврат;
	КонецЕсли;

	// Может возникнуть ситуация когда письмо перемещается из не синхронизируемой папки
	// в синхронизируемую. У нас этот случай никак не отслеживается, по этому необходимо 
	// выгрузить связанное письмо.
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, ЭлементДанных.Письмо);
	
	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectInFolder", "206");

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", ЭлементДанных.Письмо);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", ЭлементДанных.Папка);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СведенияОПрочтении

Процедура ВыгрузитьВXMLСведенияОПрочтении(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

		Если ВерсияКлиента >= "206" Тогда
			ВыгрузитьСведенияОПрочтенииПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
		Иначе
			СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
		КонецЕсли;

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьСведенияОПрочтенииПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	Объект = ЭлементДанных.Объект;

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ТипОбъекта = "IncomingMail";

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ТипОбъекта = "OutgoingMail";

	Иначе
		Возврат;

	КонецЕсли;

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectReadState", "206");

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasRead", ЭлементДанных.Прочтен);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ФлагиОбъектов

Процедура ВыгрузитьВXMLФлагиОбъектов(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

		НеобходимоВыгрузитьЗапись = 
			ПараметрыСинхронизации.СинхронизироватьЗадачи 
				И ТипЗнч(ЭлементДанных.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			Или ПараметрыСинхронизации.СинхронизироватьПочту 
				И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ЭлементДанных.Объект);

		Если НеобходимоВыгрузитьЗапись Тогда
			Если ВерсияКлиента >= "206" Тогда
				ВыгрузитьФлагиОбъектовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
			Иначе
				СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
			КонецЕсли;

			ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьФлагиОбъектовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	Объект = ЭлементДанных.Объект;
	Флаг = ЭлементДанных.Флаг;
	
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(Объект);

	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, "БизнесПроцесс, Автор, Исполнитель");

		Если ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
			И РеквизитыЗадачи.Автор = РеквизитыЗадачи.Исполнитель Тогда

			МассивСсылок.Добавить(РеквизитыЗадачи.БизнесПроцесс);

		КонецЕсли;

	КонецЕсли;

	Для каждого Объект Из МассивСсылок Цикл

		// Записываем данные
		ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectFlag", "206");

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", Объект);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Flag", 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторФлагаОбъекта(Флаг));

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		// Записываем файл данные объекта
		ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	КонецЦикла;

КонецПроцедуры

#КонецОбласти


#Область Процессы

Процедура ВыгрузитьВXMLПроцессИсполнение(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьПроцессИсполнениеПоВерсии214(ЗаписьXML, ПараметрыСинхронизации, ЭлементДанных);
	ИначеЕсли ВерсияКлиента >= "206" Тогда
		ВыгрузитьПроцессИсполнениеПоВерсии206(ЗаписьXML, ПараметрыСинхронизации, ЭлементДанных);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПроцессИсполнениеПоВерсии206(ЗаписьXML, ПараметрыСинхронизации, ЭлементДанных)

	// Подготовка данные.
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭлементДанных, 
		"Ссылка, ВерсияДанных, Описание, Наименование, СрокИсполненияПроцесса, ГлавнаяЗадача, Состояние, ДатаНачала,
			|ДатаЗавершения, Важность, Дата, Исполнители");

	МенеджерЗаписиРегистра = РегистрыСведений.ИсторияВыполненияЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.БизнесПроцесс = ЭлементДанных.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();

	ИсторияВыполнения = ?(МенеджерЗаписиРегистра.Выбран(), МенеджерЗаписиРегистра.Описание, "");

	// Выгружаем связанные объекты
	Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, СтрокаИсполнителя.Исполнитель);
	КонецЦикла;

	// Запись связанных объектов
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, РеквизитыОбъекта.ГлавнаяЗадача);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ExecutionProcess", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", РеквизитыОбъекта.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", РеквизитыОбъекта.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Name", РеквизитыОбъекта.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", РеквизитыОбъекта.Описание);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DeadLine", РеквизитыОбъекта.СрокИсполненияПроцесса);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВажностиЗадачи(РеквизитыОбъекта.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", РеквизитыОбъекта.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StartDate", РеквизитыОбъекта.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndDate", РеквизитыОбъекта.ДатаЗавершения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionHistory", ИсторияВыполнения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "State", 
		?(РеквизитыОбъекта.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен, 
			"Stopped", "Active"));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MainTask", 
		?(ЗначениеЗаполнено(РеквизитыОбъекта.ГлавнаяЗадача), 
			РеквизитыОбъекта.ГлавнаяЗадача.УникальныйИдентификатор(), 
			УникальныйИдентификаторПустой()));

	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Performers");

	Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл

		Если ТипЗнч(СтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаИсполнителя.Исполнитель, "Владелец");
		Иначе
	    	Исполнитель = СтрокаИсполнителя.Исполнитель;
		КонецЕсли;
		
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Performer", Исполнитель);

		ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(Исполнитель, Истина);

	КонецЦикла;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Performers

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег ExecutionProcess

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

Процедура ВыгрузитьПроцессИсполнениеПоВерсии214(ЗаписьXML, ПараметрыСинхронизации, ЭлементДанных)

	// Подготовка данные.
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭлементДанных, 
		"Ссылка, ВерсияДанных, Описание, Наименование, СрокИсполненияПроцесса, ГлавнаяЗадача, Состояние, ДатаНачала,
			|ДатаЗавершения, Важность, Дата, Исполнители");

	МенеджерЗаписиРегистра = РегистрыСведений.ИсторияВыполненияЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.БизнесПроцесс = ЭлементДанных.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();

	ИсторияВыполнения = ?(МенеджерЗаписиРегистра.Выбран(), МенеджерЗаписиРегистра.Описание, "");

	// Выгружаем связанные объекты
	Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		ПолучитьXMLИзОбъекта(ЗаписьXML, "214", ПараметрыСинхронизации, СтрокаИсполнителя.Исполнитель);
	КонецЦикла;

	// Запись связанных объектов
	ПолучитьXMLИзОбъекта(ЗаписьXML, "214", ПараметрыСинхронизации, РеквизитыОбъекта.ГлавнаяЗадача);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ExecutionProcess", "214");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", РеквизитыОбъекта.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", РеквизитыОбъекта.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Name", РеквизитыОбъекта.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", РеквизитыОбъекта.Описание);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DeadLine", РеквизитыОбъекта.СрокИсполненияПроцесса);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВажностиЗадачи(РеквизитыОбъекта.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", РеквизитыОбъекта.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StartDate", РеквизитыОбъекта.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndDate", РеквизитыОбъекта.ДатаЗавершения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionHistory", ИсторияВыполнения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "State", 
		?(РеквизитыОбъекта.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен, 
			"Stopped", "Active"));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MainTask", 
		?(ЗначениеЗаполнено(РеквизитыОбъекта.ГлавнаяЗадача), 
			РеквизитыОбъекта.ГлавнаяЗадача.УникальныйИдентификатор(), 
			УникальныйИдентификаторПустой()));

	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Performers");

	Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл

		Если Не ЗначениеЗаполнено(СтрокаИсполнителя.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;

		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ExecutionPerformer");

		Если ТипЗнч(СтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаИсполнителя.Исполнитель, "Владелец");
		Иначе
	    	Исполнитель = СтрокаИсполнителя.Исполнитель;
		КонецЕсли;		
		
		ЗаписатьСсылкуНаЭлементДанных(
			ЗаписьXMLОбъекта, "Performer", Исполнитель);

		ЗаписатьЭлементОбъектаДанных(
			ЗаписьXMLОбъекта, "ID", СтрокаИсполнителя.ИдентификаторИсполнителя);

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(Исполнитель, Истина);

	КонецЦикла;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Performers

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег ExecutionProcess

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область Контроль

Процедура ВыгрузитьВXMLКонтрольнуюКарточку(ЗаписьXML, ВерсияСервиса, 
	ПараметрыСинхронизации, ЭлементДанных, КакПредмет = Ложь)

	Если Не ПараметрыСинхронизации.СинхронизироватьКонтроль Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЭлементДанных.ДатаСнятияСКонтроля) Или ЭлементДанных.СнятСконтроля Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации,ЭлементДанных.Ссылка);
	КонецЕсли;

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьКонтрольнуюКарточкуПоВерсии206(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияСервиса, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьКонтрольнуюКарточкуПоВерсии206(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет = Ложь)

	// Получение данных
	РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, 
		"Автор, ДатаПостановкиНаКонтроль, ДатаСнятияСКонтроля, Контролер, Описание, 
		|ПоставленНаКонтроль, СрокИсполнения, Исполнители, Источник, Предмет, ВерсияДанных,
		|Наименование, СнятСКонтроля, Ссылка");

	// Запись связанных объектов
	Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
	Пока Исполнители.Следующий() Цикл

		Если ТипЗнч(Исполнители.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнители.Исполнитель, "Владелец");
		Иначе
	    	Исполнитель = Исполнители.Исполнитель;
		КонецЕсли;
		
		ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса,
			ПараметрыСинхронизации, Исполнитель,
			КакПредмет);

	КонецЦикла;

	Если ЗначениеЗаполнено(РеквизитыКонтроля.Предмет) Тогда

		ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса,
			ПараметрыСинхронизации, РеквизитыКонтроля.Предмет,
			КакПредмет);

		ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияСервиса, РеквизитыКонтроля.Предмет, 
			ПараметрыСинхронизации);

	КонецЕсли;

	Если ЗначениеЗаполнено(РеквизитыКонтроля.Источник) Тогда

		ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса,
			ПараметрыСинхронизации, РеквизитыКонтроля.Источник,
			КакПредмет);

		ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияСервиса, РеквизитыКонтроля.Источник, 
			ПараметрыСинхронизации);

	КонецЕсли;

	Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
	Пока Исполнители.Следующий() Цикл

		Если ЗначениеЗаполнено(Исполнители.Источник) Тогда

			ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса,
				ПараметрыСинхронизации, Исполнители.Источник,
				КакПредмет);

			ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияСервиса, Исполнители.Источник, 
				ПараметрыСинхронизации);

		КонецЕсли;

	КонецЦикла;

	// Запись связанных объектов
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, РеквизитыКонтроля.Автор);
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, РеквизитыКонтроля.Контролер);

	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, РеквизитыКонтроля.Источник);
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, РеквизитыКонтроля.Предмет);

	Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
	Пока Исполнители.Следующий() Цикл
		Если ТипЗнч(Исполнители.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнители.Исполнитель, "Владелец");
		Иначе
	    	Исполнитель = Исполнители.Исполнитель;
		КонецЕсли;
		
		ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, Исполнитель);
		ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, Исполнители.Источник);
	КонецЦикла;
	
	ПолучитьXMLИзАдресатов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Control", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", РеквизитыКонтроля.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", РеквизитыКонтроля.ВерсияДанных);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Name", РеквизитыКонтроля.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", РеквизитыКонтроля.Описание);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Author", РеквизитыКонтроля.Автор);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ControlStartDate", РеквизитыКонтроля.ДатаПостановкиНаКонтроль);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ControlEndDate", РеквизитыКонтроля.ДатаСнятияСКонтроля);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Active", РеквизитыКонтроля.ПоставленНаКонтроль);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Deactivated", РеквизитыКонтроля.СнятСКонтроля);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DeadLine", РеквизитыКонтроля.СрокИсполнения);

	// Значение реквизита передаем только для делегированных карточек.
	Если Не РеквизитыКонтроля.Контролер = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Controller", РеквизитыКонтроля.Контролер);
	КонецЕсли;

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Source", РеквизитыКонтроля.Источник);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Target", РеквизитыКонтроля.Предмет);

	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Performers");

	Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
	Пока Исполнители.Следующий() Цикл

		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ControlPerformer");

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Main", Исполнители.Ответственный);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskIsExecuted", Исполнители.Исполнено);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskExecutionDate", Исполнители.ДатаИсполнения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ControlEndDate", Исполнители.ДатаИсполнения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskControlled", Исполнители.Проконтролировано);

		Если ТипЗнч(Исполнители.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнители.Исполнитель, "Владелец");
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Performer", Исполнитель);
		ИначеЕсли ТипЗнч(Исполнители.Исполнитель) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PerformerAddresse", Строка(Исполнители.Исполнитель));
		Иначе
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Performer", Исполнители.Исполнитель);
		КонецЕсли;
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Source", Исполнители.Источник);

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(Исполнители.Исполнитель, Истина);

	КонецЦикла;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Performers

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Control

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ВходящееПисьмо

// Менеджер выгрузки элемента данных типа ДокументСсылка.ВходящееПисьмо
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи XML файла;
//  ВерсияКлиента			 - Строка - Версия формата запрошенная клиентом;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке.
//
Процедура ВыгрузитьВXMLВходящееПисьмо(ЗаписьXML, ВерсияКлиента, 
	ПараметрыСинхронизации, МассивИзмененныхДанных, КакПредмет = Ложь)

	Если Не КакПредмет И Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;
	
	// Получим синхронизируемые папки клиента
	ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;

	// Получим данные для выгрузки
	ТаблицаДанных    = ПолучитьДанныеОбъектовВидаВходящееПисьмо(МассивИзмененныхДанных, ПользователиКлиентСервер.ТекущийПользователь());
	ГраницаУстареванияДанных = ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400;
	
	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
			Продолжить;
		КонецЕсли;

		Если Не КакПредмет Тогда

			Если ПапкиВСинхронизации.Найти(ЭлементДанных.Папка) = Неопределено Тогда

				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка);

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					НСтр("ru = 'Сформировано удаление объекта: папка письма более не синхронизируется.'; en = 'Object deletion generated: email folder is no longer synchronized.'"));

				Продолжить;

			КонецЕсли;

			// Объект может устареть и не подлежит выгрузке на клиент
			Если ЭлементДанных.Дата < ГраницаУстареванияДанных Тогда

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					СтрШаблон(
						НСтр("ru = 'Объект не передан: находится за границей устаревания данных (%1).'; en = 'Object is not transferred: outdated (%1).'"),
						ГраницаУстареванияДанных));

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		Если ВерсияКлиента >= "213" Тогда
			ВыгрузитьВходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);

			ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияКлиента, ЭлементДанных.Ссылка, 
				ПараметрыСинхронизации);

			ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(ЭлементДанных.Ссылка);

			ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка, ВеткаПереписки);
			ВыгрузитьВXMLКорневоеПисьмоВеткиПереписки(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ВеткаПереписки);

		Иначе
			СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);

		КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

// Получает таблицу данных о массиве объектом одним запросом
//
// Параметры:
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке
//  Пользователь			 - СправочникСсылка.Пользователи - Ссылка на пользователя клиента
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов о выгружаемых данных
//
Функция ПолучитьДанныеОбъектовВидаВходящееПисьмо(СсылкаНаОбъект, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.ВерсияДанных,
		|	ВходящееПисьмо.ПометкаУдаления,
		|	ВходящееПисьмо.Номер,
		|	ВходящееПисьмо.Дата,
		|	ВходящееПисьмо.Важность,
		|	ВходящееПисьмо.ДатаОтправки,
		|	ВходящееПисьмо.ДатаПолучения,
		|	ВходящееПисьмо.ОтправительАдресат,
		|	ВходящееПисьмо.ТекстПисьмаHTMLХранилище,
		|	ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище,
		|	ВходящееПисьмо.Тема,
		|	ВходящееПисьмо.ТипТекста,
		|	ВходящееПисьмо.ЕстьВложения,
		|	ВходящееПисьмо.УчетнаяЗапись,
		|	ВходящееПисьмо.ОтправительАдресат.Адрес КАК ОтправительАдрес,
		|	ВходящееПисьмо.ОтправительАдресат.Представление КАК ОтправительПредставление
		|ПОМЕСТИТЬ ВходящееПисьмо
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.Ссылка = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.ВерсияДанных,
		|	ВходящееПисьмо.ПометкаУдаления,
		|	ВходящееПисьмо.Номер,
		|	ВходящееПисьмо.Дата,
		|	ВходящееПисьмо.Важность,
		|	ВходящееПисьмо.ДатаОтправки,
		|	ВходящееПисьмо.ДатаПолучения,
		|	ВходящееПисьмо.ОтправительАдресат,
		|	ВходящееПисьмо.ТекстПисьмаHTMLХранилище,
		|	ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище,
		|	ВходящееПисьмо.Тема,
		|	ВходящееПисьмо.ТипТекста,
		|	ВходящееПисьмо.ЕстьВложения,
		|	ВходящееПисьмо.УчетнаяЗапись,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.Переслан, ЛОЖЬ) КАК Переслан,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ОтправленОтвет, ЛОЖЬ) КАК ОтправленОтвет,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ПолученОтвет, ЛОЖЬ) КАК ПолученОтвет,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтен,
		|	ПисьмаВеток.ВеткаПереписки,
		|	ПапкиПисем.Папка,
		|	ВходящееПисьмо.ОтправительАдрес,
		|	ВходящееПисьмо.ОтправительПредставление
		|ИЗ
		|	ВходящееПисьмо КАК ВходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ВходящееПисьмо.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО ВходящееПисьмо.Ссылка = СведенияОПрочтении.Объект
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВеток КАК ПисьмаВеток
		|		ПО ВходящееПисьмо.Ссылка = ПисьмаВеток.Письмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВПапках КАК ПапкиПисем
		|		ПО ВходящееПисьмо.Ссылка = ПапкиПисем.Письмо";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура выгрузки входящего письма по версии формата 206.
//
// Параметры:
//  ЗаписьXML			 - ЗаписьXML - Объект приемник данных;
//  ЭлементДанных		 - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных;
//  ПараметрыСинхронизации - Структура - Кэш параметров обмена.
//
Процедура ВыгрузитьВходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Запись связанных объектов
	ВыгрузитьВXMLПапкиПисем(ЗаписьXML, "213", ПараметрыСинхронизации, ЭлементДанных.Папка);

	ПараметрыСинхронизации.Адресаты.Вставить(ЭлементДанных.ОтправительАдресат, Истина);

	Если ПараметрыСинхронизации.КэшАдресатовВходящихПисем.Количество() = 0 Тогда
		МассивВходящихПисем = Новый Массив();
		МассивВходящихПисем.Добавить(ЭлементДанных);
		Таблица = ВстроеннаяПочтаСервер.ПолучитьПредставленияИКонтактыПолучателейВходящихПисем(МассивВходящихПисем);
	Иначе
		Таблица = ПараметрыСинхронизации.КэшАдресатовВходящихПисем;
	КонецЕсли;
	МассивПолучатели = Таблица.НайтиСтроки(Новый Структура("Письмо", ЭлементДанных.Ссылка));

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("IncomingMail", "206");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", 
		?(ЗначениеЗаполнено(ЭлементДанных.Дата),
			ЭлементДанных.Дата,ТекущаяДатаСеанса()));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбщегоНазначения.ИмяЗначенияПеречисления(
			?(ЗначениеЗаполнено(ЭлементДанных.Важность), 
				ЭлементДанных.Важность,
				Перечисления.ВажностьПисем.Обычная)));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Subject", ЭлементДанных.Тема);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HasAttachment", ЭлементДанных.ЕстьВложения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MarkedForDeletion", ЭлементДанных.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasRead", ЭлементДанных.Прочтен);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasAnswered", ЭлементДанных.ОтправленОтвет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasForwarded", ЭлементДанных.Переслан);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FullText", ЭлементДанных.ТекстПисьмаПростойТекстХранилище);

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", ЭлементДанных.Папка);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Account", ЭлементДанных.УчетнаяЗапись);

	ОтправительПредставление = ЭлементДанных.ОтправительПредставление;
	Если СтрНайти(ЭлементДанных.ОтправительПредставление, ЭлементДанных.ОтправительАдрес) = 0 Тогда
		ОтправительПредставление = 
			СтрШаблон("%1 <%2>", ОтправительПредставление, ЭлементДанных.ОтправительАдрес);
	КонецЕсли;
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Sender", ОтправительПредставление);

	Кому    = Новый Массив();
	Копии   = Новый Массив();
	Скрытые = Новый Массив();

	Для каждого Получатель Из МассивПолучатели Цикл

		Если Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Кому Тогда
			Кому.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Копия Тогда
			Копии.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия Тогда
			Скрытые.Добавить(Получатель.Представление);
		КонецЕсли;

	КонецЦикла;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TO", СтрСоединить(Кому, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CC", СтрСоединить(Копии, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "BCC", СтрСоединить(Скрытые, ";"));

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // IncomingMail

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ИсходящееПисьмо

// Менеджер выгрузки элемента данных типа ДокументСсылка.ИсходящееПисьмо.
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи XML файла;
//  ВерсияКлиента			 - Строка - Версия формата запрошенная клиентом;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке;
//  КакПредмер				 - Булево - Признак принудительной выгрузки.
//
Процедура ВыгрузитьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, 
	ЭлементДанных, КакПредмет = Ложь)

	Если Не КакПредмет И Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	// Получим синхронизируемые папки клиента
	ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;

	// Получим данные для выгрузки
	ТаблицаДанных = ПолучитьДанныеОбъектовВидаИсходящееПисьмо(
		ЭлементДанных, ПользователиКлиентСервер.ТекущийПользователь());

	ГраницаУстареванияДанных = ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400;

	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если Не КакПредмет Тогда

			Если ПапкиВСинхронизации.Найти(ЭлементДанных.Папка) = Неопределено Тогда

				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка);

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					НСтр("ru = 'Сформировано удаление объекта: папка письма более не синхронизируется.'; en = 'Object deletion generated: email folder is no longer synchronized.'"));

				Продолжить;

			КонецЕсли;

			// Объект может устареть и не подлежит выгрузке на клиент
			Если ЭлементДанных.Дата < ГраницаУстареванияДанных Тогда

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					СтрШаблон(
						НСтр("ru = 'Объект не передан: находится за границей устаревания данных (%1).'; en = 'Object is not transferred: outdated (%1).'"),
						ГраницаУстареванияДанных));

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		Если ВерсияКлиента >= "213" Тогда

			ВыгрузитьИсходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);

			ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

			ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияКлиента, ЭлементДанных.Ссылка, 
				ПараметрыСинхронизации);

			ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(ЭлементДанных.Ссылка);
			ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка, ВеткаПереписки);
			ВыгрузитьВXMLКорневоеПисьмоВеткиПереписки(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ВеткаПереписки);

		Иначе
			СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);

		КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

// Получает таблицу данных о массиве объектом одним запросом
//
// Параметры:
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке
//  Пользователь			 - СправочникСсылка.Пользователи - Ссылка на пользователя клиента
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов о выгружаемых данных
//
Функция ПолучитьДанныеОбъектовВидаИсходящееПисьмо(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка КАК Ссылка,
		|	ИсходящееПисьмо.ПометкаУдаления,
		|	ИсходящееПисьмо.Важность,
		|	ИсходящееПисьмо.ДатаОтправкиПолучения КАК ДатаОтправки,
		|	ИсходящееПисьмо.Тема,
		|	ИсходящееПисьмо.Дата КАК Дата,
		|	ИсходящееПисьмо.ЕстьВложения,
		|	ИсходящееПисьмо.УчетнаяЗапись,
		|	ИсходящееПисьмо.Папка
		|ПОМЕСТИТЬ Письма
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Объекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка КАК Ссылка,
		|	ИсходящееПисьмо.ПометкаУдаления,
		|	ИсходящееПисьмо.Важность,
		|	ИсходящееПисьмо.ДатаОтправки,
		|	ИсходящееПисьмо.Тема,
		|	ИсходящееПисьмо.Дата КАК Дата,
		|	ИсходящееПисьмо.ЕстьВложения,
		|	ИсходящееПисьмо.УчетнаяЗапись,
		|	ИсходящееПисьмо.Папка,
		|	ДанныеИзПисьма.ВерсияДанных КАК ВерсияДанных,
		|	ДанныеИзПисьма.Номер КАК Номер,
		|	ДанныеИзПисьма.ТекстХранилище КАК ТекстХранилище,
		|	ДанныеИзПисьма.ТипТекста КАК ТипТекста,
		|	ДанныеИзПисьма.ПодготовленоКОтправке КАК ПодготовленоКОтправке,
		|	ДанныеИзПисьма.ТипОтвета КАК ТипОтвета,
		|	ДанныеИзПисьма.ПисьмоОснование КАК ПисьмоОснование,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.Переслан, ЛОЖЬ) КАК Переслан,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ОтправленОтвет, ЛОЖЬ) КАК ОтправленОтвет,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ПолученОтвет, ЛОЖЬ) КАК ПолученОтвет,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтен,
		|	ПисьмаВеток.ВеткаПереписки
		|ИЗ
		|	Письма КАК ИсходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ИсходящееПисьмо.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО ИсходящееПисьмо.Ссылка = СведенияОПрочтении.Объект
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВеток КАК ПисьмаВеток
		|		ПО ИсходящееПисьмо.Ссылка = ПисьмаВеток.Письмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ДанныеИзПисьма
		|		ПО ИсходящееПисьмо.Ссылка = ДанныеИзПисьма.Ссылка
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Объекты";

	Данные = Запрос.Выполнить().Выгрузить();

	Возврат Данные;

КонецФункции

// Процедура выгрузки входящего письма по версии формата 206.
//
// Параметры:
//  ЗаписьXML			 - ЗаписьXML - Объект приемник данных;
//  ЭлементДанных		 - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена.
//
Процедура ВыгрузитьИсходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Запись связанных объектов
	ВыгрузитьВXMLПапкиПисем(ЗаписьXML, "213", ПараметрыСинхронизации, ЭлементДанных.Папка);

	Если ПараметрыСинхронизации.КэшАдресатовИсходящихПисем.Количество() = 0 Тогда
		МассивВходящихПисем = Новый Массив();
		МассивВходящихПисем.Добавить(ЭлементДанных);
		Таблица = ВстроеннаяПочтаСервер.ПолучитьПредставленияИКонтактыПолучателейИсходящихПисем(МассивВходящихПисем);
	Иначе
		Таблица = ПараметрыСинхронизации.КэшАдресатовИсходящихПисем;
	КонецЕсли;
	МассивПолучатели = Таблица.НайтиСтроки(Новый Структура("Письмо", ЭлементДанных.Ссылка));

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OutgoingMail", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", 
		?(ЗначениеЗаполнено(ЭлементДанных.Дата),ЭлементДанных.Дата,ТекущаяДатаСеанса()));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбщегоНазначения.ИмяЗначенияПеречисления(
			?(ЗначениеЗаполнено(ЭлементДанных.Важность), 
				ЭлементДанных.Важность, Перечисления.ВажностьПисем.Обычная)));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Subject", ЭлементДанных.Тема);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HasAttachment", ЭлементДанных.ЕстьВложения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MarkedForDeletion", ЭлементДанных.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasRead", ЭлементДанных.Прочтен);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasAnswered", ЭлементДанных.ОтправленОтвет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasForwarded", ЭлементДанных.Переслан);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HasAnswer", ЭлементДанных.ПолученОтвет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadyToBeSent", ЭлементДанных.ПодготовленоКОтправке);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasSent", ЗначениеЗаполнено(ЭлементДанных.ДатаОтправки));
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", ЭлементДанных.Папка);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Account", ЭлементДанных.УчетнаяЗапись);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FullText", ЭлементДанных.ТекстХранилище);

	Кому    = Новый Массив();
	Копии   = Новый Массив();
	Скрытые = Новый Массив();

	Для каждого Получатель Из МассивПолучатели Цикл

		Если Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Кому Тогда
			Кому.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Копия Тогда
			Копии.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия Тогда
			Скрытые.Добавить(Получатель.Представление);
		КонецЕсли;

	КонецЦикла;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TO", СтрСоединить(Кому, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CC", СтрСоединить(Копии, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "BCC", СтрСоединить(Скрытые, ";"));

	Если ЗначениеЗаполнено(ЭлементДанных.ПисьмоОснование) 
		И ЗначениеЗаполнено(ЭлементДанных.ТипОтвета) Тогда

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AnswerType", 
			ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементДанных.ТипОтвета));

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BaseLetter", ЭлементДанных.ПисьмоОснование);

	КонецЕсли;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // OutcomingMail

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ПисьмаВВетке

Процедура ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Письмо, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьПисьмоВВеткеПоВерсии206(ЗаписьXML, Письмо, ЭлементДанных, ПараметрыСинхронизации);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПисьмоВВеткеПоВерсии206(ЗаписьXML, Письмо, ЭлементДанных, ПараметрыСинхронизации)

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("LetterInMailThread", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Letter", Письмо.Ссылка);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "RootLetter", ЭлементДанных.КорневоеПисьмо);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#Конецобласти

#Область Файлы

Процедура ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияКлиента, Владелец, ПараметрыСинхронизации)

	Файлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Владелец);

	Для каждого Файл Из Файлы Цикл
		ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Файл);
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных, ВыгрузитьПринудительноПолностью = Ложь)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьФайлыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации, ВыгрузитьПринудительноПолностью);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьФайлыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации, ВыгрузитьПринудительноПолностью)

	РеквизитыФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ЭлементДанных);

	// Подготовка данных
	Если ПараметрыСинхронизации.СинхронизироватьПочту 
		И ТипЗнч(РеквизитыФайла.Владелец) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыФайла.Владелец,
			"Дата");

		Если РеквизитыВладельца.Дата > (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			ТипВладельца = "IncomingMail";
		Иначе
			Возврат;
		КонецЕсли;

	ИначеЕсли ПараметрыСинхронизации.СинхронизироватьПочту 
		И ТипЗнч(РеквизитыФайла.Владелец) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыФайла.Владелец,
			"Дата");

		Если РеквизитыВладельца.Дата > (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			ТипВладельца = "OutgoingMail";
		Иначе
			Возврат;
		КонецЕсли;

	ИначеЕсли ПараметрыСинхронизации.СинхронизироватьЗадачи 
		И ЗначениеЗаполнено(РеквизитыФайла.Владелец) Тогда

		ТипВладельца = "ActionTarget";

	Иначе
		Возврат;

	КонецЕсли;

	// ограничим список файлов выгружаемых на устройство теми которые там можно просмотреть
	// остальные - будут переданы по запросу пользователя

	Если ПараметрыСинхронизации.ФильтроватьФайлыПоФормату Тогда
		ЕстьОграничениеПоРасширению = 
			Не ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(
				ПараметрыСинхронизации.ФорматыПередаваемыхФайлов, РеквизитыФайла.Расширение);
	Иначе
		ЕстьОграничениеПоРасширению = Ложь;
	КонецЕсли;

	Если ВыгрузитьПринудительноПолностью Тогда
		ТолькоЗаголовок = Ложь;
	
	ИначеЕсли ЕстьОграничениеПоРасширению Тогда
		ТолькоЗаголовок = Истина;

	Иначе
		МаксимальныйРазмерФайла = ПараметрыСинхронизации.МаксимальныйРазмерФайла;
		ТолькоЗаголовок = МаксимальныйРазмерФайла > 0
							И РеквизитыФайла.Размер > МаксимальныйРазмерФайла * 1024;
	КонецЕсли;

	ПолноеНаименование = РеквизитыФайла.ПолноеНаименованиеВерсии;
	Если ТолькоЗаголовок Тогда
		ДанныеФайла = Неопределено;
	Иначе

		Попытка
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ЭлементДанных);
		Исключение

			ДанныеФайла = Неопределено;
			ТолькоЗаголовок = Истина;

			ТекстПредупреждения = 
				ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ПолноеНаименование + "." + РеквизитыФайла.Расширение);

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
				ТекстПредупреждения, Ложь, ПараметрыСинхронизации.МобильныйКлиент);

		КонецПопытки;

	КонецЕсли;

	Если Найти(ПолноеНаименование, "."+РеквизитыФайла.Расширение) = 0 Тогда
		ПолноеНаименование = ПолноеНаименование + "." + РеквизитыФайла.Расширение;
	КонецЕсли;

	ДанныеФайла = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("File", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ПолноеНаименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Extension", РеквизитыФайла.Расширение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Size", РеквизитыФайла.Размер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HeaderOnly", ТолькоЗаголовок);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FileData", ДанныеФайла);

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Owner", РеквизитыФайла.Владелец);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

Процедура ВыгрузитьВXMLКорневоеПисьмоВеткиПереписки(ЗаписьXML, ВерсияСервиса, 
	ПараметрыСинхронизации, ЭлементДанных)

	КорневоеПисьмо = ЭлементДанных.КорневоеПисьмо;

	Если Не ЗначениеЗаполнено(КорневоеПисьмо) Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КорневоеПисьмо, "Дата");

	Если Не ЗначениеЗаполнено(Реквизиты.Дата) Тогда
		Возврат;
	КонецЕсли;

	// Объект может устареть и не подлежит выгрузке на клиент
	Если Реквизиты.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
		Возврат;
	КонецЕсли;

	Тип = ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных.Ссылка);

	Если СтрСравнить(Тип, "IncomingMail") = 0 Тогда
		ВыгрузитьВXMLВходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, КорневоеПисьмо);
	ИначеЕсли СтрСравнить(Тип, "OutcomingMail") = 0 Тогда
		ВыгрузитьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, КорневоеПисьмо);
	Иначе
		Возврат;
	КонецЕсли;

	ВыгрузитьВXMLВсеПрисоединенныеФайлы(
		ЗаписьXML, ВерсияСервиса, КорневоеПисьмо.Ссылка, ПараметрыСинхронизации);

КонецПроцедуры

// ТСК Близнюк С.И.; 30.10.2018; task#1602{
#Область Справочники_РА

Процедура ВыгрузитьВXMLra_EhtapyVyyavleniyaNesootvetstvij(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,Код,Наименование,NaimenovanieEn");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("EhtapVyyavleniyaNesootvetstviya", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.Код);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NaimenovanieEn", Реквизиты.NaimenovanieEn);
	
	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); 

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLra_VidyNesootvetstvij(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,Код,ЭтоГруппа,Родитель,Наименование,NaimenovanieEn,Primenenie");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("VidNesootvetstviya", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.Код);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsGroup", Реквизиты.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
	
	Если НЕ Реквизиты.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NaimenovanieEn", Реквизиты.NaimenovanieEn);
		//ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VidyPredmetovNesootvetstviya", Реквизиты.VidyPredmetovNesootvetstviya); 
	
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PrimenenieRows");
		ВыборкаPrimenenie = Реквизиты.Primenenie.Выбрать();
		Пока ВыборкаPrimenenie.Следующий() Цикл
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PrimenenieRow");

			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VidPredmetaNesootvetstviya", ВыборкаPrimenenie.VidPredmetaNesootvetstviya);
			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "EhtapVyyavleniyaNesootvetstvija", ВыборкаPrimenenie.EhtapVyyavleniyaNesootvetstvija);
			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		КонецЦикла;
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // PrimenenieRows

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Родитель) Тогда
		ИДРодителя = Реквизиты.Родитель.УникальныйИдентификатор();
	Иначе
		ИДРодителя = УникальныйИдентификаторПустой();
	КонецЕсли;
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Parent", ИДРодителя);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // VidNesootvetstviya

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLra_KontrolnyeMeropriyatiya(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	// ТСК Близнюк С.И.; 03.12.2018; task#1960{
	//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,Код,ЭтоГруппа,Родитель,Наименование,NaimenovanieEn,Primenenie");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,Код,ЭтоГруппа,Родитель,Наименование,NaimenovanieEn,VidPredmetaNesootvetstviya,OblastPrimeneniya,NormativnyjSrokProvedeniya,Primenenie");
	// ТСК Близнюк С.И.; 03.12.2018; task#1960}
		
	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("KontrolnoeMeropriyatie", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsGroup", Реквизиты.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.Код);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
	
	Если НЕ Реквизиты.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NaimenovanieEn", Реквизиты.NaimenovanieEn);
		
		// ТСК Близнюк С.И.; 03.12.2018; task#1960{
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VidPredmetaNesootvetstviya", Реквизиты.VidPredmetaNesootvetstviya);
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "OblastPrimeneniya", Реквизиты.OblastPrimeneniya);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NormativnyjSrokProvedeniya", Реквизиты.NormativnyjSrokProvedeniya);
		// ТСК Близнюк С.И.; 03.12.2018; task#1960}
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PrimenenieRows");
		ВыборкаPrimenenie = Реквизиты.Primenenie.Выбрать();
		Пока ВыборкаPrimenenie.Следующий() Цикл
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PrimenenieRow");
			
			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "EhtapVyyavleniyaNesootvetstvija", ВыборкаPrimenenie.EhtapVyyavleniyaNesootvetstvija);
			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		КонецЦикла;
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // PrimenenieRows

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Родитель) Тогда
		ИДРодителя = Реквизиты.Родитель.УникальныйИдентификатор();
	Иначе
		ИДРодителя = УникальныйИдентификаторПустой();
	КонецЕсли;
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Parent", ИДРодителя);
	
	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // KontrolnoeMeropriyatie

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLra_OblastiPrimeneniya(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,Код,ЭтоГруппа,Родитель,Наименование,NaimenovanieEn");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OblastPrimeneniya", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsGroup", Реквизиты.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.Код);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
	
	Если НЕ Реквизиты.ЭтоГруппа Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NaimenovanieEn", Реквизиты.NaimenovanieEn);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Родитель) Тогда
		ИДРодителя = Реквизиты.Родитель.УникальныйИдентификатор();
	Иначе
		ИДРодителя = УникальныйИдентификаторПустой();
	КонецЕсли;
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Parent", ИДРодителя);
	
	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); 

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

// Ткаченко И.Л. Искать в тексте "ДоработкиМП" 19.12.2018 {
Процедура ВыгрузитьВXMLra_Signal(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка, Проведен, Дата, PodrobnoeOpisanie, MestoViyavleniya, VyyavivsheeLico, VyyavivshayaOrganizaciya, VyyavivsheePodrazdelenie, Organizaciya, OtvetstvenniyZaKachestvo, Proekt");

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Signal", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Date", Реквизиты.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PodrobnoeOpisanie", Реквизиты.PodrobnoeOpisanie);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MestoViyavleniya", Реквизиты.MestoViyavleniya);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VyyavivsheeLico", Реквизиты.VyyavivsheeLico);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VyyavivshayaOrganizaciya", Реквизиты.VyyavivshayaOrganizaciya);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VyyavivsheePodrazdelenie", Реквизиты.VyyavivsheePodrazdelenie);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Organizaciya", Реквизиты.Organizaciya);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Proekt", Реквизиты.Proekt);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "OtvetstvenniyZaKachestvo", Реквизиты.OtvetstvenniyZaKachestvo);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Posted", Реквизиты.Проведен);
	
	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); 

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры
// Ткаченко И.Л. Искать в тексте "ДоработкиМП" 19.12.2018 }

// ТСК Близнюк С.И.; 03.12.2018; task#1960{
//Процедура ВыгрузитьВXMLra_VidyKontrolnyhOperacij(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

//	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных, "Ссылка,Код,ЭтоГруппа,Родитель,Наименование,EhtapVyyavleniya,VidPredmetaNesootvetstviya,NaimenovanieEn,KontrolnoeMeropriyatie,OblastPrimeneniya,NormativnyjSrokProvedeniya");

//	// Запись данных
//	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("VidKontrolnojOperacii", "206");

//	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", Реквизиты.Ссылка);
//	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsGroup", Реквизиты.ЭтоГруппа);
//	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GID", Реквизиты.Код);
//	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Naimenovanie", Реквизиты.Наименование);
//	
//	Если НЕ Реквизиты.ЭтоГруппа Тогда
//		
//		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NaimenovanieEn", Реквизиты.NaimenovanieEn);
//		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "EhtapVyyavleniya", Реквизиты.EhtapVyyavleniya);
//		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VidPredmetaNesootvetstviya", Реквизиты.VidPredmetaNesootvetstviya);
//		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "KontrolnoeMeropriyatie", Реквизиты.KontrolnoeMeropriyatie);
//		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "OblastPrimeneniya", Реквизиты.OblastPrimeneniya);
//		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NormativnyjSrokProvedeniya", Реквизиты.NormativnyjSrokProvedeniya);
//		
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Реквизиты.Родитель) Тогда
//		ИДРодителя = Реквизиты.Родитель.УникальныйИдентификатор();
//	Иначе
//		ИДРодителя = УникальныйИдентификаторПустой();
//	КонецЕсли;
//	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Parent", ИДРодителя);
//	
//	// Записываем в поток закрывающий тэг
//	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); 

//	// Записываем файл данные объекта
//	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
//	
//	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

//	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

//КонецПроцедуры
// ТСК Близнюк С.И.; 03.12.2018; task#1960}

#КонецОбласти

#Область РегистрыСведений_РА

Процедура ВыгрузитьВXMLra_ZavisimostPredmetovOtEtapov(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

		// Записываем данные
		ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ZavisimostPredmetovOtEtapov", "206");

		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "EhtapVyyavleniyaNesootvetstvija", ЭлементДанных.EhtapVyyavleniyaNesootvetstvija);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VidPredmetaNesootvetstviya", ЭлементДанных.VidPredmetaNesootvetstviya);

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		// Записываем файл данные объекта
		ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	КонецЦикла;

КонецПроцедуры

#КонецОбласти
// ТСК Близнюк С.И.; 30.10.2018; task#1602}

#КонецОбласти
