
////////////////////////////////////////////////////////////////////////////////
// Перенос сроков выполнения задач вызов сервера
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет новый срок процесса при изменении срока задачи.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  НовыйСрок - Дата - новый срок задачи.
//  Процесс - БизнесПроцессСсылка - ссылка на процесс задачи.
//  СтарыйСрокПроцесса - Дата - старый срок процесса, в этот реквизит помещается старый срок процесса.
//  НовыйСрокПроцесса - Дата - новый срок процесса, в этот реквизит помещается новый срок процесса.
//
Процедура ОпределитьСрокПроцессаПриИзмененииСрокаЗадачи(
	Задача, НовыйСрок, Процесс, СтарыйСрокПроцесса, НовыйСрокПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	СтарыйСрокПроцесса = ПроцессОбъект.СрокИсполненияПроцесса;
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	МенеджерПроцесса.УстановитьСрокИсполнителяЗадачиВПроцессе(
		НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
	
	Если ПараметрыИзмененногоРеквизита.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитТаблицаСИзмененнымСроком = "";
	ИндексСтроки = 0;
	
	Если ПараметрыИзмененногоРеквизита.Свойство("РеквизитТаблицаСИзмененнымСроком") Тогда
		РеквизитТаблицаСИзмененнымСроком = ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
	КонецЕсли;
	Если ПараметрыИзмененногоРеквизита.Свойство("ИндексСтроки") Тогда
		ИндексСтроки = ПараметрыИзмененногоРеквизита.ИндексСтроки;
	КонецЕсли;
	
	ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
	
	ТипПроцесса = ТипЗнч(Процесс);
	
	ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
	ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчета;
	
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтроки;
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(
			ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиОзнакомления(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиПоручения(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтроки;
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиПриглашения(ПроцессОбъект, ПараметрыДляРасчетаСроков);
			
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиРассмотрения(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиРегистрации(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтроки;
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиСогласования(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиУтверждения(ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
	КонецЕсли;
	
	НовыйСрокПроцесса = ПроцессОбъект.СрокИсполненияПроцесса;
	
КонецПроцедуры

// Возвращает количество переносов срока указанной задачи, выполненных по 
// указанной заявке на перенос срока выполнения.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//  ЗаявкаСсылка - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
//  СУчетомИтерации - Булево - если передается Истина, определяется количество переносов
//                             только по текущей итерации в заявке.
//
Функция КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
	ЗадачаСсылка, ЗаявкаСсылка, СУчетомИтерации = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК КоличествоЗаписей
		 |ИЗ
		 |	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
		 |ГДЕ
		 |	ПереносыСроковВыполненияПроцессовИЗадач.Предмет В (&Задачи)
		 |	И ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса = &Заявка
		 |	 [УсловиеИтерация] ";
		 
	ЗадачиМассив = Новый Массив();
	ЗадачиМассив.Добавить(ЗадачаСсылка);
	ЗадачиМассив.Добавить(ЗадачаСсылка.БизнесПроцесс);
	Запрос.УстановитьПараметр("Задачи", ЗадачиМассив);
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	Если СУчетомИтерации Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"[УсловиеИтерация]",
			" И ПереносыСроковВыполненияПроцессовИЗадач.Итерация = &Итерация");
		Запрос.УстановитьПараметр("Итерация", ЗаявкаСсылка.Итерация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеИтерация]", "");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции

// Возвращает строковое описание величины переноса
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи,
//                 СправочникСсылка.ПолныеРоли - пользователь для которого переносится срок задачи.
//  СтарыйСрок - Дата - старый срок исполнения задачи.
//  НовыйСрок - Дата - новый срок исполнения задачи.
//
Функция ПолучитьПодписьДлительностьПереноса(Пользователь, СтарыйСрок, НовыйСрок) Экспорт
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		Возврат "";
	КонецЕсли;
	
	СимволНаправленияПеремещения = ?(СтарыйСрок < НовыйСрок, "+", "-");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
		Если Пользователь = Неопределено Тогда
			ГрафикПользователя = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		Иначе
			ГрафикПользователя = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
		КонецЕсли;
		ГрафикиРаботы.ПолучитьДлительностьПериода(ГрафикПользователя, СтарыйСрок, НовыйСрок);
		РазностьВРабочихДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
			ГрафикПользователя.Календарь,
			СтарыйСрок,
			НовыйСрок);
		ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьРабочихДней(РазностьВРабочихДнях);
		Если РазностьВРабочихДнях > 0 Тогда
			Возврат СтрШаблон(
				"(%1%2 %3)",
				СимволНаправленияПеремещения,
				Строка(РазностьВРабочихДнях),
				ПодписьДней);
		Иначе
			Возврат СтрШаблон(
				"(%1)",
				НСтр("ru = 'менее 1 рабочего дня'; en = 'less than 1 working day'"));
		КонецЕсли;
	Иначе
		Возврат СтрШаблон(
			"(%1 %2)",
			СимволНаправленияПеремещения,
			ДелопроизводствоКлиентСервер.РазностьДатВДнях(НовыйСрок, СтарыйСрок));
	КонецЕсли;
		
КонецФункции

#КонецОбласти
