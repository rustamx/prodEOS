#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////////////////////////
// Получение виз

// Возвращает активную визу документа для переданного исполнителя
// СтруктураИсполнитель содержит Исполнитель, РольИсполнителя
Функция ПолучитьАктивнуюВизуПоИсполнителю(Документ, СтруктураИсполнитель) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Ссылка,
	|	ВизыСогласования.ПометкаУдаления,
	|	ВизыСогласования.Документ,
	|	ВизыСогласования.Исполнитель,
	|	ВизыСогласования.РольИсполнителя,
	|	ВизыСогласования.ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию,
	|	ВизыСогласования.Удалена,
	|	ВизыСогласования.РезультатСогласования,
	|	ВизыСогласования.Комментарий,
	|	ВизыСогласования.ДатаИсполнения,
	|	ВизыСогласования.Автор,
	|	ВизыСогласования.ПоместилВИсторию,
	|	ВизыСогласования.УстановилРезультат,
	|	ВизыСогласования.Источник
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Документ
	|	И ВизыСогласования.Исполнитель = &Исполнитель
	|	И ВизыСогласования.РольИсполнителя = &РольИсполнителя
	|	И ВизыСогласования.ДатаПомещенияВИсторию = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ВизыСогласования.ПомещенаВИсторию
	|	И НЕ ВизыСогласования.Удалена
	|	И НЕ ВизыСогласования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Исполнитель", СтруктураИсполнитель.Исполнитель);
	Запрос.УстановитьПараметр("РольИсполнителя", СтруктураИсполнитель.РольИсполнителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() ИЛИ Выборка.Ссылка.Пустая() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Выборка.Ссылка;
	
КонецФункции	 

 // Возвращает только активную визу по задаче
Функция ПолучитьАктивнуюВизуПоЗадаче(Документ, Задача) Экспорт 
	
	Визы = ПолучитьВизыПоИсточнику(Документ, Задача, Истина);
	
	Если Визы.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Визы[0].Ссылка;
	
КонецФункции	

// Возвращает любую визу по задаче
Функция ПолучитьВизуПоЗадаче(Документ, Задача) Экспорт 
	
	Визы = ПолучитьВизыПоИсточнику(Документ, Задача, Ложь);
	
	Если Визы.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Визы[0].Ссылка;
	
КонецФункции	

// Возвращает активные визы по бизнес-процессу 
функция ПолучитьАктивныеВизыПоБизнесПроцессу(Документ, БизнесПроцесс) Экспорт 
	
	Визы = ПолучитьВизыПоИсточнику(Документ, БизнесПроцесс, Истина);
	
	Возврат Визы;
	
КонецФункции	

// Возвращает все визы по бизнес-процессу
функция ПолучитьВизыПоБизнесПроцессу(Документ, БизнесПроцесс) Экспорт 
	
	Визы = ПолучитьВизыПоИсточнику(Документ, БизнесПроцесс, Ложь);
	
	Возврат Визы;
	
КонецФункции	

// Возвращает визы по источнику (бизнес-процессу, задаче)
Функция ПолучитьВизыПоИсточнику(Документ, Источник, ТолькоАктивные = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Ссылка,
	|	ВизыСогласования.ПометкаУдаления,
	|	ВизыСогласования.Документ,
	|	ВизыСогласования.Исполнитель,
	|	ВизыСогласования.РольИсполнителя,
	|	ВизыСогласования.ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию,
	|	ВизыСогласования.Удалена,
	|	ВизыСогласования.РезультатСогласования,
	|	ВизыСогласования.Комментарий,
	|	ВизыСогласования.ДатаИсполнения,
	|	ВизыСогласования.Автор,
	|	ВизыСогласования.ПоместилВИсторию,
	|	ВизыСогласования.УстановилРезультат,
	|	ВизыСогласования.Источник
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Документ
	|	И ВизыСогласования.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Если ТолькоАктивные Тогда 
		Запрос.Текст = Запрос.Текст + 
		" И (НЕ ВизыСогласования.ПомещенаВИсторию)
		| И (НЕ ВизыСогласования.Удалена)
		| И (НЕ ВизыСогласования.ПометкаУдаления) ";
	КонецЕсли;	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции	

// Возвращает визы документа
Функция ПолучитьВизыДокумента(Документ, ТолькоАктивные = Истина, ПоказыватьУдаленные = Ложь, ПолучитьДанныеЭП = Ложь) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизыСогласования.Ссылка,
		|	ВизыСогласования.ПометкаУдаления,
		|	ВизыСогласования.Документ,
		|	ВизыСогласования.Исполнитель,
		|	ВизыСогласования.РольИсполнителя,
		|	ВизыСогласования.РезультатСогласования,
		|	ВизыСогласования.УстановилРезультат,
		|	ВизыСогласования.ДатаИсполнения,
		|	ВизыСогласования.Комментарий,
		|	ВизыСогласования.Источник,
		|	ВизыСогласования.ДатаПомещенияВИсторию,
		|	ВизыСогласования.ПомещенаВИсторию,
		|	ВизыСогласования.ПоместилВИсторию,
		|	ВизыСогласования.Автор,
		|	ВизыСогласования.Порядок,
		|	ВизыСогласования.Подписана,
		|	ВизыСогласования.Удалена,
		|	СведенияОПользователяхДокументооборот.Должность.Представление КАК Должность";
	
	Если ПолучитьДанныеЭП Тогда
		Запрос.Текст = Запрос.Текст + ",
			|	ЭП.ДатаПодписи КАК ДатаПодписи,
			|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
			|	ЭП.ПодписьВерна КАК ПодписьВерна,
			|	ЭП.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
			|	ЭП.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО ВизыСогласования.Исполнитель = СведенияОПользователяхДокументооборот.Пользователь";
	
	Если ПолучитьДанныеЭП Тогда
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|		ПО ЭП.Объект = ВизыСогласования.Ссылка";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ВизыСогласования.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВизыСогласования.ПомещенаВИсторию = ЛОЖЬ
		|	И ВизыСогласования.Удалена = ЛОЖЬ";
	КонецЕсли;
	
	Если Не ПоказыватьУдаленные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВизыСогласования.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает активные визы документа
Функция ПолучитьАктивныеВизыДокумента(Документ) Экспорт 
	
	Возврат ПолучитьВизыДокумента(Документ, Истина);
	
КонецФункции	

// Возвращает количество виз документа
Функция ПолучитьКоличествоВизДокумента(Документ, ТолькоАктивные = Истина) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	АктивныеВизы = ПолучитьВизыДокумента(Документ, ТолькоАктивные);
	Возврат АктивныеВизы.Количество();
	
КонецФункции	

// Возвращает количество активных виз документа
Функция ПолучитьКоличествоАктивныхВизДокумента(Документ) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	АктивныеВизы = ПолучитьАктивныеВизыДокумента(Документ);
	Возврат АктивныеВизы.Количество();
	
КонецФункции	

// Возвращает активные визы по бизнес-процессу и его задачам
Функция ПолучитьАктивныеВизыПоБизнесПроцессуИЗадачам(Документ, БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Визы = ПолучитьАктивныеВизыПоБизнесПроцессу(Документ, БизнесПроцесс);
	Пока Выборка.Следующий() Цикл
		Виза = ПолучитьАктивнуюВизуПоЗадаче(Документ, Выборка.Ссылка);
		Если Виза <> Неопределено Тогда 
			НоваяСтрока = Визы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Виза);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Визы;
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////////////////////////
// Создание \ изменение виз

Функция ПолучитьПредставлениеИсполнителя(СтруктураИсполнитель)
	
	ПредставлениеИсполнителя = "";
	
	Если ЗначениеЗаполнено(СтруктураИсполнитель.Исполнитель)
	   И ЗначениеЗаполнено(СтруктураИсполнитель.РольИсполнителя) Тогда 
	   
		ПредставлениеИсполнителя = СтрШаблон("%1, %2",
			СтруктураИсполнитель.Исполнитель,
			СтруктураИсполнитель.РольИсполнителя);
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураИсполнитель.Исполнитель) Тогда 
		ПредставлениеИсполнителя = Строка(СтруктураИсполнитель.Исполнитель);
	ИначеЕсли ЗначениеЗаполнено(СтруктураИсполнитель.РольИсполнителя) Тогда 
		ПредставлениеИсполнителя = Строка(СтруктураИсполнитель.РольИсполнителя);
	КонецЕсли;	
	
	Возврат ПредставлениеИсполнителя;
	
КонецФункции	

// Создает визу по задаче исполнителя
Процедура СоздатьВизуПоЗадаче(Документ, Задача) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) 
	 Или Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураИсполнитель = Новый Структура("Исполнитель, РольИсполнителя");
	СтруктураИсполнитель.Вставить("Исполнитель", Задача.Исполнитель);
	СтруктураИсполнитель.Вставить("РольИсполнителя", Задача.РольИсполнителя);
	
	Виза = ПолучитьАктивнуюВизуПоИсполнителю(Документ, СтруктураИсполнитель);
	
	Если Виза <> Неопределено Тогда 
		Если ЗначениеЗаполнено(Виза.Источник) Тогда 
			Если (ТипЗнч(Виза.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")) Или 
				 (ТипЗнч(Виза.Источник) = Тип("БизнесПроцессСсылка.Согласование") И 
				 Виза.Источник <> Задача.БизнесПроцесс) Тогда 
				 ПредставлениеИсполнителя = ПолучитьПредставлениеИсполнителя(Виза);
				 
				 ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При создании визы согласования произошла ошибка.
					|Виза для исполнителя %1 уже существует в документе';
					|en = 'An error occured while creating endorsement of approval.
					|Endorsement of performer %1 already exists in the document'"), ПредставлениеИсполнителя);
					
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
		КонецЕсли;	
		
		ОбъектВизы = Виза.ПолучитьОбъект();
		ОбъектВизы.Источник = Задача.Ссылка;
		ОбъектВизы.Записать();
	Иначе	
		НовыйЭлемент = Справочники.ВизыСогласования.СоздатьЭлемент();
		НовыйЭлемент.Наименование = ПолучитьНаименованиеВизы(Документ);
		НовыйЭлемент.Документ = Документ;
		
		НовыйЭлемент.Исполнитель = Задача.Исполнитель;
		НовыйЭлемент.РольИсполнителя = Задача.РольИсполнителя;
		
		НовыйЭлемент.Автор = Задача.Автор;
		НовыйЭлемент.Источник = Задача.Ссылка;
		НовыйЭлемент.Порядок = МаксимальныйПорядокВизы(Документ) + 1;
		
		НовыйЭлемент.Записать();
	КонецЕсли;
	
КонецПроцедуры	

// Обновляет визу по задаче исполнителя
Процедура ЗаполнитьВизуПоЗадаче(Документ, Задача) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) 
	 Или Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Виза = ПолучитьВизуПоЗадаче(Документ, Задача.Ссылка);
	Если Виза = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыСогласования.Найти(
		Задача.Ссылка, "ЗадачаИсполнителя");
	
	ОбъектВизы = Виза.ПолучитьОбъект();
	
	// Если данные для визы не были изменены, тогда не обновляем визу.
	Если ОбъектВизы.Исполнитель = Задача.Исполнитель
		И ОбъектВизы.РольИсполнителя = Задача.РольИсполнителя
		И ОбъектВизы.Автор = Задача.Автор
		И (НайденнаяСтрока = Неопределено
			Или ОбъектВизы.РезультатСогласования = НайденнаяСтрока.РезультатСогласования) Тогда
			
		Возврат;
	КонецЕсли;
	
	ОбъектВизы.Исполнитель = Задача.Исполнитель;
	ОбъектВизы.РольИсполнителя = Задача.РольИсполнителя;
	
	Если НайденнаяСтрока <> Неопределено 
		И ОбъектВизы.РезультатСогласования <> НайденнаяСтрока.РезультатСогласования Тогда
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.РезультатСогласования) Тогда
			УстановилРезультат = Пользователи.ТекущийПользователь();
			Комментарий = Задача.РезультатВыполнения;
			
			
		Иначе
			УстановилРезультат = Справочники.Пользователи.ПустаяСсылка();
			Комментарий = "";
			
			
		КонецЕсли;
		
		ОбъектВизы.РезультатСогласования = НайденнаяСтрока.РезультатСогласования;
		ОбъектВизы.Комментарий = Комментарий;
		ОбъектВизы.ДатаИсполнения = Задача.ДатаИсполнения;
		ОбъектВизы.УстановилРезультат = УстановилРезультат;
		
	КонецЕсли;	
	ОбъектВизы.Автор = Задача.Автор;
	
	ДубльВизы = Неопределено;
	
	Если ЕстьДубльВизы(ОбъектВизы, ДубльВизы) Тогда 
		
		Если Задача.ДополнительныеСвойства.Свойство("ПомещатьДублиВизВИсторию")
			И Задача.ДополнительныеСвойства.ПомещатьДублиВизВИсторию Тогда
			
			ДублиВиз = Новый Массив;
			ДублиВиз.Добавить(ДубльВизы);
			РаботаСВизамиСогласования.ПоместитьВизыВИсторию(ДублиВиз);
			
		Иначе
			
			ПредставлениеИсполнителя = ПолучитьПредставлениеИсполнителя(ОбъектВизы);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При изменении визы согласования произошла ошибка.
					|Виза для исполнителя %1 уже существует в документе 
					|""%2""';
					|en = 'An error occured while changing endorsements of approval.
					|Endorsement of performer %1 already exists in document
					|""%2""'"), 
					ПредставлениеИсполнителя,
					Строка(Документ));
			ВызватьИсключение ТекстСообщения;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектВизы.Записать();
	
КонецПроцедуры	

// Отмечает как удаленную визу по задаче исполнителя
Процедура ОтметитьУдалениеВизыПоЗадаче(Документ, Задача, Отметка) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) 
	 Или Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Виза = ПолучитьВизуПоЗадаче(Документ, Задача.Ссылка);
	Если Виза = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОбъектВизы = Виза.ПолучитьОбъект();
	ОбъектВизы.Удалена = Отметка;
	ОбъектВизы.Записать();
	
КонецПроцедуры	

// Создает визу для исполнителя по бизнес-процессу
Процедура СоздатьВизуПоБизнесПроцессу(Документ, БизнесПроцесс, СтруктураИсполнитель) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) 
	 Или Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"Ссылка, ВедущаяЗадача, Автор");
	
	Виза = ПолучитьАктивнуюВизуПоИсполнителю(Документ, СтруктураИсполнитель);
	
	Если Виза <> Неопределено И НЕ ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда 
		
		Если ЗначениеЗаполнено(Виза.Источник) Тогда 
			Если (ТипЗнч(Виза.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")) Или 
				 (ТипЗнч(Виза.Источник) = Тип("БизнесПроцессСсылка.Согласование") И 
				 Виза.Источник <> РеквизитыПроцесса.Ссылка) Тогда 
				ПредставлениеИсполнителя = ПолучитьПредставлениеИсполнителя(СтруктураИсполнитель); 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При создании визы согласования произошла ошибка.
						|Виза для исполнителя %1 уже существует в документе';
						|en = 'An error occured while creating endorsement of approval.
						|Endorsement of performer %1 already exists in the document'"), 
					ПредставлениеИсполнителя);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
		КонецЕсли;
		
		ОбъектВизы = Виза.ПолучитьОбъект();
		ОбъектВизы.Автор = РеквизитыПроцесса.Автор;
		ОбъектВизы.Источник = РеквизитыПроцесса.Ссылка;
		ОбъектВизы.Записать();
	Иначе	
		
		Если Виза <> Неопределено Тогда 
			Визы = Новый Массив;
			Визы.Добавить(Виза);
			ПоместитьВизыВИсторию(Визы, РеквизитыПроцесса.Автор);
		КонецЕсли;	
		
		НовыйЭлемент = Справочники.ВизыСогласования.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураИсполнитель);
		
		НовыйЭлемент.Наименование = ПолучитьНаименованиеВизы(Документ);
		НовыйЭлемент.Документ = Документ;
		НовыйЭлемент.Автор = РеквизитыПроцесса.Автор;
		НовыйЭлемент.Источник = РеквизитыПроцесса.Ссылка;
		НовыйЭлемент.Порядок = МаксимальныйПорядокВизы(Документ) + 1;
		
		НовыйЭлемент.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

Функция МаксимальныйПорядокВизы(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВизыСогласования.Порядок), 0) КАК Порядок
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Документ
	|	И ВизыСогласования.ПомещенаВИсторию = ЛОЖЬ
	|	И ВизыСогласования.ПометкаУдаления = ЛОЖЬ
	|	И ВизыСогласования.Удалена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Порядок;
	
КонецФункции

// Проверяет наличие дубля переданной визы. 
//
Функция ЕстьДубльВизы(Виза, ДубльВизы = Неопределено) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВизыСогласования.Ссылка
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|ГДЕ
		|	ВизыСогласования.Документ = &Документ
		|	И ВизыСогласования.Исполнитель = &Исполнитель
		|	И ВизыСогласования.РольИсполнителя = &РольИсполнителя
		|	И ВизыСогласования.ПомещенаВИсторию = &ПомещенаВИсторию
		|	И ВизыСогласования.ДатаПомещенияВИсторию = &ДатаПомещенияВИсторию
		|	И НЕ ВизыСогласования.Удалена
		|	И НЕ ВизыСогласования.ПометкаУдаления
		|	И ВизыСогласования.Ссылка <> &Ссылка");
		
	Запрос.УстановитьПараметр("Документ", Виза.Документ);
	Запрос.УстановитьПараметр("Исполнитель", Виза.Исполнитель);
	Запрос.УстановитьПараметр("РольИсполнителя", Виза.РольИсполнителя);
	Запрос.УстановитьПараметр("ПомещенаВИсторию", Виза.ПомещенаВИсторию);
	Запрос.УстановитьПараметр("ДатаПомещенияВИсторию", Виза.ДатаПомещенияВИсторию);
	Запрос.УстановитьПараметр("Ссылка", Виза.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДубльВизы = Выборка.Ссылка;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// История виз 

// Помещает визы в историю
Процедура ПоместитьВизыВИсторию(Визы, ПоместилВИсторию = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПоместилВИсторию = Неопределено Тогда 
		ПоместилВИсторию = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого Виза Из Визы Цикл
		
		ОбъектВизы = Виза.Ссылка.ПолучитьОбъект();
		ОбъектВизы.ПоместилВИсторию = ПоместилВИсторию;
		ОбъектВизы.ПомещенаВИсторию = Истина;
		ОбъектВизы.ДатаПомещенияВИсторию = ТекущаяДата;
		ОбъектВизы.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

// Помещает визы по выполненным задачам в историю
Процедура ПоместитьЗакрытиеВизыДокументаВИсторию(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеВизы = ПолучитьАктивныеВизыДокумента(Документ);
	
	Визы = Новый Массив;
	Для Каждого АктивнаяВиза Из АктивныеВизы Цикл
		Если ЗначениеЗаполнено(АктивнаяВиза.РезультатСогласования)
		 Или (ТипЗнч(АктивнаяВиза.Источник) = Тип("БизнесПроцессСсылка.Согласование") 
		 И АктивнаяВиза.Источник.Завершен)
		Тогда 
			Визы.Добавить(АктивнаяВиза);
		КонецЕсли;
	КонецЦикла;	
	
	ПоместитьВизыВИсторию(Визы);
	
КонецПроцедуры	

// Выполняет печать листа согласования из документа
Функция ПечатьЛистаСогласованияИзДокумента(МассивОбъектов, ОбъектыПечати, История = Ложь) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
	Если История = Истина Тогда 
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласованияСИсторией");
	Иначе 
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	Если История Тогда 
		ОбластьЗаголовокИстории = Макет.ПолучитьОбласть("ЗаголовокИстории");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Документ КАК Ссылка,
	|	ВизыСогласования.Исполнитель,
	|	ВизыСогласования.РольИсполнителя.Владелец КАК РольИсполнителя,
	|	ВизыСогласования.РольИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	ВизыСогласования.РольИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
	|	ВизыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	ВизыСогласования.ДатаИсполнения КАК ДатаИсполнения,
	|	СведенияОПользователяхДокументооборот.Должность.Представление КАК Должность,
	|	ВизыСогласования.Комментарий КАК РезультатВыполнения,
	|	ВизыСогласования.Источник,
	|	ВизыСогласования.ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию,
	|	ВизыСогласования.Порядок
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
	|		ПО ВизыСогласования.Исполнитель = СведенияОПользователяхДокументооборот.Пользователь
	|ГДЕ
	|	ВизыСогласования.Документ В(&МассивОбъектов)
	|	И НЕ ВизыСогласования.ПометкаУдаления
	|	И НЕ ВизыСогласования.Удалена";
	
	Если Не История Тогда 
		Запрос.Текст = Запрос.Текст + "
		|И Не ВизыСогласования.ПомещенаВИсторию";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ПомещенаВИсторию,
		|	ДатаПомещенияВИсторию УБЫВ
		|ИТОГИ ПО
		|	Ссылка ";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
 	ПервыйДокумент = Истина;
	Для Каждого СтрокаСсылка Из Результат.Строки Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Предмет = СтрокаСсылка.Ссылка;
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбластьШапка.Параметры.Предмет = Предмет.Метаданные().ПредставлениеОбъекта 
				+ " """ + Строка(Предмет) + """";
				
			Если История Тогда 
				РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,
					"Подготовил, Ответственный");
				Если ЗначениеЗаполнено(РеквизитыПредмета.Ответственный) Тогда 
					ОбластьШапка.Параметры.Ответственный = 
						СтрШаблон(НСтр("ru = 'Ответственный: %1'; en = 'Responsible: %1'"), РеквизитыПредмета.Ответственный);
				Иначе 
					ОбластьШапка.Параметры.Ответственный = 
						СтрШаблон(НСтр("ru = 'Ответственный: %1'; en = 'Responsible: %1'"), РеквизитыПредмета.Подготовил);
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;	
		
		Если История Тогда 
			ТаблицаСроков = СтрокаСсылка.Строки;
			
			ДатаПомещенияВИсторию = Дата(1,1,1);
			ПериодИРезультат = ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию);
			ОбластьИсполнителиШапка.Параметры.Период = ПериодИРезультат.Период;
			ОбластьИсполнителиШапка.Параметры.РезультатСогласования = ПериодИРезультат.РезультатСогласования;
				
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
				
				Если ДатаПомещенияВИсторию <> СтрокаИсполнитель.ДатаПомещенияВИсторию Тогда 
					
					Если Не ЗначениеЗаполнено(ДатаПомещенияВИсторию) Тогда 
						ТабличныйДокумент.Вывести(ОбластьЗаголовокИстории);
					КонецЕсли;
					
					ДатаПомещенияВИсторию = СтрокаИсполнитель.ДатаПомещенияВИсторию;
					
					ПериодИРезультат = ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию);
					ОбластьИсполнителиШапка.Параметры.Период = ПериодИРезультат.Период;
					ОбластьИсполнителиШапка.Параметры.РезультатСогласования = ПериодИРезультат.РезультатСогласования;
						
					ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
				КонецЕсли;
				
				ОбластьИсполнители.Параметры.Заполнить(СтрокаИсполнитель);
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда 
					ОбластьИсполнители.Параметры.Исполнитель = СтрокаИсполнитель.Исполнитель;
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РольИсполнителя) Тогда 
						ОтборСтрок = Новый Структура("Исполнитель", СтрокаИсполнитель.Исполнитель);
						НайденныеСтроки = СтрокаСсылка.Строки.НайтиСтроки(ОтборСтрок);
						Если НайденныеСтроки.Количество() > 1 Тогда // есть одинаковые исполнители
							ОбластьИсполнители.Параметры.Должность = СтрокаИсполнитель.РольИсполнителя;
						КонецЕсли;
					КонецЕсли;	
				Иначе
					ОбластьИсполнители.Параметры.Исполнитель = СтрокаИсполнитель.РольИсполнителя;
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьИсполнители);
			КонецЦикла;
			
		Иначе 
			
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
				ОбластьИсполнители.Параметры.Заполнить(СтрокаИсполнитель);
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда 
					ОбластьИсполнители.Параметры.Исполнитель = СтрокаИсполнитель.Исполнитель;
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РольИсполнителя) Тогда 
						ОтборСтрок = Новый Структура("Исполнитель", СтрокаИсполнитель.Исполнитель);
						НайденныеСтроки = СтрокаСсылка.Строки.НайтиСтроки(ОтборСтрок);
						Если НайденныеСтроки.Количество() > 1 Тогда // есть одинаковые исполнители
							ОбластьИсполнители.Параметры.Должность = СтрокаИсполнитель.РольИсполнителя;
						КонецЕсли;
					КонецЕсли;	
				Иначе
					ОбластьИсполнители.Параметры.Исполнитель = СтрокаИсполнитель.РольИсполнителя;
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьИсполнители);
			КонецЦикла;
		КонецЕсли;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СтрокаСсылка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = Дата(3000, 1, 1); 
	ДатаОкончания = Дата(1, 1, 1);
	
	Для Каждого Строка Из ТаблицаСроков Цикл 
		Если ДатаПомещенияВИсторию = Строка.ДатаПомещенияВИсторию Тогда 
			ДатаОкончания = Макс(ДатаОкончания, Строка.ДатаИсполнения);
			
			Если ЗначениеЗаполнено(Строка.Источник) Тогда 
				Если ТипЗнч(Строка.Источник) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
					ДатаНачала = Мин(ДатаНачала, 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Источник, "ДатаНачала"));
				Иначе 
					ДатаНачала = Мин(ДатаНачала, 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Источник, "Дата"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
	Для Каждого Строка Из ТаблицаСроков Цикл 
		Если ДатаПомещенияВИсторию = Строка.ДатаПомещенияВИсторию Тогда 
			Если Не ЗначениеЗаполнено(Строка.РезультатСогласования) Тогда 
				РезультатСогласования = Перечисления.РезультатыСогласования.ПустаяСсылка();
				Прервать;
			ИначеЕсли Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
				Прервать;
			ИначеЕсли Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
				РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Период = "";
	Если ДатаНачала <> Дата(3000, 1, 1) И ДатаОкончания <> Дата(1, 1, 1) Тогда 
		
		Если ДатаНачала <> Дата(1, 1, 1) Тогда 
			Период = СтрШаблон(НСтр("ru = 'Дата начала: %1 Дата окончания: %2'; en = 'Start date: %1 End date: %2'"),
				Формат(ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'"), Формат(ДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;		
			
	ИначеЕсли ДатаНачала = Дата(3000, 1, 1) Тогда 
		
		Если ДатаОкончания <> Дата(1, 1, 1) Тогда 
			Период = СтрШаблон(НСтр("ru = 'Дата окончания: %1'; en = 'End date: %1'"), Формат(ДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'")); 
		КонецЕсли;	
		
	ИначеЕсли ДатаОкончания = Дата(1 ,1, 1) Тогда 
		
		Если ДатаНачала <> Дата(1, 1, 1) Тогда 
			Период = СтрШаблон(НСтр("ru = 'Дата начала: %1'; en = 'Start date: %1'"), Формат(ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'")); 
		КонецЕсли;	
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Период", Период);
	СтруктураВозврата.Вставить("РезультатСогласования", РезультатСогласования);
	
	Возврат СтруктураВозврата;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// Удаление виз 

// Удаляет переданную визу
Процедура УдалитьВизу(Виза) Экспорт 
	
	Виза.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Не Виза.ПометкаУдаления);
	
КонецПроцедуры	

// Удаляет переданные визы
// визы - массив виз либо таблица значений 
Процедура УдалитьВизы(Визы) Экспорт 
	
	Для Каждого Виза Из Визы Цикл
		УдалитьВизу(Виза);
	КонецЦикла;
	
КонецПроцедуры	

// Отмечает визы по бизнес-процессу как удаленные
Процедура ОтметитьУдаленнымиВизыПоБизнесПроцессу(БизнесПроцесс, Отметка) Экспорт 
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(БизнесПроцесс)) Тогда
		БизнесПроцессСсылка = БизнесПроцесс;
		
		Исполнители = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			БизнесПроцесс, "Исполнители").Выгрузить();
	Иначе
		БизнесПроцессСсылка = БизнесПроцесс.Ссылка;
		Исполнители = БизнесПроцесс.Исполнители;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БизнесПроцессСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипыПредметов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		БизнесПроцесс, ТипыПредметов, Истина);
	
	Если Предметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Источники = Новый Массив;
	
	Для Каждого СтрИсполнитель Из Исполнители Цикл
		Если ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
			Источники.Добавить(СтрИсполнитель.ЗадачаИсполнителя);
		КонецЕсли;
	КонецЦикла;
	Источники.Добавить(БизнесПроцессСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Ссылка
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Источник В(&Источники)";
	
	Запрос.УстановитьПараметр("Источники", Источники);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Виза Из Результат Цикл
		ОбъектВизы = Виза.Ссылка.ПолучитьОбъект();
		ОбъектВизы.Удалена = Отметка;
		ОбъектВизы.Записать();
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Заполнение виз 

// Заполняет исполнителей в бизнес-процессе из активных виз предмета 
Процедура ЗаполнитьИсполнителейИзАктивныхВиз(БизнесПроцесс) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		Возврат;
	КонецЕсли;	
	
	ТипыПредметов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		БизнесПроцесс, ТипыПредметов, Истина);
	
	Если Предметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВизыСогласования.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И ВизыСогласования.Исполнитель ССЫЛКА Справочник.Пользователи
	|			ТОГДА ВизыСогласования.Исполнитель
	|		ИНАЧЕ ВизыСогласования.РольИсполнителя
	|	КОНЕЦ КАК Исполнитель
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ В(&Предметы)
	|	И НЕ ВизыСогласования.ПомещенаВИсторию
	|	И НЕ ВизыСогласования.ПометкаУдаления
	|	И НЕ ВизыСогласования.Удалена
	|	И ВизыСогласования.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.ПустаяСсылка)
	|	И ВизыСогласования.Источник = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;	
	
КонецПроцедуры	

// Заполняет таблицу значений формы визами согласования документа
Процедура ЗаполнитьСписокВиз(ЭтаФорма, ПоказыватьУдаленные = Ложь) Экспорт
	
	Документ = ЭтаФорма.Объект.Ссылка;
	Элементы = ЭтаФорма.Элементы;
	
	Если Не ЭтаФорма.ИспользоватьВизыСогласования Тогда 
		Элементы.ГруппаВизыСогласования.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Документ.Пустая() Тогда 
		Элементы.ГруппаНетВизСогласования.Видимость = Истина;
		Элементы.ГруппаЕстьВизы.Видимость = Ложь;
		Элементы.ПоказатьУдаленныеВизыСогласования.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Визы = ПолучитьВизыДокумента(Документ, Истина, ПоказыватьУдаленные, Истина);
	Визы.Сортировать("Порядок");
	
	ТаблицаВиз = ЭтаФорма.ВизыСогласования;
	ТаблицаВиз.Очистить();
	
	Для Каждого Виза Из Визы Цикл
		НоваяСтрока = ТаблицаВиз.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Виза);
		НоваяСтрока.КартинкаСтатусаПодписи = 0;
		Если Виза.Подписана Тогда
			Если Не ЗначениеЗаполнено(Виза.ДатаПроверкиПодписи) Тогда
				НоваяСтрока.КартинкаСтатусаПодписи = 1;
			Иначе
				НоваяСтрока.КартинкаСтатусаПодписи = ?(Виза.ПодписьВерна, 2, 3);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.КоличествоВиз = Визы.Количество();
	Элементы.ГруппаНетВизСогласования.Видимость = (ЭтаФорма.КоличествоВиз = 0);
	Элементы.ГруппаЕстьВизы.Видимость = (ЭтаФорма.КоличествоВиз > 0);
	Элементы.ВизыСогласования.Видимость = (ЭтаФорма.КоличествоВиз > 0);
	
	Если Визы.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ВизыСогласования КАК ВизыСогласования
			|ГДЕ
			|	ВизыСогласования.Документ = &Документ
			|	И ВизыСогласования.ПометкаУдаления";
		Запрос.УстановитьПараметр("Документ", Документ);
		КоличествоУдаленныхВизСогласования = Запрос.Выполнить().Выбрать().Количество();
		
		Если КоличествоУдаленныхВизСогласования = 0 Тогда
			Элементы.ПоказатьУдаленныеВизыСогласования.Видимость = Ложь;
		Иначе
			Элементы.ПоказатьУдаленныеВизыСогласования.Видимость = Истина;
			Элементы.ПоказатьУдаленныеВизыСогласования.Заголовок = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Показать удаленные (%1)'; en = 'Show deleted items (%1)'"),
					КоличествоУдаленныхВизСогласования);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВизыСогласования.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|ГДЕ
		|	ВизыСогласования.Документ = &Документ
		|	И ВизыСогласования.ПомещенаВИсторию = ИСТИНА
		|	И ВизыСогласования.ПометкаУдаления = ЛОЖЬ
		|	И ВизыСогласования.Удалена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Количество > 0 Тогда 
		ЭтаФорма.Элементы.ИсторияСогласования.Видимость = Истина;
		ЭтаФорма.Элементы.ИсторияСогласования.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'История согласования (%1)'; en = 'Approval history (%1)'"), Строка(Выборка.Количество));
	Иначе 
		Элементы.ИсторияСогласования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Рекомендуется использовать ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону.
//
Процедура ДобавитьИсполнителейСогласованияИзШаблона(Форма) Экспорт
	
	ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(
		Форма.Объект.Шаблон,
		Форма.ВизыСогласования);
	
КонецПроцедуры

// Выполняет обработку виз при начале новой итерации согласования
Процедура ОбработатьВизыПриНачалеИтерации(БизнесПроцесс) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		Возврат;
	КонецЕсли;
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		БизнесПроцесс, ТипыДокументов, Истина);

	Для Каждого Документ Из Предметы Цикл
		
		// помещаем старые визы в историю
		Визы = ПолучитьАктивныеВизыПоБизнесПроцессуИЗадачам(Документ, БизнесПроцесс);
		ПоместитьВизыВИсторию(Визы, БизнесПроцесс.Автор);
		
		// создаем новые визы
		Для Каждого Строка Из БизнесПроцесс.Исполнители Цикл
			СтруктураИсполнителя = Новый Структура("Исполнитель, РольИсполнителя");
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				СтруктураИсполнителя.Исполнитель = Строка.Исполнитель;
				СтруктураИсполнителя.РольИсполнителя = Справочники.ПолныеРоли.ПустаяСсылка();
			Иначе
				СтруктураИсполнителя.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
				СтруктураИсполнителя.РольИсполнителя = Строка.Исполнитель;
			КонецЕсли;
			
			СоздатьВизуПоБизнесПроцессу(Документ, БизнесПроцесс, СтруктураИсполнителя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// Прочие процедуры 

// Возвращает варианты старта бизнес-процесса в зависимости от существующих виз в документе
Функция ПроверитьПересечениеВизИИсполнителей(Документ, Исполнители) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		КодВозврата = "стартовать";
		Возврат КодВозврата;
	КонецЕсли;	
	
	Визы = ПолучитьАктивныеВизыДокумента(Документ);
	Если Визы.Количество() = 0 Тогда 
		КодВозврата = "стартовать";
		Возврат КодВозврата;
	КонецЕсли;	
	
	КодВозврата = "досогласовать";
	Для Каждого Строка Из Исполнители Цикл
		
		СтруктураИсполнителя = Новый Структура("Исполнитель, 
			|РольИсполнителя, 
			|ОсновнойОбъектАдресации, 
			|ДополнительныйОбъектАдресации");
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
			СтруктураИсполнителя.Исполнитель = Строка.Исполнитель;
			СтруктураИсполнителя.РольИсполнителя = Справочники.ПолныеРоли.ПустаяСсылка();
		Иначе
			СтруктураИсполнителя.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			СтруктураИсполнителя.РольИсполнителя = Строка.Исполнитель;
		КонецЕсли;	
		
		Виза = ПолучитьАктивнуюВизуПоИсполнителю(Документ, СтруктураИсполнителя);
		Если Виза <> Неопределено Тогда 
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не ЗначениеЗаполнено(Виза.Источник) Тогда 
				
				Если ЗначениеЗаполнено(Виза.РезультатСогласования) Тогда 
					КодВозврата = "пересогласовать";
					Возврат КодВозврата;
				Иначе	
					КодВозврата = "стартовать";
				КонецЕсли;
				
			Иначе
				
				БизнесПроцессЗавершен = Ложь;
				Если ТипЗнч(Виза.Источник) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
					
					БизнесПроцессЗавершен = Виза.Источник.Завершен 
						ИЛИ Виза.Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
						Или Виза.Источник.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано 
						Или Виза.Источник.РезультатСогласования = 
						Перечисления.РезультатыСогласования.СогласованоСЗамечаниями; 
						
				ИначеЕсли ТипЗнч(Виза.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
					
					БизнесПроцессЗавершен = Виза.Источник.БизнесПроцесс.Завершен
						Или Виза.Источник.БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.ПустаяСсылка()
						Или Виза.Источник.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
						Или Виза.Источник.БизнесПроцесс.РезультатСогласования = 
						Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
					
				КонецЕсли;
				
				Если БизнесПроцессЗавершен Тогда // бизнес-процесс завершен	
					КодВозврата = "пересогласовать";
					Возврат КодВозврата;
				Иначе // бизнес-процесс не завершен
					КодВозврата = "нестартовать";
					Возврат КодВозврата;
				КонецЕсли;							
				
			КонецЕсли;	
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если КодВозврата = "досогласовать" Тогда 
		
		ЕстьРезультаты = Ложь;
		Для Каждого Виза из Визы Цикл
			Если ЗначениеЗаполнено(Виза.РезультатСогласования) Тогда 
				ЕстьРезультаты = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ЕстьРезультаты = Ложь Тогда 
			КодВозврата = "стартовать";
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат КодВозврата;
	
КонецФункции

// Переносит визы из временной таблицы на форме в регистр
Процедура ПослеЗаписиДокументаНаСервере(Форма) Экспорт
	
	Если Форма.ВизыСогласования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Форма.ВизыСогласования Цикл
		Если Строка.Ссылка.Пустая() Тогда
			НовыйЭлемент = Справочники.ВизыСогласования.СоздатьЭлемент();
			НовыйЭлемент.Наименование = ПолучитьНаименованиеВизы(Форма.Объект.Ссылка);
			НовыйЭлемент.Документ = Форма.Объект.Ссылка;
			НовыйЭлемент.Исполнитель = Строка.Исполнитель;
			НовыйЭлемент.РольИсполнителя = Строка.РольИсполнителя;
			НовыйЭлемент.Автор = Пользователи.ТекущийПользователь();
			НовыйЭлемент.Порядок = МаксимальныйПорядокВизы(НовыйЭлемент.Документ) + 1;
			НовыйЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если среди активных виз есть несогласованные  
Функция ЕстьВизыНеСогласованные(Документ) Экспорт 
	
	Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ);
	
	ЕстьНеСогласованные = Ложь;
	Для Каждого Виза Из Визы Цикл
		Если Виза.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			ЕстьНеСогласованные = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат	ЕстьНеСогласованные;	
	
КонецФункции

// Возвращает Истина, если среди активных виз есть находящиеся на согласовании
Функция ЕстьВизыНаСогласовании(Документ) Экспорт 
	
	Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ);
	
	ЕстьНаСогласовании = Ложь;
	Для Каждого Виза Из Визы Цикл
		Если Виза.РезультатСогласования = Перечисления.РезультатыСогласования.ПустаяСсылка() Тогда 
			ЕстьНаСогласовании = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат ЕстьНаСогласовании;		
	
КонецФункции

// Формирует наименование визы
Функция ПолучитьНаименованиеВизы(Документ) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Виза согласования документа ""%1""'; en = 'Endoresement of document ""%1""'"), Документ.Наименование);
	
КонецФункции

// В документе уже есть виза исполнителя задачи
Функция УжеЕстьВизаИсполнителяЗадачи(ЗадачаСсылка, НайденныйПредмет, НайденнаяВиза) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачаСсылка, ТипыДокументов, Истина);
		
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"Исполнитель, РольИсполнителя");
		
	Для Каждого Предмет Из Предметы Цикл
			
		СтруктураИсполнитель = Новый Структура;
		Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда 
			СтруктураИсполнитель.Вставить("Исполнитель", РеквизитыЗадачи.Исполнитель);
		Иначе
			СтруктураИсполнитель.Вставить("Исполнитель", Пользователи.ТекущийПользователь());
		КонецЕсли;	
		СтруктураИсполнитель.Вставить("РольИсполнителя", РеквизитыЗадачи.РольИсполнителя);
		
		АктивнаяВиза = РаботаСВизамиСогласования.ПолучитьАктивнуюВизуПоИсполнителю(
			Предмет, СтруктураИсполнитель);
			
		Если АктивнаяВиза = Неопределено 
		 Или Не ЗначениеЗаполнено(АктивнаяВиза.Источник)
		 Или АктивнаяВиза.Источник = ЗадачаСсылка 
		 Или Не ЗначениеЗаполнено(АктивнаяВиза.РезультатСогласования) Тогда 
			Продолжить;
		КонецЕсли;
		
		НайденныйПредмет = Предмет;
		НайденнаяВиза = АктивнаяВиза;
		
		Возврат Истина;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти
