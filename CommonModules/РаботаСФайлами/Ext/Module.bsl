
#Область ПрограммныйИнтерфейс

// Возвращает Истина, если это элемент данных, относящийся к подсистеме РаботаСФайлами.
//
Функция ЭтоЭлементРаботаСФайлами(ЭлементДанных) Экспорт
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов")
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВерсииФайлов");
	
КонецФункции

// Возвращает Истина в параметре ЭтоФайл, если это элемент данных, относящийся к подсистеме РаботаСФайлами
//
Процедура ЭтоЭлементФайл(ЭлементДанных, ЭтоФайл) Экспорт
	
	ЭтоФайл = ЭтоФайл Или ЭтоЭлементРаботаСФайлами(ЭлементДанных);
	
КонецПроцедуры

// Возвращает Истина в параметре Значение, если элемент данных (справочник Файл) запрещен к загрузке
//
Процедура ЭлементЗапрещенКЗагрузке(ЭлементДанных, ПолучениеЭлемента, Значение) Экспорт
	
	Значение = Ложь;
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Файлы")
	 ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Файлы") Тогда
	 
		 Если ЭлементДанных.ЭтоНовый() Тогда // добавлен новый файл
		 
			ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
			СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
			РасширениеФайла = ЭлементДанных.ТекущаяВерсияРасширение;
			Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
				ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
				Значение = Истина;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;
	 
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов")
	 ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
	 
		 Если ЭлементДанных.ЭтоНовый() Тогда // добавлен новый файл
		 
			ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
			СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
			РасширениеФайла = ЭлементДанных.Расширение;
			Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
				ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
				Значение = Истина;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;
	 
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает имя файла при обмене
//
Функция УстановитьИмяФайлаПриОтправкеДанныхФайла(ЭлементДанных, ИмяКаталогаФайлов, УникальныйИдентификатор) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		НовыйПутьФайла = ИмяКаталогаФайлов;
		НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПутьФайла, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
		НовыйПутьФайла = НовыйПутьФайла + УникальныйИдентификатор; 
		Возврат НовыйПутьФайла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет файл в том при обмене
//
Процедура ДобавитьНаДискПриПолученииДанныхФайла(ЭлементДанных, ДвоичныеДанные, ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, ИмяБезРасширения, Расширение, РазмерФайла) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлуНаТоме, СсылкаНаТом, 
			ВремяИзменения, ЭлементДанных.НомерВерсии, ИмяБезРасширения, Расширение, РазмерФайла,
			ЭлементДанных.Зашифрован, Неопределено, ЭлементДанных.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью объектов-владельцев файлов.
// Определен для объектов, кроме Документ.
//
// Параметры:
//  Источник - Объект - стандартный параметр события ПередЗаписью, например, СправочникОбъект.
//                      Исключение - ДокументОбъект.
//  Отказ    - Булево - стандартный параметр события ПередЗаписью.

//
Процедура УстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления") Тогда
		ПометитьНаУдалениеПриложенныеФайлы(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью объектов-владельцев файлов.
// Определен только для объектов Документ.
//
// Параметры:
//  Источник        - ДокументОбъект           - стандартный параметр события ПередЗаписью.
//  Отказ           - Булево                   - стандартный параметр события ПередЗаписью.
//  РежимЗаписи     - РежимЗаписиДокумента     - стандартный параметр события ПередЗаписью.
//  РежимПроведения - РежимПроведенияДокумента - стандартный параметр события ПередЗаписью.
//
Процедура УстановитьПометкуУдаленияФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления") Тогда
		ПометитьНаУдалениеПриложенныеФайлы(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помечает \ снимает пометку удаления у приложенных файлов
Процедура ПометитьНаУдалениеПриложенныеФайлы(ВладелецФайла, ПометкаУдаления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = '""%1"" не может быть удален,
				           |т.к. содержит файл ""%2"",
				           |занятый для редактирования.'; en = '""%1"" cannot be deleted, as it contains the file ""%2"" locked for editing.'"),
				Строка(ВладелецФайла),
				Строка(Выборка.Ссылка));
			КонецЕсли;
			
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры	

// Выполняет дополнительную обработку при отправке данных обмена.
// Помещает данные присоединенного файла из регистра во временное хранилище, адрес которого
// запоминается в реквизите ФайлХранилище.
//
Процедура ВыполнитьДополнительнуюОбработкуПриОтправкеДанных(ЭлементДанных) Экспорт
	
	Если Не ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ЭлементДанных.Ссылка);
	
	ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры

// Выполняет дополнительную обработку при получении данных обмена.
// Размещает присоединенные файлы в регистре.
//
Процедура ВыполнитьДополнительнуюОбработкуПриПолученииДанных(ЭлементДанных) Экспорт
	
	Если Не ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ЭлементДанных.ФайлХранилище.Получить();
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", Значение);
	КонецЕсли;
	
	ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	
КонецПроцедуры

// Обработчик подписки "при записи" версии файла
//
Процедура ВерсииФайловПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПереименованиеФайла") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	// копируем реквизиты из версии в файл
	ТекущаяВерсия = Источник;
	ФайлСсылка = Источник.Владелец;
	ТекущаяВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	
	Если Не ТекущаяВерсия.Ссылка.Пустая() Тогда
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, 
			"ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания, ТекущаяВерсияАвтор, ТекущаяВерсияРасширение, ТекущаяВерсияНомерВерсии, ТекущаяВерсияТом, ТекущаяВерсияПутьКФайлу, ТекущаяВерсияКод, ТекущаяВерсияДатаМодификацииФайла");
			
			Если РеквизитыФайла.ТекущаяВерсияРазмер <> ТекущаяВерсия.Размер 
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаСоздания <> ТекущаяВерсия.ДатаСоздания
				ИЛИ РеквизитыФайла.ТекущаяВерсияРасширение <> ТекущаяВерсия.Расширение
				ИЛИ РеквизитыФайла.ТекущаяВерсияНомерВерсии <> ТекущаяВерсия.НомерВерсии
				ИЛИ РеквизитыФайла.ТекущаяВерсияТом <> ТекущаяВерсия.Том
				ИЛИ РеквизитыФайла.ТекущаяВерсияПутьКФайлу <> ТекущаяВерсия.ПутьКФайлу 
				ИЛИ РеквизитыФайла.ТекущаяВерсияКод <> ТекущаяВерсия.Код
				ИЛИ РеквизитыФайла.ИндексКартинки <> ТекущаяВерсия.ИндексКартинки
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаМодификацииФайла <> ТекущаяВерсия.ДатаМодификацииФайла
			Тогда
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
				
				Если ФайлОбъект <> Неопределено Тогда
				
				// Сменим индекс картинки, возможно, появилась версия или сменился индекс картинки у версии
				ФайлОбъект.ИндексКартинки = ТекущаяВерсия.ИндексКартинки;
				
				// копируем реквизиты для ускорения работы RLS
				ФайлОбъект.ТекущаяВерсияРазмер = ТекущаяВерсия.Размер;
				ФайлОбъект.ТекущаяВерсияДатаСоздания = ТекущаяВерсия.ДатаСоздания;
				ФайлОбъект.ТекущаяВерсияАвтор = ТекущаяВерсия.Автор;
				ФайлОбъект.ТекущаяВерсияРасширение = ТекущаяВерсия.Расширение;
				ФайлОбъект.ТекущаяВерсияНомерВерсии = ТекущаяВерсия.НомерВерсии;
				ФайлОбъект.ТекущаяВерсияТом = ТекущаяВерсия.Том;
				ФайлОбъект.ТекущаяВерсияПутьКФайлу = ТекущаяВерсия.ПутьКФайлу;
				ФайлОбъект.ТекущаяВерсияКод = ТекущаяВерсия.Код;
				ФайлОбъект.ТекущаяВерсияДатаМодификацииФайла = ТекущаяВерсия.ДатаМодификацииФайла;
				
				Если Источник.ДополнительныеСвойства.Свойство("РазмещениеФайловВТомах") Тогда
					ФайлОбъект.ДополнительныеСвойства.Вставить("РазмещениеФайловВТомах", Истина);
				КонецЕсли;
				
				Если Источник.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись подписанных файлов
				КонецЕсли;
				
				Если Источник.ДополнительныеСвойства.Свойство("ИзмененаПометкаУдаления") Тогда
					ФайлОбъект.ДополнительныеСвойства.Вставить("ИзмененаПометкаУдаления", Источник.ДополнительныеСвойства.ИзмененаПометкаУдаления);
				КонецЕсли;
				
				Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
					ФайлОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
					ФайлОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				КонецЕсли;
				
				ФайлОбъект.Записать();
					
				КонецЕсли;
			
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияФайла.Установить(Источник.Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ВерсияФайла = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписи ПриЗаписи файла
Процедура ФайлПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиВызовСервера.ПриЗаписиФайлаСервер(Источник);
	
КонецПроцедуры

#КонецОбласти
