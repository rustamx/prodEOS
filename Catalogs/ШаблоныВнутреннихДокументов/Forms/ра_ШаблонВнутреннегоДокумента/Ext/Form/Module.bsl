
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокРасширенийШаблонов = "doc, docx, dot, dotx, odt, txt, html, htm";
	Если Параметры.Свойство("ВидДокумента") И ЗначениеЗаполнено(Параметры.ВидДокумента) Тогда 
		Объект.ВидДокумента = Параметры.ВидДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		ТаблицаПравилаАвтозаполнения = Параметры.ЗначениеКопирования.ПравилаАвтозаполнения;
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
				
				МассивСтрок = ТаблицаПравилаАвтозаполнения.НайтиСтроки(Новый Структура("ШаблонФайла", ПодчиненныйФайл.Ссылка));
				Если МассивСтрок.Количество() > 0 Тогда 
					НоваяСтрока.ПравилоАвтозаполнения = МассивСтрок[0].ПравилоАвтозаполнения;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ФайлыДобавленные.Видимость = Истина;
			Элементы.Файлы.Видимость = Ложь;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("Массив")
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				Если АвтозаполнениеШаблоновФайловСервер.ФайлНаходитсяВИерархииПапокШаблонов(Файл) Тогда				
					НоваяСтрока.ШаблонОснованиеДляСоздания = Файл;
					НоваяСтрока.ДобавленИзШаблона = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ФайлыДобавленные.Видимость = Истина;
			Элементы.Файлы.Видимость = Ложь;
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
		КонецЕсли;
	Иначе 
		ЗаполнитьСписокФайлов();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	// Категории данных
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Для Каждого Категория Из Объект.Категории Цикл
			Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
		КонецЦикла;
	Иначе
		Элементы.СтраницаКатегории.Видимость = Ложь;
	КонецЕсли;
	
	ВестиУчетСторон = Ложь;
	ВестиУчетПоКонтрагентам = Ложь;
	ВестиУчетТоваровИУслуг = Ложь;
	ВестиУчетПоОрганизациям = Ложь;
	ИспользоватьПодписание = Ложь;
	ИспользоватьУтверждение = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента,
			"ВестиУчетПоКонтрагентам, ВестиУчетТоваровИУслуг, ВестиУчетПоОрганизациям, ВестиУчетСторон, ИспользоватьПодписание, ИспользоватьУтверждение");
		
		ВестиУчетПоКонтрагентам = РеквизитыВида.ВестиУчетПоКонтрагентам;
		ВестиУчетСторон = РеквизитыВида.ВестиУчетСторон;
		ВестиУчетПоОрганизациям = РеквизитыВида.ВестиУчетПоОрганизациям;
		ВестиУчетТоваровИУслуг = РеквизитыВида.ВестиУчетТоваровИУслуг;
		ИспользоватьПодписание = РеквизитыВида.ИспользоватьПодписание;
		ИспользоватьУтверждение = РеквизитыВида.ИспользоватьУтверждение;
		
		Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(ВсеТовары);
		
		Если ВестиУчетТоваровИУслуг Тогда
			Элементы.СтраницаТовары.Видимость = Истина;
		Иначе
			Элементы.СтраницаТовары.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
		И Не ВестиУчетСторон Тогда
			НазваниеОрганизации = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию());
			Элементы.ДекорацияОрганизация.Видимость = Истина;
			Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
	Иначе	
		Элементы.ДекорацияОрганизация.Видимость = Ложь;
	КонецЕсли;	
	
	ОбновитьВидимостьРеквизитов();
	
	ОбновитьИконкиУчастниковРабочейГруппыДокумента();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтандартныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Если КоличествоУчастниковРабочейГруппы > 0 Тогда 
		ЗаголовокРабочейГруппы = СтрШаблон(НСтр("ru = 'Доступен (%1)'; en = 'Available (%1)'"), 
			КоличествоУчастниковРабочейГруппы);
		Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Иначе 
		ЗаголовокРабочейГруппы = НСтр("ru = 'Доступен всем'; en = 'Available to everyone'");
		Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	КонецЕсли;
		
	КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	КонтактноеЛицоПустаяСсылка = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Если Объект.ГрифыУтверждения.Количество() > 0
		И ЗначениеЗаполнено(Объект.ГрифыУтверждения[0].АвторУтверждения) Тогда
			УтверждаетТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", Объект.ГрифыУтверждения[0].АвторУтверждения);	
	КонецЕсли;
		
	// Работа со сторонами
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтаФорма);
	Если ВестиУчетСторон Тогда
		УстановитьУсловноеОформление();
		
		Если Объект.Ссылка.Пустая() Тогда
			ОбновитьРеквизитыСторон();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		ЗаполнитьСписокФайлов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
			УстановитьДоступностьКоманд(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
			И Параметр.Свойство("Владелец")
			И Параметр.Владелец = Объект.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
			КонецЕсли;
			
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписаноПравилоАвтозаполнения" И Параметр.ВидДокумента = Объект.ВидДокумента
		И ЗначениеЗаполнено(Параметр.Правило) Тогда 
		ИзменилисьНастройкиАвтозаполнения = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Ссылка = Параметр.Шаблон Тогда 
				Строка.ПравилоАвтозаполнения = Параметр.Правило;
				Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Открыть'; en = 'Open'");
				ИзменилисьНастройкиАвтозаполнения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзменилисьНастройкиАвтозаполнения Тогда 
			Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	Если КоличествоУчастниковРабочейГруппы > 0 Тогда 
		ЗаголовокРабочейГруппы = СтрШаблон(НСтр("ru = 'Доступен (%1)'; en = 'Available (%1)'"), 
			КоличествоУчастниковРабочейГруппы);
		Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Иначе 
		ЗаголовокРабочейГруппы = НСтр("ru = 'Доступен всем'; en = 'Available to everyone'");
		Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	КонецЕсли;
	
	// Категории данных
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Для Каждого Категория Из Объект.Категории Цикл
			Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
		КонецЦикла;
	Иначе
		Элементы.СтраницаКатегории.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокФайлов();
	ОбновитьВидимостьРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ЗаполнениеНаименованияПоШаблону = Ложь;
	Если ЗначениеЗаполнено(ТекущийОбъект.Заголовок) Тогда 
		ОписаниеОшибки = "";
		МассивРеквизитов = Новый Массив;
		
		ДелопроизводствоКлиентСервер.ПолучитьПоляШаблонаНаименования(
			ТекущийОбъект.Заголовок, МассивРеквизитов, ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОписаниеОшибки,
				ТекущийОбъект,
				"Заголовок",,
				Отказ);
			Возврат;
		КонецЕсли;
		
		Если МассивРеквизитов.Количество() > 0 Тогда 
			Делопроизводство.ПоляШаблонаНаименованияНайдены(
				МассивРеквизитов, ТекущийОбъект.ВидДокумента, ОписаниеОшибки);
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОписаниеОшибки,
					ТекущийОбъект,
					"Заголовок",,
					Отказ);
				Возврат;
			КонецЕсли;
			
			ТекущийОбъект.ЗаполнениеНаименованияПоШаблону = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если Не ПараметрыЗаписи.ЭтоНовыйОбъект И Модифицированность И 
		ТекущийОбъект.Наименование <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Наименование") Тогда 
		ПараметрыЗаписи.Вставить("ИзменилосьНаименование", Истина);
	КонецЕсли;
	
	// Обработка рабочей группы
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
				Эл.Участник,
				Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	ИсходнаяРабочаяГруппа.Загрузить(НоваяРабочаяГруппа);
	
	ТекущийОбъект.ДополнительныеРеквизиты.Очистить();
	Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл 
		Если ЗначениеЗаполнено(ДопРеквизит.Значение) Тогда 
			НовСтрока = ТекущийОбъект.ДополнительныеРеквизиты.Добавить();
			НовСтрока.Свойство = ДопРеквизит.Свойство;
			НовСтрока.Значение = ДопРеквизит.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПравилаАвтозаполнения.Очистить();
	Для Каждого Строка Из Файлы Цикл
		НоваяСтрока = ТекущийОбъект.ПравилаАвтозаполнения.Добавить();
		НоваяСтрока.ШаблонФайла = Строка.Ссылка;
		НоваяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
		
		Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда
			ЕстьАвтозаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Автозаполнение = ЕстьАвтозаполнение;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ВестиУчетСторон", ВестиУчетСторон);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Категории данных
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Для Каждого Категория Из Объект.Категории Цикл
			Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(
				Категория.Значение);
		КонецЦикла;
	Иначе
		Элементы.СтраницаКатегории.Видимость = Ложь;
	КонецЕсли;
	
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	ОбновитьВидимостьРеквизитов();
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	// Создание файлов при сохранении нового документа
	НеобходимоЗаписатьПравила = Ложь;
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл
			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
						Источник.ТекущаяВерсия);
				КонецЕсли;
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
				
				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(
					Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ФайлТаблицы.ПравилоАвтозаполнения) Тогда 
				УстановитьПривилегированныйРежим(Истина);
				НовоеПравило = ФайлТаблицы.ПравилоАвтозаполнения.Скопировать();
				НовоеПравило.ШаблонФайла = Приемник;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовоеПравило);
				
				НоваяСтрока = Объект.ПравилаАвтозаполнения.Добавить();
				НоваяСтрока.ШаблонФайла = Приемник;
				НоваяСтрока.ПравилоАвтозаполнения = НовоеПравило.Ссылка;
				НеобходимоЗаписатьПравила = Истина;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Файлы
	Элементы.Файлы.Видимость = Истина;
	Элементы.ФайлыДобавленные.Видимость = Ложь;
	
	Если ПараметрыЗаписи.ЭтоНовыйОбъект Тогда 
		ЗаполнитьСписокФайлов();
	КонецЕсли;
	
	Если НеобходимоЗаписатьПравила Тогда 
		Записать();
	КонецЕсли;
	
	// Работа со сторонами
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтаФорма);
	Если ВестиУчетСторон Тогда
		УстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.РабочаяГруппаДокумента, "Участник");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(РабочаяГруппаТаблица, "Участник");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Товары, "Номенклатура");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ИсполнителиСогласования, "Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовыйОбъект Или 
		ПараметрыЗаписи.Свойство("ИзменилосьНаименование") И ПараметрыЗаписи.ИзменилосьНаименование Тогда 
		СтруктураОповещения = Новый Структура("ВидДокумента, Шаблон", Объект.ВидДокумента, Объект.Ссылка);
		Оповестить("ЗаписанШаблонДокумента", СтруктураОповещения); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаШаблона = Элемент.ТекстРедактирования;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента", Объект.ВидДокумента);
	ПараметрыОткрытия.Вставить("ШаблонНаименования", СтрокаШаблона);
	ПараметрыОткрытия.Вставить("Шаблон", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаголовокНачалоВыбораПродолжить", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ШаблонНаименованияДокумента", ПараметрыОткрытия,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбораПродолжить(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.Заголовок = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ВидДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуВыбораЗначения(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Адресат);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаголовокФормы = НСтр("ru = 'Выбор подписанта'; en = 'Select signer'");
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Подписант, ЗаголовокФормы);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Контрагенты = Новый Массив;
	Для Каждого Строка Из Объект.Контрагенты Цикл
		Контрагенты.Добавить(Строка.Контрагент);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Контрагент", 		Контрагенты);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	Если Объект.ГрифыУтверждения.Количество() > 0 Тогда
		ГрифУтверждения = Объект.ГрифыУтверждения[0];
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ГрифУтверждения.АвторУтверждения);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор утверждающего'; en = 'Select confirming person'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораУтверждающего", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораУтверждающего(ВыбранныйУтверждающий, ДопПараметры) Экспорт
	
	Если ВыбранныйУтверждающий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УтверждаетТекстОбработкаВыбора(Элементы.УтверждаетТекст, ВыбранныйУтверждающий, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ГрифыУтверждения.Очистить();
	УтверждаетТекст = "";
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ГрифыУтверждения.Количество() > 0 Тогда
		ГрифУтверждения = Объект.ГрифыУтверждения[0];
		ПоказатьЗначение(, ГрифУтверждения.АвторУтверждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ГрифыУтверждения.Очистить();
	ГрифУтверждения = Объект.ГрифыУтверждения.Добавить();
	ГрифУтверждения.АвторУтверждения = ВыбранноеЗначение;

	УтверждаетТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ВыбранноеЗначение);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			УтверждаетТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКонтрагенты

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'; en = 'Field ""Counterparty"" is not filled in'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСтороны

&НаКлиенте
Процедура СтороныСторонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ТекущиеДанные.Сторона = КонтрагентПустаяСсылка;
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоПустаяСсылка;
		ТекущиеДанные.Подписант = КонтактноеЛицоПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор стороны'; en = 'Select a party'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сторона) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Сторона);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.СтороныСторона,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = ПользователиПустаяСсылка;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоПустаяСсылка;	
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.Сторона = Контрагент;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	КонецЕсли;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныКонтактноеЛицоНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныКонтактноеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	КонецЕсли;	
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныПодписалНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныПодписант, "Подписант");
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрифыУтверждения

&НаКлиенте
Процедура ГрифыУтвержденияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ГрифыУтверждения.ТекущиеДанные.АвторУтверждения = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ГрифыУтверждения.Очистить();
	Для Каждого ВыбранныйАвтор Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.ГрифыУтверждения.Добавить();
		НоваяСтрока.АвторУтверждения = ВыбранныйАвтор;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияАвторУтвержденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьУтверждающегоДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияАвторУтвержденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияАвторУтвержденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаДокумента

&НаКлиенте
Процедура РабочаяГруппаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(
		Элемент, // РабочаяГруппаЭлемент
		НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Объект.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппыДляШаблоновДокументов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиСогласования

&НаКлиенте
Процедура ИсполнителиСогласованияИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьСогласующегоДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ИсполнителиСогласования.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ИсполнителиСогласования.Очистить();
	Для Каждого ВыбранныйИсполнитель Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.ИсполнителиСогласования.Добавить();
		НоваяСтрока.Исполнитель = ВыбранныйИсполнитель;
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекущийЗанятыйФайл(ФайлыСтрока, МассивЗахваченныхФайлов) Экспорт
	
	Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
		
		ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге, 
			|РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
		
		МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПравилоАвтозаполнения 
		И СтрНайти(СписокРасширенийШаблонов, НРег(Строка.Расширение)) > 0 Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан ""Вид документа"".'; en = 'Not specified ""Document type"".'"));
		КонецЕсли;
		
		//#Если НЕ ВебКлиент Тогда
			
			ВыполнитьАвтоЗаполнение(Строка);
			
		//#Иначе
		//	ПоказатьПредупреждение(, НСтр("ru = 'Настройка заполнения файлов в веб-клиенте не поддерживается. 
		//                                   |Используйте тонкий клиент.';
		//                                   |en = 'Setting fill files in the Web client is not supported. 
		//                                   |Use a thin client.'"));
		//#КонецЕсли
		
	Иначе
		
		ВыборФайла(Строка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWord(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыполнитьАвтоЗаполнение(ПараметрыВыполнения.Строка);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		
		СтрокаФайлов = "";
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для настройки заполнения закройте файл:  
                  | 
                  |%1.';
                  |en = 'To fill settings close file: 
                  |%1.'"),
			СтрокаФайлов);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
		ПараметрыОбработки = Новый Структура("Строка", Строка);	
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWord", ЭтотОбъект, ПараметрыОбработки);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьАвтоЗаполнение(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка", Строка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПравилаАвтозаполненияПродолжение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВладелецФайла", Объект.ВидДокумента);
	
	ЗначенияЗаполнения.Вставить("ШаблонФайла", Строка.Ссылка);
	ЗначенияЗаполнения.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Строка.ПравилоАвтозаполнения);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыФормы.Вставить("ШаблонФайла", Строка.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВестиУчетТоваровИУслуг", ВестиУчетТоваровИУслуг);
	
	Если Не ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
		ПараметрыФормы.Вставить("РежимСозданияДоговора", Истина);
	КонецЕсли;
	
	//Если АвтозаполнениеШаблоновФайловКлиентСервер.ЭтоMSWord(Строка.Расширение) Тогда 
	Если ЭтоMSWord(Строка.Расширение) Тогда 
		Открытьформу("Справочник.ПравилаАвтозаполненияФайлов.Форма.КраткаяФормаЭлемента", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения);
	Иначе 
		Открытьформу("Справочник.ПравилаАвтозаполненияФайлов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоMSWord(Расширение) Экспорт
	
	Возврат Расширение = "doc" 
		ИЛИ Расширение = "docx";
		
КонецФункции

&НаКлиенте
Процедура ВыборПравилаАвтозаполненияПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	Строка = ДополнительныеПараметры.Строка;
	
	Строка.ПравилоАвтозаполнения = Результат;
	Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Открыть'; en = 'Open'");
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина,,,,, НеОткрыватьФормуВыбораРежимаСозданияФайла);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийЭлемент = Элементы.Файлы;
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПараметрыВыполнения = Новый Структура("Файл", Файл);
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаПослеУстановкиРасширения", 
		ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Файл = ПараметрыВыполнения.Файл;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать();
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов + 1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'; en = 'Select only files but not directories.'"));
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(
						ФайлПринятый.Расширение);
					КоличествоФайлов = КоличествоФайлов + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФайлыДобавленные.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда
				Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
					Новый Структура("Группа", ТекущиеДанные.Ссылка));
				ПоказатьВопрос(Обработчик, 
					НСтр("ru = 'Выбран групповой элемент.
	                     |Добавить все содержимое группы?';
	                     |en = 'A group is selected.
	                     |Add all items of the group?'"), РежимДиалогаВопрос.ДаНет, 60);
				Возврат;
				
			Иначе 
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = Объект.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Количество = 1;
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
			ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");
		ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьСогласующих(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьСогласующихДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппыДокумента(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппыДляШаблоновДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагент(Команда)
	
	КоличествоКонтрагентов = Объект.Контрагенты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = Объект.Контрагенты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда 
			Объект.Контрагенты.Удалить(Строка); 
		КонецЕсли; 
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКонтрагентПродолжение",
		ЭтотОбъект);

	Если Объект.Контрагенты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все контрагенты, кроме первого, будут удалены. 
			|Продолжить?';
			|en = 'All counterparties except the first one will be deleted. 
			|Continue?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагентПродолжение(Результат, Параметры)Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Пока Объект.Контрагенты.Количество() > 1 Цикл
			Объект.Контрагенты.Удалить(1);
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;

	Если Объект.Контрагенты.Количество() > 0 Тогда
		Строка = Объект.Контрагенты[0];		
		Объект.Контрагент = Строка.Контрагент;
		Объект.КонтактноеЛицо = Строка.КонтактноеЛицо;
	Иначе	
		Объект.Контрагент = Неопределено;
		Объект.КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;

КонецПроцедуры

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов();

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрагенты;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		Объект.Категории, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		Объект.Категории, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


&НаКлиенте
Процедура ПодобратьНоменклатуру(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ПодобратьНоменклатуру.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
				Новый Структура("Группа", ТекущиеДанные.Ссылка));
			ПоказатьВопрос(Обработчик, 
				НСтр("ru = 'Выбран групповой элемент.
                     |Добавить все содержимое группы?';
                     |en = 'A group is selected.
                     |Add all items of the group?'"), РежимДиалогаВопрос.ДаНет, 60);
			Возврат;
			
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Количество = 1;
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУтверждающих(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУтверждающихДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	ФайлыПередНачаломДобавленияКлиент(Элементы.Файлы, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленныхДляРедактирования = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
		ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'; en = 'Printing files is not supported in web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'; en = 'Printing files is only possible in Windows.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравило(Команда)
	
	#Если ВебКлиент Тогда
		Сообщение = НСтр("ru = 'В web-клиенте нельзя осуществлять проверку правил.'; en = 'In web client it is impossible to verify the rules'");
		ПоказатьПредупреждение(,Сообщение);
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения) Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПравилоПродолжениеПослеВыбораДокумента",
		ЭтотОбъект,
		Новый Структура("ШаблонФайла, Расширение", 
			ТекущиеДанные.Ссылка,
			ТекущиеДанные.Расширение));
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидДокумента", Объект.ВидДокумента));
	ОткрытьФорму(
		"Справочник.ВнутренниеДокументы.Форма.ра_ФормаВыбора", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилоПродолжениеПослеВыбораДокумента(Результат, Параметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Выполняется заполнение шаблона файла. Пожалуйста, подождите...'; en = 'Is populated template file. Please wait...'"));
		РезультатЗаполненияФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			Параметры.ШаблонФайла,
			Ложь,
			УникальныйИдентификатор,
			Результат);
		Если РезультатЗаполненияФайла.Свойство("ДвоичныеДанныеЗаполненногоФайла")
			И РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
			
			Если РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла = "Linux" Тогда
				ОписаниеОшибки = НСтр("ru = 'Автозаполнение файлов Microsoft Word 2003 возможно только в Windows. 
	                                   |Обратитесь к администратору.';
	                                   |en = 'Autocomplete files Microsoft Word 2003 is only possible in Windows. 
	                                   |Contact the administrator.'");
				ПоказатьПредупреждение(,ОписаниеОшибки);
				Состояние();
				Возврат;
			КонецЕсли;
			
			ПутьКФайлу = ПолучитьИмяВременногоФайла(Параметры.Расширение);
			РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла.Записать(ПутьКФайлу);
			ДелопроизводствоКлиент.ОткрытьФайлПриложением(ПутьКФайлу);
			ПолноеИмяФайлаДляПроверки = ПутьКФайлу;
		КонецЕсли;
		Состояние();
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидДокументаПриИзмененииСервер()
	
	ОбновитьВидимостьРеквизитов();
	
	ОбновитьРеквизитыСторон();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитов()
	
	// ЕдиницыИзмерения
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента));
	ПараметрыФункциональныхОпций = ПолучитьПараметрыФункциональныхОпцийФормы();
	Элементы.ЕдиницыИзмерения.Видимость = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ИспользоватьСрокИсполнения;
	
	// Доп. реквизиты
	СписокДопРеквизитов = РаботаСШаблонамиДокументовСервер.ПолучитьНаборДопРеквизитовДокумента("ВнутренниеДокументы", Объект.ВидДокумента, Объект);
	РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(ДополнительныеРеквизиты, СписокДопРеквизитов);
	КоличествоСвойств = СписокДопРеквизитов.Количество();
	
	Если КоличествоСвойств > 0 Тогда
		Элементы.ДопРеквизиты.Видимость = Истина;
	Иначе 
		Элементы.ДопРеквизиты.Видимость = Ложь;
	КонецЕсли;	
	
	ВестиУчетСторон = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетСторон;
	ВестиУчетПоКонтрагентам = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетПоКонтрагентам;
	ВестиУчетПоОрганизациям = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетПоОрганизациям;
	
	ИспользоватьУтверждение = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ИспользоватьУтверждение;
	ИспользоватьПодписание = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ИспользоватьПодписание;
	
	Если ВестиУчетПоОрганизациям И Не ВестиУчетСторон Тогда
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наша организация'; en = 'Our company'");
		Элементы.Организация.Видимость = Истина;
	Иначе
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наше предприятие'; en = 'Our enterprise'");
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетПоНоменклатуреДел Тогда
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Истина;
	Иначе
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	ВестиУчетТоваровИУслуг = ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетТоваровИУслуг;
	Если ВестиУчетТоваровИУслуг Тогда
		Элементы.СтраницаТовары.Видимость = Истина;
	Иначе
		Элементы.СтраницаТовары.Видимость = Ложь;
	КонецЕсли;
	
	Если ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетПоАдресатам Тогда
		Элементы.Адресат.Видимость = Истина;
	Иначе
		Элементы.Адресат.Видимость = Ложь;
	КонецЕсли;
	
	Если ПараметрыФункциональныхОпций.ВидВнутреннегоДокумента.ВестиУчетПоСтатьямДДС Тогда
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Истина;
	Иначе
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
		Если ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
			Объект.СтатьяДвиженияДенежныхСредств = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
    Элементы.ГруппаСтороны.Видимость = ВестиУчетСторон;
	Элементы.УтверждаетТекст.Видимость = ИспользоватьУтверждение;
	Элементы.Подписант.Видимость = ИспользоватьПодписание И Не ВестиУчетСторон;
	
	УстановитьВидимостьКонтрагентов();
	
	// ТСК Шепелев М.Н.; 10.01.2019; task#2437 {
	ЭтоРезультатКО = Объект.ВидДокумента = Справочники.ВидыВнутреннихДокументов.ra_RezultatKontrolnoyOperacii;
	Элементы.ra_OblastPrimeneniya.Видимость = ЭтоРезультатКО;
	// ТСК Шепелев М.Н.; 10.01.2019; task#2437 }
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИзРеквизитовВСписок()
	
	Объект.Контрагенты.Очистить();
	
	Строка = Объект.Контрагенты.Добавить();
	Строка.Контрагент = Объект.Контрагент;
	Строка.КонтактноеЛицо = Объект.КонтактноеЛицо;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКонтрагентов()
	
	Элементы.ГруппаКонтрагент.Видимость = 
		ВестиУчетПоКонтрагентам
		И Не НесколькоКонтрагентов
		И Не ВестиУчетСторон;
		
	Элементы.Контрагенты.Видимость =
		ВестиУчетПоКонтрагентам
		И НесколькоКонтрагентов
		И Не ВестиУчетСторон;
	
КонецПроцедуры

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		Элементы.Страницы.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Работа с рабочими группами

&НаСервере
Процедура ОбновитьИконкиУчастниковРабочейГруппыДокумента()
	
	Для Каждого Строка Из  Объект.РабочаяГруппаДокумента Цикл
		Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Строка.Иконка = 1;
			Строка.ЭтоРоль = Истина;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			Строка.Иконка = 2;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Строка.Иконка = 2;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			Строка.Иконка = 3;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("Строка") Тогда
			Строка.Иконка = 4;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		Объект.Ссылка, 
		ПоказыватьУдаленныеФайлы);
		
	ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов,,, Истина);
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполнения");
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполненияСтр");
	
	Для Каждого Строка Из Объект.ПравилаАвтозаполнения Цикл
		НайденнаяСтрока = ТаблицаФайлы.Найти(Строка.ШаблонФайла, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаФайлы Цикл 
		Если СтрНайти(СписокРасширенийШаблонов, НРег(Строка.Расширение)) > 0 Тогда 
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
				Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Открыть'; en = 'Open'");
			Иначе
				Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Не настроено'; en = 'Not configured'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ПометкаУдаления)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Если Файл.Редактирует = ТекущийПользователь Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Или ТолькоПросмотр
		Или ТипЗнч(Элементы["Файлы"].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Редактировать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ПроверитьПравило"], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"], НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"], НЕ ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Изменить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Удалить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"],  Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"],  Не Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["ПроверитьПравило"], ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПеренестиНоменклатуруИзГруппы(Параметры.Группа);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры) 
	
	Делопроизводство.ПеренестиНоменклатуруИзГруппы(ЭтаФорма, ГруппаНоменклатуры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со сторонами

&НаСервере
Процедура ДобавитьСторону(Сторона, КонтактноеЛицо = Неопределено, ИндексКартинки = 2)
	
	Если Не ЗначениеЗаполнено(Сторона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСторона = Новый Структура("Сторона", Сторона);
	Если Объект.Стороны.НайтиСтроки(ПараметрыОтбораСторона).Количество() = 0 Тогда
		НоваяСтрока = Объект.Стороны.Добавить();
		НоваяСтрока.Сторона = Сторона;
		НоваяСтрока.ИндексКартинкиСтороны = ИндексКартинки;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтороны(СтрокаТаблицы)
	
	Если ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 1;
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Организации") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 2;
	Иначе
		СтрокаТаблицы.ИндексКартинкиСтороны = 0;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	РаботаСПодписямиДокументов.УстановитьУсловноеСторон(УсловноеОформление, Объект.Организация);	

КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыСторон()

	Объект.Стороны.Очистить();
	
	Если ВестиУчетСторон Тогда
		Объект.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		ДобавитьСторону(Объект.Организация);
	КонецЕсли;
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если не ЗначениеЗаполнено(Объект.ВидДокумента) тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено поле ""Вид документа"".'; en = 'Data exchange settings item not found.'");
		Сообщение.Поле  = "Объект.ВидДокумента";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
