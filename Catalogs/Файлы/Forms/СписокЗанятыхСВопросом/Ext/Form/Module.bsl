&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеВопрос = Параметры.СообщениеВопрос;
	СообщениеЗаголовок = Параметры.СообщениеЗаголовок;
	Заголовок = Параметры.Заголовок;
	
	Если Параметры.Свойство("ТекстКнопкиЗакончитьИЗакрыть") Тогда
		Команды.Да.Заголовок = Параметры.ТекстКнопкиЗакончитьИЗакрыть;
	КонецЕсли;	
	Если Параметры.Свойство("ТекстКнопкиЗакрыть") Тогда
		Команды.КомандаЗакрыть.Заголовок = Параметры.ТекстКнопкиЗакрыть;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Параметры.ВладелецФайла) Тогда
		
		Если ТипЗнч(Параметры.ВладелецФайла) = Тип("СписокЗначений") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СписокФайлов.Отбор, "ВладелецФайла", Параметры.ВладелецФайла, ВидСравненияКомпоновкиДанных.ВСписке);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СписокФайлов.Отбор, "ВладелецФайла", Параметры.ВладелецФайла);
		КонецЕсли;
			
		ВладелецФайла = Параметры.ВладелецФайла;
			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Параметры.Редактирует) Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СписокФайлов.Отбор, "Редактирует", Параметры.Редактирует);
		Редактирует = Параметры.Редактирует;	
	КонецЕсли;
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокФайлов, "Идентификатор", Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, УникальныйИдентификатор);	
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаконченоРедактирование" Тогда
		Элементы.Список.Обновить(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		Элементы.Список.ТекущаяСтрока, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = Элементы.Список.ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Истина;
	ПараметрыОбновленияФайла.Редактирует = Элементы.Список.ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
		Элементы.Список.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = Истина;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
		Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Список.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЗанятыхФайлов(ВладелецФайла, Редактирует)
	
	Запрос = Новый Запрос;
	
	Если Не ЗначениеЗаполнено(Редактирует) Тогда
		Редактирует = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если ТипЗнч(ВладелецФайла) = Тип("СписокЗначений") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
			|		ПО Файлы.ТекущаяВерсия = ФайлыВРабочемКаталогеКомпьютера.Версия
			|			И (ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор)
			|			И (ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ)
			|ГДЕ
			|	Файлы.Редактирует = &Редактирует
			|	И Файлы.ВладелецФайла В(&ВладелецФайла)";
			
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
			|		ПО Файлы.ТекущаяВерсия = ФайлыВРабочемКаталогеКомпьютера.Версия
			|			И (ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор)
			|			И (ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ)
			|ГДЕ
			|	Файлы.Редактирует = &Редактирует
			|	И Файлы.ВладелецФайла = &ВладелецФайла";
			
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Редактирует", Редактирует);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	МассивФайлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивФайлов;
	
КонецФункции

&НаКлиенте
Процедура Да(Команда)
	
	ЗанятыеФайлы = ПолучитьСписокЗанятыхФайлов(ВладелецФайла, Редактирует);
	
	Если ЗанятыеФайлы.Количество() <> 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ЗакрытьФормуПослеОсвобождения", ЭтотОбъект);
		
		РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
			Обработчик,
			ЗанятыеФайлы,
			УникальныйИдентификатор,
			Истина, // СоздатьНовуюВерсию
			"", // КомментарийКВерсии
			Истина, // ПоказыватьОповещение
			Истина); //ОсвобождатьБезВопросаФайлыКоторыхНетВРабочемКаталоге
			
	Иначе
			
		Закрыть(КодВозвратаДиалога.Да);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеОсвобождения(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
		"КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Закрыть(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура Нет(Команда)
	
	Закрыть(КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	Закрыть(КодВозвратаДиалога.Да);
	
КонецПроцедуры


