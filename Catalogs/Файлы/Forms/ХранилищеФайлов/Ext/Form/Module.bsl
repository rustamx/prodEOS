&НаКлиенте
Перем ПерваяАктивизация;

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Согласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Утверждение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("КомплексныйПроцесс");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого СтрСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(Элементы.Список.ДанныеСтроки(СтрСписка).Ссылка);
	КонецЦикла;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, ВыделенныеСтроки, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.АвтоНавигационнаяСсылка = Ложь;
	ЭтаФорма.НавигационнаяСсылка = "e1cib/command/Справочник.Файлы.Команда.ПапкиФайлов";
	
	УсловноеОформление.Элементы.Очистить();
	РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Список);
	
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	
	Если Параметры.Свойство("Папка") = Истина И Параметры.Папка <> Неопределено Тогда
		ПапкаПриОткрытии = Параметры.Папка;
		ПапкаЗаданаИзвне = Истина;
	Иначе
		ПапкаПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "ТекущаяПапка");
	КонецЕсли;
	
	Если ПапкаПриОткрытии = Справочники.ПапкиФайлов.ПустаяСсылка() Тогда
		ПапкаПриОткрытии = ПредопределенноеЗначение("Справочник.ПапкиФайлов.Шаблоны");
	Иначе
		ПапкаПриОткрытииОбъект = Неопределено;
		Попытка
			ПапкаПриОткрытииОбъект = ПапкаПриОткрытии.ПолучитьОбъект();
		Исключение
		КонецПопытки;
		
		Если ПапкаПриОткрытииОбъект = Неопределено Тогда
			ПапкаПриОткрытии = ПредопределенноеЗначение("Справочник.ПапкиФайлов.Шаблоны");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Папки.ТекущаяСтрока = ПапкаПриОткрытии;
	
	Список.Параметры.УстановитьЗначениеПараметра("Владелец", ПапкаПриОткрытии);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ИзменитьОтображениеУдаленныхФайлов(ПоказыватьУдаленныеФайлы, Список, Папки, 
		Элементы.ФормаПоказыватьУдаленныеФайлы);
		
	Если Параметры.Свойство("Файл") = Истина И Параметры.Файл <> Неопределено Тогда
		Если ЗначениеЗаполнено(Параметры.Файл) Тогда
			Элементы.Список.ТекущаяСтрока = Параметры.Файл;
		КонецЕсли;
	КонецЕсли;
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()
		И Не ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		
		Элементы.ПодписанЭП.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьКатегорииДанных Тогда
		//Скрытие колонки "Есть категории"
		Элементы.ЕстьКатегории.Видимость = Ложь;
		Элементы.ВключитьПросмотрКатегориями.Видимость = Ложь;
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	Иначе
		ВсеКатегорииПредопределенное = Справочники.КатегорииДанных.ВсеКатегории;
		ПостроитьДеревоКатегорий();
		КатегорииПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "ОткрытыеКатегории");
		ТекущаяКатегорияПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "ТекущаяКатегория");
		ТекущаяКатегория = ТекущаяКатегорияПриОткрытии;
		ВыбранныеКатегорииПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "ВыбранныеКатегории");
		Если ВыбранныеКатегорииПриОткрытии.Количество() = 1 И
			ВыбранныеКатегорииПриОткрытии[0].Значение = ТекущаяКатегория Тогда
			ВыбранныеКатегорииПриОткрытии.Очистить();
		КонецЕсли;
		ОтборДанных = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "ОтборДанных");	
		СУчетомПодкатегорийЗагрузка = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "СУчетомПодкатегорий");
		СУчетомПодкатегорий = СУчетомПодкатегорийЗагрузка;
		ПоказыватьСписокОтмеченных = ХранилищеНастроекДанныхФорм.Загрузить("ХранилищеФайлов", "ПоказыватьСписокОтмеченных");
		
		Если Не ЗначениеЗаполнено(ОтборДанных) Тогда
			ОтборДанных = "ПоОднойИз";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СУчетомПодкатегорийЗагрузка) Тогда
			СУчетомПодкатегорий = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПоказыватьСписокОтмеченных) Тогда
			ПоказыватьСписокОтмеченных = Ложь;
		КонецЕсли;
		Если ОтборДанных = "ПоВсем" Тогда
			Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
			Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
		Иначе
			Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
			Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
		КонецЕсли;
		
		Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
		Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
		Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
		
		РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;

	ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	ПереключитьВидПросмотра();
	
	ПапкаПустаяСсылка = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		Автообновление.ЗагрузитьНастройкиАвтообновленияСписка(ЭтаФорма, "Список");
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.ФормаЭПИШифрованиеКонтекстное.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных 
		И ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии, ВыбранныеКатегории);
		РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		ПрименитьФильтрКатегорий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхКатегорий.Очистить();
	РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	ПриЗакрытииНаСервере(
		ИспользоватьКатегорииДанных,
		СписокРаскрытыхКатегорий,
		ТекущаяКатегория,
		ВыбранныеКатегории,
		ОтборДанных,
		СУчетомПодкатегорий,
		ПоказыватьСписокОтмеченных,
		?(ПапкаПриОткрытии <> Элементы.Папки.ТекущаяСтрока, Элементы.Папки.ТекущаяСтрока, Неопределено));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(
				ИспользоватьКатегорииДанных,
				СписокРаскрытыхКатегорий,
				ТекущаяКатегория,
				ВыбранныеКатегории,
				ОтборДанных,
				СУчетомПодкатегорий,
				ПоказыватьСписокОтмеченных,
				Папка)
	Если Папка <> Неопределено Тогда
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "ТекущаяПапка", Папка);
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных Тогда
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "ОткрытыеКатегории", СписокРаскрытыхКатегорий);	
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "ТекущаяКатегория", ТекущаяКатегория);
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "ВыбранныеКатегории", ВыбранныеКатегории);
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "ОтборДанных", ОтборДанных);
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "СУчетомПодкатегорий", СУчетомПодкатегорий);
		ХранилищеНастроекДанныхФорм.Сохранить("ХранилищеФайлов", "ПоказыватьСписокОтмеченных", ПоказыватьСписокОтмеченных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		Элементы.Список.Обновить();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Список.ТекущаяСтрока = Параметр;
		КонецЕсли;
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Файлы") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортКаталоговЗавершен" Тогда
		Элементы.Папки.Обновить();
		Элементы.Список.Обновить();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Папки.ТекущаяСтрока = Параметр;
		КонецЕсли;
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено Тогда
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = Элементы.Папки.ТекущаяСтрока Тогда
					Элементы.Список.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Список.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		УстановитьДоступностьФайловыхКоманд();
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория"
		И Источник.ВладелецФормы.Имя <> "ДеревоКатегорий" Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ПапкиФайлов.Форма.ФормаВыбора")
		И ИсточникВыбора.Параметры.Свойство("ПереносВПапку")
		И ИсточникВыбора.Параметры.ПереносВПапку = Истина Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		РаботаСФайламиКлиент.ПеренестиФайлыВПапку(ВыделенныеСтроки, ВыбранноеЗначение);
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			ФайлСсылка = ВыделеннаяСтрока;
			Оповестить(
				"Запись_Файл", 
				Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
					"ДанныеФайлаИзменены", 
					ФайлСсылка, Неопределено, Неопределено,
					Неопределено),
					ФайлСсылка);
			
		КонецЦикла;
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ПапкаЗаданаИзвне Тогда
		ВидПросмотра = Настройки["ВидПросмотра"];
		Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям 
			И НЕ ИспользоватьКатегорииДанных Тогда
			ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
		КонецЕсли;
		ПереключитьВидПросмотра();
	КонецЕсли;	
	
	Если Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда
		
		ИзменитьОтображениеУдаленныхФайлов(ПоказыватьУдаленныеФайлы, Список, Папки, 
			Элементы.ФормаПоказыватьУдаленныеФайлы);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловВыполнить()
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ Результат Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
		
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		Если Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите папку, куда будут загружены файлы.'; en = 'Select the folder where the files will be loaded.'"));
			Возврат;
		КонецЕсли;
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
	Иначе
		ТекущаяПапка = Неопределено;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(ТекущаяПапка);
		
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПапки(Команда)
	#Если Не ВебКлиент Тогда
	
		// заранее выбираем каталог на диске (до открытия диалога импорта)
		Каталог = "";
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = РаботаСФайламиКлиент.ПолучитьФильтрДляДиалогаВыбораФайла();
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог'; en = 'Select a directory'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			КаталогНаДиске = ДиалогОткрытияФайла.Каталог;
			Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
				Если Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
					Возврат;
				КонецЕсли;
				ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
			Иначе
				ТекущаяПапка = Неопределено;
			КонецЕсли;
			
			СписокКатегорий = Новый Массив;
			Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
				Если ВыбранныеКатегории.Количество() = 0 Тогда
					СписокКатегорий.Добавить(ТекущаяКатегория);
				Иначе
					Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
						СписокКатегорий.Добавить(ВыбраннаяКатегория.Значение);
					КонецЦикла
				КонецЕсли;	
			КонецЕсли;

			ПараметрыИмпорта = Новый Структура("ПапкаДляДобавления, КаталогНаДиске, СписокКатегорий", ТекущаяПапка, КаталогНаДиске, СписокКатегорий);
			ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаПапки", ПараметрыИмпорта);
		КонецЕсли;
	#Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте импорт папок не поддерживается. Используйте команду ""Создать"" в списке файлов.'; en = 'Directory import is not supported in web client. Click the ""Create"" button in the file list form.'"));
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКатегорий(ФайлСсылка, ИспользоватьАвтоматическуюКатегоризациюДанных)
	
	СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
	СписокКатегорийДанныхЗначение.Очистить();
	
	РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегорияхПоСсылке(ФайлСсылка, СписокКатегорийДанныхЗначение, 
		ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		
	ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных");	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Если Параметры.Модифицированность Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Параметры.Объект); 
		Элементы.Список.Обновить();
	КонецЕсли;	
		
КонецПроцедуры

// Обработка события "Выбор" у "Список"
//
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ПодписанЭП Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуЭП", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.Задачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ВыбраннаяСтрока),
			ЭтаФорма);
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.ЕстьКатегории Тогда
		
		ЗаполнитьСписокКатегорий(ВыбраннаяСтрока, ИспользоватьАвтоматическуюКатегоризациюДанных);
		ПараметрыОповещения = Новый Структура("Объект", ВыбраннаяСтрока);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуПодбораКатегорийПродолжение",
			ЭтотОбъект,
			ПараметрыОповещения);

		РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
			СписокКатегорийДанных, ОписаниеОповещения); 
		
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.СостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбраннаяСтрока, ЭтаФорма);
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.ТекущаяВерсияДатаМодификацииФайла Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.Автор Тогда
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.Автор);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ПерсональныеНастройки = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	КакОткрывать = ПерсональныеНастройки.ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	Если ИмяКаталога = Неопределено Или ПустаяСтрока(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		ВыбраннаяСтрока,
		Неопределено,
		УникальныйИдентификатор,
		Неопределено,
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", 
		ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

// Обработка события "ПередНачаломДобавления" у "Список"
//
&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Отказ = Истина;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		ВладелецФайла = Элементы.Папки.ТекущаяСтрока;
		
	ИначеЕсли Не Копирование И ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Обработчик = Новый ОписаниеОповещения("СоздатьФайлСКатегориямиПослеВыбораПапки", ЭтотОбъект);
		ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора", , ЭтаФорма,,,,Обработчик, РежимОткрытия);
		Возврат;
		
	ИначеЕсли Не Копирование И ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Обработчик = Новый ОписаниеОповещения("СоздатьФайлПослеВыбораПапки", ЭтотОбъект);
		ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора", , ЭтаФорма,,,,Обработчик, РежимОткрытия);
		Возврат;
		
	КонецЕсли;

	ФайлОснование = Элементы.Список.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		
		Попытка
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтотОбъект);
		Исключение
			ПоказатьПредупреждение(, СтрШаблон(
			                 НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
			                 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) ));
		КонецПопытки;
		
	Иначе
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка события "ПриАктивизацииСтроки" у "Папки"
&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		Если Элементы.Папки.ТекущаяСтрока = Неопределено ИЛИ Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
			Элементы.СоздатьФайл.Доступность = Ложь;
			Элементы.КонтекстноеМенюСписокСоздать.Доступность = Ложь;
		Иначе
			Элементы.СоздатьФайл.Доступность = Истина;
			Элементы.КонтекстноеМенюСписокСоздать.Доступность = Истина;
		КонецЕсли;
		
		Если ПерваяАктивизация = Истина ИЛИ ПерваяАктивизация = Неопределено Тогда
			ПерваяАктивизация = Ложь;
			Возврат;
		КонецЕсли;		
		
		Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
			ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет правый список
&НаКлиенте
Процедура ОбработкаОжидания()
	Если Элементы.Папки.ТекущаяСтрока <> Список.Параметры.Элементы.Найти("Владелец").Значение Тогда
		КлючеваяОперация = "ФайлыВыполнениеКомандыОтборПоПапке";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		Список.Параметры.УстановитьЗначениеПараметра(
			"Владелец", Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

// Процедура обеспечивает вызов механизма экспорта папки в файловую систему
&НаКлиенте
Процедура ЭкспортПапкиВыполнить()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаЭкспорта", Элементы.Папки.ТекущаяСтрока);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаЭкспортаПапки", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВыполнить()
	
	Если СтрокаПоиска = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан текст для поиска.'; en = 'You need to specify text to search for.'"), , "СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	НайтиФайлыИлиПапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	НайтиФайлыИлиПапки();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыИлиПапки()
	
	Если СтрокаПоиска = "" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = НайтиФайлыИлиПапкиСервер();
	Если Результат = "НичегоНеНайдено" Тогда
		ПоказатьПредупреждение(, СтрШаблон(
		                 НСтр("ru = 'Не удалось найти файл или папку, наименование или код которого содержит ""%1"".'; en = 'Could not find the file or folder, whose name or code contains ""%1"".'"),
		                 СтрокаПоиска ));
	Иначе 
		Если Результат = "НайденФайл" Тогда
			ТекущийЭлемент = Элементы.Список;
		Иначе 
			Если Результат = "НайденаПапка" Тогда
				ТекущийЭлемент = Элементы.Папки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Папки.Обновить();
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Функция СтрЗаменитьСпецСимволом(Строка, Символ, СпецСимвол)
	СтрокаНовая = СтрЗаменить(Строка, Символ, СпецСимвол + Символ);
	Возврат СтрокаНовая;
КонецФункции

&НаСервере
Функция НайтиФайлыИлиПапкиСервер()
	
	Перем НайденныйФайл;
	Перем НайденнаяПапка;
	
	Найдено = Ложь;
	
	Запрос = Новый Запрос;
	
	СтрокаПоискаНовая = СтрокаПоиска;
	
	СпецСимвол = "|";
	СтрокаПоискаНовая = СтрЗаменитьСпецСимволом(СтрокаПоискаНовая, "[", СпецСимвол);
	СтрокаПоискаНовая = СтрЗаменитьСпецСимволом(СтрокаПоискаНовая, "]", СпецСимвол);
	
	Запрос.Параметры.Вставить("Строка", "%" + СтрокаПоискаНовая + "%");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	Файлы.Ссылка
				   |ИЗ
				   |	Справочник.Файлы КАК Файлы
				   |ГДЕ
				   |	Файлы.ПолноеНаименование ПОДОБНО &Строка СПЕЦСИМВОЛ ""|""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НайденныйФайл = Выборка.Ссылка;
		Найдено = Истина;
	КонецЕсли;
	
	Если Не Найдено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	Файлы.Ссылка
					   |ИЗ
					   |	Справочник.Файлы КАК Файлы
					   |ГДЕ
					   |	Файлы.Код ПОДОБНО &Строка";
						
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НайденныйФайл = Выборка.Ссылка;
			Найдено = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не Найдено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	ПапкиФайлов.Ссылка
					   |ИЗ
					   |	Справочник.ПапкиФайлов КАК ПапкиФайлов
					   |ГДЕ
					   |	ПапкиФайлов.Наименование ПОДОБНО &Строка";
						
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НайденнаяПапка = Выборка.Ссылка;
			Найдено = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не Найдено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	ПапкиФайлов.Ссылка
					   |ИЗ
					   |	Справочник.ПапкиФайлов КАК ПапкиФайлов
					   |ГДЕ
					   |	ПапкиФайлов.Код ПОДОБНО &Строка";
						
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НайденнаяПапка = Выборка.Ссылка;
			Найдено = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НайденныйФайл <> Неопределено Тогда 
		Элементы.Папки.ТекущаяСтрока = НайденныйФайл.ВладелецФайла;
		Список.Параметры.УстановитьЗначениеПараметра("Владелец", Элементы.Папки.ТекущаяСтрока);
		Элементы.Список.ТекущаяСтрока = НайденныйФайл.Ссылка;
		Возврат "НайденФайл";
	КонецЕсли;
	
	Если НайденнаяПапка <> Неопределено Тогда
		Элементы.Папки.ТекущаяСтрока = НайденнаяПапка;
		Возврат "НайденаПапка";
	КонецЕсли;	
	
	Возврат "НичегоНеНайдено";
КонецФункции

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Попытка
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, Элементы.Папки.ТекущаяСтрока, ЭтотОбъект);
		Исключение
			ПоказатьПредупреждение(, СтрШаблон(
			                 НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
			                 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) ));
		КонецПопытки;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Обработчик = Новый ОписаниеОповещения("СоздатьФайлСКатегориямиПослеВыбораПапки", ЭтотОбъект);
		ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора", , ЭтаФорма,,,,Обработчик, РежимОткрытия);
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Обработчик = Новый ОписаниеОповещения("СоздатьФайлПослеВыбораПапки", ЭтотОбъект);
		ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора", , ЭтаФорма,,,,Обработчик, РежимОткрытия);
		
	КонецЕсли;
					 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлСКатегориямиПослеВыбораПапки(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда
		НСтрока = НСтр("ru = 'В режиме просмотра ""Списком"" или ""По категориям"" для создания файлов необходимо выбрать папку, в которой они будут храниться.'; en = 'To create the file in the view mode ""As a list"" or ""By categories"", you must select the folder in which file will be stored.'");
		ПоказатьПредупреждение(,НСтрока);	
		Возврат;
	КонецЕсли;
				
	Попытка
		
		Если ВыбранныеКатегории.Количество() > 0 Тогда
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, РезультатВыполнения, ЭтотОбъект,,,, ВыбранныеКатегории);
		ИначеЕсли ТекущаяКатегория <> Неопределено
			И НЕ ТекущаяКатегория.Пустая()
			И НЕ ТекущаяКатегория = ВсеКатегорииПредопределенное Тогда
			ВыбранныеКатегории.Добавить(ТекущаяКатегория);
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, РезультатВыполнения, ЭтотОбъект,,,, ВыбранныеКатегории);
			ВыбранныеКатегории.Очистить();	
		Иначе
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, РезультатВыполнения, ЭтотОбъект,,,, ВыбранныеКатегории);
		КонецЕсли;
		
	Исключение
		ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
			ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлПослеВыбораПапки(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда
		НСтрока = НСтр("ru = 'Для создания файла необходимо выбрать папку.'; en = 'To create a file, you must select a folder.'");
		ПоказатьПредупреждение(,НСтрока);	
		Возврат;
	КонецЕсли;
				
	Попытка
		РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, РезультатВыполнения, ЭтотОбъект);
	Исключение
		ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
			ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуВыполнить()
	
	ПараметрыСозданияПапки = Новый Структура("Родитель", Элементы.Папки.ТекущаяСтрока);
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаОбъекта", ПараметрыСозданияПапки, Элементы.Папки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") 
		И Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") 
		И Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В режиме просмотра ""По папкам"" для создания файлов необходимо выбрать папку, в которой они будут храниться.'; en = 'To create the file in the view mode ""By folders"", you must select the folder in which file will be stored.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = Неопределено;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
	
	СписокКатегорий = Новый СписокЗначений;		
	ПараметрыВыполнения.Вставить("СписокКатегорий", СписокКатегорий);
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") 
		ИЛИ ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ПродолжитьПеретаскивание", ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора",,ЭтаФорма,,,,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
		
	Иначе
		ВладелецФайла = Элементы.Папки.ТекущаяСтрока;
	КонецЕсли;
	
	ПродолжитьПеретаскивание(ВладелецФайла, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПеретаскивание(ВладелецФайла, ПараметрыВыполнения) Экспорт
	
	ПараметрыПеретаскивания = ПараметрыВыполнения.ПараметрыПеретаскивания;
	СписокКатегорий = ПараметрыВыполнения.СписокКатегорий;
	
	МассивИменФайлов = Новый Массив;
	ЭтоПеретаскиваниеФайловИзвне = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ВладелецФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В режиме просмотра ""Списком"" или ""По категориям"" для создания файлов необходимо выбрать папку, в которой они будут храниться.'; en = 'To create the file in the view mode ""As a list"" or ""By categories"", you must select the folder in which file will be stored.'"));
		Возврат;	
	КонецЕсли;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		
		Если ВыбранныеКатегории.Количество() = 0 Тогда
			СписокКатегорий.Добавить(ТекущаяКатегория);
		Иначе
			Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
				СписокКатегорий.Добавить(ВыбраннаяКатегория.Значение);
			КонецЦикла
		КонецЕсли;	
		
		ПараметрыВыполнения.Вставить("СписокКатегорий", СписокКатегорий);
		
	КонецЕсли;
	
	ЭтоПеретаскиваниеФайловИзвне = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		Попытка
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПараметрыПеретаскивания.Значение.ПолноеИмя,ВладелецФайла, ЭтаФорма, , , , СписокКатегорий);
		Исключение
			ПоказатьПредупреждение(,СтрШаблон(
			                 НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
			                 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) ));
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда	
		ЭтоПеретаскиваниеФайловИзвне = Истина;
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			ЭтоПеретаскиваниеФайловИзвне = Истина;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
			
		ИначеЕсли ПараметрыПеретаскивания.Значение.Количество() >= 1 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
			
				РаботаСФайламиВызовСервера.СкопироватьФайлы(ПараметрыПеретаскивания.Значение, ВладелецФайла);
				Элементы.Папки.Обновить();
				Элементы.Список.Обновить();
				
				Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
					ПолноеОписание = СтрШаблон(
						НСтр("ru = 'Файл ""%1"" скопирован в папку ""%2""'; en = 'The file ""%1"" copied to the folder ""%2""'"), ПараметрыПеретаскивания.Значение[0], Строка(ВладелецФайла));
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Файл скопирован.'; en = 'The file was copied.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				Иначе
					ПолноеОписание = СтрШаблон(
						НСтр("ru = 'Файлы (%1 шт.) скопированы в папку ""%2""'; en = 'Files (%1 PCs.) copied into the folder ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), Строка(ВладелецФайла));
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Файлы скопированы.'; en = 'The files were copied.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				КонецЕсли;
				
			Иначе		
				
				Если РаботаСФайламиВызовСервера.УстановитьВладельцаФайла(ПараметрыПеретаскивания.Значение, ВладелецФайла) = Истина Тогда
					Элементы.Список.Обновить();
					
					Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
						ПолноеОписание = СтрШаблон(
							НСтр("ru = 'Файл ""%1"" перенесен в папку ""%2""'; en = 'The file ""%1"" was moved to the folder ""%2""'"), ПараметрыПеретаскивания.Значение[0], ВладелецФайла);
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Файл перенесен.'; en = 'File moved.'"),
							,
							ПолноеОписание,
							БиблиотекаКартинок.Информация32);
					Иначе
						ПолноеОписание = СтрШаблон(
							НСтр("ru = 'Файлы (%1 шт.) перенесены в папку ""%2""'; en = 'Files (%1 PCs.) moved to the folder ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), ВладелецФайла);
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Файлы перенесены.'; en = 'Files moved.'"),
							,
							ПолноеОписание,
							БиблиотекаКартинок.Информация32);
					КонецЕсли;
				КонецЕсли;
				Возврат;
				
			КонецЕсли;		
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЭтоПеретаскиваниеФайловИзвне = Истина Тогда
		ПараметрыИмпорта = Новый Структура("ПапкаДляДобавления, МассивИменФайлов, СписокКатегорий", ВладелецФайла, МассивИменФайлов, СписокКатегорий);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаПеретаскивания", ПараметрыИмпорта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	ЭтоПеретаскиваниеФайловИзвне = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда		
		ЭтоПереносПапок = ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ПапкиФайлов");
		
		Если Не ЭтоПереносПапок Тогда
			Возврат;	
		КонецЕсли;			
	КонецЕсли;	               	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Попытка
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПараметрыПеретаскивания.Значение.ПолноеИмя, Строка, ЭтаФорма);
		Исключение
			ПоказатьПредупреждение(,СтрШаблон(
			                 НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
			                 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) ));
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда	
		ЭтоПеретаскиваниеФайловИзвне = Истина;
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			ЭтоПеретаскиваниеФайловИзвне = Истина;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
				
				РаботаСФайламиВызовСервера.СкопироватьФайлы(ПараметрыПеретаскивания.Значение, Строка);
				
				Элементы.Список.Обновить();
				
				Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
					ПолноеОписание = СтрШаблон(
						НСтр("ru = 'Файл ""%1"" скопирован в папку ""%2""'; en = 'The file ""%1"" copied to the folder ""%2""'"), ПараметрыПеретаскивания.Значение[0], Строка);
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Файл скопирован.'; en = 'The file was copied.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				Иначе
					ПолноеОписание = СтрШаблон(
						НСтр("ru = 'Файлы (%1 шт.) скопированы в папку ""%2""'; en = 'Files (%1 PCs.) copied into the folder ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), Строка);
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Файлы скопированы.'; en = 'The files were copied.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				КонецЕсли;
				Возврат;
				
			Иначе	
				
				Если РаботаСФайламиВызовСервера.УстановитьВладельцаФайла(ПараметрыПеретаскивания.Значение, Строка) = Истина Тогда
					Элементы.Список.Обновить();
					
					Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
						ПолноеОписание = СтрШаблон(
							НСтр("ru = 'Файл ""%1"" перенесен в папку ""%2""'; en = 'The file ""%1"" was moved to the folder ""%2""'"), ПараметрыПеретаскивания.Значение[0], Строка);
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Файл перенесен.'; en = 'File moved.'"),
							ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение[0]),
							ПолноеОписание,
							БиблиотекаКартинок.Информация32);
					Иначе
						ПолноеОписание = СтрШаблон(
							НСтр("ru = 'Файлы (%1 шт.) перенесены в папку ""%2""'; en = 'Files (%1 PCs.) moved to the folder ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), Строка);
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Файлы перенесены.'; en = 'Files moved.'"),
							,
							ПолноеОписание,
							БиблиотекаКартинок.Информация32);
					КонецЕсли;
				КонецЕсли;
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			НайденоЗацикливание = Ложь;
			Если РаботаСФайламиВызовСервера.СменитьРодителяПапок(ПараметрыПеретаскивания.Значение, Строка, НайденоЗацикливание) = Истина Тогда
				Элементы.Папки.Обновить();
				Элементы.Список.Обновить();
				
				Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
					Элементы.Папки.ТекущаяСтрока = ПараметрыПеретаскивания.Значение[0];
					
					ПолноеОписание = СтрШаблон(
						НСтр("ru = 'Папка ""%1"" перенесена в папку ""%2""'; en = 'Folder ""%1"" moved into folder ""%2""'"), ПараметрыПеретаскивания.Значение[0], Строка);
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Папка перенесена.'; en = 'Folder moved.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				Иначе
					ПолноеОписание = СтрШаблон(
						НСтр("ru = 'Папки (%1 шт.) перенесены в папку ""%2""'; en = 'Folders (%1 pcs.) moved to folder ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), Строка);
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Папки перенесены.'; en = 'Folders moved.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				КонецЕсли;
				
			Иначе
				Если НайденоЗацикливание = Истина Тогда
					ПоказатьПредупреждение(, НСтр("ru = 'Зацикливание уровней !'; en = 'Looping levels!'"));
				КонецЕсли;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПеретаскиваниеФайловИзвне = Истина Тогда
		ПараметрыИмпорта = Новый Структура("ПапкаДляДобавления, МассивИменФайлов", Строка, МассивИменФайлов);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаПеретаскивания", ПараметрыИмпорта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			УстановитьДоступностьКоманд(Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
				Элементы.Список.ТекущиеДанные.Редактирует,
				Элементы.Список.ТекущиеДанные.ПодписанЭП,
				Элементы.Список.ТекущиеДанные.Зашифрован);
			Возврат;	
					
		КонецЕсли;	
			
	КонецЕсли;	
	
	СделатьКомандыНедоступными();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьКомандыНедоступными()
	
	Элементы.ЗакончитьРедактирование.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокЗакончитьРедактирование.Доступность = Ложь;
	
	Элементы.СохранитьИзменения.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокСохранитьИзменения.Доступность = Ложь;
	
	Элементы.Освободить.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокОсвободить.Доступность = Ложь;
	
	Элементы.Занять.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокЗанять.Доступность = Ложь;
	
	Элементы.Редактировать.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокРедактировать.Доступность = Ложь;
	
	Элементы.ПеренестиВРаздел.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокПеренестиВРаздел.Доступность = Ложь;
	
	Элементы.ФормаПодписать.Доступность = Ложь;
	Элементы.ФормаПодписатьКонтекст.Доступность = Ложь;
	
	Элементы.ФормаСохранитьВместеСЭП.Доступность = Ложь;
	Элементы.ФормаСохранитьВместеСЭПКонтекст.Доступность = Ложь;
	
	Элементы.ФормаЗашифровать.Доступность = Ложь;
	Элементы.ФормаЗашифроватьКонтекст.Доступность = Ложь;
	
	Элементы.ФормаРасшифровать.Доступность = Ложь;
	Элементы.ФормаРасшифроватьКонтекст.Доступность = Ложь;
	
	Элементы.ФормаДобавитьЭПИзФайла.Доступность = Ложь;
	Элементы.ФормаДобавитьЭПИзФайлаКонтекст.Доступность = Ложь;
	
	Элементы.ФормаРаспознать.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюРаспознать.Доступность = Ложь;
	
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокОбновитьИзФайлаНаДиске.Доступность = Ложь;
	
	Элементы.СохранитьКак.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокСохранитьКак.Доступность = Ложь;
	
	Элементы.ОткрытьКаталогФайла.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокОткрытьКаталогФайла.Доступность = Ложь;
	
	Элементы.ОткрытьФайл.Доступность = Ложь;
	Элементы.КонтекстноеМенюСписокОткрытьФайл.Доступность = Ложь;
	
	Элементы.ВыбратьКатегории.Доступность = Ложь;
	Элементы.ВыбратьКатегорииКонекст.Доступность = Ложь;
	
	Элементы.СправочникФайлыВставитьШтрихкодВФайл.Доступность = Ложь;
	Элементы.СправочникФайлыВставитьШтрихкодВФайлКонтекст.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(РедактируетТекущийПользователь, Редактирует, ПодписанЭП, Зашифрован)
	
	РедактируетДругой = Не Редактирует.Пустая() И НЕ РедактируетТекущийПользователь;
	
	Элементы.ЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	Элементы.КонтекстноеМенюСписокЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	
	Элементы.СохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	Элементы.КонтекстноеМенюСписокСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	
	Элементы.Освободить.Доступность = Не Редактирует.Пустая();
	Элементы.КонтекстноеМенюСписокОсвободить.Доступность = Не Редактирует.Пустая();
	
	Элементы.Занять.Доступность = Редактирует.Пустая() И НЕ ПодписанЭП;
	Элементы.КонтекстноеМенюСписокЗанять.Доступность = Редактирует.Пустая() И НЕ ПодписанЭП;
	
	Элементы.Редактировать.Доступность = НЕ ПодписанЭП И НЕ РедактируетДругой;
	Элементы.КонтекстноеМенюСписокРедактировать.Доступность = НЕ ПодписанЭП И НЕ РедактируетДругой;
	
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = НЕ ПодписанЭП;
	Элементы.КонтекстноеМенюСписокОбновитьИзФайлаНаДиске.Доступность = НЕ ПодписанЭП;
	
	Элементы.ФормаПодписать.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	Элементы.ФормаПодписатьКонтекст.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	
	Элементы.ФормаДобавитьЭПИзФайла.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	Элементы.ФормаДобавитьЭПИзФайлаКонтекст.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	
	Элементы.ФормаСохранитьВместеСЭП.Доступность = ПодписанЭП;
	Элементы.ФормаСохранитьВместеСЭПКонтекст.Доступность = ПодписанЭП;
	
	Элементы.ФормаЗашифровать.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	Элементы.ФормаЗашифроватьКонтекст.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	
	Элементы.ФормаРасшифровать.Доступность = Зашифрован;
	Элементы.ФормаРасшифроватьКонтекст.Доступность = Зашифрован;
	
	Расширение = Элементы.Список.ТекущиеДанные.Расширение;
	ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
	РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
	
	Элементы.ФормаРаспознать.Доступность = РасширениеПоддерживается И Редактирует.Пустая();
	Элементы.СписокКонтекстноеМенюРаспознать.Доступность = РасширениеПоддерживается И Редактирует.Пустая();
	
	Элементы.СохранитьКак.Доступность = Истина;
	Элементы.КонтекстноеМенюСписокСохранитьКак.Доступность = Истина;
	
	Элементы.ОткрытьКаталогФайла.Доступность = Истина;
	Элементы.КонтекстноеМенюСписокОткрытьКаталогФайла.Доступность = Истина;
	
	Элементы.ОткрытьФайл.Доступность = Истина;
	Элементы.КонтекстноеМенюСписокОткрытьФайл.Доступность = Истина;
	
	Элементы.ВыбратьКатегории.Доступность = Истина;
	Элементы.ВыбратьКатегорииКонекст.Доступность = Истина;
	
	Элементы.СправочникФайлыВставитьШтрихкодВФайл.Доступность = Истина;
	Элементы.СправочникФайлыВставитьШтрихкодВФайлКонтекст.Доступность = Истина;
	
	Элементы.ПеренестиВРаздел.Доступность = Истина;
	Элементы.КонтекстноеМенюСписокПеренестиВРаздел.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоКатегорий()
	
	Дерево = РеквизитФормыВЗначение("ДеревоКатегорий");
	Дерево = РаботаСКатегориямиДанных.ПостроитьДеревоКатегорий(Дерево,, Истина, Перечисления.ТипыОбъектов.Файлы);	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКатегорий");
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
	Параметр.Использование = Ложь;
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		Параметр.Использование = Истина;
	КонецЕсли;
    РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, 10);
	
	Элементы.ВключитьПросмотрКатегориями.Пометка = Ложь;
	Элементы.ВключитьПросмотрПапками.Пометка = Ложь;
	Элементы.ВключитьПросмотрСписком.Пометка = Ложь;
	
    Элементы.СнятьВсеОтметки.Видимость = Ложь;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком Тогда
		
		Элементы.Страницы.Видимость = Ложь;
		
		Элементы.Список.ПодчиненныеЭлементы.ЕстьКатегории.Видимость = ИспользоватьКатегорииДанных;
        Элементы.Список.ПодчиненныеЭлементы.ВладелецФайла.Видимость = Истина;
		Элементы.СоздатьФайл.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокСоздать.Доступность = Истина;
		Элементы.Создать.Видимость = Ложь;
		Элементы.ВключитьПросмотрСписком.Пометка = Истина;
		
		Элементы.ДополнениеСтрокаПоиска.Видимость = Истина;

	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		
		Элементы.Страницы.Видимость = Истина;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПапки;
		
		Если ТипЗнч(Элементы.Папки.ТекущаяСтрока) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда 
			Элементы.Папки.ТекущаяСтрока = ПапкаПриОткрытии;
		КонецЕсли;	
		
		Если Элементы.Папки.ТекущаяСтрока <> Неопределено
			И ТипЗнч(Элементы.Папки.ТекущаяСтрока) = Тип("СправочникСсылка.ПапкиФайлов") Тогда 
			
			Список.Параметры.УстановитьЗначениеПараметра("Владелец", Элементы.Папки.ТекущаяСтрока);
			
		КонецЕсли;
		
		Элементы.Список.ПодчиненныеЭлементы.ЕстьКатегории.Видимость = ИспользоватьКатегорииДанных;
		Элементы.Список.ПодчиненныеЭлементы.ВладелецФайла.Видимость = Ложь;
		
		Если Элементы.Папки.ТекущаяСтрока = Неопределено 
			ИЛИ (ТипЗнч(Элементы.Папки.ТекущаяСтрока) = Тип("СправочникСсылка.ПапкиФайлов")
			И Элементы.Папки.ТекущаяСтрока.Пустая()) Тогда
			
			Элементы.СоздатьФайл.Доступность = Ложь;
			Элементы.КонтекстноеМенюСписокСоздать.Доступность = Ложь;
		Иначе
			Элементы.СоздатьФайл.Доступность = Истина;
			Элементы.КонтекстноеМенюСписокСоздать.Доступность = Истина;
		КонецЕсли;
        Элементы.Создать.Видимость = Истина;
		Элементы.ВключитьПросмотрПапками.Пометка = Истина;
		
		Элементы.ДополнениеСтрокаПоиска.Видимость = Ложь;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям Тогда
		
		Элементы.Страницы.Видимость = Истина;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКатегории;
		
		УстановитьПараметрыВыбранныхКатегорий();
		Элементы.Список.ПодчиненныеЭлементы.ЕстьКатегории.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ВладелецФайла.Видимость = Истина;
		Элементы.СоздатьФайл.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокСоздать.Доступность = Истина;
		Элементы.Создать.Видимость = Ложь;
		Элементы.ВключитьПросмотрКатегориями.Пометка = Истина;
		Элементы.СнятьВсеОтметки.Видимость = Истина;
		
		Элементы.ДополнениеСтрокаПоиска.Видимость = Ложь;
		
	Иначе
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбранныхКатегорий()
	
	ВыбранныеКатегории.Очистить();
	ПолучитьВыбранныеКатегории();	
	ПолучитьКоличествоКатегорийДляПоиска();
    	
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория.Значение) Тогда
			РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, 10);
			Список.Параметры.УстановитьЗначениеПараметра("НаличиеКатегорий", 0);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(Список, 10, ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрКатегорий()
	
	КлючеваяОперация = "ФайлыВыполнениеКомандыОтборПоКатегориям";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СтрокаСостояния = НСтр("ru = 'Пожалуйста, подождите!'; en = 'Please wait!'") + Символы.ВК + НСтр("ru = 'Идет поиск данных по категориям...'; en = 'Searching data by categories...'");
		Состояние(СтрокаСостояния);	
	КонецЕсли;
	УстановитьПараметрыВыбранныхКатегорий();
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		Состояние();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории)
	
	Если ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя() <> Неопределено Тогда
		Элементы.ДеревоКатегорий.Развернуть(ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьДеревоКатегорий(Неопределено);
	ПрименитьФильтрКатегорий();
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)
	
	ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	Если Элементы.ДеревоКатегорий.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка И ЗначениеЗаполнено(ТекущаяКатегория) Тогда		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяКатегория);
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элементы.ДеревоКатегорий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомВсехОтмеченных(Команда)
	
	ОтборДанных = "ПоВсем";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомОднойИзОтмеченных(Команда)
	
	ОтборДанных = "ПоОднойИз";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомИерархии(Команда)
	
	СУчетомПодкатегорий = НЕ СУчетомПодкатегорий;
	Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтмеченныеКатегории(Команда)
	
	ПоказыватьСписокОтмеченных = НЕ ПоказыватьСписокОтмеченных;
	Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
	Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКоличествоКатегорийДляПоиска()
	
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
		
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	
	КоличествоКатегорийДляПоиска = КоличествоВыбранныхКатегорий;
	Если КоличествоВыбранныхКатегорий > 1 Тогда
		КоличествоКатегорийДляПоиска = КоличествоОтмеченныхКатегорий;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД РАБОТЫ С ФАЙЛАМИ

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Элементы.Список.ТекущаяСтрока, 
		Неопределено, 
		УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция ФайловыеКомандыДоступны(ФайлСсылка = Неопределено)
	
	
	Если ФайлСсылка = Неопределено Тогда 
		ФайлСсылка = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Если ФайлСсылка = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФайлСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, СтрокаТаблицы.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = СтрокаТаблицы.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = СтрокаТаблицы.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = СтрокаТаблицы.Редактирует;
	ПараметрыОбновленияФайла.АвторТекущейВерсии = СтрокаТаблицы.Автор;
	ПараметрыОбновленияФайла.Кодировка = СтрокаТаблицы.Кодировка;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'; en = 'Printing files is not supported in web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'; en = 'Printing files is only possible in Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
			ВыделенныеСтроки, 
			ЭтаФорма.УникальныйИдентификатор);
				
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Элементы.Список.ТекущаяСтрока, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, Элементы.Список.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Список.ТекущаяСтрока,
			Неопределено,
			УникальныйИдентификатор);
		
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Список.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ПараметрыОткрытияФормы = Новый Структура("Ключ", Элемент.ТекущаяСтрока);
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапку(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",    НСтр("ru = 'Выбор папки'; en = 'Choose folder'"));
	ПараметрыФормы.Вставить("ТекущаяПапка", Элементы.Папки.ТекущаяСтрока);
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	ПараметрыФормы.Вставить("ПереносВПапку",  Истина);
	
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайлов", ЭтотОбъект);
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.Список.ВыделенныеСтроки);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	МассивФайлов = Новый Массив;
	Для Каждого ФайлСсылка Из Элементы.Список.ВыделенныеСтроки Цикл
		Если Не ФайловыеКомандыДоступны(ФайлСсылка) Тогда 
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ФайлСсылка);
	КонецЦикла;
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(Элементы.Список.ТекущаяСтрока, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);

КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	КонецЕсли;
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	Если КоличествоВыбранныхКатегорий = 1
		И ВыбранныеКатегории[0].Пометка = Ложь
		И ВыбранныеКатегории[0].Значение <> Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		ВыбранныеКатегории[0].Значение = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
		ВыбранныеКатегории[0].Представление = 
			РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбранныеКатегории[0].Значение);
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбранаПриИзменении(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана
		И Не ПроверитьПредельноеКоличествоОтмеченныхКатегорий() Тогда
		Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеКатегории.Количество() = 1
		И ВыбранныеКатегории[0].Значение = ТекущаяКатегория Тогда
		
		ВыбранныеКатегории[0].Пометка = Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана;
		Возврат;
		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры	

&НаКлиенте
Функция ПроверитьПредельноеКоличествоОтмеченныхКатегорий()
	
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если ВыбраннаяКатегория.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОтмеченныхКатегорий = 10 Тогда
		ТекстПредупреждения = НСтр("ru = 'Одновременно может быть отмечено не более 10 категорий.'; en = 'At the same time no more than 10 categories can be selected.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПолучитьВыбранныеКатегории()
	
	ПолучитьВыбранныеКатегорииВыполнить(ДеревоКатегорий.ПолучитьЭлементы(), ВыбранныеКатегории);
	
	ЕстьОтмеченныеКатегории = Ложь;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка = Истина Тогда
			ЕстьОтмеченныеКатегории = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтмеченныеКатегории Тогда
		Для Каждого Элемент Из ВыбранныеКатегории Цикл
			Если Элемент.Пометка = Ложь Тогда
				ВыбранныеКатегории.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ПолучитьКоличествоКатегорийДляПоиска();
	СтрокаЗаголовка = НСтр("ru = 'Категории, по которым выполняется отбор'; en = 'The categories you filter on'");
	Если КоличествоКатегорийДляПоиска > 0 Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + " (" + КоличествоКатегорийДляПоиска + ")";
	КонецЕсли;
	Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеКатегорииВыполнить(ЭлементыОдногоУровня, ВыбранныеКатегории)
	
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		Если ЭлементУровня.Выбрана Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Истина);
		ИначеЕсли ЭлементУровня.Ссылка = ТекущаяКатегория Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Ложь);			
		КонецЕсли;
		ПолучитьВыбранныеКатегорииВыполнить(ЭлементУровня.ПолучитьЭлементы(), ВыбранныеКатегории);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоКатегорий(Команда)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда		
		СписокРаскрытыхКатегорий.Очистить();
		РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
		ТекущаяКатегорияДляОткрытия = ТекущаяКатегория;
		ПостроитьДеревоКатегорий();
		
		ИдКатегории = Неопределено;
		РаботаСКатегориямиДанныхКлиентСервер.НайтиКатегориюВДеревеПоСсылке(ДеревоКатегорий.ПолучитьЭлементы(), ТекущаяКатегория, ИдКатегории);
		РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории);
		Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;
		
		РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, СписокРаскрытыхКатегорий);
		РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегории);
		ТекущаяКатегория = ТекущаяКатегорияДляОткрытия;
		РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ЗначениеЗаполнения = Новый Структура;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ЗначениеКопирования");
	Если НЕ Копирование Тогда
		ЗначениеЗаполнения.Вставить("Родитель", Элемент.ТекущиеДанные.Ссылка);				
	Иначе
		ПараметрыФормы.ЗначениеКопирования = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы.ЗначенияЗаполнения = ЗначениеЗаполнения;
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ТекущийЭлемент = Элементы.Папки Тогда
		Элементы.Папки.Обновить();
	ИначеЕсли ТекущийЭлемент = Элементы.ДеревоКатегорий Тогда
		ОбновитьДеревоКатегорий(Команда);
	Иначе
		Элементы.Список.Обновить();
		УстановитьДоступностьФайловыхКоманд();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрКатегориями(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПапками(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрСписком(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМПЛЕКТЫ ДОКУМЕНТОВ

&НаКлиенте
Процедура ДобавитьВКомплект(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСКомплектамиДокументовКлиент.ДобавитьВКомплект(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// АВТООБНОВЛЕНИЕ

&НаКлиенте
Процедура Автообновление(Команда)
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтаФорма, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Строка) 
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		Возврат;
	КонецЕсли;
	ЭлементДерева = Деревокатегорий.НайтиПоИдентификатору(Строка);
	Если НЕ ЭлементДерева.Ссылка.Пустая()
		И НЕ ЭлементДерева.Ссылка = ПредопределенноеЗначение("Справочник.КатегорииДанных.ВсеКатегории") Тогда		
		Категория = ЭлементДерева.Ссылка;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Если ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
			Текст = СтрШаблон(
				Нстр("ru = 'Добавить файлы (%1 шт.) в категорию ""%2""?'; en = 'Add files (%1 PCs.) in the category ""%2""?'"),
				Строка(ПараметрыПеретаскивания.Значение.Количество()),
				Категория);
		Иначе
			Текст = СтрШаблон(
				Нстр("ru = 'Добавить файл в категорию ""%1""?'; en = 'Add file in category ""%1""?'"),
				Категория);
			КонецЕсли;
			
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ПараметрыПеретаскиванияЗначение", ПараметрыПеретаскивания.Значение);
		ПараметрыВыполнения.Вставить("Категория", Категория);
		
		
		Обработчик = Новый ОписаниеОповещения("ДеревоКатегорийПеретаскиваниеПослеВопроса", ЭтотОбъект, ПараметрыВыполнения);
			
		ПоказатьВопрос(Обработчик, Текст, Режим, 0, КодВозвратаДиалога.Нет);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскиваниеПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСостояния = СтрШаблон(
		НСтр("ru = 'Выполняется установка категории ""%1"" у файлов. Пожалуйста, подождите...'; en = 'Installing the category ""%1"" to files. Please wait ...'"),
		ДополнительныеПараметры.Категория);
		
    Состояние(СтрокаСостояния);
	
	РаботаСКатегориямиДанных.ПрисвоитьКатегориюМассивуОбъектов(
		ДополнительныеПараметры.ПараметрыПеретаскиванияЗначение, 
		ДополнительныеПараметры.Категория);
	
	СтрокаСостояния = СтрШаблон(
		НСтр("ru = 'Категория ""%1"" успешно установлена.'; en = 'Category ""%1"" was successfully assigned.'"),
		ДополнительныеПараметры.Категория);
	Состояние(СтрокаСостояния);

	ОбновитьДеревоКатегорий(Неопределено);
	ПереключитьВидПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКатегорийПередУдалениемПродолжение",
		ЭтотОбъект);

	Отказ = Истина;
	РаботаСКатегориямиДанныхКлиент.ПометитьКатегориюНаУдаление(
		Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка,
		Элементы.ДеревоКатегорий.ТекущиеДанные.ПометкаУдаления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	ОбновитьДеревоКатегорий(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьДеревоКатегорий(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка); 
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СнятьВсеОтметкиСервер();
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиСервер()
	
	СнятьВсеОтметкиВыполнить(ДеревоКатегорий.ПолучитьЭлементы());
	СтрокаЗаголовка = НСтр("ru = 'Отмеченные категории'; en = 'Selected categories'");
	Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиВыполнить(ЭлементыОдногоУровня)
	
	ВыбранныеКатегории.Очистить();
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		ЭлементУровня.Выбрана = Ложь;
		СнятьВсеОтметкиВыполнить(ЭлементУровня.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	ИзменитьОтображениеУдаленныхФайлов(ПоказыватьУдаленныеФайлы, Список, Папки, 
		Элементы.ФормаПоказыватьУдаленныеФайлы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеУдаленныхФайлов(ПоказыватьУдаленныеФайлы, Список, Папки,
	ЭлементФормаПоказыватьУдаленныеФайлы)
	
	Если Не ПоказыватьУдаленныеФайлы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьУдаленныеФайлы);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Папки, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьУдаленныеФайлы);
			
	Иначе		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Папки, "ПометкаУдаления");
	КонецЕсли;	
	
	ЭлементФормаПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПриИзменении(Элемент)
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УстановитьСортировку(НаправлениеСортировки)
	
	Список.Порядок.Элементы.Очистить();
	
	Для Каждого Строка Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Строка) = Тип("ПорядокКомпоновкиДанных") Тогда
			
			Строка.Элементы.Очистить();
			
			ЭлементПорядка = Строка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЭлементПорядка.Использование = Истина;
			
			Если НаправлениеСортировки = "Описание" Тогда 
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Описание");
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
			ИначеЕсли НаправлениеСортировки = "Наименование" Тогда 
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Наименование");
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
			ИначеЕсли НаправлениеСортировки = "Автор" Тогда 
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Автор");
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
			ИначеЕсли НаправлениеСортировки = "ТекущаяВерсияДатаМодификацииФайла" Тогда 
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ТекущаяВерсияДатаМодификацииФайла");
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
			Иначе
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Наименование");
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
			КонецЕсли;	
			
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СортироватьПоОписание(Команда)
	УстановитьСортировку("Описание");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименование(Команда)
	УстановитьСортировку("Наименование");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоАвтор(Команда)
	УстановитьСортировку("Автор");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоИзменен(Команда)
	УстановитьСортировку("ТекущаяВерсияДатаМодификацииФайла");
КонецПроцедуры

&НаКлиенте
Процедура ПраваНаПапку(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Папки.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;	
	
	// Открытие формы настройки прав
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", Элементы.Папки.ТекущаяСтрока);
	ОткрытьФорму("ОбщаяФорма.НастройкиПравПапок", ПараметрыФормы, , Элементы.Папки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 PCs) copied to the Clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		ЧислоФайлов = 0;
		ВставитьСтрокиНаСервере(ЧислоФайлов);
		
		Если ЧислоФайлов <> 0 Тогда
			
			ПолноеОписание = СтрШаблон(
				НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'; en = 'Files (%1 pcs) pasted from the clipboard.'"), ЧислоФайлов);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Вставка из буфера'; en = 'Paste from clipboard'"),
				,
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
				
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Список.ВыделенныеСтроки.Количество();
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзСпискаФайлов(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	ВладелецФайла = Элементы.Папки.ТекущаяСтрока;
	
	РаботаСФайламиВызовСервера.СкопироватьФайлы(МассивФайлов, ВладелецФайла);
	Элементы.Папки.Обновить();
	Элементы.Список.Обновить();
	
КонецПроцедуры


