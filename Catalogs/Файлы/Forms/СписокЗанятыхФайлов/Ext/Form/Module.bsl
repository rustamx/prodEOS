
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест". 
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ЗаполнитьСписокФайлов();
		
		Если СписокФайлов.Количество() = 0 Тогда
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если БольшеНеПоказыватьЗанятыеФайлыПриЗакрытииПрограммы Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФайлов

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл =
		СписокФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	
	РаботаСФайламиКлиент.Открыть(
		РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			СсылкаНаФайл, Неопределено, УникальныйИдентификатор),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		Элементы.Список.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = Элементы.Список.ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Истина;
	ПараметрыОбновленияФайла.Редактирует = Элементы.Список.ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Элементы.Список.ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
		Элементы.Список.ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		Элементы.Список.ТекущиеДанные.Ссылка, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(
		РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Элементы.Список.ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
		Элементы.Список.ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(
		Элементы.Список.ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВсе(Команда)
	
	РедактируемыеФайлы = Новый Массив;
	
	Для Каждого РедактируемыйФайл ИЗ СписокФайлов Цикл
		РедактируемыеФайлы.Добавить(РедактируемыйФайл.Ссылка);
	КонецЦикла;
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьВсеПродолжение", ЭтотОбъект);
	РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(Обработчик, РедактируемыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВсеПродолжение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> Неопределено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизит СписокФайлов данным о редактируемых файлах
// текущим пользователем.
//
&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка,
		|	Файлы.ХранитьВерсии,
		|	Файлы.Редактирует,
		|	Файлы.ИндексКартинки,
		|	Файлы.Описание,
		|	Файлы.Наименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
		|		ПО Файлы.ТекущаяВерсия = ФайлыВРабочемКаталогеКомпьютера.Версия
		|			И (ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор)
		|			И (ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ)
		|ГДЕ
		|	Файлы.Редактирует = &ТекущийПользователь";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	ТаблицаЗанятыхФайлов = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВДанныеФормы(ТаблицаЗанятыхФайлов, СписокФайлов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЗанятыхФайлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
		|		ПО Файлы.ТекущаяВерсия = ФайлыВРабочемКаталогеКомпьютера.Версия
		|			И (ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор)
		|			И (ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ)
		|ГДЕ
		|	Файлы.Редактирует = &ТекущийПользователь";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	МассивФайлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивФайлов;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьРедактированиеВсех(Команда)
	
	ЗанятыеФайлы = ПолучитьСписокЗанятыхФайлов();
	
	Если ЗанятыеФайлы.Количество() <> 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ЗакрытьФормуПослеОсвобождения", ЭтотОбъект);
		
		РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
			Обработчик,
			ЗанятыеФайлы,
			УникальныйИдентификатор,
			Истина, // СоздатьНовуюВерсию
			"", // КомментарийКВерсии
			Истина, // ПоказыватьОповещение
			Истина); //ОсвобождатьБезВопросаФайлыКоторыхНетВРабочемКаталоге
			
	Иначе
			
		ЗакрытьФормуПослеОсвобождения();
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеОсвобождения(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
		"КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
		
	Если Открыта() Тогда
		Закрыть(КодВозвратаДиалога.Да);
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	Закрыть(КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти
