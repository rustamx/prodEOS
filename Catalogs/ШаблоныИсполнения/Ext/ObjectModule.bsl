#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;
	
	ЗаполняемыеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Заполняемый));
	Для Каждого СтрокаПредмета Из ЗаполняемыеПредметы Цикл
		
		Отбор = Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",СтрокаПредмета.ИмяПредмета, Истина);
		ТочкиЗаполнения = ПредметыЗадач.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТочки Из ТочкиЗаполнения Цикл
			Если СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать 
				И Не ЗначениеЗаполнено(Контролер) Тогда
				
				МассивПолей.Добавить("Контролер");
				
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить 
				И Не ЗначениеЗаполнено(Проверяющий) Тогда
				
				МассивПолей.Добавить("Проверяющий");
				
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение 
				И Исполнители.Количество() > 0
				И Исполнители.Найти(Истина, "Ответственный") = Неопределено Тогда
				
				МассивПолей.Добавить("ОтветственныйИсполнитель");
				
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить 
				И Исполнители.Количество() > 0
				И Исполнители.Найти(Ложь, "Ответственный") = Неопределено Тогда
				
				МассивПолей.Добавить("ОбычныйИсполнитель");
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции	

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если ЗначениеЗаполнено(НаименованиеБизнесПроцесса) Тогда
		Результат = Результат + НСтр("ru = 'Заголовок'; en = 'Title'") + ": " + НаименованиеБизнесПроцесса + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		Результат = Результат + НСтр("ru = 'Описание'; en = 'Details'") + ": " + Описание + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Важность) Тогда
		Результат = Результат + НСтр("ru = 'Важность'; en = 'Importance'") + ": " + Строка(Важность) + Символы.ПС;
	КонецЕсли;
	
	Если Исполнители.Количество() > 0 Тогда
		Результат = Результат + НСтр("ru = 'Исполнители'; en = 'Performers'") + ": ";
		Для Каждого Исполнитель Из Исполнители Цикл
			Результат = Результат + Исполнитель.Исполнитель
				+ ";" + Символы.ПС;
		КонецЦикла;
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 2);
		Результат = Результат + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантИсполнения) Тогда
		Результат = Результат + Нстр("ru = 'Порядок исполнения'; en = 'Performance order'") + ": " + Строка(ВариантИсполнения) + Символы.ПС;
		
		Если ЗначениеЗаполнено(Проверяющий) Тогда
			Результат = Результат + Нстр("ru = 'Проверяющий'; en = 'Verifier'") + ": "
				+ Строка(Проверяющий)
				+ Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контролер) Тогда
		Результат = Результат + Нстр("ru = 'Контролер'; en = 'Monitor'") + ": "
			+ Строка(Контролер) + Символы.ПС;
	КонецЕсли;
	
	ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(ЭтотОбъект);
	ДлительностьПроцессаСтрокой = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
		ДлительностьПроцесса.СрокИсполненияПроцессаДни,
		ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
		ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
		
	Если ЗначениеЗаполнено(ДлительностьПроцессаСтрокой) Тогда
		Результат = Результат + Нстр("ru = 'Срок'; en = 'Due date'") + ": "
			+ ДлительностьПроцессаСтрокой;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаМеханизмаОтсутствий

// Получает исполнителей
Функция ПолучитьИсполнителей() Экспорт
	
	МассивИсполнителей = Новый Массив;
	
	Для Каждого СтрокаИсполнитель Из Исполнители Цикл
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(СтрокаИсполнитель.Исполнитель);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контролер) Тогда
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(Контролер);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(Проверяющий);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЕсли;
	
	Возврат МассивИсполнителей;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка исполнителей на дубли при смешанном и параллельном варианте исполнения
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		КоличествоИсполнителей = 0; // В таком варианте проверку делать не нужно
	Иначе
		КоличествоИсполнителей = Исполнители.Количество();
		ТаблицаИсполнителейДляПроверки = Исполнители.Выгрузить();
		ТаблицаИсполнителейДляПроверки.Колонки.Добавить("Шаг");
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ТаблицаИсполнителейДляПроверки);
	КонецЕсли;	
	
	Для Инд1 = 0 По КоличествоИсполнителей - 2 Цикл
		Строка1 = ТаблицаИсполнителейДляПроверки[Инд1];
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;

		Для Инд2 = Инд1 + 1 По КоличествоИсполнителей - 1 Цикл
			Строка2 = ТаблицаИсполнителейДляПроверки[Инд2];
	    	Шаг1 = Строка1.Шаг;
			Шаг2 = Строка2.Шаг;

			Если Строка1.Исполнитель = Строка2.Исполнитель
				И Шаг1 = Шаг2
				И (ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи")
					Или ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли")) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке исполнителей!'; en = 'Performer ""%1"" is specified twice in the list of performers!'"), 
					Строка(Строка2.Исполнитель));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Объект.Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
					
			ИначеЕсли Строка1.Исполнитель = Строка2.Исполнитель
				И Шаг1 = Шаг2
				И ТипЗнч(Строка1.Исполнитель) = Тип("Строка")Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Автоподстановка ""%1"" указана дважды в списке исполнителей!'; en = 'Auto-substitution ""%1"" is specified twice in the performers list!'"), 
					Строка(Строка2.Исполнитель));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Объект.Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
		
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка наличия одного ответственного исполнения в списке.
	Если Исполнители.Количество() = 1 И Исполнители[0].Ответственный Тогда
		
		ТекстСообщения = НСтр("ru = 'Единственный исполнитель не может быть ответственным.'; en = 'The sole performer cannot be a responsible one.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.Исполнители[0].Исполнитель",, 
			Отказ);
		
	КонецЕсли
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныБизнесПроцессов.ШаблонПередЗаписью(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
