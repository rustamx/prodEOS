#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	ПредыдущееСостояниеИсполнения = Объект.СостояниеИсполнения;
	
	// Чтение данных мероприятия для доступа к информации о программе и протоколу.
	ЗначениеВРеквизитФормы(Объект.Владелец.ПолучитьОбъект(), "Мероприятие");
	УправлениеМероприятиями.ВывестиПротоколМероприятия(Мероприятие.Протокол);
	ТекущийНомерПунктаПрограммы = Объект.НомерПунктаПрограммы;
	
	// Заполнение списка выбора номера пункта программы.
	УправлениеМероприятиями.ЗаполнитьСписокВыбораНомераПунктаПрограммы(
		Элементы.НомерПунктаПрограммы.СписокВыбора, Мероприятие.Программа);
	
	// Заполнение нового пункта протокола.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		// Заполнение номера программы для нового объекта.
		МаксимальныйПунктПротокола = 0;
		Для Каждого Строка Из Мероприятие.Протокол Цикл
			Если Строка.НомерПунктаПрограммы > МаксимальныйПунктПротокола Тогда 
				МаксимальныйПунктПротокола = Строка.НомерПунктаПрограммы;
			КонецЕсли;
		КонецЦикла;
		Если МаксимальныйПунктПротокола < Мероприятие.Программа.Количество() Тогда
			Объект.НомерПунктаПрограммы = МаксимальныйПунктПротокола + 1;
		КонецЕсли;
		
		// Заполнение слушали для нового объекта.
		УправлениеМероприятиямиКлиентСервер.ЗаполнитьСлушалиПунктаПротокола(
			Объект, Мероприятие.Программа);
		
	КонецЕсли;
	
	// Установка заголовка.
	ЭтаФорма.Заголовок = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
			Объект, Мероприятие.Протокол);
	
	// Отображение помеченных на удаление пунктов протокола.
	Если Объект.ПометкаУдаления Тогда
		
		КлючСохраненияПоложенияОкна = "УдаленныйПунктПротокола";
		Элементы.ГруппаУдален.Видимость = Истина;
		
		УстановитьРежимПросмотра();
		
	КонецЕсли;
	
	// Доступность по состояния.
	УстановитьДоступностьПоСостоянию();
	
	// Устанавливает видимость элементов.
	УстановитьВидимостьЭлементов();
	
	// Страница Исполнение.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия") Тогда
		
		ПредыдущийВариантИсполнения = Объект.ВариантИсполнения;
		
		// Сроки исполнения
		ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
		
		ВозможенВыборТочнойДатыВСроках = Истина;
		
		ИспользоватьДатуИВремяВСрокахЗадач = 
			ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
			
		ПодсказкаВвода = СрокиИсполненияПроцессов.ПодсказкаВводаПоляСрокИсполнения(ЭтаФорма);
		Элементы.ИсполнителиСрокИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
		Элементы.СрокОбработкиРезультатовПредставление.ПодсказкаВвода = ПодсказкаВвода;
		
		ШиринаПоляСрокИсполнения = СрокиИсполненияПроцессов.ШиринаПоляСрокИсполнения(ЭтаФорма);
		Элементы.ИсполнителиСрокИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
		Элементы.СрокОбработкиРезультатовПредставление.Ширина = ШиринаПоляСрокИсполнения;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'; en = '(according to schedule)'");
			
			Элементы.ИсполнителиСрокИсполненияПредставление.Подсказка = СтрЗаменить(
				Элементы.ИсполнителиСрокИсполненияПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
				
			Элементы.СрокОбработкиРезультатовПредставление.Подсказка = СтрЗаменить(
				Элементы.СрокОбработкиРезультатовПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
				
			Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
				Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
				
		КонецЕсли;
		
		ОбновитьСрокиИсполненияНаСервере();
		
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Объект.Исполнители);
		
		// Определяем нужно ли отображать особые сроки, описание и наименование задач исполнителей.
		Для Каждого СтрИсполнитель Из Объект.Исполнители Цикл
			Если ЗначениеЗаполнено(СтрИсполнитель.НаименованиеЗадачи)
				Или ЗначениеЗаполнено(СтрИсполнитель.Описание) Тогда
				
				ОсобыеСрокиИОписаниеДляИсполнителей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ИсполнителиКонтекстноеМенюОсобыеСрокиИОписаниеДляИсполнителей.Пометка =
			ОсобыеСрокиИОписаниеДляИсполнителей;
		
		УстановитьВидимостьОсобыхПараметровЗадачИсполнителей();
		УстановитьДоступность();
		УстановитьВидимостьИсторииСостояний();
		
	КонецЕсли;
	
	// Сохранение вводимых значений.
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(
		ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Объект.Исполнители);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаВыполнена" Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПредыдущееСостояниеИсполнения = Объект.СостояниеИсполнения;
	
	// Чтение данных мероприятия для доступа к информации о программе и протоколу.
	ЗначениеВРеквизитФормы(Объект.Владелец.ПолучитьОбъект(), "Мероприятие");
	УправлениеМероприятиями.ВывестиПротоколМероприятия(Мероприятие.Протокол);
	ТекущийНомерПунктаПрограммы = Объект.НомерПунктаПрограммы;
	
	// Заполнение списка выбора номера пункта программы.
	УправлениеМероприятиями.ЗаполнитьСписокВыбораНомераПунктаПрограммы(
		Элементы.НомерПунктаПрограммы.СписокВыбора, Мероприятие.Программа);
	
	// Установка заголовка.
	ЭтаФорма.Заголовок = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
		Объект, Мероприятие.Протокол);
	
	// Отображение помеченных на удаление пунктов протокола.
	Если Объект.ПометкаУдаления Тогда
		
		КлючСохраненияПоложенияОкна = "УдаленныйПунктПротокола";
		Элементы.ГруппаУдален.Видимость = Истина;
		
		УстановитьРежимПросмотра();
		
	КонецЕсли;
	
	// Доступность по состояния.
	УстановитьДоступностьПоСостоянию();
	
	// Устанавливает видимость элементов.
	УстановитьВидимостьЭлементов();
	
	// Страница Исполнение.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия") Тогда
		
		ПредыдущийВариантИсполнения = Объект.ВариантИсполнения;
		
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Объект.Исполнители);
		
		// Определяем нужно ли отображать особые сроки, описание и наименование задач исполнителей.
		Для Каждого СтрИсполнитель Из Объект.Исполнители Цикл
			Если ЗначениеЗаполнено(СтрИсполнитель.НаименованиеЗадачи)
				Или ЗначениеЗаполнено(СтрИсполнитель.Описание) Тогда
				
				ОсобыеСрокиИОписаниеДляИсполнителей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ИсполнителиКонтекстноеМенюОсобыеСрокиИОписаниеДляИсполнителей.Пометка =
			ОсобыеСрокиИОписаниеДляИсполнителей;
		
		УстановитьВидимостьОсобыхПараметровЗадачИсполнителей();
		УстановитьДоступность();
		УстановитьВидимостьИсторииСостояний();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПредыдущееСостояниеИсполнения <> ТекущийОбъект.СостояниеИсполнения Тогда
		ТекущийОбъект.СостояниеИсполненияУстановил = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение вводимых значений.
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПредыдущееСостояниеИсполнения = ТекущийОбъект.СостояниеИсполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеМероприятиямиКлиент.ОповеститьОЗаписиПунктаПротокола(Объект.Владелец, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Исполнение

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ВариантИсполненияПриИзмененииПроцессаИсполнения(
		ЭтаФорма, Элементы.Исполнители,
		Объект.ВариантИсполнения, ПредыдущийВариантИсполнения, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, Объект.Контролер, СтандартнаяОбработка, ЭтаФорма, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(СтандартнаяОбработка,
		ЭтаФорма, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтаФорма, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, "Контролер");
	
КонецПроцедуры

// Проверяющий

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникСоСрокомИсполненияПриИзменении(ЭтаФорма, "Проверяющий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, Объект.Проверяющий, СтандартнаяОбработка, ЭтаФорма, "Проверяющий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникСоСрокомИсполненияОчистка(СтандартнаяОбработка,
		ЭтаФорма, "Проверяющий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтаФорма, "Проверяющий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, "Проверяющий");
	
КонецПроцедуры

// СрокОбработкиРезультатовПредставление

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтаФорма;
	ДопПараметры.Поле = "СрокОбработкиРезультатовПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокОбработкиРезультатов";
	ДопПараметры.Исполнитель = Объект.Проверяющий;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		Объект.СрокОбработкиРезультатов,
		Объект.СрокОбработкиРезультатовДни,
		Объект.СрокОбработкиРезультатовЧасы,
		Объект.СрокОбработкиРезультатовМинуты,
		Объект.ВариантУстановкиСрокаОбработкиРезультатов,
		СрокОбработкиРезультатовПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтаФорма;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокОбработкиРезультатовДни";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокОбработкиРезультатовЧасы";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокОбработкиРезультатовМинуты";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаОбработкиРезультатов";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокОбработкиРезультатовПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "Объект";
	ПараметрыВыбораСрока.СрокиПредшественников = Объект.Исполнители;
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.Участник = Объект.Проверяющий;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтаФорма,
		Объект.СрокОбработкиРезультатов,
		Объект.СрокОбработкиРезультатовДни,
		Объект.СрокОбработкиРезультатовЧасы,
		Объект.СрокОбработкиРезультатовМинуты,
		СрокОбработкиРезультатовПредставление,
		Объект.ВариантУстановкиСрокаОбработкиРезультатов,
		Направление,
		"СрокОбработкиРезультатов");
	
КонецПроцедуры

// КоличествоИтераций

&НаКлиенте
Процедура КоличествоИтерацийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.КоличествоИтерацийПриИзменении(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителя'; en = 'Performer choice'"));
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", Объект.Ответственный);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.Ответственный,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПунктаПрограммыПриИзменении(Элемент)
	
	УправлениеМероприятиямиКлиентСервер.ЗаполнитьСлушалиПунктаПротокола(
		Объект, Мероприятие.Программа, ТекущийНомерПунктаПрограммы);
	
	ТекущийНомерПунктаПрограммы = Объект.НомерПунктаПрограммы;
	
	ЭтаФорма.Заголовок = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
		Объект, Мероприятие.Протокол);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса)
		И Объект.СрокИсполненияПроцесса = НачалоДня(Объект.СрокИсполненияПроцесса) Тогда
		Объект.СрокИсполненияПроцесса = КонецДня(Объект.СрокИсполненияПроцесса);
	КонецЕсли;
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Исполнение

&НаКлиенте
Процедура ВводОписанияЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура("ОписаниеЗадачи", Элементы.Исполнители.ТекущиеДанные.Описание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииВводаОписанияЗадачи", ЭтотОбъект);
	ОткрытьФорму(
		"БизнесПроцесс.Исполнение.Форма.ВводОписанияЗадачиИсполнителя",
		ПараметрыФормы, 
		Элементы.Исполнители,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииВводаОписанияЗадачи(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Элементы.Исполнители.ТекущиеДанные.Описание = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
		ЭтаФорма,
		Элементы.Исполнители,
		Объект.Исполнители,
		Объект.ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеСрокиИОписаниеДляИсполнителей(Команда)
	
	ОсобыеСрокиИОписаниеДляИсполнителей = Не ОсобыеСрокиИОписаниеДляИсполнителей;
	Элементы.ИсполнителиКонтекстноеМенюОсобыеСрокиИОписаниеДляИсполнителей.Пометка = 
		ОсобыеСрокиИОписаниеДляИсполнителей;
	
	УстановитьВидимостьОсобыхПараметровЗадачИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителейИсполнения(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Объект.ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьИсполнителяПроцессаИсполнения(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Объект.ВариантИсполнения, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьИсполнителяПроцессаИсполнения(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Объект.ВариантИсполнения, 1);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИсторияСостояний(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ПунктПротокола", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ИсторияСостоянийПротоколовМероприятий.Форма.ФормаИсторииСостояний",
		ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессыИЗадачи(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(,
			НСтр("ru = 'Пункт протокола необходимо записать перед просмотром процессов и задач.'; en = 'You must save minutes item before you can view processes and tasks.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМероприятие(Команда)
	
	ПоказатьЗначение(, Объект.Владелец);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиИсполненияПриАктивизацииСтроки(
		ЭтаФорма, Элементы.Исполнители,
		Элементы.ИсполнителиСрокИсполненияПредставление, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтаФорма, НоваяСтрока,
		Элементы.Исполнители,
		Объект.Исполнители,
		Объект.ВариантИсполнения,
		"ПорядокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтаФорма, НоваяСтрока, ОтменаРедактирования, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиИсполненияПослеУдаления(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Объект.ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительИсполненияНачалоВыбора(
		ЭтаФорма, СтандартнаяОбработка, Элементы.Исполнители,
		Объект.Исполнители, Объект.ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		ЭтаФорма, ВыбранноеЗначение, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ПорядокИсполнения

&НаКлиенте
Процедура ПорядокИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ПорядокИсполненияПриИзмененииТаблицыИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Объект.ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Объект.ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Направление, Объект.ВариантИсполнения);
	
КонецПроцедуры

// Ввод шаблонов текста
&НаКлиенте
Процедура ИсполнителиНаименованиеЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Область = ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеНаименование");
	ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона наименования'; en = 'Select description template'");
	ИмяОбработчика = "ИсполнителиНаименованиеНачалоВыбораПродолжение";
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок", 
		Область,
		ЗаголовокФормыВыбора);
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтаФорма);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		ИмяОбработчика,
		ЭтотОбъект,
		ДопПараметры);
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиНаименованиеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Элементы.Исполнители.ТекущиеДанные.НаименованиеЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Область = ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеОписание");
	ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона описания'; en = 'Select details template'");
	ИмяОбработчика = "ИсполнителиОписаниеНачалоВыбораПродолжение";
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок", 
		Область,
		ЗаголовокФормыВыбора);
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтаФорма);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		ИмяОбработчика,
		ЭтотОбъект,
		ДопПараметры);
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Элементы.Исполнители.ТекущиеДанные.Описание = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ИсполнителиНаименованиеЗадачиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиНаименованиеЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Элементы.Исполнители.ТекущиеДанные.НаименованиеЗадачи
			= ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Исполнение

&НаСервере
Процедура УстановитьВидимостьОсобыхПараметровЗадачИсполнителей()
	
	Элементы.ИсполнителиНаименованиеЗадачи.Видимость = ОсобыеСрокиИОписаниеДляИсполнителей;
	Элементы.ИсполнителиОписание.Видимость = ОсобыеСрокиИОписаниеДляИсполнителей;
	
	Элементы.ИсполнителиКонтекстноеМенюВводОписанияЗадачи.Видимость =
		ОсобыеСрокиИОписаниеДляИсполнителей;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность() Экспорт
	
	Элементы.Исполнители.Видимость = Истина;
	
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	ИначеЕсли Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = НЕ Элементы.Исполнители.ТолькоПросмотр;
		Элементы.ВариантИсполнения.Доступность = НЕ Элементы.Исполнители.ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере(ОбновитьВсеСроки = Ложь) Экспорт
	
	Если Объект.Исполнители.Количество() > 0
		Или ЗначениеЗаполнено(Объект.Проверяющий)
		Или ЗначениеЗаполнено(Объект.Контролер)
		Или ЗначениеЗаполнено(РеквизитТаблицаСИзмененнымСроком) Тогда
	
		Если Объект.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение
			Или ЗначениеЗаполнено(РеквизитТаблицаСИзмененнымСроком) Тогда
		
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
			ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
			ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтрокиСИзмененнымСроком;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(Объект, ПараметрыДляРасчетаСроков);
			
		КонецЕсли;
		
	КонецЕсли;
		
	РеквизитТаблицаСИзмененнымСроком = "";
	ИндексСтрокиСИзмененнымСроком = 0;
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = РеквизитТаблица;
	ИндексСтрокиСИзмененнымСроком = ИндексСтроки;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	СостояниеПротокола =
		УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Владелец, "СостояниеПротокола");
	
	// Установка доступности по состоянию протокола.
	Если СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколСогласован
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколУтвержден
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколИсполнен Тогда 
		
		УстановитьРежимПросмотра();
		
	КонецЕсли;
	
	ЗапретИзмененияИсполнения =
		Объект.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.Исполнен
		Или Объект.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении;
	
	Элементы.Подобрать.Доступность = Не ЗапретИзмененияИсполнения;
	Элементы.ПереместитьВверх.Доступность = Не ЗапретИзмененияИсполнения;
	Элементы.ПереместитьВниз.Доступность = Не ЗапретИзмененияИсполнения;
	Элементы.НазначитьОтветственным.Доступность = Не ЗапретИзмененияИсполнения;
	Элементы.ИсполнителиКонтекстноеМенюВводОписанияЗадачи.Доступность = Не ЗапретИзмененияИсполнения;
	
	Элементы.ВариантИсполнения.ТолькоПросмотр = ЗапретИзмененияИсполнения;
	Элементы.Исполнители.ТолькоПросмотр = ЗапретИзмененияИсполнения;
	Элементы.Контролер.ТолькоПросмотр = ЗапретИзмененияИсполнения;
	Элементы.Проверяющий.ТолькоПросмотр = ЗапретИзмененияИсполнения;
	Элементы.СрокОбработкиРезультатовПредставление.ТолькоПросмотр = ЗапретИзмененияИсполнения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотра()
	
	// Если режим просмотра уже установлен, то ничего делать не нужно.
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	// Установка режима просмотра.
	ТолькоПросмотр = Истина;
	Элементы.Записать.Видимость = Ложь;
	Элементы.Отмена.КнопкаПоУмолчанию = Истина;
	Элементы.Отмена.Заголовок = НСтр("ru = 'Закрыть'; en = 'Close'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.СтраницаИсполнение.Видимость =
		ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИсторииСостояний()
	
	Элементы.ИсторияСостояний.Видимость =
		РегистрыСведений.ИсторияСостоянийПротоколовМероприятий.ДоступнаИсторияСостояний(Объект.Ссылка);
	Элементы.Исполнение.Видимость = ЗначениеЗаполнено(Объект.Исполнение);
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	
	СохраняемыеЭлементы.Вставить("Ответственный", Объект.Ответственный);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

#КонецОбласти
