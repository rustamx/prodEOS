
&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем ТекущееПоложениеНачало; // позиция начала выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущееПоложениеКонец;  // позиция конца выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущийНомерУзла; // номер текущего узла в HTML письме

&НаКлиенте
Перем ГоризонтальнаяПрокруткаHTML; // положение гор прокрутки в HTML письме

&НаКлиенте
Перем ВертикальнаяПрокруткаHTML; // положение вертикальной прокрутки в HTML письме

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	ОткрыватьФайлыНаРедактирование =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
	
	Если Не РольДоступна("ПолныеПрава")
		И Объект.Автор <> ТекущийПользователь Тогда 
		ЭтаФорма.ТолькоПросмотр = Истина; 
		ОткрыватьФайлыНаРедактирование = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ШаблонПисьмо;
	ЗагрузитьПолучателей();
	
	Если Получатели.Количество() <> 0 Тогда
		
		ТекущиеДанные = Получатели[0];
		ТекущийКонтакт = Получатели[0].Контакт;
		
		ТекущийАдресат = ТекущиеДанные.Адресат;
		ТекущийКонтакт = ТекущиеДанные.Контакт;
		ТекущийАдресатВнешний = ТекущиеДанные.Внешний;
		ТекущийАдресатИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		ТекущийКонтактЗагружен = ТекущиеДанные.КонтактЗагружен;
		Если Не ТекущийАдресатВнешний Тогда
			ТекущийКонтактЗагружен = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0 Тогда
		Элементы.Получатели.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Элементы.Тема.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.ТекстПисьма.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И 
		ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Параметры.Основание) Тогда 
		ТекстПисьма = ПолучитьТекстШаблона(Параметры.Основание);
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда 
			ВставитьФайлыИсходногоПисьмаСервер(Параметры.Основание,, Истина);
		Иначе 
			ВставитьФайлыИсходногоПисьмаСервер(Параметры.Основание);
		КонецЕсли;
		
		ВызовИзШаблонаПисьма = Истина;
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
			ТекстПисьма,
			Параметры.Основание,
			УникальныйИдентификатор,
			,
			ВызовИзШаблонаПисьма);
			
	Иначе 
		ТекстПисьма = ПолучитьТекстШаблона(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		Элементы.ТекстПисьмаHTML.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
	Иначе
		Элементы.ТекстПисьмаHTML.Видимость = Ложь;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
	КонецЕсли;
	
	ОтображатьУдаленныеФайлы =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Документы.ИсходящееПисьмо.ФормаЭлемента",
			"ОтображатьУдаленныеФайлы",
			Ложь);
			
	Если Параметры.Свойство("СписокФайлов") Тогда
		
		ВложенияВПисьмо = Параметры.СписокФайлов;
		
		// помечаем те вложения, которые являются путями к файлам на клиенте
		Для Каждого ОписаниеВложение из ВложенияВПисьмо Цикл
			
			Если ТипЗнч(ОписаниеВложение.Значение) = Тип("Строка") Тогда
				Если ЭтоАдресВременногоХранилища(ОписаниеВложение.Значение) Тогда
					
					СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеВложение.Представление);
					
					ВложенияСтрока = Вложения.Добавить();
					ВложенияСтрока.Ссылка = Неопределено;
					ВложенияСтрока.Представление = ОписаниеВложение.Представление;
					ВложенияСтрока.ИмяФайла = СтруктураИмениФайла.Имя;
					ВложенияСтрока.ИмяФайлаНаДиске = "";
					
					ВложенияСтрока.ИндексКартинки =
						ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураИмениФайла.Расширение);
						
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеВложение.Значение);
					
					ВложенияСтрока.Размер = ДвоичныеДанные.Размер();
					ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ДвоичныеДанные.Размер());
					ВложенияСтрока.ПометкаУдаления = Ложь;
					ВложенияСтрока.Редактирует = Неопределено;
					ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
					
					ВложенияСтрока.Адрес = ОписаниеВложение.Значение;
					ВложенияСтрока.Расположение = "ВременноеХранилище";
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		МассивФайлов = 
			РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.ЗначениеКопирования, Ложь, Истина);
		ДобавитьВложениеФайлы(МассивФайлов, Истина); // ИгнорироватьЗанятость=Истина
		
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
			ТекстПисьма,
			Параметры.ЗначениеКопирования,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ВложенияКонтекстноеМенюДобавитьКартинкуИзБуфераКакФайл.Видимость = Ложь;
	КонецЕсли;
	
	// Определяем список выбора типа предмета
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВнутренниеДокументы.ПустаяСсылка"), НСтр("ru = 'Внутренний документ'; en = 'Internal document'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Входящий документ'; en = 'Incoming document'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"), НСтр("ru = 'Задача'; en = 'Task'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ИсходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Исходящий документ'; en = 'Outgoing document'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Мероприятия.ПустаяСсылка"), НСтр("ru = 'Мероприятие'; en = 'Event'"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"), НСтр("ru = 'Проект'; en = 'Project'"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ПроектныеЗадачи.ПустаяСсылка"), НСтр("ru = 'Проектная задача'; en = 'Project task'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.СообщенияОбсуждений.ПустаяСсылка"), НСтр("ru = 'Сообщение'; en = 'Message'"));
	КонецЕсли;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"), НСтр("ru = 'Файл'; en = 'File'"));
	
	// Отображение шрифта
	НастройкаШрифтОтображения = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	НастройкаОтображатьДругиеШрифтыВПисьмах = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтображатьДругиеШрифтыВПисьмах");
	ШрифтОтображения = НастройкаШрифтОтображения;
	
	УчетнаяЗаписьПроверитьПараметрыПочты();
	ЗаполнитьСписокВыбора();
	
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ФормаПроверитьОрфографию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если у пользователя форма настроена таким образом, что поле HTML документа не отображается,
	// тогда формат письма устанавливаем в текст.
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
		И Элементы.ТекстПисьмаHTML.Документ = Неопределено Тогда
		Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
		ПолучитьHTMLИзПоляHTMLДокумента();
		ВыполнитьПереключениеВТекст();
		Элементы.ФормаФорматHTML.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Элементы.ФормаФорматHTML.Пометка = Истина;
	Иначе
		Элементы.ФормаФорматHTML.Пометка = Ложь;
	КонецЕсли;
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		
	Если Не ЭтаФорма.ТолькоПросмотр //Тогда 
		И (Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0) Тогда
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТема", 0.2, Истина);
	Иначе
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
	
			ТекущийЭлемент = Элементы.ТекстПисьма;
			
		Иначе
			
			ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВставкаПолучателейПисьма_Добавить" И Источник = УникальныйИдентификатор Тогда 
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда 
			Результат = Параметр.МассивРезультата;
			Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() <> 0 Тогда
				ТипАдреса = Результат[0].ТипПолучателя;
				
				ПередИзменениемФормыНаКлиенте();
				
				ПараметрыЗаполненияТекущейСтроки = Неопределено;
				
				ЗанестиВПолучателиВыбранныеСтроки(
					Результат, 
					-1, // идентификатор текущей строки
					ПараметрыЗаполненияТекущейСтроки,
					ТипАдреса);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметр.ТекстОшибок) Тогда 
			ТекстОшибкиДобавленияПолучателя = Параметр.ТекстОшибок;
			ПодключитьОбработчикОжидания("ПоказатьФорматированноеСообщение", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавленыАдресаты" Тогда
		ОтменаРедактирования = Ложь;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Вложения.Очистить();
	ОбновитьФайлыШаблона();
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		ВключитьРежимРедактированияHTML();
		
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
			ТекстПисьма,
			Объект.Ссылка,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(Объект.Тема) Тогда 
		Объект.Наименование = СокрЛП(Объект.Тема);
	КонецЕсли;
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ВыполнитьЗаписьHTML();
	КонецЕсли;
	
	ВыполняетсяЗапись = Истина;
	
	Если Не ПоместитьФайлыСДискаВоВременноеХранилище() Тогда
		ВыполняетсяЗапись = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
	СписокОшибокПриЗаписи.Очистить();
	
	Если Объект.Пользователи.Количество() = 0 Тогда 
		Объект.ОбщийШаблон = Ложь;
	Иначе 
		Объект.ОбщийШаблон = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ПолучателиПисьма.Очистить();
	ТекущийОбъект.ПолучателиКопий.Очистить();
	ТекущийОбъект.ПолучателиСкрытыхКопий.Очистить();
	ТекущийОбъект.ПолучателиОтвета.Очистить();
	ТекущийОбъект.ГруппыПолучателей.Очистить();
	
	СчетчикСообщенийПользователю = 0;
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		
		Строка = Получатели[Счетчик];
		
		Если Не ЗначениеЗаполнено(Строка.Представление)Тогда
			Продолжить;
		КонецЕсли;
		
		// дозаполняем адрес и адресата (если руками введен текст)
		Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			// Пытаемся получить адрес электронной почты.
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
			
			Если ПустаяСтрока(РазложенныйАдрес.Адрес) Тогда
				
				Попытка
					// Если адрес электронной почты получить не удалось, пытаемся получить адрес 1С-почты.
					ПочтовыеАдреса = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Строка.Представление);
					Если ПочтовыеАдреса.Количество() <> 0 Тогда
						РазложенныйАдрес.Адрес = ПочтовыеАдреса[0].Адрес;
					КонецЕсли;
				Исключение
					// Адреса 1С-почты может не быть, ничего здесь не предпринимаем.
				КонецПопытки;
				
			КонецЕсли;
			
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка.Представление);
				Строка.Адрес = РазложенныйАдрес.Адрес;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		
		Строка = Получатели[Счетчик];
		
		Если ЗначениеЗаполнено(Строка.ГруппаПользователя) Тогда
			НоваяСтрока = ТекущийОбъект.ГруппыПолучателей.Добавить();
			НоваяСтрока.Группа = Строка.ГруппаПользователя;
			НоваяСтрока.ТипАдреса = Строка.ТипАдреса;
			НоваяСтрока.ПорядковыйНомер = Счетчик + 1;
			Продолжить;
			
		ИначеЕсли Не ЗначениеЗаполнено(Строка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиПисьма.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиКопий.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru = 'Обратный адрес:'; en = 'Return address:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиОтвета.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Адресат = Строка.Адресат;
		НоваяСтрока.ПорядковыйНомер = Счетчик + 1;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиПисьма);
	
	ТекстПисьмаДляЗаписи = "";
	Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ТекстПисьмаДляЗаписи = ТекстПисьмаHTMLПриЗаписи;
	Иначе	
		ТекстПисьмаДляЗаписи = ТекстПисьма;
	КонецЕсли;
	
	Если ИдентификаторыКартинокПисьма.Количество() <> 0 Тогда
		
		Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
			
			ОписаниеИсточника = Строка.Значение;
			
			Если Найти(ТекстПисьмаДляЗаписи, ОписаниеИсточника.НавигационнаяСсылка) <> 0 Тогда
				
				// при записи возвращаем GUID - а не навигационную ссылку на временное хранилище
				ТекстПисьмаДляЗаписи = СтрЗаменить(ТекстПисьмаДляЗаписи, 
					ОписаниеИсточника.НавигационнаяСсылка,
					"cid:" + ОписаниеИсточника.ИсточникФайла);
				
			Иначе
				
				// картинку из HTML удалили - удалим и из ИдентификаторыПочтовыхВложений, и пометим файл на удаление 
				УдаляемыеКартинки.Добавить(ОписаниеИсточника.ИсточникФайла);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ТекстПисьмаДляЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьВложения(ТекущийОбъект.Ссылка);
	
	// файла картинок добавим
	Для Каждого Строка Из СписокДобавленныхФайлов Цикл
		
		ОписаниеФайла = Строка.Значение;
		
		ВложениеПисьмаСсылка = Неопределено;
		
		Если ЗначениеЗаполнено(ОписаниеФайла.Ссылка) Тогда
			
			ВложениеПисьмаСсылка = ОписаниеФайла.Ссылка;
			
		Иначе
			
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ОписаниеФайла.ИмяФайла);
			ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ОписаниеФайла.ВремяИзменения);
			АдресВременногоХранилищаТекста = "";
			
			// Создадим карточку Файла в БД
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеФайла.Адрес;
			СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
			СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
			СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
			СведенияОФайле.Размер = ОписаниеФайла.Размер;
			СведенияОФайле.ВремяИзменения = ОписаниеФайла.ВремяИзменения;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
			СведенияОФайле.ХранитьВерсии = Ложь;
				
			ВложениеПисьмаСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ТекущийОбъект.Ссылка, СведенияОФайле);
				
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеФайла.УникальныйИдентификаторФайла) Тогда
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(ВложениеПисьмаСсылка, 
				ОписаниеФайла.УникальныйИдентификаторФайла);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ТекстПисьма = ТекстПисьмаHTMLПриЗаписи;
		ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	КонецЕсли;	
	
	ВыполняетсяЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстПисьмаПриОткрытии = "";
	
	Вложения.Очистить();
	
	Если СписокДобавленныхФайлов.Количество() <> 0 Тогда
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(ТекстПисьма, Объект.Ссылка, УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
	КонецЕсли;	
	
	СписокДобавленныхФайлов.Очистить();
	
	Для Каждого Строка Из УдаляемыеКартинки Цикл
		
		Идентификатор = Строка.Значение;
		
		Файл = НайтиИдентификаторПочтовыхВложений(Идентификатор, ТекущийОбъект.Ссылка);
		Если ЗначениеЗаполнено(Файл) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Файл);
				ФайлОбъект = Файл.ПолучитьОбъект();
				ФайлОбъект.УстановитьПометкуУдаления(Истина);
				РазблокироватьДанныеДляРедактирования(Файл);
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УдаляемыеКартинки.Очистить();
	
	ОбновитьФайлыШаблона();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	ПередИзменениемФормыНаКлиенте();
	УчетнаяЗаписьПроверитьПараметрыПочты();
	ВосстановитьПоложениеHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПредставлениеПриИзменении(Элемент)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);

	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено 
		И Элементы.Получатели.ТекущиеДанные.Представление = "" Тогда
		
		Элементы.Получатели.ТекущиеДанные.Контакт = Неопределено;
		Элементы.Получатели.ТекущиеДанные.Адресат = Неопределено;
		Элементы.Получатели.ТекущиеДанные.Адрес = "";
		Элементы.Получатели.ТекущиеДанные.Внешний = Ложь;
		Элементы.Получатели.ТекущиеДанные.ВидМаршрутизации = Неопределено;
		
	КонецЕсли;	
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИзАдреснойКниги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
		ПоказатьЗначение(, СтрокаДанных.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Адресат) 
			И ТипЗнч(ВыбранноеЗначение.Адресат) <> Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
			
			// выбрана группа
			//!!!!!!!!!!
			АдресатыГруппы = Новый Массив;
			ИспользованныеАдреса = Новый Соответствие;
			ВстроеннаяПочтаСервер.РазвернутьГруппуВАдресаты(ВыбранноеЗначение.Адресат, АдресатыГруппы, ИспользованныеАдреса);
			
			ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
			СтрокаДанных = Получатели.НайтиПоИдентификатору(ТекущаяСтрока);
			ТипАдреса = СтрокаДанных.ТипАдреса;

			ПередИзменениемФормыНаКлиенте();
			
			ПараметрыЗаполненияТекущейСтроки = Неопределено;
			ДобавленыАдресаты = ЗанестиВПолучателиВыбранныеСтроки(
				АдресатыГруппы, 
				ТекущаяСтрока, 
				ПараметрыЗаполненияТекущейСтроки,
				ТипАдреса);
			
			Если ПараметрыЗаполненияТекущейСтроки <> Неопределено Тогда
				
				Если СтрокаДанных <> Неопределено Тогда
					СтрокаДанных.Адресат = ПараметрыЗаполненияТекущейСтроки.Адресат;
					СтрокаДанных.Адрес =  ПараметрыЗаполненияТекущейСтроки.Адрес;
					СтрокаДанных.Контакт = ПараметрыЗаполненияТекущейСтроки.Контакт;
					СтрокаДанных.Представление = ПараметрыЗаполненияТекущейСтроки.Представление;
					СтрокаДанных.Внешний = ПараметрыЗаполненияТекущейСтроки.Внешний;
					СтрокаДанных.ВидМаршрутизации = ПараметрыЗаполненияТекущейСтроки.ВидМаршрутизации;
				КонецЕсли;
				
			КонецЕсли;	

			ВыбранноеЗначение = СтрокаДанных.Представление;
			Модифицированность = Истина;
			СтандартнаяОбработка = Ложь;
			
			ОтменаРедактирования = Ложь;
			Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
			
			Возврат;
			
		КонецЕсли;	
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		СтрокаДанных.Адресат = ВыбранноеЗначение.Адресат;
		СтрокаДанных.Контакт = ВыбранноеЗначение.Контакт;
		СтрокаДанных.КонтактЗагружен = Истина;
		СтрокаДанных.Представление = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Свойство("Адрес") Тогда
			СтрокаДанных.Адрес = ВыбранноеЗначение.Адрес;
		Иначе
			СтрокаДанных.Адрес = 
				ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					СтрокаДанных.Адресат, "Адрес");
		КонецЕсли;
		СтрокаДанных.Внешний = ВыбранноеЗначение.Внешний;
		СтрокаДанных.ВидМаршрутизации = ВыбранноеЗначение.ВидМаршрутизации;
		СтрокаДанных.РедактированиеЗавершено = Истина;
		Модифицированность = Истина;
		
		ПередИзменениемФормыНаКлиенте();
		
	#Если Не ВебКлиент Тогда
		
		ТекущийКонтакт = СтрокаДанных.Контакт;
		
	#КонецЕсли

		ВосстановитьПоложениеHTML();
		ВключитьРежимРедактированияHTMLКлиент();
		
		ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
		
		ВыбранноеЗначение = СтрокаДанных.Представление;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, 
	Ожидание, СтандартнаяОбработка)	
	
	Если ПустаяСтрока(Текст) Тогда
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Для Каждого Строка Из ПолучателиПредставлениеСписокВыбора Цикл
			ДанныеВыбора.Добавить(
				Строка.Значение, Строка.Представление, Строка.Пометка, Строка.Картинка);
		КонецЦикла;	
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрДлина(Текст) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	ТекстДляПолученияДанныхВыбора = "";
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ";");
	
	ПодстрокиДанныхОбъекта =
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных.Представление, ";");

	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1)
			Или ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(
		Текст, 
		ТекущийПользователь, 
		ЭтоВебКлиент);

	ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	
		
	Если ДанныеВыбора.Количество() <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.Контакт = Неопределено;
	СтрокаДанных.Адресат = Неопределено;
	СтрокаДанных.Адрес = "";
	СтрокаДанных.Внешний = Ложь;
	СтрокаДанных.ВидМаршрутизации = Неопределено;

	НовыйТекст = Текст;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		РезультатВыбораЗначение = Неопределено;
		
		АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Текст);
		Если Не ПустаяСтрока(АдресИнфо.Адрес) Тогда
			
			РезультатВыбораЗначение = ВстроеннаяПочтаСервер.ПолучитьПараметрыАдресатаПоАдресуИПредставлению(
				АдресИнфо.Адрес, 
				АдресИнфо.ОтображаемоеИмя);
			
		Иначе
			
			ЭтоВебКлиент = Ложь;
			#Если ВебКлиент Тогда
				ЭтоВебКлиент = Истина;
			#КонецЕсли
			
			РезультатВыбора = Неопределено;
			
			ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(
				Текст, 
				ТекущийПользователь,
				ЭтоВебКлиент);
				
			ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);		
				
			Если ДанныеВыбора.Количество() = 1 Тогда
				
				РезультатВыбора = ДанныеВыбора[0];
				
				
			ИначеЕсли ДанныеВыбора.Количество() > 1 Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("НовыйТекст", НовыйТекст);
				ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВыбораПолучателяИзСписка", 
					ЭтотОбъект,
					ДополнительныеПараметры);
				ПоказатьВыборИзСписка(
					ОписаниеОповещения,
					ДанныеВыбора, 
					Элементы.Получатели);
					
				Возврат;	
				
			КонецЕсли;
			
			Если РезультатВыбора <> Неопределено Тогда
				РезультатВыбораЗначение = РезультатВыбора.Значение;
			КонецЕсли;
		
		КонецЕсли;	
		
		Если РезультатВыбораЗначение <> Неопределено Тогда
			
			СтрокаДанных.Контакт = РезультатВыбораЗначение.Контакт;
			СтрокаДанных.КонтактЗагружен = Истина;
			СтрокаДанных.Адресат = РезультатВыбораЗначение.Адресат;
			НовыйТекст = "";
			
			Если ЗначениеЗаполнено(СтрокаДанных.Контакт) И ЗначениеЗаполнено(РезультатВыбораЗначение.Представление) Тогда
				НовыйТекст = РезультатВыбораЗначение.Представление;
			Иначе	
				НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
			КонецЕсли;	
			
			СтрокаДанных.Представление = НовыйТекст;
			СтрокаДанных.Адрес = РезультатВыбораЗначение.Адрес;
			СтрокаДанных.Внешний = РезультатВыбораЗначение.Внешний;
			СтрокаДанных.ВидМаршрутизации = РезультатВыбораЗначение.ВидМаршрутизации;
			
			ТекущийКонтакт = СтрокаДанных.Контакт;
			
			ВосстановитьПоложениеHTML();
			ВключитьРежимРедактированияHTMLКлиент();
			
			Модифицированность = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст, СтрокаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПолучателяИзСписка(РезультатВыбора, Параметры) Экспорт

	Если РезультатВыбора <> Неопределено Тогда
		
		СтрокаДанных = Параметры.СтрокаДанных;
		СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
		СтрокаДанных.Адресат = РезультатВыбора.Значение.Адресат;
		НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
		СтрокаДанных.Представление = НовыйТекст;
		СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
		СтрокаДанных.Внешний = РезультатВыбора.Значение.Внешний;
		СтрокаДанных.ВидМаршрутизации = РезультатВыбора.Значение.ВидМаршрутизации;
		
		ТекущийПолучатель = СтрокаДанных.Контакт;
		
		ВосстановитьПоложениеHTML();
		ВключитьРежимРедактированияHTMLКлиент();
		
		Модифицированность = Истина;
		
		Возврат;
			
	КонецЕсли;
	
	ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(
		Параметры.НовыйТекст, 
		Параметры.СтрокаДанных);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст, СтрокаДанных)	
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(НовыйТекст);
	
	Если ЗначениеЗаполнено(АдресИнфо.Адрес) Тогда
		ИмяАдресата = ?(ЗначениеЗаполнено(АдресИнфо.ОтображаемоеИмя), АдресИнфо.ОтображаемоеИмя, АдресИнфо.Адрес);
		СтрокаДанных.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресИнфо.Адрес, ИмяАдресата);
		ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат);
		СтрокаДанных.Представление = ПредставлениеАдресата.Представление;
		СтрокаДанных.Контакт = ПредставлениеАдресата.Контакт;
		СтрокаДанных.Адрес = АдресИнфо.Адрес;
		СтрокаДанных.Внешний = ПредставлениеАдресата.Внешний;
		СтрокаДанных.ВидМаршрутизации = ПредставлениеАдресата.ВидМаршрутизации;
	Иначе
		СтрокаДанных.Представление = НовыйТекст;
		СтрокаДанных.Внешний = Истина;
		СтрокаДанных.ВидМаршрутизации = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя");
	КонецЕсли;
	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	ТекущийПолучатель = СтрокаДанных.Контакт;
	
	ВосстановитьПоложениеHTML();
	ВключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РежимДобавленияАдресата = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	АвтоматическиНачатоРедактированиеАдреса = Ложь;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Если Получатели.Количество() = Элементы.Получатели.ВыделенныеСтроки.Количество() Тогда
			
			Отказ = Истина;
			
			ЧислоУдаляемыхПолучателей = Получатели.Количество() - 1;
			
			Для Индекс = 0 По ЧислоУдаляемыхПолучателей - 1 Цикл
				Получатели.Удалить(ЧислоУдаляемыхПолучателей - Индекс);
			КонецЦикла;
			
			Если Получатели.Количество() = 1 Тогда
				Строка = Получатели[0];
				Строка.Адресат = "";
				Строка.Контакт = "";
				Строка.Представление = "";
				Строка.Внешний = Ложь;
				Строка.ВидМаршрутизации = Неопределено;
			КонецЕсли;
			
			ТекущийКонтакт = Неопределено;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.РедактированиеЗавершено = Ложь;
	КоличествоАдресатовДоДобавления = Получатели.Количество();
	
	ПредыдущаяСтрокаТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'");
	
	Если Получатели.Количество() >= 2 Тогда
		
		ПредыдущаяСтрокаТипАдреса = Получатели[Получатели.Количество() - 2].ТипАдреса;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ТипАдреса) Тогда
		Если КоличествоАдресатовДоДобавления = 1 Тогда
			СтрокаДанных.ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'");
		Иначе
			СтрокаДанных.ТипАдреса = ПредыдущаяСтрокаТипАдреса;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанных.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(СтрокаДанных.ТипАдреса);

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.Получатели.ТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных.РедактированиеЗавершено = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
	ВключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтрокиВыполнить()
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ПолучателиПредставление.КнопкаОткрытия = ЗначениеЗаполнено(ТекущиеДанные.Контакт);
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Адресат = ТекущиеДанные.Адресат;
		
		Если ТекущийАдресат <> Адресат Тогда
			
			ТекущийАдресат = Адресат;
			ТекущийКонтакт = ТекущиеДанные.Контакт;
			ТекущийАдресатВнешний = ТекущиеДанные.Внешний;
			ТекущийАдресатИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
			ТекущийКонтактЗагружен = ТекущиеДанные.КонтактЗагружен;
			Если Не ТекущийАдресатВнешний Тогда
				ТекущийКонтактЗагружен = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТипАдресаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТипАдреса = ТекущиеДанные.ТипАдреса;
	ТекущиеДанные.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Если Не ВебКлиент Тогда
		ТекущееВремя = ТекущаяДата();
		// Прошло 0 секунд с момента прекращения редактирования
		// - т.е. вероятно был сделан двойной щелчок в области файлов
		Если ТекущееВремя - ВремяОкончанияРедактированияПолучателей = 0 Тогда
			ПоказатьПредупреждение(, НСТр("ru='Откройте файл еще раз.'; en = 'Open the file again.'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Если Элемент.ТекущиеДанные.Расположение <> "Файл" Тогда
		
		ЗаписьПисьмаПриВыбореФайла = Истина;
		
		Если Не ЗаписатьКлиент() Тогда
			ЗаписьПисьмаПриВыбореФайла = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, ОткрыватьФайлыНаРедактирование);
	КонецЕсли;
	
	ЗаписьПисьмаПриВыбореФайла = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПодключитьОбработчикОжидания("ДобавитьФайлыСДиска", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПолучитьРазрешениеИЗаписатьПисьмо("ЗавершениеВложенияПередНачаломИзменения");
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВложенияПередНачаломИзменения(Результат)
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОтобразитьКоличествоФайловКлиент();
	ВосстановитьПоложениеHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныйВложений = Элементы.Вложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныйВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныйВложений = 1 Тогда
		
			ДанныеСтроки = Элементы.Вложения.ТекущиеДанные;
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) Тогда
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ИмяФайлаНаДиске) Тогда
				КаталогTEMP = КаталогВременныхФайлов();
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогTEMP);
				ИмяВременногоФайла = КаталогTEMP + ДанныеСтроки.ИмяФайла;
				КопироватьФайл(ДанныеСтроки.ИмяФайлаНаДиске, ИмяВременногоФайла);
				ПолноеИмяПеретаскиваемогоФайла = ИмяВременногоФайла;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;	
			
		Иначе
			
			МассивФайлов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ДанныеСтроки.Расположение <> "Файл" Тогда
					Продолжить;
				КонецЕсли;
				МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			КонецЦикла;
			Если МассивФайлов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивФайлов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("Массив")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("СправочникСсылка.Файлы")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("Файл")
		И ПеретаскиваемоеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ОтключитьОбработчикОжидания("ДобавитьФайлыСДиска");
	
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Массив") Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайловНаДиске = Новый Массив;
		Для каждого ПеретаскиваемыйЭлемент Из ПеретаскиваемоеЗначение Цикл
			Если ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("СправочникСсылка.Файлы") Тогда
				МассивФайлов.Добавить(ПеретаскиваемыйЭлемент);
			ИначеЕсли ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("Файл") Тогда
				МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(ПеретаскиваемыйЭлемент));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлы(МассивФайлов);
		КонецЕсли;
		
		Если МассивФайловНаДиске.Количество() > 0 Тогда
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПеретаскиваемоеЗначение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПередИзменениемФормыНаКлиенте();
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПеретаскиваемоеЗначение);
		ДобавитьВложениеФайлы(МассивФайлов);
		
	ИначеЕсли ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Файл") Тогда
		
		МассивФайловНаДиске = Новый Массив;
		МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(ПеретаскиваемоеЗначение));
		
		ПередИзменениемФормыНаКлиенте();
		ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
		Модифицированность = Истина;
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОтобразитьКоличествоФайловКлиент();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧислоВыделенных = Элементы.Вложения.ВыделенныеСтроки.Количество();
	
	ТекстВопроса = "";
	Если ЧислоВыделенных < 2 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить ""%1""?'; en = 'Delete ""%1""?'"),
			ТекущиеДанные.Представление);
	Иначе		
		ПодписьФайлов =	ПолучитьПодписьФайлов(ЧислоВыделенных);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить %1 %2?'; en = 'Delete the %1 %2?'"),
			Строка(ЧислоВыделенных), ПодписьФайлов);
	КонецЕсли;				
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдаленияВложений", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУдаленияВложений(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ТекущиеДанные.Расположение = "Файл" Тогда
		
		ПередИзменениемФормыНаКлиенте();
		ВложенияПометитьНаУдалениеСервер(Элементы.Вложения.ВыделенныеСтроки, 
			ТекущиеДанные.РедактируетТекущийПользователь,
			Не ТекущиеДанные.ПометкаУдаления);
		
	Иначе
		
		ПередИзменениемФормыНаКлиенте();
		
		Если ТекущиеДанные.Расположение = "ВременноеХранилище"
			И ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
		
		Для Каждого ИдСтроки Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ЭлементСписка = Вложения.НайтиПоИдентификатору(ИдСтроки);
			Если ЭлементСписка <> Неопределено Тогда
				Вложения.Удалить(ЭлементСписка);
			КонецЕсли;	
		КонецЦикла;	
		
		ОтобразитьКоличествоФайловКлиент();
		
		ПодключитьОбработчикОжидания("ВключитьРежимРедактированияHTMLКлиент", 0.2, Истина);
		
	КонецЕсли;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Владелец", Объект.Ссылка);
	ПараметрОповещения.Вставить("Файл", ТекущиеДанные.Ссылка);
	ПараметрОповещения.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", Ложь);
	ПараметрОповещения.Вставить("ИдентификаторРодительскойФормы", УникальныйИдентификатор);
	ПараметрОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
	
	Оповестить("Запись_Файл", ПараметрОповещения, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ПользовательИлиГруппа = 
			ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Объект.Пользователи.Очистить();
		Для каждого ГруппаСтрока Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Пользователи.Добавить();
			Строка.ПользовательИлиГруппа = ГруппаСтрока.Исполнитель;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда  
		ТекущаяСтрока = Элементы.Пользователи.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Объект.Пользователи.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.ПользовательИлиГруппа = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь; 
		ДанныеВыбора = ПодобратьПользователя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьАдресата(Команда)
	
	Элементы.Получатели.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателейСписком(Команда)
	
	ПараметрыФормы = Новый Структура(
		"УникальныйИдентификаторРодительскойФормы",
		УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВставкаПолучателейПисьма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтопереносСтрок(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ТекстВопроса = НСтр("ru = 'Преобразование письма в текст удалит форматирование, вставленные изображения, таблицы, гиперссылки и другие элементы оформления.
			|Продолжить?';
			|en = 'Converting email to text will remove text formatting, inserted pictures, tables, hyperlinks, and other design elements. 
			|Do you want to continue?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеАвтопереносаСтрок", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0);
		
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьАвтопереносСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматHTML(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Возврат;
	Иначе
		// преобразуем текст в HTML
		ВыполнитьПереключениеВHTML();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	#Если Не ВебКлиент Тогда	
	
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			ПроверитьОрфографиюHTML();
		Иначе	                      
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекст", ЭтотОбъект);
			ВстроеннаяПочтаКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, ТекстПисьма);
		КонецЕсли;	
	
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПолучитьРазрешениеИЗаписатьПисьмо("ЗавершениеРедактироватьВложение");
		Возврат;

	КонецЕсли;
	
	ПродолжитьРедактироватьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение <> "Файл" Тогда
		ПолучитьРазрешениеИЗаписатьПисьмо("ЗавершениеПросмотретьВложение");
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(ТекущиеДанные.Ссылка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераКакФайл(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ДобавитьКартинкуИзБуфераКакФайлЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьКартинкуИзБуфераКакФайлЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераКакФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			МассивФайловНаДиске = Новый Массив;
			Файл = Новый Файл(ПутьКФайлу);
			МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(Файл));
			
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
			Модифицированность = Истина;
			ПослеИзмененияФормыНаКлиенте();
			
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'Ther is no picture in clipboard'"));
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ВстроеннаяПочтаКлиент.СохранитьВложенияКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ВызватьИсключение НСтр("ru = 'Файл еще не записан'; en = 'The file is not saved yet'");
	КонецЕсли;
	
	ПередИзменениемФормыНаКлиенте();
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДатаИВремя(Команда)
	
	ТекстПисьма  = ТекстПисьма + "[День].[Месяц].[Год] [Час]:[Минута]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДень(Команда)
	
	ТекстПисьма  = ТекстПисьма + "[День]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьМесяц(Команда)
	
	ТекстПисьма  = ТекстПисьма + "[Месяц]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГод(Команда)
	
	ТекстПисьма  = ТекстПисьма + "[Год]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЧас(Команда)
	
	ТекстПисьма  = ТекстПисьма + "[Час]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьМинута(Команда)
	
	ТекстПисьма  = ТекстПисьма + "[Минута]";
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПользователей(Команда)
	
	ВыбратьПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Письмо(Команда)
	
	Если Модифицированность Тогда 
		Записать();
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмоНаОсновании(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
		
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТема()
	
	ТекущийЭлемент = Элементы.Тема;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьНомерСпособаАдресации(ТипАдреса)
	
	Если ТипАдреса = НСтр("ru = 'Кому:'; en = 'To:'") Тогда
		Возврат 1;
	КонецЕсли;

	Если ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'") Тогда
		Возврат 2;
	КонецЕсли;
	
	Если ТипАдреса = НСтр("ru = 'Скрытая копия:'; en = 'Bcc:'") Тогда
		Возврат 3;
	КонецЕсли;

	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ВключитьРежимРедактированияHTMLКлиент()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если Найти(ТекстПисьма, "<body contentEditable") = 0 И Найти(ТекстПисьма, "<BODY contentEditable") = 0 Тогда
		
			Если Найти(ТекстПисьма, "<body") <> 0 Или Найти(ТекстПисьма, "<BODY") <> 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contentEditable=true");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<BODY", "<BODY contentEditable=true");
			Иначе	
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<html>", "<html><body contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</html>", "</body></html>");
				
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<HTML>", "<HTML><BODY contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</HTML>", "</BODY></HTML>");
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателя(ТипАдреса, Адресат, СоответствиеДанныхАдресатов = Неопределено)
	
	НоваяСтрока = Получатели.Добавить();
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда
		ДанныеПолучателя = СоответствиеДанныхАдресатов.Получить(Адресат);
		Если ДанныеПолучателя = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		ДанныеПолучателя = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
	КонецЕсли;
	НоваяСтрока.Представление = ДанныеПолучателя.Представление;
	НоваяСтрока.Контакт = ДанныеПолучателя.Контакт;
	НоваяСтрока.ТипАдреса = ТипАдреса;
	НоваяСтрока.Адресат = Адресат;
	НоваяСтрока.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);

	Если ЗначениеЗаполнено(Адресат) Тогда
		Если СоответствиеДанныхАдресатов <> Неопределено Тогда
			НоваяСтрока.Адрес = ДанныеПолучателя.Адрес;
		Иначе	
			НоваяСтрока.Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.РедактированиеЗавершено = Истина;
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда 
		НоваяСтрока.Внешний = ДанныеПолучателя.Внешний;
	Иначе	
		НоваяСтрока.Внешний = ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(Адресат);
	КонецЕсли;	
	НоваяСтрока.ВидМаршрутизации = Адресат.ВидМаршрутизации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейКомуКопия()
		
	ТаблицаЗначений = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(
		Объект.Ссылка, Ложь, Истина);
	
	КС = Новый КвалификаторыСтроки(80);
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБ = Новый ОписаниеТипов(МассивБулево);
	ТаблицаЗначений.Колонки.Добавить("КонтактЗагружен", ОписаниеТиповБ);
	
	КЧ = Новый КвалификаторыЧисла(1);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КЧ);
	ТаблицаЗначений.Колонки.Добавить("НомерСпособаАдресации", ОписаниеТиповЧ);
	
	ТаблицаЗначений.Колонки.Добавить("ГруппаПользователя");
	
	Для Каждого Строка Из Объект.ГруппыПолучателей Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.ГруппаПользователя = Строка.Группа;
		НоваяСтрока.ТипАдреса = Строка.ТипАдреса;
		НоваяСтрока.Представление = СокрЛП(Строка.Группа);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Строка.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(Строка.ТипАдреса);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "Получатели");
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьПолучателей()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьПолучателейКомуКопия();
	Иначе	
		МассивАдресатов = Новый Массив;
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиОтвета Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		
		СоответствиеДанныхАдресатов = 
			ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
		
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.Кому, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.Копия, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.СкрытаяКопия, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиОтвета Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.ОбратныйАдрес, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПозициюHTMLВНачало()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		//HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		//textRange = HTMLДокумент.body.createTextRange();
		//textRange.moveToElementText(HTMLДокумент.body);
		//textRange.collapse(true);
		//textRange.select();
		//   нужна проверка в IE8 - возможно не сработает
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНастройкиОтображения(ТекстПисьма, ТипТекста, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если ШрифтОтображенияУстановлен Тогда
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, Ложь, Истина);
		Иначе
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзАдреснойКниги(ПараметрМножественныйВыбор = Неопределено)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана учетная запись. Рекомендуется в настройках почты установить учетную запись по умолчанию.'; en = 'Account is not specified. It is recommended in your personal mail settings set one account as default account.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполненыПараметрыEmailУчетнойЗаписи Тогда
		
		ПоказатьПредупреждение(, НСтр("ru ='Для отправки почты нужно настроить параметры подключения к почтовому серверу.'; en = 'To send email you must configure the connection to the email server.'"));
		Возврат;
		
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Представление = СтрокаДанных.Представление;
	
	Если Элементы.Получатели.ТекущийЭлемент <> Неопределено Тогда
		Представление = Элементы.Получатели.ТекущийЭлемент.ТекстРедактирования;
	КонецЕсли;	
	
	МножественныйВыбор = Ложь;
	ТипАдреса = НСтр("ru = 'Копия:'; en = 'Cc:'");
	Контакт = Неопределено;
	ТекущаяСтрока = -1;
	
	Если Не ЗначениеЗаполнено(ПараметрМножественныйВыбор) Тогда
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		МножественныйВыбор = Не ЗначениеЗаполнено(СтрокаДанных.Представление);
		ТипАдреса = СтрокаДанных.ТипАдреса;
		Контакт = СтрокаДанных.Контакт;
		ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
		
	Иначе
		МножественныйВыбор = ПараметрМножественныйВыбор;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РежимРаботыФормы", ?(МножественныйВыбор, 2, 1));
	ПараметрыОткрытия.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьРоли", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьЭлектронныеАдреса", Истина);
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьПочты", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("ПоказыватьТипАдресов", Истина);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", СтрокаДанных.ТипАдреса);
	ПараметрыОткрытия.Вставить("КонтекстОткрытия", Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МножественныйВыбор", МножественныйВыбор);
	ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ТипАдреса",ТипАдреса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораИзАдреснойКниги", ЭтотОбъект, ДополнительныеПараметры);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыОткрытия, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораИзАдреснойКниги(Результат, Параметры) Экспорт

	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	СтрокаДанных = Параметры.СтрокаДанных;
	ТекущаяСтрока = Параметры.ТекущаяСтрока;
	ТипАдреса = Параметры.ТипАдреса;
	
	Модифицированность = Истина;
	
	// Заполнение адресатов
	Если Не МножественныйВыбор Тогда
		
		Если Результат.Количество() > 0 Тогда
			
			Представление = Строка(Результат[0].Контакт);
			Если ТипЗнч(Результат[0].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				Представление = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					Результат[0].Контакт,
					"ПредставлениеВПерепискеСРангом");
				Представление = Представление + " <" + Результат[0].Адрес + ">";
			
			ИначеЕсли ТипЗнч(Результат[0].Контакт) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				СтрокаДанных.ГруппаПользователя = Результат[0].Контакт;
				
			Иначе 
				Представление = Представление + " <" + Результат[0].Адрес + ">";
			КонецЕсли;
			
			Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Результат[0].Адрес, Представление);
			СтрокаДанных.Адресат = Адресат;
			СведенияОбАдресате = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
			СтрокаДанных.Контакт = СведенияОбАдресате.Контакт;
			СтрокаДанных.Представление = СведенияОбАдресате.Представление;
			СтрокаДанных.Адрес = Результат[0].Адрес;	
			СтрокаДанных.Внешний = СведенияОбАдресате.Внешний;
			СтрокаДанных.ВидМаршрутизации = СведенияОбАдресате.ВидМаршрутизации;
			
			ТекущийПолучатель = СтрокаДанных.Контакт;
			
		КонецЕсли;
		
	Иначе
		
		ПередИзменениемФормыНаКлиенте();
		
		ПараметрыЗаполненияТекущейСтроки = Неопределено;
		ДобавленыАдресаты = ЗанестиВПолучателиВыбранныеСтроки(
			Результат, 
			ТекущаяСтрока, 
			ПараметрыЗаполненияТекущейСтроки,
			ТипАдреса);
		
		Если ПараметрыЗаполненияТекущейСтроки <> Неопределено Тогда
			
			Если СтрокаДанных <> Неопределено Тогда
				СтрокаДанных.Адресат = ПараметрыЗаполненияТекущейСтроки.Адресат;
				СтрокаДанных.Адрес =  ПараметрыЗаполненияТекущейСтроки.Адрес;
				СтрокаДанных.Контакт = ПараметрыЗаполненияТекущейСтроки.Контакт;
				СтрокаДанных.Представление = ПараметрыЗаполненияТекущейСтроки.Представление;
				СтрокаДанных.Внешний = ПараметрыЗаполненияТекущейСтроки.Внешний;
				СтрокаДанных.ВидМаршрутизации = ПараметрыЗаполненияТекущейСтроки.ВидМаршрутизации;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Оповестить("ДобавленыАдресаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередИзменениемФормыНаКлиенте()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ПолучитьHTMLИзПоляHTMLДокумента();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьHTMLИзПоляHTMLДокумента()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда			
		ТекстПисьма = ПолучитьТекстПисьмаВПоле();
		ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		ЗапомнитьПозициюHTML();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
// На сервере заполняет получателей после выбора и адресной книги
// Параметры
//
// ВыбранныеАдресаты - массив структур с адресатами, который вернула адресная книга
// ИдТекущаяСтрока - идентификатор текущй строки
// ВозвращаемыйПараметрыЗаполненияТекущейСтроки - данные для заполнения текущей строки (на сервере нельзя это сделать)
// ТипАдреса - тип адреса для вновь создаваемых получателей
Функция ЗанестиВПолучателиВыбранныеСтроки(ВыбранныеАдресаты, ИдТекущаяСтрока, 
	ВозвращаемыйПараметрыЗаполненияТекущейСтроки, ТипАдреса)
	
	ДобавленыАдресаты = Ложь;
	
	Если ИдТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдТекущаяСтрока);
	КонецЕсли;	
	
	АдресаПолучателей = Новый Соответствие;
	КонтактыПолучателей = Новый Соответствие;
	
	Для Каждого Строка Из Получатели Цикл
		
		Если ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			АдресаПолучателей[НРег(Строка.Адресат.Адрес)] = Строка.Контакт;
			КонтактыПолучателей[Строка.Контакт] = НРег(Строка.Адресат.Адрес);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
	СоответствиеАдресатов = 
		ВстроеннаяПочтаСервер.ПолучитьСоответствиеАдресатовПоАдресуИКонтакту(ВыбранныеАдресаты);
	
	Индекс = 0;
	ИспользованаТекущаяСтрока = Ложь;
	Для Индекс = 0 По ВыбранныеАдресаты.Количество() - 1 Цикл
		
		Строка = ВыбранныеАдресаты[Индекс];
		
		КодВозврата = "";
		
		Если ЗначениеЗаполнено(Строка.Адрес) Тогда 
			Адрес = Строка.Адрес;
		ИначеЕсли Строка.Свойство("МассивАдресатов") И ЗначениеЗаполнено(Строка.МассивАдресатов) Тогда 
			Адрес = Строка.МассивАдресатов[0].Адрес;
		КонецЕсли;
		
		НайденАдресПоКонтакту = КонтактыПолучателей.Получить(Строка.Контакт);
		НайденКонтактПоАдресу = АдресаПолучателей.Получить(НРег(Адрес));
		Если НайденАдресПоКонтакту <> Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда
			КодВозврата = "ПолныйДубль";
		ИначеЕсли НайденАдресПоКонтакту = Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда	
			КодВозврата = "ТотЖеАдресДругойКонтакт";
		КонецЕсли;	
			
		Если КодВозврата = "ПолныйДубль" Тогда // эту строку не добавляем - она уже есть
			Продолжить;
		КонецЕсли;	
		
		ДобавленыАдресаты = Истина;
		
		Если КодВозврата = "ТотЖеАдресДругойКонтакт" Тогда // сообщим об ошибке, но строку все же добавим
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адрес ""%1"" встречается в адресатах письма дважды (""%2"" и ""%3"")'; en = 'The address ""%1"" is encountered in email addressees twice (""%2"" and ""%3"")'"),
					Строка.Адрес, Строка.Контакт, НайденКонтактПоАдресу);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"Получатели");
				
		КонецЕсли;	
		
		НоваяСтрока = Неопределено;
		ЭтоТекущаяСтрока = Ложь;
		Если Не ИспользованаТекущаяСтрока И СтрокаДанных <> Неопределено Тогда
			НоваяСтрока = СтрокаДанных;
			ИспользованаТекущаяСтрока = Истина;
			ЭтоТекущаяСтрока = Истина;
		Иначе
			НоваяСтрока = Получатели.Добавить();
			НоваяСтрока.ТипАдреса = ТипАдреса;
		КонецЕсли;
		
		ЭтоГруппа = Ложь;
		Представление = Строка(Строка.Контакт);
		Если ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Контакт, "ПредставлениеВПерепискеСРангом");
				
		ИначеЕсли ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			СтрокаДанных.ГруппаПользователя = Строка.Контакт;
			ЭтоГруппа = Истина;
			
		КонецЕсли;
		
		Если Не ЭтоГруппа Тогда 
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + " <" + Строка.Адрес + ">";
			Иначе
				Представление = Строка.Адрес;
			КонецЕсли;
		КонецЕсли;
		
		АдресатСтруктура = СоответствиеАдресатов[НРег(Адрес)];
		Адресат = Неопределено;
		Внешний = Ложь;
		ВидМаршрутизации = Неопределено;
		Если АдресатСтруктура <> Неопределено Тогда
			Адресат = АдресатСтруктура.Адресат;
			Внешний = АдресатСтруктура.Внешний;
			ВидМаршрутизации = АдресатСтруктура.ВидМаршрутизации;
		Иначе
			Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(Адрес, Представление);
			Внешний = Истина;
			ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
		КонецЕсли;
		
		НоваяСтрока.Адресат = Адресат;
		НоваяСтрока.Контакт = Строка.Контакт;
		
		Если ПустаяСтрока(Представление) Тогда
			НоваяСтрока.Представление = Строка.Адрес;
		Иначе	
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
		НоваяСтрока.Адрес = Адрес;
		НоваяСтрока.Внешний = Внешний;
		НоваяСтрока.ВидМаршрутизации = ВидМаршрутизации;
		
		Если ЭтоТекущаяСтрока Тогда
			ВозвращаемыйПараметрыЗаполненияТекущейСтроки = 
				Новый Структура("Адресат, Контакт, Представление, Адрес, Внешний, ВидМаршрутизации",
				НоваяСтрока.Адресат, НоваяСтрока.Контакт, НоваяСтрока.Представление, 
				НоваяСтрока.Адрес, НоваяСтрока.Внешний, НоваяСтрока.ВидМаршрутизации);
		КонецЕсли;	
		
		НоваяСтрока.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);
	КонецЦикла;
	
	ВключитьРежимРедактированияHTML();
	Возврат ДобавленыАдресаты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбора()
	
	// заполнение списка выбора адресатов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
		|	ИспользованиеАдресатовПользователями.Адресат,
		|	ИспользованиеАдресатовПользователями.Адресат.ВидМаршрутизации КАК ВидМаршрутизации,
		|	ЕСТЬNULL(СведенияОбАдресатах.Контакт, НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ЕСТЬNULL(СведенияОбАдресатах.Представление, АдресатыПочтовыхСообщений.Наименование) КАК Представление,
		|	АдресатыПочтовыхСообщений.Адрес,
		|	ЛичныеАдресаты.Пользователь
		|ИЗ
		|	РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатовПользователями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО ИспользованиеАдресатовПользователями.Адресат = АдресатыПочтовыхСообщений.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|			ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
		|		ПО ИспользованиеАдресатовПользователями.Адресат = СведенияОбАдресатах.АдресатСообщения
		|ГДЕ
		|	ИспользованиеАдресатовПользователями.Пользователь = &Пользователь
		|	И (ЛичныеАдресаты.Пользователь ЕСТЬ NULL 
		|			ИЛИ ЛичныеАдресаты.Пользователь = &Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеАдресатовПользователями.ДатаПоследнегоИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	ПолучателиПредставлениеСписокВыбора.Очистить();
	Пока Выборка.Следующий() Цикл
		
		Значение = Новый Структура;
		Значение.Вставить("Адресат", Выборка.Адресат);
		Значение.Вставить("Адрес", Выборка.Адрес);		
		Значение.Вставить("Контакт", Выборка.Контакт);
		Значение.Вставить("Представление",  Выборка.Представление);
		Значение.Вставить("Внешний", ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(Выборка.Адресат));
		Значение.Вставить("ВидМаршрутизации", Выборка.ВидМаршрутизации);
		
		Если Значение.Внешний Тогда 
			КартинкаВыбора = БиблиотекаКартинок.ВнешнийАдресат16;
		Иначе
			КартинкаВыбора = БиблиотекаКартинок.ВнутреннийАдресат16;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			Если ПриложениеЯвляетсяВебКлиентом Тогда 
				ПолучателиПредставлениеСписокВыбора.Добавить(Значение, Выборка.Представление);
			Иначе
				ПолучателиПредставлениеСписокВыбора.Добавить(Значение, Выборка.Представление,,КартинкаВыбора);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка =
		(ПолучателиПредставлениеСписокВыбора.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьПроверитьПараметрыПочты()
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.УчетнаяЗапись).Чтение
		И Объект.УчетнаяЗапись.ИспользоватьДляОтправки
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись.СерверИсходящейПочты) Тогда
		
		ЗаполненыПараметрыEmailУчетнойЗаписи = Истина;
		
	Иначе
		
		ЗаполненыПараметрыEmailУчетнойЗаписи = Ложь;
		
	КонецЕсли;
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеАвтопереносаСтрок(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// преобразуем HTML в текст
	ПолучитьHTMLИзПоляHTMLДокумента();
	ВыполнитьПереключениеВТекст();
	Модифицированность = Истина;
	
	ПродолжитьАвтопереносСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАвтопереносСтрок()
	
	ОбновитьКомандыФорматаТекста();
	
	Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
	
	Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
	Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВHTML()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстHTMLДляИсходящегоПисьмаИзПростогоТекста(ТекстПисьма);
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	ВключитьРежимРедактированияHTML();
	ОбновитьКомандыФорматаТекста();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыФорматаТекста()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Элементы.ФормаФорматHTML.Пометка = Истина;
		Элементы.ФормаАвтопереносСтрок.Пометка = Ложь;
	Иначе
		Элементы.ФормаФорматHTML.Пометка = Ложь;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина;
	КонецЕсли;	
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Элементы.ТекстПисьмаHTML.Видимость = Истина;
		
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
		
	Иначе		
		Элементы.ТекстПисьмаHTML.Видимость = Ложь;
			
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		Элементы.ГруппаСтраницаПолеТекстовогоДокумента.Видимость = Ложь;
		
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВТекст()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма);
	
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	
	ОбновитьКомандыФорматаТекста();
	
	// получаем только файлы картинки в теле HTML - в режиме HTML они не видны как вложения, но при смене формата в текст станут видны
	
	//!!!!!
	ИдентификаторыКартинокПисьма.Очистить();
	
	ВложенияКартинки.Очистить();
	СписокДобавленныхФайлов.Очистить();
	//
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФайлыШаблона = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Истина,    // ТолькоСИдентификаторами
			Ложь); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать

		Для каждого ФайлыШаблонаСтрока Из ФайлыШаблона Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыШаблонаСтрока);
			ВложенияСтрока.Расположение = "Файл";
			
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УдалитьИдентификаторПочтовогоВложения(ФайлыШаблонаСтрока.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРежимРедактированияHTML()
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Если Найти(ТекстПисьма, "<body contentEditable") = 0 И Найти(ТекстПисьма, "<BODY contentEditable") = 0 Тогда
		
			Если Найти(ТекстПисьма, "<body") <> 0 Или Найти(ТекстПисьма, "<BODY") <> 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contentEditable=true");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<BODY", "<BODY contentEditable=true");
			Иначе	
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<html>", "<html><body contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</html>", "</body></html>");
				
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<HTML>", "<HTML><BODY contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</HTML>", "</BODY></HTML>");
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаписьHTML()
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	
	ЗапомнитьПозициюHTML();
	ТекстПисьмаHTMLДляОтменыОтправки = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		// в веб клиенте  HTMLДокумент.images недоступен
		#Если Не ВебКлиент Тогда 
		
		ЧислоКартинок = HTMLДокумент.images.length;  
		Для Индекс = 0 По ЧислоКартинок - 1 Цикл  
			
			Изображение = HTMLДокумент.images.item(Индекс);		
			
			Попытка
				Если Найти(ВРег(Изображение.src), ВРег("file://")) = 1 Тогда
					
					ПутьФайла = Сред(Изображение.src, СтрДлина("file://") + 1);
					ПутьФайла = СтрЗаменить(ПутьФайла, "%20", " ");
					
					ПервыйСимвол = Лев(ПутьФайла, 1);
					Если ПервыйСимвол = "/" Или ПервыйСимвол = "\" Тогда
						ПутьФайла = Сред(ПутьФайла, 2);
					КонецЕсли;	
					
					АдресВоВременномХранилище = "";
					
					ПомещаемыеФайлы = Новый Массив;
					Описание = Новый ОписаниеПередаваемогоФайла(ПутьФайла, "");
					ПомещаемыеФайлы.Добавить(Описание);
					ПомещенныеФайлы = Новый Массив;
					Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
						ВызватьИсключение
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
								ПутьФайла);
					КонецЕсли;
					
					Если ПомещенныеФайлы.Количество() = 1 Тогда
						АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
					Иначе
						ВызватьИсключение
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
								ПутьФайла);
					КонецЕсли;
					
					УникальныйИдентификаторФайла = Новый УникальныйИдентификатор; 
					УникальныйИдентификаторФайла = Строка(УникальныйИдентификаторФайла);
					Изображение.src = "cid:" + УникальныйИдентификаторФайла;
					
					Файл = Новый Файл(ПутьФайла);
					
					ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
						АдресВоВременномХранилище, УникальныйИдентификаторФайла,
						Файл.ПолучитьВремяИзменения(), Файл.Имя, Файл.Размер(), 
						Неопределено);
						
					СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
					
				КонецЕсли;	
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			КонецПопытки;
			
		КонецЦикла;	
		
		#КонецЕсли
		
	КонецЕсли;
	
	ТекстПисьмаHTMLПриЗаписи = ПолучитьТекстПисьмаВПоле();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстПисьмаВПоле()
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	ТекстПисьмаВПоле = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
	
	Возврат ТекстПисьмаВПоле;
	
КонецФункции

&НаКлиенте
Процедура ЗапомнитьПозициюHTML()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли	
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	
	Попытка
	
	    Выделение = HTMLДокумент.getSelection();
		
		Узел = Выделение.getRangeAt(0).startContainer;
		ТекущееПоложениеНачало = Выделение.getRangeAt(0).startOffset;
		ТекущееПоложениеКонец = Выделение.getRangeAt(0).endOffset;

		Счетчик = 0;
		НайденныйНомерУзла = -1;
		Результат = НайтиНомерУзла(HTMLДокумент, Узел, Счетчик, НайденныйНомерУзла);
		
		ТекущийНомерУзла = НайденныйНомерУзла;
		
		ГоризонтальнаяПрокруткаHTML = HTMLДокумент.body.scrollLeft;
		ВертикальнаяПрокруткаHTML = HTMLДокумент.body.scrollTop;
		
	Исключение	
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;	
		
КонецПроцедуры

&НаКлиенте
Функция НайтиНомерУзла(ТекущийУзел, ВыделенныйУзел, Счетчик, НайденныйНомерУзла)
	
	Если ТекущийУзел.childNodes.length = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого Узел Из ТекущийУзел.childNodes Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Узел = ВыделенныйУзел Тогда
			НайденныйНомерУзла = Счетчик;
			Возврат Истина;
		КонецЕсли;	
		
		Результат = НайтиНомерУзла(Узел, ВыделенныйУзел, Счетчик, НайденныйНомерУзла);
		Если Результат = Истина Тогда
			Возврат Результат;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗавершениеПроверитьОрфографиюТекст(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		ТекстПисьма = Результат.ТекстПисьма;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографиюHTML(ОтправкаПисьма = Ложь)
	
	ТекстHTMLОригинальный = ПолучитьТекстПисьмаВПоле();
	ТекстHTMLИзмененный = ТекстHTMLОригинальный;
	ТекстДляПроверки = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстHTMLОригинальный);
	
	СловЗаменено = 0;
	СловПропущено = 0;
	НайденоОшибок = 0;
	
	Попытка
		Word = Новый COMОбъект("Word.Application");
		
		Если Word.Documents.Count = 0 Тогда
			Word.Documents.Add();
		КонецЕсли;
		
	Исключение
		ВключитьРежимРедактированияHTMLКлиент();
		Word = Неопределено;
		Возврат;
	КонецПопытки;
		
	Исключения = Новый Соответствие;
	СловаЗамены = Новый Соответствие;
	ПорядокСлов = Новый Соответствие;
	
	Текст = ТекстДляПроверки;
	НомерСтрокиНачальный = 1;
	ПозицияВСтроке = -1;
	СловоЗамены = "";
	СловоОригинальное = "";
	НомерСлова = -1;
	НомерСтрокиТекущий = -1;
	
	ПараметрыПроверкиОрфографии = Новый Структура;
	ПараметрыПроверкиОрфографии.Вставить("Текст", Текст);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиНачальный", НомерСтрокиНачальный);
	ПараметрыПроверкиОрфографии.Вставить("ПозицияВСтроке", ПозицияВСтроке); 
	ПараметрыПроверкиОрфографии.Вставить("СловоОригинальное", СловоОригинальное);
	ПараметрыПроверкиОрфографии.Вставить("СловоЗамены", СловоЗамены);
	ПараметрыПроверкиОрфографии.Вставить("НомерСлова", НомерСлова);
	ПараметрыПроверкиОрфографии.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLОригинальный", ТекстHTMLОригинальный); 
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLИзмененный", ТекстHTMLИзмененный); 
	ПараметрыПроверкиОрфографии.Вставить("Word", Word);
	ПараметрыПроверкиОрфографии.Вставить("Исключения", Исключения); 
	ПараметрыПроверкиОрфографии.Вставить("СловаЗамены", СловаЗамены); 
	ПараметрыПроверкиОрфографии.Вставить("ПорядокСлов", ПорядокСлов);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиТекущий", НомерСтрокиТекущий);
	ПараметрыПроверкиОрфографии.Вставить("СловЗаменено", СловЗаменено);
	ПараметрыПроверкиОрфографии.Вставить("СловПропущено", СловПропущено);
	ПараметрыПроверкиОрфографии.Вставить("НайденоОшибок", НайденоОшибок);
	ПараметрыПроверкиОрфографии.Вставить("ОтправкаПисьма", ОтправкаПисьма);
	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСлово(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдушегоСлова)
	
	НовыйТекстHTML = "";
	
	Если НомерПредыдушегоСлова = -1 Или НомерПредыдушегоСлова = Неопределено Тогда
		НомерПредыдушегоСлова = 0;
	КонецЕсли;	
	
	Если НомерПредыдушегоСлова <> 0 Тогда
		
		ПозицияНачалаСлова = -1;
		ТекущийНомерСлова = 0;
		
		Пока Истина Цикл
			
			ПозицияНачалаСлова = РаботаСоСтроками.НайтиПосле(ТекстHTMLИзмененный, СловоОригинальное, ПозицияНачалаСлова + 1);
			Если ПозицияНачалаСлова = 0 Тогда
				Возврат ТекстHTMLИзмененный;
			КонецЕсли;
			
			ТекущийНомерСлова = ТекущийНомерСлова + 1;
			Если ТекущийНомерСлова = НомерПредыдушегоСлова + 1 Тогда
				
				НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
				Возврат НовыйТекстHTML;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	Иначе // просто первое вхождение слова	
		
		ПозицияНачалаСлова = Найти(ТекстHTMLИзмененный, СловоОригинальное);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат ТекстHTMLИзмененный;
		КонецЕсли;	
		
		НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
			+ СловоЗамены
			+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
		
	КонецЕсли;	
	
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Функция ЗаменитьВсеСловаПосле(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдушегоСлова, СловЗаменено)
	
	НовыйТекстHTML = ТекстHTMLИзмененный;
	
	Если НомерПредыдушегоСлова = -1 Или НомерПредыдушегоСлова = Неопределено Тогда
		НомерПредыдушегоСлова = 0;
	КонецЕсли;	
	
	ПозицияНачалаСлова = -1;
	ТекущийНомерСлова = 0;
	ЧислоЗамен = 0;
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Пока Истина Цикл
		
		ПозицияНачалаСлова = РаботаСоСтроками.НайтиПосле(НовыйТекстHTML, СловоОригинальное, ПозицияНачалаСлова + 1);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат НовыйТекстHTML;
		КонецЕсли;
		
		ТекущийНомерСлова = ТекущийНомерСлова + 1;
		Если ТекущийНомерСлова >= НомерПредыдушегоСлова + 1 Тогда
			
			ИспользоватьСлово = Истина;
			
			Если ПозицияНачалаСлова > 1 Тогда
				СимволДо = Сред(НовыйТекстHTML, ПозицияНачалаСлова - 1, 1);
				Если Найти(СимволыРазделители, СимволДо) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			ПозицияКонцаСлова = ПозицияНачалаСлова + СтрДлина(СловоОригинальное);
			Если ПозицияКонцаСлова < СтрДлина(НовыйТекстHTML) Тогда
				СимволПосле = Сред(НовыйТекстHTML, ПозицияКонцаСлова, 1);
				Если Найти(СимволыРазделители, СимволПосле) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			Если ИспользоватьСлово Тогда
				
				Если ЧислоЗамен <> 0 Тогда
					СловЗаменено = СловЗаменено + 1;
				КонецЕсли;	
				ЧислоЗамен = ЧислоЗамен + 1;
				
				НовыйТекстHTML = Лев(НовыйТекстHTML, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(НовыйТекстHTML, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
			Иначе
				ПозицияНачалаСлова = ПозицияНачалаСлова + 1;
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Процедура ПроверитьОрфографиюВБлокеТекста()
	
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("ТекстовыйДокумент") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("ТекстовыйДокумент", Новый ТекстовыйДокумент());	
	КонецЕсли;		
	ПараметрыПроверкиОрфографии.ТекстовыйДокумент.УстановитьТекст(ПараметрыПроверкиОрфографии.Текст);
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("КоличествоСтрокТекста") Тогда 
		ПараметрыПроверкиОрфографии.Вставить(
			"КоличествоСтрокТекста", 
			ПараметрыПроверкиОрфографии.ТекстовыйДокумент.КоличествоСтрок());
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерСтроки") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерСтроки", ПараметрыПроверкиОрфографии.НомерСтрокиНачальный);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерПервогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерПервогоСимвола", 1);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерАнализируемогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерАнализируемогоСимвола", 1);
	КонецЕсли;	
	
	// Перебор строк
	Для СчСтроки = ПараметрыПроверкиОрфографии.НомерСтроки 
		По ПараметрыПроверкиОрфографии.КоличествоСтрокТекста Цикл
		
		ПараметрыПроверкиОрфографии.НомерСтроки = СчСтроки;
		
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Всего в тексте %1 строк. Проверяется %2 строка.'; en = 'Text contains %1 rows. Checking row %2.'"),
			Строка(ПараметрыПроверкиОрфографии.КоличествоСтрокТекста), 
			Строка(ПараметрыПроверкиОрфографии.НомерСтроки));
		Состояние(СтрокаСостояние);
		
		// Получение строки, которую далее будем проверять
		СтрокаИзТекста = ПараметрыПроверкиОрфографии.ТекстовыйДокумент.ПолучитьСтроку(ПараметрыПроверкиОрфографии.НомерСтроки);
		
		Если ПараметрыПроверкиОрфографии.ПозицияВСтроке <> -1 
			И (ПараметрыПроверкиОрфографии.НомерСтроки = ПараметрыПроверкиОрфографии.НомерСтрокиНачальный) Тогда
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.ПозицияВСтроке;
		Иначе	
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = Найти(СтрокаИзТекста, """");
			Если ПараметрыПроверкиОрфографии.НомерПервогоСимвола <> 0 Тогда
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.НомерПервогоСимвола + 1;
			Иначе
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = 1;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПроверкиОрфографии.НомерСтрокиТекущий = ПараметрыПроверкиОрфографии.НомерСтроки;
		
		ДлинаСтроки = СтрДлина(СтрокаИзТекста);
		НоваяСтрока = Лев(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерПервогоСимвола - 1);
		Слово = "";
		СловоСобрано = Ложь;
		
		// Посимвольный обход строки для выделения и проверки слов
		Для СчСимволов = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола 
			По ДлинаСтроки Цикл
			
			ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = СчСимволов;
			
			ПозицияВСтроке = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола;
			Символ = Сред(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола, 1);
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда
				
				Если СтрДлина(Слово) = 0 Тогда
					НоваяСтрока = НоваяСтрока + Символ;
				Иначе
					ДобавочныйСимвол = Символ;
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе
				
				Слово = Слово + Символ;
				Если ДлинаСтроки = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола Тогда 
					СловоСобрано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПараметрыПроверкиОрфографии.Свойство("Слово") Тогда 
				ПараметрыПроверкиОрфографии.Вставить("Слово", "");
			КонецЕсли;	
			
			ПараметрыПроверкиОрфографии.Слово = Слово;
			
			Если СловоСобрано Тогда
				
				Результат = ОрфографияОбработатьСлово(Слово, СтрокаИзТекста);
				Слово = "";
				СловоСобрано = Ложь;
				ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 
					ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола + 1;
				
				Если Не Результат Тогда
					// Процедура проверки прервана модальным окном и будет продолжена при его закрытии
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 1;
		
	КонецЦикла;
	
	ЗавершитьПроверкуОрфографии();
	
КонецПроцедуры

&НаКлиенте
Функция ОрфографияОбработатьСлово(Слово, СтрокаИзТекста)
				
	СловоНужноПроверитьWord = Истина;
	НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь;
	
	ЧислоВТексте = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстДляПроверки, Слово);
	ЧислоВHTML = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный, Слово);
	Если ЧислоВHTML <> ЧислоВТексте Тогда
		НеСовпадаетЧислоВхожденийВТекстеИHtml = Истина;
	КонецЕсли;	
	
	НаличиеСлова = ПараметрыПроверкиОрфографии.Исключения.Получить(Слово);
	Если НаличиеСлова <> Неопределено Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;	
	
	ЗамененноеСлово = ПараметрыПроверкиОрфографии.СловаЗамены.Получить(Слово);
	Если ЗамененноеСлово <> Неопределено Тогда
		Слово = ЗамененноеСлово;
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
	КонецЕсли;	
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Слово) Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;	
	
	Если СловоНужноПроверитьWord Тогда
		
		Если Не ПараметрыПроверкиОрфографии.Word.CheckSpelling(Слово) Тогда
			
			СписокВариантов = Новый СписокЗначений;
			
			Если НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь Тогда
				
				ВариантыЗамены = ПараметрыПроверкиОрфографии.Word.getSpellingSuggestions(Слово);
				
				Если ВариантыЗамены.Count <> 0 Тогда
					Для НомерВарианта = 1 По ВариантыЗамены.Count Цикл
						СписокВариантов.Добавить(ВариантыЗамены.Item(НомерВарианта).Name);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("ИсходнаяСтрока,СловоЗамены,СписокВариантов,НеСовпадаетЧислоВхожденийВТекстеИHtml");
			ПараметрыФормы.ИсходнаяСтрока = СокрЛП(СтрокаИзТекста);
			ПараметрыФормы.СловоЗамены = Слово;
			ПараметрыФормы.СписокВариантов = СписокВариантов.Скопировать();
			ПараметрыФормы.НеСовпадаетЧислоВхожденийВТекстеИHtml = НеСовпадаетЧислоВхожденийВТекстеИHtml;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверкиОрфографииВБлокеТекста", ЭтотОбъект);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.Форма.ПроверкаОрфографии", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Возврат Ложь;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Слово = "";
	СловоСобрано = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПроверкуОрфографии()
	
	ПараметрыПроверкиОрфографии.Word.Quit();
	ПараметрыПроверкиОрфографии.Word = Неопределено;
	
	Если СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный) <> СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный) Тогда
		
		ТекстПисьма = ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный;
		Модифицированность = Истина;
		ВключитьРежимРедактированияHTMLКлиент();
		
	КонецЕсли;
	
	Состояние();
		
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка орфографии завершена. 
		|Заменено слов: %1, пропущено слов: %2.';
		|en = 'Spell check completed. 
		|Words replaced: %1, words skipped: %2.'"),
		ПараметрыПроверкиОрфографии.СловЗаменено, ПараметрыПроверкиОрфографии.СловПропущено);
		
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиОрфографииВБлокеТекста(КодВозврата, Параметр) Экспорт
						
	Если ТипЗнч(КодВозврата) <> Тип("Структура") Тогда
		ЗавершитьПроверкуОрфографии();
		Возврат;
	КонецЕсли;	
	
	СловоИсходное = ПараметрыПроверкиОрфографии.Слово;
	Кнопка = КодВозврата.Кнопка;
	
	Если Кнопка = "Завершить" Тогда
		ЗавершитьПроверкуОрфографии();
		Возврат;
	КонецЕсли;
	
	Если Кнопка = "ПропуститьВсе" Тогда
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Пропустить" Тогда
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Заменить" Тогда
		
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		ПараметрыПроверкиОрфографии.НайденоОшибок = ПараметрыПроверкиОрфографии.НайденоОшибок + 1;
		
		ПроверкаОрфографииЗаменить();
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ЗаменитьВсе" Тогда
		
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографии.СловаЗамены.Вставить(ПараметрыПроверкиОрфографии.Слово, ПараметрыПроверкиОрфографии.СловоЗамены);
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		ПараметрыПроверкиОрфографии.НайденоОшибок = ПараметрыПроверкиОрфографии.НайденоОшибок + 1;
		
		ПроверкаОрфографииЗаменитьВсе();
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ДобавитьИсключение" Тогда
		
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ВстроеннаяПочтаКлиент.ДобавитьСловоВИсключенияWord(
			ПараметрыПроверкиОрфографии.Word, 
			ПараметрыПроверкиОрфографии.Слово);
		
	КонецЕсли;
	
	НомерСлова = ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
	Если ПараметрыПроверкиОрфографии.НомерСлова = Неопределено
		Или ПараметрыПроверкиОрфографии.НомерСлова = -1 Тогда
		ПараметрыПроверкиОрфографии.НомерСлова = 0;
	КонецЕсли;	
	ПараметрыПроверкиОрфографии.НомерСлова = ПараметрыПроверкиОрфографии.НомерСлова + 1;
	ПараметрыПроверкиОрфографии.ПорядокСлов.Вставить(СловоИсходное, ПараметрыПроверкиОрфографии.НомерСлова);
	
	ПроверитьОрфографиюВБлокеТекста(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОрфографииЗаменить()
	
	// Заменяем не все вхождения слова, а только одно
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьСлово(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова);
		
	ПараметрыПроверкиОрфографии.Текст = РаботаС_HTML.ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);
		
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаОрфографииЗаменитьВсе()
	
	// Заменяем все вхождения слова
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьВсеСловаПосле(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова, 
		ПараметрыПроверкиОрфографии.СловЗаменено);
		
	ПараметрыПроверкиОрфографии.Текст = РаботаС_HTML.ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);			
	
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстШаблона(Данные, СозданиеHTML = Ложь)
	
	Если ТипЗнч(Данные) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные, 
			"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстПисьмаПростойТекстХранилище, Кодировка, Тема, ПолучателиПисьма, ПолучателиКопий, УчетнаяЗапись");
		Реквизиты.Вставить("ТекстХранилище", Реквизиты.ТекстПисьмаПростойТекстХранилище);
	Иначе 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные, 
			"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстХранилище, Кодировка, Тема, ПолучателиПисьма, ПолучателиКопий, УчетнаяЗапись");
	КонецЕсли;
	
	Текст = Справочники.ШаблоныПисем.ПолучитьПредставлениеСодержанияШаблона(Реквизиты, СозданиеHTML);
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ОбновитьФайлыШаблона()
	
	ТекПозиция = Неопределено;
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				ТекПозиция = Новый Структура("Ссылка", ТекДанные.Ссылка);
			ИначеЕсли ТекДанные.Свойство("Представление")
				И ТекДанные.Свойство("Размер") Тогда
				ТекПозиция = Новый Структура("Представление, Размер", ТекДанные.Представление, ТекДанные.Размер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТолькоБезИдентификаторов = (Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
		
		ФайлыШаблона = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			ТолькоБезИдентификаторов); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
			
		ВложенияВременнаяТаблица = Вложения.Выгрузить();
		Вложения.Очистить();
		Для каждого ФайлыШаблонаСтрока Из ФайлыШаблона Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыШаблонаСтрока);
			ВложенияСтрока.Расположение = "Файл";
		КонецЦикла;
		
		Для каждого ВложенияВременнаяТаблицаСтрока Из ВложенияВременнаяТаблица Цикл
			Если ВложенияВременнаяТаблицаСтрока.Расположение <> "Файл" Тогда
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложенияВременнаяТаблицаСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекПозиция) Тогда
		Если ТипЗнч(ТекПозиция) = Тип("Структура") Тогда
			Строки = Вложения.НайтиСтроки(ТекПозиция);
			Если Строки.Количество() > 0 Тогда
				Элементы.Вложения.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоФайловСервер()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'; en = 'Files (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоличествоФайловКлиент()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'; en = 'Files (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Файлы'; en = 'Files'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	Для каждого ВложениеСтрока Из ВложенияКартинки Цикл	
		Строка = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВложениеСтрока);
	КонецЦикла;	
	ВложенияКартинки.Очистить();
	
	Для каждого ВложениеСтрока Из Вложения Цикл
		
		Если ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			
			НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
			
			Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(
				ВложениеСтрока.Ссылка.ТекущаяВерсия);
			Если ЗначениеЗаполнено(Кодировка) Тогда
				РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(НовыйФайл.ТекущаяВерсия, Кодировка);
			КонецЕсли;
			
			// заменяем ссылки на новые файлы
			Для Каждого Строка Из СписокДобавленныхФайлов Цикл
				
				ОписаниеФайла = Строка.Значение;
				Если ОписаниеФайла.Ссылка = ВложениеСтрока.Ссылка Тогда
					ОписаниеФайла.Ссылка = НовыйФайл;
				КонецЕсли;	
					
			КонецЦикла;		
			
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			
			ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				ВложениеСтрока.АдресИзвлеченногоТекста, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			
			ВложениеСтрока.Расположение = "Файл";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подпись к количеству файлов по склонениям
&НаКлиенте
Функция ПолучитьПодписьФайлов(ЧислоФайлов) 
	
	Если ЧислоФайлов > 10 И ЧислоФайлов < 20 Тогда
		Подпись = НСтр("ru = 'файлов'; en = 'files'");
	Иначе
		ПоследниеДвеЦифры = ЧислоФайлов - Цел(ЧислоФайлов / 100) * 100;
		ПоследняяЦифра = ЧислоФайлов - Цел(ЧислоФайлов / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'файлов'; en = 'files'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'файлов'; en = 'files'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'файл'; en = 'File'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'файла'; en = 'file'");
			Иначе
				Подпись = НСтр("ru = 'файлов'; en = 'files'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

&НаСервере
Процедура ВложенияПометитьНаУдалениеСервер(Знач ВыделенныеСтроки, РедактируетТекущийПользователь,
	ПометкаУдаления)
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Данные = Вложения.НайтиПоИдентификатору(Идентификатор);
		Если Данные <> Неопределено Тогда
			Если Данные.Расположение = "Файл" Тогда
				ВложениеПометитьНаУдалениеСервер(Данные.Ссылка, РедактируетТекущийПользователь, 
					ПометкаУдаления);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	Модифицированность = Истина;
	
	ОбновитьФайлыШаблона();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка, РедактируетТекущийПользователь, ПометкаУдаления)
	
	// упрощенный режим работы с файлами - освободим файлы	
	Если РедактируетТекущийПользователь И ОткрыватьФайлыНаРедактирование Тогда
		РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;	
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактироватьВложение(Результат)

	Если Не Результат Тогда 
		Возврат;
	КонецЕсли;	
	
	ПродолжитьРедактироватьВложение();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактироватьВложение()

	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, 
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске)
	
	Для каждого ФайлНаДиске Из МассивФайловНаДиске Цикл
		
		ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ФайлНаДиске.Имя);
		
		ВложенияСтрока = Вложения.Добавить();
		ВложенияСтрока.Ссылка = Неопределено;
		ВложенияСтрока.Представление = ФайлНаДиске.Имя;
		ВложенияСтрока.ИмяФайла = ФайлНаДиске.Имя;
		ВложенияСтрока.ИмяФайлаНаДиске = ФайлНаДиске.ПолноеИмя;
		
		ВложенияСтрока.ИндексКартинки =
			ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлНаДиске.Расширение);
		
		ВложенияСтрока.Размер = ФайлНаДиске.Размер;
		ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ФайлНаДиске.Размер);
		ВложенияСтрока.ПометкаУдаления = Ложь;
		ВложенияСтрока.Редактирует = Неопределено;
		ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		ВложенияСтрока.Расположение = "НаДиске";
		
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеФайлы(МассивФайлов, ИгнорироватьЗанятость = Ложь)
	
	ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
	Для каждого ФайлИнфо Из ФайлыИнфо Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		Если ИгнорироватьЗанятость = Истина Тогда
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнформациюОФайлеНаДиске(Файл)
	
	Расширение = Файл.Расширение;
	Если Найти(Расширение, ".") = 1 Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	
	ФайлИнфо = Новый Структура;
	ФайлИнфо.Вставить("Имя", Файл.Имя);
	ФайлИнфо.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ФайлИнфо.Вставить("Расширение", Расширение);
	ФайлИнфо.Вставить("ПолноеИмя", Файл.ПолноеИмя);
	ФайлИнфо.Вставить("Путь", Файл.Путь);
	ФайлИнфо.Вставить("Размер", Файл.Размер());
	
	Возврат ФайлИнфо;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРазрешениеИЗаписатьПисьмо(ИмяОтветнойПроцедуры)
	
	// Сохранение текущей позиции в списке файлов
	Позиция = Неопределено;
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		Позиция = Новый Структура;
		Позиция.Вставить("ИмяФайла", Элементы.Вложения.ТекущиеДанные.ИмяФайла);
		Позиция.Вставить("Размер", Элементы.Вложения.ТекущиеДанные.Размер);
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяОтветнойПроцедуры", ИмяОтветнойПроцедуры);
	ДополнительныеПараметры.Вставить("Позиция", Позиция);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеПолучитьРазрешениеИЗаписатьПисьмо", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	Текст = НСтр("ru = 'Для просмотра или редактирования файла необходимо записать письмо.
		|Записать?';
		|en = 'To view or edit a file, you need to save a email. 
		|Save?'");		
		
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(ФайлСсылка, УпрощенныйРежимРаботыСФайлами)
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ФайлСсылка, УникальныйИдентификатор, УпрощенныйРежимРаботыСФайлами);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьКлиент(ПараметрыЗаписи = Неопределено)
	
	// Сохранение текущей позиции в списке файлов
	ИнформацияОТекущемФайле = Неопределено;
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ИнформацияОТекущемФайле = Новый Структура;
		ИнформацияОТекущемФайле.Вставить("ИмяФайла", Элементы.Вложения.ТекущиеДанные.ИмяФайла);
		ИнформацияОТекущемФайле.Вставить("Размер", Элементы.Вложения.ТекущиеДанные.Размер);
	КонецЕсли;
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст") Тогда
		ТекстРедактирования = Элементы.ТекстПисьма.ТекстРедактирования;
		Если ТекстПисьма <> ТекстРедактирования Тогда
			ТекстПисьма = ТекстРедактирования;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Тема <> Элементы.Тема.ТекстРедактирования Тогда
		Объект.Тема = Элементы.Тема.ТекстРедактирования;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		Результат = Записать(ПараметрыЗаписи);
	Иначе
		Результат = Записать();
	КонецЕсли;
	
	// Восстановление текущей позиции в списке файлов
	Если Результат Тогда
		Если ТипЗнч(ИнформацияОТекущемФайле) = Тип("Структура") Тогда
			Для каждого ВложенияСтрока Из Вложения Цикл
				Если ВложенияСтрока.ИмяФайла = ИнформацияОТекущемФайле.ИмяФайла
					И ВложенияСтрока.Размер = ИнформацияОТекущемФайле.Размер Тогда
					Элементы.Вложения.ТекущаяСтрока = ВложенияСтрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			ТекстПисьма = ТекстПисьмаHTMLДляОтменыОтправки;
			ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
				ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
			ВключитьРежимРедактированияHTMLКлиент();
		КонецЕсли;	
		ВыполняетсяЗапись = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.РедактироватьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = (ТекущиеДанные.Расположение = "Файл");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыСДиска()
	
	ВладелецФайла = Объект.Ссылка;
	
	ПараметрыОписания = Новый Структура("ВладелецФайла", ВладелецФайла);
	Обработчик = Новый ОписаниеОповещения("ДобавитьФайлыСДискаПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОписания);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыСДискаПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	ВладелецФайла = ПараметрыВыполнения.ВладелецФайла;
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		
		АдресВременногоХранилищаФайла = "";
		ПолноеИмяФайла = "";
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавитьФайлыСДиска", ЭтотОбъект);
		НачатьПомещениеФайла(
			ОписаниеОповещения,
			АдресВременногоХранилищаФайла,
			ПолноеИмяФайла,
			Истина,
			УникальныйИдентификатор);
			
		Возврат;	
			
	Иначе
		
		ПолноеИмяФайла = "";
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ВыборФайла.МножественныйВыбор = Истина;
			ВыборФайла.Заголовок = НСтр("ru = 'Выбор файлов'; en = 'Selecting files'");
			ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'; en = 'All files (*. *) | *. *'");
			
			РабочийКаталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(ВладелецФайла);
			ВыборФайла.Каталог = РабочийКаталог;
			
			Результат = ВыборФайла.Выбрать();
			Если Не Результат Тогда
				Возврат;
			КонецЕсли;
			Если ВыборФайла.ВыбранныеФайлы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			МассивФайловНаДиске = Новый Массив;
			Для каждого ПолноеИмяФайла Из ВыборФайла.ВыбранныеФайлы Цикл
				Файл = Новый Файл(ПолноеИмяФайла);
				МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(Файл));
			КонецЦикла;
			
			ПередИзменениемФормыНаКлиенте();
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьДобавитьФайлыСДиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьФайлыСДиска(
	ВыборВыполнен, 
	АдресИлиРезультатВыбора, 
	ВыбранноеИмяФайла, 
	ДополнительныеПараметры) Экспорт

	Если ВыборВыполнен <> Истина Тогда
		Возврат;
	КонецЕсли;	
		
	Размер = ПолучитьРазмерФайлаВоВременномХранилище(АдресИлиРезультатВыбора);
	
	ИмяФайлаИнфо = РаботаСоСтроками.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	
	ВложенияСтрока = Вложения.Добавить();
	ВложенияСтрока.Ссылка = Неопределено;
	ВложенияСтрока.Представление = ИмяФайлаИнфо.Имя;
	ВложенияСтрока.ИмяФайла = ИмяФайлаИнфо.ИмяФайла;
	ВложенияСтрока.ИмяФайлаНаДиске = ВыбранноеИмяФайла;
	
	ВложенияСтрока.ИндексКартинки =
		ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
	
	ВложенияСтрока.Размер = Размер;
	ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(Размер);
	ВложенияСтрока.ПометкаУдаления = Ложь;
	ВложенияСтрока.Редактирует = Неопределено;
	ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
	ВложенияСтрока.Адрес = АдресИлиРезультатВыбора;
	ВложенияСтрока.Расположение = "ВременноеХранилище";
	
	Модифицированность = Истина;
	
	ПродолжитьДобавитьФайлыСДиска();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьФайлыСДиска()

	ОбновитьФайлыШаблона();
	ОтобразитьКоличествоФайловКлиент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерФайлаВоВременномХранилище(АдресВременногоХранилищаФайла)
	
	Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
		Возврат 0;
	КонецЕсли;
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Если ТипЗнч(Данные) <>  Тип("ДвоичныеДанные") Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Данные.Размер();
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПолучитьРазрешениеИЗаписатьПисьмо(Ответ, Параметры) Экспорт
	
	ИмяОтветнойПроцедуры = Параметры.ИмяОтветнойПроцедуры;
	Позиция = Параметры.Позиция;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Выполнить ИмяОтветнойПроцедуры + "(Ложь)";
		Возврат;
	КонецЕсли;
	
	Результат = Записать();
	
	Если Результат Тогда
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		// Восстановление текущей позиции в списке файлов
		Если ТипЗнч(Позиция) = Тип("Структура") Тогда
			Для каждого ВложенияСтрока Из Вложения Цикл
				Если ВложенияСтрока.ИмяФайла = Позиция.ИмяФайла
					И ВложенияСтрока.Размер = Позиция.Размер Тогда
					Элементы.Вложения.ТекущаяСтрока = ВложенияСтрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Выполнить ИмяОтветнойПроцедуры + "(Результат)";
	
КонецПроцедуры

&НаКлиенте
Функция ПоместитьФайлыСДискаВоВременноеХранилище()
	
	Попытка
		
		Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
			Возврат Истина;
		КонецЕсли;
	
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить расширение работы с файлами по причине:
				|""%1""'; en = 'Unable to mount the file extension for a reason:""%1""'"),
			СообщениеОбОшибке);
			
		ПоказатьПредупреждение(, ТекстСообщения);	
		Возврат Истина;
		
	КонецПопытки;
	
	Для каждого ВложенияСтрока Из Вложения Цикл
		
		Если ВложенияСтрока.Расположение <> "НаДиске" Тогда
			Продолжить;
		КонецЕсли;
			
		Пока Истина Цикл
			
			Попытка
				
				ПолныйПутьКФайлу = ВложенияСтрока.ИмяФайлаНаДиске;
				
				//Проверка и копирование файла, если файл занят внешним приложением на редактирование.
				//Далее копия файла будет использовать для помещения в ДО.
				#Если НЕ ВебКлиент Тогда
					Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПолныйПутьКФайлу) Тогда
						
						ПутьКИсходномуФайлу = ПолныйПутьКФайлу;
						
						ИсходныйФайл = Новый Файл(ПутьКИсходномуФайлу);
						
						ИмяКаталогаДляРазмещенияКопииФайла = 
						КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
						
						СоздатьКаталог(ИмяКаталогаДляРазмещенияКопииФайла);
						
						ПолныйПутьКФайлу = ИмяКаталогаДляРазмещенияКопииФайла + "\" + ИсходныйФайл.Имя;
						
						//Копирование файла, если попытка копирования не удалась, то
						//далее для помещения будет использоваться исходный файл.
						Попытка
							КопироватьФайл(ПутьКИсходномуФайлу, ПолныйПутьКФайлу);
						Исключение
							ПолныйПутьКФайлу = ПутьКИсходномуФайлу;
						КонецПопытки;
						
					КонецЕсли;
				#КонецЕсли
				
				АдресВоВременномХранилище = "";
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
				ПомещаемыеФайлы.Добавить(Описание);
				ПомещенныеФайлы = Новый Массив;
				Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
					ВызватьИсключение
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
							ПолныйПутьКФайлу);
				КонецЕсли;
				
				Если ПомещенныеФайлы.Количество() = 1 Тогда
					АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
				Иначе
					ВызватьИсключение
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" in the file storage'"),
							ПолныйПутьКФайлу);
				КонецЕсли;
				
				ВложенияСтрока.Адрес = АдресВоВременномХранилище;
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами();
				Если Не НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
					
					ВложенияСтрока.АдресИзвлеченногоТекста =
						ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
							ПолныйПутьКФайлу,
							УникальныйИдентификатор,
							Ложь); // Отказ
					
				КонецЕсли;
				
				#Если НЕ ВебКлиент Тогда
					Каталог = Новый Файл(ИмяКаталогаДляРазмещенияКопииФайла);
					Если Каталог.Существует() Тогда
						УдалитьФайлы(ИмяКаталогаДляРазмещенияКопииФайла);
					КонецЕсли;
				#КонецЕсли
				
				Прервать;
				
			Исключение
				
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить файл ""%1"" по причине:
						|""%2""
						|Попробуйте повторить.';
						|en = 'Unable to load file ""%1"" for a reason:""%2"" 
						|Try to repeat.'"),
					ПолныйПутьКФайлу,
					СообщениеОбОшибке);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Вложения");
					
				Возврат Ложь;	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НайтиИдентификаторПочтовыхВложений(Идентификатор, ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыПочтовыхВложений.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|ГДЕ
		|	ИдентификаторыПочтовыхВложений.Идентификатор = &Идентификатор
		|	И ИдентификаторыПочтовыхВложений.Файл.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);	
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	Если Таблица.Количество() <> 0 Тогда
		Возврат Таблица[0].Файл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыШаблона();
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПодобратьПользователя(Текст)
	
	Возврат ПользователиДокументооборот.СформироватьДанныеВыбора(Текст, Истина);
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьПоложениеHTML()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли	
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
	
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		
		Счетчик = 0; 
		НайденныйУзел = Неопределено;
		
		Если ТекущийНомерУзла = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Попытка
			
			Результат = НайтиУзелПоНомеру(HTMLДокумент, ТекущийНомерУзла, Счетчик, НайденныйУзел);
			Если Результат Тогда
				
				Диапазон = HTMLДокумент.createRange();
				Диапазон.setStart(НайденныйУзел, ТекущееПоложениеНачало);
				Диапазон.setEnd(НайденныйУзел, ТекущееПоложениеКонец);
				
				Выделение = HTMLДокумент.getSelection();
				Выделение.removeAllRanges();
				Выделение.addRange(Диапазон);
				
				HTMLДокумент.body.scrollLeft = ГоризонтальнаяПрокруткаHTML;
				HTMLДокумент.body.scrollTop = ВертикальнаяПрокруткаHTML;
					
			КонецЕсли;	
		
		Исключение
			// не бросаем исключение - иногда HTMLДокумент дает ошибку
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Функция НайтиУзелПоНомеру(ТекущийУзел, НомерУзла, Счетчик, НайденныйУзел)
	
	Если ТекущийУзел.childNodes.length = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого Узел Из ТекущийУзел.childNodes Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик = НомерУзла Тогда
			НайденныйУзел = Узел;
			Возврат Истина;
		КонецЕсли;	
		
		Результат = НайтиУзелПоНомеру(Узел, НомерУзла, Счетчик, НайденныйУзел);
		Если Результат = Истина Тогда
			Возврат Результат;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПользователей(МножественныйВыбор)
	
	РабочаяГруппа = Новый Массив;
	
	Если МножественныйВыбор Тогда
		Для Каждого ТаблицаСтрока Из Объект.Пользователи Цикл
			Участник = РаботаСАдреснойКнигойКлиент.СтруктураВыбранногоАдресата();
			РабочаяГруппа.Добавить(Участник);
		КонецЦикла;
		
		РежимРаботыФормы = 2;
		ЗаголовокФормы = НСтр("ru = 'Подбор пользователей группы доступа общего шаблона письма'; en = 'Selection of user group access common email template'");
		ЗаголовокСпискаВыбранных = НСтр("ru = 'Выбранные пользователи/группы:'; en = 'Selected users/groups:'");
	Иначе
		РежимРаботыФормы = 1;
		ЗаголовокФормы = НСтр("ru = 'Выбор участника группы доступа'; en = 'Select access group member'");
		ЗаголовокСпискаВыбранных = "";
		
		ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Участник = РаботаСАдреснойКнигойКлиент.СтруктураВыбранногоАдресата();
			РабочаяГруппа.Добавить(Участник);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранных);
	ПараметрыФормы.Вставить("РежимРаботыФормы", РежимРаботыФормы);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", РабочаяГруппа);
	ПараметрыФормы.Вставить("КонтекстОткрытия", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеПодбораПользователей", ЭтотОбъект, МножественныйВыбор);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПодбораПользователей(ВыбранныеПользователи, МножественныйВыбор) Экспорт
	
	Если ВыбранныеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МножественныйВыбор Тогда
		Объект.Пользователи.Очистить();
		Для Каждого ГруппаСтрока Из ВыбранныеПользователи Цикл
			Строка = Объект.Пользователи.Добавить();
			Строка.ПользовательИлиГруппа = ГруппаСтрока.Контакт;
		КонецЦикла;
	Иначе
		ТекущаяСтрока = Элементы.Пользователи.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Объект.Пользователи.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.ПользовательИлиГруппа = ВыбранныеПользователи[0].Контакт;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматированноеСообщение()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Некоторые получатели письма не добавлены'; en = 'Some recipients are not added'"));
	ПараметрыФормы.Вставить("ТекстСообщения", ТекстОшибкиДобавленияПолучателя);
	
	ОткрытьФорму("ОбщаяФорма.ФорматированноеСообщение", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ТекстОшибкиДобавленияПолучателя = "";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьФайлыИсходногоПисьмаСервер(Письмо, КопироватьТолькоФайлыСИдентификаторомВложений = Ложь,
	КопироватьТолькоБезИдентификаторовВложений = Ложь)
	
	ТаблицаВложений = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо,
		Истина, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		КопироватьТолькоФайлыСИдентификаторомВложений, // ТолькоСИдентификаторами
		КопироватьТолькоБезИдентификаторовВложений);
	
	Для каждого ТаблицаВложенийСтрока Из ТаблицаВложений Цикл
		
		ВложенияСтрока = Неопределено;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И ЗначениеЗаполнено(ТаблицаВложенийСтрока.ИДФайлаЭлектронногоПисьма) Тогда
			ВложенияСтрока = ВложенияКартинки.Добавить();
		Иначе	
			ВложенияСтрока = Вложения.Добавить();
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(
			ВложенияСтрока,
			ТаблицаВложенийСтрока,
			"Ссылка, ИмяФайла, Представление, ИндексКартинки, Размер, РазмерПредставление");
		
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовHTMLПисьма

&НаКлиенте
Процедура ВыполнитьHTMLКоманду(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand(Команда);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Полужирный(Команда)
	
	ВыполнитьHTMLКоманду("Bold");
	
КонецПроцедуры

&НаКлиенте
Процедура Наклонный(Команда)
	
	ВыполнитьHTMLКоманду("italic");
	
КонецПроцедуры

&НаКлиенте
Процедура Подчеркнутый(Команда)
	
	ВыполнитьHTMLКоманду("underline");
	
КонецПроцедуры

&НаКлиенте
Процедура МаркированныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertUnorderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура НумерованныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertOrderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВлево(Команда)
	
	ВыполнитьHTMLКоманду("outdent");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВправо(Команда)
	ВыполнитьHTMLКоманду("indent");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВлево(Команда)
	ВыполнитьHTMLКоманду("justifyLeft");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоЦентру(Команда)
	ВыполнитьHTMLКоманду("justifyCenter");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВправо(Команда)
	ВыполнитьHTMLКоманду("justifyRight");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦветСтиля(Цвет)
	
	ИмяСтиля = Сред(Строка(Цвет), 8); // убираем "стиль: "
	Элемент = Метаданные.ЭлементыСтиля.Найти(ИмяСтиля);
	Если Элемент <> Неопределено Тогда
		Возврат Элемент.Значение;
	КонецЕсли;	
	
	Возврат Цвет;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьHexЗначение(Значение)
	
	Если Значение = 0 Тогда
		Возврат "0";
	ИначеЕсли Значение = 1 Тогда
		Возврат "1";	
	ИначеЕсли Значение = 2 Тогда
		Возврат "2";	
	ИначеЕсли Значение = 3 Тогда
		Возврат "3";	
	ИначеЕсли Значение = 4 Тогда
		Возврат "4";	
	ИначеЕсли Значение = 5 Тогда
		Возврат "5";	
	ИначеЕсли Значение = 6 Тогда
		Возврат "6";	
	ИначеЕсли Значение = 7 Тогда
		Возврат "7";	
	ИначеЕсли Значение = 8 Тогда
		Возврат "8";	
	ИначеЕсли Значение = 9 Тогда
		Возврат "9";	
	ИначеЕсли Значение = 10 Тогда
		Возврат "A";	
	ИначеЕсли Значение = 11 Тогда
		Возврат "B";	
	ИначеЕсли Значение = 12 Тогда
		Возврат "C";	
	ИначеЕсли Значение = 13 Тогда
		Возврат "D";	
	ИначеЕсли Значение = 14 Тогда
		Возврат "E";	
	ИначеЕсли Значение = 15 Тогда
		Возврат "F";	
	КонецЕсли;
	
	Возврат "0";
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗначенияЦвета(Значение)
	
	СтаршееЧисло = Цел(Значение / 16);
	МладшееЧисло = Значение - 16 * СтаршееЧисло;
	
	Возврат ПолучитьHexЗначение(СтаршееЧисло) + ПолучитьHexЗначение(МладшееЧисло);
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЦвета(Цвет, СтрокаЦвета)
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		Цвет = ПолучитьЦветСтиля(Цвет);
	КонецЕсли;
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда	
		
		СтрокаЦвета = "";
		ИмяСтиля = Сред(Строка(Цвет), 8); // убираем "стиль: "
		ИмяСтиля = СтрЗаменить(ИмяСтиля, " ", "");
		
		Если ВРег(ИмяСтиля) = ВРег("ТекстРедактирования") Тогда
			СтрокаЦвета = "#000000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонФормы") Тогда
			СтрокаЦвета = "#fcfaeb";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстФормы") Тогда
			СтрокаЦвета = "#413003";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонКнопки") Тогда
			СтрокаЦвета = "#F5F2DD";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстКнопки") Тогда
			СтрокаЦвета = "#594304";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонРедактирования") Тогда
			СтрокаЦвета = "#FFFFFF";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонВыделенияРедактирования") Тогда
			СтрокаЦвета = "#536AC2";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстВыделенияРедактирования") Тогда
			СтрокаЦвета = "#FFFFFF";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("АльтернативныйФонРедактирования") Тогда
			СтрокаЦвета = "#F5FBF7";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонПодсказки") Тогда
			СтрокаЦвета = "#FFFAD9";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстПодсказки") Тогда
			СтрокаЦвета = "#000000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ОсобыйТекст") Тогда
			СтрокаЦвета = "#FF0000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ОтрицательноеЧисло") Тогда
			СтрокаЦвета = "#FF0000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("Рамка") Тогда
			СтрокаЦвета = "#B3AC86";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонШапкиОтчета") Тогда
			СтрокаЦвета = "#F4ECC5";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонГруппировкиОтчета1") Тогда
			СтрокаЦвета = "#F8F2D8";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонГруппировкиОтчета2") Тогда
			СтрокаЦвета = "#FBF9EC";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ЛинияОтчета") Тогда
			СтрокаЦвета = "#0xCCC085";
		КонецЕсли;
		
		Возврат Истина;	
		
	КонецЕсли;
		
	
	Если Цвет.Вид = ВидЦвета.Абсолютный Тогда
		СтрокаЦвета = "#" + ПолучитьСтрокуЗначенияЦвета(Цвет.Красный)
			+ ПолучитьСтрокуЗначенияЦвета(Цвет.Зеленый)
			+ ПолучитьСтрокуЗначенияЦвета(Цвет.Синий);
		Возврат Истина;	
	КонецЕсли;
	
	СтрокаПоЦвету = Новый Соответствие;
	СтрокаПоЦвету[WebЦвета.Аквамарин] = "#7FFFD4";
	СтрокаПоЦвету[WebЦвета.АкварельноСиний] = "#F0F8FF";
	СтрокаПоЦвету[WebЦвета.АнтикБелый] = "#FAEBD7";
	СтрокаПоЦвету[WebЦвета.Бежевый] = "#F5F5DC";
	СтрокаПоЦвету[WebЦвета.Белоснежный] = "#FFFAFA";
	СтрокаПоЦвету[WebЦвета.Белый] = "#FFFFFF";
	СтрокаПоЦвету[WebЦвета.Бирюзовый] = "#40E0D0";
	СтрокаПоЦвету[WebЦвета.БледноБирюзовый] = "#AFEEEE";
	СтрокаПоЦвету[WebЦвета.БледноЗеленый] = "#98FB98";
	СтрокаПоЦвету[WebЦвета.БледноЗолотистый] = "#EEE8AA";
	СтрокаПоЦвету[WebЦвета.БледноКрасноФиолетовый] = "#PaleVioletRed";
	СтрокаПоЦвету[WebЦвета.БледноЛиловый] = "#E6E6FA";
	СтрокаПоЦвету[WebЦвета.БледноМиндальный] = "#FFEBCD";
	СтрокаПоЦвету[WebЦвета.БледноСиреневый] = "#D8BFD8";
	СтрокаПоЦвету[WebЦвета.Васильковый] = "#6495ED";
	СтрокаПоЦвету[WebЦвета.ВесеннеЗеленый] = "#00FF7F";
	СтрокаПоЦвету[WebЦвета.Голубой] = "#ADD8E6";
	СтрокаПоЦвету[WebЦвета.ГолубойСКраснымОттенком] = "#FFF0F5";
	СтрокаПоЦвету[WebЦвета.ГолубойСоСтальнымОттенком] = "#B0C4DE";
	СтрокаПоЦвету[WebЦвета.ГрифельноСерый] = "#708090";
	СтрокаПоЦвету[WebЦвета.ГрифельноСиний] = "#6A5ACD";
	СтрокаПоЦвету[WebЦвета.Древесный] = "#DEB887";
	СтрокаПоЦвету[WebЦвета.ДымчатоБелый] = "#F5F5F5";
	СтрокаПоЦвету[WebЦвета.ЖелтоЗеленый] = "#9ACD32";
	СтрокаПоЦвету[WebЦвета.Желтый] = "#FFFF00";
	СтрокаПоЦвету[WebЦвета.ЗамшаСветлый] = "#FFE4B5";
	СтрокаПоЦвету[WebЦвета.ЗеленаяЛужайка] = "#7CFC00";
	СтрокаПоЦвету[WebЦвета.ЗеленоватоЖелтый] = "#7FFF00";
	СтрокаПоЦвету[WebЦвета.ЗеленоватоЛимонный] = "#00FF00";
	СтрокаПоЦвету[WebЦвета.ЗеленоЖелтый] = "#ADFF2F";
	СтрокаПоЦвету[WebЦвета.Зеленый] = "#008000";
	СтрокаПоЦвету[WebЦвета.ЗеленыйЛес] = "#228B22";
	СтрокаПоЦвету[WebЦвета.Золотистый] = "#DAA520";
	СтрокаПоЦвету[WebЦвета.Золотой] = "#FFD700";
	СтрокаПоЦвету[WebЦвета.Индиго] = "#4B0082";
	СтрокаПоЦвету[WebЦвета.Киноварь] = "#CD5C5C";
	СтрокаПоЦвету[WebЦвета.Кирпичный] = "#B22222";
	СтрокаПоЦвету[WebЦвета.КожаноКоричневый] = "#8B4513";
	СтрокаПоЦвету[WebЦвета.Коралловый] = "#FF7F50";
	СтрокаПоЦвету[WebЦвета.Коричневый] = "#A52A2A";
	СтрокаПоЦвету[WebЦвета.КоролевскиГолубой] = "#4169E1";
	СтрокаПоЦвету[WebЦвета.КрасноФиолетовый] = "#D02090";
	СтрокаПоЦвету[WebЦвета.Красный] = "#FF0000";
	СтрокаПоЦвету[WebЦвета.Кремовый] = "#FFFBF0";
	СтрокаПоЦвету[WebЦвета.Лазурный] = "#F0FFFF";
	СтрокаПоЦвету[WebЦвета.ЛимонноЗеленый] = "#32CD32";
	СтрокаПоЦвету[WebЦвета.Лимонный] = "#FFFACD";
	СтрокаПоЦвету[WebЦвета.Лосось] = "#FA8072";
	СтрокаПоЦвету[WebЦвета.ЛососьСветлый] = "#FFA07A";
	СтрокаПоЦвету[WebЦвета.ЛососьТемный] = "#E9967A";
	СтрокаПоЦвету[WebЦвета.Льняной] = "#FAF0E6";
	СтрокаПоЦвету[WebЦвета.Малиновый] = "#DC143C";
	СтрокаПоЦвету[WebЦвета.МятныйКрем] = "#F5FFFA";
	СтрокаПоЦвету[WebЦвета.НавахоБелый] = "#FFDEAD";
	СтрокаПоЦвету[WebЦвета.НасыщенноНебесноГолубой] = "#00BFFF";
	СтрокаПоЦвету[WebЦвета.НасыщенноРозовый] = "#FF1493";
	СтрокаПоЦвету[WebЦвета.НебесноГолубой] = "#87CEEB";
	СтрокаПоЦвету[WebЦвета.НейтральноАквамариновый] = "#66CDAA";
	СтрокаПоЦвету[WebЦвета.НейтральноБирюзовый] = "#48D1CC";
	СтрокаПоЦвету[WebЦвета.НейтральноВесеннеЗеленый] = "#00FA9A";
	СтрокаПоЦвету[WebЦвета.НейтральноГрифельноСиний] = "#7B68EE";
	СтрокаПоЦвету[WebЦвета.НейтральноЗеленый] = "#C0DCC0";
	СтрокаПоЦвету[WebЦвета.НейтральноКоричневый] = "#CD853F";
	СтрокаПоЦвету[WebЦвета.НейтральноПурпурный] = "#9370D8";
	СтрокаПоЦвету[WebЦвета.НейтральноСерый] = "#A0A0A4";
	СтрокаПоЦвету[WebЦвета.НейтральноСиний] = "#0000CD";
	СтрокаПоЦвету[WebЦвета.НейтральноФиолетовоКрасный] = "#C71585";
	СтрокаПоЦвету[WebЦвета.Оливковый] = "#808000";
	СтрокаПоЦвету[WebЦвета.ОранжевоКрасный] = "#FF4500";
	СтрокаПоЦвету[WebЦвета.Оранжевый] = "#FFA500";
	СтрокаПоЦвету[WebЦвета.Орхидея] = "#DA70D6";
	СтрокаПоЦвету[WebЦвета.ОрхидеяНейтральный] = "#BA55D3";
	СтрокаПоЦвету[WebЦвета.ОрхидеяТемный] = "#9932CC";
	СтрокаПоЦвету[WebЦвета.Охра] = "#A0522D";
	СтрокаПоЦвету[WebЦвета.Перламутровый] = "#FFF5EE";
	СтрокаПоЦвету[WebЦвета.Персиковый] = "#FFDAB9";
	СтрокаПоЦвету[WebЦвета.ПесочноКоричневый] = "#F4A460";
	СтрокаПоЦвету[WebЦвета.ПолночноСиний] = "#191970";
	СтрокаПоЦвету[WebЦвета.ПризрачноБелый] = "#F8F8FF";
	СтрокаПоЦвету[WebЦвета.Пурпурный] = "#800080";
	СтрокаПоЦвету[WebЦвета.Пшеничный] = "#F5DEB3";
	СтрокаПоЦвету[WebЦвета.РозовоКоричневый] = "#BC8F8F";
	СтрокаПоЦвету[WebЦвета.Розовый] = "#FFC0CB";
	СтрокаПоЦвету[WebЦвета.Роса] = "#F0FFF0";
	СтрокаПоЦвету[WebЦвета.РыжеватоКоричневый] = "#D2B48C";
	СтрокаПоЦвету[WebЦвета.СветлоГрифельноСерый] = "#778899";
	СтрокаПоЦвету[WebЦвета.СветлоГрифельноСиний] = "#8470FF";
	СтрокаПоЦвету[WebЦвета.СветлоЖелтый] = "#FFFFE0";
	СтрокаПоЦвету[WebЦвета.СветлоЖелтыйЗолотистый] = "#FAFAD2";
	СтрокаПоЦвету[WebЦвета.СветлоЗеленый] = "#90EE90";
	СтрокаПоЦвету[WebЦвета.СветлоЗолотистый] = "#FFEC8B";
	СтрокаПоЦвету[WebЦвета.СветлоКоралловый] = "#F08080";
	СтрокаПоЦвету[WebЦвета.СветлоКоричневый] = "#FFE4C4";
	СтрокаПоЦвету[WebЦвета.СветлоНебесноГолубой] = "#87CEFA";
	СтрокаПоЦвету[WebЦвета.СветлоРозовый] = "#FFB6C1";
	СтрокаПоЦвету[WebЦвета.СветлоСерый] = "#D3D3D3";
	СтрокаПоЦвету[WebЦвета.СеребристоСерый] = "#DCDCDC";
	СтрокаПоЦвету[WebЦвета.Серебряный] = "#C0C0C0";
	СтрокаПоЦвету[WebЦвета.СероСиний] = "#5F9EA0";
	СтрокаПоЦвету[WebЦвета.Серый] = "#808080";
	СтрокаПоЦвету[WebЦвета.СинеСерый] = "#1E90FF";
	СтрокаПоЦвету[WebЦвета.СинеФиолетовый] = "#8A2BE2";
	СтрокаПоЦвету[WebЦвета.Синий] = "#0000FF";
	СтрокаПоЦвету[WebЦвета.СинийСоСтальнымОттенком] = "#4682B4";
	СтрокаПоЦвету[WebЦвета.СинийСПороховымОттенком] = "#B0E0E6";
	СтрокаПоЦвету[WebЦвета.Сливовый] = "#DDA0DD";
	СтрокаПоЦвету[WebЦвета.СлоноваяКость] = "#FFFFF0";
	СтрокаПоЦвету[WebЦвета.СтароеКружево] = "#FDF5E6";
	СтрокаПоЦвету[WebЦвета.ТемноБирюзовый] = "#00CED1";
	СтрокаПоЦвету[WebЦвета.ТемноБордовый] = "#800000";
	СтрокаПоЦвету[WebЦвета.ТемноГрифельноСерый] = "#2F4F4F";
	СтрокаПоЦвету[WebЦвета.ТемноГрифельноСиний] = "#483D8B";
	СтрокаПоЦвету[WebЦвета.ТемноЗеленый] = "#006400";
	СтрокаПоЦвету[WebЦвета.ТемноЗолотистый] = "#B8860B";
	СтрокаПоЦвету[WebЦвета.ТемноКрасный] = "#8B0000";
	СтрокаПоЦвету[WebЦвета.ТемноОливковоЗеленый] = "#556B2F";
	СтрокаПоЦвету[WebЦвета.ТемноОранжевый] = "#FF8C00";
	СтрокаПоЦвету[WebЦвета.ТемноСерый] = "#A9A9A9";
	СтрокаПоЦвету[WebЦвета.ТемноСиний] = "#00008B";
	СтрокаПоЦвету[WebЦвета.ТемноФиолетовый] = "#9400D3";
	СтрокаПоЦвету[WebЦвета.ТеплоРозовый] = "#FF69B4";
	СтрокаПоЦвету[WebЦвета.Томатный] = "#FF6347";
	СтрокаПоЦвету[WebЦвета.ТопленоеМолоко] = "#FFEFD5";
	СтрокаПоЦвету[WebЦвета.ТусклоОливковый] = "#6B8E23";
	СтрокаПоЦвету[WebЦвета.ТусклоРозовый] = "#FFE4E1";
	СтрокаПоЦвету[WebЦвета.ТусклоСерый] = "#696969";
	СтрокаПоЦвету[WebЦвета.Ультрамарин] = "#000080";
	СтрокаПоЦвету[WebЦвета.Фиолетовый] = "#EE82EE";
	СтрокаПоЦвету[WebЦвета.Фуксин] = "#FF00FF";
	СтрокаПоЦвету[WebЦвета.ФуксинТемный] = "#8B008B";
	СтрокаПоЦвету[WebЦвета.Фуксия] = "#FF00FF";
	СтрокаПоЦвету[WebЦвета.Хаки] = "#F0E68C";
	СтрокаПоЦвету[WebЦвета.ХакиТемный] = "#BDB76B";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолны] = "#2E8B57";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолныНейтральный] = "#3CB371";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолныСветлый] = "#20B2AA";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолныТемный] = "#8FBC8F";
	СтрокаПоЦвету[WebЦвета.ЦветокБелый] = "#FFFAF0";
	СтрокаПоЦвету[WebЦвета.Циан] = "#00FFFF";
	СтрокаПоЦвету[WebЦвета.ЦианАкварельный] = "#00FFFF";
	СтрокаПоЦвету[WebЦвета.ЦианНейтральный] = "#008080";
	СтрокаПоЦвету[WebЦвета.ЦианСветлый] = "#E0FFFF";
	СтрокаПоЦвету[WebЦвета.ЦианТемный] = "#008B8B";
	СтрокаПоЦвету[WebЦвета.Черный] = "#000000";
	СтрокаПоЦвету[WebЦвета.ШелковыйОттенок] = "#FFF8DC";
	СтрокаПоЦвету[WebЦвета.Шоколадный] = "#D2691E";
	
	СтрокаЦвета = СтрокаПоЦвету.Получить(Цвет);
	Если СтрокаЦвета <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ЦветТекста(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветТекста", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораЦвета",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветТекста(Цвет, Параметры) Экспорт

	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("foreColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветФона", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораЦветаФона",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветФона(Цвет, Параметры) Экспорт
	
	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("backColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормат(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("removeFormat", Ложь, "");
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьШрифтПродолжение", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораШрифта",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
		
	ИначеЕсли Результат = "Шрифт по умолчанию" Тогда 
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, НастройкаШрифтОтображения.Имя);
		Модифицированность = Истина;
		
	ИначеЕсли Результат = "Другой.." Тогда 
		ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьШрифт", ЭтотОбъект);
		ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
		
	Иначе 
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьШрифт(Шрифт, Параметры) Экспорт

	Если Шрифт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Шрифт.Имя) Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Шрифт.Имя);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РазмерШрифта = 2;
	
	Если Шрифт.Размер <> -1 Тогда
		Если Шрифт.Размер < 8 Тогда
			РазмерШрифта = 1;
		ИначеЕсли Шрифт.Размер <= 10 Тогда
			РазмерШрифта = 2;	
		ИначеЕсли Шрифт.Размер <= 12 Тогда
			РазмерШрифта = 3;	
		ИначеЕсли Шрифт.Размер <= 14 Тогда
			РазмерШрифта = 4;	
		ИначеЕсли Шрифт.Размер <= 16 Тогда
			РазмерШрифта = 5;	
		ИначеЕсли Шрифт.Размер <= 18 Тогда
			РазмерШрифта = 6;	
		Иначе
			РазмерШрифта = 7;	
		КонецЕсли;	
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("fontSize", Ложь, РазмерШрифта);
	Модифицированность = Истина;
	
	Если Шрифт.Зачеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("strikeThrough");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Жирный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("Bold");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Наклонный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("italic");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Подчеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("underline");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 2;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер + 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 3;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер - 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
			HTMLДокумент.execCommand("InsertImage", Ложь, "file://" + ПутьКФайлу);
			Модифицированность = Истина;
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'Ther is no picture in clipboard'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинку(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ВставитьКартинкуПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;	
	КонецЕсли;
		
	Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'; en = 'All images (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'")
		+ НСтр("ru = '|Все файлы(*.*)|*.*'; en = '|All files (*.*)|*.*'")
		+ НСтр("ru = '|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'; en = '|BMP format (*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'")
		+ НСтр("ru = '|Формат GIF(*.gif*)|*.gif'; en = '|GIF format (*.gif*)|*.gif'")
		+ НСтр("ru = '|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg'; en = '|JPEG format (*.jpeg;*.jpg)|*.jpeg;*.jpg'")
		+ НСтр("ru = '|Формат PNG(*.png*)|*.png'; en = '|PNG format (*.png*)|*.png'")
		+ НСтр("ru = '|Формат TIFF(*.tif)|*.tif'; en = '|TIFF format (*.tif)|*.tif'")
		+ НСтр("ru = '|Формат icon(*.ico)|*.ico'; en = '|Icons (*.ico)|*.ico'")
		+ НСтр("ru = '|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'; en = '|Metafile format (*.wmf;*.emf)|*.wmf;*.emf'");
								
	АдресВременногоХранилищаФайла = "";
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор картинки'; en = 'Selecting picture'");
	ВыборФайла.Фильтр = Фильтр;
	
	Результат = ВыборФайла.Выбрать();
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПутьФайла = ВыборФайла.ПолноеИмяФайла;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("InsertImage", Ложь, "file://" + ПутьФайла);
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияФормыНаКлиенте()
	
	ВосстановитьПоложениеHTML();

КонецПроцедуры				

&НаСервере
Процедура СкопироватьКартинкиПисьмаОснования(ПисьмоОснование)
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ПисьмоОснование, // отдаем ссылку на другое письмо
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		Истина); // ТолькоСИдентификаторами
		
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	
	Для каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		ЭтоФайлКартинка = РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(ФайлПисьма.ТекущаяВерсияРасширение);		
		НужноПроверитьНаличиеКартинкиВHTML = Не ЭтоФайлКартинка;
		СсылкаЕстьВHTML = Истина;
		
		Если НужноПроверитьНаличиеКартинкиВHTML Тогда
			
			СсылкаЕстьВHTML = Ложь;
			
			Если Найти(ТекстПисьма, "http:cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли Найти(ТекстПисьма, "cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли (СтрДлина(ИсточникФайла) > 18) И Найти(ТекстПисьма, ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
		НавигационнаяСсылкаФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
			ФайлПисьма.ТекущаяВерсия, // ВерсияСсылка
			УникальныйИдентификатор); // ИдентификаторФормы
		АбсолютнаяСсылкаНаКартинку = НавигационнаяСсылкаИнформационнойБазы + "/" + НавигационнаяСсылкаФайла;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "http:cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку); // коррекция ошибочного html
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		Если СтрДлина(ИсточникФайла) > 18 Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
			НавигационнаяСсылкаФайла, ИсточникФайла,
			ФайлПисьма.ТекущаяВерсияДатаМодификацииФайла, 
			ФайлПисьма.ИмяФайла, 
			ФайлПисьма.Размер,
			ФайлПисьма.Ссылка);
		
		СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
		
		Если СсылкаЕстьВHTML Тогда
			ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка", 
				ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстИзБуфера(Команда)
	ВыполнитьHTMLКоманду("paste");
КонецПроцедуры

&НаКлиенте
Процедура Вырезать(Команда)
	ВыполнитьHTMLКоманду("cut");
КонецПроцедуры

#КонецОбласти
