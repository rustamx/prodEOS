
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПросмотр = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НачальнаяНастройкаПриЧтенииИСоздании(Объект);
	КонецЕсли;
	
	// Подготовка постоянных коллекций
	
	// Заполнение типов значений доступа всех видов доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа() Цикл
		Если ТипЗнч(СвойстваВидаДоступа.ВидДоступа) <> Тип("ПланВидовХарактеристикСсылка.ВидыДоступа") Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта), МетаданныеТипа.ПредставлениеОбъекта, МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ПрофильАдминистратор        = Справочники.ПрофилиГруппДоступа.Администратор;
	ГруппаДоступаАдминистраторы = Справочники.ГруппыДоступа.Администраторы;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	СправочникВнешниеПользователиДоступен = ПравоДоступа("Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.Пользователи"),        "Пользователи");
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"), "ВнешниеПользователи");
	
	// Заполнение списка выбора типа пользователей
	ЗаполнитьСписокТиповПользователей();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Установка постоянной доступности свойств
	
	// Определение необходимости настройки ограничений доступа
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	// Установка доступности при открытии формы только для просмотра
	Элементы.ПользователиПодобрать.Доступность                = НЕ ТолькоПросмотр;
	Элементы.КонтекстноеМенюПользователиПодобрать.Доступность = НЕ ТолькоПросмотр;
	Элементы.ВидыДоступаИзменить.Доступность                  = НЕ ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ПодключитьОбработчикОжидания("ПриОткрытииОбработчикОжидания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииОбработчикОжидания()
	
	ПриОткрытииКлиент(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиент(ПараметрыОткрытия = Неопределено)
	
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы 
		И Объект.Профиль <> ПрофильАдминистратор 
		И Не ПараметрыОткрытия.Свойство("ПолученОтветНаПервыйВопрос") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОткрытииКлиентПродолжениеПослеПервогоВопроса",
			ЭтотОбъект,
			ПараметрыОткрытия);
		
		ПоказатьВопрос(
		    ОписаниеОповещения,
			НСтр("ru = 'У группы доступа Администраторы должен быть профиль Администратор.
		         |
		         |Установить профиль в группе доступа (нет - открыть только для просмотра)?';
		         |en = 'Access Administrators group must be the Administrator profile.
		         |
		         |Set group access profile (no-only open to view)?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр 
		И ИзменилсяСоставВидовДоступаПриЧтении
		И Не ПараметрыОткрытия.Свойство("ПолученОтветНаВторойВопрос") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОткрытииКлиентПродолжениеПослеВторогоВопроса",
			ЭтотОбъект,
			ПараметрыОткрытия);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Изменился состав видов доступа профиля этой группы доступа.
					|
					|Обновить виды доступа в группе доступа (нет - открыть только для просмотра)?';
					|en = 'Changed species composition of this group access profile access.
					|
					|Update the access group access (no-only open to view)?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр
		И НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
		И ВладелецФормы.Родитель.Параметры.Свойство("Профиль") Тогда
		
		Если ЗначениеЗаполнено(ВладелецФормы.Родитель.Параметры.Профиль) Тогда
			Объект.Профиль = ВладелецФормы.Родитель.Параметры.Профиль;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиентПродолжениеПослеПервогоВопроса(Ответ, ПараметрыОткрытия) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Профиль = ПрофильАдминистратор;
		Модифицированность = Истина;
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	ПараметрыОткрытия.Вставить("ПолученОтветНаПервыйВопрос", Истина);
	ПриОткрытииКлиент(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиентПродолжениеПослеВторогоВопроса(Ответ, ПараметрыОткрытия) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьСоставВидовДоступа();
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	ПараметрыОткрытия.Вставить("ПолученОтветНаВторойВопрос", Истина);
	ПриОткрытииКлиент(ПараметрыОткрытия);
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = Истина;
	ВызватьИсключение НСтр("ru = 'Это служебный объект, редактирование вручную не предусмотрено.'; en = 'This is service object, manual editing is not provided.'");
	
	Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		// Ответственный не может менять что-либо, кроме состава пользователей
		// В целях предотвращения изменения группы доступа на клиенте в запрещенных
		// частях, выполняется повторное чтение объекта
		ВосстановитьОбъектБезУчастниковГруппы(ТекущийОбъект);
	КонецЕсли;
	
	ТекущийОбъект.Пользователи.Очистить();
	Если ТекущийОбъект.Ссылка <> Справочники.ГруппыДоступа.Администраторы
      И ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
		Если ИспользованиеПерсональногоДоступа Тогда
			ТекущийОбъект.Пользователи.Добавить().Пользователь = ТекущийОбъект.Пользователь;
		КонецЕсли;
	Иначе
		Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
			ТекущийОбъект.Пользователи.Добавить().Пользователь = Элемент.Пользователь;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущийОбъект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		Объект.Администратор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'; en = 'When writing errors (see log)'"));
	КонецЕсли;
	
	Оповестить("ИзмененаГруппаДоступа", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка незаполненных и повторяющихся пользователей и групп пользователей.
	ДеревоПользователейСтроки = РеквизитФормыВЗначение("ПользователиГруппы").Строки;
	НомерСтроки = ДеревоПользователейСтроки.Количество()-1;
	
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
		ТекущаяСтрока = ДеревоПользователейСтроки.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Пользователь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен пользователь или группа пользователей.'; en = 'Is the user or group of users.'"),
			                                                  ,
			                                                  "ПользователиГруппы[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = ДеревоПользователейСтроки.НайтиСтроки(Новый Структура("Пользователь", ТекущаяСтрока.Пользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ?(ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи"),
			                                                     НСтр("ru = 'Пользователь повторяется.'; en = 'User repeats.'"),
			                                                     НСтр("ru = 'Группа пользователей повторяется.'; en = 'User group repeats.'") ),
			                                                  ,
			                                                  "ПользователиГруппы[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия только элементов в предопределенной группе Администраторы.
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы И ТипЗнч(ТекущаяСтрока.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ?(ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.РабочиеГруппы"),
			                                                     НСтр("ru = 'В предопределенной группе доступа Администраторы могут быть только пользователи.
			                                                                |Группы пользователей недопустимы.';
			                                                                |en = 'In the Group of administrators can be access only by users.
			                                                                |User groups are not allowed.'"),
			                                                     НСтр("ru = 'В предопределенной группе доступа Администраторы могут быть только пользователи.
			                                                                |Внешние пользователи и группы внешних пользователей недопустимы.';
			                                                                |en = 'In the Group of administrators can be access only by users.
			                                                                |External users and groups external users are not allowed.'") ),
			                                                  ,
			                                                  "ПользователиГруппы[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Продолжить;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	// Проверка незаполненных и повторяющихся значений доступа.
	НомерСтрокиВидДоступа = Объект.ВидыДоступа.Количество()-1;
	
	Пока НЕ Отказ И НомерСтрокиВидДоступа >= 0 Цикл
		ТекущаяСтрокаВидовДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидДоступа);
		
		ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НЕ Отказ И НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение не заполнено.'; en = 'The value is blank.'"),
				                                                  ,
				                                                  "Объект.ЗначенияДоступа[" + Формат(ТекущаяСтрока.НомерСтроки-1, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Продолжить;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа, ЗначениеДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа, ТекущаяСтрока.ЗначениеДоступа));
			Если НайденныеЗначения.Количество() > 1 Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение повторяется.'; en = 'The value is repeated.'"),
				                                                  ,
				                                                  "Объект.ЗначенияДоступа[" + Формат(ТекущаяСтрока.НомерСтроки-1, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидДоступа = НомерСтрокиВидДоступа - 1;
	КонецЦикла;
	
	Если НЕ Отказ И Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		// Проверка пустого списка пользователей ИБ в группе доступа Администраторы
		УстановитьПривилегированныйРежим(Истина);
		НайденПользовательИБ = Ложь;
		Для каждого ОписаниеПользователя ИЗ ПользователиГруппы.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
			   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
				
				НайденПользовательИБ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НайденПользовательИБ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В группе доступа Администраторы
			                                                             |должен быть хотя бы один пользователь,
			                                                             |которому разрешен доступ к информационной базе.';
			                                                             |en = 'Administrators access group should contain
			                                                             |at least one user who is permitted to access 
			                                                             |the infobase.'"),
			                                                  ,
			                                                  "Объект.Пользователи",
			                                                  ,
			                                                  Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхПользователей(Команда)
	ПоказыватьНедействительныхПользователей = Не ПоказыватьНедействительныхПользователей;
	
	Элементы.ФормаПоказыватьНедействительныхПользователей.Пометка 
		= ПоказыватьНедействительныхПользователей;	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	ПрофильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредставлениеТипаПользователейНачалоВыбораПродолжение",
		ЭтотОбъект);
	ПоказатьВыборИзСписка(
		ОписаниеОповещения, 
		ТипыПользователей, 
		Элемент, 
		ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейНачалоВыбораПродолжение(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено
		И Объект.ТипПользователей <> ВыбранныйЭлемент.Значение Тогда
		Модифицированность = Истина;
		Объект.ТипПользователей        = ВыбранныйЭлемент.Значение;
		ПредставлениеТипаПользователей = ВыбранныйЭлемент.Представление;
		Если Объект.ТипПользователей <> Неопределено Тогда
			УдалитьНеТипичныхПользователей();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ПользовательВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ПользователиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Отказ = Истина;
			Элементы.Пользователи.ТекущаяСтрока = Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
			Элементы.Пользователи.СкопироватьСтроку();
		КонецЕсли;
	ИначеЕсли Элементы.Пользователи.ТекущаяСтрока <> Неопределено Тогда
		Отказ = Истина;
		Элементы.Пользователи.СкопироватьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		Элементы.Пользователи.ТекущаяСтрока = Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		Элементы.Пользователи.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	
	СтрокаРодителя = Элемент.ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодителя <> Неопределено Тогда
		Отказ = Истина;
		
		Если ТипЗнч(СтрокаРодителя.Пользователь) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			
			ПоказатьПредупреждение(,НСтр("ru = 'Пользователи групп отображаются для сведения,
			                          |что они получают доступ групп пользователей.
			                          |Их нельзя удалить в этом списке.';
			                          |en = 'Users groups are displayed for information that they have access to groups of users.
			                          |They cannot be removed from this list.'"));
			
		ИначеЕсли ТипЗнч(СтрокаРодителя.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			
			ПоказатьПредупреждение(,НСтр("ru = 'Внешние пользователи групп отображаются для сведения,
			                          |что они получают доступ групп внешних пользователей.
			                          |Их нельзя удалить в этом списке.';
			                          |en = 'External users groups are displayed for information that they access external user groups.
			                          |They cannot be removed from this list.'"));
			
		Иначе // тип родителя - пользователь или внешний пользователь
			ПоказатьПредупреждение(,НСтр("ru = 'Руководители отображаются для сведения,
			                          |что они получают доступ подчиненных.
			                          |Их нельзя удалить в этом списке.';
			                          |en = 'Heads are displayed for information that they access.
			                          |They cannot be removed from this list.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПользовательПустаяСсылка;
		Элемент.ТекущиеДанные.Недействителен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И
	     Элемент.ТекущиеДанные <> Неопределено И
	     Элемент.ТекущиеДанные.Пользователь = ПользовательПустаяСсылка Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
		Элемент.ТекущиеДанные.Недействителен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НетИзменений = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ЗначениеНеНайдено = Истина;
			Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
				Если Элемент.Пользователь = Значение Тогда
					ЗначениеНеНайдено = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеНеНайдено Тогда
				НоваяСтрока = ПользователиГруппы.ПолучитьЭлементы().Добавить();
				НоваяСтрока.Пользователь = Значение;
				НоваяСтрока.Недействителен = НедействительностьПользователя(Значение);			
				НетИзменений = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		НетИзменений = Ложь;
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
		Элемент.ТекущиеДанные.Недействителен = НедействительностьПользователя(
			Элемент.ТекущиеДанные.Пользователь);		
	КонецЕсли;
	
	Если НетИзменений = Ложь Тогда
		ИзмененныеСтроки = Неопределено;
		ОбновитьПользователейГруппИРуководителейПользователей(, ИзмененныеСтроки);
		Для каждого ИдентификаторСтроки Из ИзмененныеСтроки Цикл
			Элементы.Пользователи.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПослеУдаления(Элемент)
	
	// Установить отображение дерева
	ЕстьРуководители = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьРуководители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.Пользователи.Отображение = ?(ЕстьРуководители, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры


&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
		ОбновитьПользователейГруппИРуководителейПользователей(Элементы.Пользователи.ТекущаяСтрока);
		Элементы.Пользователи.Развернуть(Элементы.Пользователи.ТекущаяСтрока);
		Элементы.Пользователи.ТекущиеДанные.Недействителен = НедействительностьПользователя(
			Элементы.Пользователи.ТекущиеДанные.Пользователь);			
	Иначе
		Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
		Элементы.Пользователи.ТекущиеДанные.Недействителен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ТекущиеДанные.Пользователь  = ПользовательПустаяСсылка;
	Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	
	Элементы.Пользователи.ТекущиеДанные.Недействителен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ВидыДоступа.ТекущийЭлемент <> Элементы.ВидыДоступаИспользование Тогда
		Элементы.ВидыДоступа.ТекущийЭлемент = Элементы.ВидыДоступаИспользование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаИспользованиеПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен = (ВыбранноеЗначение = "ВсеРазрешены");
	
	Модифицированность = Истина;
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДоступа) Тогда
		Элемент.ТекущиеДанные.ВидДоступа = ТекущийВидДоступа;
		Отбор = Новый Структура("ВидДоступа", ТекущийВидДоступа);
		Элемент.ТекущиеДанные.НомерСтрокиПоВиду = Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	КонецЕсли;
	
	ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.РабочиеГруппы") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", Новый Структура("ВыборГруппВнешнихПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаСервере
Процедура НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект)
	
	Если ТекущийОбъект.Ссылка <> Справочники.ГруппыДоступа.Администраторы Тогда
		
		// Подготовка к режиму персональной группы доступа
		Если ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
			АвтоЗаголовок = Ложь;
			Заголовок = ТекущийОбъект.Наименование + ": " + ТекущийОбъект.Пользователь + " " + НСтр("ru = '(Группа доступа)'; en = '(Group)'");
			
			ИспользованиеПерсональногоДоступа = ТекущийОбъект.Пользователи.Найти(ТекущийОбъект.Пользователь, "Пользователь") <> Неопределено;
		Иначе
			АвтоЗаголовок = Истина;
		КонецЕсли;
		Элементы.Наименование.ТолькоПросмотр               =    ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		Элементы.Родитель.ТолькоПросмотр                   =    ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		Элементы.Профиль.ТолькоПросмотр                    =    ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		Элементы.СвойстваПерсональнойГруппы.Видимость      =    ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		Элементы.ПредставлениеТипаПользователей.Видимость  = НЕ ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		Элементы.ПользователиГруппы.Видимость              = НЕ ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		//Элементы.АдминистраторПерсональнойГруппы.Видимость =    ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		Элементы.ПользователиИДоступ.ОтображениеСтраниц    =  ?(ЗначениеЗаполнено(ТекущийОбъект.Пользователь), ОтображениеСтраницФормы.Нет, ОтображениеСтраницФормы.ЗакладкиСверху);
		Элементы.ВидыДоступа.ПоложениеЗаголовка            =  ?(ЗначениеЗаполнено(ТекущийОбъект.Пользователь), ПоложениеЗаголовкаЭлементаФормы.Верх, ПоложениеЗаголовкаЭлементаФормы.Нет);
		Элементы.ПредставлениеТипаПользователей.Видимость  = НЕ ЗначениеЗаполнено(ТекущийОбъект.Пользователь)
		                                                     И ( ВнешниеПользователи.ИспользоватьВнешнихПользователей()
		                                                         ИЛИ Объект.ТипПользователей <> Неопределено
		                                                             И ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") );
		
		Элементы.ПользовательВладелец.ТолькоПросмотр = УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа();
		
		// Подготовка к режиму редактирования пользователей администратором участников
		Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
			Элементы.Наименование.ТолькоПросмотр = Истина;
			Элементы.Родитель.ТолькоПросмотр = Истина;
			Элементы.Профиль.Видимость = Ложь;
			Элементы.ПредставлениеТипаПользователей.ТолькоПросмотр = Истина;
			Элементы.Доступ.Видимость  = Ложь;
			Элементы.ПользователиИДоступ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.Администратор.Видимость = Ложь;
			Элементы.АдминистраторПерсональнойГруппы.Видимость = Ложь;
			Элементы.Описание.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Наименование.ТолькоПросмотр                   = Истина;
		Элементы.Профиль.ТолькоПросмотр                        = Истина;
		Элементы.СвойстваПерсональнойГруппы.Видимость          = Ложь;
		Элементы.ПредставлениеТипаПользователей.ТолькоПросмотр = Истина;
		Элементы.Администратор.ТолькоПросмотр                  = Истина;
		Элементы.АдминистраторПерсональнойГруппы.Видимость     = Ложь;
		Элементы.Описание.ТолькоПросмотр                       = Истина;
		
		Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСоставВидовДоступа(Истина);
	
	// Подготовка дерева пользователей
	ДеревоПользователей = ПользователиГруппы.ПолучитьЭлементы();
	ДеревоПользователей.Очистить();
	Для каждого СтрокаТЧ Из ТекущийОбъект.Пользователи Цикл		
		НоваяСтрока = ДеревоПользователей.Добавить();
		НоваяСтрока.Пользователь = СтрокаТЧ.Пользователь;
		
		НоваяСтрока.Недействителен = НедействительностьПользователя(СтрокаТЧ.Пользователь);			
	КонецЦикла;
	ОбновитьПользователейГруппИРуководителейПользователей();
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаСервере
Процедура ПрофильПриИзмененииНаСервере()
	
	ОбновитьСоставВидовДоступа();
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваВидовДоступаВФорме()
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Строка);
		ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПользователей()
	
	ТипыПользователей.Добавить(Неопределено, НСтр("ru = 'Произвольные участники'; en = 'Random participants'"));
	ТипыПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка(), НСтр("ru = 'Обычные пользователи'; en = 'Normal users'"));
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		Для каждого ТипСсылкиОбъектаАвторизации ИЗ Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.Типы() Цикл
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипСсылкиОбъектаАвторизации);
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипСсылкиОбъектаАвторизации);
			ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);
			
			ТипыПользователей.Добавить(
				ОписаниеТипаСсылки.ПривестиЗначение(Неопределено),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Внешние пользователи (%1)'; en = 'External users (%1)'"),
					МетаданныеТипа.Синоним));
		КонецЦикла;
	КонецЕсли;
	
	НайденныйЭлемент = ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей);
	ПредставлениеТипаПользователей =
		?(НайденныйЭлемент = Неопределено,
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		  		НСтр("ru = 'Неизвестный тип ""%1""'; en = 'Unknown type ""%1""'"),
		  		Строка(ТипЗнч(Объект.ТипПользователей))),
		  НайденныйЭлемент.Представление);
	
КонецПроцедуры


&НаСервере
Процедура УдалитьНеТипичныхПользователей()
	
	Если Объект.ТипПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ТипПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Индекс = Объект.Пользователи.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.Пользователи") И
			     ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.РабочиеГруппы") Тогда
				
				Объект.Пользователи.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	Иначе
		Индекс = Объект.Пользователи.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") И
			     ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				
				Объект.Пользователи.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> &ТипВнешнихПользователей
		|	И ВнешниеПользователи.Ссылка В(&ВыбранныеВнешниеПользователиИГруппы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> НЕОПРЕДЕЛЕНО
		|	И ТИПЗНАЧЕНИЯ(ГруппыВнешнихПользователей.ТипОбъектовАвторизации) <> &ТипВнешнихПользователей
		|	И ГруппыВнешнихПользователей.Ссылка В(&ВыбранныеВнешниеПользователиИГруппы)");
		
		Запрос.УстановитьПараметр("ВыбранныеВнешниеПользователиИГруппы", Объект.Пользователи.Выгрузить().ВыгрузитьКолонку("Пользователь"));
		Запрос.УстановитьПараметр("ТипВнешнихПользователей", ТипЗнч(Объект.ТипПользователей));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.Пользователи.НайтиСтроки(Новый Структура("Пользователь", Выборка.Ссылка));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Пользователи.Удалить(Объект.Пользователи.Индекс(НайденнаяСтрока));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСоставВидовДоступа(Знач ПриЧтенииНаСервере = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаВидыДоступа.ВидДоступа,
	|	ПрофилиГруппДоступаВидыДоступа.Предустановленный,
	|	ПрофилиГруппДоступаВидыДоступа.ДоступРазрешен
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиГруппДоступаВидыДоступа
	|ГДЕ
	|	ПрофилиГруппДоступаВидыДоступа.Ссылка = &Ссылка
	|	И ПрофилиГруппДоступаВидыДоступа.ВидДоступа.Предопределенный");
	Запрос.УстановитьПараметр("Ссылка", Объект.Профиль);
	УстановитьПривилегированныйРежим(Истина);
	ВидыДоступаПрофиля = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИзменилсяСоставВидовДоступа = Ложь;
	
	// Добавление недостающих видов доступа.
	Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
		
		Отбор = Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа);
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(СтрокаТЧ.ВидДоступа);
		
		Если СвойстваВидаДоступа <> Неопределено
		   И НЕ СтрокаТЧ.Предустановленный
		   И Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа)).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				НоваяСтрока = Объект.ВидыДоступа.Добавить();
				НоваяСтрока.ВидДоступа      = СтрокаТЧ.ВидДоступа;
				НоваяСтрока.ДоступРазрешен  = СтрокаТЧ.ДоступРазрешен;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление лишних видов доступа.
	Индекс = Объект.ВидыДоступа.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ТекущийВидДоступа1 = Объект.ВидыДоступа[Индекс].ВидДоступа;
		СвойстваВидаДоступаВПрофиле = ВидыДоступаПрофиля.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1));
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ТекущийВидДоступа1);
		Если СвойстваВидаДоступа = Неопределено
		 ИЛИ СвойстваВидаДоступаВПрофиле.Количество() > 0
		   И СвойстваВидаДоступаВПрофиле[0].Предустановленный
		 ИЛИ ВидыДоступаПрофиля.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1)).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				Объект.ВидыДоступа.Удалить(Индекс);
				Для каждого ЭлементКоллекции Из Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1)) Цикл
					Объект.ЗначенияДоступа.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Модифицированность = Модифицированность ИЛИ ИзменилсяСоставВидовДоступа И НЕ ПриЧтенииНаСервере;
	
	// Установка флажка для запроса у пользователя решения обновить состав видов доступа.
	Если ПриЧтенииНаСервере
	     И НЕ Объект.Ссылка.Пустая() // ЭтоНовый
	     И ИзменилсяСоставВидовДоступа
	     И ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() // Только администратор может обновлять виды доступа
	     И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Профиль") = Объект.Профиль Тогда
	     
		ИзменилсяСоставВидовДоступаПриЧтении = Истина;
	КонецЕсли;
	
	Элементы.Доступ.Доступность = Объект.ВидыДоступа.Количество() > 0;
	
	// Установка порядка видов доступа по профилю.
	Если НЕ ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Индекс = ВидыДоступаПрофиля.Количество()-1;
		Пока Индекс >=0 Цикл
			Если ВидыДоступаПрофиля[Индекс].Предустановленный Тогда
				ВидыДоступаПрофиля.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
			Индекс = Объект.ВидыДоступа.Индекс(Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа))[0]);
			Объект.ВидыДоступа.Сдвинуть(Индекс, ВидыДоступаПрофиля.Индекс(СтрокаТЧ) - Индекс);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилсяСоставВидовДоступа Тогда
		ТекущийВидДоступа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоВидаДоступа(Знач Контекст)
	
	#Если Клиент Тогда
		ТекущиеДанные = Контекст.Элементы.ВидыДоступа.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Контекст.Объект.ВидыДоступа.НайтиПоИдентификатору(?(Контекст.Элементы.ВидыДоступа.ТекущаяСтрока = Неопределено, -1, Контекст.Элементы.ВидыДоступа.ТекущаяСтрока));
	#КонецЕсли
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Контекст.ТекущийВидДоступа = ТекущиеДанные.ВидДоступа;
		
		// Установка отбора значений
		Если Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Неопределено
		 ИЛИ Контекст.Элементы.ЗначенияДоступа.ОтборСтрок.ВидДоступа <> ТекущиеДанные.ВидДоступа Тогда
			
			Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидДоступа", ТекущиеДанные.ВидДоступа);
		КонецЕсли;
		
		// Обновление поля НадписьВидДоступа
		Контекст.НадписьВидДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ТекущиеДанные.ВидДоступа = Контекст.ВидДоступаПользователи,
			  ?(ТекущиеДанные.ДоступРазрешен,
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'; en = 'Allowed values (%1) - current user is always allowed'"),
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'; en = 'Allowed values (%1) - current user is always allowed'") ),
			  ?(ТекущиеДанные.ВидДоступа = Контекст.ВидДоступаВнешниеПользователи,
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'; en = 'Disallowed values (%1)-current external user is always allowed'"),
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'; en = 'Disallowed values (%1)-current external user is always allowed'") ),
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1)'; en = 'Disallowed values (%1)'"),
			      НСтр("ru = 'Разрешенные значения (%1)'; en = 'The allowed values (%1)'") )
			  )
			),
			Строка(ТекущиеДанные.ВидДоступа));
		
		ОбновитьПредставлениеИспользованияВидаДоступа(Контекст, ТекущиеДанные);
	Иначе
		Контекст.ТекущийВидДоступа = Неопределено;
		Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидДоступа", Неопределено);
		
		Если Контекст.Объект.ВидыДоступа.Количество() = 0 Тогда
			Контекст.Объект.ЗначенияДоступа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Контекст.ТекущийТипЗначенияДоступа  = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ТекущийТипЗначенияДоступа);
	Контекст.ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Для каждого ОписаниеТипаВидаДоступа Из Контекст.ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущиеДанные.ВидДоступа)) Цикл
			Контекст.ТекущиеТипыЗначенийДоступа.Добавить(ОписаниеТипаВидаДоступа.ТипЗначенияДоступа, ОписаниеТипаВидаДоступа.ПредставлениеТипа);
		КонецЦикла;
	КонецЕсли;

	Если Контекст.ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		Контекст.ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'; en = 'Undefined'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияВидаДоступа(Контекст, ОписаниеВидаДоступа)
	
	КоличествоЗначений = Контекст.Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа)).Количество();
	Если КоличествоЗначений > 0 Тогда
		ПрописьЧисла          = ЧислоПрописью(КоличествоЗначений, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'; en = ',,,,,,,,0'"));
		ПрописьЧислаИПредмета = ЧислоПрописью(КоличествоЗначений, "Л = ru_RU", НСтр("ru = '-го значения,-х значений,-и значений,,,,,,0'; en = '-th values, values of x-values,, 0'"));
		ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(КоличествоЗначений, "ЧГ="));
		ОписаниеВидаДоступа.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, кроме %1'; en = 'All permitted, except for %1'"),
			  НСтр("ru = 'Все запрещены, кроме %1'; en = 'All are banned, except for %1'") ),
			ЧислоИПредмет);
	Иначе
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'; en = 'All permitted, without exception'"),
			  НСтр("ru = 'Все запрещены, без исключений'; en = 'All are forbidden, without exceptions'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомерСтрокиПоВиду(Контекст, ОписаниеВидаДоступа)
	
	Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	ЗначенияДоступаПоВиду = Контекст.Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступаПоВиду Цикл
		Строка.НомерСтрокиПоВиду = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст, Знач ВключаяГруппы = Истина, Знач ВключаяВнешнихПользователей = Неопределено, БезПользователей = Ложь)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст, ВключаяГруппы, ВключаяВнешнихПользователей, БезПользователей);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина)
	
	Возврат УправлениеДоступомСлужебный.СформироватьДанныеВыбораЗначенияДоступа(Текст, ВидДоступа, ВключаяГруппы);
	
КонецФункции

&НаКлиенте
Процедура ВыбранТипПользователиИлиВнешниеПользователи(ОписаниеОповещения)
	
	ОписаниеОповещения.ДополнительныеПараметры.ВыборИПодборВнешнихПользователей = Ложь;
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПользователей <> Неопределено Тогда
		Если ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") Тогда
			ОписаниеОповещения.ДополнительныеПараметры.ВыборИПодборВнешнихПользователей = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьВнешнихПользователей Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОповещенияВыбора = Новый ОписаниеОповещения(
			"ВыбранТипПользователиИлиВнешниеПользователиПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		СписокТиповПользователей.ПоказатьВыборЭлемента(
			ОписаниеОповещенияВыбора, 
			НСтр("ru = 'Выбор типа данных'; en = 'Select data type'"), 
			СписокТиповПользователей[0]);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранТипПользователиИлиВнешниеПользователиПродолжение(Элемент, Параметры) Экспорт
	
	Если Элемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
	Параметры.ОписаниеОповещения.ДополнительныеПараметры.ВыборИПодборВнешнихПользователей = 
		Элемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипЗначенияДоступа(ОписаниеОповещения)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
		
	ИначеЕсли ТекущиеТипыЗначенийДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
		
	ИначеЕсли ТекущиеТипыЗначенийДоступа.Количество() > 0 Тогда
		
		Если ТекущиеТипыЗначенийДоступа.Количество() = 2 Тогда
			Если ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ПользовательПустаяСсылка) <> Неопределено
			   И ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
			
			Если ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ВнешнийПользовательПустаяСсылка) <> Неопределено
			   И ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОповещенияВыбора = Новый ОписаниеОповещения(
			"ВыбратьТипЗначенияДоступаПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		ТекущиеТипыЗначенийДоступа.ПоказатьВыборЭлемента(
			ОписаниеОповещенияВыбора, 
			НСтр("ru = 'Выбор типа данных'; en = 'Select data type'"), 
			ТекущиеТипыЗначенийДоступа[0]);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипЗначенияДоступаПродолжение(Элемент, Параметры) Экспорт
	
	Если Элемент <> Неопределено Тогда
		ТекущийТипЗначенияДоступа = Элемент.Значение;
		Параметры.ОписаниеОповещения.ДополнительныеПараметры.Элемент = Элемент;
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(Элементы.Пользователи.ТекущиеДанные = Неопределено, Неопределено, Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ВыборИПодборВнешнихПользователей", Ложь);
	ПараметрыОбработчика.Вставить("ПараметрыФормы", ПараметрыФормы);
	ПараметрыОбработчика.Вставить("Подобрать", Подобрать);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьПодобратьПользователейПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	Если НЕ Подобрать И
	     ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока) И
	     ( ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") ИЛИ
	       ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.РабочиеГруппы") ) Тогда
	
		ОписаниеОповещения.ДополнительныеПараметры.ВыборИПодборВнешнихПользователей = Ложь;
	
	ИначеЕсли НЕ Подобрать И
	          ИспользоватьВнешнихПользователей И
	          ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока) И
	          ( ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	            ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ОписаниеОповещения.ДополнительныеПараметры.ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		ВыбранТипПользователиИлиВнешниеПользователи(ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователейПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыборИПодборВнешнихПользователей = Параметры.ВыборИПодборВнешнихПользователей;
	ПараметрыФормы = Параметры.ПараметрыФормы;
	Подобрать = Параметры.Подобрать;
	Если Объект.Ссылка <> ГруппаДоступаАдминистраторы Тогда
		Если ВыборИПодборВнешнихПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
	
		Если Объект.ТипПользователей <> Неопределено Тогда
			ПараметрыФормы.Вставить("ТипОбъектовАвторизации", Объект.ТипПользователей);
		КонецЕсли;
		Если СправочникВнешниеПользователиДоступен Тогда
			ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав для выбора внешних пользователей.'; en = 'Insufficient privilege to select outside users.'"));
		КонецЕсли;
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользователейГруппИРуководителейПользователей(ИдентификаторСтроки = Неопределено, ИзмененныеСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
	Иначе
		ЭлементыКоллекции = Новый Массив;
		ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	НепосредственныеУчастники = Новый Массив;
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		НепосредственныеУчастники.Добавить(Элемент.Пользователь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НепосредственныеУчастники", НепосредственныеУчастники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь
	|ПОМЕСТИТЬ ВсеУчастники
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В(&НепосредственныеУчастники)
	|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) <> ТИП(Справочник.Пользователи)
	|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) <> ТИП(Справочник.ВнешниеПользователи)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь В(&НепосредственныеУчастники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУчастники.ГруппаПользователей,
	|	ВсеУчастники.Пользователь,
	|	ВсеУчастники.Пользователь.Наименование
	|ИЗ
	|	ВсеУчастники КАК ВсеУчастники
	|ГДЕ
	|	ВсеУчастники.ГруппаПользователей <> НЕОПРЕДЕЛЕНО
	|	И (ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВсеУчастники.Пользователь) = ТИП(Справочник.Пользователи)
	|			ТОГДА ВсеУчастники.Пользователь.Недействителен = ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Значение(Справочник.Пользователи.ПустаяСсылка) КАК Руководитель,
	|	Значение(Справочник.Пользователи.ПустаяСсылка) КАК Подчиненный
	|ГДЕ
	|	ЛОЖЬ";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	РуководителиПодчиненных = РезультатыЗапросов[2].Выгрузить();
	ИзмененныеСтроки = Новый Массив;
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		Элемент.Ссылка = Элемент.Пользователь;
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.РабочиеГруппы")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			// Заполнение пользователей группы
			СтарыеПользователи = Элемент.ПолучитьЭлементы();
			НовыеПользователи = РезультатыЗапросов[1].Выгрузить().НайтиСтроки(Новый Структура("ГруппаПользователей", Элемент.Пользователь));
			Если СтарыеПользователи.Количество() <> НовыеПользователи.Количество() Тогда
				СтарыеПользователи.Очистить();
				Для каждого Строка Из НовыеПользователи Цикл
					НовыйЭлемент = СтарыеПользователи.Добавить();
					НовыйЭлемент.Ссылка       = Строка.Пользователь;
					НовыйЭлемент.Пользователь = Строка.Пользователь;
					ОбновитьРуководителейПользователя(НовыйЭлемент, РуководителиПодчиненных, ИзмененныеСтроки);
				КонецЦикла;
				ИзмененныеСтроки.Добавить(Элемент.ПолучитьИдентификатор());
			Иначе
				Для каждого Строка Из СтарыеПользователи Цикл
					ОбновитьРуководителейПользователя(Строка, РуководителиПодчиненных, ИзмененныеСтроки);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОбновитьРуководителейПользователя(Элемент, РуководителиПодчиненных, ИзмененныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(ПользователиГруппы, "Ссылка", "НомерКартинки", ИдентификаторСтроки, Истина);
	
	// Установить отображение дерева
	ЕстьДерево = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьДерево = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.Пользователи.Отображение = ?(ЕстьДерево, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

Процедура ОбновитьРуководителейПользователя(Знач ОписаниеПользователя, Знач РуководителиПодчиненных, Знач ИзмененныеСтроки)
	
	СтарыеРуководители = ОписаниеПользователя.ПолучитьЭлементы();
	НовыеРуководители = РуководителиПодчиненных.НайтиСтроки(Новый Структура("Подчиненный", ОписаниеПользователя.Ссылка));
	
	Если СтарыеРуководители.Количество() <> НовыеРуководители.Количество() Тогда
		СтарыеРуководители.Очистить();
		Для каждого Строка Из НовыеРуководители Цикл
			ОписаниеРуководителя = СтарыеРуководители.Добавить();;
			ОписаниеРуководителя.Ссылка       = Строка.Руководитель;
			ОписаниеРуководителя.Пользователь = Строка.ПредставлениеРуководителя + " (" + НСтр("ru = 'руководитель'; en = 'manager'") + ")";
		КонецЦикла;
		ИзмененныеСтроки.Добавить(ОписаниеПользователя.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОбъектБезУчастниковГруппы(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыДоступа.ПометкаУдаления,
	|	ГруппыДоступа.Предопределенный,
	|	ГруппыДоступа.Родитель,
	|	ГруппыДоступа.ЭтоГруппа,
	|	ГруппыДоступа.Наименование,
	|	ГруппыДоступа.Профиль,
	|	ГруппыДоступа.Администратор,
	|	ГруппыДоступа.ТипПользователей,
	|	ГруппыДоступа.Пользователь,
	|	ГруппыДоступа.Описание
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ДоступРазрешен
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|ГДЕ
	|	ГруппыДоступаВидыДоступа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|ГДЕ
	|	ГруппыДоступаЗначенияДоступа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Восстановление реквизитов
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, РезультатыЗапросов[0].Выгрузить()[0]);
	
	// Восстановление табличной части ВидыДоступа
	ТекущийОбъект.ВидыДоступа.Загрузить(РезультатыЗапросов[1].Выгрузить());
	
	// Восстановление табличной части ЗначенияДоступа
	ТекущийОбъект.ЗначенияДоступа.Загрузить(РезультатыЗапросов[2].Выгрузить());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция НедействительностьПользователя(ПользовательСсылка)
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ПользовательСсылка) Тогда
		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					ПользовательСсылка, "Недействителен") Тогда
				Результат = Истина;				
			КонецЕсли;							
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ПользователиГруппы.ПолучитьЭлементы(), "Пользователь");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ЗначенияДоступа, "ЗначениеДоступа");
	
КонецПроцедуры


