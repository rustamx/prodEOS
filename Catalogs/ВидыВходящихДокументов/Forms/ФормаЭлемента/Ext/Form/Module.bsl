#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВестиУчетОбращенийГраждан = ПолучитьФункциональнуюОпцию("ВестиУчетОбращенийГраждан");
	ЕстьПравоНаСозданиеШаблона = ПравоДоступа("Добавление", Метаданные.Справочники.ШаблоныВходящихДокументов);
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		ЗаполнитьСписокШаблоновВида();
	КонецЕсли;
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");		
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда //Копирование
		ТаблНастройкиНумерации = Нумерация.ПрочитатьНастройкиНумерацииВидаДокумента(Параметры.ЗначениеКопирования);
		ЗначениеВРеквизитФормы(ТаблНастройкиНумерации, "НастройкиНумерации");
	ИначеЕсли Объект.Ссылка.Пустая() Тогда 
		НоваяСтрока = НастройкиНумерации.Добавить();
		НоваяСтрока.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		НоваяСтрока.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
		НоваяСтрока.Нумеровать = Нумерация.СформироватьПолеНумеровать(НоваяСтрока.СпособНумерации, НоваяСтрока.Нумератор);
	Иначе
		ТаблНастройкиНумерации = Нумерация.ПрочитатьНастройкиНумерацииВидаДокумента(Объект.Ссылка);
		ЗначениеВРеквизитФормы(ТаблНастройкиНумерации, "НастройкиНумерации");
	КонецЕсли;
	
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	
	Элементы.НастройкиНумерацииОрганизация.Видимость = ИспользоватьУчетПоОрганизациям;	
	
	Элементы.ГруппаЭтапы.Видимость = Объект.ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьНастройкиЭтапов(ЭтаФорма);
	
	ОбязательноеУказаниеОтветственногоНачальноеЗначение = Объект.ОбязательноеУказаниеОтветственного;
	
	// Видимость команды "Политики доступа".
	Если Элементы.Найти("ФормаПолитикиДоступа") <> Неопределено Тогда
		ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа(Ложь);
		Если ОтключенныеРазрезы.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов) <> Неопределено Тогда
			Элементы.ФормаПолитикиДоступа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьЗаголовокЗакладкиНумерация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанШаблонДокумента" И Параметр.ВидДокумента = Объект.Ссылка Тогда 
		ЗаполнитьСписокШаблоновВида();
		
		Если МногоШаблонов Тогда 
			СтрокаИдентификатор = Неопределено;
			Для Каждого Строка Из ШаблоныВида Цикл
				Если Строка.Шаблон = Параметр.Шаблон Тогда 
					СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентификатор = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Элементы.ШаблоныВида.ТекущаяСтрока = СтрокаИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ИспользоватьЭтапыОбработкиДокумента Тогда 
		Делопроизводство.ПрочитатьНастройкиЭтапов(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьСписокШаблоновВида(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не МногоШаблонов Тогда 
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ШаблонДокумента.РабочаяГруппаДокумента, "Участник");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(РабочаяГруппаТаблица, "Участник");
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если Не ОбязательноеУказаниеОтветственногоНачальноеЗначение 
		И Объект.ОбязательноеУказаниеОтветственного
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Не ПоказанВопросПроОбязательноеУказаниеОтветственного Тогда 
		
		ЧислоДокументовБезОтветственного = ПолучитьЧислоДокументовБезОтветственного(Объект.Ссылка);
		Если ЧислоДокументовБезОтветственного <> 0 Тогда
			НужноПоказатьДиалогОбязательноеУказаниеОтветственного = Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если НужноВключитьУчетПоНоменклатуреДел() И Не ПараметрыЗаписи.Свойство("ВключенУчетПоНоменклатуреДел") 
		И Не ПоказанВопросПроВключениеНоменклатуры Тогда 
		
		ПоказанВопросПроВключениеНоменклатуры = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ТекстВопроса = НСтр("ru = 'Указанный нумератор использует индекс номенклатуры дел.
							|Включить учет по номенклатуре дел?';
							|en = 'The numerator specified uses index of case files.
							|Enable accounting for case files?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если НужноПоказатьДиалогОбязательноеУказаниеОтветственного Тогда 
		ПоказатьДиалогОбязательноеУказаниеОтветственного(Отказ, ПараметрыЗаписи);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОбязательноеУказаниеОтветственного(Отказ, ПараметрыЗаписи)
	
	НужноПоказатьДиалогОбязательноеУказаниеОтветственного = Ложь;
	ПоказанВопросПроОбязательноеУказаниеОтветственного = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаОбязательноеУказаниеОтветственного",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Включено обязательное указание ответственного за документ. 
		|У некоторых документов вида ""%1"" ответственный не указан (%2 шт).
		|Заполнить ответственного из реквизита ""Зарегистрировал""?';
		|en = 'Specifying the responsible for the document of this type is made mandatory. 
		|Some documents of type ""%1"" have no responsible users specified (%2 pcs).
		|Fill in the responsible from field ""Registered by""?'"),
		Строка(Объект.Ссылка), Строка(ЧислоДокументовБезОтветственного));
		
	Кнопки = Новый СписокЗначений;	
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'; en = 'Fill'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не заполнять'; en = 'Do not fill'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
	Отказ = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОбязательноеУказаниеОтветственного(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да И Результат <> КодВозвратаДиалога.Нет Тогда 
		ПоказанВопросПроОбязательноеУказаниеОтветственного = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьОтветственногоАвтоматически = Истина;
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ВестиУчетПоНоменклатуреДел = Истина;
	ПараметрыЗаписи.Вставить("ВключенУчетПоНоменклатуреДел", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		ПослеЗаписиКлиент(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не МногоШаблонов 
		И ((ПараметрыЗаписи.Свойство("ЗаписатьШаблон") И ПараметрыЗаписи.ЗаписатьШаблон)
		Или (ШаблонДокумента.Ссылка.Пустая() И ЕстьЗаполненныеРеквизитыШаблона())
		Или (Не ШаблонДокумента.Ссылка.Пустая() И ШаблонИзменен())) Тогда 
		
		ШаблонДокумента.ЗаполнениеНаименованияПоШаблону = Ложь;
		Если ЗначениеЗаполнено(ШаблонДокумента.Заголовок) Тогда 
			ОписаниеОшибки = "";
			МассивРеквизитов = Новый Массив;
			
			ДелопроизводствоКлиентСервер.ПолучитьПоляШаблонаНаименования(
				ШаблонДокумента.Заголовок, МассивРеквизитов, ОписаниеОшибки);
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОписаниеОшибки,,
					"ШаблонДокумента.Заголовок",,
					Отказ);
				Возврат;
			КонецЕсли;
			
			Если МассивРеквизитов.Количество() > 0 Тогда 
				Делопроизводство.ПоляШаблонаНаименованияНайдены(
					МассивРеквизитов, ТекущийОбъект.Ссылка, ОписаниеОшибки);
				
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОписаниеОшибки,,
					"ШаблонДокумента.Заголовок",,
					Отказ);
					Возврат;
				КонецЕсли;
				
				ШаблонДокумента.ЗаполнениеНаименованияПоШаблону = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Рабочая группа
		РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
		Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
			Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
			Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
				РабочаяГруппаТаблица.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;
		
		НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
		РабочаяГруппаДобавить = Новый Массив;
		РабочаяГруппаУдалить = Новый Массив;
		
		// Формирование списка удаленных участников рабочей группы
		Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник 
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаУдалить.Добавить(
					Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;	
		
		// Формирование списка добавленных участников рабочей группы
		Для каждого Эл Из НоваяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник 
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаДобавить.Добавить(
					Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;
		
		ШаблонДокумента.ДополнительныеРеквизиты.Очистить();
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл 
			Если ЗначениеЗаполнено(ДопРеквизит.Значение) Тогда 
				НовСтрока = ШаблонДокумента.ДополнительныеРеквизиты.Добавить();
				НовСтрока.Свойство = ДопРеквизит.Свойство;
				НовСтрока.Значение = ДопРеквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонДокумента.ВидДокумента = ТекущийОбъект.Ссылка;
		ШаблонДокумента.Наименование = ТекущийОбъект.Наименование;
		ШаблонДокумента.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		ШаблонДокумента.КомментарийКШаблону = ТекущийОбъект.Комментарий;
		
		ШаблонСсылка = РеквизитФормыВЗначение("ШаблонДокумента");
		ШаблонСсылка.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
		ШаблонСсылка.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
		// Обработка рабочей группы
		РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ШаблонСсылка, ПараметрыЗаписи);
		
		ШаблонСсылка.Записать();
		
		ИсходнаяРабочаяГруппа.Загрузить(НоваяРабочаяГруппа);
		ЗаполнитьСписокШаблоновВида(ТекущийОбъект.Ссылка);
		
		// Категории данных
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
			Для Каждого Категория Из ШаблонДокумента.Категории Цикл
				Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		Иначе
			Элементы.СтраницаКатегории.Видимость = Ложь;
		КонецЕсли;
		
		// Рабочая группа
		РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
		ОбновитьВидимостьРеквизитов(ЭтаФорма);
		КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
		
	КонецЕсли;
	
	Нумерация.ЗаписатьНастройкиНумерацииВидаДокумента(ТекущийОбъект.Ссылка, НастройкиНумерации);
	
	Делопроизводство.ЗаписатьНастройкиЭтапов(ЭтаФорма, ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	Если ЗаполнитьОтветственногоАвтоматически Тогда
		ЗаполнитьОтветственногоАвтоматически = Ложь;
		ВыполнитьЗаполнениеОтветственного(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если Не ЗначениеЗаполнено(Строка.Нумеровать) Тогда 
			НомерСтроки = НастройкиНумерации.Индекс(Строка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Нумеровать""'; en = 'Field ""Numeration"" is not filled'"),,"НастройкиНумерации["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Нумеровать",,Отказ);
		КонецЕсли;
	КонецЦикла;	
	
	//Проверка табличной части Настройки нумерации на задвоения
	КоличествоНастроек = НастройкиНумерации.Количество();	
	Если КоличествоНастроек > 1 Тогда	
		Для Инд1 = 0 По КоличествоНастроек - 2 Цикл 			
			Для Инд2 = Инд1 + 1 По КоличествоНастроек - 1 Цикл 			
				Если НастройкиНумерации[Инд1].Организация = НастройкиНумерации[Инд2].Организация 
					И НастройкиНумерации[Инд1].Контрагент = НастройкиНумерации[Инд2].Контрагент 
					И НастройкиНумерации[Инд1].Подразделение = НастройкиНумерации[Инд2].Подразделение
					И НастройкиНумерации[Инд1].Проект = НастройкиНумерации[Инд2].Проект
					И НастройкиНумерации[Инд1].ВопросДеятельности = НастройкиНумерации[Инд2].ВопросДеятельности Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Для указанных полей ""Действует для"" уже задана настройка нумерации'; en = 'For the fields specified in ""Effective for"" numeration settings are already set'"),,
						"НастройкиНумерации["+ Формат(Инд2, "ЧН=0; ЧГ=0") +"].Нумеровать",, Отказ);
				КонецЕсли;				
	        КонецЦикла;			
		КонецЦикла;	
	КонецЕсли;

	Делопроизводство.ОбработкаПроверкиЗаполненияНастройкиЭтапов(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьЭтапыОбработкиДокументаПриИзменении(Элемент)
	
	Элементы.ГруппаЭтапы.Видимость = Объект.ИспользоватьЭтапыОбработкиДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексНумерацииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииПослеУдаления(Элемент)
	
	СформироватьЗаголовокЗакладкиНумерация();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		СформироватьЗаголовокЗакладкиНумерация();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНумерации.Автоматически"),
		НСтр("ru = 'Автоматически'; en = 'Automatically'"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНумерации.Вручную"),
		НСтр("ru = 'Вручную'; en = 'Manually'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НастройкиНумерацииНумероватьНачалоВыбораПослеВыбораТипаНумерации",
		ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбораПослеВыбораТипаНумерации(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	ТекущиеДанные.СпособНумерации = ВыбранныйЭлемент.Значение;
	
	Если ТекущиеДанные.СпособНумерации = ПредопределенноеЗначение("Перечисление.СпособыНумерации.Автоматически") Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НастройкиНумерацииНумероватьНачалоВыбораПродолжение",
			ЭтотОбъект);
		ПараметрыФормы =  Новый Структура("ТекущаяСтрока", ТекущиеДанные.Нумератор);
		ОткрытьФорму(
			"Справочник.Нумераторы.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	Иначе	
		ТекущиеДанные.Нумератор = Неопределено;
	КонецЕсли;	
	
	ТекущиеДанные.Нумеровать = Нумерация.СформироватьПолеНумеровать(ТекущиеДанные.СпособНумерации, ТекущиеДанные.Нумератор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбораПродолжение(ВыбранноеЗначение, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Модифицированность = ТекущиеДанные.Нумератор <> ВыбранноеЗначение;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ТекущиеДанные.Нумератор = ВыбранноеЗначение;
	Иначе	
		ТекущиеДанные.СпособНумерации = Неопределено;
	КонецЕсли;	
	ТекущиеДанные.Нумеровать = Нумерация.СформироватьПолеНумеровать(ТекущиеДанные.СпособНумерации, ТекущиеДанные.Нумератор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Нумератор) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.Нумератор);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, ШаблонДокумента.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбращенияПриИзменении(Элемент)
	
	Если ШаблонДокумента.ВидОбращения = ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное") Тогда 
		ШаблонДокумента.Отправитель = Неопределено;
		ШаблонДокумента.Подписал = Неопределено;
		Элементы.Отправитель.Доступность = Ложь;
		Элементы.Адресат.Доступность = Ложь;
	Иначе	
		Элементы.Отправитель.Доступность = Истина;
		Элементы.Адресат.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуВыбораЗначения(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцияПриИзменении(Элемент)
	
	ОбновитьВидимостьРеквизитов(ЭтаФорма);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			ШаблонДокумента.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.Ссылка);
	ПараметрыФормы.Вставить("Контрагент", 			ШаблонДокумента.Отправитель);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	ШаблонДокумента.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		ШаблонДокумента.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		ШаблонДокумента.Подразделение);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, ШаблонДокумента.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, ШаблонДокумента.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаШаблона = Элемент.ТекстРедактирования;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ШаблонНаименования", СтрокаШаблона);
	ПараметрыОткрытия.Вставить("Шаблон", ШаблонДокумента.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаголовокНачалоВыбораПродолжить", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ШаблонНаименованияДокумента", ПараметрыОткрытия,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбораПродолжить(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ШаблонДокумента.Заголовок = Результат;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с адресатом, контрагентом и контактным лицом

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ШаблонДокумента.Отправитель) Тогда 
		ШаблонДокумента.Подписал = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;                                                       
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ШаблонДокумента.Подписал) Тогда
		ПараметрыФормы.Вставить("Получатель", ШаблонДокумента.Подписал);
	Иначе	
		ПараметрыФормы.Вставить("Получатель", ШаблонДокумента.Отправитель);
	КонецЕсли;
	
	Если Объект.ЯвляетсяОбращениемОтГраждан И ВестиУчетОбращенийГраждан Тогда 
		ПараметрыФормы.Вставить("Режим", "ТолькоКонтрагенты");
	Иначе
		ПараметрыФормы.Вставить("Режим", "КонтрагентыКонтактныеЛица");
	КонецЕсли;

	ОткрытьФорму("ОбщаяФорма.ВыборКонтрагентаКонтактноеЛицо", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		ШаблонДокумента.Отправитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ВыбранноеЗначение, "Владелец");
		ШаблонДокумента.Подписал = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ШаблонДокумента.Отправитель = ВыбранноеЗначение;
		ШаблонДокумента.Подписал = Неопределено;

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ШаблонДокумента.Отправитель = ВыбранноеЗначение.Контрагент;
			ШаблонДокумента.Подписал = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			ШаблонДокумента.Отправитель = ВыбранноеЗначение.Контрагент;
			ШаблонДокумента.Подписал = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранноеЗначение = ШаблонДокумента.Отправитель;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ОтправительОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ШаблонДокумента.Адресат) Тогда 
		ШаблонДокумента.Подразделение = РаботаСПользователями.ПолучитьПодразделение(ШаблонДокумента.Адресат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, ШаблонДокумента.Адресат);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ШаблонДокумента И КоличествоШаблонов > 0 
		И ЕстьПравоНаСозданиеШаблона И Не Объект.Ссылка.Пустая() Тогда 
		Элементы.ГруппаШаблонВида.Видимость = Истина;
	Иначе 
		Элементы.ГруппаШаблонВида.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		ШаблонДокумента.Категории, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыЭтапыОбработкиДокументов

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
		ТекущиеДанные.Порядок = КоличествоЭтапов + 1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		Если Не ОтменаРедактирования Тогда 
			КоличествоЭтапов = КоличествоЭтапов + 1;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПослеУдаления(Элемент)
	
	Порядок = 1;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл 
		Строка.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	КоличествоЭтапов = ЭтапыОбработкиДокументов.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаДокумента

&НаКлиенте
Процедура РабочаяГруппаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(
		Элемент, // РабочаяГруппаЭлемент
		НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		ШаблонДокумента.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппыДляШаблоновДокументов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыШаблоныВида

&НаКлиенте
Процедура ШаблоныВидаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Шаблон);
		ОткрытьФорму("Справочник.ШаблоныВходящихДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.ШаблоныВида);
	Иначе 
		ОчиститьСообщения();
		ОткрытьФорму("Справочник.ШаблоныВходящихДокументов.ФормаОбъекта", ПараметрыФормы,
			Элементы.ШаблоныВида);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Шаблон) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ШаблоныВидаПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("Шаблон", ТекущиеДанные.Шаблон));

	ПоказатьВопрос(ОписаниеОповещения, 
		СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"), ТекущиеДанные.Шаблон), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УдалитьШаблонДокумента(Параметры.Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШаблонДокумента(Шаблон)
	
	Делопроизводство.ПометитьШаблонНаУдаление(Шаблон, Истина);
	ЗаполнитьСписокШаблоновВида();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНаборСвойств(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьНаборСвойствПродолжение",
		ЭтотОбъект);

	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для перехода к набору свойств элемент необходимо записать.'; en = 'Write element to go to the set of properties'") + Символы.ПС + НСтр("ru = 'Записать?'; en = 'Save?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаборСвойствПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхРеквизитов");
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("Набор", Объект.НаборСвойств);
	ПараметрыПерехода.Вставить("Свойство", Неопределено);
	ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВверх(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Порядок = 1 Тогда 
		Возврат;
	КонецЕсли;	
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
		Если Строка.Порядок = ТекущиеДанные.Порядок - 1 Тогда 
			ПредыдущаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	ИндексПредыдущаяСтрока = ПредыдущаяСтрока.ПолучитьИдентификатор();
	
	ИменаКолонок = "Наименование, Этап, Срок";
	ДанныеСтроки = Новый Структура(ИменаКолонок);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ПредыдущаяСтрока, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, ТекущиеДанные, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки, ИменаКолонок);
	
	Элементы.ЭтапыОбработкиДокументов.ТекущаяСтрока = ИндексПредыдущаяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВниз(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Порядок = КоличествоЭтапов Тогда 
		Возврат;
	КонецЕсли;	
	
	СледующаяСтрока = Неопределено;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
		Если Строка.Порядок = ТекущиеДанные.Порядок + 1 Тогда 
			СледующаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	ИндексСледующаяСтрока = СледующаяСтрока.ПолучитьИдентификатор();
	
	ИменаКолонок = "Наименование, Этап, Срок";
	ДанныеСтроки = Новый Структура(ИменаКолонок);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СледующаяСтрока, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(СледующаяСтрока, ТекущиеДанные, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки, ИменаКолонок);
	
	Элементы.ЭтапыОбработкиДокументов.ТекущаяСтрока = ИндексСледующаяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппыДокумента(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппыДляШаблоновДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйШаблон(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	ОткрытьФорму("Справочник.ШаблоныВходящихДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.ШаблоныВида);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШаблон(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Если МногоШаблонов Тогда 
		ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШаблонДляКопирования = ТекущиеДанные.Шаблон;
		
	ИначеЕсли Не ШаблонДокумента.Ссылка.Пустая() Тогда 
		ШаблонДляКопирования = ШаблонДокумента.Ссылка;
		
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонДляКопирования);
	
	ОткрытьФорму("Справочник.ШаблоныВходящихДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.ШаблоныВида);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьШаблонНаУдаление(Команда)
	
	Если МногоШаблонов Тогда 
		ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШаблонДляУдаления = ТекущиеДанные.Шаблон;
		ИмяШаблона = ТекущиеДанные.Шаблон;
	ИначеЕсли Не ШаблонДокумента.Ссылка.Пустая() Тогда 
		ШаблонДляУдаления = ШаблонДокумента.Ссылка;
		ИмяШаблона = ШаблонДокумента.Наименование;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ШаблоныВидаПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("Шаблон", ШаблонДляУдаления));
	
	ПоказатьВопрос(ОписаниеОповещения, 
		СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"), ИмяШаблона), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		ШаблонДокумента.Категории, ОписаниеОповещения); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НужноВключитьУчетПоНоменклатуреДел()
	
	ЕстьИндексНомДел = Ложь;
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если ЗначениеЗаполнено(Строка.Нумератор) И Найти(Строка.Нумератор.ФорматНомера, "ИндексНомДел") > 0 Тогда 
			ЕстьИндексНомДел = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЕстьИндексНомДел
		И Не Объект.ВестиУчетПоНоменклатуреДел;	
		
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокЗакладкиНумерация()
	
	КоличествоНастроекНумерации = НастройкиНумерации.Количество();
	
КонецПроцедуры		

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение")
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗаписиКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
		
		ПоказатьПредупреждение(
			ОписаниеОповещения,
			НСтр("ru = 'Документы с данным видом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'; en = 'Documents of this type will be unregistrable because there are no suitable numeration settings.'"));
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ЗакрытьПослеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиентПродолжение(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЧислоДокументовБезОтветственного(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВходящиеДокументы.Ссылка), 0) КАК ЧислоДокументов
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ВидДокумента = &ВидДокумента
		|	И ВходящиеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ЧислоДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьЗаполнениеОтветственного(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка,
		|	ВходящиеДокументы.Зарегистрировал
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ВидДокумента = &ВидДокумента
		|	И ВходящиеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВходящиеДокументы.Зарегистрировал <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Ответственный = Выборка.Зарегистрировал;
			
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение Ответственного в документах.Ошибка'; en = 'Filling Responsible in documents.Error'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакрытьПослеЗаписи()

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'; en = 'Changed:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ШаблонИзменен()
	
	Если ШаблонДокумента.Адресат <> ШаблонДокументаПриОткрытии.Адресат
		Или ШаблонДокумента.ВопросДеятельности <> ШаблонДокументаПриОткрытии.ВопросДеятельности
		Или ШаблонДокумента.ГрифДоступа <> ШаблонДокументаПриОткрытии.ГрифДоступа
		Или ШаблонДокумента.ДлительностьИсполнения <> ШаблонДокументаПриОткрытии.ДлительностьИсполнения
		Или ШаблонДокумента.КомментарийКДокументу <> ШаблонДокументаПриОткрытии.КомментарийКДокументу
		Или ШаблонДокумента.КомментарийКШаблону <> ШаблонДокументаПриОткрытии.КомментарийКШаблону
		Или ШаблонДокумента.ВидОбращения <> ШаблонДокументаПриОткрытии.ВидОбращения
		Или ШаблонДокумента.Отправитель <> ШаблонДокументаПриОткрытии.Отправитель
		Или ШаблонДокумента.Подписал <> ШаблонДокументаПриОткрытии.Подписал
		Или ШаблонДокумента.НоменклатураДел <> ШаблонДокументаПриОткрытии.НоменклатураДел
		Или ШаблонДокумента.Организация <> ШаблонДокументаПриОткрытии.Организация
		Или ШаблонДокумента.Ответственный <> ШаблонДокументаПриОткрытии.Ответственный
		Или ШаблонДокумента.Подразделение <> ШаблонДокументаПриОткрытии.Подразделение
		Или ШаблонДокумента.Содержание <> ШаблонДокументаПриОткрытии.Содержание
		Или ШаблонДокумента.Проект <> ШаблонДокументаПриОткрытии.Проект
		Или ШаблонДокумента.Заголовок <> ШаблонДокументаПриОткрытии.Заголовок
		Или ШаблонДокумента.ЗапретитьИзменятьРеквизитыИзШаблона <> ШаблонДокументаПриОткрытии.ЗапретитьИзменятьРеквизитыИзШаблона
		Или ШаблонДокумента.СпособПолучения <> ШаблонДокументаПриОткрытии.СпособПолучения
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ИсходнаяРабочаяГруппа, 
			РабочаяГруппаТаблица,
			"Участник, Изменение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.РабочаяГруппаДокумента, 
			ШаблонДокумента.РабочаяГруппаДокумента,
			"Участник, Изменение") 
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Категории, 
			ШаблонДокумента.Категории,
			"Значение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ДополнительныеРеквизитыПриОткрытии, 
			ДополнительныеРеквизиты,
			"Свойство, Значение") Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеРеквизитыШаблона()
	
	Если ЗначениеЗаполнено(ШаблонДокумента.Адресат)
		Или ЗначениеЗаполнено(ШаблонДокумента.ВопросДеятельности)
		Или ЗначениеЗаполнено(ШаблонДокумента.ГрифДоступа)
		Или ЗначениеЗаполнено(ШаблонДокумента.Заголовок)
		Или ЗначениеЗаполнено(ШаблонДокумента.ДлительностьИсполнения)
		Или ЗначениеЗаполнено(ШаблонДокумента.КомментарийКДокументу)
		Или ЗначениеЗаполнено(ШаблонДокумента.КомментарийКШаблону)
		Или ЗначениеЗаполнено(ШаблонДокумента.Отправитель)
		Или ЗначениеЗаполнено(ШаблонДокумента.Подписал)
		Или ЗначениеЗаполнено(ШаблонДокумента.Проект)
		Или ЗначениеЗаполнено(ШаблонДокумента.НоменклатураДел)
		Или ЗначениеЗаполнено(ШаблонДокумента.Организация)
		Или ЗначениеЗаполнено(ШаблонДокумента.Ответственный)
		Или ЗначениеЗаполнено(ШаблонДокумента.ВидОбращения)
		Или ЗначениеЗаполнено(ШаблонДокумента.Подразделение)
		Или ЗначениеЗаполнено(ШаблонДокумента.Содержание)
		Или ЗначениеЗаполнено(ШаблонДокумента.СпособПолучения)
		Или ШаблонДокумента.РабочаяГруппаДокумента.Количество() > 0 
		Или ШаблонДокумента.Категории.Количество() > 0
		Или РабочаяГруппаТаблица.Количество() > 0 Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокШаблоновВида(ВидДокумента = Неопределено)
	
	Элементы.ШаблонДокумента.Заголовок = НСтр("ru = 'Шаблон документа'; en = 'Document template'");
	МногоШаблонов = Ложь;
	Элементы.ГруппаШаблонВида.Видимость = Ложь;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ВходящиеДокументы) Тогда
		Элементы.ШаблонДокумента.Видимость = Ложь;
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Возврат;
	КонецЕсли;
	
	Если ВидДокумента = Неопределено Тогда 
		ВидДокумента = Объект.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	ШаблоныВходящихДокументов.Ссылка
		 |ИЗ
		 |	Справочник.ШаблоныВходящихДокументов КАК ШаблоныВходящихДокументов
		 |ГДЕ
		 |	ШаблоныВходящихДокументов.ВидДокумента = &ВидДокумента
		 |	И НЕ ШаблоныВходящихДокументов.ПометкаУдаления";
		 
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоШаблонов = Выборка.Количество();
	
	Элементы.ФормаСкопироватьШаблон.Доступность = Истина;
	Элементы.ПометитьШаблонНаУдаление.Доступность = Истина;
	
	Если КоличествоШаблонов = 0 Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		НовыйШаблон = Справочники.ШаблоныВходящихДокументов.СоздатьЭлемент();
		
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокумента");
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокументаПриОткрытии");
		Элементы.Страницы.Видимость = Истина;
		Элементы.ГруппаМногоШаблонов.Видимость = Ложь;
		УстановитьПривилегированныйРежим(Ложь);
		Элементы.ФормаСкопироватьШаблон.Доступность = Ложь;
		Элементы.ПометитьШаблонНаУдаление.Доступность = Ложь;
		
	ИначеЕсли КоличествоШаблонов = 1 Тогда 
		Выборка.Следующий();
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ШаблонДокумента");
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ШаблонДокументаПриОткрытии");
		Элементы.Страницы.Видимость = Истина;
		Элементы.ГруппаМногоШаблонов.Видимость = Ложь;
		
		Если Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.ШаблонДокумента 
			И ЕстьПравоНаСозданиеШаблона И Не ВидДокумента.Ссылка.Пустая() Тогда 
			Элементы.ГруппаШаблонВида.Видимость = Истина;
		КонецЕсли;
		
	Иначе 
		ШаблоныВида.Очистить();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ШаблоныВида.Добавить();
			НоваяСтрока.Шаблон = Выборка.Ссылка;
		КонецЦикла;
		
		Элементы.ГруппаМногоШаблонов.Видимость = Истина;
		Элементы.Страницы.Видимость = Ложь;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НовыйШаблон = Справочники.ШаблоныВходящихДокументов.СоздатьЭлемент();
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокумента");
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокументаПриОткрытии");
		
		Элементы.ШаблонДокумента.Заголовок = НСтр("ru = 'Шаблоны документа'; en = 'Document templates'");
		МногоШаблонов = Истина;
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.ШаблонДокумента 
			И ЕстьПравоНаСозданиеШаблона И Не ВидДокумента.Ссылка.Пустая() Тогда 
			Элементы.ГруппаШаблонВида.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ШаблоныВида.ИзменятьСоставСтрок = ЕстьПравоНаСозданиеШаблона;
	КонецЕсли;
	
	Если Не МногоШаблонов Тогда 
		// Рабочие группы
		РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
		РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
		РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
		
		// Формирование исходной рабочей группы
		ИсходнаяРабочаяГруппа.Очистить();
		Для каждого Эл Из РабочаяГруппаТаблица Цикл
			Строка = ИсходнаяРабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник; 
			Строка.Изменение = Эл.Изменение;
		КонецЦикла;
		
		// Категории данных
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
			Для Каждого Категория Из ШаблонДокумента.Категории Цикл
				Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		Иначе
			Элементы.СтраницаКатегории.Видимость = Ложь;
		КонецЕсли;
		
		// Доп. реквизиты
		СписокДопРеквизитов = РаботаСШаблонамиДокументовСервер.ПолучитьНаборДопРеквизитовДокумента(
			"ВходящиеДокументы", ВидДокумента, ШаблонДокумента);
		РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(ДополнительныеРеквизиты, СписокДопРеквизитов);
		РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(
			ДополнительныеРеквизитыПриОткрытии, СписокДопРеквизитов);
		КоличествоСвойств = СписокДопРеквизитов.Количество();
		
		Если КоличествоСвойств > 0 Тогда
			Элементы.ДопРеквизиты.Видимость = Истина;
		Иначе 
			Элементы.ДопРеквизиты.Видимость = Ложь;
		КонецЕсли;
		
		Если Не ИспользоватьУчетПоОрганизациям Тогда
			НазваниеОрганизации = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию());
			Элементы.ДекорацияОрганизация.Видимость = Истина;
			Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
		Иначе	
			Элементы.ДекорацияОрганизация.Видимость = Ложь;
		КонецЕсли;	
		
		ОбновитьВидимостьРеквизитов(ЭтаФорма);
		
		Для Каждого Строка Из ШаблонДокумента.РабочаяГруппаДокумента Цикл
			Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Строка.Иконка = 1;
				Строка.ЭтоРоль = Истина;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				Строка.Иконка = 2;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Строка.Иконка = 2;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
				Строка.Иконка = 3;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("Строка") Тогда
				Строка.Иконка = 4;
			КонецЕсли;	
		КонецЦикла;
		
		Если КоличествоУчастниковРабочейГруппы > 0 Тогда 
			ЗаголовокРабочейГруппы = СтрШаблон(НСтр("ru = 'Доступен (%1)'; en = 'Available (%1)'"), 
				КоличествоУчастниковРабочейГруппы);
			Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
		Иначе 
			ЗаголовокРабочейГруппы = НСтр("ru = 'Доступен всем'; en = 'Available to everyone'");
			Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		КонецЕсли;
		
		Если НЕ ШаблонДокумента.Ссылка.Пустая()
			И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ШаблонДокумента.Ссылка).Изменение Тогда
			
			Элементы.ШаблонДокумента.ТолькоПросмотр = Истина;
			Элементы.ПодобратьУчастниковРабочейГруппы.Доступность = Ложь;
			Элементы.ПодобратьУчастниковРабочейГруппыДокумента.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьРеквизитов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ШаблонДокумента = Форма.ШаблонДокумента;
	
	Элементы.ЕдиницыИзмерения.Видимость = Объект.ИспользоватьСрокИсполнения;
	Элементы.ДекорацияСрока.Видимость = Объект.ИспользоватьСрокИсполнения;
	Элементы.ДлительностьИсполнения.Видимость = Объект.ИспользоватьСрокИсполнения;
	
	Если Объект.ВестиУчетПоНоменклатуреДел Тогда
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаХранение.Видимость = Истина;
	Иначе
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаХранение.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ЯвляетсяОбращениемОтГраждан И Форма.ВестиУчетОбращенийГраждан Тогда  
		Элементы.ВидОбращения.Видимость = Истина;
		
		Если ШаблонДокумента.ВидОбращения = ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное") Тогда 
			Элементы.Отправитель.Доступность = Ложь;
			Элементы.Адресат.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.Отправитель.Доступность = Истина;
		Элементы.Адресат.Доступность = Истина;
		Элементы.ВидОбращения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
