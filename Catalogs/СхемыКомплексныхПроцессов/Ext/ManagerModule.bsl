
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает ошибки заполнения настроек элементов схемы.
//
// Параметры:
//  Схема - СправочникСсылка.СхемыКомплексныхПроцессов,
//          СправочникОбъект.СхемыКомплексныхПроцессов - ссылка или объект схемы.
//
// Возвращаемое значение:
//  Массив
//   * Строка
//
Функция ОшибкиЗаполненияНастроекЭлементовСхемы(Схема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОшибкиНастроек = Новый Массив;
	
	Если ТипЗнч(Схема) = Тип("СправочникСсылка.СхемыКомплексныхПроцессов") Тогда
		СхемаОбъект = Схема.ПолучитьОбъект();
	Иначе
		СхемаОбъект = Схема;
	КонецЕсли;
	
	ГрафическаяСхема = СхемаОбъект.Схема.Получить();
	
	// Найдем имена первых действия после старта.
	ИмяЭлементаСтарта = СхемаОбъект.ЭлементыСхемы.Найти(
		Перечисления.ТипыЭлементовСхемыКомплексногоПроцесса.Старт, "Тип").Имя;
	ИменаДействийПослеСтарта = Новый Массив;
	НайтиИменаПоследующихДействий(ИменаДействийПослеСтарта, ИмяЭлементаСтарта, СхемаОбъект);
	
	ОтложенныеДействияСразуПослеСтарта = Новый Массив;
	
	// Проверим наличие шаблонов в параметрах действий
	// и их заполнение.
	Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
		
		Если Не ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'У действия ""%1"" отсутствует настройка.'; en = 'Action ""%1"" has no settings.'"),
				ПараметрыДействия.Наименование);
			ОшибкиНастроек.Добавить(ОписаниеОшибки);
			
		Иначе
			
			ОбъектШаблона = ПараметрыДействия.ШаблонПроцесса.ПолучитьОбъект();
			МассивПолейСОшибками = ОбъектШаблона.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолейСОшибками.Количество() > 0 Тогда
				
				Если ТипЗнч(ПараметрыДействия.ШаблонПроцесса) = 
					Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
					
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Есть ошибки в настройках вложенного комплексного процесса ""%1"".'; en = 'There are errors in configuration of ""%1"" nested composite process.'"),
						ОбъектШаблона.Наименование);
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'У действия ""%1"" есть ошибки в заполнении полей:
							|%2.';
							|en = 'There are errors action ""%1"" in fields:
							|%2.'"),
						ОбъектШаблона.Наименование,
						СтрСоединить(МассивПолейСОшибками, " ,"));
				КонецЕсли;
				
				ОшибкиНастроек.Добавить(ОписаниеОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектШаблона.СрокОтложенногоСтарта)
				И ИменаДействийПослеСтарта.Найти(ПараметрыДействия.Имя) <> Неопределено Тогда
				
				ОтложенныеДействияСразуПослеСтарта.Добавить(ПараметрыДействия.ШаблонПроцесса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем настройки отложенного старта у первых действий (если они есть).
	// Если все действий с отложенным стартом, то выдаем ошибку.
	Если СхемаОбъект.ПараметрыДействий.Количество() > 0
		И ОтложенныеДействияСразуПослеСтарта.Количество()
			= ИменаДействийПослеСтарта.Количество() Тогда
		
		ОписаниеОшибки =
			НСтр("ru = 'После старта должно быть хотя бы одно действие без настройки отложенного старта.'; en = 'After the start there should be at least one action without deferred start settings.'");
		ОшибкиНастроек.Добавить(ОписаниеОшибки);
	КонецЕсли;
	
	// Проверим заполнения условий.
	Для Каждого ПараметрыУсловия Из СхемаОбъект.ПараметрыУсловий Цикл
		
		НастройкаУсловия = ПараметрыУсловия.НастройкиУсловия.Получить();
		Если НастройкаУсловия = Неопределено
			Или НастройкаУсловия.Отбор.Элементы.Количество() = 0 Тогда
			
			ЭлементСхемы = ГрафическаяСхема.ЭлементыГрафическойСхемы.Найти(ПараметрыУсловия.Имя);
			НаименованиеУсловия = ЭлементСхемы.Наименование;
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не настроено условие ""%1"".'; en = 'Condition ""%1"" is not configured.'"),
				НаименованиеУсловия);
					
			ОшибкиНастроек.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем заполнение обработок.
	Для Каждого ПараметрыОбработки Из СхемаОбъект.ПараметрыОбработок Цикл
		
		Если ПараметрыОбработки.ИдентификаторСкрипта = УникальныйИдентификаторПустой() Тогда
			
			ЭлементСхемы = ГрафическаяСхема.ЭлементыГрафическойСхемы.Найти(ПараметрыОбработки.Имя);
			НаименованиеОбработки = ЭлементСхемы.Наименование;
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не определена обработка ""%1"".'; en = 'Processor ""%1"" is not defined.'"),
				НаименованиеОбработки);
			
			ОшибкиНастроек.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОшибкиНастроек;
	
КонецФункции

// Находит имена следующий действий после указанного элемента.
// Рекурсивная процедура.
//
// Параметры:
//  ИменаПоследующихДействий - Массив - в этот параметр помещается результат.
//  Элемент - Строка - имя элемента, после которого ищутся действия.
//  Схема - СправочникОбъект.СхемыКомплексныхПроцессов - объект схемы.
//
Процедура НайтиИменаПоследующихДействий(ИменаПоследующихДействий, Элемент, Схема) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПредшественника", Элемент);
	ПоследователиЭлемента = Схема.ПредшественникиЭлементовСхемы.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ПоследователиЭлемента Цикл
		ТипПоследователя = Схема.ЭлементыСхемы.Найти(СтрокаТаблицы.Имя, "Имя").Тип;
		
		Если ТипПоследователя = Перечисления.ТипыЭлементовСхемыКомплексногоПроцесса.Действие
			Или ТипПоследователя = Перечисления.ТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс Тогда
			
			ИменаПоследующихДействий.Добавить(СтрокаТаблицы.Имя);
		Иначе
			НайтиИменаПоследующихДействий(ИменаПоследующихДействий, СтрокаТаблицы.Имя, Схема);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает исполнителей действий схемы
//
// Параметры:
//  СхемаОбъекта - СправочникСсылка.СхемыКомплексныхПроцессов - ссылка на схему
//
Функция ИсполнителиДействий(СхемаОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИсполнителей = Новый Массив;
	
	ПараметрыДействий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СхемаОбъекта, "ПараметрыДействий").Выгрузить();
	
	Для Каждого ПараметрыДействия Из ПараметрыДействий Цикл
		
		Если Не ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонОбъект = ПараметрыДействия.ШаблонПроцесса.ПолучитьОбъект();
		ИсполнителиШаблона = ШаблонОбъект.ПолучитьИсполнителей();
		
		Для Каждого ИсполнительШаблона Из ИсполнителиШаблона Цикл
			МассивИсполнителей.Добавить(ИсполнительШаблона);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивИсполнителей;
	
КонецФункции

// Устанавливает заданную важность всем шаблонам процессов в текущей схеме.
//
// Параметры:
//  Схема - СправочникОбъект.СхемыКомплексныхПроцессов,
//          ДанныеФормыСтруктура - схема объект.
//  Важность - ПеречислениеСсылка.ВариантыВажностиЗадачи - заданная важность.
//
Процедура УстановитьВажностьШаблонамПроцессов(Схема, Важность) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПараметрыДействия Из Схема.ПараметрыДействий Цикл
		
		Если Не ЗначениеЗаполнено(ПараметрыДействия.ШаблонПроцесса) Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонОбъект = ПараметрыДействия.ШаблонПроцесса.ПолучитьОбъект();
		ШаблонОбъект.Важность = Важность;
		ШаблонОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры действий схемы.
//
// Параметры:
//  СправочникСсылка.СхемыКомплексныхПроцессов - ссылка на схему.
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки таблицы соответствуют табличной части ПараметрыДействий + колонка Пройден (булево).
//
Функция ПараметрыДействийСхемы(Схема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СхемыКомплексныхПроцессовПараметрыДействий.*,
		|	СхемыКомплексныхПроцессовЭлементыСхемы.Пройден
		|ИЗ
		|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов.ЭлементыСхемы КАК СхемыКомплексныхПроцессовЭлементыСхемы
		|		ПО СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = СхемыКомплексныхПроцессовЭлементыСхемы.Ссылка
		|			И СхемыКомплексныхПроцессовПараметрыДействий.Имя = СхемыКомплексныхПроцессовЭлементыСхемы.Имя
		|ГДЕ
		|	СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСортировки";
		
	Запрос.УстановитьПараметр("Ссылка", Схема);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет наличие действий в схеме.
//
// Параметры:
//  Схема - СправочникСсылка.СхемыКомплексныхПроцессов - ссылка на схему.
//
// Возвращаемое значение:
//  Булево - принимает значение Истина, если в схеме есть действия.
//
Функция ВСхемеЕстьДействия(Схема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СхемыКомплексныхПроцессовПараметрыДействий.НомерСтроки
		|ИЗ
		|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
		|ГДЕ
		|	СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = &Схема";
	Запрос.УстановитьПараметр("Схема", Схема);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("ВладелецСхемы");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Данные.ВладелецСхемы) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ОписаниеСхемы = НСтр("ru = 'Схема процесса'; en = 'Process diagram'");
	Иначе
		ОписаниеСхемы = НСтр("ru = 'Схема шаблона'; en = 'Template diagram'");
	КонецЕсли;
	
	Представление = СтрШаблон("%1: %2'", ОписаниеСхемы, Данные.ВладелецСхемы);
	
КонецПроцедуры

#КонецОбласти
