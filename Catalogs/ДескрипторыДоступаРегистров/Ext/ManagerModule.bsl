#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Представление = Данные.Ссылка.УникальныйИдентификатор();
	
КонецПроцедуры

// Создает новый дескриптор по указанной записи регистра, указанного через 
// идентификатор объекта метаданных
Функция СоздатьНовыйДескриптор(ИдентификаторОбъектаМетаданных, Запись) Экспорт

	Дескриптор = Справочники.ДескрипторыДоступаРегистров.СоздатьЭлемент();
	
	// Получение сведений о полях доступа
	Дескриптор.ОбъектМетаданных = ИдентификаторОбъектаМетаданных;
	Дескриптор.Регистр = ИдентификаторОбъектаМетаданных.ПолноеИмя;
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Дескриптор.Регистр);
	СведенияОПолях = Новый Структура(
		"ОбъектДоступа1, ОбъектДоступа2, ОбъектДоступа3", 
		Неопределено, Неопределено, Неопределено);
	МенеджерРегистра.ЗаполнитьСведенияОПоляхДоступа(СведенияОПолях);
	
	// Заполнение дескриптора
	Дескриптор.ОбъектДоступа1 = Запись[СведенияОПолях.ОбъектДоступа1];
	Если ЗначениеЗаполнено(СведенияОПолях.ОбъектДоступа2) Тогда
		Дескриптор.ОбъектДоступа2 = Запись[СведенияОПолях.ОбъектДоступа2];
	КонецЕсли;	
	Если ЗначениеЗаполнено(СведенияОПолях.ОбъектДоступа3) Тогда
		Дескриптор.ОбъектДоступа3 = Запись[СведенияОПолях.объектДоступа3];
	КонецЕсли;
	
	Возврат Дескриптор;

КонецФункции

// Находит дескриптор по переданному образцу
Функция НайтиДескрипторПоОбразцу(Дескриптор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.Регистр = &Регистр
		|	И ДескрипторыДоступаРегистров.ОбъектДоступа1 = &ОбъектДоступа1
		|	И ДескрипторыДоступаРегистров.ОбъектДоступа2 = &ОбъектДоступа2
		|	И ДескрипторыДоступаРегистров.ОбъектДоступа3 = &ОбъектДоступа3
		|	И ДескрипторыДоступаРегистров.ОбъектМетаданных = &ОбъектМетаданных";
		
	Запрос.УстановитьПараметр("ОбъектДоступа1", Дескриптор.ОбъектДоступа1);
	Запрос.УстановитьПараметр("ОбъектДоступа2", Дескриптор.ОбъектДоступа2);
	Запрос.УстановитьПараметр("ОбъектДоступа3", Дескриптор.ОбъектДоступа3);
	Запрос.УстановитьПараметр("Регистр", Дескриптор.Регистр);
	Запрос.УстановитьПараметр("ОбъектМетаданных", Дескриптор.ОбъектМетаданных);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Обновляет права по указанному дескпритору доступа
Процедура ОбновитьПрава(ДескрипторСсылка, ПротоколРасчетаПрав = Неопределено, Немедленно = Неопределено) Экспорт
	
	// Проверка на отложенное обновление прав доступа
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() 
		И Немедленно <> Истина Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(ДескрипторСсылка);
		Возврат;
		
	КонецЕсли;
	
	ИдРегистра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДескрипторСсылка, "ОбъектМетаданных");
	
	// Расчет прав запросом
	ДескрипторыКРасчету = Новый Массив;
	ДескрипторыКРасчету.Добавить(ДескрипторСсылка);
	РассчитатьПраваЗапросом(ДескрипторыКРасчету, ИдРегистра, ПротоколРасчетаПрав);
	
КонецПроцедуры

// Рассчитывает права для переданного массива дескрипторов
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать.
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам.
//  ЭтоИндивидуальныеДескрипторы - Булево.
//  ПротоколРасчетаПрав - Массив - протокол расчета, который будет показан пользователю.
//  
Процедура РассчитатьПраваЗапросом(Дескрипторы, ИдРегистра, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Дескрипторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Дескрипторы);
	
	ПолноеИмяМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИдРегистра, "ПолноеИмя");
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	
	ДескрипторыДляЗапроса = Дескрипторы;
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		// Параметр запроса не должен меняться, поэтому делаем копию
		ДескрипторыДляЗапроса = Новый Массив;
		Для Каждого Эл Из Дескрипторы Цикл
			ДескрипторыДляЗапроса.Добавить(Эл);
		КонецЦикла;
	КонецЕсли;
	
	ЗапросПоПравам = МенеджерРегистра.ЗапросДляРасчетаПрав(
		ДескрипторыДляЗапроса, ИдРегистра, МенеджерРегистра);
	
	ЗапросПоПравам.УстановитьПараметр("Дескрипторы", ДескрипторыДляЗапроса);
	ЗапросПоПравам.УстановитьПараметр("Идентификатор", ИдРегистра);
	
	Результат = ЗапросПоПравам.Выполнить();
	ВыборкаПоДескрипторам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		// Удаление обработанного дескриптора из массива
		Индекс = Дескрипторы.Найти(ВыборкаПоДескрипторам.Дескриптор);
		Если Индекс <> Неопределено Тогда
			Дескрипторы.Удалить(Индекс);
		КонецЕсли;
		
		// Права не менялись
		Если Не ВыборкаПоДескрипторам.ПраваИзменены Тогда
			Продолжить;
		КонецЕсли;
		
		// Запись новых прав
		НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дескриптор.Установить(ВыборкаПоДескрипторам.Дескриптор);
		
		Выборка = ВыборкаПоДескрипторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// Если дескриптор не попал в запрос, значит его права должны быть пустыми
	Для Каждого Дескриптор Из Дескрипторы Цикл
		НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дескриптор.Установить(Дескриптор);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		МенеджерРегистра.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет права дескрипторов в части руководителей и делегатов.
//
// Параметры:
//  Дескрипторы - Массив, Ссылка - дескрипторы, чьи права нужно обновить.
// 
Процедура ОбновитьПраваПоСоставуСубъектов(Дескрипторы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПраваПоДескрипторамДоступаРегистров.Дескриптор,
		|	ПраваПоДескрипторамДоступаРегистров.Пользователь,
		|	ПраваПоДескрипторамДоступаРегистров.Добавление,
		|	ПраваПоДескрипторамДоступаРегистров.Изменение,
		|	ПраваПоДескрипторамДоступаРегистров.Удаление,
		|	ПраваПоДескрипторамДоступаРегистров.УправлениеПравами,
		|	ПраваПоДескрипторамДоступаРегистров.Чтение
		|ПОМЕСТИТЬ НовыеПрава
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступаРегистров КАК ПраваПоДескрипторамДоступаРегистров
		|ГДЕ
		|	ПраваПоДескрипторамДоступаРегистров.Дескриптор В(&Дескрипторы)
		|	И ПраваПоДескрипторамДоступаРегистров.ОбъектОснование = НЕОПРЕДЕЛЕНО");
	
	ДокументооборотПраваДоступа.ДополнитьТекстЗапросаПоПравам(Запрос.Текст, Истина);
	Запрос.УстановитьПараметр("Дескрипторы", Дескрипторы);
	Результат = Запрос.Выполнить();
	ВыборкаПоДескрипторам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		// Права не менялись
		Если Не ВыборкаПоДескрипторам.ПраваИзменены Тогда
			Продолжить;
		КонецЕсли;
		
		// Запись новых прав
		НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дескриптор.Установить(ВыборкаПоДескрипторам.Дескриптор);
		
		Выборка = ВыборкаПоДескрипторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение - Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаРегистров.Регистр
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров");
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекстЗапроса = "";
	ТекстЗапросаПроверки = "";
	
	Пока Выборка.Следующий() Цикл
		
		ФрагментТекстаЗапроса = "";
		Если ТекстЗапроса <> "" Тогда
			ФрагментТекстаЗапроса = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Выборка.Регистр);
		СведенияОПолях = Новый Структура(
		"ОбъектДоступа1, ОбъектДоступа2, ОбъектДоступа3", 
		Неопределено, Неопределено, Неопределено);
		МенеджерРегистра.ЗаполнитьСведенияОПоляхДоступа(СведенияОПолях);
		
		ФрагментТекстаЗапроса = ФрагментТекстаЗапроса + "ВЫБРАТЬ ПЕРВЫЕ 100
			|	ДескрипторыДоступаРегистров.Ссылка КАК Дескриптор
			|ИЗ
			|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
			|		ЛЕВОЕ СОЕДИНЕНИЕ %Регистр КАК РегистрДанных
			|		ПО ДескрипторыДоступаРегистров.ОбъектДоступа1 = РегистрДанных.%ОбъектДоступа1";
			
		Если ЗначениеЗаполнено(СведенияОПолях.ОбъектДоступа2) Тогда
			ФрагментТекстаЗапроса = ФрагментТекстаЗапроса + "
				|			И ДескрипторыДоступаРегистров.ОбъектДоступа2 = РегистрДанных.%ОбъектДоступа2";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОПолях.ОбъектДоступа3) Тогда
			ФрагментТекстаЗапроса = ФрагментТекстаЗапроса + "
				|			И ДескрипторыДоступаРегистров.ОбъектДоступа3 = РегистрДанных.%ОбъектДоступа3";
		КонецЕсли;
		
		ТекстЗапросаПроверки = ТекстЗапросаПроверки + ФрагментТекстаЗапроса + "
			|ГДЕ
			|	ДескрипторыДоступаРегистров.Ссылка = &Дескриптор
			|	И НЕ РегистрДанных.%ОбъектДоступа1 ЕСТЬ NULL";
		
		ТекстЗапроса = ТекстЗапроса + ФрагментТекстаЗапроса + "
			|ГДЕ
			|	ДескрипторыДоступаРегистров.Регистр = %ИмяРегистра
			|	И РегистрДанных.%ОбъектДоступа1 ЕСТЬ NULL";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Регистр", Выборка.Регистр);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистра", """" + Выборка.Регистр + """");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОбъектДоступа1", СведенияОПолях.ОбъектДоступа1);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОбъектДоступа2", СведенияОПолях.ОбъектДоступа2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОбъектДоступа3", СведенияОПолях.ОбъектДоступа3);
			
		ТекстЗапросаПроверки = СтрЗаменить(ТекстЗапросаПроверки, "%Регистр", Выборка.Регистр);
		ТекстЗапросаПроверки = СтрЗаменить(ТекстЗапросаПроверки, "%ИмяРегистра", """" + Выборка.Регистр + """");
		ТекстЗапросаПроверки = СтрЗаменить(ТекстЗапросаПроверки, "%ОбъектДоступа1", СведенияОПолях.ОбъектДоступа1);
		ТекстЗапросаПроверки = СтрЗаменить(ТекстЗапросаПроверки, "%ОбъектДоступа2", СведенияОПолях.ОбъектДоступа2);
		ТекстЗапросаПроверки = СтрЗаменить(ТекстЗапросаПроверки, "%ОбъектДоступа3", СведенияОПолях.ОбъектДоступа3);
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗапросДляПроверкиСсылок = Новый Запрос(ТекстЗапросаПроверки);
	
	Результат = Запрос.Выполнить();
	ЕстьДанныеКУдалению = Не Результат.Пустой();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Дескриптор.ПолучитьОбъект();
		
		Попытка
			Объект.Заблокировать();
		Исключение
			// Объект может быть уже заблокирован
			Продолжить;
		КонецПопытки;
		
		// Удаление дескриптора
		НачатьТранзакцию();
		
		Объект.Удалить();
		ЗапросДляПроверкиСсылок.УстановитьПараметр("Дескриптор", Выборка.Дескриптор);
		РезультатЗапросаПроверки = ЗапросДляПроверкиСсылок.Выполнить();
		
		Если РезультатЗапросаПроверки.Пустой() Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление устаревших данных'; en = 'Deletion of outdated data'"),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ДескрипторыДоступаРегистров,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура завершена успешно, обработано %1 записей'; en = 'Procedure completed successfully, processed %1 records'"), Выборка.Количество()));
	
	Возврат ЕстьДанныеКУдалению;
	
КонецФункции

Процедура УдалитьВсеДескрипторыРегистра(Регистр) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.Регистр = &Регистр";

	Запрос.УстановитьПараметр("Регистр", Регистр);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Попытка
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Заблокировать();
			Объект.Удалить();	
		Исключение
			// Объект может быть уже заблокирован
		КонецПопытки;	
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли
