#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Неопределено;
	НастройкиКомбинацииУсловий = Неопределено;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Настройки = Объект.Ссылка.НастройкаУсловия.Получить();
		НастройкиКомбинацииУсловий = Объект.Ссылка.НастройкаКомбинацииУсловий.Получить();
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		Настройки = Параметры.ЗначениеКопирования.НастройкаУсловия.Получить();
		НастройкиКомбинацииУсловий = Параметры.ЗначениеКопирования.НастройкаКомбинацииУсловий.Получить();
	КонецЕсли;
	НастроитьКомпоновщикУсловия(Настройки);
	ЗаполнитьДеревоРеквизитовОбъекта();
	НастроитьКомпоновщикКомбинацииУсловий(НастройкиКомбинацииУсловий);
	
	// Настраиваем текущую страницу и заголовки элементов.
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + СтрЗаменить(Строка(Объект.СпособЗаданияУсловия), " ", "")];
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверка указания условий.
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий
		И КомпоновщикУсловий.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указано ни одного условия'; en = 'Not a single rule is specified'"),,"КомпоновщикУсловий.Настройки.Отбор",, Отказ);
	ИначеЕсли Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора
		И Компоновщик.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указано ни одного правила'; en = 'Not a single rule is specified'"),,"Компоновщик.Настройки.Отбор",, Отказ);
	ИначеЕсли Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке
		И Не ЗначениеЗаполнено(Объект.ВыражениеУсловия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не задано выражение'; en = 'Expression is not specified'"),,"Объект.ВыражениеУсловия",, Отказ);
	КонецЕсли;
	
	// Проверка заполнения всех значений в комбинаци условий.
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий
		И ПроверитьНаличиеУсловияВДереве(Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Заполнены не все значения в комбинации условий'; en = 'Not all values are filled in in combination of conditions'"),,"КомпоновщикУсловий.Настройки.Отбор",, Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверка корректиности заполнения правил.
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора
		И ПроверитьНаличиеПустыхСтрокОтбораВДереве() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Среди правил есть некорректно заполненные'; en = 'There are incorrectly filled rules'"),,"Компоновщик.Настройки.Отбор",, Отказ);
		Возврат;
	КонецЕсли;
	
	// Сохранение настроек.
	ТекущийОбъект.НастройкаУсловия = Новый ХранилищеЗначения(Компоновщик.ПолучитьНастройки());
	ТекущийОбъект.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(КомпоновщикУсловий.ПолучитьНастройки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СпособЗаданияУсловияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СпособЗаданияУсловия) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + СтрЗаменить(Строка(Объект.СпособЗаданияУсловия), " ", "")];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриИзменении(Элемент)
	
	ПроверитьВыражениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений")
			И ЭлементОтбора.ПравоеЗначение.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Пользователи"))) Тогда
		
		ПараметрыФормы = Новый Структура;
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
		Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
	    СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПравоеЗначениеНачалоВыбораПродолжение",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.РабочиеГруппы.ФормаВыбора", 
			ПараметрыФормы, 
			Элемент,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		СтандартнаяОбработка = Ложь;
		ИмяДопРеквизита = Строка(ЭлементОтбора.ЛевоеЗначение);
		ИмяДопРеквизита = Сред(ИмяДопРеквизита, Найти(ИмяДопРеквизита, "["));
		ИмяДопРеквизита = Сред(ИмяДопРеквизита, 2, СтрДлина(ИмяДопРеквизита) - 2);
		ВладелецЗначения = ПолучитьВладельцаЗначенияДопРеквизита(ИмяДопРеквизита);

		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ВладелецЗначения));
		ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.Форма.ФормаСписка", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРеквизитовОбъекта

&НаКлиенте
Процедура ДеревоРеквизитовОбъектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Объект.ВыражениеУсловия = Объект.ВыражениеУсловия + " " + Элемент.ТекущиеДанные.ПолныйПуть;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикУсловийНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикУсловийНастройкиОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	НовыйЭлементОтбора = КомпоновщикУсловий.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Результат_проверки_условия");
	НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикУсловийНастройкиОтборПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные.ЛевоеЗначение <> Неопределено Тогда
		ДобавленноеУсловие = Элемент.ТекущиеДанные.ПравоеЗначение;
		Результат = ПроверитьНаличиеУсловияВДереве(Ложь);
		Если Результат Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя добавить условие ""%1"". Произошло зацикливание условий.'; en = 'Unable to add condition ""%1"". Looping conditions found.'"),
				ДобавленноеУсловие);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			УдалитьУсловиеИзКомбинацииУсловий(ДобавленноеУсловие);
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьРеквизитИзДерева(Команда)
	
	Если Элементы.ДеревоРеквизитовОбъекта.ТекущиеДанные <> Неопределено Тогда
		Объект.ВыражениеУсловия = Объект.ВыражениеУсловия + " " + Элементы.ДеревоРеквизитовОбъекта.ТекущиеДанные.ПолныйПуть;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоРеквизитовОбъекта()
	
	Дерево = РеквизитФормыВЗначение("ДеревоРеквизитовОбъекта");
	
	Дерево.Строки.Очистить();
	
	ПолныйПуть = "Задача";
	НоваяСтрокаВладелецФайла = Дерево.Строки.Добавить();
	НоваяСтрокаВладелецФайла.НаименованиеРеквизита = "Задача";
	НоваяСтрокаВладелецФайла.ТипРеквизита = "ЗадачаИсполнителя";
	Элементы.ДеревоРеквизитовОбъекта.Заголовок = НСтр("ru = 'Реквизиты задачи'; en = 'Task details'");
	НоваяСтрокаВладелецФайла.ПолныйПуть = ПолныйПуть;
	
	СправочникОбъект = Метаданные.Задачи.ЗадачаИсполнителя;
	Для Каждого СтандартныйРеквизит Из СправочникОбъект.СтандартныеРеквизиты Цикл
		Строка = НоваяСтрокаВладелецФайла.Строки.Добавить();
		Строка.НаименованиеРеквизита = СтандартныйРеквизит.Имя;
		Строка.ТипРеквизита = СтандартныйРеквизит.Тип;
		Строка.ПолныйПуть = ПолныйПуть + "." + СтандартныйРеквизит.Имя;
	КонецЦикла;
	Для Каждого Реквизит Из СправочникОбъект.Реквизиты Цикл
		Строка = НоваяСтрокаВладелецФайла.Строки.Добавить();
		Строка.НаименованиеРеквизита = Реквизит.Имя;
		Строка.ТипРеквизита = Реквизит.Тип;
		Строка.ПолныйПуть = ПолныйПуть + "." + Реквизит.Имя;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из СправочникОбъект.ТабличныеЧасти Цикл
		СтрокаТабличнаяЧасть = НоваяСтрокаВладелецФайла.Строки.Добавить();
		СтрокаТабличнаяЧасть.НаименованиеРеквизита = ТабличнаяЧасть.Имя;
		СтрокаТабличнаяЧасть.ТипРеквизита = "Табличная часть";
		СтрокаТабличнаяЧасть.ПолныйПуть = ПолныйПуть + "." + ТабличнаяЧасть.Имя + "[0]";
		Для Каждого СтандартныйРеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			СтрокаРеквизитТЧ = СтрокаТабличнаяЧасть.Строки.Добавить();
			СтрокаРеквизитТЧ.НаименованиеРеквизита = СтандартныйРеквизитТЧ.Имя;
			СтрокаРеквизитТЧ.ТипРеквизита = СтандартныйРеквизитТЧ.Тип;
			СтрокаРеквизитТЧ.ПолныйПуть = ПолныйПуть + "." + ТабличнаяЧасть.Имя + "[0]" + "." + СтандартныйРеквизитТЧ.Имя; 
		КонецЦикла;
		Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
			СтрокаРеквизитТЧ = СтрокаТабличнаяЧасть.Строки.Добавить();
			СтрокаРеквизитТЧ.НаименованиеРеквизита = РеквизитТЧ.Имя;
			СтрокаРеквизитТЧ.ТипРеквизита = РеквизитТЧ.Тип;
			СтрокаРеквизитТЧ.ПолныйПуть = ПолныйПуть + "." + ТабличнаяЧасть.Имя + "[0]" + "." + РеквизитТЧ.Имя;
		КонецЦикла; 
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРеквизитовОбъекта");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомпоновщикУсловия(Настройки)
	
	СхемаКомпоновкиДанных = Справочники.УсловияЗадач.ПолучитьМакет("ЗадачаИсполнителя");
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	// Скрываем кнопку "Очистить" у колонки "Поле" в компоновщике отбора, который используется в режиме "Конструктор".
	Элементы.КомпоновщикНастройкиОтборЛевоеЗначение.КнопкаОчистки = Ложь;
	
	// Настройка действия при изменении вида сравнения.
	Элементы.КомпоновщикНастройкиОтборВидСравнения.УстановитьДействие("ПриИзменении", "ВидСравненияПриИзменении");
	
	// Настройка действия при начале изменения правого значения сравнения.
	Элементы.КомпоновщикНастройкиОтборПравоеЗначение.УстановитьДействие("НачалоВыбора", "ПравоеЗначениеНачалоВыбора");
	
	// Заголовки элементов.
	Элементы.КомпоновщикНастройкиОтборСгруппироватьЭлементыОтбора.Заголовок = НСтр("ru = 'Сгруппировать отборы'; en = 'Group filters'");
	Элементы.КомпоновщикНастройкиОтборКонтекстноеМенюСгруппироватьЭлементыОтбора.Заголовок = НСтр("ru = 'Сгруппировать отборы'; en = 'Group filters'");
	Элементы.КомпоновщикНастройкиОтборДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить отбор'; en = 'Add filter'");
	Элементы.КомпоновщикНастройкиОтборКонтекстноеМенюДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить отбор'; en = 'Add filter'");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомпоновщикКомбинацииУсловий(Настройки)
	
	СхемаКомпоновкиДанных = Справочники.УсловияЗадач.ПолучитьМакет("Условия");
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикУсловий.Инициализировать(ИсточникНастроек);
	КомпоновщикУсловий.ЗагрузитьНастройки(Настройки);
	
	// Скрываем поле сравнения - в него будет ставиться всегда "Равно".
	Элементы.КомпоновщикУсловийНастройкиОтборВидСравнения.Видимость = Ложь;
	
	// Делаем недоступным для редактирования поле "Левое значение"
	Элементы.КомпоновщикУсловийНастройкиОтборЛевоеЗначение.ТолькоПросмотр = Истина;
	Элементы.КомпоновщикУсловийНастройкиОтбор.Шапка = Ложь;
	
	// Заголовки элементов.
	Элементы.КомпоновщикУсловийНастройкиОтборДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить условие'; en = 'Add condition'");
	Элементы.КомпоновщикУсловийНастройкиОтборКонтекстноеМенюДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить условие'; en = 'Add condition'");
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеУсловияВДереве(ИщемПустоеЗначение)
	
	Результат = Ложь;
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		ЭлементыНастройкиОтбора = КомпоновщикУсловий.Настройки.Отбор.Элементы;
		ИскомоеУсловие = ?(ИщемПустоеЗначение, Неопределено, Объект.Ссылка);
		Результат = ВыполнитьПоискУсловияВОдномУровнеКомбинацииУсловий(ЭлементыНастройкиОтбора, ИскомоеУсловие);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПоискУсловияВОдномУровнеКомбинацииУсловий(Элементы, ИскомоеУсловие)
	
	Для Каждого ЭлементОтбора Из Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ВыполнитьПоискУсловияВОдномУровнеКомбинацииУсловий(ЭлементОтбора.Элементы, ИскомоеУсловие) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если (ЗначениеЗаполнено(ИскомоеУсловие) 
					И ЭлементОтбора.ПравоеЗначение = ИскомоеУсловие)
				Или (Не ЗначениеЗаполнено(ИскомоеУсловие)
					И Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)) Тогда
				Возврат Истина;
			ИначеЕсли  ЭлементОтбора.ПравоеЗначение <> Неопределено
				И ЭлементОтбора.ПравоеЗначение.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий
				И ВыполнитьПоискУсловияВОдномУровнеКомбинацииУсловий(
					ЭлементОтбора.ПравоеЗначение.НастройкаКомбинацииУсловий.Получить().Отбор.Элементы, ИскомоеУсловие) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеПустыхСтрокОтбораВДереве()
	
	Результат = Ложь;
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
		ЭлементыНастройкиОтбора = Компоновщик.Настройки.Отбор.Элементы;
		Результат = ВыполнитьПоискПустойСтрокиВОдномУровнеНастройкиОтбора(ЭлементыНастройкиОтбора);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПоискПустойСтрокиВОдномУровнеНастройкиОтбора(Элементы)
	
	Для Каждого ЭлементОтбора Из Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ВыполнитьПоискПустойСтрокиВОдномУровнеНастройкиОтбора(ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если (Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
					Или Не ЗначениеЗаполнено(Строка(ЭлементОтбора.ЛевоеЗначение)))
				И ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Заполнено
				И ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УдалитьУсловиеИзКомбинацииУсловий(ИмяУсловия)
	
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		ЭлементыНастройкиОтбора = КомпоновщикУсловий.Настройки.Отбор.Элементы;
		ВыполнитьПоискИУдалениеДляОдногоУровня(ЭлементыНастройкиОтбора, ИмяУсловия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискИУдалениеДляОдногоУровня(Элементы, ИмяУсловия)
	
	Для Каждого ЭлементОтбора Из Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда		
			ВыполнитьПоискИУдалениеДляОдногоУровня(ЭлементОтбора.Элементы, ИмяУсловия);
		ИначеЕсли ЭлементОтбора.ПравоеЗначение <> Неопределено Тогда
			СпособЗаданияУсловия = ЭлементОтбора.ПравоеЗначение.СпособЗаданияУсловия;
			Если ЭлементОтбора.ПравоеЗначение.Наименование = ИмяУсловия Тогда
				ЭлементОтбора.ПравоеЗначение = Справочники.УсловияЗадач.ПустаяСсылка();
			ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
				ВыполнитьПоискИУдалениеДляОдногоУровня(
					ЭлементОтбора.ПравоеЗначение.НастройкаКомбинацииУсловий.Получить().Отбор.Элементы, ИмяУсловия);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравоеЗначениеНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	ВыбранноеПравоеЗначение = Результат;
	
	ПодключитьОбработчикОжидания("УстановитьПравоеЗначениеЭлементаОтбора", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПравоеЗначениеЭлементаОтбора()
	
	ЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
		Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	ЭлементОтбора.ПравоеЗначение = ВыбранноеПравоеЗначение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаЗначенияДопРеквизита(ИмяДопРеквизита)
	
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита);	
	
КонецФункции

&НаСервере
Процедура ПроверитьВыражениеСервер()
	
	Результат = Неопределено;
	ИтогПроверки = "";
	
	Попытка
		Выполнить(Объект.ВыражениеУсловия);
	Исключение
		Результат = Ложь;
		Инфо = ИнформацияОбОшибке();
		
		Описание = "";
		Если ТипЗнч(Инфо.Причина) = Тип("ИнформацияОбОшибке") Тогда
			Описание = Инфо.Причина.Описание;
		Иначе
			Описание = Инфо.Описание;
		КонецЕсли;
		
		ИтогПроверки = НСтр("ru = 'Ошибка.'; en = 'Error.'") + Символы.ВК + Описание;
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		ИтогПроверки = НСтр("ru = 'Ошибка.
			|Переменной ""Результат"" необходимо присвоить значение типа ""Булево""';
			|en = 'Error. 
			|Value of type ""Boolean"" must be assigned to variable ""Result"".'");
		Возврат;
	КонецЕсли;
	
	ИтогПроверки = ?(Результат, НСтр("ru = 'Истина'; en = 'True'"), НСтр("ru = 'Ложь'; en = 'False'"));
	
КонецПроцедуры

#КонецОбласти
