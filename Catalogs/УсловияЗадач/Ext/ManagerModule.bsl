#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет произвольное условие эскалации по задаче.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - Задача.
//  Условие - СправочникСсылка.УсловияЗадач - Условие эскалации задач.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция Проверить(Задача, Условие) Экспорт
	
	Результат = Ложь;
	
	// Условия нет - возвращается Истина.
	Если Не ЗначениеЗаполнено(Условие) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СпособЗаданияУсловия = Условие.СпособЗаданияУсловия;
	Если СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
		Результат = ПроверитьУсловиеНаВстроенномЯзыке(Задача, Условие);
	ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
		Результат = ПроверитьУсловиеВРежимеКонструктора(
			Задача, 
			Условие.НастройкаУсловия.Получить(),
			"ЗадачаИсполнителя",
			Истина);
	ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		Настройки = Условие.НастройкаКомбинацииУсловий.Получить();
		ЗаполнитьКомбинациюПравил(Задача, Настройки.Отбор.Элементы);
		Результат = ПроверитьУсловиеВРежимеКонструктора(
			Задача, 
			Настройки,
			"Условия",
			Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет условие на встроенном языке по задаче.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - Задача.
//  Условие - СправочникСсылка.УсловияЗадач - Условие эскалации задач.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ПроверитьУсловиеНаВстроенномЯзыке(Задача, Условие)
	
	Результат = Истина;
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
		Выполнить(Условие.ВыражениеУсловия);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка условия маршрутизации'; en = 'Testing routing rule'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Условие.Метаданные(),
			Условие,
			ПодробноеПредставлениеОшибки(Инфо));
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При проверке условия маршрутизации ""%1"" возникла ошибка:
				|%2
				|Обратитесь к администратору.';
				|en = 'Error occured while testing routing rule ""%1"": 
				|%2 
				|Contact the administrator.'"),
			Условие.Наименование, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверяет условие в режиме конструктора по задаче.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - Задача.
//  Настройки - КомпноновщикНастроек - Настройки.
//  ИмяМакета - Строка - Имя макет.
//  ЕстьПараметры - Булево - Наличие параметров.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ПроверитьУсловиеВРежимеКонструктора(Задача, Настройки, ИмяМакета, ЕстьПараметры)
	
	СхемаКомпоновкиДанных = Справочники.УсловияЗадач.ПолучитьМакет(ИмяМакета);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если ЕстьПараметры Тогда
		ПараметрЗадача = Компоновщик.Настройки.ПараметрыДанных.Элементы[0];
		ПараметрЗадача.Значение = Задача;
		ПараметрЗадача.Использование = Истина;
	КонецЕсли;
	
	// Дополнительная обработка групп пользователей - разворачивание их в пользователей.
	РазвернутьГруппыВУсловияхОтбора(Компоновщик.Настройки.Отбор.Элементы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
	
КонецФункции

// Заполняет комбинацию правил.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - Задача.
//  ЭлементыКомбинации - Массив - Набор элементов отбора.
//
Процедура ЗаполнитьКомбинациюПравил(Задача, ЭлементыКомбинации)
	
	Для Каждого ЭлементОтбора Из ЭлементыКомбинации Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьКомбинациюПравил(Задача, ЭлементОтбора.Элементы);
		Иначе
			СпособЗаданияУсловия = ЭлементОтбора.ПравоеЗначение.СпособЗаданияУсловия;
			Если СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
				Результат = ПроверитьУсловиеНаВстроенномЯзыке(Задача, ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				Результат = ПроверитьУсловиеВРежимеКонструктора(
					Задача,
					ЭлементОтбора.ПравоеЗначение.НастройкаУсловия.Получить(),
					"ЗадачаИсполнителя",
					Истина);
			ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
				НастройкиВложенногоПравила = ЭлементОтбора.ПравоеЗначение.НастройкаКомбинацииУсловий.Получить();
				ЗаполнитьКомбинациюПравил(Задача, НастройкиВложенногоПравила.Отбор.Элементы);
				Результат = ПроверитьУсловиеВРежимеКонструктора(
					Задача, 
					НастройкиВложенногоПравила,
					"Условия",
					Ложь);
			КонецЕсли;
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ПолеДляПроверки");
			ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Разворачивает группы в условиях отбора.
//
// Параметры:
//  ЭлементыОдногоУровня - Массив - Элементы одного уровня.
//
Процедура РазвернутьГруппыВУсловияхОтбора(ЭлементыОдногоУровня)
	
	Для Каждого ЭлементОтбора Из ЭлементыОдногоУровня Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				ПользователиГруппы = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(ЭлементОтбора.ПравоеЗначение);
				ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений();
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ПользователиГруппы);
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") 
				И ЭлементОтбора.ПравоеЗначение.Количество() > 0
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение[0].Значение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				СписокПользователейГрупп = Новый Массив;
				Для Каждого РабочаяГруппа Из ЭлементОтбора.ПравоеЗначение Цикл
					ПользователиГруппы = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(РабочаяГруппа.Значение);
					ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений();
					ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
					Для Каждого Пользователь Из ПользователиГруппы Цикл
						СписокПользователейГрупп.Добавить(Пользователь);
					КонецЦикла;
				КонецЦикла;
				ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений();
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ПользователиГруппы);
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			РазвернутьГруппыВУсловияхОтбора(ЭлементОтбора.Элементы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
