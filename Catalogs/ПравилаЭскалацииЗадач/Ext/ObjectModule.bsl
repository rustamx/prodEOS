#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ШаблонПроцесса")
		И ТипЗнч(ДанныеЗаполнения.ШаблонПроцесса) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		
		НайденныеШаблоны = Новый Массив;
		ОбрабатываемыеШаблоны = Новый Массив;
		ОбрабатываемыеШаблоны.Добавить(ДанныеЗаполнения.ШаблонПроцесса);
		Пока ОбрабатываемыеШаблоны.Количество() > 0 Цикл
			
			ОбрабатываемыйШаблон = ОбрабатываемыеШаблоны[0];
			ОбрабатываемыеШаблоны.Удалить(0);
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса
				|ИЗ
				|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
				|ГДЕ
				|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СхемыКомплексныхПроцессовПараметрыДействий.ШаблонПроцесса
				|ИЗ
				|	Справочник.СхемыКомплексныхПроцессов.ПараметрыДействий КАК СхемыКомплексныхПроцессовПараметрыДействий
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыКомплексныхПроцессов КАК СхемыКомплексныхПроцессов
				|		ПО СхемыКомплексныхПроцессовПараметрыДействий.Ссылка = СхемыКомплексныхПроцессов.Ссылка
				|ГДЕ
				|	СхемыКомплексныхПроцессов.ВладелецСхемы = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", ОбрабатываемыйШаблон);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.ШаблонБизнесПроцесса) Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(Выборка.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
					ОбрабатываемыеШаблоны.Добавить(Выборка.ШаблонБизнесПроцесса);
				Иначе
					НайденныеШаблоны.Добавить(Выборка.ШаблонБизнесПроцесса);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого НайденныйШаблон Из НайденныеШаблоны Цикл
			ТипПроцесса = Перечисления.ТипыПроцессовЭскалацииЗадач.ТипПроцессаПоШаблону(
				НайденныйШаблон);
			ТочкиМаршрута = Перечисления.ТипыПроцессовЭскалацииЗадач.ТочкиМаршрутаПоТипуПроцесса(
				ТипПроцесса, Истина);
			Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
				НоваяСтрока = Процессы.Добавить();
				НоваяСтрока.ТипПроцесса = ТипПроцесса;
				НоваяСтрока.Шаблон = НайденныйШаблон;
				НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
				НоваяСтрока.ШаблонКомплексногоПроцесса = ДанныеЗаполнения.ШаблонПроцесса;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ШаблонПроцесса")
		И ТипЗнч(ДанныеЗаполнения.ШаблонПроцесса) <> Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		
		ТипПроцесса = Перечисления.ТипыПроцессовЭскалацииЗадач.ТипПроцессаПоШаблону(
			ДанныеЗаполнения.ШаблонПроцесса);
		ТочкиМаршрута = Перечисления.ТипыПроцессовЭскалацииЗадач.ТочкиМаршрутаПоТипуПроцесса(
			ТипПроцесса, Истина);
		Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
			НоваяСтрока = Процессы.Добавить();
			НоваяСтрока.ТипПроцесса = ТипПроцесса;
			НоваяСтрока.Шаблон = ДанныеЗаполнения.ШаблонПроцесса;
			НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
		КонецЦикла;
		
	КонецЕсли;
	
	Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	ДатаСоздания = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИсключаемыеРеквизиты = Новый Массив;
	Если Действие <> Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление Тогда
		ИсключаемыеРеквизиты.Добавить("НаправлениеЭскалации");
	КонецЕсли;
	Если Действие <> Перечисления.ДействияПравилЭскалацииЗадач.АвтоматическоеВыполнение Тогда
		ИсключаемыеРеквизиты.Добавить("ВариантВыполнения");
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПриоритет();
	СкорректироватьТаблицуУсловий();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаСоздания = ТекущаяДатаСеанса();
	Приоритет = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет пустые строки и дубли строк из обрабатываемой табличной части.
//
Процедура СкорректироватьТаблицуУсловий()
	
	// Удаляем пустые строки.
	КоличествоЭлементов = ДополнительныеУсловия.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Строка = ДополнительныеУсловия[КоличествоЭлементов - Индекс];
		Если Не ЗначениеЗаполнено(Строка.Условие)
			Или Не ЗначениеЗаполнено(Строка.ЗначениеУсловия) Тогда
			ДополнительныеУсловия.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем дубли строк.
	КоличествоЭлементов = ДополнительныеУсловия.Количество();
	Для Индекс1 = 1 По КоличествоЭлементов - 1 Цикл
		Строка1 = Новый Структура("Условие, ЗначениеУсловия");
		ЗаполнитьЗначенияСвойств(Строка1, ДополнительныеУсловия[КоличествоЭлементов - Индекс1]);
		Для Индекс2 = Индекс1 + 1 По КоличествоЭлементов Цикл
			Строка2 = Новый Структура("Условие, ЗначениеУсловия");
			ЗаполнитьЗначенияСвойств(Строка2, ДополнительныеУсловия[КоличествоЭлементов - Индекс2]);
			Если Строка1.Условие = Строка2.Условие
				И Строка1.ЗначениеУсловия = Строка2.ЗначениеУсловия Тогда
				ДополнительныеУсловия.Удалить(ДополнительныеУсловия[КоличествоЭлементов - Индекс1]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет приоритет правила эскалации.
//
Процедура ОпределитьПриоритет()
	
	Если ПометкаУдаления Тогда
		Приоритет = 0;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Приоритет) Тогда
		Приоритет = Справочники.ПравилаЭскалацииЗадач.МаксимальныйПриоритет() + 100;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОтключитьПроверкуУникальностиПриоритета") Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоСПриоритетом = Справочники.ПравилаЭскалацииЗадач.ПравилоСПриоритетом(Ссылка, Приоритет);
	Если ЗначениеЗаполнено(ПравилоСПриоритетом) Тогда
		ТекстОшибки = НСтр("ru = 'Правило с таким приоритетом уже существует.
			|Нормализуйте приоритеты и повторите попытку.';
			|en = 'With such priority rule already exists.
			|Normalize priorities and try again.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
