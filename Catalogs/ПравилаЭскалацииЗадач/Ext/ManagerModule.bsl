#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Задает приоритет правила эскалации.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Приоритет - Число - Приоритет.
//
Процедура ЗадатьПриоритет(Знач ПравилоЭскалации, Знач Приоритет) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Справочник.ПравилаЭскалацииЗадач");
		Блокировка.Заблокировать();
		
		ПравилоСПриоритетом = ПравилоСПриоритетом(ПравилоЭскалации, Приоритет);
		Если ЗначениеЗаполнено(ПравилоСПриоритетом) Тогда
			СледующееПривало = СледующееПоПриоритету(ПравилоСПриоритетом);
			НовыйПриоритет = НовыйПриоритетПриПовышении(ПравилоСПриоритетом, СледующееПривало);
			УстановитьПриортет(ПравилоСПриоритетом, НовыйПриоритет);
		КонецЕсли;
		
		УстановитьПриортет(ПравилоЭскалации, Приоритет);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет максимальный приоритет.
//
// Возвращаемое значение:
//  Число - Приоритет.
//
Функция МаксимальныйПриоритет() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйПриоритет = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ПравилаЭскалацииЗадач.Приоритет), 0) КАК Приоритет
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МаксимальныйПриоритет = Выборка.Приоритет;
	КонецЕсли;
	
	Возврат МаксимальныйПриоритет;
	
КонецФункции

// Выполняет нормализацию приоритетов всех правил эскалации.
//
Процедура НормализоватьПриоритеты() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Справочник.ПравилаЭскалацииЗадач");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПравилаЭскалацииЗадач.Ссылка
			|ИЗ
			|	Справочник.ПравилаЭскалацииЗадач КАК ПравилаЭскалацииЗадач
			|ГДЕ
			|	ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПравилаЭскалацииЗадач.Приоритет");
		
		ТекущийПриоритет = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийПриоритет = ТекущийПриоритет + 100;
			ПравилоЭскалацииЗадачОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПравилоЭскалацииЗадачОбъект.Приоритет = ТекущийПриоритет;
			ПравилоЭскалацииЗадачОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуУникальностиПриоритета");
			ПравилоЭскалацииЗадачОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Повышает приоритет правила эскалации.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Шаблон - СправочникСсылка - Шаблон процесса, в контексте которого происходит изменение.
//
Процедура ПовыситьПриоритет(Знач ПравилоЭскалации, Знач Шаблон) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Справочник.ПравилаЭскалацииЗадач");
		Блокировка.Заблокировать();
		
		СледующееПравило = СледующееПоПриоритету(ПравилоЭскалации, Шаблон);
		Если ЗначениеЗаполнено(СледующееПравило) Тогда
			
			СледующееЗаСледующим = СледующееПоПриоритету(СледующееПравило);
			НовыйПриоритет = НовыйПриоритетПриПовышении(СледующееПравило, СледующееЗаСледующим);
			Если НовыйПриоритет = СледующееПравило.Приоритет
				Или (ЗначениеЗаполнено(СледующееЗаСледующим)
					И НовыйПриоритет = СледующееЗаСледующим.Приоритет) Тогда
				НормализоватьПриоритеты();
				НовыйПриоритет = НовыйПриоритетПриПовышении(СледующееПравило, СледующееЗаСледующим);
			КонецЕсли;
			
			УстановитьПриортет(ПравилоЭскалации, НовыйПриоритет);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Понижает приоритет правила эскалации.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Шаблон - СправочникСсылка - Шаблон процесса, в контексте которого происходит изменение.
//
Процедура ПонизитьПриоритет(Знач ПравилоЭскалации, Знач Шаблон) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Справочник.ПравилаЭскалацииЗадач");
		Блокировка.Заблокировать();
		
		ПредыдущееПравило = ПредыдущееПоПриоритету(ПравилоЭскалации, Шаблон);
		Если ЗначениеЗаполнено(ПредыдущееПравило) Тогда
			
			ПредыдущееЗаПредыдущим = ПредыдущееПоПриоритету(ПредыдущееПравило);
			НовыйПриоритет = НовыйПриоритетПриПонижении(ПредыдущееПравило, ПредыдущееЗаПредыдущим);
			Если НовыйПриоритет = 0 
				Или НовыйПриоритет = ПредыдущееПравило.Приоритет
				Или (ЗначениеЗаполнено(ПредыдущееЗаПредыдущим)
					И НовыйПриоритет = ПредыдущееЗаПредыдущим.Приоритет) Тогда
				НормализоватьПриоритеты();
				НовыйПриоритет = НовыйПриоритетПриПонижении(ПредыдущееПравило, ПредыдущееЗаПредыдущим);
			КонецЕсли;
			
			УстановитьПриортет(ПравилоЭскалации, НовыйПриоритет);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Находит правило с указанным приоритетом.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Приоритет - Число - Приоритет.
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаЭскалацииЗадач - Правило эскалации с нужным приоритетом.
//
Функция ПравилоСПриоритетом(ПравилоЭскалации, Приоритет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПравилоСПриоритетом = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаЭскалацииЗадач.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.Приоритет = &Приоритет
		|	И ПравилаЭскалацииЗадач.Ссылка <> &Ссылка
		|	И ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	Запрос.УстановитьПараметр("Ссылка", ПравилоЭскалации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПравилоСПриоритетом = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПравилоСПриоритетом;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новый приоритет при повышении приоритета.
//
// Параметры:
//  СледующееПравило - СправочникСсылка.ПравилаЭскалацииЗадач - Следующее правило.
//  СледующееЗаСледующим - СправочникСсылка.ПравилаЭскалацииЗадач - Следующее за следующим.
// 
// Возвращаемое значение:
//  Число - Новый приоритет.
//
Функция НовыйПриоритетПриПовышении(СледующееПравило, СледующееЗаСледующим)
	
	НовыйПриоритет = СледующееПравило.Приоритет;
	Если ЗначениеЗаполнено(СледующееЗаСледующим) Тогда
		НовыйПриоритет = Цел(НовыйПриоритет + (СледующееЗаСледующим.Приоритет - НовыйПриоритет) / 2);
	Иначе
		НовыйПриоритет = НовыйПриоритет + 100;
	КонецЕсли;
	
	Возврат НовыйПриоритет;
	
КонецФункции

// Новый приоритет при понижении приоритета.
//
// Параметры:
//  ПредыдущееПравило - СправочникСсылка.ПравилаЭскалацииЗадач - Предыдущее правило.
//  ПредыдущееЗаПредыдущим - СправочникСсылка.ПравилаЭскалацииЗадач - Предыдущее за предыдущим.
// 
// Возвращаемое значение:
//  Число - Новый приоритет.
//
Функция НовыйПриоритетПриПонижении(ПредыдущееПравило, ПредыдущееЗаПредыдущим)
	
	НовыйПриоритет = ПредыдущееПравило.Приоритет;
	Если ЗначениеЗаполнено(ПредыдущееЗаПредыдущим) Тогда
		НовыйПриоритет = Цел(НовыйПриоритет - (НовыйПриоритет - ПредыдущееЗаПредыдущим.Приоритет) / 2);
	Иначе
		НовыйПриоритет = Цел(НовыйПриоритет / 2);
	КонецЕсли;
	
	Возврат НовыйПриоритет;
	
КонецФункции

// Находит следующее по приоритету правило эскалации.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Шаблон - СправочникСсылка - Шаблон процесса, в контексте которого происходит поиск.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПравилаЭскалацииЗадач - Следующее по приоритету правило.
//
Функция СледующееПоПриоритету(ПравилоЭскалации, Шаблон = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СледующееПоПриоритету = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаЭскалацииЗадач.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.Приоритет > &Приоритет
		|	И ПравилаЭскалацииЗадач.Процессы.Шаблон = &Шаблон
		|	И ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаЭскалацииЗадач.Приоритет");
	
	Запрос.УстановитьПараметр("Приоритет", ПравилоЭскалации.Приоритет);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
			|	И ПравилаЭскалацииЗадач.Процессы.Шаблон = &Шаблон", "");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СледующееПоПриоритету = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СледующееПоПриоритету;
	
КонецФункции

// Находит предыдущее по приоритету правило эскалации.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Шаблон - СправочникСсылка - Шаблон процесса, в контексте которого происходит поиск.
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаЭскалацииЗадач - Предыдущее по приоритету правило.
//
Функция ПредыдущееПоПриоритету(ПравилоЭскалации, Шаблон = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредыдущееПоПриоритету = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаЭскалацииЗадач.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалацииЗадач КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.Приоритет < &Приоритет
		|	И ПравилаЭскалацииЗадач.Процессы.Шаблон = &Шаблон
		|	И ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаЭскалацииЗадач.Приоритет УБЫВ");
	
	Запрос.УстановитьПараметр("Приоритет", ПравилоЭскалации.Приоритет);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
			|	И ПравилаЭскалацииЗадач.Процессы.Шаблон = &Шаблон", "");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредыдущееПоПриоритету = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПредыдущееПоПриоритету;
	
КонецФункции

// Устанавливает приоритет для правила эскалации.
//
// Параметры:
//  ПравилоЭскалации - СправочникСсылка.ПравилаЭскалации - Правило эскалации.
//  Приоритет - Число - Приоритет.
//
Процедура УстановитьПриортет(ПравилоЭскалации, Приоритет)
	
	ПравилоЭскалацииОбъект = ПравилоЭскалации.ПолучитьОбъект();
	ПравилоЭскалацииОбъект.Приоритет = Приоритет;
	ПравилоЭскалацииОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
