
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
	// Подготовка постоянных коллекций
	
	// Заполнение типов значений доступа всех видов доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа() Цикл
		Если ТипЗнч(СвойстваВидаДоступа.ВидДоступа) <> Тип("ПланВидовХарактеристикСсылка.ВидыДоступа") Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта), МетаданныеТипа.ПредставлениеОбъекта, МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	// Установка постоянной доступности свойств
	
	// Определение необходимости настройки ограничений доступа
	//Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
	//	Элементы.ВидыИЗначенияДоступа.Видимость = Ложь;
	//КонецЕсли;
	Элементы.ВидыИЗначенияДоступа.Видимость = Ложь;
	
	// Определение прав восстановления по начальному заполнению
	Элементы.ВосстановитьПоНачальномуЗаполнению.Видимость = 
		ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ()
		И НЕ УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа();
	
	// Определение возможности редактирования элементов формы (перезапись доступна)
	БезРедактированияПоставляемыхЗначений = ТолькоПросмотр ИЛИ Объект.Ссылка = Справочники.ПрофилиГруппДоступа.Администратор;
	
	// Определение возможности восстановления по начальному заполнению
	Элементы.ОписаниеПоставляемогоПрофиля.Видимость = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ВосстановитьПоНачальномуЗаполнению.Доступность = Ложь;
		
	ИначеЕсли Справочники.ПрофилиГруппДоступа.ЕстьНачальноеЗаполнениеПрофиля(Объект.Ссылка) Тогда
		Элементы.ВосстановитьПоНачальномуЗаполнению.Доступность = Истина;
		Элементы.ОписаниеПоставляемогоПрофиля.Видимость = Истина;
		Элементы.ОписаниеПоставляемогоПрофиля.Доступность = НЕ Объект.ПоставляемыйПрофильИзменен;
		
		Если УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
			БезРедактированияПоставляемыхЗначений = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.ТолькоПросмотр = БезРедактированияПоставляемыхЗначений;
	
	// Настройка редактирования видов доступа
	Элементы.ВидыДоступа.ТолькоПросмотр                     =    БезРедактированияПоставляемыхЗначений;
	Элементы.ВидыДоступаДобавить.Доступность                = НЕ БезРедактированияПоставляемыхЗначений;
	Элементы.КонтекстноеМенюВидыДоступаДобавить.Доступность = НЕ БезРедактированияПоставляемыхЗначений;
	
	УстановитьТолькоПросмотрРолей(БезРедактированияПоставляемыхЗначений, БезРедактированияПоставляемыхЗначений);
	
	// Заполнение изменяемых коллекций
	
	// При создании копированием
	Если Объект.ВидыДоступа.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.ВидыДоступа[0].Использование) Тогда
		ЗаполнитьСвойстваВидовДоступаВФорме();
	КонецЕсли;
	
	// Список выбора видов доступа
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДоступа.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
		|ГДЕ
		|	ВидыДоступа.Предопределенный
		|	И НЕ ВидыДоступа.ПометкаУдаления");
	
	ДоступныеВиды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.ВидыДоступаВидДоступа.СписокВыбора.ЗагрузитьЗначения(ДоступныеВиды);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	ИнициализацияФормы();
	Элементы.ОписаниеПоставляемогоПрофиля.Доступность = НЕ ТекущийОбъект.ПоставляемыйПрофильИзменен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверкаЗаполненияВидовИЗначенийДоступа(Отказ);
	
	Если НЕ Отказ
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ТребуетсяОбновитьГруппыДоступаПрофиля
		И Не ПараметрыЗаписи.Свойство("ЗаданВопросПередЗаписью") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
		//ПоказатьВопрос(
		//	ОписаниеОповещения,
		//	ТекстВопросаОбновитьГруппыДоступаПрофиля(),
		//	РежимДиалогаВопрос.ДаНетОтмена,,
		//	КодВозвратаДиалога.Нет);
		ПередЗаписьюПродолжение(КодВозвратаДиалога.Нет, ПараметрыЗаписи);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжение(КодОтвета, ПараметрыЗаписи) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ОбновитьГруппыДоступаПрофиля");
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ЗаданВопросПередЗаписью", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ОбновитьГруппыДоступаПрофиля") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьГруппыДоступаПрофиля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПерсональныеГруппыДоступаСОбновленнымНаименованием") Тогда
		ПараметрыЗаписи.Вставить("ПерсональныеГруппыДоступаСОбновленнымНаименованием", ТекущийОбъект.ДополнительныеСвойства.ПерсональныеГруппыДоступаСОбновленнымНаименованием);
	КонецЕсли;
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		ПоказатьПодсистемыРолей = Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	Иначе
		ПоказатьПодсистемыРолей = Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	КонецЕсли;
	
	ОбновитьДеревоРолей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура ВосстановитьПоНачальномуЗаполнению(Команда)
	
	Если Модифицированность ИЛИ ОбъектЗаписывался Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для выполнения команды требуется переоткрыть форму.'; en = 'To run the command you need to reopen the form.'"));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВосстановитьПоНачальномуЗаполнениюПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Восстановить полномочия по содержимому начального заполнения?'; en = 'Restore privileges from default settings?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоНачальномуЗаполнениюПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВосстановитьПоНачальномуЗаполнениюПродолжение2",
			ЭтотОбъект);
		//ПоказатьВопрос(
		//	ОписаниеОповещения, 
		//	ТекстВопросаОбновитьГруппыДоступаПрофиля(), 
		//	РежимДиалогаВопрос.ДаНетОтмена, , 
		//	КодВозвратаДиалога.Нет);
		ВосстановитьПоНачальномуЗаполнениюПродолжение2(КодВозвратаДиалога.Нет, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоНачальномуЗаполнениюПродолжение2(КодОтвета, Параметры) Экспорт
	
	Если КодОтвета <> КодВозвратаДиалога.Отмена Тогда
		ОбновитьГруппыДоступа = (КодОтвета = КодВозвратаДиалога.Да);
		НачальноеЗаполнениеПрофилейГруппДоступа(Объект.Ссылка, ОбновитьГруппыДоступа, Ложь);
		Прочитать();
		РазвернутьПодсистемыРолей();
		Если ОбновитьГруппыДоступа Тогда
			Текст = НСтр("ru = 'Полномочия ""%1"" восстановлены по содержимому начального заполнения.'; en = 'Privileges""%1"" were restored from default settings, access groups of the privileges were updated.'");
		Иначе
			Текст = НСтр("ru = 'Полномочия ""%1"" восстановлены по содержимому начального заполнения.'; en = 'Privileges""%1"" were restored from default settings, access groups of the privileges were updated.'");
		КонецЕсли;
		ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект.Наименование));
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеПоставляемогоПрофиля(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ПолучитьОписаниеПоставляемогоПрофиля(Объект.Ссылка));
	ТекстовыйДокумент.ТолькоПросмотр = Истина;
	ТекстовыйДокумент.Показать(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Описание поставляемых полномочий ""%1""'; en = 'Description of the supplied privileges ""%1""'"), Объект.Наименование));
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаПриИзменении(Элемент)
	
	ТребуетсяОбновитьГруппыДоступаПрофиля = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПередУдалением(Элемент, Отказ)
	
	ТекущийВидДоступа = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ВидыДоступа.ТекущиеДанные.Использование) Тогда
		Элементы.ВидыДоступа.ТекущиеДанные.Предустановленный = Ложь;
		Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен    = Ложь;
		Элементы.ВидыДоступа.ТекущиеДанные.Использование = Элементы.ВидыДоступаИспользование.СписокВыбора.НайтиПоЗначению("ВначалеВсеЗапрещены").Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВидДоступаПриИзменении(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ВидыДоступа.ТекущиеДанные.Предустановленный =
	            ВыбранноеЗначение = "ВсеРазрешены"
	        ИЛИ ВыбранноеЗначение = "ВсеЗапрещены";
	
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен    =
	            ВыбранноеЗначение = "ВначалеВсеРазрешены"
	        ИЛИ ВыбранноеЗначение = "ВсеРазрешены";
	
	Модифицированность = Истина;
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДоступа) Тогда
		Элемент.ТекущиеДанные.ВидДоступа = ТекущийВидДоступа;
		Отбор = Новый Структура("ВидДоступа", ТекущийВидДоступа);
		Элемент.ТекущиеДанные.НомерСтрокиПоВиду = Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	КонецЕсли;
	
	ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Элемент", Неопределено);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗначениеДоступаНачалоВыбораПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	ВыбратьТипЗначенияДоступа(ОписаниеОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.РабочиеГруппы") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", Новый Структура("ВыборГруппВнешнихПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Для работы интерфейса ролей

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = ПоказатьТолькоВыбранныеРоли;
	
	ОбновитьДеревоРолей();
	РазвернутьПодсистемыРолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодсистемыРолей(Команда)
	
	ПоказатьПодсистемыРолей = НЕ ПоказатьПодсистемыРолей;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей();
	РазвернутьПодсистемыРолей();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСоставРолей(Элементы.Роли.ТекущаяСтрока, Элементы.Роли.ТекущиеДанные.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ОбновитьСоставРолей(Неопределено, Истина);
	Если ПоказатьТолькоВыбранныеРоли Тогда
		РазвернутьПодсистемыРолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ОбновитьСоставРолей(Неопределено, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") 
		И Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗаписиКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'; en = 'Errors when writing (see log)'"));
		Возврат;
	КонецЕсли;
	
	ОбъектЗаписывался = Истина;
	
	Если ПараметрыЗаписи.Свойство("ПерсональныеГруппыДоступаСОбновленнымНаименованием") Тогда
		Для каждого ПерсональнаяГруппаДоступа Из ПараметрыЗаписи.ПерсональныеГруппыДоступаСОбновленнымНаименованием Цикл
			ОповеститьОбИзменении(ПерсональнаяГруппаДоступа);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ИзмененПрофильГруппДоступа", Объект.Ссылка);
	Элементы.ОписаниеПоставляемогоПрофиля.Доступность = НЕ Объект.ПоставляемыйПрофильИзменен;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиентПродолжение(Результат, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

// Выполнение процедуры для существующего объекта в обработчике формы ПриЧтенииНаСервере,
// для нового объекта в обработчике формы ПриСозданииНаСервере.
// Выполнение процедуры до события ПриЗагрузкеДанныхИзНастроекНаСервере.
&НаСервере
Процедура ИнициализацияФормы()
	
	// Установка начальных значений
	// перед загрузкой данных из настроек на сервере
	// для случая, когда данные ещё не были записаны и не загружаются
	ПоказатьПодсистемыРолей = Истина;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	
	// Для нового элемента показать все роли, иначе только выбранные
	ПоказатьТолькоВыбранныеРоли                      = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = ЗначениеЗаполнено(Объект.Ссылка);
	
	СкрытьРольПолныеПрава = Объект.Ссылка <> Справочники.ПрофилиГруппДоступа.Администратор;
	
	ОбновитьДеревоРолей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваВидовДоступаВФорме()
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Строка);
		ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияВидовИЗначенийДоступа(Отказ)
	
	// Проверка незаполненных и повторяющихся видов доступа.
	НомерСтрокиВидовДоступа = Объект.ВидыДоступа.Количество()-1;
	Пока НЕ Отказ И НомерСтрокиВидовДоступа >= 0 Цикл
		
		ТекущаяСтрокаВидовДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидовДоступа);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаВидовДоступа.ВидДоступа) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вид доступа не заполнен.'; en = 'Access type is not filled.'"),
			                                                  ,
			                                                  "Объект.ВидыДоступа[" + Формат(НомерСтрокиВидовДоступа, "ЧГ=0") + "].ВидДоступа",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Вид доступа повторяется.'; en = 'Access type is repeated'"),
			                                                  ,
			                                                  "Объект.ВидыДоступа[" + Формат(НомерСтрокиВидовДоступа, "ЧГ=0") + "].ВидДоступа",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		// Проверка незаполненных и повторяющихся видов доступа.
		ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НЕ Отказ И НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение не заполнено.'; en = 'Value is not filled'"),
				                                                  ,
				                                                  "Объект.ЗначенияДоступа[" + Формат(ТекущаяСтрока.НомерСтроки-1, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Возврат;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа, ЗначениеДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа, ТекущаяСтрока.ЗначениеДоступа));
			Если НайденныеЗначения.Количество() > 1 Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение повторяется.'; en = 'Value is repeated.'"),
				                                                  ,
				                                                  "Объект.ЗначенияДоступа[" + Формат(ТекущаяСтрока.НомерСтроки-1, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Возврат;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидовДоступа = НомерСтрокиВидовДоступа - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоВидаДоступа(Знач Контекст)
	
	ЗначенияЗадаются = Ложь;
	
	#Если Клиент Тогда
		ТекущиеДанные = Контекст.Элементы.ВидыДоступа.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Контекст.Объект.ВидыДоступа.НайтиПоИдентификатору(?(Контекст.Элементы.ВидыДоступа.ТекущаяСтрока = Неопределено, -1, Контекст.Элементы.ВидыДоступа.ТекущаяСтрока));
	#КонецЕсли
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Контекст.ТекущийВидДоступа = ТекущиеДанные.ВидДоступа;
		
		ЗначенияЗадаются = ТекущиеДанные.Предустановленный;
		Если ЗначенияЗадаются Тогда
			Контекст.Элементы.ТипыВидовДоступа.ТекущаяСтраница = Контекст.Элементы.ПредустановленныйВидДоступа;
			// Установка отбора значений
			Если Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Неопределено
			 ИЛИ Контекст.Элементы.ЗначенияДоступа.ОтборСтрок.ВидДоступа <> ТекущиеДанные.ВидДоступа Тогда
				
				Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидДоступа", ТекущиеДанные.ВидДоступа);
			КонецЕсли;
		Иначе
			Контекст.Элементы.ТипыВидовДоступа.ТекущаяСтраница = Контекст.Элементы.ОбычныйВидДоступа;
		КонецЕсли;
		
		// Обновление поля НадписьВидДоступа
		Контекст.НадписьВидДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(Ложь,
			  ?(ТекущиеДанные.ДоступРазрешен,
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'; en = 'Allowed values (%1) - current user is always allowed'"),
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'; en = 'Allowed values (%1) - current user is always allowed'") ),
			  ?(Ложь,
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'; en = 'Forbidden values (%1) - current external user is always allowed'"),
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'; en = 'Forbidden values (%1) - current external user is always allowed'") ),
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1)'; en = 'Disallowed values (%1)'"),
			      НСтр("ru = 'Разрешенные значения (%1)'; en = 'Allowed values (%1)'") )
			  )
			),
			Строка(ТекущиеДанные.ВидДоступа));
		
		ОбновитьПредставлениеИспользованияВидаДоступа(Контекст, ТекущиеДанные);
	Иначе
		Контекст.ТекущийВидДоступа = Неопределено;
		Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидДоступа", Неопределено);
		
		Если Контекст.Объект.ВидыДоступа.Количество() = 0 Тогда
			Контекст.Объект.ЗначенияДоступа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Контекст.ТекущийТипЗначенияДоступа  = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ТекущийТипЗначенияДоступа);
	Контекст.ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	
	Если ЗначенияЗадаются Тогда
		Для каждого ОписаниеТипаВидаДоступа Из Контекст.ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущиеДанные.ВидДоступа)) Цикл
			Контекст.ТекущиеТипыЗначенийДоступа.Добавить(ОписаниеТипаВидаДоступа.ТипЗначенияДоступа, ОписаниеТипаВидаДоступа.ПредставлениеТипа);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные <> Неопределено Тогда
			Отбор = Новый Структура("ВидДоступа", Контекст.Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа);
			Для каждого Строка Из Контекст.Объект.ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
				Контекст.Объект.ЗначенияДоступа.Удалить(Строка);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		Контекст.ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'; en = 'Undefined'"));
	КонецЕсли;
	
	Контекст.Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	Контекст.Элементы.ЗначенияДоступа.КоманднаяПанель.ПодчиненныеЭлементы.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияВидаДоступа(Контекст, ОписаниеВидаДоступа)
	
	Если ОписаниеВидаДоступа.Предустановленный Тогда
		КоличествоЗначений = Контекст.Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа)).Количество();
		Если КоличествоЗначений = 0 Тогда
			ЧислоИПредмет = НСтр("ru = 'не назначены'; en = 'not assigned'");
		Иначе
			ПрописьЧисла          = ЧислоПрописью(КоличествоЗначений, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'; en = ',,,,,,,,0'"));
			ПрописьЧислаИПредмета = ЧислоПрописью(КоличествоЗначений, "Л = ru_RU", НСтр("ru = 'значение,значения,значений,,,,,,0'; en = 'value, value, values,, 0'"));
			ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(КоличествоЗначений, "ЧГ=") + " ");
		КонецЕсли;
		ОписаниеВидаДоступа.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, исключения назначаются в профиле (%1)'; en = 'All permitted, exceptions are assigned in profile (%1)'"),
			  НСтр("ru = 'Все запрещены, исключения назначаются в профиле (%1)'; en = 'All forbidden, exceptions are assigned in profile (%1)'") ),
			ЧислоИПредмет);
	Иначе
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
		      НСтр("ru = 'Все разрешены, исключения назначаются в группах доступа'; en = 'All permitted, exceptions are assigned in access groups'"),
		      НСтр("ru = 'Все запрещены, исключения назначаются в группах доступа'; en = 'All forbidden, exceptions are assigned in access groups'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомерСтрокиПоВиду(Контекст, ОписаниеВидаДоступа)
	
	Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	ЗначенияДоступаПоВиду = Контекст.Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступаПоВиду Цикл
		Строка.НомерСтрокиПоВиду = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипЗначенияДоступа(ОписаниеОповещения)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
		
	ИначеЕсли ТекущиеТипыЗначенийДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
		
	ИначеЕсли ТекущиеТипыЗначенийДоступа.Количество() > 0 Тогда
		
		Если ТекущиеТипыЗначенийДоступа.Количество() = 2 Тогда
			Если ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ПользовательПустаяСсылка) <> Неопределено
			   И ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
			
			Если ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ВнешнийПользовательПустаяСсылка) <> Неопределено
			   И ТекущиеТипыЗначенийДоступа.НайтиПоЗначению(ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОповещенияВыбора = Новый ОписаниеОповещения(
			"ВыбратьТипЗначенияДоступаПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		ТекущиеТипыЗначенийДоступа.ПоказатьВыборЭлемента(
			ОписаниеОповещенияВыбора, 
			НСтр("ru = 'Выбор типа данных'; en = 'Select data type'"), 
			ТекущиеТипыЗначенийДоступа[0]);
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Функция ТекстВопросаОбновитьГруппыДоступаПрофиля()
	
	Возврат  НСтр("ru = 'Обновить группы доступа, использующие этот профиль?
	                    |
	                    |1. Удалить лишние виды доступа и заданные для них значения доступа.
	                    |
	                    |2. Добавить недостающие виды доступа.';
	                    |en = 'Update the access groups that use this profile?
	                    |
	                    |1. Remove unnecessary access and set values for them access.
	                    |
	                    |2. Add the missing access.'");
КонецФункции


&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст, Знач ВключаяГруппы = Истина, Знач ВключаяВнешнихПользователей = Неопределено, БезПользователей = Ложь)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст, ВключаяГруппы, ВключаяВнешнихПользователей, БезПользователей);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина)
	
	Возврат УправлениеДоступомСлужебный.СформироватьДанныеВыбораЗначенияДоступа(Текст, ВидДоступа, ВключаяГруппы);
	
КонецФункции

&НаСервереБезКонтекста
Процедура НачальноеЗаполнениеПрофилейГруппДоступа(Знач Профиль = Неопределено, ОбновитьГруппыДоступа = Ложь, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа = Истина)
	
	Справочники.ПрофилиГруппДоступа.ЗаполнитьПоставляемыйПрофиль(Профиль, ОбновитьГруппыДоступа);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПоставляемогоПрофиля(Знач Профиль)
	
	Возврат Справочники.ПрофилиГруппДоступа.ОписаниеПоставляемогоПрофиля(Профиль);
	
КонецФункции

// Для работы интерфейса ролей

&НаСервере
Функция КоллекцияРолей(ТаблицаЗначенийДляЧтения = Ложь)
	
	Если ТаблицаЗначенийДляЧтения Тогда
		Возврат Объект.Роли.Выгрузить();
	КонецЕсли;
	
	Возврат Объект.Роли;
	
КонецФункции

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей = Неопределено, Знач РазрешитьПросмотрТолькоВыбранных = Ложь)
	
	Если ТолькоПросмотрРолей <> Неопределено Тогда
		Элементы.Роли.ТолькоПросмотр              =    ТолькоПросмотрРолей;
		Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		Элементы.РолиСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	КонецЕсли;
	
	Если РазрешитьПросмотрТолькоВыбранных Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РазвернутьПодсистемыРолей(Коллекция = Неопределено);
	
	Если Коллекция = Неопределено Тогда
		Коллекция = Роли.ПолучитьЭлементы();
	КонецЕсли;
	
	// Развернуть все
	Для каждого Строка ИЗ Коллекция Цикл
		Элементы.Роли.Развернуть(Строка.ПолучитьИдентификатор());
		Если НЕ Строка.ЭтоРоль Тогда
			РазвернутьПодсистемыРолей(Строка.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРолей()
	
	Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;
	
	// Запоминание текущей строки
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "", ТекущиеДанные.ПолучитьРодителя().Имя);
			ТекущаяРоль       = ТекущиеДанные.Имя;
		Иначе
			ТекущаяПодсистема = ТекущиеДанные.Имя;
			ТекущаяРоль       = "";
		КонецЕсли;
	КонецЕсли;
	
	Назначение = ?(Объект.Ссылка = Справочники.ПрофилиГруппДоступа.Администратор, 
		"ДляАдминистраторов", "ДляПользователей");
	
	ДеревоРолей = ПользователиСлужебныйПовтИсп.ДеревоРолей(ПоказатьПодсистемыРолей, Назначение).Скопировать();
	
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли);
	
	ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема), Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль), Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли);
		
		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава И ВРег(Строка.Имя) = ВРег("ПолныеПрава") Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 5;
				Строка.Пометка = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Строка.Роль)).Количество() > 0;
				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 6;
				Строка.Пометка = Строка.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции


&НаСервере
Процедура ОбновитьСоставРолей(ИдентификаторСтроки, Добавить);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		// Обработка всех
		КоллекцияРолей = КоллекцияРолей();
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
			НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли();
			Для каждого ОписаниеРоли Из ВсеРоли Цикл
				Если ОписаниеРоли.Имя <> "ПолныеПрава"
					И НедоступныеРоли.Получить(ОписаниеРоли.Имя) = Неопределено Тогда
					КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Идентификатор;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей();
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(ТекущиеДанные.Роль, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(ТекущиеДанные.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Роли.ПолучитьЭлементы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРоль(Знач Роль, Знач Добавить)
	
	НайденныеРоли = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			КоллекцияРолей().Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			КоллекцияРолей().Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРолиПодсистемы(Знач Коллекция, Знач Добавить)
	
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Строка.Роль, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПометкуВыбранныхРолей(Знач Коллекция)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Строка.Пометка = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Строка.Роль)).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры


