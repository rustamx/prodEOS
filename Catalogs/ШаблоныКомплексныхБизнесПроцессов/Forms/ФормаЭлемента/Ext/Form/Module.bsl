
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФормуПослеВопросаОСохранении;

#КонецОбласти

#Область ОписаниеПеременных_Схема

&НаКлиенте
Перем ИмяТекущегоЭлементаСхемыПроцесса Экспорт;

&НаКлиенте
Перем КэшНаименованийСоединительныхЛиний Экспорт;

#КонецОбласти

#Область ОписаниеПеременных_ДоступностьШаблоновПроцессов

&НаКлиенте
Перем НеПоказыватьВопросОНедоступномШаблоне;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем схему, если текущий объект еще не записан
	// и схема не была инициализирована при чтении.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИнициализироватьСхемуПроцесса(ЭтаФорма, Объект);
	КонецЕсли;
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастроитьЭлементыРедактированияМаршрута(ЭтаФорма);
	
	// Заполним таблицу ФормыДействийСхемы.
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьФормыДействийСхемы(ЭтаФорма);
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
	ИдентификаторЭтапа = Параметры.ИдентификаторЭтапа;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВладелецШаблона = Параметры.ВладелецШаблона;
	КонецЕсли;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	// Инициализация формы механизмом комплексных процессов 
	Если Объект.Ссылка.Пустая() Тогда
		ЗаголовокФормы = НСтр("ru = 'Комплексный процесс (Создание)'; en = 'Composite process (Create)'");
		
		Если Не ИспользоватьСхемуПроцесса И Не ЗначениеЗаполнено(Объект.ВариантМаршрутизации) Тогда
			Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда 
			Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
	Иначе
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комплексный процесс ""%1""'; en = 'Composite process ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	РаботаСКомплекснымиБизнесПроцессамиСервер.КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(
		ЭтаФорма, 
		ЗаголовокФормы);

	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
			Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	// Инициализация видимости в сроке выполнения
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Отложенный старт.
	СтартПроцессовСервер.КарточкаШаблонаПриСозданииНаСервере(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Параметры.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляРасчетаСроков);
	
	Элементы.СрокИсполненияДействияПредставление.Ширина =
		СрокиИсполненияПроцессовКОРП.ШиринаПоляСрокИсполненияДействияКомплексногоПроцесса(ЭтаФорма);
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
				СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'; en = '(according to schedule)'");
		
		Элементы.СрокИсполненияДействияПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияДействияПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
			
		Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
		
	КонецЕсли;
	
	ОбновитьСрокиИсполненияНаСервере();
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", ПустойБизнесПроцесс);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Мультипредметность.ШаблонПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Заполнение трудозатрат
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
	// Заголовки команд
	РаботаСБизнесПроцессамиВызовСервера.УстановитьЗаголовкиКомандШаблонаБизнесПроцесса(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать

	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// Настроим доступность редактирование схемы.
	НастроитьДоступностьРедактированияСхемы(ЭтаФорма);
	
	// Настроим отображение группы доступности шаблона.
	ШаблоныБизнесПроцессов.НастроитьОбластьДоступностиШаблонов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ИнициализироватьСхемуПроцесса(ЭтаФорма);
	ПодключитьОбработчикОжидания("ВыбратьВариантРедактированияМаршрута", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность И ЗакрытьФормуПослеВопросаОСохранении <> Истина Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьЗаписьНеСохраненныхИзменений", ЭтотОбъект);
		
		ТекстВопрос = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос,
			РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопросОНедоступномШаблоне(Отказ);
	
КонецПроцедуры

// Продолжение процедуры ПередЗакрытием.
//
&НаКлиенте
Процедура ПродолжитьЗаписьНеСохраненныхИзменений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстОповещения = НСтр("ru = 'Изменение'; en = 'Change'")
		Иначе
			ТекстОповещения = НСтр("ru = 'Создание'; en = 'Create'")
		КонецЕсли;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ЗакрытьФормуПослеВопросаОСохранении = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеДействия" Тогда
		
		Если ЭтаФорма = Источник
			Или Параметр.ВладелецШаблона <> Объект.Ссылка Тогда
			
			Возврат;
		КонецЕсли;
		
		Если ИспользоватьСхемуПроцесса Тогда
			ЗавершитьНастройкуЭлементаСхемыДействия(Параметр.ШаблонБП, Параметр.Предметы);
		Иначе
			ПрименитьНастройкиДействия(Параметр);
			РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
			Модифицированность = Истина;
		КонецЕсли;
		
		МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
		СтрокиТочек = ТочкиМаршрута.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиТочек Цикл
			Элементы.ТочкиМаршрута.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
		КонецЦикла;
		
		ОтключитьДоступностьШаблона();
		
	ИначеЕсли ИмяСобытия = "ВыборШаблонаДействия" Тогда
		
		Если Объект.Ссылка <> Параметр.ВладелецШаблона Тогда
			Возврат;
		КонецЕсли;
		
		Если ИспользоватьСхемуПроцесса Тогда
			ЗавершитьНастройкуЭлементаСхемыДействия(Параметр.ШаблонБП, Параметр.Предметы);
		Иначе
			ПараметрыВозврата = СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(Параметр.ШаблонБП, Параметр.ВладелецШаблона);
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ПараметрыВозврата.Шаблон);
			ПараметрыФормы.Вставить("ВладелецШаблона", Параметр.ВладелецШаблона);
			ПараметрыФормы.Вставить("ИдентификаторЭтапа", Параметр.ИдентификаторЭтапа);
			ПараметрыФормы.Вставить("Предметы", Параметр.Предметы);
			ОткрытьФорму(ПараметрыВозврата.ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НастройкаПорядкаВыполнения" Тогда
		Если Объект.Ссылка <> Параметр.ВладелецЭтапа Тогда
			Возврат;
		КонецЕсли;
		ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
		ДанныеЭтапа.ПредшественникиВариантИспользования = Параметр.ПредшественникиВариантИспользования;
		РаботаСКомплекснымиБизнесПроцессамиКлиент.УстановитьПредшественниковЭтапа(Объект, ДанныеЭтапа.ИдентификаторЭтапа, Параметр.Предшественники);
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
		
		РеквизитСИзмененнымСроком = "Этапы";
		ИдентификаторыИзмененныхДействий.Добавить(Параметр.ИдентификаторЭтапа);
		
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
		ОбновитьСрокиИсполненияОтложенно();
		
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ИнициализироватьСхемуПроцесса(ЭтаФорма, ТекущийОбъект);
	
	Если Не ИспользоватьСхемуПроцесса Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
			
	// СтандартныеПодсистемы.Свойства
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	ПустойБизнесПроцессОбъект =
		РеквизитФормыВЗначение("ПустойБизнесПроцесс", Тип("БизнесПроцессОбъект.КомплексныйПроцесс"));
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ПустойБизнесПроцессОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПрочитатьДоступностьШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Отложенный старт.
	СтартПроцессовКлиент.КарточкаШаблонаПередЗаписью(ЭтаФорма);
		
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ФормаНастройкиДействияПередЗаписью(ЭтаФорма, Отказ);
	
	Если Не ИспользоватьСхемуПроцесса И ЭтапыКУдалению.Количество() > 0 Тогда
		УдалитьЭтапы();
		ЭтапыКУдалению.Очистить();
	КонецЕсли;

	Если Не ИспользоватьСхемуПроцесса Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьРезультатПроверкиКорректностиСхемы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Запишем схему и выполним проверку процесса.
	// Если проверка не проходит, тогда отменяем запись схемы.
	НачатьТранзакцию();
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ПоместитьСсылкуНаНовуюСхемуВОбъект(
		ЭтаФорма, Объект);
	ТекущийОбъект.Схема = Объект.Схема;
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаписатьСхемуИзФормы(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
		
	ПроверятьЗаполнение = Истина;
	Если ПараметрыЗаписи.Свойство("НеПроверятьЗаполнение") Тогда
		ПроверятьЗаполнение = Не ПараметрыЗаписи.НеПроверятьЗаполнение;
	КонецЕсли;
	
	Если Отказ Или (ПроверятьЗаполнение И Не ПроверитьЗаполнение()) Тогда
		ОтменитьТранзакцию();
		Отказ = Истина; // На случае если, до условия отказ имел значение Ложь.
		Возврат;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	СрокиИсполненияПроцессовКОРП.ЗаписатьРассчитанныеТочныеСрокиКомплексногоПроцессаПоСхеме(
		ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
		
	Если Не ИспользоватьСхемуПроцесса Тогда
		ПараметрыЗаписи.Вставить("СрокиЭтапов",
			СрокиИсполненияПроцессов.СрокиДействийПроцесса(Объект.Этапы, "ИдентификаторЭтапа"));
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДоступностьШаблона(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ИспользоватьСхемуПроцесса Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗагрузитьСхемуВФормуПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	Иначе
		СрокиЭтапов = ПараметрыЗаписи.СрокиЭтапов;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
		СрокиИсполненияПроцессов.ЗаполнитьСрокиВТаблицеДействий(СрокиЭтапов, Объект.Этапы, "ИдентификаторЭтапа");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комплексный процесс ""%1""'; en = 'Composite process ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
		
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОповеститьПослеЗаписиНастройкиДействия(ЭтаФорма);
	КонецЕсли;
	
	Оповестить("Запись_ШаблонПроцесса", Объект.Ссылка);
	
	ШаблоныБизнесПроцессовКлиент.ПоказатьОповещениеПослеЗаписиШаблона(ЭтаФорма);
	
	СрокиИсполненияПроцессовКлиентКОРП.ПоказатьСообщениеОЗавершенииРасчетаСроков(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаНастройкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРеквизитыПроцесса
		И РеквизитСИзмененнымСроком = "Схема" Тогда
		
		ОбновитьСрокиИсполненияОтложенно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНедоступенДляЗапускаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	РезультатПроверки = ПроверитьДоступностьШаблона();
	
	Если Не ТолькоПросмотр Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ЭтоШаблонПроцесса = Не ЗначениеЗаполнено(Объект.ВладелецШаблона);
	
	Если Не ДоступенРучнойЗапускПоШаблону И Не ДоступенАвтоматическийЗапускПоШаблону Тогда
		
		ВывестиОшибкиПроверкиДоступности(РезультатПроверки);
		
		Если ЭтоШаблонПроцесса Тогда
			ТекстПредупреждения = НСтр("ru = 'Шаблон не прошел проверку.
				|Исправьте обнаруженные ошибки (см. панель Сообщения).';
				|en = 'Template validation failed.
				|Fix the detected errors (see messages panel).'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие не прошло проверку.
				|Исправьте обнаруженные ошибки (см. панель Сообщения).';
				|en = 'Validation of the action failed.
				|Fix the detected errors (see the messages panel).'");
		КонецЕсли;
		
	ИначеЕсли ДоступенРучнойЗапускПоШаблону И Не ДоступенАвтоматическийЗапускПоШаблону Тогда
		
		Если ЭтоШаблонПроцесса Тогда
			ТекстПредупреждения = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов вручную.
				|Для автоматического запуска процессов заполните обязательные поля.';
				|en = 'The template was validated and enabled to start processes manually.
				|To start processes automatically fill in the required fields.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие прошло проверку.
				|Но не заполнены поля для автоматического запуска.';
				|en = 'Action was validated,
				|but the fields required for automatic start are not filled in.'");
		КонецЕсли;
		
	Иначе
		
		Если ЭтоШаблонПроцесса Тогда
			ТекстПредупреждения = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов.'; en = 'The template was validated and enabled to start processes.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие настроено корректно.'; en = 'Action is configured correctly.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРучнойЗапускОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОшибкиНастроек");
	РезультатПроверки.ОшибкиНастроек = НезаполненныеПоляНеобходимыеДляСтарта();
	ВывестиОшибкиПроверкиДоступности(РезультатПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	Если Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Высокая")
		ИЛИ Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Низкая") Тогда
		УстановитьВажностьВсехЭтапов(Объект.Важность);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантМаршрутизацииПриИзменении(Элемент)
	
	ВариантМаршрутизацииПриИзмененииСервер();
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоСтартаНажатие(Элемент, СтандартнаяОбработка)
	
	СтартПроцессовКлиент.ОписаниеОтложенногоСтартаНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	ТрудозатратыКонтролера = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Контролер'; en = 'Monitor'"),
			"ТрудозатратыПланКонтролера",
			Объект.ТрудозатратыПланКонтролера,
			Объект.Контролер);
	Настройки.Участники.Добавить(ТрудозатратыКонтролера);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормы_Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, Объект.Контролер, СтандартнаяОбработка, ЭтаФорма, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(СтандартнаяОбработка,
		ЭтаФорма, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтаФорма, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, "Контролер");
	
КонецПроцедуры

#КонецОбласти

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеБизнесПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

    Если ЭтаФорма.Объект.ШаблонВКомплексномПроцессе Тогда  
        РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "НаименованиеБизнесПроцесса",
		    ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйНаименование"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Если ЭтаФорма.Объект.ШаблонВКомплексномПроцессе Тогда  
        РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Описание",
		    ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйОписание"));
        КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБизнесПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) и ЭтаФорма.Объект.ШаблонВКомплексномПроцессе Тогда 
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБизнесПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Объект.НаименованиеБизнесПроцесса = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура СрокИсполненияПроцессаПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Схема

&НаКлиенте
Процедура СхемаПриИзменении(Элемент)
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОпределитьИмяТекущегоЭлементаПриИзмененииСхемы(ЭтаФорма);
	
	// При любом изменении схемы процесса всегда обновляем
	// данные о ее элементах. Это нужно для сохранения
	// точного соответствия реквизита Схема и объекта СхемаКомплексногоПроцесса.
	ПодключитьОбработчикОжидания("ОбновитьДанныеСхемыКомплексногоПроцесса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаВыбор(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеНастройкиЭлемента", ЭтотОбъект);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.НастроитьЭлементСхемы(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение СхемаВыбор.
//
&НаКлиенте
Процедура ЗавершениеНастройкиЭлемента(Результат, ДополнительныеПараметры) Экспорт
	
	ОтключитьДоступностьШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаПриАктивизации(Элемент)
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОпределитьИмяТекущегоЭлементаПриАктивизацииСхемы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя <> "ЭтапыПредшественникиЭтапаСтрокой" Тогда
		ИзменитьДействие(Неопределено);
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуНастройкиПредшественниковЭтапа(Объект, Элемент.ТекущиеДанные, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьДействие(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйШаблонПередДобавлениемДействия(ЭтаФорма) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаНовогоДействияКомплексногоПроцессаВФорме(ЭтаФорма);
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуВыбораДействияЭтапа(
		Неопределено, 
		ЭтаФорма, 
		Объект.Ссылка, 
		Объект.Предметы,
		ДатаОтсчета);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)
	
 	Отказ = Истина;
	
	ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	НаЭтапЕстьСсылки = Ложь;
	Для Каждого Строка Из Объект.ПредшественникиЭтапов Цикл
		Если Строка.ИдентификаторПредшественника = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			НаЭтапЕстьСсылки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НаЭтапЕстьСсылки Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание! От данного действия зависит порядок выполнения других действий.
						|Удалить действие ""%1""?';
						|en = 'Attention! There are other actions depending on this one. 
						|Delete action ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	Иначе	
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить действие ""%1""?'; en = 'Delete action ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	КонецЕсли;
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'; en = 'Delete'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не удалять'; en = 'Do not delete'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыПередУдалениемПродолжение", ЭтотОбъект, ДанныеЭтапа);
	
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, Режим, 0, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалениемПродолжение(Ответ, ДанныеЭтапа) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураУдаляемогоЭтапа = Новый Структура();
	СтруктураУдаляемогоЭтапа.Вставить("ЗадачаЭтапа", ДанныеЭтапа.ЗадачаЭтапа);
	СтруктураУдаляемогоЭтапа.Вставить("ИдентификаторЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	Элементы.Этапы.ТекущиеДанные.Удален = Истина;
	ЭтапыКУдалению.Добавить(СтруктураУдаляемогоЭтапа);
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	Для Счетчик = 1 по Объект.Этапы.Количество() - 1 Цикл
		Этап = Объект.Этапы[Счетчик]; 
		Если Не ПустаяСтрока(Этап.ПредшественникиЭтапаСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
		НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
		
		НовыйПредшественникПодобран = Ложь;
		Для Индекс = 1 по Счетчик Цикл
			ДействительныйИндекс = Счетчик - Индекс;
			Если Не Объект.Этапы[ДействительныйИндекс].Удален Тогда
				НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;	
				НовыйПредшественникПодобран = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НовыйПредшественникПодобран Тогда
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();	
		КонецЕсли;
		
		НоваяСтрока.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения");
		
		РеквизитСИзмененнымСроком = "Этапы";
		ИдентификаторыИзмененныхДействий.Добавить(Объект.Этапы[Счетчик].ИдентификаторЭтапа);
	КонецЦикла;
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
	ОбновитьСрокиИсполненияОтложенно();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриИзменении(Элемент)
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)
	
	ДанныеЭтапа = Элемент.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийЭтап = ДанныеЭтапа.ИдентификаторЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПослеУдаления(Элемент)
	
	ПослеУдаленияДействия();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	МультипредметностьКлиент.ПредметыШаблонаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПредметыПриАктивизацииСтрокиОтложенно", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтрокиОтложенно()
	
	МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ТочкиМаршрутаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	
	ТекущаяСтрокаДерева = Элемент.ТекущиеДанные;
	Если ТекущаяСтрокаДерева.Видимость = 2 Тогда 
		ТекущаяСтрокаДерева.Видимость = 0;
	КонецЕсли;
	
	Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ТекущаяСтрокаДерева.ШаблонБизнесПроцесса) Тогда
		ВложенныеЭлементы = ТекущаяСтрокаДерева.ПолучитьЭлементы();
	
		Если ИмяКолонки = "ТочкиМаршрутаВидимость" И ТекущаяСтрокаДерева.Видимость = Ложь Тогда
			ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Ложь;
		ИначеЕсли ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Истина Тогда
			ТекущаяСтрокаДерева.Видимость = Истина;
		КонецЕсли;
		
		ЗаполняемыйУстановлен = Ложь;
		СуммаВидимость = 0;
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			Если ИмяКолонки = "ТочкиМаршрутаВидимость" Тогда
				ВложенныйЭлемент.Видимость = ТекущаяСтрокаДерева.Видимость;
				Если ВложенныйЭлемент.Видимость = Ложь Тогда
					ВложенныйЭлемент.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
			ИначеЕсли ИмяКолонки = "ТочкиМаршрутаОбязательноеЗаполнение" Тогда
				Если ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Истина Тогда
					Если НЕ ЗаполняемыйУстановлен Тогда
						ВложенныйЭлемент.ОбязательноеЗаполнение = Истина;
						ВложенныйЭлемент.Видимость = Истина;
						ЗаполняемыйУстановлен = Истина;
					Иначе
						ВложенныйЭлемент.ОбязательноеЗаполнение = Ложь;
					КонецЕсли;
				Иначе
					ВложенныйЭлемент.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
			КонецЕсли;
			СуммаВидимость = СуммаВидимость + ВложенныйЭлемент.Видимость;
		КонецЦикла;
		
		Если СуммаВидимость = ВложенныеЭлементы.Количество() И ВложенныеЭлементы.Количество() > 0 Тогда
			ТекущаяСтрокаДерева.Видимость = Истина;
		ИначеЕсли СуммаВидимость < ВложенныеЭлементы.Количество() И СуммаВидимость > 0 Тогда
			ТекущаяСтрокаДерева.Видимость = 2;
		КонецЕсли;
			
		СтрокаРодитель = ТекущаяСтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыЭлементДерева") Тогда
			СтрокиРодителя = СтрокаРодитель.ПолучитьЭлементы();
			СуммаВидимость = 0;
			СуммаЗаполнение = 0;
			Для Каждого СтрокаРодителя Из СтрокиРодителя Цикл
				СуммаВидимость = СуммаВидимость + СтрокаРодителя.Видимость;
				Если ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Истина И СтрокаРодителя <> ТекущаяСтрокаДерева Тогда
					СтрокаРодителя.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
				СуммаЗаполнение = СуммаЗаполнение + Число(СтрокаРодителя.ОбязательноеЗаполнение);
			КонецЦикла;
			Если СуммаВидимость = СтрокиРодителя.Количество() Тогда
				СтрокаРодитель.Видимость = Истина;
			ИначеЕсли СуммаВидимость = 0 Тогда
				СтрокаРодитель.Видимость = Ложь;
			Иначе
				СтрокаРодитель.Видимость = 2;
			КонецЕсли;
			Если СуммаЗаполнение = 0 Тогда
				СтрокаРодитель.ОбязательноеЗаполнение = Ложь;
			Иначе
				СтрокаРодитель.ОбязательноеЗаполнение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеТекущегоПредмета = Элементы.Предметы.ТекущиеДанные;
	Если ДанныеТекущегоПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
	ЗаполнитьЗначенияСвойств(СтруктураПредмета, ДанныеТекущегоПредмета);
	
    МультипредметностьКлиент.УстановитьПредметыЗадачПоТочкамМаршрута(ЭтаФорма, Объект, СтруктураПредмета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя = "ТочкиМаршрутаШаблонБизнесПроцесса" Тогда
		
		ОткрытьФормуДействия = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если ИспользоватьСхемуПроцесса Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ШаблонПроцесса", Элементы.ТочкиМаршрута.ТекущиеДанные.ШаблонБизнесПроцесса);
			
			НайденныеПараметры = СхемаКомплексногоПроцесса.ПараметрыДействий.НайтиСтроки(Отбор);
			Если НайденныеПараметры.Количество() > 0 И ЗначениеЗаполнено(НайденныеПараметры[0].ШаблонПроцесса) Тогда
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", НайденныеПараметры[0].Идентификатор);
				ПараметрыФормы.Вставить("КомплексныйПроцесс", ЗначениеЗаполнено(Объект.КомплексныйПроцесс));
				ПараметрыФормы.Вставить("Ключ", НайденныеПараметры[0].ШаблонПроцесса);
			КонецЕсли;
			
			ИмяФормыДляОткрытия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыДействияСхемы(
				ЭтаФорма, НайденныеПараметры[0].ШаблонПроцесса);
			ОткрытьФормуДействия = Истина;
		Иначе
			СтрокиЭтапа = Объект.Этапы.НайтиСтроки(Новый Структура(
				"ШаблонБизнесПроцесса", Элементы.ТочкиМаршрута.ТекущиеДанные.ШаблонБизнесПроцесса));
			Если СтрокиЭтапа.Количество() > 0 Тогда
				
				СтрокаЭтапа = СтрокиЭтапа[0];
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", СтрокаЭтапа.ИдентификаторЭтапа);
				ПараметрыФормы.Вставить("КомплексныйПроцесс", НЕ ЗначениеЗаполнено(СтрокаЭтапа.ИсходныйШаблон));
				ПараметрыФормы.Вставить("Ключ", СтрокаЭтапа.ШаблонБизнесПроцесса);
				
				ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(СтрокаЭтапа.ШаблонБизнесПроцесса);
				ОткрытьФормуДействия = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОткрытьФормуДействия Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДействие(Команда)
	
	Если Элементы.Этапы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйШаблонПередДобавлениемДействия(ЭтаФорма) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если КомплексныйПроцессСтартован И Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЭтапа", Элементы.Этапы.ТекущиеДанные.ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("КомплексныйПроцесс", НЕ ЗначениеЗаполнено(Элементы.Этапы.ТекущиеДанные.ИсходныйШаблон));
	ПараметрыФормы.Вставить("Ключ", Элементы.Этапы.ТекущиеДанные.ШаблонБизнесПроцесса);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	Если Предметы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ПредметыПроцесса", Предметы.ВыгрузитьЗначения());
	КонецЕсли;
	ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(Элементы.Этапы.ТекущиеДанные.ШаблонБизнесПроцесса);
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаДействияКомплексногоПроцессаВФорме(ЭтаФорма);
		ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьОсновной(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы_Схема

&НаКлиенте
Процедура ПроверитьСхемуИНастройки(Команда)
	
	ОчиститьСообщения();
	
	РезультатПроверки = ПроверитьСхемуИНастройкиНаСервере();
	
	Если РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы <> Неопределено Тогда
		
		Если Не РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы.НетОшибок Тогда
			РезультатПроверкиКорректностиСхемы = РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы;
			ОбработатьРезультатПроверкиКорректностиСхемы();
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ОписаниеОшибкиНастройки Из РезультатПроверки.ОшибкиНастроекСхемы Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибкиНастройки,,,
			"Схема");
	КонецЦикла;
	
	ПоказатьПредупреждение(, РезультатПроверки.ОписаниеРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТочныеСрокиПоСхеме(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецШаблона)
		Или ЭтоДействиеШаблонаКомплексногоПроцесса
		Или Не КомплексныйПроцессСтартован Тогда
		
		// Рассчитываем сроки в карточке, если это шаблон (действие шаблона),
		// или действие нестартованного процесса.
		
		Если СрокиИсполненияПроцессовКлиентСерверКОРП.КомандаРасчетаСрокаДоступна(ЭтаФорма) Тогда
			ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
		КонецЕсли;
		
		ОбновитьСрокиИсполненияНаСервере();
		
		ПоказатьПредупреждение(, НСтр("ru = 'Расчет сроков завершен.'; en = 'Calculation is completed'"));
		
	ИначеЕсли КомплексныйПроцессСтартован
		И СостояниеКомплексногоПроцесса = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		
		// Иначе рассчитываем сроки и фиксируем в текущем и подчиненных действиях.
		
		РезультатРассчета = РассчитатьТочныеСрокиПоСхемеНаСервере();
		
		СрокиИсполненияПроцессовКлиентКОРП.ЗаписатьРассчитанныеТочныеСрокиПоСхеме(
			"", РезультатРассчета.АдресХранилищаСРассчитаннымиСроками, ЭтаФорма);
		
	Иначе
		// Других сценариев расчета и обновления сроков не предусмотрено.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выводит диалог выбора варианта редактирования маршрута комплексного процесса/шаблона.
//
&НаКлиенте
Процедура ВыбратьВариантРедактированияМаршрута()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьВыборВариантРедактированияМаршрута", ЭтотОбъект);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВыбратьВариантРедактированияМаршрута(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение ВыбратьВариантРедактированияМаршрута.
//
&НаКлиенте
Процедура ЗавершитьВыборВариантРедактированияМаршрута(Результат, ДополнительныеПараметры) Экспорт
	
	НастроитьДоступностьРедактированияСхемы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Контролер", Истина);
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияДействия()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЭтапыУдалениеСервер()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВажностьВсехЭтапов(ВажностьЭтапов)
	
	Если ИспользоватьСхемуПроцесса Тогда
		Справочники.СхемыКомплексныхПроцессов.УстановитьВажностьШаблонамПроцессов(
			СхемаКомплексногоПроцесса, ВажностьЭтапов);
	Иначе
		Для Каждого Этап Из Объект.Этапы Цикл
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			ШаблонОбъект.Важность = ВажностьЭтапов;
			ШаблонОбъект.Записать();
		КонецЦикла;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиДействия(Параметр)
	
	Результат = РаботаСКомплекснымиБизнесПроцессамиСервер.ПрименитьНастройкиДействия(ЭтаФорма, Параметр);
	РеквизитСИзмененнымСроком = "Этапы";
	ИдентификаторыИзмененныхДействий.Добавить(Результат);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
	ОбновитьСрокиИсполненияНаСервере();
	
	РолиПредметовЭтапов.Загрузить(Мультипредметность.ПолучитьРолиПредметовДействийКомплексногоПроцесса(
		Объект, СхемаКомплексногоПроцесса));
	
	Мультипредметность.ЗаполнитьДеревоТочекПоДействиямПроцесса(ДействияПроцесса, ТочкиМаршрута);
	
КонецПроцедуры

&НаСервере
Процедура ВариантМаршрутизацииПриИзмененииСервер()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ВариантМаршрутизацииПриИзменении(Объект, ЭтапыКУдалению);
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыДляОткрытияДействия(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаСервере
Функция СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(ШаблонБП, ВладелецШаблона) 

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		//Развернем автоподстановки из шаблона в реальных исполнителей
		ИмяПроцесса = Справочники[ШаблонБП.Метаданные().Имя].ИмяПроцесса(ШаблонБП);
		БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Объект.Предметы);
		БизнесПроцессОбъект.Автор = Объект.Автор;
		БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
		БизнесПроцессОбъект.ЗаполнитьПоШаблону(ШаблонБП);
		
		ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
		
		ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
		
	Иначе
		
		ШаблонДляВставкиОбъект = ШаблонБП.Скопировать();
		
	КонецЕсли;
	
	ШаблонДляВставкиОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
	
	Если ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая
		ИЛИ ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		ШаблонДляВставкиОбъект.Важность = ВладелецШаблона.Важность;
	КонецЕсли;

	ШаблонДляВставкиОбъект.Записать();
	ИмяФормыДляОткрытия = ШаблонДляВставкиОбъект.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
	ДанныеВозврата = Новый Структура;
	Данныевозврата.Вставить("ИмяФормыДляОткрытия", ИмяФормыДляОткрытия);
	ДанныеВозврата.Вставить("Шаблон", ШаблонДляВставкиОбъект.Ссылка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		
		Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
		Элементы.ТочкиМаршрута.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрытьФорму.Видимость = Истина;
		Элементы.ФормаЗакрытьФорму.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
		Элементы.ЭтапыИзменитьДействие.Доступность = Ложь;
		Элементы.ЭтапыКонтекстноеМенюИзменитьДействие.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
  ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
  ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


&НаСервере
Процедура УдалитьЭтапы()
	
	Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл 
		РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьЭтап(
			ЭтаФорма,
			ЭтапКУдалению.Значение.ЗадачаЭтапа,
			ЭтапКУдалению.Значение.ИдентификаторЭтапа);
	КонецЦикла;
		
	ЭтапыУдалениеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Схема

// Обновляет данные в схеме комплексного процесса (СхемаКомплексногоПроцесса).
//
&НаКлиенте
Процедура ОбновитьДанныеСхемыКомплексногоПроцесса()
	
	Если РассчитыватьОтносительныйСрок(ЭтаФорма) Тогда
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
		Если Не ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			РеквизитСИзмененнымСроком = "Схема";
		КонецЕсли;
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОбновитьДанныеСхемыКомплексногоПроцесса(ЭтаФорма);
	
	ОтключитьДоступностьШаблона();
	
КонецПроцедуры

// Восстанавливает фокус текущего элемента в схеме процесса.
//
&НаКлиенте
Процедура ВосстановитьФокусТекущегоЭлементаСхемыПроцесса()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТекущегоЭлементаСхемыПроцесса)
		И Элементы.Схема.ТекущийЭлемент = Неопределено Тогда
	
		Элементы.Схема.ТекущийЭлемент = 
			Схема.ЭлементыГрафическойСхемы.Найти(ИмяТекущегоЭлементаСхемыПроцесса);
	КонецЕсли;
	
КонецПроцедуры

// Включает отложенное восстановление фокуса текущего элемента в схеме процесса.
// см. ВосстановитьФокусТекущегоЭлементаСхемыПроцесса
//
&НаКлиенте
Процедура ВосстановитьФокусТекущегоЭлементаСхемыПроцессаОтложенно() Экспорт
	
	ПодключитьОбработчикОжидания("ВосстановитьФокусТекущегоЭлементаСхемыПроцесса", 0.1, Истина);
	
КонецПроцедуры

// Завершает настройку элемента действия в схеме процесса.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцессая - ссылка на действие комплексного процесса.
//  Предметы - Массив - массив структур с полями:
//    ИмяПредмета, Предмет, РольПредмета, ИмяПредметаОснование, ШаблонОснование, ИсходноеИмяПредмета (может отсутствовать).
//
&НаКлиенте
Процедура ЗавершитьНастройкуЭлементаСхемыДействия(Шаблон, Предметы)
	
	Если Элементы.Схема.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьОтносительныйСрок(ЭтаФорма) Тогда
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
		Если Не ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			РеквизитСИзмененнымСроком = "Схема";
		КонецЕсли;
	КонецЕсли;
	
	ПарметрыНовогоШаблона = ЗавершитьНастройкуЭлементаСхемыДействияНаСервере(
		Элементы.Схема.ТекущийЭлемент.Имя, Шаблон, Предметы);
	
	Если ЗначениеЗаполнено(ПарметрыНовогоШаблона.Шаблон)
		И ЗначениеЗаполнено(ПарметрыНовогоШаблона.ИмяФормыДляОткрытия) Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", ПарметрыНовогоШаблона.Шаблон);
		ПараметрыФормы.Вставить("ВладелецШаблона", Объект.Ссылка);
		ПараметрыФормы.Вставить("Предметы", Предметы);
		ОткрытьФорму(ПарметрыНовогоШаблона.ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
	ВосстановитьФокусТекущегоЭлементаСхемыПроцессаОтложенно();
	
КонецПроцедуры

// Завершает настройку элемента действия в схеме процесса на сервере.
// Обертка для функции РаботаСКомплекснымиБизнесПроцессамиСервер.ЗавершитьНастройкуЭлементаСхемыДействия.
//
// Параметры:
//  ИмяДействия - Строка - Имя элемента действия в схеме процесса.
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцессая - ссылка на действие комплексного процесса.
//  Предметы - Массив - массив структур с полями:
//    ИмяПредмета, Предмет, РольПредмета, ИмяПредметаОснование, ШаблонОснование, ИсходноеИмяПредмета (может отсутствовать).
//
// Возвращаемое значение:
//  см. РаботаСКомплекснымиБизнесПроцессамиСервер.ЗавершитьНастройкуЭлементаСхемыДействия
//
&НаСервере
Функция ЗавершитьНастройкуЭлементаСхемыДействияНаСервере(ИмяДействия, Шаблон, Предметы)
	
	РезультатНастройки = РаботаСКомплекснымиБизнесПроцессамиСервер.
		ЗавершитьНастройкуЭлементаСхемыДействия(ЭтаФорма, ИмяДействия, Шаблон, Предметы);
	
	РолиПредметовЭтапов.Загрузить(Мультипредметность.ПолучитьРолиПредметовДействийКомплексногоПроцесса(
		Объект, СхемаКомплексногоПроцесса));
	
	Мультипредметность.ЗаполнитьДеревоТочекПоДействиямПроцесса(ДействияПроцесса, ТочкиМаршрута);
	
	Возврат РезультатНастройки;
	
КонецФункции

// Выполняет проверку корректности схемы.
//
// Возвращаемое значение:
//  Структура
//   * ОписаниеОшибкиНекорректнойСхемы - Структура - см. Справочник.СхемыКомплексныхПроцессов.СхемаКорректна.
//   * ОшибкиНастроекСхемы - Массив - см. Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы.
//   * ОписаниеРезультата - Строка - описание результата.
//
&НаСервере
Функция ПроверитьСхемуИНастройкиНаСервере() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОписаниеОшибкиНекорректнойСхемы", Неопределено);
	РезультатПроверки.Вставить("ОшибкиНастроекСхемы", Неопределено);
	РезультатПроверки.Вставить("ОписаниеРезультата", "");
	
	СсылкаНаОбъект = Объект.Ссылка;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		СсылкаНаОбъект = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(
			Объект.ИдентификаторСсылки);
	КонецЕсли;
	
	// Получим объект схемы из формы.
	СхемаОбъект = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ОбъектСхемыИзДанныхФормы(ЭтаФорма, СсылкаНаОбъект);
		
	// Проверим корректность самой схемы.
	РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы = СхемаОбъект.СхемаКорректна();
	СхемаКорректна = РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы.НетОшибок;
	
	// Проверим корректность настроек элементов схемы.
	РезультатПроверки.ОшибкиНастроекСхемы = 
		Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(СхемаОбъект);
	НетОшибокВНастройках = РезультатПроверки.ОшибкиНастроекСхемы.Количество() = 0;
	
	// Сформируем описание результата.
	Если Не СхемаКорректна Или Не НетОшибокВНастройках Тогда
		РезультатПроверки.ОписаниеРезультата = НСтр("ru = 'Схема не прошла проверку.
			|Исправьте обнаруженные ошибки (см. панель Сообщения).';
			|en = 'Validation of the diagram failed.
			|Fix the detected errors (see the messages panel).'");
	Иначе
		РезультатПроверки.ОписаниеРезультата = НСтр("ru = 'Схема корректна.'; en = 'Diagram is valid.'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Обрабатывает результат проверки схемы (реквизит РезультатПроверкиСхемыПроцесса).
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиКорректностиСхемы()
	
	Если РезультатПроверкиКорректностиСхемы = Неопределено
		Или РезультатПроверкиКорректностиСхемы.НетОшибок Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		РезультатПроверкиКорректностиСхемы.ОписаниеОшибки,, "Схема");
	
	Если ЗначениеЗаполнено(РезультатПроверкиКорректностиСхемы.ИмяЭлемента) Тогда
		Элементы.ГруппаНастройки.ТекущаяСтраница = Элементы.ГруппаМаршрут;
		ИмяТекущегоЭлементаСхемыПроцесса = РезультатПроверкиКорректностиСхемы.ИмяЭлемента;
		ВосстановитьФокусТекущегоЭлементаСхемыПроцессаОтложенно();
	КонецЕсли;
	
	РезультатПроверкиКорректностиСхемы = Неопределено;
	
КонецПроцедуры

// Настраивает доступность редактирования схемы в карточке процесса.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьРедактированияСхемы(Форма)
	
	Если Не Форма.ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	СхемаДоступнаДляРедактирования = Не Форма.ТолькоПросмотр;
	
	Если СхемаДоступнаДляРедактирования Тогда
		
		Если Форма.КомплексныйПроцессЗавершен
			Или Форма.КомплексныйПроцессПомеченНаУдаление
			
			Или Форма.СостояниеКомплексногоПроцесса = 
				ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Прерван")
			
			Или (Форма.КомплексныйПроцессСтартован
				И Форма.СостояниеКомплексногоПроцесса = 
					ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен")) Тогда
			
			
			СхемаДоступнаДляРедактирования = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ПроверитьСхемуИНастройки.Доступность = СхемаДоступнаДляРедактирования;
	Форма.Элементы.ПроверитьСхемуИНастройкиМенюЕще.Доступность = СхемаДоступнаДляРедактирования;
	
	Форма.Элементы.ПроверитьСхемуИНастройки.Видимость = Форма.ЭтоДействиеКомплексногоПроцесса;
	Форма.Элементы.ПроверитьСхемуИНастройкиМенюЕще.Видимость = Форма.ЭтоДействиеКомплексногоПроцесса;
	
	Форма.Элементы.РассчитатьТочныеСрокиПоСхеме.Доступность = СхемаДоступнаДляРедактирования;
	
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		// В веб-клиенте схема не доступна для редактирования.
		Форма.Элементы.Схема.ТолькоПросмотр = Истина;
	Иначе
		Форма.Элементы.Схема.ТолькоПросмотр = Не СхемаДоступнаДляРедактирования;
		Форма.Схема.ИспользоватьСетку = СхемаДоступнаДляРедактирования;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	РассчитатьОтносительныйСрок = РассчитыватьОтносительныйСрок(ЭтаФорма);
	РассчитьтатьТочныйСрок = Ложь;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков)
		И (Не КомплексныйПроцессСтартован
			Или ЗначениеЗаполнено(РеквизитСИзмененнымСроком)) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
	КонецЕсли;
	
	Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
	
	Если РассчитатьОтносительныйСрок Тогда
		
		Если ИспользоватьСхемуПроцесса Тогда
			
			СрокиИсполненияПроцессовКлиентСерверКОРП.
				ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
					СхемаКомплексногоПроцесса.ПараметрыДействий,
					СхемаКомплексногоПроцесса.ЭлементыСхемы,
					КэшДанныхДействий);
				
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				СхемаКомплексногоПроцесса, Смещение);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Объект, Смещение);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДлительностьИсполнения);
		
	КонецЕсли;
	
	Если РассчитьтатьТочныйСрок Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		ПараметрыДляРасчетаСроков.Смещение = Смещение;
		
		Если ИспользоватьСхемуПроцесса Тогда
			СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцессаВКарточке(
				Объект, СхемаКомплексногоПроцесса, ПараметрыДляРасчетаСроков);
		Иначе
			СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцессаВКарточке(
				Объект,, ПараметрыДляРасчетаСроков, ИдентификаторыИзмененныхДействий.ВыгрузитьЗначения());
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РассчитатьОтносительныйСрок И Не РассчитьтатьТочныйСрок Тогда
		Если ИспользоватьСхемуПроцесса Тогда
			СрокиИсполненияПроцессовКлиентСерверКОРП.
				ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
					СхемаКомплексногоПроцесса.ПараметрыДействий,
					СхемаКомплексногоПроцесса.ЭлементыСхемы,
					КэшДанныхДействий);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитСИзмененнымСроком = "";
	ИдентификаторыИзмененныхДействий.Очистить();
	
	СрокиИсполненияПроцессовКлиентСерверКОРП.
		ЗаполнитьПредставлениеСроковИсполненияВФормеКомплексногоПроцесса(ЭтаФорма);
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

// Рассчитывает точные сроки комплексного процесса по данным схемы в карточке процесса/шаблона.
// Рассчитанный результата сохраняет во временном хранилище.
//
&НаСервере
Функция РассчитатьТочныеСрокиПоСхемеНаСервере()
	
	Возврат СрокиИсполненияПроцессовКОРП.РассчитатьТочныеСрокиКомплексногоПроцессаПоСхеме(ЭтаФорма);
	
КонецФункции

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(ИмяРеквизитаСИзмененнымСроком = "") Экспорт
	
	Если ИмяРеквизитаСИзмененнымСроком = "ОписаниеОтложенногоСтарта" Тогда
		РеквизитСИзмененнымСроком = ИмяРеквизитаСИзмененнымСроком;
		ИдентификаторыИзмененныхДействий.Добавить(УникальныйИдентификаторПустой());
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтаФорма);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаКлиенте
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	ОбновитьФормуПослеПереносаСроковИсполненияНаСервере();
	
	// Обновляем свойство ТолькоПросмотр 2 раза (вначале на противоположное, потом обратно),
	// т.к. иногда платформа не обновляет его.
	Элементы.Схема.ТолькоПросмотр = Не Элементы.Схема.ТолькоПросмотр;
	Элементы.Схема.ТолькоПросмотр = Не Элементы.Схема.ТолькоПросмотр;
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий на сервере.
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполненияНаСервере() Экспорт
	
	Прочитать();
	Если Не ИспользоватьСхемуПроцесса Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	КонецЕсли;
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Очищает дату расчета сроков.
//
// Параметры:
//  Форма - УправляемаяФорма - карточка текущего шаблона.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДатуОтсчетаДляРасчетаСроков(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона) Тогда
		Форма.ДатаОтсчетаДляРасчетаСроков = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает необходимость расчета относительного срока.
//
// Параметры:
//  УправляемаяФорма - текущая форма.
//
&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьОтносительныйСрок(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона)
		Или Форма.ЭтоДействиеШаблонаКомплексногоПроцесса
		Или (Форма.ЭтоДействиеКомплексногоПроцессаПоШаблону И Не Форма.КомплексныйПроцессСтартован) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения действия истек (Этапы)'; en = 'Action due date is expired (Stages)'"),
		"Объект.Этапы.СрокИсполненияПроцессаИстек",
		"СрокИсполненияДействияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'; en = 'Process due date is expired'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	Если ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Для Каждого Этап Из Объект.Этапы Цикл
			Этап.СрокИсполненияПроцессаИстек = Ложь;
			Если ЗначениеЗаполнено(Этап.СрокИсполненияПроцесса)
				И Этап.СрокИсполненияПроцесса < ТекущаяДатаСеанса Тогда
				
				Этап.СрокИсполненияПроцессаИстек = Истина;
			КонецЕсли;
		КонецЦикла;
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			Объект.СрокИсполненияПроцесса, ТекущаяДатаСеанса, СрокИсполненияПроцессаИстек);
	Иначе
		Для Каждого Этап Из Объект.Этапы Цикл
			Этап.СрокИсполненияПроцессаИстек = Ложь;
		КонецЦикла;
		СрокИсполненияПроцессаИстек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДоступностьШаблоновПроцессов

// Помещает доступность шаблона процесса в карточку.
//
&НаСервере
Процедура ПрочитатьДоступностьШаблона()
	
	ШаблоныБизнесПроцессов.ПрочитатьДоступностьШаблона(ЭтаФорма);
	
КонецПроцедуры

// Записывает доступность шаблона процесса из карточки.
//
// Параметры:
//  ШаблонОбъект - СправочникОбъект.<ИмяШаблонаПроцесса> - объект шаблона процесса.
//
&НаСервере
Процедура ЗаписатьДоступностьШаблона(ШаблонОбъект)
	
	Если Не ЗначениеЗаполнено(ШаблонОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоДействиеКомплексногоПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступенРучнойЗапускПоШаблону Тогда
		// Если доступен ручной запуск, то обновляем автоматический перед
		// записью, т.к. он мог быть изменен обновлением доступности подчиненных шаблонов.
		// Доступность ручного запуска всегда определяется в карточке шаблона.
		ДоступенАвтоматическийЗапускПоШаблону = 
			ШаблоныБизнесПроцессов.ДоступностьАвтоматическогоЗапускаШаблонаКомплексногоПроцесса(
				ШаблонОбъект.Ссылка);
	Иначе
		// Если для шаблона недоступен ручной запуск, недоступен и автоматический.
		ДоступенАвтоматическийЗапускПоШаблону = Ложь;
	КонецЕсли;
	
	ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблона(
		ШаблонОбъект.Ссылка,
		ДоступенАвтоматическийЗапускПоШаблону,
		ДоступенРучнойЗапускПоШаблону);
		
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(ЭтаФорма);
	
КонецПроцедуры

// Проверяет доступность шаблона и помещает результат в реквизиты
// ДоступенРучнойЗапускПоШаблону, ДоступенАвтоматическийЗапускПоШаблону.
//
// Параметры:
//  ЗаписатьДоступность - Булево - определяет необходимость записи доступности в базу
//                                 после проверки.
//
// Возвращаемое значение:
//  Структура:
//   * ОписаниеОшибкиНекорректнойСхемы - Структура - описание ошибки проверки схемы.
//                                       см. функцию СхемаКорректна модуля объекта схемы.
//   * ОшибкиНастроек - Массив - массив строк с описанием ошибок заполнения настроек.
//
&НаСервере
Функция ПроверитьДоступностьШаблона(ЗаписатьДоступность = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОписаниеОшибкиНекорректнойСхемы");
	РезультатПроверки.Вставить("ОшибкиНастроек");
	
	Если ИспользоватьСхемуПроцесса Тогда
		
		// Получим ссылку на процесс.
		СсылкаНаШаблон = Объект.Ссылка;
		Если Не ЗначениеЗаполнено(СсылкаНаШаблон) Тогда
			СсылкаНаШаблон = 
				Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(Объект.ИдентификаторСсылки);
		КонецЕсли;
		
		// Получим объект схемы из формы.
		СхемаОбъект = РаботаСКомплекснымиБизнесПроцессамиСервер.ОбъектСхемыИзДанныхФормы(
			ЭтаФорма, СсылкаНаШаблон);
		
		// Проверим корректность самой схемы.
		РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы = СхемаОбъект.СхемаКорректна();
		
		// Проверим корректность настроек элементов схемы.
		РезультатПроверки.ОшибкиНастроек = 
			Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(СхемаОбъект);
		
		// Для ручного запуска достаточно отсутствия ошибок в схеме.
		ДоступенРучнойЗапускПоШаблону = РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы.НетОшибок;
		
		// Для автоматического запуска должна быть корректна схема и ее настройки.
		ДоступенАвтоматическийЗапускПоШаблону = 
			(РезультатПроверки.ОшибкиНастроек.Количество() = 0
				И РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы.НетОшибок);
		
	Иначе
		
		ДоступенРучнойЗапускПоШаблону = Истина;
		
		ШаблонОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов"));
		
		РезультатПроверки.ОшибкиНастроек = 
			ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		
		ДоступенАвтоматическийЗапускПоШаблону = 
			(РезультатПроверки.ОшибкиНастроек.Количество() = 0);
		
	КонецЕсли;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(ЭтаФорма);
	
	Если ЗаписатьДоступность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблона(
			Объект.Ссылка,
			ДоступенАвтоматическийЗапускПоШаблону,
			ДоступенРучнойЗапускПоШаблону);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выводить ошибки проверки доступности с привязкой к соотвествующим полям.
//
// Параметры:
//  РезультатПроверки - Структура - см. ПроверитьДоступностьШаблона
//
&НаКлиенте
Процедура ВывестиОшибкиПроверкиДоступности(РезультатПроверки)
	
	Если РезультатПроверки.Свойство("ОписаниеОшибкиНекорректнойСхемы") Тогда
		Если РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы <> Неопределено
			И Не РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы.НетОшибок Тогда
			
			РезультатПроверкиКорректностиСхемы = РезультатПроверки.ОписаниеОшибкиНекорректнойСхемы;
		КонецЕсли;
		ОбработатьРезультатПроверкиКорректностиСхемы();
	КонецЕсли;
	
	Если РезультатПроверки.ОшибкиНастроек.Найти(
		"Этапы") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В шаблоне отсутствуют действия.'; en = 'There are no actions in the template.'"),,,
			"Объект.Этапы");
	Иначе
		
		Если ИспользоватьСхемуПроцесса Тогда
			ПутьКДанным = "Схема";
		Иначе 
			ПутьКДанным = "Объект.Этапы";
		КонецЕсли;
		
		Для Каждого ОписаниеОшибкиНастройки Из РезультатПроверки.ОшибкиНастроек Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОписаниеОшибкиНастройки,,,
				ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает незаполненные поля необходимы для старта.
//
// Возвращаемое значение:
//  Массив - массив строк с ошибками заполнения.
//
&НаСервере
Функция НезаполненныеПоляНеобходимыеДляСтарта()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИспользоватьСхемуПроцесса Тогда
		
		// Получим ссылку на процесс.
		СсылкаНаШаблон = Объект.Ссылка;
		Если Не ЗначениеЗаполнено(СсылкаНаШаблон) Тогда
			СсылкаНаШаблон = 
			Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(Объект.ИдентификаторСсылки);
		КонецЕсли;
	
		// Получим объект схемы из формы.
		СхемаОбъект = РаботаСКомплекснымиБизнесПроцессамиСервер.ОбъектСхемыИзДанныхФормы(
			ЭтаФорма, СсылкаНаШаблон);
		
		ОшибкиНастроек = 
			Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(СхемаОбъект);
		
	Иначе
		
		ШаблонОбъект = ДанныеФормыВЗначение(
			Объект, Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов"));
	
		ОшибкиНастроек = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		
	КонецЕсли;
	
	Возврат ОшибкиНастроек;
	
КонецФункции

// Сбрасывает доступность в карточке шаблона процесса.
//
&НаКлиенте
Процедура ОтключитьДоступностьШаблона()
	
	ШаблоныБизнесПроцессовКлиент.ОтключитьДоступностьШаблона(ЭтаФорма);
	
	НеПоказыватьВопросОНедоступномШаблоне = Ложь;
	
КонецПроцедуры

// Инициализирует вопрос о недоступном шаблоне.
// Предназначена для вызова из обработчика ПередЗакрытием.
//
// Параметры:
//  Отказ - Булево - стандартный параметр обработчика ПередЗакрытием.
//
&НаКлиенте
Процедура ПоказатьВопросОНедоступномШаблоне(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомплексныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступенРучнойЗапускПоШаблону Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПоказыватьВопросОНедоступномШаблоне = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеГруппыДоступности(ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьВопросОНедоступномШаблоне", ЭтотОбъект);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ПроверитьИЗакрыть", НСтр("ru = 'Проверить и закрыть'; en = 'Validate and close'"));
	Кнопки.Добавить("ЗакрытьБезПроверки", НСтр("ru = 'Закрыть без проверки'; en = 'Close without validation'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	КнопкаПоУмолчанию = "ПроверитьИЗакрыть";
	
	ЭтоШаблонПроцесса = Не ЗначениеЗаполнено(Объект.ВладелецШаблона);
	
	Если ЭтоШаблонПроцесса Тогда
		ТекстВопроса = НСтр("ru = 'Шаблон недоступен для запуска процессов, так как не пройдена проверка.'; en = 'The template is disabled because the validation was not performed.'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Действие содержит непроверенные настройки.
			|Проверьте действие для корректной работы процессов по этому шаблону.';
			|en = 'The action contains unvalidated settings.
			|Validate the action for the processes to function properly.'");
	КонецЕсли;
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		Кнопки,,
		КнопкаПоУмолчанию);
	
КонецПроцедуры

// Продолжение процедуры ПоказатьВопросОНедоступномШаблоне.
//
&НаКлиенте
Процедура ПродолжитьВопросОНедоступномШаблоне(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Ответ) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = "ПроверитьИЗакрыть" Тогда
		
		РезультатПроверки = ПроверитьДоступностьШаблона(Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьВопросОНедоступномШаблоне", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений;
		
		ЭтоШаблонПроцесса = Не ЗначениеЗаполнено(Объект.ВладелецШаблона);
		
		Если ДоступенРучнойЗапускПоШаблону Тогда
			
			ОповеститьОбИзменении(Объект.Ссылка);
			
			Кнопки.Добавить("Закрыть", НСтр("ru = 'ОК'; en = 'ОК'"));
			КнопкаПоУмолчанию = "Закрыть";
			
			Если ДоступенАвтоматическийЗапускПоШаблону Тогда
				
				Если ЭтоШаблонПроцесса Тогда
					ТекстВопроса = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов.'; en = 'The template was validated and enabled to start processes.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Действие настроено корректно.'; en = 'Action is configured correctly.'");
				КонецЕсли;
			Иначе
				
				Если ЭтоШаблонПроцесса Тогда
					ТекстВопроса = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов вручную.
						|Для автоматического запуска процессов заполните обязательные поля.';
						|en = 'The template was validated and enabled to start processes manually.
						|To start processes automatically fill in the required fields.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Действие прошло проверку.
						|Но не заполнены поля для автоматического запуска.';
						|en = 'Action was validated,
						|but the fields required for automatic start are not filled in.'");
				КонецЕсли;
				
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'; en = 'Cancel'"));
				
			КонецЕсли;
			
		Иначе
			
			ВывестиОшибкиПроверкиДоступности(РезультатПроверки);
			
			Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'; en = 'Close'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'; en = 'Cancel'"));
			КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
			
			Если ЭтоШаблонПроцесса Тогда
				ТекстВопроса = НСтр("ru = 'Шаблон не прошел проверку.
					|Исправьте обнаруженные ошибки (см. панель Сообщения).';
					|en = 'Template validation failed. 
					|fix the detected errors (see messages Panel).'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Действие не прошло проверку.
					|Исправьте обнаруженные ошибки (см. панель Сообщения).';
					|en = 'Validation of the action failed.
					|Fix the detected errors (see the messages panel).'");
			КонецЕсли;
			
		КонецЕсли;
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			Кнопки,,
			КнопкаПоУмолчанию);
		
	ИначеЕсли Ответ = "ЗакрытьБезПроверки" Тогда
		НеПоказыватьВопросОНедоступномШаблоне = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПродолжитьВопросОНедоступномШаблоне.
//
&НаКлиенте
Процедура ЗавершитьВопросОНедоступномШаблоне(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "Закрыть" Тогда
		НеПоказыватьВопросОНедоступномШаблоне = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
