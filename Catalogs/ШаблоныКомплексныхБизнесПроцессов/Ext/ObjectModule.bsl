
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если ЗначениеЗаполнено(Схема) Тогда
		
		СхемаОбъект = Схема.ПолучитьОбъект();
		РезультатПроверкиСхемы = СхемаОбъект.СхемаКорректна();
		
		ОшибкиНастроекСхемы = 
			Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(Схема);
		
		Если Не РезультатПроверкиСхемы.НетОшибок Или ОшибкиНастроекСхемы.Количество() > 0 Тогда
			МассивПолей.Добавить("Схема");
		КонецЕсли;
		
	Иначе
	
		Если Этапы.Количество() = 0 Тогда
			МассивПолей.Добавить("Этапы");
		КонецЕсли;
		
		Для Каждого Шаблон Из Этапы Цикл
			
			Если ЗначениеЗаполнено(Шаблон.ШаблонБизнесПроцесса) Тогда
				
				ШаблонОбъект = Шаблон.ШаблонБизнесПроцесса.ПолучитьОбъект();
				
				МассивПолейШаблона = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
				Если МассивПолейШаблона.Количество() <> 0 Тогда
					
					ВсеПоляСтрокой = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолейШаблона);
					СтрокаПолей = Строка(Шаблон.ШаблонБизнесПроцесса) + ": " + НСтр("ru='Ошибка заполнения: '; en = 'Filling error: '") + ВсеПоляСтрокой;
					МассивПолей.Добавить(СтрокаПолей);
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;

	Возврат МассивПолей;
	
КонецФункции	

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если ЗначениеЗаполнено(НаименованиеБизнесПроцесса) Тогда
		Результат = Результат + НСтр("ru = 'Заголовок'; en = 'Title'") + ": " + НаименованиеБизнесПроцесса + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		Результат = Результат + НСтр("ru = 'Описание'; en = 'Details'") + ": " + Описание + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Важность) Тогда
		Результат = Результат + НСтр("ru = 'Важность'; en = 'Importance'") + ": " + Строка(Важность) + Символы.ПС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Схема) Тогда
	
		ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(ЭтотОбъект);
		ДлительностьПроцессаСтрокой = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
			ДлительностьПроцесса.СрокИсполненияПроцессаДни,
			ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
			ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
			
		Если ЗначениеЗаполнено(ДлительностьПроцессаСтрокой) Тогда
			Результат = Результат + Нстр("ru = 'Срок'; en = 'Due date'") + ": "
				+ ДлительностьПроцессаСтрокой;
	КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаМеханизмаОтсутствий

// Получает исполнителей
Функция ПолучитьИсполнителей() Экспорт
	
	МассивИсполнителей = Новый Массив;
	
	Если ЗначениеЗаполнено(Схема) Тогда
		
		МассивИсполнителей = Справочники.СхемыКомплексныхПроцессов.ИсполнителиДействий(Схема);
		
	Иначе
		
		Для Каждого РабочийЭтап Из Этапы Цикл
			
			РабочийШаблон = РабочийЭтап.ШаблонБизнесПроцесса;
			Если Не ЗначениеЗаполнено(РабочийШаблон) Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонОбъект = РабочийШаблон.ПолучитьОбъект();
			Если ШаблонОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИсполнителиЭтапа = ШаблонОбъект.ПолучитьИсполнителей();
			Для Каждого Исполнитель Из ИсполнителиЭтапа Цикл
				МассивИсполнителей.Добавить(Исполнитель);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивИсполнителей;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КомплексныйПроцессДействия = Неопределено;
	
	ВладелецВерхнегоУровня = РаботаСКомплекснымиБизнесПроцессамиСервер.ВладелецВерхнегоУровня(ЭтотОбъект);
	Если ТипЗнч(ВладелецВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		КомплексныйПроцессДействия = ВладелецВерхнегоУровня;
	КонецЕсли;
	
	// Проверку заполнения и отказ в случае ошибок, выполняем только 
	// для действий принадлежащих комплексным процессам.
	Если Не ЗначениеЗаполнено(КомплексныйПроцессДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Схема) Тогда
		
		// Проверяем корректность схемы и настроек элементов,
		// только если действие принадлежит выполняющемуся комплексному процессу.
		// Если процесс не выполняется, то проверку действия не выполняем, т.к. схема действия
		// может быть сложной и в процессе настройке нужна возможность записи.
		// Проверка схемы текущего действия будет выполнена перед стартом/продолжением комплексного процесса.
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомплексныйПроцессДействия, "Стартован, Завершен, Состояние");
		
		НастройкиСтарта = РегистрыСведений.ПроцессыДляЗапуска.ПолучитьСведенияОЗапускеПроцесса(
			КомплексныйПроцессДействия);
		АктивнаНастройкаФоновогоСтарта = НастройкиСтарта <> Неопределено
			И НастройкиСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту;
		
		Если Не РеквизитыПроцесса.Завершен
			И РеквизитыПроцесса.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен
			И (РеквизитыПроцесса.Стартован Или АктивнаНастройкаФоновогоСтарта) Тогда
			
			СхемаОбъект = Схема.ПолучитьОбъект();
			
			РезультатПроверкиСхемы = СхемаОбъект.СхемаКорректна();
			Если Не РезультатПроверкиСхемы.НетОшибок Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					РезультатПроверкиСхемы.ОписаниеОшибки,
					ЭтотОбъект,,
					"Схема",
					Отказ);
			КонецЕсли;
			
			ОшибкиНастроекСхемы = 
				Справочники.СхемыКомплексныхПроцессов.ОшибкиЗаполненияНастроекЭлементовСхемы(Схема);
			Для Каждого ОшибкаНастройкиСхемы Из ОшибкиНастроекСхемы Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОшибкаНастройкиСхемы,
					ЭтотОбъект,,
					"Схема",
					Отказ);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		// Проверяем корректность заполнения этапов, если действие принадлежит комплексному процессу.
		// В этом случаях считаем недопустимым сохранение шаблона с некорректными настройками
		// действий.
		
		Если Этапы.Количество() = 0 Тогда
			ПроверяемыеРеквизиты.Добавить("Этапы");
		КонецЕсли;
		
		Для Каждого Этап Из Этапы Цикл
			
			МассивПолей = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				Если МассивПолей.Найти("Схема") <> Неопределено Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Схема действия %1 ""%2"" настроена неверно. Проверьте схему.'; en = 'Diagram action %1 ""%2"" is configured incorrectly. Validate the diagram'"),
						Этап.НомерСтроки,
						Строка(Этап.ШаблонБизнесПроцесса))
					
				Иначе
					
					СтрокаНезаполненныеПоля = СтрСоединить(МассивПолей, ", ");
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'При настройке этапа %1 ""%2"" не заполнены необходимые для запуска поля: %3.'; en = 'While configuring %1 ""%2"" stage the required fields were not filled in: %3.'"),
						Этап.НомерСтроки,
						Строка(Этап.ШаблонБизнесПроцесса),
						СтрокаНезаполненныеПоля);
					
				КонецЕсли;
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Этапы",,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоШаблона();
	
	ШаблоныБизнесПроцессов.ШаблонПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Схема) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьПорядокСортировкиЭтапов(ЭтотОбъект);
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбновитьРеквизитыСлужебныхШаблонов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбновитьРеквизитыСлужебныхШаблонов = (ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
		
		Если Не ТолькоОбновитьРеквизитыСлужебныхШаблонов Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Схема) И ОбычнаяЗапись Или ТолькоОбновитьРеквизитыСлужебныхШаблонов Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Обновление служебных реквизитов КП в подчиненных шаблонах.
		Для Каждого Этап Из Этапы Цикл
			
			РеквизитыШаблонаЭтапа = ОбщегоНазначенияДокументооборот.
				ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
					Этап.ШаблонБизнесПроцесса, "ВладелецШаблона, КомплексныйПроцесс");
			
			ВладелецШаблонаЭтапа = РеквизитыШаблонаЭтапа.ВладелецШаблона;
			КомплексныйПроцессЭтапа = РеквизитыШаблонаЭтапа.КомплексныйПроцесс;
			
			Если ВладелецШаблонаЭтапа <> Ссылка
				Или КомплексныйПроцессЭтапа <> КомплексныйПроцесс Тогда
				
				ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
				ШаблонОбъект.ВладелецШаблона = Ссылка;
				ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
					"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
	
		ПометкаУдаленияСсылки = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
		Если ПометкаУдаления <> ПометкаУдаленияСсылки Тогда
			Если ЗначениеЗаполнено(Схема) Тогда
				УстановитьПривилегированныйРежим(Истина);
				Схема.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				УстановитьПометкуУдаленияЭтапов(ПометкаУдаления);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Схема) Тогда
			УдалитьНепривязанныеДействия();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторСсылки = УникальныйИдентификаторПустой();
	
	СсылкаНаШаблон = СсылкаНаШаблон();
	
	Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Схема) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СхемаОбъект = Справочники.СхемыКомплексныхПроцессов.СоздатьЭлемент();
		СхемаОбъект.ВладелецСхемы = СсылкаНаШаблон;
		СхемаОбъект.КомплексныйПроцесс = ОбъектКопирования.КомплексныйПроцесс;
		СхемаОбъект.ЗаполнитьНастройкиПоСхеме(ОбъектКопирования.Схема);
		СхемаОбъект.Записать();
		Схема = СхемаОбъект.Ссылка;
		
		// Обновим ссылки шаблонов в таблице ПредметыЗадач
		КэшПараметровДействий = Новый Соответствие;
		Для Каждого ПараметрыДействия Из СхемаОбъект.ПараметрыДействий Цикл
			КэшПараметровДействий.Вставить(ПараметрыДействия.Идентификатор, ПараметрыДействия);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ПредметыЗадач Цикл
			ПараметрыДействия = КэшПараметровДействий.Получить(СтрокаТаблицы.ИдентификаторЭтапа);
			Если ПараметрыДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.ШаблонБизнесПроцесса = ПараметрыДействия.ШаблонПроцесса;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
	
		Для Каждого ЭтапОбъектаКопирования Из ОбъектКопирования.Этапы Цикл
			Для Каждого ЭтапПроцесса Из Этапы Цикл
				
				Если ЭтапПроцесса.ИдентификаторЭтапа <> ЭтапОбъектаКопирования.ИдентификаторЭтапа
					Или Не ЗначениеЗаполнено(ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
					
					Продолжить;
				КонецЕсли;
				
				КопируемыйШаблонОбъект = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ПолучитьОбъект();
				
				ШаблонЯвляетсяЧастьюКомплексногоПроцесса = 
					ЗначениеЗаполнено(КопируемыйШаблонОбъект.КомплексныйПроцесс);
				
				КопируемыйШаблонОбъект.КомплексныйПроцесс = КомплексныйПроцесс;
				
				НовыйШаблон = КопируемыйШаблонОбъект.Скопировать();
				НовыйШаблон.ВладелецШаблона = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПустаяСсылка();
				НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
				НовыйШаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
				
				Если ЗначениеЗаполнено(КомплексныйПроцесс) Тогда
					Если Не ШаблонЯвляетсяЧастьюКомплексногоПроцесса Тогда
						НовыйШаблон.ИсходныйШаблон = КопируемыйШаблонОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(НовыйШаблон,
					"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
				СтрокиЭтаповШаблона = ПредметыЗадач.НайтиСтроки(
					Новый Структура("ИдентификаторЭтапа", ЭтапПроцесса.ИдентификаторЭтапа));
				
				Для Каждого СтрокаЭтапаШаблона Из СтрокиЭтаповШаблона Цикл
					СтрокаЭтапаШаблона.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
				КонецЦикла;
				
				ЭтапПроцесса.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
				
			КонецЦикла;
		КонецЦикла;
		
		ПредшественникиЭтапов.Очистить();
		ВариантМаршрутизации = ОбъектКопирования.ВариантМаршрутизации;
		Для Каждого СтрокаПредшественник Из ОбъектКопирования.ПредшественникиЭтапов Цикл
			НоваяСтрока = ПредшественникиЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредшественник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает ссылку на шаблон.
//
Функция СсылкаНаШаблон() Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаНаПроцесс = Ссылка;
	Иначе
		СсылкаНаПроцесс = ОпределитьСсылкуДляНовогоШаблона();
	КонецЕсли;
	
	Возврат СсылкаНаПроцесс;
	
КонецФункции

// Возвращает ссылку для нового, незаписанного шаблона.
//
Функция ОпределитьСсылкуДляНовогоШаблона()
	
	Если ЗначениеЗаполнено(Ссылка) Или ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНового = ПолучитьСсылкуНового();
	Если Не ЗначениеЗаполнено(СсылкаНового) Тогда
		
		Если Не ЗначениеЗаполнено(ИдентификаторСсылки) Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СсылкаНового = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(ИдентификаторСсылки);
		
		УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Возврат СсылкаНового;
	
КонецФункции

Процедура УстановитьПометкуУдаленияЭтапов(Установить)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
			Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().УстановитьПометкуУдаления(Установить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Установка пометки удаления у шаблонов, которые были созданы, но не прикреплены к комплексному процессу.
// Например, создали шаблон комплексного процесса, добавили действие, а затем не сохранили шаблон комплексного процесса.
Процедура УдалитьНепривязанныеДействия()
	
	Запрос = Новый Запрос;
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.%1 КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ЭтапыПроцесса
		|		ПО (ЭтапыПроцесса.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка)
		|ГДЕ
		|	ШаблоныПроцессов.ВладелецШаблона = &ВладелецШаблона
		|	И ЭтапыПроцесса.Ссылка ЕСТЬ NULL ";
	ТипыШаблонов = ЭтотОбъект.Метаданные().ТабличныеЧасти.Этапы.Реквизиты.ШаблонБизнесПроцесса.Тип.Типы();
	Для Каждого Тип Из ТипыШаблонов Цикл
		ШаблонОбъект = Новый(Тип);
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗапроса,
			ШаблонОбъект.Метаданные().Имя);
		Запрос.УстановитьПараметр("ВладелецШаблона", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонДляУдаления = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонДляУдаления.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли









