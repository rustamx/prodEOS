#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей папки файлов
//
// Возвращаемое значение:
//   Структура
//     Родитель
//     Наименование
//     Описание
//     Ответственный
//     ДатаСоздания
//
Функция ПолучитьСтруктуруПапки() Экспорт
	
	ПараметрыПапки = Новый Структура;
	ПараметрыПапки.Вставить("Родитель");
	ПараметрыПапки.Вставить("Наименование");
	ПараметрыПапки.Вставить("Описание");
	ПараметрыПапки.Вставить("Ответственный");
	ПараметрыПапки.Вставить("ДатаСоздания");
	
	Возврат ПараметрыПапки;
	
КонецФункции

// Создает и записывает в БД папку файлов
//
// Параметры:
//   СтруктураПапкиФайлов - Структура - структура полей папки.
//
// Возвращаемое значение - ссылка на созданную папку
//
Функция СоздатьПапку(СтруктураПапкиФайлов) Экспорт
	
	НоваяПапка = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяПапка, СтруктураПапкиФайлов);
	НоваяПапка.Записать();
	
	Возврат НоваяПапка.Ссылка;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Описание");
	РедактируемыеРеквизиты.Добавить("Ответственный");
	РедактируемыеРеквизиты.Добавить("ДатаСоздания");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДокументооборотПраваДоступа.ЗаполнитьНастройкиДескриптора(ДескрипторДоступа, ОбъектДоступа);

КонецПроцедуры	

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПраваПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к указанным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ТаблицаПравПользователейПоОбъектам();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	ДескрипторыДляОбъектов.Дескриптор КАК ДескрипторПапки
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиФайлов КАК ПапкиФайлов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|			ПО ПапкиФайлов.Ссылка = ДескрипторыДляОбъектов.Объект
		|		ПО Файлы.ВладелецФайла = ПапкиФайлов.Ссылка
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)");
	
	Запрос.УстановитьПараметр("Файлы", Файлы);
	
	ТаблицаФайловСДескрипторами = Запрос.Выполнить().Выгрузить();
	ТаблицаФайловСДескрипторами.Индексы.Добавить("ДескрипторПапки");
	
	Дескрипторы = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Дескрипторы, ТаблицаФайловСДескрипторами.ВыгрузитьКолонку("ДескрипторПапки"));
	
	// Получение прав по дескрипторам папок, но по правилам обработки для файлов.
	Запрос = Новый Запрос;
	Запрос = Справочники.ПапкиФайлов.ЗапросДляРасчетаПрав(
		Дескрипторы,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ПапкиФайлов),
		Справочники.ПапкиФайлов);
		
	Если Пользователи <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ПО НовыеПрава.Пользователь = СоставСубъектовПравДоступа.Субъект",
			"ПО НовыеПрава.Пользователь = СоставСубъектовПравДоступа.Субъект
			|И СоставСубъектовПравДоступа.Пользователь В (&Пользователи)");
	КонецЕсли;
	
	ПравилаОбработкиНастроекПапки = Справочники.Файлы.ПолучитьПравилаОбработкиНастроекПравПапки();
	Запрос.УстановитьПараметр("ПравилаОбработкиНастроекПапки", ПравилаОбработкиНастроекПапки);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	ВыборкаПоДескрипторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("ДескрипторПапки", ВыборкаПоДескрипторам.Дескриптор);
		СтрокиФайлов = ТаблицаФайловСДескрипторами.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаФайла Из СтрокиФайлов Цикл
			
			Выборка = ВыборкаПоДескрипторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Стр = ТаблицаПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Стр, Выборка);
				Стр.ОбъектДоступа = СтрокаФайла.Файл;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Файлы);
	ДокументооборотПраваДоступа.РасширитьТаблицуПравНеограниченнымиПравами(
		ТаблицаПрав, ИдентификаторОМ, Файлы, Пользователи);
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Справочники.ДескрипторыДоступаОбъектов.ЗапросДляСтандартногоРасчетаПрав(
		Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа, Истина, Ложь);
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравПапок();
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИФайлов";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапок";
	Стр.Добавление = Истина;
	Стр.Изменение = Истина;
	Стр.Удаление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "УправлениеПравами";
	Стр.УправлениеПравами = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

#КонецОбласти

#КонецЕсли
