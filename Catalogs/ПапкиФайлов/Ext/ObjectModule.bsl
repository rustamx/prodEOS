#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		//Проверка установки пометки удаления для предопределенного элемента.
		Если Предопределенный И ПометкаУдаления Тогда
			ОписаниеОшибки = НСтр("ru = 'Пометка на удаление предопределенного элемента справочника запрещена'; en = 'It is forbidden to mark for deletion predefined catalog elements'");
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		ПометкаИБ = ПометкаУдаленияВИБ();
		Если ПометкаУдаления И Не ПометкаИБ Тогда
			
			// Проверка права "Пометка на удаление".
			Если НЕ РаботаСФайламиПереопределяемый.ПометкаУдаленияРазрешена(Ссылка) Тогда
				ВызватьИсключение СтрШаблон(
				                     НСтр("ru = 'У вас нет права ""Пометка на удаление"" папки файлов ""%1"".'; en = 'You have no right to ""Mark to delete"" for file folder ""%1"".'"),
				                     Строка(Ссылка));
			КонецЕсли;
		КонецЕсли;
		
		Если ПометкаУдаления <> ПометкаИБ И Не Ссылка.Пустая() Тогда
			// Отбираем файлы и пытаемся поставить им пометку удаления
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Файлы.Ссылка,
				|	Файлы.Редактирует
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|ГДЕ
				|	Файлы.ВладелецФайла = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.Редактирует.Пустая() Тогда
					ВызватьИсключение СтрШаблон(
					                     НСтр("ru = 'Папку %1 нельзя удалить, т.к. она содержит файл ""%2"", занятый для редактирования.'; en = 'The folder %1 cannot be deleted because it contains the file ""%2"" locked for editing.'"),
					                     Строка(Ссылка),
					                     Строка(Выборка.Ссылка));
				КонецЕсли;

				ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФайлОбъект.Заблокировать();
				ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ПрошлыйЭтоНовый", ЭтоНовый());
		
		Если НЕ ЭтоНовый() Тогда
			
			Если Наименование <> Ссылка.Наименование Тогда // переименована папка
				РабочийКаталогЭтойПапки = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Ссылка);
				РабочийКаталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Ссылка.Родитель);
				Если РабочийКаталог <> "" Тогда
					
					// Добавляем слэш в конце, если его нет
					РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
						РабочийКаталог, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
					
					РабочийКаталогУнаследованныйПрежний = РабочийКаталог + Ссылка.Наименование 
						+ ФайловыеФункцииКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
					Если РабочийКаталогУнаследованныйПрежний = РабочийКаталогЭтойПапки Тогда
						РабочийКаталог = РабочийКаталог + Наименование 
							+ ФайловыеФункцииКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
						РаботаСФайламиВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталог);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Родитель <> Ссылка.Родитель Тогда // перенесли папку в другую папку
				РабочийКаталогЭтойПапки = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Ссылка);
				РабочийКаталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Ссылка.Родитель);
				РабочийКаталогНовый = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Родитель);
				Если РабочийКаталог <> "" ИЛИ РабочийКаталогНовый <> "" Тогда
					
					РабочийКаталогУнаследованныйПрежний = РабочийКаталог;
					
					Если РабочийКаталог <> "" Тогда
						РабочийКаталогУнаследованныйПрежний = РабочийКаталогУнаследованныйПрежний + Ссылка.Наименование + ФайловыеФункцииКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
					КонецЕсли;
					
					Если РабочийКаталогУнаследованныйПрежний = РабочийКаталогЭтойПапки Тогда // рабочий каталог автоформируется от родителя
						
						Если РабочийКаталогНовый <> "" Тогда
							РабочийКаталогНовый = РабочийКаталогНовый + Наименование + ФайловыеФункцииКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
							РаботаСФайламиВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталогНовый);
						Иначе
							РаботаСФайламиВызовСервера.ОчиститьРабочийКаталог(Ссылка);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Если ДополнительныеСвойства.ПрошлыйЭтоНовый Тогда
			РабочийКаталогВладельца = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Родитель);
			Если РабочийКаталогВладельца <> "" Тогда
				
				// Добавляем слэш в конце, если его нет
				РабочийКаталогВладельца = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					РабочийКаталогВладельца, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
				
				РабочийКаталогВладельца = РабочийКаталогВладельца + Наименование 
					+ ФайловыеФункцииКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
				РаботаСФайламиВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталогВладельца);
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДатаСоздания = ТекущаяДатаСеанса();
	Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
КонецПроцедуры

// Возвращает текущее значение пометки удаления в информационной базе
Функция ПометкаУдаленияВИБ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиФайлов.ПометкаУдаления
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПометкаУдаления;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНайденныхНедопустимыхСимволов = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(Наименование);
	Если МассивНайденныхНедопустимыхСимволов.Количество() <> 0 Тогда
		Отказ = Истина;
		
		Текст = НСтр("ru = 'Наименование папки содержит запрещенные символы ( \ / : * ? "" < > | .. )'; en = 'A folder name cannot contains any of the following characters: (\/: *? "" <> | .. )'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "Наименование");
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
