
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	Параметры.ПисьмоОснование = Параметры.Основание;
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Ссылка
			|	И НЕ ПроектныеЗадачи.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
			|ГДЕ
			|	КонтрольныеТочки.ОбъектКТ = &Ссылка
			|	И НЕ КонтрольныеТочки.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		ЕстьЗадачиКонтрольныеТочкиПроекта = Не Запрос.Выполнить().Пустой();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда 
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		НастройкаИспользоватьОбзорПроектов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСПроектами", "ИспользоватьОбзорПроектов");
		Если НастройкаИспользоватьОбзорПроектов = Неопределено Тогда 
			ИспользоватьОбзорПроектов = Истина;
		Иначе
			ИспользоватьОбзорПроектов = НастройкаИспользоватьОбзорПроектов;
		КонецЕсли;	
	
		Если ИспользоватьОбзорПроектов Тогда 
			Элементы.Обзор.Видимость = Истина;
		Иначе	
			Элементы.Обзор.Видимость = Ложь;
		КонецЕсли;
		
	Иначе	
		
		Элементы.Обзор.Видимость = Ложь;
		
	КонецЕсли;
	
	// Установка даты начала
	ТекущаяДата = ТекущаяДатаСеанса();
	Если Объект.Ссылка.Пустая() Тогда	
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			
			Если ИспользоватьГрафикиРаботы Тогда 
				Объект.ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
					Объект.ГрафикРаботы,
					ТекущаяДата - Секунда(ТекущаяДата));
			Иначе
				Объект.ТекущийПланНачало = НачалоДня(ТекущаяДата);
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;	
	
	Если Объект.Состояние = Перечисления.СостоянияПроектов.Завершен Тогда
		ПроектЗавершен = Истина;	
	Иначе
		ПроектЗавершен = Ложь;
	КонецЕсли;
	НачальноеСостояние = Объект.Состояние;
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	// Копирование
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		// Копирование задач и контрольных точек
		Если Параметры.Свойство("КопироватьЗадачиКонтрольныеТочки") И Параметры.КопироватьЗадачиКонтрольныеТочки Тогда
			КопироватьЗадачиКонтрольныеТочки = Истина;
			ПроектЗначениеКопирования = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Рабочие группы
	Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	РаботаСРабочимиГруппами.ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(ЭтаФорма);
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);	
		
	ВывестиИнфоНадписи();
	
	ВывестиСтрокуСостояний();
	
	Если Не Объект.ЗагруженИзMSProject Тогда
		Элементы.ГруппаЗагрузкаИзВнешнейСистемы.Видимость = Ложь;
	КонецЕсли;
	
	// Установка режима "Только просмотр" для проектов, которые редактируются в сторонней системе
	УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме();
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Заполнение рабочих групп
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);	
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	ПроверитьОтсутствие = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	
	ПолучитьОбзорПроекта();
		
	// Заказчик текст
	Если ТипЗнч(Объект.Заказчик) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(Объект.Заказчик) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Объект.Заказчик) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ЗаказчикТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", Объект.Заказчик);
		
	ИначеЕсли ТипЗнч(Объект.Заказчик) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Заказчик, "Владелец");
		ЗаказчикТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Контрагент, Объект.Заказчик);
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработка Категории
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
		
	ИначеЕсли (ИмяСобытия = "СозданаПроектнаяЗадача"
		ИЛИ ИмяСобытия = "ИзмененаПроектнаяЗадача")
		И Параметр.Проект = Объект.Ссылка Тогда 
		
		Прочитать();
	
	ИначеЕсли ИмяСобытия = "ЗаписьКонтроля" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ОбработатьЗаписьКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "СозданаТемаПоПредмету" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ВывестиСтрокуСостояний();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ОценкаКТ"
		И Параметр = Объект.Ссылка Тогда 
			ВывестиКартинкуКонтрольныхТочек();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);

	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ПроектнаяКоманда, "Исполнитель");
	
	Если Не ПараметрыЗаписи.Свойство("ПродолжитьЗаписьПослеОтветаНаВопрос") 
		И НачальноеСостояние <> Объект.Состояние 
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПроектов.Завершен") 
		И ЗначениеЗаполнено(Объект.Ссылка) 
		И РаботаСПроектами.ЕстьНезавершенныеПроектныеЗадачи(Объект.Ссылка) Тогда 
		ТекстВопроса = НСтр("ru = 'В проекте имеются незавершенные проектные задачи. Вы действительно хотите отметить проект как завершенный?'; en = 'There are unfinished project tasks in the project. Are you sure you want to mark the project as a completed one?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ИнформацияОбОтсутствии = Неопределено;
	Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроекту(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПослеВопросаОВозможностиОтсутствия",
			ЭтотОбъект, ПараметрыЗаписи);
		ОтсутствияКлиент.ПоказатьПредупреждениеОбОтсутствииПоПроекту(
			ИнформацияОбОтсутствии, ОписаниеОповещения, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	НачальноеСостояние = Объект.Состояние;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОВозможностиОтсутствия(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОтсутствие = Ложь;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ПараметрыЗаписи.Вставить("ПродолжитьЗаписьПослеОтветаНаВопрос", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		// установка связей
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.ПисьмоОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);

	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	Если КопироватьЗадачиКонтрольныеТочки Тогда
		// Копирование задач	
		СкопированныеЗадачи = Новый ТаблицаЗначений;
		СкопированныеЗадачи.Колонки.Добавить("НоваяСсылка");
		СкопированныеЗадачи.Колонки.Добавить("СтараяСсылка");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка,
		|	ПроектныеЗадачи.КодСДР,
		|	ПроектныеЗадачи.НомерЗадачиВУровне,
		|	ПроектныеЗадачи.СуммарнаяЗадача
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &ВладелецЗадачи
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("ВладелецЗадачи", ПроектЗначениеКопирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроектнаяЗадачаКопия = Выборка.Ссылка.Скопировать();
			ПроектнаяЗадачаКопия.Владелец = Объект.Ссылка;
			
			Если ЗначениеЗаполнено(ПроектнаяЗадачаКопия.Родитель) Тогда
				РодительСтрока = СкопированныеЗадачи.Найти(ПроектнаяЗадачаКопия.Родитель, "СтараяСсылка");
				ПроектнаяЗадачаКопия.Родитель = РодительСтрока.НоваяСсылка; 
			КонецЕсли;
			
			ПроектнаяЗадачаКопия.КодСДР = Выборка.КодСДР;
			ПроектнаяЗадачаКопия.НомерЗадачиВУровне = Выборка.НомерЗадачиВУровне;
			ПроектнаяЗадачаКопия.СуммарнаяЗадача = Выборка.СуммарнаяЗадача;
			ПроектнаяЗадачаКопия.Записать();
			
			СтруктураДанных = Новый Структура(
				"ТекущийПланНачало,ТекущийПланОкончание,
				|ТекущийПланДлительность,ТекущийПланЕдиницаДлительности");

			ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Выборка.Ссылка);	
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПроектнойЗадачи);
			РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ПроектнаяЗадачаКопия.Ссылка, СтруктураДанных);
			
			СкопированнаяЗадача = СкопированныеЗадачи.Добавить();
			СкопированнаяЗадача.НоваяСсылка = ПроектнаяЗадачаКопия.Ссылка;
			СкопированнаяЗадача.СтараяСсылка = Выборка.Ссылка;
			
		КонецЦикла;	
		
		Выборка = Справочники.ПроектныеЗадачи.Выбрать( , Объект.Ссылка);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Предшественники.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;	
				
			ВыборкаОбъект = Выборка.ПолучитьОбъект();
			Для Каждого Строка Из ВыборкаОбъект.Предшественники Цикл
				Если ЗначениеЗаполнено(Строка.Предшественник) Тогда 
					ПредшественникСтрока = СкопированныеЗадачи.Найти(Строка.Предшественник, "СтараяСсылка");
					Строка.Предшественник = ПредшественникСтрока.НоваяСсылка; 
				КонецЕсли;	
			КонецЦикла;	
			ВыборкаОбъект.Записать();
				
		КонецЦикла;	
		
		РаботаСПроектами.РассчитатьПланВсегоПроекта(Объект.Ссылка);
		
		// Копирование контрольных точек
		СкопированныеГруппы = Новый ТаблицаЗначений;
		СкопированныеГруппы.Колонки.Добавить("СтараяГруппа");
		СкопированныеГруппы.Колонки.Добавить("НоваяГруппа");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыКТ.Ссылка,
		|	ГруппыКТ.Наименование
		|ИЗ
		|	Справочник.ГруппыКонтрольныхТочек КАК ГруппыКТ
		|ГДЕ
		|	ГруппыКТ.ОбъектКТ = &ОбъектКТ
		|	И ГруппыКТ.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КТ.Ссылка,
		|	КТ.ГруппаКТ,
		|	КТ.КодКТ,
		|	КТ.Комментарий,
		|	КТ.Описание,
		|	КТ.ПлановыйСрок,
		|	КТ.Ответственный,
		|	КТ.Проверяющий,
		|	КТ.Результат,
		|	КТ.УровеньКТ
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК КТ
		|ГДЕ
		|	КТ.ОбъектКТ = &ОбъектКТ
		|	И КТ.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ОбъектКТ", ПроектЗначениеКопирования);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаГруппыКТ = РезультатЗапроса[0].Выбрать();
		ВыборкаКТ = РезультатЗапроса[1].Выбрать();
		
		Пока ВыборкаГруппыКТ.Следующий() Цикл
			НоваяГруппаКТ = Справочники.ГруппыКонтрольныхТочек.СоздатьЭлемент();		
			НоваяГруппаКТ.Наименование = ВыборкаГруппыКТ.Наименование;
			НоваяГруппаКТ.Ответственный = Пользователи.ТекущийПользователь();
			НоваяГруппаКТ.ОбъектКТ = Объект.Ссылка;
			НоваяГруппаКТ.Записать();
			
			СкопированнаяГруппа = СкопированныеГруппы.Добавить();
			СкопированнаяГруппа.СтараяГруппа = ВыборкаГруппыКТ.Ссылка;
			СкопированнаяГруппа.НоваяГруппа = НоваяГруппаКТ.Ссылка;
			
		КонецЦикла;
		
		Пока ВыборкаКТ.Следующий() Цикл
			НоваяКТ = Справочники.КонтрольныеТочки.СоздатьЭлемент();		
			ЗаполнитьЗначенияСвойств(НоваяКТ, ВыборкаКТ);
			НоваяКТ.ОбъектКТ = Объект.Ссылка;
			Если ЗначениеЗаполнено(ВыборкаКТ.ГруппаКТ) Тогда
				СкопированнаяСтрока = СкопированныеГруппы.Найти(ВыборкаКТ.ГруппаКТ, "СтараяГруппа");
				НоваяКТ.ГруппаКТ = СкопированнаяСтрока.НоваяГруппа;	
			КонецЕсли;
			НоваяКТ.Записать();
			
		КонецЦикла;
		
		КопироватьЗадачиКонтрольныеТочки = Ложь;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	ПолучитьОбзорПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаНаВнешнийФайлНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.СсылкаНаВнешнийФайл) = Тип("Строка") Тогда
		ЗапуститьПриложение(Объект.СсылкаНаВнешнийФайл);
	ИначеЕсли ТипЗнч(Объект.СсылкаНаВнешнийФайл) = Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(, Объект.СсылкаНаВнешнийФайл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Руководитель);		
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ПолучитьРабочуюДату(Объект.ТекущийПланОкончание, "Объект.ТекущийПланОкончание", Ложь);
	ВывестиИнфоНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыПриИзменении(Элемент)
	
	ВывестиИнфоНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ПолучитьРабочуюДату(Объект.ТекущийПланНачало, "Объект.ТекущийПланНачало", Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПроектаПриИзменении(Элемент)
	
	ПриИзмененииВидПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке проект необходимо записать.'; en = 'Project must be saved to navigate to link. Save the project?'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для постановки на контроль проект необходимо записать.'; en = 'Project must be saved to start monitoring it. Save the project?'"));
		Возврат;
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке проект необходимо записать.'; en = 'Project must be saved to navigate to link. Save the project?'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры
	
&НаКлиенте
Процедура КартинкаСветофорНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКонтрольныеТочкиОбъекта();		
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроектнаяКоманда

&НаКлиенте
Процедура ПроектнаяКомандаПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ПроектнаяКоманда.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника проектной команды'; en = 'Selecting project team member'"));
	
	Если Элементы.ПроектнаяКоманда.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты",
			Элементы.ПроектнаяКоманда.ТекущиеДанные.Исполнитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ПроектнаяКомандаИсполнитель,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ПроектнаяКоманда.Очистить();
	Для Каждого ВыбранныйИсполнитель Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.ПроектнаяКоманда.Добавить();
		НоваяСтрока.Исполнитель = ВыбранныйИсполнитель;
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКатегорийДанных

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКТ(Команда)
	
	ОткрытьКонтрольныеТочкиОбъекта();	
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлан(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПланПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Для перехода к плану проект необходимо записать. Выполнить запись?'; en = 'Project must be saved to proceed to the plan. Save the project?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Ок);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ОткрытьФорму("Справочник.ПроектныеЗадачи.Форма.ФормаПланаПроекта", ПараметрыФормы);

КонецПроцедуры	

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ПроектЗавершен,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПараметрыОповещения = Неопределено;
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзMSProject(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьИзMSProjectПродолжение",
		ЭтотОбъект);	

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ОткрытьФорму("Обработка.ИмпортПроектаИзMicrosoftProject.Форма", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзMSProjectПродолжение(Результат, Параметры) Экспорт 
	
	Прочитать();

КонецПроцедуры	

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуПроекта(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуПроектаПродолжение",
		ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?';
|en = 'Working group will be filled automatically. All changes will be deleted. 
|Do you want to continue?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуПроектаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуПроектаСервер();
	КонецЕсли;

КонецПроцедуры

 &НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СкопироватьПродолжение",
		ЭтотОбъект);	
	
	Если ЕстьЗадачиКонтрольныеТочкиПроекта Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Копировать задачи и контрольные точки проекта ""%1""?'; en = 'Copy tasks and milestones of ""%1"" project?'"),
			Строка(Объект.Наименование));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, КопироватьЗадачи", Объект.Ссылка, Истина);
		ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Объект.Ссылка);
	    ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбранныеАдресаты = Новый Массив;
	
	Для Каждого СтрИсполнитель Из Объект.ПроектнаяКоманда Цикл
		Если Не ЗначениеЗаполнено(СтрИсполнитель.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		ВыбранныеАдресаты.Добавить(СтрИсполнитель.Исполнитель);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор участников проектной команды'; en = 'Filling project team members'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные участники:'; en = 'Selected members:'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все возможные участники проектной команды:'; en = 'All possible project team members:'"));
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ПроектнаяКоманда,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"КомплексныйПроцесс", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение") 
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда
		ОписаниеПредупреждения = Новый ОписаниеОповещения(
			"ПослеЗаписиПродолжениеПослеПредупреждения",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ПоказатьПредупреждение(ОписаниеПредупреждения,
			НСтр("ru = 'Документы с данным проектом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'; en = 'Documents by this project will be unregisterable because there are no appropriate numeration settings.'"));
		Возврат;	
	КонецЕсли;	

	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжениеПослеПредупреждения(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРабочуюДату(Дата, ПутьКДанным, Начало)
	
	Если ЗначениеЗаполнено(Дата) И Дата = НачалоДня(Дата) Тогда
		
		Если ИспользоватьГрафикиРаботы Тогда 
			
			Если ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда
				ГрафикПланирования = Объект.ГрафикРаботы;
			Иначе
				ГрафикПланирования = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			КонецЕсли;
			
			Если ГрафикиРаботы.ЭтоРабочийДень(Дата, ГрафикПланирования) Тогда
				Если Начало Тогда
					Дата = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(ГрафикПланирования, Дата);
				Иначе
					Дата = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикПланирования, Дата);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Начало Тогда
				Дата = НачалоДня(Дата);
			Иначе
				Дата = КонецДня(Дата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме()
	
	Просмотр = Объект.РедактируетсяВСтороннейСистеме;
	Элементы.ТекущийПланНачало.ТолькоПросмотр = Просмотр;
	Элементы.ТекущийПланОкончание.ТолькоПросмотр = Просмотр;
	Элементы.ГрафикРаботы.ТолькоПросмотр = Просмотр;
	Элементы.ЕдиницаТрудозатратЗадач.ТолькоПросмотр = Просмотр;
	Элементы.ЕдиницаДлительностиЗадач.ТолькоПросмотр = Просмотр;
	Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Просмотр;
	Элементы.ПроектнаяКоманда.ТолькоПросмотр = Просмотр;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнфоНадписи()
	
	ОкончаниеПоДаннымЗадач = ОкончаниеПоДаннымЗадач(Объект.Ссылка);
	
	Если НачалоДня(ОкончаниеПоДаннымЗадач) = НачалоДня(Объект.ТекущийПланОкончание) Тогда 
		Элементы.ОкончаниеПоДаннымЗадач.Заголовок = "";
	Иначе
		Элементы.ОкончаниеПоДаннымЗадач.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(по данным задач: %1)'; en = '(by tasks data: %1)'"),
			Формат(ОкончаниеПоДаннымЗадач, "ДЛФ=D"));
		
		Если ОкончаниеПоДаннымЗадач > Объект.ТекущийПланОкончание Тогда 
			Элементы.ОкончаниеПоДаннымЗадач.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе 
			Элементы.ОкончаниеПоДаннымЗадач.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		КонецЕсли;
	КонецЕсли;
	
	ТрудозатратыПоДаннымЗадач = ТрудозатратыПоДаннымЗадач(Объект.Ссылка);
	Если ТрудозатратыПоДаннымЗадач = 0 
		Или ТрудозатратыПоДаннымЗадач = Объект.ТекущийПланТрудозатраты Тогда 
		Элементы.ТрудозатратыПоДаннымЗадач.Заголовок = "";
	Иначе
		Элементы.ТрудозатратыПоДаннымЗадач.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(по данным задач: %1)'; en = '(by tasks data: %1)'"),
			Формат(ТрудозатратыПоДаннымЗадач, "ЧЦ=10; ЧДЦ=2; ЧН=0"));
			
		Если ТрудозатратыПоДаннымЗадач > Объект.ТекущийПланТрудозатраты Тогда 
			Элементы.ТрудозатратыПоДаннымЗадач.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе 
			Элементы.ТрудозатратыПоДаннымЗадач.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОкончаниеПоДаннымЗадач(ПроектСсылка)
	
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Возврат Объект.ТекущийПланОкончание;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	(НЕ ПроектныеЗадачи.ПометкаУдаления)
		|	И ПроектныеЗадачи.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Объект.ТекущийПланОкончание;
	КонецЕсли;
	
	ДатаОкончанияПоПлану = РаботаСПроектами.ВычислитьТекущийПланОкончанияПроекта(ПроектСсылка);
	
	Возврат ДатаОкончанияПоПлану;
	
КонецФункции

&НаСервере
Функция ТрудозатратыПоДаннымЗадач(ПроектСсылка)
	
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ТекущийПланТрудозатраты) Тогда 
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	(НЕ ПроектныеЗадачи.ПометкаУдаления)
		|	И ПроектныеЗадачи.Владелец = &Владелец";
		
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;
	
	ТрудозатратыПоПлану = РаботаСПроектами.ВычислитьПлановыеТрудозатратыПроекта(ПроектСсылка);
	
	Возврат ТрудозатратыПоПлану;
	
КонецФункции

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуПроектаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПроекта()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуСостояний() 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Картинка Взаимодействие
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					Задача.ЗадачаИсполнителя КАК Задачи
			|				ГДЕ
			|					Проекты.Ссылка = Задачи.Проект
			|					И НЕ Задачи.ПометкаУдаления
			|					И НЕ Задачи.Выполнена
			|	
			|				ОБЪЕДИНИТЬ ВСЕ
			|	
			|				ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
			|				ГДЕ
			|					Проекты.Ссылка = ПредметыЗадач.Предмет
			|					И НЕ ПредметыЗадач.Ссылка.ПометкаУдаления
			|					И НЕ ПредметыЗадач.Ссылка.Выполнена)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьЗадачи
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.Ссылка = &Проект";
		Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		ЕстьЗадачи = Результат.Количество() > 0 И Результат[0].ЕстьЗадачи;
	Иначе
		ЕстьЗадачи = Ложь;
	КонецЕсли;
	
	Элементы.КартинкаВзаимодействие.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	Если ЕстьЗадачи Тогда 
		СтатусВзаимодействие = 1;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Есть выполняющиеся задачи'; en = 'Has active tasks'");
	Иначе	
		СтатусВзаимодействие = 0;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Нет выполняющихся задач'; en = 'No active tasks'");
	КонецЕсли;	
	
	// Картинка Категории
	Элементы.КартинкаКатегории.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'; en = 'Has categories'");
	Иначе
		СтатусКатегории = 0;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'; en = 'No categories'");
	КонецЕсли;	
	
	// Картинка форум
	Тема = РаботаСОбсуждениями.НайтиТемуПоПредмету(Объект.Ссылка);
	Если Тема = Неопределено Тогда 
		СтатусФорум = 0;
		Элементы.КартинкаФорум.Подсказка = НСтр("ru = 'Нет обсуждения'; en = 'No forum thread'");
	Иначе
		СтатусФорум = 1;
		Элементы.КартинкаФорум.Подсказка = НСтр("ru = 'Есть обсуждение'; en = 'Has forum thread'");
	КонецЕсли;	
	
	// Картинка контроль
	Элементы.КартинкаКонтроль.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
	// Картинка светофор КТ
	Элементы.КартинкаКонтроль.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеТочки");
	ВывестиКартинкуКонтрольныхТочек();	
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьЗаписьКонтроля()
	
	ВывестиКартинкуКонтроля();
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтроля()
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтрольныхТочек()

	КонтрольныеТочки.ВывестиКартинкуКонтрольныхТочек(ЭтаФорма);	

КонецПроцедуры 

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Обзор И Модифицированность Тогда
		ПолучитьОбзорПроекта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбзорПроекта()
	
	Если Не ИспользоватьОбзорПроектов Тогда 
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорПроекта(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Лев(ДанныеСобытия.Href, СтрДлина("v8doc:")) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;	
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, СтрДлина("v8doc:") + 1);
	
	Если Найти(НавигационнаяСсылкаПоля, "message") > 0 Тогда 	
		
		АдресПочты = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "message", ""));
		
		РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты,,,,,, Объект.Ссылка);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "team") > 0 Тогда 
		
		ВстроеннаяПочтаКлиент.СоздатьПисьмоНаОсновании(Объект.Ссылка);
				
	Иначе
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрольныеТочкиОбъекта()

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьКонтрольныеТочкиОбъектаПродолжение",
		ЭтотОбъект);
		
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Для перехода к контрольным точкам проект необходимо записать. 
								|Выполнить запись?';
								|en = 'The project must be saved before proceeding to milestones.
								|Save the project?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Ок);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьКонтрольныеТочкиОбъектаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);

	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектКТ", Объект.Ссылка);
	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.КТОбъекта",ПараметрыФормы,,Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЗаказчикТекст) Тогда
		Объект.Заказчик = Неопределено;
		ЗаказчикТекст = Неопределено;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Ложь);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьПодразделения", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор заказчика проекта'; en = 'Select project customer'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораЗаказчика", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораЗаказчика(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказчикТекстОбработкаВыбора(Элементы.ЗаказчикТекст, ВыбранныеИсполнители[0].Контакт, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Заказчик = Неопределено;
	ЗаказчикТекст = Неопределено;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ЗаказчикТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Заказчик = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		
		ЗаказчикТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Контрагент, ВыбранноеЗначение);
		Объект.Заказчик = ВыбранноеЗначение;
						
	КонецЕсли;
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораЗаказчика(ПараметрыПолученияДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Заказчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		ДанныеВыбора = СформироватьДанныеВыбораЗаказчика(ПараметрыПолученияДанных);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ЗаказчикТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораЗаказчика(Параметры)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	ДанныеВыбораПользователи = Справочники.Пользователи.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораКонтрагенты = Справочники.Контрагенты.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораСтруктураПредприятия = Справочники.СтруктураПредприятия.ПолучитьДанныеВыбора(Параметры);
	
	Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораКонтрагенты Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораСтруктураПредприятия Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
		
КонецФункции 

#КонецОбласти
